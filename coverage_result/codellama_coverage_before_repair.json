[
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/system/base/controller",
        "package_name": "org.jeecg.common.system.base.controller",
        "class_name": "JeecgController",
        "method_name": "exportXlsSheet",
        "test_code": "\npackage org.jeecg.common.system.base.controller;\n\nimport com.alibaba.fastjson.JSONObject;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.poi.ss.formula.functions.T;\nimport org.jeecg.common.api.vo.Result;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n@Api(tags=\"jeecg-controller\")\n@RestController\n@Slf4j\npublic class JeecgController {\n    @Autowired\n    private T service;\n    /**\n     * \u83b7\u53d6\u6570\u636e\u5217\u8868\n     */\n    @GetMapping(\"/getList\")\n    public Result<?> query(HttpServletRequest request, HttpServletResponse response, T t) throws IOException{\n        return null;\n    }\n}\n",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": -1
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/system/base/controller",
        "package_name": "org.jeecg.common.system.base.controller",
        "class_name": "JeecgController",
        "method_name": "exportXlsSheet",
        "test_code": "package org.jeecg.modules.demo.vo;\n\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Data;\n\nimport java.io.Serializable;\n\n/**\n * \u90e8\u95e8\u6a21\u5757-Vo\u5bf9\u8c61\n * @author scott\n * @date 2019-08-13\n */\n@Data\npublic class DepartmentVO implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    /** \u4e3b\u952eID */\n    @ApiModelProperty(value = \"\u4e3b\u952eID\")\n    private java.lang.String id;\n\n    /** \u4e0a\u7ea7\u90e8\u95e8id */\n    @ApiModelProperty(value = \"\u4e0a\u7ea7\u90e8\u95e8id\")\n    private java.lang.String parentId;\n\n    /** \u90e8\u95e8\u540d\u79f0 */\n    @ApiModelProperty(value = \"\u90e8\u95e8\u540d\u79f0\")\n    private java.lang.String name;\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/system/query",
        "package_name": "org.jeecg.common.system.query",
        "class_name": "QueryGenerator",
        "method_name": "installMplus",
        "test_code": "package com.xiaojukeji.kafka.manager.common.utils;\n\nimport java.util.regex.Pattern;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * @author zengqiao\n * @date 19/4/20\n */\npublic class ValidationUtils {\n    private static final Logger LOGGER = LoggerFactory.getLogger(ValidationUtils.class);\n\n    /**\n     * \u5b57\u7b26\u4e32\u662f\u5426\u5408\u6cd5, \u975e\u7a7a\u4e14\u4e0d\u5305\u542b\u7a7a\u767d\u7b26\n     */\n    public static boolean legalString(String str) {\n        return StringUtils.isNotBlank(str) && !containsWhitespace(str);\n    }\n\n    /**\n     * \u662f\u5426\u5305\u542b\u7a7a\u683c\n     */\n    private static boolean containsWhitespace(CharSequence str) {\n        if (StringUtils.isEmpty(str)) {\n            return false;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; ++i) {\n            if (Character.isWhitespace(str.charAt(i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void illegalStringException(String str, String paramName) {\n        if (!legalString(str)) {\n            throw new IllegalArgumentException(paramName + \" is illegal!\");\n        }\n    }\n}\n    \n",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/system/query",
        "package_name": "org.jeecg.common.system.query",
        "class_name": "QueryGenerator",
        "method_name": "installMplus",
        "test_code": "package org.jeecg.common.system.query;\n\nimport java.util.Map;\n\npublic class QueryWrapper<T> extends com.baomidou.mybatisplus.core.conditions.query.QueryWrapper<T> {\n    private static final long serialVersionUID = 1L;\n\n    public void installMPlus(Object searchObj, Map<String, String> parameterMap) {}\n}\n",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/security",
        "package_name": "org.jeecg.common.util.security",
        "class_name": "JdbcSecurityUtil",
        "method_name": "validate",
        "test_code": "\npackage org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    @Test\n    public void validateTest() {\n        String jdbcUrl = \"jdbc:postgresql://localhost/mydatabase?user=dbadmin&password=dbadmin\";\n        JdbcSecurityUtil.validate(jdbcUrl);\n        assertEquals(true, true); // This line should be replaced with the actual assertion that checks whether the validate method correctly validates the given jdbcUrl.\n    }\n}",
        "package_metric": 7.64,
        "class_metric": 73.33,
        "method_metric": 76.92,
        "pitest": 33.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/security",
        "package_name": "org.jeecg.common.util.security",
        "class_name": "JdbcSecurityUtil",
        "method_name": "validate",
        "test_code": "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    @Test\n    public void validateTest() {\n        // Test with null jdbcUrl\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(null));\n\n        // Test with empty jdbcUrl\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"\"));\n\n        // Test with valid jdbcUrl\n        String jdbcUrl = \"jdbc:postgresql://localhost/test?user=postgres&password=mysecretpassword\";\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(jdbcUrl));\n    }\n}",
        "package_metric": 8.33,
        "class_metric": 80.0,
        "method_metric": 84.62,
        "pitest": 50.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/security",
        "package_name": "org.jeecg.common.util.security",
        "class_name": "JdbcSecurityUtil",
        "method_name": "validate",
        "test_code": "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    @Test\n    public void validateTest() {\n        String jdbcUrl = \"jdbc:mysql://localhost/test?user=root&password=123456\";\n        JdbcSecurityUtil.validate(jdbcUrl);\n        \n        assertTrue(true); // replace with a meaningful assertion\n    }\n}",
        "package_metric": 7.64,
        "class_metric": 73.33,
        "method_metric": 76.92,
        "pitest": 33.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/desensitization/util",
        "package_name": "org.jeecg.common.desensitization.util",
        "class_name": "SensitiveInfoUtil",
        "method_name": "getEncodeData",
        "test_code": "package org.jeecg.common.desensitization.util;\n\nimport java.util.*;\n\npublic class SensitiveInfoUtil {\n\n  /**\n   * \u83b7\u53d6\u5404\u654f\u611f\u4fe1\u606f\u7684\u7f16\u7801\u7ed3\u679c\n   * @param sensitiveType \u654f\u611f\u7c7b\u578b\n   * @param data \u9700\u8981\u8fdb\u884c\u7f16\u7801\u7684\u6570\u636e\n   * @return \u7f16\u7801\u540e\u7684\u7ed3\u679c\n   */\n    public static String encode(String sensitiveType, String data){\n        return null;\n    }\n}\n\n    ",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/desensitization/util",
        "package_name": "org.jeecg.common.desensitization.util",
        "class_name": "SensitiveInfoUtil",
        "method_name": "getEncodeData",
        "test_code": "\npackage org.jeecg.common.desensitization;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * \u8131\u654f\u7b56\u7565\u63a5\u53e3\n */\npublic interface DesensitizeStrategy {\n    /**\n     * \u8131\u654f\u65b9\u6cd5\n     * @param dataMap \u5f85\u8131\u654f\u7684\u6570\u636eMap\uff0ckey\u4e3a\u5b57\u6bb5\u540d\u79f0\n     * @return Map<String, String> \u8131\u654f\u540e\u7684\u6570\u636eMap\n     */\n    public Map<String, String> desensitize(Map<String, String> dataMap);\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/aspect",
        "package_name": "org.jeecg.common.aspect",
        "class_name": "DictAspect",
        "method_name": "parseDictText",
        "test_code": "package com.example;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\npublic class Controller {\n    @GetMapping(\"/example\")\n    public ResponseEntity<Object> example() {\n        return new ResponseEntity<>(\"Example output\", HttpStatus.OK);\n    }\n}\n",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/aspect",
        "package_name": "org.jeecg.common.aspect",
        "class_name": "DictAspect",
        "method_name": "parseDictText",
        "test_code": "package org.jeecg.common.system.vo;\n\nimport lombok.Data;\n\n/**\n * \u5b57\u5178\u6a21\u578b\n */\n@Data\npublic class DictModel {\n    /**\n     * \u5b57\u5178value\n     */\n    private String value;\n\n    /**\n     * \u5b57\u5178\u6587\u672c\n     */\n    private String text;\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/aspect",
        "package_name": "org.jeecg.common.aspect",
        "class_name": "DictAspect",
        "method_name": "parseDictText",
        "test_code": "package org.jeecg.modules.demo.test;\n\nimport lombok.Data;\nimport org.jeecgframework.poi.excel.annotation.Excel;\nimport org.springframework.format.annotation.DateTimeFormat;\n\nimport java.util.Date;\n\n@Data\npublic class Test {\n    @Excel(name = \"\u5b57\u5178\u6d4b\u8bd5\", width = 20)\n    private String dictTest;\n\n    @DateTimeFormat(pattern=\"yyyy-MM-dd HH:mm:ss\")\n    @Excel(name = \"\u65e5\u671f\u6d4b\u8bd5\", width = 20, exportFormat = \"yyyy-MM-dd HH:mm:ss\")\n    private Date dateTest;\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/desensitization/util",
        "package_name": "org.jeecg.common.desensitization.util",
        "class_name": "SensitiveInfoUtil",
        "method_name": "handleNestedObject",
        "test_code": "package org.jeecg.common.desensitization.util;\n\nimport lombok.*;\nimport java.io.Serializable;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Getter\n@Setter\n@Builder\npublic class User implements Serializable {\n    private String id;\n    private String name;\n    private int age;\n    private LocalDate birthday;\n    private List<String> addresses;\n}\n",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/desensitization/util",
        "package_name": "org.jeecg.common.desensitization.util",
        "class_name": "SensitiveInfoUtil",
        "method_name": "handleNestedObject",
        "test_code": "package org.jeecg.common.desensitization.util;\n\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * @author luke\n */\n@Slf4j\npublic class SensitiveInfoUtil {\n    /**\n     * \u5904\u7406\u5d4c\u5957\u5bf9\u8c61,\u63d2\u5165\u8131\u654f\u7b56\u7565\u903b\u8f91\n     * @param obj    \u9700\u8981\u88ab\u8fc7\u6ee4\u7684\u6570\u636e\u5bf9\u8c61\n     * @return       \u8fd4\u56de\u8fc7\u6ee4\u540e\u7684\u6570\u636e\u5bf9\u8c61\n     */\n    public static <T> T handleNestedObject(T obj) {\n        return null;\n    }\n}\n\n    ",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": -1
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTest() {\n        Object object = new Object();\n        String result = MyClassLoader.getPackPath(object);\n        assertNotNull(result, \"getPackPath returns null\");\n    }\n}",
        "package_metric": 0.17,
        "class_metric": 5.88,
        "method_metric": 75.0,
        "pitest": 5.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "\npackage org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTest() {\n        Object object = null;\n        String expectedResult = \"\";\n        try {\n            // \u8c03\u7528getPackPath\u65b9\u6cd5\uff0c\u5c06object\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\n            expectedResult = MyClassLoader.getPackPath(object);\n            // \u65ad\u8a00\u671f\u671b\u503c\u548c\u8fd4\u56de\u503c\u76f8\u7b49\n            assertEquals(expectedResult, \"\");\n        } catch (Exception e) {\n            // \u5982\u679c\u65b9\u6cd5\u629b\u51fa\u4e86\u5f02\u5e38\uff0c\u5c06\u5f02\u5e38\u4fe1\u606f\u6253\u5370\u8f93\u51fa\n            System.out.println(\"getPackPathTest failed: \" + e.getMessage());\n        }\n    }\n}",
        "package_metric": 0.11,
        "class_metric": 3.92,
        "method_metric": 50.0,
        "pitest": 0.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/pdf417",
        "package_name": "com.google.zxing.pdf417",
        "class_name": "PDF417Common",
        "method_name": "getCodeword",
        "test_code": "package com.google.zxing.pdf417;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PDF417CommonTest {\n    @Test\n    public void getCodewordTest() {\n        int symbol = 0xFFFFF; // arbitrary value for testing purposes\n        int expectedCodeword = -1; // no codeword is associated with this symbol\n        \n        assertEquals(expectedCodeword, PDF417Common.getCodeword(symbol));\n    }\n}",
        "package_metric": 3.87,
        "class_metric": 37.5,
        "method_metric": 75.0,
        "pitest": 15.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common",
        "package_name": "com.google.zxing.common",
        "class_name": "BitArray",
        "method_name": "getNextSet",
        "test_code": "package com.google.zxing;\n\nimport java.util.Arrays;\n\n/**\n * A simple, fast array of bits, represented compactly by an array of ints internally.\n */\npublic final class BitArray {\n    private int[] bits;\n    private int size;\n\n    /**\n     * @param bits  bits to reverse. The first element holds the first 32 bits, and so on.\n     */\n    public static void reverse(int[] bits) {\n        if (bits != null && bits.length > 1) {\n            int reverseIndex = bits.length - 1; // int i = length - 1\n            int lastBit = 31; // int j = 31\n            for (int x = 0, y = bits.length - 1; x < y; x++, y--) {\n                int currentLong = bits[x]; // int a = i\n                int b = bits[y]; // int b = array[j]\n                bits[x] = Integer.reverse(currentLong);\n                bits[y] = Integer.reverse(lastBit);\n            }\n        }\n    }\n    \n}\n",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n    @Test\n    public void equalsTest() {\n        FinderPattern pattern1 = new FinderPattern(123, new int[]{0, 5}, 2, 7, 3);\n        FinderPattern pattern2 = new FinderPattern(123, new int[]{0, 5}, 2, 7, 3);\n        assertTrue(pattern1.equals(pattern2));\n    }\n}",
        "package_metric": 2.1,
        "class_metric": 61.54,
        "method_metric": 75.0,
        "pitest": 25.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n    @Test\n    public void equalsTest() {\n        int value = 123456789;\n        int[] startEnd = new int[2];\n        startEnd[0] = 1000;\n        startEnd[1] = 2000;\n        int rowNumber = 123;\n        FinderPattern finderPattern = new FinderPattern(value, startEnd, startEnd[0], startEnd[1], rowNumber);\n\n        // Test that the equals method returns true when comparing with another instance of FinderPattern with the same value\n        FinderPattern otherFinderPattern = new FinderPattern(value, startEnd, startEnd[0], startEnd[1], rowNumber);\n        assertTrue(finderPattern.equals(otherFinderPattern));\n\n        // Test that the equals method returns false when comparing with another instance of FinderPattern with a different value\n        otherFinderPattern = new FinderPattern(value + 1, startEnd, startEnd[0], startEnd[1], rowNumber);\n        assertFalse(finderPattern.equals(otherFinderPattern));\n\n        // Test that the equals method returns false when comparing with an instance of a different class\n        Object otherObject = new Object();\n        assertFalse(finderPattern.equals(otherObject));\n    }\n}",
        "package_metric": 2.36,
        "class_metric": 69.23,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n    @Test\n    public void equalsTest() {\n        // Create two instances of the FinderPattern class with different values\n        FinderPattern pattern1 = new FinderPattern(0, new int[] { 1, 2 }, 3, 4, 5);\n        FinderPattern pattern2 = new FinderPattern(1, new int[] { 2, 3 }, 4, 5, 6);\n\n        // Invoke the equals method on both instances and verify that the result is false\n        assertFalse(pattern1.equals(pattern2));\n    }\n}",
        "package_metric": 2.1,
        "class_metric": 61.54,
        "method_metric": 75.0,
        "pitest": 25.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n    @Test\n    public void equalsTest() {\n        // Create two finder patterns with the same value and startEnd array\n        FinderPattern pattern1 = new FinderPattern(3, new int[] {0, 5}, 0, 5, 2);\n        FinderPattern pattern2 = new FinderPattern(3, new int[] {0, 5}, 0, 5, 2);\n        \n        // Check that they are equal\n        assertEquals(pattern1, pattern2);\n    }\n}",
        "package_metric": 2.1,
        "class_metric": 61.54,
        "method_metric": 75.0,
        "pitest": 25.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n    @Test\n    public void equalsTest() {\n        FinderPattern pattern1 = new FinderPattern(1, new int[] {1, 2}, 0, 0, 0);\n        FinderPattern pattern2 = new FinderPattern(2, new int[] {2, 3}, 0, 0, 0);\n        assertNotEquals(pattern1, pattern2);\n    }\n}",
        "package_metric": 2.1,
        "class_metric": 61.54,
        "method_metric": 75.0,
        "pitest": 25.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n    @Test\n    public void equalsTest() {\n        // Create two instances of the FinderPattern class with different values\n        FinderPattern pattern1 = new FinderPattern(1, null, 0, 0, 0);\n        FinderPattern pattern2 = new FinderPattern(2, null, 0, 0, 0);\n\n        // Verify that the equals method returns false when comparing two different instances\n        assertFalse(pattern1.equals(pattern2));\n    }\n}",
        "package_metric": 2.1,
        "class_metric": 61.54,
        "method_metric": 75.0,
        "pitest": 25.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n    @Test\n    public void equalsTest() {\n        FinderPattern fp1 = new FinderPattern(1, new int[] {2, 3}, 4, 5, 6);\n        FinderPattern fp2 = new FinderPattern(7, new int[] {8, 9}, 10, 11, 12);\n        assertFalse(fp1.equals(null));\n        assertTrue(fp1.equals(fp1));\n        assertFalse(fp1.equals(fp2));\n    }\n}",
        "package_metric": 2.36,
        "class_metric": 69.23,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Test with two points that are the same (distance should be 0)\n        assertEquals(MathUtils.distance(1, 2, 1, 2), 0);\n\n        // Test with two points that are next to each other (distance should be 1)\n        assertEquals(MathUtils.distance(1, 2, 2, 2), 1);\n\n        // Test with two points that are on the same line but far apart (distance should be > 0)\n        assertTrue(MathUtils.distance(1, 2, 100, 2) > 0);\n\n        // Test with two points that are on different lines (distance should be > 0)\n        assertTrue(MathUtils.distance(1, 2, 1, 100) > 0);\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 33.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        int aX = 0, aY = 0, bX = 0, bY = 1; // Define test points A and B\n        float expectedDistance = 1.0f; // Expected distance between points A and B\n        float actualDistance = MathUtils.distance(aX, aY, bX, bY); // Calculate the distance using the distance method\n        assertEquals(expectedDistance, actualDistance, 0.001); // Assert that the calculated distance is equal to the expected distance within a small tolerance (0.001)\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 17.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        int aX = 10, aY = 20, bX = 30, bY = 40;\n        float expectedDistance = (float) Math.sqrt(Math.pow((aX - bX), 2) + Math.pow((aY - bY), 2));\n        assertEquals(expectedDistance, MathUtils.distance(aX, aY, bX, bY));\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 33.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "\npackage com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        int aX = 10, aY = 20;\n        int bX = 5, bY = 10;\n        float expectedDistance = (float) Math.sqrt((aX - bX) * (aX - bX) + (aY - bY) * (aY - bY));\n\n        assertEquals(expectedDistance, MathUtils.distance(aX, aY, bX, bY), 0.01);\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 33.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        int aX = 10, aY = 20, bX = 30, bY = 40;\n        float expectedDistance = (float) Math.sqrt((aX - bX) * (aX - bX) + (aY - bY) * (aY - bY));\n        assertEquals(expectedDistance, MathUtils.distance(aX, aY, bX, bY), 0.001);\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 33.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        int aX = 10, aY = 20;\n        int bX = 30, bY = 40;\n        \n        float expectedDistance = (float) Math.sqrt((aX - bX) * (aX - bX) + (aY - bY) * (aY - bY));\n        \n        assertEquals(expectedDistance, MathUtils.distance(aX, aY, bX, bY), 0.01);\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 33.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        float result = MathUtils.distance(0, 0, 3, 4);\n        assertEquals(5.0f, result, 0.1);\n        \n        result = MathUtils.distance(1, 2, 3, 4);\n        assertEquals(2.83f, result, 0.1);\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 33.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "\npackage com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        assertEquals(0, MathUtils.distance(0, 0, 0, 0), 0);\n        assertEquals(1, MathUtils.distance(1, 0, 0, 0), 0);\n        assertEquals(Math.sqrt(2), MathUtils.distance(1, 1, 0, 0), 0.01);\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 22.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        int aX = 10;\n        int aY = 20;\n        int bX = 30;\n        int bY = 40;\n        \n        float expectedDistance = (float) Math.sqrt((aX - bX) * (aX - bX) + (aY - bY) * (aY - bY));\n        float actualDistance = MathUtils.distance(aX, aY, bX, bY);\n        \n        assertEquals(expectedDistance, actualDistance, 0.01f);\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 33.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Test Case 1: (0,0) and (0,0) should be equal\n        assertEquals(0f, MathUtils.distance(0, 0, 0, 0), 0);\n\n        // Test Case 2: (0,0) and (1,1) should not be equal\n        assertNotEquals(MathUtils.distance(0, 0, 1, 1), 0f);\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 22.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        assertEquals(0, MathUtils.distance(0, 0, 0, 0));\n        assertEquals(1, MathUtils.distance(0, 0, 1, 0));\n        assertEquals(2, MathUtils.distance(0, 0, 2, 0));\n        assertEquals(3, MathUtils.distance(0, 0, 3, 0));\n        assertEquals(4, MathUtils.distance(0, 0, 4, 0));\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 17.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service",
        "package_name": "com.ctrip.framework.apollo.biz.service",
        "class_name": "NamespaceBranchService",
        "method_name": "updateRulesReleaseId",
        "test_code": "package com.ctrip.framework.apollo.biz.service;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NamespaceBranchServiceTest {\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // <fill>\n    }\n}\n    \n",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-neuralnet/src/test/java/org/apache/commons/math4/neuralnet",
        "package_name": "org.apache.commons.math4.neuralnet",
        "class_name": "Neuron",
        "method_name": "compareAndSetFeatures",
        "test_code": "\npackage org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        double[] expect = new double[3];\n        double[] update = new double[3];\n        Neuron neuron = new Neuron(1, expect);\n\n        assertTrue(neuron.compareAndSetFeatures(expect, update));\n    }\n}",
        "package_metric": 8.53,
        "class_metric": 51.43,
        "method_metric": 63.64,
        "pitest": 43.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-neuralnet/src/test/java/org/apache/commons/math4/neuralnet",
        "package_name": "org.apache.commons.math4.neuralnet",
        "class_name": "Neuron",
        "method_name": "compareAndSetFeatures",
        "test_code": "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        // Create a neuron with 2 features\n        Neuron neuron = new Neuron(1L, new double[] {0.5, -1.0});\n        \n        // Define expected values and update values\n        double[] expect = {0.5, -1.0};\n        double[] update = {-1.0, 0.5};\n        \n        // Compare features with expected values\n        assertTrue(neuron.compareAndSetFeatures(expect, update));\n        \n        // Check that the features were updated correctly\n        assertArrayEquals(update, neuron.getFeatures());\n    }\n}",
        "package_metric": 9.0,
        "class_metric": 54.29,
        "method_metric": 63.64,
        "pitest": 48.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test with null key and value\n        Pair<Integer, String> p1 = new Pair<>(null, null);\n        Pair<Integer, String> p2 = new Pair<>(null, null);\n        assertEquals(p1, p2);\n\n        // Test with same key and different values\n        Pair<Integer, String> p3 = new Pair<>(1, \"A\");\n        Pair<Integer, String> p4 = new Pair<>(1, \"B\");\n        assertNotEquals(p3, p4);\n\n        // Test with different keys and same values\n        Pair<Integer, String> p5 = new Pair<>(2, \"A\");\n        Pair<Integer, String> p6 = new Pair<>(1, \"A\");\n        assertNotEquals(p5, p6);\n\n        // Test with same keys and values\n        Pair<Integer, String> p7 = new Pair<>(3, \"C\");\n        Pair<Integer, String> p8 = new Pair<>(3, \"C\");\n        assertEquals(p7, p8);\n    }\n}",
        "package_metric": 2.73,
        "class_metric": 41.67,
        "method_metric": 75.0,
        "pitest": 38.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Create two pairs with the same key and value\n        Pair<Integer, Integer> pair1 = new Pair<>(1, 2);\n        Pair<Integer, Integer> pair2 = new Pair<>(1, 2);\n        \n        assertTrue(pair1.equals(pair2));\n    }\n    \n    @Test\n    public void notEqualsKey() {\n        // Create two pairs with different keys\n        Pair<Integer, Integer> pair1 = new Pair<>(1, 2);\n        Pair<Integer, Integer> pair2 = new Pair<>(2, 2);\n        \n        assertFalse(pair1.equals(pair2));\n    }\n    \n    @Test\n    public void notEqualsValue() {\n        // Create two pairs with different values\n        Pair<Integer, Integer> pair1 = new Pair<>(1, 2);\n        Pair<Integer, Integer> pair2 = new Pair<>(1, 3);\n        \n        assertFalse(pair1.equals(pair2));\n    }\n    \n    @Test\n    public void notEqualsNull() {\n        // Create a pair and compare it to null\n        Pair<Integer, Integer> pair = new Pair<>(1, 2);\n        \n        assertFalse(pair.equals(null));\n    }\n}",
        "package_metric": 3.01,
        "class_metric": 45.83,
        "method_metric": 87.5,
        "pitest": 33.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n        assertEquals(pair1, pair2);\n\n        Pair<Integer, String> pair3 = new Pair<>(2, \"two\");\n        assertNotEquals(pair1, pair3);\n    }\n}",
        "package_metric": 2.73,
        "class_metric": 41.67,
        "method_metric": 75.0,
        "pitest": 29.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test that two pairs with the same key and value are considered equal\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 1);\n        assertTrue(pair1.equals(pair2));\n\n        // Test that two pairs with different keys are not considered equal\n        pair1 = new Pair<>(\"key\", 1);\n        pair2 = new Pair<>(\"key2\", 1);\n        assertFalse(pair1.equals(pair2));\n\n        // Test that two pairs with different values are not considered equal\n        pair1 = new Pair<>(\"key\", 1);\n        pair2 = new Pair<>(\"key\", 2);\n        assertFalse(pair1.equals(pair2));\n    }\n}",
        "package_metric": 2.73,
        "class_metric": 41.67,
        "method_metric": 75.0,
        "pitest": 29.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Create two instances of the Pair class with the same key and value\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 1);\n\n        // Check that they are equal\n        assertEquals(pair1, pair2);\n    }\n}",
        "package_metric": 2.73,
        "class_metric": 41.67,
        "method_metric": 75.0,
        "pitest": 21.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // create two Pair objects with the same values\n        Pair<Integer, String> pair1 = new Pair<>(1, \"apple\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"apple\");\n        \n        // check that both pairs are equal\n        assertEquals(pair1, pair2);\n    }\n}",
        "package_metric": 2.73,
        "class_metric": 41.67,
        "method_metric": 75.0,
        "pitest": 21.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"One\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"Two\");\n        assertFalse(pair1.equals(pair2));\n    }\n}",
        "package_metric": 2.73,
        "class_metric": 41.67,
        "method_metric": 75.0,
        "pitest": 13.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test for null key and value\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        assertFalse(pair1.equals(null));\n        assertFalse(pair1.equals(new Object()));\n\n        // Test for same key and different value\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"otherValue\");\n        assertFalse(pair1.equals(pair2));\n\n        // Test for different key and same value\n        Pair<String, String> pair3 = new Pair<>(\"otherKey\", \"value\");\n        assertFalse(pair1.equals(pair3));\n\n        // Test for same key and value\n        Pair<String, String> pair4 = new Pair<>(\"key\", \"value\");\n        assertTrue(pair1.equals(pair4));\n    }\n}",
        "package_metric": 3.01,
        "class_metric": 45.83,
        "method_metric": 87.5,
        "pitest": 33.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test case 1: both key and value are null\n        Pair<Integer, String> pair1 = new Pair<>(null, null);\n        assertEquals(pair1.equals(new Pair<>(null, null)), true);\n\n        // Test case 2: both key and value are not null\n        Pair<Integer, String> pair2 = new Pair<>(1, \"apple\");\n        assertEquals(pair2.equals(new Pair<>(1, \"apple\")), true);\n\n        // Test case 3: only key is null\n        Pair<Integer, String> pair3 = new Pair<>(null, \"orange\");\n        assertEquals(pair3.equals(new Pair<>(null, \"orange\")), true);\n\n        // Test case 4: only value is null\n        Pair<Integer, String> pair4 = new Pair<>(1, null);\n        assertEquals(pair4.equals(new Pair<>(1, null)), true);\n    }\n}",
        "package_metric": 2.73,
        "class_metric": 41.67,
        "method_metric": 75.0,
        "pitest": 29.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Create two pairs with different keys and values\n        Pair<Integer, String> pair1 = new Pair<>(10, \"apple\");\n        Pair<Integer, String> pair2 = new Pair<>(20, \"banana\");\n\n        // Check that the equals method returns false when comparing two pairs with different keys\n        assertFalse(pair1.equals(pair2));\n\n        // Check that the equals method returns true when comparing two pairs with the same keys and values\n        Pair<Integer, String> pair3 = new Pair<>(10, \"apple\");\n        assertTrue(pair1.equals(pair3));\n\n        // Check that the equals method returns false when comparing a pair to an object of a different type\n        Object o = new Object();\n        assertFalse(pair1.equals(o));\n    }\n}",
        "package_metric": 3.01,
        "class_metric": 45.83,
        "method_metric": 87.5,
        "pitest": 33.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test that two pairs with the same key and value are equal\n        Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n        assertEquals(pair1, pair2);\n        \n        // Test that two pairs with different keys but same values are not equal\n        pair1 = new Pair<>(1, \"one\");\n        pair2 = new Pair<>(2, \"one\");\n        assertNotEquals(pair1, pair2);\n        \n        // Test that two pairs with same keys but different values are not equal\n        pair1 = new Pair<>(1, \"one\");\n        pair2 = new Pair<>(1, \"two\");\n        assertNotEquals(pair1, pair2);\n    }\n}",
        "package_metric": 2.73,
        "class_metric": 41.67,
        "method_metric": 75.0,
        "pitest": 29.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test for null values\n        assertFalse(new Pair<>(null, \"value\").equals(null));\n        assertFalse(new Pair<>(\"key\", null).equals(null));\n        \n        // Test for equal keys and values\n        assertTrue(new Pair<>(\"key\", \"value\").equals(new Pair<>(\"key\", \"value\")));\n        \n        // Test for different keys and values\n        assertFalse(new Pair<>(\"key1\", \"value\").equals(new Pair<>(\"key2\", \"value\")));\n        assertFalse(new Pair<>(\"key\", \"value1\").equals(new Pair<>(\"key\", \"value2\")));\n        \n        // Test for null key and non-null value\n        assertFalse(new Pair<>(null, \"value\").equals(new Pair<>(\"key\", \"value\")));\n        \n        // Test for non-null key and null value\n        assertFalse(new Pair<>(\"key\", null).equals(new Pair<>(\"key\", \"value\")));\n    }\n}",
        "package_metric": 3.01,
        "class_metric": 45.83,
        "method_metric": 87.5,
        "pitest": 42.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test that the method returns true when both objects are equal\n        Object o1 = new Object();\n        Pair<?, ?> pair1 = new Pair<>(o1, o1);\n        assertEquals(pair1, pair1);\n        \n        // Test that the method returns false when only one object is null\n        Pair<?, ?> pair2 = new Pair<>(null, o1);\n        assertNotEquals(pair2, pair1);\n        \n        // Test that the method returns false when both objects are not equal\n        Object o3 = new Object();\n        Pair<?, ?> pair3 = new Pair<>(o3, o3);\n        assertNotEquals(pair3, pair1);\n    }\n}",
        "package_metric": 3.01,
        "class_metric": 45.83,
        "method_metric": 87.5,
        "pitest": 21.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 1);\n        assertTrue(pair1.equals(pair2));\n\n        Pair<String, Integer> pair3 = new Pair<>(\"key\", null);\n        Pair<String, Integer> pair4 = new Pair<>(\"key\", null);\n        assertTrue(pair3.equals(pair4));\n\n        Pair<String, Integer> pair5 = new Pair<>(\"key\", 2);\n        Pair<String, Integer> pair6 = new Pair<>(\"key\", 1);\n        assertFalse(pair5.equals(pair6));\n\n        Pair<String, Integer> pair7 = new Pair<>(\"key1\", 1);\n        Pair<String, Integer> pair8 = new Pair<>(\"key2\", 1);\n        assertFalse(pair7.equals(pair8));\n    }\n}\n",
        "package_metric": 2.73,
        "class_metric": 41.67,
        "method_metric": 75.0,
        "pitest": 33.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowexp",
        "test_code": "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double[] result = new double[2];\n        double x = 1.0;\n        double expected = Math.E;\n\n        // Call the method with a valid input\n        double actual = AccurateMathCalc.slowexp(x, result);\n\n        // Check that the result is correct\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 2.65,
        "class_metric": 19.86,
        "method_metric": 100.0,
        "pitest": 15.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n        assertEquals(pair1.hashCode(), pair2.hashCode());\n    }\n}",
        "package_metric": 2.19,
        "class_metric": 33.33,
        "method_metric": 100.0,
        "pitest": 0.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create a new pair object with null key and value\n        Pair<String, Integer> pair1 = new Pair<>(null, null);\n        assertEquals(0, pair1.hashCode());\n        \n        // Create a new pair object with non-null key and value\n        String k = \"key\";\n        Integer v = 5;\n        Pair<String, Integer> pair2 = new Pair<>(k, v);\n        assertEquals(37 * k.hashCode() + v.hashCode(), pair2.hashCode());\n    }\n}",
        "package_metric": 2.19,
        "class_metric": 33.33,
        "method_metric": 100.0,
        "pitest": 29.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // create two pairs with the same key and value\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"value\");\n        \n        assertEquals(pair1.hashCode(), pair2.hashCode());\n    }\n}",
        "package_metric": 2.19,
        "class_metric": 33.33,
        "method_metric": 100.0,
        "pitest": 0.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowCos",
        "test_code": "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        double x = 0.5; // input value for the cosine function\n        double[] result = new double[2]; // output array for the cosine function\n\n        double expectedResult = Math.cos(x); // expected result from the standard cosine function\n        double actualResult = AccurateMathCalc.slowCos(x, result); // actual result from the slow cosine function\n\n        assertEquals(expectedResult, actualResult, 1e-10); // check if the results are equal within a precision of 1e-10\n    }\n}",
        "package_metric": 2.84,
        "class_metric": 21.3,
        "method_metric": 100.0,
        "pitest": 18.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = {1, 2, 3};\n        assertEquals(2, Average.average(numbers));\n    }\n}",
        "package_metric": 0.31,
        "class_metric": 38.46,
        "method_metric": 83.33,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        // Test the case when numbers array is null or empty\n        assertThrows(IllegalArgumentException.class, () -> Average.average((int[]) null));\n        assertThrows(IllegalArgumentException.class, () -> Average.average(new int[0]));\n        \n        // Test the case when numbers array is not empty and sum of elements does not exceed long value limit\n        int[] numbers = {1, 2, 3};\n        assertEquals(Average.average(numbers), 2);\n    }\n}",
        "package_metric": 0.37,
        "class_metric": 46.15,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = new int[] {1, 2, 3};\n        assertEquals(2, Average.average(numbers));\n        \n        int[] negativeNumbers = new int[] {-1, -2, -3};\n        assertEquals(-2, Average.average(negativeNumbers));\n    }\n}",
        "package_metric": 0.31,
        "class_metric": 38.46,
        "method_metric": 83.33,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = new int[3];\n        numbers[0] = 1;\n        numbers[1] = 2;\n        numbers[2] = 3;\n        assertEquals(Average.average(numbers), 2);\n    }\n}",
        "package_metric": 0.31,
        "class_metric": 38.46,
        "method_metric": 83.33,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        // Test that the method throws an IllegalArgumentException when the input array is empty or null\n        assertThrows(IllegalArgumentException.class, () -> {\n            int[] numbers = {};\n            Average.average(numbers);\n        });\n        \n        assertThrows(IllegalArgumentException.class, () -> {\n            int[] numbers = null;\n            Average.average(numbers);\n        });\n        \n        // Test that the method returns the correct average of the input numbers\n        int[] numbers1 = {1, 2, 3};\n        assertEquals(Average.average(numbers1), (double) (1 + 2 + 3) / 3);\n        \n        int[] numbers2 = {4, 5, 6};\n        assertEquals(Average.average(numbers2), (double) (4 + 5 + 6) / 3);\n    }\n}",
        "package_metric": 0.37,
        "class_metric": 46.15,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = new int[] {1, 2, 3};\n        assertEquals(2, Average.average(numbers));\n        \n        int[] emptyArray = {};\n        assertThrows(IllegalArgumentException.class, () -> Average.average(emptyArray));\n    }\n}",
        "package_metric": 0.37,
        "class_metric": 46.15,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = new int[3];\n        numbers[0] = 1;\n        numbers[1] = 2;\n        numbers[2] = 3;\n        assertEquals(2, Average.average(numbers));\n    }\n}",
        "package_metric": 0.31,
        "class_metric": 38.46,
        "method_metric": 83.33,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = new int[5];\n        for (int i = 0; i < numbers.length; i++) {\n            numbers[i] = i + 1;\n        }\n        assertEquals(3, Average.average(numbers));\n    }\n}",
        "package_metric": 0.31,
        "class_metric": 38.46,
        "method_metric": 83.33,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = new int[]{1, 2, 3};\n        assertEquals(2, Average.average(numbers));\n    }\n}",
        "package_metric": 0.31,
        "class_metric": 38.46,
        "method_metric": 83.33,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = new int[]{1, 2, 3};\n        assertEquals(2, Average.average(numbers));\n\n        numbers = new int[]{4, 5, 6};\n        assertEquals(5, Average.average(numbers));\n    }\n}\n",
        "package_metric": 0.31,
        "class_metric": 38.46,
        "method_metric": 83.33,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = new int[] {1, 2, 3};\n        assertEquals(Average.average(numbers), 2);\n        \n        int[] numbers2 = new int[] {-1, -2, -3};\n        assertEquals(Average.average(numbers2), -2);\n    }\n}",
        "package_metric": 0.31,
        "class_metric": 38.46,
        "method_metric": 83.33,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = {1, 2, 3, 4, 5};\n        assertEquals(3, Average.average(numbers));\n    }\n}",
        "package_metric": 0.31,
        "class_metric": 38.46,
        "method_metric": 83.33,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = new int[] {1, 2, 3};\n        assertEquals(2, Average.average(numbers));\n\n        numbers = new int[] {4, 5, 6};\n        assertEquals(5, Average.average(numbers));\n    }\n}\n",
        "package_metric": 0.31,
        "class_metric": 38.46,
        "method_metric": 83.33,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = new int[]{1, 2, 3};\n        assertEquals(2, Average.average(numbers));\n        \n        numbers = new int[]{1, 2, 3, 4, 5};\n        assertEquals(3, Average.average(numbers));\n    }\n}",
        "package_metric": 0.31,
        "class_metric": 38.46,
        "method_metric": 83.33,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        // Test that the function throws an exception when the array is empty or null\n        assertThrows(IllegalArgumentException.class, () -> {\n            int[] numbers = {};\n            Average.average(numbers);\n        });\n        assertThrows(IllegalArgumentException.class, () -> {\n            int[] numbers = null;\n            Average.average(numbers);\n        });\n    }\n}",
        "package_metric": 0.12,
        "class_metric": 15.38,
        "method_metric": 33.33,
        "pitest": 20.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = new int[] {1, 2, 3};\n        assertEquals(2, Average.average(numbers));\n    }\n}",
        "package_metric": 0.31,
        "class_metric": 38.46,
        "method_metric": 83.33,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = {1, 2, 3, 4, 5};\n        assertEquals(3, Average.average(numbers));\n    }\n}",
        "package_metric": 0.31,
        "class_metric": 38.46,
        "method_metric": 83.33,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "\npackage com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        // Arrange\n        Integer[] unsorted = new Integer[] { 5, 3, 10, 8, 2 };\n        \n        // Act\n        HeapSort heapSort = new HeapSort();\n        Integer[] sorted = heapSort.sort(unsorted);\n        \n        // Assert\n        assertArrayEquals(new Integer[] { 2, 3, 5, 8, 10 }, sorted);\n    }\n}",
        "package_metric": 1.86,
        "class_metric": 96.0,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        // Test for sorting an empty array\n        assertEquals(0, new HeapSort().sort(new Integer[0]).length);\n\n        // Test for sorting a single-element array\n        assertArrayEquals(new Integer[] { 1 }, new HeapSort().sort(new Integer[] { 1 }));\n\n        // Test for sorting a two-element array\n        assertArrayEquals(new Integer[] { 1, 2 }, new HeapSort().sort(new Integer[] { 2, 1 }));\n\n        // Test for sorting a three-element array\n        assertArrayEquals(new Integer[] { 1, 2, 3 }, new HeapSort().sort(new Integer[] { 2, 3, 1 }));\n    }\n}",
        "package_metric": 1.86,
        "class_metric": 96.0,
        "method_metric": 100.0,
        "pitest": 81.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class HeapSortTest {\n    @Test public void sortTest() {\n        Integer[] unsorted = {3, 2, 1, 4};\n        HeapSort heapSort = new HeapSort();\n        Integer[] sorted = heapSort.sort(unsorted);\n        assertArrayEquals(new Integer[]{1, 2, 3, 4}, sorted);\n    }\n}",
        "package_metric": 1.86,
        "class_metric": 96.0,
        "method_metric": 100.0,
        "pitest": 84.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "CursorLinkedList",
        "method_name": "indexOf",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // Create a new instance of the CursorLinkedList class\n        CursorLinkedList<String> list = new CursorLinkedList<>();\n\n        // Add some elements to the list\n        list.append(\"apple\");\n        list.append(\"banana\");\n        list.append(\"cherry\");\n\n        // Check if indexOf returns the correct index for each element\n        assertEquals(0, list.indexOf(\"apple\"));\n        assertEquals(1, list.indexOf(\"banana\"));\n        assertEquals(2, list.indexOf(\"cherry\"));\n    }\n}",
        "package_metric": 4.12,
        "class_metric": 39.02,
        "method_metric": 85.71,
        "pitest": 33.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "CursorLinkedList",
        "method_name": "indexOf",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // create a new instance of the CursorLinkedList\n        CursorLinkedList<Integer> cursorLinkedList = new CursorLinkedList<>();\n\n        // add elements to the list\n        cursorLinkedList.append(1);\n        cursorLinkedList.append(2);\n        cursorLinkedList.append(3);\n\n        // check that indexOf() method returns correct index for each element\n        assertEquals(0, cursorLinkedList.indexOf(1));\n        assertEquals(1, cursorLinkedList.indexOf(2));\n        assertEquals(2, cursorLinkedList.indexOf(3));\n    }\n}",
        "package_metric": 4.12,
        "class_metric": 39.02,
        "method_metric": 85.71,
        "pitest": 33.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "CursorLinkedList",
        "method_name": "indexOf",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // Create an instance of the CursorLinkedList class\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n\n        // Add elements to the list\n        list.append(1);\n        list.append(2);\n        list.append(3);\n        list.append(4);\n        list.append(5);\n\n        // Check that indexOf() returns the correct index for each element\n        assertEquals(0, list.indexOf(1));\n        assertEquals(1, list.indexOf(2));\n        assertEquals(2, list.indexOf(3));\n        assertEquals(3, list.indexOf(4));\n        assertEquals(4, list.indexOf(5));\n    }\n}",
        "package_metric": 4.12,
        "class_metric": 39.02,
        "method_metric": 85.71,
        "pitest": 33.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "CursorLinkedList",
        "method_name": "indexOf",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // Create an instance of the CursorLinkedList class\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n\n        // Add elements to the list\n        list.append(1);\n        list.append(2);\n        list.append(3);\n\n        // Test that indexOf() returns the correct index of an element in the list\n        assertEquals(0, list.indexOf(1));\n        assertEquals(1, list.indexOf(2));\n        assertEquals(2, list.indexOf(3));\n    }\n}",
        "package_metric": 4.12,
        "class_metric": 39.02,
        "method_metric": 85.71,
        "pitest": 33.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "CursorLinkedList",
        "method_name": "indexOf",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n        list.append(1);\n        list.append(2);\n        assertEquals(0, list.indexOf(1));\n        assertEquals(1, list.indexOf(2));\n    }\n}",
        "package_metric": 4.0,
        "class_metric": 37.8,
        "method_metric": 85.71,
        "pitest": 33.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "CursorLinkedList",
        "method_name": "indexOf",
        "test_code": "\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n        list.append(1);\n        list.append(2);\n        list.append(3);\n        assertEquals(0, list.indexOf(1));\n        assertEquals(1, list.indexOf(2));\n        assertEquals(2, list.indexOf(3));\n    }\n}",
        "package_metric": 4.12,
        "class_metric": 39.02,
        "method_metric": 85.71,
        "pitest": 33.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "CursorLinkedList",
        "method_name": "indexOf",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // Create a new instance of the CursorLinkedList class\n        CursorLinkedList list = new CursorLinkedList();\n\n        // Add some elements to the list\n        list.append(\"A\");\n        list.append(\"B\");\n        list.append(\"C\");\n\n        // Test that indexOf() returns the correct index for each element in the list\n        assertEquals(0, list.indexOf(\"A\"));\n        assertEquals(1, list.indexOf(\"B\"));\n        assertEquals(2, list.indexOf(\"C\"));\n    }\n}",
        "package_metric": 4.12,
        "class_metric": 39.02,
        "method_metric": 85.71,
        "pitest": 33.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"1\", OctalToHexadecimal.decimalToHex(1));\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10));\n        assertEquals(\"FF\", OctalToHexadecimal.decimalToHex(255));\n    }\n}",
        "package_metric": 1.91,
        "class_metric": 34.62,
        "method_metric": 90.0,
        "pitest": 33.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "\npackage com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10));\n        assertEquals(\"FF\", OctalToHexadecimal.decimalToHex(255));\n        assertEquals(\"10\", OctalToHexadecimal.decimalToHex(16));\n    }\n}",
        "package_metric": 1.91,
        "class_metric": 34.62,
        "method_metric": 90.0,
        "pitest": 33.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "\npackage com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0));\n        assertEquals(\"1\", OctalToHexadecimal.decimalToHex(1));\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10));\n        assertEquals(\"F\", OctalToHexadecimal.decimalToHex(15));\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "\npackage com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n    @Test\n    public void decimalToHexTest() {\n        // Test case 1: Check if function returns correct hex value for input = 0\n        int input = 0;\n        String expectedOutput = \"0\";\n        String actualOutput = OctalToHexadecimal.decimalToHex(input);\n        assertEquals(expectedOutput, actualOutput);\n\n        // Test case 2: Check if function returns correct hex value for input > 0 and less than 16\n        input = 5;\n        expectedOutput = \"5\";\n        actualOutput = OctalToHexadecimal.decimalToHex(input);\n        assertEquals(expectedOutput, actualOutput);\n\n        // Test case 3: Check if function returns correct hex value for input > 16 and less than 256\n        input = 17;\n        expectedOutput = \"11\";\n        actualOutput = OctalToHexadecimal.decimalToHex(input);\n        assertEquals(expectedOutput, actualOutput);\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "\npackage com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n    @Test\n    public void decimalToHexTest() {\n        String hex = OctalToHexadecimal.decimalToHex(10);\n        assertEquals(\"A\", hex);\n    }\n}",
        "package_metric": 1.91,
        "class_metric": 34.62,
        "method_metric": 90.0,
        "pitest": 33.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "\npackage com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n    @Test\n    public void decimalToHexTest() {\n        int input = 255; // Input: 11111111 (octal)\n        String expectedOutput = \"FF\"; // Expected output: 0xFF (hexadecimal)\n        \n        String actualOutput = OctalToHexadecimal.decimalToHex(input);\n        \n        assertEquals(expectedOutput, actualOutput);\n    }\n}",
        "package_metric": 1.91,
        "class_metric": 34.62,
        "method_metric": 90.0,
        "pitest": 33.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n    @Test\n    public void decimalToHexTest() {\n        String digits = \"0123456789ABCDEF\";\n        int d = 1;\n        String hex = \"1\";\n        assertEquals(hex, OctalToHexadecimal.decimalToHex(d));\n    }\n}",
        "package_metric": 1.91,
        "class_metric": 34.62,
        "method_metric": 90.0,
        "pitest": 33.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "DecimalToAnyBase",
        "method_name": "convertToAnyBase",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"32\", DecimalToAnyBase.convertToAnyBase(32, 10));\n    }\n}",
        "package_metric": 2.34,
        "class_metric": 45.83,
        "method_metric": 100.0,
        "pitest": 43.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "DecimalToAnyBase",
        "method_name": "convertToAnyBase",
        "test_code": "\npackage com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    @Test\n    public void convertToAnyBaseTest() {\n        int inp = 10;\n        int base = 2;\n        \n        String actualResult = DecimalToAnyBase.convertToAnyBase(inp, base);\n        assertEquals(\"1010\", actualResult);\n    }\n}",
        "package_metric": 2.34,
        "class_metric": 45.83,
        "method_metric": 100.0,
        "pitest": 48.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "DecimalToAnyBase",
        "method_name": "convertToAnyBase",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    @Test\n    public void convertToAnyBaseTest() {\n        int inp = 10;\n        int base = 2;\n        String expectedOutput = \"1010\";\n        assertEquals(expectedOutput, DecimalToAnyBase.convertToAnyBase(inp, base));\n    }\n}",
        "package_metric": 2.34,
        "class_metric": 45.83,
        "method_metric": 100.0,
        "pitest": 48.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AliquotSum",
        "method_name": "getAliquotSum",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        int expected = 1 + 2 + 3;\n        int actual = AliquotSum.getAliquotSum(6);\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 66.67,
        "method_metric": 100.0,
        "pitest": 43.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MazeRecursion",
        "method_name": "setWay",
        "test_code": "\npackage com.thealgorithms.backtracking;\n\npublic class MazeRecursion {\n    /**\n     * Using recursive path finding to help the ball find its way in the maze\n     * Description\uff1a\n     * 1. map (means the maze)\n     * 2. i, j (means the initial coordinate of the ball in the maze)\n     * 3. if the ball can reach the end of maze, that is position of map[6][5],\n     * means the we have found a path for the ball\n     * 4. Additional Information\uff1a 0 in the map[i][j] means the ball has not gone\n     * through this position, 1 means the wall, 2 means the path is feasible, 3\n     * means the ball has gone through the path but this path is dead end\n     * 5. We will need strategy for the ball to pass through the maze for example:\n     * Down -> Right -> Up -> Left, if the path doesn't work, then backtrack\n     *\n     * @author OngLipWei\n     * @version Jun 23, 2021 11:36:14 AM\n     * @param map The maze\n     * @param i   x coordinate of your ball(target)\n     * @param j   y coordinate of your ball(target)\n     * @return If we did find a path for the ball\uff0creturn true\uff0celse false\n     */\n    public static boolean setWay(int[][] map, int i, int j) {\n        if (map[6][5] == 2) { // means the ball find its path, ending condition\n            return true;\n        }\n        if (map[i][j] == 0) { // if the ball haven't gone through this point\n            // then the ball follows the move strategy : down -> right -> up -> left\n            map[i][j] = 2; // we assume that this path is feasible first, set the current point to 2\n                           // first\u3002\n            if (setWay(map, i + 1, j)) { // go down\n                return true;\n            } else if (setWay(map, i, j + 1)) { // go right\n                return true;\n            } else if (setWay(map, i - 1,j)) { // go up\n                return true;\n            } else if (setWay(map, i, j - 1)) { // go left\n                        return true;\n            } else {\n                map[i][j] = 3;\n                return false;\n            }\n        } else { // if the map[i][j] != 0 , it will probably be 1,2,3.\n            // In this case, return false because the ball cannot hit the wall,\n            // go through the path that has gone through before, and go to the dead end.\n            return false;\n        }\n    }\n}\n",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "Caesar",
        "method_name": "decode",
        "test_code": "public class CaesarCipher {\n  public String decode(String encryptedMessage, int shift) {\n    StringBuilder decoded = new StringBuilder();\n    \n    shift %= 26;\n    \n    final int length = encryptedMessage.length();\n    for (int i = 0; i < length; i++) {\n      char current = encryptedMessage.charAt(i);\n      if (isCapitalLatinLetter(current)) {\n        current -= shift;\n        decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters\n      } else if (isSmallLatinLetter(current)) {\n        current -= shift;\n        decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters\n      } else {\n        decoded.append(current);\n      }\n    }\n    \n    return decoded.toString();\n  }\n  \n  private boolean isCapitalLatinLetter(char c) {\n    return 'A' <= c && c <= 'Z';\n  }\n  \n  private boolean isSmallLatinLetter(char c) {\n    return 'a' <= c && c <= 'z';\n  }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // test case 1: input number is a prime\n        int inputNumber = 3;\n        assertEquals(inputNumber + 2, TwinPrime.getTwinPrime(inputNumber));\n\n        // test case 2: input number is not a prime\n        inputNumber = 4;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 75.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: inputNumber = 3, expectedOutput = 5 (since 3 and 5 are prime)\n        int output = TwinPrime.getTwinPrime(3);\n        assertEquals(output, 5);\n\n        // Test case 2: inputNumber = 7, expectedOutput = -1 (since 7 and 9 are not prime)\n        output = TwinPrime.getTwinPrime(7);\n        assertEquals(output, -1);\n    }\n}",
        "package_metric": 0.55,
        "class_metric": 75.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: inputNumber = 3, expectedOutput = 5 (since 3 and 5 are prime)\n        assertEquals(5, TwinPrime.getTwinPrime(3));\n        \n        // Test case 2: inputNumber = 4, expectedOutput = -1 (since 4 is not prime)\n        assertEquals(-1, TwinPrime.getTwinPrime(4));\n        \n        // Test case 3: inputNumber = 5, expectedOutput = 7 (since 5 and 7 are prime)\n        assertEquals(7, TwinPrime.getTwinPrime(5));\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 75.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: inputNumber = 3, output = 5 (since 3 and 5 are both prime)\n        int inputNumber = 3;\n        assertEquals(5, TwinPrime.getTwinPrime(inputNumber));\n        \n        // Test case 2: inputNumber = 4, output = -1 (since 4 is not a prime)\n        inputNumber = 4;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n        \n        // Test case 3: inputNumber = 5, output = 7 (since 5 and 7 are both prime)\n        inputNumber = 5;\n        assertEquals(7, TwinPrime.getTwinPrime(inputNumber));\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 75.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: Both inputNumber and (inputNumber + 2) are prime\n        int inputNumber = 3;\n        assertEquals(5, TwinPrime.getTwinPrime(inputNumber));\n\n        // Test case 2: Either inputNumber or (inputNumber + 2) is not prime\n        inputNumber = 7;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n    }\n}",
        "package_metric": 0.55,
        "class_metric": 75.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: inputNumber is prime and (inputNumber + 2) is also prime\n        int inputNumber = 5;\n        assertEquals(7, TwinPrime.getTwinPrime(inputNumber));\n\n        // Test case 2: inputNumber is not prime but (inputNumber + 2) is prime\n        inputNumber = 4;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n\n        // Test case 3: inputNumber and (inputNumber + 2) are both composite numbers\n        inputNumber = 6;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 75.0,
        "method_metric": 100.0,
        "pitest": 83.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: both inputNumber and (inputNumber + 2) are prime numbers\n        int inputNumber = 3;\n        assertEquals(5, TwinPrime.getTwinPrime(inputNumber));\n        \n        // Test case 2: only one of the two inputNumbers is a prime number\n        inputNumber = 7;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n        \n        // Test case 3: both inputNumber and (inputNumber + 2) are not prime numbers\n        inputNumber = 4;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n    }\n}",
        "package_metric": 0.61,
        "class_metric": 75.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: inputNumber is a prime number, and (inputNumber + 2) is also a prime number\n        int result = TwinPrime.getTwinPrime(3); // 3 is a prime number, and 5 is also a prime number\n        assertEquals(result, 5);\n\n        // Test case 2: inputNumber is not a prime number, but (inputNumber + 2) is a prime number\n        result = TwinPrime.getTwinPrime(4); // 4 is not a prime number, but 6 is a prime number\n        assertEquals(result, -1);\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 75.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: Both inputNumber and (inputNumber + 2) are prime\n        int result = TwinPrime.getTwinPrime(5);\n        assertEquals(7, result);\n\n        // Test case 2: One of the inputNumber or (inputNumber + 2) is not prime\n        result = TwinPrime.getTwinPrime(10);\n        assertEquals(-1, result);\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 75.0,
        "method_metric": 100.0,
        "pitest": 83.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        assertEquals(5, TwinPrime.getTwinPrime(3));\n        assertEquals(-1, TwinPrime.getTwinPrime(4));\n        assertEquals(-1, TwinPrime.getTwinPrime(7));\n    }\n}",
        "package_metric": 0.61,
        "class_metric": 75.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        int inputNumber = 3;\n        assertEquals(5, TwinPrime.getTwinPrime(inputNumber));\n    }\n}",
        "package_metric": 0.37,
        "class_metric": 50.0,
        "method_metric": 66.67,
        "pitest": 83.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        int inputNumber = 5; // Prime number\n        int result = TwinPrime.getTwinPrime(inputNumber);\n        assertEquals(7, result);\n    }\n}",
        "package_metric": 0.37,
        "class_metric": 50.0,
        "method_metric": 66.67,
        "pitest": 67.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "HillCipher",
        "method_name": "determinant",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        int[][] a = new int[3][3];\n        a[0] = new int[]{1, 2, 3};\n        a[1] = new int[]{4, 5, 6};\n        a[2] = new int[]{7, 8, 9};\n        assertEquals(0, HillCipher.determinant(a, 3));\n    }\n}",
        "package_metric": 2.28,
        "class_metric": 18.37,
        "method_metric": 100.0,
        "pitest": 14.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "BinaryTree",
        "method_name": "remove",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void removeTest() {\n        // Create a new instance of the BinaryTree class\n        BinaryTree tree = new BinaryTree();\n\n        // Add some nodes to the binary tree using the put method\n        tree.put(10);\n        tree.put(5);\n        tree.put(20);\n        tree.put(15);\n\n        // Remove a node from the binary tree using the remove method\n        boolean result = tree.remove(15);\n\n        // Check that the removal was successful and the expected output is returned\n        assertTrue(result, \"Removal of 15 should be successful\");\n    }\n}",
        "package_metric": 2.3,
        "class_metric": 28.7,
        "method_metric": 15.56,
        "pitest": 23.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] inputArray = new int[]{1, 2, 3, 4, 5};\n        assertEquals(5, FindMax.findMax(inputArray));\n\n        inputArray = new int[]{5, 4, 3, 2, 1};\n        assertEquals(5, FindMax.findMax(inputArray));\n\n        inputArray = new int[]{-1, -2, -3, -4, -5};\n        assertEquals(-1, FindMax.findMax(inputArray));\n\n        inputArray = new int[]{Integer.MIN_VALUE, Integer.MAX_VALUE};\n        assertEquals(Integer.MAX_VALUE, FindMax.findMax(inputArray));\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        // Test case 1: Empty array\n        int[] emptyArray = {};\n        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(emptyArray));\n        \n        // Test case 2: Array with only one element\n        int[] arrayWithOneElement = {4};\n        assertEquals(4, FindMax.findMax(arrayWithOneElement));\n        \n        // Test case 3: Array with multiple elements\n        int[] arrayWithMultipleElements = {1, 2, 3, 4, 5};\n        assertEquals(5, FindMax.findMax(arrayWithMultipleElements));\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] arr = new int[]{1, 2, 3};\n        assertEquals(3, FindMax.findMax(arr));\n        \n        arr = new int[]{4, 5, 6};\n        assertEquals(6, FindMax.findMax(arr));\n        \n        arr = new int[]{7, 8, 9};\n        assertEquals(9, FindMax.findMax(arr));\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = new int[] {1, 2, 3};\n        assertEquals(3, FindMax.findMax(array));\n\n        array = new int[] {4, 5, 6};\n        assertEquals(6, FindMax.findMax(array));\n\n        array = new int[] {7, 8, 9};\n        assertEquals(9, FindMax.findMax(array));\n\n        array = new int[] {};\n        try {\n            FindMax.findMax(array);\n            fail(\"Should throw an exception for empty input array\");\n        } catch (IllegalArgumentException e) {\n            // Expected exception\n        }\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] emptyArray = {};\n        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(emptyArray));\n\n        int[] nonEmptyArray1 = {1, 2, 3};\n        assertEquals(3, FindMax.findMax(nonEmptyArray1));\n\n        int[] nonEmptyArray2 = {-1, -2, -3};\n        assertEquals(-1, FindMax.findMax(nonEmptyArray2));\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = new int[] {1, 2, 3, 4, 5};\n        assertEquals(5, FindMax.findMax(array));\n        \n        array = new int[] {-1, -2, -3, -4, -5};\n        assertEquals(-1, FindMax.findMax(array));\n        \n        array = new int[] {0, 0, 0, 0, 0};\n        assertEquals(0, FindMax.findMax(array));\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = new int[]{1, 2, 3, 4, 5};\n        assertEquals(FindMax.findMax(array), 5);\n        \n        array = new int[]{9, 8, 7, 6, 5, 4, 3, 2, 1};\n        assertEquals(FindMax.findMax(array), 9);\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = {1, 2, 3};\n        assertEquals(3, FindMax.findMax(array));\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = new int[] {1, 2, 3, 4, 5};\n        assertEquals(5, FindMax.findMax(array));\n    }\n}\n",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = new int[] {1, 2, 3};\n        assertEquals(3, FindMax.findMax(array));\n        \n        array = new int[] {-1, -2, -3};\n        assertEquals(-1, FindMax.findMax(array));\n        \n        array = new int[] {0, 0, 0};\n        assertEquals(0, FindMax.findMax(array));\n    }\n}\n",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = new int[] {1, 2, 3, 4, 5};\n        assertEquals(5, FindMax.findMax(array));\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = new int[] {1, 2, 3};\n        assertEquals(3, FindMax.findMax(array));\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = new int[] { 1, 2, 3 };\n        assertEquals(3, FindMax.findMax(array));\n        \n        array = new int[] { 5, 4, 3, 2, 1 };\n        assertEquals(5, FindMax.findMax(array));\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = new int[] {1, 2, 3, 4};\n        assertEquals(4, FindMax.findMax(array));\n    }\n}\n",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = new int[] { 1, 2, 3, 4, 5 };\n        assertEquals(5, FindMax.findMax(array));\n        \n        array = new int[] { -1, 0, 1, 2, 3, 4, 5 };\n        assertEquals(5, FindMax.findMax(array));\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = new int[]{1, 2, 3};\n        assertEquals(3, FindMax.findMax(array));\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "\npublic class SinglyLinkedList<E> {\n    private Node head; // Pointer to the first node\n    private int size = 0; // Size of the list\n  \n    // Inner class for a single node\n    public static class Node<E> {\n        E data; // Data stored in the node\n        Node next; // Reference to the next node\n      \n        // Constructor to create a new node\n        public Node(E data) {\n            this.data = data;\n        }\n    }\n  \n    // Adds an item at the end of the list\n    public void add(E data) {\n        if (head == null) {\n            head = new Node(data);\n            size++;\n            return;\n        }\n      \n        Node curr = head;\n      \n        while (curr.next != null) {\n            curr = curr.next;\n        }\n      \n        curr.next = new Node(data);\n        size++;\n    }\n  \n    // Adds an item at the beginning of the list\n    public void addFirst(E data) {\n        Node newNode = new Node(data);\n        if (head == null) {\n            head = newNode;\n            size++;\n            return;\n        }\n      \n        newNode.next = head;\n        head = newNode;\n        size++;\n    }\n  \n    // Returns the size of the list\n    public int size() {\n        return size;\n    }\n  \n    // Checks whether the list is empty or not\n    public boolean isEmpty() {\n        return size == 0;\n    }\n}\n",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        Node head = new Node(1);\n        head.next = new Node(2);\n        head.next.next = new Node(3);\n        head.next.next.next = new Node(4);\n        head.next.next.next.next = new Node(5);\n        list.setHead(head);\n        \n        Node result = list.middle();\n        \n        assertEquals(result.value, 3);\n    }\n}",
        "package_metric": 2.29,
        "class_metric": 7.45,
        "method_metric": 87.5,
        "pitest": 4.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        Node head = new Node(1);\n        head.next = new Node(2);\n        head.next.next = new Node(3);\n        head.next.next.next = new Node(4);\n        head.next.next.next.next = new Node(5);\n        list.setHead(head);\n        \n        assertEquals(list.middle().value, 3);\n    }\n}",
        "package_metric": 2.29,
        "class_metric": 7.45,
        "method_metric": 87.5,
        "pitest": 4.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        // Test case 1: List is empty\n        SinglyLinkedList list = new SinglyLinkedList();\n        assertEquals(list.middle(), null);\n\n        // Test case 2: List has one element\n        list.insertHead(10);\n        assertEquals(list.middle().value, 10);\n\n        // Test case 3: List has multiple elements\n        list.insert(20);\n        list.insert(30);\n        list.insert(40);\n        assertEquals(list.middle().value, 20);\n    }\n}",
        "package_metric": 4.46,
        "class_metric": 17.55,
        "method_metric": 100.0,
        "pitest": 18.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        int number = 153; // 1^3 + 5^3 + 3^3 = 153\n        assertTrue(new Armstrong().isArmstrong(number));\n        \n        number = 105; // 1^2 + 0^2 + 5^2 != 105\n        assertFalse(new Armstrong().isArmstrong(number));\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        // Test with a valid input\n        assertTrue(new Armstrong().isArmstrong(153)); // 1^3 + 5^3 + 3^3 = 153\n        \n        // Test with an invalid input\n        assertFalse(new Armstrong().isArmstrong(-1)); // Negative numbers are not valid\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        // Test 1: 370 should be an Armstrong number because 3^3 + 7^3 + 0^3 = 370\n        assertTrue(new Armstrong().isArmstrong(370));\n\n        // Test 2: 1634 should be an Armstrong number because 1^4 + 6^4 + 3^4 + 4^4 = 1634\n        assertTrue(new Armstrong().isArmstrong(1634));\n\n        // Test 3: -153 should not be an Armstrong number because it has a negative sign\n        assertFalse(new Armstrong().isArmstrong(-153));\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        // Create an instance of the Armstrong class\n        Armstrong arm = new Armstrong();\n        \n        // Test for a positive Armstrong number\n        assertTrue(arm.isArmstrong(370));\n        \n        // Test for a negative Armstrong number\n        assertFalse(arm.isArmstrong(-1634));\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        int[] armstrongNumbers = {370, 1634}; // These are two examples of Armstrong numbers\n        for (int number : armstrongNumbers) {\n            assertTrue(new Armstrong().isArmstrong(number), \"Number \" + number + \" is not an Armstrong number\");\n        }\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        assertTrue(armstrong.isArmstrong(153)); // 1^3 + 5^3 + 3^3 = 153\n        assertFalse(armstrong.isArmstrong(246)); // 2^3 + 4^3 + 6^3 = 245, not equal to the given number\n    }\n}\n",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        assertTrue(armstrong.isArmstrong(1));\n        assertFalse(armstrong.isArmstrong(200));\n        assertTrue(armstrong.isArmstrong(370));\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        Armstrong arm = new Armstrong();\n        \n        // Test for a positive number that is not an Armstrong number\n        assertFalse(arm.isArmstrong(123));\n        \n        // Test for a negative number that is not an Armstrong number\n        assertFalse(arm.isArmstrong(-456));\n        \n        // Test for a zero\n        assertTrue(arm.isArmstrong(0));\n        \n        // Test for a positive number that is an Armstrong number\n        assertTrue(arm.isArmstrong(153));\n    }\n}\n",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        Armstrong arm = new Armstrong();\n        \n        assertTrue(arm.isArmstrong(153)); // 1^3 + 5^3 + 3^3 = 153\n        assertFalse(arm.isArmstrong(100)); // 1^3 + 0^3 + 0^3 = 0, not equal to the input\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Create an instance of the stack\n        StackArrayList stack = new StackArrayList();\n        \n        // Check if the stack is empty before pushing any elements\n        assertTrue(stack.isEmpty());\n        \n        // Push some elements onto the stack\n        for (int i = 1; i <= 5; ++i) {\n            stack.push(i);\n            assertEquals(i, stack.size());\n        }\n        \n        // Check if the peek method is working correctly\n        assertEquals(5, stack.peek());\n        \n        // Pop an element from the stack and check if it's correct\n        assertEquals(5, stack.pop());\n        \n        // Check if the size of the stack is correct after popping an element\n        assertEquals(4, stack.size());\n    }\n}",
        "package_metric": 5.8,
        "class_metric": 41.38,
        "method_metric": 66.67,
        "pitest": 64.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Create an empty stack\n        StackArrayList stack = new StackArrayList();\n\n        // Check that the stack is empty\n        assertTrue(stack.isEmpty());\n\n        // Push some elements onto the stack\n        for (int i = 1; i <= 5; ++i) {\n            stack.push(i);\n        }\n\n        // Check that the size of the stack is correct\n        assertEquals(5, stack.size());\n\n        // Peek at the element on the top of the stack\n        int peekedElement = stack.peek();\n\n        // Check that the element returned by peek() is the last element pushed onto the stack\n        assertEquals(5, peekedElement);\n    }\n}",
        "package_metric": 4.83,
        "class_metric": 34.48,
        "method_metric": 66.67,
        "pitest": 43.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        StackArrayList stack = new StackArrayList();\n        \n        for (int i = 1; i <= 5; ++i) {\n            stack.push(i);\n        }\n        \n        assertEquals(5, stack.peek());\n    }\n}",
        "package_metric": 4.35,
        "class_metric": 31.03,
        "method_metric": 66.67,
        "pitest": 29.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "SegmentTree",
        "method_name": "getSumTree",
        "test_code": "package com.thealgorithms.datastructures.trees;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class SegmentTreeTest {\n    @Test\n    public void getSumTreeTest() {\n        int n = 10;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; ++i) {\n            arr[i] = i + 1;\n        }\n        SegmentTree st = new SegmentTree(n, arr);\n        assertEquals(st.getSum(3, 5), 15);\n    }\n}",
        "package_metric": 1.43,
        "class_metric": 60.53,
        "method_metric": 100.0,
        "pitest": 56.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/bitmanipulation",
        "package_name": "com.thealgorithms.bitmanipulation",
        "class_name": "BitSwap",
        "method_name": "bitSwap",
        "test_code": "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 10; // binary: 1010\n        int posA = 2; // position of the first bit to be swapped (counting from 0)\n        int posB = 3; // position of the second bit to be swapped (counting from 0)\n        \n        int expectedData = 6; // binary: 1100\n        assertEquals(expectedData, BitSwap.bitSwap(data, posA, posB));\n    }\n}",
        "package_metric": 8.16,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/bitmanipulation",
        "package_name": "com.thealgorithms.bitmanipulation",
        "class_name": "BitSwap",
        "method_name": "bitSwap",
        "test_code": "\npackage com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b1010; // binary representation of the integer 10 (decimal)\n        int posA = 2;\n        int posB = 3;\n        int expectedResult = 0b0110; // binary representation of the integer 6 (decimal)\n\n        assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));\n    }\n}\n",
        "package_metric": 8.16,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/bitmanipulation",
        "package_name": "com.thealgorithms.bitmanipulation",
        "class_name": "BitSwap",
        "method_name": "bitSwap",
        "test_code": "\npackage com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 10; // binary: 1010\n        int posA = 2; // position of the first bit to swap\n        int posB = 3; // position of the second bit to swap\n        \n        assertEquals(BitSwap.bitSwap(data, posA, posB), 6); // binary: 1101 (swapping bits at positions 2 and 3)\n    }\n}",
        "package_metric": 8.16,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/bitmanipulation",
        "package_name": "com.thealgorithms.bitmanipulation",
        "class_name": "BitSwap",
        "method_name": "bitSwap",
        "test_code": "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 5; // binary representation: 101\n        int posA = 2; // binary representation: 10\n        int posB = 3; // binary representation: 11\n\n        int expectedResult = 9; // binary representation: 1001\n\n        assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));\n    }\n}",
        "package_metric": 8.16,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "\npackage com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        String s1 = \"hello\";\n        String s2 = \"world\";\n        int expectedDistance = 4; // the number of characters that are different between s1 and s2\n\n        try {\n            int actualDistance = HammingDistance.calculateHammingDistance(s1, s2);\n            assertEquals(expectedDistance, actualDistance);\n        } catch (Exception e) {\n            fail(\"Exception thrown: \" + e.getMessage());\n        }\n    }\n}\n",
        "package_metric": 1.16,
        "class_metric": 77.78,
        "method_metric": 87.5,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test that the method throws an exception when the string lengths are not equal\n        assertThrows(Exception.class, () -> {\n            String s1 = \"Hello\";\n            String s2 = \"World!\";\n            int result = HammingDistance.calculateHammingDistance(s1, s2);\n            // Should throw an exception because string lengths are not equal\n        });\n    }\n}",
        "package_metric": 0.33,
        "class_metric": 22.22,
        "method_metric": 25.0,
        "pitest": 14.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        String s1 = \"hello\";\n        String s2 = \"world\";\n        int expectedResult = 4; // The hamming distance between \"hello\" and \"world\" is 4\n\n        try {\n            int actualResult = HammingDistance.calculateHammingDistance(s1, s2);\n            assertEquals(expectedResult, actualResult);\n        } catch (Exception e) {\n            fail(\"An exception was thrown: \" + e);\n        }\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 77.78,
        "method_metric": 87.5,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "NodeStack",
        "method_name": "push",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n\n        // Test pushing a single value onto the stack\n        int item1 = 3;\n        stack.push(item1);\n        assertEquals(stack.peek(), item1, \"Expected peek to return pushed value\");\n        assertEquals(stack.size(), 1, \"Expected size to be 1 after pushing a single value onto the stack\");\n\n        // Test pushing multiple values onto the stack\n        int item2 = 4;\n        stack.push(item2);\n        assertEquals(stack.peek(), item2, \"Expected peek to return pushed value\");\n        assertEquals(stack.size(), 2, \"Expected size to be 2 after pushing multiple values onto the stack\");\n    }\n}",
        "package_metric": 13.53,
        "class_metric": 52.83,
        "method_metric": 100.0,
        "pitest": 40.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "NodeStack",
        "method_name": "push",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        assertEquals(0, stack.size());\n        \n        stack.push(1);\n        assertEquals(1, stack.size());\n        assertEquals(1, (int)stack.peek());\n        \n        stack.push(2);\n        assertEquals(2, stack.size());\n        assertEquals(2, (int)stack.peek());\n    }\n}",
        "package_metric": 13.53,
        "class_metric": 52.83,
        "method_metric": 100.0,
        "pitest": 43.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "NodeStack",
        "method_name": "push",
        "test_code": "\npackage com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        // Create a new instance of the NodeStack class\n        NodeStack stack = new NodeStack();\n\n        // Check that the size is 0 before pushing any items\n        assertEquals(0, stack.size());\n\n        // Push an item onto the stack\n        stack.push(\"apple\");\n\n        // Check that the size is now 1\n        assertEquals(1, stack.size());\n\n        // Check that the top item on the stack is \"apple\"\n        assertEquals(\"apple\", stack.peek());\n    }\n}",
        "package_metric": 12.08,
        "class_metric": 47.17,
        "method_metric": 70.0,
        "pitest": 34.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "NodeStack",
        "method_name": "push",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        stack.push(1);\n        assertEquals(stack.peek(), 1);\n        stack.push(2);\n        assertEquals(stack.peek(), 2);\n        stack.pop();\n        assertEquals(stack.peek(), 1);\n    }\n}",
        "package_metric": 15.94,
        "class_metric": 62.26,
        "method_metric": 100.0,
        "pitest": 54.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "NodeStack",
        "method_name": "push",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        for (int i = 0; i < 10; i++) {\n            stack.push(i);\n        }\n\n        assertEquals(stack.size(), 10);\n    }\n}",
        "package_metric": 12.56,
        "class_metric": 49.06,
        "method_metric": 100.0,
        "pitest": 37.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = new int[] {-1, 2, -3, 4};\n        assertEquals(4, AbsoluteMax.getMaxValue(numbers));\n    }\n}",
        "package_metric": 0.37,
        "class_metric": 75.0,
        "method_metric": 85.71,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = new int[] {1, 2, 3};\n        assertEquals(3, AbsoluteMax.getMaxValue(numbers));\n    }\n}\n",
        "package_metric": 0.37,
        "class_metric": 75.0,
        "method_metric": 85.71,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = new int[] {-10, 20, -30, 40};\n        assertEquals(40, AbsoluteMax.getMaxValue(numbers));\n    }\n}\n",
        "package_metric": 0.37,
        "class_metric": 75.0,
        "method_metric": 85.71,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = new int[] {1, 2, 3};\n        int expectedOutput = 3;\n        assertEquals(expectedOutput, AbsoluteMax.getMaxValue(numbers));\n    }\n}",
        "package_metric": 0.37,
        "class_metric": 75.0,
        "method_metric": 85.71,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "decode",
        "test_code": "\npackage com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        // Arrange\n        String message = \"Hello World\";\n        String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n        \n        // Act\n        String actual = SimpleSubstitutionCipher.decode(message, cipherSmall);\n        \n        // Assert\n        assertEquals(\"Hello World\", actual);\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        // Arrange\n        String message = \"Hello World!\";\n        String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n        String cipherCapital = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        \n        // Act\n        String decodedMessage = SimpleSubstitutionCipher.decode(message, cipherSmall);\n        \n        // Assert\n        assertEquals(\"Hello World!\", decodedMessage);\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        String cipherText = \"Hello World!\";\n        String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n        String decoded = SimpleSubstitutionCipher.decode(cipherText, cipherSmall);\n        assertEquals(\"Hello World!\", decoded);\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n        String encryptedMessage = \"qwertyuiopasdfghjklzxcvbnm\";\n        assertEquals(SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall), \"qwertyuiopasdfghjklzxcvbnm\");\n    }\n}",
        "package_metric": 1.65,
        "class_metric": 44.83,
        "method_metric": 92.86,
        "pitest": 39.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/heaps",
        "package_name": "com.thealgorithms.datastructures.heaps",
        "class_name": "FibonacciHeap",
        "method_name": "insert",
        "test_code": "package com.thealgorithms.datastructures.heaps;\nimport java.util.*;\n\n/**\n * FibonacciHeap implementation of PriorityQueue using Fibonacci Heap data structure\n */\npublic class FibonacciHeap {\n    private List<Integer> queue = new ArrayList<>();\n    \n    /**\n     * Add an integer to the priority queue.\n     * @param value integer to be added to the priority queue\n     */\n    public void add(int value) {\n        // TODO: Implement this method\n    }\n\n    /**\n     * Remove and return the smallest integer currently in the\n     * priority queue.\n     * \n     * @return the smallest integer currently in the priority queue\n     */\n    public int remove() {\n        // TODO: Implement this method\n        return -1;\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String input = \"ABC\";\n        assertEquals(input.toLowerCase(), Lower.toLowerCase(input));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"abc\", Lower.toLowerCase(\"ABC\"));\n        assertEquals(\"abc123\", Lower.toLowerCase(\"ABC123\"));\n        assertEquals(\"abcabc\", Lower.toLowerCase(\"abcABC\"));\n        assertEquals(\"abc123abc\", Lower.toLowerCase(\"abc123ABC\"));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String[] inputs = {\"ABC\", \"ABC123\", \"abcABC\", \"abc123ABC\"};\n        for (String input : inputs) {\n            assertEquals(input.toLowerCase(), Lower.toLowerCase(input));\n        }\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        // Test 1: Check that all uppercase letters are converted to lowercase\n        String input = \"ABC\";\n        String expectedOutput = \"abc\";\n        assertEquals(expectedOutput, Lower.toLowerCase(input));\n\n        // Test 2: Check that all uppercase letters with numbers are converted to lowercase\n        input = \"ABC123\";\n        expectedOutput = \"abc123\";\n        assertEquals(expectedOutput, Lower.toLowerCase(input));\n\n        // Test 3: Check that all uppercase letters in a string with other characters are converted to lowercase\n        input = \"abcABC\";\n        expectedOutput = \"abcabc\";\n        assertEquals(expectedOutput, Lower.toLowerCase(input));\n\n        // Test 4: Check that all uppercase letters in a string with numbers and other characters are converted to lowercase\n        input = \"abc123ABC\";\n        expectedOutput = \"abc123abc\";\n        assertEquals(expectedOutput, Lower.toLowerCase(input));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"abc\", Lower.toLowerCase(\"ABC\"));\n        assertEquals(\"abc123\", Lower.toLowerCase(\"ABC123\"));\n        assertEquals(\"abcabc\", Lower.toLowerCase(\"abcABC\"));\n        assertEquals(\"abc123abc\", Lower.toLowerCase(\"abc123ABC\"));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String input = \"ABC\";\n        assertEquals(input.toLowerCase(), Lower.toLowerCase(input));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String[] inputStrings = {\"ABC\", \"ABC123\", \"abcABC\", \"abc123ABC\"};\n        for (String s : inputStrings) {\n            assertEquals(s.toLowerCase(), Lower.toLowerCase(s));\n        }\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "\npackage com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"abc\", Lower.toLowerCase(\"ABC\"));\n        assertEquals(\"abc123\", Lower.toLowerCase(\"ABC123\"));\n        assertEquals(\"abcabc\", Lower.toLowerCase(\"abcABC\"));\n        assertEquals(\"abc123abc\", Lower.toLowerCase(\"abc123ABC\"));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String input = \"HELLO WORLD\";\n        assertEquals(\"hello world\", Lower.toLowerCase(input));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String input = \"Hello World\";\n        String expectedOutput = \"hello world\";\n        assertEquals(expectedOutput, Lower.toLowerCase(input));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "\npackage com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String input = \"Hello World!\";\n        String expectedOutput = \"hello world!\";\n        assertEquals(expectedOutput, Lower.toLowerCase(input));\n    }\n}\n",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "\npackage com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String testString = \"HELLO WORLD\";\n        assertEquals(\"hello world\", Lower.toLowerCase(testString));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String uppercaseString = \"ABC\";\n        String lowercaseString = \"abc\";\n        \n        assertEquals(lowercaseString, Lower.toLowerCase(uppercaseString));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String input = \"Hello World!\";\n        String expectedOutput = \"hello world!\";\n        \n        assertEquals(expectedOutput, Lower.toLowerCase(input));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String input = \"Hello\";\n        String expectedOutput = \"hello\";\n        assertEquals(expectedOutput, Lower.toLowerCase(input));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String input = \"HELLO WORLD\";\n        String expectedOutput = \"hello world\";\n        assertEquals(expectedOutput, Lower.toLowerCase(input));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"hello world\", Lower.toLowerCase(\"HELLO WORLD\"));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"\", Lower.toLowerCase(\"\"));\n        assertEquals(\"hello world!\", Lower.toLowerCase(\"HELLO WORLD!\"));\n        assertEquals(\"hello123!\", Lower.toLowerCase(\"Hello123!\"));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "\npackage com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"hello world\", Lower.toLowerCase(\"HELLO WORLD\"));\n        assertEquals(\"test\", Lower.toLowerCase(\"TEST\"));\n        assertEquals(\"123\", Lower.toLowerCase(\"123\"));\n    }\n}\n",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String input = \"Hello World\";\n        String expectedOutput = \"hello world\";\n        assertEquals(expectedOutput, Lower.toLowerCase(input));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "\npackage com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String input = \"Hello WORLD\";\n        String expectedOutput = \"hello world\";\n        assertEquals(expectedOutput, Lower.toLowerCase(input));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/graphs",
        "package_name": "com.thealgorithms.datastructures.graphs",
        "class_name": "Graph",
        "method_name": "countGraphs",
        "test_code": "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a graph with 3 connected components\n        Graph<String> graph = new Graph<>();\n        graph.addEdge(\"A\", \"B\");\n        graph.addEdge(\"B\", \"C\");\n        graph.addEdge(\"C\", \"D\");\n        graph.addEdge(\"E\", \"F\");\n        graph.addEdge(\"G\", \"H\");\n        \n        // Test that the countGraphs method returns 3 for this graph\n        assertEquals(3, graph.countGraphs());\n    }\n}",
        "package_metric": 4.63,
        "class_metric": 97.06,
        "method_metric": 100.0,
        "pitest": 90.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/graphs",
        "package_name": "com.thealgorithms.datastructures.graphs",
        "class_name": "Graph",
        "method_name": "countGraphs",
        "test_code": "\npackage com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a graph with some nodes and edges\n        Graph<Character> graph = new Graph<>();\n        graph.addEdge('a', 'b');\n        graph.addEdge('a', 'e');\n        graph.addEdge('b', 'e');\n        graph.addEdge('b', 'c');\n        graph.addEdge('c', 'd');\n        graph.addEdge('d', 'a');\n\n        // Count the number of different connected components in the graph\n        int expectedOutput = 1; // There is only one connected component in this graph\n        assertEquals(expectedOutput, graph.countGraphs());\n    }\n}\n",
        "package_metric": 4.75,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 80.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/graphs",
        "package_name": "com.thealgorithms.datastructures.graphs",
        "class_name": "Graph",
        "method_name": "countGraphs",
        "test_code": "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a graph with 3 connected components:\n        // - Component 1: {a, b, c}\n        // - Component 2: {x, y, z}\n        // - Component 3: {w}\n        Graph<Character> graph = new Graph<>();\n        graph.addEdge('a', 'b');\n        graph.addEdge('a', 'c');\n        graph.addEdge('b', 'c');\n        graph.addEdge('x', 'y');\n        graph.addEdge('x', 'z');\n        graph.addEdge('w', 'w');\n        \n        // Expected number of connected components: 3\n        int expectedCount = 3;\n        \n        // Check that the countGraphs() method returns the correct result:\n        assertEquals(expectedCount, graph.countGraphs());\n    }\n}",
        "package_metric": 4.75,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 80.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "FloodFill",
        "method_name": "floodFill",
        "test_code": "\npackage com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FloodFillTest {\n    @Test\n    public void floodFillTest() {\n        int[][] image = new int[5][5];\n        for (int i = 0; i < 5; i++) {\n            for (int j = 0; j < 5; j++) {\n                image[i][j] = 1;\n            }\n        }\n        FloodFill.floodFill(image, 2, 3, 3, 1);\n        assertEquals(image[2][3], 3);\n    }\n}",
        "package_metric": 4.78,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 31.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "FloodFill",
        "method_name": "floodFill",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FloodFillTest {\n    @Test\n    public void floodFillTest() {\n        int[][] image = new int[10][10];\n        for (int i = 0; i < image.length; i++) {\n            for (int j = 0; j < image[i].length; j++) {\n                image[i][j] = 0; // Initialize the image with all zeros\n            }\n        }\n\n        int x = 5, y = 5; // Coordinates of the starting point for flood filling\n        int newColor = 1, oldColor = 0; // New and old colors for flood filling\n        \n        FloodFill.floodFill(image, x, y, newColor, oldColor);\n\n        assertEquals(newColor, image[x][y]); // Check if the starting point has been replaced with the new color\n        assertEquals(newColor, image[x+1][y]); // Check if the horizontally adjacent pixels have been replaced with the new color\n        assertEquals(newColor, image[x-1][y]); // Check if the horizontally adjacent pixels have been replaced with the new color\n        assertEquals(newColor, image[x][y+1]); // Check if the vertically adjacent pixels have been replaced with the new color\n        assertEquals(newColor, image[x][y-1]); // Check if the vertically adjacent pixels have been replaced with the new color\n    }\n}",
        "package_metric": 4.78,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 31.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "FloodFill",
        "method_name": "floodFill",
        "test_code": "\npackage com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FloodFillTest {\n    @Test\n    public void floodFillTest() {\n        int[][] image = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        int x = 0;\n        int y = 0;\n        int newColor = 1;\n        int oldColor = 1;\n        FloodFill.floodFill(image, x, y, newColor, oldColor);\n        assertEquals(newColor, image[x][y]);\n    }\n}",
        "package_metric": 0.64,
        "class_metric": 13.33,
        "method_metric": 16.67,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "FloodFill",
        "method_name": "floodFill",
        "test_code": "\npackage com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FloodFillTest {\n    @Test\n    public void floodFillTest() {\n        int[][] image = {{1, 2}, {3, 4}};\n        int x = 0, y = 0, newColor = 5, oldColor = 1;\n        \n        FloodFill.floodFill(image, x, y, newColor, oldColor);\n        \n        assertEquals(5, image[0][0]);\n        assertEquals(2, image[0][1]);\n        assertEquals(3, image[1][0]);\n        assertEquals(4, image[1][1]);\n    }\n}",
        "package_metric": 4.78,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 31.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "FloodFill",
        "method_name": "floodFill",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FloodFillTest {\n    @Test\n    public void floodFillTest() {\n        int[][] image = new int[3][3];\n        int x = 0;\n        int y = 1;\n        int newColor = 255;\n        int oldColor = 0;\n\n        image[x][y] = oldColor;\n        FloodFill.floodFill(image, x, y, newColor, oldColor);\n\n        assertEquals(newColor, image[x][y]);\n    }\n}",
        "package_metric": 4.78,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 34.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] array = new Integer[] { 5, 2, 8, 3, 1, 6 };\n        QuickSort quickSort = new QuickSort();\n        assertArrayEquals(new Integer[] { 1, 2, 3, 5, 6, 8 }, quickSort.sort(array));\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "\npackage com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] array = new Integer[] { 5, 2, 9, 1, 6 };\n        int left = 0;\n        int right = array.length - 1;\n        QuickSort quickSort = new QuickSort();\n        assertArrayEquals(new Integer[] { 1, 2, 5, 6, 9 }, quickSort.sort(array));\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 79.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "\npackage com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        // Create an array of integers to be sorted\n        Integer[] arr = new Integer[]{5, 10, 3, 2, 8, 6, 9};\n        \n        // Sort the array using QuickSort algorithm\n        QuickSort quickSort = new QuickSort();\n        Integer[] sortedArr = quickSort.sort(arr);\n        \n        // Check if the array is sorted in increasing order\n        assertArrayEquals(new Integer[]{2, 3, 5, 6, 8, 9, 10}, sortedArr);\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    private final SortAlgorithm sort = new QuickSort();\n\n    @Test\n    public void sortTest() {\n        Integer[] input = new Integer[] { 3, 2, 1 };\n        Integer[] expectedOutput = new Integer[] { 1, 2, 3 };\n        Integer[] actualOutput = sort.sort(input);\n        assertArrayEquals(expectedOutput, actualOutput);\n    }\n}",
        "package_metric": 2.09,
        "class_metric": 95.65,
        "method_metric": 100.0,
        "pitest": 57.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "\npackage com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] input = new Integer[] { 3, 2, 1 };\n        Integer[] expectedOutput = new Integer[] { 1, 2, 3 };\n        \n        QuickSort quickSort = new QuickSort();\n        Integer[] actualOutput = quickSort.sort(input);\n        \n        assertArrayEquals(expectedOutput, actualOutput);\n    }\n}",
        "package_metric": 2.09,
        "class_metric": 95.65,
        "method_metric": 100.0,
        "pitest": 71.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "BoxAndWhiskerCalculator",
        "method_name": "calculateQ1",
        "test_code": "package org.jfree.data.statistics;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class BoxAndWhiskerCalculator {\n    public static double calculateQ1(List values) {\n        return 0.0;\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": -1
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "BoxAndWhiskerCalculator",
        "method_name": "calculateQ1",
        "test_code": "package org.jfree.data.statistics;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BoxAndWhiskerCalculatorTests {\n    @Test\n    public void calculateQ1Test() {\n        List<Number> values = Arrays.asList(5.0, 1.0, 2.0, 3.0, 4.0);\n        assertEquals(2.0, BoxAndWhiskerCalculator.calculateQ1(values));\n    }\n}",
        "package_metric": 2.08,
        "class_metric": 11.59,
        "method_metric": 80.0,
        "pitest": 11.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "BoxAndWhiskerCalculator",
        "method_name": "calculateQ1",
        "test_code": "package org.jfree.data.statistics;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class BoxAndWhiskerCalculator {\n    public static double calculateQ1(List values) {\n        if (values == null || values.isEmpty()) return Double.NaN;\n        List sorted = new ArrayList<>(values);\n        Collections.sort(sorted);\n        int count = sorted.size();\n        if (count % 2 != 0) return calculateMedian(sorted, 0, count / 2);\n        else return calculateMedian(sorted, 0, count / 2 - 1);\n    }\n\n    public static double calculateQ3(List values) {\n        if (values == null || values.isEmpty()) return Double.NaN;\n        List sorted = new ArrayList<>(values);\n        Collections.sort(sorted);\n        int count = sorted.size();\n        if (count % 2 != 0) return calculateMedian(sorted, count / 2, count - 1);\n        else return calculateMedian(sorted, count / 2 + 1, count - 1);\n    }\n\n    private static double calculateMedian(List values, int lowIdx, int highIdx) {\n        if (values.size() == 0) return Double.NaN;\n        else if (values.size() % 2 == 1) return ((Number) values.get(lowIdx + 1)).doubleValue();\n        else return ((Number) values.get(lowIdx)).doubleValue();\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "Regression",
        "method_name": "getPowerRegression",
        "test_code": "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        // Create test data\n        double[][] data = new double[4][2];\n        data[0] = new double[]{1, 1};\n        data[1] = new double[]{2, 2};\n        data[2] = new double[]{3, 3};\n        data[3] = new double[]{4, 4};\n\n        // Call the method under test\n        double[] result = Regression.getPowerRegression(data);\n\n        // Verify that the expected result is returned\n        assertEquals(result[0], Math.pow(Math.exp(1.0), data[2][1] - result[1] * data[2][0]));\n    }\n}",
        "package_metric": 1.65,
        "class_metric": 13.37,
        "method_metric": 95.83,
        "pitest": 10.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "PriorRegion",
        "test_code": "\npackage org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void PriorRegionTest() {\n        int parent = 5;\n        int color = 0;\n        double minArea = 100;\n        double maxArea = 1000;\n        int label = 3;\n\n        int expected = -1; // No match found\n        int actual = Blobs.PriorRegion(parent, color, minArea, maxArea, label);\n\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 0.25,
        "class_metric": 9.23,
        "method_metric": 81.82,
        "pitest": 1.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "PriorRegion",
        "test_code": "\npackage org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void PriorRegionTest() {\n        int Parent = 5;\n        int Color = 1;\n        double MinArea = 20.0;\n        double MaxArea = 30.0;\n        int Label = 3;\n        \n        int expectedPriorRegion = -1; // No match found\n        \n        int actualPriorRegion = Blobs.PriorRegion(Parent, Color, MinArea, MaxArea, Label);\n        \n        assertEquals(expectedPriorRegion, actualPriorRegion);\n    }\n}",
        "package_metric": 0.25,
        "class_metric": 9.23,
        "method_metric": 81.82,
        "pitest": 1.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Frame",
        "method_name": "clone",
        "test_code": "package org.bytedeco.javacv;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        // Create a new instance of the Frame class\n        Frame frame = new Frame();\n\n        // Set some properties of the frame\n        frame.imageWidth = 100;\n        frame.imageHeight = 200;\n        frame.imageDepth = 300;\n        frame.keyFrame = true;\n        frame.pictType = 'a';\n\n        // Clone the frame and check that the properties are correct\n        Frame clonedFrame = frame.clone();\n        assertEquals(100, clonedFrame.imageWidth);\n        assertEquals(200, clonedFrame.imageHeight);\n        assertEquals(300, clonedFrame.imageDepth);\n        assertTrue(clonedFrame.keyFrame);\n        assertEquals('a', clonedFrame.pictType);\n    }\n}",
        "package_metric": 0.16,
        "class_metric": 13.16,
        "method_metric": 72.0,
        "pitest": 5.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "FFmpegFrameGrabber",
        "method_name": "getAudioFrameRate",
        "test_code": "\npackage org.bytedeco.javacv;\nimport java.nio.*;\npublic class FFmpegFrameGrabber {\n    public static int getAudioFrameRate() {\n        return -1; // 0 is a valid frame rate, but here we are looking for any value other than -1 which indicates that the method was never called or there was an exception while executing it.\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "FFmpegFrameGrabber",
        "method_name": "getAudioFrameRate",
        "test_code": "import org.bytedeco.javacv.*;\n\npublic class FFmpegFrameGrabberTest {\n    public static void main(String[] args) throws Exception {\n        String filename = \"path/to/video.mp4\";\n        FFmpegFrameGrabber grabber = new FFmpegFrameGrabber(filename);\n        grabber.start();\n        double audioFrameRate = grabber.getAudioFrameRate();\n        System.out.println(\"Audio frame rate: \" + audioFrameRate);\n        grabber.stop();\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "BlobAnalysis",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void BlobAnalysisTest() {\n        // Your test code goes here\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Create two double arrays with different lengths\n        double[] arr1 = new double[] { 1.0, 2.0 };\n        double[] arr2 = new double[] { 3.0, 4.0, 5.0 };\n        \n        // Create a CompareToBuilder and append the arrays\n        CompareToBuilder builder = new CompareToBuilder();\n        builder.append(arr1, arr2);\n        \n        // Check that the comparison result is -1 (arr1 is shorter than arr2)\n        assertEquals(-1, builder.toComparison());\n    }\n}",
        "package_metric": 0.58,
        "class_metric": 4.31,
        "method_metric": 43.75,
        "pitest": 2.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "\npackage org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Test 1: Testing with different length arrays\n        double[] lhs = new double[]{1.0, 2.0};\n        double[] rhs = new double[]{3.0, 4.0, 5.0};\n        CompareToBuilder builder = new CompareToBuilder().append(lhs, rhs);\n        assertEquals(-1, builder.toComparison());\n\n        // Test 2: Testing with equal length arrays and different values\n        lhs = new double[]{1.0, 2.0};\n        rhs = new double[]{3.0, 4.0};\n        builder = new CompareToBuilder().append(lhs, rhs);\n        assertEquals(-1, builder.toComparison());\n\n        // Test 3: Testing with equal length arrays and same values\n        lhs = new double[]{1.0, 2.0};\n        rhs = new double[]{1.0, 2.0};\n        builder = new CompareToBuilder().append(lhs, rhs);\n        assertEquals(0, builder.toComparison());\n    }\n}",
        "package_metric": 0.9,
        "class_metric": 6.67,
        "method_metric": 68.75,
        "pitest": 6.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "\npackage org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        double[] lhs = new double[]{1.0, 2.0, 3.0};\n        double[] rhs = new double[]{4.0, 5.0, 6.0};\n\n        CompareToBuilder builder = new CompareToBuilder().append(lhs, rhs);\n        assertEquals(-1, builder.toComparison());\n    }\n}",
        "package_metric": 0.79,
        "class_metric": 5.88,
        "method_metric": 62.5,
        "pitest": 4.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "\npackage org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        double[] lhs = new double[]{1, 2, 3};\n        double[] rhs = new double[]{1, 2, 4};\n        CompareToBuilder builder = new CompareToBuilder();\n        assertEquals(-1, builder.append(lhs, rhs).toComparison());\n    }\n}",
        "package_metric": 0.79,
        "class_metric": 5.88,
        "method_metric": 62.5,
        "pitest": 4.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "\npackage org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        double[] lhs = {1, 2, 3};\n        double[] rhs = {4, 5, 6};\n        CompareToBuilder builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertEquals(-1, builder.toComparison());\n    }\n}",
        "package_metric": 0.79,
        "class_metric": 5.88,
        "method_metric": 62.5,
        "pitest": 4.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "\npackage org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        double[] lhs = new double[]{1, 2};\n        double[] rhs = new double[]{3, 4};\n        CompareToBuilder compareToBuilder = new CompareToBuilder().append(lhs, rhs);\n        assertEquals(-1, compareToBuilder.toComparison());\n    }\n}",
        "package_metric": 0.79,
        "class_metric": 5.88,
        "method_metric": 62.5,
        "pitest": 4.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Create two double arrays with the same length and elements\n        double[] lhs = new double[] {1.0, 2.0, 3.0};\n        double[] rhs = new double[] {1.0, 2.0, 3.0};\n        \n        // Call the append method and compare the results\n        CompareToBuilder builder = new CompareToBuilder();\n        int comparison = builder.append(lhs, rhs).toComparison();\n        assertEquals(comparison, 0);\n    }\n}",
        "package_metric": 0.79,
        "class_metric": 5.88,
        "method_metric": 62.5,
        "pitest": 3.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class CompareToBuilderTest {\n    private int compare(Integer lhs, Integer rhs) {\n        return new CompareToBuilder().append(lhs, rhs).toComparison();\n    }\n    \n    @Test\n    public void testCompare_null() {\n        assertEquals(-1, compare(null, 1));\n        assertEquals(1, compare(2, null));\n        assertEquals(0, compare((Integer)null, (Integer)null));\n    }\n    \n    @Test\n    public void testCompare_simple() {\n        Integer integer = new Integer(1);\n        assertEquals(-1, compare(integer, 2));\n        assertEquals(1, compare(2, integer));\n        assertEquals(0, compare(integer, integer));\n        \n        int aByte = (byte) 5;\n        int anotherByte = (byte) 7;\n        assertEquals(-1, compare(aByte, anotherByte));\n    }\n    \n    @Test\n    public void testCompare_equal() {\n        // equal objects are not tested for reference equality\n        Integer integer = new Integer(1);\n        assertEquals(0, compare(integer, 1));\n        \n        int aByte = (byte) 5;\n        int anotherByte = (byte) 5;\n        assertEquals(0, compare(aByte, anotherByte));\n    }\n}",
        "package_metric": 1.05,
        "class_metric": 7.84,
        "method_metric": 89.475,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        byte[] lhs = new byte[]{1, 2, 3};\n        byte[] rhs = new byte[]{1, 2, 4};\n        \n        CompareToBuilder builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        \n        assertEquals(-1, builder.toComparison());\n    }\n}",
        "package_metric": 0.79,
        "class_metric": 5.88,
        "method_metric": 62.5,
        "pitest": 4.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "\npackage org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        byte[] lhs = new byte[5];\n        byte[] rhs = new byte[5];\n        \n        for (int i = 0; i < lhs.length; i++) {\n            lhs[i] = (byte) i;\n            rhs[i] = (byte) i;\n        }\n        \n        CompareToBuilder builder = new CompareToBuilder();\n        assertEquals(builder.append(lhs, rhs).toComparison(), 0);\n    }\n}",
        "package_metric": 0.79,
        "class_metric": 5.88,
        "method_metric": 62.5,
        "pitest": 3.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        boolean[] lhs = new boolean[] { true, false };\n        boolean[] rhs = new boolean[] { true, true };\n        CompareToBuilder builder = new CompareToBuilder();\n        assertEquals(builder.append(lhs, rhs).toComparison(), -1);\n    }\n}",
        "package_metric": 0.95,
        "class_metric": 7.06,
        "method_metric": 62.5,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Arrange\n        boolean[] lhs = new boolean[2];\n        boolean[] rhs = new boolean[3];\n        lhs[0] = true;\n        lhs[1] = false;\n        rhs[0] = true;\n        rhs[1] = false;\n        rhs[2] = true;\n\n        // Act\n        CompareToBuilder builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        int comparison = builder.toComparison();\n\n        // Assert\n        assertEquals(-1, comparison);\n    }\n}",
        "package_metric": 0.58,
        "class_metric": 4.31,
        "method_metric": 43.75,
        "pitest": 3.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "\npackage org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        boolean[] lhs = new boolean[]{true, false};\n        boolean[] rhs = new boolean[]{false, true};\n        CompareToBuilder builder = new CompareToBuilder();\n        assertEquals(1, builder.append(lhs, rhs).toComparison());\n    }\n}",
        "package_metric": 0.9,
        "class_metric": 6.67,
        "method_metric": 56.25,
        "pitest": 4.0
    }
]