[
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/encryption",
        "package_name": "org.jeecg.common.util.encryption",
        "class_name": "AesEncryptUtil",
        "method_name": "desEncrypt",
        "test_code": "package org.jeecg.common.util.encryption;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AesEncryptUtilTest {\n\n    private static String KEY = \"1234567890123456\"; // Replace with actual key\n    private static String IV = \"1234567890123456\"; // Replace with actual IV\n\n    @Test\n    public void desEncryptTest() {\n        String originalData = \"Hello World\";\n        String encryptedData, decryptedData;\n\n        try {\n            // Encrypt the original data\n            encryptedData = AesEncryptUtil.encrypt(originalData, KEY, IV);\n            // Decrypt the encrypted data\n            decryptedData = AesEncryptUtil.desEncrypt(encryptedData, KEY, IV);\n            \n            // Remove any potential trailing whitespace or padding\n            String trimmedDecryptedData = decryptedData.trim();\n            \n            // Make assertions\n            assertNotNull(encryptedData, \"Encrypted data should not be null\");\n            assertNotNull(decryptedData, \"Decrypted data should not be null\");\n            assertEquals(originalData, trimmedDecryptedData, \"Decrypted data should match the original data\");\n            \n        } catch (Exception e) {\n            fail(\"An exception should not be thrown during the encryption or decryption process\");\n        }\n    }\n}",
        "package_metric": 78.12,
        "class_metric": 79.31,
        "method_metric": 100.0,
        "pitest": 64.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/encryption",
        "package_name": "org.jeecg.common.util.encryption",
        "class_name": "AesEncryptUtil",
        "method_name": "desEncrypt",
        "test_code": "package org.jeecg.common.util.encryption;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AesEncryptUtilTest {\n    \n    @Test\n    public void desEncryptTest() {\n        // Test data initialization\n        String inputString = \"Hello World!\";\n        String key = \"1234567812345678\";   // 16-byte key for AES\n        String iv = \"1234567812345678\";    // 16-byte initialization vector\n        \n        // Expected value is not predefined as the encryption result would be different for each run\n        // because of potential padding and other factors such as IV or randomness in the encryption process.\n        \n        try {\n            // Encrypting the inputString\n            String encryptedString = AesEncryptUtil.encrypt(inputString, key, iv);\n            assertNotNull(encryptedString, \"Encrypted string should not be null\");\n            \n            // Decrypting the encryptedString\n            String decryptedString = AesEncryptUtil.desEncrypt(encryptedString, key, iv);\n            assertNotNull(decryptedString, \"Decrypted string should not be null\");\n            \n            // The original inputString and decryptedString after desEncrypt should match\n            assertEquals(inputString, decryptedString, \"Decrypted string should match the original input\");\n        } catch (Exception e) {\n            fail(\"An exception should not be thrown during the encryption or decryption process\");\n        }\n    }\n}",
        "package_metric": 78.12,
        "class_metric": 79.31,
        "method_metric": 100.0,
        "pitest": 64.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/encryption",
        "package_name": "org.jeecg.common.util.encryption",
        "class_name": "AesEncryptUtil",
        "method_name": "desEncrypt",
        "test_code": "package org.jeecg.common.util.encryption;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AesEncryptUtilTest {\n    @Test\n    public void desEncryptTest() throws Exception {\n        // Assuming EncryptedString.key and EncryptedString.iv have been initialized properly\n        String key = EncryptedString.key; \n        String iv = EncryptedString.iv;\n        String originalData = \"This is a test string.\";\n        String encryptedData = AesEncryptUtil.encrypt(originalData, key, iv);\n        assertNotNull(encryptedData, \"Encrypted data should not be null\");\n\n        // Using key and iv to decrypt the encrypted string\n        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);\n        assertNotNull(decryptedData, \"Decrypted data should not be null\");\n        assertEquals(originalData, decryptedData, \"Decrypted string should match the original string\");\n    }\n}",
        "package_metric": 78.12,
        "class_metric": 79.31,
        "method_metric": 100.0,
        "pitest": 64.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/encryption",
        "package_name": "org.jeecg.common.util.encryption",
        "class_name": "AesEncryptUtil",
        "method_name": "desEncrypt",
        "test_code": "package org.jeecg.common.util.encryption;\n\nimport org.apache.shiro.codec.Base64;\nimport org.junit.jupiter.api.Test;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AesEncryptUtilTest {\n\n    @Test\n    public void desEncryptTest() throws Exception {\n        // Given\n        String originalData = \"UnitTestString\";\n        String key = \"1234567812345678\"; // AES key size (128 bit, 192 bit, 256 bit) - for tests 128 bit\n        String iv = \"1234567812345678\"; // AES block size (16 bytes)\n\n        // Encrypt data first. The provided source code only includes a method for decryption, assumed that an encryption method exists\n        String encryptedData = AesEncryptUtil.encrypt(originalData, key, iv);\n\n        // When\n        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);\n\n        // Then\n        assertEquals(originalData, decryptedData, \"The decrypted data should match the original data.\");\n    }\n}",
        "package_metric": 78.12,
        "class_metric": 79.31,
        "method_metric": 100.0,
        "pitest": 64.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/encryption",
        "package_name": "org.jeecg.common.util.encryption",
        "class_name": "AesEncryptUtil",
        "method_name": "desEncrypt",
        "test_code": "package org.jeecg.common.util.encryption;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AesEncryptUtilTest {\n\n    @Test\n    public void desEncryptTest() throws Exception {\n        // Given\n        String input = \"Some encrypted text\";\n        String key = \"1234567890123456\"; // Assume key and iv are 16 bytes long\n        String iv = \"1234567890123456\";\n        \n        // Encrypt the text (to obtain a base for decryption)\n        String encryptedData = AesEncryptUtil.encrypt(input, key, iv);\n        \n        // When\n        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);\n        \n        // Then\n        assertEquals(input, decryptedData, \"The decrypted text should be equal to the original text\");\n    }\n}",
        "package_metric": 78.12,
        "class_metric": 79.31,
        "method_metric": 100.0,
        "pitest": 64.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/encryption",
        "package_name": "org.jeecg.common.util.encryption",
        "class_name": "AesEncryptUtil",
        "method_name": "desEncrypt",
        "test_code": "package org.jeecg.common.util.encryption;\n\nimport org.apache.shiro.codec.Base64;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class AesEncryptUtilTest {\n    \n    @Test\n    public void desEncryptTest() throws Exception {\n        // Given\n        final String inputString = \"Hello World!\";\n        final String key = \"1234567890123456\"; // A dummy 16-byte key\n        final String iv = \"1234567890123456\"; // A dummy 16-byte IV\n        \n        // Encrypt the string, we assume the 'encrypt' method is correctly implemented and works as the opposite of 'desEncrypt'\n        String encryptedData = AesEncryptUtil.encrypt(inputString, key, iv); \n\n        // When\n        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);\n\n        // Then\n        assertEquals(inputString, decryptedData, \"The decrypted string should match the original string\");\n    }\n}",
        "package_metric": 78.12,
        "class_metric": 79.31,
        "method_metric": 100.0,
        "pitest": 64.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/encryption",
        "package_name": "org.jeecg.common.util.encryption",
        "class_name": "AesEncryptUtil",
        "method_name": "desEncrypt",
        "test_code": "package org.jeecg.common.util.encryption;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AesEncryptUtilTest {\n    \n    private static final String KEY = \"1234567890123456\"; // Example key (must be 16 bytes)\n    private static final String IV = \"1234567890123456\"; // Example IV (must be 16 bytes)\n    \n    @Test\n    public void desEncryptTest() throws Exception {\n        String dataToEncrypt = \"Hello, World!\";\n        // Assuming there's a working 'encrypt' method in AesEncryptUtil\n        String encryptedData = AesEncryptUtil.encrypt(dataToEncrypt, KEY, IV);\n        assertNotNull(encryptedData, \"Encrypted data should not be null\");\n        \n        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, KEY, IV);\n        assertNotNull(decryptedData, \"Decrypted data should not be null\");\n        assertEquals(dataToEncrypt, decryptedData, \"The decrypted data should match the original\");\n    }\n}",
        "package_metric": 78.12,
        "class_metric": 79.31,
        "method_metric": 100.0,
        "pitest": 64.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/encryption",
        "package_name": "org.jeecg.common.util.encryption",
        "class_name": "AesEncryptUtil",
        "method_name": "desEncrypt",
        "test_code": "package org.jeecg.common.util.encryption;\n\nimport org.apache.shiro.codec.Base64;\nimport org.junit.jupiter.api.Test;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class AesEncryptUtilTest {\n\n    @Test\n    public void desEncryptTest() throws Exception {\n        // Arrange\n        String key = \"0123456789abcdef\"; // Key must be of length 16, 24, or 32 bytes\n        String iv = \"abcdef9876543210\";  // IV must be 16 bytes long\n        String originalData = \"Hello World!\";\n        String encryptedData = AesEncryptUtil.encrypt(originalData, key, iv);\n\n        // Act\n        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);\n\n        // Assert\n        assertEquals(originalData, decryptedData.replaceAll(\"[\\\\u0000]\", \"\"));\n\n        // Assert exception throwing on illegal arguments (like short key or IV)\n        String shortKey = \"short\";\n        String shortIV = \"short\";\n        assertThrows(Exception.class, () -> AesEncryptUtil.desEncrypt(encryptedData, shortKey, iv));\n        assertThrows(Exception.class, () -> AesEncryptUtil.desEncrypt(encryptedData, key, shortIV));\n    }\n}",
        "package_metric": 78.12,
        "class_metric": 79.31,
        "method_metric": 100.0,
        "pitest": 64.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/encryption",
        "package_name": "org.jeecg.common.util.encryption",
        "class_name": "AesEncryptUtil",
        "method_name": "desEncrypt",
        "test_code": "package org.jeecg.common.util.encryption;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AesEncryptUtilTest {\n\n    // Constants to be used for the key and IV. Their size and values would depend\n    // on the encryption algorithm requirements.\n    private static final String KEY = \"1234567890123456\"; // 16-byte key for AES\n    private static final String IV = \"1234567890123456\"; // 16-byte IV for AES\n    \n    @Test\n    public void desEncryptTest() throws Exception {\n        String inputString = \"Hello World!\";\n        String key = KEY;\n        String iv = IV;\n        \n        // Perform encryption then decryption to test the full cycle\n        String encryptedData = AesEncryptUtil.encrypt(inputString, key, iv);\n        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);\n        \n        // Assertions\n        // The decrypted data should match the original input\n        assertEquals(inputString, decryptedData);\n        \n        // Verify that encrypting a blank string doesn't cause an error\n        encryptedData = AesEncryptUtil.encrypt(\"\", key, iv);\n        decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);\n        assertEquals(\"\", decryptedData);\n\n        // If there are known issues (such as padding problems), you might want to add \n        // specific tests for those cases as well. \n    }\n}",
        "package_metric": 78.12,
        "class_metric": 79.31,
        "method_metric": 100.0,
        "pitest": 64.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/encryption",
        "package_name": "org.jeecg.common.util.encryption",
        "class_name": "AesEncryptUtil",
        "method_name": "desEncrypt",
        "test_code": "package org.jeecg.common.util.encryption;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Base64;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AesEncryptUtilTest {\n    \n    // Utility method to encrypt data for testing\n    private static String encryptData(String data, String key, String iv) throws Exception {\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/NoPadding\");\n        SecretKeySpec keyspec = new SecretKeySpec(key.getBytes(), \"AES\");\n        IvParameterSpec ivspec = new IvParameterSpec(iv.getBytes());\n\n        cipher.init(Cipher.ENCRYPT_MODE, keyspec, ivspec);\n        byte[] encrypted = cipher.doFinal(data.getBytes());\n\n        return Base64.getEncoder().encodeToString(encrypted);\n    }\n    \n    @Test\n    public void desEncryptTest() throws Exception {\n        String key = \"1234567890123456\"; // Example key (must be 16 bytes)\n        String iv = \"1234567890123456\"; // Example IV (must be 16 bytes)\n        String originalData = \"Secret Message\";\n\n        // Pad originalData to block size if necessary (AES block size is 16 bytes)\n        while (originalData.length() % 16 != 0) {\n            originalData += \"\\u0000\";\n        }\n\n        String encryptedData = encryptData(originalData, key, iv);\n        \n        // The actual test starts here\n        \n        // Decrypt the encrypted data\n        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);\n        \n        // Check if the decrypted string matches the original data after removing padding\n        assertEquals(originalData.replaceAll(\"\\\\u0000\", \"\"), decryptedData);\n    }\n}",
        "package_metric": 37.5,
        "class_metric": 34.48,
        "method_metric": 100.0,
        "pitest": 14.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/encryption",
        "package_name": "org.jeecg.common.util.encryption",
        "class_name": "AesEncryptUtil",
        "method_name": "desEncrypt",
        "test_code": "package org.jeecg.common.util.encryption;\n\nimport org.junit.jupiter.api.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.Base64;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AesEncryptUtilTest {\n    \n    @Test\n    public void desEncryptTest() throws Exception {\n        // Prepare the data to encrypt\n        String inputString = \"This is a secret message\";\n        String key = \"1234567890123456\"; // 16-byte key for AES\n        String iv = \"1234567890123456\"; // 16-byte IV for AES\n\n        // Encrypt the data using the source code logic\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/NoPadding\");\n        SecretKeySpec keyspec = new SecretKeySpec(key.getBytes(), \"AES\");\n        IvParameterSpec ivspec = new IvParameterSpec(iv.getBytes());\n\n        cipher.init(Cipher.ENCRYPT_MODE, keyspec, ivspec);\n        byte[] paddedData = padString(inputString).getBytes();\n        byte[] encryptedData = cipher.doFinal(paddedData);\n        String encryptedString = Base64.getEncoder().encodeToString(encryptedData);\n        \n        // Call the method to test\n        String decryptedString = AesEncryptUtil.desEncrypt(encryptedString, key, iv);\n\n        // Remove padding manually from the string (if necessary in the case of 'NoPadding')\n        String trimmedDecryptedString = inputString.trim();\n\n        // Verify that the decrypted string matches the original input\n        assertEquals(inputString, trimmedDecryptedString, \"Decrypted string should match the original\");\n    }\n\n    private static String padString(String source) {\n        char paddingChar = '\\0';\n        int size = 16;\n        int x = source.length() % size;\n        int padLength = size - x;\n\n        for (int i = 0; i < padLength; i++) {\n            source += paddingChar;\n        }\n        return source;\n    }\n}",
        "package_metric": 37.5,
        "class_metric": 34.48,
        "method_metric": 100.0,
        "pitest": 7.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/encryption",
        "package_name": "org.jeecg.common.util.encryption",
        "class_name": "AesEncryptUtil",
        "method_name": "desEncrypt",
        "test_code": "package org.jeecg.common.util.encryption;\n\nimport org.junit.jupiter.api.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.Base64;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AesEncryptUtilTest {\n    private static final String KEY = \"1234567890123456\"; // example key (should be 16, 24, or 32 bytes)\n    private static final String IV = \"1234567890123456\"; // example IV (must be 16 bytes)\n\n    @Test\n    public void desEncryptTest() throws Exception {\n        // Test data initialisation\n        String originalData = \"Hello World!\";\n        String data = encryptData(originalData, KEY, IV);\n\n        // Act\n        String decryptedData = AesEncryptUtil.desEncrypt(data, KEY, IV);\n\n        // Assert\n        assertEquals(originalData, decryptedData);\n    }\n\n    private String encryptData(String input, String key, String iv) throws Exception {\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/NoPadding\");\n        int blockSize = cipher.getBlockSize();\n        byte[] data = input.getBytes();\n        int plaintextLength = data.length;\n        if (plaintextLength % blockSize != 0) {\n            plaintextLength = plaintextLength + (blockSize - (plaintextLength % blockSize));\n            byte[] plaintext = new byte[plaintextLength];\n            System.arraycopy(data, 0, plaintext, 0, data.length);\n            data = plaintext;\n        }\n        SecretKeySpec keyspec = new SecretKeySpec(key.getBytes(), \"AES\");\n        IvParameterSpec ivspec = new IvParameterSpec(iv.getBytes());\n\n        cipher.init(Cipher.ENCRYPT_MODE, keyspec, ivspec);\n        byte[] encrypted = cipher.doFinal(data);\n        return Base64.getEncoder().encodeToString(encrypted);\n    }\n}",
        "package_metric": 37.5,
        "class_metric": 34.48,
        "method_metric": 100.0,
        "pitest": 14.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/security",
        "package_name": "org.jeecg.common.util.security",
        "class_name": "JdbcSecurityUtil",
        "method_name": "validate",
        "test_code": "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.Test;\nimport org.jeecg.common.exception.JeecgBootException;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n\npublic class JdbcSecurityUtilTest {\n\n    @Test\n    public void validateTest() {\n        // Case 1: JDBC URL without questionable parameters should not throw an exception\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/mydb?user=myuser&password=mypass\"));\n\n        // Case 2: JDBC URL with an empty string should not throw an exception\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"\"));\n\n        // Case 3: JDBC URL with null should not throw an exception\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(null));\n\n        // Case 4: JDBC URL with no parameters (no '?' character) should not throw an exception.\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/mydb\"));\n\n        // Case 5: JDBC URL containing not allowed property should throw a JeecgBootException\n        assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/mydb?sslhostnameverifier=strict&user=myuser&password=mypass\"));\n\n        // Case 6: JDBC URL containing multiple not allowed properties should throw a JeecgBootException\n        assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/mydb?authenticationPluginClassName=SomeClass&sslhostnameverifier=strict&socketFactory=SomeFactory\"));\n\n        // Case 7: JDBC URL with not allowed property in different case should throw a JeecgBootException\n        assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/mydb?SSlHoStNaMeVeRifier=strict\"));\n    }\n}",
        "package_metric": 9.72,
        "class_metric": 93.33,
        "method_metric": 100.0,
        "pitest": 83.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/security",
        "package_name": "org.jeecg.common.util.security",
        "class_name": "JdbcSecurityUtil",
        "method_name": "validate",
        "test_code": "package org.jeecg.common.util.security;\n\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n\n    @Test\n    public void validateTest_withEmptyUrl() {\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"\"));\n    }\n    \n    @Test\n    public void validateTest_withValidUrl() {\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/mydb?user=me&password=secret\"));\n    }\n    \n    @Test\n    public void validateTest_withNotAllowedProp() {\n        JeecgBootException exception = assertThrows(JeecgBootException.class, () ->\n                JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/mydb?sslhostnameverifier=true&user=me&password=secret\")\n        );\n        assertTrue(exception.getMessage().contains(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010sslhostnameverifier\u3011\"));\n    }\n    \n    @Test\n    public void validateTest_withUrlLackingConcatChar() {\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/mydb\"));\n    }\n    \n    @Test\n    public void validateTest_withMultipleNotAllowedProps() {\n        JeecgBootException exception = assertThrows(JeecgBootException.class, () ->\n                JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/mydb?authenticationPluginClassName=com.example.plugin&sslhostnameverifier=true&user=me&password=secret\")\n        );\n        assertTrue(exception.getMessage().contains(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010authenticationPluginClassName\u3011\") || exception.getMessage().contains(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010sslhostnameverifier\u3011\"));\n    }\n}",
        "package_metric": 9.72,
        "class_metric": 93.33,
        "method_metric": 100.0,
        "pitest": 83.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/security",
        "package_name": "org.jeecg.common.util.security",
        "class_name": "JdbcSecurityUtil",
        "method_name": "validate",
        "test_code": "package org.jeecg.common.util.security;\n\nimport org.jeecg.common.exception.JeecgBootException;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n\nimport org.junit.jupiter.api.Test;\n\npublic class JdbcSecurityUtilTest {\n\n    @Test\n    public void validateTest() {\n        // Scenario 1: Test with an empty jdbcUrl\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"\"));\n\n        // Scenario 2: Test with a jdbcUrl that does not contain prohibited properties\n        String safeJdbcUrl = \"jdbc:postgresql://localhost/test?user=foo&password=bar\";\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(safeJdbcUrl));\n\n        // Scenario 3: Test with a jdbcUrl that contains a prohibited property\n        String riskyJdbcUrl = \"jdbc:postgresql://localhost/test?sslhostnameverifier=foo&user=foo&password=bar\";\n        assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(riskyJdbcUrl));\n\n        // Scenario 4: Test jdbcUrl that does not contain \"?\" should not throw any Exception\n        String incompleteJdbcUrl = \"jdbc:postgresql://localhost/test\";\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(incompleteJdbcUrl));\n    }\n}",
        "package_metric": 9.72,
        "class_metric": 93.33,
        "method_metric": 100.0,
        "pitest": 83.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/security",
        "package_name": "org.jeecg.common.util.security",
        "class_name": "JdbcSecurityUtil",
        "method_name": "validate",
        "test_code": "package org.jeecg.common.util.security;\n\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    \n    @Test\n    public void validateTestWithoutDisallowedProps() {\n        String safeJdbcUrl = \"jdbc:postgresql://localhost:5432/mydb?user=foo&password=bar\";\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(safeJdbcUrl));\n    }\n\n    @Test\n    public void validateTestWithDisallowedProp() {\n        String dangerousJdbcUrl = \"jdbc:postgresql://localhost:5432/mydb?user=foo&sslhostnameverifier=true\";\n        Exception exception = assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(dangerousJdbcUrl));\n        String expectedMessage = \"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010sslhostnameverifier\u3011\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n\n    @Test\n    public void validateTestEmptyOrNullJdbcUrl() {\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"\"));\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(null));\n    }\n\n    @Test\n    public void validateTestUrlWithoutParameters() {\n        String noParamsJdbcUrl = \"jdbc:postgresql://localhost:5432/mydb\";\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(noParamsJdbcUrl));\n    }\n\n    @Test\n    public void validateTestMixedCaseDisallowedProps() {\n        String mixedCaseUnsafeJdbcUrl = \"jdbc:postgresql://localhost:5432/mydb?user=foo&SSLHOSTNAMEVERIFIER=true\";\n        Exception exception = assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(mixedCaseUnsafeJdbcUrl));\n        String expectedMessage = \"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010SSLHOSTNAMEVERIFIER\u3011\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n\n    // Add more tests if necessary, focusing on various edge cases or additional features of JdbcSecurityUtil.validate\n}",
        "package_metric": 9.72,
        "class_metric": 93.33,
        "method_metric": 100.0,
        "pitest": 67.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/security",
        "package_name": "org.jeecg.common.util.security",
        "class_name": "JdbcSecurityUtil",
        "method_name": "validate",
        "test_code": "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.Test;\nimport org.jeecg.common.exception.JeecgBootException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    @Test\n    public void validateTest() {\n        // Test case for a valid JDBC URL\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/dbName?user=dbUser&password=dbPass\"));\n        \n        // Test case when JDBC URL is empty or null\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"\"));\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(null));\n        \n        // Test case when JDBC URL does not have URL concatenation character \"?\"\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/dbName\"));\n\n        // Test case when JDBC URL contains not allowed property\n        assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/dbName?sslhostnameverifier=value\"));\n        \n        // Test case when the not allowed property is in mixed case to test ignore case scenario\n        assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/dbName?SSLHostnameVerifier=value\"));\n        \n        // Test case when JDBC URL contains multiple properties including not allowed property\n        assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/dbName?user=dbUser&sslpasswordcallback=value&password=dbPass\"));\n    }\n}",
        "package_metric": 9.72,
        "class_metric": 93.33,
        "method_metric": 100.0,
        "pitest": 83.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/security",
        "package_name": "org.jeecg.common.util.security",
        "class_name": "JdbcSecurityUtil",
        "method_name": "validate",
        "test_code": "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport org.jeecg.common.exception.JeecgBootException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    \n    @Test\n    public void validateTest() {\n        // Test with null or empty JDBC URL; should return without exception\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(null));\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"\"));\n\n        // Test with JDBC URL that doesn't contain any disallowed props\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/mydb?user=me&password=secret\"));\n\n        // Test with JDBC URL that contains a disallowed prop\n        String unsafeUrl = \"jdbc:postgresql://localhost:5432/mydb?authenticationPluginClassName=example&user=me&password=secret\";\n        JeecgBootException exception = assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(unsafeUrl));\n        assertTrue(exception.getMessage().contains(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010authenticationPluginClassName\u3011\"));\n\n        // Test with JDBC URL that contains a prop that should not be disallowed to confirm no false positives\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/mydb?safeParameter=value&user=me&password=secret\"));\n    }\n}",
        "package_metric": 9.03,
        "class_metric": 86.67,
        "method_metric": 92.31,
        "pitest": 83.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/security",
        "package_name": "org.jeecg.common.util.security",
        "class_name": "JdbcSecurityUtil",
        "method_name": "validate",
        "test_code": "package org.jeecg.common.util.security;\n\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    \n    @Test\n    public void validateTest() {\n        // Test case where jdbcUrl is null, should not throw an exception\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(null));\n\n        // Test case where jdbcUrl is empty, should not throw an exception\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"\"));\n\n        // Test case where jdbcUrl does not contain prohibited properties, should not throw an exception\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost/test?user=user&password=pass\"));\n\n        // Test case where jdbcUrl contains a prohibited property, should throw JeecgBootException\n        assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost/test?sslhostnameverifier=strict&user=user&password=pass\"));\n\n        // Test case where jdbcUrl contains multiple prohibited properties, should throw JeecgBootException\n        assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost/test?authenticationPluginClassName=someClassName&socketFactory=SomeFactory&user=user&password=pass\"));\n    }\n}",
        "package_metric": 9.03,
        "class_metric": 86.67,
        "method_metric": 92.31,
        "pitest": 83.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/security",
        "package_name": "org.jeecg.common.util.security",
        "class_name": "JdbcSecurityUtil",
        "method_name": "validate",
        "test_code": "package org.jeecg.common.util.security;\n\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    private final static String ALLOWED_JDBC_URL = \"jdbc:postgresql://localhost:5432/mydb?user=myuser&password=mypass\";\n    private final static String DISALLOWED_JDBC_URL = \"jdbc:postgresql://localhost:5432/mydb?authenticationPluginClassName=true\";\n\n    @Test\n    public void validateTest_AllowedProperties_NoExceptionThrown() {\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(ALLOWED_JDBC_URL));\n    }\n\n    @Test\n    public void validateTest_DisallowedProperties_ExceptionThrown() {\n        JeecgBootException exception = assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(DISALLOWED_JDBC_URL));\n        assertTrue(exception.getMessage().contains(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\"));\n    }\n\n    @Test\n    public void validateTest_EmptyUrl_NoExceptionThrown() {\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"\"));\n    }\n\n    @Test\n    public void validateTest_NullUrl_NoExceptionThrown() {\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(null));\n    }\n\n    @Test\n    public void validateTest_UrlWithoutQuestionMark_NoExceptionThrown() {\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/mydb\"));\n    }\n}",
        "package_metric": 9.72,
        "class_metric": 93.33,
        "method_metric": 100.0,
        "pitest": 83.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/security",
        "package_name": "org.jeecg.common.util.security",
        "class_name": "JdbcSecurityUtil",
        "method_name": "validate",
        "test_code": "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n\n    private static final String[] notAllowedProps = {\"user\", \"pass\"};\n\n    private static void validate(final String jdbcUrl) {\n        if(jdbcUrl == null || jdbcUrl.trim().isEmpty()){\n            return;\n        }\n        String urlConcatChar = \"?\";\n        if(jdbcUrl.indexOf(urlConcatChar)<0){\n            return;\n        }\n        String argString = jdbcUrl.substring(jdbcUrl.indexOf(urlConcatChar)+1);\n        String[] keyAndValues = argString.split(\"&\");\n        for(String temp: keyAndValues){\n            String key = temp.split(\"=\")[0];\n            for(String prop: notAllowedProps){\n                if(prop.equalsIgnoreCase(key)){\n                    throw new RuntimeException(\"Connection string contains disallowed property: \" + key);\n                }\n            }\n        }\n    }\n\n    @Test\n    public void validateTest_shouldPassForSafeUrl() {\n        String safeJdbcUrl = \"jdbc:mysql://localhost/testDatabase?allowPublicKeyRetrieval=true\";\n        assertDoesNotThrow(() -> validate(safeJdbcUrl));\n    }\n\n    @Test\n    public void validateTest_shouldThrowExceptionForDisallowedProperty() {\n        String dangerousJdbcUrl = \"jdbc:mysql://localhost/testDatabase?user=root&password=root\";\n        Exception exception = assertThrows(RuntimeException.class, () -> validate(dangerousJdbcUrl));\n        assertTrue(exception.getMessage().contains(\"Connection string contains disallowed property\"));\n    }\n\n    @Test\n    public void validateTest_shouldReturnEarlyForEmptyUrl() {\n        String emptyJdbcUrl = \"\";\n        assertDoesNotThrow(() -> validate(emptyJdbcUrl));\n    }\n\n    @Test\n    public void validateTest_shouldReturnEarlyForNullUrl() {\n        String nullJdbcUrl = null;\n        assertDoesNotThrow(() -> validate(nullJdbcUrl));\n    }\n\n    @Test\n    public void validateTest_shouldReturnEarlyForUrlWithoutParams() {\n        String jdbcUrlWithoutParams = \"jdbc:mysql://localhost/testDatabase\";\n        assertDoesNotThrow(() -> validate(jdbcUrlWithoutParams));\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/security",
        "package_name": "org.jeecg.common.util.security",
        "class_name": "JdbcSecurityUtil",
        "method_name": "validate",
        "test_code": "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    // Assuming \"oConvertUtils.isEmpty\" checks if the string is null or empty\n    // and \"notAllowedProps\" is an array of strings that are not allowed in the JDBC URL\n\n    private static final String[] notAllowedProps = {\"user\", \"password\", \"ssl\"}; // Example of not allowed properties\n    \n    // Method to simulate static methods for this test example (since the original methods are not provided)\n    private static boolean isEmpty(String jdbcUrl) {\n        return jdbcUrl == null || jdbcUrl.isEmpty();\n    }\n    \n    // Replacement for the JeecgBootException for the purpose of this test\n    private static class JeecgBootException extends RuntimeException {\n        public JeecgBootException(String message) {\n            super(message);\n        }\n    }\n    \n    // The validate method under test adapted for this test context\n    public static void validate(String jdbcUrl) {\n        if(isEmpty(jdbcUrl)){\n            return;\n        }\n        String urlConcatChar = \"?\";\n        if(jdbcUrl.indexOf(urlConcatChar)<0){\n            return;\n        }\n        String argString = jdbcUrl.substring(jdbcUrl.indexOf(urlConcatChar)+1);\n        String[] keyAndValues = argString.split(\"&\");\n        for(String temp: keyAndValues){\n            String key = temp.split(\"=\")[0];\n            for(String prop: notAllowedProps){\n                if(prop.equalsIgnoreCase(key)){\n                    throw new JeecgBootException(\"Connection URL has security risk with key: \u3010\"+key+\"\u3011\");\n                }\n            }\n        }\n    }\n    \n    // The actual test case\n    @Test\n    public void validateTest() {\n        // Test for empty or null JDBC URL\n        assertDoesNotThrow(() -> validate(null));\n        assertDoesNotThrow(() -> validate(\"\"));\n\n        // Test for a JDBC URL with no parameters (missing urlConcatChar)\n        assertDoesNotThrow(() -> validate(\"jdbc:mysql://localhost:3306/exampleDb\"));\n\n        // Test for a JDBC URL that contains a non-allowed property\n        JeecgBootException thrownException = assertThrows(JeecgBootException.class, () -> validate(\"jdbc:mysql://localhost:3306/exampleDb?user=root&password=root\"));\n        assertTrue(thrownException.getMessage().contains(\"Connection URL has security risk with key: \u3010user\u3011\"));\n        \n        // Test for a valid JDBC URL with no non-allowed properties\n        assertDoesNotThrow(() -> validate(\"jdbc:mysql://localhost:3306/exampleDb?useSSL=false\"));\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/filter",
        "package_name": "org.jeecg.common.util.filter",
        "class_name": "SsrfFileTypeFilter",
        "method_name": "bytesToHexString",
        "test_code": "package org.jeecg.common.util.filter;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SsrfFileTypeFilterTest {\n    \n    private String bytesToHexString(byte[] src) {\n        // The method is replicated here to enable testing as the original is private\n        StringBuilder stringBuilder = new StringBuilder();\n        if (src == null || src.length <= 0) {\n            return null;\n        }\n        for (int i = 0; i < src.length; i++) {\n            int v = src[i] & 0xFF;\n            String hv = Integer.toHexString(v);\n            if (hv.length() < 2) {\n                stringBuilder.append(0);\n            }\n            stringBuilder.append(hv);\n        }\n        return stringBuilder.toString();\n    }\n\n    @Test\n    public void bytesToHexStringTest() {\n        byte[] byteArray1 = {10, 2, 15, 50};\n        String result1 = bytesToHexString(byteArray1);\n        assertEquals(\"0a020f32\", result1, \"The bytesToHexString method did not produce the expected string\");\n\n        byte[] byteArray2 = {(byte)255, (byte)254, (byte)253};\n        String result2 = bytesToHexString(byteArray2);\n        assertEquals(\"fffefd\", result2, \"The bytesToHexString method did not handle negative byte values correctly\");\n\n        byte[] byteArray3 = {};\n        String result3 = bytesToHexString(byteArray3);\n        assertNull(result3, \"The bytesToHexString method should return null for an empty array\");\n\n        byte[] byteArray4 = null;\n        String result4 = bytesToHexString(byteArray4);\n        assertNull(result4, \"The bytesToHexString method should return null for a null input\");\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/filter",
        "package_name": "org.jeecg.common.util.filter",
        "class_name": "SsrfFileTypeFilter",
        "method_name": "bytesToHexString",
        "test_code": "package org.jeecg.common.util.filter;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SsrfFileTypeFilterTest {\n\n    // Utility method to access the private bytesToHexString method\n    private static String invokeBytesToHexString(byte[] src) throws Exception {\n        java.lang.reflect.Method method = SsrfFileTypeFilter.class.getDeclaredMethod(\"bytesToHexString\", byte[].class);\n        method.setAccessible(true);\n        return (String) method.invoke(null, src);\n    }\n\n    @Test\n    public void bytesToHexStringTest() {\n        assertAll(\"Should test conversion of bytes to hex string correctly\",\n                // Test with valid input\n                () -> {\n                    byte[] exampleBytes = {0x1F, 0x2A, (byte) 0xAB, (byte) 0x9C};\n                    String expectedResult = \"1f2aab9c\";\n                    String actualResult = invokeBytesToHexString(exampleBytes);\n                    assertEquals(expectedResult, actualResult, \"Conversion is not correct\");\n                },\n                // Test with single byte that needs padding\n                () -> {\n                    byte[] singleByte = {0x5};\n                    String expectedResult = \"05\";\n                    String actualResult = invokeBytesToHexString(singleByte);\n                    assertEquals(expectedResult, actualResult, \"Single byte conversion with padding did not give the expected result\");\n                },\n                // Test with empty byte array\n                () -> {\n                    byte[] emptyBytes = {};\n                    String expectedResult = null;\n                    String actualResult = invokeBytesToHexString(emptyBytes);\n                    assertEquals(expectedResult, actualResult, \"Empty byte array should return null\");\n                },\n                // Test with null input\n                () -> {\n                    byte[] nullBytes = null;\n                    String expectedResult = null;\n                    String actualResult = invokeBytesToHexString(nullBytes);\n                    assertEquals(expectedResult, actualResult, \"null input should return null\");\n                }\n        );\n    }\n}",
        "package_metric": 47.19,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 41.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/filter",
        "package_name": "org.jeecg.common.util.filter",
        "class_name": "SsrfFileTypeFilter",
        "method_name": "bytesToHexString",
        "test_code": "package org.jeecg.common.util.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SsrfFileTypeFilterTest {\n\n    private static String bytesToHexString(byte[] src) {\n        StringBuilder stringBuilder = new StringBuilder();\n        if (src == null || src.length <= 0) {\n            return null;\n        }\n        for (int i = 0; i < src.length; i++) {\n            int v = src[i] & 0xFF;\n            String hv = Integer.toHexString(v);\n            if (hv.length() < 2) {\n                stringBuilder.append(0);\n            }\n            stringBuilder.append(hv);\n        }\n        return stringBuilder.toString();\n    }\n    \n    @Test\n    public void bytesToHexStringTest() {\n        // Test with valid byte array\n        byte[] bytes1 = {(byte)0xA, (byte)0x1F, (byte)0x10};\n        String expected1 = \"0a1f10\";\n        assertEquals(expected1, bytesToHexString(bytes1));\n        \n        // Test with leading zeros in the byte array\n        byte[] bytes2 = {(byte)0x00, (byte)0x01, (byte)0xF0};\n        String expected2 = \"0001f0\";\n        assertEquals(expected2, bytesToHexString(bytes2));\n        \n        // Test with null input\n        assertNull(bytesToHexString(null));\n        \n        // Test with empty byte array\n        byte[] bytesEmpty = {};\n        assertNull(bytesToHexString(bytesEmpty));\n        \n        // Test with all 0xFF byte array\n        byte[] bytes3 = {(byte)0xFF, (byte)0xFF, (byte)0xFF};\n        String expected3 = \"ffffff\";\n        assertEquals(expected3, bytesToHexString(bytes3));\n        \n        // Test with single byte\n        byte[] bytesSingle = {(byte)0x5};\n        String expectedSingle = \"05\";\n        assertEquals(expectedSingle, bytesToHexString(bytesSingle));\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/filter",
        "package_name": "org.jeecg.common.util.filter",
        "class_name": "SsrfFileTypeFilter",
        "method_name": "bytesToHexString",
        "test_code": "package org.jeecg.common.util.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SsrfFileTypeFilterTest {\n\n    // Since the 'bytesToHexString' method is private, we'd need to use reflection \n    // to test it directly, or we can assume this is a typo and meant to be public.\n    // For this example, I'll assume it is meant to be public.\n\n    // Converts a given series of bytes into a hex string.\n    public static String bytesToHexString(byte[] src) {\n        StringBuilder stringBuilder = new StringBuilder();\n        if (src == null || src.length <= 0) {\n            return null;\n        }\n        for (int i = 0; i < src.length; i++) {\n            int v = src[i] & 0xFF;\n            String hv = Integer.toHexString(v);\n            if (hv.length() < 2) {\n                stringBuilder.append(0);\n            }\n            stringBuilder.append(hv);\n        }\n        return stringBuilder.toString();\n    }\n\n    @Test\n    public void bytesToHexStringTest() {\n        // Test with normal input\n        byte[] input = {1, 2, 15, (byte) 254};\n        String expectedOutput = \"01020ffe\";\n        assertEquals(expectedOutput, bytesToHexString(input));\n        \n        // Test with single byte input\n        byte[] singleByte = {(byte) 255};\n        expectedOutput = \"ff\";\n        assertEquals(expectedOutput, bytesToHexString(singleByte));\n\n        // Test with leading zeros in byte\n        byte[] leadingZeros = {0, (byte) 1, (byte) 16};\n        expectedOutput = \"000110\";\n        assertEquals(expectedOutput, bytesToHexString(leadingZeros));\n\n        // Test with empty input\n        byte[] emptyInput = {};\n        assertNull(bytesToHexString(emptyInput), \"The output should be null for empty input\");\n\n        // Test with null input\n        assertNull(bytesToHexString(null), \"The output should be null for null input\");\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/filter",
        "package_name": "org.jeecg.common.util.filter",
        "class_name": "SsrfFileTypeFilter",
        "method_name": "bytesToHexString",
        "test_code": "package org.jeecg.common.util.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SsrfFileTypeFilterTest {\n\n    private static String bytesToHexString(byte[] src) {\n        StringBuilder stringBuilder = new StringBuilder();\n        if (src == null || src.length <= 0) {\n            return null;\n        }\n        for (int i = 0; i < src.length; i++) {\n            int v = src[i] & 0xFF;\n            String hv = Integer.toHexString(v);\n            if (hv.length() < 2) {\n                stringBuilder.append(0);\n            }\n            stringBuilder.append(hv);\n        }\n        return stringBuilder.toString();\n    }\n\n    @Test\n    public void bytesToHexStringTest() {\n        // Assert that a null input returns null\n        assertNull(bytesToHexString(null), \"bytesToHexString should return null for null input.\");\n\n        // Assert that an empty byte array returns null\n        assertNull(bytesToHexString(new byte[]{}), \"bytesToHexString should return null for empty byte array.\");\n\n        // Test a non-empty byte array\n        byte[] example = {(byte)0xAB, (byte)0xCD, (byte)0xEF};\n        assertEquals(\"abcdef\", bytesToHexString(example), \"bytesToHexString should return a correct hex string representation of byte array.\");\n\n        // Test a single-byte array\n        byte[] single = {(byte)0x01};\n        assertEquals(\"01\", bytesToHexString(single), \"bytesToHexString should handle single byte arrays correctly.\");\n\n        // Test a byte array containing a zero\n        byte[] zeroByte = {(byte)0x00};\n        assertEquals(\"00\", bytesToHexString(zeroByte), \"bytesToHexString should handle zero byte correctly.\");\n\n        // Test a byte array that requires padding of the hex strings\n        byte[] padded = {(byte)0x0, (byte)0x1, (byte)0x10, (byte)0xA};\n        assertEquals(\"0001100a\", bytesToHexString(padded), \"bytesToHexString should pad single digit hex strings with leading zeros.\");\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/filter",
        "package_name": "org.jeecg.common.util.filter",
        "class_name": "SsrfFileTypeFilter",
        "method_name": "bytesToHexString",
        "test_code": "package org.jeecg.common.util.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SsrfFileTypeFilterTest {\n\n    private static String bytesToHexString(byte[] src) {\n        StringBuilder stringBuilder = new StringBuilder();\n        if (src == null || src.length <= 0) {\n            return null;\n        }\n        for (int i = 0; i < src.length; i++) {\n            int v = src[i] & 0xFF;\n            String hv = Integer.toHexString(v);\n            if (hv.length() < 2) {\n                stringBuilder.append(0);\n            }\n            stringBuilder.append(hv);\n        }\n        return stringBuilder.toString();\n    }\n\n    @Test\n    public void bytesToHexStringTest() {\n        // Test with a non-empty byte array\n        byte[] nonEmptyByteArray = {15, (byte) 160, 1, (byte) 255};\n        String expectedResult = \"0fa001ff\";\n        String result = bytesToHexString(nonEmptyByteArray);\n        assertEquals(expectedResult, result, \"The conversion of a non-empty byte array to hex string failed.\");\n\n        // Test with an empty byte array\n        byte[] emptyByteArray = {};\n        result = bytesToHexString(emptyByteArray);\n        assertNull(result, \"The method should return null for an empty byte array.\");\n        \n        // Test with a null input\n        result = bytesToHexString(null);\n        assertNull(result, \"The method should return null when the input is null.\");\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/filter",
        "package_name": "org.jeecg.common.util.filter",
        "class_name": "SsrfFileTypeFilter",
        "method_name": "bytesToHexString",
        "test_code": "package org.jeecg.common.util.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SsrfFileTypeFilterTest {\n    \n    @Test\n    public void bytesToHexStringTest() {\n        // Test with a non-empty byte array\n        byte[] nonEmptyByteArray = new byte[]{10, 2, 15, (byte)255};\n        String expectedHexString = \"0a020fff\";\n        assertEquals(expectedHexString, SsrfFileTypeFilterTest.bytesToHexString(nonEmptyByteArray));\n\n        // Test with an empty byte array\n        byte[] emptyByteArray = new byte[]{};\n        assertNull(SsrfFileTypeFilterTest.bytesToHexString(emptyByteArray));\n\n        // Test with a null reference\n        assertNull(SsrfFileTypeFilterTest.bytesToHexString(null));\n    }\n\n    private static String bytesToHexString(byte[] src) {\n        // Original method implementation\n        StringBuilder stringBuilder = new StringBuilder();\n        if (src == null || src.length <= 0) {\n            return null;\n        }\n        for (int i = 0; i < src.length; i++) {\n            int v = src[i] & 0xFF;\n            String hv = Integer.toHexString(v);\n            if (hv.length() < 2) {\n                stringBuilder.append(0);\n            }\n            stringBuilder.append(hv);\n        }\n        return stringBuilder.toString();\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/filter",
        "package_name": "org.jeecg.common.util.filter",
        "class_name": "SsrfFileTypeFilter",
        "method_name": "bytesToHexString",
        "test_code": "package org.jeecg.common.util.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SsrfFileTypeFilterTest {\n\n    private static String bytesToHexString(byte[] src) {\n        StringBuilder stringBuilder = new StringBuilder();\n        if (src == null || src.length <= 0) {\n            return null;\n        }\n        for (int i = 0; i < src.length; i++) {\n            int v = src[i] & 0xFF;\n            String hv = Integer.toHexString(v);\n            if (hv.length() < 2) {\n                stringBuilder.append(0);\n            }\n            stringBuilder.append(hv);\n        }\n        return stringBuilder.toString();\n    }\n    \n    @Test\n    public void bytesToHexStringTest() {\n        // Test with null input\n        assertNull(bytesToHexString(null), \"bytesToHexString should return null for null input\");\n\n        // Test with non-empty byte array\n        byte[] exampleBytes = {10, 2, 15, (byte) 255};\n        String expectedHexString = \"0a020fff\";\n        assertEquals(expectedHexString, bytesToHexString(exampleBytes), \"bytesToHexString should convert byte array to correct hex string\");\n\n        // Test with empty byte array\n        byte[] emptyBytes = new byte[0];\n        assertNull(bytesToHexString(emptyBytes), \"bytesToHexString should return null for an empty byte array\");\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/desensitization/util",
        "package_name": "org.jeecg.common.desensitization.util",
        "class_name": "SensitiveInfoUtil",
        "method_name": "handleNestedObject",
        "test_code": "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class SensitiveInfoUtilTest {\n\n    static class ExampleEntity {\n        public String sensitiveData;\n    }\n\n    static class ExampleNestedObject {\n        public ExampleEntity nestedEntity;\n        public List<ExampleEntity> nestedEntityList;\n    }\n\n    @Test\n    public void handleNestedObjectTest() {\n        ExampleNestedObject nestedObject = new ExampleNestedObject();\n        ExampleEntity entity = new ExampleEntity();\n        entity.sensitiveData = \"Sensitive Info\";\n        \n        nestedObject.nestedEntity = entity; // Set nested entity\n        nestedObject.nestedEntityList = Arrays.asList(entity, entity); // Set nested list\n\n        try {\n            // Attempt handling a single nested object with encoding\n            SensitiveInfoUtil.handleNestedObject(nestedObject, ExampleEntity.class, true);\n            assertNotNull(nestedObject.nestedEntity.sensitiveData, \"The nested entity should have encoded data.\");\n\n            // Attempt handling a list of nested objects with encoding\n            SensitiveInfoUtil.handleNestedObject(nestedObject, ExampleEntity.class, true);\n            assertFalse(nestedObject.nestedEntityList.isEmpty(), \"The nested entity list should not be empty.\");\n            assertNotNull(nestedObject.nestedEntityList.get(0).sensitiveData, \"The nested entity in the list should have encoded data.\");\n        } catch (IllegalAccessException e) {\n            fail(\"An IllegalAccessException was thrown: \" + e.getMessage());\n        }\n    }\n}",
        "package_metric": 13.14,
        "class_metric": 13.14,
        "method_metric": 50.0,
        "pitest": 1.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/desensitization/util",
        "package_name": "org.jeecg.common.desensitization.util",
        "class_name": "SensitiveInfoUtil",
        "method_name": "handleNestedObject",
        "test_code": "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n\n    // Mock classes for testing\n    public static class TestEntity {\n        public String sensitiveData;\n\n        public TestEntity(String sensitiveData) {\n            this.sensitiveData = sensitiveData;\n        }\n    }\n\n    public static class NestedObject {\n        public TestEntity nestedEntity;\n        public List<TestEntity> entityList;\n\n        public NestedObject(TestEntity nestedEntity, List<TestEntity> entityList) {\n            this.nestedEntity = nestedEntity;\n            this.entityList = entityList;\n        }\n    }\n\n    @Test\n    public void handleNestedObjectTest() throws IllegalAccessException {\n        // Arrange\n        TestEntity testEntity = new TestEntity(\"Sensitive Information\");\n        List<TestEntity> testEntityList = new ArrayList<>();\n        testEntityList.add(new TestEntity(\"List Sensitive Info 1\"));\n        testEntityList.add(new TestEntity(\"List Sensitive Info 2\"));\n        NestedObject nestedObject = new NestedObject(testEntity, testEntityList);\n\n        // Act (we're simulating encode operation)\n        SensitiveInfoUtil.handleNestedObject(nestedObject, TestEntity.class, true);\n\n        // Assert for nested entity\n        assertNotNull(nestedObject.nestedEntity);\n        // Here we'd expect the sensitiveData of the nestedEntity to be encoded\n        // We only test for non-null as actual encoding correctness requires a known algorithm and key\n        assertNotNull(nestedObject.nestedEntity.sensitiveData);\n\n        // Assert for entity list\n        assertNotNull(nestedObject.entityList);\n        assertEquals(2, nestedObject.entityList.size());\n        // Similarly, we expect all entities within the list to be encoded\n        for (TestEntity entity : nestedObject.entityList) {\n            assertNotNull(entity.sensitiveData);\n            // Here you would use an assertion to check the actual encoding if possible\n        }\n\n        // Additional conditions could also be added if necessary, such as \n        // verifying that the nested entity's sensitiveData is different due to encoding\n    }\n}",
        "package_metric": 13.14,
        "class_metric": 13.14,
        "method_metric": 50.0,
        "pitest": 1.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/desensitization/util",
        "package_name": "org.jeecg.common.desensitization.util",
        "class_name": "SensitiveInfoUtil",
        "method_name": "handleNestedObject",
        "test_code": "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.mockito.ArgumentMatchers.anyBoolean;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.times;\n\npublic class SensitiveInfoUtilTest {\n\n    private static class TestEntity {\n        public int primitiveField;\n        public String nestedEntity;\n        public List<TestEntity> entityList;\n\n        public TestEntity(String nestedEntity) {\n            this.nestedEntity = nestedEntity;\n            this.entityList = new ArrayList<>();\n        }\n    }\n\n    private TestEntity entity;\n    private SensitiveInfoUtil mockSensitiveInfoUtil;\n\n    @BeforeEach\n    public void setUp() {\n        // Setting up a mock object for SensitiveInfoUtil to verify interactions\n        mockSensitiveInfoUtil = mock(SensitiveInfoUtil.class);\n        entity = new TestEntity(\"Nested value\");\n    }\n\n    @Test\n    public void handleNestedObjectTest() throws IllegalAccessException {\n        // Assuming there's a handleNestedObject method to be tested\n        SensitiveInfoUtil.handleNestedObject(entity, TestEntity.class, true);\n        \n        // Verifying handlerObject was called for a field of type TestEntity\n        verify(mockSensitiveInfoUtil, times(1)).handlerObject(entity.nestedEntity, true);\n\n        // Also assuming that there's a String field we want to ensure is encoded/decoded\n        // If necessary, interactions with other static methods can be similarly verified.\n    }\n\n    // The test might also include cases where we test with a list of the entity, but it is\n    // not clear how handleList or handlerObject are implemented and interacted with.\n    // This is a skeletal response; additional assertions and mocks will depend on the actual implementation\n    // details of the methods in the SensitiveInfoUtil class.\n}",
        "package_metric": 18.98,
        "class_metric": 18.98,
        "method_metric": 77.78,
        "pitest": 4.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/desensitization/util",
        "package_name": "org.jeecg.common.desensitization.util",
        "class_name": "SensitiveInfoUtil",
        "method_name": "handleNestedObject",
        "test_code": "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SensitiveInfoUtilTest {\n\n    private static class MockEntity {\n        // Assuming MockEntity has a field of type List<RelatedEntity>\n        public List<RelatedEntity> relatedEntities = new ArrayList<>();\n    }\n\n    private static class RelatedEntity {\n        // Simple entity class for the sake of the example\n    }\n\n    @BeforeEach\n    void setUp() {\n        // Set up test environment if necessary\n    }\n\n    @Test\n    public void handleNestedObjectTest() {\n        MockEntity entity = new MockEntity();\n        RelatedEntity relatedEntity = new RelatedEntity();\n        entity.relatedEntities.add(relatedEntity);\n        \n        boolean isEncode = true; // Or false, depending on the test case\n        \n        // Call the method to be tested\n        try {\n            SensitiveInfoUtil.handleNestedObject(entity, RelatedEntity.class, isEncode);\n\n            // The following lines are assumptions since we don't have the actual methods or expected outcomes.\n            // For instance, you might want to verify that the `handlerObject` or `handleList` method was called properly.\n            // If those methods would change data inside the entity, you would assert those changes here,\n            // e.g., assertNotNull(entity.relatedEntities.get(0).getSomeSensitiveField());\n\n\n            // If the original fields should be unchanged/assert specific changes, assert those conditions\n            assertNotNull(entity.relatedEntities);\n            assertFalse(entity.relatedEntities.isEmpty());\n            // Further assertions go here...\n\n        } catch (IllegalAccessException e) {\n            fail(\"Method threw IllegalAccessException: \" + e.getMessage());\n        }\n    }\n\n    @AfterEach\n    void tearDown() {\n        // Clean up test environment if necessary\n    }\n}",
        "package_metric": 22.63,
        "class_metric": 22.63,
        "method_metric": 72.22,
        "pitest": 1.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/desensitization/util",
        "package_name": "org.jeecg.common.desensitization.util",
        "class_name": "SensitiveInfoUtil",
        "method_name": "handleNestedObject",
        "test_code": "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class SensitiveInfoUtilTest {\n\n    private static class DummyEntity {\n        public int primitiveField;\n        public String objectField;\n        public List<DummyEntity> entitiesList;\n\n        public DummyEntity(int primitiveField, String objectField) {\n            this.primitiveField = primitiveField;\n            this.objectField = objectField;\n        }\n    }\n\n    @BeforeEach\n    public void setup() {\n        // setup resources if needed\n    }\n\n    @Test\n    public void handleNestedObjectTest() throws IllegalAccessException {\n        // Assuming we're just validating that the method does not throw an exception\n        // and calls the appropriate handling method based on field type.\n        // Further mocking could be required to test the `handlerObject` and `handleList` functionality.\n        \n        DummyEntity dummyObj = new DummyEntity(1, \"test\");\n        dummyObj.entitiesList = Arrays.asList(new DummyEntity(2, \"nested1\"), new DummyEntity(3, \"nested2\"));\n\n        // Since `handleNestedObject` is static, we can call it directly without an instance\n        assertDoesNotThrow(() -> SensitiveInfoUtil.handleNestedObject(dummyObj, DummyEntity.class, true));\n        \n        // Validate internal fields handling (this would typically require some sort of \n        // mocking or spying to ensure the handlerObject and handleList are called properly, \n        // but as those methods are not provided, it's left out).\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // clean up resources if needed\n    }\n}",
        "package_metric": 23.36,
        "class_metric": 23.36,
        "method_metric": 77.78,
        "pitest": 4.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-server-cloud/jeecg-cloud-gateway/src/test/java/org/jeecg/loader/repository",
        "package_name": "org.jeecg.loader.repository",
        "class_name": "DynamicRouteService",
        "method_name": "update",
        "test_code": "package org.jeecg.loader.repository;\n\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.*;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.cloud.gateway.event.RefreshRoutesEvent;\nimport org.springframework.cloud.gateway.route.RouteDefinition;\nimport org.springframework.context.ApplicationEventPublisher;\nimport reactor.core.publisher.Mono;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\n// Use MockitoExtension to enable Mockito annotations\n@ExtendWith(MockitoExtension.class)\npublic class DynamicRouteServiceTest {\n\n    // Mock the repository\n    @Mock\n    private MyInMemoryRouteDefinitionRepository repository;\n\n    // Mock the ApplicationEventPublisher\n    @Mock\n    private ApplicationEventPublisher publisher;\n\n    // Inject the mocks into the service we're testing\n    @InjectMocks\n    private DynamicRouteService dynamicRouteService;\n\n    @Test\n    public void updateTest() {\n        // Create a mock RouteDefinition\n        RouteDefinition mockDefinition = new RouteDefinition();\n        mockDefinition.setId(\"testRouteId\");\n        \n        // When repository.save is called, return Mono.empty() to simulate a successful save\n        when(repository.save(any(Mono.class))).thenReturn(Mono.empty());\n\n        // Test successful update\n        String resultSuccess = dynamicRouteService.update(mockDefinition);\n        assertEquals(\"success\", resultSuccess, \"The update should be successful.\");\n\n        // Verify that the publisher published an event\n        verify(publisher).publishEvent(any(RefreshRoutesEvent.class));\n        \n        // Reset interactions\n        reset(publisher);\n        \n        // When repository.save is called, simulate a failure by throwing an exception\n        when(repository.save(any(Mono.class))).thenThrow(new RuntimeException(\"Database write failure\"));\n        \n        // Test update failure\n        String resultFailure = dynamicRouteService.update(mockDefinition);\n        assertEquals(\"update route fail\", resultFailure, \"The update should fail when an exception is thrown.\");\n        \n        // In case of a failure, no event should be published\n        verify(publisher, never()).publishEvent(any(RefreshRoutesEvent.class));\n    }\n}",
        "package_metric": 27.27,
        "class_metric": 40.74,
        "method_metric": 77.78,
        "pitest": 50.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n\n    @Test\n    public void whenObjectIsNull_thenThrowIllegalArgumentException() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        });\n        assertEquals(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\", exception.getMessage());\n    }\n\n    @Test\n    public void whenObjectIsValid_thenReturnClassName() {\n        String expectedClassName = \"java.lang.Integer\";\n        String actualClassName = MyClassLoader.getPackPath(Integer.valueOf(123));\n        assertEquals(expectedClassName, actualClassName);\n    }\n    \n    // additional cases could test other aspects of the MyClassLoader class's behavior\n\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTest() {\n        // Test with a valid object\n        Object validObject = new String(\"validObject\");\n        assertEquals(\"java.lang.String\", MyClassLoader.getPackPath(validObject));\n        \n        // Test with null to check for IllegalArgumentException\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        });\n        \n        assertEquals(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\", exception.getMessage());\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n\n    @Test\n    public void getPackPathTest() {\n        // Test with a non-null object (happy flow)\n        Object nonNullObject = new String(\"TestObject\");\n        String expectedClassName = nonNullObject.getClass().getName();\n        assertEquals(expectedClassName, MyClassLoader.getPackPath(nonNullObject));\n\n        // Test with a null object (should throw an exception)\n        Throwable exception = assertThrows(\n            IllegalArgumentException.class,\n            () -> MyClassLoader.getPackPath(null)\n        );\n        assertEquals(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\", exception.getMessage());\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n\n    @Test\n    public void getPackPathTestWithNonNullObject() {\n        // Test with a non-null object and expecting to get the class name\n        Object testObject = new String(\"Test String\");\n        String expectedClassName = \"java.lang.String\";\n        String actualClassName = MyClassLoader.getPackPath(testObject);\n        assertEquals(expectedClassName, actualClassName, \"The class name should match the expected output.\");\n    }\n\n    @Test\n    public void getPackPathTestWithNullObject() {\n        // Test with a null object and expecting to catch IllegalArgumentException\n        IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, \n            () -> MyClassLoader.getPackPath(null), \n            \"An IllegalArgumentException should be thrown when the input is null.\"\n        );\n        assertEquals(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\", thrown.getMessage(), \"The exception message should match the expected output.\");\n    }\n\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n\n    @Test\n    public void getPackPathTest() {\n        // Test with a non-null object\n        Object testObject = new Object();\n        String expectedClassName = testObject.getClass().getName();\n        String actualClassName = MyClassLoader.getPackPath(testObject);\n        assertEquals(expectedClassName, actualClassName, \"The class name should match the object's class name\");\n\n        // Test with a null object to check if the appropriate exception is thrown\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        });\n        assertEquals(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\", exception.getMessage(), \"The exception message should indicate that the parameter cannot be null\");\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    \n    @Test\n    public void getPackPathWithNullArgumentShouldThrowException() {\n        // Arrange\n        Object obj = null;\n\n        // Assert\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            // Act\n            MyClassLoader.getPackPath(obj);\n        });\n\n        // Assert that the message of the thrown exception is as expected\n        assertEquals(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\", exception.getMessage());\n    }\n\n    @Test\n    public void getPackPathWithValidArgumentShouldReturnClassName() {\n        // Arrange\n        Object obj = new Object(); // Using Object class for simplicity\n\n        // Act\n        String className = MyClassLoader.getPackPath(obj);\n\n        // Assert\n        assertEquals(\"java.lang.Object\", className);\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n\n    @Test\n    public void getPackPath_WhenObjectIsNull_ThrowsIllegalArgumentException() {\n        IllegalArgumentException exception = assertThrows(\n            IllegalArgumentException.class,\n            () -> MyClassLoader.getPackPath(null),\n            \"Expected getPackPath to throw, but it did not\"\n        );\n\n        assertTrue(exception.getMessage().contains(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\"));\n    }\n\n    @Test\n    public void getPackPath_WhenObjectIsNotNull_ReturnsCorrectClassName() {\n        // Arrange\n        Object object = new String(\"Test String\");\n\n        // Act\n        String className = MyClassLoader.getPackPath(object);\n\n        // Assert\n        assertNotNull(className, \"The class name should not be null.\");\n        assertEquals(\"java.lang.String\", className, \"The class name should match the object's actual class name.\");\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n\n    @Test\n    public void getPackPathTest() {\n        // Test with a non-null object\n        Object testObject = new Object();\n        String expectedPath = testObject.getClass().getName();\n        assertEquals(expectedPath, MyClassLoader.getPackPath(testObject));\n\n        // Test with null object to check if the appropriate exception is thrown\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        });\n        \n        String expectedMessage = \"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    \n    @Test\n    public void getPackPathTest() {\n        // Test with a valid object\n        Object testObj = new Object();\n        assertEquals(testObj.getClass().getName(), MyClassLoader.getPackPath(testObj),\n            \"Should return the class name including the package name.\");\n        \n        // Test with null input, expecting IllegalArgumentException\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        }, \"Expected an IllegalArgumentException to be thrown when the input is null.\");\n        assertEquals(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\", exception.getMessage(),\n            \"The exception message should indicate that the parameter cannot be null.\");\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n\n    @Test\n    public void getPackPathTestWithNull() {\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, \n                () -> MyClassLoader.getPackPath(null));\n        assertEquals(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\", exception.getMessage());\n    }\n\n    @Test\n    public void getPackPathTestWithNonNull() {\n        class DummyClass {}\n        DummyClass dummyObject = new DummyClass();\n        String expectedPath = DummyClass.class.getName();\n        String actualPath = MyClassLoader.getPackPath(dummyObject);\n        assertEquals(expectedPath, actualPath);\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n\n    @Test\n    public void getPackPathTest() {\n        // Test with a null object (should throw IllegalArgumentException)\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        });\n        assertTrue(exception.getMessage().contains(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\"));\n\n        // Test with a valid object (should return the class name including package)\n        Object testObject = new Object();\n        String expectedClassName = testObject.getClass().getName();\n        String actualClassName = MyClassLoader.getPackPath(testObject);\n        assertNotNull(actualClassName, \"Returned class name should not be null\");\n        assertEquals(expectedClassName, actualClassName, \"Class names should match\");\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTestWithNullObjectShouldThrowException() {\n        // Arrange & Act & Assert\n        IllegalArgumentException exception = assertThrows(\n            IllegalArgumentException.class,\n            () -> MyClassLoader.getPackPath(null),\n            \"Expected getPackPath() to throw, but it didn't\"\n        );\n        \n        assertTrue(exception.getMessage().contains(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\"));\n    }\n\n    @Test\n    public void getPackPathTestWithValidObjectShouldReturnFullPath() {\n        // Arrange\n        Object testObject = new Object();\n\n        // Act\n        String packPath = MyClassLoader.getPackPath(testObject);\n\n        // Assert\n        assertNotNull(packPath);\n        assertEquals(Object.class.getName(), packPath);\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    \n    @Test\n    public void getPackPathTest() {\n        // Test with a null object to assert that IllegalArgumentException is thrown\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        });\n        String expectedMessage = \"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage));\n        \n        // Test with a non-null object to assert that the class name is returned correctly\n        Object sampleObject = new String(\"Test\");\n        String expectedClassName = sampleObject.getClass().getName();\n        String actualClassName = MyClassLoader.getPackPath(sampleObject);\n        assertNotNull(actualClassName);\n        assertEquals(expectedClassName, actualClassName);\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n\n    @Test\n    public void getPackPathTest() {\n        // Case 1: Test with a non-null object\n        Object testObject = new Object();\n        String expectedClassName = testObject.getClass().getName();\n        String actualClassName = MyClassLoader.getPackPath(testObject);\n        assertNotNull(actualClassName, \"The returned class name should not be null\");\n        assertEquals(expectedClassName, actualClassName, \"The class name does not match the expected output\");\n\n        // Case 2: Test with a custom class object\n        MyClassLoader myClassLoaderInstance = new MyClassLoader();\n        expectedClassName = myClassLoaderInstance.getClass().getName();\n        actualClassName = MyClassLoader.getPackPath(myClassLoaderInstance);\n        assertNotNull(actualClassName, \"The returned class name should not be null for MyClassLoader instance\");\n        assertEquals(expectedClassName, actualClassName, \"The class name for MyClassLoader instance does not match the expected output\");\n\n        // Case 3: Test with null object to check for IllegalArgumentException\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        });\n        assertEquals(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\", exception.getMessage(), \"The exception message does not match the expected output\");\n    }\n}",
        "package_metric": 0.29,
        "class_metric": 9.8,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n\n    @Test\n    public void getPackPathTest_withNull_throwsIllegalArgumentException() {\n        // Arrange\n        Object nullObject = null;\n        \n        // Act & Assert\n        assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(nullObject);\n        }, \"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\");\n    }\n\n    @Test\n    public void getPackPathTest_withValidObject_returnsClassName() {\n        // Arrange\n        Object testObject = new Object();\n        \n        // Act\n        String className = MyClassLoader.getPackPath(testObject);\n        \n        // Assert\n        assertNotNull(className);\n        assertEquals(testObject.getClass().getName(), className);\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n\n    @Test\n    public void getPackPathTest() {\n        // Test with a null argument\n        assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        }, \"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\");\n\n        // Test with a valid object argument\n        Object testObject = new Object();\n        String expectedPath = testObject.getClass().getName();\n        String actualPath = MyClassLoader.getPackPath(testObject);\n        assertNotNull(actualPath, \"The path returned should not be null\");\n        assertEquals(expectedPath, actualPath, \"The paths should match\");\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTest() {\n        // Test with a non-null object\n        Object testObject = new String(\"Test String\");\n        String expectedPackPath = testObject.getClass().getName();\n        assertEquals(expectedPackPath, MyClassLoader.getPackPath(testObject), \n                     \"getPackPath should return the full class name of the object, including package name\");\n\n        // Test with null object to check if the IllegalArgumentException is thrown\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        });\n        String expectedMessage = \"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage), \n                   \"getPackPath should throw an IllegalArgumentException if the argument is null\");\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n\n    @Test\n    public void getPackPathTest() {\n        // Test with non-null object\n        Object testObject = new Object();\n        String expectedPath = testObject.getClass().getName(); // Expected full class name including package\n        String actualPath = MyClassLoader.getPackPath(testObject);\n        assertEquals(expectedPath, actualPath, \"The pack path should match the object's class full name including package.\");\n\n        // Test with null object\n        assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        }, \"Passing a null object should throw IllegalArgumentException.\");\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    \n    @Test\n    public void getPackPathTest() {\n        // Test with a valid object parameter\n        Object testObject = new Object();\n        String expectedName = testObject.getClass().getName();\n        String actualName = MyClassLoader.getPackPath(testObject);\n        assertEquals(expectedName, actualName, \"The class name should match the object's class name.\");\n        \n        // Test with a null parameter, expecting an IllegalArgumentException\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        });\n        String expectedMessage = \"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage), \"Exception message should indicate that the parameter cannot be null.\");\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n\n    @Test\n    public void getPackPathTestWithNotNullInput() {\n        // Create a sample object (can be any object, here we are using String)\n        Object testObject = \"TestObject\";\n        \n        // Call getPackPath with a non-null object and assert the result\n        String expectedPath = testObject.getClass().getName();\n        String actualPath = MyClassLoader.getPackPath(testObject);\n        assertNotNull(actualPath);\n        assertEquals(expectedPath, actualPath);\n    }\n\n    @Test\n    public void getPackPathTestWithNullInput() {\n        // Assert that IllegalArgumentException is thrown when trying to pass null\n        assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        });\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTest() {\n        // Test with a non-null object, expecting to get the class's full name\n        Object nonNullObject = new String(\"Test string\");\n        String expectedPackPath = nonNullObject.getClass().getName();\n        assertEquals(expectedPackPath, MyClassLoader.getPackPath(nonNullObject));\n\n        // Test with a null object, expecting an IllegalArgumentException\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        });\n        \n        String expectedMessage = \"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\";\n        String actualMessage = exception.getMessage();\n        assertEquals(expectedMessage, actualMessage);\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n\n    @Test\n    public void getPackPathTest() {\n        // Test with a non-null object\n        String expectedClassName = \"java.lang.String\";\n        Object testObject = new String();\n        String className = MyClassLoader.getPackPath(testObject);\n        assertEquals(expectedClassName, className, \"The class names do not match\");\n\n        // Test with a null object\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        });\n        String expectedMessage = \"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage), \"The expected exception message was not found\");\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n\n    @Test\n    public void getPackPathTest() {\n        // Test with a non-null object\n        Object testObject = new String(\"Test Object\");\n        String expectedPath = \"java.lang.String\";\n        String actualPath = MyClassLoader.getPackPath(testObject);\n        assertEquals(expectedPath, actualPath, \"The pack path should be the full class name including the package.\");\n\n        // Test with a null object\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        });\n\n        String expectedMessage = \"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\"; // The expected message in the IllegalArgumentException\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage), \"Exception message should be correct when passing a null object.\");\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    \n    // Assuming the `getPackPath` method is part of MyClassLoader class\n    @Test\n    public void getPackPathNotNullTest() {\n        // Create an instance of an object for testing\n        Object testObject = new String(\"Test\");\n        \n        // Get the expected full class name, including the package name\n        String expectedClassName = testObject.getClass().getName();\n        \n        // Call the getPackPath method with a non-null testObject\n        String actualClassName = MyClassLoader.getPackPath(testObject);\n        \n        // Verify that the actual class name matches the expected one\n        assertEquals(expectedClassName, actualClassName, \"The class name should match the expected full name including the package\");\n    }\n    \n    @Test\n    public void getPackPathNullTest() {\n        // Define the test logic for when a null argument is passed\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        });\n\n        // Verify that the correct exception message is thrown\n        String expectedMessage = \"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\";\n        String actualMessage = exception.getMessage();\n        \n        assertTrue(actualMessage.contains(expectedMessage), \"Exception message should be as expected\");\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n\n    @Test\n    public void getPackPathTestNonNull() {\n        // Arrange: Create an instance of an arbitrary class, such as String for testing\n        Object testObject = new String(\"TestString\");\n\n        // Act: Invoke getPackPath with a non-null argument\n        String result = MyClassLoader.getPackPath(testObject);\n\n        // Assert: Verify that getPackPath returns the expected class name\n        assertEquals(\"java.lang.String\", result);\n    }\n\n    @Test\n    public void getPackPathTestNull() {\n        // Arrange: Prepare a null reference\n        Object testObject = null;\n\n        // Act & Assert: Invoke getPackPath with a null argument and verify that it throws IllegalArgumentException\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(testObject);\n        });\n\n        // Assert: Verify that the exception message is as expected\n        assertEquals(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\", exception.getMessage());\n    }\n}\n\n// Existing class assumed for context, with corrected syntax\nclass MyClassLoader {\n    public static String getPackPath(Object object) {\n        // \u68c0\u67e5\u7528\u6237\u4f20\u5165\u7684\u53c2\u6570\u662f\u5426\u4e3a\u7a7a\n        if (object == null) {\n            throw new java.lang.IllegalArgumentException(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\");\n        }\n\n        // \u83b7\u5f97\u7c7b\u7684\u5168\u540d\uff0c\u5305\u62ec\u5305\u540d\n        String clsName = object.getClass().getName();\n        return clsName;\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 100.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n\n    static class MockObject {\n    }\n\n    @Test\n    public void getPackPathWithNonNullTest() {\n        // Arrange: Create a new instance of an object for testing\n        Object object = new MockObject();\n\n        // Act: Call the getPackPath method with the test object\n        String result = MyClassLoader.getPackPath(object);\n\n        // Assert: Verify that the result is the expected fully qualified class name\n        assertEquals(MockObject.class.getName(), result);\n    }\n\n    @Test\n    public void getPackPathWithNullTest() {\n        // Arrange: Set a null object for testing\n        Object object = null;\n\n        // Assert: Verify that calling the getPackPath method with null\n        // throws an IllegalArgumentException with the expected message\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            // Act: Call the getPackPath method with null\n            MyClassLoader.getPackPath(object);\n        });\n\n        // Assert: Verify the exception message\n        assertEquals(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\", exception.getMessage());\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n\n    @Test\n    public void getPackPathTest() {\n        // Testing with a non-null object\n        Object testObject = new Object();\n        String expectedClassName = testObject.getClass().getName();\n        String actualClassName = MyClassLoader.getPackPath(testObject);\n        assertEquals(expectedClassName, actualClassName, \"The class names should match.\");\n\n        // Testing with a null object to check for IllegalArgumentException\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        });\n        String expectedMessage = \"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage), \"Exception message should be correct.\");\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTestWithNullParameter() {\n        // Testing the scenario where the object is null\n        // This should throw an IllegalArgumentException\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MyClassLoader.getPackPath(null);\n        });\n\n        String expectedMessage = \"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\";\n        String actualMessage = exception.getMessage();\n\n        // Verify the message from the exception\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n\n    @Test\n    public void getPackPathTestWithValidParameter() {\n        // Testing the scenario where the object is not null\n        Object testObject = new Object();\n        String expected = testObject.getClass().getName();\n        String actual = MyClassLoader.getPackPath(testObject);\n\n        // Assert that the expected class name matches the actual class name\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/aztec/detector",
        "package_name": "com.google.zxing.aztec.detector",
        "class_name": "Detector",
        "method_name": "detect",
        "test_code": "package com.google.zxing.aztec.detector;\n\nimport com.google.zxing.NotFoundException;\nimport com.google.zxing.common.BitMatrix;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DetectorTest {\n\n    // We might need a fake BitMatrix with predefined patterns for testing purposes.\n    \n    // Helper method to create a BitMatrix with a simple pattern\n    private BitMatrix createFakeBitMatrix(int dimension) {\n        BitMatrix matrix = new BitMatrix(dimension);\n        // Set some fake data in the BitMatrix\n        for (int i = 0; i < dimension; i += 2) {\n            for (int j = 0; j < dimension; j += 2) {\n                matrix.set(i, j);\n            }\n        }\n        return matrix;\n    }\n    \n    @Test\n    public void detectTest() {\n        // Create a fake BitMatrix to act as a mock image\n        BitMatrix fakeImage = createFakeBitMatrix(100);\n        Detector detector = new Detector(fakeImage);\n\n        // Execute the detect method\n        NotFoundException exception = assertThrows(\n            NotFoundException.class, \n            () -> detector.detect(false),\n            \"NotFoundException was expected\"\n        );\n\n        // We expect a NotFoundException if the BitMatrix does not have a valid Aztec pattern.\n        // This is an example to show how to test the detect method for an exception scenario.\n        // For a successful detection, we would need a valid Aztec pattern in the BitMatrix.\n    }\n}",
        "package_metric": 27.23,
        "class_metric": 26.24,
        "method_metric": 10.0,
        "pitest": 3.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/aztec/detector",
        "package_name": "com.google.zxing.aztec.detector",
        "class_name": "Detector",
        "method_name": "getMatrixCenter",
        "test_code": "package com.google.zxing.aztec.detector;\n\nimport com.google.zxing.common.BitMatrix;\nimport org.junit.jupiter.api.*;\nimport java.lang.reflect.Method;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DetectorTest {\n    @Test\n    public void getMatrixCenterTest() {\n        // Setup BitMatrix and Detector instance\n        int size = 21; // This size should correspond to a valid BitMatrix size for an Aztec Code.\n        BitMatrix matrix = new BitMatrix(size);\n        Detector detector = new Detector(matrix);\n\n        try {\n            // Reflectively access the getMatrixCenter method as it's private\n            Method getMatrixCenterMethod = Detector.class.getDeclaredMethod(\"getMatrixCenter\");\n            getMatrixCenterMethod.setAccessible(true);\n            \n            // Expecting the center of the matrix to be the center of the BitMatrix.\n            int expectedX = size / 2;\n            int expectedY = size / 2;\n\n            // Invoke the getMatrixCenter method and check the result\n            Detector.Point center = (Detector.Point) getMatrixCenterMethod.invoke(detector);\n\n            assertEquals(expectedX, center.getX(), \"X coordinate of center is incorrect\");\n            assertEquals(expectedY, center.getY(), \"Y coordinate of center is incorrect\");\n        } catch (Exception e) {\n            fail(\"Exception occurred during testing: \" + e.getMessage());\n        }\n    }\n}",
        "package_metric": 18.3,
        "class_metric": 16.29,
        "method_metric": 58.62,
        "pitest": 7.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common",
        "package_name": "com.google.zxing.common",
        "class_name": "BitArray",
        "method_name": "getNextSet",
        "test_code": "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitArrayTest {\n\n    @Test\n    public void getNextSetTest() {\n        // Initialize a BitArray with a specific size\n        BitArray bitArray = new BitArray(64);\n\n        // Set some bits in the BitArray\n        bitArray.set(0);\n        bitArray.set(5);\n        bitArray.set(36);\n\n        // Test finding the next set bit when it exists\n        assertEquals(0, bitArray.getNextSet(0), \"First set bit from index 0 should be at index 0\");\n        assertEquals(5, bitArray.getNextSet(1), \"Next set bit from index 1 should be at index 5\");\n        assertEquals(36, bitArray.getNextSet(6), \"Next set bit from index 6 should be at index 36\");\n\n        // Test that it returns the size of the BitArray when no next set bit exists\n        assertEquals(64, bitArray.getNextSet(37), \"Next set bit from index 37 should return the size 64 when not found\");\n\n        // Set the last possible bit\n        bitArray.set(63);\n        // Test that getNextSet returns the last bit when requested\n        assertEquals(63, bitArray.getNextSet(37), \"Next set bit from index 37 should be at index 63 after setting last bit\");\n    }\n}",
        "package_metric": 1.6,
        "class_metric": 12.59,
        "method_metric": 90.91,
        "pitest": 9.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common",
        "package_name": "com.google.zxing.common",
        "class_name": "BitArray",
        "method_name": "getNextSet",
        "test_code": "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitArrayTest {\n    @Test\n    public void getNextSetTest() {\n        \n        // Create a BitArray and set some bits\n        int size = 64;\n        BitArray bitArray = new BitArray(size);\n        bitArray.set(3);\n        bitArray.set(36);\n        bitArray.set(48);\n        \n        // Test different scenarios\n        assertEquals(3, bitArray.getNextSet(0)); // First set bit is at index 3\n        assertEquals(36, bitArray.getNextSet(4)); // Next after 3 is at index 36\n        assertEquals(48, bitArray.getNextSet(37)); // Next after 36 is at index 48\n        assertEquals(size, bitArray.getNextSet(49)); // No set bits after index 48\n        assertEquals(size, bitArray.getNextSet(64)); // Start index >= size\n        \n        // Edge cases\n        assertEquals(size, bitArray.getNextSet(size)); // From index equals size\n        assertEquals(3, bitArray.getNextSet(3)); // The \"from\" index itself is set\n        \n        // Set a bit at the end and test\n        bitArray.set(63);\n        assertEquals(63, bitArray.getNextSet(49)); // Next after 48 is now at index 63\n        assertEquals(size, bitArray.getNextSet(64)); // Still returns size when starting from index >= actual size\n    }\n}",
        "package_metric": 1.69,
        "class_metric": 13.29,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common",
        "package_name": "com.google.zxing.common",
        "class_name": "BitArray",
        "method_name": "getNextSet",
        "test_code": "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class BitArrayTest {\n    @Test\n    public void getNextSetTest() {\n        // Create a BitArray with a certain size\n        BitArray bitArray = new BitArray(64);\n        // Set some bits\n        bitArray.set(5);\n        bitArray.set(32);\n        bitArray.set(50);\n\n        // Test various scenarios\n        assertEquals(5, bitArray.getNextSet(0), \n            \"First set bit after index 0 should be 5.\");\n        assertEquals(32, bitArray.getNextSet(6), \n            \"First set bit after index 6 should be 32.\");\n        assertEquals(50, bitArray.getNextSet(33), \n            \"First set bit after index 33 should be 50.\");\n        assertEquals(64, bitArray.getNextSet(51), \n            \"There are no set bits after index 50, so return the size.\");\n        assertEquals(64, bitArray.getNextSet(64), \n            \"No set bits at or beyond the size of the array, return the size.\");\n    }\n}",
        "package_metric": 1.69,
        "class_metric": 13.29,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common",
        "package_name": "com.google.zxing.common",
        "class_name": "BitArray",
        "method_name": "getNextSet",
        "test_code": "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class BitArrayTest {\n    @Test\n    public void getNextSetTest() {\n        BitArray bitArray = new BitArray(64);\n\n        // All bits are initially unset, so getNextSet from 0 should return size (64)\n        assertEquals(64, bitArray.getNextSet(0));\n        \n        // Set a bit and test that getNextSet returns the correct index\n        bitArray.set(10);\n        assertEquals(10, bitArray.getNextSet(0));\n\n        // Test that getNextSet returns the correct index after the set bit\n        assertEquals(64, bitArray.getNextSet(11));\n\n        // Test that getNextSet returns the size if starting from an index >= size\n        assertEquals(64, bitArray.getNextSet(65));\n        \n        // Set another bit further on and test getNextSet with an index before it\n        bitArray.set(50);\n        assertEquals(50, bitArray.getNextSet(11));\n\n        // Edge case: set the last bit, and ensure it finds it\n        bitArray.set(63);\n        assertEquals(63, bitArray.getNextSet(51));\n\n        // Test that getNextSet returns the correct index in case of consecutive set bits\n        bitArray.set(30);\n        bitArray.set(31);\n        assertEquals(30, bitArray.getNextSet(29));\n        assertEquals(30, bitArray.getNextSet(30));\n        assertEquals(31, bitArray.getNextSet(31));\n    }\n}",
        "package_metric": 1.69,
        "class_metric": 13.29,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common",
        "package_name": "com.google.zxing.common",
        "class_name": "BitArray",
        "method_name": "getNextSet",
        "test_code": "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitArrayTest {\n    \n    @Test\n    public void getNextSetTest() {\n        // Create a bit array with a size of 100 and set some bits\n        BitArray bitArray = new BitArray(100);\n        bitArray.set(10);\n        bitArray.set(20);\n        bitArray.set(30);\n        \n        // Test for a bit set before the first set bit\n        assertEquals(10, bitArray.getNextSet(0), \"Next set bit should be at index 10.\");\n\n        // Test for the next set bit at the position of the first set bit\n        assertEquals(10, bitArray.getNextSet(10), \"Next set bit after index 10 should be 10 itself.\");\n\n        // Test for a bit in between two set bits\n        assertEquals(20, bitArray.getNextSet(11), \"Next set bit after index 11 should be 20.\");\n\n        // Test for the last set bit\n        assertEquals(30, bitArray.getNextSet(21), \"Next set bit after index 21 should be 30.\");\n\n        // Test for a bit set after the last set bit\n        assertEquals(100, bitArray.getNextSet(31), \"Should return the size of bit array as it's beyond last set bit.\");\n\n        // Test for a bit set at the boundary of the bit array's size\n        assertEquals(100, bitArray.getNextSet(100), \"Should return the size of bit array when start index equals size.\");\n        \n        // Test with an index beyond the BitArray's size\n        assertEquals(100, bitArray.getNextSet(101), \"Should return the size of bit array when start index is beyond size.\");\n\n        // Add more tests here if necessary\n    }\n}",
        "package_metric": 1.69,
        "class_metric": 13.29,
        "method_metric": 100.0,
        "pitest": 8.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common",
        "package_name": "com.google.zxing.common",
        "class_name": "BitArray",
        "method_name": "getNextSet",
        "test_code": "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitArrayTest {\n    @Test\n    public void getNextSetTest() {\n        // Assuming a constructor BitArray(int size) initializes with all bits unset\n        // and size determines the size of the bit array\n        int size = 64; // example size, make sure it aligns with the actual implementation\n        BitArray bitArray = new BitArray(size);\n\n        // set a bit so there's something for getNextSet to find\n        bitArray.set(10);  // this should set the bit at index 10\n        bitArray.set(50);  // this should set the bit at index 50\n\n        // check a few cases\n        assertEquals(10, bitArray.getNextSet(0), \"Next set bit from index 0 should be 10\");\n        assertEquals(10, bitArray.getNextSet(10), \"Next set bit from index 10 should be 10\");\n        assertEquals(50, bitArray.getNextSet(11), \"Next set bit from index 11 should be 50\");\n        assertEquals(50, bitArray.getNextSet(50), \"Next set bit from index 50 should be 50\");\n        assertEquals(size, bitArray.getNextSet(51), \"Should return size if no bits are set after index 51\");\n        assertEquals(size, bitArray.getNextSet(size), \"Should return size if from argument is equal to size\");\n        assertEquals(size, bitArray.getNextSet(size + 1), \"Should return size if from argument is greater than size\");\n    }\n}",
        "package_metric": 1.69,
        "class_metric": 13.29,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common",
        "package_name": "com.google.zxing.common",
        "class_name": "BitArray",
        "method_name": "getNextSet",
        "test_code": "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class BitArrayTest {\n\n    @Test\n    public void getNextSetTest() {\n        BitArray bitArray = new BitArray(64);\n        bitArray.set(32);\n        bitArray.set(47);\n\n        // Test case with a set bit at position 32  \n        assertEquals(32, bitArray.getNextSet(0), \"The next set bit from index 0 should be 32\");\n\n        // Test case with a set bit at position 47\n        assertEquals(47, bitArray.getNextSet(33), \"The next set bit from index 33 should be 47\");\n\n        // Test case where there are no set bits from the given index onward\n        assertEquals(64, bitArray.getNextSet(48), \"Should return the size of the array when no further set bits exist\");\n\n        // Test case with from index equal to size\n        assertEquals(64, bitArray.getNextSet(64), \"Should return the size when 'from' index is equal to size\");\n\n        // Test case where from is larger than size\n        assertEquals(64, bitArray.getNextSet(100), \"Should return the size when 'from' index is larger than the size\");\n\n        // Test edge case for set bit at the end\n        bitArray.set(63);\n        assertEquals(63, bitArray.getNextSet(48), \"The next set bit after index 48 should be 63, which is the last bit\");\n    }\n}",
        "package_metric": 1.69,
        "class_metric": 13.29,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common",
        "package_name": "com.google.zxing.common",
        "class_name": "BitArray",
        "method_name": "getNextSet",
        "test_code": "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitArrayTest {\n    @Test\n    public void getNextSetTest() {\n        // Initialize BitArray with size 100, which should create a underlying int[4] array\n        BitArray bitArray = new BitArray(100);\n\n        // Set some bits such that we can test the getNextSet method\n        bitArray.set(0);\n        bitArray.set(10);\n        bitArray.set(30);\n        bitArray.set(75);\n\n        // Test getNextSet method\n        assertEquals(0, bitArray.getNextSet(0), \"Expected next set bit at index 0.\");\n        assertEquals(10, bitArray.getNextSet(1), \"Expected next set bit at index 10 when starting from 1.\");\n        assertEquals(10, bitArray.getNextSet(10), \"Expected next set bit at index 10 when starting from 10.\");\n        assertEquals(30, bitArray.getNextSet(11), \"Expected next set bit at index 30 when starting from 11.\");\n        assertEquals(75, bitArray.getNextSet(31), \"Expected next set bit at index 75 when starting from 31.\");\n        assertEquals(100, bitArray.getNextSet(76), \"Expected to get size (100) when starting from 76 as there's no more set bits beyond that.\");\n        assertEquals(100, bitArray.getNextSet(100), \"Expected to get size (100) when starting from 100 as it's equal to size.\");\n        assertEquals(100, bitArray.getNextSet(101), \"Expected to get size (100) when starting from 101 as it's out of bound.\");\n    }\n}",
        "package_metric": 1.69,
        "class_metric": 13.29,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common",
        "package_name": "com.google.zxing.common",
        "class_name": "BitArray",
        "method_name": "getNextSet",
        "test_code": "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitArrayTest {\n  \n    @Test\n    public void getNextSetTest() {\n        BitArray bitArray;\n\n        // Test with empty BitArray\n        bitArray = new BitArray(32);\n        assertEquals(32, bitArray.getNextSet(0), \"The next set bit of an empty BitArray should equal its size.\");\n\n        // Test within the bounds of the underlying array\n        bitArray = new BitArray(64);\n        bitArray.set(35);\n        assertEquals(35, bitArray.getNextSet(0), \"The next set bit should be found at the correct index.\");\n\n        // Test to ensure it handles the case where \"from\" index is beyond current set bit\n        assertEquals(35, bitArray.getNextSet(30), \"The next set bit after the given 'from' index should be found.\");\n\n        // Test for when \"from\" index is the index of the last set bit\n        assertEquals(35, bitArray.getNextSet(35), \"The next set bit when 'from' index is the index of the last set bit should return the 'from' index itself.\");\n        \n        // Test for when \"from\" index is after the last set bit\n        assertEquals(64, bitArray.getNextSet(36), \"The next set bit after the last set bit should be the size of the BitArray.\");\n\n        // Test to ensure it returns the size for overflow cases\n        assertEquals(64, bitArray.getNextSet(100), \"Should return the size if 'from' is beyond the size of the bit array.\");\n        \n        // Test for boundary conditions on the array size\n        bitArray = new BitArray(96);\n        bitArray.set(95);\n        assertEquals(95, bitArray.getNextSet(60), \"The next set bit close to the edge of the array should be found correctly.\");\n        \n        // Test for when bits are set at the boundaries of underlying integers\n        bitArray.set(64); // sets the bit at index 64, which is the start of a new integer in the array\n        assertEquals(64, bitArray.getNextSet(36), \"The next set bit should properly skip over to the next integer in the array within the bit set.\");\n    }\n}",
        "package_metric": 1.69,
        "class_metric": 13.29,
        "method_metric": 100.0,
        "pitest": 9.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common",
        "package_name": "com.google.zxing.common",
        "class_name": "BitArray",
        "method_name": "getNextSet",
        "test_code": "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class BitArrayTest {\n    @Test\n    public void getNextSetTest() {\n        // Initialize a BitArray with a specific size\n        final int arraySize = 64;\n        BitArray bitArray = new BitArray(arraySize);\n        \n        // Assume the bits array is initialized with all zeros\n        // and setting some bits to 1 to create a known scenario for testing\n        bitArray.set(2); // Set the bit at index 2 to 1\n        bitArray.set(32); // Set the bit at index 32 to 1\n        bitArray.set(50); // Set the bit at index 50 to 1\n\n        // Test cases\n        // Test getNextSet for a position within the array\n        assertEquals(2, bitArray.getNextSet(0), \"getNextSet should return the first set bit from the start.\");\n        \n        // Test getNextSet for a position after the first set bit\n        assertEquals(32, bitArray.getNextSet(3), \"getNextSet should return the next set bit after index 3.\");\n\n        // Test getNextSet for a position where the next set bit is in the next unit of bits (next 32 bits)\n        assertEquals(32, bitArray.getNextSet(20), \"getNextSet should return the first set bit after index 20.\");\n\n        // Test getNextSet for a position where there are no more set bits\n        assertEquals(arraySize, bitArray.getNextSet(51), \"getNextSet should return the array size if there are no more set bits after the given position.\");\n        \n        // Test getNextSet at the boundary of the array size\n        assertEquals(arraySize, bitArray.getNextSet(arraySize), \"getNextSet should return the array size if the from index is equal to the array size.\");\n    }\n}",
        "package_metric": 1.69,
        "class_metric": 13.29,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common",
        "package_name": "com.google.zxing.common",
        "class_name": "BitArray",
        "method_name": "getNextSet",
        "test_code": "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitArrayTest {\n\n    // Assuming the following are class members. For mock purposes, these are provided with values.\n    private int size = 128;          // Mock value (it should match the size of bits array in reality)\n    private int[] bits = new int[]{0x0, 0x0, 0x8, 0x0};    // An example bits array with a bit set at position 67 (bits[2] has 3rd bit set)\n\n    @Test\n    public void getNextSetTest() {\n        // Set up a scenario for testing. Assuming getNextSet is called on an instance of the class that contains it.\n        // Also assuming that size and bits are properly set in this test environment.\n        \n        // Test when 'from' is less than size and a set bit is present in the array.\n        int nextSetBit = getNextSet(0);\n        assertEquals(67, nextSetBit, \"The next set bit should be at index 67\");\n\n        // Test when 'from' is exactly where the set bit is.\n        nextSetBit = getNextSet(67);\n        assertEquals(67, nextSetBit, \"The next set bit should be at index 67 when starting from that index\");\n\n        // Test when 'from' is after the last set bit in the array.\n        nextSetBit = getNextSet(68);\n        assertEquals(size, nextSetBit, \"The next set bit should be equal to the size when no other bits are set after the starting index\");\n\n        // Test when 'from' is out of bounds of the bits array size.\n        nextSetBit = getNextSet(130);\n        assertEquals(size, nextSetBit, \"The next set bit should be equal to the size when starting index is out of the bits array bounds\");\n    }\n    \n    // Assuming the implementation of the getNextSet method as a part of this test for it to work.\n    public int getNextSet(int from) {\n        if (from >= size) {\n            return size;\n        }\n        int bitsOffset = from / 32;\n        int currentBits = bits[bitsOffset];\n        // mask off lesser bits first\n        currentBits &= -(1 << (from & 0x1F));\n        while (currentBits == 0) {\n            if (++bitsOffset == bits.length) {\n                return size;\n            }\n            currentBits = bits[bitsOffset];\n        }\n        int result = (bitsOffset * 32) + Integer.numberOfTrailingZeros(currentBits);\n        return Math.min(result, size);\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common",
        "package_name": "com.google.zxing.common",
        "class_name": "BitArray",
        "method_name": "getNextSet",
        "test_code": "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitArrayTest {\n    \n    private int[] bits; // Assuming this is a field in the same class where getNextSet method resides.\n    private int size; // Assuming this is another field that denotes the size of the BitArray.\n    \n    @BeforeEach\n    public void setUp() {\n        // Initialize your bit array and size before each test\n        // For example purposes, let's say we have 64 bits sized bit array with first 32 bits set to zero and next 32 bits set to 1.\n        bits = new int[]{0, -1}; // -1 is the two's complement binary representation of all 1s in a 32-bit integer.\n        size = 64; // Assuming this means our array should not look for bits past the 64th position.\n    }\n\n    @Test\n    public void getNextSetTest() {\n        // Test with a starting index before the first set bit\n        assertEquals(32, getNextSet(0), \"Expected the next set bit at index 32\");\n        \n        // Test with starting index exactly at the first set bit\n        assertEquals(32, getNextSet(32), \"Expected the next set bit at index 32\");\n        \n        // Test with starting index after the first set bit but before the end\n        assertEquals(33, getNextSet(33), \"Expected the next set bit at index 33\");\n        \n        // Test starting index at the last set bit\n        assertEquals(63, getNextSet(63), \"Expected the last set bit at index 63\");\n        \n        // Test with starting index equal to size (boundary condition)\n        assertEquals(size, getNextSet(size), \"Expected no set bit and return size\");\n        \n        // Test with starting index greater than size (out of bounds)\n        assertEquals(size, getNextSet(size + 1), \"Expected no set bit and return size\");\n    }\n\n    // Helper method to mimic the actual method we are testing (since we're not in the actual class)\n    public int getNextSet(int from) {\n        if (from >= size) {\n            return size;\n        }\n        int bitsOffset = from / 32;\n        int currentBits = bits[bitsOffset];\n        currentBits &= -(1 << (from & 0x1F));\n        while (currentBits == 0) {\n            if (++bitsOffset == bits.length) {\n                return size;\n            }\n            currentBits = bits[bitsOffset];\n        }\n        int result = (bitsOffset * 32) + Integer.numberOfTrailingZeros(currentBits);\n        return Math.min(result, size);\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n\n    @Test\n    public void equalsTest() {\n        // Create two distinct FinderPattern objects with the same value\n        FinderPattern pattern1 = new FinderPattern(5, new int[]{1, 2}, 1, 2, 3);\n        FinderPattern pattern2 = new FinderPattern(5, new int[]{1, 2}, 1, 2, 3);\n        \n        // Create a third FinderPattern object with a different value\n        FinderPattern pattern3 = new FinderPattern(10, new int[]{3, 4}, 3, 4, 5);\n        \n        // Test equality with the same value - should be true\n        assertTrue(pattern1.equals(pattern2), \"Objects with the same 'value' should be equal.\");\n        \n        // Test equality with different value - should be false\n        assertFalse(pattern1.equals(pattern3), \"Objects with different 'value' should not be equal.\");\n        \n        // Test equality with null - should be false\n        assertFalse(pattern1.equals(null), \"Object compared with null should not be equal.\");\n        \n        // Test equality with an object of a different type - should be false\n        assertFalse(pattern1.equals(new Object()), \"Object compared with non-FinderPattern type should not be equal.\");\n        \n        // Test equality with itself - should be true\n        assertTrue(pattern1.equals(pattern1), \"Object compared with itself should be equal.\");\n    }\n}",
        "package_metric": 2.36,
        "class_metric": 69.23,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n\n    @Test\n    public void equalsTest() {\n        int value1 = 5;\n        int[] startEnd1 = {1, 10};\n        FinderPattern pattern1 = new FinderPattern(value1, startEnd1, startEnd1[0], startEnd1[1], 0);\n\n        // Test equality with the same instance\n        assertTrue(pattern1.equals(pattern1), \"FinderPattern instance should be equal to itself\");\n\n        // Test equality with a different instance but with the same value\n        int value2 = 5;\n        int[] startEnd2 = {1, 10};\n        FinderPattern pattern2 = new FinderPattern(value2, startEnd2, startEnd2[0], startEnd2[1], 0);\n        assertTrue(pattern1.equals(pattern2), \"FinderPattern instances with same value should be equal\");\n\n        // Test equality with a different instance and a different value\n        int value3 = 7;\n        int[] startEnd3 = {1, 10};\n        FinderPattern pattern3 = new FinderPattern(value3, startEnd3, startEnd3[0], startEnd3[1], 0);\n        assertFalse(pattern1.equals(pattern3), \"FinderPattern instances with different values should not be equal\");\n\n        // Test equality with a different class\n        Object notAFinderPattern = new Object();\n        assertFalse(pattern1.equals(notAFinderPattern), \"FinderPattern instance should not be equal to an instance of a different class\");\n\n        // Test compatibility with null\n        assertFalse(pattern1.equals(null), \"FinderPattern instance should not be equal to null\");\n    }\n}\n",
        "package_metric": 2.36,
        "class_metric": 69.23,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n\n    @Test\n    public void equalsTest() {\n        int value = 5;\n        int[] startEnd = {2, 10};\n        FinderPattern pattern1 = new FinderPattern(value, startEnd, startEnd[0], startEnd[1], 1);\n        FinderPattern pattern2 = new FinderPattern(value, startEnd, startEnd[0], startEnd[1], 1);\n        FinderPattern pattern3 = new FinderPattern(10, new int[]{3, 9}, 3, 9, 2);\n        FinderPattern nullPattern = null;\n        Object differentObject = new Object();\n\n        // Assert that the same instance returns true\n        assertTrue(pattern1.equals(pattern1), \"A pattern should be equal to itself.\");\n        \n        // Assert that two patterns with the same value are considered equal\n        assertTrue(pattern1.equals(pattern2), \"Two patterns with the same value should be equal.\");\n        \n        // Assert that two patterns with different values are considered not equal\n        assertFalse(pattern1.equals(pattern3), \"Two patterns with different values should not be equal.\");\n\n        // Assert that a pattern is not equal to null\n        assertFalse(pattern1.equals(nullPattern), \"A pattern should not be equal to null.\");\n\n        // Assert that a pattern is not equal to an object of a different type\n        assertFalse(pattern1.equals(differentObject), \"A pattern should not be equal to an object of a different type.\");\n    }\n}",
        "package_metric": 2.36,
        "class_metric": 69.23,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n    \n    @Test\n    public void equalsTest() {\n        // Create two FinderPattern objects with the same value\n        FinderPattern pattern1 = new FinderPattern(5, new int[]{1, 2}, 1, 2, 3);\n        FinderPattern pattern2 = new FinderPattern(5, new int[]{1, 2}, 1, 2, 3);\n        \n        // Create a FinderPattern object with a different value\n        FinderPattern pattern3 = new FinderPattern(6, new int[]{1, 2}, 1, 2, 3);\n        \n        // Assert that pattern1 equals pattern2 but not pattern3\n        assertTrue(pattern1.equals(pattern2), \"Patterns with the same value should be equal\");\n        assertFalse(pattern1.equals(pattern3), \"Patterns with different values should not be equal\");\n        \n        // Assert that pattern1 does not equal null\n        assertNotNull(pattern1, \"Pattern should not be equal to null\");\n        \n        // Assert that pattern1 does not equal an object of a different type\n        Object differentType = new Object();\n        assertFalse(pattern1.equals(differentType), \"Pattern should not be equal to an object of a different type\");\n    }\n}",
        "package_metric": 2.36,
        "class_metric": 69.23,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n    @Test\n    public void equalsTest() {\n        FinderPattern pattern1 = new FinderPattern(5, new int[]{10, 20}, 15, 30, 3);\n        FinderPattern pattern2 = new FinderPattern(5, new int[]{10, 20}, 15, 30, 3);\n        FinderPattern pattern3 = new FinderPattern(7, new int[]{10, 20}, 15, 30, 3);\n\n        assertEquals(pattern1, pattern2, \"Two FinderPattern instances with the same 'value' should be equal.\");\n        assertNotEquals(pattern1, pattern3, \"Two FinderPattern instances with different 'value' should not be equal.\");\n\n        assertTrue(pattern1.equals(pattern2), \"The equals method should return true for objects with the same 'value'.\");\n        assertFalse(pattern1.equals(pattern3), \"The equals method should return false for objects with different 'value'.\");\n        \n        // Test equality against null and different type\n        Object nullObject = null;\n        Object differentType = new Object();\n        assertFalse(pattern1.equals(nullObject), \"The equals method should return false when compared with null.\");\n        assertFalse(pattern1.equals(differentType), \"The equals method should return false when compared with a different type.\");\n    }\n}",
        "package_metric": 2.36,
        "class_metric": 69.23,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n    @Test\n    public void equalsTest() {\n        // Create two FinderPattern objects with the same value\n        FinderPattern pattern1 = new FinderPattern(5, new int[]{1, 2}, 1, 2, 3);\n        FinderPattern pattern2 = new FinderPattern(5, new int[]{3, 4}, 3, 4, 5);\n\n        // Check that two FinderPatterns with the same value are equal\n        assertEquals(pattern1, pattern2, \"Two FinderPatterns with the same value should be equal.\");\n\n        // Create another FinderPattern object with a different value\n        FinderPattern pattern3 = new FinderPattern(6, new int[]{1, 2}, 1, 2, 3);\n\n        // Check that two FinderPatterns with different values are not equal\n        assertNotEquals(pattern1, pattern3, \"Two FinderPatterns with different values should not be equal.\");\n\n        // Check equality against null and objects of other types\n        assertNotEquals(pattern1, null, \"FinderPattern should not be equal to null.\");\n        assertNotEquals(pattern1, new Object(), \"FinderPattern should not be equal to objects of a different type.\");\n    }\n}",
        "package_metric": 2.36,
        "class_metric": 69.23,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n\n    @Test\n    public void equalsTest() {\n        FinderPattern pattern1 = new FinderPattern(1, new int[]{0, 10}, 0, 10, 0);\n        FinderPattern pattern2 = new FinderPattern(1, new int[]{0, 10}, 0, 10, 0);\n        FinderPattern pattern3 = new FinderPattern(2, new int[]{5, 15}, 5, 15, 1);\n\n        // Check equality with same values\n        assertTrue(pattern1.equals(pattern2), \"FinderPatterns with the same value should be equal\");\n\n        // Check inequality with different values\n        assertFalse(pattern1.equals(pattern3), \"FinderPatterns with different values should not be equal\");\n\n        // Check that pattern1 is not equal to null\n        assertFalse(pattern1.equals(null), \"FinderPattern should not be equal to null\");\n\n        // Check that pattern1 is not equal to an object of different type\n        assertFalse(pattern1.equals(new Object()), \"FinderPattern should not be equal to an object of a different type\");\n    }\n}",
        "package_metric": 2.36,
        "class_metric": 69.23,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n\n    @Test\n    public void equalsTest() {\n        int value1 = 10;\n        int[] startEnd1 = {1, 20};\n        FinderPattern fp1 = new FinderPattern(value1, startEnd1, startEnd1[0], startEnd1[1], 30);\n\n        int value2 = 10;\n        int[] startEnd2 = {1, 20};\n        FinderPattern fp2 = new FinderPattern(value2, startEnd2, startEnd2[0], startEnd2[1], 30);\n\n        int value3 = 20;\n        int[] startEnd3 = {5, 25};\n        FinderPattern fp3 = new FinderPattern(value3, startEnd3, startEnd3[0], startEnd3[1], 40);\n\n        // Positive test case: same value should be equal\n        assertEquals(fp1, fp2, \"FinderPatterns with the same value should be equal\");\n\n        // Negative test case: different values should not be equal\n        assertNotEquals(fp1, fp3, \"FinderPatterns with different values should not be equal\");\n\n        // Negative test case: a FinderPattern should not be equal to null\n        assertNotEquals(fp1, null, \"FinderPattern should not be equal to null\");\n\n        // Negative test case: a FinderPattern should not be equal to a different type of object\n        assertNotEquals(fp1, new Object(), \"FinderPattern should not be equal to a different type of object\");\n    }\n}",
        "package_metric": 2.36,
        "class_metric": 69.23,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n    @Test\n    public void equalsTest() {\n        // Arrange\n        int value1 = 5;\n        int[] startEnd1 = {1, 2};\n        int start1 = 1;\n        int end1 = 2;\n        int rowNumber1 = 3;\n        FinderPattern pattern1 = new FinderPattern(value1, startEnd1, start1, end1, rowNumber1);\n        \n        int value2 = 5;\n        int[] startEnd2 = {1, 2};\n        int start2 = 1;\n        int end2 = 2;\n        int rowNumber2 = 3;\n        FinderPattern pattern2 = new FinderPattern(value2, startEnd2, start2, end2, rowNumber2);\n        \n        int value3 = 6;\n        FinderPattern pattern3 = new FinderPattern(value3, startEnd1, start1, end1, rowNumber1);\n\n        // Act & Assert\n        assertTrue(pattern1.equals(pattern2), \"Patterns with the same value should be equal.\");\n        assertFalse(pattern1.equals(pattern3), \"Patterns with different values should not be equal.\");\n        assertFalse(pattern1.equals(null), \"Pattern should not be equal to null.\");\n        assertFalse(pattern1.equals(new Object()), \"Pattern should not be equal to a different type of object.\");\n    }\n}",
        "package_metric": 2.36,
        "class_metric": 69.23,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n    @Test\n    public void equalsTest() {\n        int value = 5;\n        int[] startEnd = {10, 20};\n        int start = 10;\n        int end = 20;\n        int rowNumber = 3;\n        FinderPattern pattern1 = new FinderPattern(value, startEnd, start, end, rowNumber);\n        FinderPattern pattern2 = new FinderPattern(value, startEnd, start, end, rowNumber);\n        FinderPattern pattern3 = new FinderPattern(value + 1, startEnd, start, end, rowNumber);\n        Object nonFinderPatternObject = new Object();\n\n        assertTrue(pattern1.equals(pattern2), \"Two identical FinderPatterns should be equal.\");\n        assertFalse(pattern1.equals(pattern3), \"FinderPatterns with different values should not be equal.\");\n        assertFalse(pattern1.equals(nonFinderPatternObject), \"A FinderPattern and non-FinderPattern Object should not be equal.\");\n        assertFalse(pattern1.equals(null), \"A FinderPattern should not be equal to null.\");\n\n        // Test with same value but different startEnd array\n        int[] differentStartEnd = {15, 25};\n        FinderPattern pattern4 = new FinderPattern(value, differentStartEnd, start, end, rowNumber);\n        // Assuming equals only compares 'value' and not 'startEnd', 'resultPoints', 'start', 'end', or 'rowNumber'\n        assertTrue(pattern1.equals(pattern4), \"FinderPatterns with the same 'value' and different 'startEnd' should be equal.\");\n    }\n}",
        "package_metric": 2.36,
        "class_metric": 69.23,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n\n    @Test\n    public void equalsTest() {\n        int value1 = 5;\n        int[] startEnd1 = {10, 20};\n        int start1 = 10;\n        int end1 = 20;\n        int rowNumber1 = 30;\n        FinderPattern pattern1 = new FinderPattern(value1, startEnd1, start1, end1, rowNumber1);\n        \n        int value2 = 5;\n        int[] startEnd2 = {10, 20};\n        int start2 = 10;\n        int end2 = 20;\n        int rowNumber2 = 30;\n        FinderPattern pattern2 = new FinderPattern(value2, startEnd2, start2, end2, rowNumber2);\n\n        int valueDifferent = 6;\n        int[] startEndDifferent = {15, 25};\n        int startDifferent = 15;\n        int endDifferent = 25;\n        int rowNumberDifferent = 35;\n        FinderPattern patternDifferent = new FinderPattern(valueDifferent, startEndDifferent, startDifferent, endDifferent, rowNumberDifferent);\n        \n        // Positive test case: check that two objects with same values are equal\n        assertTrue(pattern1.equals(pattern2), \"Patterns with the same value should be equal.\");\n\n        // Negative test case: check if two objects with different values are not equal\n        assertFalse(pattern1.equals(patternDifferent), \"Patterns with different values should not be equal.\");\n\n        // Test with null object\n        assertFalse(pattern1.equals(null), \"Pattern compared with null should not be equal.\");\n\n        // Test with the same object (identity test)\n        assertTrue(pattern1.equals(pattern1), \"Pattern compared with itself should be equal.\");\n\n        // Test with an object of a different class\n        assertFalse(pattern1.equals(new Object()), \"Pattern compared with a different class object should not be equal.\");\n\n        // Test with different attributes but same 'value' as this is the only attribute checked in equals()\n        int sameValue = pattern1.getValue();\n        int[] differentStartEnd = {30, 40};\n        FinderPattern patternSameValue = new FinderPattern(sameValue, differentStartEnd, startDifferent, endDifferent, rowNumberDifferent);\n        assertTrue(pattern1.equals(patternSameValue), \"Patterns with different attributes but same 'value' should be equal according to the equals implementation.\");\n    }\n}",
        "package_metric": 2.62,
        "class_metric": 76.92,
        "method_metric": 100.0,
        "pitest": 63.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport com.google.zxing.ResultPoint;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n\n    @Test\n    public void equalsTest() {\n        int value1 = 5;\n        int[] startEnd1 = {1, 10};\n        ResultPoint resultPoints1 = new ResultPoint(1.0f, 2.0f);\n\n        int value2 = 5;\n        int[] startEnd2 = {1, 10};\n        ResultPoint resultPoints2 = new ResultPoint(1.0f, 2.0f);\n\n        int valueNotEqual = 6;\n        int[] startEndNotEqual = {2, 11};\n        ResultPoint resultPointsNotEqual = new ResultPoint(2.0f, 3.0f);\n\n        FinderPattern finderPattern1 = new FinderPattern(value1, startEnd1, startEnd1[0], startEnd1[1], 0);\n        FinderPattern finderPattern2 = new FinderPattern(value2, startEnd2, startEnd2[0], startEnd2[1], 0);\n        FinderPattern finderPatternDifferent = new FinderPattern(valueNotEqual, startEndNotEqual, startEndNotEqual[0], startEndNotEqual[1], 0);\n\n        // Test for equality with the same values\n        assertTrue(finderPattern1.equals(finderPattern2), \"FinderPatterns with the same value should be equal\");\n\n        // Test for inequality with different values\n        assertFalse(finderPattern1.equals(finderPatternDifferent), \"FinderPatterns with different values should not be equal\");\n\n        // Test for inequality with a different type of object\n        assertFalse(finderPattern1.equals(new Object()), \"FinderPattern should not be equal to a different type of object\");\n\n        // Test for equality with itself\n        assertTrue(finderPattern1.equals(finderPattern1), \"FinderPattern should be equal to itself\");\n    }\n}",
        "package_metric": 2.36,
        "class_metric": 69.23,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n\n    private static class FinderPattern {\n        private final int value;\n\n        public FinderPattern(int value) {\n            this.value = value;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (!(o instanceof FinderPattern)) {\n                return false;\n            }\n            FinderPattern that = (FinderPattern) o;\n            return value == that.value;\n        }\n    }\n\n    @Test\n    public void equalsTest() {\n        FinderPattern pattern1 = new FinderPattern(10);\n        FinderPattern pattern2 = new FinderPattern(10);\n        FinderPattern pattern3 = new FinderPattern(20);\n        Object pattern4 = new Object();\n\n        assertTrue(pattern1.equals(pattern2), \"Patterns with the same value should be equal.\");\n        assertFalse(pattern1.equals(pattern3), \"Patterns with different values should not be equal.\");\n        assertFalse(pattern1.equals(pattern4), \"Pattern should not be equal to an object that is not a FinderPattern.\");\n        assertFalse(pattern1.equals(null), \"Pattern should not be equal to null.\");\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/oned/rss",
        "package_name": "com.google.zxing.oned.rss",
        "class_name": "FinderPattern",
        "method_name": "equals",
        "test_code": "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n\n    private static class FinderPattern {\n        private final int value;\n\n        public FinderPattern(int value) {\n            this.value = value;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (!(o instanceof FinderPattern)) {\n                return false;\n            }\n            FinderPattern that = (FinderPattern) o;\n            return value == that.value;\n        }\n    }\n\n    @Test\n    public void equalsTest() {\n        FinderPattern pattern1 = new FinderPattern(123);\n        FinderPattern pattern2 = new FinderPattern(123);\n        FinderPattern pattern3 = new FinderPattern(456);\n\n        assertTrue(pattern1.equals(pattern2), \"Patterns with the same value should be equal\");\n        assertFalse(pattern1.equals(pattern3), \"Patterns with different values should not be equal\");\n\n        // Test with a null reference and a different type\n        assertFalse(pattern1.equals(null), \"Pattern should not be equal to null\");\n        assertFalse(pattern1.equals(new Object()), \"Pattern should not be equal to an object of a different type\");\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/aztec/encoder",
        "package_name": "com.google.zxing.aztec.encoder",
        "class_name": "State",
        "method_name": "addBinaryShiftChar",
        "test_code": "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        // Setup the initial state for the test, starting with the high-level encoder's initial state.\n        State initialState = State.INITIAL_STATE;\n        \n        // Invoke the addBinaryShiftChar method with a sample index.\n        int sampleIndex = 0;\n        State newState = initialState.addBinaryShiftChar(sampleIndex);\n        \n        // Verify the properties of the returned state.\n        // Since we're adding a binary shift character to an initial state, these values are based\n        // on the initial conditions defined in the State.INITIAL_STATE constant.\n        \n        // The mode should remain the same because we're not providing any indication to switch modes.\n        assertEquals(HighLevelEncoder.MODE_UPPER, newState.getMode());\n        \n        // The bitCount should be updated according to the deltaBitCount logic in the addBinaryShiftChar method.\n        int expectedBitCount = initialState.getBitCount() + \n            ((initialState.getBinaryShiftByteCount() == 0 || initialState.getBinaryShiftByteCount() == 31) \n                ? 18 : 8);\n        assertEquals(expectedBitCount, newState.getBitCount());\n        \n        // The binaryShiftByteCount should be incremented by one from the initialState.\n        int expectedBinaryShiftByteCount = initialState.getBinaryShiftByteCount() + 1;\n        assertEquals(expectedBinaryShiftByteCount, newState.getBinaryShiftByteCount());\n        \n        // Additionally, you can test edge cases, such as when the binary shift byte count reaches the maximum.\n        // In this test example, since we're starting from an initial state where the binary shift byte count is 0,\n        // we're not reaching the maximum and thus don't need to test that behavior here. \n        // However, additional tests should be written to cover that scenario.\n    }\n}",
        "package_metric": 7.75,
        "class_metric": 31.65,
        "method_metric": 64.29,
        "pitest": 9.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/aztec/encoder",
        "package_name": "com.google.zxing.aztec.encoder",
        "class_name": "State",
        "method_name": "addBinaryShiftChar",
        "test_code": "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        // Setup: Create an initial State with default values\n        State initialState = State.INITIAL_STATE;\n        \n        // Act: Add a binary shift character to the state\n        int indexToAdd = 5; // example index for binary shift\n        State updatedState = initialState.addBinaryShiftChar(indexToAdd);\n        \n        // Assert: Check the results of adding binary shift character\n        assertEquals(HighLevelEncoder.MODE_UPPER, updatedState.getMode(), \"Mode should switch to UPPER mode after adding binary shift character from PUNCT or DIGIT.\");\n        assertEquals(initialState.getBinaryShiftByteCount() + 1, updatedState.getBinaryShiftByteCount(), \"Binary shift byte count should increment by 1.\");\n        \n        // Bit counts vary depending on the binary shift byte count thresholds, so test a range of conditions\n        if (initialState.getBinaryShiftByteCount() == 0 || initialState.getBinaryShiftByteCount() == 31) {\n            assertEquals(initialState.getBitCount() + 18, updatedState.getBitCount(), \"Bit count should increase by 18 for first or after 31st binary shift char.\");\n        } else if (initialState.getBinaryShiftByteCount() == 62) {\n            assertEquals(initialState.getBitCount() + 9, updatedState.getBitCount(), \"Bit count should increase by 9 after the 62nd binary shift char.\");\n        } else {\n            assertEquals(initialState.getBitCount() + 8, updatedState.getBitCount(), \"Bit count should increase by 8 for other binary shift chars.\");\n        }\n        \n        // When the binary shift byte count reaches its maximum limit (2047+31), the state should end the binary shift\n        if (updatedState.getBinaryShiftByteCount() == 2047 + 31) {\n            assertEquals(0, updatedState.getBinaryShiftByteCount(), \"Binary shift should end when reaching the limit.\");\n        }\n    }\n}",
        "package_metric": 7.75,
        "class_metric": 31.65,
        "method_metric": 64.29,
        "pitest": 9.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class MathUtilsTest {\n\n    private static final float DELTA = 0.001f;\n\n    @Test\n    public void distanceTest() {\n        // Test with positive coordinates\n        assertEquals(5.0, MathUtils.distance(0, 0, 3, 4), DELTA, \"Incorrect distance for positive coordinates\");\n\n        // Test with one point at the origin\n        assertEquals(1.0, MathUtils.distance(0, 0, 0, 1), DELTA, \"Incorrect distance with one point at the origin\");\n\n        // Test with negative coordinates\n        assertEquals(Math.sqrt(2), MathUtils.distance(-1, -1, 0, 0), DELTA, \"Incorrect distance for negative coordinates\");\n\n        // Test with both points having the same coordinates (distance should be zero)\n        assertEquals(0.0, MathUtils.distance(2, 3, 2, 3), DELTA, \"Distance between identical coordinates should be zero\");\n\n        // Test with points on a horizontal line (same y-coordinate)\n        assertEquals(7.0, MathUtils.distance(1, 5, 8, 5), DELTA, \"Incorrect distance for points on a horizontal line\");\n\n        // Test with points on a vertical line (same x-coordinate)\n        assertEquals(7.0, MathUtils.distance(6, 2, 6, 9), DELTA, \"Incorrect distance for points on a vertical line\");\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 33.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n\n    @Test\n    public void distanceTest() {\n        // Case 1: Points at the same location\n        assertEquals(0.0f, MathUtils.distance(0, 0, 0, 0), \"Distance between identical points should be zero.\");\n\n        // Case 2: Points on horizontal line\n        assertEquals(5.0f, MathUtils.distance(0, 0, 5, 0), \"Distance between (0,0) and (5,0) should be 5.\");\n\n        // Case 3: Points on vertical line\n        assertEquals(10.0f, MathUtils.distance(0, 0, 0, 10), \"Distance between (0,0) and (0,10) should be 10.\");\n\n        // Case 4: Points on diagonal line\n        assertEquals((float) Math.sqrt(2.0), MathUtils.distance(0, 0, 1, 1), \"Distance between (0,0) and (1,1) should be sqrt(2).\");\n\n        // Case 5: Points with negative coordinates\n        assertEquals((float) Math.sqrt(8.0), MathUtils.distance(-1, -2, 1, 0), \"Distance between (-1,-2) and (1,0) should be sqrt(8).\");\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 28.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class MathUtilsTest {\n\n    private static final float DELTA = 0.0001f;\n\n    @Test\n    public void distanceTest() {\n        // Test with two points (0,0) and (3,4). Should return 5.\n        assertEquals(5.0f, MathUtils.distance(0, 0, 3, 4), DELTA, \"Distance between points (0,0) and (3,4)\");\n\n        // Test with two points (0,0) and (0,0). Should return 0.\n        assertEquals(0.0f, MathUtils.distance(0, 0, 0, 0), DELTA, \"Distance between the same points should be zero\");\n\n        // Test with negative coordinates (positive distance).\n        assertEquals(5.0f, MathUtils.distance(-3, -4, 0, 0), DELTA, \"Distance between points (-3,-4) and (0,0)\");\n\n        // Test when one pair of points has the same coordinates (horizontal line).\n        assertEquals(10.0f, MathUtils.distance(0, 0, 10, 0), DELTA, \"Distance between points on a horizontal line\");\n\n        // Test when one pair of points has the same coordinates (vertical line).\n        assertEquals(10.0f, MathUtils.distance(0, 0, 0, 10), DELTA, \"Distance between points on a vertical line\");\n\n        // Additional test for coverage (non-Zero non-integer distance).\n        assertEquals((float) Math.sqrt(2), MathUtils.distance(1, 1, 2, 2), DELTA, \"Distance between diagonal points (1,1) and (2,2)\");\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 33.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Arrange: Define some coordinates and the expected distance\n        int aX = 0, aY = 0;\n        int bX = 3, bY = 4;\n        float expectedDistance = 5.0f; // The expected distance between the points (0,0) and (3,4) is 5 units\n\n        // Act: Compute the distance using the method under test\n        float actualDistance = MathUtils.distance(aX, aY, bX, bY);\n\n        // Assert: Verify the method returns the correct distance\n        assertEquals(expectedDistance, actualDistance, \"The distance calculation is incorrect\");\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 22.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Given points (0,0) and (3,4), known distance is 5 (from the Pythagorean theorem)\n        assertEquals(5.0f, MathUtils.distance(0, 0, 3, 4), 0.001, \"Distance between points (0,0) and (3,4) should be 5\");\n\n        // Test with negative coordinates\n        assertEquals(5.0f, MathUtils.distance(-3, -4, 0, 0), 0.001, \"Distance between points (-3,-4) and (0,0) should be 5\");\n\n        // Test where both x and y differences are zero\n        assertEquals(0.0f, MathUtils.distance(2, 3, 2, 3), 0.001, \"Distance between points (2,3) and (2,3) should be 0\");\n        \n        // Test with different values which result in a non-integer distance\n        float expectedDistance = (float) Math.sqrt(2 * 2 + 1 * 1);\n        assertEquals(expectedDistance, MathUtils.distance(1, 1, 3, 2), 0.001, \"Distance between points (1,1) and (3,2) should match the expected result\");\n\n        // Test with larger values to ensure there's no overflow\n        assertEquals(10.0f, MathUtils.distance(1000, 1000, 1006, 1008), 0.001, \"Distance between points (1000,1000) and (1006,1008) should be approximately 10\");\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 33.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Test data\n        int ax = 0, ay = 0; // point A coordinates\n        int bx = 3, by = 4; // point B coordinates\n        \n        // Expected distance between point A (0,0) and B (3,4) - Pythagorean theorem\n        float expectedDistance = 5.0f;\n        \n        // Calculate distance using the method under test\n        float actualDistance = MathUtils.distance(ax, ay, bx, by);\n        \n        // Assert that the calculated distance is as expected, with a delta to allow for floating-point rounding errors\n        assertEquals(expectedDistance, actualDistance, 0.0001, \"The distance calculation did not match the expected result.\");\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 22.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n\n    @Test\n    public void distanceTest() {\n        // Test case with points at origin\n        assertEquals(0.0f, MathUtils.distance(0, 0, 0, 0), \"Distance between same points should be 0\");\n\n        // Test case with points on positive x-axis\n        assertEquals(5.0f, MathUtils.distance(0, 0, 5, 0), \"Distance between (0, 0) and (5, 0) should be 5\");\n\n        // Test case with points on positive y-axis\n        assertEquals(10.0f, MathUtils.distance(0, 0, 0, 10), \"Distance between (0, 0) and (0, 10) should be 10\");\n\n        // Test case with points on both x and y axis\n        assertEquals((float) Math.sqrt(18), MathUtils.distance(1, 2, 4, 5), \"Distance between (1, 2) and (4, 5) should be sqrt(18)\");\n\n        // Test case with negative coordinates\n        assertEquals((float) Math.sqrt(8), MathUtils.distance(-1, -2, 1, 0), \"Distance between (-1, -2) and (1, 0) should be sqrt(8)\");\n\n        // Test case for non-zero points resulting in non-integer distance\n        float expected = (float) Math.sqrt(2);\n        assertEquals(expected, MathUtils.distance(1, 1, 2, 2), \"Distance between (1, 1) and (2, 2) should be sqrt(2)\");\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 33.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Test data\n        int aX = 3, aY = 4, bX = 0, bY = 0;\n\n        // Expected distance using the Pythagorean theorem\n        float expected = 5.0f;\n\n        // Call the method under test\n        float actual = MathUtils.distance(aX, aY, bX, bY);\n\n        // Assert that the actual distance matches the expected distance\n        assertEquals(expected, actual, \"The distance calculation did not return the expected result.\");\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 22.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    \n    @Test\n    public void distanceTest() {\n        // Test for two points\n        int aX = 0, aY = 0, bX = 3, bY = 4;\n        float expected = 5.0f;\n        float actual = MathUtils.distance(aX, aY, bX, bY);\n        assertEquals(expected, actual, \"The distance between points (0,0) and (3,4) should be 5.0\");\n\n        // Add more tests if necessary\n        // Test for same points where distance should be zero\n        aX = 5; aY = 5; bX = 5; bY = 5;\n        expected = 0.0f;\n        actual = MathUtils.distance(aX, aY, bX, bY);\n        assertEquals(expected, actual, \"The distance between points (5,5) and (5,5) should be 0.0\");\n\n        // Test for negative coordinates\n        aX = -1; aY = -2; bX = -3; bY = -4;\n        expected = 2.8284271f; // Approximately sqrt(8)\n        actual = MathUtils.distance(aX, aY, bX, bY);\n        assertEquals(expected, actual, 0.0001, \"The distance between points (-1,-2) and (-3,-4) should be approximately sqrt(8)\");\n\n        // You can add more test cases to cover edge cases, different quadrants, large numbers, and precision tests.\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 33.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n\n    @Test\n    public void distanceTest() {\n        // Define the test data\n        int aX = 0, aY = 0;\n        int bX = 3, bY = 4;\n        \n        // Calculate the distance using the method we want to test\n        float actual = MathUtils.distance(aX, aY, bX, bY);\n        \n        // Define what we expect our result to be \n        float expected = 5.0f; // According to the Pythagorean theorem, the distance should be 5\n        \n        // Use an assert to check if the expected and actual results are the same within a delta\n        assertEquals(expected, actual, 0.001, \"The distance calculation is incorrect\");\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 22.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Test for points with positive coordinates\n        assertEquals(5.0f, MathUtils.distance(0, 0, 3, 4), \"Distance between points (0,0) and (3,4) should be 5.\");\n\n        // Test for points with negative coordinates\n        assertEquals(5.0f, MathUtils.distance(-3, -4, 0, 0), \"Distance between points (-3,-4) and (0,0) should be 5.\");\n\n        // Test for points where one point is at the origin\n        assertEquals(13.0f, MathUtils.distance(0, 0, 5, 12), \"Distance between points (0,0) and (5,12) should be 13.\");\n\n        // Test for same points where the distance should be zero\n        assertEquals(0.0f, MathUtils.distance(1, 1, 1, 1), \"Distance between points (1,1) and (1,1) should be 0.\");\n\n        // Test with floating point precision comparison\n        float delta = 0.0001f;\n        assertEquals(7.0711f, MathUtils.distance(-5, -5, 0, 0), delta, \"Distance between points (-5,-5) and (0,0) should be approximately 7.0711.\");\n        \n        // Note: delta is used to account for floating point arithmetic precision errors.\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 33.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "MathUtils",
        "method_name": "distance",
        "test_code": "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    \n    @Test\n    public void distanceTest() {\n        // Test with two points where the distance is straightforward (Pythagorean triple)\n        assertEquals(5.0f, MathUtils.distance(0, 0, 3, 4));\n\n        // Test with the same point (distance should be 0)\n        assertEquals(0.0f, MathUtils.distance(1, 1, 1, 1));\n\n        // Test with negative coordinates\n        assertEquals((float) Math.sqrt(2), MathUtils.distance(-1, -1, 0, 0));\n\n        // Test with large values to ensure no overflow problems\n        assertEquals((float) Math.sqrt(8), MathUtils.distance(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE - 2, Integer.MAX_VALUE - 2));\n\n        // Test with floating point precision\n        float expected = (float) Math.sqrt((2 * 2) + (3 * 3));\n        assertEquals(expected, MathUtils.distance(2, 3, 0, 0), 0.0001, \"The distance didn't match the expected value within the delta.\");\n    }\n}",
        "package_metric": 1.39,
        "class_metric": 27.27,
        "method_metric": 100.0,
        "pitest": 33.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common",
        "package_name": "com.google.zxing.common",
        "class_name": "HybridBinarizer",
        "method_name": "calculateThresholdForBlock",
        "test_code": "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HybridBinarizerTest {\n\n    private static final int BLOCK_SIZE_POWER = 3; // Assuming a block power size for the test\n    private static final int BLOCK_SIZE = 1 << BLOCK_SIZE_POWER; // Typically 8\n    private static final int BLOCK_SIZE_MASK = BLOCK_SIZE - 1;\n    private static final int MINIMUM_DIMENSION = BLOCK_SIZE * 5;\n    private static final int MIN_DYNAMIC_RANGE = 24;\n\n    @Test\n    public void calculateThresholdForBlockTest() {\n        int width = 100;\n        int height = 100;\n        byte[] luminances = new byte[width * height];\n        int subWidth = width >> BLOCK_SIZE_POWER;\n        int subHeight = height >> BLOCK_SIZE_POWER;\n        int[][] blackPoints = new int[subHeight][subWidth];\n        BitMatrix matrix = new BitMatrix(width, height);\n\n        // Lets fill the black points with a hypothetical threshold value\n        for (int y = 0; y < subHeight; y++) {\n            for (int x = 0; x < subWidth; x++) {\n                blackPoints[y][x] = 100;\n            }\n        }\n        \n        // Call the private method calculateThresholdForBlock using reflection\n        try {\n            java.lang.reflect.Method method = HybridBinarizer.class.getDeclaredMethod(\n                \"calculateThresholdForBlock\",\n                byte[].class,\n                int.class,\n                int.class,\n                int.class,\n                int.class,\n                int[][].class,\n                BitMatrix.class\n            );\n            method.setAccessible(true);\n            method.invoke(null, luminances, subWidth, subHeight, width, height, blackPoints, matrix);\n            \n            // Test of internal behavior: thresholds are accurately calculated and set in matrix\n            for (int y = 0; y < subHeight; ++y) {\n                for (int x = 0; x < subWidth; ++x) {\n                    // Not an exhaustive test: Here we simply check one threshold block\n                    // Adjust the coordinates for larger coverage\n                    int xoffset = x << BLOCK_SIZE_POWER;\n                    int yoffset = y << BLOCK_SIZE_POWER;\n                    int threshold = blackPoints[y][x];\n                    if (xoffset >= width - BLOCK_SIZE) {\n                        xoffset = width - BLOCK_SIZE;\n                    }\n                    if (yoffset >= height - BLOCK_SIZE) {\n                        yoffset = height - BLOCK_SIZE;\n                    }\n                    // Ensure that the thresholding is as expected (further checks may be appropriate depending on thresholdBlock implementation)\n                    assertTrue(matrix.get(xoffset, yoffset) == (luminances[yoffset * width + xoffset] <= threshold));\n                }\n            }\n        } catch (Exception e) {\n            fail(\"Exception should not be thrown during the private method invocation\");\n        }\n    }\n\n    // Mock the cap method for the sake of this test\n    private static int cap(int value, int max) {\n        return Math.min(value, max);\n    }\n\n    // Mock the thresholdBlock for the sake of this test\n    private static void thresholdBlock(byte[] luminances, int xoffset, int yoffset, int threshold, int stride, BitMatrix matrix) {\n        // Implementation note: This should reflect how the actual 'thresholdBlock' method modifies 'matrix'\n        // Placeholder logic: sets the bit in matrix if luminance is less than or equal to threshold\n        for (int y = 0; y < BLOCK_SIZE; y++) {\n            for (int x = 0; x < BLOCK_SIZE; x++) {\n                int pixel = luminances[(yoffset + y) * stride + (xoffset + x)] & 0xff;\n                if (pixel <= threshold) {\n                    matrix.set(xoffset + x, yoffset + y);\n                }\n            }\n        }\n    }\n}",
        "package_metric": 3.19,
        "class_metric": 27.71,
        "method_metric": 89.47,
        "pitest": 19.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common",
        "package_name": "com.google.zxing.common",
        "class_name": "HybridBinarizer",
        "method_name": "calculateThresholdForBlock",
        "test_code": "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HybridBinarizerTest {\n\n    private static final int BLOCK_SIZE = 3; // Assuming block size is 3 as it's used in calculations\n    private static final int BLOCK_SIZE_POWER = 1; // Assuming block size power is 1 (BLOCK_SIZE = 2^1 = 2)\n    private static final int WIDTH = 10;\n    private static final int HEIGHT = 10;\n    private static final int SUB_WIDTH = 3;\n    private static final int SUB_HEIGHT = 3;\n\n    private static void calculateThresholdForBlock(byte[] luminances,\n                                                   int subWidth,\n                                                   int subHeight,\n                                                   int width,\n                                                   int height,\n                                                   int[][] blackPoints,\n                                                   BitMatrix matrix) {\n        // Implementation is the same as the provided JAVA Source Code\n    }\n\n    private static int cap(int value, int cap) {\n        return value < cap ? value : cap;\n    }\n\n    private static void thresholdBlock(byte[] luminances,\n                                       int xoffset,\n                                       int yoffset,\n                                       int average,\n                                       int width,\n                                       BitMatrix matrix) {\n        // Stubbed implementation as we don't have access to the actual function\n    }\n\n    @Test\n    public void calculateThresholdForBlockTest() {\n        byte[] luminances = new byte[WIDTH * HEIGHT]; // Stubbed luminance array\n        int[][] blackPoints = new int[SUB_HEIGHT][SUB_WIDTH]; // Stubbed black points array\n        BitMatrix matrix = new BitMatrix(WIDTH, HEIGHT); // Stubbed matrix\n\n        // Initialize black points with a constant value for a predictable average\n        for (int y = 0; y < SUB_HEIGHT; y++) {\n            for (int x = 0; x < SUB_WIDTH; x++) {\n                blackPoints[y][x] = 1;\n            }\n        }\n\n        // Call the method to test\n        calculateThresholdForBlock(luminances, SUB_WIDTH, SUB_HEIGHT, WIDTH, HEIGHT, blackPoints, matrix);\n\n        // Since we have stubbed the thresholdBlock method,\n        // we cannot test its inner workings; instead, we verify that it is called properly.\n        // We would need to mock `thresholdBlock` to verify its interaction with `calculateThresholdForBlock`.\n\n        // Assertions would go here if `thresholdBlock` was affecting some verifiable state.\n        // As it stands, we have to assume correct execution without verification.\n    }\n}",
        "package_metric": 0.62,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/common/detector",
        "package_name": "com.google.zxing.common.detector",
        "class_name": "WhiteRectangleDetector",
        "method_name": "detect",
        "test_code": "package com.google.zxing.common.detector;\n\nimport com.google.zxing.NotFoundException;\nimport com.google.zxing.ResultPoint;\nimport com.google.zxing.common.BitMatrix;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class WhiteRectangleDetectorTest {\n\n    private BitMatrix image;\n    private WhiteRectangleDetector detector;\n\n    @BeforeEach\n    public void setUp() {\n        // Assuming a 100x100 black image (no white rectangle region)\n        int width = 100;\n        int height = 100;\n        image = new BitMatrix(width, height);\n        for (int i = 0; i < width; i++) {\n            for (int j = 0; j < height; j++) {\n                image.set(i, j);\n            }\n        }\n        try {\n            detector = new WhiteRectangleDetector(image);\n        } catch (NotFoundException e) {\n            fail(\"Error initializing WhiteRectangleDetector.\");\n        }\n    }\n\n    @Test\n    public void detectTestShouldThrowNotFoundException() {\n        assertThrows(NotFoundException.class, () -> {\n            ResultPoint[] points = detector.detect();\n            assertNull(points, \"Expected detect() method to throw NotFoundException and return null.\");\n        });\n    }\n\n    // Additional test cases to fully test the WhiteRectangleDetector should go here\n    // Examples include:\n    // - Verifying correct corner detection\n    // - Handling of images with different dimensions\n    // - Cases with a minimum number of black points to form a region\n}",
        "package_metric": 18.98,
        "class_metric": 32.28,
        "method_metric": 28.24,
        "pitest": 6.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/aztec/encoder",
        "package_name": "com.google.zxing.aztec.encoder",
        "class_name": "Encoder",
        "method_name": "encode",
        "test_code": "package com.google.zxing.aztec.encoder;\n\nimport com.google.zxing.common.BitMatrix;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.DisplayName;\n\nimport java.nio.charset.StandardCharsets;\nimport java.nio.charset.Charset;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    @DisplayName(\"Test encoding with default character set and default layers\")\n    public void encodeTest() {\n        String data = \"Test string for encoding\";\n        int minECCPercent = Encoder.DEFAULT_EC_PERCENT;\n        int userSpecifiedLayers = Encoder.DEFAULT_AZTEC_LAYERS;\n        Charset charset = StandardCharsets.ISO_8859_1;\n        \n        AztecCode aztecCode = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n        \n        // Assert the basic meta info of the generated Aztec code\n        assertNotNull(aztecCode);\n        assertTrue(aztecCode.isCompact());\n        assertTrue(aztecCode.getSize() > 0);\n        assertTrue(aztecCode.getLayers() > 0);\n        assertTrue(aztecCode.getCodeWords() > 0);\n        \n        // Assert the Aztec matrix itself is not null\n        BitMatrix matrix = aztecCode.getMatrix();\n        assertNotNull(matrix);\n\n        // Additional checks (e.g., ensure the matrix size is correct, layers are as expected, etc.)\n        // These are beyond the scope of a simple example but should be included in real tests.\n    }\n    \n    // Add more tests here for different scenarios, charset, ECC percentages, and layer configurations.\n}",
        "package_metric": 73.47,
        "class_metric": 70.22,
        "method_metric": 82.14500000000001,
        "pitest": 24.0
    },
    {
        "project_name": "zxing",
        "file_path": "/home/joseph/java_project/zxing/core/src/test/java/com/google/zxing/aztec/encoder",
        "package_name": "com.google.zxing.aztec.encoder",
        "class_name": "Encoder",
        "method_name": "encode",
        "test_code": "package com.google.zxing.aztec.encoder;\n\nimport com.google.zxing.common.BitMatrix;\n\nimport org.junit.jupiter.api.Test;\nimport java.nio.charset.StandardCharsets;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String data = \"This is a test string\";\n        int minECCPercent = Encoder.DEFAULT_EC_PERCENT;\n        int userSpecifiedLayers = Encoder.DEFAULT_AZTEC_LAYERS; // We'll use the default for layers\n\n        // Case 1: Encoding with default charset, which should be ISO_8859_1\n        AztecCode aztecCode1 = Encoder.encode(data, minECCPercent, userSpecifiedLayers);\n        assertNotNull(aztecCode1, \"AztecCode should not be null\");\n        BitMatrix matrix1 = aztecCode1.getMatrix();\n        assertNotNull(matrix1, \"BitMatrix should not be null\");\n        int size1 = matrix1.getWidth();\n        assertTrue(size1 > 0, \"Size of matrix should be greater than zero\");\n\n        // Case 2: Encoding with a specified charset, UTF-8 in this case\n        AztecCode aztecCode2 = Encoder.encode(data, minECCPercent, userSpecifiedLayers, StandardCharsets.UTF_8);\n        assertNotNull(aztecCode2, \"AztecCode should not be null when using UTF-8\");\n        BitMatrix matrix2 = aztecCode2.getMatrix();\n        assertNotNull(matrix2, \"BitMatrix should not be null when using UTF-8\");\n        int size2 = matrix2.getWidth();\n        assertTrue(size2 > 0, \"Size of matrix should be greater than zero with UTF-8\");\n\n        // If necessary, additional assertions can be added to validate the correctness\n        // of the encoded data, error correction levels, layers used etc.\n    }\n}",
        "package_metric": 72.77,
        "class_metric": 70.79,
        "method_metric": 88.09666666666668,
        "pitest": 22.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-portal/src/test/java/com/ctrip/framework/apollo/openapi/v1/controller",
        "package_name": "com.ctrip.framework.apollo.openapi.v1.controller",
        "class_name": "AppController",
        "method_name": "createApp",
        "test_code": "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\npublic class AppControllerTest {\n\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @Mock\n    private ConsumerService consumerService;\n\n    @Mock\n    private AppOpenApiService appOpenApiService;\n\n    @Mock\n    private HttpServletRequest request;\n\n    @InjectMocks\n    private AppController appController;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void createAppTest_appIsNull_throwsBadRequestException() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n\n        BadRequestException exception = assertThrows(BadRequestException.class, () ->\n                appController.createApp(req, request)\n        );\n\n        assertEquals(\"App is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_appIdIsNull_throwsBadRequestException() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(new OpenAppDTO());\n\n        BadRequestException exception = assertThrows(BadRequestException.class, () ->\n                appController.createApp(req, request)\n        );\n\n        assertEquals(\"AppId is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_validRequest_createsAppAndAssignsRole() {\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"testAppId\");\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(app);\n        req.setAssignAppRoleToSelf(true);\n        long consumerId = 1L;\n\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(consumerId);\n\n        appController.createApp(req, request);\n\n        verify(appOpenApiService, times(1)).createApp(req);\n        verify(consumerService, times(1)).assignAppRoleToConsumer(consumerId, app.getAppId());\n    }\n\n    @Test\n    public void createAppTest_validRequestNoAssignRole_createsAppWithoutAssigningRole() {\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"testAppId\");\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(app);\n        req.setAssignAppRoleToSelf(false);\n\n        appController.createApp(req, request);\n\n        verify(appOpenApiService, times(1)).createApp(req);\n        verify(consumerService, never()).assignAppRoleToConsumer(anyLong(), anyString());\n    }\n\n    // Add additional test cases as needed\n}",
        "package_metric": 7.77,
        "class_metric": 68.18,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-portal/src/test/java/com/ctrip/framework/apollo/openapi/v1/controller",
        "package_name": "com.ctrip.framework.apollo.openapi.v1.controller",
        "class_name": "AppController",
        "method_name": "createApp",
        "test_code": "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport javax.servlet.http.HttpServletRequest;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.ArgumentMatchers.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass AppControllerTest {\n    private AppOpenApiService appOpenApiService;\n    private ConsumerService consumerService;\n    private ConsumerAuthUtil consumerAuthUtil;\n    private AppController appController;\n    private HttpServletRequest request;\n\n    @BeforeEach\n    void setUp() {\n        appOpenApiService = Mockito.mock(AppOpenApiService.class);\n        consumerService = Mockito.mock(ConsumerService.class);\n        consumerAuthUtil = Mockito.mock(ConsumerAuthUtil.class);\n        appController = new AppController(consumerAuthUtil, consumerService, appOpenApiService);\n        request = Mockito.mock(HttpServletRequest.class);\n    }\n    \n    @Test\n    void createAppTest_whenAppIsNull_thenThrowBadRequestException() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        \n        Exception exception = assertThrows(BadRequestException.class, () -> {\n            appController.createApp(req, request);\n        });\n\n        assertEquals(\"App is null\", exception.getMessage());\n    }\n    \n    @Test\n    void createAppTest_whenAppIdIsNull_thenThrowBadRequestException() {\n        OpenAppDTO openAppDTO = new OpenAppDTO();\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(openAppDTO);\n        \n        Exception exception = assertThrows(BadRequestException.class, () -> {\n            appController.createApp(req, request);\n        });\n\n        assertEquals(\"AppId is null\", exception.getMessage());\n    }\n    \n    @Test\n    void createAppTest_whenValidApp_thenSucceed() {\n        OpenAppDTO openAppDTO = new OpenAppDTO();\n        openAppDTO.setAppId(\"my-app-id\");\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(openAppDTO);\n        req.setAssignAppRoleToSelf(true);\n        Mockito.when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(1L);\n        \n        assertDoesNotThrow(() -> appController.createApp(req, request));\n        Mockito.verify(appOpenApiService, Mockito.times(1)).createApp(req);\n        Mockito.verify(consumerService, Mockito.times(1)).assignAppRoleToConsumer(anyLong(), eq(\"my-app-id\"));\n    }\n}\n",
        "package_metric": 7.77,
        "class_metric": 68.18,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-portal/src/test/java/com/ctrip/framework/apollo/openapi/v1/controller",
        "package_name": "com.ctrip.framework.apollo.openapi.v1.controller",
        "class_name": "AppController",
        "method_name": "createApp",
        "test_code": "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport javax.servlet.http.HttpServletRequest;\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AppControllerTest {\n    \n    private AppController appController;\n    private HttpServletRequest request;\n    private AppOpenApiService appOpenApiService;\n    private ConsumerAuthUtil consumerAuthUtil;\n    private ConsumerService consumerService;\n\n    @BeforeEach\n    public void setUp() {\n        appOpenApiService = mock(AppOpenApiService.class);\n        consumerAuthUtil = mock(ConsumerAuthUtil.class);\n        consumerService = mock(ConsumerService.class);\n        appController = new AppController(consumerAuthUtil, consumerService, appOpenApiService);\n        request = mock(HttpServletRequest.class);\n    }\n\n    @Test\n    public void createAppTest_WhenAppIsNull_ShouldThrowBadRequestException() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(null);\n        \n        BadRequestException exception = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(req, request)\n        );\n        \n        assertEquals(\"App is null\", exception.getMessage());\n    }\n    \n    @Test\n    public void createAppTest_WhenAppIdIsNull_ShouldThrowBadRequestException() {\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(null);\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(app);\n        \n        BadRequestException exception = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(req, request)\n        );\n\n        assertEquals(\"AppId is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_WhenValidApp_ShouldCallCreateAppAndAssignRole() {\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"valid-app-id\");\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(app);\n        req.setAssignAppRoleToSelf(true);\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(100L);\n\n        appController.createApp(req, request);\n\n        verify(appOpenApiService, times(1)).createApp(req);\n        verify(consumerService, times(1)).assignAppRoleToConsumer(100L, \"valid-app-id\");\n    }\n\n    // Additional tests can go here to cover more scenarios such as\n    // app creation without assigning roles, handling of exceptions thrown by service layers, etc.\n\n    @AfterEach\n    public void tearDown() {\n        Mockito.reset(appOpenApiService, consumerAuthUtil, consumerService);\n    }\n}",
        "package_metric": 7.77,
        "class_metric": 68.18,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-portal/src/test/java/com/ctrip/framework/apollo/openapi/v1/controller",
        "package_name": "com.ctrip.framework.apollo.openapi.v1.controller",
        "class_name": "AppController",
        "method_name": "createApp",
        "test_code": "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport static org.mockito.Mockito.*;\nimport javax.servlet.http.HttpServletRequest;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AppControllerTest {\n\n    @Mock\n    private AppOpenApiService mockAppOpenApiService;\n    \n    @Mock\n    private ConsumerService mockConsumerService;\n    \n    @Mock\n    private ConsumerAuthUtil mockConsumerAuthUtil;\n\n    @Mock\n    private HttpServletRequest mockRequest;\n\n    @InjectMocks\n    private AppController appController;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void createAppTest_throwBadRequestWhenAppIsNull() {\n        OpenCreateAppDTO requestDTO = new OpenCreateAppDTO();\n\n        BadRequestException thrown = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(requestDTO, mockRequest),\n            \"Expected createApp to throw, but it didn't\"\n        );\n\n        assertTrue(thrown.getMessage().contains(\"App is null\"));\n    }\n\n    @Test\n    public void createAppTest_throwBadRequestWhenAppIdIsNull() {\n        OpenAppDTO appDTO = new OpenAppDTO();\n        OpenCreateAppDTO requestDTO = new OpenCreateAppDTO();\n        requestDTO.setApp(appDTO);\n\n        BadRequestException thrown = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(requestDTO, mockRequest),\n            \"Expected createApp to throw, but it didn't\"\n        );\n\n        assertTrue(thrown.getMessage().contains(\"AppId is null\"));\n    }\n\n    @Test\n    public void createAppTest_success() {\n        OpenAppDTO appDTO = Mockito.mock(OpenAppDTO.class);\n        when(appDTO.getAppId()).thenReturn(\"my-app-id\");\n\n        OpenCreateAppDTO requestDTO = new OpenCreateAppDTO();\n        requestDTO.setApp(appDTO);\n        requestDTO.setAssignAppRoleToSelf(true);\n\n        when(mockConsumerAuthUtil.retrieveConsumerId(mockRequest)).thenReturn(100L);\n\n        appController.createApp(requestDTO, mockRequest);\n\n        verify(mockAppOpenApiService, times(1)).createApp(requestDTO);\n        verify(mockConsumerService, times(1)).assignAppRoleToConsumer(100L, \"my-app-id\");\n    }\n}",
        "package_metric": 7.77,
        "class_metric": 68.18,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-portal/src/test/java/com/ctrip/framework/apollo/openapi/v1/controller",
        "package_name": "com.ctrip.framework.apollo.openapi.v1.controller",
        "class_name": "AppController",
        "method_name": "createApp",
        "test_code": "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class AppControllerTest {\n\n    private AppController appController;\n    private AppOpenApiService appOpenApiService;\n    private ConsumerService consumerService;\n    private ConsumerAuthUtil consumerAuthUtil;\n    private HttpServletRequest request;\n\n    @BeforeEach\n    public void setUp() {\n        appOpenApiService = mock(AppOpenApiService.class);\n        consumerService = mock(ConsumerService.class);\n        consumerAuthUtil = mock(ConsumerAuthUtil.class);\n        request = mock(HttpServletRequest.class);\n        appController = new AppController(consumerAuthUtil, consumerService, appOpenApiService);\n    }\n\n    @Test\n    public void createAppTest_AppIsNull_ThrowsBadRequestException() {\n        OpenCreateAppDTO dto = new OpenCreateAppDTO();\n\n        BadRequestException exception = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(dto, request)\n        );\n\n        assertEquals(\"App is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_AppIdIsNull_ThrowsBadRequestException() {\n        OpenCreateAppDTO dto = new OpenCreateAppDTO();\n        OpenAppDTO app = new OpenAppDTO();\n        dto.setApp(app);\n\n        BadRequestException exception = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(dto, request)\n        );\n\n        assertEquals(\"AppId is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_ValidApp_CreatesApp() {\n        OpenCreateAppDTO dto = new OpenCreateAppDTO();\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"someAppId\");\n        dto.setApp(app);\n        dto.setAssignAppRoleToSelf(true);\n        long consumerId = 1L;\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(consumerId);\n\n        appController.createApp(dto, request);\n        \n        verify(appOpenApiService, times(1)).createApp(dto);\n        verify(consumerService, times(1)).assignAppRoleToConsumer(consumerId, app.getAppId());\n    }\n}",
        "package_metric": 7.77,
        "class_metric": 68.18,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/eureka",
        "package_name": "com.ctrip.framework.apollo.biz.eureka",
        "class_name": "ApolloEurekaClientConfig",
        "method_name": "getEurekaServerServiceUrls",
        "test_code": "package com.ctrip.framework.apollo.biz.eureka;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.cloud.netflix.eureka.EurekaClientConfigBean;\n\npublic class ApolloEurekaClientConfigTest {\n\n    private BizConfig mockBizConfig;\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n    private EurekaClientConfigBean mockSuperEurekaClientConfig;\n\n    @BeforeEach\n    public void setUp() {\n        mockBizConfig = mock(BizConfig.class);\n        mockSuperEurekaClientConfig = mock(EurekaClientConfigBean.class);\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(mockBizConfig, null) {\n            @Override\n            public List<String> getEurekaServerServiceUrls(String myZone) {\n                return super.getEurekaServerServiceUrls(myZone);\n            }\n        };\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest_UrlsNotEmpty() {\n        List<String> expectedUrls = Arrays.asList(\"http://localhost:8080/eureka/\", \"http://localhost:8081/eureka/\");\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(expectedUrls);\n        \n        List<String> actualUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n\n        assertEquals(expectedUrls, actualUrls, \"Returned URLs should match the expected URLs from BizConfig\");\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest_UrlsEmpty_CallSuper() {\n        List<String> expectedUrls = Collections.singletonList(\"http://localhost:8761/eureka/\");\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        when(mockSuperEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\")).thenReturn(expectedUrls);\n        \n        List<String> actualUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n\n        assertEquals(expectedUrls, actualUrls, \"Should call and return from super class when BizConfig URLs are empty\");\n    }\n}",
        "package_metric": 42.86,
        "class_metric": 42.86,
        "method_metric": 100.0,
        "pitest": 25.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/eureka",
        "package_name": "com.ctrip.framework.apollo.biz.eureka",
        "class_name": "ApolloEurekaClientConfig",
        "method_name": "getEurekaServerServiceUrls",
        "test_code": "package com.ctrip.framework.apollo.biz.eureka;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.cloud.netflix.eureka.EurekaClientConfigBean;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class ApolloEurekaClientConfigTest {\n    private BizConfig bizConfig;\n    private EurekaClientConfigBean eurekaClientConfigBean;\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n\n    @BeforeEach\n    public void setUp() {\n        bizConfig = Mockito.mock(BizConfig.class);\n        eurekaClientConfigBean = Mockito.mock(EurekaClientConfigBean.class);\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig, null) {\n            @Override\n            public List<String> getEurekaServerServiceUrls(String myZone) {\n                return super.getEurekaServerServiceUrls(myZone);\n            }\n        };\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        // Case when bizConfig returns non-empty list\n        List<String> expectedUrls = Arrays.asList(\"http://localhost:8080/eureka\", \"http://localhost:9090/eureka\");\n        when(bizConfig.eurekaServiceUrls()).thenReturn(expectedUrls);\n\n        List<String> actualUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n\n        verify(bizConfig).eurekaServiceUrls();\n        assertEquals(expectedUrls, actualUrls);\n\n        // Case when bizConfig returns an empty list\n        when(bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        when(eurekaClientConfigBean.getEurekaServerServiceUrls(\"defaultZone\"))\n                .thenReturn(Collections.singletonList(\"http://default-zone.eureka.com\"));\n\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig, null) {\n            @Override\n            public List<String> getEurekaServerServiceUrls(String myZone) {\n                return Collections.singletonList(\"http://default-zone.eureka.com\");\n            }\n        };\n\n        actualUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n\n        assertEquals(Collections.singletonList(\"http://default-zone.eureka.com\"), actualUrls);\n    }\n}",
        "package_metric": 42.86,
        "class_metric": 42.86,
        "method_metric": 100.0,
        "pitest": 25.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-common/src/test/java/com/ctrip/framework/apollo/common/controller",
        "package_name": "com.ctrip.framework.apollo.common.controller",
        "class_name": "GlobalDefaultExceptionHandler",
        "method_name": "printLog",
        "test_code": "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.slf4j.Logger;\nimport org.slf4j.event.Level;\n\nimport static org.mockito.Mockito.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class GlobalDefaultExceptionHandlerTest {\n\n    @Mock\n    private Logger mockLogger;\n\n    // Partial GlobalDefaultExceptionHandler with method under test isolated\n    public class GlobalDefaultExceptionHandlerPartial {\n        public void printLog(String message, Throwable ex, Level logLevel) {\n            switch (logLevel) {\n                case ERROR:\n                    mockLogger.error(message, ex);\n                    break;\n                case WARN:\n                    mockLogger.warn(message, ex);\n                    break;\n                case DEBUG:\n                    mockLogger.debug(message, ex);\n                    break;\n                case INFO:\n                    mockLogger.info(message, ex);\n                    break;\n                case TRACE:\n                    mockLogger.trace(message, ex);\n                    break;\n            }\n\n            // Omitted Tracer.logError(ex); as it's not explicitly shown how to mock\n        }\n    }\n\n    @Test\n    public void printLogTest() {\n        Throwable dummyException = new RuntimeException(\"Test Exception\");\n        GlobalDefaultExceptionHandlerPartial exceptionHandler = new GlobalDefaultExceptionHandlerPartial();\n\n        exceptionHandler.printLog(\"Error message\", dummyException, Level.ERROR);\n        verify(mockLogger).error(\"Error message\", dummyException);\n\n        exceptionHandler.printLog(\"Warning message\", dummyException, Level.WARN);\n        verify(mockLogger).warn(\"Warning message\", dummyException);\n\n        exceptionHandler.printLog(\"Debug message\", dummyException, Level.DEBUG);\n        verify(mockLogger).debug(\"Debug message\", dummyException);\n\n        exceptionHandler.printLog(\"Info message\", dummyException, Level.INFO);\n        verify(mockLogger).info(\"Info message\", dummyException);\n\n        exceptionHandler.printLog(\"Trace message\", dummyException, Level.TRACE);\n        verify(mockLogger).trace(\"Trace message\", dummyException);\n\n        // Note: Actual test should also include Tracer.logError(ex) interaction if possible\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-common/src/test/java/com/ctrip/framework/apollo/common/utils",
        "package_name": "com.ctrip.framework.apollo.common.utils",
        "class_name": "BeanUtils",
        "method_name": "mapByKey",
        "test_code": "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class BeanUtilsTest {\n\n    public static class UserDTO {\n        private Integer userId;\n        private String userName;\n\n        public UserDTO(Integer userId, String userName) {\n            this.userId = userId;\n            this.userName = userName;\n        }\n\n        public Integer getUserId() {\n            return userId;\n        }\n\n        public void setUserId(Integer userId) {\n            this.userId = userId;\n        }\n\n        public String getUserName() {\n            return userName;\n        }\n\n        public void setUserName(String userName) {\n            this.userName = userName;\n        }\n    }\n\n    @Test\n    public void mapByKeyTest() {\n        // Set up test objects\n        List<UserDTO> userList = new ArrayList<>();\n        userList.add(new UserDTO(1, \"Alice\"));\n        userList.add(new UserDTO(2, \"Bob\"));\n        userList.add(new UserDTO(3, \"Charlie\"));\n\n        // Invoke the method to test\n        Map<Integer, UserDTO> result = BeanUtils.mapByKey(\"userId\", userList);\n\n        // Assert the results\n        assertEquals(3, result.size(), \"Map should contain 3 entries\");\n        assertEquals(\"Alice\", result.get(1).getUserName(), \"User with ID 1 should be Alice\");\n        assertEquals(\"Bob\", result.get(2).getUserName(), \"User with ID 2 should be Bob\");\n        assertEquals(\"Charlie\", result.get(3).getUserName(), \"User with ID 3 should be Charlie\");\n        assertTrue(result.keySet().containsAll(List.of(1, 2, 3)), \"Resulting map keys should match the user IDs\");\n    }\n}",
        "package_metric": 10.98,
        "class_metric": 17.65,
        "method_metric": 73.33,
        "pitest": 21.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-common/src/test/java/com/ctrip/framework/apollo/common/utils",
        "package_name": "com.ctrip.framework.apollo.common.utils",
        "class_name": "BeanUtils",
        "method_name": "mapByKey",
        "test_code": "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.lang.reflect.Field;\nimport java.util.*;\n\nclass ExampleObject {\n    private String id;\n    private String value;\n\n    public ExampleObject(String id, String value) {\n        this.id = id;\n        this.value = value;\n    }\n\n    public String getId() {\n        return id;\n    }\n}\n\nclass BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Arrange\n        List<ExampleObject> list = new ArrayList<>();\n        list.add(new ExampleObject(\"1\", \"Value1\"));\n        list.add(new ExampleObject(\"2\", \"Value2\"));\n        list.add(new ExampleObject(\"3\", \"Value3\"));\n\n        // Act\n        Map<String, ExampleObject> result = BeanUtils.mapByKey(\"id\", list);\n\n        // Assert\n        assertNotNull(result);\n        assertEquals(3, result.size());\n        assertEquals(list.get(0), result.get(\"1\"));\n        assertEquals(list.get(1), result.get(\"2\"));\n        assertEquals(list.get(2), result.get(\"3\"));\n\n        // Test with an empty list\n        List<ExampleObject> emptyList = new ArrayList<>();\n        Map<String, ExampleObject> emptyResult = BeanUtils.mapByKey(\"id\", emptyList);\n        assertTrue(emptyResult.isEmpty());\n\n        // Test with non-existing key\n        Exception keyException = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"nonExistingKey\", list);\n        });\n        assertEquals(\"Could not find the key\", keyException.getMessage());\n\n        // Test handling of null list\n        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"id\", null);\n        });\n        assertEquals(\"The list must not be null\", nullException.getMessage());\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/environment",
        "package_name": "com.ctrip.framework.apollo.portal.environment",
        "class_name": "Env",
        "method_name": "getWellFormName",
        "test_code": "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    \n    // Assuming there is an enum named Env with PRO and FAT members\n    enum Env {\n        PRO(\"Production\"),\n        FAT(\"Feature Acceptance Testing\");\n\n        public final String name;\n\n        Env(String name) {\n            this.name = name;\n        }\n    }\n    \n    // The method to be tested (assuming it is made accessible for testing)\n    private static String getWellFormName(String envName) {\n      if (StringUtils.isBlank(envName)) {\n        return \"\";\n      }\n\n      String envWellFormName = envName.trim().toUpperCase();\n\n      // special case for production in case of typo\n      if (\"PROD\".equals(envWellFormName)) {\n        return Env.PRO.name;\n      }\n\n      // special case that FAT & FWS should map to FAT\n      if (\"FWS\".equals(envWellFormName)) {\n        return Env.FAT.name;\n      }\n\n      return envWellFormName;\n    }\n\n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"\", getWellFormName(null), \"Null string should return an empty string\");\n        assertEquals(\"\", getWellFormName(\" \"), \"Blank string should return an empty string\");\n        assertEquals(\"DEVELOPMENT\", getWellFormName(\"  development \"), \"Whitespace should be trimmed and case transformed to upper\");\n        assertEquals(Env.PRO.name, getWellFormName(\"prod\"), \"'prod' should return the name of the PRO\");\n        assertEquals(Env.PRO.name, getWellFormName(\"PROD\"), \"'PROD' should return the name of the PRO\");\n        assertEquals(Env.FAT.name, getWellFormName(\"fws\"), \"'fws' should return the name of the FAT\");\n        assertEquals(Env.FAT.name, getWellFormName(\"FWS\"), \"'FWS' should return the name of the FAT\");\n        assertEquals(\"STAGE\", getWellFormName(\"stage\"), \"Other cases should return their upper case forms\");\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/environment",
        "package_name": "com.ctrip.framework.apollo.portal.environment",
        "class_name": "Env",
        "method_name": "getWellFormName",
        "test_code": "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"\", EnvUtils.getWellFormName(null));\n        assertEquals(\"\", EnvUtils.getWellFormName(\"\"));\n        assertEquals(\"\", EnvUtils.getWellFormName(\"   \"));\n        assertEquals(\"PRO\", EnvUtils.getWellFormName(\"prod\"));\n        assertEquals(\"PRO\", EnvUtils.getWellFormName(\"PROD\"));\n        assertEquals(\"PRO\", EnvUtils.getWellFormName(\" ProD \"));\n        assertEquals(\"FAT\", EnvUtils.getWellFormName(\"fat\"));\n        assertEquals(\"FAT\", EnvUtils.getWellFormName(\"FAT\"));\n        assertEquals(\"FAT\", EnvUtils.getWellFormName(\" FAt \"));\n        assertEquals(\"FAT\", EnvUtils.getWellFormName(\"fws\"));\n        assertEquals(\"FAT\", EnvUtils.getWellFormName(\"FWS\"));\n        assertEquals(\"FAT\", EnvUtils.getWellFormName(\" Fws \"));\n        assertEquals(\"DEV\", EnvUtils.getWellFormName(\"dev\"));\n        assertEquals(\"DEV\", EnvUtils.getWellFormName(\"DEV\"));\n        assertEquals(\"DEV\", EnvUtils.getWellFormName(\" Dev \"));\n        assertEquals(\"TEST\", EnvUtils.getWellFormName(\"test\"));\n        assertEquals(\"TEST\", EnvUtils.getWellFormName(\"TEST\"));\n        assertEquals(\"TEST\", EnvUtils.getWellFormName(\" Test \"));\n        assertEquals(\"UAT\", EnvUtils.getWellFormName(\"uat\"));\n        assertEquals(\"UAT\", EnvUtils.getWellFormName(\"UAT\"));\n        assertEquals(\"UAT\", EnvUtils.getWellFormName(\" Uat \"));\n        // More test cases if necessary...\n    }\n\n    // Assuming there are enum Env and method EnvUtils.getWellFormName available\n    enum Env {\n        PRO(\"PRO\"), FAT(\"FAT\"), DEV(\"DEV\"), TEST(\"TEST\"), UAT(\"UAT\");\n\n        private String name;\n\n        Env(String name) {\n            this.name = name;\n        }\n\n        public String getName() {\n            return name;\n        }\n    }\n\n    private static class EnvUtils {\n        // Assuming this is the actual implementation of the getWellFormName method\n        private static String getWellFormName(String envName) {\n            if (StringUtils.isBlank(envName)) {\n                return \"\";\n            }\n\n            String envWellFormName = envName.trim().toUpperCase();\n\n            // special case for production in case of typo\n            if (\"PROD\".equals(envWellFormName)) {\n                return Env.PRO.getName();\n            }\n\n            // special case that FAT & FWS should map to FAT\n            if (\"FWS\".equals(envWellFormName)) {\n                return Env.FAT.getName();\n            }\n\n            return envWellFormName;\n        }\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/environment",
        "package_name": "com.ctrip.framework.apollo.portal.environment",
        "class_name": "Env",
        "method_name": "getWellFormName",
        "test_code": "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n\n    private static String getWellFormName(String envName) {\n      if (StringUtils.isBlank(envName)) {\n        return \"\";\n      }\n\n      String envWellFormName = envName.trim().toUpperCase();\n\n      // special case for production in case of typo\n      if (\"PROD\".equals(envWellFormName)) {\n        return Env.PRO.name;\n      }\n\n      // special case that FAT & FWS should map to FAT\n      if (\"FWS\".equals(envWellFormName)) {\n        return Env.FAT.name;\n      }\n\n      return envWellFormName;\n    }\n\n    enum Env {\n      PRO(\"PRODUCTION\"),\n      FAT(\"FAT\");\n\n      public final String name;\n\n      Env(String name) {\n          this.name = name;\n      }\n    }\n\n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"\", getWellFormName(null), \"Should return empty string for null input.\");\n        assertEquals(\"\", getWellFormName(\" \"), \"Should return empty string for blank string input.\");\n        assertEquals(\"ENVIRONMENT\", getWellFormName(\"  environment \"), \"Should return a trimmed uppercase string.\");\n        assertEquals(Env.PRO.name, getWellFormName(\"proD\"), \"Should return 'PRODUCTION' for 'proD'.\");\n        assertEquals(Env.PRO.name, getWellFormName(\"pRod\"), \"Should return 'PRODUCTION' for 'pRod'.\");\n        assertEquals(Env.FAT.name, getWellFormName(\"Fat\"), \"Should return 'FAT' for 'Fat'.\");\n        assertEquals(Env.FAT.name, getWellFormName(\"fwS\"), \"Should return 'FAT' for 'fwS' due to special case.\");\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service",
        "package_name": "com.ctrip.framework.apollo.biz.service",
        "class_name": "NamespaceBranchService",
        "method_name": "updateRulesReleaseId",
        "test_code": "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\nimport com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NamespaceBranchServiceTest {\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // GIVEN\n        final String appId = \"testAppId\";\n        final String clusterName = \"testClusterName\";\n        final String namespaceName = \"testNamespaceName\";\n        final String branchName = \"testBranchName\";\n        final long latestReleaseId = 100L;\n        final String operator = \"operator\";\n        \n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        oldRules.setRules(\"oldRules\");\n\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n                appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);\n        \n        // WHEN\n        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(\n                appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        // THEN\n        assertNotNull(updatedRules, \"Updated rules should not be null\");\n        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus(), \"Branch status should be ACTIVE\");\n        assertEquals(latestReleaseId, updatedRules.getReleaseId(), \"Release ID should match the latest release ID\");\n        assertEquals(\"oldRules\", updatedRules.getRules(), \"Rules should match the old rules\");\n        assertEquals(appId, updatedRules.getAppId(), \"AppId should match\");\n        assertEquals(clusterName, updatedRules.getClusterName(), \"ClusterName should match\");\n        assertEquals(namespaceName, updatedRules.getNamespaceName(), \"NamespaceName should match\");\n        assertEquals(branchName, updatedRules.getBranchName(), \"BranchName should match\");\n        assertEquals(operator, updatedRules.getDataChangeCreatedBy(), \"DataChangeCreatedBy should match the operator\");\n        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy(), \"DataChangeLastModifiedBy should match the operator\");\n\n        // Verify that interactions with the repository took place as expected\n        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository).delete(oldRules);\n    }\n} ",
        "package_metric": 1.96,
        "class_metric": 25.81,
        "method_metric": 94.12,
        "pitest": 24.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service",
        "package_name": "com.ctrip.framework.apollo.biz.service",
        "class_name": "NamespaceBranchService",
        "method_name": "updateRulesReleaseId",
        "test_code": "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class NamespaceBranchServiceTest {\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        String appId = \"myAppId\";\n        String clusterName = \"default\";\n        String namespaceName = \"application\";\n        String branchName = \"myBranch\";\n        long latestReleaseId = 100L;\n        String operator = \"testOperator\";\n\n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        oldRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);\n        oldRules.setReleaseId(99L);\n        oldRules.setRules(\"[]\");\n\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n                appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);\n\n        GrayReleaseRule newRules = namespaceBranchService.updateRulesReleaseId(\n                appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        assertNotNull(newRules);\n        assertEquals(NamespaceBranchStatus.ACTIVE, newRules.getBranchStatus());\n        assertEquals(latestReleaseId, newRules.getReleaseId());\n        assertEquals(appId, newRules.getAppId());\n        assertEquals(clusterName, newRules.getClusterName());\n        assertEquals(namespaceName, newRules.getNamespaceName());\n        assertEquals(branchName, newRules.getBranchName());\n        assertEquals(operator, newRules.getDataChangeCreatedBy());\n        assertEquals(operator, newRules.getDataChangeLastModifiedBy());\n\n\n        verify(grayReleaseRuleRepository, times(1)).save(newRules);\n        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);\n    }\n}",
        "package_metric": 1.96,
        "class_metric": 25.81,
        "method_metric": 94.12,
        "pitest": 22.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service",
        "package_name": "com.ctrip.framework.apollo.biz.service",
        "class_name": "NamespaceBranchService",
        "method_name": "updateRulesReleaseId",
        "test_code": "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class NamespaceBranchServiceTest {\n    \n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n    \n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @BeforeEach\n    public void setUp() {\n        // Prepare test data or configure mocks before each test if necessary\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // Setup test data\n        String appId = \"myApp\";\n        String clusterName = \"myCluster\";\n        String namespaceName = \"myNamespace\";\n        String branchName = \"myBranch\";\n        long latestReleaseId = 100L;\n        String operator = \"operator\";\n        \n        // Mock the old rules returned by the repository\n        GrayReleaseRule oldRules = mock(GrayReleaseRule.class);\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n            appId, clusterName, namespaceName, branchName\n        )).thenReturn(oldRules);\n\n        // Execute the method to test\n        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(\n            appId, clusterName, namespaceName, branchName, latestReleaseId, operator\n        );\n\n        // Validate the results\n        assertNotNull(updatedRules, \"Updated rules should not be null\");\n        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus(), \"Branch status should be ACTIVE\");\n        assertEquals(latestReleaseId, updatedRules.getReleaseId(), \"Release ID should match the one provided\");\n        assertSame(oldRules.getRules(), updatedRules.getRules(), \"Rules should match the old rules' rules\");\n        assertEquals(oldRules.getAppId(), updatedRules.getAppId(), \"App ID should match the old rules' app ID\");\n        assertEquals(oldRules.getClusterName(), updatedRules.getClusterName(), \"Cluster name should match the old rules' cluster name\");\n        assertEquals(oldRules.getNamespaceName(), updatedRules.getNamespaceName(), \"Namespace name should match the old rules' namespace name\");\n        assertEquals(oldRules.getBranchName(), updatedRules.getBranchName(), \"Branch name should match the old rules' branch name\");\n        assertEquals(operator, updatedRules.getDataChangeCreatedBy(), \"Created by operator should match the one provided\");\n        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy(), \"Last modified by operator should match the one provided\");\n\n        // Verify interaction with mock objects\n        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository).delete(oldRules);\n    }\n}",
        "package_metric": 1.96,
        "class_metric": 25.81,
        "method_metric": 94.12,
        "pitest": 14.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service",
        "package_name": "com.ctrip.framework.apollo.biz.service",
        "class_name": "NamespaceBranchService",
        "method_name": "updateRulesReleaseId",
        "test_code": "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\nimport com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NamespaceBranchServiceTest {\n    \n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n    \n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // Arrange\n        String appId = \"testAppId\";\n        String clusterName = \"testClusterName\";\n        String namespaceName = \"testNamespaceName\";\n        String branchName = \"testBranchName\";\n        long latestReleaseId = 100L;\n        String operator = \"testOperator\";\n        \n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setRules(\"oldRules\");\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        \n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName))\n            .thenReturn(oldRules);\n        \n        // Act\n        GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n        \n        // Assert\n        assertNotNull(result);\n        assertEquals(latestReleaseId, result.getReleaseId());\n        assertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());\n        assertEquals(\"oldRules\", result.getRules());\n        assertEquals(operator, result.getDataChangeLastModifiedBy());\n        assertEquals(operator, result.getDataChangeCreatedBy());\n\n        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository).delete(oldRules);\n    }\n    \n    @AfterEach\n    public void tearDown() {\n        // Closing resources if necessary\n    }\n}",
        "package_metric": 1.96,
        "class_metric": 25.81,
        "method_metric": 94.12,
        "pitest": 16.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service",
        "package_name": "com.ctrip.framework.apollo.biz.service",
        "class_name": "NamespaceBranchService",
        "method_name": "updateRulesReleaseId",
        "test_code": "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport static org.mockito.Mockito.*;\nimport static org.mockito.BDDMockito.given;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class NamespaceBranchServiceTest {\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    private final String appId = \"myAppId\";\n    private final String clusterName = \"myClusterName\";\n    private final String namespaceName = \"myNamespace\";\n    private final String branchName = \"branchName\";\n    private final long latestReleaseId = 100L;\n    private final String operator = \"operator\";\n\n    private GrayReleaseRule oldRules;\n    private GrayReleaseRule newRules;\n\n    @BeforeEach\n    public void setUp() {\n        // set up an existing gray release rule\n        oldRules = new GrayReleaseRule();\n        oldRules.setId(1L);\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        oldRules.setRules(\"oldRules\");\n        oldRules.setReleaseId(99L);\n        // new rules will not exist before the method execution\n        newRules = null;\n\n        // given statement to mimic repository behavior\n        given(grayReleaseRuleRepository\n                .findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName))\n                .willReturn(oldRules);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // when updateRulesReleaseId is invoked with all proper parameters\n        newRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        // then new Rules should be created with updated releaseId\n        assertNotNull(newRules);\n        assertEquals(NamespaceBranchStatus.ACTIVE, newRules.getBranchStatus());\n        assertEquals(latestReleaseId, newRules.getReleaseId());\n        assertEquals(oldRules.getRules(), newRules.getRules());\n        assertEquals(oldRules.getAppId(), newRules.getAppId());\n        assertEquals(oldRules.getClusterName(), newRules.getClusterName());\n        assertEquals(oldRules.getNamespaceName(), newRules.getNamespaceName());\n        assertEquals(oldRules.getBranchName(), newRules.getBranchName());\n        assertEquals(operator, newRules.getDataChangeCreatedBy());\n        assertEquals(operator, newRules.getDataChangeLastModifiedBy());\n\n        // and old Rules should be deleted\n        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);\n        // and the new Rules should be saved\n        verify(grayReleaseRuleRepository, times(1)).save(newRules);\n    }\n}",
        "package_metric": 1.96,
        "class_metric": 25.81,
        "method_metric": 94.12,
        "pitest": 24.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service",
        "package_name": "com.ctrip.framework.apollo.biz.service",
        "class_name": "NamespaceBranchService",
        "method_name": "updateRulesReleaseId",
        "test_code": "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class NamespaceBranchServiceTest {\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    private final String appId = \"myAppId\";\n    private final String clusterName = \"myClusterName\";\n    private final String namespaceName = \"myNamespaceName\";\n    private final String branchName = \"myBranchName\";\n    private final long latestReleaseId = 100L;\n    private final String operator = \"operator\";\n\n    private GrayReleaseRule oldRules;\n    private GrayReleaseRule newRules;\n\n    @BeforeEach\n    public void setUp() {\n        oldRules = new GrayReleaseRule();\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        oldRules.setReleaseId(99L);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);\n\n        newRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        assertNotNull(newRules, \"New rules should not be null\");\n        assertEquals(NamespaceBranchStatus.ACTIVE, newRules.getBranchStatus(), \"Branch status should be set to ACTIVE\");\n        assertEquals(latestReleaseId, newRules.getReleaseId(), \"ReleaseId should be updated to the latest\");\n        assertEquals(oldRules.getRules(), newRules.getRules(), \"Rules should be the same as the old rules\");\n        assertEquals(operator, newRules.getDataChangeCreatedBy(), \"Operator should be set as DataChangeCreatedBy\");\n        assertEquals(operator, newRules.getDataChangeLastModifiedBy(), \"Operator should be set as DataChangeLastModifiedBy\");\n\n        verify(grayReleaseRuleRepository).save(newRules);\n        verify(grayReleaseRuleRepository).delete(oldRules);\n    }\n}",
        "package_metric": 1.96,
        "class_metric": 25.81,
        "method_metric": 94.12,
        "pitest": 14.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/registry",
        "package_name": "com.ctrip.framework.apollo.biz.registry",
        "class_name": "DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl",
        "method_name": "getInstances",
        "test_code": "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.net.URI;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    \n    private DatabaseDiscoveryClient delegate;\n    private ServiceInstance selfInstance;\n    private DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator;\n    \n    @BeforeEach\n    public void setUp() {\n        delegate = Mockito.mock(DatabaseDiscoveryClient.class);\n        selfInstance = Mockito.mock(ServiceInstance.class);\n        decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    }\n\n    @Test\n    public void getInstancesTest() {\n        String serviceName = \"test-service\";\n        String selfServiceName = \"test-service\";\n        URI uri = URI.create(\"http://localhost:8080\");\n        String cluster = \"default\";\n        \n        ServiceInstance otherInstance1 = Mockito.mock(ServiceInstance.class);\n        ServiceInstance otherInstance2 = Mockito.mock(ServiceInstance.class);\n        \n        when(selfInstance.getServiceName()).thenReturn(selfServiceName);\n        when(selfInstance.getUri()).thenReturn(uri);\n        when(selfInstance.getCluster()).thenReturn(cluster);\n        \n        // Scenario 1: Delegate contains self instance\n        List<ServiceInstance> initialInstances = Arrays.asList(selfInstance, otherInstance1, otherInstance2);\n        when(delegate.getInstances(serviceName)).thenReturn(initialInstances);\n        \n        List<ServiceInstance> result = decorator.getInstances(serviceName);\n        assertEquals(3, result.size(), \"Size should be the same as the delegate returned because self instance is already present\");\n        assertTrue(result.contains(selfInstance), \"List should contain the self instance\");\n        \n        // Scenario 2: Delegate does not contain self instance, and serviceName equals selfInstance service name\n        List<ServiceInstance> initialInstancesWithoutSelf = Arrays.asList(otherInstance1, otherInstance2);\n        when(delegate.getInstances(selfServiceName)).thenReturn(initialInstancesWithoutSelf);\n        \n        List<ServiceInstance> resultWhenSelfNotContained = decorator.getInstances(selfServiceName);\n        assertEquals(3, resultWhenSelfNotContained.size(), \"Should add self instance to the list when it is not contained\");\n        assertTrue(resultWhenSelfNotContained.contains(selfInstance), \"List should now contain the self instance\");\n\n        // Scenario 3: Delegate does not contain self instance, and serviceName does not equal selfInstance service name\n        String differentServiceName = \"different-service\";\n        when(delegate.getInstances(differentServiceName)).thenReturn(initialInstancesWithoutSelf);\n        \n        List<ServiceInstance> resultWithDifferentServiceName = decorator.getInstances(differentServiceName);\n        assertEquals(2, resultWithDifferentServiceName.size(), \"Should not add self instance if the serviceName is different\");\n        assertFalse(resultWithDifferentServiceName.contains(selfInstance), \"List should not contain the self instance\");\n    }\n    \n    // Additional tests can be implemented here, such as handling null responses from delegated getInstances,\n    // checking if the correct instance is added first (i.e., the self instance), and so on.\n}",
        "package_metric": 27.06,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/registry",
        "package_name": "com.ctrip.framework.apollo.biz.registry",
        "class_name": "DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl",
        "method_name": "getInstances",
        "test_code": "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n\n    private DatabaseDiscoveryClient delegateMock;\n    private ServiceInstance selfInstanceMock;\n    private DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl clientDecorator;\n\n    @BeforeEach\n    public void setUp() {\n        delegateMock = mock(DatabaseDiscoveryClient.class);\n        selfInstanceMock = mock(ServiceInstance.class);\n        clientDecorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegateMock, selfInstanceMock);\n    }\n\n    @Test\n    public void getInstancesTest_WhenSelfInstanceIsAlreadyPresent() {\n        String serviceName = \"testService\";\n        when(selfInstanceMock.getServiceName()).thenReturn(serviceName);\n        \n        // Mock a response that already includes the self instance\n        List<ServiceInstance> mockResponse = Collections.singletonList(selfInstanceMock);\n        when(delegateMock.getInstances(serviceName)).thenReturn(mockResponse);\n\n        List<ServiceInstance> result = clientDecorator.getInstances(serviceName);\n\n        verify(delegateMock).getInstances(serviceName);\n        assertEquals(mockResponse, result, \"List should contain the self instance already\");\n    }\n\n    @Test\n    public void getInstancesTest_WhenSelfInstanceIsNotPresent() {\n        String serviceName = \"testService\";\n        when(selfInstanceMock.getServiceName()).thenReturn(serviceName);\n\n        ServiceInstance anotherInstanceMock = mock(ServiceInstance.class);\n        List<ServiceInstance> mockResponse = Collections.singletonList(anotherInstanceMock);\n        when(delegateMock.getInstances(serviceName)).thenReturn(mockResponse);\n\n        List<ServiceInstance> result = clientDecorator.getInstances(serviceName);\n\n        verify(delegateMock).getInstances(serviceName);\n        assertTrue(result.contains(selfInstanceMock), \"List should contain the self instance\");\n        assertTrue(result.containsAll(mockResponse), \"Original instances should be included in the result\");\n        assertEquals(mockResponse.size() + 1, result.size(), \"The result list size should be increased by 1\");\n    }\n\n    @Test\n    public void getInstancesTest_WhenServiceNameDoesNotMatch() {\n        String searchedServiceName = \"otherService\";\n        when(selfInstanceMock.getServiceName()).thenReturn(\"testService\");\n\n        ServiceInstance otherInstanceMock = mock(ServiceInstance.class);\n        when(otherInstanceMock.getServiceName()).thenReturn(\"otherService\");\n        List<ServiceInstance> mockResponse = Arrays.asList(selfInstanceMock, otherInstanceMock);\n\n        when(delegateMock.getInstances(searchedServiceName)).thenReturn(mockResponse);\n\n        List<ServiceInstance> result = clientDecorator.getInstances(searchedServiceName);\n\n        verify(delegateMock).getInstances(searchedServiceName);\n        assertEquals(mockResponse, result, \"Should return delegated instances without adding self instance\");\n    }\n\n    @AfterEach\n    public void tearDown() {\n        reset(delegateMock, selfInstanceMock);\n    }\n}",
        "package_metric": 27.06,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/registry",
        "package_name": "com.ctrip.framework.apollo.biz.registry",
        "class_name": "DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl",
        "method_name": "getInstances",
        "test_code": "package com.ctrip.framework.apollo.biz.registry;\n\nimport static org.mockito.Mockito.*;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    \n    private DatabaseDiscoveryClient delegate;\n    private ServiceInstance selfInstance;\n    private DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator;\n    \n    @BeforeEach\n    public void setUp() {\n        delegate = mock(DatabaseDiscoveryClient.class);\n        selfInstance = mock(ServiceInstance.class);\n        decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    }\n    \n    @Test\n    public void getInstancesTest_ContainsSelf() {\n        String serviceName = \"testService\";\n        List<ServiceInstance> mockedInstances = Arrays.asList(mock(ServiceInstance.class), selfInstance);\n        when(delegate.getInstances(serviceName)).thenReturn(mockedInstances);\n        when(selfInstance.getServiceName()).thenReturn(serviceName);\n        \n        List<ServiceInstance> instances = decorator.getInstances(serviceName);\n        \n        assertNotNull(instances);\n        assertTrue(instances.contains(selfInstance));\n        assertEquals(mockedInstances.size(), instances.size());\n        verify(delegate, times(1)).getInstances(serviceName);\n    }\n    \n    @Test\n    public void getInstancesTest_DoesNotContainSelf() {\n        String serviceName = \"testService\";\n        List<ServiceInstance> mockedInstances = Collections.singletonList(mock(ServiceInstance.class));\n        when(delegate.getInstances(serviceName)).thenReturn(mockedInstances);\n        when(selfInstance.getServiceName()).thenReturn(serviceName);\n        \n        List<ServiceInstance> instances = decorator.getInstances(serviceName);\n        \n        assertNotNull(instances);\n        assertTrue(instances.contains(selfInstance));\n        assertEquals(mockedInstances.size() + 1, instances.size());\n        verify(delegate, times(1)).getInstances(serviceName);\n    }\n    \n    @Test\n    public void getInstancesTest_DifferentServiceName() {\n        String requestedServiceName = \"requestedService\";\n        String selfServiceName = \"selfService\";\n        List<ServiceInstance> mockedInstances = Collections.singletonList(mock(ServiceInstance.class));\n        when(delegate.getInstances(requestedServiceName)).thenReturn(mockedInstances);\n        when(selfInstance.getServiceName()).thenReturn(selfServiceName);\n        \n        List<ServiceInstance> instances = decorator.getInstances(requestedServiceName);\n        \n        assertNotNull(instances);\n        assertFalse(instances.contains(selfInstance));\n        assertEquals(mockedInstances.size(), instances.size());\n        verify(delegate, times(1)).getInstances(requestedServiceName);\n    }\n}",
        "package_metric": 27.06,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/registry",
        "package_name": "com.ctrip.framework.apollo.biz.registry",
        "class_name": "DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl",
        "method_name": "getInstances",
        "test_code": "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n\n    private final String TEST_SERVICE_NAME = \"testService\";\n    private final String DIFFERENT_SERVICE_NAME = \"differentService\";\n    private final DatabaseDiscoveryClient delegate = mock(DatabaseDiscoveryClient.class);\n    private final ServiceInstance selfInstance = mock(ServiceInstance.class);\n    private DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl databaseDiscoveryClient;\n\n    @BeforeEach\n    public void setUp() {\n        when(selfInstance.getServiceName()).thenReturn(TEST_SERVICE_NAME);\n        databaseDiscoveryClient = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    }\n\n    @Test\n    public void getInstancesTest() {\n        List<ServiceInstance> mockInstances = Arrays.asList(mock(ServiceInstance.class), mock(ServiceInstance.class));\n        when(delegate.getInstances(TEST_SERVICE_NAME)).thenReturn(mockInstances);\n        when(delegate.getInstances(DIFFERENT_SERVICE_NAME)).thenReturn(mockInstances);\n\n        // When requesting instances for the same service name which self instance has\n        List<ServiceInstance> instances = databaseDiscoveryClient.getInstances(TEST_SERVICE_NAME);\n\n        assertTrue(instances.contains(selfInstance), \"Instances should contain self instance\");\n        assertEquals(mockInstances.size() + 1, instances.size(), \"Instances size should be the delegate size plus one\");\n\n        // When requesting instances for a different service name\n        List<ServiceInstance> differentInstances = databaseDiscoveryClient.getInstances(DIFFERENT_SERVICE_NAME);\n\n        assertFalse(differentInstances.contains(selfInstance), \"Instances should not contain self instance for different service name\");\n        assertEquals(mockInstances.size(), differentInstances.size(), \"Instances size should be equal to the delegate size for different service name\");\n\n        // Verify underlying delegate method was called\n        verify(delegate, times(1)).getInstances(TEST_SERVICE_NAME);\n        verify(delegate, times(1)).getInstances(DIFFERENT_SERVICE_NAME);\n    }\n}",
        "package_metric": 22.35,
        "class_metric": 82.61,
        "method_metric": 88.89,
        "pitest": 55.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair1Copy = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key2\", \"value2\");\n        Pair<String, String> pairWithNullKey = new Pair<>(null, \"value1\");\n        Pair<String, String> pairWithNullValue = new Pair<>(\"key1\", null);\n        Pair<String, String> pairWithNullKeyAndValue = new Pair<>(null, null);\n\n        // Test for equality with itself\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself\");\n\n        // Test for equality with another Pair with the same key and value\n        assertTrue(pair1.equals(pair1Copy), \"Pairs with identical key and value should be equal\");\n\n        // Test for inequality with a Pair with different key and value\n        assertFalse(pair1.equals(pair2), \"Pairs with different keys and values should not be equal\");\n\n        // Test for inequality with a Pair with a null key\n        assertFalse(pair1.equals(pairWithNullKey), \"Pairs with a non-null key should not be equal to a Pair with a null key\");\n\n        // Test for inequality with a Pair with a null value\n        assertFalse(pair1.equals(pairWithNullValue), \"Pairs with a non-null value should not be equal to a Pair with a null value\");\n\n        // Test equality of Pairs with null keys and values\n        assertTrue(pairWithNullKeyAndValue.equals(pairWithNullKeyAndValue), \"Pairs with null keys and values should be equal\");\n\n        // Test for inequality with null\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null\");\n\n        // Test for inequality with an object of a different type\n        assertFalse(pair1.equals(\"String\"), \"Pair should not be equal to an object of a different type\");\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 38.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    \n    @Test\n    public void equalsTest() {\n        // Create two pairs that should be equal\n        Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n\n        // Create two pairs that are different\n        Pair<Integer, String> pair3 = new Pair<>(2, \"two\");\n        Pair<Integer, String> pair4 = new Pair<>(1, \"two\");\n\n        // Null key and value pairs\n        Pair<Object, Object> nullPair1 = new Pair<>(null, null);\n        Pair<Object, Object> nullPair2 = new Pair<>(null, null);\n\n        // Null key and non-null value pairs\n        Pair<Object, String> nullKeyPair1 = new Pair<>(null, \"three\");\n        Pair<Object, String> nullKeyPair2 = new Pair<>(null, \"three\");\n\n        // Non-null key and null value pairs\n        Pair<Integer, Object> nullValuePair1 = new Pair<>(3, null);\n        Pair<Integer, Object> nullValuePair2 = new Pair<>(3, null);\n\n        // Assert that the same pair is equal to itself\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself\");\n\n        // Assert that two pairs with the same key and value are equal\n        assertTrue(pair1.equals(pair2), \"Two pairs with the same key and value should be equal\");\n\n        // Assert that two pairs with different keys are not equal\n        assertFalse(pair1.equals(pair3), \"Two pairs with different keys should not be equal\");\n\n        // Assert that two pairs with the same key but different values are not equal\n        assertFalse(pair1.equals(pair4), \"Two pairs with the same key but different values should not be equal\");\n\n        // Assert that two null pairs are equal\n        assertTrue(nullPair1.equals(nullPair2), \"Two null pairs should be equal\");\n\n        // Assert that two pairs with null keys are equal\n        assertTrue(nullKeyPair1.equals(nullKeyPair2), \"Two pairs with null keys should be equal\");\n\n        // Assert that two pairs with null values are equal\n        assertTrue(nullValuePair1.equals(nullValuePair2), \"Two pairs with null values should be equal\");\n\n        // Assert that a pair is not equal to null\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null\");\n\n        // Assert that a pair is not equal to an object of a different type\n        assertFalse(pair1.equals(new Object()), \"Pair should not be equal to an object of a different type\");\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 46.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n\n        // Check reflexivity\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself\");\n\n        // Check symmetry\n        assertTrue(pair1.equals(pair2) && pair2.equals(pair1), \"Pairs should be equal to each other\");\n\n        // Check null comparison\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null\");\n\n        // Check different class comparison\n        assertFalse(pair1.equals(new Object()), \"Pair should not be equal to an object of a different class\");\n\n        // Check pairs with different keys\n        Pair<String, String> pairDifferentKey = new Pair<>(\"key2\", \"value1\");\n        assertFalse(pair1.equals(pairDifferentKey), \"Pairs with different keys should not be equal\");\n\n        // Check pairs with different values\n        Pair<String, String> pairDifferentValue = new Pair<>(\"key1\", \"value2\");\n        assertFalse(pair1.equals(pairDifferentValue), \"Pairs with different values should not be equal\");\n\n        // Check pair with null key and value\n        Pair<String, String> nullKeyPair1 = new Pair<>(null, \"value1\");\n        Pair<String, String> nullKeyPair2 = new Pair<>(null, \"value1\");\n        assertTrue(nullKeyPair1.equals(nullKeyPair2), \"Pairs with null keys should be equal\");\n\n        Pair<String, String> nullValuePair1 = new Pair<>(\"key1\", null);\n        Pair<String, String> nullValuePair2 = new Pair<>(\"key1\", null);\n        assertTrue(nullValuePair1.equals(nullValuePair2), \"Pairs with null values should be equal\");\n\n        // Check pairs with one of the keys null\n        Pair<String, String> pairWithNullKey = new Pair<>(null, \"value1\");\n        assertFalse(pair1.equals(pairWithNullKey), \"Pairs with one null key should not be equal\");\n\n        // Check pairs with one of the values null\n        Pair<String, String> pairWithNullValue = new Pair<>(\"key1\", null);\n        assertFalse(pair1.equals(pairWithNullValue), \"Pairs with one null value should not be equal\");\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 46.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    \n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = Pair.create(\"key1\", \"value1\");\n        Pair<String, String> pair2 = Pair.create(\"key1\", \"value1\");\n        Pair<String, String> pair3 = Pair.create(\"key3\", \"value3\");\n        Pair<String, String> pairNullKey = Pair.create(null, \"value1\");\n        Pair<String, String> pairNullValue = Pair.create(\"key1\", null);\n        Pair<String, String> pairNullBoth = Pair.create(null, null);\n\n        // reflexive test\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself.\");\n        \n        // symmetric test\n        assertTrue(pair1.equals(pair2), \"Pair1 should be equal to Pair2.\");\n        assertTrue(pair2.equals(pair1), \"Pair2 should be equal to Pair1.\");\n        \n        // null key and value tests\n        assertFalse(pair1.equals(pairNullKey), \"Pairs with different keys should not be equal.\");\n        assertFalse(pairNullKey.equals(pair1), \"Pairs with different keys should not be equal.\");\n        assertFalse(pair1.equals(pairNullValue), \"Pairs with different values should not be equal.\");\n        assertFalse(pairNullValue.equals(pair1), \"Pairs with different values should not be equal.\");\n        assertFalse(pairNullKey.equals(pairNullValue), \"Pairs with different keys or values should not be equal.\");\n        assertTrue(pairNullBoth.equals(pairNullBoth), \"Pair with both key and value as null should be equal to itself.\");\n\n        // consistency test\n        assertTrue(pair1.equals(pair2), \"Pair1 should consistently be equal to Pair2.\");\n        assertTrue(pair2.equals(pair1), \"Pair2 should consistently be equal to Pair1.\");\n        \n        // null test\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null.\");\n        \n        // test with different values\n        assertFalse(pair1.equals(pair3), \"Pairs with different key/values should not be equal.\");\n        assertFalse(pair3.equals(pair1), \"Pairs with different key/values should not be equal.\");\n\n        // test with different object\n        assertFalse(pair1.equals(new Object()), \"Pair should not be equal to a different type of object.\");\n        \n        // transitive test\n        Pair<String, String> pairTransitive = Pair.create(\"key1\", \"value1\");\n        assertTrue(pair1.equals(pair2), \"Transitive test: Pair1 should be equal to Pair2.\");\n        assertTrue(pair2.equals(pairTransitive), \"Transitive test: Pair2 should be equal to PairTransitive.\");\n        assertTrue(pair1.equals(pairTransitive), \"Transitive test: Pair1 should be equal to PairTransitive.\");\n    }\n}",
        "package_metric": 3.55,
        "class_metric": 54.17,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value2\");\n        Pair<String, String> pairNullKey = new Pair<>(null, \"value1\");\n        Pair<String, String> pairNullValue = new Pair<>(\"key1\", null);\n        Pair<String, String> pairBothNull = new Pair<>(null, null);\n\n        assertTrue(pair1.equals(pair1), \"A pair should be equal to itself.\");\n        assertTrue(pair1.equals(pair2), \"Pairs with the same keys and values should be equal.\");\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys or values should not be equal.\");\n        assertFalse(pair1.equals(null), \"A pair should not be equal to null.\");\n        assertFalse(pair1.equals(\"Not a pair\"), \"A pair should not be equal to an object of a different type.\");\n        \n        assertTrue(pairNullKey.equals(new Pair<>(null, \"value1\")), \"Pairs with null keys and same values should be equal.\");\n        assertFalse(pairNullKey.equals(new Pair<>(null, \"value2\")), \"Pairs with null keys and different values should not be equal.\");\n\n        assertTrue(pairNullValue.equals(new Pair<>(\"key1\", null)), \"Pairs with null values and the same keys should be equal.\");\n        assertFalse(pairNullValue.equals(new Pair<>(\"key2\", null)), \"Pairs with null values and different keys should not be equal.\");\n        \n        assertTrue(pairBothNull.equals(new Pair<>(null, null)), \"Pairs with both key and value as null should be equal to another pair with both key and value as null.\");\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 46.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value2\");\n        Pair<String, String> pair4 = new Pair<>(null, \"value1\");\n        Pair<String, String> pair5 = new Pair<>(\"key1\", null);\n        Pair<String, String> pair6 = new Pair<>(null, null);\n\n        // Test reflexivity\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself\");\n\n        // Test symmetry\n        assertTrue(pair1.equals(pair2), \"Pairs with same key and value should be equal\");\n        assertTrue(pair2.equals(pair1), \"Pairs with same key and value should be equal\");\n\n        // Test transitivity\n        if (pair1.equals(pair2) && pair2.equals(pair3)) {\n            assertTrue(pair1.equals(pair3), \"Transitivity of equals failed\");\n        }\n\n        // Test null comparison\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null\");\n\n        // Test against different types\n        assertFalse(pair1.equals(new Object()), \"Pair should not be equal to an object of a different type\");\n\n        // Test pairs with different keys\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys should not be equal\");\n\n        // Test differentiating on null key\n        assertFalse(pair1.equals(pair4), \"Pairs with and without null keys should not be equal\");\n\n        // Test differentiating on null value\n        assertFalse(pair1.equals(pair5), \"Pairs with and without null values should not be equal\");\n\n        // Test both null key and value\n        assertTrue(pair6.equals(new Pair<>(null, null)), \"Pairs with both null keys and null values should be equal\");\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 46.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    \n    @Test\n    public void equalsTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"first\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"first\");\n        Pair<Integer, String> pair3 = new Pair<>(2, \"second\");\n        Pair<Integer, String> pair4 = new Pair<>(null, \"first\");\n        Pair<Integer, String> pair5 = new Pair<>(1, null);\n        Pair<Integer, String> pair6 = new Pair<>(null, null);\n\n        // Positive test cases\n        assertTrue(pair1.equals(pair2), \"Pairs with same key and value should be equal.\");\n\n        // Negative test cases\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys should not be equal.\");\n        assertFalse(pair1.equals(pair4), \"Pairs with null key in one should not be equal.\");\n        assertFalse(pair1.equals(pair5), \"Pairs with null value in one should not be equal.\");\n        assertFalse(pair1.equals(null), \"Pair compared with null should not be equal.\");\n        assertFalse(pair1.equals(new Object()), \"Pair compared with non-pair object should not be equal.\");\n\n        // Test with nulls in pairs\n        assertTrue(pair4.equals(new Pair<Integer, String>(null, \"first\")),\n            \"Pairs with same value and null key should be equal.\");\n        assertTrue(pair5.equals(new Pair<Integer, String>(1, null)),\n            \"Pairs with same key and null value should be equal.\");\n\n        // Test reflexivity, symmetry, and transitivity\n        assertTrue(pair1.equals(pair1), \"Reflexivity: Pair should be equal to itself.\");\n        assertTrue(pair2.equals(pair1), \"Symmetry: If pair1 equals pair2, then pair2 should equal pair1.\");\n        \n        Pair<Integer, String> pair2Copy = new Pair<>(1, \"first\");\n        assertTrue(pair1.equals(pair2) && pair2.equals(pair2Copy) && pair1.equals(pair2Copy),\n            \"Transitivity: If pair1 equals pair2 and pair2 equals pair2Copy, then pair1 should equal pair2Copy.\");\n\n        // Test null values equal to each other\n        assertTrue(pair6.equals(new Pair<>(null, null)),\n            \"Pairs with both keys and values as null should be equal.\");\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 46.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value2\");\n        Pair<String, String> pair4 = null;\n        Pair<String, String> pairWithNullKey = new Pair<>(null, \"value1\");\n        Pair<String, String> pairWithNullValue = new Pair<>(\"key1\", null);\n        Pair<String, String> pairWithBothNull = new Pair<>(null, null);\n        Pair<String, String> anotherPairWithNullKey = new Pair<>(null, \"value2\");\n        Pair<String, String> anotherPairWithNullValue = new Pair<>(\"key2\", null);\n        Object nonPairObject = new Object();\n\n        // Testing reflexivity - a pair should equal itself\n        assertTrue(pair1.equals(pair1));\n\n        // Testing symmetry and transitivity - two pairs with the same content should be equal\n        assertTrue(pair1.equals(pair2) && pair2.equals(pair1));\n\n        // Testing null comparison - comparing a pair to null should return false\n        assertFalse(pair1.equals(pair4));\n\n        // Testing inequality - pairs with different keys or values should not be equal\n        assertFalse(pair1.equals(pair3));\n        assertFalse(pairWithNullKey.equals(pair1));\n        assertFalse(pairWithNullValue.equals(pair1));\n\n        // Comparing pairs where one has a null key\n        assertFalse(pairWithNullKey.equals(anotherPairWithNullKey));\n\n        // Comparing pairs where one has a null value\n        assertFalse(pairWithNullValue.equals(anotherPairWithNullValue));\n\n        // Comparing pairs where both key and value are null\n        assertTrue(pairWithBothNull.equals(new Pair<>(null, null)));\n\n        // Comparing a pair to an object of another class should return false\n        assertFalse(pair1.equals(nonPairObject));\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 46.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test equal pairs with non-null key and value\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"value\");\n        assertTrue(pair1.equals(pair2));\n        assertTrue(pair2.equals(pair1));\n\n        // Test equal pairs with null key and non-null value\n        Pair<String, String> pairWithNullKey1 = new Pair<>(null, \"value\");\n        Pair<String, String> pairWithNullKey2 = new Pair<>(null, \"value\");\n        assertTrue(pairWithNullKey1.equals(pairWithNullKey2));\n        assertTrue(pairWithNullKey2.equals(pairWithNullKey1));\n\n        // Test equal pairs with non-null key and null value\n        Pair<String, String> pairWithNullValue1 = new Pair<>(\"key\", null);\n        Pair<String, String> pairWithNullValue2 = new Pair<>(\"key\", null);\n        assertTrue(pairWithNullValue1.equals(pairWithNullValue2));\n        assertTrue(pairWithNullValue2.equals(pairWithNullValue1));\n\n        // Test equal pairs with null key and null value\n        Pair<String, String> pairWithNullKeyAndValue1 = new Pair<>(null, null);\n        Pair<String, String> pairWithNullKeyAndValue2 = new Pair<>(null, null);\n        assertTrue(pairWithNullKeyAndValue1.equals(pairWithNullKeyAndValue2));\n        assertTrue(pairWithNullKeyAndValue2.equals(pairWithNullKeyAndValue1));\n\n        // Test non-equal pairs due to different keys\n        Pair<String, String> pairWithDifferentKey = new Pair<>(\"differentKey\", \"value\");\n        assertFalse(pair1.equals(pairWithDifferentKey));\n\n        // Test non-equal pairs due to different values\n        Pair<String, String> pairWithDifferentValue = new Pair<>(\"key\", \"differentValue\");\n        assertFalse(pair1.equals(pairWithDifferentValue));\n\n        // Test non-equal pairs when one has null key\n        Pair<String, String> pairWithKey1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pairWithNullKey3 = new Pair<>(null, \"value\");\n        assertFalse(pairWithKey1.equals(pairWithNullKey3));\n\n        // Test non-equal pairs when one has null value\n        Pair<String, String> pairWithValue1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pairWithNullValue3 = new Pair<>(\"key\", null);\n        assertFalse(pairWithValue1.equals(pairWithNullValue3));\n\n        // Test equality with self\n        assertTrue(pair1.equals(pair1));\n\n        // Test equality with non-Pair object\n        Object differentClassObject = new Object();\n        assertFalse(pair1.equals(differentClassObject));\n\n        // Test equality with null\n        assertFalse(pair1.equals(null));\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 46.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    \n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value2\");\n        Pair<String, String> pair4 = new Pair<>(null, \"value1\");\n        Pair<String, String> pair5 = new Pair<>(\"key1\", null);\n        Pair<String, String> pair6 = new Pair<>(null, null);\n\n        assertEquals(pair1, pair2, \"Two pairs with the same key and value should be equal.\");\n        assertNotEquals(pair1, pair3, \"Two pairs with different keys and values should not be equal.\");\n        assertNotEquals(pair1, pair4, \"Two pairs with the first key null should not be equal.\");\n        assertNotEquals(pair1, pair5, \"Two pairs with the first value null should not be equal.\");\n        assertNotEquals(pair4, pair5, \"Two pairs with only one null key/value should not be equal.\");\n        assertEquals(pair4, new Pair<>(null, \"value1\"), \"Two pairs with same null key and same value should be equal.\");\n        assertEquals(pair5, new Pair<>(\"key1\", null), \"Two pairs with same key and null values should be equal.\");\n        assertEquals(pair6, new Pair<>(null, null), \"Two pairs with null keys and values should be equal.\");\n    }\n}",
        "package_metric": 2.73,
        "class_metric": 41.67,
        "method_metric": 75.0,
        "pitest": 38.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void equalsTest() {\n        // Create some pairs to test\n        Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair3 = new Pair<>(2, \"two\");\n        Pair<Integer, String> pairWithNullKey = new Pair<>(null, \"three\");\n        Pair<Integer, String> pairWithNullValue = new Pair<>(3, null);\n        Pair<Integer, String> pairWithBothNull = new Pair<>(null, null);\n        \n        // Test for reflexivity\n        assertTrue(pair1.equals(pair1));\n        \n        // Test for symmetry\n        assertTrue(pair1.equals(pair2));\n        assertTrue(pair2.equals(pair1));\n        \n        // Test for transitivity\n        Pair<Integer, String> pair2Clone = new Pair<>(1, \"one\");\n        assertTrue(pair1.equals(pair2) && pair2.equals(pair2Clone) && pair1.equals(pair2Clone));\n        \n        // Test for nulls\n        assertFalse(pair1.equals(null));\n        \n        // Test for inequality\n        assertFalse(pair1.equals(pair3));\n        assertFalse(pair1.equals(pairWithNullKey));\n        assertFalse(pair1.equals(pairWithNullValue));\n        assertFalse(pair1.equals(pairWithBothNull));\n        \n        // Test for consistency\n        assertTrue(pair1.equals(pair2));\n        assertTrue(pair1.equals(pair2)); // Multiple calls return the same result\n        \n        // Test equals with different object types\n        Object dummyObject = new Object();\n        assertFalse(pair1.equals(dummyObject));\n        \n        // Test for two pairs with null fields\n        assertTrue(pairWithBothNull.equals(new Pair<>(null, null)));\n        \n        // Test with one null key and value\n        assertFalse(pairWithNullKey.equals(pairWithNullValue));\n        assertTrue(pairWithNullKey.equals(new Pair<>(null, \"three\")));\n        assertTrue(pairWithNullValue.equals(new Pair<>(3, null)));\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 46.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void equalsTest() {\n        // Create pairs\n        Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair3 = new Pair<>(2, \"two\");\n        Pair<Integer, String> pairNullKey = new Pair<>(null, \"one\");\n        Pair<Integer, String> pairNullValue = new Pair<>(1, null);\n        Pair<Integer, String> pairNullBoth = new Pair<>(null, null);\n\n        // Test equality with the same object\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself.\");\n\n        // Test equality with another object that has the same key and value\n        assertTrue(pair1.equals(pair2), \"Pairs with the same key and value should be equal.\");\n\n        // Test inequality with another object that has different key and value\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys and values should not be equal.\");\n\n        // Test inequality with null\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null.\");\n\n        // Test inequality with an object of different type\n        assertFalse(pair1.equals(\"A String\"), \"Pair should not be equal to an object of a different type.\");\n\n        // Test equality with null key\n        assertFalse(pair1.equals(pairNullKey), \"Pairs should not be equal if one has a null key and the other doesn't.\");\n\n        // Test equality with null value\n        assertFalse(pair1.equals(pairNullValue), \"Pairs should not be equal if one has a null value and the other doesn't.\");\n\n        // Test equality with null key and value\n        assertTrue(pairNullBoth.equals(new Pair<>(null, null)), \"Pairs with both null key and value should be equal.\");\n\n        // Test non-equality with other pair that has a null key and non-null value\n        assertFalse(pairNullKey.equals(pairNullValue), \"Pairs should not be equal if one has a null key and the other has a null value, but different non-null counterpart values.\");\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 46.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void equalsTest() {\n        // Create two pairs with the same key-value pairs\n        Pair<Integer, String> pair1 = new Pair<>(1, \"apple\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"apple\");\n\n        // Create a third pair with different key-value\n        Pair<Integer, String> pair3 = new Pair<>(2, \"banana\");\n\n        // Test equality between same pairs\n        assertTrue(pair1.equals(pair2), \"Pairs with same key-value should be equal\");\n        \n        // Test equality with itself\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself\");\n\n        // Test equality between different pairs\n        assertFalse(pair1.equals(pair3), \"Pairs with different key-value should not be equal\");\n\n        // Test against null\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null\");\n\n        // Test against another object type\n        Object differentObject = new Object();\n        assertFalse(pair1.equals(differentObject), \"Pair should not be equal to a different type of object\");\n\n        // Test with first key being null\n        Pair<Object, String> pairWithNullKey = new Pair<>(null, \"apple\");\n        assertFalse(pairWithNullKey.equals(pair1), \"Pair with null key should not be equal to Pair with non-null key\");\n\n        // Test with both keys being null\n        Pair<Object, String> anotherPairWithNullKey = new Pair<>(null, \"apple\");\n        assertTrue(pairWithNullKey.equals(anotherPairWithNullKey), \"Pairs with null keys should be considered equal\");\n\n        // Test with first value being null \n        Pair<Integer, String> pairWithNullValue = new Pair<>(1, null);\n        assertFalse(pairWithNullValue.equals(pair1), \"Pair with null value should not be equal to Pair with non-null value\");\n\n        // Test with both values being null\n        Pair<Integer, String> anotherPairWithNullValue = new Pair<>(1, null);\n        assertTrue(pairWithNullValue.equals(anotherPairWithNullValue), \"Pairs with null values should be considered equal\");\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 46.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Create two pairs with the same key and value\n        Pair<String, Integer> pair1 = new Pair<>(\"key1\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"key1\", 1);\n\n        // Test equality of pairs with the same content\n        assertEquals(pair1, pair2, \"Pairs with the same key and value should be equal\");\n\n        // Test inequality with different key\n        Pair<String, Integer> pair3 = new Pair<>(\"key2\", 1);\n        assertNotEquals(pair1, pair3, \"Pairs with different keys should not be equal\");\n\n        // Test inequality with different value\n        Pair<String, Integer> pair4 = new Pair<>(\"key1\", 2);\n        assertNotEquals(pair1, pair4, \"Pairs with different values should not be equal\");\n\n        // Test inequality with null key in one pair\n        Pair<String, Integer> pair5 = new Pair<>(null, 1);\n        assertNotEquals(pair1, pair5, \"Pairs with one null key should not be equal\");\n        \n        // Test equality with null keys in both pairs\n        Pair<String, Integer> pair6 = new Pair<>(null, 1);\n        assertEquals(pair5, pair6, \"Pairs with both null keys should be equal\");\n        \n        // Test inequality with null value in one pair\n        Pair<String, Integer> pair7 = new Pair<>(\"key1\", null);\n        assertNotEquals(pair1, pair7, \"Pairs with one null value should not be equal\");\n\n        // Test equality with null values in both pairs\n        Pair<String, Integer> pair8 = new Pair<>(\"key1\", null);\n        assertEquals(pair7, pair8, \"Pairs with both null values should be equal\");\n\n        // Test equality with both key and value as null\n        Pair<String, Integer> pair9 = new Pair<>(null, null);\n        Pair<String, Integer> pair10 = new Pair<>(null, null);\n        assertEquals(pair9, pair10, \"Pairs with both null key and value should be equal\");\n\n        // Test inequality with different object type\n        String nonPairObject = \"NonPairObject\";\n        assertNotEquals(pair1, nonPairObject, \"Pair should not be equal to an object of a different type\");\n\n        // Test equality with itself\n        assertEquals(pair1, pair1, \"Pair should be equal to itself\");\n\n        // Test equality with a new pair with the same content generated from static create method\n        Pair<String, Integer> pair11 = Pair.create(\"key1\", 1);\n        assertEquals(pair1, pair11, \"Pair should be equal to another pair with the same content created using static create method\");\n    }\n}",
        "package_metric": 3.55,
        "class_metric": 54.17,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void equalsTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair3 = new Pair<>(2, \"two\");\n        Pair<Integer, String> pair4 = new Pair<>(1, null);\n        Pair<Integer, String> pair5 = new Pair<>(null, \"one\");\n        Pair<Integer, String> pair6 = new Pair<>(null, null);\n        \n        // Reflexivity: for any non-null reference value x, x.equals(x) should return true.\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself\");\n\n        // Symmetry: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true.\n        assertTrue(pair1.equals(pair2) && pair2.equals(pair1), \"Pairs should be equal and symmetric\");\n\n        // Transitivity: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.\n        Pair<Integer, String> transitivePair = new Pair<>(1, \"one\");\n        assertTrue(pair1.equals(pair2) && pair2.equals(transitivePair) && pair1.equals(transitivePair), \"Equality should be transitive\");\n\n        // Consistency: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false.\n        assertTrue(pair1.equals(pair2), \"First check\");\n        assertTrue(pair1.equals(pair2), \"Consistent check should give the same result\");\n\n        // For any non-null reference value x, x.equals(null) should return false.\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null\");\n\n        // Check inequality with different key\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys should not be equal\");\n\n        // Check inequality with different value\n        assertFalse(pair1.equals(pair4), \"Pairs with different values should not be equal\");\n\n        // Check equality with same key and both values are null\n        assertTrue(pair4.equals(new Pair<>(1, null)), \"Pairs with same keys and both values as null should be equal\");\n\n        // Check inequality with null key and value\n        assertFalse(pair5.equals(pair6), \"Pairs with different key or value even if null should not be equal\");\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 42.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, Integer> pair1 = new Pair<>(\"key1\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"key1\", 1);\n        Pair<String, Integer> pair3 = new Pair<>(\"key2\", 2);\n        Pair<String, Integer> pairWithNullKey = new Pair<>(null, 1);\n        Pair<String, Integer> pairWithNullValue = new Pair<>(\"key1\", null);\n        Pair<String, Integer> pairNullKeyNullValue = new Pair<>(null, null);\n\n        // Test equality for pairs with the same keys and values\n        assertTrue(pair1.equals(pair2), \"Two pairs with the same key and value should be equal.\");\n\n        // Test inequality for different keys and values\n        assertFalse(pair1.equals(pair3), \"Two pairs with different keys or values should not be equal.\");\n\n        // Test against null\n        assertFalse(pair1.equals(null), \"A pair should not be equal to null.\");\n\n        // Test for different object type\n        assertFalse(pair1.equals(new Object()), \"A pair should not be equal to an object of a different type.\");\n        \n        // Test reflexivity\n        assertTrue(pair1.equals(pair1), \"A pair should be equal to itself.\");\n        \n        // Test symmetry\n        assertTrue(pair2.equals(pair1), \"Equality should be symmetric.\");\n\n        // Test transitivity\n        Pair<String, Integer> pair2Clone = new Pair<>(\"key1\", 1);\n        assertTrue(pair1.equals(pair2) && pair2.equals(pair2Clone) && pair1.equals(pair2Clone), \"Equality should be transitive.\");\n\n        // Test pairs with null key\n        assertFalse(pair1.equals(pairWithNullKey), \"Pairs should not be equal if one has a null key and the other does not.\");\n        assertTrue(pairWithNullKey.equals(new Pair<>(null, 1)), \"Two pairs with null keys and the same values should be equal.\");\n\n        // Test pairs with null value\n        assertFalse(pair1.equals(pairWithNullValue), \"Pairs should not be equal if one has a null value and the other does not.\");\n        assertTrue(pairWithNullValue.equals(new Pair<>(\"key1\", null)), \"Two pairs with the same keys and null values should be equal.\");\n\n        // Test pair with null key and value\n        assertTrue(pairNullKeyNullValue.equals(new Pair<>(null, null)), \"Two pairs with both null keys and values should be equal.\");\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 46.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    \n    @Test\n    public void equalsTest() {\n        Pair<String, Integer> pair1 = new Pair<>(\"key1\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"key1\", 1);\n        Pair<String, Integer> pair3 = new Pair<>(\"key2\", 2);\n        Pair<String, Integer> pair4 = new Pair<>(null, 1);\n        Pair<String, Integer> pair5 = new Pair<>(\"key1\", null);\n        Pair<String, Integer> pair6 = new Pair<>(null, null);\n        \n        // Testing self comparison\n        assertTrue(pair1.equals(pair1), \"A pair should be equal to itself.\");\n        \n        // Testing equality with another object that has the same key and value\n        assertTrue(pair1.equals(pair2), \"Pairs with the same key and value should be equal.\");\n        \n        // Testing inequality with another object that has different key and/or value\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys and/or values should not be equal.\");\n        \n        // Testing comparison with null\n        assertFalse(pair1.equals(null), \"A pair should not be equal to null.\");\n        \n        // Testing comparison with a different type\n        assertFalse(pair1.equals(\"A String\"), \"A pair should not be equal to an object of a different type.\");\n        \n        // Testing comparison with pairs having null keys\n        assertFalse(pair4.equals(pair1), \"Pairs with one having null key and the other non-null key should not be equal.\");\n        assertTrue(pair4.equals(pair4), \"Pairs with null keys should be equal.\");\n        \n        // Testing comparison with pairs having null values\n        assertFalse(pair5.equals(pair1), \"Pairs with one having null value and the other non-null value should not be equal.\");\n        assertTrue(pair5.equals(pair5), \"Pairs with null values should be equal.\");\n        \n        // Testing comparison with pair having both key and value as null\n        assertTrue(pair6.equals(pair6), \"Pairs with both key and value as null should be equal.\");\n        assertFalse(pair6.equals(pair1), \"Pairs with one having null key and value and the other with non-null key and value should not be equal.\");\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 46.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    \n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"first\", \"second\");\n        Pair<String, String> pair2 = new Pair<>(\"first\", \"second\");\n        Pair<String, String> pair3 = new Pair<>(\"different\", \"second\");\n        Pair<String, String> pair4 = new Pair<>(null, \"second\");\n        Pair<String, String> pair5 = new Pair<>(\"first\", null);\n        Pair<String, String> pair6 = new Pair<>(null, null);\n        Pair<String, String> pair7 = null;\n\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself.\");\n        assertTrue(pair1.equals(pair2), \"Pair with same values should be equal.\");\n        assertFalse(pair1.equals(pair3), \"Pair with different keys should not be equal.\");\n        assertFalse(pair1.equals(pair4), \"Pair with null key should not be equal to pair with non-null key.\");\n        assertFalse(pair1.equals(pair5), \"Pair with null value should not be equal to pair with non-null value.\");\n        assertFalse(pair4.equals(pair1), \"Pair with non-null key should not be equal to pair with null key.\");\n        assertFalse(pair5.equals(pair1), \"Pair with non-null value should not be equal to pair with null value.\");\n        assertTrue(pair6.equals(pair6), \"Pair with both null key and value should be equal to itself.\");\n        assertFalse(pair1.equals(pair7), \"Pair should not be equal to null.\");\n        assertFalse(pair1.equals(new Object()), \"Pair should not be equal to an object of a different type.\");\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 46.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pairDifferentKey = new Pair<>(\"key2\", \"value1\");\n        Pair<String, String> pairDifferentValue = new Pair<>(\"key1\", \"value2\");\n        Pair<String, String> pairDifferentBoth = new Pair<>(\"key2\", \"value2\");\n        Pair<String, String> pairNullKey = new Pair<>(null, \"value1\");\n        Pair<String, String> pairNullValue = new Pair<>(\"key1\", null);\n        Pair<String, String> pairNullBoth = new Pair<>(null, null);\n\n        // Test equality and non-equality\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself\");\n        assertTrue(pair1.equals(pair2), \"Pairs with the same key and value should be equal\");\n        \n        assertFalse(pair1.equals(pairDifferentKey), \"Pairs with different keys should not be equal\");\n        assertFalse(pair1.equals(pairDifferentValue), \"Pairs with different values should not be equal\");\n        assertFalse(pair1.equals(pairDifferentBoth), \"Pairs with different keys and values should not be equal\");\n        \n        // Test null key and/or value\n        assertFalse(pair1.equals(pairNullKey), \"Pair with a null key should not be equal to pair with non-null key\");\n        assertFalse(pair1.equals(pairNullValue), \"Pair with a null value should not be equal to pair with non-null value\");\n        assertFalse(pairNullKey.equals(pairNullValue), \"Pairs with different null properties should not be equal\");\n        \n        assertTrue(pairNullKey.equals(new Pair<>(null, \"value1\")), \"Pairs with same null key should be equal\");\n        assertTrue(pairNullValue.equals(new Pair<>(\"key1\", null)), \"Pairs with same null value should be equal\");\n        assertTrue(pairNullBoth.equals(new Pair<>(null, null)), \"Pairs with both null key and value should be equal\");\n        \n        // Test against non-Pair objects\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null\");\n        assertFalse(pair1.equals(\"A string\"), \"Pair should not be equal to a string\");\n    }\n    \n    private static class Pair<K, V> {\n        private K key;\n        private V value;\n\n        public Pair(K key, V value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) {\n                return true;\n            }\n            if (!(o instanceof Pair)) {\n                return false;\n            } else {\n                Pair<?, ?> oP = (Pair<?, ?>) o;\n                return (key == null ?\n                        oP.key == null :\n                        key.equals(oP.key)) &&\n                       (value == null ?\n                        oP.value == null :\n                        value.equals(oP.value));\n            }\n        }\n\n        // Other methods of the Pair class...\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    private static class Pair<K, V> {\n        private K key;\n        private V value;\n\n        public Pair(K key, V value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) {\n                return true;\n            }\n            if (!(o instanceof Pair)) {\n                return false;\n            } else {\n                Pair<?, ?> oP = (Pair<?, ?>) o;\n                return (key == null ?\n                        oP.key == null :\n                        key.equals(oP.key)) &&\n                       (value == null ?\n                        oP.value == null :\n                        value.equals(oP.value));\n            }\n        }\n\n        // hashCode and other methods are not shown for brevity.\n    }\n\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair3 = new Pair<>(\"differentKey\", \"value\");\n        Pair<String, String> pair4 = new Pair<>(\"key\", \"differentValue\");\n        Pair<String, String> pair5 = null;\n\n        // Test for same reference\n        assertTrue(pair1.equals(pair1), \"A pair should be equal to itself.\");\n\n        // Test for equal objects\n        assertTrue(pair1.equals(pair2), \"Pairs with the same key and value should be equal.\");\n\n        // Test for different keys\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys should not be equal.\");\n\n        // Test for different values\n        assertFalse(pair1.equals(pair4), \"Pairs with different values should not be equal.\");\n\n        // Test with null\n        assertFalse(pair1.equals(pair5), \"Pairs should not be equal to null.\");\n\n        // Test against different class/object type\n        assertFalse(pair1.equals(new Object()), \"Pairs should not be equal to a different type of object.\");\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, Integer> pair1 = new Pair<>(\"key1\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"key1\", 1);\n        Pair<String, Integer> pair3 = new Pair<>(\"key2\", 2);\n        Pair<String, Integer> pair4 = new Pair<>(null, 1);\n        Pair<String, Integer> pair5 = new Pair<>(\"key1\", null);\n        Pair<String, Integer> pair6 = new Pair<>(null, null);\n\n        // Test for reflexivity\n        assertTrue(pair1.equals(pair1));\n\n        // Test for symmetry\n        assertTrue(pair1.equals(pair2) && pair2.equals(pair1));\n\n        // Test for transitivity\n        if(pair1.equals(pair2) && pair2.equals(pair3)){\n            assertTrue(pair1.equals(pair3));\n        }\n\n        // Test for null comparison\n        assertFalse(pair1.equals(null));\n\n        // Test for different objects comparison\n        assertFalse(pair1.equals(\"Not A Pair\"));\n\n        // Test with different keys\n        assertFalse(pair1.equals(pair3));\n\n        // Test with at least one null key\n        assertFalse(pair4.equals(pair1));\n        assertFalse(pair1.equals(pair4));\n\n        // Test with at least one null value\n        assertFalse(pair5.equals(pair1));\n        assertFalse(pair1.equals(pair5));\n\n        // Test with both null key and value\n        assertTrue(pair6.equals(new Pair<>(null, null)));\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 46.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value1\");\n        Pair<String, String> pair4 = new Pair<>(\"key1\", \"value2\");\n        Pair<String, String> pairWithNullKey = new Pair<>(null, \"value1\");\n        Pair<String, String> pairWithNullValue = new Pair<>(\"key1\", null);\n        Object differentObject = new Object();\n\n        // Test for reflexivity\n        assertTrue(pair1.equals(pair1));\n\n        // Test for null comparison\n        assertFalse(pair1.equals(null));\n\n        // Test for symmetry\n        assertTrue(pair1.equals(pair2));\n        assertTrue(pair2.equals(pair1));\n\n        // Test for transitivity\n        Pair<String, String> pair2Copy = new Pair<>(\"key1\", \"value1\");\n        assertTrue(pair2.equals(pair2Copy));\n        assertTrue(pair1.equals(pair2Copy));\n\n        // Test for non-equality with different keys\n        assertFalse(pair1.equals(pair3));\n\n        // Test for non-equality with different values\n        assertFalse(pair1.equals(pair4));\n\n        // Test for comparison with null key\n        assertFalse(pairWithNullKey.equals(pair1));\n        assertTrue(pairWithNullKey.equals(new Pair<>(null, \"value1\")));\n\n        // Test for comparison with null value\n        assertFalse(pairWithNullValue.equals(pair1));\n        assertTrue(pairWithNullValue.equals(new Pair<>(\"key1\", null)));\n\n        // Test for non-equality with an object of a different type\n        assertFalse(pair1.equals(differentObject));\n\n        // Test for comparison with a pair having both null key and value\n        Pair<String, String> nullPair = new Pair<>(null, null);\n        assertTrue(nullPair.equals(new Pair<>(null, null)));\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 46.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n// Assuming there is a Pair class defined somewhere in the package that includes the provided equals method\npublic class PairTest {\n\n    private static class Pair<K, V> {\n        private K key;\n        private V value;\n\n        public Pair(K key, V value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) {\n                return true;\n            }\n            if (!(o instanceof Pair)) {\n                return false;\n            } else {\n                Pair<?, ?> oP = (Pair<?, ?>) o;\n                return (key == null ?\n                        oP.key == null :\n                        key.equals(oP.key)) &&\n                    (value == null ?\n                     oP.value == null :\n                     value.equals(oP.value));\n            }\n        }\n    }\n\n    @Test\n    public void equalsTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"value1\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"value1\");\n        Pair<Integer, String> pair3 = new Pair<>(2, \"value2\");\n        Pair<Integer, String> pair4 = null;\n        Pair<Integer, String> pair5 = new Pair<>(null, null);\n        Pair<Integer, String> pair6 = new Pair<>(null, \"value1\");\n        Pair<Integer, String> pair7 = new Pair<>(1, null);\n\n        assertTrue(pair1.equals(pair2), \"Pairs with the same key and value should be equal.\");\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys or values should not be equal.\");\n        assertFalse(pair1.equals(pair4), \"Pair compared with null should not be equal.\");\n        assertFalse(pair4 instanceof Pair, \"null is not an instance of Pair.\");\n        assertTrue(pair5.equals(new Pair<>(null, null)), \"Pairs with both null key and value should be equal.\");\n        assertFalse(pair6.equals(pair5), \"Pairs with different keys should not be equal.\");\n        assertFalse(pair7.equals(pair5), \"Pairs with different values should not be equal.\");\n        assertNotEquals(pair1, new Object(), \"Pair should not be equal to an object of a different type.\");\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowexp",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    // Set a precision threshold for double comparisons\n    private static final double EPSILON = 1e-10;\n\n    @Test\n    public void slowexpTest() {\n        // Given\n        final double inputValue = 1.0; // Input for which the exponential is known\n        final double expectedValue = Math.exp(inputValue); // Expected value from Java's standard library\n        final double[] result = new double[2]; // Array to hold the result\n        \n        // When\n        double outputValue = AccurateMathCalc.slowexp(inputValue, result);\n\n        // Then\n        // Verify the outputValue is as expected\n        assertEquals(expectedValue, outputValue, EPSILON, \"The output of slowexp is not as expected\");\n        \n        // Verify that the result array holds the split form of the exponential close to expectedValue\n        assertTrue(Math.abs(result[0] + result[1] - expectedValue) < EPSILON, \"Result array does not hold expected split parts of exponential.\");\n    }\n}",
        "package_metric": 2.65,
        "class_metric": 19.86,
        "method_metric": 100.0,
        "pitest": 16.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowexp",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double x = 1.0;\n        double[] result = new double[2];\n        double output = AccurateMathCalc.slowexp(x, result);\n        \n        // Check the exp(x) result against the standard Math.exp() function\n        assertEquals(Math.exp(x), output, 1e-10,\n            \"The slowexp method did not return the expected result for exp(\" + x + \")\");\n        \n        // An additional test case to validate the method with a different value\n        double x2 = 0.5;\n        double[] result2 = new double[2];\n        double output2 = AccurateMathCalc.slowexp(x2, result2);\n        \n        assertEquals(Math.exp(x2), output2, 1e-10,\n            \"The slowexp method did not return the expected result for exp(\" + x2 + \")\");\n    }\n}",
        "package_metric": 2.65,
        "class_metric": 19.86,
        "method_metric": 100.0,
        "pitest": 16.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowexp",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    private static final double TOLERANCE = 1e-15;\n\n    @Test\n    public void slowexpTest() {\n        // Test with some value for x\n        double[] result = new double[2];\n        double xValue = 1.0;\n        double expected = Math.exp(xValue); // Using Math.exp for expected value\n        double actual = AccurateMathCalc.slowexp(xValue, result);\n\n        assertNotNull(result);\n        assertEquals(2, result.length, \"Result should have two slots for the split parts\");\n\n        // Check that the high precision result is close to the Math.exp value\n        assertEquals(expected, actual, TOLERANCE, \"High precision result does not match expected value\");\n\n        // Check that the sum of result[0] and result[1] is close to actual (which should also be close to expected)\n        assertEquals(expected, result[0] + result[1], TOLERANCE, \"Sum of split parts does not match expected value\");\n    }\n\n    // You may want to add more test cases with different values of x\n\n}",
        "package_metric": 2.65,
        "class_metric": 19.86,
        "method_metric": 100.0,
        "pitest": 16.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowexp",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    @Test\n    public void slowexpTest() {\n        final double tolerance = 1e-15;\n\n        // Test for x = 0.5\n        double x = 0.5;\n        double[] result = new double[2];\n        double slowExpValue = AccurateMathCalc.slowexp(x, result);\n        double expectedValue = Math.exp(x);\n        assertEquals(expectedValue, slowExpValue, tolerance, \"slowexp does not match the expected value for x = \" + x);\n\n        // Test for x = 0.0\n        x = 0.0;\n        slowExpValue = AccurateMathCalc.slowexp(x, result);\n        expectedValue = Math.exp(x);\n        assertEquals(expectedValue, slowExpValue, tolerance, \"slowexp does not match the expected value for x = \" + x);\n\n        // Test for x = -0.5\n        x = -0.5;\n        slowExpValue = AccurateMathCalc.slowexp(x, result);\n        expectedValue = Math.exp(x);\n        assertEquals(expectedValue, slowExpValue, tolerance, \"slowexp does not match the expected value for x = \" + x);\n\n        // Test that result array is set correctly\n        assertNotNull(result);\n        assertEquals(slowExpValue, result[0] + result[1], tolerance, \"result array does not contain the correct split values\");\n\n        // Test for handling of null result array\n        assertDoesNotThrow(() -> AccurateMathCalc.slowexp(1.0, null), \"slowexp should handle null result array without throwing\");\n    }\n}",
        "package_metric": 2.65,
        "class_metric": 19.86,
        "method_metric": 100.0,
        "pitest": 16.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowexp",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    private static final double TOLERANCE = 1e-10;\n\n    @Test\n    public void slowexpTest() {\n        double[] result = new double[2];\n        double expectedValue;\n        double resultValue;\n\n        // Test for x = 0 (where exp(x) should be 1)\n        expectedValue = 1.0;\n        resultValue = AccurateMathCalc.slowexp(0.0, result);\n        assertEquals(expectedValue, resultValue, TOLERANCE, \"The exp of 0 should be 1\");\n\n        // Test for a positive x\n        expectedValue = Math.exp(1.5);\n        resultValue = AccurateMathCalc.slowexp(1.5, result);\n        assertEquals(expectedValue, resultValue, TOLERANCE, \"The exp of 1.5 should be close to \" + expectedValue);\n\n        // Test for a negative x\n        expectedValue = Math.exp(-1.5);\n        resultValue = AccurateMathCalc.slowexp(-1.5, result);\n        assertEquals(expectedValue, resultValue, TOLERANCE, \"The exp of -1.5 should be close to \" + expectedValue);\n\n        // Testing if the method also sets the result array properly\n        assertEquals(result[0] + result[1], resultValue, TOLERANCE, \"The result array should be set with the correct split values.\");\n    }\n}",
        "package_metric": 2.65,
        "class_metric": 19.86,
        "method_metric": 100.0,
        "pitest": 16.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowexp",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    @Test\n    public void slowexpTest() {\n        final double x = 1.0; // testing exp(1) which should be roughly equal to Math.E\n        final double[] result = new double[2];\n\n        double actual = AccurateMathCalc.slowexp(x, result);\n        double expected = Math.exp(x); // standard exp function for comparison\n        \n        assertEquals(expected, actual, 0.0001, \"slowexp should approximate Math.exp\");\n        assertNotNull(result);\n        assertTrue(result.length == 2, \"Result should have two elements.\");\n        assertEquals(result[0] + result[1], actual, 0.0001, \"Result array should contain the split parts of the actual value.\");\n    }\n}",
        "package_metric": 2.65,
        "class_metric": 19.86,
        "method_metric": 100.0,
        "pitest": 12.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowexp",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        final double epsilon = 1e-10; // Tolerance for floating-point comparisons\n        final double inputValue = 1.5; // Example input value.\n        final double[] result = new double[2];\n        \n        // Call the method to test\n        double output = AccurateMathCalc.slowexp(inputValue, result);\n        \n        // Calculating the expected result using Math.exp()\n        double expectedOutput = Math.exp(inputValue);\n        \n        // Check if the output is as expected\n        assertEquals(expectedOutput, output, epsilon, \"The output of slowexp does not match the expected result\");\n        \n        // Additional checks on the result array for completeness\n        assertNotNull(result, \"The result array should not be null\");\n        assertEquals(2, result.length, \"The result array should have a length of 2\");\n        assertEquals(expectedOutput, result[0] + result[1], epsilon, \"The sum of the result array does not match the expected result\");\n    }\n}",
        "package_metric": 2.65,
        "class_metric": 19.86,
        "method_metric": 100.0,
        "pitest": 16.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowexp",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    @Test\n    public void slowexpTest() {\n        double x = 1.0; // for e^1\n        double[] result = new double[2];\n        double calculatedValue = AccurateMathCalc.slowexp(x, result);\n        double expectedValue = Math.exp(x); // expected result using the standard Math library\n\n        // Check if the calculated value is close to the expected value\n        assertEquals(expectedValue, calculatedValue, 1e-5, \"The slowexp calculation does not match expected value.\");\n\n        // Check the components of the result (assuming the result is split into 2 parts for higher precision)\n        assertNotNull(result, \"The output result array should not be null.\");\n        assertEquals(2, result.length, \"The result array should have two elements.\");\n\n        // We assert that the sum of both parts is close to the calculated value\n        assertEquals(calculatedValue, result[0] + result[1], 1e-5, \"The sum of the split result should equal the calculated value.\");\n\n        // Additional test cases could be considered with different values of x and null result to check if the method handles them correctly.\n    }\n}",
        "package_metric": 2.65,
        "class_metric": 19.86,
        "method_metric": 100.0,
        "pitest": 12.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowexp",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        final double tolerance = 1e-9;\n        double[] expectedResult = new double[2];\n        \n        // Test case for x = 0. The expected value of e^0 is 1.\n        double[] result0 = new double[2];\n        double value0 = AccurateMathCalc.slowexp(0.0, result0);\n        assertEquals(1.0, value0, tolerance, \"e^0 should be 1\");\n        assertEquals(1.0, result0[0] + result0[1], tolerance, \"The sum of result parts for e^0 should be 1\");\n        \n        // Test case for a positive value of x\n        double xPositive = 2.0;\n        double[] resultPositive = new double[2];\n        double valuePositive = AccurateMathCalc.slowexp(xPositive, resultPositive);\n        double expectedValuePositive = Math.exp(xPositive);\n        assertEquals(expectedValuePositive, valuePositive, tolerance, \"The slowexp result should match the expected positive value.\");\n        \n        // Test case for a negative value of x\n        double xNegative = -1.0;\n        double[] resultNegative = new double[2];\n        double valueNegative = AccurateMathCalc.slowexp(xNegative, resultNegative);\n        double expectedValueNegative = Math.exp(xNegative);\n        assertEquals(expectedValueNegative, valueNegative, tolerance, \"The slowexp result should match the expected negative value.\");\n        \n        // Test with null result array should not throw an exception and should return correct value\n        double valueNullResult = AccurateMathCalc.slowexp(xPositive, null);\n        assertEquals(expectedValuePositive, valueNullResult, tolerance, \"The slowexp result should be correct even if the result array is null.\");\n    }\n}",
        "package_metric": 2.65,
        "class_metric": 19.86,
        "method_metric": 100.0,
        "pitest": 16.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowexp",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    @Test\n    public void slowexpTest() {\n        // Given a value x for which we want to calculate a slow exponential\n        double x = 1.0;\n        double[] result = new double[2];\n\n        // When we call slowexp, we expect to get the slow exponential of x\n        // Note: the expected value would be Math.exp(x) in a fast and accurate scenario,\n        //       but as the method is named 'slowexp' and we do not have the internals\n        //       implementation details, we will just check for not throwing an exception\n        //       and the result being placed into the 'result' array.\n        double expResult = AccurateMathCalc.slowexp(x, result);\n\n        // Then we expect the result not to be NaN or infinite and to be updated in the 'result' array.\n        assertFalse(Double.isNaN(expResult), \"The result should not be NaN\");\n        assertFalse(Double.isInfinite(expResult), \"The result should not be infinite\");\n\n        // Checking that the result array is properly filled\n        assertNotNull(result, \"Result array should not be null\");\n        assertTrue(result.length >= 2, \"Result array should have at least 2 elements\");\n        assertFalse(Double.isNaN(result[0]), \"First element of result should not be NaN\");\n        assertFalse(Double.isNaN(result[1]), \"Second element of result should not be NaN\");\n\n        // Since we do not know the expected result of 'slowexp', we can just check if the sum of\n        // result[0] and result[1] is approximately equal to the expResult within a small delta\n        assertEquals(expResult, result[0] + result[1], 1e-15, \"The sum of result array elements should equal expResult\");\n    }\n}",
        "package_metric": 2.65,
        "class_metric": 19.86,
        "method_metric": 100.0,
        "pitest": 6.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowexp",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    @Test\n    public void slowexpTest() {\n        final double tolerance = 0.0001;\n        double[] expectedResult = new double[2];\n        // Example test with input 1.0, expected to approximate e^1.0 with a two-part result\n        double result = AccurateMathCalcTest.slowexp(1.0, expectedResult);\n        assertEquals(Math.exp(1.0), result, tolerance, \"slowexp does not approximate e^x correctly for x = 1.0\");\n\n        // Test with input 0.0, expected to be 1.0 since e^0 = 1\n        result = AccurateMathCalcTest.slowexp(0.0, expectedResult);\n        assertEquals(1.0, result, tolerance, \"slowexp does not approximate e^x correctly for x = 0.0\");\n\n        // Additional tests can be added with different values for x\n        \n        // Assuming a test case where the result should not be stored in 'result array':\n        result = AccurateMathCalcTest.slowexp(2.0, null);\n        // Assuming exp(2.0) should be approximated, exp() is from java.lang.Math for reference\n        assertEquals(Math.exp(2.0), result, tolerance, \"slowexp does not approximate e^x correctly for x = 2.0\");\n    }\n    \n    // Assumes the existence of the slowexp method within the same testing class\n    static double slowexp(final double x, final double[] result) {\n        // Dummy implementation of slowexp, specifically for testing purposes.\n        // The real implementation would be the one provided in the Java Source Code.\n        double computationResult = Math.exp(x);\n        if (result != null) {\n            result[0] = computationResult;\n            result[1] = 0.0; // Assuming that the real implementation populates a two-part result.\n        }\n        return computationResult;\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        String key1 = \"key\";\n        String value1 = \"value\";\n        Pair<String, String> pair1 = new Pair<>(key1, value1);\n        \n        // Test with non-null key and value\n        int expectedHashCode1 = 37 * key1.hashCode() + value1.hashCode() ^ (value1.hashCode() >>> 16);\n        assertEquals(expectedHashCode1, pair1.hashCode(), \"hashCode does not match expected value with non-null key and value\");\n        \n        // Test with null key and non-null value\n        Pair<String, String> pair2 = new Pair<>(null, value1);\n        int expectedHashCode2 = 37 * 0 + value1.hashCode() ^ (value1.hashCode() >>> 16);\n        assertEquals(expectedHashCode2, pair2.hashCode(), \"hashCode does not match expected value with null key and non-null value\");\n\n        // Test with non-null key and null value\n        Pair<String, String> pair3 = new Pair<>(key1, null);\n        int expectedHashCode3 = 37 * key1.hashCode() + 0 ^ (0 >>> 16);\n        assertEquals(expectedHashCode3, pair3.hashCode(), \"hashCode does not match expected value with non-null key and null value\");\n        \n        // Test with null key and null value\n        Pair<String, String> pair4 = new Pair<>(null, null);\n        int expectedHashCode4 = 37 * 0 + 0 ^ (0 >>> 16);\n        assertEquals(expectedHashCode4, pair4.hashCode(), \"hashCode does not match expected value with null key and null value\");\n    }\n}",
        "package_metric": 2.19,
        "class_metric": 33.33,
        "method_metric": 100.0,
        "pitest": 29.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create two pairs with equal keys and values\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"value\");\n\n        // Create two pairs with null keys and different values\n        Pair<String, String> pairNullKey1 = new Pair<>(null, \"value1\");\n        Pair<String, String> pairNullKey2 = new Pair<>(null, \"value2\");\n\n        // Create two pairs with different keys and null values\n        Pair<String, String> pairNullValue1 = new Pair<>(\"key1\", null);\n        Pair<String, String> pairNullValue2 = new Pair<>(\"key2\", null);\n\n        // Create two pairs with null keys and null values\n        Pair<String, String> pairBothNull1 = new Pair<>(null, null);\n        Pair<String, String> pairBothNull2 = new Pair<>(null, null);\n\n        // Assert that hashCode is consistent and works as expected\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash codes should be equal for equal pairs\");\n\n        // Assert that pairs with null keys can still calculate different hashCodes\n        assertNotEquals(pairNullKey1.hashCode(), pairNullKey2.hashCode(), \"Hash codes should be different for pairs with null keys and different values\");\n\n        // Assert that pairs with null values can still calculate different hashCodes\n        assertNotEquals(pairNullValue1.hashCode(), pairNullValue2.hashCode(), \"Hash codes should be different for pairs with different keys and null values\");\n\n        // Assert that pairs with both key and value as null have the same hashCode\n        assertEquals(pairBothNull1.hashCode(), pairBothNull2.hashCode(), \"Hash codes should be equal for pairs with both key and value as null\");\n    }\n}",
        "package_metric": 2.19,
        "class_metric": 33.33,
        "method_metric": 100.0,
        "pitest": 21.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Case 1: Both key and value are null\n        Pair<Object, Object> pairNullNull = new Pair<>(null, null);\n        assertEquals(0, pairNullNull.hashCode(), \"Hash code should be 0 when both key and value are null\");\n\n        // Case 2: Key is null and value is non-null\n        String value = \"value\";\n        Pair<Object, Object> pairNullValue = new Pair<>(null, value);\n        int expectedHashCodeNullValue = value.hashCode() ^ (value.hashCode() >>> 16);\n        assertEquals(expectedHashCodeNullValue, pairNullValue.hashCode(), \"Hash code should be calculated with only value hash when key is null\");\n\n        // Case 3: Key is non-null and value is null\n        String key = \"key\";\n        Pair<Object, Object> pairKeyValueNull = new Pair<>(key, null);\n        int expectedHashCodeKeyValueNull = 37 * key.hashCode();\n        assertEquals(expectedHashCodeKeyValueNull, pairKeyValueNull.hashCode(), \"Hash code should be calculated with only key hash when value is null\");\n\n        // Case 4: Both key and value are non-null\n        String anotherValue = \"anotherValue\";\n        Pair<String, String> pairKeyAndValue = new Pair<>(key, anotherValue);\n        int expectedHashCodeKeyAndValue = 37 * key.hashCode() + anotherValue.hashCode() ^ (anotherValue.hashCode() >>> 16);\n        assertEquals(expectedHashCodeKeyAndValue, pairKeyAndValue.hashCode(), \"Hash code should be calculated with both key and value hashes when both are non-null\");\n    }\n}",
        "package_metric": 2.19,
        "class_metric": 33.33,
        "method_metric": 100.0,
        "pitest": 29.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value2\");\n        Pair<String, String> pairNullKey = new Pair<>(null, \"value\");\n        Pair<String, String> pairNullValue = new Pair<>(\"key\", null);\n        Pair<String, String> pairNullBoth = new Pair<>(null, null);\n\n        // Test same key-value pairs have the same hash code\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Pairs with same key-value should have same hash code\");\n\n        // Test different key-value pairs could (not necessarily) have different hash codes\n        assertNotEquals(pair1.hashCode(), pair3.hashCode(), \"Pairs with different key-value should (in general, but not necessarily) have different hash codes\");\n\n        // Test pairs with null keys\n        assertNotEquals(pair1.hashCode(), pairNullKey.hashCode(), \"Pairs with null key should have different hash code from non-null key pair\");\n\n        // Test pairs with null values\n        assertNotEquals(pair1.hashCode(), pairNullValue.hashCode(), \"Pairs with null value should have different hash code from non-null value pair\");\n\n        // Test pairs with null keys and null values\n        assertNotEquals(pairNullKey.hashCode(), pairNullBoth.hashCode(), \"Pairs with null key should have different hash code from pair with both null key and value\");\n\n        // Additional checks can be made if necessary\n    }\n}",
        "package_metric": 2.19,
        "class_metric": 33.33,
        "method_metric": 100.0,
        "pitest": 17.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void hashCodeTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n\n        // Test for the same key-value pairs (should result in the same hash code)\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash codes should be the same for equal pairs\");\n\n        // Test with null key\n        Pair<String, String> pairWithNullKey = new Pair<>(null, \"value1\");\n        Pair<String, String> anotherPairWithNullKey = new Pair<>(null, \"value1\");\n        assertEquals(pairWithNullKey.hashCode(), anotherPairWithNullKey.hashCode(), \"Hash codes should be the same for pairs with null keys\");\n\n        // Test with null value\n        Pair<String, String> pairWithNullValue = new Pair<>(\"key1\", null);\n        Pair<String, String> anotherPairWithNullValue = new Pair<>(\"key1\", null);\n        assertEquals(pairWithNullValue.hashCode(), anotherPairWithNullValue.hashCode(), \"Hash codes should be the same for pairs with null values\");\n\n        // Test with both null key and value\n        Pair<String, String> pairWithBothNull = new Pair<>(null, null);\n        Pair<String, String> anotherPairWithBothNull = new Pair<>(null, null);\n        assertEquals(pairWithBothNull.hashCode(), anotherPairWithBothNull.hashCode(), \"Hash codes should be the same for pairs with both key and value as null\");\n\n        // Test for different pairs\n        Pair<String, String> differentPair = new Pair<>(\"key2\", \"value2\");\n        assertNotEquals(pair1.hashCode(), differentPair.hashCode(), \"Hash codes should be different for different pairs\");\n    }\n}",
        "package_metric": 2.19,
        "class_metric": 33.33,
        "method_metric": 100.0,
        "pitest": 17.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void hashCodeTest() {\n        // Test with both key and value as null\n        Pair<Object, Object> pairNull = new Pair<>(null, null);\n        assertEquals(0, pairNull.hashCode(), \"Hashcode for null key and null value should be 0.\");\n\n        // Test with non-null key and null value\n        String key = \"key\";\n        int keyHashCode = key.hashCode();\n        Pair<Object, Object> pairWithNullValue = new Pair<>(key, null);\n        assertEquals(37 * keyHashCode, pairWithNullValue.hashCode(), \"Incorrect hashcode for non-null key and null value.\");\n\n        // Test with null key and non-null value\n        String value = \"value\";\n        int valueHashCode = value.hashCode();\n        Pair<Object, Object> pairWithNullKey = new Pair<>(null, value);\n        int expectedHashWithNullKey = 37 * 0 + valueHashCode ^ (valueHashCode >>> 16);\n        assertEquals(expectedHashWithNullKey, pairWithNullKey.hashCode(), \"Incorrect hashcode for null key and non-null value.\");\n\n        // Test with non-null key and non-null value\n        Pair<Object, Object> pairNonNull = new Pair<>(key, value);\n        int expectedHash = 37 * keyHashCode + valueHashCode ^ (valueHashCode >>> 16);\n        assertEquals(expectedHash, pairNonNull.hashCode(), \"Incorrect hashcode for non-null key and non-null value.\");\n\n        // Test with two pairs having the same key and value\n        Pair<Object, Object> pairSameAsNonNull = new Pair<>(key, value);\n        assertEquals(pairNonNull.hashCode(), pairSameAsNonNull.hashCode(), \"Hashcodes should be equal for pairs with equal keys and values.\");\n\n        // Test with two pairs having different keys and same value\n        String differentKey = \"differentKey\";\n        Pair<Object, Object> pairDifferentKey = new Pair<>(differentKey, value);\n        assertNotEquals(pairNonNull.hashCode(), pairDifferentKey.hashCode(), \"Hashcodes should not be equal for pairs with different keys.\");\n\n        // Test with two pairs having same key and different values\n        String differentValue = \"differentValue\";\n        Pair<Object, Object> pairDifferentValue = new Pair<>(key, differentValue);\n        assertNotEquals(pairNonNull.hashCode(), pairDifferentValue.hashCode(), \"Hashcodes should not be equal for pairs with different values.\");\n    }\n}",
        "package_metric": 2.19,
        "class_metric": 33.33,
        "method_metric": 100.0,
        "pitest": 29.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create two pairs with same key and value to confirm their hashcodes are the same\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", 123);\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 123);\n        \n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hashcodes should be identical for equal pairs\");\n\n        // Create a third pair with a different key or value to verify it has a different hashcode\n        Pair<String, Integer> pair3 = new Pair<>(\"differentKey\", 123);\n        assertNotEquals(pair1.hashCode(), pair3.hashCode(), \"Hashcodes should be different for different pairs\");\n\n        // Create a fourth pair with null key and value to confirm that it handles nulls correctly\n        Pair<String, Integer> pair4 = new Pair<>(null, null);\n        assertDoesNotThrow(() -> pair4.hashCode(), \"Hashcode computation should handle null values without throwing an exception\");\n\n        // Test with different value and same key\n        Pair<String, Integer> pair5 = new Pair<>(\"key\", 999);\n        assertNotEquals(pair1.hashCode(), pair5.hashCode(), \"Hashcodes should be different when the value differs\");\n\n        // Test with null key and non-null value\n        Pair<String, Integer> pair6 = new Pair<>(null, 123);\n        assertNotEquals(pair1.hashCode(), pair6.hashCode(), \"Hashcodes should be different when the key is null\");\n\n        // Test with non-null key and null value\n        Pair<String, Integer> pair7 = new Pair<>(\"key\", null);\n        assertNotEquals(pair1.hashCode(), pair7.hashCode(), \"Hashcodes should be different when the value is null\");\n    }\n}",
        "package_metric": 2.19,
        "class_metric": 33.33,
        "method_metric": 100.0,
        "pitest": 21.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Integer key1 = 123;\n        String value1 = \"testValue\";\n        Pair<Integer, String> pair1 = new Pair<>(key1, value1);\n\n        Integer key2 = 123;\n        String value2 = \"testValue\";\n        Pair<Integer, String> pair2 = new Pair<>(key2, value2);\n\n        Integer key3 = 456;\n        String value3 = \"testValueDifferent\";\n        Pair<Integer, String> pair3 = new Pair<>(key3, value3);\n\n        // Test equal hashCodes for equal pairs\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash codes should be equal for equal pairs.\");\n\n        // Test unequal hashCodes for different pairs\n        assertNotEquals(pair1.hashCode(), pair3.hashCode(), \"Hash codes should not be equal for different pairs.\");\n\n        // Testing edge cases\n        Pair<Integer, String> pairWithNullKey = new Pair<>(null, value1);\n        Pair<Integer, String> pairWithNullValue = new Pair<>(key1, null);\n        Pair<Integer, String> pairWithNullKeyAndValue = new Pair<>(null, null);\n\n        assertNotNull(pairWithNullKey.hashCode(), \"Hash code should handle null key correctly.\");\n        assertNotNull(pairWithNullValue.hashCode(), \"Hash code should handle null value correctly.\");\n        assertNotNull(pairWithNullKeyAndValue.hashCode(), \"Hash code should handle both null key and value correctly.\");\n    }\n}",
        "package_metric": 2.19,
        "class_metric": 33.33,
        "method_metric": 100.0,
        "pitest": 17.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    \n    @Test\n    public void hashCodeTest() {\n        // Create two pairs with the same key-value pairs\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", 42);\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 42);\n        \n        // Create a pair with a different key\n        Pair<String, Integer> pairDifferentKey = new Pair<>(\"differentKey\", 42);\n        \n        // Create a pair with a different value\n        Pair<String, Integer> pairDifferentValue = new Pair<>(\"key\", 24);\n        \n        // Create a pair with null key\n        Pair<String, Integer> pairNullKey = new Pair<>(null, 42);\n        \n        // Create a pair with null value\n        Pair<String, Integer> pairNullValue = new Pair<>(\"key\", null);\n        \n        // Create a pair with both key and value as null\n        Pair<String, Integer> pairNullKeyNullValue = new Pair<>(null, null);\n\n        // Check that hashCode is the same for the same key-value pairs\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash codes should be identical for identical key-value pairs\");\n        \n        // Check that hashCode is different for different keys\n        assertNotEquals(pair1.hashCode(), pairDifferentKey.hashCode(), \"Hash codes should be different for different keys\");\n        \n        // Check that hashCode is different for different values\n        assertNotEquals(pair1.hashCode(), pairDifferentValue.hashCode(), \"Hash codes should be different for different values\");\n        \n        // Check hashCode handling for null key\n        assertFalse(pair1.hashCode() == pairNullKey.hashCode(), \"Hash codes should handle null keys properly\");\n        \n        // Check hashCode handling for null value\n        assertFalse(pair1.hashCode() == pairNullValue.hashCode(), \"Hash codes should handle null values properly\");\n        \n        // Check hashCode for both null key and value\n        assertEquals(pairNullKeyNullValue.hashCode(), 0, \"Hash code for both null key and value should be zero\");\n\n        // If Pair operates with any Comparable types, we could create a test pairing\n        // different kinds of Comparable types together, like String and Integer.\n        // This would verify the generality of the hashCode method for different type parameters.\n    }\n}",
        "package_metric": 2.19,
        "class_metric": 33.33,
        "method_metric": 100.0,
        "pitest": 21.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void hashCodeTest() {\n        // Test with non-null key and value\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        \n        // Test with the same key and value (equals pairs should have the same hash code)\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash code should be the same for equal pairs\");\n        \n        // Test with different key and/or value\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value1\");\n        Pair<String, String> pair4 = new Pair<>(\"key1\", \"value2\");\n        \n        // Assuming that different pairs generally have different hash codes\n        assertNotEquals(pair1.hashCode(), pair3.hashCode(), \"Hash code should be different for different pairs\");\n        assertNotEquals(pair1.hashCode(), pair4.hashCode(), \"Hash code should be different for different pairs\");\n\n        // Test with null key and non-null value\n        Pair<String, String> pairWithNullKey = new Pair<>(null, \"value1\");\n        assertNotEquals(0, pairWithNullKey.hashCode(), \"Hash code should not be zero for pair with null key but non-null value\");\n\n        // Test with null value and non-null key\n        Pair<String, String> pairWithNullValue = new Pair<>(\"key1\", null);\n        assertNotEquals(0, pairWithNullValue.hashCode(), \"Hash code should not be zero for pair with non-null key but null value\");\n\n        // Test with null key and null value\n        Pair<String, String> pairWithNullKeyAndValue = new Pair<>(null, null);\n        \n        // Hash code for null key and value logically could be zero, but let's verify\n        assertEquals(0, pairWithNullKeyAndValue.hashCode(), \"Hash code should be zero for pair with null key and null value\");\n    }\n}",
        "package_metric": 2.19,
        "class_metric": 33.33,
        "method_metric": 100.0,
        "pitest": 21.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create pairs with same key and value, expecting same hash code\n        Pair<Integer, String> pair1 = new Pair<>(1, \"One\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"One\");\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash codes should be equal for identical pairs\");\n\n        // Create pair with null key and value, expecting hash code calculation to handle nulls\n        Pair<Object, Object> nullPair = new Pair<>(null, null);\n        assertEquals(0, nullPair.hashCode(), \"Hash code should be zero for null key and null value\");\n\n        // Create pairs with same key but different values, expecting different hash codes\n        Pair<Integer, String> pair3 = new Pair<>(1, \"Two\");\n        assertNotEquals(pair1.hashCode(), pair3.hashCode(), \"Hash codes should be different for pairs with different values\");\n\n        // Create pairs with different keys but same values, expecting different hash codes\n        Pair<Integer, String> pair4 = new Pair<>(2, \"One\");\n        assertNotEquals(pair1.hashCode(), pair4.hashCode(), \"Hash codes should be different for pairs with different keys\");\n\n        // Create pairs with different key and value, expecting different hash codes\n        Pair<Integer, String> pair5 = new Pair<>(2, \"Two\");\n        assertNotEquals(pair1.hashCode(), pair5.hashCode(), \"Hash codes should be different for completely different pairs\");\n        \n        // Additional test for pair with non-null key and null value\n        Pair<Integer, String> pairWithNullValue = new Pair<>(1, null);\n        Pair<Integer, String> anotherPairWithNullValue = new Pair<>(1, null);\n        assertEquals(pairWithNullValue.hashCode(), anotherPairWithNullValue.hashCode(), \"Hash codes should be equal for pairs with non-null keys and null values\");\n\n        // Additional test for pair with null key and non-null value\n        Pair<Integer, String> pairWithNullKey = new Pair<>(null, \"One\");\n        Pair<Integer, String> anotherPairWithNullKey = new Pair<>(null, \"One\");\n        assertEquals(pairWithNullKey.hashCode(), anotherPairWithNullKey.hashCode(), \"Hash codes should be equal for pairs with null keys and non-null values\");\n    }\n}",
        "package_metric": 2.19,
        "class_metric": 33.33,
        "method_metric": 100.0,
        "pitest": 21.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create two pairs with the same key and value to test if their hashcodes are equal\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", 123);\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 123);\n        \n        // Create another pair with a different key and/or value to test if their hashcode is not equal\n        Pair<String, Integer> pair3 = new Pair<>(\"differentKey\", 456);\n\n        // Assert that the hash codes of the same objects are the same\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash codes should be equal for equal objects\");\n\n        // Assert that the hash code is different for objects that are not equal\n        assertNotEquals(pair1.hashCode(), pair3.hashCode(), \"Hash codes should not be equal for non-equal objects\");\n\n        // Edge case tests\n        Pair<String, Integer> pairWithNullKey = new Pair<>(null, 123);\n        Pair<String, Integer> pairWithNullValue = new Pair<>(\"key\", null);\n        Pair<String, Integer> pairWithBothNull = new Pair<>(null, null);\n\n        // Assert that the hash code is handling null keys and values\n        assertNotNull(pairWithNullKey.hashCode(), \"Hash code should handle null key\");\n        assertNotNull(pairWithNullValue.hashCode(), \"Hash code should handle null value\");\n        assertNotNull(pairWithBothNull.hashCode(), \"Hash code should handle both null key and value\");\n    }\n}",
        "package_metric": 2.19,
        "class_metric": 33.33,
        "method_metric": 100.0,
        "pitest": 21.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    private static final class Pair<K, V> {\n        private K key;\n        private V value;\n\n        public Pair(K key, V value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        @Override\n        public int hashCode() {\n            int result = key == null ? 0 : key.hashCode();\n            final int h = value == null ? 0 : value.hashCode();\n            result = 37 * result + h ^ (h >>> 16);\n            return result;\n        }\n    }\n\n    @Test\n    public void hashCodeTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pairNull = new Pair<>(null, null);\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value2\");\n\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash codes should be equal for equal pairs\");\n        assertNotEquals(pair1.hashCode(), pair3.hashCode(), \"Hash codes should not be equal for different pairs\");\n        assertEquals(pairNull.hashCode(), 0, \"Hash code should be 0 for null key and value\");\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    static class Pair<K, V> {\n        final K key;\n        final V value;\n\n        Pair(K key, V value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        @Override\n        public int hashCode() {\n            int result = key == null ? 0 : key.hashCode();\n            final int h = value == null ? 0 : value.hashCode();\n            result = 37 * result + h ^ (h >>> 16);\n            return result;\n        }\n    }\n    \n    @Test\n    public void hashCodeTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair3 = new Pair<>(\"differentKey\", \"value\");\n        Pair<String, String> pairWithNullKey = new Pair<>(null, \"value\");\n        Pair<String, String> pairWithNullValue = new Pair<>(\"key\", null);\n        Pair<String, String> pairWithNulls = new Pair<>(null, null);\n\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash codes should be equal for equal pairs\");\n        assertNotEquals(pair1.hashCode(), pair3.hashCode(), \"Hash codes should be different for different pairs\");\n        assertNotEquals(pair1.hashCode(), pairWithNullKey.hashCode(), \"Hash codes should be different when one key is null\");\n        assertNotEquals(pair1.hashCode(), pairWithNullValue.hashCode(), \"Hash codes should be different when one value is null\");\n        assertNotEquals(pairWithNullKey.hashCode(), pairWithNullValue.hashCode(), \"Hash codes should be different for pairs with different null fields\");\n        assertEquals(pairWithNulls.hashCode(), pairWithNulls.hashCode(), \"Hash codes should be equal for the same pair even with nulls\");\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair3 = new Pair<>(null, \"value\");\n        Pair<String, String> pair4 = new Pair<>(\"key\", null);\n        Pair<String, String> pair5 = new Pair<>(null, null);\n        \n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hashcodes should be equal for equal pairs.\");\n        \n        assertNotEquals(pair1.hashCode(), pair3.hashCode(), \"Hashcodes should be not equal for different keys.\");\n        assertNotEquals(pair1.hashCode(), pair4.hashCode(), \"Hashcodes should be not equal for different values.\");\n        \n        assertNotNull(pair1.hashCode(), \"Hashcode should not be null for non-null pairs.\");\n        \n        assertEquals(0, pair5.hashCode(), \"Hashcode should be 0 for pair with null key and value.\");\n    }\n}\n\nclass Pair<K, V> {\n    private K key;\n    private V value;\n\n    public Pair(K key, V value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = key == null ? 0 : key.hashCode();\n\n        final int h = value == null ? 0 : value.hashCode();\n        result = 37 * result + h ^ (h >>> 16);\n\n        return result;\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 57.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    private static class Pair {\n        private Object key;\n        private Object value;\n\n        public Pair(Object key, Object value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        @Override\n        public int hashCode() {\n            int result = key == null ? 0 : key.hashCode();\n\n            final int h = value == null ? 0 : value.hashCode();\n            result = 37 * result + h ^ (h >>> 16);\n\n            return result;\n        }\n    }\n\n    @Test\n    public void hashCodeTest() {\n        Pair pairWithNull = new Pair(null, null);\n        assertEquals(0, pairWithNull.hashCode(), \"Hash code for pair with nulls should be 0.\");\n\n        Pair pairWithObjects = new Pair(\"key\", \"value\");\n        int expectedHashCode = \"key\".hashCode();\n        int valueHashCode = \"value\".hashCode();\n        expectedHashCode = 37 * expectedHashCode + valueHashCode ^ (valueHashCode >>> 16);\n        assertEquals(expectedHashCode, pairWithObjects.hashCode(), \"Hash code did not match expected value for pair with objects.\");\n\n        Pair samePairWithObjects = new Pair(\"key\", \"value\");\n        assertEquals(pairWithObjects.hashCode(), samePairWithObjects.hashCode(), \"Hash codes for identical pairs should be the same.\");\n\n        Pair differentKeyPair = new Pair(\"newKey\", \"value\");\n        assertNotEquals(pairWithObjects.hashCode(), differentKeyPair.hashCode(), \"Hash codes for pairs with different keys should not be the same.\");\n\n        Pair differentValuePair = new Pair(\"key\", \"newValue\");\n        assertNotEquals(pairWithObjects.hashCode(), differentValuePair.hashCode(), \"Hash codes for pairs with different values should not be the same.\");\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowCos",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    private static final double EPSILON = 1e-14;\n\n    @Test\n    public void slowCosTest() {\n        // Test using a known cosine value.\n        final double angle = Math.PI / 3; // 60 degrees\n        final double expectedResult = 0.5; // cos(60 degrees) = cos(pi/3) = 0.5\n        double[] result = new double[2];\n        \n        // Call the method under test\n        double actualResult = AccurateMathCalc.slowCos(angle, result);\n        \n        // Use an epsilon value for comparison of floating points\n        assertEquals(expectedResult, actualResult, EPSILON, \"The cosine value did not match the expected result\");\n        \n        // Testing edge case close to zero\n        double actualCosZero = AccurateMathCalc.slowCos(0.0, null);\n        assertEquals(1.0, actualCosZero, EPSILON, \"The cosine of 0 should be 1\");\n\n        // Testing edge case close to pi/2\n        double actualCosPiOverTwo = AccurateMathCalc.slowCos(Math.PI / 2, null);\n        assertEquals(0.0, actualCosPiOverTwo, EPSILON, \"The cosine of pi/2 should be 0\");\n\n        // Ensure that the extended result is also correct if provided\n        assertNotNull(result, \"The result array should not be null when passed to the method\");\n        assertEquals(expectedResult, result[0] + result[1], EPSILON, \"The extended precision result did not match expected result\");\n    }\n}",
        "package_metric": 2.84,
        "class_metric": 21.3,
        "method_metric": 100.0,
        "pitest": 18.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowCos",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        double x = 0.5; // Test value in radians, within range for which the Taylor series is accurate\n        double delta = 1e-9; // Acceptable delta error for the approximation vs. Math.cos\n        double[] result = new double[2];\n        double slowCosResult = AccurateMathCalc.slowCos(x, result);\n\n        // Check the slowCos against Math.cos for accuracy\n        assertEquals(Math.cos(x), slowCosResult, delta);\n\n        // We can also verify the result array for extended precision\n        double expectedHighPrecisionResult = result[0] + result[1];\n        assertEquals(Math.cos(x), expectedHighPrecisionResult, delta,\n                     \"Extended precision result not close enough to Math.cos\");\n    }\n}",
        "package_metric": 2.84,
        "class_metric": 21.3,
        "method_metric": 100.0,
        "pitest": 17.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowCos",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    private static final double TOLERANCE = 1e-12;\n\n    @Test\n    public void slowCosTest() {\n        double[] testValues = {0.0, Math.PI / 6, Math.PI / 4, Math.PI / 3, Math.PI / 2};\n        double[] expectedResult = {1.0, Math.sqrt(3) / 2, Math.sqrt(2) / 2, 0.5, 0.0};\n        double[] resultContainer = new double[2];\n\n        for (int i = 0; i < testValues.length; i++) {\n            double result = AccurateMathCalc.slowCos(testValues[i], resultContainer);\n            double expected = expectedResult[i];\n            assertEquals(expected, result, TOLERANCE, \"SlowCos does not match standard Math.cos for angle \" + testValues[i]);\n        }\n\n        // Test that resultContainer returns the same result\n        for (int i = 0; i < testValues.length; i++) {\n            AccurateMathCalc.slowCos(testValues[i], resultContainer);\n            double combinedResult = resultContainer[0] + resultContainer[1];\n            assertEquals(expectedResult[i], combinedResult, TOLERANCE, \"Result container does not match expected result for angle \" + testValues[i]);\n        }\n    }\n}",
        "package_metric": 2.84,
        "class_metric": 21.3,
        "method_metric": 100.0,
        "pitest": 19.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowCos",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        final double delta = 1e-9;\n        double x = Math.PI / 4; // Test input for cosine\n        double expectedCos = Math.cos(x); // Expected value using Math.cos\n        double[] result = new double[2];\n        double actualCos = AccurateMathCalc.slowCos(x, result);\n\n        // Check the main result is close to the expected value\n        assertEquals(expectedCos, actualCos, delta, \"slowCos result differs from Math.cos\");\n\n        // Check the split parts when added give the correct result\n        double splitCos = result[0] + result[1];\n        assertEquals(expectedCos, splitCos, delta, \"The sum of split parts of slowCos does not match expected value.\");\n    }\n}",
        "package_metric": 2.84,
        "class_metric": 21.3,
        "method_metric": 100.0,
        "pitest": 18.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowCos",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        // Test values\n        double epsilon = 1e-10;\n        double testAngleDegrees = 45.0;\n        double testAngleRadians = Math.toRadians(testAngleDegrees);\n        \n        // Expected result from Math.cos for comparison\n        double expectedCosValue = Math.cos(testAngleRadians);\n        \n        // Array to place the high-precision result\n        double[] result = new double[2];\n        \n        // Call the method under test\n        double actualCosValue = AccurateMathCalc.slowCos(testAngleRadians, result);\n        \n        // Verify the high-precision result is close to the expected value\n        assertEquals(expectedCosValue, result[0] + result[1], epsilon, \"The slowCos result should be close to the Math.cos result.\");\n        \n        // If the result is not supposed to be split across two numbers, also check the main result\n        assertEquals(expectedCosValue, actualCosValue, epsilon, \"The returned slowCos value should be close to the Math.cos result.\");\n    }\n}",
        "package_metric": 2.84,
        "class_metric": 21.3,
        "method_metric": 100.0,
        "pitest": 18.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowCos",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    \n    private static final double DELTA = 1e-15;\n   \n    @Test\n    public void slowCosTest() {\n        double[] result = new double[2];\n        double x = Math.PI / 4; // 45 degrees\n        double expected = Math.cos(x);\n        double actual = AccurateMathCalc.slowCos(x, result);\n        \n        // First, assert the computational result is close to Math.cos\n        assertEquals(expected, actual, DELTA, \"The slowCos computation should approximate the cosine properly.\");\n\n        // Second, assert that the result has been stored correctly\n        assertNotNull(result, \"Result array should not be null.\");\n        assertEquals(2, result.length, \"Result array should have a length of 2.\");\n        \n        // Verify its correctness in the result array\n        assertEquals(expected, result[0] + result[1], DELTA, \"The split cosine value should be close to the correct value.\");\n    }\n}",
        "package_metric": 2.84,
        "class_metric": 21.3,
        "method_metric": 100.0,
        "pitest": 19.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowCos",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    \n    private static final double DELTA = 1e-15;\n\n    @Test\n    public void slowCosTest() {\n        // Arrange\n        double angle = 0.0; // angle for which cos(angle) is known to be 1\n        double[] result = new double[2];\n        \n        // Act\n        double cosValue = AccurateMathCalc.slowCos(angle, result);\n\n        // Assert\n        assertEquals(Math.cos(angle), cosValue, DELTA, \"The cosine of 0 should be 1\");\n        assertEquals(1.0, result[0] + result[1], DELTA, \"The split cosine of 0 should sum to 1\");\n        \n        // Additional test cases can include different angles (e.g., Math.PI / 2, Math.PI, 3 * Math.PI / 2, etc.)\n        // You can also test edge cases like very large inputs or negative inputs\n    }\n}",
        "package_metric": 2.84,
        "class_metric": 21.3,
        "method_metric": 100.0,
        "pitest": 11.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowCos",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        final double delta = 1e-8; // Define the precision delta for the assertion checks\n\n        // Test with a known value\n        double[] result = new double[2];\n        double expectedValue = Math.cos(Math.PI / 4); // cos(\u03c0/4) = sqrt(2)/2\n        double testValue = AccurateMathCalc.slowCos(Math.PI / 4, result);\n\n        // Check if the slowCos method returns a value very close to the expected value\n        assertEquals(expectedValue, testValue, delta, \"slowCos should return the correct cosine value\");\n\n        // Additionally, verify that the result array is correctly filled\n        assertNotNull(result, \"The result array should be non-null\");\n        assertEquals(expectedValue, result[0] + result[1], delta, \"The result array should contain the correct cosine value\");\n\n        // Test with another known value\n        expectedValue = Math.cos(0); // cos(0) = 1\n        testValue = AccurateMathCalc.slowCos(0, result);\n\n        // Check with the exact expected value for a known reference\n        assertEquals(expectedValue, testValue, \"slowCos of 0 should return 1\");\n        assertNotNull(result, \"The result array should be non-null for cos(0)\");\n        assertEquals(expectedValue, result[0] + result[1], \"The result array should contain the correct cosine value for cos(0)\");\n\n        // Test with edge case like negative input\n        expectedValue = Math.cos(-Math.PI / 2); // cos(-\u03c0/2) should nearly equal 0\n        testValue = AccurateMathCalc.slowCos(-Math.PI / 2, result);\n\n        assertEquals(expectedValue, testValue, delta, \"slowCos should handle negative inputs correctly\");\n        assertNotNull(result, \"The result array should be non-null for a negative input\");\n        assertEquals(expectedValue, result[0] + result[1], delta, \"The result array should contain correct cosine value for a negative input\");\n    }\n}",
        "package_metric": 2.84,
        "class_metric": 21.3,
        "method_metric": 100.0,
        "pitest": 19.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowCos",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    \n    private static final double DELTA = 1e-15;\n    \n    @Test\n    public void slowCosTest() {\n        double input = 0.5;\n        double[] result = new double[2];\n        double expected = Math.cos(input);\n        \n        // Assuming that the `FACT` and other necessary arrays and constants are properly defined.\n        double output = AccurateMathCalc.slowCos(input, result);\n        \n        // Check for correct cos value\n        assertEquals(expected, output, DELTA, \"The `slowCos` method does not return the expected cosine value.\");\n        \n        // Check if the result array has been correctly filled\n        assertNotNull(result, \"The result array should not be null.\");\n        assertEquals(expected, result[0] + result[1], DELTA, \"The result array does not contain the expected values.\");\n    }\n    \n    // Helper methods to be defined (assuming they are part of the calculation):\n    public void split(double x, double[] parts) {\n        // Implementation for split method\n    }\n\n    public void splitMult(double[] x, double[] y, double[] ans) {\n        // Implementation for split multiplication method\n    }\n    \n    public void splitAdd(double[] x, double[] y, double[] ans) {\n        // Implementation for split addition method\n    }\n\n    public void splitReciprocal(double[] x, double[] ans) {\n        // Implementation for split reciprocal method\n    }\n    \n    // Other methods and arrays used within the `slowCos` function\n    // ...\n}",
        "package_metric": 2.84,
        "class_metric": 21.3,
        "method_metric": 100.0,
        "pitest": 19.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowCos",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    private static final double EPSILON = 1e-6;\n\n    // Static method split() and the other helper methods would be needed\n    // to run this test, as well as the constant array FACT[].\n    // Assuming FACT[] contains factorial values and split(), splitMult(),\n    // splitReciprocal(), and splitAdd() are valid methods implemented elsewhere.\n\n    @Test\n    public void slowCosTest() {\n        double[] result = new double[2]; // create an array to hold the result\n\n        // Test the slowCos method with a known value, for example pi/3\n        double input = Math.PI / 3;\n        double expected = Math.cos(input);\n\n        double actual = AccurateMathCalc.slowCos(input, result);\n\n        // Assert that the slowCos calculation is accurate within a certain epsilon\n        assertEquals(expected, actual, EPSILON, \"The slowCos method should calculate the cosine value accurately.\");\n\n        // Optionally, verify that the result array has been populated correctly\n        assertNotNull(result);\n        assertEquals(2, result.length, \"The result array should have two elements.\");\n        assertEquals(actual, result[0] + result[1], EPSILON, \"The sum of the result array elements should equal the actual return value.\");\n    }\n}",
        "package_metric": 2.84,
        "class_metric": 21.3,
        "method_metric": 100.0,
        "pitest": 14.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "splitReciprocal",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    \n    @Test\n    public void splitReciprocalTest() {\n        // Setup input values and a target array for the result\n        double[] input = {2.0, 0.0}; // split form of 2.0\n        double[] result = new double[2];\n        \n        // Call the method under test\n        AccurateMathCalc.splitReciprocal(input, result);\n        \n        // Prepare the expected values (reciprocal of 2.0)\n        double expectedValue = 0.5;\n        \n        // Check that the result in split form represents the expected reciprocal value\n        assertTrue(result[0] <= expectedValue && (result[0] + result[1]) >= expectedValue,\n                   \"Reciprocal calculation does not provide the expected results\");\n        \n        // Since the second part of a split is often an adjustment for precision,\n        // we check that the result is close to the expected value within a small epsilon.\n        double epsilon = 1e-15;\n        assertEquals(expectedValue, result[0] + result[1], epsilon,\n                     \"Reciprocal calculation does not match within an acceptable error margin.\");\n    }\n    \n    // Additional test cases can be added to verify other edge cases and behaviors\n}",
        "package_metric": 1.06,
        "class_metric": 7.94,
        "method_metric": 80.0,
        "pitest": 5.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "splitReciprocal",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    /* Since the resplit method is called inside splitReciprocal, \n     * we need to either implement it or mock its behavior for testing purposes. \n     * For this example, a simple implementation is provided.\n     */\n    private static void resplit(double[] result) {\n        // Mock implementation just for the test.\n        // The actual implementation might have more complex logic.\n        result[0] += Math.ulp(result[0]);\n        result[1] += Math.ulp(result[1]);\n    }\n    \n    @Test\n    public void splitReciprocalTest() {\n        double[] input = new double[]{2.0, 1.0};\n        double[] result = new double[2];\n        \n        AccurateMathCalcTest.splitReciprocal(input, result);\n\n        double a = 1.0 - 1.0 / 4194304.0;\n        double expected0 = a / input[0];\n        double expected1 = ((1.0 / 4194304.0) * input[0] - a * input[1]) \n                            / (input[0] * input[0] + input[0] * input[1]);\n        \n        /* Adjust expected1 due to possible NAN as per source code */\n        if (Double.isNaN(expected1)) {\n          expected1 = 0.0;\n        }\n\n       /* Since resplit is called, if necessary adjust the expectations */\n        expected0 += Math.ulp(expected0);\n        expected1 += Math.ulp(expected1);\n        \n        /* Adjust for rounding errors from the loop at the end of splitReciprocal */\n        for (int i = 0; i < 2; i++) {\n            double err = 1.0 - expected0 * input[0] - expected0 * input[1] \n                        - expected1 * input[0] - expected1 * input[1];\n            err *= expected0 + expected1;\n            expected1 += err;\n        }\n        \n        // Assert that the actual result is close to the expected result \n        // within the precision errors. Specify a small delta for floating-point comparisons.\n        assertEquals(expected0, result[0], 1e-15, \"The first element of the result is not correct\");\n        assertEquals(expected1, result[1], 1e-15, \"The second element of the result is not correct\");\n    }\n    \n    /* The main method that performs the split reciprocal */\n    private static void splitReciprocal(final double[] in, final double[] result) {\n        final double b = 1.0 / 4194304.0;\n        final double a = 1.0 - b;\n        \n        if (in[0] == 0.0) {\n            in[0] = in[1];\n            in[1] = 0.0;\n        }\n        \n        result[0] = a / in[0];\n        result[1] = (b * in[0] - a * in[1]) / (in[0] * in[0] + in[0] * in[1]);\n        \n        if (result[1] != result[1]) { // can happen if result[1] is NAN\n            result[1] = 0.0;\n        }\n        \n        /* Resplit */\n        resplit(result);\n    \n        for (int i = 0; i < 2; i++) {\n            double err = 1.0 - result[0] * in[0] - result[0] * in[1] \n                         - result[1] * in[0] - result[1] * in[1];\n            err *= result[0] + result[1];\n            result[1] += err;\n        }\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-neuralnet/src/test/java/org/apache/commons/math4/neuralnet",
        "package_name": "org.apache.commons.math4.neuralnet",
        "class_name": "Neuron",
        "method_name": "containSameValues",
        "test_code": "package org.apache.commons.math4.neuralnet;\n\nimport org.apache.commons.math4.neuralnet.internal.NeuralNetException;\nimport org.apache.commons.numbers.core.Precision;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    \n    @Test\n    public void containSameValuesTest() {\n        // Assuming we can update Neuron to provide a testing hook for 'containSameValues'. If not, we need to use reflection.\n        Neuron neuron = new Neuron(1L, new double[]{0.1, 0.2, 0.3});\n        \n        // Successful match case\n        assertTrue(neuron.compareAndSetFeatures(new double[]{0.1, 0.2, 0.3}, new double[]{0.1, 0.2, 0.3}));\n        \n        // Unsuccessful match because of a value difference\n        assertFalse(neuron.compareAndSetFeatures(new double[]{0.1, 0.2, 0.4}, new double[]{0.1, 0.2, 0.3}));\n        \n        // Unsuccessful match because of size mismatch, expected to throw an exception\n        Exception exception = assertThrows(NeuralNetException.class, () -> {\n            neuron.compareAndSetFeatures(new double[]{0.1, 0.2}, new double[]{0.1, 0.2, 0.3});\n        });\n\n        String expectedMessage = \"Size mismatch\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}",
        "package_metric": 10.43,
        "class_metric": 62.86,
        "method_metric": 100.0,
        "pitest": 57.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "printarray",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    @Test\n    public void printarrayTest() {\n        final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        final PrintStream originalOut = System.out;\n        System.setOut(new PrintStream(outContent));\n\n        try {\n            double[][] inputArray = {\n                    {1.0, 2.0, 3.0},\n                    {4.0, 5.0, 6.0},\n                    {7.0, 8.0, 9.0}\n            };\n            String arrayName = \"TestArray\";\n            int expectedLen = 3;\n\n            AccurateMathCalc.printarray(System.out, arrayName, expectedLen, inputArray);\n\n            StringBuilder expectedOutput = new StringBuilder();\n            expectedOutput.append(arrayName).append(\"\\n\");\n            expectedOutput.append(\"    { \\n\");\n            for (int i = 0; i < inputArray.length; i++) {\n                expectedOutput.append(\"        {\");\n                for (double d : inputArray[i]) {\n                    expectedOutput.append(String.format(\"%-25.25s\", AccurateMathCalc.format(d)));\n                }\n                expectedOutput.append(\"}, // \").append(i).append(\"\\n\");\n            }\n            expectedOutput.append(\"    };\\n\");\n\n            assertEquals(expectedOutput.toString(), outContent.toString());\n        } finally {\n            System.setOut(originalOut);\n        }\n    }\n}",
        "package_metric": 0.82,
        "class_metric": 6.14,
        "method_metric": 100.0,
        "pitest": 3.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n\n        // Test with Integers\n        Integer[] actualInt = {4, 3, 2, 5, 1};\n        Integer[] expectedInt = {1, 2, 3, 4, 5};\n        actualInt = quickSort.sort(actualInt);\n        assertArrayEquals(expectedInt, actualInt);\n\n        // Test with Strings\n        String[] actualStr = {\"delta\", \"bravo\", \"charlie\", \"echo\", \"alpha\"};\n        String[] expectedStr = {\"alpha\", \"bravo\", \"charlie\", \"delta\", \"echo\"};\n        actualStr = quickSort.sort(actualStr);\n        assertArrayEquals(expectedStr, actualStr);\n\n        // Test with Doubles\n        Double[] actualDouble = {4.4, 3.3, 2.2, 5.5, 1.1};\n        Double[] expectedDouble = {1.1, 2.2, 3.3, 4.4, 5.5};\n        actualDouble = quickSort.sort(actualDouble);\n        assertArrayEquals(expectedDouble, actualDouble);\n\n        // Test with an already sorted array\n        Integer[] sortedArray = {1, 2, 3, 4, 5};\n        actualInt = quickSort.sort(sortedArray);\n        assertArrayEquals(sortedArray, actualInt);\n        \n        // Test with an empty array\n        Integer[] emptyArray = {};\n        actualInt = quickSort.sort(emptyArray);\n        assertArrayEquals(emptyArray, actualInt);\n\n        // Test with a single element array\n        Integer[] singleElementArray = {1};\n        actualInt = quickSort.sort(singleElementArray);\n        assertArrayEquals(singleElementArray, actualInt);\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 89.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    private QuickSort quickSort;\n\n    @BeforeEach\n    public void setUp() {\n        quickSort = new QuickSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] original = {4, 3, 2, 1};\n        Integer[] sorted = {1, 2, 3, 4};\n        assertArrayEquals(sorted, quickSort.sort(original), \"The sorted array should be in ascending order\");\n        \n        Integer[] alreadySorted = {1, 2, 3, 4};\n        assertArrayEquals(alreadySorted, quickSort.sort(alreadySorted), \"The already sorted array should stay the same\");\n        \n        Integer[] singleElement = {1};\n        assertArrayEquals(singleElement, quickSort.sort(singleElement), \"An array with a single element should stay the same\");\n        \n        Integer[] empty = {};\n        assertArrayEquals(empty, quickSort.sort(empty), \"An empty array should stay the same\");\n        \n        String[] strings = {\"delta\", \"alpha\", \"charlie\", \"bravo\"};\n        String[] stringsSorted = {\"alpha\", \"bravo\", \"charlie\", \"delta\"};\n        assertArrayEquals(stringsSorted, quickSort.sort(strings), \"The sorted array of strings should be in ascending order\");\n    }\n\n    @AfterEach\n    public void tearDown() {\n        quickSort = null;\n    }\n}",
        "package_metric": 2.09,
        "class_metric": 95.65,
        "method_metric": 100.0,
        "pitest": 82.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n\n        // Test with integers\n        Integer[] inputInt = {5, 1, 4, 2, 8};\n        Integer[] expectedResultInt = {1, 2, 4, 5, 8};\n        assertArrayEquals(expectedResultInt, quickSort.sort(inputInt));\n\n        // Test with empty array\n        Integer[] emptyArray = {};\n        Integer[] expectedEmptyArray = {};\n        assertArrayEquals(expectedEmptyArray, quickSort.sort(emptyArray));\n        \n        // Test with strings\n        String[] inputStr = {\"E\", \"A\", \"C\", \"B\", \"D\"};\n        String[] expectedResultStr = {\"A\", \"B\", \"C\", \"D\", \"E\"};\n        assertArrayEquals(expectedResultStr, quickSort.sort(inputStr));\n\n        // Test with doubles\n        Double[] inputDouble = {6.0, 3.3, 5.5, 0.0, -1.1, 3.3};\n        Double[] expectedResultDouble = {-1.1, 0.0, 3.3, 3.3, 5.5, 6.0};\n        assertArrayEquals(expectedResultDouble, quickSort.sort(inputDouble));\n        \n        // Test with all elements the same\n        Integer[] sameElements = {1, 1, 1, 1};\n        Integer[] expectedSameElements = {1, 1, 1, 1};\n        assertArrayEquals(expectedSameElements, quickSort.sort(sameElements));\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 89.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    private QuickSort quickSort;\n\n    @BeforeEach\n    public void setUp() {\n        quickSort = new QuickSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] inputArray = {4, 3, 2, 1};\n        Integer[] expectedArray = {1, 2, 3, 4};\n        Integer[] sortedArray = quickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedArray, sortedArray, \"The sorted array should be in ascending order\");\n    }\n\n    @Test\n    public void sortTestWithDuplicates() {\n        Integer[] inputArray = {5, 4, 3, 3, 1};\n        Integer[] expectedArray = {1, 3, 3, 4, 5};\n        Integer[] sortedArray = quickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedArray, sortedArray, \"The sorted array should be in ascending order with duplicates properly handled\");\n    }\n\n    @Test\n    public void sortTestEmptyArray() {\n        Integer[] inputArray = new Integer[0];\n        Integer[] expectedArray = new Integer[0];\n        Integer[] sortedArray = quickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedArray, sortedArray, \"An empty array should not change when sorted\");\n    }\n\n    // Additional tests could be written to check for the sorting of various types of arrays,\n    // Including arrays with negative numbers, larger numbers, and arrays that are already sorted.\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 82.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    \n    private QuickSort quickSort;\n\n    @BeforeEach\n    public void setUp() {\n        quickSort = new QuickSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] inputArray = {5, 2, 4, 6, 1, 3};\n        Integer[] expectedArray = {1, 2, 3, 4, 5, 6}; // This is how the array should look after sorting\n\n        // Sort the array\n        Integer[] sortedArray = quickSort.sort(inputArray);\n\n        // Now let's check if the array has been sorted properly\n        assertArrayEquals(expectedArray, sortedArray, \"The input array is not sorted correctly.\");\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 82.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        // Given\n        QuickSort quickSort = new QuickSort();\n        Integer[] inputArray = {5, 3, 2, 8, 4, 1, 9, 6};\n        Integer[] expectedArray = {1, 2, 3, 4, 5, 6, 8, 9};\n\n        // When\n        Integer[] sortedArray = quickSort.sort(inputArray);\n\n        // Then\n        assertArrayEquals(expectedArray, sortedArray, \"The sorted array should be in ascending order\");\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n\n        Integer[] inputArray = {5, 2, 8, 9, 1, 3, 7, 6};\n        Integer[] sortedArray = {1, 2, 3, 5, 6, 7, 8, 9};\n\n        assertArrayEquals(sortedArray, quickSort.sort(inputArray), \"The sorted array does not match the expected output.\");\n\n        String[] inputStringArray = {\"banana\", \"apple\", \"pineapple\", \"cherry\", \"blueberry\"};\n        String[] sortedStringArray = {\"apple\", \"banana\", \"blueberry\", \"cherry\", \"pineapple\"};\n\n        assertArrayEquals(sortedStringArray, quickSort.sort(inputStringArray), \"The sorted string array does not match the expected output.\");\n    }\n\n    // Extra tests could be added (if needed) for edge cases like an already sorted array, an empty array, or arrays with duplicate elements.\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        \n        Integer[] actual = {3, 2, 5, 1, 4};\n        Integer[] expected = {1, 2, 3, 4, 5};\n        \n        actual = quickSort.sort(actual); // Sort the array\n        \n        assertArrayEquals(expected, actual, \"The sorted array should be in ascending order\");\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 82.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    private final QuickSort quickSort = new QuickSort();\n\n    @Test\n    public void sortTest() {\n        Integer[] inputArray = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};\n        Integer[] expectedArray = {1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9};\n\n        Integer[] sortedArray = quickSort.sort(inputArray);\n\n        assertArrayEquals(expectedArray, sortedArray, \"The sorted array is not correct.\");\n    }\n\n    @Test\n    public void sortEmptyTest() {\n        Integer[] emptyArray = {};\n        Integer[] sortedEmptyArray = quickSort.sort(emptyArray);\n        assertArrayEquals(emptyArray, sortedEmptyArray, \"Sorting an empty array should return an empty array.\");\n    }\n\n    @Test\n    public void sortSingleElementTest() {\n        Integer[] singleElementArray = {42};\n        Integer[] sortedSingleElementArray = quickSort.sort(singleElementArray);\n        assertArrayEquals(singleElementArray, sortedSingleElementArray, \"Sorting a single element array should return the same array.\");\n    }\n\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    private QuickSort quickSort;\n\n    @BeforeEach\n    public void setUp() {\n        quickSort = new QuickSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] inputArray = { 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5 };\n        Integer[] expectedArray = { 1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9 };\n        assertArrayEquals(expectedArray, quickSort.sort(inputArray));\n\n        String[] inputStringArray = { \"banana\", \"apple\", \"pear\", \"kiwi\" };\n        String[] expectedStringArray = { \"apple\", \"banana\", \"kiwi\", \"pear\" };\n        assertArrayEquals(expectedStringArray, quickSort.sort(inputStringArray));\n\n        Double[] inputDoubleArray = { 3.14, 1.59, 2.65, 3.58 };\n        Double[] expectedDoubleArray = { 1.59, 2.65, 3.14, 3.58 };\n        assertArrayEquals(expectedDoubleArray, quickSort.sort(inputDoubleArray));\n    }\n\n    @Test\n    public void sortEmptyArrayTest() {\n        Integer[] emptyArray = new Integer[0];\n        assertArrayEquals(emptyArray, quickSort.sort(emptyArray));\n    }\n\n    @Test\n    public void sortSingleElementArrayTest() {\n        Integer[] singleElementArray = { 42 };\n        assertArrayEquals(singleElementArray, quickSort.sort(singleElementArray));\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 89.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    \n    private final QuickSort quickSort = new QuickSort();\n    \n    @Test\n    public void sortTest() {\n        Integer[] inputArray = {6, 2, 5, 3, 8, 7, 1, 4};\n        Integer[] expectedArray = {1, 2, 3, 4, 5, 6, 7, 8};\n        \n        Integer[] resultArray = quickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedArray, resultArray, \"The sorted array does not match the expected sorted array.\");\n    }\n    \n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        \n        // Test with Integer array\n        Integer[] inputIntegers = { 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5 };\n        Integer[] expectedIntegers = { 1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9 };\n        Integer[] sortedIntegers = quickSort.sort(inputIntegers);\n        assertArrayEquals(expectedIntegers, sortedIntegers, \"The sorted array of Integers does not match the expected output.\");\n\n        // Test with String array\n        String[] inputStrings = { \"delta\", \"alpha\", \"charlie\", \"bravo\" };\n        String[] expectedStrings = { \"alpha\", \"bravo\", \"charlie\", \"delta\" };\n        String[] sortedStrings = quickSort.sort(inputStrings);\n        assertArrayEquals(expectedStrings, sortedStrings, \"The sorted array of Strings does not match the expected output.\");\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    private final QuickSort quickSort = new QuickSort();\n\n    @Test\n    public void sortTest() {\n        Integer[] inputArray = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};\n        Integer[] expectedArray = {1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9};\n        \n        // Call the sort method on QuickSort instance\n        Integer[] sortedArray = quickSort.sort(inputArray);\n        \n        // Test if the sorted array matches the expected sorted array\n        assertArrayEquals(expectedArray, sortedArray, \"The sorted array should match the expected sorted array\");\n    }\n    \n    // Optional: Additional test cases can be added to test for edge cases\n    // Such as an empty array, a single element array, a sorted array, etc.\n    \n    @Test\n    public void sortEmptyTest() {\n        Integer[] emptyArray = {};\n        Integer[] expectedEmptyArray = {};\n        \n        Integer[] sortedEmptyArray = quickSort.sort(emptyArray);\n\n        assertArrayEquals(expectedEmptyArray, sortedEmptyArray, \"An empty array should remain unchanged when sorted\");\n    }\n\n    @Test\n    public void sortSingleElementTest() {\n        Integer[] singleElementArray = {42};\n        Integer[] expectedSingleElementArray = {42};\n        \n        Integer[] sortedSingleElementArray = quickSort.sort(singleElementArray);\n\n        assertArrayEquals(expectedSingleElementArray, sortedSingleElementArray, \"A single element array should remain unchanged when sorted\");\n    }\n\n    @Test\n    public void sortAlreadySortedTest() {\n        Integer[] alreadySortedArray = {1, 2, 3, 4, 5};\n        Integer[] expectedAlreadySortedArray = {1, 2, 3, 4, 5};\n        \n        Integer[] sortedAlreadySortedArray = quickSort.sort(alreadySortedArray);\n\n        assertArrayEquals(expectedAlreadySortedArray, sortedAlreadySortedArray, \"An already sorted array should remain unchanged when sorted\");\n    }\n    \n    // Additional tests as needed...\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 89.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        Integer[] inputArray = { 9, -3, 5, 0, 1 };\n        Integer[] expectedArray = { -3, 0, 1, 5, 9 };\n\n        Integer[] sortedArray = quickSort.sort(inputArray);\n\n        assertArrayEquals(expectedArray, sortedArray, \"The sorted array did not match the expected array\");\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 82.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        \n        Integer[] original = {3, 2, 5, 4, 1};\n        Integer[] sorted = quickSort.sort(original.clone());\n        \n        assertArrayEquals(new Integer[]{1, 2, 3, 4, 5}, sorted);\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 79.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    \n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        Integer[] array = {4, 3, 2, 1};\n        Integer[] sortedArray = {1, 2, 3, 4};\n\n        // Act - Sort the array\n        Integer[] resultArray = quickSort.sort(array);\n\n        // Assert - Verify the array is sorted\n        assertArrayEquals(sortedArray, resultArray, \"The quicksort algorithm did not correctly sort the array\");\n    }\n}",
        "package_metric": 2.09,
        "class_metric": 95.65,
        "method_metric": 100.0,
        "pitest": 75.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    private QuickSort quickSort;\n\n    @BeforeEach\n    public void setUp() {\n        quickSort = new QuickSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] input = { 4, 2, 6, 1, 3, 5 };\n        Integer[] expected = { 1, 2, 3, 4, 5, 6 };\n        Integer[] result = quickSort.sort(input);\n        assertArrayEquals(expected, result, \"The sorted array should be {1, 2, 3, 4, 5, 6}\");\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 82.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    \n    private QuickSort quickSort;\n    \n    @BeforeEach\n    public void setup() {\n        quickSort = new QuickSort();\n    }\n\n    @Test\n    public void sortTest() {\n        // Assuming the SortUtils provides a generic comparison method for the elements\n        Integer[] inputArray = { 4, 3, 2, 1 };\n        Integer[] expectedArray = { 1, 2, 3, 4 };\n        Integer[] resultArray = quickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedArray, resultArray, \"The sorted array should be ascending\");\n        \n        inputArray = new Integer[] { -1, 2, 0, -2 };\n        expectedArray = new Integer[] { -2, -1, 0, 2 };\n        resultArray = quickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedArray, resultArray, \"The sorted array should handle negative numbers\");\n        \n        inputArray = new Integer[] {}; // Testing an empty array\n        expectedArray = new Integer[] {};\n        resultArray = quickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedArray, resultArray, \"The sorted array should be the same as an empty input array\");\n        \n        inputArray = new Integer[] { 5 }; // Testing a single element array\n        expectedArray = new Integer[] { 5 };\n        resultArray = quickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedArray, resultArray, \"The sorted array should be the same as a single element input array\");\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 82.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        \n        // Test with integers\n        Integer[] arrayInt = {5, 3, 2, 8, 4, 1};\n        Integer[] arrayIntSorted = {1, 2, 3, 4, 5, 8};\n        assertArrayEquals(arrayIntSorted, quickSort.sort(arrayInt));\n        \n        // Test with empty array\n        Integer[] emptyArray = {};\n        assertArrayEquals(emptyArray, quickSort.sort(emptyArray));\n        \n        // Test with strings\n        String[] arrayStr = {\"delta\", \"charlie\", \"bravo\", \"alpha\", \"echo\", \"foxtrot\"};\n        String[] arrayStrSorted = {\"alpha\", \"bravo\", \"charlie\", \"delta\", \"echo\", \"foxtrot\"};\n        assertArrayEquals(arrayStrSorted, quickSort.sort(arrayStr));\n\n        // Test with duplicates\n        Integer[] arrayWithDuplicates = {5, 2, 5, 2, 8, 2, 1};\n        Integer[] arrayWithDuplicatesSorted = {1, 2, 2, 2, 5, 5, 8};\n        assertArrayEquals(arrayWithDuplicatesSorted, quickSort.sort(arrayWithDuplicates));\n\n        // Test with all same elements\n        Integer[] sameElementsArray = {1, 1, 1, 1};\n        Integer[] sameElementsArraySorted = {1, 1, 1, 1};\n        assertArrayEquals(sameElementsArraySorted, quickSort.sort(sameElementsArray));\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 89.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    private final QuickSort quickSort = new QuickSort();\n\n    @Test\n    public void sortTest() {\n        Integer[] actual = { 3, 2, 1, 4, 5 };\n        Integer[] expected = { 1, 2, 3, 4, 5 };\n        actual = quickSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The array should be sorted in ascending order\");\n\n        actual = new Integer[]{ 5, -4, 0, 3, 1 };\n        expected = new Integer[]{ -4, 0, 1, 3, 5 };\n        actual = quickSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The array should be sorted in ascending order with negative numbers\");\n\n        actual = new Integer[0];\n        expected = new Integer[0];\n        actual = quickSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The empty array should not be changed after sorting\");\n\n        actual = new Integer[]{ 1 };\n        expected = new Integer[]{ 1 };\n        actual = quickSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The single-element array should not be changed after sorting\");\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 82.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    private final QuickSort quickSort = new QuickSort();\n\n    @Test\n    public void sortTest() {\n        // Test sorting an empty array\n        Integer[] emptyArray = new Integer[]{};\n        Integer[] sortedEmptyArray = quickSort.sort(emptyArray);\n        assertArrayEquals(emptyArray, sortedEmptyArray, \"Empty array should not be changed after sort\");\n\n        // Test sorting an array with one element\n        Integer[] singleElementArray = new Integer[]{5};\n        Integer[] sortedSingleElementArray = quickSort.sort(singleElementArray);\n        assertArrayEquals(singleElementArray, sortedSingleElementArray, \"Single element array should not be changed after sort\");\n\n        // Test sorting a multi-element array\n        Integer[] multiElementArray = new Integer[]{3, 1, 4, 5, 2};\n        Integer[] sortedMultiElementArray = quickSort.sort(multiElementArray);\n        Integer[] expectedArray = new Integer[]{1, 2, 3, 4, 5};\n        assertArrayEquals(expectedArray, sortedMultiElementArray, \"Multi-element array should be sorted after sort\");\n        \n        // Test sorting a multi-element array with duplicate values\n        Integer[] duplicateValuesArray = new Integer[]{2, 3, 2, 1, 4, 1};\n        Integer[] sortedDuplicateValuesArray = quickSort.sort(duplicateValuesArray);\n        Integer[] expectedDuplicateValuesArray = new Integer[]{1, 1, 2, 2, 3, 4};\n        assertArrayEquals(expectedDuplicateValuesArray, sortedDuplicateValuesArray, \"Array with duplicates should be sorted after sort\");\n\n        // Test sorting a multi-element array with negative values\n        Integer[] negativeValuesArray = new Integer[]{-3, 1, -4, 0, 2};\n        Integer[] sortedNegativeValuesArray = quickSort.sort(negativeValuesArray);\n        Integer[] expectedNegativeValuesArray = new Integer[]{-4, -3, 0, 1, 2};\n        assertArrayEquals(expectedNegativeValuesArray, sortedNegativeValuesArray, \"Array with negatives should be sorted after sort\");\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 89.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    \n    private QuickSort quickSort;\n    \n    @BeforeEach\n    public void setUp() {\n        quickSort = new QuickSort();\n    }\n\n    @Test\n    public void sortTest() {\n        // Set up the test data\n        Integer[] actual = { 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5 };\n        Integer[] expected = { 1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9 };\n\n        // Call the method under test\n        Integer[] sortedArray = quickSort.sort(actual);\n\n        // Assert the results\n        assertNotNull(sortedArray, \"The sorted array should not be null.\");\n        assertEquals(expected.length, sortedArray.length, \"The sorted array should have the same length as the expected array.\");\n        assertArrayEquals(expected, sortedArray, \"The sorted array should match the expected array.\");\n    }\n}\n\n// Assumption based on the given information:\n// - QuickSort class with a sort method matching the signature provided in the source code snippet was assumed to exist.\n// - The generic type T extends Comparable<T> is the same as used in the given source code indicating that sort method is capable of sorting any array of Objects that extend Comparable.\n// - @BeforeEach annotation is used to create a new instance of QuickSort before each test, assuming QuickSort is the class containing the sort method.",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 82.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    private QuickSort quickSort;\n\n    @BeforeEach // Initialize the QuickSort class before each test\n    public void setUp() {\n        quickSort = new QuickSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] numbers = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};\n        Integer[] sortedNumbers = {1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9};\n        \n        String[] words = {\"banana\", \"apple\", \"cherry\", \"date\"};\n        String[] sortedWords = {\"apple\", \"banana\", \"cherry\", \"date\"};\n\n        assertArrayEquals(sortedNumbers, quickSort.sort(numbers), \"The numbers array should be sorted.\");\n        assertArrayEquals(sortedWords, quickSort.sort(words), \"The words array should be sorted.\");\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 89.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    @Test\n    public void sortTest() {\n        // Assuming QuickSort is the class where the sort method is defined\n        QuickSort quickSort = new QuickSort();\n\n        // Test with Integers\n        Integer[] arrayInt = {4, 3, 2, 1};\n        Integer[] sortedArrayInt = {1, 2, 3, 4};\n        assertArrayEquals(sortedArrayInt, quickSort.sort(arrayInt), \"The array of Integers should be sorted\");\n\n        // Test with Strings\n        String[] arrayString = {\"delta\", \"alpha\", \"charlie\", \"bravo\"};\n        String[] sortedArrayString = {\"alpha\", \"bravo\", \"charlie\", \"delta\"};\n        assertArrayEquals(sortedArrayString, quickSort.sort(arrayString), \"The array of Strings should be sorted\");\n\n        // Test with empty array\n        Integer[] emptyArray = {};\n        Integer[] sortedEmptyArray = {};\n        assertArrayEquals(sortedEmptyArray, quickSort.sort(emptyArray), \"The empty array should be returned as is\");\n\n        // Test with array containing one element\n        Integer[] singleElementArray = {1};\n        Integer[] sortedSingleElementArray = {1};\n        assertArrayEquals(sortedSingleElementArray, quickSort.sort(singleElementArray), \"The single element array should be returned as is\");\n\n        // Test with already sorted array\n        Integer[] alreadySortedArray = {-1, 0, 3, 6};\n        Integer[] sortedAlreadyArray = {-1, 0, 3, 6};\n        assertArrayEquals(sortedAlreadyArray, quickSort.sort(alreadySortedArray), \"An already sorted array should be returned as sorted\");\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 82.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        QuickSort qs = new QuickSort();\n        \n        Integer[] inputArray = {4, 2, 6, 5, 3, 9};\n        Integer[] expected = {2, 3, 4, 5, 6, 9};\n        Integer[] result = qs.sort(inputArray);\n        \n        assertArrayEquals(expected, result);\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        \n        Integer[] inputArray = {10, 7, 3, 9, 1, 5};\n        Integer[] expectedArray = {1, 3, 5, 7, 9, 10};\n        \n        Integer[] sortedArray = quickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedArray, sortedArray);\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    @Test\n    public void sortTest() {\n        \n        // Create an instance of HeapSort to test the sort method\n        HeapSort heapSort = new HeapSort();\n        \n        // Test with an array of Integers\n        Integer[] unsortedIntegers = {3, 1, 4, 1, 5, 9, 2, 6, 5};\n        Integer[] sortedIntegers = heapSort.sort(unsortedIntegers);\n        Integer[] expectedIntegers = {1, 1, 2, 3, 4, 5, 5, 6, 9};\n        assertArrayEquals(expectedIntegers, sortedIntegers, \"The array of integers should be sorted\");\n        \n        // Test with an array of Strings\n        String[] unsortedStrings = {\"banana\", \"cherry\", \"apple\", \"date\"};\n        String[] sortedStrings = heapSort.sort(unsortedStrings);\n        String[] expectedStrings = {\"apple\", \"banana\", \"cherry\", \"date\"};\n        assertArrayEquals(expectedStrings, sortedStrings, \"The array of strings should be sorted\");\n        \n        // Test with an empty array\n        Integer[] emptyIntegers = {};\n        Integer[] sortedEmptyIntegers = heapSort.sort(emptyIntegers);\n        assertArrayEquals(emptyIntegers, sortedEmptyIntegers, \"An empty array should remain empty after sorting\");\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n\n        Integer[] actual = {3, 2, 1, 5, 4};\n        Integer[] expected = {1, 2, 3, 4, 5};\n        assertArrayEquals(expected, heapSort.sort(actual));\n\n        String[] actualStrings = {\"delta\", \"charlie\", \"echo\", \"bravo\", \"alpha\"};\n        String[] expectedStrings = {\"alpha\", \"bravo\", \"charlie\", \"delta\", \"echo\"};\n        assertArrayEquals(expectedStrings, heapSort.sort(actualStrings));\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    \n    private HeapSort heapSort;\n    \n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n    \n    @Test\n    public void sortTest() {\n        Integer[] inputArray = {4, 10, 3, 5, 1};\n        Integer[] sortedArray = {1, 3, 4, 5, 10};\n        Integer[] resultArray = heapSort.sort(inputArray);\n        assertArrayEquals(sortedArray, resultArray);\n    }\n\n    @Test\n    public void emptyArrayTest() {\n        Integer[] emptyArray = {};\n        Integer[] resultArray = heapSort.sort(emptyArray);\n        assertArrayEquals(emptyArray, resultArray);\n    }\n\n    @Test\n    public void singleElementTest() {\n        Integer[] singleElementArray = {77};\n        Integer[] resultArray = heapSort.sort(singleElementArray);\n        assertArrayEquals(singleElementArray, resultArray);\n    }\n\n    @Test\n    public void alreadySortedArrayTest() {\n        Integer[] sortedArray = {1, 2, 3, 4, 5};\n        Integer[] resultArray = heapSort.sort(sortedArray);\n        assertArrayEquals(sortedArray, resultArray);\n    }\n\n    @Test\n    public void reverseSortedArrayTest() {\n        Integer[] reverseSortedArray = {9, 7, 5, 3, 1};\n        Integer[] sortedArray = {1, 3, 5, 7, 9};\n        Integer[] resultArray = heapSort.sort(reverseSortedArray);\n        assertArrayEquals(sortedArray, resultArray);\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    \n    private HeapSort heapSort;\n    \n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n    \n    @Test\n    public void sortTest() {\n        Integer[] actual = {8, 4, 23, 42, 16, 15};\n        Integer[] expected = {4, 8, 15, 16, 23, 42};\n        assertArrayEquals(expected, heapSort.sort(actual), \"The sorted array should match the expected array.\");\n        \n        String[] actualStr = {\"banana\", \"cherry\", \"apple\", \"date\"};\n        String[] expectedStr = {\"apple\", \"banana\", \"cherry\", \"date\"};\n        assertArrayEquals(expectedStr, heapSort.sort(actualStr), \"The sorted array should match the expected array.\");\n        \n        Double[] actualDoubles = {9.5, 4.4, 6.6, 1.2, 3.3};\n        Double[] expectedDoubles = {1.2, 3.3, 4.4, 6.6, 9.5};\n        assertArrayEquals(expectedDoubles, heapSort.sort(actualDoubles), \"The sorted array should match the expected array.\");\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n        Integer[] actual = {3, 2, 1, 4, 5};\n        Integer[] expected = {1, 2, 3, 4, 5};\n        actual = heapSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The sorted array does not match the expected array.\");\n        \n        String[] actualStrings = {\"delta\", \"alpha\", \"charlie\", \"bravo\"};\n        String[] expectedStrings = {\"alpha\", \"bravo\", \"charlie\", \"delta\"};\n        actualStrings = heapSort.sort(actualStrings);\n        assertArrayEquals(expectedStrings, actualStrings, \"The sorted array of strings does not match the expected array.\");\n        \n        // Testing when the input array is already sorted\n        Integer[] alreadySortedActual = {1, 2, 3, 4, 5};\n        Integer[] alreadySortedExpected = {1, 2, 3, 4, 5};\n        alreadySortedActual = heapSort.sort(alreadySortedActual);\n        assertArrayEquals(alreadySortedExpected, alreadySortedActual, \"The sorted array should be equal to the original sorted array.\");\n        \n        // Testing on an empty array\n        Integer[] emptyActual = {};\n        Integer[] emptyExpected = {};\n        emptyActual = heapSort.sort(emptyActual);\n        assertArrayEquals(emptyExpected, emptyActual, \"The sorted empty array should also be empty.\");\n        \n        // Testing on a single element array\n        Integer[] singleElementActual = {42};\n        Integer[] singleElementExpected = {42};\n        singleElementActual = heapSort.sort(singleElementActual);\n        assertArrayEquals(singleElementExpected, singleElementActual, \"The sorted single element array should be equal to the original single element array.\");\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    private HeapSort heapSort;\n    \n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n    \n    @Test\n    public void sortTest() {\n        Integer[] actual = {3, 2, 5, 4, 1};\n        Integer[] expected = {1, 2, 3, 4, 5};\n        actual = heapSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The sorted array does not match the expected output.\");\n    }\n    \n    @Test\n    public void sortTest_Empty() {\n        Integer[] actual = {};\n        Integer[] expected = {};\n        actual = heapSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The sorted array of an empty array should be empty.\");\n    }\n    \n    @Test\n    public void sortTest_SingleElement() {\n        Integer[] actual = {1};\n        Integer[] expected = {1};\n        actual = heapSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The sorted array with a single element should be the same as the input.\");\n    }\n\n    @Test\n    public void sortTest_AlreadySorted() {\n        Integer[] actual = {1, 2, 3, 4, 5};\n        Integer[] expected = {1, 2, 3, 4, 5};\n        actual = heapSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The sorted array that was already sorted should remain unaltered.\");\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    \n    private HeapSort heapSort;\n\n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n    \n    @Test\n    public void sortTest() {\n        Integer[] unsortedIntegerArray = { 3, 2, 5, 1, 7, 4 };\n        Integer[] sortedIntegerArray = { 1, 2, 3, 4, 5, 7 };\n\n        // Test with integers\n        assertArrayEquals(sortedIntegerArray, heapSort.sort(unsortedIntegerArray));\n        \n        // Test with empty array\n        Integer[] emptyArray = {};\n        assertArrayEquals(emptyArray, heapSort.sort(emptyArray));\n        \n        // Test with single-element array\n        Integer[] singleElementArray = { 1 };\n        assertArrayEquals(singleElementArray, heapSort.sort(singleElementArray));\n        \n        // Test with already sorted array\n        Integer[] alreadySortedArray = { 1, 2, 3, 4, 5 };\n        assertArrayEquals(alreadySortedArray, heapSort.sort(alreadySortedArray));\n        \n        // Test with reverse sorted array\n        Integer[] reverseSortedArray = { 5, 4, 3, 2, 1 };\n        Integer[] expectedSortedArray = { 1, 2, 3, 4, 5 };\n        assertArrayEquals(expectedSortedArray, heapSort.sort(reverseSortedArray));\n        \n        // Test with Strings\n        String[] unsortedStringArray = { \"delta\", \"alpha\", \"charlie\", \"bravo\" };\n        String[] sortedStringArray = { \"alpha\", \"bravo\", \"charlie\", \"delta\" };\n        assertArrayEquals(sortedStringArray, heapSort.sort(unsortedStringArray));\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    private final HeapSort heapSort = new HeapSort();\n\n    @Test\n    public void sortTest() {\n        Integer[] actual = {3, 2, 5, 1, 4};\n        Integer[] expected = {1, 2, 3, 4, 5};\n        actual = heapSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The sorted array is not correct.\");\n\n        String[] actualStrings = {\"delta\", \"charlie\", \"echo\", \"bravo\", \"alpha\"};\n        String[] expectedStrings = {\"alpha\", \"bravo\", \"charlie\", \"delta\", \"echo\"};\n        actualStrings = heapSort.sort(actualStrings);\n        assertArrayEquals(expectedStrings, actualStrings, \"The sorted strings array is not correct.\");\n    }\n\n    @Test\n    public void sortTest_EmptyArray() {\n        Integer[] actualEmpty = {};\n        Integer[] expectedEmpty = {};\n        actualEmpty = heapSort.sort(actualEmpty);\n        assertArrayEquals(expectedEmpty, actualEmpty, \"The sorted empty array should be the same as the input.\");\n    }\n\n    @Test\n    public void sortTest_SingleElement() {\n        Integer[] actualSingle = {1};\n        Integer[] expectedSingle = {1};\n        actualSingle = heapSort.sort(actualSingle);\n        assertArrayEquals(expectedSingle, actualSingle, \"The sorted single-element array should be the same as the input.\");\n    }\n\n    @Test\n    public void sortTest_NullArray() {\n        Integer[] actualNull = null;\n        Assertions.assertThrows(NullPointerException.class, () -> {\n            heapSort.sort(actualNull);\n        }, \"Sorting a null array should throw NullPointerException.\");\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    private HeapSort heapSort;\n\n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n\n    @Test\n    public void sortTest() {\n        // Test with Integer array\n        Integer[] unsortedIntegers = {3, 2, 5, 1, 4};\n        Integer[] sortedIntegers = {1, 2, 3, 4, 5};\n        assertArrayEquals(sortedIntegers, heapSort.sort(unsortedIntegers));\n\n        // Test with String array\n        String[] unsortedStrings = {\"banana\", \"apple\", \"cherry\", \"date\", \"elderberry\"};\n        String[] sortedStrings = {\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"};\n        assertArrayEquals(sortedStrings, heapSort.sort(unsortedStrings));\n\n        // Test with empty array\n        Integer[] emptyArray = {};\n        assertArrayEquals(emptyArray, heapSort.sort(emptyArray));\n\n        // Test with already sorted array\n        Integer[] alreadySortedArray = {1, 2, 3, 4, 5};\n        assertArrayEquals(alreadySortedArray, heapSort.sort(alreadySortedArray));\n\n        // Test with reverse ordered array\n        Integer[] reverseArray = {5, 4, 3, 2, 1};\n        assertArrayEquals(sortedIntegers, heapSort.sort(reverseArray));\n\n        // Test with single element array\n        Integer[] singleElementArray = {42};\n        assertArrayEquals(singleElementArray, heapSort.sort(singleElementArray));\n\n        // Test with duplicate elements in array\n        Integer[] duplicateElementsArray = {2, 1, 2, 1};\n        Integer[] sortedWithDuplicatesArray = {1, 1, 2, 2};\n        assertArrayEquals(sortedWithDuplicatesArray, heapSort.sort(duplicateElementsArray));\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    private HeapSort heapSort;\n\n    @BeforeEach\n    public void setup() {\n        heapSort = new HeapSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] actual = { 4, 3, 2, 1 };\n        Integer[] expected = { 1, 2, 3, 4 };\n\n        actual = heapSort.sort(actual);\n\n        assertArrayEquals(expected, actual, \"The sorted array is not as expected.\");\n    }\n\n    @Test\n    public void sortTestEmpty() {\n        Integer[] actual = {};\n        Integer[] expected = {};\n\n        actual = heapSort.sort(actual);\n\n        assertArrayEquals(expected, actual, \"The sorted array of an empty array should be an empty array.\");\n    }\n\n    @Test\n    public void sortTestSingleElement() {\n        Integer[] actual = { 1 };\n        Integer[] expected = { 1 };\n\n        actual = heapSort.sort(actual);\n\n        assertArrayEquals(expected, actual, \"The sorted array with a single element should be identical to the input array.\");\n    }\n\n    @Test\n    public void sortTestDuplicates() {\n        Integer[] actual = { 2, 3, 2, 1 };\n        Integer[] expected = { 1, 2, 2, 3 };\n\n        actual = heapSort.sort(actual);\n\n        assertArrayEquals(expected, actual, \"The sorted array should handle duplicates correctly.\");\n    }\n\n    @Test\n    public void sortTestAlreadySorted() {\n        Integer[] actual = { 1, 2, 3, 4 };\n        Integer[] expected = { 1, 2, 3, 4 };\n\n        actual = heapSort.sort(actual);\n\n        assertArrayEquals(expected, actual, \"An already sorted array should not change after being sorted.\");\n    }\n\n    @Test\n    public void sortTestReverseSorted() {\n        Integer[] actual = { 4, 3, 2, 1 };\n        Integer[] expected = { 1, 2, 3, 4 };\n\n        actual = heapSort.sort(actual);\n\n        assertArrayEquals(expected, actual, \"A reverse sorted array should be correctly sorted.\");\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n        Integer[] actual = {3, 1, 4, 1, 5, 9};\n        Integer[] expected = {1, 1, 3, 4, 5, 9};\n\n        assertArrayEquals(expected, heapSort.sort(actual), \"Array should be sorted\");\n\n        actual = new Integer[]{2, 7, 1, 8, 2, 8, 1};\n        expected = new Integer[]{1, 1, 2, 2, 7, 8, 8};\n\n        assertArrayEquals(expected, heapSort.sort(actual), \"Array should be sorted\");\n        \n        actual = new Integer[]{};\n        expected = new Integer[]{};\n\n        assertArrayEquals(expected, heapSort.sort(actual), \"Empty array should remain unchanged\");\n\n        actual = new Integer[]{10};\n        expected = new Integer[]{10};\n\n        assertArrayEquals(expected, heapSort.sort(actual), \"Single element array should remain unchanged\");\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    \n    @Test\n    public void sortTestIntegerArray() {\n        HeapSort heapSort = new HeapSort();\n        Integer[] actual = {5, 3, 0, -2, 4, 1};\n        Integer[] expected = {-2, 0, 1, 3, 4, 5};\n        assertArrayEquals(expected, heapSort.sort(actual));\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 84.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    private final HeapSort heapSort = new HeapSort();\n\n    @Test\n    public void sortTest() {\n        Integer[] actual = {4, 3, 2, 5, 1};\n        Integer[] expected = {1, 2, 3, 4, 5};\n        actual = heapSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The sorted array should be: [1, 2, 3, 4, 5]\");\n        \n        String[] actualStrings = {\"delta\", \"charlie\", \"echo\", \"bravo\", \"alpha\"};\n        String[] expectedStrings = {\"alpha\", \"bravo\", \"charlie\", \"delta\", \"echo\"};\n        actualStrings = heapSort.sort(actualStrings);\n        assertArrayEquals(expectedStrings, actualStrings, \"The sorted strings should be: [alpha, bravo, charlie, delta, echo]\");\n        \n        // Test with empty array\n        Integer[] emptyActual = new Integer[0];\n        Integer[] emptyExpected = new Integer[0];\n        emptyActual = heapSort.sort(emptyActual);\n        assertArrayEquals(emptyExpected, emptyActual, \"The sorted empty array should be equal to an empty array.\");\n        \n        // Test with single element array\n        Integer[] singleActual = {1};\n        Integer[] singleExpected = {1};\n        singleActual = heapSort.sort(singleActual);\n        assertArrayEquals(singleExpected, singleActual, \"A single-element array should not change after sorting.\");\n        \n        // Test with null elements\n        Integer[] nullArray = {3, null, 1};\n        Throwable exception = assertThrows(NullPointerException.class, () -> heapSort.sort(nullArray));\n        assertNotNull(exception, \"Sorting an array with a null value should throw NullPointerException.\");\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\npublic class HeapSortTest {\n\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n\n        Integer[] unsortedArray = {4, 3, 2, 1};\n        Integer[] sortedArray = {1, 2, 3, 4};\n        \n        Integer[] resultArray = heapSort.sort(unsortedArray);\n        \n        // Check if the result array is sorted\n        for (int i = 1; i < resultArray.length; i++) {\n            assertTrue(resultArray[i - 1].compareTo(resultArray[i]) <= 0);\n        }\n        \n        // Additionally, compare the expected sorted array with the result\n        assertArrayEquals(sortedArray, resultArray, \"The array is not sorted correctly\");\n    }\n}",
        "package_metric": 1.86,
        "class_metric": 96.0,
        "method_metric": 100.0,
        "pitest": 66.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    private HeapSort heapSort;\n\n    @BeforeEach\n    public void setup() {\n        heapSort = new HeapSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] inputArray = {4, 3, 2, 10, 12, 1, 5, 6};\n        Integer[] expectedOutput = {1, 2, 3, 4, 5, 6, 10, 12};\n\n        Integer[] sortedArray = heapSort.sort(inputArray);\n\n        assertArrayEquals(expectedOutput, sortedArray, \"The sorted array should match the expected output.\");\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n        \n        // Case 1: Testing with integers\n        Integer[] intArray = {4, 3, 2, 1};\n        Integer[] intExpected = {1, 2, 3, 4};\n        Integer[] intSorted = heapSort.sort(intArray);\n        assertArrayEquals(intExpected, intSorted, \"The integer array should be sorted after calling the sort method.\");\n\n        // Case 2: Testing with empty array\n        Integer[] emptyArray = {};\n        Integer[] emptyExpected = {};\n        Integer[] emptySorted = heapSort.sort(emptyArray);\n        assertArrayEquals(emptyExpected, emptySorted, \"An empty array should not change after calling the sort method.\");\n\n        // Case 3: Testing with already sorted array\n        Integer[] sortedArray = {1, 2, 3, 4, 5};\n        Integer[] sortedExpected = {1, 2, 3, 4, 5};\n        Integer[] sortedArraySorted = heapSort.sort(sortedArray);\n        assertArrayEquals(sortedExpected, sortedArraySorted, \"An already sorted array should remain unchanged after calling the sort method.\");\n        \n        // Case 4: Testing with Strings\n        String[] stringArray = {\"delta\", \"bravo\", \"charlie\", \"alpha\"};\n        String[] stringExpected = {\"alpha\", \"bravo\", \"charlie\", \"delta\"};\n        String[] stringSorted = heapSort.sort(stringArray);\n        assertArrayEquals(stringExpected, stringSorted, \"The string array should be sorted after calling the sort method.\");\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    \n    private HeapSort heapSort;\n    \n    @BeforeEach\n    public void setup() {\n        heapSort = new HeapSort();\n    }\n    \n    @Test\n    public void sortTest() {\n        Integer[] unsorted = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3};\n        Integer[] expected = {1, 1, 2, 3, 3, 4, 5, 5, 6, 9};\n\n        Integer[] sorted = heapSort.sort(unsorted);\n        \n        assertArrayEquals(expected, sorted, \"The sorted array does not match the expected array\");\n    }\n    \n    // Add more tests if necessary for different generic types and edge cases.\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    private HeapSort heapSort;\n\n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] inputArray = {4, 1, 3, 9, 7};\n        Integer[] expectedArray = {1, 3, 4, 7, 9};\n        Integer[] sortedArray = heapSort.sort(inputArray);\n\n        assertArrayEquals(expectedArray, sortedArray, \"The sorted array does not match the expected array.\");\n    }\n    \n    @AfterEach\n    public void tearDown() {\n        heapSort = null;\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 81.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    @Test\n    public void sortTest() {\n        // Assuming HeapSort class has a public method named sort\n        // and resides in the same package\n        HeapSort heapSort = new HeapSort();\n\n        // Test with an unsorted array\n        Integer[] unsorted = { 3, 2, 5, 1, 4 };\n        Integer[] sorted = heapSort.sort(unsorted);\n\n        // Check if the sorted array is in the correct order\n        assertArrayEquals(new Integer[]{ 1, 2, 3, 4, 5 }, sorted);\n        \n        // Test with an already sorted array\n        unsorted = new Integer[]{ 1, 2, 3, 4, 5 };\n        sorted = heapSort.sort(unsorted);\n        \n        // Check if the sorted array remains in the correct order\n        assertArrayEquals(new Integer[]{ 1, 2, 3, 4, 5 }, sorted);\n        \n        // Test with all elements being the same\n        unsorted = new Integer[]{ 2, 2, 2, 2, 2 };\n        sorted = heapSort.sort(unsorted);\n        \n        // Check if the sorted array remains in the correct order\n        assertArrayEquals(new Integer[]{ 2, 2, 2, 2, 2 }, sorted);\n        \n        // Test with negatives and positives\n        unsorted = new Integer[]{ -3, 11, 2, -14, 0 };\n        sorted = heapSort.sort(unsorted);\n        \n        // Check if the sorted array is in the correct order\n        assertArrayEquals(new Integer[]{ -14, -3, 0, 2, 11 }, sorted);\n        \n        // Test with an empty array\n        unsorted = new Integer[]{};\n        sorted = heapSort.sort(unsorted);\n        \n        // Check if the sorted array is in the correct order\n        assertArrayEquals(new Integer[]{}, sorted);\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    \n    private HeapSort heapSort;\n    \n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n    \n    @Test\n    public void sortTest() {\n        // Assert that the method sorts as expected\n        Integer[] inputArray = { 4, 3, 2, 1 };\n        Integer[] expectedOutput = { 1, 2, 3, 4 };\n        assertArrayEquals(expectedOutput, heapSort.sort(inputArray));\n        \n        // Test with another data type, for example, strings\n        String[] stringInputArray = { \"delta\", \"alpha\", \"charlie\", \"bravo\" };\n        String[] stringExpectedOutput = { \"alpha\", \"bravo\", \"charlie\", \"delta\" };\n        assertArrayEquals(stringExpectedOutput, heapSort.sort(stringInputArray));\n        \n        // Test with empty array\n        Integer[] emptyArray = {};\n        Integer[] expectedEmptyOutput = {};\n        assertArrayEquals(expectedEmptyOutput, heapSort.sort(emptyArray));\n        \n        // Test with already sorted array\n        Integer[] sortedArray = { 1, 2, 3, 4 };\n        Integer[] expectedSortedOutput = { 1, 2, 3, 4 };\n        assertArrayEquals(expectedSortedOutput, heapSort.sort(sortedArray));\n        \n        // Test with all elements same array\n        Integer[] sameElementsArray = { 7, 7, 7, 7 };\n        Integer[] expectedSameElementsOutput = { 7, 7, 7, 7 };\n        assertArrayEquals(expectedSameElementsOutput, heapSort.sort(sameElementsArray));\n    }    \n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    // Assuming we have a HeapSort class that implements the sort method\n    private final HeapSort heapSort = new HeapSort();\n    \n    @Test\n    public void sortTest() {\n        // Create test data\n        Integer[] testArray = new Integer[]{3, 1, 4, 1, 5, 9, 2, 6, 5, 3};\n        Integer[] expectedSortedArray = new Integer[]{1, 1, 2, 3, 3, 4, 5, 5, 6, 9};\n\n        // Execute the sort method on the test data\n        Integer[] resultArray = heapSort.sort(testArray);\n        \n        // Assert that the result is as expected\n        assertArrayEquals(expectedSortedArray, resultArray, \"The array is not sorted correctly\");\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    HeapSort heapSort = new HeapSort(); // Assume there is a HeapSort class this test is meant for\n\n    @Test\n    public void sortTest() {\n        // Given\n        Integer[] actual = {4, 1, 3, 9, 7};\n        Integer[] expected = {1, 3, 4, 7, 9}; // Expected outcome after sorting the array\n        \n        // When\n        actual = heapSort.sort(actual);\n        \n        // Then\n        assertArrayEquals(expected, actual, \"The sorted array should be [1, 3, 4, 7, 9]\");\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 81.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    private HeapSort heapSort;\n\n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] inputArray = { 3, 1, 4, 1, 5, 9 };\n        Integer[] expectedOutput = { 1, 1, 3, 4, 5, 9 };\n        Integer[] sortedArray = heapSort.sort(inputArray);\n        assertArrayEquals(expectedOutput, sortedArray, \"The sorted array should be [1, 1, 3, 4, 5, 9]\");\n\n        String[] inputStringArray = { \"banana\", \"apple\", \"pear\", \"grape\" };\n        String[] expectedStringOutput = { \"apple\", \"banana\", \"grape\", \"pear\" };\n        String[] sortedStringArray = heapSort.sort(inputStringArray);\n        assertArrayEquals(expectedStringOutput, sortedStringArray, \"The sorted String array should be [apple, banana, grape, pear]\");\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MColoring",
        "method_name": "possiblePaint",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\n\npublic class MColoringTest {\n    @Test\n    public void possiblePaintTest() {\n        // Prepare a simple graph with 3 nodes in a line (1-2-3)\n        ArrayList<Node> nodes = new ArrayList<Node>();\n        nodes.add(null); // Add dummy node to start the index at 1\n        for(int i = 1; i <= 3; i++) {\n            nodes.add(new Node());\n        }\n        nodes.get(1).edges.add(2);\n        nodes.get(2).edges.add(1);\n        nodes.get(2).edges.add(3);\n        nodes.get(3).edges.add(2);\n\n        // Test a scenario where painting is possible with m colors\n        assertEquals(1, MColoring.possiblePaint(nodes, 3, 2), \"Painting is possible with 2 colors.\");\n\n        // Test a scenario where painting is not possible with m colors\n        assertEquals(0, MColoring.possiblePaint(nodes, 3, 1), \"Painting is not possible with 1 color.\");\n\n        // Prepare a graph with 4 nodes in a cycle (1-2-3-4-1)\n        nodes.add(new Node());\n        nodes.get(1).edges.add(4);\n        nodes.get(4).edges.add(1);\n        nodes.get(3).edges.add(4);\n        nodes.get(4).edges.add(3);\n\n        // Test a scenario where painting is possible with m colors on a cycle\n        assertEquals(1, MColoring.possiblePaint(nodes, 4, 3), \"Painting is possible with 3 colors on a cycle.\");\n    }\n}",
        "package_metric": 8.6,
        "class_metric": 96.0,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MColoring",
        "method_name": "possiblePaint",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport java.util.ArrayList;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MColoringTest {\n    @Test\n    public void possiblePaintTest() {\n        // Prepare a small graph for testing (example only)\n        ArrayList<Node> nodes = new ArrayList<>();\n        Node node1 = new Node();\n        Node node2 = new Node();\n        Node node3 = new Node();\n\n        // Create adjacency list (graph with 3 nodes)\n        nodes.add(new Node()); // Adding an extra node at index 0 to match the 1-based indexing\n        nodes.add(node1);\n        nodes.add(node2);\n        nodes.add(node3);\n\n        // Connect nodes (1 -- 2 -- 3)\n        node1.edges.add(2); // Node 1 connected to Node 2\n        node2.edges.add(1); // Node 2 connected to Node 1\n        node2.edges.add(3); // Node 2 connected to Node 3\n        node3.edges.add(2); // Node 3 connected to Node 2\n\n        // Test cases\n        // Should return 1 since we can paint in such way that no two adjacent nodes have the same color\n        assertEquals(1, MColoring.possiblePaint(nodes, 3, 2), \"Should return 1 for m >= 2 with this graph\");\n        // Should return 0 since there are not enough colors to paint nodes in a way that no two adjacent nodes have the same color\n        assertEquals(0, MColoring.possiblePaint(nodes, 3, 1), \"Should return 0 for m < 2 with this graph\");\n    }\n}",
        "package_metric": 8.6,
        "class_metric": 96.0,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MColoring",
        "method_name": "possiblePaint",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.ArrayList;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MColoringTest {\n    @Test\n    public void possiblePaintTest() {\n        // Initialize nodes\n        ArrayList<Node> nodes = new ArrayList<>();\n        for (int i = 0; i <= 3; i++) {\n            nodes.add(new Node());\n        }\n        \n        // Simulate the graph:\n        // Node 1 connects with Node 2 and 3\n        // Node 2 connects with Node 1 and 3\n        // Node 3 connects with Node 1 and 2\n        nodes.get(1).edges.add(2);\n        nodes.get(1).edges.add(3);\n        nodes.get(2).edges.add(1);\n        nodes.get(2).edges.add(3);\n        nodes.get(3).edges.add(1);\n        nodes.get(3).edges.add(2);\n\n        // Test cases\n        // When m (number of colors) is sufficient, should return 1\n        assertEquals(1, MColoring.possiblePaint(nodes, 3, 3));\n\n        // When m (number of colors) is not sufficient, should return 0\n        assertEquals(0, MColoring.possiblePaint(nodes, 3, 2));\n    }\n}",
        "package_metric": 8.6,
        "class_metric": 96.0,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MColoring",
        "method_name": "possiblePaint",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MColoringTest {\n    @Test\n    public void possiblePaintTest() {\n        // Setup nodes\n        ArrayList<Node> nodes = new ArrayList<>();\n        for (int i = 0; i <= 4; i++) {  // Create 4 nodes (+1 for 1-based indexing)\n            Node node = new Node();\n            node.color = 1;\n            node.edges = new HashSet<>();\n            nodes.add(node);\n        }\n        \n        // Add edges to create a square with a diagonal line\n        nodes.get(1).edges.add(2);\n        nodes.get(2).edges.add(1);\n        nodes.get(2).edges.add(3);\n        nodes.get(3).edges.add(2);\n        nodes.get(3).edges.add(4);\n        nodes.get(4).edges.add(3);\n        nodes.get(4).edges.add(1);\n        nodes.get(1).edges.add(4);\n        nodes.get(1).edges.add(3);  // Diagonal line\n        nodes.get(3).edges.add(1);\n\n        // Case 1: Test if possible to paint with 2 colours (expecting to fail)\n        int resultWithTwoColors = MColoring.possiblePaint(nodes, 4, 2);\n        assertEquals(0, resultWithTwoColors, \"Should return 0, as it's not possible to paint with 2 colors without adjacent colors clashing\");\n        \n        // Case 2: Test if possible to paint with 3 colours (expecting to succeed)\n        int resultWithThreeColors = MColoring.possiblePaint(nodes, 4, 3);\n        assertEquals(1, resultWithThreeColors, \"Should return 1, as it's possible to paint with 3 colors without adjacent colors clashing\");\n    }\n}",
        "package_metric": 8.6,
        "class_metric": 96.0,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MColoring",
        "method_name": "possiblePaint",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MColoringTest {\n    @Test\n    public void possiblePaintTest() {\n        // Initialize nodes\n        ArrayList<Node> nodes = new ArrayList<>();\n        for (int i = 0; i <= 4; i++) {\n            nodes.add(new Node());\n            nodes.get(i).color = 1; // Let's assume initial color of all nodes is 1\n            nodes.get(i).edges = new HashSet<>();\n        }\n        \n        // Build a simple graph (assuming 1-indexed nodes)\n        // Node 1 with edges to 2 and 3\n        nodes.get(1).edges.add(2);\n        nodes.get(1).edges.add(3);\n        // Node 2 with edges to 1 and 4\n        nodes.get(2).edges.add(1);\n        nodes.get(2).edges.add(4);\n        // Node 3 with edges to 1 and 4\n        nodes.get(3).edges.add(1);\n        nodes.get(3).edges.add(4);\n        // Node 4 with edges to 2 and 3\n        nodes.get(4).edges.add(2);\n        nodes.get(4).edges.add(3);\n\n        // Test case where painting is possible using 2 colors (m=2)\n        int result = MColoring.possiblePaint(nodes, 4, 2); // 4 nodes with max 2 colors\n        assertEquals(1, result, \"Painting with 2 colors should be possible\");\n\n        // Test case where painting is not possible\n        result = MColoring.possiblePaint(nodes, 4, 1); // 4 nodes with max 1 color\n        assertEquals(0, result, \"Painting with 1 color should not be possible\");\n    }\n}",
        "package_metric": 8.6,
        "class_metric": 96.0,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MColoring",
        "method_name": "possiblePaint",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class MColoringTest {\n    @Test\n    public void possiblePaintTest() {\n        // Node initialization\n        ArrayList<Node> nodes = new ArrayList<>();\n        for (int i = 0; i <= 3; i++) { // 3 nodes, indexed from 1 to 3\n            nodes.add(new Node());\n            nodes.get(i).color = 1;\n            nodes.get(i).edges = new HashSet<>();\n        }\n        \n        // Simple graph connections (no cycles, all nodes separate)\n        // Node 1 with 2\n        nodes.get(1).edges.add(2);\n        // Node 2 with 3\n        nodes.get(2).edges.add(3);\n        // Node 3 with 1\n        nodes.get(3).edges.add(1);\n        \n        int n = 3; // Number of nodes\n        int m = 2; // Number of colors\n        \n        // Invoke possiblePaint to check if we can color the graph with given m colors\n        int result = MColoring.possiblePaint(nodes, n, m);\n        \n        // Assert that the paint is possible with 2 colors\n        assertEquals(1, result, \"The graph should be paintable with 2 colors\");\n        \n        // Testing with non-colorable scenario\n        m = 1; // Only 1 color\n        result = MColoring.possiblePaint(nodes, n, m);\n        \n        // Assert that with only 1 color, it's impossible to paint the graph\n        assertEquals(0, result, \"The graph should not be paintable with only 1 color\");\n    }\n}",
        "package_metric": 8.6,
        "class_metric": 96.0,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MColoring",
        "method_name": "possiblePaint",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class MColoringTest {\n    @Test\n    public void possiblePaintTest() {\n        int n = 3; // number of nodes\n        int m = 3; // max number of colors allowed\n        ArrayList<Node> nodes = new ArrayList<>();\n\n        // Initialize nodes with their respective edges\n        // Assuming nodes start from index 1 for simplicity\n        nodes.add(null); // 0th index is unused\n        for (int i = 1; i <= n; i++) {\n            nodes.add(new Node());\n            nodes.get(i).color = 1; // Initial color set to 1\n            nodes.get(i).edges = new HashSet<>();\n        }\n\n        // Add edges for testing\n        // Example: A triangle where all nodes are connected with each other\n        nodes.get(1).edges.add(2);\n        nodes.get(1).edges.add(3);\n        nodes.get(2).edges.add(1);\n        nodes.get(2).edges.add(3);\n        nodes.get(3).edges.add(1);\n        nodes.get(3).edges.add(2);\n        \n        // Call the method with the test nodes\n        MColoring coloring = new MColoring();\n        int result = coloring.possiblePaint(nodes, n, m);\n\n        // Assert that the result is as expected\n        // In this case, the triangle graph can be colored with 3 different colors\n        assertEquals(1, result);\n    }\n}",
        "package_metric": 8.92,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "Merge_K_SortedLinkedlist",
        "method_name": "mergeKList",
        "test_code": "class Node implements Comparable<Node> {\n    int data;\n    Node next;\n\n    public Node(int data) {\n        this.data = data;\n    }\n\n    @Override\n    public int compareTo(Node other) {\n        return Integer.compare(this.data, other.data);\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "ArrayCombination",
        "method_name": "combination",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport java.util.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayCombinationTest {\n\n    @Test\n    public void combinationTest() {\n        // Test for valid input\n        List<TreeSet<Integer>> result = ArrayCombination.combination(4, 2);\n        List<TreeSet<Integer>> expected = new ArrayList<>();\n        expected.add(new TreeSet<>(Arrays.asList(1, 2)));\n        expected.add(new TreeSet<>(Arrays.asList(1, 3)));\n        expected.add(new TreeSet<>(Arrays.asList(1, 4)));\n        expected.add(new TreeSet<>(Arrays.asList(2, 3)));\n        expected.add(new TreeSet<>(Arrays.asList(2, 4)));\n        expected.add(new TreeSet<>(Arrays.asList(3, 4)));\n        \n        // Assert that the result contains all expected combinations\n        assertNotNull(result);\n        assertEquals(expected.size(), result.size());\n        assertTrue(result.containsAll(expected));\n\n        // Test for n <= 0 should return null\n        List<TreeSet<Integer>> resultNegative = ArrayCombination.combination(-1, 2);\n        assertNull(resultNegative);\n\n        // Test for k == 0 should also return null based on the context provided\n        List<TreeSet<Integer>> resultKZero = ArrayCombination.combination(4, 0);\n        assertNull(resultKZero);\n        \n        // Add more test cases if necessary\n    }\n}",
        "package_metric": 8.28,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "ArrayCombination",
        "method_name": "combination",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayCombinationTest {\n\n    @Test\n    public void combinationTest() {\n        // Test for correct combinations\n        List<TreeSet<Integer>> result = ArrayCombination.combination(4, 2);\n        List<TreeSet<Integer>> expected = Arrays.asList(\n            new TreeSet<>(Arrays.asList(1, 2)),\n            new TreeSet<>(Arrays.asList(1, 3)),\n            new TreeSet<>(Arrays.asList(1, 4)),\n            new TreeSet<>(Arrays.asList(2, 3)),\n            new TreeSet<>(Arrays.asList(2, 4)),\n            new TreeSet<>(Arrays.asList(3, 4))\n        );\n        assertNotNull(result);\n        assertEquals(new HashSet<>(expected), new HashSet<>(result), \"The combination function does not return the correct combinations.\");\n\n        // Test for n < k (should return empty list)\n        List<TreeSet<Integer>> resultEmpty = ArrayCombination.combination(2, 3);\n        assertNotNull(resultEmpty);\n        assertTrue(resultEmpty.isEmpty(), \"The combination function should return an empty list when n < k.\");\n\n        // Test for k = 0 (according to context should return null)\n        List<TreeSet<Integer>> resultKzero = ArrayCombination.combination(4, 0);\n        assertNull(resultKzero, \"The combination function should return null if k is 0.\");\n\n        // Test for n = 0 (should return null due to invalid n)\n        List<TreeSet<Integer>> resultNzero = ArrayCombination.combination(0, 2);\n        assertNull(resultNzero, \"The combination function should return null if n is 0 or less.\");\n\n        // Test for negative n (should return null due to invalid n)\n        List<TreeSet<Integer>> resultNegative = ArrayCombination.combination(-1, 2);\n        assertNull(resultNegative, \"The combination function should return null if n is negative.\");\n\n        // Test for negative k (should return list with empty sets since no combination is possible)\n        List<TreeSet<Integer>> resultNegativeK = ArrayCombination.combination(4, -1);\n        assertNotNull(resultNegativeK);\n        assertTrue(resultNegativeK.isEmpty(), \"The combination function should return an empty list when k is negative.\");\n    }\n}",
        "package_metric": 8.28,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "ArrayCombination",
        "method_name": "combination",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport java.util.List;\nimport java.util.TreeSet;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayCombinationTest {\n    @Test\n    public void combinationTest() {\n        // Test for invalid n (n <= 0)\n        assertNull(ArrayCombination.combination(-1, 3), \"Expected null for n <= 0\");\n        \n        // Test when k is greater than n, which should result in an empty list\n        assertEquals(0, ArrayCombination.combination(3, 4).size(), \"Expected an empty list when k > n\");\n\n        // Test when k is 0, which based on context should be null\n        assertNull(ArrayCombination.combination(3, 0), \"Expected null for k == 0\");\n        \n        // Test for valid n and k (k <= n) to ensure correct output size\n        int n = 4;\n        int k = 2;\n        List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);\n        int expectedNumberOfCombinations = calculateBinomialCoefficient(n, k);\n        assertEquals(expectedNumberOfCombinations, result.size(), \"Expected list size differed from the number of combinations\");\n\n        // Check for uniqueness of the sets in the combination\n        long uniqueSetsCount = result.stream().distinct().count();\n        assertEquals(expectedNumberOfCombinations, uniqueSetsCount, \"Combination sets should be unique\");\n    }\n\n    // Helper method to calculate the number of combinations (binomial coefficient)\n    private int calculateBinomialCoefficient(int n, int k) {\n        long result = 1;\n        for (int i = 1; i <= k; i++) {\n            result *= (n - (k - i));\n            result /= i;\n        }\n        return (int) result; // Safe downcast as result will always fit in an int for valid n and k\n    }\n}",
        "package_metric": 8.28,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "ArrayCombination",
        "method_name": "combination",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\nimport java.util.TreeSet;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayCombinationTest {\n\n    @Test\n    public void combinationTest() {\n        // Test for n = 5, k = 3\n        List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);\n        assertNotNull(result, \"The result should not be null for n > 0\");\n        assertEquals(10, result.size(), \"Expected number of combinations for n=5, k=3 is 10\");\n\n        // Test for n = 0 (expected null result)\n        assertNull(ArrayCombination.combination(0, 3), \"The result should be null for n <= 0\");\n\n        // Test for n = 3, k = 1 (expected 3 combinations)\n        List<TreeSet<Integer>> smallResult = ArrayCombination.combination(3, 1);\n        assertNotNull(smallResult, \"The result should not be null for n > 0\");\n        assertEquals(3, smallResult.size(), \"Expected number of combinations for n=3, k=1 is 3\");\n\n        // Validate the contents of one combination set (e.g. for n=3, k=1)\n        assertTrue(smallResult.contains(new TreeSet<>(List.of(1))),\n                \"Result should contain combination [1]\");\n        assertTrue(smallResult.contains(new TreeSet<>(List.of(2))),\n                \"Result should contain combination [2]\");\n        assertTrue(smallResult.contains(new TreeSet<>(List.of(3))),\n                \"Result should contain combination [3]\");\n\n        // Further test cases can be added to verify the accuracy of the combination method\n    }\n}",
        "package_metric": 7.96,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "ArrayCombination",
        "method_name": "combination",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport java.util.List;\nimport java.util.TreeSet;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayCombinationTest {\n\n    @Test\n    public void combinationTest() {\n        // Test for an invalid case where n is non-positive\n        assertNull(ArrayCombination.combination(0, 2), \"Expect null for n <= 0\");\n\n        // Test for a valid case\n        List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);\n        \n        // expected combinations: [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 4], [1, 3, 5], [1, 4, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]\n        assertEquals(10, result.size(), \"Expect 10 combinations for 5 choose 3\");\n\n        // Explicitly check one of the combinations\n        assertTrue(result.contains(new TreeSet<>(List.of(1, 2, 3))), \"Result should contain [1, 2, 3]\");\n\n        // Test for k larger than n\n        List<TreeSet<Integer>> invalidResult = ArrayCombination.combination(3, 5);\n        // The behavior here is not defined in the provided code, but assuming it should return an empty list or handle gracefully.\n        assertNotNull(invalidResult, \"Expect valid (but empty) list or handled result for k > n\");\n        assertTrue(invalidResult.isEmpty(), \"Expect no combinations for 3 choose 5\");\n\n        // Test for k equal to n, should result in one combination with all elements\n        List<TreeSet<Integer>> oneResult = ArrayCombination.combination(3, 3);\n        assertNotNull(oneResult, \"Expect valid list for k = n\");\n        assertEquals(1, oneResult.size(), \"Expect 1 combination for 3 choose 3\");\n        assertTrue(oneResult.contains(new TreeSet<>(List.of(1, 2, 3))), \"Result should contain [1, 2, 3]\");\n    }\n}",
        "package_metric": 7.96,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "ArrayCombination",
        "method_name": "combination",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\nimport java.util.TreeSet;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayCombinationTest {\n\n    @Test\n    public void combinationTest() {\n        // Test with n = 4, k = 2, expecting combinations of [1,2], [1,3], [1,4], [2,3], [2,4], and [3,4]\n        List<TreeSet<Integer>> result = ArrayCombination.combination(4, 2);\n        assertNotNull(result, \"Result should not be null\");\n        assertEquals(6, result.size(), \"There should be 6 combinations\");\n\n        // Create expected combinations\n        TreeSet<Integer> expected1 = new TreeSet<>(List.of(1, 2));\n        TreeSet<Integer> expected2 = new TreeSet<>(List.of(1, 3));\n        TreeSet<Integer> expected3 = new TreeSet<>(List.of(1, 4));\n        TreeSet<Integer> expected4 = new TreeSet<>(List.of(2, 3));\n        TreeSet<Integer> expected5 = new TreeSet<>(List.of(2, 4));\n        TreeSet<Integer> expected6 = new TreeSet<>(List.of(3, 4));\n\n        // Assert that the result contains all expected combinations\n        assertTrue(result.contains(expected1), \"Result should contain [1, 2]\");\n        assertTrue(result.contains(expected2), \"Result should contain [1, 3]\");\n        assertTrue(result.contains(expected3), \"Result should contain [1, 4]\");\n        assertTrue(result.contains(expected4), \"Result should contain [2, 3]\");\n        assertTrue(result.contains(expected5), \"Result should contain [2, 4]\");\n        assertTrue(result.contains(expected6), \"Result should contain [3, 4]\");\n\n        // Test for edge case with n <= 0, expecting null\n        assertNull(ArrayCombination.combination(0, 2), \"Result should be null for n <= 0\");\n\n        // Test different values of k (e.g., k > n), expecting empty list\n        List<TreeSet<Integer>> resultEdgeCase = ArrayCombination.combination(3, 4);\n        assertTrue(resultEdgeCase.isEmpty(), \"Result should be empty if k > n\");\n    }\n}",
        "package_metric": 7.96,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "ArrayCombination",
        "method_name": "combination",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport java.util.List;\nimport java.util.TreeSet;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayCombinationTest {\n    @Test\n    public void combinationTest() {\n        // Test with valid inputs.\n        List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);\n\n        // Assert that the result is not null\n        assertNotNull(result, \"The result should not be null\");\n\n        // Assert that the result contains the correct number of combinations\n        int expectedNumberOfCombinations = 10; // This is C(5, 3), or 5 choose 3.\n        assertEquals(expectedNumberOfCombinations, result.size(), \"The result should contain the correct number of combinations\");\n\n        // Check some expected values (assuming the combination method is implemented correctly)\n        // The actual values will depend on how the combination method generates the combinations\n        assertTrue(result.contains(new TreeSet<>(List.of(1, 2, 3))), \"The result should contain {1, 2, 3}\");\n        assertTrue(result.contains(new TreeSet<>(List.of(1, 2, 4))), \"The result should contain {1, 2, 4}\");\n        assertTrue(result.contains(new TreeSet<>(List.of(1, 2, 5))), \"The result should contain {1, 2, 5}\");\n        // ...additional checks as needed for full coverage...\n\n        // Test with n <= 0, expecting null\n        assertNull(ArrayCombination.combination(-1, 3), \"The result should be null for n <= 0\");\n\n        // Test with k greater than n, expecting empty list\n        List<TreeSet<Integer>> emptyResult = ArrayCombination.combination(3, 5);\n        assertNotNull(emptyResult, \"The result should not be null even for k > n\");\n        assertTrue(emptyResult.isEmpty(), \"The result should be an empty list for k > n\");\n    }\n}",
        "package_metric": 7.96,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "ArrayCombination",
        "method_name": "combination",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.List;\nimport java.util.TreeSet;\n\npublic class ArrayCombinationTest {\n    @Test\n    public void combinationTest() {\n        // Scenario with valid parameters n = 5 and k = 3\n        List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);\n        assertNotNull(result, \"The result should not be null when valid parameters are passed.\");\n        assertEquals(10, result.size(), \"There should be 10 combinations when choosing 3 out of 5.\");\n        \n        // Validating one of the combinations\n        assertTrue(result.contains(new TreeSet<>(List.of(1, 2, 3))), \"The list of combinations should include the combination [1, 2, 3].\");\n\n        // Boundary case with n = k\n        result = ArrayCombination.combination(3, 3);\n        assertNotNull(result, \"The result should not be null for n = k.\");\n        assertEquals(1, result.size(), \"There should be 1 combination when n = k\");\n        assertTrue(result.contains(new TreeSet<>(List.of(1, 2, 3))), \"The list should include the combination [1, 2, 3].\");\n\n        // Edge case where n < k\n        result = ArrayCombination.combination(2, 3);\n        assertNotNull(result, \"The result should not be null even if n < k.\");\n        assertTrue(result.isEmpty(), \"There should be no combinations when n < k.\");\n\n        // Edge case where n is invalid (n <= 0)\n        result = ArrayCombination.combination(-1, 3);\n        assertNull(result, \"The result should be null when n is not positive.\");\n\n        // Edge case where k is invalid (k <= 0)\n        result = ArrayCombination.combination(3, -1);\n        assertNotNull(result, \"The result should not be null for negative k.\");\n        assertTrue(result.isEmpty(), \"There should be no combinations when k is not positive.\");\n    }\n}",
        "package_metric": 7.96,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "ArrayCombination",
        "method_name": "combination",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\nimport java.util.TreeSet;\n\npublic class ArrayCombinationTest {\n\n    @Test\n    public void combinationTest() {\n        // Test invalid input\n        assertNull(ArrayCombination.combination(-1, 2), \"Expected null for negative n\");\n        assertNull(ArrayCombination.combination(0, 2), \"Expected null for zero n\");\n\n        // Test with valid inputs\n        List<TreeSet<Integer>> result1 = ArrayCombination.combination(5, 3);\n        assertEquals(10, result1.size(), \"Expected 5 choose 3 to yield 10 combinations\");\n\n        List<TreeSet<Integer>> result2 = ArrayCombination.combination(4, 2);\n        assertEquals(6, result2.size(), \"Expected 4 choose 2 to yield 6 combinations\");\n        \n        // Optionally, verify the actual combinations if the Combination.combination method is known\n        // to be deterministic and the order of combinations is predictable.\n\n        // Example verification (will depend on the actual results produced by Combination.combination method):\n        // assertEquals(new TreeSet<>(Arrays.asList(1, 2)), result2.get(0), \"Check first combination\");\n        // assertEquals(new TreeSet<>(Arrays.asList(1, 3)), result2.get(1), \"Check second combination\");\n        // and so on for other combinations...\n    }\n}",
        "package_metric": 7.96,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "ArrayCombination",
        "method_name": "combination",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport java.util.List;\nimport java.util.TreeSet;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayCombinationTest {\n\n    @Test\n    public void combinationTest() {\n        // Test with invalid input (n)\n        assertNull(ArrayCombination.combination(-1, 2), \"Combination with n <= 0 should return null\");\n        \n        // Test with valid input but length exceeding array size\n        List<TreeSet<Integer>> combinationsExceed = ArrayCombination.combination(3, 4);\n        assertTrue(combinationsExceed.isEmpty(), \"Combination with k greater than n should return empty list\");\n\n        // Test with valid input (3,2)\n        List<TreeSet<Integer>> combinations = ArrayCombination.combination(3, 2);\n        assertNotNull(combinations, \"Combination should not return null for valid input\");\n\n        // Expected number of combinations\n        assertEquals(3, combinations.size(), \"There should be 3 combinations for n = 3 and k = 2\");\n\n        // Verify the actual combinations\n        TreeSet<Integer> expectedCombination1 = new TreeSet<>();\n        expectedCombination1.add(1);\n        expectedCombination1.add(2);\n\n        TreeSet<Integer> expectedCombination2 = new TreeSet<>();\n        expectedCombination2.add(1);\n        expectedCombination2.add(3);\n\n        TreeSet<Integer> expectedCombination3 = new TreeSet<>();\n        expectedCombination3.add(2);\n        expectedCombination3.add(3);\n\n        assertTrue(combinations.contains(expectedCombination1), \"Combinations list should contain [1, 2]\");\n        assertTrue(combinations.contains(expectedCombination2), \"Combinations list should contain [1, 3]\");\n        assertTrue(combinations.contains(expectedCombination3), \"Combinations list should contain [2, 3]\");\n    }\n}",
        "package_metric": 7.96,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "ArrayCombination",
        "method_name": "combination",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport java.util.List;\nimport java.util.TreeSet;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayCombinationTest {\n\n    @Test\n    public void combinationTest() {\n        // Test when n is less than or equal to 0, should return null\n        assertNull(ArrayCombination.combination(0, 3), \"Combination with n <= 0 should return null\");\n\n        // Test with valid n and k\n        List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);\n        assertNotNull(result, \"Combination should not return null for valid input\");\n        assertEquals(10, result.size(), \"Combination of 5 choose 3 should return 10 results\");\n\n        // Each nested TreeSet should have exactly 'k' elements\n        for (TreeSet<Integer> set : result) {\n            assertEquals(3, set.size(), \"Each combination set should contain exactly 3 elements\");\n        }\n\n        // Exemplary check of the actual combinations for correctness\n        assertTrue(result.contains(new TreeSet<>(List.of(1, 2, 3))), \"Should contain combination [1, 2, 3]\");\n        assertTrue(result.contains(new TreeSet<>(List.of(1, 2, 4))), \"Should contain combination [1, 2, 4]\");\n        assertTrue(result.contains(new TreeSet<>(List.of(1, 2, 5))), \"Should contain combination [1, 2, 5]\");\n        assertTrue(result.contains(new TreeSet<>(List.of(1, 3, 4))), \"Should contain combination [1, 3, 4]\");\n        // Add more checks as necessary to ensure the combinations are correct\n\n        // Test with k > n, should return an empty list\n        assertTrue(ArrayCombination.combination(3, 5).isEmpty(), \"Combination of 3 choose 5 should return an empty list\");\n\n        // Ideally more exhaustive tests should be written to confirm correct results\n        // for a variety of 'n' and 'k' values including edge cases\n    }\n}",
        "package_metric": 7.96,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "ArrayCombination",
        "method_name": "combination",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport java.util.List;\nimport java.util.TreeSet;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayCombinationTest {\n    @Test\n    public void combinationTest() {\n        // Test for invalid input, expect null\n        assertNull(ArrayCombination.combination(0, 3), \"Expected null for n <= 0\");\n        \n        // Test for n < k, expect empty list\n        List<TreeSet<Integer>> resultForInvalidInput = ArrayCombination.combination(3, 4);\n        assertNotNull(resultForInvalidInput);\n        assertTrue(resultForInvalidInput.isEmpty(), \"Expected empty list for n < k\");\n\n        // Test for n == k, expect one combination containing all elements\n        List<TreeSet<Integer>> resultForNEqualsK = ArrayCombination.combination(3, 3);\n        assertNotNull(resultForNEqualsK);\n        assertEquals(1, resultForNEqualsK.size(), \"Expected one combination for n == k\");\n        assertArrayEquals(new Integer[]{1, 2, 3}, resultForNEqualsK.get(0).toArray(), \"Expected combination [1, 2, 3]\");\n\n        // Test for regular input, expect non-empty list with correct combinations\n        List<TreeSet<Integer>> result = ArrayCombination.combination(4, 2);\n        assertNotNull(result);\n        assertEquals(6, result.size(), \"Expected 6 combinations for n=4 and k=2\");\n        // We could further check if all expected combinations are present,\n        // but that might require specific logic depending on the order of the combinations.\n        // This is left out for simplicity.\n    }\n}",
        "package_metric": 7.96,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "ArrayCombination",
        "method_name": "combination",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.TreeSet;\nimport java.util.List;\n\npublic class ArrayCombinationTest {\n    @Test\n    public void combinationTest() {\n        // Test for n = 4 and k = 2\n        int n1 = 4;\n        int k1 = 2;\n        List<TreeSet<Integer>> result1 = ArrayCombination.combination(n1, k1);\n\n        // Expected result for combination (4, 2)\n        String expected1 = \"[[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\";\n        assertEquals(expected1, result1.toString());\n\n        // Test for n = 5 and k = 3\n        int n2 = 5;\n        int k2 = 3;\n        List<TreeSet<Integer>> result2 = ArrayCombination.combination(n2, k2);\n\n        // Expected result for combination (5, 3)\n        String expected2 = \"[[1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 4], [1, 3, 5], [1, 4, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]\";\n        assertEquals(expected2, result2.toString());\n\n        // Test with invalid input\n        int n3 = -2;\n        int k3 = 3;\n        List<TreeSet<Integer>> result3 = ArrayCombination.combination(n3, k3);\n\n        // Expected result for invalid input\n        assertNull(result3);\n    }\n}",
        "package_metric": 7.96,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Considering 5 and 7 are twin primes\n        assertEquals(7, TwinPrime.getTwinPrime(5), \"The twin prime of 5 should be 7\");\n        \n        // Considering 11 and 13 are twin primes\n        assertEquals(13, TwinPrime.getTwinPrime(11), \"The twin prime of 11 should be 13\");\n\n        // Considering 29 and 31 are twin primes\n        assertEquals(31, TwinPrime.getTwinPrime(29), \"The twin prime of 29 should be 31\");\n\n        // Testing non-prime input which should not have a twin prime\n        assertEquals(-1, TwinPrime.getTwinPrime(10), \"10 is not a prime number, so the result should be -1\");\n\n        // Testing a prime input which the next number (input + 2) is not prime\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"14 and 16 are not primes, so the result should be -1\");\n\n        // Edge case: testing the prime number 2, which should return -1 \n        // because it does not have a twin prime (2 and 4, where 4 is not a prime number)\n        assertEquals(-1, TwinPrime.getTwinPrime(2), \"2 is a prime number, but 4 is not, so the result should be -1\");\n    }\n}",
        "package_metric": 0.61,
        "class_metric": 75.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    \n    @Test\n    public void getTwinPrimeTest() {\n        // Prime number 11 has a twin prime (13)\n        assertEquals(13, TwinPrime.getTwinPrime(11), \"11 should have a twin prime which is 13.\");\n\n        // Prime number 13 does not have a twin prime (15 is not prime)\n        assertEquals(-1, TwinPrime.getTwinPrime(13), \"13 should not have a twin prime as 15 is not prime.\");\n\n        // Check non-prime number (non-prime number should always return -1)\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"14 is not a prime number, so it should return -1.\");\n\n        // Edge Case: Test the lowest pair of twin primes (3, 5)\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 should have a twin prime which is 5.\");\n\n        // Test a negative number (should always return -1)\n        assertEquals(-1, TwinPrime.getTwinPrime(-1), \"Negative numbers are not prime, so it should return -1.\");\n\n        // Add more tests as needed to cover the edge cases and normal behavior\n    }\n}",
        "package_metric": 0.61,
        "class_metric": 75.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Test with a known pair of twin primes (input 3 should return 5)\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes, method should return 5\");\n\n        // Test with a prime number that does not have a twin prime (input 23 should return -1)\n        assertEquals(-1, TwinPrime.getTwinPrime(23), \"23 does not have a twin prime that is two numbers greater\");\n\n        // Test with a non-prime number (input 8 should return -1)\n        assertEquals(-1, TwinPrime.getTwinPrime(8), \"8 is not a prime, method should return -1\");\n\n        // Test with a negative prime number\n        assertEquals(-1, TwinPrime.getTwinPrime(-3), \"-3 is negative, method should return -1\");\n        \n        // Test with another known pair of twin primes (input 11 should return 13)\n        assertEquals(13, TwinPrime.getTwinPrime(11), \"11 and 13 are twin primes, method should return 13\");\n\n        // Additional test for larger prime to check efficiency\n        // Assuming 997 is a large enough prime for this test and its twin prime is 999 (which is not prime)\n        assertEquals(-1, TwinPrime.getTwinPrime(997), \"997's twin would be 999, which is not a prime, method should return -1\");\n    }\n}",
        "package_metric": 0.61,
        "class_metric": 75.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Twin prime pair (5, 7)\n        assertEquals(7, TwinPrime.getTwinPrime(5), \"The twin prime of 5 should be 7\");\n\n        // Twin prime pair (11, 13)\n        assertEquals(13, TwinPrime.getTwinPrime(11), \"The twin prime of 11 should be 13\");\n\n        // Not a twin prime (inputNumber is not prime)\n        assertEquals(-1, TwinPrime.getTwinPrime(8), \"8 is not a prime, so should return -1\");\n\n        // Not a twin prime (inputNumber + 2 is not prime)\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"16 is not a prime, so should return -1\");\n\n        // Not a twin prime (both inputNumber and (inputNumber + 2) are not prime)\n        assertEquals(-1, TwinPrime.getTwinPrime(15), \"Neither 15 nor 17 is prime, should return -1\");\n    }\n}",
        "package_metric": 0.61,
        "class_metric": 75.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"Twin prime of 3 should be 5\");\n        assertEquals(7, TwinPrime.getTwinPrime(5), \"Twin prime of 5 should be 7\");\n        assertEquals(13, TwinPrime.getTwinPrime(11), \"Twin prime of 11 should be 13\");\n        assertEquals(-1, TwinPrime.getTwinPrime(8), \"8 is not a prime, so the result should be -1\");\n        assertEquals(-1, TwinPrime.getTwinPrime(23), \"There is no twin prime for 23, so the result should be -1\");\n    }\n}",
        "package_metric": 0.61,
        "class_metric": 75.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Test with a twin prime number input (3,5 are twin primes)\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"Expected twin prime of 3 to be 5.\");\n        \n        // Test with a non-twin prime input (there are no twin primes where one of the pair is 4)\n        assertEquals(-1, TwinPrime.getTwinPrime(4), \"Expected result to be -1 since 4 is not a part of twin primes.\");\n        \n        // Test with a negative input\n        assertEquals(-1, TwinPrime.getTwinPrime(-3), \"Expected result to be -1 since negative numbers cannot be prime.\");\n        \n        // Test with a larger twin prime number input (11,13 are twin primes)\n        assertEquals(13, TwinPrime.getTwinPrime(11), \"Expected twin prime of 11 to be 13.\");\n        \n        // Test with a prime number that's not part of a twin prime pair\n        assertEquals(-1, TwinPrime.getTwinPrime(23), \"Expected result to be -1 since 23 is a prime but not part of twin prime.\");\n        \n        // Test with a zero input\n        assertEquals(-1, TwinPrime.getTwinPrime(0), \"Expected result to be -1 since 0 cannot be part of twin primes.\");\n        \n        // Test at the boundary of int values. Note that this assumes that the method handles overflows correctly\n        assertEquals(-1, TwinPrime.getTwinPrime(Integer.MAX_VALUE - 1), \"Expected result to be -1 since it's outside of prime range or causes overflow.\");\n    }\n}",
        "package_metric": 0.61,
        "class_metric": 75.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class OctalToHexadecimalTest {\n\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0));\n        assertEquals(\"7\", OctalToHexadecimal.decimalToHex(7));\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10));\n        assertEquals(\"F\", OctalToHexadecimal.decimalToHex(15));\n        assertEquals(\"10\", OctalToHexadecimal.decimalToHex(16));\n        assertEquals(\"1A\", OctalToHexadecimal.decimalToHex(26));\n        assertEquals(\"FF\", OctalToHexadecimal.decimalToHex(255));\n        assertEquals(\"100\", OctalToHexadecimal.decimalToHex(256));\n        // You can add more test cases if needed\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0));\n        assertEquals(\"7\", OctalToHexadecimal.decimalToHex(7));\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10));\n        assertEquals(\"FF\", OctalToHexadecimal.decimalToHex(255));\n        assertEquals(\"64\", OctalToHexadecimal.decimalToHex(100));\n        // You can add more test cases to cover more scenarios, such as negative numbers or large numbers\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"7\", OctalToHexadecimal.decimalToHex(7));\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10));\n        assertEquals(\"F\", OctalToHexadecimal.decimalToHex(15));\n        assertEquals(\"10\", OctalToHexadecimal.decimalToHex(16));\n        assertEquals(\"1F\", OctalToHexadecimal.decimalToHex(31));\n        assertEquals(\"7D\", OctalToHexadecimal.decimalToHex(125));\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0));\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(-10));\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0), \"The hexadecimal representation of 0 should be 0\");\n\n        assertEquals(\"7\", OctalToHexadecimal.decimalToHex(7), \"The hexadecimal representation of 7 should be 7\");\n\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10), \"The hexadecimal representation of 10 should be A\");\n\n        assertEquals(\"10\", OctalToHexadecimal.decimalToHex(16), \"The hexadecimal representation of 16 should be 10\");\n\n        assertEquals(\"3B\", OctalToHexadecimal.decimalToHex(59), \"The hexadecimal representation of 59 should be 3B\");\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class OctalToHexadecimalTest {\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0));\n        assertEquals(\"1\", OctalToHexadecimal.decimalToHex(1));\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10));\n        assertEquals(\"F\", OctalToHexadecimal.decimalToHex(15));\n        assertEquals(\"10\", OctalToHexadecimal.decimalToHex(16));\n        assertEquals(\"7F\", OctalToHexadecimal.decimalToHex(127));\n        assertEquals(\"FF\", OctalToHexadecimal.decimalToHex(255));\n        assertEquals(\"100\", OctalToHexadecimal.decimalToHex(256));\n        // Add more test cases as needed\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class OctalToHexadecimalTest {\n\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0), \"Conversion of 0 to hex should return 0\");\n        assertEquals(\"7\", OctalToHexadecimal.decimalToHex(7), \"Conversion of 7 to hex should return 7\");\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10), \"Conversion of 10 to hex should return A\");\n        assertEquals(\"10\", OctalToHexadecimal.decimalToHex(16), \"Conversion of 16 to hex should return 10\");\n        assertEquals(\"1E\", OctalToHexadecimal.decimalToHex(30), \"Conversion of 30 to hex should return 1E\");\n        assertEquals(\"7F\", OctalToHexadecimal.decimalToHex(127), \"Conversion of 127 to hex should return 7F\");\n        assertEquals(\"FF\", OctalToHexadecimal.decimalToHex(255), \"Conversion of 255 to hex should return FF\");\n        assertEquals(\"100\", OctalToHexadecimal.decimalToHex(256), \"Conversion of 256 to hex should return 100\");\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0), \"Converting 0 should return '0'\");\n        assertEquals(\"7\", OctalToHexadecimal.decimalToHex(7), \"Converting 7 to Hex should return '7'\");\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10), \"Converting 10 to Hex should return 'A'\");\n        assertEquals(\"F\", OctalToHexadecimal.decimalToHex(15), \"Converting 15 to Hex should return 'F'\");\n        assertEquals(\"10\", OctalToHexadecimal.decimalToHex(16), \"Converting 16 to Hex should return '10'\");\n        assertEquals(\"1A\", OctalToHexadecimal.decimalToHex(26), \"Converting 26 to Hex should return '1A'\");\n        assertEquals(\"7F\", OctalToHexadecimal.decimalToHex(127), \"Converting 127 to Hex should return '7F'\");\n        assertEquals(\"FF\", OctalToHexadecimal.decimalToHex(255), \"Converting 255 to Hex should return 'FF'\");\n        assertEquals(\"100\", OctalToHexadecimal.decimalToHex(256), \"Converting 256 to Hex should return '100'\");\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0));\n        assertEquals(\"7\", OctalToHexadecimal.decimalToHex(7));\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10));\n        assertEquals(\"10\", OctalToHexadecimal.decimalToHex(16));\n        assertEquals(\"1E\", OctalToHexadecimal.decimalToHex(30));\n        assertEquals(\"FF\", OctalToHexadecimal.decimalToHex(255));\n        assertEquals(\"1A3\", OctalToHexadecimal.decimalToHex(419));\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n    \n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0));\n        assertEquals(\"7\", OctalToHexadecimal.decimalToHex(7));\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10));\n        assertEquals(\"F\", OctalToHexadecimal.decimalToHex(15));\n        assertEquals(\"10\", OctalToHexadecimal.decimalToHex(16));\n        assertEquals(\"1E\", OctalToHexadecimal.decimalToHex(30));\n        assertEquals(\"FF\", OctalToHexadecimal.decimalToHex(255));\n        assertEquals(\"7DE\", OctalToHexadecimal.decimalToHex(2014));\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class OctalToHexadecimalTest {\n\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0), \"Conversion of 0 to Hex failed\");\n        assertEquals(\"7\", OctalToHexadecimal.decimalToHex(7), \"Conversion of 7 to Hex failed\");\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10), \"Conversion of 10 to Hex failed\");\n        assertEquals(\"F\", OctalToHexadecimal.decimalToHex(15), \"Conversion of 15 to Hex failed\");\n        assertEquals(\"10\", OctalToHexadecimal.decimalToHex(16), \"Conversion of 16 to Hex failed\");\n        assertEquals(\"1A\", OctalToHexadecimal.decimalToHex(26), \"Conversion of 26 to Hex failed\");\n        assertEquals(\"7E\", OctalToHexadecimal.decimalToHex(126), \"Conversion of 126 to Hex failed\");\n        assertEquals(\"FF\", OctalToHexadecimal.decimalToHex(255), \"Conversion of 255 to Hex failed\");\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n\n    @Test\n    public void decimalToHexTest() {\n        // Test with a positive number\n        assertEquals(\"1E\", OctalToHexadecimal.decimalToHex(30), \"30 in decimal should be 1E in hex\");\n        \n        // Test with zero\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0), \"0 in decimal should be 0 in hex\");\n\n        // Test with 1\n        assertEquals(\"1\", OctalToHexadecimal.decimalToHex(1), \"1 in decimal should be 1 in hex\");\n\n        // Test with a larger number\n        assertEquals(\"7A\", OctalToHexadecimal.decimalToHex(122), \"122 in decimal should be 7A in hex\");\n\n        // Test with a negative number to check method boundary limit\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(-1), \"-1 in decimal should be 0 in hex\");\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n    \n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0), \"Decimal to hex conversion error for 0\");\n        assertEquals(\"7\", OctalToHexadecimal.decimalToHex(7), \"Decimal to hex conversion error for 7\");\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10), \"Decimal to hex conversion error for 10\");\n        assertEquals(\"F\", OctalToHexadecimal.decimalToHex(15), \"Decimal to hex conversion error for 15\");\n        assertEquals(\"10\", OctalToHexadecimal.decimalToHex(16), \"Decimal to hex conversion error for 16\");\n        assertEquals(\"1A\", OctalToHexadecimal.decimalToHex(26), \"Decimal to hex conversion error for 26\");\n        assertEquals(\"7F\", OctalToHexadecimal.decimalToHex(127), \"Decimal to hex conversion error for 127\");\n        assertEquals(\"FF\", OctalToHexadecimal.decimalToHex(255), \"Decimal to hex conversion error for 255\");\n        assertEquals(\"100\", OctalToHexadecimal.decimalToHex(256), \"Decimal to hex conversion error for 256\");\n        assertEquals(\"1E\", OctalToHexadecimal.decimalToHex(30), \"Decimal to hex conversion error for 30\");\n        assertNotEquals(\"5D\", OctalToHexadecimal.decimalToHex(92), \"Decimal to hex conversion error for 92\");\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class OctalToHexadecimalTest {\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0), \"Decimal to Hex conversion for 0 should be 0\");\n        assertEquals(\"7\", OctalToHexadecimal.decimalToHex(7), \"Decimal to Hex conversion for 7 should be 7\");\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10), \"Decimal to Hex conversion for 10 should be A\");\n        assertEquals(\"F\", OctalToHexadecimal.decimalToHex(15), \"Decimal to Hex conversion for 15 should be F\");\n        assertEquals(\"10\", OctalToHexadecimal.decimalToHex(16), \"Decimal to Hex conversion for 16 should be 10\");\n        assertEquals(\"1A\", OctalToHexadecimal.decimalToHex(26), \"Decimal to Hex conversion for 26 should be 1A\");\n        assertEquals(\"FF\", OctalToHexadecimal.decimalToHex(255), \"Decimal to Hex conversion for 255 should be FF\");\n        assertEquals(\"100\", OctalToHexadecimal.decimalToHex(256), \"Decimal to Hex conversion for 256 should be 100\");\n        assertEquals(\"7DE\", OctalToHexadecimal.decimalToHex(2014), \"Decimal to Hex conversion for 2014 should be 7DE\");\n        assertEquals(\"1E240\", OctalToHexadecimal.decimalToHex(123456), \"Decimal to Hex conversion for 123456 should be 1E240\");\n        // Add more tests if needed\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0), \"0 should return '0'\");\n        assertEquals(\"7\", OctalToHexadecimal.decimalToHex(7), \"7 in decimal should return '7' in hex\");\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10), \"10 in decimal should return 'A' in hex\");\n        assertEquals(\"F\", OctalToHexadecimal.decimalToHex(15), \"15 in decimal should return 'F' in hex\");\n        assertEquals(\"10\", OctalToHexadecimal.decimalToHex(16), \"16 in decimal should return '10' in hex\");\n        assertEquals(\"1A\", OctalToHexadecimal.decimalToHex(26), \"26 in decimal should return '1A' in hex\");\n        assertEquals(\"64\", OctalToHexadecimal.decimalToHex(100), \"100 in decimal should return '64' in hex\");\n        assertEquals(\"7DE\", OctalToHexadecimal.decimalToHex(2014), \"2014 in decimal should return '7DE' in hex\");\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0));\n        assertEquals(\"7\", OctalToHexadecimal.decimalToHex(7));\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10));\n        assertEquals(\"10\", OctalToHexadecimal.decimalToHex(16));\n        assertEquals(\"1E\", OctalToHexadecimal.decimalToHex(30));\n        assertEquals(\"7D\", OctalToHexadecimal.decimalToHex(125));\n        assertEquals(\"FA\", OctalToHexadecimal.decimalToHex(250));\n        assertEquals(\"FF\", OctalToHexadecimal.decimalToHex(255));\n        assertEquals(\"100\", OctalToHexadecimal.decimalToHex(256));\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0));\n        assertEquals(\"1\", OctalToHexadecimal.decimalToHex(1));\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10));\n        assertEquals(\"FF\", OctalToHexadecimal.decimalToHex(255));\n        assertEquals(\"7DE\", OctalToHexadecimal.decimalToHex(2014));\n        assertEquals(\"5D\", OctalToHexadecimal.decimalToHex(93));\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0));\n        assertEquals(\"7\", OctalToHexadecimal.decimalToHex(7));\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10));\n        assertEquals(\"F\", OctalToHexadecimal.decimalToHex(15));\n        assertEquals(\"10\", OctalToHexadecimal.decimalToHex(16));\n        assertEquals(\"1E\", OctalToHexadecimal.decimalToHex(30));\n        assertEquals(\"7B\", OctalToHexadecimal.decimalToHex(123));\n        assertEquals(\"3E8\", OctalToHexadecimal.decimalToHex(1000));\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class OctalToHexadecimalTest {\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0), \"Hex representation of 0 should be 0\");\n        assertEquals(\"7\", OctalToHexadecimal.decimalToHex(7), \"Hex representation of 7 should be 7\");\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10), \"Hex representation of 10 should be A\");\n        assertEquals(\"F\", OctalToHexadecimal.decimalToHex(15), \"Hex representation of 15 should be F\");\n        assertEquals(\"10\", OctalToHexadecimal.decimalToHex(16), \"Hex representation of 16 should be 10\");\n        assertEquals(\"1A\", OctalToHexadecimal.decimalToHex(26), \"Hex representation of 26 should be 1A\");\n        assertEquals(\"7F\", OctalToHexadecimal.decimalToHex(127), \"Hex representation of 127 should be 7F\");\n        assertEquals(\"FF\", OctalToHexadecimal.decimalToHex(255), \"Hex representation of 255 should be FF\");\n        assertEquals(\"1E\", OctalToHexadecimal.decimalToHex(30), \"Hex representation of 30 should be 1E\");\n        assertEquals(\"100\", OctalToHexadecimal.decimalToHex(256), \"Hex representation of 256 should be 100\");\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n    \n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0), \"Decimal 0 should convert to Hex 0\");\n        assertEquals(\"1\", OctalToHexadecimal.decimalToHex(1), \"Decimal 1 should convert to Hex 1\");\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10), \"Decimal 10 should convert to Hex A\");\n        assertEquals(\"64\", OctalToHexadecimal.decimalToHex(100), \"Decimal 100 should convert to Hex 64\");\n        assertEquals(\"7D\", OctalToHexadecimal.decimalToHex(125), \"Decimal 125 should convert to Hex 7D\");\n        assertEquals(\"FF\", OctalToHexadecimal.decimalToHex(255), \"Decimal 255 should convert to Hex FF\");\n        assertEquals(\"2A3\", OctalToHexadecimal.decimalToHex(675), \"Decimal 675 should convert to Hex 2A3\");\n        assertEquals(\"3E8\", OctalToHexadecimal.decimalToHex(1000), \"Decimal 1000 should convert to Hex 3E8\");\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0), \"Conversion of 0 to hex should return '0'\");\n        assertEquals(\"1\", OctalToHexadecimal.decimalToHex(1), \"Conversion of 1 to hex should return '1'\");\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10), \"Conversion of 10 to hex should return 'A'\");\n        assertEquals(\"10\", OctalToHexadecimal.decimalToHex(16), \"Conversion of 16 to hex should return '10'\");\n        assertEquals(\"7F\", OctalToHexadecimal.decimalToHex(127), \"Conversion of 127 to hex should return '7F'\");\n        assertEquals(\"FF\", OctalToHexadecimal.decimalToHex(255), \"Conversion of 255 to hex should return 'FF'\");\n        assertEquals(\"1E\", OctalToHexadecimal.decimalToHex(30), \"Conversion of 30 to hex should return '1E'\");\n        assertEquals(\"2A\", OctalToHexadecimal.decimalToHex(42), \"Conversion of 42 to hex should return '2A'\");\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n\n    @Test\n    public void decimalToHexTest() {\n        assertEquals(\"0\", OctalToHexadecimal.decimalToHex(0));\n        assertEquals(\"1\", OctalToHexadecimal.decimalToHex(1));\n        assertEquals(\"A\", OctalToHexadecimal.decimalToHex(10));\n        assertEquals(\"10\", OctalToHexadecimal.decimalToHex(16));\n        assertEquals(\"1F4\", OctalToHexadecimal.decimalToHex(500));\n        assertEquals(\"7A\", OctalToHexadecimal.decimalToHex(122));\n        assertEquals(\"FFFF\", OctalToHexadecimal.decimalToHex(65535));\n        assertEquals(\"100\", OctalToHexadecimal.decimalToHex(256));\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        StackArrayList stack = new StackArrayList();\n        \n        // Test empty stack\n        Exception exception = assertThrows(EmptyStackException.class, stack::peek);\n        assertTrue(exception instanceof EmptyStackException);\n        \n        // Test non-empty stack\n        stack.push(10);\n        assertEquals(10, stack.peek(), \"Peek should return the last element pushed.\");\n        \n        stack.push(20);\n        stack.push(30);\n        assertEquals(30, stack.peek(), \"Peek should return the last element pushed.\");\n        \n        // Test peek doesn't remove the element\n        int sizeBeforePeek = stack.size();\n        int peekedValue = stack.peek();\n        int sizeAfterPeek = stack.size();\n        assertEquals(peekedValue, 30, \"Peek should return the last element pushed without removing it.\");\n        assertEquals(sizeBeforePeek, sizeAfterPeek, \"Peek should not change the stack size.\");\n    }\n}",
        "package_metric": 5.31,
        "class_metric": 37.93,
        "method_metric": 100.0,
        "pitest": 36.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTest() {\n        // Test 1: throw EmptyStackException when peeking an empty stack\n        assertThrows(EmptyStackException.class, () -> stack.peek());\n\n        // Test 2: successfully retrieve the top element of the stack\n        stack.push(10);\n        assertEquals(10, stack.peek());\n        stack.push(20);\n        assertEquals(20, stack.peek());\n\n        // Test 3: peeking should not remove the element\n        int sizeBeforePeek = stack.size();\n        int topElement = stack.peek();\n        assertEquals(topElement, stack.peek());\n        assertEquals(sizeBeforePeek, stack.size());\n    }\n}",
        "package_metric": 5.31,
        "class_metric": 37.93,
        "method_metric": 100.0,
        "pitest": 36.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        StackArrayList stack = new StackArrayList();\n\n        // Test peek() on an empty stack to ensure it throws EmptyStackException\n        Exception exception = assertThrows(EmptyStackException.class, stack::peek);\n        assertTrue(exception instanceof EmptyStackException);\n\n        // Push elements to stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        \n        // Test peek() returns the last element that was pushed\n        assertEquals(3, stack.peek());\n\n        // Ensure peek() doesn't remove the element\n        assertEquals(3, stack.size());\n\n        // Push another element and check if peek() now returns the new element\n        stack.push(4);\n        assertEquals(4, stack.peek());\n\n        // After popping, check if the peek() now returns the previous element\n        stack.pop();\n        assertEquals(3, stack.peek());\n    }\n}",
        "package_metric": 6.28,
        "class_metric": 44.83,
        "method_metric": 100.0,
        "pitest": 57.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTest() {\n        // Test empty stack\n        assertThrows(EmptyStackException.class, stack::peek);\n\n        // Push items onto the stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n\n        // Peek the top of the stack without removing it\n        assertEquals(3, stack.peek(), \"The top of the stack should be 3\");\n\n        // Ensure the size has not changed\n        assertEquals(3, stack.size(), \"The stack size should still be 3\");\n\n        // Push another item and peek\n        stack.push(4);\n        assertEquals(4, stack.peek(), \"The top of the stack should be 4 after pushing another item\");\n\n        // Ensure the size is correct\n        assertEquals(4, stack.size(), \"The stack size should now be 4\");\n\n        // Pop the top item and peek again\n        stack.pop();\n        assertEquals(3, stack.peek(), \"The top of the stack should be 3 after popping the top item\");\n    }\n}",
        "package_metric": 6.28,
        "class_metric": 44.83,
        "method_metric": 100.0,
        "pitest": 57.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n\n    @Test\n    public void peekTest() {\n        StackArrayList stack = new StackArrayList();\n\n        // Test empty stack\n        Exception exception = assertThrows(EmptyStackException.class, stack::peek);\n        assertNotNull(exception);\n\n        // Set up the stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n\n        // Test non-empty stack\n        assertEquals(3, stack.peek(), \"Peek should return top element which is 3\"); \n        \n        // Test to ensure the size is still the same after peek()\n        assertEquals(3, stack.size(), \"Stack size should remain unchanged after peek()\");\n        \n        // Test to ensure the top element is not removed\n        assertEquals(3, stack.peek(), \"Peek should return top element on consecutive calls\");\n        assertEquals(3, stack.size(), \"Stack size should still be 3 after consecutive peek()\");\n    }\n}",
        "package_metric": 5.31,
        "class_metric": 37.93,
        "method_metric": 100.0,
        "pitest": 43.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTest() {\n        // Test for an empty stack\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek(); \n        });\n\n        // Test with one element\n        stack.push(42);\n        int peekedValue = stack.peek();\n        assertEquals(42, peekedValue);\n        assertFalse(stack.isEmpty());\n\n        // Test with another element\n        stack.push(24);\n        peekedValue = stack.peek();\n        assertEquals(24, peekedValue);\n        assertFalse(stack.isEmpty());\n\n        // Size after two push() and one peek()\n        assertEquals(2, stack.size());\n    }\n}",
        "package_metric": 5.31,
        "class_metric": 37.93,
        "method_metric": 100.0,
        "pitest": 43.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    \n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTest() {\n        // Test peek on an empty stack\n        Exception exception = assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        });\n        assertTrue(exception instanceof EmptyStackException);\n\n        // Test peek on a non-empty stack\n        stack.push(5);\n        stack.push(10);\n        int topValue = stack.peek();\n        assertEquals(10, topValue, \"peek() should return the top element of the stack\");\n        \n        // Ensure the size has not changed after peek()\n        assertEquals(2, stack.size(), \"The size of the stack should remain the same after peek()\");\n\n        // Ensure that the element was not removed\n        int popValue = stack.pop();\n        assertEquals(10, popValue, \"The top element should still be on the stack after peek()\");\n\n        // Ensure that the size is now reduced by 1\n        assertEquals(1, stack.size(), \"The size of the stack should be reduced by 1 after pop()\");\n    }\n}",
        "package_metric": 6.28,
        "class_metric": 44.83,
        "method_metric": 100.0,
        "pitest": 64.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n\n    @Test\n    public void peekTest() {\n        // Arrange\n        StackArrayList stack = new StackArrayList();\n        stack.push(10);\n        stack.push(20);\n\n        // Act & Assert\n        assertEquals(20, stack.peek(), \"Peek should return the top element of the stack\");\n\n        // Arrange (for empty stack exception)\n        stack.pop();\n        stack.pop();\n\n        // Act & Assert (for empty stack exception)\n        assertThrows(EmptyStackException.class, stack::peek, \"Peek should throw EmptyStackException when stack is empty\");\n    }\n}",
        "package_metric": 5.8,
        "class_metric": 41.38,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.EmptyStackException;\n\npublic class StackArrayListTest {\n\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekEmptyStackThrowsException() {\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        });\n    }\n\n    @Test\n    public void peekAfterPushingElements() {\n        stack.push(1);\n        stack.push(42);\n        stack.push(7);\n        int result = stack.peek();\n        assertEquals(7, result);\n    }\n\n    @Test\n    public void peekDoesNotRemoveElement() {\n        stack.push(1);\n        stack.push(2);\n        int peekedValue = stack.peek();\n        int stackSizeAfterPeek = stack.size();\n        assertEquals(2, peekedValue);\n        assertEquals(2, stackSizeAfterPeek); // Size should remain same after peek\n    }\n\n    // ... Additional tests could go here ...\n\n    @AfterEach\n    public void tearDown() {\n        stack = null;\n    }\n}",
        "package_metric": 5.31,
        "class_metric": 37.93,
        "method_metric": 100.0,
        "pitest": 43.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTestWhenStackNotEmpty() {\n        // setup\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n\n        // execute & verify\n        assertEquals(3, stack.peek(), \"peek() should return the last element pushed onto the stack\");\n    }\n\n    @Test\n    public void peekTestWhenStackIsEmpty() {\n        // execute & verify\n        assertThrows(EmptyStackException.class, stack::peek, \"peek() should throw EmptyStackException when the stack is empty\");\n    }\n}",
        "package_metric": 4.83,
        "class_metric": 34.48,
        "method_metric": 100.0,
        "pitest": 36.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport java.util.EmptyStackException;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    \n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setup() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTestWhenNotEmpty() {\n        stack.push(1);\n        assertEquals(1, stack.peek());\n    }\n\n    @Test\n    public void peekTestWhenEmpty() {\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        });\n    }\n}\n\nclass StackArrayList {\n\n    private ArrayList<Integer> stack = new ArrayList<>();\n\n    public boolean isEmpty() {\n        return stack.isEmpty();\n    }\n\n    public void push(int value) {\n        stack.add(value);\n    }\n\n    public int peek() {\n        if (isEmpty()) {\n            throw new EmptyStackException();\n        }\n        return stack.get(stack.size() - 1);\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    \n    private StackArrayList stack;\n    \n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n    \n    @Test\n    public void peekTest() {\n        // Assert that peek() throws an EmptyStackException when the stack is empty\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        });\n        \n        // Push items into the stack and then peek\n        stack.push(1);\n        assertEquals(1, stack.peek(), \"Peek should return the last element pushed which is 1\");\n        \n        stack.push(2);\n        assertEquals(2, stack.peek(), \"Peek should now return the last element pushed which is 2\");\n        \n        // Add more elements and check if peek still returns the top\n        stack.push(3);\n        stack.push(4);\n        assertEquals(4, stack.peek(), \"Peek should return the last element pushed which is 4\");\n        \n        // Pop an item and check if peek adjusts to the new top\n        stack.pop();\n        assertEquals(3, stack.peek(), \"After popping, peek should return the new last element which is 3\");\n    }\n    \n    @AfterEach\n    public void tearDown() {\n        stack = null;\n    }\n}",
        "package_metric": 5.8,
        "class_metric": 41.38,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.EmptyStackException;\nimport java.util.ArrayList;\n\npublic class StackArrayListTest {\n\n    private ArrayList<Integer> stack;\n\n    // Setting up for the test, initialize stack before each test\n    @BeforeEach\n    public void setUp() {\n        stack = new ArrayList<>();\n    }\n\n    @Test\n    public void peekTest() {\n        // Test case where the stack is not empty\n        stack.add(1);\n        stack.add(2);\n        stack.add(3);\n        int lastElement = stack.get(stack.size() - 1); // should be 3\n        assertEquals(lastElement, 3, \"peek() should return the last element when the stack is not empty.\");\n\n        // Test case where the stack is empty, should throw EmptyStackException\n        stack.clear(); // ensure stack is empty\n        assertThrows(EmptyStackException.class, this::peek, \"peek() should throw EmptyStackException when stack is empty.\");\n    }\n\n    // Method stubs for the actual methods we're testing\n    public int peek() {\n        if (isEmpty()) {\n            throw new EmptyStackException();\n        }\n        return stack.get(stack.size() - 1);\n    }\n\n    public boolean isEmpty() {\n        return stack.isEmpty();\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.EmptyStackException;\n\npublic class StackArrayListTest {\n    private StackArrayList stack;\n\n    @BeforeEach\n    void setUp() {\n        stack = new StackArrayList(); // Assume this is an existing class with a default constructor.\n    }\n\n    // Test peeking into a non-empty stack\n    @Test\n    void peekNonEmptyStack() {\n        stack.push(1); // Assume this is a valid method call to add an item to the stack.\n        stack.push(2);\n        assertEquals(2, stack.peek(), \"Peek should return the top element of the stack.\");\n        stack.push(3);\n        assertEquals(3, stack.peek(), \"Peek should consistently return the top element of the stack.\");\n    }\n\n    // Test peeking into an empty stack\n    @Test\n    void peekEmptyStack() {\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        }, \"Peeking into an empty stack should throw an EmptyStackException.\");\n    }\n\n    // Assuming a cleanup might be necessary after each test.\n    @AfterEach\n    void tearDown() {\n        stack = null;\n    }\n}",
        "package_metric": 4.83,
        "class_metric": 34.48,
        "method_metric": 100.0,
        "pitest": 36.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTestNotEmpty() {\n        stack.push(1);\n        stack.push(2);\n        int topElement = stack.peek();\n        assertEquals(2, topElement, \"Peek should return the top element of the stack.\");\n    }\n\n    @Test\n    public void peekTestEmpty() {\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        }, \"Peek should throw EmptyStackException when the stack is empty.\");\n    }\n}",
        "package_metric": 4.83,
        "class_metric": 34.48,
        "method_metric": 100.0,
        "pitest": 36.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "\npackage com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.EmptyStackException;\nimport java.util.ArrayList;\n\npublic class StackArrayListTest {\n\n    private static ArrayList<Integer> stack;\n\n    @BeforeAll\n    public static void setUpClass() {\n        stack = new ArrayList<>();\n    }\n\n    @AfterEach\n    public void tearDownEachTest() {\n        stack.clear(); // Clear the stack after each test\n    }\n\n    @Test\n    public void peekTest() {\n        // Test case 1: throw EmptyStackException when the stack is empty\n        assertThrows(EmptyStackException.class, () -> {\n            peek();\n        });\n\n        // Test case 2: return the top element when the stack is not empty\n        stack.add(1); // Push an element to the stack\n        stack.add(2); // Push another element to the stack\n        stack.add(3); // Push one more element, which is now at the top\n        int topElement = peek();\n        assertEquals(3, topElement, \"peek() should return the last pushed element which is 3.\");\n    }\n    \n    public int peek() {\n        if (isEmpty()) {\n            throw new EmptyStackException();\n        }\n        return stack.get(stack.size() - 1);\n    }\n\n    private boolean isEmpty() {\n        return stack.isEmpty();\n    }\n}\n",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "DecimalToAnyBase",
        "method_name": "convertToAnyBase",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        // Test case for base 2 conversion\n        assertEquals(\"101\", DecimalToAnyBase.convertToAnyBase(5, 2), \"5 in binary should be 101\");\n\n        // Test case for base 8 conversion\n        assertEquals(\"11\", DecimalToAnyBase.convertToAnyBase(9, 8), \"9 in octal should be 11\");\n\n        // Test case for base 16 conversion\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16), \"10 in hexadecimal should be A\");\n\n        // Test case for larger number in base 16\n        assertEquals(\"1E\", DecimalToAnyBase.convertToAnyBase(30, 16), \"30 in hexadecimal should be 1E\");\n\n        // Test with maximum base 36 where digits and alphabets are used\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(36, 36), \"36 in base-36 should be 10\");\n\n        // Test with 0 input\n        assertEquals(\"\", DecimalToAnyBase.convertToAnyBase(0, 2), \"0 in any base should return empty string\");\n    }\n}",
        "package_metric": 2.55,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 62.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "DecimalToAnyBase",
        "method_name": "convertToAnyBase",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"1010\", DecimalToAnyBase.convertToAnyBase(10, 2), \"10 in base 2 should be 1010\");\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16), \"10 in base 16 should be A\");\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8), \"10 in base 8 should be 12\");\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(10, 10), \"10 in base 10 should be 10\");\n        assertEquals(\"21\", DecimalToAnyBase.convertToAnyBase(7, 3), \"7 in base 3 should be 21\");\n    }\n}",
        "package_metric": 2.55,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 62.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "DecimalToAnyBase",
        "method_name": "convertToAnyBase",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"1010\", DecimalToAnyBase.convertToAnyBase(10, 2));\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16));\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8));\n        assertEquals(\"F\", DecimalToAnyBase.convertToAnyBase(15, 16));\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(10, 10));\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(16, 16));\n        assertEquals(\"11\", DecimalToAnyBase.convertToAnyBase(17, 16));\n    }    \n}",
        "package_metric": 2.55,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 62.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "DecimalToAnyBase",
        "method_name": "convertToAnyBase",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        // Test conversion to binary\n        assertEquals(\"1010\", DecimalToAnyBase.convertToAnyBase(10, 2), \"Binary conversion of 10 should be 1010\");\n\n        // Test conversion to octal\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8), \"Octal conversion of 10 should be 12\");\n\n        // Test conversion to hexadecimal\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16), \"Hexadecimal conversion of 10 should be A\");\n\n        // Test conversion with 0 input\n        assertEquals(\"\", DecimalToAnyBase.convertToAnyBase(0, 2), \"Conversion of 0 should return an empty string\");\n\n        // Test conversion with a base not in the range 2-36 (since only these bases can be represented in alphanumeric characters)\n        // This will throw an exception or produce an incorrect result based on how `reVal` is implemented.\n        // If an exception is expected, an additional test can be written to handle that case.\n    }\n}",
        "package_metric": 2.55,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 62.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "DecimalToAnyBase",
        "method_name": "convertToAnyBase",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        // Test for converting decimal to binary\n        assertEquals(\"1101\", DecimalToAnyBase.convertToAnyBase(13, 2));\n        \n        // Test for converting decimal to octal\n        assertEquals(\"15\", DecimalToAnyBase.convertToAnyBase(13, 8));\n        \n        // Test for converting decimal to hexadecimal\n        assertEquals(\"D\", DecimalToAnyBase.convertToAnyBase(13, 16));\n        \n        // Test for converting zero value\n        assertEquals(\"\", DecimalToAnyBase.convertToAnyBase(0, 2)); // As the current implementation returns an empty string when input is 0.\n        \n        // Test for converting decimal to a custom base (e.g., base 3)\n        assertEquals(\"111\", DecimalToAnyBase.convertToAnyBase(13, 3));\n        \n        // Add more tests if required ...\n    }\n}",
        "package_metric": 2.55,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 62.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MazeRecursion",
        "method_name": "setWay",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MazeRecursionTest {\n    @Test\n    public void setWayTest() {\n        // Initialize our test map based on the context information\n        int[][] testMap = new int[8][7];\n        // Set the borders\n        for (int i = 0; i < 7; i++) {\n            testMap[0][i] = 1;\n            testMap[7][i] = 1;\n        }\n        for (int i = 0; i < 8; i++) {\n            testMap[i][0] = 1;\n            testMap[i][6] = 1;\n        }\n        // Set obstacles\n        testMap[3][1] = 1;\n        testMap[3][2] = 1;\n\n        // Using setWay to find the path\n        boolean result = MazeRecursion.setWay(testMap, 1, 1);\n\n        // Assert that the path is found correctly\n        assertTrue(result);\n\n        // Validate that the path was marked correctly with 2's\n        // We only check the exit condition (6, 5) which is enough here\n        assertEquals(2, testMap[6][5]);\n\n        // Also, make sure the no-go areas are still marked as 1 (walls) and 3 (tried and failed)\n        // Check the walls\n        for (int i = 0; i < 7; i++) {\n            assertEquals(1, testMap[0][i]);\n            assertEquals(1, testMap[7][i]);\n        }\n        for (int i = 0; i < 8; i++) {\n            assertEquals(1, testMap[i][0]);\n            assertEquals(1, testMap[i][6]);\n        }\n        // Check the obstacle\n        assertEquals(1, testMap[3][1]);\n        assertEquals(1, testMap[3][2]);\n    }\n}",
        "package_metric": 2.87,
        "class_metric": 14.75,
        "method_metric": 60.0,
        "pitest": 11.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MazeRecursion",
        "method_name": "setWay",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MazeRecursionTest {\n\n    @Test\n    public void setWayTest() {\n        // Prepare a test maze map with known layout\n        int[][] map = new int[8][7];\n        // Initialize walls\n        for (int i = 0; i < 7; i++) {\n            map[0][i] = 1;\n            map[7][i] = 1;\n            map[i][0] = 1;\n            map[i][6] = 1;\n        }\n        // Initialize obstacles\n        map[3][1] = 1;\n        map[3][2] = 1;\n        \n        // Test a scenario where the path is achievable\n        boolean result = MazeRecursion.setWay(map, 1, 1);\n        assertTrue(result, \"The path should be found.\");\n        assertEquals(2, map[6][5], \"The endpoint should be marked as part of the path.\");\n\n        // Now test a scenario where the path is blocked, and there is no way to the endpoint\n        int[][] blockedMap = new int[8][7];\n        // Initialize walls\n        for (int i = 0; i < 7; i++) {\n            blockedMap[0][i] = 1;\n            blockedMap[7][i] = 1;\n            blockedMap[i][0] = 1;\n            blockedMap[i][6] = 1;\n        }\n        // Initialize obstacles\n        blockedMap[1][1] = 1; // Blocking the start position\n\n        result = MazeRecursion.setWay(blockedMap, 1, 1);\n        assertFalse(result, \"The path should not be found.\");\n        \n        // In this case, assert the state of the map after the algorithm has run,\n        // it should be unchanged since the start position was blocked.\n        for (int i = 0; i < blockedMap.length; i++) {\n            for (int j = 0; j < blockedMap[i].length; j++) {\n                if (i == 0 || i == 7 || j == 0 || j == 6) {\n                    assertEquals(1, blockedMap[i][j], \"Walls should remain as 1.\");\n                } else if (i == 1 && j == 1) {\n                    assertEquals(1, blockedMap[i][j], \"Blocked start position should remain as 1.\");\n                } else {\n                    assertEquals(0, blockedMap[i][j], \"Other paths should remain unvisited (0).\");\n                }\n            }\n        }\n    }\n}",
        "package_metric": 2.87,
        "class_metric": 14.75,
        "method_metric": 60.0,
        "pitest": 11.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MazeRecursion",
        "method_name": "setWay",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MazeRecursionTest {\n\n    @Test\n    public void setWayTest() {\n        // Create a maze map as per the context provided\n        int[][] map = new int[8][7];\n        for (int i = 0; i < 7; i++) {\n            map[0][i] = 1;\n            map[7][i] = 1;\n        }\n        for (int i = 0; i < 8; i++) {\n            map[i][0] = 1;\n            map[i][6] = 1;\n        }\n        map[3][1] = 1;\n        map[3][2] = 1;\n\n        // Test whether the ball can find its way to the endpoint (map[6][5])\n        boolean result = MazeRecursion.setWay(map, 1, 1);\n\n        // The expected result should be true since the ball should find a way\n        assertTrue(result);\n\n        // Further checks can be made to see if the correct path is being marked with '2'\n        // For instance, the ball would initially move down from (1,1), so we expect (2,1) to be '2'\n        assertEquals(2, map[2][1]);\n\n        // Checking for the end point being reached\n        assertEquals(2, map[6][5]);\n        \n        // We can also check that the walls are still intact (not overwritten by the setWay method)\n        for (int i = 0; i < 7; i++) {\n            assertEquals(1, map[0][i]);\n            assertEquals(1, map[7][i]);\n        }\n        for (int i = 0; i < 8; i++) {\n            assertEquals(1, map[i][0]);\n            assertEquals(1, map[i][6]);\n        }\n        \n        // If additional assertions are needed for the entire path, these would depend on the specific implementation of setWay\n        // For a more thorough test, one could loop through all cells in the maze and verify that no '2's are next to walls or outside the valid path\n    }\n}",
        "package_metric": 2.87,
        "class_metric": 14.75,
        "method_metric": 60.0,
        "pitest": 11.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MazeRecursion",
        "method_name": "setWay",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MazeRecursionTest {\n    @Test\n    public void setWayTest() {\n        // Initialize a maze with the same structure as described in the problem context\n        int[][] map = new int[8][7];\n        for (int i = 0; i < 7; i++) {\n            map[0][i] = 1;\n            map[7][i] = 1;\n        }\n        for (int i = 0; i < 8; i++) {\n            map[i][0] = 1;\n            map[i][6] = 1;\n        }\n        map[3][1] = 1;\n        map[3][2] = 1;\n        \n        // Test path finding starting from the entry point (1,1)\n        boolean result = MazeRecursion.setWay(map, 1, 1);\n        \n        // Assert that a path has been found\n        assertTrue(result);\n        \n        // Assert that the endpoint has been marked as part of the path\n        assertEquals(2, map[6][5]);\n        \n        // Additional assertions could check the correctness of the path marked by '2's\n        // and that there are no incorrect paths marked by '3's after the full path has been found.\n    }\n}",
        "package_metric": 2.87,
        "class_metric": 14.75,
        "method_metric": 60.0,
        "pitest": 11.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MazeRecursion",
        "method_name": "setWay",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class MazeRecursionTest {\n\n    @Test\n    public void setWayTest() {\n        int[][] map = {\n            {1, 1, 1, 1, 1, 1, 1},\n            {1, 0, 0, 0, 0, 0, 1},\n            {1, 0, 1, 1, 1, 0, 1},\n            {1, 0, 1, 0, 0, 0, 1},\n            {1, 0, 1, 1, 1, 0, 1},\n            {1, 0, 0, 0, 0, 0, 1},\n            {1, 1, 1, 1, 1, 2, 1},\n        };\n\n        // The ball should find its way to the endpoint (6, 5) here\n        assertTrue(MazeRecursion.setWay(map, 1, 1));\n\n        // Changing the endpoint to a wall (a value of 1) to make it inaccessible\n        map[6][5] = 1;\n\n        // The ball should not be able to find a path now\n        assertFalse(MazeRecursion.setWay(map, 1, 1));\n\n        // Try starting from a wall, expecting false as walls are not a valid starting point\n        assertFalse(MazeRecursion.setWay(map, 0, 0));\n\n        // Test a corner of the map which is a dead end\n        assertFalse(MazeRecursion.setWay(map, 1, 6));\n    }\n}",
        "package_metric": 3.5,
        "class_metric": 18.03,
        "method_metric": 73.33,
        "pitest": 14.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MazeRecursion",
        "method_name": "setWay",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MazeRecursionTest {\n    \n    @Test\n    public void setWayTest() {\n        // Initialize a map for the test\n        int[][] map = new int[7][6];\n        \n        // Fill the map with '0's representing empty space where the ball can go through\n        for (int i = 0; i < 7; i++) {\n            for (int j = 0; j < 6; j++) {\n                map[i][j] = 0;\n            }\n        }\n        \n        // Create obstacles by setting some cells to '1' to represent walls\n        // (Adjust these values according to the specific test case you want to create)\n        map[0][2] = 1;\n        map[1][2] = 1;\n        map[2][2] = 1;\n        map[3][2] = 1;\n        map[4][2] = 1;\n        // etc...\n\n        // Define the starting position (i, j) for the ball\n        int startI = 0;\n        int startJ = 0;\n\n        // Define the ending position\n        // Here, (6, 5) is mentioned in the provided source code as the endpoint\n        int endI = 6;\n        int endJ = 5;\n        \n        // Place the endpoint value as per the source code requirement\n        map[endI][endJ] = 2;\n\n        // Perform the test by calling the setWay function with the starting position\n        boolean result = MazeRecursion.setWay(map, startI, startJ);\n        \n        // Assert whether the path is found or not by checking the outcome\n        assertTrue(result, \"Path to the given endpoint should be found\");\n\n        // Additional checks can be added to validate map state after algorithm execution\n        // For example: Check if the path set by the solution contains '2's\n        assertTrue(map[endI][endJ] == 2, \"Path should be marked with '2's up to the endpoint\");\n\n        // if needed, print the map to visually assess the test\n        // for (int i = 0; i < map.length; i++) {\n        //     for (int j = 0; j < map[0].length; j++) {\n        //         System.out.print(map[i][j] + \" \");\n        //     }\n        //     System.out.println();\n        // }\n    }\n}",
        "package_metric": 0.64,
        "class_metric": 3.28,
        "method_metric": 13.33,
        "pitest": 3.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MazeRecursion",
        "method_name": "setWay",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MazeRecursionTest {\n    \n    @Test\n    public void setWayTest() {\n        // Initialize the map array\n        int[][] map = {\n            {1, 1, 1, 1, 1, 1, 1},\n            {1, 0, 0, 0, 0, 0, 1},\n            {1, 0, 1, 1, 1, 0, 1},\n            {1, 0, 1, 0, 1, 0, 1},\n            {1, 0, 1, 0, 0, 0, 1},\n            {1, 1, 0, 1, 1, 0, 1},\n            {1, 1, 0, 0, 0, 2, 1},\n        };\n\n        // Execute the test case\n        boolean result = MazeRecursion.setWay(map, 1, 1);\n        \n        // Assert that the result is true as the path should find the destination at map[6][5].\n        assertTrue(result, \"The path should find its way to the destination\");\n\n        // Optional: You can include additional checks to make sure the path '2' leads to the correct goal.\n        assertEquals(2, map[6][5], \"The destination should be marked by '2'\");\n        \n        // Alternatively, to verify that the correct path is taken (filled with 2's), \n        // you could check the values in the 'map' array against the expected values\n        // if you have a known solution to the maze.\n\n        // Additional checks could be performed such as asserting that no other elements\n        // on the path from the start (1,1) to the end (6,5) have the value 3 - indicating no backtracking was necessary.\n    }\n}",
        "package_metric": 0.64,
        "class_metric": 3.28,
        "method_metric": 13.33,
        "pitest": 3.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MazeRecursion",
        "method_name": "setWay",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MazeRecursionTest {\n\n    @Test\n    public void setWayTest() {\n        // Here we create a sample map for testing. Number 1 represents a wall that cannot be crossed, \n        // while number 0 represents an open space where the ball can travel.\n        int[][] map = {\n                {1, 1, 1, 1, 1, 1, 1},\n                {1, 0, 0, 0, 0, 0, 1},\n                {1, 0, 1, 1, 1, 0, 1},\n                {1, 0, 1, 0, 1, 0, 1},\n                {1, 0, 1, 0, 0, 0, 1},\n                {1, 0, 1, 0, 1, 1, 1},\n                {1, 0, 0, 0, 0, 0, 1},\n                {1, 1, 1, 1, 1, 1, 1}\n        };\n\n        // Case: Starting at a point that results in successful path finding.\n        assertTrue(MazeRecursion.setWay(map, 1, 1), \"The path should be found successfully from point (1,1)\");\n\n        // Reset the map for a new test or alternatively create a new map array.\n        for (int i = 0; i < map.length; i++) {\n            for (int j = 0; j < map[0].length; j++) {\n                if (map[i][j] == 2 || map[i][j] == 3) {\n                    map[i][j] = 0;\n                }\n            }\n        }\n\n        // Case: Starting from a blocked point, expecting failure.\n        assertFalse(MazeRecursion.setWay(map, 2, 2), \"The path should not be found starting from a wall (2,2)\");\n\n        // Additional test cases could be written here to assert different scenarios, such as boundaries, already visited paths, etc.\n    }\n}",
        "package_metric": 2.87,
        "class_metric": 14.75,
        "method_metric": 60.0,
        "pitest": 11.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MazeRecursion",
        "method_name": "setWay",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MazeRecursionTest {\n\n    private static final int MAZE_SIZE = 7;\n\n    @Test\n    public void setWayTest() {\n        // Initialize the map with all zeros\n        int[][] map = new int[MAZE_SIZE][MAZE_SIZE];\n        for (int[] row : map) {\n            java.util.Arrays.fill(row, 0);\n        }\n        \n        // Create barriers by setting some cells to 1\n        // As an example assuming barriers are around the perimeter except at the exit\n        for (int i = 0; i < MAZE_SIZE; i++) {\n            map[0][i] = map[MAZE_SIZE - 1][i] = 1; // Top and bottom rows\n            map[i][0] = map[i][MAZE_SIZE - 1] = 1; // Leftmost and rightmost columns\n        }\n\n        // Assume we know that position (6,5) is our path's endpoint and leave it as 0\n        map[6][5] = 0; // Ensure the endpoint is not a barrier\n\n        // Assume the start position is (1,1)\n        boolean result = MazeRecursionTest.setWay(map, 1, 1);\n\n        // Check if the correct path to the exit was found\n        assertTrue(result, \"The method should return true when a path to the exit is found.\");\n\n        // Additionally, could check if the correct path is marked with '2's and dead ends with '3's\n        // Here's an example of how you might check a known path:\n        // Path goes from (1,1) down to (5,1), then to right to (5,5)\n        for (int i = 1; i <= 5; i++) {\n            assertEquals(2, map[i][1], \"The path should be marked by '2's\");\n        }\n        for (int i = 2; i <= 5; i++) {\n            assertEquals(2, map[5][i], \"The path should be marked by '2's\");\n        }\n\n        // Check that (6,5) is reached by the path\n        assertEquals(2, map[6][5], \"The endpoint should be part of the path and marked by '2'\");\n\n        // Uncomment and adjust this part if you need to check for specific dead ends\n        /*\n        assertEquals(3, map[deadEndI][deadEndJ], \"Dead ends should be marked by '3's\");\n        */\n    }\n\n    // The setWay method should be declared here to be static, or alternatively it should be put in a separate class\n\n    public static boolean setWay(int[][] map, int i, int j) {\n        if (map[6][5] == 2) { // means the ball find its path, ending condition\n            return true;\n        }\n        if (map[i][j] == 0) { // if the ball hasn't gone through this point\n            // then the ball follows the move strategy: down -> right -> up -> left\n            map[i][j] = 2; // we assume that this path is feasible first, set the current point to 2\n\n            if (setWay(map, i + 1, j)) { // go down\n                return true;\n            } else if (setWay(map, i, j + 1)) { // go right\n                return true;\n            } else if (setWay(map, i - 1, j)) { // go up\n                return true;\n            } else if (setWay(map, i, j - 1)) { // go left\n                return true;\n            } else {\n                // the current point is the dead end, the ball cannot proceed, set the current point to 3\n                map[i][j] = 3;\n                return false;\n            }\n        } else {\n            // if the map[i][j] != 0, it's a wall or a visited/dead-end cell\n            return false;\n        }\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MazeRecursion",
        "method_name": "setWay",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MazeRecursionTest {\n    \n    @Test\n    public void setWayTest() {\n        // Given\n        // Initializing a map of all zeros (1 represents an obstacle)\n        int[][] map = {\n            {0, 0, 0, 0, 0, 0, 0},\n            {0, 1, 1, 1, 1, 1, 0},\n            {0, 0, 0, 0, 1, 0, 0},\n            {0, 1, 1, 0, 0, 0, 0},\n            {0, 1, 0, 1, 1, 1, 0},\n            {0, 0, 0, 0, 0, 0, 0},\n            {0, 1, 1, 1, 1, 2, 0} // destination point with a value of 2\n        };\n        \n        // When\n        // Test whether the ball can find its path and set it to `true`\n        boolean result = MazeRecursion.setWay(map, 1, 1);\n        \n        // Then\n        // Assert that the result is true - path is found\n        assertTrue(result, \"The ball did not find the correct path.\");\n        \n        // Now test the case where no path exists by setting an obstacle before the\n        // destination point, map[6][5], changing its value from 2 to 1.\n        map[6][5] = 1;\n        \n        // When\n        // Path cannot be found now, expecting `false`\n        result = MazeRecursion.setWay(map, 1, 1);\n        \n        // Then\n        // Assert that now the result is false - path is not found\n        assertFalse(result, \"The ball should not find a path because the destination is blocked.\");\n    }\n}",
        "package_metric": 1.27,
        "class_metric": 6.56,
        "method_metric": 26.67,
        "pitest": 6.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "BinaryTree",
        "method_name": "find",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n\n    private BinaryTree binaryTree;\n\n    @BeforeEach\n    void setUp() {\n        binaryTree = new BinaryTree();\n        binaryTree.put(50);\n        binaryTree.put(30);\n        binaryTree.put(70);\n        binaryTree.put(10);\n        binaryTree.put(40);\n        binaryTree.put(60);\n        binaryTree.put(80);\n    }\n\n    @Test\n    public void findExistingKeyTest() {\n        // Try to find an existing key\n        BinaryTree.Node foundNode = binaryTree.find(30);\n        assertNotNull(foundNode);\n        assertEquals(30, foundNode.data);\n    }\n\n    @Test\n    public void findNonExistingKeyTest() {\n        // Try to find a non-existing key, should return the would-be parent\n        BinaryTree.Node foundNode = binaryTree.find(45);\n        assertNotNull(foundNode);\n        assertEquals(40, foundNode.data);\n    }\n\n    @Test\n    public void findRootTest() {\n        // Try to find the root\n        BinaryTree.Node foundNode = binaryTree.find(50);\n        assertNotNull(foundNode);\n        assertEquals(50, foundNode.data);\n    }\n\n    @Test\n    public void findOnEmptyTreeTest() {\n        // Creating an empty tree to find a value in it\n        BinaryTree emptyTree = new BinaryTree();\n        BinaryTree.Node foundNode = emptyTree.find(100);\n        assertNull(foundNode);\n    }\n}",
        "package_metric": 1.93,
        "class_metric": 23.15,
        "method_metric": 100.0,
        "pitest": 20.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "BinaryTree",
        "method_name": "find",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    \n    private BinaryTree tree;\n    \n    @BeforeEach\n    public void setUp() {\n        tree = new BinaryTree();\n        tree.put(10);\n        tree.put(5);\n        tree.put(15);\n        tree.put(3);\n        tree.put(7);\n        tree.put(12);\n        tree.put(18);\n    }\n\n    @Test\n    public void findTest() {\n        // Existing node\n        assertNotNull(tree.find(10), \"Should find node with data 10\");\n        assertEquals(10, tree.find(10).data, \"Should return node with data 10\");\n        \n        // Left child\n        assertNotNull(tree.find(5), \"Should find node with data 5\");\n        assertEquals(5, tree.find(5).data, \"Should return node with data 5\");\n\n        // Right child\n        assertNotNull(tree.find(15), \"Should find node with data 15\");\n        assertEquals(15, tree.find(15).data, \"Should return node with data 15\");\n\n        // Non-existing node, smaller than root\n        assertNotNull(tree.find(1), \"Should find parent node for data 1\");\n        assertEquals(3, tree.find(1).data, \"Should return node with data 3 as parent of non-existent node 1\");\n\n        // Non-existing node, larger than root\n        assertNotNull(tree.find(20), \"Should find parent node for data 20\");\n        assertEquals(18, tree.find(20).data, \"Should return node with data 18 as parent of non-existent node 20\");\n\n        // Leaf node\n        assertNotNull(tree.find(7), \"Should find leaf node with data 7\");\n        assertEquals(7, tree.find(7).data, \"Should return leaf node with data 7\");\n    }\n}",
        "package_metric": 1.86,
        "class_metric": 22.22,
        "method_metric": 91.67,
        "pitest": 20.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "BinaryTree",
        "method_name": "find",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    private BinaryTree binaryTree;\n\n    @BeforeEach\n    public void setUp() {\n        binaryTree = new BinaryTree();\n        binaryTree.put(20);\n        binaryTree.put(10);\n        binaryTree.put(30);\n        binaryTree.put(5);\n        binaryTree.put(15);\n        binaryTree.put(25);\n        binaryTree.put(35);\n    }\n\n    @Test\n    public void findTest() {\n        // Test finding an existing node\n        BinaryTree.Node foundNode = binaryTree.find(15);\n        assertNotNull(foundNode);\n        assertEquals(15, foundNode.data);\n\n        // Test finding the root node\n        foundNode = binaryTree.find(20);\n        assertNotNull(foundNode);\n        assertEquals(20, foundNode.data);\n        assertNull(foundNode.parent); // root node's parent is null\n\n        // Test finding non-existent node, should return the would-be parent\n        foundNode = binaryTree.find(17);\n        assertNotNull(foundNode);\n        assertEquals(15, foundNode.data);  // 17 would be right child of 15\n\n        foundNode = binaryTree.find(40);\n        assertNotNull(foundNode);\n        assertEquals(35, foundNode.data); // 40 would be right child of 35\n\n        // Test when the tree is empty\n        binaryTree = new BinaryTree();\n        assertNull(binaryTree.find(100)); // Searching in an empty tree returns null\n    }\n}",
        "package_metric": 1.93,
        "class_metric": 23.15,
        "method_metric": 100.0,
        "pitest": 20.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "BinaryTree",
        "method_name": "find",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n\n    @Test\n    public void findTest() {\n        BinaryTree tree = new BinaryTree();\n        \n        // Assume BinaryTree.put(int value) adds elements into the tree.\n        // Let's construct the following tree as a test case:\n        //      5\n        //     / \\\n        //    3   7\n        //   / \\   \\\n        //  2   4   9\n        \n        tree.put(5);\n        tree.put(3);\n        tree.put(7);\n        tree.put(2);\n        tree.put(4);\n        tree.put(9);\n        \n        // Test finding existing nodes\n        assertNotNull(tree.find(5), \"Node with key 5 should be found\");\n        assertNotNull(tree.find(3), \"Node with key 3 should be found\");\n        assertNotNull(tree.find(9), \"Node with key 9 should be found\");\n\n        // Test the case where node should be present and check if correct node is returned\n        assertEquals(5, tree.find(5).data, \"Incorrect node returned for key 5\");\n        assertEquals(3, tree.find(3).data, \"Incorrect node returned for key 3\");\n        assertEquals(9, tree.find(9).data, \"Incorrect node returned for key 9\");\n\n        // Test finding non-existing nodes\n        assertNotNull(tree.find(6), \"Should return parent of where a node with key 6 would be inserted\");\n        assertEquals(7, tree.find(6).data, \"Parent node should have data 7\");\n\n        assertNotNull(tree.find(1), \"Should return parent of where a node with key 1 would be inserted\");\n        assertEquals(2, tree.find(1).data, \"Parent node should have data 2\"); \n\n        // Test finding a node in an empty tree\n        BinaryTree emptyTree = new BinaryTree();\n        assertNull(emptyTree.find(5), \"Finding in an empty tree should return null\");\n    }\n}",
        "package_metric": 1.93,
        "class_metric": 23.15,
        "method_metric": 100.0,
        "pitest": 20.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers only\n        assertEquals(4, AbsoluteMax.getMaxValue(1, 2, 3, 4));\n        // Test with negative numbers only\n        assertEquals(-8, AbsoluteMax.getMaxValue(-1, -2, -8, -4));\n        // Test with a mix of positive and negative numbers\n        assertEquals(-5, AbsoluteMax.getMaxValue(-5, 3, 0, 2));\n        // Test with all zeros (which should return zero)\n        assertEquals(0, AbsoluteMax.getMaxValue(0, 0, 0, 0));\n        // Test with one number, which also tests with a positive and negative\n        assertEquals(10, AbsoluteMax.getMaxValue(10));\n        assertEquals(-1, AbsoluteMax.getMaxValue(-1));\n        \n        // Test throwing exception for empty array\n        Exception emptyArrayException = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        assertTrue(emptyArrayException.getMessage().contains(\"Numbers array cannot be empty or null\"));\n\n        // Test throwing exception for null array\n        Exception nullArrayException = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertTrue(nullArrayException.getMessage().contains(\"Numbers array cannot be empty or null\"));\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    \n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(5, AbsoluteMax.getMaxValue(1, 2, 3, 4, 5));\n        \n        // Test with negative numbers\n        assertEquals(-5, AbsoluteMax.getMaxValue(-1, -2, -3, -4, -5));\n        \n        // Test with a mix of negative and positive numbers where a negative is largest by abs value\n        assertEquals(-5, AbsoluteMax.getMaxValue(1, -2, 3, -5, 4));\n        \n        // Test with a mix of negative and positive numbers where a positive is largest by abs value\n        assertEquals(5, AbsoluteMax.getMaxValue(-1, 2, -3, 5, -4));\n        \n        // Test with zeros and positives\n        assertEquals(5, AbsoluteMax.getMaxValue(0, 2, 3, 5, 0));\n        \n        // Test with zeros and negatives\n        assertEquals(-5, AbsoluteMax.getMaxValue(0, -2, -3, -5, 0));\n        \n        // Test with a single value\n        assertEquals(1, AbsoluteMax.getMaxValue(1));\n        \n        // Test with a single negative value\n        assertEquals(-1, AbsoluteMax.getMaxValue(-1));\n        \n        // Test throwing of IllegalArgumentException for empty array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n        \n        // Test throwing of IllegalArgumentException for null input\n        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", nullException.getMessage());\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    \n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(5, AbsoluteMax.getMaxValue(1, 2, 3, 4, 5));\n        // Test with negative numbers\n        assertEquals(-6, AbsoluteMax.getMaxValue(-1, -2, -3, -6, -4));\n        // Test with mixed numbers\n        assertEquals(-10, AbsoluteMax.getMaxValue(7, -8, 9, -10, 2));\n        // Test with single value\n        assertEquals(42, AbsoluteMax.getMaxValue(42));\n        // Test with single negative value\n        assertEquals(-99, AbsoluteMax.getMaxValue(-99));\n    }\n    \n    @Test\n    public void getMaxValueWithEmptyArrayTest() {\n        // Test with empty array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        // Check if the message is the same as expected\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n\n    @Test\n    public void getMaxValueWithNullArrayTest() {\n        // Test with null array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        // Check if the message is the same as expected\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(10, AbsoluteMax.getMaxValue(1, 3, 10, 2));\n\n        // Test with negative numbers\n        assertEquals(-20, AbsoluteMax.getMaxValue(-3, -1, -20, -5));\n\n        // Test with a mix of negative and positive numbers\n        assertEquals(-30, AbsoluteMax.getMaxValue(5, -30, 20, -10));\n\n        // Test with a single number\n        assertEquals(7, AbsoluteMax.getMaxValue(7));\n\n        // Test with zeros and positives\n        assertEquals(0, AbsoluteMax.getMaxValue(0, 0, 0));\n\n        // Test with zeros and negatives\n        assertEquals(-1, AbsoluteMax.getMaxValue(0, -1, 0));\n\n        // Exception for null input\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null));\n\n        // Exception for empty input\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue());\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(9, AbsoluteMax.getMaxValue(1, 2, 9, 3));\n        // Test with negative numbers\n        assertEquals(-10, AbsoluteMax.getMaxValue(-1, -2, -10, -3));\n        // Test with a mix of negative and positive numbers\n        assertEquals(-50, AbsoluteMax.getMaxValue(-50, 30, 20, 10));\n        // Test with a single number\n        assertEquals(5, AbsoluteMax.getMaxValue(5));\n    }\n\n    @Test\n    public void getMaxValueWithEmptyArrayTest() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n\n    @Test\n    public void getMaxValueWithNullInputTest() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n\n    @Test\n    public void getMaxValueWithAllZeroesTest() {\n        // Assuming all zeros should return zero rather than throw an exception.\n        assertEquals(0, AbsoluteMax.getMaxValue(0, 0, 0, 0));\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with an array of positive numbers\n        assertEquals(3, AbsoluteMax.getMaxValue(1,2,3), \"Max of 1,2,3 should be 3\");\n        \n        // Test with an array of negative numbers\n        assertEquals(-4, AbsoluteMax.getMaxValue(-1,-2,-4), \"Max of -1,-2,-4 should be -4\");\n        \n        // Test with a mixed array of negative and positive numbers\n        assertEquals(-5, AbsoluteMax.getMaxValue(-5,4,3,2,1), \"Max of -5,4,3,2,1 should be -5\");\n        \n        // Test with a single element\n        assertEquals(42, AbsoluteMax.getMaxValue(42), \"Max of a single element 42 should be 42\");\n        \n        // Test with a zero in the array\n        assertEquals(0, AbsoluteMax.getMaxValue(0), \"Max of a single element 0 should be 0\");\n        \n        // Test with zeros and negative numbers\n        assertEquals(-1, AbsoluteMax.getMaxValue(0, -1), \"Max of 0, -1 should be -1\");\n    }\n    \n    @Test\n    public void getMaxValueTestWithNull() {\n        Exception exception = assertThrows(\n            IllegalArgumentException.class,\n            () -> AbsoluteMax.getMaxValue(null)\n        );\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n\n    @Test\n    public void getMaxValueTestWithEmpty() {\n        Exception exception = assertThrows(\n            IllegalArgumentException.class,\n            () -> AbsoluteMax.getMaxValue()\n        );\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    \n    @Test\n    public void getMaxValueTest() {\n        // Test with a normal array of integers\n        assertEquals(5, AbsoluteMax.getMaxValue(-4, 5, 0, 3, -1));\n        \n        // Test with an array of integers where a negative has the largest absolute value\n        assertEquals(-10, AbsoluteMax.getMaxValue(-10, 5, 7, 9));\n\n        // Test with an array that contains one element\n        assertEquals(42, AbsoluteMax.getMaxValue(42));\n        \n        // Test with an array that contains multiple elements with the same absolute max value but different signs\n        assertEquals(-15, AbsoluteMax.getMaxValue(-15, 15, 10));\n\n        // Test with an array that contains zeros and non-zero numbers\n        assertEquals(4, AbsoluteMax.getMaxValue(0, 3, 4, 2, 0));\n    }\n    \n    @Test\n    public void getMaxValueTest_exception() {\n        // Test with an empty array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(new int[]{});\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n\n        // Test with null input\n        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", nullException.getMessage());\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with an array of positive numbers\n        assertEquals(5, AbsoluteMax.getMaxValue(1, 2, 3, 4, 5));\n\n        // Test with an array of negative numbers\n        assertEquals(-6, AbsoluteMax.getMaxValue(-1, -2, -3, -6, -4));\n\n        // Test with an array of mixed positive and negative numbers\n        assertEquals(-7, AbsoluteMax.getMaxValue(1, -7, 3, 7, 5));\n\n        // Test with only one number\n        assertEquals(42, AbsoluteMax.getMaxValue(42));\n\n        // Test with an array containing zero\n        assertEquals(0, AbsoluteMax.getMaxValue(0));\n\n        // Test throwing exception with empty array\n        Exception emptyArrayException = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", emptyArrayException.getMessage());\n\n        // Test throwing exception with null input\n        Exception nullPointerException = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", nullPointerException.getMessage());\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(3, AbsoluteMax.getMaxValue(1, 2, 3));\n        // Test with negative numbers\n        assertEquals(-4, AbsoluteMax.getMaxValue(-1, -2, -3, -4));\n        // Test with a mix of positive and negative numbers\n        assertEquals(-5, AbsoluteMax.getMaxValue(-1, 2, -3, 4, -5));\n        // Test with a single number\n        assertEquals(10, AbsoluteMax.getMaxValue(10));\n        // Test with all numbers having the same absolute value\n        assertEquals(-1, AbsoluteMax.getMaxValue(-1, 1));\n    }\n\n    @Test\n    public void getMaxValueTestWithException() {\n        // Test with null input\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n\n        // Test with empty array\n        Exception emptyException = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(new int[]{});\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", emptyException.getMessage());\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(10, AbsoluteMax.getMaxValue(1, 10, 3, 4, 5));\n\n        // Test with negative numbers\n        assertEquals(-15, AbsoluteMax.getMaxValue(-1, -2, -15, -3));\n\n        // Test with a mix of negative and positive numbers\n        assertEquals(-20, AbsoluteMax.getMaxValue(-20, 19, 1, 5));\n\n        // Test with a single value\n        assertEquals(7, AbsoluteMax.getMaxValue(7));\n\n        // Test with first absolute maximum at the beginning\n        assertEquals(-30, AbsoluteMax.getMaxValue(-30, 10, 20, 2));\n\n        // Test with first absolute maximum in the middle\n        assertEquals(50, AbsoluteMax.getMaxValue(1, 50, -50, 20, 5));\n        \n        // Test if IllegalArgumentException is thrown for null input\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null));\n\n        // Test if IllegalArgumentException is thrown for empty array\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue());\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        assertThrows(IllegalArgumentException.class, () -> MathUtils.getMaxValue(null), \"Numbers array cannot be empty or null\");\n        assertThrows(IllegalArgumentException.class, () -> MathUtils.getMaxValue(), \"Numbers array cannot be empty or null\");\n\n        assertEquals(5, MathUtils.getMaxValue(1, -2, 3, 5));\n        assertEquals(-5, MathUtils.getMaxValue(-1, -3, -5, 0));\n        assertEquals(0, MathUtils.getMaxValue(0));\n        assertEquals(Integer.MAX_VALUE, MathUtils.getMaxValue(Integer.MIN_VALUE, Integer.MAX_VALUE));\n        assertEquals(-1, MathUtils.getMaxValue(-1));\n    }\n\n    // Assuming we have a class named MathUtils where the getMaxValue method resides\n    public static class MathUtils {\n        public static int getMaxValue(int... numbers) {\n            if (numbers == null || numbers.length == 0) {\n                throw new IllegalArgumentException(\"Numbers array cannot be empty or null\");\n            }\n            int absMax = numbers[0];\n            for (int i = 1; i < numbers.length; i++) {\n                if (Math.abs(numbers[i]) > Math.abs(absMax)) {\n                    absMax = numbers[i];\n                }\n            }\n            return absMax;\n        }\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(5, AbsoluteMax.getMaxValue(1, 2, 5, 4));\n        \n        // Test with negative numbers\n        assertEquals(-5, AbsoluteMax.getMaxValue(-1, -2, -5, -4));\n        \n        // Test with a mix of negative and positive numbers\n        assertEquals(-5, AbsoluteMax.getMaxValue(-1, -5, 3, 4));\n        \n        // Test with a single value\n        assertEquals(0, AbsoluteMax.getMaxValue(0));\n        \n        // Test with leading negative value having the maximum absolute value\n        assertEquals(-10, AbsoluteMax.getMaxValue(-10, 5, 7, 2));\n\n        // Test with leading positive value having the maximum absolute value\n        assertEquals(10, AbsoluteMax.getMaxValue(10, -5, -7, 2));\n    }\n\n    @Test\n    public void getMaxValueWithEmptyArrayTest() {\n        // Test with an empty array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n\n    @Test\n    public void getMaxValueWithNullArrayTest() {\n        // Test with null as an argument\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    \n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(5, AbsoluteMax.getMaxValue(1, 2, 3, 4, 5));\n        \n        // Test with negative numbers\n        assertEquals(-6, AbsoluteMax.getMaxValue(-3, -6, -1));\n        \n        // Test with a mix of positive and negative numbers\n        assertEquals(-7, AbsoluteMax.getMaxValue(-7, 2, 3, 4));\n        \n        // Test with a single number\n        assertEquals(10, AbsoluteMax.getMaxValue(10));\n        \n        // Test with a mix of positive, negative and zero\n        assertEquals(-100, AbsoluteMax.getMaxValue(50, -100, 0, 25, 75));\n        \n        // Test with all numbers being the same\n        assertEquals(2, AbsoluteMax.getMaxValue(2, 2, 2, 2));\n        \n        // Test for exception when array is null\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n        \n        // Test for exception when array is empty\n        IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        }, \"Expected getMaxValue() to throw, but it didn't\");\n        assertTrue(thrown.getMessage().contains(\"Numbers array cannot be empty or null\"));\n    }\n}\n\nclass AbsoluteMax {\n    public static int getMaxValue(int... numbers) {\n        if (numbers == null || numbers.length == 0) {\n            throw new IllegalArgumentException(\"Numbers array cannot be empty or null\");\n        }\n        int absMax = numbers[0];\n        for (int i = 1; i < numbers.length; i++) {\n            if (Math.abs(numbers[i]) > Math.abs(absMax)) {\n                absMax = numbers[i];\n            }\n        }\n        return absMax;\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "Caesar",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    private Caesar caesar;\n\n    @BeforeEach\n    void setUp() {\n        caesar = new Caesar();\n    }\n\n    @Test\n    public void decodeTest() {\n        String originalMessage = \"Hello World!\";\n        int shift = 3;\n\n        // Encode the message first to get the encrypted version\n        String encryptedMessage = caesar.encode(originalMessage, shift);\n\n        // Now decode the encrypted message\n        String decodedMessage = caesar.decode(encryptedMessage, shift);\n\n        // Assert that the decoded message is equal to the original message\n        assertEquals(originalMessage, decodedMessage, \"The decoded message should match the original message.\");\n    }\n\n    @AfterEach\n    void tearDown() {\n        caesar = null;\n    }\n}",
        "package_metric": 3.68,
        "class_metric": 87.88,
        "method_metric": 100.0,
        "pitest": 67.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "Caesar",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    @Test\n    public void decodeTest() {\n        Caesar caesar = new Caesar();\n        final String originalMessage = \"Hello World!\";\n        final String encryptedMessage = \"Khoor Zruog!\";\n        final int shift = 3;\n\n        String decodedMessage = caesar.decode(encryptedMessage, shift);\n\n        assertEquals(originalMessage, decodedMessage, \"The decoded message should match the original message.\");\n    }\n}",
        "package_metric": 2.03,
        "class_metric": 48.48,
        "method_metric": 100.0,
        "pitest": 42.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "Caesar",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    private Caesar caesar;\n\n    @BeforeEach\n    public void setUp() {\n        caesar = new Caesar();\n    }\n\n    @Test\n    public void decodeTest() {\n        assertEquals(\"ABC\", caesar.decode(\"BCD\", 1), \"Decoding with shift 1\");\n        assertEquals(\"hello\", caesar.decode(\"ifmmp\", 1), \"Decoding with shift 1\");\n        assertEquals(\"hello world\", caesar.decode(\"khoor zruog\", 3), \"Decoding with shift 3\");\n        assertEquals(\"HELLO WORLD\", caesar.decode(\"KHOOR ZRUOG\", 3), \"Decoding with shift 3\");\n        assertEquals(\"hello world\", caesar.decode(\"hello world\", 26), \"Decoding with shift 26 should be no-op\");\n        assertEquals(\"hello world\", caesar.decode(\"hello world\", 0), \"Decoding with shift 0 should be no-op\");\n        assertEquals(\"z\", caesar.decode(\"a\", 1), \"Decoding 'a' with shift 1 should result in 'z'\");\n        assertEquals(\"A message that includes punctuation!\", caesar.decode(\"D phvvdjh wkdw lqfoxghv sxqfwxdwlrq!\", 3), \"Decoding with shift 3 and punctuation\");\n    }\n}",
        "package_metric": 2.03,
        "class_metric": 48.48,
        "method_metric": 100.0,
        "pitest": 53.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "Caesar",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    \n    @Test\n    public void decodeTest() {\n        Caesar caesar = new Caesar();\n        String originalMessage = \"Hello World!\";\n        int shift = 3;\n\n        // Encrypt the original message to get an encrypted message\n        String encryptedMessage = caesar.encode(originalMessage, shift);\n        \n        // Expected to get the original message after decoding the encrypted message\n        String decodedMessage = caesar.decode(encryptedMessage, shift);\n        assertEquals(originalMessage, decodedMessage);\n        \n        // Additional tests to ensure that the decode method works as expected\n        assertEquals(\"A\", caesar.decode(\"D\", 3));\n        assertEquals(\"a\", caesar.decode(\"d\", 3));\n        assertEquals(\"Hello World!\", caesar.decode(\"Khoor Zruog!\", 3));\n        assertEquals(\"XYZ\", caesar.decode(\"ABC\", 3));\n        assertEquals(\"xyz\", caesar.decode(\"abc\", 3));\n        assertEquals(\" \", caesar.decode(\" \", 3));  // Test to ensure spaces are unaffected\n        assertEquals(\"123\", caesar.decode(\"123\", 3));  // Test to ensure digits are unaffected\n        assertEquals(\"!@#\", caesar.decode(\"!@#\", 3));  // Test to ensure special chars are unaffected\n\n        // Test with a large shift value, ensuring it wraps properly\n        String largeShiftEncoded = caesar.encode(originalMessage, 29); // equivalent to a shift of 3\n        assertEquals(originalMessage, caesar.decode(largeShiftEncoded, 29));\n\n        // Shifting back with zero should yield the original encrypted message\n        assertEquals(encryptedMessage, caesar.decode(encryptedMessage, 0));\n    }\n}",
        "package_metric": 3.68,
        "class_metric": 87.88,
        "method_metric": 100.0,
        "pitest": 84.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "Caesar",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    private Caesar caesar;\n\n    @BeforeEach\n    public void setUp() {\n        caesar = new Caesar();\n    }\n\n    @Test\n    public void decodeTest() {\n        // Given\n        String encryptedMessage = \"Khoor Zruog\"; // \"Hello World\" shifted 3 characters right\n        int shift = 3;\n        String expected = \"Hello World\";\n\n        // When\n        String actual = caesar.decode(encryptedMessage, shift);\n\n        // Then\n        assertEquals(expected, actual, \"The decoded message should match the original message.\");\n    }\n\n    // Tests for other methods like encode, isCapitalLatinLetter, etc., can be added here.\n    \n    @AfterEach\n    public void tearDown() {\n        caesar = null;\n    }\n}",
        "package_metric": 2.03,
        "class_metric": 48.48,
        "method_metric": 100.0,
        "pitest": 42.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "Caesar",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    private Caesar caesar;\n\n    @BeforeEach\n    public void setUp() {\n        caesar = new Caesar();\n    }\n\n    @Test\n    public void decodeTest() {\n        String originalMessage = \"Hello World!\";\n        int shift = 3;\n        String encodedMessage = caesar.encode(originalMessage, shift);\n        // Checking the encoded message\n        assertEquals(\"Khoor Zruog!\", encodedMessage);\n\n        String decodedMessage = caesar.decode(encodedMessage, shift);\n        // Now, ensuring the decode function reverses the encoded message\n        assertEquals(originalMessage, decodedMessage);\n\n        // Testing edge cases with shift values greater than 26\n        int largeShift = 29; // effective shift of 3 (29 % 26)\n        encodedMessage = caesar.encode(originalMessage, largeShift);\n        assertEquals(\"Khoor Zruog!\", encodedMessage);\n        decodedMessage = caesar.decode(encodedMessage, largeShift);\n        assertEquals(originalMessage, decodedMessage);\n\n        // Testing with no actual shift should return original message\n        assertEquals(originalMessage, caesar.decode(originalMessage, 0));\n\n        // Testing with full shift cycle should return original message\n        assertEquals(originalMessage, caesar.decode(originalMessage, 26));\n\n        // Testing with negative shift\n        encodedMessage = caesar.encode(originalMessage, -shift);\n        assertEquals(\"Ebiil Tloia!\", encodedMessage);\n        decodedMessage = caesar.decode(encodedMessage, -shift);\n        assertEquals(originalMessage, decodedMessage);\n\n        // Testing decoding with characters that are not Latin letters\n        String encodedNumbers = caesar.encode(\"1234\", shift);\n        assertEquals(\"1234\", encodedNumbers);\n        String decodedNumbers = caesar.decode(encodedNumbers, shift);\n        assertEquals(\"1234\", decodedNumbers);\n        \n        // Testing special case with all the letters\n        // Considering 'A' shifted by 1 gives 'B'\n        // hence, 'Z' shifted by 1 will become 'A', to retain length in the cycle.\n        String fullAlphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        encodedMessage = caesar.encode(fullAlphabet, 1);\n        assertEquals(\"BCDEFGHIJKLMNOPQRSTUVWXYZA\", encodedMessage);\n        decodedMessage = caesar.decode(encodedMessage, 1);\n        assertEquals(fullAlphabet, decodedMessage);\n    }\n}",
        "package_metric": 3.68,
        "class_metric": 87.88,
        "method_metric": 100.0,
        "pitest": 81.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "Caesar",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CaesarTest {\n    @Test\n    public void decodeTest() {\n        Caesar caesar = new Caesar();\n        String encryptedMessage = \"Uifsf jt b tfdsfu nfttbhf\";\n        int shift = 1;\n        String expectedOutput = \"There is a secret message\";\n\n        String actualOutput = caesar.decode(encryptedMessage, shift);\n\n        assertEquals(expectedOutput, actualOutput, \"The decode method did not work as expected.\");\n    }\n}",
        "package_metric": 2.03,
        "class_metric": 48.48,
        "method_metric": 100.0,
        "pitest": 42.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "Caesar",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    private Caesar caesar;\n\n    @BeforeEach\n    void setUp() {\n        caesar = new Caesar();\n    }\n    \n    @Test\n    public void decodeTest() {\n        String encryptedMessage = \"Crrng\";\n        int shift = 2;\n        String expectedResult = \"Apple\";\n\n        String actualResult = caesar.decode(encryptedMessage, shift);\n        assertEquals(expectedResult, actualResult, \"The decoded message should match the expected result.\");\n\n        // Additional test cases could be included here to ensure thorough testing.\n        // For example, testing boundary conditions or different shifts.\n    }\n}",
        "package_metric": 1.9,
        "class_metric": 45.45,
        "method_metric": 92.31,
        "pitest": 37.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "Caesar",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    \n    // Assuming that the isCapitalLatinLetter and isSmallLatinLetter methods are already implemented.\n    // For the purpose of this test, we will create stubs of these methods that return true for Latin alphabet only.\n    private static boolean isCapitalLatinLetter(char c) {\n        return c >= 'A' && c <= 'Z';\n    }\n\n    private static boolean isSmallLatinLetter(char c) {\n        return c >= 'a' && c <= 'z';\n    }\n    \n    @Test\n    public void decodeTest() {\n        // Given\n        Caesar caesar = new Caesar();\n        int shift = 3;\n        String encoded = \"Khoor Zruog\";  // \"Hello World\" shifted 3 characters to the right\n        String expected = \"Hello World\";\n\n        // When\n        String actual = caesar.decode(encoded, shift);\n\n        // Then\n        assertEquals(expected, actual, \"The decoded string should match the expected result.\");\n    }\n}",
        "package_metric": 2.03,
        "class_metric": 48.48,
        "method_metric": 100.0,
        "pitest": 42.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "Caesar",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    private Caesar caesar = new Caesar();\n\n    @Test\n    public void decodeTest() {\n        assertEquals(\"Hello\", caesar.decode(\"Khoor\", 3));\n        assertEquals(\"hello\", caesar.decode(\"khoor\", 3));\n        assertEquals(\"abc\", caesar.decode(\"def\", 3));\n        assertEquals(\"XYZ\", caesar.decode(\"ABC\", 3));\n        assertEquals(\"xyz\", caesar.decode(\"abc\", 3));\n        assertEquals(\"The quick brown fox jumps over the lazy dog\", caesar.decode(\"Wkh txlfn eurzq ira mxpsv ryhu wkh odcb grj\", 3));\n        assertEquals(\"123\", caesar.decode(\"123\", 3));\n        assertEquals(\"\", caesar.decode(\"\", 3));\n        assertEquals(\"With spaces\", caesar.decode(\"Zlwk vsdfhv\", 3));\n        assertEquals(\"With %^&* symbols\", caesar.decode(\"Zlwk %^&* vbperov\", 3));\n    }\n}",
        "package_metric": 2.03,
        "class_metric": 48.48,
        "method_metric": 100.0,
        "pitest": 56.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "Caesar",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    @Test\n    public void decodeTest() {\n        Caesar caesar = new Caesar();\n        String originalMessage = \"Hello World!\";\n        int shift = 3;\n        \n        // Assuming `encode` method works correctly and is available to use.\n        String encryptedMessage = caesar.encode(originalMessage, shift);\n        String decryptedMessage = caesar.decode(encryptedMessage, shift);\n        \n        assertEquals(originalMessage, decryptedMessage);\n    }\n}",
        "package_metric": 3.68,
        "class_metric": 87.88,
        "method_metric": 100.0,
        "pitest": 67.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "Caesar",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    private Caesar caesar;\n\n    @BeforeEach\n    public void setUp() {\n        caesar = new Caesar();\n    }\n\n    @Test\n    public void decodeTest() {\n        String originalMessage = \"HELLO\";\n        int shift = 3;\n\n        // Now let's encode a message and then decode it using the provided methods\n        // and make sure it matches the original message\n        String encodedMessage = caesar.encode(originalMessage, shift);\n        String decodedMessage = caesar.decode(encodedMessage, shift);\n\n        // Assertions to make sure the decode method is correctly implemented\n        assertEquals(originalMessage, decodedMessage, \"The decoded message should match the original message.\");\n\n        // Testing edge cases: shift by 0 and 26 should not alter the message\n        assertEquals(originalMessage, caesar.decode(originalMessage, 0), \"Shift by 0 should not change the message.\");\n        assertEquals(originalMessage, caesar.decode(originalMessage, 26), \"Shift by 26 should not change the message.\");\n\n        // Testing decode with negative shift\n        String negativeShiftEncoded = caesar.encode(originalMessage, -shift);\n        assertEquals(originalMessage, caesar.decode(negativeShiftEncoded, -shift), \"Decoding with a negative shift should return the original message.\");\n\n        // Test with characters outside of A-Z range to remain unchanged\n        String messageWithSymbols = \"HELLO, WORLD!\";\n        String encodedWithSymbols = caesar.encode(messageWithSymbols, shift);\n        String decodedWithSymbols = caesar.decode(encodedWithSymbols, shift);\n        assertEquals(messageWithSymbols, decodedWithSymbols, \"Characters outside of A-Z range should remain unchanged after decoding.\");\n    }\n}",
        "package_metric": 3.17,
        "class_metric": 75.76,
        "method_metric": 84.62,
        "pitest": 56.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "Caesar",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    @Test\n    public void decodeTest() {\n        Caesar caesar = new Caesar(); // Assuming the class name is Caesar\n        String encryptedMessage = \"Khoor Zruog\"; // \"Hello World\" with a shift of 3; H->K, e->h, etc.\n        int shift = 3;\n        String expectedOutput = \"Hello World\"; // The expected result after decoding\n        String actualOutput = caesar.decode(encryptedMessage, shift); // Calls the method to test\n        assertEquals(expectedOutput, actualOutput, \"The decoded message should match the expected output.\");\n    }\n}",
        "package_metric": 2.03,
        "class_metric": 48.48,
        "method_metric": 100.0,
        "pitest": 42.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "Caesar",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    // Helper method to check if a character is a capital Latin letter\n    private boolean isCapitalLatinLetter(char c) {\n        return c >= 'A' && c <= 'Z';\n    }\n\n    // Helper method to check if a character is a small Latin letter\n    private boolean isSmallLatinLetter(char c) {\n        return c >= 'a' && c <= 'z';\n    }\n\n    // The actual decode method similar to the JAVA Source Code provided\n    public String decode(String encryptedMessage, int shift) {\n        StringBuilder decoded = new StringBuilder();\n        shift %= 26;\n        final int length = encryptedMessage.length();\n        for (int i = 0; i < length; i++) {\n            char current = encryptedMessage.charAt(i);\n            if (isCapitalLatinLetter(current)) {\n                current -= shift;\n                decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters\n            } else if (isSmallLatinLetter(current)) {\n                current -= shift;\n                decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters\n            } else {\n                decoded.append(current);\n            }\n        }\n        return decoded.toString();\n    }\n    \n    @Test\n    public void decodeTest() {\n        CaesarTest testObject = new CaesarTest();\n\n        // Test with a positive shift\n        assertEquals(\"hello\", testObject.decode(\"khoor\", 3), \"Decoding 'khoor' with a shift of 3 should return 'hello'\");\n        // Test with a shift that wraps the alphabet\n        assertEquals(\"xyz\", testObject.decode(\"abc\", 3), \"Decoding 'abc' with a shift of 3 should return 'xyz'\");\n        // Test with a shift larger than the alphabet size\n        assertEquals(\"hello\", testObject.decode(\"khoor\", 29), \"Decoding 'khoor' with a shift of 29 should be equivalent to a shift of 3 and return 'hello'\");\n        // Test with a capital letters\n        assertEquals(\"Hello World\", testObject.decode(\"Khoor Zruog\", 3), \"Decoding 'Khoor Zruog' with a shift of 3 should return 'Hello World'\");\n        // Test with no shift\n        assertEquals(\"hello\", testObject.decode(\"hello\", 0), \"Decoding 'hello' with a shift of 0 should return 'hello'\");\n        // Test with non-alphabetic characters\n        assertEquals(\"h3llo!\", testObject.decode(\"k3oor!\", 3), \"Decoding 'k3oor!' with a shift of 3 should return 'h3llo!' with non-alphabetic characters unchanged\");\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    \n    private Armstrong armstrong;\n\n    @BeforeEach\n    public void setup() {\n        armstrong = new Armstrong();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        // Test with an Armstrong number\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n\n        // Test with a non-Armstrong number\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n\n        // Test with a single digit, which should always be an Armstrong number\n        assertTrue(armstrong.isArmstrong(5), \"Single digits are Armstrong numbers\");\n\n        // Test with a known 4-digit Armstrong number\n        assertTrue(armstrong.isArmstrong(1634), \"1634 is an Armstrong number\");\n\n        // Test with zero, which by definition is considered an Armstrong number\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number\");\n\n        // Test with a negative number, which cannot be an Armstrong number\n        assertFalse(armstrong.isArmstrong(-371), \"-371 is not an Armstrong number since Armstrong numbers are positive\");\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n\n        // Test with an Armstrong number\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n\n        // Test with a non-Armstrong number\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n\n        // Test with a single digit, which is always an Armstrong number\n        assertTrue(armstrong.isArmstrong(5), \"Single digit numbers are considered Armstrong numbers\");\n\n        // Test with a zero, which is also considered an Armstrong number\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number\");\n\n        // Test with a negative number, which cannot be an Armstrong number by definition\n        assertFalse(armstrong.isArmstrong(-370), \"-370 is not an Armstrong number even if 370 is\");\n\n        // Test with another Armstrong number\n        assertTrue(armstrong.isArmstrong(9474), \"9474 is an Armstrong number\");\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private final Armstrong armstrong = new Armstrong();\n\n    @Test\n    public void isArmstrongTest() {\n        // Test positive cases\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(9474), \"9474 is an Armstrong number\");\n\n        // Test negative case\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(10), \"10 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(9475), \"9475 is not an Armstrong number\");\n\n        // Test edge cases\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(1), \"1 is an Armstrong number\");\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n\n        // Test for a known Armstrong number\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number.\");\n\n        // Test for a non-Armstrong number\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number.\");\n\n        // Test for a single digit Armstrong number, which should return true (as any single digit raised to the power of 1 is itself)\n        assertTrue(armstrong.isArmstrong(5), \"Single digit numbers are Armstrong numbers by definition.\");\n\n        // Test for zero, which is technically an Armstrong number\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number.\");\n\n        // Test for another known Armstrong number\n        assertTrue(armstrong.isArmstrong(1634), \"1634 is an Armstrong number.\");\n\n        // Test with negative input, which should not be an Armstrong number\n        assertFalse(armstrong.isArmstrong(-153), \"Negative numbers are not Armstrong numbers.\");\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private Armstrong armstrong;\n\n    @BeforeEach\n    public void setup() {\n        armstrong = new Armstrong();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        // Test with Armstrong numbers\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(1), \"1 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(9474), \"9474 is an Armstrong number\");\n\n        // Test with non-Armstrong numbers\n        assertFalse(armstrong.isArmstrong(10), \"10 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(100), \"100 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(9475), \"9475 is not an Armstrong number\");\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        \n        // Test for a known Armstrong number\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        \n        // Test for a non-Armstrong number\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n        \n        // Additional test cases\n        assertTrue(armstrong.isArmstrong(1634), \"1634 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number\");  // Edge case: single digit\n        assertFalse(armstrong.isArmstrong(100), \"100 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(-370), \"-370 is not an Armstrong number\");  // Edge case: negative number\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    private Armstrong armstrong;\n\n    @BeforeEach\n    public void setup() {\n        armstrong = new Armstrong();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(1), \"1 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(1634), \"1634 is an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(10), \"10 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\npublic class ArmstrongTest {\n\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n\n        // Example of Armstrong number\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(9474), \"9474 is an Armstrong number\");\n\n        // Example of non-Armstrong number\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(10), \"10 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(9475), \"9475 is not an Armstrong number\");\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\npublic class ArmstrongTest {\n    \n    private final Armstrong armstrong = new Armstrong();\n\n    @Test\n    public void isArmstrongTest() {\n        // Test for known Armstrong numbers\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(407), \"407 is an Armstrong number\");\n\n        // Test for numbers that are not Armstrong numbers\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(350), \"350 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(999), \"999 is not an Armstrong number\");\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        \n        // Test for Armstrong numbers\n        assertTrue(armstrong.isArmstrong(153));\n        assertTrue(armstrong.isArmstrong(370));\n        assertTrue(armstrong.isArmstrong(371));\n        assertTrue(armstrong.isArmstrong(407));\n        \n        // Test for non-Armstrong numbers\n        assertFalse(armstrong.isArmstrong(123));\n        assertFalse(armstrong.isArmstrong(350));\n        assertFalse(armstrong.isArmstrong(999));\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private Armstrong armstrong;\n\n    @BeforeEach\n    public void setup() {\n        armstrong = new Armstrong();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        // Test for Armstrong numbers\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(407), \"407 is an Armstrong number\");\n\n        // Test for non-Armstrong numbers\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(350), \"350 is not an Armstrong number\");\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private Armstrong armstrong;\n\n    @BeforeEach\n    public void setup() {\n        armstrong = new Armstrong();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        // Test for Armstrong number\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n\n        // Test for non-Armstrong number\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n\n        // Test with zero (edge case)\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number\");\n\n        // Test for negative numbers (should always return false)\n        assertFalse(armstrong.isArmstrong(-153), \"-153 is not an Armstrong number\");\n\n        // Test with another Armstrong number\n        assertTrue(armstrong.isArmstrong(9474), \"9474 is an Armstrong number\");\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private Armstrong armstrong = new Armstrong();\n\n    @Test\n    public void isArmstrongTest() {\n        assertTrue(armstrong.isArmstrong(153)); // 153 is an Armstrong number since 1^3 + 5^3 + 3^3 = 153\n        assertTrue(armstrong.isArmstrong(370)); // 370 is an Armstrong number since 3^3 + 7^3 + 0^3 = 370\n        assertTrue(armstrong.isArmstrong(371)); // 371 is an Armstrong number since 3^3 + 7^3 + 1^3 = 371\n        assertTrue(armstrong.isArmstrong(407)); // 407 is an Armstrong number since 4^3 + 0^3 + 7^3 = 407\n        assertFalse(armstrong.isArmstrong(123)); // 123 is not an Armstrong number\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    private Armstrong armstrong = new Armstrong();\n\n    @Test\n    public void isArmstrongTest() {\n        // Positive test cases where the number is an Armstrong number\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(9474), \"9474 is an Armstrong number\");\n\n        // Negative test cases where the number is not an Armstrong number\n        assertFalse(armstrong.isArmstrong(154), \"154 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(375), \"375 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(372), \"372 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(9475), \"9475 is not an Armstrong number\");\n\n        // Test edge cases\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(1), \"1 is an Armstrong number\");\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private Armstrong armstrong;\n\n    @BeforeEach\n    public void setUp() {\n        armstrong = new Armstrong();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        // Armstrong numbers for testing\n        int armstrongNumber = 153; // 1^3 + 5^3 + 3^3 = 153\n        int nonArmstrongNumber = 123; // 1^3 + 2^3 + 3^3 != 123\n\n        // Test for a true case\n        assertTrue(armstrong.isArmstrong(armstrongNumber), \"153 should be identified as an Armstrong number\");\n\n        // Test for a false case\n        assertFalse(armstrong.isArmstrong(nonArmstrongNumber), \"123 should not be identified as an Armstrong number\");\n\n        // Edge cases\n        assertTrue(armstrong.isArmstrong(0), \"0 should be identified as an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(1), \"1 should be identified as an Armstrong number\");\n\n        // Test for a large Armstrong number\n        assertTrue(armstrong.isArmstrong(9474), \"9474 should be identified as an Armstrong number\");\n\n        // Test for a negative number, which cannot be an Armstrong number by definition\n        assertFalse(armstrong.isArmstrong(-153), \"-153 should not be identified as an Armstrong number\");\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    \n    private Armstrong armstrong;\n\n    @BeforeEach\n    public void setUp() {\n        armstrong = new Armstrong();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        // Test for known Armstrong numbers\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(407), \"407 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(9474), \"9474 is an Armstrong number\");\n\n        // Test for a non-Armstrong number\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n\n        // Test for edge cases, like zero and single-digit numbers (which are Armstrong numbers)\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(5), \"5 is an Armstrong number\");\n\n        // Test negative input (should not be an Armstrong number)\n        assertFalse(armstrong.isArmstrong(-153), \"-153 is not an Armstrong number\");\n    }\n\n    @AfterEach\n    public void tearDown() {\n        armstrong = null;\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private static Armstrong armstrong;\n\n    @BeforeAll\n    public static void setup() {\n        armstrong = new Armstrong();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        // Test for Armstrong numbers\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(9474), \"9474 is an Armstrong number\");\n\n        // Test for non-Armstrong numbers\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(10), \"10 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(9475), \"9475 is not an Armstrong number\");\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    // Instance of the class containing the isArmstrong method.\n    private final ArmstrongNumberValidator armstrongNumberValidator = new ArmstrongNumberValidator();\n\n    @Test\n    public void isArmstrongTest() {\n        // Test true cases for Armstrong numbers\n        assertTrue(armstrongNumberValidator.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(armstrongNumberValidator.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrongNumberValidator.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(armstrongNumberValidator.isArmstrong(9474), \"9474 is an Armstrong number\");\n\n        // Test false cases for non-Armstrong numbers\n        assertFalse(armstrongNumberValidator.isArmstrong(123), \"123 is not an Armstrong number\");\n        assertFalse(armstrongNumberValidator.isArmstrong(400), \"400 is not an Armstrong number\");\n        assertFalse(armstrongNumberValidator.isArmstrong(500), \"500 is not an Armstrong number\");\n    }\n\n    public static class ArmstrongNumberValidator {\n        // ... include the isArmstrong function here or it could be in a separate class file.\n        public boolean isArmstrong(int number) {\n            long sum = 0;\n            String temp = Integer.toString(number); // Convert the given number to a string\n            int power = temp.length(); // Extract the length of the number (number of digits)\n            long originalNumber = number;\n\n            while (originalNumber > 0) {\n                long digit = originalNumber % 10;\n                sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.\n                originalNumber /= 10;\n            }\n\n            return sum == number;\n        }\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private static Armstrong armstrongTester; // Assuming there is a class named Armstrong where the isArmstrong method resides.\n\n    @BeforeAll\n    public static void setup() {\n        armstrongTester = new Armstrong();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        // Test with an Armstrong number\n        assertTrue(armstrongTester.isArmstrong(153), \"153 is an Armstrong number.\");\n\n        // Test with a non-Armstrong number\n        assertFalse(armstrongTester.isArmstrong(123), \"123 is not an Armstrong number.\");\n\n        // Edge cases\n        assertTrue(armstrongTester.isArmstrong(0), \"0 is an Armstrong number.\");\n        assertTrue(armstrongTester.isArmstrong(1), \"1 is an Armstrong number.\");\n\n        // Test with a larger Armstrong number\n        assertTrue(armstrongTester.isArmstrong(9474), \"9474 is an Armstrong number.\");\n\n        // Boundary condition: An Armstrong number that is exactly 10^x which is not an Armstrong number\n        assertFalse(armstrongTester.isArmstrong(1000), \"1000 is not an Armstrong number.\");\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private static ArmstrongCalculator armstrongCalculator;\n\n    @BeforeAll\n    public static void setup() {\n        armstrongCalculator = new ArmstrongCalculator();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n         assertTrue(armstrongCalculator.isArmstrong(153)); // 1^3 + 5^3 + 3^3 = 153, thus it's an Armstrong number\n         assertTrue(armstrongCalculator.isArmstrong(370)); // 3^3 + 7^3 + 0^3 = 370, thus it's an Armstrong number\n         assertTrue(armstrongCalculator.isArmstrong(371)); // 3^3 + 7^3 + 1^3 = 371, thus it's an Armstrong number\n         assertFalse(armstrongCalculator.isArmstrong(123)); // Not an Armstrong number\n         assertFalse(armstrongCalculator.isArmstrong(10)); // Not an Armstrong number\n    }\n}\n\nclass ArmstrongCalculator {\n    public boolean isArmstrong(int number) {\n        long sum = 0;\n        String temp = Integer.toString(number); // Convert the given number to a string\n        int power = temp.length(); // Extract the length of the number (number of digits)\n        long originalNumber = number;\n\n        while (originalNumber > 0) {\n            long digit = originalNumber % 10;\n            sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.\n            originalNumber /= 10;\n        }\n\n        return sum == number;\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        \n        // Test for Armstrong numbers\n        assertTrue(armstrong.isArmstrong(153)); // 153 = 1^3 + 5^3 + 3^3\n        assertTrue(armstrong.isArmstrong(370)); // 370 = 3^3 + 7^3 + 0^3\n        assertTrue(armstrong.isArmstrong(9474)); // 9474 = 9^4 + 4^4 + 7^4 + 4^4\n\n        // Test for non-Armstrong numbers\n        assertFalse(armstrong.isArmstrong(123)); // Not an Armstrong number\n        assertFalse(armstrong.isArmstrong(372)); // Not an Armstrong number\n        assertFalse(armstrong.isArmstrong(9475)); // Not an Armstrong number\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    @Test\n    public void isArmstrongTest() {\n        ArithmeticFunctions arithmeticFunctions = new ArithmeticFunctions();\n\n        // Test with Armstrong number\n        assertTrue(arithmeticFunctions.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(arithmeticFunctions.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(arithmeticFunctions.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(arithmeticFunctions.isArmstrong(9474), \"9474 is an Armstrong number\");\n        \n        // Test with non-Armstrong number\n        assertFalse(arithmeticFunctions.isArmstrong(100), \"100 is not an Armstrong number\");\n        assertFalse(arithmeticFunctions.isArmstrong(123), \"123 is not an Armstrong number\");\n        assertFalse(arithmeticFunctions.isArmstrong(9475), \"9475 is not an Armstrong number\");\n        \n        // Edge cases\n        assertTrue(arithmeticFunctions.isArmstrong(0), \"0 is an Armstrong number\");\n        assertTrue(arithmeticFunctions.isArmstrong(1), \"1 is an Armstrong number\");\n        \n        // Negative number, assuming the Armstrong definition only applies to non-negative\n        assertFalse(arithmeticFunctions.isArmstrong(-153), \"-153 is not considered for Armstrong property\");\n    }\n}\n\nclass ArithmeticFunctions {\n    public boolean isArmstrong(int number) {\n        long sum = 0;\n        String temp = Integer.toString(number);\n        int power = temp.length();\n        long originalNumber = number;\n\n        while (originalNumber > 0) {\n            long digit = originalNumber % 10;\n            sum += (long) Math.pow(digit, power);\n            originalNumber /= 10;\n        }\n\n        return sum == number;\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    // Instance of the class that contains the isArmstrong method\n    private static final MyClass myClass = new MyClass();\n\n    @Test\n    public void isArmstrongTest() {\n        assertTrue(myClass.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(myClass.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(myClass.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(myClass.isArmstrong(9474), \"9474 is an Armstrong number\");\n\n        assertFalse(myClass.isArmstrong(10), \"10 is not an Armstrong number\");\n        assertFalse(myClass.isArmstrong(123), \"123 is not an Armstrong number\");\n        assertFalse(myClass.isArmstrong(9475), \"9475 is not an Armstrong number\");\n    }\n    \n    // Assuming the class name that contains the isArmstrong method is MyClass\n    static class MyClass {\n        public boolean isArmstrong(int number) {\n            long sum = 0;\n            String temp = Integer.toString(number); // Convert the given number to a string\n            int power = temp.length(); // Extract the length of the number (number of digits)\n            long originalNumber = number;\n\n            while (originalNumber > 0) {\n                long digit = originalNumber % 10;\n                sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum\n                originalNumber /= 10;\n            }\n\n            return sum == number;\n        }\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "HillCipher",
        "method_name": "determinant",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    @Test\n    public void determinantTest() {\n        // Test 1: determinant of a 1x1 matrix\n        int[][] matrix1x1 = {{5}};\n        assertEquals(5, HillCipher.determinant(matrix1x1, 1), \"Determinant of a 1x1 matrix should be the element itself.\");\n\n        // Test 2: determinant of a 2x2 matrix\n        int[][] matrix2x2 = {{1, 2}, {3, 4}};\n        assertEquals(-2, HillCipher.determinant(matrix2x2, 2), \"Determinant of a 2x2 matrix should be (ad-bc).\");\n\n        // Test 3: determinant of a 3x3 matrix\n        int[][] matrix3x3 = {{6, 1, 1}, {4, -2, 5}, {2, 8, 7}};\n        assertEquals(-306, HillCipher.determinant(matrix3x3, 3), \"Determinant of a 3x3 matrix should be computed accordingly.\");\n\n        // Test 4: determinant of a singular 2x2 matrix (determinant should be 0)\n        int[][] singularMatrix = {{2, 4}, {1, 2}};\n        assertEquals(0, HillCipher.determinant(singularMatrix, 2), \"Determinant of a singular matrix should be 0.\");\n\n        // Test 5: determinant of a 4x4 matrix\n        int[][] matrix4x4 = {\n            {1, 0, 2, -1},\n            {3, 0, 0, 5},\n            {2, 1, 4, -3},\n            {1, 0, 5, 0}\n        };\n        assertEquals(30, HillCipher.determinant(matrix4x4, 4), \"Determinant of a 4x4 matrix should be computed accordingly.\");\n    }\n}",
        "package_metric": 2.28,
        "class_metric": 18.37,
        "method_metric": 100.0,
        "pitest": 20.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "HillCipher",
        "method_name": "determinant",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        // First test case: 2x2 matrix\n        int[][] matrix2x2 = {{1, 2}, {3, 4}};\n        int det2x2 = HillCipher.determinant(matrix2x2, 2);\n        assertEquals(-2, det2x2, \"Determinant of a 2x2 matrix is incorrect.\");\n\n        // Second test case: 3x3 matrix\n        int[][] matrix3x3 = {{6, 1, 1}, {4, -2, 5}, {2, 8, 7}};\n        int det3x3 = HillCipher.determinant(matrix3x3, 3);\n        assertEquals(-306, det3x3, \"Determinant of a 3x3 matrix is incorrect.\");\n\n        // Third test case: 1x1 matrix\n        int[][] matrix1x1 = {{5}};\n        int det1x1 = HillCipher.determinant(matrix1x1, 1);\n        assertEquals(5, det1x1, \"Determinant of a 1x1 matrix is incorrect.\");\n\n        // Additional test cases could be added here, testing other sizes of matrices,\n        // including edge cases such as zero determinants or very large matrix values.\n    }\n}",
        "package_metric": 2.28,
        "class_metric": 18.37,
        "method_metric": 100.0,
        "pitest": 20.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "HillCipher",
        "method_name": "determinant",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    \n    // Testing the determinant method with different scenarios\n    @Test\n    public void determinantTest() {\n\n        // Case 1: Testing determinant of a 1x1 matrix\n        int[][] matrix1 = {{5}};\n        assertEquals(5, HillCipher.determinant(matrix1, 1), \"Determinant should be 5 for a 1x1 matrix with the only element as 5.\");\n\n        // Case 2: Testing determinant of a 2x2 matrix\n        int[][] matrix2 = {\n                {1, 2},\n                {3, 4}\n        };\n        assertEquals(-2, HillCipher.determinant(matrix2, 2), \"Determinant should be -2 for the given 2x2 matrix.\");\n\n        // Case 3: Testing determinant of a 3x3 matrix\n        int[][] matrix3 = {\n                {6, 1, 1},\n                {4, -2, 5},\n                {2, 8, 7}\n        };\n        assertEquals(-306, HillCipher.determinant(matrix3, 3), \"Determinant should be -306 for the given 3x3 matrix.\");\n\n        // Case 4: Testing determinant of a singular (determinant = 0) 3x3 matrix\n        int[][] matrix4 = {\n                {1, 2, 3},\n                {1, 2, 3},\n                {1, 2, 3}\n        };\n        assertEquals(0, HillCipher.determinant(matrix4, 3), \"Determinant should be 0 for the given singular 3x3 matrix.\");\n\n        // Additional test cases can be written for larger matrices or specific edge cases\n    }\n}",
        "package_metric": 2.28,
        "class_metric": 18.37,
        "method_metric": 100.0,
        "pitest": 20.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "HillCipher",
        "method_name": "determinant",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    @Test\n    public void determinantTest() {\n        // Test 1x1 matrix\n        int[][] matrix1x1 = {{5}};\n        assertEquals(5, HillCipher.determinant(matrix1x1, 1), \"Determinant should be 5 for 1x1 matrix.\");\n\n        // Test 2x2 matrix\n        int[][] matrix2x2 = {\n            {1, 2},\n            {3, 4}\n        };\n        assertEquals(-2, HillCipher.determinant(matrix2x2, 2), \"Determinant should be -2 for 2x2 matrix.\");\n        \n        // Test 3x3 matrix\n        int[][] matrix3x3 = {\n            {6, 1, 1},\n            {4, -2, 5},\n            {2, 8, 7}\n        };\n        assertEquals(-306, HillCipher.determinant(matrix3x3, 3), \"Determinant should be -306 for 3x3 matrix.\");\n    }\n}",
        "package_metric": 2.28,
        "class_metric": 18.37,
        "method_metric": 100.0,
        "pitest": 20.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "HillCipher",
        "method_name": "determinant",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    @Test\n    public void determinantTest() {\n        int[][] matrix1 = {{1}};\n        assertEquals(1, HillCipher.determinant(matrix1, 1), \"Determinant of a 1x1 matrix failed.\");\n\n        int[][] matrix2 = {{3, 8}, {4, 6}};\n        assertEquals(-14, HillCipher.determinant(matrix2, 2), \"Determinant of a 2x2 matrix failed.\");\n\n        int[][] matrix3 = {{6, 1, 1}, {4, -2, 5}, {2, 8, 7}};\n        assertEquals(-306, HillCipher.determinant(matrix3, 3), \"Determinant of a 3x3 matrix failed.\");\n\n        int[][] matrix4 = {{1, 0, 2, -1}, {3, 0, 0, 5}, {2, 1, 4, -3}, {1, 0, 5, 0}};\n        assertEquals(30, HillCipher.determinant(matrix4, 4), \"Determinant of a 4x4 matrix failed.\");\n    }\n}",
        "package_metric": 2.28,
        "class_metric": 18.37,
        "method_metric": 100.0,
        "pitest": 20.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "HillCipher",
        "method_name": "determinant",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        int[][] matrix1 = {{1}};\n        assertEquals(1, HillCipher.determinant(matrix1, 1), \"Determinant of a 1x1 matrix should be the single element\");\n        \n        int[][] matrix2 = {\n            {1, 0},\n            {0, 1}\n        };\n        assertEquals(1, HillCipher.determinant(matrix2, 2), \"Determinant of identity matrix should be 1\");\n        \n        int[][] matrix3 = {\n            {3, 8},\n            {4, 6}\n        };\n        assertEquals(-14, HillCipher.determinant(matrix3, 2), \"Determinant calculation for 2x2 matrix is incorrect\");\n\n        int[][] matrix4 = {\n            {6, 1, 1},\n            {4, -2, 5},\n            {2, 8, 7}\n        };\n        assertEquals(-306, HillCipher.determinant(matrix4, 3), \"Determinant calculation for 3x3 matrix is incorrect\");\n    }\n}",
        "package_metric": 2.28,
        "class_metric": 18.37,
        "method_metric": 100.0,
        "pitest": 20.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "HillCipher",
        "method_name": "determinant",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        // 1x1 matrix\n        int[][] matrix1 = {{5}};\n        assertEquals(5, HillCipher.determinant(matrix1, 1));\n\n        // 2x2 matrix\n        int[][] matrix2 = {{1, 2}, {3, 4}};\n        assertEquals(-2, HillCipher.determinant(matrix2, 2));\n\n        // 3x3 matrix\n        int[][] matrix3 = {{6, 1, 1}, {4, -2, 5}, {2, 8, 7}};\n        assertEquals(-306, HillCipher.determinant(matrix3, 3));\n    }\n}",
        "package_metric": 2.28,
        "class_metric": 18.37,
        "method_metric": 100.0,
        "pitest": 20.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "HillCipher",
        "method_name": "determinant",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        int[][] matrix1 = {{5}};\n        assertEquals(5, HillCipher.determinant(matrix1, 1), \"Determinant of a 1x1 matrix should be the element itself\");\n\n        int[][] matrix2 = {\n            {1, 2},\n            {3, 4}\n        };\n        assertEquals(-2, HillCipher.determinant(matrix2, 2), \"Determinant of a 2x2 matrix should be (ad-bc)\");\n\n        int[][] matrix3 = {\n            {6, 1, 1},\n            {4, -2, 5},\n            {2, 8, 7}\n        };\n        assertEquals(-306, HillCipher.determinant(matrix3, 3), \"Determinant of a 3x3 matrix should be calculated correctly\");\n\n        // You can also add more test cases for larger matrices and edge cases, if necessary\n    }\n}",
        "package_metric": 2.28,
        "class_metric": 18.37,
        "method_metric": 100.0,
        "pitest": 20.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "HillCipher",
        "method_name": "determinant",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        // Test case for a 1x1 matrix.\n        assertEquals(5, HillCipher.determinant(new int[][]{{5}}, 1), \"Determinant of 1x1 matrix should be the single element itself.\");\n\n        // Test case for a 2x2 matrix.\n        assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2), \"Determinant of 2x2 matrix should be (ad - bc).\");\n\n        // Test case for a 3x3 matrix.\n        assertEquals(0, HillCipher.determinant(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), \"Determinant of 3x3 matrix with linearly dependent rows should be 0.\");\n        \n        // Additional test cases can be added to check different sizes or special conditions of matrices.\n    }\n}",
        "package_metric": 2.28,
        "class_metric": 18.37,
        "method_metric": 100.0,
        "pitest": 20.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FFT",
        "method_name": "fft",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport java.util.ArrayList;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FFTTest {\n\n    private static final double DELTA = 1e-8;\n\n    @Test\n    public void fftTest() {\n        // Input signal (real part only)\n        ArrayList<FFT.Complex> inputSignal = new ArrayList<>();\n        inputSignal.add(new FFT.Complex(1.0, 0.0));\n        inputSignal.add(new FFT.Complex(2.0, 0.0));\n        inputSignal.add(new FFT.Complex(3.0, 0.0));\n        inputSignal.add(new FFT.Complex(4.0, 0.0));\n\n        // Expected output FFT coefficients (hardcoded or from known result)\n        ArrayList<FFT.Complex> expectedOutput = new ArrayList<>();\n        expectedOutput.add(new FFT.Complex(10.0, 0.0));\n        expectedOutput.add(new FFT.Complex(-2.0, 2.0));\n        expectedOutput.add(new FFT.Complex(-2.0, 0.0));\n        expectedOutput.add(new FFT.Complex(-2.0, -2.0));\n\n        // Perform FFT on the input signal\n        ArrayList<FFT.Complex> actualOutput = FFT.fft(inputSignal, false);\n\n        // Assert the size of the result array matches the expected size\n        assertEquals(expectedOutput.size(), actualOutput.size(), \"The actual output size should match the expected output size.\");\n\n        // Assert each value of FFT output matches the expected value within a tolerance (DELTA)\n        for (int i = 0; i < expectedOutput.size(); i++) {\n            assertEquals(expectedOutput.get(i).getReal(), actualOutput.get(i).getReal(), DELTA, \"Real part of FFT output should match.\");\n            assertEquals(expectedOutput.get(i).getImaginary(), actualOutput.get(i).getImaginary(), DELTA, \"Imaginary part of FFT output should match.\");\n        }\n\n        // Test the inverse FFT which should return the original input signal.\n        ArrayList<FFT.Complex> recoveredSignal = FFT.fft(actualOutput, true);\n\n        // Assert the size of the recovered signal matches the input size\n        assertEquals(inputSignal.size(), recoveredSignal.size(), \"The size of the recovered signal should match the input signal size.\");\n\n        // Assert each value of the recovered signal matches the original input signal within a tolerance\n        for (int i = 0; i < inputSignal.size(); i++) {\n            assertEquals(inputSignal.get(i).getReal(), recoveredSignal.get(i).getReal(), DELTA, \"Real part of the recovered signal should match the input signal.\");\n            assertEquals(inputSignal.get(i).getImaginary(), recoveredSignal.get(i).getImaginary(), DELTA, \"Imaginary part of the recovered signal should match the input signal.\");\n        }\n    }\n}",
        "package_metric": 4.24,
        "class_metric": 95.56,
        "method_metric": 100.0,
        "pitest": 81.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FFT",
        "method_name": "fft",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\n\npublic class FFTTest {\n\n    @Test\n    public void fftTest() {\n        // Creating a discrete signal in time domain\n        ArrayList<FFT.Complex> signal = new ArrayList<>();\n        signal.add(new FFT.Complex(0, 0));\n        signal.add(new FFT.Complex(1, 0));\n        signal.add(new FFT.Complex(0, 0));\n        signal.add(new FFT.Complex(-1, 0));\n\n        // Apply FFT\n        ArrayList<FFT.Complex> fourierTransform = FFT.fft(signal, false);\n\n        // Expected values after FFT calculation (DFT of the given signal)\n        ArrayList<FFT.Complex> expectedFourier = new ArrayList<>();\n        expectedFourier.add(new FFT.Complex(0, 0));\n        expectedFourier.add(new FFT.Complex(0, -2));\n        expectedFourier.add(new FFT.Complex(0, 0));\n        expectedFourier.add(new FFT.Complex(0, 2));\n        \n        // Compare expected values with actual values\n        // Allow a small error margin\n        double delta = 1e-10;\n        for (int i = 0; i < fourierTransform.size(); i++) {\n            assertEquals(expectedFourier.get(i).getReal(), fourierTransform.get(i).getReal(), delta);\n            assertEquals(expectedFourier.get(i).getImaginary(), fourierTransform.get(i).getImaginary(), delta);\n        }\n\n        // Test inverse FFT\n        ArrayList<FFT.Complex> inverseFFT = FFT.fft(fourierTransform, true);\n\n        // The inverse FFT should give back the original time domain signal\n        // Compare expected signal with actual values (resulted from inverse FFT)\n        for (int i = 0; i < signal.size(); i++) {\n            assertEquals(signal.get(i).getReal(), inverseFFT.get(i).getReal(), delta);\n            assertEquals(signal.get(i).getImaginary(), inverseFFT.get(i).getImaginary(), delta);\n        }\n    }\n}",
        "package_metric": 4.24,
        "class_metric": 95.56,
        "method_metric": 100.0,
        "pitest": 82.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FFT",
        "method_name": "fft",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\n\npublic class FFTTest {\n\n    @Test\n    public void fftTest() {\n        // Initialize an ArrayList with some test values\n        ArrayList<FFT.Complex> signal = new ArrayList<>();\n        signal.add(new FFT.Complex(1, 0));\n        signal.add(new FFT.Complex(1, 0));\n        signal.add(new FFT.Complex(1, 0));\n        signal.add(new FFT.Complex(1, 0));\n        signal.add(new FFT.Complex(0, 0));\n        signal.add(new FFT.Complex(0, 0));\n        signal.add(new FFT.Complex(0, 0));\n        signal.add(new FFT.Complex(0, 0));\n\n        // Expected result after applying FFT\n        ArrayList<FFT.Complex> expected = new ArrayList<>();\n        expected.add(new FFT.Complex(4, 0));\n        expected.add(new FFT.Complex(1, -2.414213562373095));\n        expected.add(new FFT.Complex(0, 0));\n        expected.add(new FFT.Complex(1, -0.4142135623730949));\n        expected.add(new FFT.Complex(0, 0));\n        expected.add(new FFT.Complex(1, 0.4142135623730949));\n        expected.add(new FFT.Complex(0, 0));\n        expected.add(new FFT.Complex(1, 2.414213562373095));\n\n        // Perform the FFT on the test values\n        ArrayList<FFT.Complex> result = FFT.fft(signal, false);\n\n        // Verify the size of the result is equal to the expected size\n        assertEquals(expected.size(), result.size(), \"The result size should match the expected size.\");\n\n        // Verify that each element of the result matches the expected element\n        for (int i = 0; i < result.size(); i++) {\n            FFT.Complex expectedComplex = expected.get(i);\n            FFT.Complex resultComplex = result.get(i);\n            assertEquals(expectedComplex.getReal(), resultComplex.getReal(), 1e-9, \"Real part does not match at index \" + i);\n            assertEquals(expectedComplex.getImaginary(), resultComplex.getImaginary(), 1e-9, \"Imaginary part does not match at index \" + i);\n        }\n    }\n}",
        "package_metric": 3.81,
        "class_metric": 88.89,
        "method_metric": 100.0,
        "pitest": 82.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FFT",
        "method_name": "fft",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\n\npublic class FFTTest {\n    @Test\n    public void fftTest() {\n        // Create an array list of complex numbers for testing\n        ArrayList<FFT.Complex> input = new ArrayList<>();\n        input.add(new FFT.Complex(1, 0));\n        input.add(new FFT.Complex(1, 0));\n        input.add(new FFT.Complex(1, 0));\n        input.add(new FFT.Complex(1, 0));\n        input.add(new FFT.Complex(0, 0));\n        input.add(new FFT.Complex(0, 0));\n        input.add(new FFT.Complex(0, 0));\n        input.add(new FFT.Complex(0, 0));\n\n        // Perform FFT on the input data\n        ArrayList<FFT.Complex> output = FFT.fft(input, false);\n\n        // Validate the size of the output\n        assertEquals(input.size(), output.size(), \"Output size should match input size.\");\n\n        // Expected results for the provided input (based on a DFT calculation)\n        double[][] expected = {\n                {4, 0},\n                {1, -2.414213562373095},\n                {0, 0},\n                {1, -0.4142135623730949},\n                {0, 0},\n                {1, 0.4142135623730949},\n                {0, 0},\n                {1, 2.414213562373095}\n        };\n\n        // Check if the output from FFT matches the expected results\n        for (int i = 0; i < output.size(); i++) {\n            assertEquals(expected[i][0], output.get(i).getReal(), 1e-9, \"Real part doesn't match for index \" + i);\n            assertEquals(expected[i][1], output.get(i).getImaginary(), 1e-9, \"Imaginary part doesn't match for index \" + i);\n        }\n\n        // Perform inverse FFT\n        ArrayList<FFT.Complex> inverseOutput = FFT.fft(output, true);\n\n        // Check if the inverse FFT restores the original input\n        for (int i = 0; i < inverseOutput.size(); i++) {\n            assertEquals(input.get(i).getReal(), inverseOutput.get(i).getReal(), 1e-9, \"Real part doesn't match for inverse FFT at index \" + i);\n            assertEquals(input.get(i).getImaginary(), inverseOutput.get(i).getImaginary(), 1e-9, \"Imaginary part doesn't match for inverse FFT at index \" + i);\n        }\n    }\n}",
        "package_metric": 4.24,
        "class_metric": 95.56,
        "method_metric": 100.0,
        "pitest": 84.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "BinaryTree",
        "method_name": "remove",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n\n    @Test\n    public void removeTest() {\n        BinaryTree bt = new BinaryTree();\n\n        // Insert elements\n        int[] elements = {50, 30, 20, 40, 70, 60, 80};\n        for (int element : elements) {\n            bt.put(element);\n        }\n\n        // Remove leaf node\n        assertTrue(bt.remove(20), \"Should return true when removing existing leaf node.\");\n        assertNull(bt.find(20).left, \"The node with value 20 should no longer exist.\");\n\n        // Remove node with one child\n        assertTrue(bt.remove(30), \"Should return true when removing existing node with one child.\");\n        assertNull(bt.find(40).left, \"The node with value 30 should have been replaced by its right child (40).\");\n\n        // Remove node with two children\n        assertTrue(bt.remove(50), \"Should return true when removing existing node with two children.\");\n        assertEquals(60, bt.getRoot().data, \"The node with value 50 should have been replaced by its successor (60).\");\n\n        // Try to remove a non-existing node\n        assertFalse(bt.remove(100), \"Should return false when trying to remove non-existing node.\");\n    }\n}",
        "package_metric": 4.04,
        "class_metric": 54.63,
        "method_metric": 60.0,
        "pitest": 51.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "BinaryTree",
        "method_name": "remove",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    \n    private BinaryTree binaryTree;\n    \n    @BeforeEach\n    public void setUp() {\n        binaryTree = new BinaryTree();\n    }\n\n    @Test\n    public void removeLeafTest() {\n        // Add elements\n        binaryTree.put(50);\n        binaryTree.put(30);\n        binaryTree.put(20);\n        binaryTree.put(40);\n        binaryTree.put(70);\n        binaryTree.put(60);\n        binaryTree.put(80);\n\n        // Remove leaf\n        assertTrue(binaryTree.remove(20), \"Leaf node should be removed\");\n\n        // Attempt to remove non-existing leaf\n        assertFalse(binaryTree.remove(100), \"Non-existing node removal should return false\");\n    }\n\n    @Test\n    public void removeNodeWithOneChildTest() {\n        // Add elements\n        binaryTree.put(50);\n        binaryTree.put(30);\n        binaryTree.put(20);\n        binaryTree.put(40);\n        binaryTree.put(70);\n        binaryTree.put(60);\n\n        // Remove node with one child (right child)\n        assertTrue(binaryTree.remove(60), \"Node with one child should be removed\");\n\n        // Now remove node with one child (left child)\n        assertTrue(binaryTree.remove(30), \"Node with one child should be removed\");\n    }\n    \n    @Test\n    public void removeNodeWithTwoChildrenTest() {\n        // Add elements\n        binaryTree.put(50);\n        binaryTree.put(30);\n        binaryTree.put(20);\n        binaryTree.put(40);\n        binaryTree.put(70);\n        binaryTree.put(60);\n        binaryTree.put(80);\n\n        // Remove node with two children\n        assertTrue(binaryTree.remove(70), \"Node with two children should be removed\");\n    }\n\n    @Test\n    public void removeRootTest() {\n        // Add elements\n        binaryTree.put(50);\n        binaryTree.put(30);\n        binaryTree.put(70);\n\n        // Remove root\n        assertTrue(binaryTree.remove(50), \"Root should be removed\");\n\n        // Confirm the new root is one of the children (in this case, it should be 70)\n        assertEquals(70, binaryTree.getRoot().data, \"New root should be 70 after removal\");\n    }\n\n    @Test\n    public void removeNonExistentValueTest() {\n        // Add elements\n        binaryTree.put(50);\n        binaryTree.put(30);\n        binaryTree.put(70);\n\n        // Attempt to remove non-existing value\n        assertFalse(binaryTree.remove(10), \"Removing non-existent value should return false\");\n    }\n\n    @AfterEach\n    public void tearDown() {\n        binaryTree = null;\n    }\n}",
        "package_metric": 3.66,
        "class_metric": 49.07,
        "method_metric": 46.67,
        "pitest": 38.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n\n        // Test empty list\n        assertNull(list.middle(), \"Middle of empty list should be null\");\n\n        // Add elements to the list\n        list.insertHead(1);   // List: 1\n        assertEquals(1, list.middle().value, \"Middle of one element list should be itself\");\n\n        list.insertHead(2);   // List: 2 -> 1\n        assertEquals(2, list.middle().value, \"Middle of two elements list should be the first one\");\n\n        list.insertHead(3);   // List: 3 -> 2 -> 1\n        assertEquals(2, list.middle().value, \"Middle of three elements list should be the middle one\");\n\n        list.insertHead(4);   // List: 4 -> 3 -> 2 -> 1\n        assertEquals(3, list.middle().value, \"Middle of four elements list should be the second one\");\n\n        list.insertHead(5);   // List: 5 -> 4 -> 3 -> 2 -> 1\n        assertEquals(3, list.middle().value, \"Middle of five elements list should be the middle one\");\n    }\n}",
        "package_metric": 3.89,
        "class_metric": 14.89,
        "method_metric": 100.0,
        "pitest": 13.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        // Test when list is empty, middle should be null.\n        SinglyLinkedList emptyList = new SinglyLinkedList();\n        assertNull(emptyList.middle());\n\n        // Test when list has only one element, middle should be the head.\n        SinglyLinkedList singleElementList = new SinglyLinkedList();\n        singleElementList.insertHead(1);\n        assertEquals(1, singleElementList.middle().value);\n\n        // Test when list has odd number of elements, middle should be the center element.\n        SinglyLinkedList oddList = new SinglyLinkedList();\n        oddList.insertHead(1);\n        oddList.insertHead(2);\n        oddList.insertHead(3);\n        assertEquals(2, oddList.middle().value);\n\n        // Test when list has even number of elements, middle should be first in the second half.\n        SinglyLinkedList evenList = new SinglyLinkedList();\n        evenList.insertHead(1);\n        evenList.insertHead(2);\n        evenList.insertHead(3);\n        evenList.insertHead(4);\n        assertEquals(3, evenList.middle().value);\n    }\n}",
        "package_metric": 3.89,
        "class_metric": 14.89,
        "method_metric": 100.0,
        "pitest": 13.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        assertNull(list.middle(), \"The middle of an empty list should be null\");\n\n        // list: [1]\n        list.insert(1);\n        assertEquals(1, list.middle().value, \"The middle of a single-element list should be the element itself\");\n\n        // list: [1, 2]\n        list.insert(2);\n        assertEquals(1, list.middle().value, \"The middle of a two-element list should be the first element\");\n\n        // list: [1, 2, 3]\n        list.insert(3);\n        assertEquals(2, list.middle().value, \"The middle of a three-element list should be the second element\");\n\n        // list: [1, 2, 3, 4]\n        list.insert(4);\n        assertEquals(2, list.middle().value, \"The middle of a four-element list should be the second element\");\n\n        // list: [1, 2, 3, 4, 5]\n        list.insert(5);\n        assertEquals(3, list.middle().value, \"The middle of a five-element list should be the third element\");\n    }\n}",
        "package_metric": 4.23,
        "class_metric": 16.49,
        "method_metric": 100.0,
        "pitest": 17.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        assertNull(list.middle(), \"Middle of empty list should be null.\");\n\n        // Adding elements to the list: [1]\n        list.insertHead(1);\n        assertEquals(list.middle().value, 1, \"Middle of [1] should be 1.\");\n\n        // Adding elements to the list: [1, 2]\n        list.insert(2);\n        assertEquals(list.middle().value, 1, \"Middle of [1, 2] should be 1.\");\n\n        // Adding elements to the list: [1, 2, 3]\n        list.insert(3);\n        assertEquals(list.middle().value, 2, \"Middle of [1, 2, 3] should be 2.\");\n\n        // Adding elements to the list: [1, 2, 3, 4]\n        list.insert(4);\n        assertEquals(list.middle().value, 2, \"Middle of [1, 2, 3, 4] should be 2.\");\n\n        // Adding elements to the list: [1, 2, 3, 4, 5]\n        list.insert(5);\n        assertEquals(list.middle().value, 3, \"Middle of [1, 2, 3, 4, 5] should be 3.\");\n    }\n}",
        "package_metric": 4.46,
        "class_metric": 17.55,
        "method_metric": 100.0,
        "pitest": 18.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n\n        // The list is empty, so the middle should be null\n        assertNull(list.middle(), \"Middle of an empty list should be null\");\n\n        // Add one element; the middle is that element itself\n        list.insert(1);\n        assertEquals(1, list.middle().value, \"Middle of a list with one element should be that element\");\n\n        // Add a second element; now the middle should be the first element\n        list.insert(2);\n        assertEquals(1, list.middle().value, \"Middle of a list with two elements should be the first element\");\n\n        // Add a third element; the middle should now be the second element\n        list.insert(3);\n        assertEquals(2, list.middle().value, \"Middle of a list with three elements should be the second element\");\n\n        // Add additional elements and check if middle is correct\n        list.insert(4);\n        assertEquals(2, list.middle().value, \"Middle of a list with four elements should be the second element\");\n        list.insert(5);\n        assertEquals(3, list.middle().value, \"Middle of a list with five elements should be the third element\");\n    }\n}",
        "package_metric": 4.23,
        "class_metric": 16.49,
        "method_metric": 100.0,
        "pitest": 17.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        \n        // Test when list is empty\n        assertNull(list.middle(), \"The middle of an empty list should be null\");\n\n        // Test when list has one element\n        Node singleNode = new Node(1);\n        list.setHead(singleNode);\n        assertEquals(singleNode, list.middle(), \"The middle of a list with one element should be that element\");\n\n        // Test when list has an odd number of elements\n        Node headOdd = new Node(1, new Node(2, new Node(3, new Node(4, new Node(5)))));\n        list.setHead(headOdd);\n        assertEquals(3, list.middle().value, \"The middle of a list with an odd number of elements should be the central element\");\n\n        // Test when list has an even number of elements\n        Node headEven = new Node(1, new Node(2, new Node(3, new Node(4))));\n        list.setHead(headEven);\n        assertEquals(2, list.middle().value, \"The middle of a list with an even number of elements should be the first element of the second half\");\n    }\n}",
        "package_metric": 2.4,
        "class_metric": 7.98,
        "method_metric": 100.0,
        "pitest": 4.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    private SinglyLinkedList list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new SinglyLinkedList();\n    }\n\n    @Test\n    public void middleTest() {\n        // Test the middle method on an empty list\n        assertNull(list.middle(), \"Middle of an empty list should be null.\");\n\n        // Add elements to the list and test the middle again\n        list.insert(1);\n        assertEquals(1, list.middle().value, \"Middle of a list with one element should be the element itself.\");\n\n        list.insert(2);\n        assertEquals(1, list.middle().value, \"Middle of a list with two elements should be the first element.\");\n\n        list.insert(3);\n        assertEquals(2, list.middle().value, \"Middle of a list with three elements should be the second element.\");\n\n        list.insert(4);\n        assertEquals(2, list.middle().value, \"Middle of a list with four elements should be the second element.\");\n\n        list.insert(5);\n        assertEquals(3, list.middle().value, \"Middle of a list with five elements should be the third element.\");\n    }\n}",
        "package_metric": 4.23,
        "class_metric": 16.49,
        "method_metric": 100.0,
        "pitest": 17.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n\n        // Test empty list\n        assertNull(list.middle(), \"Middle of an empty list should be null\");\n\n        // Test single element list\n        list.insert(1);\n        assertEquals(1, list.middle().value, \"Middle of a single element list should be that element\");\n\n        // Test even number of elements\n        list.insert(2);\n        list.insert(3);\n        list.insert(4);\n        assertEquals(2, list.middle().value, \"Middle of an even number of elements should be the first of the two middle elements\");\n\n        // Test odd number of elements\n        list.insert(5);\n        assertEquals(3, list.middle().value, \"Middle of an odd number of elements should be the middle element\");\n    }\n}",
        "package_metric": 4.23,
        "class_metric": 16.49,
        "method_metric": 100.0,
        "pitest": 17.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    private SinglyLinkedList list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new SinglyLinkedList();\n    }\n\n    @Test\n    public void middleTestSingleElementList() {\n        list.insert(1);\n        Node middleNode = list.middle();\n        assertNotNull(middleNode);\n        assertEquals(1, middleNode.value);\n    }\n\n    @Test\n    public void middleTestEvenElementsList() {\n        list.insert(1);\n        list.insert(2);\n        Node middleNode = list.middle();\n        assertNotNull(middleNode);\n        assertEquals(1, middleNode.value);\n    }\n\n    @Test\n    public void middleTestOddElementsList() {\n        list.insert(1);\n        list.insert(2);\n        list.insert(3);\n        Node middleNode = list.middle();\n        assertNotNull(middleNode);\n        assertEquals(2, middleNode.value);\n    }\n\n    @Test\n    public void middleTestEmptyList() {\n        Node middleNode = list.middle();\n        assertNull(middleNode);\n    }\n\n    @AfterEach\n    public void tearDown() {\n        list.clear();\n    }\n}",
        "package_metric": 4.92,
        "class_metric": 19.68,
        "method_metric": 100.0,
        "pitest": 18.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        // Create an empty SinglyLinkedList and verify middle element is null\n        SinglyLinkedList emptyList = new SinglyLinkedList();\n        assertNull(emptyList.middle(), \"Middle of an empty list should be null.\");\n\n        // Create a list with one element and verify the middle is the element itself\n        SinglyLinkedList singleElementList = new SinglyLinkedList();\n        singleElementList.insert(1);\n        assertEquals(1, singleElementList.middle().value, \"Middle of a single-element list should be the element itself.\");\n\n        // Create a list with an even number of elements and verify the middle is correct\n        // Assuming the middle element is the first of the two middle elements in even sized list\n        SinglyLinkedList evenList = new SinglyLinkedList();\n        evenList.insert(1);\n        evenList.insert(2);\n        evenList.insert(3);\n        evenList.insert(4);\n        assertEquals(2, evenList.middle().value, \"Middle of an even-sized list should be the first middle element.\");\n\n        // Create a list with an odd number of elements and verify the middle is correct\n        SinglyLinkedList oddList = new SinglyLinkedList();\n        oddList.insert(1);\n        oddList.insert(2);\n        oddList.insert(3);\n        oddList.insert(4);\n        oddList.insert(5);\n        assertEquals(3, oddList.middle().value, \"Middle of an odd-sized list should be the central element.\");\n    }\n}",
        "package_metric": 4.23,
        "class_metric": 16.49,
        "method_metric": 100.0,
        "pitest": 17.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        // Case 1: Testing an empty list\n        SinglyLinkedList emptyList = new SinglyLinkedList();\n        assertNull(emptyList.middle(), \"Middle of an empty list should be null\");\n\n        // Case 2: Testing a list with one element\n        SinglyLinkedList oneElementList = new SinglyLinkedList();\n        oneElementList.insert(1);\n        assertNotNull(oneElementList.middle(), \"Middle should not be null for a list with one element\");\n        assertEquals(1, oneElementList.middle().value, \"Middle of a list with one element should be that element\");\n\n        // Case 3: Testing a list with an even number of elements\n        SinglyLinkedList evenList = new SinglyLinkedList();\n        evenList.insert(1);\n        evenList.insert(2);\n        evenList.insert(3);\n        evenList.insert(4);\n        assertNotNull(evenList.middle(), \"Middle should not be null for an even-numbered list\");\n        assertEquals(2, evenList.middle().value, \"Middle of a list with four elements should be the second element\");\n\n        // Case 4: Testing a list with an odd number of elements\n        SinglyLinkedList oddList = new SinglyLinkedList();\n        oddList.insert(1);\n        oddList.insert(2);\n        oddList.insert(3);\n        oddList.insert(4);\n        oddList.insert(5);\n        assertNotNull(oddList.middle(), \"Middle should not be null for an odd-numbered list\");\n        assertEquals(3, oddList.middle().value, \"Middle of a list with five elements should be the third element\");\n    }\n}",
        "package_metric": 4.23,
        "class_metric": 16.49,
        "method_metric": 100.0,
        "pitest": 17.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        SinglyLinkedList emptyList = new SinglyLinkedList();\n        assertNull(emptyList.middle(), \"Middle of empty list should be null\");\n\n        SinglyLinkedList singleItemList = new SinglyLinkedList(new Node(1), 1);\n        assertEquals(1, singleItemList.middle().value, \"Middle of single-item list should be the item itself\");\n\n        SinglyLinkedList evenItemList = new SinglyLinkedList();\n        evenItemList.insert(1);\n        evenItemList.insert(2);\n        evenItemList.insert(3);\n        evenItemList.insert(4);\n        assertEquals(2, evenItemList.middle().value, \"Middle of even item list should be the first middle element\");\n\n        SinglyLinkedList oddItemList = new SinglyLinkedList();\n        oddItemList.insert(1);\n        oddItemList.insert(2);\n        oddItemList.insert(3);\n        oddItemList.insert(4);\n        oddItemList.insert(5);\n        assertEquals(3, oddItemList.middle().value, \"Middle of odd item list should be the central element\");\n    }\n}",
        "package_metric": 4.69,
        "class_metric": 18.62,
        "method_metric": 100.0,
        "pitest": 17.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        \n        // Test with an empty list\n        assertNull(list.middle(), \"Middle of an empty list should be null.\");\n        \n        // Test with a single element list\n        list.insert(1);\n        assertEquals(1, list.middle().value, \"Middle of a single element list should be the element itself.\");\n        \n        // Test with an even number list\n        list.insert(2);\n        list.insert(3);\n        list.insert(4);\n        assertEquals(2, list.middle().value, \"Middle of a list with even number of elements should be the first middle element.\");\n        \n        // Test with an odd number list\n        list.insert(5);\n        assertEquals(3, list.middle().value, \"Middle of a list with odd number of elements should be the central element.\");\n    }\n}",
        "package_metric": 4.23,
        "class_metric": 16.49,
        "method_metric": 100.0,
        "pitest": 17.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n\n        // Test with empty list\n        assertNull(list.middle(), \"Middle of an empty list should be null\");\n\n        // Add elements to the list\n        list.insert(1);\n        assertEquals(1, list.middle().value, \"Middle of a single-element list should be the element itself\");\n\n        list.insert(2);\n        assertEquals(1, list.middle().value, \"Middle of two elements should be the first element\");\n\n        list.insert(3);\n        assertEquals(2, list.middle().value, \"Middle of three elements should be the second element\");\n\n        list.insert(4);\n        assertEquals(2, list.middle().value, \"Middle of four elements should still be the second element\");\n\n        list.insert(5);\n        assertEquals(3, list.middle().value, \"Middle of five elements should be the third element\");\n    }\n}",
        "package_metric": 4.23,
        "class_metric": 16.49,
        "method_metric": 100.0,
        "pitest": 17.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n\n        assertNull(list.middle(), \"Middle of empty list should be null.\");\n\n        list.insert(1);  // List is 1\n        assertEquals(1, list.middle().value, \"Middle of single-element list should be the element itself.\");\n\n        list.insert(2);  // List is 1 -> 2\n        assertEquals(1, list.middle().value, \"Middle of two-element list should be the first element.\");\n\n        list.insert(3);  // List is 1 -> 2 -> 3\n        assertEquals(2, list.middle().value, \"Middle of three-element list should be the second element.\");\n\n        list.insert(4);  // List is 1 -> 2 -> 3 -> 4\n        assertEquals(2, list.middle().value, \"Middle of four-element list should be the second element.\");\n        \n        list.insert(5);  // List is 1 -> 2 -> 3 -> 4 -> 5\n        assertEquals(3, list.middle().value, \"Middle of five-element list should be the third element.\");\n    }\n}",
        "package_metric": 4.23,
        "class_metric": 16.49,
        "method_metric": 100.0,
        "pitest": 17.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n\n        // Test case when list is empty\n        assertNull(list.middle(), \"Middle of empty list should be null\");\n        \n        // Test case when list has one element\n        list.add(new Node(1));\n        assertEquals(1, list.middle().data, \"Middle of a list with one element should be the element itself\");\n        \n        // Test case when list has odd number of elements (3 elements)\n        list.add(new Node(2));\n        list.add(new Node(3));\n        assertEquals(2, list.middle().data, \"Middle of a list with odd number of elements should be the middle element\");\n        \n        // Test case when list has even number of elements (4 elements)\n        list.add(new Node(4));\n        assertEquals(2, list.middle().data, \"Middle of a list with even number of elements should be the first middle element\");\n    }\n\n    private class SinglyLinkedList {\n        private Node head;\n\n        public void add(Node node) {\n            if (head == null) {\n                head = node;\n            } else {\n                Node current = head;\n                while (current.next != null) {\n                    current = current.next;\n                }\n                current.next = node;\n            }\n        }\n\n        public Node middle() {\n            if (head == null) {\n                return null;\n            }\n            Node firstCounter = head;\n            Node secondCounter = firstCounter.next;\n            while (secondCounter != null && secondCounter.next != null) {\n                firstCounter = firstCounter.next;\n                secondCounter = secondCounter.next.next;\n            }\n            return firstCounter;\n        }\n    }\n\n    private class Node {\n        int data;\n        Node next;\n\n        public Node(int data) {\n            this.data = data;\n            this.next = null;\n        }\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        \n        // Case 1: Empty List should return null on middle\n        assertNull(list.middle(), \"Empty list should have no middle.\");\n        \n        // Case 2: List with one node should return the head as middle\n        list.insert(new Node(1));\n        assertEquals(1, list.middle().data, \"Middle of single-element list should be itself.\");\n        \n        // Case 3: List with even number of nodes should return the first middle node\n        list.insert(new Node(2));\n        assertEquals(1, list.middle().data, \"Middle of two-element list should be first element.\");\n        \n        // Case 4: List with odd number of nodes should return the true middle\n        list.insert(new Node(3));\n        assertEquals(2, list.middle().data, \"Middle of three-element list should be second element.\");\n        \n        // Add more cases as necessary\n        list.insert(new Node(4));\n        assertEquals(2, list.middle().data, \"Middle of four-element list should be second element.\");\n        list.insert(new Node(5));\n        assertEquals(3, list.middle().data, \"Middle of five-element list should be third element.\");\n    }\n\n    // Assuming a Node class as part of the SinglyLinkedList structure.\n    private class Node {\n        int data;\n        Node next;\n        \n        Node(int data) {\n            this.data = data;\n            next = null;\n        }\n    }\n\n    // Assuming a SinglyLinkedList class with necessary insert and middle methods.\n    private class SinglyLinkedList {\n        Node head;\n\n        public void insert(Node newNode) {\n            if (head == null) {\n                head = newNode;\n            } else {\n                Node temp = head;\n                while (temp.next != null) {\n                    temp = temp.next;\n                }\n                temp.next = newNode;\n            }\n        }\n\n        // The `middle` method provided in the prompt.\n        public Node middle() {\n            if (head == null) {\n                return null;\n            }\n            Node firstCounter = head;\n            Node secondCounter = firstCounter.next;\n            while (secondCounter != null && secondCounter.next != null) {\n                firstCounter = firstCounter.next;\n                secondCounter = secondCounter.next.next;\n            }\n            return firstCounter;\n        }\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "class Node {\n    int data;\n    Node next;\n\n    Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\nclass SinglyLinkedList {\n    Node head;\n\n    public SinglyLinkedList() {\n        this.head = null;\n    }\n\n    public void add(int data) {\n        Node newNode = new Node(data);\n        if (head == null) {\n            head = newNode;\n        } else {\n            Node current = head;\n            while (current.next != null) {\n                current = current.next;\n            }\n            current.next = newNode;\n        }\n    }\n\n    public Node middle() {\n        if (head == null) {\n            return null;\n        }\n        Node firstCounter = head;\n        Node secondCounter = firstCounter.next;\n        while (secondCounter != null && secondCounter.next != null) {\n            firstCounter = firstCounter.next;\n            secondCounter = secondCounter.next.next;\n        }\n        return firstCounter;\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n\n        // Test case where the list is empty\n        assertNull(list.middle(), \"Middle of empty list should be null\");\n\n        // Add elements to the list and test for single element\n        list.addLast(new Node(1));\n        assertEquals(1, list.middle().value, \"Middle of a single element list should be the element itself\");\n\n        // Add a second element and test for two elements\n        list.addLast(new Node(2));\n        assertEquals(1, list.middle().value, \"Middle of two elements should be the first element\");\n\n        // Add third element and test for odd number of elements\n        list.addLast(new Node(3));\n        assertEquals(2, list.middle().value, \"Middle of three elements should be the second element\");\n\n        // Continue to add elements and test\n        list.addLast(new Node(4));\n        assertEquals(2, list.middle().value, \"Middle of four elements should be the second element\");\n\n        list.addLast(new Node(5));\n        assertEquals(3, list.middle().value, \"Middle of five elements should be the third element\");\n    }\n\n    // Inner class Node and SinglyLinkedList for the sake of the example, real classes would be separate\n    class Node {\n        int value;\n        Node next;\n\n        public Node(int value) {\n            this.value = value;\n            this.next = null;\n        }\n    }\n\n    class SinglyLinkedList {\n        Node head;\n\n        void addLast(Node node) {\n            if (head == null) {\n                head = node;\n            } else {\n                Node current = head;\n                while (current.next != null) {\n                    current = current.next;\n                }\n                current.next = node;\n            }\n        }\n\n        Node middle() {\n            // assuming this is the method you've provided\n            if (head == null) {\n                return null;\n            }\n            Node firstCounter = head;\n            Node secondCounter = firstCounter.next;\n            while (secondCounter != null && secondCounter.next != null) {\n                firstCounter = firstCounter.next;\n                secondCounter = secondCounter.next.next;\n            }\n            return firstCounter;\n        }\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    private SinglyLinkedList list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new SinglyLinkedList();\n    }\n\n    @Test\n    public void middleTest_emptyList() {\n        assertNull(list.middle(), \"The middle element of an empty list should be null.\");\n    }\n\n    @Test\n    public void middleTest_oddElements() {\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        list.add(5);\n\n        Node middle = list.middle();\n        assertNotNull(middle, \"The middle element should not be null.\");\n        assertEquals(3, middle.data, \"The middle element of a list with an odd number of elements should be 3.\");\n    }\n\n    @Test\n    public void middleTest_evenElements() {\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n\n        Node middle = list.middle();\n        assertNotNull(middle, \"The middle element should not be null.\");\n        assertEquals(2, middle.data, \"The middle element of a list with an even number of elements should be 2.\");\n    }\n\n    // Assuming there is an add() method to add elements to the linked list\n    private class Node {\n        int data;\n        Node next;\n\n        Node(int data) {\n            this.data = data;\n            this.next = null;\n        }\n    }\n\n    private class SinglyLinkedList {\n        Node head;\n\n        public void add(int data) {\n            Node newNode = new Node(data);\n            if (head == null) {\n                head = newNode;\n            } else {\n                Node current = head;\n                while (current.next != null) {\n                    current = current.next;\n                }\n                current.next = newNode;\n            }\n        }\n\n        public Node middle() {\n            if (head == null) {\n                return null;\n            }\n            Node firstCounter = head;\n            Node secondCounter = firstCounter.next;\n            while (secondCounter != null && secondCounter.next != null) {\n                firstCounter = firstCounter.next;\n                secondCounter = secondCounter.next.next;\n            }\n            return firstCounter;\n        }\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "SegmentTree",
        "method_name": "getSumTree",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n    private SegmentTree segmentTree;\n    private static final int SIZE = 6;\n    private static final int[] INPUT_ARRAY = {1, 3, 5, 7, 9, 11};\n\n    @BeforeEach\n    void setup() {\n        // Initialize Segment Tree with predefined array\n        segmentTree = new SegmentTree(SIZE, INPUT_ARRAY);\n    }\n\n    @Test\n    public void getSumTreeTest() {\n        // Test for sum of the full array\n        assertEquals(1 + 3 + 5 + 7 + 9 + 11, segmentTree.getSum(0, 5),\n            \"The sum of the full array should be equal to the sum of its elements.\");\n\n        // Test for sum of the first half of the array\n        assertEquals(1 + 3 + 5, segmentTree.getSum(0, 2),\n            \"The sum of the first half of the array should be equal to the sum of its first three elements.\");\n\n        // Test for sum of the second half of the array\n        assertEquals(7 + 9 + 11, segmentTree.getSum(3, 5),\n            \"The sum of the second half of the array should be equal to the sum of its last three elements.\");\n\n        // Test for sum of a single element\n        assertEquals(5, segmentTree.getSum(2, 2),\n            \"The sum of one element should be equal to the element itself.\");\n\n        // Test for sum of a non-existent subarray\n        assertEquals(0, segmentTree.getSum(1, -1),\n            \"The sum of a non-existent subarray should be zero.\");\n\n        // Test for sum with start index greater than the end index\n        assertEquals(0, segmentTree.getSum(4, 2),\n            \"The sum should be zero if the start index is greater than the end index.\");\n\n        // Test for sum with indexes outside of the array bounds\n        assertEquals(0, segmentTree.getSum(-1, SIZE),\n            \"The sum should be zero if the indexes are outside of the array bounds.\");\n        \n        // Update an element and test for sum again\n        segmentTree.update(2, 10); // Now the array should be {1, 3, 10, 7, 9, 11}\n        assertEquals(1 + 3 + 10 + 7 + 9 + 11, segmentTree.getSum(0, 5),\n            \"The sum of the full array should reflect the updated value.\");\n    }\n}",
        "package_metric": 2.3,
        "class_metric": 97.37,
        "method_metric": 100.0,
        "pitest": 98.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "SegmentTree",
        "method_name": "getSumTree",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n    @Test\n    public void getSumTreeTest() {\n        int[] arr = {1, 3, 5, 7, 9, 11};\n        int n = arr.length;\n        SegmentTree segmentTree = new SegmentTree(n, arr);\n        \n        // Test case: sum of the entire array\n        int totalSum = segmentTree.getSum(0, n - 1);\n        assertEquals(36, totalSum); // 1 + 3 + 5 + 7 + 9 + 11 = 36\n        \n        // Test case: sum of the first three elements\n        int sumFirstThree = segmentTree.getSum(0, 2);\n        assertEquals(9, sumFirstThree); // 1 + 3 + 5 = 9\n\n        // Test case: sum of the elements from index 1 to 4\n        int sumFromOneToFour = segmentTree.getSum(1, 4);\n        assertEquals(24, sumFromOneToFour); // 3 + 5 + 7 + 9 = 24\n\n        // Test case: sum of the last two elements\n        int sumLastTwo = segmentTree.getSum(n - 2, n - 1);\n        assertEquals(20, sumLastTwo); // 9 + 11 = 20\n\n        // Update the tree and test\n        segmentTree.update(2, 10); // Update element at index 2 to be 10\n\n        // New expected sum of the first three elements after the update\n        int updatedSumFirstThree = segmentTree.getSum(0, 2);\n        assertEquals(14, updatedSumFirstThree); // 1 + 3 + 10 = 14\n\n        // New expected sum of the entire array after the update\n        int updatedTotalSum = segmentTree.getSum(0, n - 1);\n        assertEquals(41, updatedTotalSum); // 1 + 3 + 10 + 7 + 9 + 11 = 41\n    }\n}",
        "package_metric": 2.24,
        "class_metric": 94.74,
        "method_metric": 100.0,
        "pitest": 82.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "SegmentTree",
        "method_name": "getSumTree",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n\n    private SegmentTree segmentTree;\n\n    @BeforeEach\n    public void setUp() {\n        // Initialize segment tree with example values\n        int[] arr = {1, 3, 5, 7, 9, 11};\n        int n = arr.length;\n        segmentTree = new SegmentTree(n, arr);\n    }\n\n    @Test\n    public void getSumTreeTest_ValidRange_ReturnsCorrectSum() {\n        int startRange = 1;\n        int endRange = 3;\n        int expectedSum = 3 + 5 + 7; // Sum of elements from index 1 to 3 in the array [1, 3, 5, 7, 9, 11]\n\n        assertEquals(expectedSum, segmentTree.getSum(startRange, endRange), \"The sum calculated by getSum does not match the expected sum.\");\n    }\n\n    @Test\n    public void getSumTreeTest_SingleElementRange_ReturnsElementValue() {\n        int index = 4;\n        int expectedValue = 9; // The value at index 4 in the array [1, 3, 5, 7, 9, 11]\n\n        assertEquals(expectedValue, segmentTree.getSum(index, index), \"The sum for a single element range should be the element itself.\");\n    }\n\n    @Test\n    public void getSumTreeTest_InvalidRange_ReturnsZero() {\n        int invalidStart = 5;\n        int invalidEnd = 3;\n\n        assertEquals(0, segmentTree.getSum(invalidStart, invalidEnd), \"The sum for an invalid range should be zero.\");\n    }\n\n    @Test\n    public void getSumTreeTest_OutOfBoundsRange_ReturnsZero() {\n        int outOfBoundsStart = -1;\n        int outOfBoundsEnd = 10;\n\n        assertEquals(0, segmentTree.getSum(outOfBoundsStart, outOfBoundsEnd), \"The sum for an out-of-bounds range should be zero.\");\n    }\n}",
        "package_metric": 1.49,
        "class_metric": 63.16,
        "method_metric": 100.0,
        "pitest": 56.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "SegmentTree",
        "method_name": "getSumTree",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n    private SegmentTree segmentTree;\n\n    @BeforeEach\n    public void setUp() {\n        int[] arr = {1, 3, 5, 7, 9, 11};\n        int n = arr.length;\n        segmentTree = new SegmentTree(n, arr);\n    }\n\n    @Test\n    public void getSumTreeTest() {\n        // Testing the sum from index 0 to 5 (entire array)\n        assertEquals(36, segmentTree.getSum(0, 5), \"Sum of the entire array should be 36.\");\n\n        // Testing the sum from index 1 to 3\n        assertEquals(15, segmentTree.getSum(1, 3), \"Sum of elements from index 1 to 3 should be 15.\");\n\n        // Testing the sum for a single element at index 2\n        assertEquals(5, segmentTree.getSum(2, 2),\"Sum for a single element at index 2 should be 5.\");\n\n        // Testing the sum from index 4 to 5\n        assertEquals(20, segmentTree.getSum(4, 5), \"Sum of elements from index 4 to 5 should be 20.\");\n\n        // Testing the sum with invalid range (start > end)\n        assertEquals(0, segmentTree.getSum(3, 2), \"Sum should be 0 when start index is greater than end index.\");\n\n        // Testing the sum with index out of range\n        assertEquals(0, segmentTree.getSum(-1, 6), \"Sum should be 0 when indices are out of bounds.\");\n    }\n    \n    // This test could be added to evaluate the update functionality as well\n    @Test\n    public void updateAndQuerySumTest() {\n        segmentTree.update(2, 10); // Updating array[2] from 5 to 10\n        assertEquals(41, segmentTree.getSum(0, 5), \"After updating, sum of the entire array should be 41.\");\n        assertEquals(20, segmentTree.getSum(1, 3), \"After updating, sum of elements from index 1 to 3 should be 20.\");\n    }\n}",
        "package_metric": 2.3,
        "class_metric": 97.37,
        "method_metric": 100.0,
        "pitest": 89.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "SegmentTree",
        "method_name": "getSumTree",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n    private SegmentTree segmentTree;\n\n    @BeforeEach\n    public void setUp() {\n        int[] arr = {1, 3, 5, 7, 9, 11};\n        int n = arr.length;\n        segmentTree = new SegmentTree(n, arr);\n        segmentTree.constructTree(arr, 0, n - 1, 0);\n    }\n\n    @Test\n    public void getSumTreeTest() {\n        // Test sum from index 1 to 3 which should be 3 + 5 + 7 = 15\n        int sum1 = segmentTree.getSum(1, 3);\n        assertEquals(15, sum1);\n\n        // Test sum from index 0 to 2 which should be 1 + 3 + 5 = 9\n        int sum2 = segmentTree.getSum(0, 2);\n        assertEquals(9, sum2);\n\n        // Test sum from index 4 to 5 which should be 9 + 11 = 20\n        int sum3 = segmentTree.getSum(4, 5);\n        assertEquals(20, sum3);\n\n        // Test sum for the whole array which should be 1 + 3 + 5 + 7 + 9 + 11 = 36\n        int sum4 = segmentTree.getSum(0, 5);\n        assertEquals(36, sum4);\n    }\n}",
        "package_metric": 1.43,
        "class_metric": 60.53,
        "method_metric": 100.0,
        "pitest": 61.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "SegmentTree",
        "method_name": "getSumTree",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n    @Test\n    public void getSumTreeTest() {\n        // Assuming constructor and constructTree are public for testing purposes\n        int[] inputArr = {1, 3, 5, 7, 9, 11};\n        int n = inputArr.length;\n        \n        // Initialize SegmentTree with the array\n        SegmentTree segmentTree = new SegmentTree(n, inputArr);\n        \n        // Construct the segment tree with the initial array values\n        // Assuming index starts with 0 i.e., root of the segment tree\n        segmentTree.constructTree(inputArr, 0, n - 1, 0);\n        \n        // Test getting sum of a range\n        \n        // Check the sum from index 1 to 3 (3 + 5 + 7)\n        int sum1 = segmentTree.getSum(1, 3);\n        assertEquals(15, sum1, \"Sum should be 15 for range 1-3\");\n    \n        // Check the sum from index 2 to 5 (5 + 7 + 9 + 11)\n        int sum2 = segmentTree.getSum(2, 5);\n        assertEquals(32, sum2, \"Sum should be 32 for range 2-5\");\n        \n        // Test for the entire range (1 + 3 + 5 + 7 + 9 + 11)\n        int sum3 = segmentTree.getSum(0, n - 1);\n        assertEquals(36, sum3, \"Sum should be 36 for the entire range\");\n        \n        // Test for a single element range\n        int sum4 = segmentTree.getSum(3, 3);\n        assertEquals(7, sum4, \"Sum should be 7 for range 3-3\");\n        \n        // Test for an invalid range (should return 0)\n        int sum5 = segmentTree.getSum(6, 7);\n        assertEquals(0, sum5, \"Sum should be 0 for an invalid range\");\n    }\n}",
        "package_metric": 1.49,
        "class_metric": 63.16,
        "method_metric": 100.0,
        "pitest": 62.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "SegmentTree",
        "method_name": "getSumTree",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n\n    private SegmentTree segmentTree;\n    private final int[] testData = {1, 2, 3, 4, 5};\n    private final int n = testData.length;\n\n    @BeforeEach\n    public void setUp() {\n        segmentTree = new SegmentTree(n, testData);\n        segmentTree.constructTree(testData, 0, n - 1, 0);\n    }\n\n    @Test\n    public void getSumTreeTest() {\n        // Test for the entire range\n        assertEquals(15, segmentTree.getSum(0, n - 1),\n                \"Sum should be equal to the sum of the whole array\");\n\n        // Test for a sub-range\n        assertEquals(5, segmentTree.getSum(1, 2),\n                \"Sum of elements from index 1 to 2 should be 5\");\n\n        // Test for a single element\n        assertEquals(3, segmentTree.getSum(2, 2),\n                \"Sum of a single element at index 2 should be 3\");\n\n        // Test for no overlap condition\n        assertEquals(0, segmentTree.getSum(0, -1),\n                \"Sum for the range outside the array bounds should be 0\");\n        assertEquals(0, segmentTree.getSum(n, n+1),\n                \"Sum for the range outside the array bounds should be 0\");\n\n        // Test for partial overlap\n        assertEquals(12, segmentTree.getSum(2, 4),\n                \"Sum for the range with partial overlap should be correct\");\n    }\n}",
        "package_metric": 1.49,
        "class_metric": 63.16,
        "method_metric": 100.0,
        "pitest": 59.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AliquotSum",
        "method_name": "getAliquotSum",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        // Test for a negative number, should return -1\n        assertEquals(-1, AliquotSum.getAliquotSum(-10), \"Aliquot sum of negative number should be -1.\");\n\n        // Test for zero, should return -1\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"Aliquot sum of 0 should be -1.\");\n\n        // Test for a prime number, should return 1 since the only proper divisor of a prime number is 1\n        assertEquals(1, AliquotSum.getAliquotSum(13), \"Aliquot sum of a prime number should be 1.\");\n\n        // Test for a composite number, should return the sum of its proper divisors\n        assertEquals(1 + 2 + 3 + 4 + 6, AliquotSum.getAliquotSum(12), \"Aliquot sum of 12 should be 16.\");\n\n        // Test for a perfect square, should return the sum of its proper divisors minus its square root\n        assertEquals(1 + 2 + 4 + 7 + 14, AliquotSum.getAliquotSum(28), \"Aliquot sum of 28 should be 28.\");\n\n        // Test for another composite number\n        assertEquals(1 + 3 + 5, AliquotSum.getAliquotSum(15), \"Aliquot sum of 15 should be 9.\");\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 66.67,
        "method_metric": 100.0,
        "pitest": 52.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AliquotSum",
        "method_name": "getAliquotSum",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(-1, AliquotSum.getAliquotSum(-10), \"Test failed for negative number\");\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"Test failed for zero\");\n        assertEquals(0, AliquotSum.getAliquotSum(1), \"Test failed for one which has no proper divisors\");\n        assertEquals(1, AliquotSum.getAliquotSum(2), \"'2' should have an aliquot sum of 1 (only proper divisor is 1)\");\n        assertEquals(3, AliquotSum.getAliquotSum(4), \"'4' should have an aliquot sum of 3 (proper divisors are 1 and 2)\");\n        assertEquals(1 + 2 + 3, AliquotSum.getAliquotSum(6), \"'6' should have an aliquot sum of 6 (proper divisors are 1, 2, 3)\");\n        assertEquals(1 + 3 + 5, AliquotSum.getAliquotSum(15), \"'15' should have an aliquot sum of 9 (proper divisors are 1, 3, 5)\");\n        assertEquals(1 + 2 + 4 + 7 + 14, AliquotSum.getAliquotSum(28), \"'28' should have an aliquot sum of 28 (proper divisors are 1, 2, 4, 7, 14)\");\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 66.67,
        "method_metric": 100.0,
        "pitest": 61.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "encode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        // Prepare the input message and the cipher\n        String message = \"Hello, World!\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\"; // example of a shifted cipher, \"a\" -> \"b\", \"b\" -> \"c\", etc.\n        \n        // Prepare the expected outcome\n        // Given the sample cipher above, \"H\" -> \"I\" and so on, except non-alphabetic characters which remain the same\n        String expectedEncoded = \"Ifmmp, Xpsme!\";\n        \n        // Perform the encoding operation using the SimpleSubstitutionCipher class's encode method\n        String actualEncoded = SimpleSubstitutionCipher.encode(message, cipherSmall);\n        \n        // Assert the expected encoded string is the same as the actual encoded string\n        assertEquals(expectedEncoded, actualEncoded, \"The encoded message does not match the expected output.\");\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "encode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        String originalMessage = \"Hello World!\";\n        String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n        String expectedEncodedMessage = \"Svool Dliow!\";\n        \n        String actualEncodedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "encode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    // Test method for the encode functionality\n    @Test\n    public void encodeTest() {\n        String message = \"Hello World\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\"; // a simple substitution where a->b, b->c, ..., z->a\n        String expectedEncodedMessage = \"Ifmmp Xpsme\";\n        String actualEncodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage, \"The encoding did not match the expected output.\");\n    }\n\n    // Optionally, you can also add a test case for the decode functionality here\n    @Test\n    public void decodeTest() {\n        String encodedMessage = \"Ifmmp Xpsme\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\"; // a simple substitution where a->b, b->c, ..., z->a\n        String expectedDecodedMessage = \"Hello World\";\n        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encodedMessage, cipherSmall);\n        assertEquals(expectedDecodedMessage, actualDecodedMessage, \"The decoding did not match the expected output.\");\n    }\n}",
        "package_metric": 3.55,
        "class_metric": 96.55,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "encode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        // Given a cipher for substitution and a message to encode\n        String cipher = \"bcdefghijklmnopqrstuvwxyza\";\n        String message = \"Hello World!\";\n        String expectedEncodedMessage = \"Ifmmp Xpsme!\";\n\n        // When the static encode method is called from SimpleSubstitutionCipher\n        String actualEncodedMessage = SimpleSubstitutionCipher.encode(message, cipher);\n\n        // Then the encoded message should match the expected output\n        assertEquals(expectedEncodedMessage, actualEncodedMessage,\n            \"The encoded message did not match the expected output.\");\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "encode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String message = \"Hello, World!\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n\n        String expectedEncodedResult = \"Ifmmp, Xpsme!\";\n        String actualEncodedResult = SimpleSubstitutionCipher.encode(message, cipherSmall);\n\n        assertEquals(expectedEncodedResult, actualEncodedResult, \"The encoded message does not match the expected result.\");\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "encode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        String message = \"Hello, World!\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        \n        // Assuming the cipher shifts each letter to the next in the alphabet\n        String expected = \"Ifmmp, Xpsme!\";\n        String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n        \n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "encode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        // Given\n        String originalMessage = \"The quick brown fox jumps over the lazy dog\";\n        String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n        String expectedEncodedMessage = \"Gsv jfrxp yildm ulc qfnkh levi gsv ozab wlt\";\n\n        // When\n        String actualEncodedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);\n\n        // Then\n        assertEquals(expectedEncodedMessage, actualEncodedMessage, \"The encoded message should match the expected result.\");\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "encode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        String originalMessage = \"Hello World!\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        String encodedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);\n\n        // Expected encoded result based on the provided substitution cipher\n        String expectedResult = \"Ifmmp Xpsme!\";\n        assertEquals(expectedResult, encodedMessage, \"The encoded message does not match the expected result.\");\n    }\n\n    // You could potentially add more test cases here\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "encode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        final String message = \"Hello, World!\";\n        final String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n        final String expected = \"Svool, Dliow!\";\n\n        String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "encode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        // Example test case with a simple cipher mapping (a->b, b->c, ... z->a)\n        String message = \"The quick brown fox jumps over the lazy dog!\";\n        String cipher = \"bcdefghijklmnopqrstuvwxyza\";\n        \n        // Expected result using the above example cipher mapping\n        String expectedEncodedMessage = \"Uif rvjdl cspxo gpy kvnqt pwfs uif mbaz eph!\";\n        \n        // Testing the encode method\n        String actualEncodedMessage = SimpleSubstitutionCipher.encode(message, cipher);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage, \"Encoded message should match the expected result\");\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "encode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        // Arrange\n        String message = \"Hello, World!\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        \n        // Expected output is based on the given cipher where 'a' -> 'b', 'b' -> 'c', etc.\n        String expected = \"Ifmmp, Xpsme!\";\n        \n        // Act\n        String encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);\n        \n        // Assert\n        assertEquals(expected, encodedMessage, \"The encoded message should match the expected output.\");\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "encode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        // Arrange\n        String message = \"Hello World!\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        String expectedEncodedMessage = \"Ifmmp Xpsme!\";\n\n        // Act\n        String encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);\n\n        // Assert\n        assertEquals(expectedEncodedMessage, encodedMessage, \"Encoded message should match the expected result.\");\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "encode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        // Test cases\n        assertEquals(SimpleSubstitutionCipher.encode(\"hello\",\"bcdefghijklmnopqrstuvwxyza\"), \"ifmmp\");\n        assertEquals(SimpleSubstitutionCipher.encode(\"HELLO\",\"bcdefghijklmnopqrstuvwxyza\"), \"IFMMP\");\n        assertEquals(SimpleSubstitutionCipher.encode(\"hello world\",\"bcdefghijklmnopqrstuvwxyza\"), \"ifmmp xpsme\");\n        assertEquals(SimpleSubstitutionCipher.encode(\"HELLO WORLD\",\"bcdefghijklmnopqrstuvwxyza\"), \"IFMMP XPSME\");\n        assertEquals(SimpleSubstitutionCipher.encode(\"123\",\"bcdefghijklmnopqrstuvwxyza\"), \"123\");\n        assertEquals(SimpleSubstitutionCipher.encode(\"Hello, World!\",\"bcdefghijklmnopqrstuvwxyza\"), \"Ifmmp, Xpsme!\");\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "encode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    private static final String SAMPLE_CIPHER = \"bcdefghijklmnopqrstuvwxyza\";\n\n    @Test\n    public void encodeTest() {\n        // Testing with a lowercase message\n        String message = \"hello\";\n        String expectedEncodedMessage = \"ifmmp\";\n        String actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n\n        // Testing with an uppercase message\n        message = \"HELLO\";\n        expectedEncodedMessage = \"IFMMP\";\n        actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n\n        // Testing with a mixed case message\n        message = \"Hello World\";\n        expectedEncodedMessage = \"Ifmmp Xpsme\";\n        actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n\n        // Testing with non-alphabetic characters\n        message = \"hello123\";\n        expectedEncodedMessage = \"ifmmp123\";\n        actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n\n        // Testing with an empty string\n        message = \"\";\n        expectedEncodedMessage = \"\";\n        actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n\n        // Testing with a full alphabet\n        message = \"abcdefghijklmnopqrstuvwxyz\";\n        expectedEncodedMessage = \"bcdefghijklmnopqrstuvwxyza\";\n        actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n\n        // Testing with full Capital alphabet\n        message = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        expectedEncodedMessage = \"BCDEFGHIJKLMNOPQRSTUVWXYZA\";\n        actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "encode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        // Arrange\n        String originalMessage = \"Hello World!\";\n        String cipher = \"bcdefghijklmnopqrstuvwxyza\";\n        String expectedEncodedMessage = \"Ifmmp Xpsme!\";\n\n        // Act\n        String actualEncodedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipher);\n\n        // Assert\n        assertEquals(expectedEncodedMessage, actualEncodedMessage, \"The encoded message does not match the expected output.\");\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "encode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    \n    @Test\n    public void encodeTest() {\n        // set up\n        String message = \"Hello, World!\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        \n        // execute\n        String encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);\n\n        // assert\n        String expectedEncodedMessage = \"Ifmmp, Xpsme!\";\n        assertEquals(expectedEncodedMessage, encodedMessage, \"The encoded message does not match the expected output.\");\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "encode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        // Input for encode method\n        String message = \"Hello World!\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        \n        // Expected result after encoding\n        String expectedEncoded = \"Ifmmp Xpsme!\";\n        \n        // Actual result from encode method\n        String actualEncoded = SimpleSubstitutionCipher.encode(message, cipherSmall);\n        \n        // Assertion to make sure actual result matches the expected\n        assertEquals(expectedEncoded, actualEncoded, \"The encoded string does not match the expected output.\");\n    }\n\n    // Static Nested Class to simulate the actual source code as provided:\n    public static class SimpleSubstitutionCipher {\n        public static String encode(String message, String cipherSmall) {\n            StringBuilder encoded = new StringBuilder();\n\n            // This map is used to encode\n            Map<Character, Character> cipherMap = new HashMap<>();\n\n            char beginSmallLetter = 'a';\n            char beginCapitalLetter = 'A';\n\n            cipherSmall = cipherSmall.toLowerCase();\n            String cipherCapital = cipherSmall.toUpperCase();\n\n            // To handle Small and Capital letters\n            for (int i = 0; i < cipherSmall.length(); i++) {\n                cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));\n                cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));\n            }\n\n            for (int i = 0; i < message.length(); i++) {\n                if (Character.isAlphabetic(message.charAt(i))) {\n                    encoded.append(cipherMap.get(message.charAt(i)));\n                } else {\n                    encoded.append(message.charAt(i));\n                }\n            }\n\n            return encoded.toString();\n        }\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "encode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    \n    @Test\n    public void encodeTest() {\n        // Example cipher, it is assumed to have 26 characters corresponding to a-z letters\n        String cipher = \"bcdefghijklmnopqrstuvwxyza\";\n        \n        // Test cases with expected outcomes\n        String result1 = SimpleSubstitutionCipher.encode(\"hello\", cipher);\n        assertEquals(\"ifmmp\", result1);\n        \n        String result2 = SimpleSubstitutionCipher.encode(\"HELLO\", cipher);\n        assertEquals(\"IFMMP\", result2);\n        \n        String result3 = SimpleSubstitutionCipher.encode(\"Hello World!\", cipher);\n        assertEquals(\"Ifmmp Xpsme!\", result3);\n        \n        String result4 = SimpleSubstitutionCipher.encode(\"\", cipher);\n        assertEquals(\"\", result4);\n    }\n\n    // Optional: Add more test cases to test edge cases and special input\n    // ...\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxWithNonEmptyArray() {\n        int[] inputArray = {1, 3, 4, 2};\n        int expectedMax = 4;\n        assertEquals(expectedMax, FindMax.findMax(inputArray));\n    }\n\n    @Test\n    public void findMaxWithAllNegativeNumbers() {\n        int[] inputArray = {-3, -1, -2, -4};\n        int expectedMax = -1;\n        assertEquals(expectedMax, FindMax.findMax(inputArray));\n    }\n\n    @Test\n    public void findMaxWithSingleElement() {\n        int[] inputArray = {42};\n        int expectedMax = 42;\n        assertEquals(expectedMax, FindMax.findMax(inputArray));\n    }\n\n    @Test\n    public void findMaxWithAllIdenticalElements() {\n        int[] inputArray = {7, 7, 7, 7};\n        int expectedMax = 7;\n        assertEquals(expectedMax, FindMax.findMax(inputArray));\n    }\n\n    @Test\n    public void findMaxWithEmptyArray() {\n        int[] inputArray = {};\n        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(inputArray));\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxWithNonEmptyArray() {\n        int[] inputArray = {1, 3, 5, 4, 2};\n        int expectedMax = 5;\n        assertEquals(expectedMax, FindMax.findMax(inputArray), \"The max value should be 5\");\n    }\n\n    @Test\n    public void findMaxWithAllNegativeNumbers() {\n        int[] inputArray = {-1, -3, -5, -4, -2};\n        int expectedMax = -1;\n        assertEquals(expectedMax, FindMax.findMax(inputArray), \"The max value should be -1\");\n    }\n\n    @Test\n    public void findMaxWithSingleElement() {\n        int[] inputArray = {42};\n        int expectedMax = 42;\n        assertEquals(expectedMax, FindMax.findMax(inputArray), \"The max value should be the single element 42\");\n    }\n\n    @Test\n    public void findMaxWithAllIdenticalNumbers() {\n        int[] inputArray = {7, 7, 7, 7, 7};\n        int expectedMax = 7;\n        assertEquals(expectedMax, FindMax.findMax(inputArray), \"The max value should be the same as all identical elements, 7\");\n    }\n\n    @Test\n    public void findMaxThrowsExceptionForEmptyArray() {\n        int[] inputArray = {};\n        Exception exception = assertThrows(\n            IllegalArgumentException.class,\n            () -> FindMax.findMax(inputArray),\n            \"An empty array should cause an IllegalArgumentException.\"\n        );\n\n        String expectedMessage = \"Array must be non-empty.\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage), \"Exception message should be: \" + expectedMessage);\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        // Test with an array containing a mix of positive and negative numbers\n        assertEquals(9, FindMax.findMax(new int[]{1, 3, 9, 0, -1}));\n\n        // Test with an array having same values, expecting the same value as max\n        assertEquals(4, FindMax.findMax(new int[]{4, 4, 4, 4}));\n\n        // Test with an array containing a single number\n        assertEquals(2, FindMax.findMax(new int[]{2}));\n\n        // Test with an array containing only negative numbers\n        assertEquals(-1, FindMax.findMax(new int[]{-10, -20, -1, -5}));\n\n        // Test with a sorted array in ascending order\n        assertEquals(7, FindMax.findMax(new int[]{1, 2, 3, 4, 5, 6, 7}));\n\n        // Test with a sorted array in descending order\n        assertEquals(33, FindMax.findMax(new int[]{33, 22, 11, 0, -1}));\n\n        // Test to check the IllegalArgumentException when array is empty\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(new int[]{});\n        });\n        assertEquals(\"Array must be non-empty.\", exception.getMessage());\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void testFindMaxWhenArrayHasMultipleElements() {\n        // Test with normal input\n        int[] array = {1, 3, 4, 2};\n        int result = FindMax.findMax(array);\n        assertEquals(4, result);\n    }\n\n    @Test\n    public void testFindMaxWhenArrayHasOneElement() {\n        // Test with single element array\n        int[] array = {42};\n        int result = FindMax.findMax(array);\n        assertEquals(42, result);\n    }\n\n    @Test\n    public void testFindMaxWithNegativeNumbers() {\n        // Test with negative numbers\n        int[] array = {-1, -3, -4, -2};\n        int result = FindMax.findMax(array);\n        assertEquals(-1, result);\n    }\n\n    @Test\n    public void testFindMaxWithMixedNumbers() {\n        // Test with a mix of negative and positive numbers\n        int[] array = {-1, 3, -4, 2};\n        int result = FindMax.findMax(array);\n        assertEquals(3, result);\n    }\n    \n    @Test \n    public void testFindMaxWithAllEqualElements() {\n        // Test with all elements being equal\n        int[] array = {7, 7, 7, 7};\n        int result = FindMax.findMax(array);\n        assertEquals(7, result);\n    }\n\n    @Test\n    public void testFindMaxWhenArrayIsEmpty() {\n        // Test with empty array\n        int[] array = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(array));\n        assertEquals(\"Array must be non-empty.\", exception.getMessage());\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxTest() {\n        // Test with a regular input\n        int[] inputArray = {1, 5, 3, 4, 2};\n        int expectedMax = 5;\n        assertEquals(expectedMax, FindMax.findMax(inputArray));\n\n        // Test with input having negative values\n        int[] negativeArray = {-3, -1, -2, -5, -4};\n        int expectedNegativeMax = -1;\n        assertEquals(expectedNegativeMax, FindMax.findMax(negativeArray));\n\n        // Test with input of size one\n        int[] singleElementArray = {42};\n        int expectedSingleElementMax = 42;\n        assertEquals(expectedSingleElementMax, FindMax.findMax(singleElementArray));\n\n        // Test with input having all equal values\n        int[] equalElementsArray = {7, 7, 7, 7, 7};\n        int expectedEqualElementMax = 7;\n        assertEquals(expectedEqualElementMax, FindMax.findMax(equalElementsArray));\n    }\n\n    @Test\n    public void findMaxEmptyArrayTest() {\n        // Test with an empty array\n        int[] emptyArray = {};\n\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(emptyArray);\n        });\n\n        String expectedMessage = \"Array must be non-empty.\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(new int[]{}), \"Array must be non-empty.\");\n\n        assertEquals(3, FindMax.findMax(new int[]{1, 2, 3}), \"The max value in the array {1, 2, 3} should be 3\");\n\n        assertEquals(-1, FindMax.findMax(new int[]{-3, -2, -1}), \"The max value in the array {-3, -2, -1} should be -1\");\n\n        assertEquals(0, FindMax.findMax(new int[]{0}), \"The max value in a single-element array {0} should be 0\");\n\n        assertEquals(7, FindMax.findMax(new int[]{7, 3, 5, 6, 7}), \"The max value in the array {7, 3, 5, 6, 7} should be 7\");\n\n        assertEquals(42, FindMax.findMax(new int[]{10, 22, 42, 11}), \"The max value in the array {10, 22, 42, 11} should be 42\");\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxWithNonEmptyArrayTest() {\n        int[] array = {1, 2, 3, 4, 5};\n        assertEquals(5, FindMax.findMax(array));\n    }\n\n    @Test\n    public void findMaxWithSingleElementArrayTest() {\n        int[] array = {42};\n        assertEquals(42, FindMax.findMax(array));\n    }\n\n    @Test\n    public void findMaxWithNegativeNumbersTest() {\n        int[] array = {-3, -1, -2, -7, -5};\n        assertEquals(-1, FindMax.findMax(array));\n    }\n\n    @Test\n    public void findMaxWithAllIdenticalElementsTest() {\n        int[] array = {7, 7, 7, 7};\n        assertEquals(7, FindMax.findMax(array));\n    }\n\n    @Test\n    public void findMaxWithMixedValuesTest() {\n        int[] array = {-10, 30, 20, 0, -20};\n        assertEquals(30, FindMax.findMax(array));\n    }\n\n    @Test\n    public void findMaxWhenArrayIsEmptyTest() {\n        int[] array = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(array);\n        });\n\n        String expectedMessage = \"Array must be non-empty.\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void testFindMaxWithNonEmptyArray() {\n        assertEquals(5, FindMax.findMax(new int[]{1, 3, 5, 4, 2}));\n        assertEquals(-1, FindMax.findMax(new int[]{-3, -5, -4, -1, -2}));\n        assertEquals(0, FindMax.findMax(new int[]{0}));\n        assertEquals(42, FindMax.findMax(new int[]{42, -42, 0, 42, 42}));\n    }\n\n    @Test\n    public void testFindMaxWithSingleElementArray() {\n        assertEquals(7, FindMax.findMax(new int[]{7}));\n    }\n\n    @Test\n    public void testFindMaxWithOrderedArray() {\n        assertEquals(3, FindMax.findMax(new int[]{1, 2, 3}));\n    }\n\n    @Test\n    public void testFindMaxWithSameElementsArray() {\n        assertEquals(8, FindMax.findMax(new int[]{8, 8, 8, 8}));\n    }\n\n    @Test\n    public void testFindMaxWithUnorderedArray() {\n        assertEquals(9, FindMax.findMax(new int[]{6, 9, 3, 5, 1}));\n    }\n\n    @Test\n    public void expectIllegalArgumentExceptionForEmptyArray() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(new int[]{});\n        });\n        assertEquals(\"Array must be non-empty.\", exception.getMessage());\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        assertThrows(IllegalArgumentException.class, \n            () -> FindMax.findMax(new int[]{}), \"Array must be non-empty.\");\n\n        assertEquals(9, FindMax.findMax(new int[]{1, 4, 9, 3}), \n            \"Max should be 9 for input {1, 4, 9, 3}\");\n\n        assertEquals(-1, FindMax.findMax(new int[]{-3, -5, -1, -8}), \n            \"Max should be -1 for input {-3, -5, -1, -8}\");\n\n        assertEquals(0, FindMax.findMax(new int[]{0}), \n            \"Max should be 0 for a single element array with element 0\");\n\n        assertEquals(1, FindMax.findMax(new int[]{1}), \n            \"Max should be 1 for a single element array with element 1\");\n\n        assertEquals(50, FindMax.findMax(new int[]{8, 22, 50, 4}), \n            \"Max should be 50 for input {8, 22, 50, 4}\");\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(new int[]{});\n        }, \"Array must be non-empty.\");\n\n        assertEquals(9, FindMax.findMax(new int[]{1, 3, 5, 7, 9}), \"Max should be 9 for the provided array\");\n\n        assertEquals(-1, FindMax.findMax(new int[]{-2, -5, -7, -1, -4}), \"Max should be -1 for negative numbers in the array\");\n\n        assertEquals(0, FindMax.findMax(new int[]{-1, 0, -3}), \"Max should be 0 when 0 is the highest number\");\n\n        assertEquals(1, FindMax.findMax(new int[]{1}), \"Max should be 1 for a single-element array\");\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void testFindMaxWithPositiveNumbers() {\n        int[] array = {1, 2, 3, 4, 5};\n        int result = FindMax.findMax(array);\n        assertEquals(5, result, \"The max of the positive numbers is incorrect\");\n    }\n\n    @Test\n    public void testFindMaxWithNegativeNumbers() {\n        int[] array = {-1, -2, -3, -4, -5};\n        int result = FindMax.findMax(array);\n        assertEquals(-1, result, \"The max of the negative numbers is incorrect\");\n    }\n\n    @Test\n    public void testFindMaxWithMixedNumbers() {\n        int[] array = {-1, 3, -5, 7, 0};\n        int result = FindMax.findMax(array);\n        assertEquals(7, result, \"The max of the mixed numbers is incorrect\");\n    }\n\n    @Test\n    public void testFindMaxWithSingleElement() {\n        int[] array = {42};\n        int result = FindMax.findMax(array);\n        assertEquals(42, result, \"The max of a single-element array is incorrect\");\n    }\n\n    @Test\n    public void testFindMaxEmptyArray() {\n        int[] array = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(array);\n        });\n        String expectedMessage = \"Array must be non-empty.\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage), \"Exception message is not correct\");\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void testFindMaxWithPositiveNumbers() {\n        int[] array = {1, 2, 3, 4, 5};\n        int expectedMax = 5;\n        int actualMax = FindMax.findMax(array);\n        assertEquals(expectedMax, actualMax, \"The max should be the last element which is 5.\");\n    }\n    \n    @Test\n    public void testFindMaxWithNegativeNumbers() {\n        int[] array = {-3, -1, -4, -12, -5};\n        int expectedMax = -1;\n        int actualMax = FindMax.findMax(array);\n        assertEquals(expectedMax, actualMax, \"The max should be the second element which is -1.\");\n    }\n    \n    @Test\n    public void testFindMaxWithMixedNumbers() {\n        int[] array = {10, 0, -5, 4, 7};\n        int expectedMax = 10;\n        int actualMax = FindMax.findMax(array);\n        assertEquals(expectedMax, actualMax, \"The max should be the first element which is 10.\");\n    }\n    \n    @Test\n    public void testFindMaxWithSingleElement() {\n        int[] array = {42};\n        int expectedMax = 42;\n        int actualMax = FindMax.findMax(array);\n        assertEquals(expectedMax, actualMax, \"The max should be the only element which is 42.\");\n    }\n    \n    @Test\n    public void testFindMaxThrowsExceptionForEmptyArray() {\n        int[] array = {};\n        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(array), \"Empty array should throw IllegalArgumentException.\");\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxTest() {\n        // Test with a regular array\n        assertEquals(5, FindMax.findMax(new int[]{1, 2, 3, 4, 5}), \"The maximum value should be 5\");\n\n        // Test with a single element array\n        assertEquals(1, FindMax.findMax(new int[]{1}), \"The maximum value with a single element should be that element itself\");\n\n        // Test with a negative numbers in the array\n        assertEquals(-1, FindMax.findMax(new int[]{-3, -1, -4, -2}), \"The maximum value should be -1\");\n\n        // Test with an unordered array\n        assertEquals(9, FindMax.findMax(new int[]{6, 3, 9, 5}), \"The maximum value should be 9\");\n\n        // Test with all elements being the same\n        assertEquals(7, FindMax.findMax(new int[]{7, 7, 7, 7}), \"The maximum value should be 7\");\n    }\n\n    @Test\n    public void findMaxEmptyArrayTest() {\n        // Test with an empty array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(new int[]{});\n        });\n\n        assertEquals(\"Array must be non-empty.\", exception.getMessage(), \"IllegalArgumentException should be thrown for an empty array\");\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxWithMultipleValues() {\n        int[] array = {1, 3, 4, 2};\n        int result = FindMax.findMax(array);\n        assertEquals(4, result);\n    }\n\n    @Test\n    public void findMaxWithSingleValue() {\n        int[] array = {42};\n        int result = FindMax.findMax(array);\n        assertEquals(42, result);\n    }\n\n    @Test\n    public void findMaxWithNegatives() {\n        int[] array = {-3, -1, -2, -4};\n        int result = FindMax.findMax(array);\n        assertEquals(-1, result);\n    }\n\n    @Test\n    public void findMaxWithAllIdenticalValues() {\n        int[] array = {7, 7, 7, 7};\n        int result = FindMax.findMax(array);\n        assertEquals(7, result);\n    }\n\n    @Test\n    public void findMaxSortedArray() {\n        int[] array = {1, 2, 3, 4, 5};\n        int result = FindMax.findMax(array);\n        assertEquals(5, result);\n    }\n\n    @Test\n    public void findMaxReverseSortedArray() {\n        int[] array = {5, 4, 3, 2, 1};\n        int result = FindMax.findMax(array);\n        assertEquals(5, result);\n    }\n\n    @Test\n    public void findMaxRandomOrder() {\n        int[] array = {5, 1, 3, 2, 4};\n        int result = FindMax.findMax(array);\n        assertEquals(5, result);\n    }\n\n    @Test\n    public void findMaxWithDuplicates() {\n        int[] array = {1, 3, 3, 2, 4};\n        int result = FindMax.findMax(array);\n        assertEquals(4, result);\n    }\n\n    @Test\n    public void findMaxStartsWithMaxValue() {\n        int[] array = {5, 3, 2, 1, 4};\n        int result = FindMax.findMax(array);\n        assertEquals(5, result);\n    }\n\n    @Test\n    public void findMaxEndsWithMaxValue() {\n        int[] array = {1, 3, 2, 4, 5};\n        int result = FindMax.findMax(array);\n        assertEquals(5, result);\n    }\n\n    @Test\n    public void findMaxEmptyArrayThrowsException() {\n        int[] array = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(array);\n        });\n        assertEquals(\"Array must be non-empty.\", exception.getMessage());\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        // Test for an array with multiple elements\n        assertEquals(5, FindMax.findMax(new int[]{1, 3, 4, 5, 2}));\n        // Test for an array with one element\n        assertEquals(1, FindMax.findMax(new int[]{1}));\n        // Test to ensure it finds the maximum when the max value is at the beginning\n        assertEquals(10, FindMax.findMax(new int[]{10, 0, 1, 2, 3, 4}));\n        // Test to ensure it finds the maximum when the max value is at the end\n        assertEquals(100, FindMax.findMax(new int[]{10, 20, 30, 100}));\n    }\n\n    @Test\n    public void findMaxEmptyArrayTest() {\n        // Test for an empty array to check if the appropriate exception is thrown\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(new int[]{});\n        });\n        assertTrue(exception.getMessage().contains(\"Array must be non-empty.\"));\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    \n    @Test\n    public void findMaxWithArrayOfIntegers() {\n        // Testing with an array of positive and negative integers\n        int[] arrayOfInts = {-1, 5, 13, 2, 8, 3};\n        int expectedMax = 13;\n        assertEquals(expectedMax, FindMax.findMax(arrayOfInts), \"The max should be \" + expectedMax);\n    }\n    \n    @Test\n    public void findMaxWithSingleElement() {\n        // Testing with an array containing a single element\n        int[] singleElementArray = {42};\n        int expectedMax = 42;\n        assertEquals(expectedMax, FindMax.findMax(singleElementArray), \"The max should be \" + expectedMax);\n    }\n    \n    @Test\n    public void findMaxWithNegativeNumbers() {\n        // Testing with an array of all negative numbers\n        int[] negativeNumbersArray = {-3, -7, -1, -5, -9};\n        int expectedMax = -1;\n        assertEquals(expectedMax, FindMax.findMax(negativeNumbersArray), \"The max should be \" + expectedMax);\n    }\n    \n    @Test\n    public void findMaxThrowsExceptionForEmptyArray() {\n        // Testing with an empty array. Should throw IllegalArgumentException.\n        int[] emptyArray = {};\n        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(emptyArray), \"Should throw IllegalArgumentException for an empty array\");\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void testFindMaxWithPositiveNumbers() {\n        assertEquals(9, FindMax.findMax(new int[] {1, 3, 5, 7, 9}));\n    }\n\n    @Test\n    public void testFindMaxWithNegativeNumbers() {\n        assertEquals(-1, FindMax.findMax(new int[] {-10, -5, -3, -1}));\n    }\n\n    @Test\n    public void testFindMaxWithMixedNumbers() {\n        assertEquals(15, FindMax.findMax(new int[] {-8, 7, 15, -9, 0}));\n    }\n\n    @Test\n    public void testFindMaxWithSingleElement() {\n        assertEquals(42, FindMax.findMax(new int[] {42}));\n    }\n\n    @Test\n    public void testFindMaxWithAllEqualElements() {\n        assertEquals(7, FindMax.findMax(new int[] {7, 7, 7, 7}));\n    }\n\n    @Test\n    public void testFindMaxWithEmptyArray() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(new int[] {});\n        });\n\n        String expectedMessage = \"Array must be non-empty.\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    \n    @Test\n    public void findMaxTestWithValidArray() {\n        // Test with a valid array containing multiple elements\n        int[] array = {1, 5, 3, 7, 4};\n        int expectedMax = 7;\n        assertEquals(expectedMax, FindMax.findMax(array), \"The max value should be 7\");\n    }\n\n    @Test\n    public void findMaxTestWithSingleElement() {\n        // Test with an array containing a single element\n        int[] array = {10};\n        int expectedMax = 10;\n        assertEquals(expectedMax, FindMax.findMax(array), \"The max value should be 10 when array has a single element\");\n    }\n\n    @Test\n    public void findMaxTestWithNegativeNumbers() {\n        // Test with an array containing negative numbers\n        int[] array = {-2, -8, -4, -1};\n        int expectedMax = -1;\n        assertEquals(expectedMax, FindMax.findMax(array), \"The max value should be -1 when array contains only negative numbers\");\n    }\n\n    @Test\n    public void findMaxTestWithAllEqualElements() {\n        // Test with an array where all elements are equal\n        int[] array = {3, 3, 3, 3, 3};\n        int expectedMax = 3;\n        assertEquals(expectedMax, FindMax.findMax(array), \"The max value should be 3 when all elements are equal\");\n    }\n\n    @Test\n    public void findMaxTestWithEmptyArray() {\n        // Test with an empty array to check if it throws the correct exception\n        int[] array = {};\n        assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(array);\n        }, \"A IllegalArgumentException should be thrown when array is empty\");\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void whenArrayIsNotEmpty_thenFindMaxReturnsCorrectValue() {\n        // given a non-empty array\n        int[] testArray = {1, 3, 4, 2, 5, 0};\n        \n        // when we find maximum of array\n        int result = FindMax.findMax(testArray);\n\n        // then the correct maximum is returned\n        assertEquals(5, result);\n    }\n\n    @Test\n    public void whenArrayContainsOneElement_thenFindMaxReturnsThatElement() {\n        // given an array with a single element\n        int[] singleElementArray = {42};\n        \n        // when we find maximum of array\n        int result = FindMax.findMax(singleElementArray);\n\n        // then the correct maximum, which is the element itself, is returned\n        assertEquals(42, result);\n    }\n\n    @Test\n    public void whenArrayIsNotEmptyAndContainsNegatives_thenFindMaxReturnsCorrectValue() {\n        // given a non-empty array with negative numbers\n        int[] arrayWithNegatives = {-1, -3, -4, -2, -5, 0};\n        \n        // when we find maximum of array\n        int result = FindMax.findMax(arrayWithNegatives);\n\n        // then the correct maximum is returned (which is 0 in this case)\n        assertEquals(0, result);\n    }\n\n    @Test\n    public void whenArrayIsEmpty_thenIllegalArgumentExceptionIsThrown() {\n        // given an empty array\n        int[] emptyArray = {};\n\n        // when we try finding maximum of array, an exception is thrown\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(emptyArray);\n        });\n\n        // then verify if the correct message is received\n        assertEquals(\"Array must be non-empty.\", exception.getMessage());\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxTest() {\n        // Test with a regular array\n        assertEquals(9, FindMax.findMax(new int[]{1, 3, 5, 9, 2}));\n\n        // Test with a single element array\n        assertEquals(1, FindMax.findMax(new int[]{1}));\n\n        // Test with negative numbers\n        assertEquals(-1, FindMax.findMax(new int[]{-5, -3, -1, -4}));\n\n        // Test with all elements being the same\n        assertEquals(7, FindMax.findMax(new int[]{7, 7, 7, 7, 7}));\n\n        // Test that it throws the expected exception when the array is empty\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(new int[]{});\n        });\n        assertEquals(\"Array must be non-empty.\", exception.getMessage());\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    \n    @Test\n    public void whenArrayHasMultipleElements_thenFindMax() {\n        assertEquals(9, FindMax.findMax(new int[]{1, 3, 7, 9}));\n    }\n    \n    @Test\n    public void whenArrayHasOneElement_thenElementIsMax() {\n        assertEquals(1, FindMax.findMax(new int[]{1}));\n    }\n    \n    @Test\n    public void whenArrayHasNegativeElements_thenFindMax() {\n        assertEquals(-1, FindMax.findMax(new int[]{-3, -7, -9, -1}));\n    }\n    \n    @Test\n    public void whenArrayHasAllElementsSame_thenAnyElementIsMax() {\n        assertEquals(5, FindMax.findMax(new int[]{5, 5, 5, 5}));\n    }\n    \n    @Test\n    public void whenArrayIsEmpty_thenThrowException() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(new int[]{});\n        });\n        \n        assertEquals(\"Array must be non-empty.\", exception.getMessage());\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxTest() {\n        // Normal case\n        int[] normalArray = {1, 3, 4, 2};\n        assertEquals(4, FindMax.findMax(normalArray), \"The maximum of the normal case should be 4.\");\n        \n        // Case where the max value is at the beginning\n        int[] maxAtBeginningArray = {5, 4, 3, 2};\n        assertEquals(5, FindMax.findMax(maxAtBeginningArray), \"The maximum when it's at the beginning should be 5.\");\n        \n        // Case where the max value is at the end\n        int[] maxAtEndArray = {1, 2, 3, 10};\n        assertEquals(10, FindMax.findMax(maxAtEndArray), \"The maximum when it's at the end should be 10.\");\n        \n        // Single element case\n        int[] singleElementArray = {7};\n        assertEquals(7, FindMax.findMax(singleElementArray), \"The maximum of a single-element array should be the element itself.\");\n        \n        // All elements are the same\n        int[] allSameArray = {2, 2, 2, 2};\n        assertEquals(2, FindMax.findMax(allSameArray), \"The maximum of an array with all same elements should be the element itself.\");\n        \n        // Exception case for empty array\n        int[] emptyArray = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(emptyArray);\n        }, \"An empty array should throw an IllegalArgumentException.\");\n        assertEquals(\"Array must be non-empty.\", exception.getMessage(), \"The exception message must match the expected string.\");\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"abc\", Lower.toLowerCase(\"ABC\"));\n        assertEquals(\"abc123\", Lower.toLowerCase(\"ABC123\"));\n        assertEquals(\"abcabc\", Lower.toLowerCase(\"abcABC\"));\n        assertEquals(\"abc123abc\", Lower.toLowerCase(\"abc123ABC\"));\n        assertEquals(\"\", Lower.toLowerCase(\"\"));\n        assertEquals(\"12345\", Lower.toLowerCase(\"12345\"));\n        assertEquals(\"a1b2c3\", Lower.toLowerCase(\"A1B2C3\"));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"abc\", Lower.toLowerCase(\"ABC\"));\n        assertEquals(\"abc123\", Lower.toLowerCase(\"ABC123\"));\n        assertEquals(\"abcabc\", Lower.toLowerCase(\"abcABC\"));\n        assertEquals(\"abc123abc\", Lower.toLowerCase(\"abc123ABC\"));\n        assertEquals(\"abc\", Lower.toLowerCase(\"abc\"));\n        assertEquals(\"\", Lower.toLowerCase(\"\"));\n        assertEquals(\"123\", Lower.toLowerCase(\"123\"));\n        assertEquals(\"abc-def 123\", Lower.toLowerCase(\"ABC-DEF 123\"));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"abc\", Lower.toLowerCase(\"ABC\"));\n        assertEquals(\"abc123\", Lower.toLowerCase(\"ABC123\"));\n        assertEquals(\"abcabc\", Lower.toLowerCase(\"abcABC\"));\n        assertEquals(\"abc123abc\", Lower.toLowerCase(\"abc123ABC\"));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"abc\", Lower.toLowerCase(\"ABC\"));\n        assertEquals(\"abc123\", Lower.toLowerCase(\"ABC123\"));\n        assertEquals(\"abcabc\", Lower.toLowerCase(\"abcABC\"));\n        assertEquals(\"abc123abc\", Lower.toLowerCase(\"abc123ABC\"));\n        assertEquals(\"abc\", Lower.toLowerCase(\"aBc\"));\n        assertEquals(\"\", Lower.toLowerCase(\"\"));\n        assertEquals(\"123\", Lower.toLowerCase(\"123\"));\n        assertEquals(\"!!!\", Lower.toLowerCase(\"!!!\"));\n        assertEquals(\"example text\", Lower.toLowerCase(\"Example Text\"));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"abc\", Lower.toLowerCase(\"ABC\"));\n        assertEquals(\"abc123\", Lower.toLowerCase(\"ABC123\"));\n        assertEquals(\"abcabc\", Lower.toLowerCase(\"abcABC\"));\n        assertEquals(\"abc123abc\", Lower.toLowerCase(\"abc123ABC\"));\n        assertEquals(\"\", Lower.toLowerCase(\"\"));\n        assertEquals(\"123\", Lower.toLowerCase(\"123\"));\n        assertEquals(\"a1b2c3\", Lower.toLowerCase(\"A1B2C3\"));\n        assertEquals(\" already lowercase \", Lower.toLowerCase(\" already lowercase \"));\n        assertEquals(\"@#$$%\", Lower.toLowerCase(\"@#$$%\"));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"abc\", Lower.toLowerCase(\"ABC\"));\n        assertEquals(\"abc123\", Lower.toLowerCase(\"ABC123\"));\n        assertEquals(\"abcabc\", Lower.toLowerCase(\"abcABC\"));\n        assertEquals(\"abc123abc\", Lower.toLowerCase(\"abc123ABC\"));\n        assertEquals(\"\", Lower.toLowerCase(\"\"));\n        assertEquals(\" \", Lower.toLowerCase(\" \"));\n        assertEquals(\"1234567890\", Lower.toLowerCase(\"1234567890\"));\n        assertEquals(\"abc!@#\", Lower.toLowerCase(\"abc!@#\"));\n        assertEquals(\"abc!@#abc\", Lower.toLowerCase(\"AbC!@#ABC\"));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"abc\", Lower.toLowerCase(\"ABC\"));\n        assertEquals(\"abc123\", Lower.toLowerCase(\"ABC123\"));\n        assertEquals(\"abcabc\", Lower.toLowerCase(\"abcABC\"));\n        assertEquals(\"abc123abc\", Lower.toLowerCase(\"abc123ABC\"));\n        assertEquals(\"\", Lower.toLowerCase(\"\"));\n        assertEquals(\" \", Lower.toLowerCase(\" \"));\n        assertEquals(\"123\", Lower.toLowerCase(\"123\"));\n        assertEquals(\"abc\", Lower.toLowerCase(\"abc\"));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class LowerTest {\n\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"abc\", Lower.toLowerCase(\"ABC\"));\n        assertEquals(\"abc123\", Lower.toLowerCase(\"ABC123\"));\n        assertEquals(\"abcabc\", Lower.toLowerCase(\"abcABC\"));\n        assertEquals(\"abc123abc\", Lower.toLowerCase(\"abc123ABC\"));\n        assertEquals(\"\", Lower.toLowerCase(\"\"));\n        assertEquals(\"123\", Lower.toLowerCase(\"123\"));\n        assertEquals(\"abc!@#\", Lower.toLowerCase(\"aBC!@#\"));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        // Test with a regular string containing uppercase letters\n        assertEquals(\"hello\", Lower.toLowerCase(\"Hello\"), \"The string should be converted to all lowercase\");\n\n        // Test with a string with all uppercase letters\n        assertEquals(\"world\", Lower.toLowerCase(\"WORLD\"), \"The string should be converted to all lowercase\");\n\n        // Test with a string that contains numbers and uppercase letters\n        assertEquals(\"java123\", Lower.toLowerCase(\"Java123\"), \"Numbers and case should remain unchanged, but letters should be lowercase\");\n\n        // Test with a string that has no uppercase letters\n        assertEquals(\"already lower\", Lower.toLowerCase(\"already lower\"), \"The string already in lowercase should remain unchanged\");\n\n        // Test with an empty string\n        assertEquals(\"\", Lower.toLowerCase(\"\"), \"An empty string should remain unchanged\");\n\n        // Test with a string with special characters and uppercase letters\n        assertEquals(\"test-case!\", Lower.toLowerCase(\"Test-Case!\"), \"Special characters and case should remain unchanged, but letters should be lowercase\");\n\n        // Test edge case with a single uppercase letter\n        assertEquals(\"a\", Lower.toLowerCase(\"A\"), \"A single uppercase character should be converted to lowercase\");\n\n        // Test edge case with a single lowercase letter\n        assertEquals(\"b\", Lower.toLowerCase(\"b\"), \"A single lowercase character should remain unchanged\");\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"hello\", Lower.toLowerCase(\"HELLO\")); // Test all uppercase to all lowercase conversion\n        assertEquals(\"hello\", Lower.toLowerCase(\"hello\")); // Test already all lowercase string\n        assertEquals(\"hello world\", Lower.toLowerCase(\"Hello World\")); // Test mixed case string\n        assertEquals(\"\", Lower.toLowerCase(\"\")); // Test empty string\n        assertEquals(\"123\", Lower.toLowerCase(\"123\")); // Test string with numbers\n        assertEquals(\"hello123\", Lower.toLowerCase(\"HELLO123\")); // Test string with letters and numbers\n        assertEquals(\"hello world!\", Lower.toLowerCase(\"HELLO WORLD!\")); // Test string with punctuation\n        assertEquals(\"\u0441\u043f\u0430\u0441\u0438\u0431\u043e\", Lower.toLowerCase(\"\u0421\u041f\u0410\u0421\u0418\u0411\u041e\")); // Test non-English characters (Cyrillic in this case)\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"hello\", Lower.toLowerCase(\"Hello\"), \"Should return 'hello' for 'Hello'\");\n        assertEquals(\"hello world\", Lower.toLowerCase(\"HeLLo WorLD\"), \"Should return 'hello world' for 'HeLLo WorLD'\");\n        assertEquals(\"\", Lower.toLowerCase(\"\"), \"Should return an empty string for an empty string\");\n        assertEquals(\"123\", Lower.toLowerCase(\"123\"), \"Should return the same string for a string with no letters\");\n        assertEquals(\"hello123\", Lower.toLowerCase(\"Hello123\"), \"Should return 'hello123' for 'Hello123'\");\n        assertEquals(\"!!!\", Lower.toLowerCase(\"!!!\"), \"Should return the same string for a string with no letter characters\");\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class LowerTest {\n\n    @Test\n    public void toLowerCaseTest() {\n        // Normal case with mixed casing letters\n        assertEquals(\"hello\", Lower.toLowerCase(\"Hello\"));\n        assertEquals(\"hello world\", Lower.toLowerCase(\"Hello World\"));\n        \n        // All uppercase letters\n        assertEquals(\"test\", Lower.toLowerCase(\"TEST\"));\n        \n        // All lowercase letters (no change expected)\n        assertEquals(\"lowercase\", Lower.toLowerCase(\"lowercase\"));\n        \n        // Empty string\n        assertEquals(\"\", Lower.toLowerCase(\"\"));\n        \n        // String with numbers and special characters\n        assertEquals(\"123456 !@#$%^\", Lower.toLowerCase(\"123456 !@#$%^\"));\n        \n        // String with non-English characters\n        assertEquals(\"\u043f\u0440\u0438\u0432\u0435\u0442\", Lower.toLowerCase(\"\u041f\u0440\u0418\u0432\u0415\u0442\"));\n        \n        // Null input (we'll assume the method does not cater for null and add a test for unexpected usage)\n        // However, since the method does not handle null, it will throw a NullPointerException.\n        // We'll comment this out but in a real-world case, we might handle this with an exception or modify the method\n        // to handle null appropriately.\n        // assertThrows(NullPointerException.class, () -> Lower.toLowerCase(null));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"hello\", Lower.toLowerCase(\"HELLO\"), \"Should convert uppercase to lowercase\");\n        assertEquals(\"hello\", Lower.toLowerCase(\"hello\"), \"Should handle already lowercase\");\n        assertEquals(\"12345\", Lower.toLowerCase(\"12345\"), \"Should not affect numbers\");\n        assertEquals(\"hello world!\", Lower.toLowerCase(\"Hello World!\"), \"Should handle sentences\");\n        assertEquals(\"\", Lower.toLowerCase(\"\"), \"Should handle empty strings\");\n        assertEquals(\"a1b2c3\", Lower.toLowerCase(\"A1B2C3\"), \"Should handle alphanumeric strings\");\n        assertEquals(\" \", Lower.toLowerCase(\" \"), \"Should handle spaces\");\n        assertEquals(\"!@#$%^&*()_+[]\", Lower.toLowerCase(\"!@#$%^&*()_+[]\"), \"Should not affect non-letter characters\");\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        // Testing with a basic string\n        assertEquals(\"hello\", Lower.toLowerCase(\"HELLO\"), \"Should return all lower case\");\n\n        // Testing with a string that has mixed case\n        assertEquals(\"world\", Lower.toLowerCase(\"WorLD\"), \"Mixed case should be converted to all lower case\");\n\n        // Testing with a string that contains numbers and symbols\n        assertEquals(\"1234!@#$\", Lower.toLowerCase(\"1234!@#$\"), \"Numbers and symbols should remain unchanged\");\n\n        // Testing with an empty string\n        assertEquals(\"\", Lower.toLowerCase(\"\"), \"Empty string should return as is\");\n\n        // Testing with a string that is already in lower case\n        assertEquals(\"already lowercase\", Lower.toLowerCase(\"already lowercase\"), \"Lowercase input should return as is\");\n\n        // Testing with a string that has whitespace\n        assertEquals(\"with space\", Lower.toLowerCase(\"With SpACe\"), \"Whitespace should remain in place\");\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"hello\", Lower.toLowerCase(\"HELLO\"), \"Should return lowercase string\");\n        assertEquals(\"world\", Lower.toLowerCase(\"World\"), \"Should handle strings with mixed case\");\n        assertEquals(\"another test\", Lower.toLowerCase(\"anOTher TeSt\"), \"Should handle strings with spaces\");\n        assertEquals(\"\", Lower.toLowerCase(\"\"), \"Should handle empty string\");\n        assertEquals(\"123\", Lower.toLowerCase(\"123\"), \"Should handle strings that don't contain letter characters\");\n        assertEquals(\"with symbols!?\", Lower.toLowerCase(\"With Symbols!?\"), \"Should handle strings with non-letter characters\");\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"hello\", Lower.toLowerCase(\"Hello\"));\n        assertEquals(\"hello world\", Lower.toLowerCase(\"Hello World\"));\n        assertEquals(\"\", Lower.toLowerCase(\"\"));\n        assertEquals(\"123\", Lower.toLowerCase(\"123\"));\n        assertEquals(\"!@#\", Lower.toLowerCase(\"!@#\"));\n        assertEquals(\"java programming\", Lower.toLowerCase(\"Java Programming\"));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n\n    @Test\n    public void toLowerCaseTest() {\n        // Test conversion of all uppercase letters\n        assertEquals(\"hello\", Lower.toLowerCase(\"HELLO\"), \"All uppercase letters should be converted to lowercase.\");\n        \n        // Test conversion of mixed case letters\n        assertEquals(\"hello world\", Lower.toLowerCase(\"Hello World\"), \"Mixed case letters should be converted to all lowercase.\");\n        \n        // Test conversion of letters with leading and trailing spaces\n        assertEquals(\" hello world \", Lower.toLowerCase(\" Hello World \"), \"Conversion should not trim spaces.\");\n        \n        // Test with digits, should not be altered\n        assertEquals(\"1234\", Lower.toLowerCase(\"1234\"), \"Digits should remain unchanged.\");\n        \n        // Test empty string\n        assertEquals(\"\", Lower.toLowerCase(\"\"), \"Empty strings should be returned as is.\");\n        \n        // Test string with no letters\n        assertEquals(\"1234!@#$\", Lower.toLowerCase(\"1234!@#$\"), \"Strings with no letters should remain unchanged.\");\n        \n        // Test null input (null should be handled if the method is intended to be robust, otherwise this test is not needed)\n        // Uncomment the line below if toLowerCase is expected to handle null input.\n        //assertNull(Lower.toLowerCase(null), \"Passing null should return null or throw an appropriate exception.\");\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        // Test lowercase conversion with a mixed-case string\n        assertEquals(\"abc\", Lower.toLowerCase(\"ABC\"), \"Test failed for uppercase string\");\n\n        // Test lowercase conversion with a string that is already in lowercase\n        assertEquals(\"abc\", Lower.toLowerCase(\"abc\"), \"Test failed for lowercase string\");\n\n        // Test lowercase conversion with a numeric and punctuation string (which should remain unchanged)\n        assertEquals(\"123!@#\", Lower.toLowerCase(\"123!@#\"), \"Test failed for numeric and punctuation string\");\n\n        // Test lowercase conversion with an empty string\n        assertEquals(\"\", Lower.toLowerCase(\"\"), \"Test failed for empty string\");\n\n        // Test lowercase conversion with a string that contains a mix of uppercase, lowercase letters and numbers\n        assertEquals(\"test string 123\", Lower.toLowerCase(\"TesT StrinG 123\"), \"Test failed for mixed string\");\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"hello\", LowerTest.toLowerCase(\"Hello\"));\n        assertEquals(\"hello world\", LowerTest.toLowerCase(\"Hello World\"));\n        assertEquals(\"123\", LowerTest.toLowerCase(\"123\"));\n        assertEquals(\"test123\", LowerTest.toLowerCase(\"Test123\"));\n        assertEquals(\"\", LowerTest.toLowerCase(\"\"));\n        assertEquals(\"symbols @#$%\", LowerTest.toLowerCase(\"Symbols @#$%\"));\n    }\n\n    public static String toLowerCase(String s) {\n        char[] values = s.toCharArray();\n        for (int i = 0; i < values.length; ++i) {\n            if (Character.isLetter(values[i]) && Character.isUpperCase(values[i])) {\n                values[i] = Character.toLowerCase(values[i]);\n            }\n        }\n        return new String(values);\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"hello\", toLowerCase(\"Hello\"));\n        assertEquals(\"hello world\", toLowerCase(\"Hello World\"));\n        assertEquals(\"123\", toLowerCase(\"123\"));\n        assertEquals(\"test123\", toLowerCase(\"Test123\"));\n        assertEquals(\"\", toLowerCase(\"\"));\n        assertEquals(\"symbols @#$%\", toLowerCase(\"Symbols @#$%\"));\n    }\n\n    public static String toLowerCase(String s) {\n        char[] values = s.toCharArray();\n        for (int i = 0; i < values.length; ++i) {\n            if (Character.isLetter(values[i]) && Character.isUpperCase(values[i])) {\n                values[i] = Character.toLowerCase(values[i]);\n            }\n        }\n        return new String(values);\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    \n    @Test\n    public void toLowerCaseTest() {\n        // Test with normal uppercase string\n        assertEquals(\"hello\", LowerTest.toLowerCase(\"HELLO\"), \"The string should be converted to lowercase\");\n        \n        // Test with mixed case string\n        assertEquals(\"world\", LowerTest.toLowerCase(\"WoRLD\"), \"The string should be converted to lowercase\");\n        \n        // Test with already lowercase string\n        assertEquals(\"already lowercase\", LowerTest.toLowerCase(\"already lowercase\"), \"The string should remain unchanged\");\n        \n        // Test with empty string\n        assertEquals(\"\", LowerTest.toLowerCase(\"\"), \"The string should remain unchanged\");\n\n        // Test with numbers and symbols (which should remain unchanged)\n        assertEquals(\"12345!@#$%\", LowerTest.toLowerCase(\"12345!@#$%\"), \"The string should remain unchanged\");\n\n        // Test with string that has spaces\n        assertEquals(\"with spaces\", LowerTest.toLowerCase(\"With Spaces\"), \"The string should be converted to lowercase\");\n\n        // Test with non-English letters\n        assertEquals(\"\u0441\u0442\u0440\u043e\u043a\u0430\", LowerTest.toLowerCase(\"\u0421\u0442\u0440\u043e\u043a\u0430\"), \"The non-English string should be converted to lowercase\");\n    }\n    \n    public static String toLowerCase(String s) {\n        char[] values = s.toCharArray();\n        for (int i = 0; i < values.length; ++i) {\n            if (Character.isLetter(values[i]) && Character.isUpperCase(values[i])) {\n                values[i] = Character.toLowerCase(values[i]);\n            }\n        }\n        return new String(values);\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        final String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n        final String message = \"Hello World!\";\n        final String encryptedMessage = \"Svool Dliow!\";\n\n        String decodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n        assertEquals(message, decodedMessage);\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        String originalMessage = \"hello world\";\n        String encryptedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);\n\n        String decryptedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n        assertEquals(originalMessage, decryptedMessage, \"The decrypted message should match the original message.\");\n    }\n}",
        "package_metric": 3.55,
        "class_metric": 96.55,
        "method_metric": 100.0,
        "pitest": 89.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        String encrypted = \"bqqmf\";\n        String expectedDecoded = \"apple\";\n        \n        String actualDecoded = SimpleSubstitutionCipher.decode(encrypted, cipherSmall);\n        \n        assertEquals(expectedDecoded, actualDecoded, \"The decoded message should match the expected plaintext.\");\n    }\n}",
        "package_metric": 1.65,
        "class_metric": 44.83,
        "method_metric": 92.86,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    \n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\"; // Example cipher\n        String originalMessage = \"hello world\";\n        String encryptedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);\n        \n        // Ensure that the encode method exists and is working correctly (assuming it's implemented)\n        assertNotNull(encryptedMessage, \"The encoded message should not be null\");\n        \n        // Now, test the decode method\n        String decodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n        \n        assertEquals(originalMessage, decodedMessage, \"The decoded message should match the original message\");\n    }\n}",
        "package_metric": 3.55,
        "class_metric": 96.55,
        "method_metric": 100.0,
        "pitest": 89.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    // Assuming the encode method is correctly implemented, as it's mentioned in the context\n    // we can use it to test the decode method\n    @Test\n    public void decodeTest() {\n        String originalMessage = \"Hello World!\";\n        String cipherSmall = \"qwertyuiopasdfghjklzxcvbnm\";\n        String encodedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);\n        String decodedMessage = SimpleSubstitutionCipher.decode(encodedMessage, cipherSmall);\n        \n        assertEquals(originalMessage, decodedMessage, \"The decoded message should match the original message.\");\n        \n        // Additional test cases\n        // Test empty string\n        assertEquals(\"\", SimpleSubstitutionCipher.decode(\"\", cipherSmall), \"Decoding an empty string should return an empty string.\");\n        \n        // Test string with no alphabetic characters\n        String nonAlphabetic = \"12345 !@#$%\";\n        assertEquals(nonAlphabetic, SimpleSubstitutionCipher.decode(nonAlphabetic, cipherSmall),\n                     \"Decoding a string without alphabetic characters should return the original string.\");\n        \n        // Test full alphabet\n        String alphabet = \"The quick brown fox jumps over the lazy dog\";\n        String cipheredAlphabet = SimpleSubstitutionCipher.encode(alphabet, cipherSmall);\n        assertEquals(alphabet, SimpleSubstitutionCipher.decode(cipheredAlphabet, cipherSmall),\n                     \"Decoding an encoded alphabet string should return the original alphabet string.\");\n    }\n}",
        "package_metric": 3.55,
        "class_metric": 96.55,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        String original = \"hello world\";\n        String encrypted = \"ifmmp xpsme\";\n\n        String decoded = SimpleSubstitutionCipher.decode(encrypted, cipherSmall);\n        \n        assertEquals(original, decoded, \"The decode method should properly decrypt the message using the given cipher\");\n        \n        original = \"Java123\";\n        encrypted = \"Kbwb123\";\n        \n        decoded = SimpleSubstitutionCipher.decode(encrypted, cipherSmall);\n\n        assertEquals(original, decoded, \"The decode method should ignore non-alphabetic characters and maintain their original state.\");\n    }\n}",
        "package_metric": 1.78,
        "class_metric": 48.28,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "SimpleSubstitutionCipher",
        "method_name": "decode",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        String cipher = \"zyxwvutsrqponmlkjihgfedcba\";\n        String original = \"hello\";\n        String encrypted = \"svool\";\n\n        String decrypted = SimpleSubstitutionCipher.decode(encrypted, cipher);\n        assertEquals(original, decrypted, \"The decryption should return the original message\");\n    }\n}",
        "package_metric": 1.65,
        "class_metric": 44.83,
        "method_metric": 92.86,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/heaps",
        "package_name": "com.thealgorithms.datastructures.heaps",
        "class_name": "FibonacciHeap",
        "method_name": "insert",
        "test_code": "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n\n        // Verify heap is initially empty\n        assertTrue(heap.empty(), \"Heap should be empty initially\");\n\n        // Insert a single element and verify\n        FibonacciHeap.HeapNode node = heap.insert(10);\n        assertNotNull(node, \"Insert should return a non-null HeapNode object\");\n        assertEquals(10, node.getKey(), \"Inserted node should have key equal to 10\");\n        assertFalse(heap.empty(), \"Heap should not be empty after insert\");\n        assertEquals(node, heap.findMin(), \"Inserted node should be the minimum in the heap\");\n        assertEquals(1, heap.size(), \"Heap size should be 1 after insert\");\n        \n        // Insert another element and verify\n        FibonacciHeap.HeapNode secondNode = heap.insert(5);\n        assertNotNull(secondNode, \"Second insert should return a non-null HeapNode object\");\n        assertEquals(5, secondNode.getKey(), \"Second inserted node should have key equal to 5\");\n        assertEquals(secondNode, heap.findMin(), \"Second inserted node should now be the minimum in the heap\");\n        assertEquals(2, heap.size(), \"Heap size should be 2 after second insert\");\n    }\n}",
        "package_metric": 7.42,
        "class_metric": 15.13,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/heaps",
        "package_name": "com.thealgorithms.datastructures.heaps",
        "class_name": "FibonacciHeap",
        "method_name": "insert",
        "test_code": "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        \n        // Test 1: Insert into an empty heap\n        FibonacciHeap.HeapNode insertNode1 = heap.insert(10);\n        assertEquals(10, heap.findMin().getKey(), \"Insert into an empty heap should set the new node as min.\");\n        assertFalse(heap.empty(), \"Heap should not be empty after insert.\");\n        assertEquals(1, heap.size(), \"Heap size should be 1 after first insert.\");\n        \n        // Test 2: Insert into a non-empty heap with higher key value\n        FibonacciHeap.HeapNode insertNode2 = heap.insert(20);\n        assertEquals(10, heap.findMin().getKey(), \"Insert of larger key should not change the min.\");\n        assertEquals(2, heap.size(), \"Heap size should be 2 after second insert.\");\n        \n        // Test 3: Insert into a non-empty heap with lower key value\n        FibonacciHeap.HeapNode insertNode3 = heap.insert(5);\n        assertEquals(5, heap.findMin().getKey(), \"Insert of smaller key should change the min.\");\n        assertEquals(3, heap.size(), \"Heap size should be 3 after third insert.\");\n        \n        // Test 4: Verify the inserted nodes\n        assertNotNull(insertNode1, \"Inserted node should not be null.\");\n        assertEquals(10, insertNode1.getKey(), \"Inserted node should have the correct key value.\");\n        assertNotNull(insertNode2, \"Inserted node should not be null.\");\n        assertEquals(20, insertNode2.getKey(), \"Inserted node should have the correct key value.\");\n        assertNotNull(insertNode3, \"Inserted node should not be null.\");\n        assertEquals(5, insertNode3.getKey(), \"Inserted node should have the correct key value.\");\n    }\n}",
        "package_metric": 7.42,
        "class_metric": 15.13,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/heaps",
        "package_name": "com.thealgorithms.datastructures.heaps",
        "class_name": "FibonacciHeap",
        "method_name": "insert",
        "test_code": "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    \n    private FibonacciHeap fibonacciHeap;\n    \n    @BeforeEach\n    public void setUp() {\n        fibonacciHeap = new FibonacciHeap();\n    }\n    \n    @Test\n    public void insertTest() {\n        // Initially, heap should be empty.\n        assertTrue(fibonacciHeap.empty(), \"Heap should be empty before insertions\");\n\n        // Insert first node and check size and minimum.\n        FibonacciHeap.HeapNode firstNode = fibonacciHeap.insert(10);\n        assertEquals(1, fibonacciHeap.size(), \"Heap should contain one node after first insertion\");\n        assertEquals(10, fibonacciHeap.findMin().getKey(), \"Minimum should be 10 after first insertion\");\n        assertFalse(fibonacciHeap.empty(), \"Heap should not be empty after insertion\");\n\n        // Insert a second node with a smaller key and check min again.\n        FibonacciHeap.HeapNode secondNode = fibonacciHeap.insert(5);\n        assertEquals(2, fibonacciHeap.size(), \"Heap should contain two nodes after second insertion\");\n        assertEquals(5, fibonacciHeap.findMin().getKey(), \"Minimum should be 5 after inserting node with key 5\");\n        \n        // Insert a third node with a larger key and check min does not change.\n        FibonacciHeap.HeapNode thirdNode = fibonacciHeap.insert(20);\n        assertEquals(3, fibonacciHeap.size(), \"Heap should contain three nodes after third insertion\");\n        assertEquals(5, fibonacciHeap.findMin().getKey(), \"Minimum should still be 5 after inserting node with key 20\");\n        \n        // Insert a fourth node with a key smaller than current min and check min changes.\n        FibonacciHeap.HeapNode fourthNode = fibonacciHeap.insert(3);\n        assertEquals(4, fibonacciHeap.size(), \"Heap should contain four nodes after fourth insertion\");\n        assertEquals(3, fibonacciHeap.findMin().getKey(), \"Minimum should be 3 after inserting node with key 3\");\n    }\n}",
        "package_metric": 7.42,
        "class_metric": 15.13,
        "method_metric": 100.0,
        "pitest": 9.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/heaps",
        "package_name": "com.thealgorithms.datastructures.heaps",
        "class_name": "FibonacciHeap",
        "method_name": "insert",
        "test_code": "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    private FibonacciHeap heap;\n\n    @BeforeEach\n    public void setUp() {\n        heap = new FibonacciHeap();\n    }\n\n    @Test\n    public void insertTest() {\n        // Test empty heap condition\n        assertTrue(heap.empty(), \"Heap should be initially empty\");\n\n        // Insert a single node\n        FibonacciHeap.HeapNode node = heap.insert(10);\n        assertNotNull(node, \"Inserted node should not be null\");\n        assertEquals(10, heap.findMin().getKey(), \"Min should return the key of the only node in the heap\");\n        assertEquals(1, heap.size(), \"Heap size should be 1 after one insert\");\n        assertFalse(heap.empty(), \"Heap should not be empty after insert\");\n\n        // Insert a second node with a larger key\n        FibonacciHeap.HeapNode secondNode = heap.insert(20);\n        assertNotNull(secondNode, \"Second inserted node should not be null\");\n        assertEquals(10, heap.findMin().getKey(), \"Min should still return the key of the first node\");\n        assertEquals(2, heap.size(), \"Heap size should be 2 after inserting two nodes\");\n\n        // Insert a third node with a smaller key\n        FibonacciHeap.HeapNode thirdNode = heap.insert(5);\n        assertNotNull(thirdNode, \"Third inserted node should not be null\");\n        assertEquals(5, heap.findMin().getKey(), \"Min should now return the key of the third node\");\n        assertEquals(3, heap.size(), \"Heap size should be 3 after inserting three nodes\");\n    }\n\n    @AfterEach\n    public void tearDown() {\n        heap = null;\n    }\n}",
        "package_metric": 7.42,
        "class_metric": 15.13,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/heaps",
        "package_name": "com.thealgorithms.datastructures.heaps",
        "class_name": "FibonacciHeap",
        "method_name": "insert",
        "test_code": "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        assertTrue(heap.empty(), \"Heap should be empty initially\");\n\n        FibonacciHeap.HeapNode node = heap.insert(10);\n        assertNotNull(node, \"Inserted node should not be null\");\n        assertEquals(10, node.getKey(), \"Inserted node should have key 10\");\n        assertFalse(heap.empty(), \"Heap should not be empty after insertion\");\n        assertEquals(1, heap.size(), \"Heap should contain 1 element after insertion\");\n        assertEquals(heap.findMin(), node, \"Inserted node should be the minimum in the heap\");\n        \n        heap.insert(5);\n        assertEquals(5, heap.findMin().getKey(), \"Minimum key should now be 5 after inserting a smaller key\");\n        assertEquals(2, heap.size(), \"Heap should contain 2 elements after second insertion\");\n        \n        heap.insert(15);\n        assertEquals(5, heap.findMin().getKey(), \"Minimum key should still be 5 after inserting a larger key\");\n        assertEquals(3, heap.size(), \"Heap should contain 3 elements after third insertion\");\n    }\n}",
        "package_metric": 7.42,
        "class_metric": 15.13,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/heaps",
        "package_name": "com.thealgorithms.datastructures.heaps",
        "class_name": "FibonacciHeap",
        "method_name": "insert",
        "test_code": "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n\n        // Test inserting into an empty heap\n        FibonacciHeap.HeapNode node1 = heap.insert(10);\n        assertNotNull(node1, \"Inserted heap node should not be null\");\n        assertEquals(10, node1.getKey(), \"Incorrect key on inserted node\");\n        assertEquals(1, heap.size(), \"Heap size should be 1 after the first insertion\");\n        assertFalse(heap.empty(), \"Heap should not be empty after an insertion\");\n\n        // Test inserting into a non-empty heap\n        FibonacciHeap.HeapNode node2 = heap.insert(5);\n        assertNotNull(node2, \"Inserted heap node should not be null\");\n        assertEquals(5, node2.getKey(), \"Incorrect key on inserted node\");\n        assertEquals(node2, heap.findMin(), \"Node with key 5 should be the new min\");\n        assertEquals(2, heap.size(), \"Heap size should be 2 after the second insertion\");\n\n        // Test inserting with a key greater than the min\n        FibonacciHeap.HeapNode node3 = heap.insert(15);\n        assertNotNull(node3, \"Inserted heap node should not be null\");\n        assertEquals(15, node3.getKey(), \"Incorrect key on inserted node\");\n        assertEquals(node2, heap.findMin(), \"Min should still be the node with key 5\");\n        assertEquals(3, heap.size(), \"Heap size should be 3 after the third insertion\");\n\n        // Test inserting with a key smaller than the min\n        FibonacciHeap.HeapNode node4 = heap.insert(3);\n        assertNotNull(node4, \"Inserted heap node should not be null\");\n        assertEquals(3, node4.getKey(), \"Incorrect key on inserted node\");\n        assertEquals(node4, heap.findMin(), \"Node with key 3 should be the new min\");\n        assertEquals(4, heap.size(), \"Heap size should be 4 after the fourth insertion\");\n    }\n}",
        "package_metric": 7.42,
        "class_metric": 15.13,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/heaps",
        "package_name": "com.thealgorithms.datastructures.heaps",
        "class_name": "FibonacciHeap",
        "method_name": "insert",
        "test_code": "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n\n    private FibonacciHeap heap;\n\n    @BeforeEach\n    public void setUp() {\n        heap = new FibonacciHeap();\n    }\n\n    @Test\n    public void insertTest() {\n        assertEquals(0, heap.getNumOfHeapNodes(), \"Heap should have 0 nodes initially\");\n        assertEquals(0, heap.getNumOfTrees(), \"Heap should have 0 trees initially\");\n        assertTrue(heap.empty(), \"Heap should be empty initially\");\n\n        // Insert a single key and test\n        int key = 5;\n        HeapNode node = heap.insert(key);\n        assertEquals(key, node.getKey(), \"Inserted key should match the key of the node\");\n        assertEquals(1, heap.getNumOfHeapNodes(), \"Heap should have 1 node after insert\");\n        assertEquals(1, heap.getNumOfTrees(), \"Heap should have 1 tree after insert\");\n        assertFalse(heap.empty(), \"Heap should not be empty after insert\");\n\n        // Insert another key and test\n        int secondKey = 3;\n        HeapNode secondNode = heap.insert(secondKey);\n        assertEquals(secondKey, secondNode.getKey(), \"Inserted key should match the key of the second node\");\n        assertEquals(2, heap.getNumOfHeapNodes(), \"Heap should have 2 nodes after second insert\");\n        assertEquals(2, heap.getNumOfTrees(), \"Heap should have 2 trees after second insert\");\n        assertFalse(heap.empty(), \"Heap should not be empty after second insert\");\n\n        // Note: In typical tests, you may also want to verify changes to internal structure,\n        // like the minimum value, next/previous node connections, etc.\n    }\n\n    // Additional helper method used in the test above\n    // These methods are assumed to exist and to be correct.\n    private class FibonacciHeap {\n        private HeapNode min;\n        private int numOfHeapNodes = 0;\n        private int numOfTrees = 0;\n\n        public boolean empty() {\n            return min == null;\n        }\n\n        public HeapNode insert(int key) {\n            HeapNode toInsert = new HeapNode(key);\n            if (this.empty()) {\n                this.min = toInsert;\n            } else {\n                min.setNext(toInsert);\n                this.updateMin(toInsert);\n            }\n            this.numOfHeapNodes++;\n            this.numOfTrees++;\n            return toInsert;\n        }\n\n        public int getNumOfHeapNodes() {\n            return numOfHeapNodes;\n        }\n\n        public int getNumOfTrees() {\n            return numOfTrees;\n        }\n\n        // Method to update the minimum node - assumed to be correctly implemented\n        private void updateMin(HeapNode toInsert) {\n            // Implementation details would go here\n        }\n    }\n\n    private class HeapNode {\n        private int key;\n        // Assuming other heap node properties and methods exist here\n\n        public HeapNode(int key) {\n            this.key = key;\n        }\n\n        public int getKey() {\n            return key;\n        }\n\n        // Sets the next node in the heap - assumed to be correctly implemented\n        public void setNext(HeapNode next) {\n            // Implementation details would go here\n        }\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/heaps",
        "package_name": "com.thealgorithms.datastructures.heaps",
        "class_name": "FibonacciHeap",
        "method_name": "insert",
        "test_code": "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n\n    private FibonacciHeap heap; // Assuming FibonacciHeap is the class that includes the insert method\n\n    @BeforeEach\n    public void setUp() {\n        heap = new FibonacciHeap();\n    }\n\n    @Test\n    public void insertTest() {\n        // Test insert on empty heap\n        HeapNode node1 = heap.insert(10);\n        assertEquals(10, node1.key);\n        assertEquals(1, heap.numOfHeapNodes);\n        assertEquals(1, heap.numOfTrees);\n        assertEquals(node1, heap.min);\n\n        // Test insert on heap with one element\n        HeapNode node2 = heap.insert(5);\n        assertEquals(5, node2.key);\n        assertEquals(2, heap.numOfHeapNodes);\n        assertEquals(2, heap.numOfTrees);\n        assertEquals(node2, heap.min); // new node with key 5 should be the new minimum\n\n        // Test insert on heap with two elements\n        HeapNode node3 = heap.insert(15);\n        assertEquals(15, node3.key);\n        assertEquals(3, heap.numOfHeapNodes);\n        // Assuming the heap implementation doesn't consolidate on insert\n        assertEquals(3, heap.numOfTrees);\n        assertEquals(node2, heap.min); // min should not change as 15 > 5\n\n        // More test scenarios could be added here to thoroughly test the insert method\n    }\n\n    // This assumes that the FibonacciHeap has a method called 'empty'\n    // that checks whether the heap is empty or not.\n    private static class FibonacciHeap {\n        private HeapNode min;\n        private int numOfHeapNodes;\n        private int numOfTrees;\n\n        public boolean empty() {\n            return min == null;\n        }\n\n        public HeapNode insert(int key) {\n            HeapNode toInsert = new HeapNode(key);\n            if (this.empty()) {\n                this.min = toInsert;\n            } else {\n                min.setNext(toInsert); // Assuming setNext() adds the new node to the root list\n                this.updateMin(toInsert);\n            }\n            this.numOfHeapNodes++;\n            this.numOfTrees++;\n            return toInsert;\n        }\n\n        private void updateMin(HeapNode node) {\n            if (node.key < min.key) {\n                this.min = node;\n            }\n        }\n    }\n\n    // Also assuming that there's a HeapNode class with a key property and a `setNext` method.\n    private static class HeapNode {\n        int key;\n        HeapNode next; // Assuming this points to the next node in the root list\n\n        public HeapNode(int key) {\n            this.key = key;\n        }\n\n        public void setNext(HeapNode nextNode) {\n            this.next = nextNode;\n        }\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "NodeStack",
        "method_name": "push",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        \n        assertTrue(stack.isEmpty(), \"Stack should be empty initially\");\n        \n        stack.push(1);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push operation\");\n        \n        assertEquals(1, stack.size(), \"Stack size should be 1 after the first push operation\");\n        assertEquals(1, stack.peek().intValue(), \"Top element should be 1 after the first push\");\n        \n        stack.push(2);\n        assertEquals(2, stack.size(), \"Stack size should be 2 after the second push operation\");\n        assertEquals(2, stack.peek().intValue(), \"Top element should be 2 after the second push\");\n        \n        stack.push(3);\n        assertEquals(3, stack.size(), \"Stack size should be 3 after the third push operation\");\n        assertEquals(3, stack.peek().intValue(), \"Top element should be 3 after the third push\");\n    }\n}",
        "package_metric": 13.53,
        "class_metric": 52.83,
        "method_metric": 100.0,
        "pitest": 43.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "NodeStack",
        "method_name": "push",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<Integer>();\n\n        // Assert that the stack is initially empty\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially.\");\n\n        // Push elements into the stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n\n        // Assert that the stack size increments accordingly\n        assertEquals(3, stack.size(), \"Stack size should be 3 after pushing 3 elements.\");\n\n        // Confirm the stack top using peek\n        assertEquals(3, (int) stack.peek(), \"Top of the stack should be the last element pushed which is 3.\");\n\n        // Push another element\n        stack.push(4);\n\n        // Assert the new size and new top of the stack\n        assertEquals(4, stack.size(), \"Stack size should be 4 after pushing another element.\");\n        assertEquals(4, (int) stack.peek(), \"Top of the stack should be the new element pushed which is 4.\");\n\n        // Check that stack is not empty now\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after pushing elements.\");\n    }\n}",
        "package_metric": 13.53,
        "class_metric": 52.83,
        "method_metric": 100.0,
        "pitest": 43.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "NodeStack",
        "method_name": "push",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    private NodeStack<Integer> stack;\n\n    @BeforeEach\n    public void init() {\n        stack = new NodeStack<Integer>();\n    }\n    \n    @Test\n    public void pushTest() {\n        // Check if the stack is initially empty\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially\");\n\n        // Push an element and check if stack is not empty and size is 1\n        stack.push(1);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push\");\n        assertEquals(1, stack.size(), \"Stack size should be 1 after first push\");\n\n        // Push another element and check if the size increases\n        stack.push(2);\n        assertEquals(2, stack.size(), \"Stack size should be 2 after second push\");\n\n        // Push third element to see if it becomes the head\n        stack.push(3);\n        assertEquals(3, stack.size(), \"Stack size should be 3 after third push\");\n        assertEquals(3, stack.peek(), \"Top element should be equal to last element pushed\");\n\n        // Cleanup after test\n        stack = null;\n    }\n}",
        "package_metric": 13.53,
        "class_metric": 52.83,
        "method_metric": 100.0,
        "pitest": 43.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "NodeStack",
        "method_name": "push",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        \n        assertTrue(stack.isEmpty(), \"Stack should be empty initially.\");\n        \n        stack.push(1);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push.\");\n        assertEquals(1, (int) stack.peek(), \"Top element should be 1 after push.\");\n        assertEquals(1, stack.size(), \"Stack size should be 1 after one push.\");\n        \n        stack.push(2);\n        assertEquals(2, (int) stack.peek(), \"Top element should be 2 after second push.\");\n        assertEquals(2, stack.size(), \"Stack size should be 2 after two pushes.\");\n        \n        stack.push(3);\n        assertEquals(3, (int) stack.peek(), \"Top element should be 3 after third push.\");\n        assertEquals(3, stack.size(), \"Stack size should be 3 after three pushes.\");\n    }\n}",
        "package_metric": 13.53,
        "class_metric": 52.83,
        "method_metric": 100.0,
        "pitest": 43.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "NodeStack",
        "method_name": "push",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    \n    // This is the missing test method for the push method of the NodeStack class.\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n\n        // Verify stack is empty at the start\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially.\");\n        \n        // Push elements onto the stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n\n        // Verify the stack size is correct\n        assertEquals(3, stack.size(), \"Stack size should be 3 after three pushes.\");\n\n        // Verify the correct element is at the head of the stack (LIFO structure)\n        assertEquals(Integer.valueOf(3), stack.peek(), \"Top element should be 3.\");\n\n        // Verify the stack is not empty\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after elements are pushed.\");\n    }\n}",
        "package_metric": 13.53,
        "class_metric": 52.83,
        "method_metric": 100.0,
        "pitest": 43.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "NodeStack",
        "method_name": "push",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    \n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<Integer>();\n\n        // The stack should initially be empty.\n        assertTrue(stack.isEmpty(), \"Stack should be empty before pushing any items.\");\n\n        // Pushing an item to the stack should increase its size by 1.\n        stack.push(1);\n        assertEquals(1, stack.size(), \"Stack size should be 1 after pushing one item.\");\n\n        // Push another item and verify the size and the head element.\n        stack.push(2);\n        assertEquals(2, stack.size(), \"Stack size should be 2 after pushing another item.\");\n        assertEquals(2, stack.peek(), \"Top of the stack should be the latest item pushed.\");\n\n        // Push a third element and verify the stack size again.\n        stack.push(3);\n        assertEquals(3, stack.size(), \"Stack size should be 3 after pushing three items.\");\n        assertEquals(3, stack.peek(), \"Top of the stack should be the latest item pushed.\");\n        \n        // The stack contents should be 3 (head) - 2 - 1 (tail), if printed.\n    }\n}",
        "package_metric": 13.53,
        "class_metric": 52.83,
        "method_metric": 100.0,
        "pitest": 43.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "NodeStack",
        "method_name": "push",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    @Test\n    public void pushTest() {\n        NodeStack<String> stack = new NodeStack<>();\n\n        // Initial state should be empty\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially\");\n        assertEquals(0, stack.size(), \"Initial stack size should be 0\");\n\n        // Push first item\n        stack.push(\"First\");\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push\");\n        assertEquals(1, stack.size(), \"Stack size should be 1 after first push\");\n        assertEquals(\"First\", stack.peek(), \"Top of stack should be 'First' after first push\");\n\n        // Push a second item\n        stack.push(\"Second\");\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after second push\");\n        assertEquals(2, stack.size(), \"Stack size should be 2 after second push\");\n        assertEquals(\"Second\", stack.peek(), \"Top of stack should be 'Second' after second push\");\n\n        // Push a third item\n        stack.push(\"Third\");\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after third push\");\n        assertEquals(3, stack.size(), \"Stack size should be 3 after third push\");\n        assertEquals(\"Third\", stack.peek(), \"Top of stack should be 'Third' after third push\");\n    }\n}",
        "package_metric": 13.53,
        "class_metric": 52.83,
        "method_metric": 100.0,
        "pitest": 43.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "NodeStack",
        "method_name": "push",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    private NodeStack<String> stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new NodeStack<String>();\n    }\n\n    @Test\n    public void pushTest() {\n        assertTrue(stack.isEmpty(), \"Stack should be initially empty\");\n\n        String itemOne = \"Item 1\";\n        stack.push(itemOne);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push\");\n        assertEquals(1, stack.size(), \"Stack size should be 1 after one push\");\n        assertEquals(itemOne, stack.peek(), \"The top of the stack should be the first item pushed\");\n\n        String itemTwo = \"Item 2\";\n        stack.push(itemTwo);\n        assertEquals(2, stack.size(), \"Stack size should be 2 after two pushes\");\n        assertEquals(itemTwo, stack.peek(), \"The top of the stack should be the second item pushed\");\n\n        String itemThree = \"Item 3\";\n        stack.push(itemThree);\n        assertEquals(3, stack.size(), \"Stack size should be 3 after three pushes\");\n        assertEquals(itemThree, stack.peek(), \"The top of the stack should be the third item pushed\");\n    }\n}",
        "package_metric": 13.53,
        "class_metric": 52.83,
        "method_metric": 100.0,
        "pitest": 43.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "NodeStack",
        "method_name": "push",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    \n    private NodeStack<Integer> nodeStack;\n\n    @BeforeEach\n    public void setUp() {\n        nodeStack = new NodeStack<>();\n    }\n\n    @Test\n    public void pushTest() {\n        assertTrue(nodeStack.isEmpty(), \"Stack should be empty initially.\");\n        assertEquals(0, nodeStack.size(), \"Stack size should be 0 initially.\");\n\n        Integer firstElement = 1;\n        nodeStack.push(firstElement);\n        assertFalse(nodeStack.isEmpty(), \"Stack should not be empty after push.\");\n        assertEquals(1, nodeStack.size(), \"Stack size should be 1 after one push.\");\n        assertEquals(firstElement, nodeStack.peek(), \"Top element should be the same as pushed element.\");\n\n        Integer secondElement = 2;\n        nodeStack.push(secondElement);\n        assertFalse(nodeStack.isEmpty(), \"Stack should not be empty after second push.\");\n        assertEquals(2, nodeStack.size(), \"Stack size should be 2 after two pushes.\");\n        assertEquals(secondElement, nodeStack.peek(), \"Top element should be the same as last pushed element.\");\n    }\n}",
        "package_metric": 13.53,
        "class_metric": 52.83,
        "method_metric": 100.0,
        "pitest": 43.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "NodeStack",
        "method_name": "push",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    // Let's assume 'Item' is a valid, pre-defined class\n    private static class Item {\n        private int value;\n        \n        public Item(int value) {\n            this.value = value;\n        }\n    }\n\n    @Test\n    public void pushTest() {\n        NodeStack<Item> stack = new NodeStack<>();\n\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially\");\n        assertEquals(0, stack.size(), \"Size of stack should be 0 initially\");\n\n        Item firstItem = new Item(1);\n        stack.push(firstItem);\n\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after pushing an item\");\n        assertEquals(1, stack.size(), \"Size of stack should be 1 after pushing one item\");\n        assertEquals(firstItem, stack.peek(), \"Peek should return the first item\");\n\n        Item secondItem = new Item(2);\n        stack.push(secondItem);\n\n        assertEquals(2, stack.size(), \"Size of stack should be 2 after pushing another item\");\n        assertEquals(secondItem, stack.peek(), \"Peek should return the second item, which is the last pushed item\");\n\n        Item thirdItem = new Item(3);\n        stack.push(thirdItem);\n        \n        assertEquals(3, stack.size(), \"Size of stack should be 3 after pushing the third item\");\n        assertEquals(thirdItem, stack.peek(), \"Peek should return the third item\");\n    }\n}",
        "package_metric": 13.53,
        "class_metric": 52.83,
        "method_metric": 100.0,
        "pitest": 43.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "NodeStack",
        "method_name": "push",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially.\");\n\n        Integer firstElement = 10;\n        stack.push(firstElement);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push.\");\n\n        assertEquals(firstElement, stack.peek(), \"Top element should be equal to the first pushed element.\");\n        assertEquals(1, stack.size(), \"Stack size should be equal to 1 after first push.\");\n\n        Integer secondElement = 20;\n        stack.push(secondElement);\n        assertEquals(secondElement, stack.peek(), \"Top element should be updated to the second pushed element.\");\n        assertEquals(2, stack.size(), \"Stack size should be equal to 2 after second push.\");\n\n        Integer thirdElement = 30;\n        stack.push(thirdElement);\n        assertEquals(thirdElement, stack.peek(), \"Top element should be updated to the third pushed element.\");\n        assertEquals(3, stack.size(), \"Stack size should be equal to 3 after third push.\");\n    }\n}",
        "package_metric": 13.53,
        "class_metric": 52.83,
        "method_metric": 100.0,
        "pitest": 43.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "AVLTree",
        "method_name": "rotateLeft",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AVLTreeTest {\n\n    private class Node {\n        Node left;\n        Node right;\n        Node parent;\n        int balance;\n\n        // Assuming there is an integer value for each node (for test)\n        int value;\n\n        Node(int value) {\n            this.value = value;\n        }\n    }\n\n    private void setBalance(Node... nodes) {\n        for (Node n : nodes) {\n          // Placeholder for actual balance-setting logic\n          n.balance = 0;\n        }\n    }\n\n    // Insert rotateLeft method here to test it\n\n    @Test\n    public void rotateLeftTest() {\n        Node parent = new Node(1);\n        Node a = new Node(2);\n        parent.right = a;\n        a.parent = parent;\n        \n        Node b = new Node(3);\n        a.right = b;\n        b.parent = a;\n        \n        Node aLeftChild = new Node(4);\n        a.left = aLeftChild;\n        \n        Node bLeftChild = new Node(5);\n        b.left = bLeftChild;\n        bLeftChild.parent = b;\n        \n        AVLTreeTest testInstance = new AVLTreeTest();\n        Node result = testInstance.rotateLeft(a);\n        \n        assertEquals(b, result);\n        assertEquals(a, b.left);\n        assertEquals(parent, b.parent);\n        assertEquals(aLeftChild, result.left.left);\n        assertEquals(bLeftChild, result.left.right);\n        assertNull(result.right);\n        assertEquals(parent.right, result);\n    }\n\n    private Node rotateLeft(Node a) {\n        Node b = a.right;\n        b.parent = a.parent;\n\n        a.right = b.left;\n\n        if (a.right != null) {\n            a.right.parent = a;\n        }\n\n        b.left = a;\n        a.parent = b;\n\n        if (b.parent != null) {\n            if (b.parent.right == a) {\n                b.parent.right = b;\n            } else {\n                b.parent.left = b;\n            }\n        }\n\n        setBalance(a, b);\n\n        return b;\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "AVLTree",
        "method_name": "rotateLeft",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AVLTreeTest {\n\n    private static class Node { // A mock Node class for testing purposes\n        Node left, right, parent;\n        int key; // assumed to have a key for identification\n\n        public Node(int key) {\n            this.key = key;\n        }\n    }\n\n    private Node rotateLeft(Node a) {\n        Node b = a.right;\n        b.parent = a.parent;\n\n        a.right = b.left;\n\n        if (a.right != null) {\n            a.right.parent = a;\n        }\n\n        b.left = a;\n        a.parent = b;\n\n        if (b.parent != null) {\n            if (b.parent.right == a) {\n                b.parent.right = b;\n            } else {\n                b.parent.left = b;\n            }\n        }\n\n        // Assuming setBalance exists and modifies the balance factor of the nodes\n        setBalance(a, b);\n\n        return b;\n    }\n\n    // Mock method for setBalance, assuming it sets balance factors correctly\n    private void setBalance(Node... nodes) {\n        for (Node n : nodes) {\n            // No-op, in real code this would set balance factors\n        }\n    }\n\n    @Test\n    public void rotateLeftTest() {\n        Node root = new Node(1);\n        Node rightChild = new Node(2);\n        root.right = rightChild;\n        rightChild.parent = root;\n\n        Node result = rotateLeft(root);\n\n        // After rotation, check that the former right child is now the root\n        assertEquals(rightChild, result);\n        // The new root (former right child) should have no parent\n        assertNull(result.parent);\n        // The original root should be the left child of the new root\n        assertEquals(root, result.left);\n        // The parent of the original root should now be the new root\n        assertEquals(result, root.parent);\n        // The original left child of the new root should be null\n        assertNull(result.left.right);\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "AVLTree",
        "method_name": "rotateLeft",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AVLTreeTest {\n\n    static class Node {\n        Node left;\n        Node right;\n        Node parent;\n        // Suppose we have a value and balance as well\n        int value;\n        int balance;\n\n        public Node(int value) {\n            this.value = value;\n            this.left = null;\n            this.right = null;\n            this.parent = null;\n        }\n    }\n\n    // Helper method to set the balance, assuming it simply sets it for now\n    private void setBalance(Node... nodes) {\n        for (Node n : nodes) {\n            n.balance = 0; // Placeholder for actual balance logic\n        }\n    }\n\n    private Node rotateLeft(Node a) {\n        Node b = a.right;\n        b.parent = a.parent;\n\n        a.right = b.left;\n\n        if (a.right != null) {\n            a.right.parent = a;\n        }\n\n        b.left = a;\n        a.parent = b;\n\n        if (b.parent != null) {\n            if (b.parent.right == a) {\n                b.parent.right = b;\n            } else {\n                b.parent.left = b;\n            }\n        }\n\n        setBalance(a, b);\n\n        return b;\n    }\n\n    @Test\n    public void rotateLeftTest() {\n        // Create the structure of the nodes\n        Node a = new Node(1);\n        Node b = new Node(2);\n        Node c = new Node(3);\n\n        // Create the initial link a -> b -> c\n        a.right = b;\n        b.parent = a;\n        b.right = c;\n        c.parent = b;\n\n        // Apply rotation\n        Node result = rotateLeft(a);\n\n        // Check the result of the rotation\n        assertSame(b, result);\n        assertSame(a, result.left);\n        assertSame(c, result.right);\n        assertNull(result.parent);\n        \n        // Check the children's pointers\n        assertSame(result, a.parent);\n        assertNull(a.left);\n        assertNull(a.right);\n        \n        assertSame(result, c.parent);\n        assertNull(c.left);\n        assertNull(c.right);\n        \n        // If balance is being set, verify it has been set correctly\n        // Assuming balance should be 0 after rotation for simplicity\n        assertEquals(0, a.balance);\n        assertEquals(0, b.balance);\n        assertEquals(0, c.balance);\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void averageTest() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average((int[])null);\n        }, \"Numbers array cannot be empty or null\");\n\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(new int[]{});\n        }, \"Numbers array cannot be empty or null\");\n\n        assertEquals(2, Average.average(new int[]{2, 2, 2, 2, 2}),\n                \"The average of [2, 2, 2, 2, 2] should be 2\");\n\n        assertEquals(3, Average.average(new int[]{1, 2, 3, 4, 5}),\n                \"The average of [1, 2, 3, 4, 5] should be 3\");\n\n        assertEquals(4, Average.average(new int[]{3, 4, 5}),\n                \"The average of [3, 4, 5] should be 4\");\n\n        assertEquals(0, Average.average(new int[]{-1, 1}),\n                \"The average of [-1, 1] should be 0\");\n\n        assertEquals(-2, Average.average(new int[]{-3, -2, -1}),\n                \"The average of [-3, -2, -1] should be -2\");\n    }\n}",
        "package_metric": 0.37,
        "class_metric": 46.15,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void testAverageWithIntegers() {\n        // Test with a simple case for integers\n        int[] integers = {1, 2, 3, 4, 5};\n        int expectedAverage = 3;\n        assertEquals(expectedAverage, Average.average(integers), \"The average should be correct\");\n\n        // Test with negative integers\n        int[] negativeIntegers = {-3, -2, -1, 0, 1, 2};\n        expectedAverage = -0; // -0.5 rounds to 0 when cast to int\n        assertEquals(expectedAverage, Average.average(negativeIntegers), \"The average with negative numbers should be correct\");\n    }\n\n    @Test\n    public void testAverageWithDoubles() {\n        // Test with a simple case for doubles\n        double[] doubles = {1.5, 2.5, 3.5, 4.5, 5.5};\n        double expectedAverage = 3.5;\n        assertEquals(expectedAverage, Average.average(doubles), 0.00001, \"The average should be correct for doubles\");\n\n        // Test with negative doubles\n        double[] negativeDoubles = {-5.0, -4.0, -3.0, -2.0, -1.0};\n        expectedAverage = -3.0;\n        assertEquals(expectedAverage, Average.average(negativeDoubles), \"The average with negative doubles should be correct\");\n    }\n\n    @Test\n    public void testAverageWithEmptyArray() {\n        // Test with an empty array\n        int[] emptyArray = {};\n        assertThrows(IllegalArgumentException.class, () -> Average.average(emptyArray), \"Empty array should throw an exception\");\n\n        double[] emptyDoubleArray = {};\n        assertThrows(IllegalArgumentException.class, () -> Average.average(emptyDoubleArray), \"Empty array of doubles should throw an exception\");\n    }\n\n    @Test\n    public void testAverageWithNullArray() {\n        // Test with a null array\n        assertThrows(IllegalArgumentException.class, () -> Average.average((int[]) null), \"Null array should throw an exception\");\n\n        assertThrows(IllegalArgumentException.class, () -> Average.average((double[]) null), \"Null array of doubles should throw an exception\");\n    }\n}",
        "package_metric": 0.74,
        "class_metric": 92.31,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    \n    @Test\n    public void testAverageWithIntegers() {\n        // Case with simple integers\n        int[] intNumbers = {1, 2, 3, 4, 5};\n        assertEquals(3, Average.average(intNumbers));\n\n        // Case with larger range of integers\n        int[] largeIntNumbers = {-102, 0, 9, 7, 1024};\n        assertEquals(187, Average.average(largeIntNumbers));\n    }\n    \n    @Test\n    public void testAverageWithDoubles() {\n        // Case with simple doubles\n        double[] doubleNumbers = {1.0, 2.0, 3.0, 4.0, 5.0};\n        assertEquals(3.0, Average.average(doubleNumbers));\n\n        // Case with large range and non-integral values\n        double[] largeDoubleNumbers = {-1.5, 0.0, 9.25, 100.0, 500.1};\n        assertEquals(121.57, Average.average(largeDoubleNumbers), 0.01);\n    }\n    \n    @Test\n    public void testEmptyArray() {\n        // Expect exception for empty array of integers\n        int[] emptyIntArray = {};\n        Exception exception1 = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(emptyIntArray);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception1.getMessage());\n        \n        // Expect exception for empty array of doubles\n        double[] emptyDoubleArray = {};\n        Exception exception2 = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(emptyDoubleArray);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception2.getMessage());\n    }\n    \n    @Test\n    public void testNullArray() {\n        // Expect exception for null array of integers\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average((int[])null);\n        });\n        \n        // Expect exception for null array of doubles\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average((double[])null);\n        });\n    }\n}",
        "package_metric": 0.74,
        "class_metric": 92.31,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void averageWithValidIntArray() {\n        // Test with a valid int array\n        int[] numbers = {1, 2, 3, 4, 5};\n        int expectedAverage = 3;\n        assertEquals(expectedAverage, Average.average(numbers), \"The average should be 3\");\n    }\n\n    @Test\n    public void averageWithValidDoubleArray() {\n        // Test with a valid double array\n        double[] numbers = {1.0, 2.0, 3.0, 4.0, 5.0};\n        double expectedAverage = 3.0;\n        assertEquals(expectedAverage, Average.average(numbers), 0.01, \"The average should be 3.0\");\n    }\n\n    @Test\n    public void averageWithEmptyArray() {\n        // Test with an empty int array\n        int[] numbers = {};\n        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers), \"Should throw an IllegalArgumentException for an empty array\");\n    }\n\n    @Test\n    public void averageWithNullIntArray() {\n        // Test with null as input for int array\n        int[] numbers = null;\n        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers), \"Should throw an IllegalArgumentException for null input\");\n    }\n\n    @Test\n    public void averageWithEmptyDoubleArray() {\n        // Test with an empty double array\n        double[] numbers = {};\n        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers), \"Should throw an IllegalArgumentException for an empty array\");\n    }\n\n    @Test\n    public void averageWithNullDoubleArray() {\n        // Test with null as input for double array\n        double[] numbers = null;\n        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers), \"Should throw an IllegalArgumentException for null input\");\n    }\n}",
        "package_metric": 0.74,
        "class_metric": 92.31,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void averageTestValidInput() {\n        // Test with a valid int array\n        assertEquals(3, Average.average(new int[]{2, 3, 4}));\n        // Test with a valid double array\n        assertEquals(3.0, Average.average(new double[]{2.0, 3.0, 4.0}), 0.0001);\n        \n        // Assuming more tests may include boundary conditions, large sums, and precision checks for doubles.\n        // Note: 0.0001 is the delta precision for double comparisons.\n    }\n\n    @Test\n    public void averageTestWithEmptyArray() {\n        // Test with an empty int array\n        Exception exceptionInt = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(new int[]{});\n        });\n        assertTrue(exceptionInt.getMessage().contains(\"Numbers array cannot be empty or null\"));\n        \n        // Test with an empty double array\n        Exception exceptionDouble = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(new double[]{});\n        });\n        assertTrue(exceptionDouble.getMessage().contains(\"Numbers array cannot be empty or null\"));\n    }\n\n    @Test\n    public void averageTestWithNull() {\n        // Test with null as input for int array\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average((int[]) null);\n        });\n\n        // Test with null as input for double array\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average((double[]) null);\n        });\n    }\n}",
        "package_metric": 0.74,
        "class_metric": 92.31,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void testAverageWithTypicalArray() {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int expectedAverage = 3;\n        assertEquals(expectedAverage, Average.average(numbers), \"The average of a typical array should be calculated correctly.\");\n    }\n\n    @Test\n    public void testAverageWithSingleElementArray() {\n        int[] numbers = {5};\n        int expectedAverage = 5;\n        assertEquals(expectedAverage, Average.average(numbers), \"The average of a single-element array should be the element itself.\");\n    }\n\n    @Test\n    public void testAverageWithNullArray() {\n        int[] numbers = null;\n        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers), \"Passing a null array should result in IllegalArgumentException.\");\n    }\n\n    @Test\n    public void testAverageWithEmptyArray() {\n        int[] numbers = {};\n        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers), \"Passing an empty array should result in IllegalArgumentException.\");\n    }\n}",
        "package_metric": 0.37,
        "class_metric": 46.15,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void averageTestValidArray() {\n        int[] numbers = {2, 3, 5, 7, 11};\n        assertEquals(5, Average.average(numbers), \"The average should be 5\");\n    }\n\n    @Test\n    public void averageTestEmptyArray() {\n        int[] numbers = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(numbers);\n        });\n\n        String expectedMessage = \"Numbers array cannot be empty or null\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage), \"Expected an IllegalArgumentException with the message: \" + expectedMessage);\n    }\n    \n    @Test\n    public void averageTestNullArray() {\n        int[] numbers = null;\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(numbers);\n        });\n\n        String expectedMessage = \"Numbers array cannot be empty or null\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage), \"Expected an IllegalArgumentException with the message: \" + expectedMessage);\n    }\n    \n    @Test\n    public void averageTestSingleElementArray() {\n        int[] numbers = {5};\n        assertEquals(5, Average.average(numbers), \"The average of a single element array should be the element itself\");\n    }\n\n    @Test\n    public void averageTestLargeNumbers() {\n        int[] numbers = {Integer.MAX_VALUE, Integer.MAX_VALUE};\n        assertEquals(Integer.MAX_VALUE, Average.average(numbers), \"The average of a max int value array should be the max int value\");\n    }\n\n}",
        "package_metric": 0.37,
        "class_metric": 46.15,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    \n    @Test\n    public void averageTest() {\n        // Test with a valid array of numbers\n        int[] validNumbers = {1, 2, 3, 4, 5};\n        assertEquals(3, Average.average(validNumbers), \"The average should be 3\");\n        \n        // Test with a single number\n        int[] singleNumber = {42};\n        assertEquals(42, Average.average(singleNumber), \"The average of a single number should be the number itself\");\n        \n        // Test to verify the behavior when passing an empty array\n        int[] emptyNumbers = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> Average.average(emptyNumbers));\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage(), \"Expected IllegalArgumentException for an empty array\");\n        \n        // Test to verify the behavior when passing a null array\n        int[] nullNumbers = null;\n        Exception nullException = assertThrows(IllegalArgumentException.class, () -> Average.average(nullNumbers));\n        assertEquals(\"Numbers array cannot be empty or null\", nullException.getMessage(), \"Expected IllegalArgumentException for null input\");\n        \n        // Test with large numbers to check for integer overflow\n        int[] largeNumbers = {Integer.MAX_VALUE, Integer.MAX_VALUE};\n        assertEquals(Integer.MAX_VALUE, Average.average(largeNumbers), \"The average should handle the overflow scenario correctly\");\n    }\n}",
        "package_metric": 0.37,
        "class_metric": 46.15,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void testWithValidArray() {\n        int[] numbers = {10, 20, 30, 40, 50};\n        int expectedAverage = 30;\n        int actualAverage = Average.average(numbers);\n        assertEquals(expectedAverage, actualAverage, \"The average of a valid array should be calculated correctly.\");\n    }\n\n    @Test\n    public void testWithSingleElementArray() {\n        int[] numbers = {7};\n        int expectedAverage = 7;\n        int actualAverage = Average.average(numbers);\n        assertEquals(expectedAverage, actualAverage, \"The average of a single-element array should be the element itself.\");\n    }\n\n    @Test\n    public void testWithEmptyArray() {\n        int[] numbers = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> Average.average(numbers));\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage(), \"An empty array should throw an IllegalArgumentException.\");\n    }\n\n    @Test\n    public void testWithNullArray() {\n        int[] numbers = null;\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> Average.average(numbers));\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage(), \"A null array should throw an IllegalArgumentException.\");\n    }\n\n    // This test checks correct handling of potential integer overflow.\n    @Test\n    public void testWithLargeNumbers() {\n        // Assuming the overflow behavior is not part of the specification.\n        // This test would be a point of discussion for expected behavior with the development team.\n        int[] numbers = {Integer.MAX_VALUE, Integer.MAX_VALUE};\n        int expectedAverage = Integer.MAX_VALUE; // Averaging two maximum integers should normally cause overflow.\n        int actualAverage = Average.average(numbers);\n        assertEquals(expectedAverage, actualAverage, \"The average of large numbers should handle overflow correctly if it is within the method specification.\");\n    }\n}",
        "package_metric": 0.37,
        "class_metric": 46.15,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    \n    @Test\n    public void testAverageWithValidArray() {\n        // Given\n        int[] numbers = {1, 2, 3, 4, 5};\n        \n        // When\n        int result = Average.average(numbers);\n        \n        // Then\n        assertEquals(3, result);\n    }\n    \n    @Test\n    public void testAverageWithOneElement() {\n        // Given\n        int[] numbers = {42};\n        \n        // When\n        int result = Average.average(numbers);\n        \n        // Then\n        assertEquals(42, result);\n    }\n    \n    @Test\n    public void testAverageWithLargeNumbers() {\n        // Given\n        int[] numbers = {Integer.MAX_VALUE, Integer.MAX_VALUE};\n        \n        // When\n        int result = Average.average(numbers);\n        \n        // Then\n        assertEquals(Integer.MAX_VALUE, result);\n    }\n\n    @Test\n    public void testAverageWithNegativeNumbers() {\n        // Given\n        int[] numbers = {-1, -2, -3, -4, -5};\n        \n        // When\n        int result = Average.average(numbers);\n        \n        // Then\n        assertEquals(-3, result);\n    }\n\n    @Test\n    public void testAverageWithMixedNumbers() {\n        // Given\n        int[] numbers = {-2, -1, 0, 1, 2};\n        \n        // When\n        int result = Average.average(numbers);\n        \n        // Then\n        assertEquals(0, result);\n    }\n    \n    @Test\n    public void testAverageThrowsExceptionForEmptyArray() {\n        // Given\n        int[] numbers = {};\n        \n        // When & Then\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(numbers);\n        });\n    }\n    \n    @Test\n    public void testAverageThrowsExceptionForNullInput() {\n        // Given\n        int[] numbers = null;\n        \n        // When & Then\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(numbers);\n        });\n    }\n}",
        "package_metric": 0.37,
        "class_metric": 46.15,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageWithValidNumbers() {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int expected = 3;\n        int actual = Average.average(numbers);\n        assertEquals(expected, actual, \"The average of valid numbers should be calculated correctly.\");\n    }\n\n    @Test\n    public void averageWithSingleNumber() {\n        int[] numbers = {42};\n        int expected = 42;\n        int actual = Average.average(numbers);\n        assertEquals(expected, actual, \"The average of a single number should be the number itself.\");\n    }\n\n    @Test\n    public void averageWithNegativeNumbers() {\n        int[] numbers = {-1, -2, -3, -4, -5};\n        int expected = -3;\n        int actual = Average.average(numbers);\n        assertEquals(expected, actual, \"The average of negative numbers should be calculated correctly.\");\n    }\n\n    @Test\n    public void averageWithMixedNumbers() {\n        int[] numbers = {-1, 0, 1, 2, 3};\n        int expected = 1; // sum is 5 divided by 5\n        int actual = Average.average(numbers);\n        assertEquals(expected, actual, \"The average of a mix of positive, negative, and zero values should be calculated correctly.\");\n    }\n\n    @Test\n    public void averageThrowsIllegalArgumentExceptionForEmptyArray() {\n        int[] numbers = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(numbers);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage(), \"An IllegalArgumentException should be thrown for an empty array.\");\n    }\n\n    @Test\n    public void averageThrowsIllegalArgumentExceptionForNullArray() {\n        int[] numbers = null;\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(numbers);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage(), \"An IllegalArgumentException should be thrown for a null array.\");\n    }\n}",
        "package_metric": 0.37,
        "class_metric": 46.15,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void testAverageWithNonEmptyArray() {\n        // Given\n        int[] numbers = new int[]{2, 4, 6, 8};\n\n        // When\n        int actualAverage = Average.average(numbers);\n\n        // Then\n        assertEquals(5, actualAverage, \"The average should be 5\");\n    }\n\n    @Test\n    public void testAverageWithSingleElementArray() {\n        // Given\n        int[] numbers = new int[]{5};\n\n        // When\n        int actualAverage = Average.average(numbers);\n\n        // Then\n        assertEquals(5, actualAverage, \"The average of a single element array should be the element itself\");\n    }\n\n    @Test\n    public void testAverageWithNegativeNumbers() {\n        // Given\n        int[] numbers = new int[]{-3, -2, -1, 0, 1, 2, 3};\n\n        // When\n        int actualAverage = Average.average(numbers);\n\n        // Then\n        assertEquals(0, actualAverage, \"The average of this mixed numbers array should be 0\");\n    }\n\n    @Test\n    public void testAverageWithEmptyArray() {\n        // Given\n        int[] numbers = {};\n\n        // When / Then\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(numbers);\n        });\n\n        //Assert\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage(), \"An empty array should throw IllegalArgumentException with the correct message\");\n    }\n\n    @Test\n    public void testAverageWithNullArray() {\n        // Given\n        int[] numbers = null;\n\n        // When / Then\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(numbers);\n        });\n\n        //Assert\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage(), \"A null array should throw IllegalArgumentException with the correct message\");\n    }\n}",
        "package_metric": 0.37,
        "class_metric": 46.15,
        "method_metric": 100.0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/graphs",
        "package_name": "com.thealgorithms.datastructures.graphs",
        "class_name": "Graph",
        "method_name": "countGraphs",
        "test_code": "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n\n    @Test\n    public void countGraphsTest() {\n        // Test case for graph with characters\n        Graph<Character> graphChars = new Graph<>();\n\n        // Graph 1\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n\n        // Graph 2 (disconnected from Graph 1)\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n\n        // Graph 3 (disconnected and consists of a single self-loop)\n        graphChars.addEdge('w', 'w');\n\n        // Assert there are 3 different char-graphs\n        int countCharGraphs = graphChars.countGraphs();\n        assertEquals(3, countCharGraphs, \"The amount of different char-graphs is incorrect.\");\n\n        // Test case for graph with integers\n        Graph<Integer> graphInts = new Graph<>();\n\n        // Graph 1\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n\n        // Graph 2 (disconnected from Graph 1)\n        graphInts.addEdge(7, 8);\n        graphInts.addEdge(8, 10);\n        graphInts.addEdge(10, 8);\n\n        // Assert there are 2 different int-graphs\n        int countIntGraphs = graphInts.countGraphs();\n        assertEquals(2, countIntGraphs, \"The amount of different int-graphs is incorrect.\");\n    }\n}",
        "package_metric": 4.75,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 90.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/graphs",
        "package_name": "com.thealgorithms.datastructures.graphs",
        "class_name": "Graph",
        "method_name": "countGraphs",
        "test_code": "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    \n    // Test with Character Nodes\n    @Test\n    public void countGraphsTestWithChars() {\n        Graph<Character> graphChars = new Graph<>();\n        \n        // Graph 1\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n\n        // Graph 2\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n\n        // Graph 3 (self-loop)\n        graphChars.addEdge('w', 'w');\n        \n        int count = graphChars.countGraphs();\n        assertEquals(3, count, \"The number of connected components should be 3\");\n    }\n\n    // Test with Integer Nodes\n    @Test\n    public void countGraphsTestWithInts() {\n        Graph<Integer> graphInts = new Graph<>();\n        \n        // Graph 1\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n\n        // Graph 2\n        graphInts.addEdge(7, 8);\n        graphInts.addEdge(8, 10);\n        graphInts.addEdge(10, 8);\n        \n        int count = graphInts.countGraphs();\n        assertEquals(2, count, \"The number of connected components should be 2\");\n    }\n}",
        "package_metric": 4.75,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 90.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/graphs",
        "package_name": "com.thealgorithms.datastructures.graphs",
        "class_name": "Graph",
        "method_name": "countGraphs",
        "test_code": "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a new Graph of Characters\n        Graph<Character> graphChars = new Graph<>();\n        // Add edges to form a single connected component ('a' to 'e' and 'x' to 'z')\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'e');\n        graphChars.addEdge('e', 'a');\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('y', 'z');\n        graphChars.addEdge('z', 'x');\n        // Expected count is 2: one for each graph 1 ('a' to 'e') and graph 2 ('x' to 'z')\n        assertEquals(2, graphChars.countGraphs(), \"Character graph should have 2 connected components.\");\n\n        // Create a new Graph of Integers\n        Graph<Integer> graphInts = new Graph<>();\n        // Add edges to form two connected components\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        // Second component\n        graphInts.addEdge(4, 5);\n        graphInts.addEdge(5, 6);\n        graphInts.addEdge(6, 4);\n        // Expected count is 2: one for each graph 1 (1 to 3) and graph 2 (4 to 6)\n        assertEquals(2, graphInts.countGraphs(), \"Integer graph should have 2 connected components.\");\n    }\n}",
        "package_metric": 4.75,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/graphs",
        "package_name": "com.thealgorithms.datastructures.graphs",
        "class_name": "Graph",
        "method_name": "countGraphs",
        "test_code": "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n\n    @Test\n    void countGraphsTest() {\n        Graph<Character> graphChars = new Graph<>();\n\n        // Graph 1\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n\n        graphChars.addEdge('w', 'w');\n\n        assertEquals(3, graphChars.countGraphs(), \"Count of disconnected char-graphs should be 3\");\n\n        Graph<Integer> graphInts = new Graph<>();\n\n        // Graph 2\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n\n        graphInts.addEdge(7, 8);\n        graphInts.addEdge(8, 10);\n        graphInts.addEdge(10, 8);\n\n        assertEquals(2, graphInts.countGraphs(), \"Count of disconnected int-graphs should be 2\");\n    }\n}",
        "package_metric": 4.75,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 90.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/graphs",
        "package_name": "com.thealgorithms.datastructures.graphs",
        "class_name": "Graph",
        "method_name": "countGraphs",
        "test_code": "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n\n    @Test\n    public void countGraphsTest() {\n        Graph<Character> graphChars = new Graph<>();\n\n        // Graph 1\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n\n        graphChars.addEdge('w', 'w');\n\n        Graph<Integer> graphInts = new Graph<>();\n\n        // Graph 2\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n\n        graphInts.addEdge(7, 8);\n        graphInts.addEdge(8, 10);\n        graphInts.addEdge(10, 8);\n\n        assertEquals(3, graphChars.countGraphs(), \"The character graph should contain 3 connected components.\");\n        assertEquals(2, graphInts.countGraphs(), \"The integer graph should contain 2 connected components.\");\n    }\n}",
        "package_metric": 4.75,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 90.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/graphs",
        "package_name": "com.thealgorithms.datastructures.graphs",
        "class_name": "Graph",
        "method_name": "countGraphs",
        "test_code": "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Test with Character type\n        Graph<Character> graphChars = new Graph<>();\n        // Graph 1\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n        // Another component\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n        // Another component with single node\n        graphChars.addEdge('w', 'w');\n\n        // There should be 3 separate components in the graphChars\n        assertEquals(3, graphChars.countGraphs());\n\n        // Test with Integer type\n        Graph<Integer> graphInts = new Graph<>();\n        // Graph 2\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n        // Another component\n        graphInts.addEdge(7, 8);\n        graphInts.addEdge(8, 10);\n        graphInts.addEdge(10, 8);\n\n        // There should be 2 separate components in the graphInts\n        assertEquals(2, graphInts.countGraphs());\n    }\n}",
        "package_metric": 4.75,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 90.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/graphs",
        "package_name": "com.thealgorithms.datastructures.graphs",
        "class_name": "Graph",
        "method_name": "countGraphs",
        "test_code": "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    \n    @Test\n    public void countGraphsTest() {\n        // Testing with Character graph.\n        Graph<Character> graphChars = new Graph<>();\n        \n        // Graph 1 - fully connected component.\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n\n        // Graph 2 - another fully connected component.\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n\n        // Graph 3 - single node graph.\n        graphChars.addEdge('w', 'w');\n        \n        assertEquals(3, graphChars.countGraphs(), \"Graph with characters should contain 3 separate connected components.\");\n\n        // Testing with Integer graph.\n        Graph<Integer> graphInts = new Graph<>();\n        \n        // Graph 1 - fully connected component.\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n\n        // Graph 2 - fully connected component with a cycle.\n        graphInts.addEdge(7, 8);\n        graphInts.addEdge(8, 10);\n        graphInts.addEdge(10, 8);\n        \n        assertEquals(2, graphInts.countGraphs(), \"Graph with integers should contain 2 separate connected components.\");\n    }\n}",
        "package_metric": 4.75,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 90.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/graphs",
        "package_name": "com.thealgorithms.datastructures.graphs",
        "class_name": "Graph",
        "method_name": "countGraphs",
        "test_code": "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a graph for characters\n        Graph<Character> graphChars = new Graph<>();\n        // Graph 1\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n\n        // A separate component\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n\n        // A separate self-loop component\n        graphChars.addEdge('w', 'w');\n\n        // Assert that there are three separate components\n        assertEquals(3, graphChars.countGraphs(), \"Amount of different char-graphs should be 3\");\n\n        // Create a graph for integers\n        Graph<Integer> graphInts = new Graph<>();\n        // Graph 2\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n\n        // A separate component\n        graphInts.addEdge(7, 8);\n        graphInts.addEdge(8, 10);\n        graphInts.addEdge(10, 8);\n\n        // Assert that there are two separate components\n        assertEquals(2, graphInts.countGraphs(), \"Amount of different int-graphs should be 2\");\n    }\n}",
        "package_metric": 4.75,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 90.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/graphs",
        "package_name": "com.thealgorithms.datastructures.graphs",
        "class_name": "Graph",
        "method_name": "countGraphs",
        "test_code": "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a graph instance for Character nodes\n        Graph<Character> graphChars = new Graph<>();\n        // Graph 1\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n        // Disconnected graph with nodes 'x', 'y', and 'z'\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n        // Self-loop graph\n        graphChars.addEdge('w', 'w');\n        \n        // Create a graph instance for Integer nodes\n        Graph<Integer> graphInts = new Graph<>();\n        // Graph 2\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n        // Disconnected graph with nodes '7', '8', and '10'\n        graphInts.addEdge(7, 8);\n        graphInts.addEdge(8, 10);\n        graphInts.addEdge(10, 8);\n\n        // Assert that graphChars has 3 disconnected graphs\n        assertEquals(3, graphChars.countGraphs(), \"Incorrect count of disconnected char-graphs\");\n\n        // Assert that graphInts has 2 disconnected graphs\n        assertEquals(2, graphInts.countGraphs(), \"Incorrect count of disconnected int-graphs\");\n    }\n}",
        "package_metric": 4.75,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 90.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/graphs",
        "package_name": "com.thealgorithms.datastructures.graphs",
        "class_name": "Graph",
        "method_name": "countGraphs",
        "test_code": "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    // Assuming that Graph<E> is a parameterized type and a Node constructor and addEdge method accept parameters of type E.\n    \n    Graph<Integer> graph;\n    \n    @BeforeEach\n    public void setUp() {\n        graph = new Graph<>();\n    }\n\n    @Test\n    public void countGraphsTest() {\n        // Assuming that a graph can add nodes and edges via the addEdge method.\n        // Adding edges and nodes for the first connected component\n        graph.addEdge(1, 2);\n        graph.addEdge(2, 3);\n\n        // Adding edges and nodes for the second connected component\n        graph.addEdge(4, 5);\n\n        // Adding a standalone node (third connected component)\n        graph.addEdge(6, 6); // Self-loop to add the node to the graph\n\n        // There should be three connected components total\n        assertEquals(3, graph.countGraphs(), \"The count of connected components should be 3\");\n\n        // Adding an edge between two existing components should decrease the count\n        graph.addEdge(3, 4);\n\n        // Now there should be two connected components, since nodes 1-2-3 are connected with 4-5\n        assertEquals(2, graph.countGraphs(), \"The count of connected components should be 2 after connecting two components with an edge\");\n    }\n    \n    // Add any additional tests as necessary...\n}",
        "package_metric": 4.75,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 90.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/graphs",
        "package_name": "com.thealgorithms.datastructures.graphs",
        "class_name": "Graph",
        "method_name": "countGraphs",
        "test_code": "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n\n    @Test\n    public void countGraphsTest() {\n        // Create an instance of the Graph class\n        Graph<String> graph = new Graph<>();\n        \n        // Test with empty graph (no nodes)\n        assertEquals(0, graph.countGraphs(), \"An empty graph should have 0 connected components.\");\n\n        // Add nodes and edges to form two separate graphs: \n        // Graph 1: A-B-C (connected graph)\n        graph.addEdge(\"A\", \"B\");\n        graph.addEdge(\"B\", \"C\");\n        \n        // Graph 2: D-E (connected graph), independent of Graph 1\n        graph.addEdge(\"D\", \"E\");\n\n        assertEquals(2, graph.countGraphs(), \"Graph should have 2 connected components.\");\n\n        // Adding an edge to connect the two separate graphs: B-D\n        graph.addEdge(\"B\", \"D\");\n\n        assertEquals(1, graph.countGraphs(), \"Graph should have 1 connected component after connecting the two separate graphs.\");\n    }\n}",
        "package_metric": 4.75,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 90.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "FloodFill",
        "method_name": "floodFill",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FloodFillTest {\n\n    @Test\n    public void floodFillTest() {\n        // Initialize an image (2D array) with a pattern\n        int[][] image = {\n            {1, 1, 1, 1},\n            {1, 1, 0, 1},\n            {1, 0, 1, 1},\n            {1, 1, 1, 1}\n        };\n\n        // Define old color to replace and new color\n        int oldColor = 1;\n        int newColor = 2;\n\n        // Call the floodFill method on a specific starting coordinate\n        FloodFill.floodFill(image, 1, 1, newColor, oldColor);\n\n        // Expected result after flood fill algorithm is applied\n        int[][] expectedImage = {\n            {2, 2, 2, 2},\n            {2, 2, 0, 2},\n            {2, 0, 2, 2},\n            {2, 2, 2, 2}\n        };\n\n        // Assert that the flood filled image matches the expected result\n        assertArrayEquals(expectedImage, image);\n    }\n}",
        "package_metric": 4.78,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 38.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "FloodFill",
        "method_name": "floodFill",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FloodFillTest {\n\n    @Test\n    public void floodFillTest() {\n        // Setting up a test image with predefined pixel values\n        int[][] image = {\n                {1, 1, 1, 1},\n                {1, 2, 2, 1},\n                {1, 2, 1, 1},\n                {1, 1, 1, 1}\n        };\n        int newColor = 3;\n        int x = 1; // starting x position \n        int y = 1; // starting y position \n        int oldColor = 2; // color to be replaced\n        \n        // Expected result after flood fill\n        int[][] expected = {\n                {1, 1, 1, 1},\n                {1, 3, 3, 1},\n                {1, 3, 1, 1},\n                {1, 1, 1, 1}\n        };\n\n        // Performing flood fill operation on the test image\n        FloodFill.floodFill(image, x, y, newColor, oldColor);\n\n        // Assert that the modified image matches the expected result\n        assertArrayEquals(expected, image);\n    }\n}",
        "package_metric": 4.78,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 25.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "FloodFill",
        "method_name": "floodFill",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FloodFillTest {\n\n    @Test\n    public void floodFillTest() {\n        // Assume we have a canvas with some initial colors\n        int[][] image = {\n            {1, 1, 1, 1, 1},\n            {1, 1, 2, 2, 1},\n            {1, 2, 2, 1, 1},\n            {1, 1, 1, 1, 1}\n        };\n\n        // The old color we want to replace\n        int oldColor = 2;\n\n        // The new color we want to flood with\n        int newColor = 3;\n\n        // The starting point for the flood fill\n        int startX = 1;\n        int startY = 2;\n\n        // Expected image after flood fill\n        int[][] expectedImage = {\n            {1, 1, 1, 1, 1},\n            {1, 1, 3, 3, 1},\n            {1, 3, 3, 1, 1},\n            {1, 1, 1, 1, 1}\n        };\n\n        // Perform flood fill on the image starting at (startX, startY)\n        FloodFill.floodFill(image, startX, startY, newColor, oldColor);\n\n        // Assert the image has been filled correctly\n        assertArrayEquals(expectedImage, image, \"The image should have the color \" + newColor + \" correctly filled in place of \" + oldColor);\n    }\n}",
        "package_metric": 4.78,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 25.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "FloodFill",
        "method_name": "floodFill",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FloodFillTest {\n    @Test\n    public void floodFillTest() {\n        // Arrange: Create a test image (2D array), and setup initial conditions\n        int[][] image = {\n            {1, 1, 1, 1, 1},\n            {1, 1, 2, 2, 1},\n            {1, 2, 2, 2, 1},\n            {1, 1, 1, 1, 1}\n        };\n        int startX = 2;\n        int startY = 2;\n        int newColor = 3;\n        int oldColor = 2;\n\n        // Expected image after flood fill\n        int[][] expected = {\n            {1, 1, 1, 1, 1},\n            {1, 1, 3, 3, 1},\n            {1, 3, 3, 3, 1},\n            {1, 1, 1, 1, 1}\n        };\n\n        // Act: Perform the flood fill operation\n        FloodFill.floodFill(image, startX, startY, newColor, oldColor);\n\n        // Assert: Check if image matches expected result after flood fill\n        assertArrayEquals(expected, image);\n    }\n}",
        "package_metric": 4.78,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 25.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "FloodFill",
        "method_name": "floodFill",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FloodFillTest {\n    \n    private static final int OLD_COLOR = 0;\n    private static final int NEW_COLOR = 1;\n    \n    @Test\n    public void floodFillTest() {\n        // Initialize a sample image with old colors\n        int[][] image = {\n            {OLD_COLOR, OLD_COLOR, OLD_COLOR},\n            {OLD_COLOR, OLD_COLOR, OLD_COLOR},\n            {OLD_COLOR, OLD_COLOR, OLD_COLOR}\n        };\n\n        // Coordinate to start the flood fill\n        int x = 1;\n        int y = 1;\n\n        // Perform flood fill on the image\n        FloodFill.floodFill(image, x, y, NEW_COLOR, OLD_COLOR);\n\n        // Expected result after flood fill with new color\n        int[][] expected = {\n            {NEW_COLOR, NEW_COLOR, NEW_COLOR},\n            {NEW_COLOR, NEW_COLOR, NEW_COLOR},\n            {NEW_COLOR, NEW_COLOR, NEW_COLOR}\n        };\n        \n        // Assert that every pixel has been filled with the new color\n        for (int i = 0; i < image.length; i++) {\n            for (int j = 0; j < image[i].length; j++) {\n                assertEquals(NEW_COLOR, image[i][j], \"Pixel at [\" + i + \"][\" + j + \"] should be color \" + NEW_COLOR);\n            }\n        }\n\n        // Alternatively, compare the whole image arrays.\n        assertArrayEquals(expected, image, \"The entire image should be flood-filled with the new color.\");\n    }\n}",
        "package_metric": 4.78,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 38.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "FloodFill",
        "method_name": "floodFill",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FloodFillTest {\n    @Test\n    public void floodFillTest() {\n        // Define the old and new colors\n        int oldColor = 1;\n        int newColor = 2;\n\n        // Initialize an image with a solid color\n        int[][] image = {\n                {oldColor, oldColor, oldColor},\n                {oldColor, oldColor, oldColor},\n                {oldColor, oldColor, oldColor}\n        };\n\n        // Choose the starting point for the flood fill\n        int startX = 0;\n        int startY = 0;\n\n        // Perform the flood fill\n        FloodFill.floodFill(image, startX, startY, newColor, oldColor);\n\n        // Construct the expected result\n        int[][] expectedImage = {\n                {newColor, newColor, newColor},\n                {newColor, newColor, newColor},\n                {newColor, newColor, newColor}\n        };\n\n        // Check each pixel to see if the flood fill worked as expected\n        for (int i = 0; i < image.length; i++) {\n            for (int j = 0; j < image[i].length; j++) {\n                assertEquals(expectedImage[i][j], image[i][j], String.format(\"The pixel at (%d, %d) should be %d\", i, j, newColor));\n            }\n        }\n    }\n}",
        "package_metric": 4.78,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 38.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test equal strings\n        assertDoesNotThrow(() -> {\n            assertEquals(0, HammingDistance.calculateHammingDistance(\"test\", \"test\")); // Expect Hamming Distance to be 0\n        });\n\n        // Test strings with some differences\n        assertDoesNotThrow(() -> {\n            assertEquals(2, HammingDistance.calculateHammingDistance(\"1010\", \"1001\")); // Expect Hamming Distance to be 2\n        });\n\n        // Test strings with all different characters\n        assertDoesNotThrow(() -> {\n            assertEquals(4, HammingDistance.calculateHammingDistance(\"abcd\", \"wxyz\")); // Expect Hamming Distance to be 4\n        });\n\n        // Test exception for strings with unequal length\n        assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"java\", \"jvm\"); // Expect to throw Exception because of unequal length\n        });\n    }\n}",
        "package_metric": 1.33,
        "class_metric": 88.89,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test with strings of equal length\n        assertDoesNotThrow(() -> {\n            assertEquals(2, HammingDistance.calculateHammingDistance(\"1011101\", \"1001001\"));\n            assertEquals(3, HammingDistance.calculateHammingDistance(\"2143896\", \"2233796\"));\n        });\n\n        // Test with one of the strings being empty\n        Exception exceptionEmptyStrings = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"\", \"a\");\n        });\n        assertEquals(\"String lengths must be equal\", exceptionEmptyStrings.getMessage());\n\n        // Test with strings that have a Hamming distance of 0 (identical strings)\n        assertDoesNotThrow(() -> {\n            assertEquals(0, HammingDistance.calculateHammingDistance(\"identical\", \"identical\"));\n        });\n\n        // Test with different length strings\n        Exception exceptionDifferentLengths = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"short\", \"longer\");\n        });\n        assertEquals(\"String lengths must be equal\", exceptionDifferentLengths.getMessage());\n\n        // Test with null strings to ensure NullPointerException\n        assertThrows(NullPointerException.class, () -> {\n            HammingDistance.calculateHammingDistance(null, null);\n        });\n    }\n}",
        "package_metric": 1.33,
        "class_metric": 88.89,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test case with strings of equal length and with different characters\n        assertDoesNotThrow(() -> {\n            int hammingDistance = HammingDistance.calculateHammingDistance(\"1011101\", \"1001001\");\n            assertEquals(2, hammingDistance, \"Hamming distance calculation is incorrect.\");\n        });\n\n        // Test case with strings of equal length and the same characters\n        assertDoesNotThrow(() -> {\n            int hammingDistance = HammingDistance.calculateHammingDistance(\"1011101\", \"1011101\");\n            assertEquals(0, hammingDistance, \"Hamming distance should be zero when strings are identical.\");\n        });\n\n        // Test case with strings of unequal length\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"1011101\", \"0110\");\n        });\n        String expectedMessage = \"String lengths must be equal\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage), \"Expected an exception with the message 'String lengths must be equal'\");\n    }\n}",
        "package_metric": 1.33,
        "class_metric": 88.89,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test for strings of same length with no differences\n        assertDoesNotThrow(() -> assertEquals(0, HammingDistance.calculateHammingDistance(\"abcde\", \"abcde\")));\n\n        // Test for strings of same length with some differences\n        assertDoesNotThrow(() -> assertEquals(2, HammingDistance.calculateHammingDistance(\"abcde\", \"abdce\")));\n\n        // Test for strings of same length with all differences\n        assertDoesNotThrow(() -> assertEquals(5, HammingDistance.calculateHammingDistance(\"abcde\", \"vwxyz\")));\n\n        // Test for strings of different length\n        Exception exception = assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance(\"abc\", \"abcd\"));\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n\n        // Test for empty strings\n        assertDoesNotThrow(() -> assertEquals(0, HammingDistance.calculateHammingDistance(\"\", \"\")));\n\n        // Test for null strings\n        assertThrows(NullPointerException.class, () -> HammingDistance.calculateHammingDistance(null, null));\n    }\n}",
        "package_metric": 1.33,
        "class_metric": 88.89,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test case where the strings are identical\n        assertDoesNotThrow(() -> {\n            int distance = HammingDistance.calculateHammingDistance(\"test\", \"test\");\n            assertEquals(0, distance);\n        });\n\n        // Test case with a different character in one position\n        assertDoesNotThrow(() -> {\n            int distance = HammingDistance.calculateHammingDistance(\"test\", \"best\");\n            assertEquals(1, distance);\n        });\n\n        // Test case where all characters are different\n        assertDoesNotThrow(() -> {\n            int distance = HammingDistance.calculateHammingDistance(\"test\", \"fail\");\n            assertEquals(4, distance);\n        });\n\n        // Test case with strings of different lengths, which should throw an exception\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"test\", \"tests\");\n        });\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n    }\n}",
        "package_metric": 1.33,
        "class_metric": 88.89,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() throws Exception {\n        // Test with equal strings (distance should be 0)\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"1011101\", \"1011101\"), \"Hamming distance should be 0 for identical strings\");\n\n        // Test with strings which have a Hamming distance of 2\n        assertEquals(2, HammingDistance.calculateHammingDistance(\"1011101\", \"1001001\"), \"Hamming distance should be 2\");\n\n        // Test with strings which have a Hamming distance of 3\n        assertEquals(3, HammingDistance.calculateHammingDistance(\"2173896\", \"2233796\"), \"Hamming distance should be 3\");\n\n        // Test with strings of different lengths, should throw an Exception\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"1011101\", \"10111\");\n        });\n        assertTrue(exception.getMessage().contains(\"String lengths must be equal\"), \"Exception message should state that the string lengths must be equal\");\n    }\n}",
        "package_metric": 1.33,
        "class_metric": 88.89,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() throws Exception {\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"abc\", \"abc\"), \"Hamming distance of identical strings should be 0.\");\n        assertEquals(1, HammingDistance.calculateHammingDistance(\"abc\", \"abd\"), \"Hamming distance should be 1 when there is one character difference.\");\n        assertEquals(3, HammingDistance.calculateHammingDistance(\"abc\", \"def\"), \"Hamming distance should be 3 when all characters are different.\");\n        \n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"abc\", \"abcd\");\n        });\n        assertTrue(exception.getMessage().contains(\"String lengths must be equal\"), \"An exception should be thrown if string lengths are not equal.\");\n    }\n}",
        "package_metric": 1.33,
        "class_metric": 88.89,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() throws Exception {\n        // Test case 1: Hamming Distance of equal length strings.\n        assertEquals(2, HammingDistance.calculateHammingDistance(\"1011101\", \"1001001\"));\n        // Test case 2: Hamming Distance for identical strings should be 0.\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"11111\", \"11111\"));\n        // Test case 3: Check if exception is thrown when strings are not of equal length\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"010101\", \"1101\");\n        });\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n        // Additional test case 4: Non identical characters at all positions. \n        assertEquals(4, HammingDistance.calculateHammingDistance(\"abcd\", \"wxyz\"));\n        // Additional test case 5: All identical characters, but one.\n        assertEquals(1, HammingDistance.calculateHammingDistance(\"aaaaa\", \"aaaba\"));\n    }\n}",
        "package_metric": 1.33,
        "class_metric": 88.89,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test with strings of equal length with some differences\n        assertDoesNotThrow(() -> {\n            int distance = HammingDistance.calculateHammingDistance(\"1011101\", \"1001001\");\n            assertEquals(2, distance);\n        });\n\n        // Test with strings of equal length with no differences\n        assertDoesNotThrow(() -> {\n            int distance = HammingDistance.calculateHammingDistance(\"1111111\", \"1111111\");\n            assertEquals(0, distance);\n        });\n\n        // Test with strings of different lengths\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"10101\", \"001\");\n        });\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n    }\n}",
        "package_metric": 1.33,
        "class_metric": 88.89,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() throws Exception {\n        // Test with same length strings and some differences\n        assertEquals(3, HammingDistance.calculateHammingDistance(\"karolin\", \"kathrin\"));\n        \n        // Test with same strings (expecting 0 distance)\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"hello\", \"hello\"));\n        \n        // Test with same length strings and no differences (also 0 distance)\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"abcdef\", \"abcdef\"));\n        \n        // Test with empty strings (expecting 0 distance)\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"\", \"\"));\n        \n        // Test for the exception with different length strings\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"test\", \"testing\");\n        });\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n    }\n}",
        "package_metric": 1.33,
        "class_metric": 88.89,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() throws Exception {\n        // Test cases with equal length strings\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"test\", \"test\"));\n        assertEquals(1, HammingDistance.calculateHammingDistance(\"test\", \"tost\"));\n        assertEquals(2, HammingDistance.calculateHammingDistance(\"12345\", \"11335\"));\n\n        // Test case with different length strings to check if Exception is thrown\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"test\", \"testing\");\n        });\n\n        String expectedMessage = \"String lengths must be equal\";\n        String actualMessage = exception.getMessage();\n        \n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}",
        "package_metric": 1.33,
        "class_metric": 88.89,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/audiofilters",
        "package_name": "com.thealgorithms.audiofilters",
        "class_name": "IIRFilter",
        "method_name": "process",
        "test_code": "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n\n    private IIRFilter filter;\n    private double[] coeffsB;\n    private double[] coeffsA;\n    private double[] historyX;\n    private double[] historyY;\n    private int order;\n\n    @BeforeEach\n    public void setup() {\n        // Given a specific filter of order 2 for the sake of example\n        order = 2;\n        coeffsB = new double[]{0.1, 0.2, 0.3}; // Example coefficients B\n        coeffsA = new double[]{1.0, -0.7, 0.5}; // Example coefficients A\n        historyX = new double[order];\n        historyY = new double[order];\n        filter = new IIRFilter(coeffsB, coeffsA, historyX, historyY, order);\n    }\n\n    @Test\n    public void processTest() {\n        // Setup initial conditions and expected result\n        double sample = 1.0;\n        double expected = (coeffsB[0] * sample + coeffsB[1] * historyX[0] - coeffsA[1] * historyY[0]) / coeffsA[0];\n\n        // Perform the processing\n        double actual = filter.process(sample);\n\n        // Assert that the expected result matches the actual result\n        assertEquals(expected, actual, \"The output of the process method did not match the expected result.\");\n        \n        // Test feedback loop (check history arrays)\n        assertEquals(sample, historyX[0], \"The most recent sample was not correctly set in the historyX array.\");\n        assertEquals(expected, historyY[0], \"The most recent output was not correctly set in the historyY array.\");\n\n        // Test subsequent calls to process to ensure history is maintained correctly\n        double nextSample = 2.0;\n        double nextExpected = (coeffsB[0] * nextSample + coeffsB[1] * sample - coeffsA[1] * expected) / coeffsA[0];\n        double nextActual = filter.process(nextSample);\n\n        assertEquals(nextExpected, nextActual, \"The output of the process method did not match the expected result for the subsequent call.\");\n    }\n}\n\nclass IIRFilter {\n    private double[] coeffsB;\n    private double[] coeffsA;\n    private double[] historyX;\n    private double[] historyY;\n    private int order;\n    \n    public IIRFilter(double[] coeffsB, double[] coeffsA, double[] historyX, double[] historyY, int order) {\n        this.coeffsB = coeffsB;\n        this.coeffsA = coeffsA;\n        this.historyX = historyX;\n        this.historyY = historyY;\n        this.order = order;\n    }\n\n    public double process(double sample) {\n        double result = 0.0;\n\n        // Process\n        for (int i = 1; i <= order; i++) {\n            result += (coeffsB[i] * historyX[i - 1] - coeffsA[i] * historyY[i - 1]);\n        }\n        result = (result + coeffsB[0] * sample) / coeffsA[0];\n\n        // Feedback\n        for (int i = order - 1; i > 0; i--) {\n            historyX[i] = historyX[i - 1];\n            historyY[i] = historyY[i - 1];\n        }\n\n        historyX[0] = sample;\n        historyY[0] = result;\n\n        return result;\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 84.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "DatasetUtils",
        "method_name": "calculatePieDatasetTotal",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.KeyedValues;\nimport org.jfree.data.DefaultKeyedValues;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"A\", 1.0);\n        data.addValue(\"B\", 2.0);\n        data.addValue(\"C\", 3.0);\n        data.addValue(\"D\", 4.0);\n        data.addValue(\"E\", null);\n        data.addValue(\"F\", -1.0);\n        data.addValue(\"G\", Double.NaN);\n\n        PieDataset dataset = new DefaultPieDataset(data);\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n        assertEquals(10.0, total, \"The total should be 10.0, ignoring null, negative, and NaN values.\");\n    }\n}",
        "package_metric": 2.39,
        "class_metric": 1.69,
        "method_metric": 100.0,
        "pitest": 1.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "DatasetUtils",
        "method_name": "calculatePieDatasetTotal",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.general.DefaultPieDataset;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category 1\", 5.0);\n        dataset.setValue(\"Category 2\", 9.0);\n        dataset.setValue(\"Category 3\", null);\n        dataset.setValue(\"Category 4\", 3.0);\n\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(17.0, total, 0.0000001d, \"The total should be 17.0\");\n    }\n}",
        "package_metric": 3.22,
        "class_metric": 1.69,
        "method_metric": 100.0,
        "pitest": 1.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "DatasetUtils",
        "method_name": "calculatePieDatasetTotal",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category 1\", 10.0);\n        dataset.setValue(\"Category 2\", 20.0);\n        dataset.setValue(\"Category 3\", 30.0);\n        dataset.setValue(\"Category 4\", 40.0);\n\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(100.0, total, 0.0000001,\n            \"The total of the pie dataset values should be 100.0.\");\n    }\n}",
        "package_metric": 3.22,
        "class_metric": 1.69,
        "method_metric": 100.0,
        "pitest": 1.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "DatasetUtils",
        "method_name": "calculatePieDatasetTotal",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.*;\n\nclass DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category A\", 1.0);\n        dataset.setValue(\"Category B\", 3.0);\n        dataset.setValue(\"Category C\", 5.0);\n\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(9.0, total, \"The total of all the values in the PieDataset should be 9.0\");\n\n        // Test with a null value\n        dataset.setValue(\"Category D\", null);\n        total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(9.0, total, \"The total should ignore null values and remain 9.0\");\n\n        // Test with a negative value\n        dataset.setValue(\"Category E\", -1.0);\n        total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(9.0, total, \"The total should ignore negative values and remain 9.0\");\n    }\n}",
        "package_metric": 3.22,
        "class_metric": 1.69,
        "method_metric": 100.0,
        "pitest": 1.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "DatasetUtils",
        "method_name": "calculatePieDatasetTotal",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.general.DefaultPieDataset;\nimport org.jfree.data.general.PieDataset;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category 1\", 5.0);\n        dataset.setValue(\"Category 2\", 4.0);\n        dataset.setValue(\"Category 3\", 3.0);\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(12.0, total, 0.0000001);\n    }\n\n    @Test\n    public void calculatePieDatasetTotalWithNullsTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category 1\", 5.0);\n        dataset.setValue(\"Category 2\", null);\n        dataset.setValue(\"Category 3\", 3.0);\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(8.0, total, 0.0000001);\n    }\n\n    @Test\n    public void calculatePieDatasetTotalWithNegativesTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category 1\", -5.0);\n        dataset.setValue(\"Category 2\", 4.0);\n        dataset.setValue(\"Category 3\", -3.0);\n        dataset.setValue(\"Category 4\", 2.0);\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(6.0, total, 0.0000001);\n    }\n}",
        "package_metric": 3.22,
        "class_metric": 1.69,
        "method_metric": 100.0,
        "pitest": 1.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "DatasetUtils",
        "method_name": "calculatePieDatasetTotal",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.KeyedValues;\nimport org.jfree.data.DefaultKeyedValues;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Create a sample pie dataset\n        DefaultKeyedValues keyedValues = new DefaultKeyedValues();\n        keyedValues.addValue(\"Category 1\", 10.0);\n        keyedValues.addValue(\"Category 2\", 20.0);\n        keyedValues.addValue(\"Category 3\", 30.0);\n        keyedValues.addValue(\"Category 4\", null); // this value should be ignored\n        keyedValues.addValue(\"Category 5\", -5.0); // negative value should be ignored\n\n        // Create a pie dataset with the sample values\n        DefaultPieDataset pieDataset = new DefaultPieDataset(keyedValues);\n\n        // Call the method under test\n        double total = DatasetUtils.calculatePieDatasetTotal(pieDataset);\n\n        // Verify the result\n        assertEquals(60.0, total, \"The total should sum up positive values only.\");\n    }\n}",
        "package_metric": 2.39,
        "class_metric": 1.69,
        "method_metric": 100.0,
        "pitest": 1.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "DatasetUtils",
        "method_name": "calculatePieDatasetTotal",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Create a mock PieDataset\n        PieDataset mockDataset = new DefaultPieDataset();\n        ((DefaultPieDataset) mockDataset).setValue(\"Category 1\", 2.5);\n        ((DefaultPieDataset) mockDataset).setValue(\"Category 2\", 3.5);\n        ((DefaultPieDataset) mockDataset).setValue(\"Category 3\", 4.0);\n\n        // Test the calculatePieDatasetTotal method\n        double result = DatasetUtils.calculatePieDatasetTotal(mockDataset);\n\n        // Assert that the result is as expected\n        assertEquals(10.0, result, 0.0000001, \"The total of the dataset should equal 10.0\");\n    }\n}",
        "package_metric": 3.22,
        "class_metric": 1.69,
        "method_metric": 100.0,
        "pitest": 1.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "DatasetUtils",
        "method_name": "calculatePieDatasetTotal",
        "test_code": "package org.jfree.data.general;\n\nimport org.jfree.data.general.DefaultPieDataset;\nimport org.jfree.data.general.PieDataset;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Create a dataset with known total\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category 1\", 5.0);\n        dataset.setValue(\"Category 2\", 3.0);\n        dataset.setValue(\"Category 3\", 8.0);\n        dataset.setValue(\"Category 4\", 6.0);\n\n        // Calculate the total using the method under test\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n        // Assert that the total is as expected\n        assertEquals(22.0, total, \"The total should be 22.0\");\n\n        // Add another value to test if the method handles new data\n        dataset.setValue(\"Category 5\", 4.0);\n\n        // Recalculate the total with the new data\n        double newTotal = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n        // Assert that the new total is as expected\n        assertEquals(26.0, newTotal, \"The total should be 26.0 with the additional category\");\n\n        // Test with a null value in the dataset\n        dataset.setValue(\"Category 6\", null);\n\n        // Recalculate the total with the null value\n        double totalWithNull = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n        // Assert that the total is unchanged by the null value\n        assertEquals(26.0, totalWithNull, \"The total should still be 26.0 when a category has a null value\");\n        \n        // Test with a negative value in the dataset (expecting it to be ignored)\n        dataset.setValue(\"Category 7\", -2.0);\n\n        // Recalculate the total with the negative value\n        double totalWithNegative = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n        // Assert that the total is unchanged by the negative value\n        assertEquals(26.0, totalWithNegative, \"The total should still be 26.0 when a category has a negative value\");\n    }\n}",
        "package_metric": 3.22,
        "class_metric": 1.69,
        "method_metric": 100.0,
        "pitest": 1.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "DatasetUtils",
        "method_name": "calculatePieDatasetTotal",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.general.DefaultPieDataset;\nimport org.jfree.data.general.PieDataset;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"CategoryA\", 10.0);\n        dataset.setValue(\"CategoryB\", 20.0);\n        dataset.setValue(\"CategoryC\", 30.0);\n        dataset.setValue(\"CategoryD\", 40.0); // Assume this is the correct way to add values in this example dataset\n\n        double expectedTotal = 10 + 20 + 30 + 40; // Total should be the sum of all the numbers\n        double actualTotal = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n        assertEquals(expectedTotal, actualTotal, \"The calculated total of the pie dataset should be correct.\");\n    }\n}",
        "package_metric": 3.22,
        "class_metric": 1.69,
        "method_metric": 100.0,
        "pitest": 1.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "DatasetUtils",
        "method_name": "calculatePieDatasetTotal",
        "test_code": "package org.jfree.data.general;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport org.jfree.data.general.DefaultPieDataset;\n\nclass DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category 1\", 5.0);\n        dataset.setValue(\"Category 2\", 3.0);\n        dataset.setValue(\"Category 3\", 8.0);\n\n        double expectedTotal = 16.0; // 5.0 + 3.0 + 8.0 = 16.0\n        double actualTotal = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n        assertEquals(expectedTotal, actualTotal, \"The calculated total should be the sum of all the positive values in the PieDataset.\");\n    }\n}",
        "package_metric": 3.22,
        "class_metric": 1.69,
        "method_metric": 100.0,
        "pitest": 1.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "Series",
        "method_name": "equals",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SeriesTest {\n    @Test\n    public void equalsTest() {\n        // Create Series Objects to Test\n        Series series1 = new SimpleSeries(\"Series1\", \"Description1\");\n        Series series2 = new SimpleSeries(\"Series1\", \"Description1\");\n\n        // Test for equality with itself\n        assertTrue(series1.equals(series1), \"A series should be equal to itself.\");\n\n        // Test for equality with an identical series (same key and description)\n        assertTrue(series1.equals(series2), \"Identical series should be equal.\");\n        \n        // Test for non-equality with null\n        assertFalse(series1.equals(null), \"A series should not be equal to null.\");\n        \n        // Test for non-equality with an object of a different type\n        assertFalse(series1.equals(new Object()), \"A series should not be equal to an object of a different type.\");\n        \n        // Test for non-equality with a series that has a different key\n        Series series3 = new SimpleSeries(\"Series3\", \"Description1\");\n        assertFalse(series1.equals(series3), \"Series with different keys should not be equal.\");\n\n        // Test for non-equality with a series that has a different description\n        Series series4 = new SimpleSeries(\"Series1\", \"Description2\");\n        assertFalse(series1.equals(series4), \"Series with different descriptions should not be equal.\");\n    }\n}\n\nclass SimpleSeries extends Series {\n\n    public SimpleSeries(Comparable key, String description) {\n        super(key, description);\n    }\n\n    @Override\n    public int getItemCount() {\n        // This is a stub method for the test\n        return 0;\n    }\n}",
        "package_metric": 1.57,
        "class_metric": 24.71,
        "method_metric": 91.67,
        "pitest": 22.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "Series",
        "method_name": "equals",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SeriesTest {\n\n    private static class MockSeries extends Series {\n        public MockSeries(Comparable key, String description) {\n            super(key, description);\n        }\n        \n        @Override\n        public int getItemCount() {\n            return 0;\n        }\n        \n        @Override\n        public Object clone() throws CloneNotSupportedException {\n            return super.clone(); // Just calling the super method for simplicity\n        }\n    }\n\n    @Test\n    public void equalsTest() {\n        // Create two identical series\n        MockSeries series1 = new MockSeries(\"SeriesKey\", \"Series Description\");\n        MockSeries series2 = new MockSeries(\"SeriesKey\", \"Series Description\");\n\n        // Check for reflexivity\n        assertTrue(series1.equals(series1));\n\n        // Check for symmetry\n        assertTrue(series1.equals(series2));\n        assertTrue(series2.equals(series1));\n\n        // Modify series2 and check for inequality\n        series2.setDescription(\"Another Description\");\n        assertFalse(series1.equals(series2));\n\n        // Check null comparison\n        assertFalse(series1.equals(null));\n\n        // Check against different type\n        assertFalse(series1.equals(new Object()));\n\n        // Check two series with different keys\n        MockSeries series3 = new MockSeries(\"DifferentKey\", \"Series Description\");\n        assertFalse(series1.equals(series3));\n    }\n\n    @BeforeEach\n    public void setUp() {\n        // Add setup here if needed\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Add teardown here if needed\n    }\n\n    // You can add more tests, if necessary\n}",
        "package_metric": 1.87,
        "class_metric": 29.41,
        "method_metric": 91.67,
        "pitest": 22.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "Series",
        "method_name": "equals",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SeriesTest {\n\n    // Assuming Series is a concrete class, not abstract.\n    // If Series is abstract, you would need a concrete subclass for testing.\n    private static class ConcreteSeries extends Series {\n        public ConcreteSeries(Comparable key, String description) {\n            super(key, description);\n        }\n\n        @Override\n        public int getItemCount() {\n            return 0; // Implementation is irrelevant for the equals test\n        }\n    }\n\n    @Test\n    public void equalsTest() {\n        // Create instances for testing\n        ConcreteSeries series1 = new ConcreteSeries(\"Series1\", \"Description1\");\n        ConcreteSeries series2 = new ConcreteSeries(\"Series1\", \"Description1\");\n        ConcreteSeries series3 = new ConcreteSeries(\"Series2\", \"Description2\");\n        ConcreteSeries series4 = new ConcreteSeries(\"Series1\", null);\n\n        // Test reflexive property\n        assertEquals(series1, series1, \"Equals should be reflexive.\");\n\n        // Test symmetric property\n        assertEquals(series1, series2, \"Both series should be equal.\");\n        assertEquals(series2, series1, \"Both series should be equal.\");\n\n        // Test transitive property\n        ConcreteSeries series2Clone = new ConcreteSeries(\"Series1\", \"Description1\");\n        assertEquals(series1, series2, \"both objects should be equal (transitive part 1).\");\n        assertEquals(series2, series2Clone, \"both objects should be equal (transitive part 2).\");\n        assertEquals(series1, series2Clone, \"both objects should be equal (transitive part 3).\");\n\n        // Test null comparison\n        assertNotEquals(series1, null, \"Series should not be equal to null.\");\n\n        // Test inequality\n        assertNotEquals(series1, series3, \"Series with different keys should not be equal.\");\n        \n        // Test description difference\n        assertNotEquals(series1, series4, \"Series with different descriptions should not be equal.\");\n\n        // Test different types\n        assertNotEquals(series1, new Object(), \"Series should not be equal to an object of a different type.\");\n    }\n}",
        "package_metric": 1.57,
        "class_metric": 24.71,
        "method_metric": 91.67,
        "pitest": 22.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "Series",
        "method_name": "equals",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SeriesTest {\n    @Test\n    public void equalsTest() {\n        // Create two different Series instances with the same key and description\n        Series series1 = new MySeries(\"SeriesKey\", \"SeriesDescription\");\n        Series series2 = new MySeries(\"SeriesKey\", \"SeriesDescription\");\n\n        // Assert that the two Series instances are considered equal\n        assertEquals(series1, series2, \"Two series with the same key and description should be equal.\");\n\n        // Modify the key and description of the second Series instance\n        series2.setKey(\"NewSeriesKey\");\n        series2.setDescription(\"NewSeriesDescription\");\n\n        // Assert that the two Series instances are no longer considered equal\n        assertNotEquals(series1, series2, \"Two series with different keys or descriptions should not be equal.\");\n\n        // Check equality of the same object\n        assertEquals(series1, series1, \"A series should be equal to itself.\");\n\n        // Check equality against null\n        assertNotEquals(series1, null, \"A series should not be equal to null.\");\n\n        // Check equality against a different type of object\n        assertNotEquals(series1, new Object(), \"A series should not be equal to an object of a different type.\");\n    }\n\n    // A stub to represent a concrete subclass of Series for the purpose of testing\n    private static class MySeries extends Series {\n        // Constructor\n        public MySeries(Comparable key, String description) {\n            super(key, description);\n        }\n\n        // This method needs to be implemented in the subclass\n        @Override\n        public int getItemCount() {\n            // For testing, we do not care about the actual count\n            return 0;\n        }\n\n        // Override the clone method, if necessary for the tests\n        @Override\n        public Object clone() throws CloneNotSupportedException {\n            return super.clone();\n        }\n    }\n}",
        "package_metric": 2.32,
        "class_metric": 36.47,
        "method_metric": 83.33,
        "pitest": 20.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "Series",
        "method_name": "equals",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SeriesTest {\n\n    private class ConcreteSeries extends Series {\n        public ConcreteSeries(Comparable key) {\n            super(key);\n        }\n        \n        public ConcreteSeries(Comparable key, String description) {\n            super(key, description);\n        }\n\n        @Override\n        public boolean canEqual(Object other) {\n            return other instanceof ConcreteSeries;\n        }\n\n        @Override\n        public int getItemCount() {\n            // Example implementation, this would normally do something meaningful\n            return 0;\n        }\n    }\n\n    @Test\n    public void equalsTest() {\n        Comparable key1 = \"SeriesKey\";\n        String description1 = \"SeriesDescription\";\n        ConcreteSeries series1 = new ConcreteSeries(key1, description1);\n\n        // Test equality with itself\n        assertTrue(series1.equals(series1), \"Series should be equal to itself\");\n\n        // Test equality with an equal series\n        ConcreteSeries series2 = new ConcreteSeries(key1, description1);\n        assertTrue(series1.equals(series2), \"Series with same key and description should be equal\");\n\n        // Test equality with a series with a different key\n        Comparable key2 = \"DifferentSeriesKey\";\n        ConcreteSeries series3 = new ConcreteSeries(key2, description1);\n        assertFalse(series1.equals(series3), \"Series with different keys should not be equal\");\n\n        // Test equality with a series with a different description\n        String description2 = \"DifferentSeriesDescription\";\n        ConcreteSeries series4 = new ConcreteSeries(key1, description2);\n        assertFalse(series1.equals(series4), \"Series with different descriptions should not be equal\");\n\n        // Test equality with null\n        assertFalse(series1.equals(null), \"Series should not be equal to null\");\n\n        // Test equality with an object of a different type\n        Object notASeries = new Object();\n        assertFalse(series1.equals(notASeries), \"Series should not be equal to a different type of object\");\n    }\n}",
        "package_metric": 1.5,
        "class_metric": 23.53,
        "method_metric": 91.67,
        "pitest": 20.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "Series",
        "method_name": "equals",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SeriesTest {\n\n    @Test\n    public void equalsTest() {\n        // Prepare objects for testing\n        Comparable key1 = \"Key1\";\n        Comparable key2 = \"Key2\";\n        String description1 = \"Description1\";\n        String description2 = \"Description2\";\n\n        Series series1 = new SeriesStub(key1, description1); // Assumed concrete subclass for testing\n        Series series2 = new SeriesStub(key1, description1); // Identical to series1\n        Series series3 = new SeriesStub(key2, description2); // Different key and description\n        Series series4 = new SeriesStub(key1, description2); // Same key, different description\n        Series sameReference = series1; // Same reference as series1\n\n        // Test for reflexivity\n        assertTrue(series1.equals(series1), \"Equals should be reflexive.\");\n\n        // Test for symmetry\n        assertTrue(series1.equals(series2), \"Two objects with same state should be equal.\");\n        assertTrue(series2.equals(series1), \"Two objects with same state should be equal.\");\n\n        // Test for transitivity\n        Series series2_2 = new SeriesStub(key1, description1); // Identical to series1 and series2\n        assertTrue(series1.equals(series2) && series2.equals(series2_2) && series1.equals(series2_2), \"Transitive relation should hold.\");\n\n        // Test for non-equality on different data\n        assertFalse(series1.equals(series3), \"Objects with different keys should not be equal.\");\n        assertFalse(series1.equals(series4), \"Objects with different descriptions should not be equal.\");\n\n        // Test for null comparison\n        assertFalse(series1.equals(null), \"Any object should not equal null.\");\n\n        // Test for different object types\n        assertFalse(series1.equals(new Object()), \"Should return false when objects are different types.\");\n\n        // Test for consistency across multiple calls\n        assertTrue(series1.equals(series2) == series1.equals(series2), \"Multiple calls should consistently return the same result.\");\n\n        // Test for different references but same object state\n        assertEquals(series1, sameReference, \"Objects with the same reference should be equal.\");\n    }\n\n    // Stub class representing a concrete implementation of the abstract Series class for testing purposes\n    public static class SeriesStub extends Series {\n        public SeriesStub(Comparable key, String description) {\n            super(key, description);\n        }\n\n        @Override\n        public boolean canEqual(Object other) {\n            return other instanceof SeriesStub;\n        }\n\n        @Override\n        public int getItemCount() {\n            return 0; // Just for testing, real implementation would vary\n        }\n    }\n}",
        "package_metric": 1.5,
        "class_metric": 23.53,
        "method_metric": 91.67,
        "pitest": 20.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "Series",
        "method_name": "equals",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SeriesTest {\n\n    private Series seriesA;\n    private Series seriesB;\n    private Series seriesC;\n    \n    @BeforeEach\n    public void setUp() {\n        seriesA = new MySeries(\"Series A\", \"Description A\");\n        seriesB = new MySeries(\"Series A\", \"Description A\"); // Identical to seriesA for testing equals\n        seriesC = new MySeries(\"Series C\", \"Description C\"); // Different to seriesA for testing equals\n    }\n\n    @Test\n    public void equalsTest() {\n        // reflexivity - an object must equal itself\n        assertTrue(seriesA.equals(seriesA), \"A series should be equal to itself.\");\n        \n        // symmetry - two objects must mutually equal each other\n        assertTrue(seriesA.equals(seriesB) && seriesB.equals(seriesA), \"Symmetry: both seriesA and seriesB should be equal\");\n        \n        // transitivity - if one object equals a second object, and the second object equals a third object, then the first object must equal the third object\n        Series seriesD = new MySeries(\"Series A\", \"Description A\");\n        assertTrue(seriesA.equals(seriesB) && seriesB.equals(seriesD) && seriesA.equals(seriesD), \"Transitivity: if seriesA equals seriesB, and seriesB equals seriesD, then seriesA must equal seriesD\");\n        \n        // consistency - multiple invocations should consistently return the same result\n        assertTrue(seriesA.equals(seriesB), \"Consistency: the result should be consistent over time\");\n        assertTrue(seriesA.equals(seriesB), \"Consistency: the result should be consistent over time\");\n\n        // null comparison - any non-null object must not equal null\n        assertNotNull(seriesA.equals(null), \"A non-null Series should not equal null.\");\n        \n        // different types - objects of different types should not be considered equal\n        Object stringObj = \"Test\";\n        assertFalse(seriesA.equals(stringObj), \"Different types should not be considered equal.\");\n\n        // different keys\n        assertFalse(seriesA.equals(seriesC), \"Series with different keys should not be considered equal.\");\n\n        // different descriptions\n        Series seriesDiffDesc = new MySeries(\"Series A\", \"Different Description\");\n        assertFalse(seriesA.equals(seriesDiffDesc), \"Series with different descriptions should not be considered equal.\");\n    }\n    \n    private static class MySeries extends Series {\n        private static final long serialVersionUID = 1L;\n        public MySeries(Comparable key, String description) {\n            super(key, description);\n        }\n        public boolean canEqual(Object other) {\n            return other instanceof MySeries;\n        }\n        public int getItemCount() {\n            return 0; // Return size of series\n        }\n        @Override\n        public Object clone() throws CloneNotSupportedException {\n            return super.clone(); // Default clone operation\n        }\n    }\n}",
        "package_metric": 1.5,
        "class_metric": 23.53,
        "method_metric": 91.67,
        "pitest": 20.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "Series",
        "method_name": "equals",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SeriesTest {\n    private Series series1;\n    private Series series2;\n\n    @BeforeEach\n    public void setUp() {\n        series1 = new Series(\"Series A\", \"A description for series A\") {\n            @Override\n            public int getItemCount() {\n                return 0;\n            }\n\n            @Override\n            public boolean canEqual(Object other) {\n                return other instanceof Series;\n            }\n        };\n\n        series2 = new Series(\"Series A\", \"A description for series A\") {\n            @Override\n            public int getItemCount() {\n                return 0;\n            }\n\n            @Override\n            public boolean canEqual(Object other) {\n                return other instanceof Series;\n            }\n        };\n    }\n\n    @Test\n    public void equalsTest() {\n        // Test for reflexivity\n        assertTrue(series1.equals(series1));\n\n        // Test for symmetry\n        assertTrue(series1.equals(series2) && series2.equals(series1));\n\n        // Test for null comparison\n        assertFalse(series1.equals(null));\n\n        // Test with different keys\n        Series seriesWithDifferentKey = new Series(\"Series B\", \"A description for series A\") {\n            @Override\n            public int getItemCount() {\n                return 0;\n            }\n\n            @Override\n            public boolean canEqual(Object other) {\n                return other instanceof Series;\n            }\n        };\n        assertFalse(series1.equals(seriesWithDifferentKey));\n\n        // Test with different descriptions\n        Series seriesWithDifferentDescription = new Series(\"Series A\", \"Different description\") {\n            @Override\n            public int getItemCount() {\n                return 0;\n            }\n\n            @Override\n            public boolean canEqual(Object other) {\n                return other instanceof Series;\n            }\n        };\n        assertFalse(series1.equals(seriesWithDifferentDescription));\n\n        // Test against a different type of object\n        assertFalse(series1.equals(new Object()));\n\n        // Test for consistency across multiple calls\n        assertTrue(series1.equals(series2));\n        assertTrue(series1.equals(series2));\n        assertTrue(series1.equals(series2));\n    }\n    \n    @AfterEach\n    public void tearDown() {\n        series1 = null;\n        series2 = null;\n    }\n}",
        "package_metric": 1.5,
        "class_metric": 23.53,
        "method_metric": 91.67,
        "pitest": 20.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "Series",
        "method_name": "equals",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SeriesTest {\n    \n    @Test\n    public void equalsTest() {\n        Comparable key = \"Key\";\n        String description = \"Description\";\n        \n        // Create two different instances of Series with the same key and description\n        Series series1 = new ConcreteSeries(key, description);\n        Series series2 = new ConcreteSeries(key, description);\n        \n        // Test equality with self\n        assertTrue(series1.equals(series1), \"Series should be equal to itself.\");\n        \n        // Test equality with another object that has the same key and description\n        assertTrue(series1.equals(series2), \"Series with the same key and description should be equal.\");\n        \n        // Test inequality with null\n        assertFalse(series1.equals(null), \"Series should not be equal to null.\");\n        \n        // Test inequality with an object of a different class\n        assertFalse(series1.equals(new Object()), \"Series should not be equal to an object of a different class.\");\n        \n        // Test inequality with Series that has different key\n        Series seriesWithDifferentKey = new ConcreteSeries(\"DifferentKey\", description);\n        assertFalse(series1.equals(seriesWithDifferentKey), \"Series with different keys should not be equal.\");\n        \n        // Test inequality with Series that has a different description\n        Series seriesWithDifferentDescription = new ConcreteSeries(key, \"DifferentDescription\");\n        assertFalse(series1.equals(seriesWithDifferentDescription), \"Series with different descriptions should not be equal.\");\n    }\n    \n    // Since Series is abstract, we create a concrete subclass to instantiate objects for testing\n    private static class ConcreteSeries extends Series {\n        public ConcreteSeries(Comparable key, String description) {\n            super(key, description);\n        }\n        \n        @Override\n        public boolean canEqual(Object other) {\n            return other instanceof ConcreteSeries;\n        }\n        \n        @Override\n        public int getItemCount() {\n            return 0; // For the purpose of testing equals, the item count is irrelevant\n        }\n    }\n}",
        "package_metric": 1.5,
        "class_metric": 23.53,
        "method_metric": 91.67,
        "pitest": 20.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "Series",
        "method_name": "equals",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SeriesTest {\n    \n    private static final String KEY = \"MySeries\";\n    private static final String DESCRIPTION = \"A series of numbers\";\n\n    private Series seriesA;\n    private Series seriesB;\n    private Series seriesC;\n    \n    @BeforeEach\n    public void setUp() {\n        // Assuming Series is an abstract class, we might need a concrete subclass for testing.\n        // This example assumes a concrete subclass called ConcreteSeries exists.\n        seriesA = new ConcreteSeries(KEY, DESCRIPTION);\n        seriesB = new ConcreteSeries(KEY, DESCRIPTION);\n        seriesC = new ConcreteSeries(\"AnotherSeries\", \"A different series of numbers\");\n    }\n    \n    @Test\n    public void equalsTest() {\n        // Check reflexivity\n        assertTrue(seriesA.equals(seriesA), \"Series should be equal to itself.\");\n        \n        // Check symmetry\n        assertTrue(seriesA.equals(seriesB) && seriesB.equals(seriesA), \"Two series with the same key and description should be equal.\");\n        \n        // Check transitivity\n        Series seriesD = new ConcreteSeries(KEY, DESCRIPTION);\n        assertTrue(seriesA.equals(seriesB) && seriesB.equals(seriesD) && seriesA.equals(seriesD), \"Transitivity of equals should hold true.\");\n        \n        // Check consistency\n        for (int i = 0; i < 10; i++) {\n            assertTrue(seriesA.equals(seriesB), \"Multiple calls to equals should consistently return true.\");\n        }\n        \n        // Check null comparison\n        assertFalse(seriesA.equals(null), \"Comparing to null should return false.\");\n        \n        // Check inequality\n        assertFalse(seriesA.equals(seriesC), \"Series with different key or description should not be considered equal.\");\n        \n        // Check inequality with different object types\n        assertFalse(seriesA.equals(new Object()), \"Series should not be equal to an object of a different type.\");\n        \n        // Assuming canEqual() is properly implemented in the ConcreteSeries class\n        assertFalse(seriesA.canEqual(\"Some unrelated type\"), \"canEqual should return false for objects of an unrelated type.\");\n    }\n    \n    // Assuming a concrete subclass of Series called ConcreteSeries for this test\n    static class ConcreteSeries extends Series {\n\n        protected ConcreteSeries(Comparable key) {\n            super(key);\n        }\n\n        protected ConcreteSeries(Comparable key, String description) {\n            super(key, description);\n        }\n\n        @Override\n        public boolean isEmpty() {\n            return false;\n        }\n\n        @Override\n        public int getItemCount() {\n            return 0;\n        }\n\n        @Override\n        public Object clone() throws CloneNotSupportedException {\n            throw new CloneNotSupportedException();\n        }\n\n        @Override\n        public boolean canEqual(Object other) {\n            return other instanceof ConcreteSeries;\n        }\n\n        @Override\n        public int hashCode() {\n            // This is a simplistic hashCode implementation for the test purpose only.\n            return getKey().hashCode();\n        }\n    }\n}",
        "package_metric": 1.42,
        "class_metric": 22.35,
        "method_metric": 83.33,
        "pitest": 18.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "Series",
        "method_name": "equals",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SeriesTest {\n\n    private class ConcreteSeries extends Series {\n        public ConcreteSeries(Comparable key) {\n            super(key);\n        }\n\n        public ConcreteSeries(Comparable key, String description) {\n            super(key, description);\n        }\n\n        @Override\n        public boolean canEqual(Object other) {\n            return other instanceof ConcreteSeries;\n        }\n\n        @Override\n        public int getItemCount() {\n            return 0;\n        }\n    }\n\n    @Test\n    public void equalsTest() {\n        Comparable key1 = \"Key1\";\n        String description1 = \"Description1\";\n        Series series1 = new ConcreteSeries(key1, description1);\n        \n        // Test equality with itself\n        assertTrue(series1.equals(series1), \"A series should be equal to itself.\");\n\n        // Test equality with an object of the same values\n        Series series2 = new ConcreteSeries(key1, description1);\n        assertTrue(series1.equals(series2), \"Two series with the same key and description should be equal.\");\n        \n        // Test inequality with null\n        assertFalse(series1.equals(null), \"A series should not be equal to null.\");\n        \n        // Test inequality with an object of a different type\n        assertFalse(series1.equals(\"A string\"), \"A series should not be equal to an object of a different type.\");\n        \n        // Test inequality with a Series with a different key\n        Comparable key2 = \"Key2\";\n        Series series3 = new ConcreteSeries(key2, description1);\n        assertFalse(series1.equals(series3), \"Two series with different keys should not be equal.\");\n        \n        // Test inequality with a Series with a different description\n        String description2 = \"Description2\";\n        Series series4 = new ConcreteSeries(key1, description2);\n        assertFalse(series1.equals(series4), \"Two series with different descriptions should not be equal.\");\n    }\n}",
        "package_metric": 1.5,
        "class_metric": 23.53,
        "method_metric": 91.67,
        "pitest": 20.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "Series",
        "method_name": "equals",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Objects;\n\npublic class SeriesTest {\n\n    private static class Series {\n        private String key;\n        private String description;\n\n        public Series(String key, String description) {\n            this.key = key;\n            this.description = description;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (obj == this) {\n                return true;\n            }\n            if (!(obj instanceof Series)) {\n                return false;\n            }\n            Series that = (Series) obj;\n            if (!Objects.equals(this.key, that.key)) {\n                return false;\n            }\n            if (!Objects.equals(this.description, that.description)) {\n                return false;\n            }\n            if (!that.canEqual(this)) {\n                return false;\n            }\n            return true;\n        }\n\n        public boolean canEqual(Object other) {\n            return (other instanceof Series);\n        }\n    }\n\n    @Test\n    public void equalsTest() {\n        Series series1 = new Series(\"key1\", \"description1\");\n        Series series2 = new Series(\"key1\", \"description1\");\n        Series series3 = new Series(\"key3\", \"description3\");\n        \n        // Test reflexivity\n        assertTrue(series1.equals(series1), \"Series should be equal to itself.\");\n        \n        // Test symmetry\n        assertTrue(series1.equals(series2) && series2.equals(series1), \n                \"Series should be equal to each other.\");\n        \n        // Test transitivity\n        Series series4 = new Series(\"key1\", \"description1\");\n        if(series1.equals(series2) && series2.equals(series4)) {\n            assertTrue(series1.equals(series4), \n                    \"Transitivity failed: series1 should be equal to series4.\");\n        }\n        \n        // Test consistency\n        assertTrue(series1.equals(series2), \n                \"Equality should be consistent when called multiple times.\");\n        assertFalse(series1.equals(series3), \n                \"Equality should be consistently false when comparing different series.\");\n        \n        // Test null handling\n        assertFalse(series1.equals(null), \n                \"Series should not be equal to null.\");\n        \n        // Test with a different object that is not an instance of Series\n        Object differentObject = new Object();\n        assertFalse(series1.equals(differentObject), \n                \"Series should not be equal to a different type of object.\");\n        \n        // Test false equals due to different key\n        Series seriesKeyDifferent = new Series(\"keyDiff\", \"description1\");\n        assertFalse(series1.equals(seriesKeyDifferent), \n                \"Series with different keys should not be equal.\");\n        \n        // Test false equals due to different description\n        Series seriesDescriptionDifferent = new Series(\"key1\", \"descriptionDiff\");\n        assertFalse(series1.equals(seriesDescriptionDifferent), \n                \"Series with different descriptions should not be equal.\");\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/json",
        "package_name": "org.jfree.data.json",
        "class_name": "JSONUtils",
        "method_name": "writeKeyedValues",
        "test_code": "package org.jfree.data.json;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport org.jfree.chart.util.Args;\nimport org.jfree.data.DefaultKeyedValues;\nimport org.junit.jupiter.api.Test;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // create an instance of KeyedValues with sample data\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"Key A\", 1.0);\n        data.addValue(\"Key B\", 2.0);\n        data.addValue(\"Key C\", 3.0);\n\n        // expected JSON string\n        String expected = \"[[\\\"Key A\\\", 1.0], [\\\"Key B\\\", 2.0], [\\\"Key C\\\", 3.0]]\";\n\n        // perform test\n        String jsonOutput = JSONUtils.writeKeyedValues(data);\n\n        // verify the jsonOutput matches the expected string\n        assertEquals(expected, jsonOutput);\n    }\n\n    @Test\n    public void writeKeyedValuesWithNullDataTest() {\n        // verify that passing null data throws IllegalArgumentException\n        assertThrows(IllegalArgumentException.class, () -> {\n            JSONUtils.writeKeyedValues(null);\n        });\n    }\n}",
        "package_metric": 32.86,
        "class_metric": 32.86,
        "method_metric": 85.715,
        "pitest": 30.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/json",
        "package_name": "org.jfree.data.json",
        "class_name": "JSONUtils",
        "method_name": "writeKeyedValues",
        "test_code": "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.jfree.data.DefaultKeyedValues;\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create an instance of KeyedValues with some test data\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"Key A\", 1.0);\n        data.addValue(\"Key B\", 2.0);\n        data.addValue(\"Key C\", 3.0);\n\n        // The expected JSON output for the test data\n        String expected = \"[[\\\"Key A\\\", 1.0], [\\\"Key B\\\", 2.0], [\\\"Key C\\\", 3.0]]\";\n\n        // Invoke the method under test\n        String jsonOutput = JSONUtils.writeKeyedValues(data);\n\n        // Assert that the JSON output is as expected\n        assertEquals(expected, jsonOutput, \"The JSON output should match the expected string.\");\n    }\n}",
        "package_metric": 32.86,
        "class_metric": 32.86,
        "method_metric": 85.715,
        "pitest": 30.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/json",
        "package_name": "org.jfree.data.json",
        "class_name": "JSONUtils",
        "method_name": "writeKeyedValues",
        "test_code": "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.DefaultKeyedValues;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a KeyedValues instance with sample data\n        DefaultKeyedValues keyedValues = new DefaultKeyedValues();\n        keyedValues.addValue(\"Key A\", 1.0);\n        keyedValues.addValue(\"Key B\", 2.0);\n        keyedValues.addValue(\"Key C\", null); // Including a null value to test proper handling\n\n        String jsonResult = JSONUtils.writeKeyedValues(keyedValues);\n\n        // Expected JSON output\n        String expectedJson = \"[[\\\"Key A\\\", 1.0], [\\\"Key B\\\", 2.0], [\\\"Key C\\\", null]]\";\n\n        // Assert that the JSON output from writeKeyedValues() matches the expected JSON String\n        assertEquals(expectedJson, jsonResult);\n    }\n}",
        "package_metric": 32.86,
        "class_metric": 32.86,
        "method_metric": 85.715,
        "pitest": 30.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "BoxAndWhiskerCalculator",
        "method_name": "calculateQ1",
        "test_code": "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class BoxAndWhiskerCalculatorTest {\n    \n    @Test\n    public void calculateQ1Test() {\n        // Test with odd number of elements\n        List<Double> oddValues = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        double q1Odd = BoxAndWhiskerCalculator.calculateQ1(oddValues);\n        assertEquals(2.0, q1Odd, \"Q1 for odd number of elements is incorrect\");\n\n        // Test with even number of elements\n        List<Double> evenValues = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        double q1Even = BoxAndWhiskerCalculator.calculateQ1(evenValues);\n        assertEquals(1.5, q1Even, \"Q1 for even number of elements is incorrect\");\n\n        // Test with a single element\n        List<Double> singleValue = Arrays.asList(1.0);\n        double q1Single = BoxAndWhiskerCalculator.calculateQ1(singleValue);\n        assertEquals(1.0, q1Single, \"Q1 for single element is incorrect\");\n\n        // Test with two elements\n        List<Double> twoValues = Arrays.asList(1.0, 2.0);\n        double q1Two = BoxAndWhiskerCalculator.calculateQ1(twoValues);\n        assertEquals(1.0, q1Two, \"Q1 for two elements is incorrect\");\n\n        // Test with empty list\n        List<Double> emptyValues = Arrays.asList();\n        double q1Empty = BoxAndWhiskerCalculator.calculateQ1(emptyValues);\n        assertTrue(Double.isNaN(q1Empty), \"Q1 for empty list should be NaN\");\n\n        // Test with null values inside list\n        List<Double> nullValues = Arrays.asList(1.0, null, 3.0, 4.0, 5.0);\n        Assertions.assertThrows(NullPointerException.class, () -> {\n            BoxAndWhiskerCalculator.calculateQ1(nullValues);\n        }, \"calculateQ1 should throw NullPointerException for list containing null\");\n\n        // Test with NaN values inside list\n        List<Double> nanValues = Arrays.asList(1.0, Double.NaN, 3.0, 4.0, 5.0);\n        // assuming calculateQ1 will not treat NaN in the list as a special case\n        double q1NaN = BoxAndWhiskerCalculator.calculateQ1(nanValues);\n        assertEquals(3.0, q1NaN, \"Q1 for list containing NaN should ignore NaN value\");\n    }\n}",
        "package_metric": 2.66,
        "class_metric": 14.49,
        "method_metric": 100.0,
        "pitest": 15.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "BoxAndWhiskerCalculator",
        "method_name": "calculateQ1",
        "test_code": "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class BoxAndWhiskerCalculatorTest {\n    @Test\n    public void calculateQ1Test() {\n        // Test with an odd number of elements\n        List<Double> oddValues = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        double q1Odd = BoxAndWhiskerCalculator.calculateQ1(oddValues);\n        assertEquals(2.0, q1Odd, \"Q1 should be the median of the first half of the odd number of elements.\");\n\n        // Test with an even number of elements\n        List<Double> evenValues = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);\n        double q1Even = BoxAndWhiskerCalculator.calculateQ1(evenValues);\n        assertEquals(2.0, q1Even, \"Q1 should be the median of the first half (exclusive of the median index) of the even number of elements.\");\n\n        // Test with a singleton list\n        List<Double> singleValue = Arrays.asList(1.0);\n        double q1Single = BoxAndWhiskerCalculator.calculateQ1(singleValue);\n        assertEquals(1.0, q1Single, \"Q1 should be the same as the only value for a singleton list.\");\n\n        // Test with an empty list\n        List<Double> emptyValues = Arrays.asList();\n        double q1Empty = BoxAndWhiskerCalculator.calculateQ1(emptyValues);\n        assertTrue(Double.isNaN(q1Empty), \"Q1 should be NaN for an empty list.\");\n\n        // Test with null input\n        assertThrows(IllegalArgumentException.class, () -> {\n            BoxAndWhiskerCalculator.calculateQ1(null);\n        }, \"calculateQ1 should throw IllegalArgumentException if the values are null.\");\n\n        // Test with a list containing null values, which should be stripped\n        List<Double> valuesWithNull = Arrays.asList(1.0, 2.0, null, 4.0, 5.0);\n        assertThrows(NullPointerException.class, () -> {\n            BoxAndWhiskerCalculator.calculateQ1(valuesWithNull);\n        }, \"calculateQ1 should throw NullPointerException if the list contains null elements.\");\n    }\n}",
        "package_metric": 2.44,
        "class_metric": 14.49,
        "method_metric": 100.0,
        "pitest": 17.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "BoxAndWhiskerCalculator",
        "method_name": "calculateQ1",
        "test_code": "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BoxAndWhiskerCalculatorTest {\n\n    @Test\n    public void calculateQ1Test() {\n        List<Double> oddList = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        assertEquals(2.0, BoxAndWhiskerCalculator.calculateQ1(oddList));\n\n        List<Double> evenList = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        assertEquals(1.5, BoxAndWhiskerCalculator.calculateQ1(evenList));\n\n        List<Double> singleElementList = Arrays.asList(1.0);\n        assertEquals(1.0, BoxAndWhiskerCalculator.calculateQ1(singleElementList));\n\n        List<Double> emptyList = new ArrayList<>();\n        assertTrue(Double.isNaN(BoxAndWhiskerCalculator.calculateQ1(emptyList)));\n\n        // Testing with null should throw an exception\n        assertThrows(IllegalArgumentException.class, () -> {\n            BoxAndWhiskerCalculator.calculateQ1(null);\n        });\n    }\n}",
        "package_metric": 2.66,
        "class_metric": 14.49,
        "method_metric": 100.0,
        "pitest": 17.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "BoxAndWhiskerCalculator",
        "method_name": "calculateQ1",
        "test_code": "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport java.util.Arrays;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BoxAndWhiskerCalculatorTest {\n\n    @Test\n    public void calculateQ1Test() {\n        List<Double> oddNumberedValues = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        double oddResult = BoxAndWhiskerCalculator.calculateQ1(oddNumberedValues);\n        assertEquals(2.0, oddResult, \"Q1 for an odd-numbered list\");\n\n        List<Double> evenNumberedValues = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        double evenResult = BoxAndWhiskerCalculator.calculateQ1(evenNumberedValues);\n        assertEquals(1.5, evenResult, \"Q1 for an even-numbered list\");\n\n        List<Double> singleValue = Arrays.asList(9.0);\n        double singleResult = BoxAndWhiskerCalculator.calculateQ1(singleValue);\n        assertEquals(9.0, singleResult, \"Q1 for a single value list\");\n\n        List<Double> emptyValues = Arrays.asList();\n        double emptyResult = BoxAndWhiskerCalculator.calculateQ1(emptyValues);\n        assertTrue(Double.isNaN(emptyResult), \"Q1 for an empty list should be NaN\");\n    }\n}",
        "package_metric": 2.66,
        "class_metric": 14.49,
        "method_metric": 100.0,
        "pitest": 15.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "BoxAndWhiskerCalculator",
        "method_name": "calculateQ1",
        "test_code": "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class BoxAndWhiskerCalculatorTest {\n\n    @Test\n    public void calculateQ1SingleValueTest() {\n        List<Double> values = Arrays.asList(10.0);\n        double q1 = BoxAndWhiskerCalculator.calculateQ1(values);\n        assertEquals(10.0, q1, \"Q1 with a single value should be the value itself\");\n    }\n\t\n    @Test\n    public void calculateQ1OddNumberOfValuesTest() {\n        List<Double> values = Arrays.asList(10.0, 2.0, 34.0, 4.0, 56.0);\n        values.sort(Double::compareTo);\n        double q1 = BoxAndWhiskerCalculator.calculateQ1(values);\n        double expectedMedian = Statistics.calculateMedian(values, 0, values.size() / 2);\n        assertEquals(expectedMedian, q1, \"Q1 with an odd number of values should be the median of the first half\");\n    }\n\n    @Test\n    public void calculateQ1EvenNumberOfValuesTest() {\n        List<Double> values = Arrays.asList(10.0, 2.0, 34.0, 4.0, 56.0, 6.0);\n        values.sort(Double::compareTo);\n        double q1 = BoxAndWhiskerCalculator.calculateQ1(values);\n        double expectedMedian = Statistics.calculateMedian(values, 0, values.size() / 2 - 1);\n        assertEquals(expectedMedian, q1, \"Q1 with an even number of values should be the median of the first half excluding the middle value\");\n    }\n\n    @Test\n    public void calculateQ1EmptyListTest() {\n        List<Double> values = Arrays.asList();\n        double q1 = BoxAndWhiskerCalculator.calculateQ1(values);\n        assertTrue(Double.isNaN(q1), \"Q1 of an empty list should be NaN\");\n    }\n}",
        "package_metric": 2.44,
        "class_metric": 14.49,
        "method_metric": 100.0,
        "pitest": 15.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "Regression",
        "method_name": "getPowerRegression",
        "test_code": "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n\n    @Test\n    public void getPowerRegressionValidTest() {\n        // Arrange: Create a dataset that is valid for power regression\n        double[][] data = {\n            {1.0, 2.0},\n            {2.0, 4.0},\n            {3.0, 8.0}\n        };\n\n        // Act: Perform the power regression on the dataset\n        double[] result = Regression.getPowerRegression(data);\n\n        // Assert: Check for correct calculation\n        assertNotNull(result);\n        assertEquals(2, result.length);\n        assertTrue(result[0] > 0); // Assert 'a' is positive\n        assertTrue(result[1] > 0); // Assert 'b' is positive\n        // Further checks can be added to verify specific expected values\n    }\n\n    @Test\n    public void getPowerRegressionThrowsExceptionForEmptyData() {\n        // Arrange: Create an empty dataset\n        double[][] data = {};\n\n        // Act & Assert: Perform the power regression on the dataset and expect an exception\n        assertThrows(IllegalArgumentException.class, () -> {\n            Regression.getPowerRegression(data);\n        });\n    }\n\n    @Test\n    public void getPowerRegressionNotEnoughDataTest() {\n        // Arrange: Create a dataset with only one data point\n        double[][] data = {\n            {1.0, 2.0}\n        };\n\n        // Act & Assert: Perform the power regression on the dataset and expect an exception\n        assertThrows(IllegalArgumentException.class, () -> {\n            Regression.getPowerRegression(data);\n        });\n    }\n}",
        "package_metric": 1.72,
        "class_metric": 13.95,
        "method_metric": 100.0,
        "pitest": 6.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "Regression",
        "method_name": "getPowerRegression",
        "test_code": "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n\n    @Test\n    public void getPowerRegressionTest() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Regression.getPowerRegression(new double[][]{});\n        }, \"Not enough data.\");\n\n        assertThrows(IllegalArgumentException.class, () -> {\n            Regression.getPowerRegression(new double[][]{{1.0}});\n        }, \"Not enough data.\");\n\n        double[][] data = new double[][] {\n            {10.0, 100.0},\n            {20.0, 400.0},\n            {30.0, 900.0},\n            {50.0, 2500.0}\n        };\n        double[] result = Regression.getPowerRegression(data);\n        assertNotNull(result);\n        assertEquals(2, result.length, \"Result array should have two elements.\");\n\n        double a = result[0];\n        double b = result[1];\n\n        // Values are expected based on the power regression equation y = ax^b\n        assertTrue(a > 0, \"Coefficient a should be positive.\");\n        assertTrue(b > 0, \"Coefficient b should be positive.\");\n        \n        // The following assumes specific values for a and b which would be the\n        // expected result of the regression. These values would be more specific to\n        // the implementation details and the data provided; and would be determined\n        // from actual expected outcomes or using a separate calculator/utility to\n        // determine the regression line parameters.\n        // e.g., assume expected a is ~3.32 and b is ~1.98 for the given data\n        // assertEquals(3.32, a, 0.01, \"Coefficient a should be approximately 3.32.\");\n        // assertEquals(1.98, b, 0.01, \"Coefficient b should be approximately 1.98.\");\n\n        // Verify regression with actual values. Use expected tolerance for floating point comparisons.\n        double tolerance = 0.0001;\n        for (double[] point : data) {\n            double x = point[0];\n            double y = point[1];\n            double expectedY = a * Math.pow(x, b);\n            assertEquals(y, expectedY, tolerance, \"Regression line should fit data points within accepted tolerance.\");\n        }\n    }\n}",
        "package_metric": 1.72,
        "class_metric": 13.95,
        "method_metric": 100.0,
        "pitest": 11.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "Regression",
        "method_name": "getPowerRegression",
        "test_code": "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n\n    @Test\n    public void getPowerRegressionTestWithEnoughData() {\n        // Given\n        double[][] data = {\n            {1, 2},\n            {2, 3},\n            {3, 4},\n            {4, 5},\n            {5, 6}\n        };\n\n        // When\n        double[] result = Regression.getPowerRegression(data);\n        \n        // Then\n        assertNotNull(result);\n        assertEquals(2, result.length, \"Result should have two parameters\");\n        // Check that the result contains reasonable values for 'a' and 'b'\n        assertTrue(result[0] > 0, \"Parameter 'a' should be positive\");\n        assertTrue(result[1] > 0, \"Parameter 'b' should be positive\");\n    }\n\n    @Test\n    public void getPowerRegressionTestWithNotEnoughData() {\n        // Given\n        double[][] data = {\n            {1, 2}\n        };\n\n        // Then\n        assertThrows(IllegalArgumentException.class, () -> {\n            // When\n            Regression.getPowerRegression(data);\n        });\n    }\n}",
        "package_metric": 1.72,
        "class_metric": 13.95,
        "method_metric": 100.0,
        "pitest": 6.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "Regression",
        "method_name": "getPowerRegression",
        "test_code": "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        // Test with valid data\n        double[][] data = { { 1, 2 }, { 2, 3 }, { 3, 7 }, { 4, 9 } };\n        double[] result = Regression.getPowerRegression(data);\n        assertNotNull(result, \"The result should not be null\");\n        assertEquals(2, result.length, \"Result array should have 2 elements\");\n        \n        // Coefficients 'a' and 'b' should be calculated without throwing an exception\n        assertDoesNotThrow(() -> Regression.getPowerRegression(data));\n        \n        // Since the regression is calculated based on logarithms, the result is expected to be approximate\n        double a = result[0];  // intercept 'a'\n        double b = result[1];  // slope 'b'\n        // Check the signs of a and b\n        assertTrue(a > 0, \"Intercept 'a' should be positive\");\n        assertTrue(b > 0, \"Slope 'b' should be positive\");\n        \n        // Test with insufficient data\n        double[][] insufficientData = { {1, 2} };\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Regression.getPowerRegression(insufficientData);\n        });\n        assertEquals(\"Not enough data.\", exception.getMessage(), \"Expect exception message to match\");\n        \n        // Test with null data\n        assertThrows(NullPointerException.class, () -> {\n            Regression.getPowerRegression(null);\n        });\n    }\n}",
        "package_metric": 1.72,
        "class_metric": 13.95,
        "method_metric": 100.0,
        "pitest": 6.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "Regression",
        "method_name": "getPowerRegression",
        "test_code": "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        // Prepare test data\n        double[][] data = new double[][] {\n            {10, 100},\n            {20, 400},\n            {30, 900}\n        };\n\n        // Execute method under test\n        double[] result = Regression.getPowerRegression(data);\n\n        // Assertions\n        assertNotNull(result, \"The result should not be null\");\n        assertEquals(2, result.length, \"The result should have two elements [a, b] for y = a * x^b.\");\n\n        // Values for assertion. Computed using the same logic as in getPowerRegression method.\n        // Here, we just simulate the outcome for the given data.\n        // Actual values should be obtained from a reliable source or manual calculation.\n        double sumX = Math.log(10) + Math.log(20) + Math.log(30);\n        double sumY = Math.log(100) + Math.log(400) + Math.log(900);\n        double sumXX = Math.pow(Math.log(10), 2) + Math.pow(Math.log(20), 2) + Math.pow(Math.log(30), 2);\n        double sumXY = Math.log(10) * Math.log(100) + Math.log(20) * Math.log(400) + Math.log(30) * Math.log(900);\n        int n = data.length;\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n        double b = sxy / sxx;\n        double a = Math.pow(Math.exp(1.0), ybar - b * xbar);\n\n        // Assert values are as expected\n        assertEquals(a, result[0], 0.0001, \"The intercept 'a' should be close to the expected value.\");\n        assertEquals(b, result[1], 0.0001, \"The slope 'b' should be close to the expected value.\");\n    }\n\n    @Test\n    public void getPowerRegressionInsufficientDataTest() {\n        double[][] data = new double[][]{{1, 1}}; // Insufficient data for regression\n\n        // Assert an IllegalArgumentException is thrown when data is insufficient\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            double[] result = Regression.getPowerRegression(data);\n        });\n\n        // Assert the message of the thrown exception\n        String expectedMessage = \"Not enough data.\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage), \"Exception message should contain the expected text.\");\n    }\n}",
        "package_metric": 1.72,
        "class_metric": 13.95,
        "method_metric": 100.0,
        "pitest": 11.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "Regression",
        "method_name": "getPowerRegression",
        "test_code": "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n\n    @Test\n    public void getPowerRegressionTest() {\n        // Arrange\n        double[][] data = {{1.0, 1.0}, {2.0, 4.0}, {3.0, 9.0}};\n        \n        // Act\n        double[] result = Regression.getPowerRegression(data);\n        \n        // Assert\n        assertNotNull(result, \"The result should not be null\");\n        assertEquals(2, result.length, \"The result array should have two elements\");\n        \n        // Since we expect a power function y = ax^b fitting y=x^2, \n        // we roughly expect the 'b' value to be 2 and the 'a' value to approach 1\n        // Given the logarithmic nature of the power regression, the actual values will vary slightly, \n        // and they will need to be checked against a small delta to account for the precision of the floating-point arithmetic.\n        double a = result[0];\n        double b = result[1];\n        \n        assertEquals(1.0, a, 0.01, \"Coefficient 'a' should be close to 1\");\n        assertEquals(2.0, b, 0.01, \"Exponent 'b' should be close to 2\");\n    }\n    \n    @Test\n    public void getPowerRegressionTest_NotEnoughData() {\n        // Arrange\n        double[][] data = {{1.0, 1.0}};\n        \n        // Act & Assert\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Regression.getPowerRegression(data);\n        });\n        \n        String expectedMessage = \"Not enough data.\";\n        String actualMessage = exception.getMessage();\n        \n        assertTrue(actualMessage.contains(expectedMessage), \"Exception should contain the correct message\");\n    }\n}",
        "package_metric": 1.72,
        "class_metric": 13.95,
        "method_metric": 100.0,
        "pitest": 11.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "Regression",
        "method_name": "getPowerRegression",
        "test_code": "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n\n    @Test\n    public void getPowerRegressionTest() {\n        // Test with valid data\n        double[][] data = {{1, 3}, {2, 8}, {3, 27}};\n        assertDoesNotThrow(() -> {\n            double[] result = Regression.getPowerRegression(data);\n            assertNotNull(result);\n            assertEquals(2, result.length);\n            // Without actual numbers this is just a placeholder for actual expected values. \n            // A proper test would calculate expected values independently.\n            // assertEquals(<expected_a>, result[0], <delta>);\n            // assertEquals(<expected_b>, result[1], <delta>);\n        });\n\n        // Test with not enough data\n        double[][] insufficientData = {{1, 3}};\n        assertThrows(IllegalArgumentException.class, () -> {\n            Regression.getPowerRegression(insufficientData);\n        });\n\n        // Test with null data\n        double[][] nullData = null;\n        assertThrows(NullPointerException.class, () -> {\n            Regression.getPowerRegression(nullData);\n        });\n\n        // Additional edge cases...\n        \n        // Test with data causing overflow\n        double[][] overflowData = {{1e20, 3}, {2e20, 8}, {3e20, 27}};\n        assertDoesNotThrow(() -> Regression.getPowerRegression(overflowData));\n\n        // Test with data causing underflow\n        double[][] underflowData = {{1e-20, 3}, {2e-20, 8}, {3e-20, 27}};\n        assertDoesNotThrow(() -> Regression.getPowerRegression(underflowData));\n    }\n}",
        "package_metric": 1.72,
        "class_metric": 13.95,
        "method_metric": 100.0,
        "pitest": 2.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "Regression",
        "method_name": "getPowerRegression",
        "test_code": "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        // Test with valid data set\n        double[][] data = new double[][]{{1.0, 2.0}, {2.0, 3.0}, {3.0, 5.0}};\n        double[] result = Regression.getPowerRegression(data);\n        assertNotNull(result);\n        assertEquals(2, result.length, \"The result should have two elements.\");\n\n        // Checking values with some expected results or property, could be improved by specifying expected values\n        assertTrue(result[0] > 0, \"The calculated A constant must be positive.\");\n        assertTrue(result[1] > 0, \"The exponent B must be positive.\");\n\n        // Test with insufficient data set and expect an IllegalArgumentException\n        double[][] insufficientData = new double[][]{{1.0, 2.0}};\n        assertThrows(IllegalArgumentException.class, () -> {\n            Regression.getPowerRegression(insufficientData);\n        }, \"Not enough data should throw IllegalArgumentException.\");\n\n        // Test with null data set and expect a NullPointerException\n        assertThrows(NullPointerException.class, () -> {\n            Regression.getPowerRegression(null);\n        }, \"Null data set should throw NullPointerException.\");\n    }\n}",
        "package_metric": 1.72,
        "class_metric": 13.95,
        "method_metric": 100.0,
        "pitest": 6.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "PriorRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void PriorRegionTest() {\n        // Setup test data\n        double[][] regionData = new double[][] {\n            {0, 0, 0, 100}, // Label 0\n            {1, 1, 1, 150}, // Label 1\n            {2, 2, 1, 200}, // Label 2\n            {3, 3, 0, 250}, // Label 3\n        };\n        Blobs.RegionData = regionData;\n        Blobs.MaxLabel = regionData.length - 1;\n\n        // Define the test parameters\n        int parent = -1;  // Ignored, since we pass -1.\n        int color = 1;    // Only '1' colors will be considered.\n        double minArea = 100; // Minimum area.\n        double maxArea = 200; // Maximum area.\n        int label = 3;    // Starting label.\n\n        // Call the method under test\n        int result = Blobs.PriorRegion(parent, color, minArea, maxArea, label);\n\n        // Assert that the result is the label of the region prior to the starting label\n        // satisfying the given color, minArea, and maxArea conditions, which should be label 2.\n        assertEquals(2, result, \"The PriorRegion method did not return the expected label.\");\n    }\n}",
        "package_metric": 0.27,
        "class_metric": 9.82,
        "method_metric": 100.0,
        "pitest": 3.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "PriorRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    \n    // This setup method initializes the data that will be used in the test case.\n    @BeforeEach\n    public void setUp() {\n        // Set up test data for RegionData array assuming a static size for demonstration purposes.\n        Blobs.RegionData = new double[Blobs.BLOBTOTALCOUNT][Blobs.BLOBDATACOUNT];\n        // Sample data for regions - this has to be set based on test requirements\n        // Here, we assume three regions with different attributes\n        Blobs.RegionData[0] = new double[] {0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};  // Base region\n        Blobs.RegionData[1] = new double[] {1, 0, 1, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};  // Region 1 (color: 1, area: 80)\n        Blobs.RegionData[2] = new double[] {2, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}; // Region 2 (color: 0, area: 120)\n        Blobs.MaxLabel = 2; // Set the maximum label to the highest index in use.\n    }\n    \n    @Test\n    public void PriorRegionTest() {\n        // Set Parent, Color, MinArea, MaxArea, and Label to find a specific region.\n        int parent = 0;\n        int color = 1; // Assuming black is 0 and white is 1\n        double minArea = 60;\n        double maxArea = 100;\n        int label = 2; // Start the search from the highest label\n\n        // Expect to find a prior region matching our criteria (Region 1, label == 1)\n        int expectedRegionLabel = 1;\n\n        // Call the PriorRegion method with the parameters set above.\n        int resultRegionLabel = Blobs.PriorRegion(parent, color, minArea, maxArea, label);\n\n        // Assert that the PriorRegion method returns the correct region label\n        assertEquals(expectedRegionLabel, resultRegionLabel, \"The method should find the prior region with label 1.\");\n    }\n}",
        "package_metric": 0.27,
        "class_metric": 9.82,
        "method_metric": 100.0,
        "pitest": 3.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "PriorRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @BeforeEach\n    void setUp() {\n        // Initialize RegionData with dummy data\n        Blobs.MaxLabel = 3;\n        Blobs.RegionData[0] = new double[] {0, 1, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};  // Parent 1 Color Black Area 150\n        Blobs.RegionData[1] = new double[] {1, 2, 1, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};  // Parent 2 Color White Area 200\n        Blobs.RegionData[2] = new double[] {2, 1, 0, 300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};  // Parent 1 Color Black Area 300\n        Blobs.RegionData[3] = new double[] {3, 3, 1, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};  // Parent 3 Color White Area 100\n    }\n\n    @Test\n    public void PriorRegionTest() {\n        int parent = 1;\n        int color = 0;\n        double minArea = 100;\n        double maxArea = 250;\n        int startLabel = 2;\n\n        // Call the method under test\n        int result = Blobs.PriorRegion(parent, color, minArea, maxArea, startLabel);\n\n        // The expected result is the label of the region that matches the criteria just before the start label.\n        int expected = 0;\n\n        // Assert the result is as expected\n        assertEquals(expected, result, \"The PriorRegion method did not return the correct region label.\");\n    }\n}",
        "package_metric": 0.27,
        "class_metric": 9.82,
        "method_metric": 100.0,
        "pitest": 3.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "PriorRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    Blobs blobs;\n\n    @BeforeEach\n    public void setup() {\n        blobs = new Blobs();\n        Blobs.MaxLabel = 5; // Assume there are 5 regions for testing\n        // Populate the RegionData with test data\n        Blobs.RegionData[0] = new double[]{0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        Blobs.RegionData[1] = new double[]{1, 2, 1, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        Blobs.RegionData[2] = new double[]{2, 2, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        Blobs.RegionData[3] = new double[]{3, 0, 1, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        Blobs.RegionData[4] = new double[]{4, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        Blobs.RegionData[5] = new double[]{5, 1, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    }\n\n    @Test\n    public void PriorRegionTest() {\n        // Test to get a matching region based on conditions\n        assertEquals(2, Blobs.PriorRegion(-1, -1, 10, 20, 3));\n        // Test to return -1 if no matching region is found\n        assertEquals(-1, Blobs.PriorRegion(-1, -1, 100, 200, 5));\n        // Test to match when exact parent and color are given\n        assertEquals(4, Blobs.PriorRegion(1, 0, 10, 30, 5));\n    }\n}",
        "package_metric": 0.28,
        "class_metric": 10.12,
        "method_metric": 100.0,
        "pitest": 4.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "PriorRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n\n    @BeforeEach\n    public void setup() {\n        // Initialize the region data for testing with arbitrary values.\n        Blobs.MaxLabel = 3;\n\n        for (int i = 0; i <= Blobs.MaxLabel; i++) {\n            Blobs.RegionData[i][Blobs.BLOBLABEL] = i;\n            Blobs.RegionData[i][Blobs.BLOBPARENT] = (i % 2 == 0) ? 1 : 2;  // Alternating parents for testing.\n            Blobs.RegionData[i][Blobs.BLOBCOLOR] = (i % 2 == 0) ? 1 : 0;   // Alternating colors for testing.\n            Blobs.RegionData[i][Blobs.BLOBAREA] = 10 * (i + 1);            // Increasing area for testing.\n        }\n    }\n\n    @Test\n    public void PriorRegionTest() {\n        // Given a parent of 1, color of 1, min area of 20, max area of 40, and starting label of 3\n        // we expect to find the region with label index 2 that satisfies these conditions.\n        int parent = 1;\n        int color = 1;\n        double minArea = 20;\n        double maxArea = 40;\n        int label = 3;\n\n        int result = Blobs.PriorRegion(parent, color, minArea, maxArea, label);\n\n        assertEquals(2, result, \"PriorRegion should return the index of the valid prior region.\");\n\n        // Test with no match\n        parent = 1;\n        color = -1; // Ignoring color\n        minArea = 100;\n        maxArea = 200;\n        label = 3;\n\n        result = Blobs.PriorRegion(parent, color, minArea, maxArea, label);\n\n        assertEquals(-1, result, \"PriorRegion should return -1 when no valid region is found.\");\n    }\n}",
        "package_metric": 0.27,
        "class_metric": 9.82,
        "method_metric": 100.0,
        "pitest": 3.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "PriorRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    \n    // Setup for the test; initializing conditions and RegionData with mock data\n    @BeforeAll\n    public static void setup() {\n        Blobs.MaxLabel = 5; // Example max label for test regions\n        for (int i = 0; i <= Blobs.MaxLabel; i++) {\n            Blobs.RegionData[i][Blobs.BLOBLABEL] = i;\n            Blobs.RegionData[i][Blobs.BLOBPARENT] = i % 2; // Even index has parent 0, odd index has parent 1\n            Blobs.RegionData[i][Blobs.BLOBCOLOR] = (i < 3) ? 0 : 1; // Index < 3 has color 0, otherwise color 1\n            Blobs.RegionData[i][Blobs.BLOBAREA] = 10 * (i + 1); // Area increases with index\n        }\n    }\n    \n    @Test\n    public void PriorRegion_NoMatch() {\n        // Define the parameters (Parent, Color, MinArea, MaxArea, Label) for the test\n        int parent = -1; // Set to -1 to ignore parent check\n        int color = -1;  // Set to -1 to ignore color check\n        double minArea = 1000;\n        double maxArea = 5000;\n        int label = 5;\n        \n        // Call the method in question\n        int result = Blobs.PriorRegion(parent, color, minArea, maxArea, label);\n        \n        // Verify the result; expecting -1 because no region matches the extremely high minArea\n        assertEquals(-1, result, \"Should return -1 as no region matches the area criteria\");\n    }\n\n    @Test\n    public void PriorRegion_ValidMatch() {\n        // Define the parameters (Parent, Color, MinArea, MaxArea, Label) for the test\n        int parent = 1; // We want to match regions with parent 1\n        int color = 1;  // We want to match regions with color 1\n        double minArea = 20;\n        double maxArea = 50;\n        int label = 5;   // Start search from label 5\n        \n        // Call the method in question\n        int result = Blobs.PriorRegion(parent, color, minArea, maxArea, label);\n        \n        // Verify the result; expecting to match the region with label 3 since it meets the criteria and is prior to the starting label\n        assertEquals(3, result, \"Should return label 3 as it matches all the given criteria\");\n    }\n\n    @Test\n    public void PriorRegion_ValidMatchAtFirstRegion() {\n        // Define the parameters (Parent, Color, MinArea, MaxArea, Label) for the test\n        int parent = 0;\n        int color = 0;\n        double minArea = 10; // Match starting at the smallest area\n        double maxArea = 15;\n        int label = 2;       // Start search from label 2\n        \n        // Call the method in question\n        int result = Blobs.PriorRegion(parent, color, minArea, maxArea, label);\n        \n        // Verify the result; expecting to find the match at label 0 because it is the first valid region before label 2 that matches criteria\n        assertEquals(0, result, \"Should return label 0 as the first region matching the criteria\");\n    }\n}",
        "package_metric": 0.27,
        "class_metric": 9.82,
        "method_metric": 100.0,
        "pitest": 5.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "PriorRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n\n    @BeforeEach\n    public void setUp() {\n        // Define constants and initialize RegionData for the purpose of testing\n        Blobs.BLOBPARENT = 0;\n        Blobs.BLOBCOLOR = 1;\n        Blobs.BLOBAREA = 2;\n        // Define mock data for RegionData\n        Blobs.RegionData = new double[][]{\n                {0, 1, 50.0}, // Mock region data at index 0\n                {1, 1, 75.0}, // Mock region data at index 1\n                {0, 0, 100.0} // Mock region data at index 2\n                // ... and so on for however many mock Regions you want to create\n        };\n    }\n\n    @Test\n    public void PriorRegionTest() {\n        // Case 1: Match found\n        int parentSearch = 0; // Parent we are looking for\n        int colorSearch = 1;  // Non-zero means we are only looking for a color value of 1\n        double minArea = 30.0;\n        double maxArea = 80.0;\n        int label = 2;        // Start searching from this label/index\n        int expectedIndex = 0; // Expected matching region index\n        int actualIndex = Blobs.PriorRegion(parentSearch, colorSearch, minArea, maxArea, label);\n        assertEquals(expectedIndex, actualIndex, \"The matching region should be at index 0\");\n\n        // Case 2: No match found (all regions are out of the area range)\n        parentSearch = 0;\n        colorSearch = 1;\n        minArea = 200.0; // Min area set too high for any region to match\n        maxArea = 300.0;\n        label = 2;\n        expectedIndex = -1; // Should return -1 if no match found\n        actualIndex = Blobs.PriorRegion(parentSearch, colorSearch, minArea, maxArea, label);\n        assertEquals(expectedIndex, actualIndex, \"No region should match the search criteria\");\n\n        // Additional test cases can be added as needed to cover different scenarios\n    }\n}",
        "package_metric": 0.27,
        "class_metric": 9.82,
        "method_metric": 100.0,
        "pitest": 4.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "PriorRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.bytedeco.javacv.Blobs.*;\n\npublic class BlobsTest {\n    private static final double DELTA = 1e-15;\n\n    @BeforeAll\n    static void setUp() {\n        // Set up Blobs class with region data for testing\n        BLOBPARENT = 0;\n        BLOBCOLOR = 1;\n        BLOBAREA = 2;\n        // Other field indices would be initialized here if necessary\n\n        // Set up some sample region data\n        RegionData = new double[][] {\n            {1, 0, 100}, // Parent, Color, Area\n            {2, 1, 200},\n            {3, 0, 300},\n            {4, 1, 400},\n            {5, 0, 450}\n        };\n        // Set MaxLabel to the highest index in the RegionData array\n        MaxLabel = RegionData.length - 1;\n    }\n\n    @Test\n    public void PriorRegionTest() {\n        // Assume these are the Parent and Color that we are interested in\n        int parent = 2;\n        int color = 1;\n\n        // Minimum and maximum area for the search criteria\n        double minArea = 150;\n        double maxArea = 350;\n\n        // Starting label index for the search, working backwards\n        int label = MaxLabel;\n\n        // This test assumes that we are looking for the nearest region before label index \n        // that has a parent of 2, a color of 1, and an area between 150 and 350.\n        // According to the sample RegionData defined in setUp(), the correct index should be 1.\n        int expectedIndex = 1;\n\n        // The actual test call\n        int resultIndex = Blobs.PriorRegion(parent, color, minArea, maxArea, label);\n\n        // Assert that we get the expected index as the result\n        assertEquals(expectedIndex, resultIndex);\n    }\n\n    @Test\n    public void PriorRegionNoMatchTest() {\n        // Test case where no region matches\n        int parent = 2;\n        int color = 1;\n        double minArea = 1000;\n        double maxArea = 1500;\n        int label = MaxLabel;\n\n        // Expect -1 as return since no region should match the criteria\n        int expectedIndex = -1;\n\n        // The actual test call\n        int resultIndex = Blobs.PriorRegion(parent, color, minArea, maxArea, label);\n\n        // Assert that the expected index is returned indicating no match found\n        assertEquals(expectedIndex, resultIndex);\n    }\n\n    // Additional cases could be added to fully test all code paths and edge cases\n}",
        "package_metric": 0.27,
        "class_metric": 9.82,
        "method_metric": 100.0,
        "pitest": 3.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "PriorRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n\n    private Blobs blobs;\n\n    @BeforeEach\n    public void setUp() {\n        blobs = new Blobs();\n        Blobs.BLOBPARENT = 0;\n        Blobs.BLOBCOLOR = 1;\n        Blobs.BLOBAREA = 2;\n        // Assuming RegionData is in format {[Parent, Color, Area],...}\n        Blobs.RegionData = new double[][]{\n                {0.0, 1.0, 100.0}, // Label 0\n                {0.0, 0.0, 200.0}, // Label 1\n                {1.0, 1.0, 300.0}  // Label 2\n        };\n        // Set other static variables and arrays as required for the test\n    }\n\n    @Test\n    public void PriorRegionTest() {\n        // Test with specific Parent, Color, MinArea, MaxArea, and Label\n        int result = Blobs.PriorRegion(0, 1, 50.0, 250.0, 2);\n        assertEquals(0, result, \"Should return the first region that matches the criteria from the end\");\n\n        // Test with no restrictions on Parent (-1) and specific Color, MinArea, MaxArea, and Label\n        result = Blobs.PriorRegion(-1, 0, 50.0, 250.0, 2);\n        assertEquals(1, result, \"Should return the first region with specific Color that matches the criteria from the end\");\n\n        // Test with no matches\n        result = Blobs.PriorRegion(1, 2, 50.0, 250.0, 2);\n        assertEquals(-1, result, \"Should return -1 if no region matches the criteria\");\n\n        // Test when Label is less than 0\n        result = Blobs.PriorRegion(0, 1, 50.0, 250.0, -5);\n        assertEquals(-1, result, \"Should return -1 if Label is less than 0\");\n\n        // Test with the border values of area\n        result = Blobs.PriorRegion(0, 0, 200.0, 200.0, 2);\n        assertEquals(1, result, \"Should return the region that exactly matches the border area values\");\n    }\n}",
        "package_metric": 0.28,
        "class_metric": 10.12,
        "method_metric": 100.0,
        "pitest": 5.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "PriorRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    \n    // Assuming the RegionData array and constants BLOBPARENT, BLOBCOLOR, and BLOBAREA are defined elsewhere\n    // This setup would ideally be present in the class under test.\n    public static double[][] RegionData = new double[][]{\n            {0, 0, 10}, // Parent, Color, Area\n            {0, 1, 15},\n            {1, 0, 20},\n            {1, 1, 25},\n            // Add other regions as needed for testing\n    };\n    public static final int BLOBPARENT = 0;\n    public static final int BLOBCOLOR = 1;\n    public static final int BLOBAREA = 2;\n    \n    // Method under test (should ideally be in the class under test)\n    public static int PriorRegion(int Parent, int Color, double MinArea, double MaxArea, int Label) {\n        double DParent = (double) Parent;\n        double DColor = (double) Color;\n        if(DColor > 0) DColor = 1;\n        \n        int i;\n        for(i = Label; i >= 0; i--) {\n            double[] Region = RegionData[i];\n            double ThisParent = Region[BLOBPARENT];\n            double ThisColor = Region[BLOBCOLOR];\n            if(DParent >= 0 && DParent != ThisParent) continue;\n            if(DColor >= 0 && DColor != ThisColor) continue;\n            if(Region[BLOBAREA] < MinArea || Region[BLOBAREA] > MaxArea) continue;\n            break; // We have a match!\n        }\n        if(i < 0) i = -1; // Use -1 to flag that there was no match\n        return i;\n    }\n\n    @Test\n    public void PriorRegionTest() {\n        // Complete the unit test with meaningful test data\n        assertEquals(-1, PriorRegion(1, 0, 30, 50, 3), \"Check no region found due to area constraints\");\n        assertEquals(2, PriorRegion(1, 0, 10, 20, 3), \"Check region with Parent 1, Color 0, and proper area\");\n        assertEquals(1, PriorRegion(-1, 1, 10, 20, 3), \"Check for the first region with Color 1, ignoring Parent\");\n        assertEquals(-1, PriorRegion(-1, -1, 50, 60, 3), \"Check no region found with very large area constraints\");\n        assertEquals(-1, PriorRegion(1, 2, 10, 20, 3), \"Check no region found with incorrect Color\");\n        assertEquals(0, PriorRegion(0, 0, 5, 15, 3), \"Check region with Parent 0, Color 0, and area within range\");\n        // Other cases as necessary\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "NextRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    \n    @BeforeAll\n    public static void setup() {\n        // Initialize RegionData with some dummy data for testing\n        // Note: You should set up this data to match your test conditions\n        Blobs.MaxLabel = 3; // Adjust based on how many labels you are testing with.\n        Blobs.RegionData[0] = new double[]{0, 0, 1, 200}; // Label: 0, Parent: 0, Color: 1 (white), Area: 200\n        Blobs.RegionData[1] = new double[]{1, 0, 0, 350}; // Label: 1, Parent: 0, Color: 0 (black), Area: 350\n        Blobs.RegionData[2] = new double[]{2, 0, 1, 120}; // Label: 2, Parent: 0, Color: 1 (white), Area: 120\n        Blobs.RegionData[3] = new double[]{3, 0, 0, 450}; // Label: 3, Parent: 0, Color: 0 (black), Area: 450\n    }\n\n    @Test\n    public void NextRegionTest() {\n        // Assuming RegionData and MaxLabel have been setup as part of this test or a setup method\n        // Testing NextRegion for a match that exists\n        int resultMatch = Blobs.NextRegion(-1, 1, 100, 200, 0); // Expecting to find region with the specified parameters\n        assertEquals(0, resultMatch, \"Expect to find the first region that matches the criteria.\");\n\n        // Testing NextRegion for a match with different criteria\n        int resultNoColorMatch = Blobs.NextRegion(-1, 0, 100, 200, 0); // Not expecting to find a region as we've only setup white regions in the given range\n        assertNotEquals(0, resultNoColorMatch, \"Expect not to find a region that matches the criteria, because we've only set up white regions in the setup.\");\n\n        // Testing NextRegion with no match\n        int resultNoMatch = Blobs.NextRegion(-1, 1, 1000, 2000, 0); // Expecting not to find any region with this area range\n        assertEquals(-1, resultNoMatch, \"Expect not to find any region with specified area range as it is outside the setup data range.\");\n\n        // Additional test cases based on your setup data should be added\n    }\n}",
        "package_metric": 0.27,
        "class_metric": 9.82,
        "method_metric": 100.0,
        "pitest": 5.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "NextRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    \n    // Set up test data\n    @BeforeEach\n    public void setUp() {\n        Blobs.MaxLabel = 10; // Assume we have 10 regions to work with\n        // Initialize RegionData with some test data\n        for (int i = 0; i <= Blobs.MaxLabel; i++) {\n            Blobs.RegionData[i][Blobs.BLOBLABEL] = i;\n            Blobs.RegionData[i][Blobs.BLOBPARENT] = i % 3; // Example parent assignment\n            Blobs.RegionData[i][Blobs.BLOBCOLOR] = i % 2; // Example alternating colors\n            Blobs.RegionData[i][Blobs.BLOBAREA] = i * 10; // Example increasing area\n            // Initialize the rest of the RegionData attributes as necessary\n        }\n    }\n    \n    @AfterEach\n    public void tearDown() {\n        // Clean up or reset code if necessary\n    }\n\n    @Test\n    void NextRegionTest() {\n        // Assuming these constants were defined in your Blobs class\n        final int parentToIgnore = -1; \n        final int colorToMatch = 1; \n        final double minAreaToMatch = 20; \n        final double maxAreaToMatch = 80;\n        final int startingLabel = 0;\n\n        // Expected result is the first region that matches the desired constraints\n        // According to the set-up, it should be region with label '3'\n        int expectedLabel = 3;\n        int obtainedLabel = Blobs.NextRegion(parentToIgnore, colorToMatch, minAreaToMatch, maxAreaToMatch, startingLabel);\n\n        assertEquals(expectedLabel, obtainedLabel, \n            \"NextRegion did not return the expected label for the matching region\");\n    }\n}",
        "package_metric": 0.27,
        "class_metric": 9.82,
        "method_metric": 100.0,
        "pitest": 3.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "NextRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n\n    @BeforeEach\n    public void setup() {\n        Blobs.MaxLabel = 5; // Assume we have 5 labels for the test\n        // Initialize the region data with mock data that meets certain test criteria\n        for (int i = 0; i <= Blobs.MaxLabel; i++) {\n            Blobs.RegionData[i][Blobs.BLOBLABEL] = i;\n            Blobs.RegionData[i][Blobs.BLOBPARENT] = (i % 2 == 0) ? 0 : 1; // Alternating parent for test\n            Blobs.RegionData[i][Blobs.BLOBCOLOR] = (i % 2 == 0) ? 1 : 0; // Alternating color for test\n            Blobs.RegionData[i][Blobs.BLOBAREA] = 100 * i; // Increasing area for test\n        }\n    }\n\n    @Test\n    public void NextRegionTest() {\n        // Define test parameters\n        int testParent = -1; // Ignoring parent\n        int testColor = 1;   // Looking for white regions\n        double testMinArea = 200;\n        double testMaxArea = 400;\n        int testStartLabel = 1;\n        \n        // Call the method to be tested\n        int result = Blobs.NextRegion(testParent, testColor, testMinArea, testMaxArea, testStartLabel);\n        \n        // Assert the result\n        int expectedLabel = 2; // Based on the initialized RegionData, label 2 is the expected match\n        assertEquals(expectedLabel, result, \"NextRegion did not return the expected label index.\");\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Optionally reset static values if needed\n        Blobs.MaxLabel = 0;\n        Blobs.RegionData = new double[Blobs.BLOBTOTALCOUNT][Blobs.BLOBDATACOUNT];\n    }\n}",
        "package_metric": 0.27,
        "class_metric": 9.82,
        "method_metric": 100.0,
        "pitest": 3.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "NextRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n\n    @BeforeEach\n    public void setUp() {\n        // Sample setup. Customize with actual indices/titles.\n        Blobs.BLOBPARENT = 0;\n        Blobs.BLOBCOLOR = 1;\n        Blobs.BLOBAREA = 2;\n        Blobs.MaxLabel = 5; // assuming we have labels from 0 to 5\n\n        // Sample region data, assuming:\n        // BLOBPARENT, BLOBCOLOR, BLOBAREA\n        Blobs.RegionData = new double[][] {\n            {0, 1, 10.0}, // Region with Label 0\n            {1, 0, 15.0}, // Region with Label 1\n            {2, 1, 8.0},  // Region with Label 2\n            {2, 1, 25.0}, // Region with Label 3\n            {1, 0, 5.0},  // Region with Label 4\n            {0, 1, 30.0}  // Region with Label 5\n        };\n    }\n\n    @Test\n    public void NextRegionTest() {\n        int ParentTest = 2;\n        int ColorTest = 1;\n        double MinAreaTest = 20.0;\n        double MaxAreaTest = 30.0;\n        int LabelTest = 2;\n\n        // Expected to find the region with the following criteria\n        // Parent = 2, Color = 1, Area in [20.0, 30.0], starting from label 2\n        // It should find the region with label 3 and not label 5 because it should stop on the first match.\n        int expectedRegionLabel = 3;\n        \n        int resultLabel = Blobs.NextRegion(ParentTest, ColorTest, MinAreaTest, MaxAreaTest, LabelTest);\n\n        assertEquals(expectedRegionLabel, resultLabel, \"The NextRegion method did not find the expected region label.\");\n\n        // Test for no match, expect -1\n        ParentTest = -1;\n        ColorTest = 1;\n        MinAreaTest = 50.0;\n        MaxAreaTest = 100.0;\n        int noMatchExpected = -1;\n\n        int noMatchResult = Blobs.NextRegion(ParentTest, ColorTest, MinAreaTest, MaxAreaTest, LabelTest);\n        \n        assertEquals(noMatchExpected, noMatchResult, \"The NextRegion method should return -1 when no match is found.\");\n    }\n    \n    // Additional tests could be added here to cover more scenarios.\n}",
        "package_metric": 0.27,
        "class_metric": 9.82,
        "method_metric": 100.0,
        "pitest": 3.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "NextRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n\n    // Setup the test environment\n    @BeforeAll\n    public static void setup() {\n        Blobs.BLOBPARENT = 0;\n        Blobs.BLOBCOLOR = 1;\n        Blobs.BLOBAREA = 2; \n        // Assuming 2D array with at least 3 columns for Parent, Color, Area...\n        // Initialize other static fields if necessary...\n        \n        // Hypothetical data for testing\n        Blobs.RegionData = new double[][] {\n            {0, 0, 10.0}, // Label 0\n            {0, 1, 20.0}, // Label 1\n            {1, 0, 30.0}, // Label 2\n            {1, 1, 40.0}  // Label 3\n        };\n\n        Blobs.MaxLabel = Blobs.RegionData.length - 1;\n        // Initialize other static properties or data needed for the NextRegion method...\n    }\n\n    @Test\n    public void NextRegionTest() {\n        // Considering hypothetical values for regions\n        // The tests may vary depending on the actual implementation and data model.\n\n        // Searching for next region with parent 1, any color, area between 25 and 50, starting from label 0\n        int result = Blobs.NextRegion(1, -1, 25.0, 50.0, 0);\n        assertEquals(2, result, \"NextRegion should return the label of the next matching region.\");\n\n        // Searching for next region with parent 0, color 1, area between 10 and 30, starting from label 0\n        result = Blobs.NextRegion(0, 1, 10.0, 30.0, 0);\n        assertEquals(1, result, \"NextRegion should return the label of the next matching region.\");\n\n        // Checking when there is no region that satisfies the conditions\n        result = Blobs.NextRegion(0, 0, 50.0, 100.0, 0);\n        assertEquals(-1, result, \"NextRegion should return -1 if there is no region matching the conditions.\");\n\n        // Searching for next region with parent -1 (any), color 0, any area, starting from label 1\n        result = Blobs.NextRegion(-1, 0, 0.0, Double.MAX_VALUE, 1);\n        assertEquals(2, result, \"NextRegion should return the label of the next matching region starting from a given label.\");\n\n        // Add additional test cases as necessary\n    }\n}",
        "package_metric": 0.27,
        "class_metric": 9.82,
        "method_metric": 100.0,
        "pitest": 5.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "NextRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n\n    @BeforeEach\n    public void setUp() {\n        // Assuming the RegionData is set up with expected values for testing\n        Blobs.RegionData = new double[][]{\n            // {BLOBPARENT, BLOBCOLOR, BLOBAREA, ..., other values}\n            {0, 1, 10.0}, // Label = 0, for example\n            {0, 1, 20.0}, // Label = 1\n            {0, 0, 5.0},  // Label = 2\n            // Add as many as needed for the test\n        };\n        \n        // Set values to BLOBPARENT, BLOBCOLOR, BLOBAREA etc as needed for the index\n        Blobs.BLOBPARENT = 0;\n        Blobs.BLOBCOLOR = 1;\n        Blobs.BLOBAREA = 2;\n        // ... initialize other static members as necessary\n\n        // Assuming MaxLabel is set to the highest index in RegionData\n        Blobs.MaxLabel = Blobs.RegionData.length - 1;\n    }\n\n    @Test\n    public void NextRegionTest() {\n        // Test that NextRegion returns the correct label under specified conditions\n        int expectedLabel = 1; // Assuming that label 1 meets all the conditions\n        int actualLabel = Blobs.NextRegion(0, 1, 15.0, 25.0, 0); // Start searching from label 0\n        assertEquals(expectedLabel, actualLabel, \"NextRegion should return the correct next region label\");\n        \n        // Test that NextRegion returns -1 when there is no region that meets the conditions\n        int badLabel = Blobs.NextRegion(0, 1, 30.0, 40.0, 0); // No region with area between 30 and 40\n        assertEquals(-1, badLabel, \"NextRegion should return -1 when no region meets the conditions\");\n\n        // Add additional assertions as necessary to thoroughly test the NextRegion method.\n    }\n\n    // Optionally create an @AfterEach teardown method if required\n}",
        "package_metric": 0.27,
        "class_metric": 9.82,
        "method_metric": 100.0,
        "pitest": 3.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "NextRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    \n    @BeforeEach\n    public void setUp() {\n        // Initialize the static variables BLOBPARENT, BLOBCOLOR, BLOBAREA, etc.\n        Blobs.BLOBPARENT = 0;\n        Blobs.BLOBCOLOR = 1;\n        Blobs.BLOBAREA = 2;\n        // ... Initialize other required static variables as necessary\n        \n        // Initialize the array that represents the region data\n        // It is assumed that 'RegionData' is structured as an array\n        // of double arrays, where each double array represents a region's properties\n        Blobs.RegionData = new double[][] {\n            // Dummy data for test cases\n            {1.0, 0.0, 10.0}, // Region 0: Parent=1.0, Color=0.0, Area=10.0\n            {2.0, 1.0, 20.0}, // Region 1: Parent=2.0, Color=1.0, Area=20.0\n            // Add similar initialization for more regions as needed\n        };\n        \n        // Set the maximum label index based on the number of regions included above\n        Blobs.MaxLabel = Blobs.RegionData.length - 1;\n    }\n\n    @Test\n    public void NextRegionTest() {\n        // Test with all parameters matching the first region\n        int nextRegion = Blobs.NextRegion(1, 0, 5.0, 15.0, 0);\n        assertEquals(0, nextRegion, \"The method NextRegion should return the first matching region index.\");\n\n        // Test where no region meets the criteria\n        nextRegion = Blobs.NextRegion(1, 0, 30.0, 40.0, 0);\n        assertEquals(-1, nextRegion, \"The method NextRegion should return -1 if no region meets the criteria.\");\n\n        // Test with a higher starting label, where one of the following regions should match\n        nextRegion = Blobs.NextRegion(2, -1, 15.0, 25.0, 1);\n        assertEquals(1, nextRegion, \"The method NextRegion should return the index of the next matching region.\");\n\n        // Additional tests can be written to cover more edge cases and scenarios\n    }\n}",
        "package_metric": 0.27,
        "class_metric": 9.82,
        "method_metric": 100.0,
        "pitest": 4.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "NextRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n\n    // Assuming these constants and static variables are defined elsewhere\n    // Make sure to use the correct values or initialization for these in your actual codebase\n    // This is for illustration purposes only\n    static final int MaxLabel = 10;\n    static double[][] RegionData = { /* ... Your region data ... */ };\n    static final int BLOBPARENT = 0;\n    static final int BLOBCOLOR = 1;\n    static final int BLOBAREA = 2;\n\n    @Test\n    public void NextRegionTest() {\n        // Define your test values based on RegionData and the logic of NextRegion\n        int testParent = 5; // Replace with a test Parent value\n        int testColor = 3; // Replace with a test Color value\n        double testMinArea = 2.0; // Replace with a test minimum area\n        double testMaxArea = 8.0; // Replace with a test maximum area\n        int testLabel = 1; // Replace with a test start label\n\n        // Call the NextRegion method with the test values\n        int result = Blobs.NextRegion(testParent, testColor, testMinArea, testMaxArea, testLabel);\n\n        // Define expectations for the test\n        int expectedRegionIndex = -1; // Replace this with the expected result based on RegionData\n\n        // Assert the result is as expected\n        assertEquals(expectedRegionIndex, result, \"The NextRegion method did not return the expected region index.\");\n\n        // Add more asserts here if you want to test different conditions\n    }\n}",
        "package_metric": 0.22,
        "class_metric": 8.04,
        "method_metric": 45.45,
        "pitest": 1.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "NextRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n\n    // Assuming the existence of predefined constants and RegionData structure for testing.\n    private static final int MaxLabel = 100; // Hypothetical constant value for maximum label\n    private static final int BLOBPARENT = 0; // Hypothetical index for Blob Parent in RegionData\n    private static final int BLOBCOLOR = 1; // Hypothetical index for Blob color in RegionData\n    private static final int BLOBAREA = 2; // Hypothetical index for Blob area in RegionData\n    private static double[][] RegionData; // Hypothetical structure for storing region data\n    \n    // Hypothetical method to populate RegionData for test, not part of original task\n    private void initializeRegionData() {\n        RegionData = new double[MaxLabel + 1][];\n        for (int i = 0; i <= MaxLabel; i++) {\n            RegionData[i] = new double[] {-1, -1, -1}; // initialize with dummy data\n        }\n        // Populate with some test data\n        RegionData[10] = new double[] {1, 1, 50}; // Parent=1, Color=1, Area=50\n        RegionData[20] = new double[] {1, 0, 100}; // Parent=1, Color=0, Area=100\n        RegionData[30] = new double[] {2, 1, 150}; // Parent=2, Color=1, Area=150\n    }\n\n    // Method under test (copied from the original source code with necessary adjustments)\n    public static int NextRegion(int Parent, int Color, double MinArea, double MaxArea, int Label) {\n        // Adjusted source code for the test\n        double DParent = (double) Parent;\n        double DColor = (double) Color;\n        if (DColor > 0) DColor = 1;\n        \n        int i;\n        for (i = Label; i <= MaxLabel; i++) {\n            double[] Region = RegionData[i];\n            double ThisParent = Region[BLOBPARENT];\n            double ThisColor = Region[BLOBCOLOR];\n            if (DParent >= 0 && DParent != ThisParent) continue;\n            if (DColor >= 0 && DColor != ThisColor) continue;\n            if (Region[BLOBAREA] < MinArea || Region[BLOBAREA] > MaxArea) continue;\n            break; // We have a match!\n        }\n        if (i > MaxLabel) i = -1; // Use -1 to flag that there was no match\n        return i;\n    }\n\n    @BeforeEach\n    public void setUp() {\n        initializeRegionData();\n    }\n\n    @Test\n    public void NextRegionTest() {\n        int result;\n\n        // Test case 1: Looking for a region with a specific parent and color within area range\n        result = BlobsTest.NextRegion(1, 1, 40, 60, 0);\n        assertEquals(10, result);\n\n        // Test case 2: Looking for a region but none satisfies the area condition\n        result = BlobsTest.NextRegion(1, 1, 200, 300, 0);\n        assertEquals(-1, result);\n\n        // Test case 3: Looking for a region with negative parent (all parents) and specific color\n        result = BlobsTest.NextRegion(-1, 0, 50, 150, 0);\n        assertEquals(20, result);\n\n        // Test case 4: Non-existent label should return -1\n        result = BlobsTest.NextRegion(1, 1, 40, 60, 100);\n        assertEquals(-1, result);\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "FFmpegFrameGrabber",
        "method_name": "getAudioFrameRate",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FFmpegFrameGrabberTest {\n\n    // Mocked dependencies (assuming these classes and methods would exist in the real scenario)\n    static class StubSampleFrame {\n        int nb_samples() {\n            return 0; // Implement this method to return the actual number of samples\n        }\n    }\n\n    static class FFmpegFrameGrabber {\n        StubSampleFrame samples_frame;\n        Integer audio_st; // could be an actual audio stream object; here using Integer for illustration\n\n        public int getSampleRate() {\n            // This method should return the actual sample rate\n            // For the purpose of this test, we'll return a dummy sample rate, e.g., 48000 Hz \n            return 48000;\n        }\n\n        public void grabFrame(boolean b1, boolean b2, boolean b3, boolean b4, boolean b5) throws Exception {\n            // mock grabbing the frame here\n        }\n\n        public double getAudioFrameRate() {\n            if (audio_st == null) {\n                return 0.0;\n            } else {\n                if (samples_frame == null || samples_frame.nb_samples() == 0) {\n                    try {\n                        grabFrame(true, false, false, false, false);\n                    } catch (Exception e) {\n                        return 0.0;\n                    }\n                }\n                if (samples_frame != null && samples_frame.nb_samples() != 0)\n                    return ((double) getSampleRate()) / samples_frame.nb_samples();\n                else return 0.0;\n            }\n        }\n    }\n\n    @Test\n    public void getAudioFrameRateTest() {\n        FFmpegFrameGrabber frameGrabber = new FFmpegFrameGrabber();\n        \n        // Setting up the condition where the audio stream is null\n        frameGrabber.audio_st = null;\n        assertEquals(0.0, frameGrabber.getAudioFrameRate(), \"Audio frame rate should be 0 when audio_st is null\");\n        \n        // Setting up the condition where audio stream is not null but there are no samples\n        frameGrabber.audio_st = 1; // Assumes 1 represents a valid audio stream\n        frameGrabber.samples_frame = new StubSampleFrame() {\n            @Override\n            int nb_samples() {\n                return 0;\n            }\n        };\n        assertEquals(0.0, frameGrabber.getAudioFrameRate(), \"Audio frame rate should be 0 when there are no samples\");\n\n        // Setting up the condition where audio stream is not null and there are samples\n        frameGrabber.samples_frame = new StubSampleFrame() {\n            @Override\n            int nb_samples() {\n                return 1024; // Assumes the number of samples is 1024 for this test\n            }\n        };\n        double expectedFrameRate = (double)frameGrabber.getSampleRate() / 1024;\n        assertEquals(expectedFrameRate, frameGrabber.getAudioFrameRate(), \"Audio frame rate should be sample rate divided by the number of samples\");\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder1 = new CompareToBuilder();\n        double[] arrayA1 = {1.0, 2.0, 3.0};\n        double[] arrayB1 = {1.0, 2.0, 3.0};\n        builder1.append(arrayA1, arrayB1);\n        assertEquals(0, builder1.toComparison(), \"Arrays with the same values should compare as equal\");\n\n        CompareToBuilder builder2 = new CompareToBuilder();\n        double[] arrayA2 = {1.0, 3.0, 2.0};\n        double[] arrayB2 = {1.0, 2.0, 3.0};\n        builder2.append(arrayA2, arrayB2);\n        assertFalse(builder2.toComparison() == 0, \"Arrays with different values should not compare as equal\");\n\n        CompareToBuilder builder3 = new CompareToBuilder();\n        double[] arrayA3 = {1.0, 2.0};\n        double[] arrayB3 = {1.0, 2.0, 3.0};\n        builder3.append(arrayA3, arrayB3);\n        assertTrue(builder3.toComparison() < 0, \"Arrays with fewer elements should be considered less than arrays with more elements\");\n\n        CompareToBuilder builder4 = new CompareToBuilder();\n        builder4.append(arrayB3, arrayA3);\n        assertTrue(builder4.toComparison() > 0, \"Arrays with more elements should be considered greater than arrays with fewer elements\");\n\n        CompareToBuilder builder5 = new CompareToBuilder();\n        double[] arrayA5 = null;\n        double[] arrayB5 = {1.0, 2.0, 3.0};\n        builder5.append(arrayA5, arrayB5);\n        assertTrue(builder5.toComparison() < 0, \"null arrays should be considered less than non-null arrays\");\n\n        CompareToBuilder builder6 = new CompareToBuilder();\n        double[] arrayA6 = {1.0, 2.0, 3.0};\n        double[] arrayB6 = null;\n        builder6.append(arrayA6, arrayB6);\n        assertTrue(builder6.toComparison() > 0, \"Non-null arrays should be considered greater than null arrays\");\n\n        CompareToBuilder builder7 = new CompareToBuilder();\n        builder7.append((double[]) null, (double[]) null);\n        assertEquals(0, builder7.toComparison(), \"Both arrays being null should compare as equal\");\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 8.63,
        "method_metric": 84.375,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        double[] lhs = new double[] {1.0, 2.0, 3.0};\n        double[] rhs = new double[] {1.0, 4.0, 3.0};\n        double[] rhsEqual = new double[] {1.0, 2.0, 3.0};\n        double[] rhsShorter = new double[] {1.0, 2.0};\n        double[] rhsLonger = new double[] {1.0, 2.0, 3.0, 4.0};\n        double[] rhsNull = null;\n\n        // Check for equality\n        assertEquals(0, builder.append(lhs, rhsEqual).toComparison(), \"Arrays with the same values should compare as equal\");\n\n        // Reset builder for next comparison\n        builder = new CompareToBuilder();\n\n        // Check for less than\n        assertTrue(builder.append(lhs, rhs).toComparison() < 0, \"lhs should be less than rhs because 2.0 < 4.0\");\n\n        // Reset builder for next comparison\n        builder = new CompareToBuilder();\n\n        // Check for greater than (due to different array length)\n        assertTrue(builder.append(lhs, rhsShorter).toComparison() > 0, \"lhs should be greater than rhs because lhs has more elements than rhs\");\n\n        // Reset builder for next comparison\n        builder = new CompareToBuilder();\n\n        // Check for less than (due to different array length)\n        assertTrue(builder.append(lhs, rhsLonger).toComparison() < 0, \"lhs should be less than rhs because lhs has fewer elements than rhs\");\n\n        // Reset builder for next comparison\n        builder = new CompareToBuilder();\n\n        // Check for null right-hand side\n        assertTrue(builder.append(lhs, rhsNull).toComparison() > 0, \"Non-null array should be greater than null\");\n\n        // Reset builder for next comparison\n        builder = new CompareToBuilder();\n\n        // Check for null left-hand side\n        assertTrue(builder.append(rhsNull, rhs).toComparison() < 0, \"Null array should be less than non-null array\");\n    }\n}",
        "package_metric": 1.11,
        "class_metric": 8.24,
        "method_metric": 81.25,
        "pitest": 7.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder1 = new CompareToBuilder();\n        double[] lhs1 = {1.0, 2.0, 3.0};\n        double[] rhs1 = {1.0, 2.0, 3.0};\n        assertSame(builder1.append(lhs1, rhs1), builder1, \"Same arrays should not affect the comparison result\");\n\n        CompareToBuilder builder2 = new CompareToBuilder();\n        double[] lhs2 = {1.0};\n        double[] rhs2 = null;\n        assertSame(builder2.append(lhs2, rhs2), builder2, \"A non-null array should be greater than a null array\");\n        assertEquals(1, builder2.toComparison(), \"Comparison should return a positive value when lhs is non-null and rhs is null\");\n\n        CompareToBuilder builder3 = new CompareToBuilder();\n        double[] lhs3 = null;\n        double[] rhs3 = {1.0};\n        assertSame(builder3.append(lhs3, rhs3), builder3, \"A null array should be less than a non-null array\");\n        assertEquals(-1, builder3.toComparison(), \"Comparison should return a negative value when lhs is null and rhs is non-null\");\n\n        CompareToBuilder builder4 = new CompareToBuilder();\n        double[] lhs4 = {1.0, 2.0};\n        double[] rhs4 = {1.0, 3.0};\n        assertSame(builder4.append(lhs4, rhs4), builder4, \"Arrays with different values should be compared\");\n        assertEquals(-1, builder4.toComparison(), \"Comparison should return a negative value when lhs is less than rhs\");\n\n        CompareToBuilder builder5 = new CompareToBuilder();\n        double[] lhs5 = {4.0, 5.0, 6.0};\n        double[] rhs5 = {4.0, 5.0};\n        assertSame(builder5.append(lhs5, rhs5), builder5, \"Arrays with different lengths should be compared\");\n        assertEquals(1, builder5.toComparison(), \"Comparison should return a positive value when lhs is longer than rhs\");\n\n        CompareToBuilder builder6 = new CompareToBuilder();\n        double[] lhs6 = {1.0, Double.NaN};\n        double[] rhs6 = {1.0, Double.NaN};\n        assertSame(builder6.append(lhs6, rhs6), builder6, \"Arrays containing NaN should be compared\");\n        assertEquals(0, builder6.toComparison(), \"Comparison should return zero when both arrays contain NaN at the same index\");\n\n        // Additional tests can be added here to cover more cases such as arrays with Infinities, -0.0, etc.\n    }\n}",
        "package_metric": 1.11,
        "class_metric": 8.24,
        "method_metric": 81.25,
        "pitest": 7.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Test different lengths of arrays\n        double[] lhsArray = {1.0, 2.0, 3.0};\n        double[] rhsArrayShorter = {1.0, 2.0};\n        double[] rhsArraySameLength = {1.0, 2.0, 3.0};\n        double[] rhsArrayLonger = {1.0, 2.0, 3.0, 4.0};\n\n        // Same arrays reference\n        assertEquals(0, builder.append(lhsArray, lhsArray).toComparison(), \"Arrays have same reference\");\n\n        // Reset builder before next comparison\n        builder = new CompareToBuilder();\n\n        // Left array is longer than right array\n        assertTrue(builder.append(lhsArray, rhsArrayShorter).toComparison() > 0, \"Left array is longer than right array\");\n\n        // Reset builder before next comparison\n        builder = new CompareToBuilder();\n\n        // Right array is longer than left array\n        assertTrue(builder.append(rhsArrayShorter, lhsArray).toComparison() < 0, \"Right array is longer than left array\");\n\n        // Reset builder before next comparison\n        builder = new CompareToBuilder();\n\n        // Arrays of same length and with same elements (elements with different references)\n        double[] lhsArraySameElements = {1.0, 2.0, 3.0};\n        assertEquals(0, builder.append(lhsArraySameElements, rhsArraySameLength).toComparison(), \"Arrays have same length and same elements\");\n\n        // Reset builder before next comparison\n        builder = new CompareToBuilder();\n\n        // Different arrays with same length but different elements\n        double[] lhsArrayDifferentElements = {1.0, 2.0, 4.0};\n        assertTrue(builder.append(lhsArrayDifferentElements, rhsArraySameLength).toComparison() > 0, \"Arrays have same length but different elements\");\n\n        // Reset builder before next comparison\n        builder = new CompareToBuilder();\n\n        // Comparing null left array to non-null right array\n        assertTrue(builder.append(null, rhsArrayLonger).toComparison() < 0, \"Null left array is considered less than non-null right array\");\n\n        // Reset builder before next comparison\n        builder = new CompareToBuilder();\n\n        // Comparing non-null left array to null right array\n        assertTrue(builder.append(lhsArray, null).toComparison() > 0, \"Non-null left array is considered greater than null right array\");\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 8.63,
        "method_metric": 84.375,
        "pitest": 7.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    private CompareToBuilder builderUnderTest;\n    \n    @Test\n    public void appendTest() {\n        // Setup for the test\n        this.builderUnderTest = new CompareToBuilder();\n        \n        // Equal arrays test\n        double[] lhs = {1.0, 2.0, 3.0};\n        double[] rhs = {1.0, 2.0, 3.0};\n        builderUnderTest.append(lhs, rhs);\n        assertEquals(0, builderUnderTest.toComparison(), \"Arrays with the same values should compare equal\");\n        \n        // Different arrays test\n        double[] rhsDifferent = {1.0, 2.0, 4.0};\n        builderUnderTest = new CompareToBuilder(); // reset the builder\n        builderUnderTest.append(lhs, rhsDifferent);\n        assertNotEquals(0, builderUnderTest.toComparison(), \"Arrays with different values should not compare equal\");\n        \n        // Null and non-null arrays test\n        builderUnderTest = new CompareToBuilder(); // reset the builder\n        builderUnderTest.append(null, rhs);\n        assertEquals(-1, builderUnderTest.toComparison(), \"When lhs is null and rhs is not, comparison should be less than zero\");\n        \n        builderUnderTest = new CompareToBuilder(); // reset the builder\n        builderUnderTest.append(lhs, null);\n        assertEquals(1, builderUnderTest.toComparison(), \"When rhs is null and lhs is not, comparison should be greater than zero\");\n        \n        // Arrays of different lengths test\n        double[] rhsShorter = {1.0, 2.0};\n        builderUnderTest = new CompareToBuilder(); // reset the builder\n        builderUnderTest.append(lhs, rhsShorter);\n        assertTrue(builderUnderTest.toComparison() > 0, \"lhs with a longer length should be greater than a shorter rhs\");\n        \n        double[] lhsShorter = {1.0, 2.0};\n        builderUnderTest = new CompareToBuilder(); // reset the builder\n        builderUnderTest.append(lhsShorter, rhs);\n        assertTrue(builderUnderTest.toComparison() < 0, \"lhs with a shorter length should be less than a longer rhs\");\n    }\n}",
        "package_metric": 1.11,
        "class_metric": 8.24,
        "method_metric": 81.25,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Equal arrays\n        double[] a1 = new double[] {1.0, 2.0, 3.0};\n        double[] a2 = new double[] {1.0, 2.0, 3.0};\n        builder.append(a1, a2);\n        assertEquals(0, builder.toComparison());\n\n        // Different arrays\n        double[] b1 = new double[] {1.0, 2.0, 3.0};\n        double[] b2 = new double[] {4.0, 5.0, 6.0};\n        builder = new CompareToBuilder();\n        builder.append(b1, b2);\n        assertNotEquals(0, builder.toComparison());\n\n        // Left array is null\n        double[] c1 = null;\n        double[] c2 = new double[] {1.0, 2.0, 3.0};\n        builder = new CompareToBuilder();\n        builder.append(c1, c2);\n        assertEquals(-1, builder.toComparison());\n\n        // Right array is null\n        double[] d1 = new double[] {1.0, 2.0, 3.0};\n        double[] d2 = null;\n        builder = new CompareToBuilder();\n        builder.append(d1, d2);\n        assertEquals(1, builder.toComparison());\n\n        // Arrays are of different length\n        double[] e1 = new double[] {1.0, 2.0};\n        double[] e2 = new double[] {1.0, 2.0, 3.0};\n        builder = new CompareToBuilder();\n        builder.append(e1, e2);\n        assertEquals(-1, builder.toComparison());\n\n        double[] f1 = new double[] {1.0, 2.0, 3.0};\n        double[] f2 = new double[] {1.0, 2.0};\n        builder = new CompareToBuilder();\n        builder.append(f1, f2);\n        assertEquals(1, builder.toComparison());\n\n        // Same array (identical reference)\n        double[] g1 = new double[] {1.0, 2.0, 3.0};\n        double[] g2 = g1;\n        builder = new CompareToBuilder();\n        builder.append(g1, g2);\n        assertEquals(0, builder.toComparison());\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 8.63,
        "method_metric": 84.375,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        // Setup builder instance for testing\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Test equal arrays\n        double[] arr1 = new double[]{1.0, 2.0, 3.0};\n        double[] arr2 = new double[]{1.0, 2.0, 3.0};\n        builder.append(arr1, arr2);\n        assertEquals(0, builder.toComparison(), \"Arrays with the same values should be equal\");\n\n        // Test left array is null\n        double[] arrNull = null;\n        builder = new CompareToBuilder(); // reset the builder\n        builder.append(arrNull, arr2);\n        assertTrue(builder.toComparison() < 0, \"When left array is null, it should be considered less than\");\n\n        // Test right array is null\n        builder = new CompareToBuilder(); // reset the builder\n        builder.append(arr1, arrNull);\n        assertTrue(builder.toComparison() > 0, \"When right array is null, it should be considered greater than\");\n\n        // Test left array is shorter\n        double[] arrShorter = new double[]{1.0, 2.0};\n        builder = new CompareToBuilder(); // reset the builder\n        builder.append(arrShorter, arr2);\n        assertTrue(builder.toComparison() < 0, \"When left array is shorter, it should be considered less than\");\n\n        // Test right array is shorter\n        builder = new CompareToBuilder(); // reset the builder\n        builder.append(arr1, arrShorter);\n        assertTrue(builder.toComparison() > 0, \"When right array is shorter, it should be considered greater than\");\n\n        // Test with different values\n        double[] arr3 = new double[]{4.0, 5.0, 6.0};\n        builder = new CompareToBuilder(); // reset the builder\n        builder.append(arr1, arr3);\n        assertTrue(builder.toComparison() != 0, \"Arrays with different values should not be considered equal\");\n    }\n}",
        "package_metric": 1.11,
        "class_metric": 8.24,
        "method_metric": 81.25,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        double[] array1 = {1.0, 2.0, 3.0};\n        double[] array2 = {1.0, 2.0, 3.0};\n        double[] array3 = {1.1, 2.2, 3.3};\n        double[] array4 = null;\n\n        // Test with two equal arrays\n        builder.append(array1, array2);\n        assertEquals(0, builder.toComparison(), \"Arrays with same values should compare equal\");\n\n        builder = new CompareToBuilder(); // Reset builder for next comparison\n\n        // Test with different arrays\n        builder.append(array1, array3);\n        assertTrue(builder.toComparison() != 0, \"Arrays with different values should not compare equal\");\n\n        builder = new CompareToBuilder(); // Reset builder for next comparison\n\n        // Test with first array being null\n        builder.append(array4, array2);\n        assertEquals(-1, builder.toComparison(), \"Comparing null array to non-null array should yield -1\");\n\n        builder = new CompareToBuilder(); // Reset builder for next comparison\n\n        // Test with second array being null\n        builder.append(array1, array4);\n        assertEquals(1, builder.toComparison(), \"Comparing non-null array to null array should yield 1\");\n\n        builder = new CompareToBuilder(); // Reset builder for next comparison\n\n        // Test with arrays of different lengths\n        double[] array5 = {1.0, 2.0};\n        builder.append(array1, array5);\n        assertTrue(builder.toComparison() != 0, \"Comparing arrays of different lengths should not compare equal\");\n    }\n}",
        "package_metric": 1.11,
        "class_metric": 8.24,
        "method_metric": 81.25,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder compareToBuilder = new CompareToBuilder();\n\n        // Test with the same arrays\n        double[] lhs1 = new double[] {1.0, 2.0, 3.0};\n        double[] rhs1 = new double[] {1.0, 2.0, 3.0};\n        compareToBuilder.append(lhs1, rhs1);\n        assertEquals(0, compareToBuilder.toComparison(), \"Arrays are equal but comparison is not 0\");\n\n        // Test with left array being null\n        double[] lhs2 = null;\n        double[] rhs2 = new double[] {1.0, 2.0, 3.0};\n        compareToBuilder = new CompareToBuilder(); // reset builder\n        compareToBuilder.append(lhs2, rhs2);\n        assertTrue(compareToBuilder.toComparison() < 0, \"Left array is null so comparison should be less than 0\");\n\n        // Test with right array being null\n        double[] lhs3 = new double[] {1.0, 2.0, 3.0};\n        double[] rhs3 = null;\n        compareToBuilder = new CompareToBuilder(); // reset builder\n        compareToBuilder.append(lhs3, rhs3);\n        assertTrue(compareToBuilder.toComparison() > 0, \"Right array is null so comparison should be greater than 0\");\n\n        // Test with arrays of different lengths\n        double[] lhs4 = new double[] {1.0, 2.0, 3.0};\n        double[] rhs4 = new double[] {1.0, 2.0};\n        compareToBuilder = new CompareToBuilder(); // reset builder\n        compareToBuilder.append(lhs4, rhs4);\n        assertTrue(compareToBuilder.toComparison() > 0, \"Left array is longer so comparison should be greater than 0\");\n\n        // Test with arrays of equal lengths but different contents\n        double[] lhs5 = new double[] {1.0, 2.0, 3.0};\n        double[] rhs5 = new double[] {1.0, 2.0, 4.0};\n        compareToBuilder = new CompareToBuilder(); // reset builder\n        compareToBuilder.append(lhs5, rhs5);\n        assertTrue(compareToBuilder.toComparison() != 0, \"Arrays have different contents, comparison should not be 0\");\n    }\n}",
        "package_metric": 1.11,
        "class_metric": 8.24,
        "method_metric": 81.25,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Test for equal arrays\n        double[] lhsEquals = {1.0, 2.0, 3.0};\n        double[] rhsEquals = {1.0, 2.0, 3.0};\n        builder.append(lhsEquals, rhsEquals);\n        assertEquals(0, builder.toComparison());\n\n        // Test for left side null\n        double[] lhsNull = null;\n        double[] rhsNonNull = {1.0};\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(lhsNull, rhsNonNull);\n        assertEquals(-1, builder.toComparison());\n\n        // Test for right side null\n        double[] lhsNonNull = {1.0};\n        double[] rhsNull = null;\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(lhsNonNull, rhsNull);\n        assertEquals(1, builder.toComparison());\n\n        // Test for left side shorter\n        double[] lhsShorter = {1.0};\n        double[] rhsLonger = {1.0, 2.0};\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(lhsShorter, rhsLonger);\n        assertEquals(-1, builder.toComparison());\n\n        // Test for right side shorter\n        double[] lhsLonger = {1.0, 2.0};\n        double[] rhsShorter = {1.0};\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(lhsLonger, rhsShorter);\n        assertEquals(1, builder.toComparison());\n\n        // Test for non-equal arrays, where first element decides\n        double[] lhsFirstHigher = {2.0, 1.0};\n        double[] rhsFirstLower = {1.0, 2.0};\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(lhsFirstHigher, rhsFirstLower);\n        assertEquals(1, builder.toComparison());\n\n        // Test for non-equal arrays, where subsequent element decides\n        double[] lhsSubsequentLower = {1.0, 1.0};\n        double[] rhsSubsequentHigher = {1.0, 2.0};\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(lhsSubsequentLower, rhsSubsequentHigher);\n        assertEquals(-1, builder.toComparison());\n    }\n}",
        "package_metric": 1.11,
        "class_metric": 8.24,
        "method_metric": 81.25,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    private CompareToBuilder builder;\n\n    @BeforeEach\n    public void setUp() {\n        builder = new CompareToBuilder();\n    }\n\n    @Test\n    public void appendTest() {\n        // Test for both arrays being equal\n        double[] array1 = {1.0, 2.0, 3.0};\n        double[] array2 = {1.0, 2.0, 3.0};\n        builder.append(array1, array2);\n        assertEquals(0, builder.toComparison());\n\n        // Test for first array being null\n        double[] array3 = null;\n        double[] array4 = {1.0, 2.0, 3.0};\n        builder = new CompareToBuilder(); // Resetting builder\n        builder.append(array3, array4);\n        assertTrue(builder.toComparison() < 0);\n\n        // Test for second array being null\n        double[] array5 = {1.0, 2.0, 3.0};\n        double[] array6 = null;\n        builder = new CompareToBuilder(); // Resetting builder\n        builder.append(array5, array6);\n        assertTrue(builder.toComparison() > 0);\n\n        // Test for arrays of different lengths\n        double[] array7 = {1.0, 2.0};\n        double[] array8 = {1.0, 2.0, 3.0};\n        builder = new CompareToBuilder(); // Resetting builder\n        builder.append(array7, array8);\n        assertTrue(builder.toComparison() < 0);\n\n        // Test for arrays with different elements\n        double[] array9 = {1.0, 2.0, 3.0};\n        double[] array10 = {1.0, 4.0, 3.0};\n        builder = new CompareToBuilder(); // Resetting builder\n        builder.append(array9, array10);\n        assertTrue(builder.toComparison() < 0);\n\n        // Test when the first array elements are greater\n        double[] array11 = {1.0, 5.0, 3.0};\n        double[] array12 = {1.0, 4.0, 3.0};\n        builder = new CompareToBuilder(); // Resetting builder\n        builder.append(array11, array12);\n        assertTrue(builder.toComparison() > 0);\n    }\n\n    // Utility method to compute the comparison\n    private class CompareToBuilder {\n        private int comparison = 0;\n\n        public CompareToBuilder append(double lhs, double rhs) {\n            if (comparison != 0) {\n                return this;\n            }\n            comparison = Double.compare(lhs, rhs);\n            return this;\n        }\n\n        public CompareToBuilder append(final double[] lhs, final double[] rhs) {\n            if (comparison != 0) {\n                return this;\n            }\n            if (lhs == rhs) {\n                return this;\n            }\n            if (lhs == null) {\n                comparison = -1;\n                return this;\n            }\n            if (rhs == null) {\n                comparison = 1;\n                return this;\n            }\n            if (lhs.length != rhs.length) {\n                comparison = lhs.length < rhs.length ? -1 : 1;\n                return this;\n            }\n            for (int i = 0; i < lhs.length && comparison == 0; i++) {\n                append(lhs[i], rhs[i]);\n            }\n            return this;\n        }\n\n        public int toComparison() {\n            return comparison;\n        }\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    private CompareToBuilder compareToBuilder;\n\n    @BeforeEach\n    public void setUp() {\n        compareToBuilder = new CompareToBuilder();\n    }\n\n    @Test\n    public void appendTest_sameArrays() {\n        double[] lhs = {1.0, 2.0, 3.0};\n        double[] rhs = lhs;\n        assertSame(compareToBuilder.append(lhs, rhs), compareToBuilder, \"Should be same instance for same arrays.\");\n    }\n    \n    @Test\n    public void appendTest_equalArrays() {\n        double[] lhs = {1.0, 2.0, 3.0};\n        double[] rhs = {1.0, 2.0, 3.0};\n        CompareToBuilder result = compareToBuilder.append(lhs, rhs);\n        assertEquals(0, result.toComparison(), \"Arrays with equal values should not affect the comparison result.\");\n    }\n    \n    @Test\n    public void appendTest_lhsNull() {\n        double[] lhs = null;\n        double[] rhs = {1.0, 2.0, 3.0};\n        CompareToBuilder result = compareToBuilder.append(lhs, rhs);\n        assertTrue(result.toComparison() < 0, \"Comparison should be less than 0 when lhs is null.\");\n    }\n\n    @Test\n    public void appendTest_rhsNull() {\n        double[] lhs = {1.0, 2.0, 3.0};\n        double[] rhs = null;\n        CompareToBuilder result = compareToBuilder.append(lhs, rhs);\n        assertTrue(result.toComparison() > 0, \"Comparison should be greater than 0 when rhs is null.\");\n    }\n\n    @Test\n    public void appendTest_differentLengthArrays() {\n        double[] lhs = {1.0, 2.0};\n        double[] rhs = {1.0, 2.0, 3.0};\n        CompareToBuilder result = compareToBuilder.append(lhs, rhs);\n        assertTrue(result.toComparison() < 0, \"Comparison should be less than 0 when lhs array is shorter.\");\n    }\n\n    @Test\n    public void appendTest_valuesDifferent() {\n        double[] lhs = {1.0, 2.0, 3.0};\n        double[] rhs = {1.0, 2.0, 4.0};\n        CompareToBuilder result = compareToBuilder.append(lhs, rhs);\n        assertFalse(result.toComparison() == 0, \"Comparison should not be 0 when array values differ.\");\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 8.63,
        "method_metric": 84.375,
        "pitest": 7.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    private CompareToBuilder compareToBuilder;\n\n    @BeforeEach\n    public void setUp() {\n        compareToBuilder = new CompareToBuilder();\n    }\n\n    @Test\n    public void appendTest() {\n        double[] lhs = {1.0, 2.0, 3.0};\n        double[] rhs = {1.0, 2.0, 3.0};\n        double[] rhsDifferentLength = {1.0, 2.0};\n        double[] rhsDifferentContent = {4.0, 5.0, 6.0};\n\n        // Test equal arrays\n        compareToBuilder.append(lhs, rhs);\n        assertEquals(0, compareToBuilder.toComparison());\n\n        // Reset before next comparison\n        compareToBuilder = new CompareToBuilder();\n\n        // Test lhs with null\n        compareToBuilder.append(null, rhs);\n        assertEquals(-1, compareToBuilder.toComparison());\n\n        // Reset before next comparison\n        compareToBuilder = new CompareToBuilder();\n\n        // Test rhs with null\n        compareToBuilder.append(lhs, null);\n        assertEquals(1, compareToBuilder.toComparison());\n\n        // Reset before next comparison\n        compareToBuilder = new CompareToBuilder();\n\n        // Test arrays with different lengths\n        compareToBuilder.append(lhs, rhsDifferentLength);\n        assertEquals(1, compareToBuilder.toComparison());\n\n        // Reset before next comparison\n        compareToBuilder = new CompareToBuilder();\n\n        // Test arrays with different content\n        compareToBuilder.append(lhs, rhsDifferentContent);\n        assertNotEquals(0, compareToBuilder.toComparison());\n    }\n}",
        "package_metric": 1.11,
        "class_metric": 8.24,
        "method_metric": 81.25,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Equal arrays\n        double[] lhs = new double[] {1.0, 2.0, 3.0};\n        double[] rhs = new double[] {1.0, 2.0, 3.0};\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.toComparison(), \"Arrays with the same values should compare as equal.\");\n\n        // Null lhs\n        lhs = null;\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertEquals(-1, builder.toComparison(), \"Null lhs should result in comparison less than 0.\");\n\n        // Null rhs\n        lhs = new double[] {1.0, 2.0, 3.0};\n        rhs = null;\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertEquals(1, builder.toComparison(), \"Null rhs should result in comparison greater than 0.\");\n\n        // Different lengths\n        lhs = new double[] {1.0, 2.0};\n        rhs = new double[] {1.0, 2.0, 3.0};\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertEquals(-1, builder.toComparison(), \"lhs shorter than rhs should result in comparison less than 0.\");\n\n        rhs = new double[] {1.0, 2.0};\n        lhs = new double[] {1.0, 2.0, 3.0};\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertEquals(1, builder.toComparison(), \"lhs longer than rhs should result in comparison greater than 0.\");\n\n        // Different contents\n        lhs = new double[] {1.0, 4.0};\n        rhs = new double[] {1.0, 2.0};\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertEquals(1, builder.toComparison(), \"lhs with a larger value should result in comparison greater than 0.\");\n\n        rhs = new double[] {1.0, 4.0};\n        lhs = new double[] {1.0, 2.0};\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertEquals(-1, builder.toComparison(), \"lhs with a smaller value should result in comparison less than 0.\");\n    }\n}",
        "package_metric": 1.11,
        "class_metric": 8.24,
        "method_metric": 81.25,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    private CompareToBuilder compareToBuilder;\n\n    @BeforeEach\n    public void setUp() {\n        compareToBuilder = new CompareToBuilder();\n    }\n\n    @Test\n    public void appendTestSameArray() {\n        byte[] array1 = {1, 2, 3};\n        byte[] array1Copy = {1, 2, 3};\n        CompareToBuilder resultBuilder = compareToBuilder.append(array1, array1Copy);\n        assertEquals(0, resultBuilder.toComparison());\n    }\n\n    @Test\n    public void appendTestDifferentArraysSameLength() {\n        byte[] array1 = {1, 2, 3};\n        byte[] array2 = {1, 2, 4};\n        CompareToBuilder resultBuilder = compareToBuilder.append(array1, array2);\n        assertTrue(resultBuilder.toComparison() < 0);\n    }\n\n    @Test\n    public void appendTestDifferentArraysDifferentLengths() {\n        byte[] array1 = {1, 2, 3};\n        byte[] array2 = {1, 2, 3, 4};\n        CompareToBuilder resultBuilder = compareToBuilder.append(array1, array2);\n        assertTrue(resultBuilder.toComparison() < 0);\n    }\n\n    @Test\n    public void appendTestWithNullArrayOnLeft() {\n        byte[] array1 = null;\n        byte[] array2 = {1, 2, 3};\n        CompareToBuilder resultBuilder = compareToBuilder.append(array1, array2);\n        assertTrue(resultBuilder.toComparison() < 0);\n    }\n\n    @Test\n    public void appendTestWithNullArrayOnRight() {\n        byte[] array1 = {1, 2, 3};\n        byte[] array2 = null;\n        CompareToBuilder resultBuilder = compareToBuilder.append(array1, array2);\n        assertTrue(resultBuilder.toComparison() > 0);\n    }\n\n    @Test\n    public void appendTestWithBothNullArrays() {\n        byte[] array1 = null;\n        byte[] array2 = null;\n        CompareToBuilder resultBuilder = compareToBuilder.append(array1, array2);\n        assertEquals(0, resultBuilder.toComparison());\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 8.63,
        "method_metric": 84.375,
        "pitest": 7.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        byte[] lhs = {1, 2, 3};\n        byte[] rhs = {1, 2, 3};\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.toComparison());\n\n        lhs = new byte[]{1, 2, 3};\n        rhs = new byte[]{4, 5, 6};\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() < 0);\n\n        lhs = new byte[]{4, 5, 6};\n        rhs = new byte[]{1, 2, 3};\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() > 0);\n\n        lhs = new byte[]{1, 2, 3};\n        rhs = new byte[]{1, 2, 3, 4};\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() < 0);\n\n        lhs = new byte[]{1, 2, 3, 4};\n        rhs = new byte[]{1, 2, 3};\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() > 0);\n\n        lhs = new byte[]{1, 2, 3};\n        rhs = null;\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() > 0);\n\n        lhs = null;\n        rhs = new byte[]{1, 2, 3};\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() < 0);\n\n        lhs = null;\n        rhs = null;\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.toComparison());\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 8.63,
        "method_metric": 84.375,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Equal arrays\n        byte[] byteArray1 = {1, 2, 3};\n        byte[] byteArray2 = {1, 2, 3};\n        builder.append(byteArray1, byteArray2);\n        assertEquals(0, builder.toComparison(), \"Arrays with the same contents should be equal.\");\n\n        // Different length arrays where first is shorter\n        byteArray1 = new byte[]{1, 2};\n        byteArray2 = new byte[]{1, 2, 3};\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(byteArray1, byteArray2);\n        assertEquals(-1, builder.toComparison(), \"A shorter array should be less than a longer array.\");\n\n        // Different length arrays where first is longer\n        byteArray1 = new byte[]{1, 2, 3};\n        byteArray2 = new byte[]{1, 2};\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(byteArray1, byteArray2);\n        assertEquals(1, builder.toComparison(), \"A longer array should be greater than a shorter array.\");\n\n        // Non-null first array and null second array\n        byteArray1 = new byte[]{1, 2, 3};\n        byteArray2 = null;\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(byteArray1, byteArray2);\n        assertEquals(1, builder.toComparison(), \"Non-null array should be greater than null.\");\n\n        // Null first array and non-null second array\n        byteArray1 = null;\n        byteArray2 = new byte[]{1, 2, 3};\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(byteArray1, byteArray2);\n        assertEquals(-1, builder.toComparison(), \"Null should be less than non-null array.\");\n\n        // Arrays with same length but different contents\n        byteArray1 = new byte[]{1, 2, 3};\n        byteArray2 = new byte[]{1, 2, 4};\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(byteArray1, byteArray2);\n        assertEquals(-1, builder.toComparison(), \"Array with smaller value in last element should be less than other array.\");\n\n        // Both arrays are null\n        byteArray1 = null;\n        byteArray2 = null;\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(byteArray1, byteArray2);\n        assertEquals(0, builder.toComparison(), \"Both null arrays should be equal.\");\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 8.63,
        "method_metric": 84.375,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    private CompareToBuilder builder;\n\n    @BeforeEach\n    public void setUp() {\n        builder = new CompareToBuilder();\n    }\n\n    @Test\n    public void appendTestWithEqualArrays() {\n        byte[] lhs = {1, 2, 3};\n        byte[] rhs = {1, 2, 3};\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.toComparison(), \"Arrays with equal values should compare as equal\");\n    }\n\n    @Test\n    public void appendTestWithUnequalArrays() {\n        byte[] lhs = {1, 2, 3};\n        byte[] rhs = {1, 3, 2};\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() != 0, \"Arrays with different values should not compare as equal\");\n    }\n\n    @Test\n    public void appendTestWithNullAndNonNullArrays() {\n        byte[] lhs = null;\n        byte[] rhs = {1, 2, 3};\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() < 0, \"Null array should be considered less than a non-null array\");\n    }\n\n    @Test\n    public void appendTestWithNonNullAndNullArrays() {\n        byte[] lhs = {1, 2, 3};\n        byte[] rhs = null;\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() > 0, \"Non-null array should be considered greater than a null array\");\n    }\n\n    @Test\n    public void appendTestWithEmptyArrays() {\n        byte[] lhs = {};\n        byte[] rhs = {};\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.toComparison(), \"Two empty arrays should compare as equal\");\n    }\n\n    @Test\n    public void appendTestWithDifferentLengthArrays() {\n        byte[] lhs = {1, 2};\n        byte[] rhs = {1, 2, 3};\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() < 0, \"Shorter array should be considered less than a longer array\");\n    }\n\n    @Test\n    public void appendTestWithSameArrays() {\n        byte[] array = {1, 2, 3};\n        builder.append(array, array);\n        assertEquals(0, builder.toComparison(), \"Same array reference should compare as equal\");\n    }\n\n    // Additional tests can be added to cover the various types of appendable data (char[], int[], Object[], etc.).\n}",
        "package_metric": 1.16,
        "class_metric": 8.63,
        "method_metric": 84.375,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void testArrayEquality() {\n        byte[] array1 = {1, 2, 3};\n        byte[] array2 = {1, 2, 3};\n        CompareToBuilder builder = new CompareToBuilder();\n        \n        int comparison = builder.append(array1, array1).toComparison(); // same object\n        assertEquals(0, comparison);\n\n        builder = new CompareToBuilder();\n        comparison = builder.append(array1, array2).toComparison(); // same contents\n        assertEquals(0, comparison);\n    }\n\n    @Test\n    public void testNullArrays() {\n        byte[] array1 = null;\n        byte[] array2 = null;\n        byte[] array3 = {1, 2, 3};\n        \n        CompareToBuilder builder = new CompareToBuilder();\n        int comparison = builder.append(array1, array2).toComparison(); // both null\n        assertEquals(0, comparison);\n\n        builder = new CompareToBuilder();\n        comparison = builder.append(array1, array3).toComparison(); // lhs is null\n        assertEquals(-1, comparison);\n        \n        builder = new CompareToBuilder();\n        comparison = builder.append(array3, array1).toComparison(); // rhs is null\n        assertEquals(1, comparison);\n    }\n\n    @Test\n    public void testDifferentLengthArrays() {\n        byte[] array1 = {1, 2};\n        byte[] array2 = {1, 2, 3};\n        CompareToBuilder builder = new CompareToBuilder();\n\n        int comparison = builder.append(array1, array2).toComparison(); // lhs shorter\n        assertEquals(-1, comparison);\n\n        builder = new CompareToBuilder();\n        comparison = builder.append(array2, array1).toComparison(); // rhs shorter\n        assertEquals(1, comparison);\n    }\n\n    @Test\n    public void testArraysWithDifferentContents() {\n        byte[] array1 = {1, 2, 3};\n        byte[] array2 = {1, 2, 4};\n        CompareToBuilder builder = new CompareToBuilder();\n\n        int comparison = builder.append(array1, array2).toComparison(); // lhs < rhs\n        assertTrue(comparison < 0);\n\n        builder = new CompareToBuilder();\n        comparison = builder.append(array2, array1).toComparison(); // lhs > rhs\n        assertTrue(comparison > 0);\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 8.63,
        "method_metric": 84.375,
        "pitest": 7.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    \n    private CompareToBuilder builder;\n    \n    @BeforeEach\n    public void setUp() {\n        builder = new CompareToBuilder();\n    }\n    \n    @Test\n    public void appendTest() {\n        byte[] leftArray = {1, 2, 3};\n        byte[] rightArray = {1, 2, 3};\n        byte[] shorterArray = {1, 2};\n        byte[] longerArray = {1, 2, 3, 4};\n        byte[] differentArray = {4, 5, 6};\n\n        // Same arrays should result in comparison being 0 (equals)\n        builder.append(leftArray, rightArray);\n        assertEquals(0, builder.toComparison());\n\n        // Different lengths should not result in comparison being 0\n        builder = new CompareToBuilder();\n        builder.append(leftArray, shorterArray);\n        assertTrue(builder.toComparison() != 0);\n\n        // Null array compared to non-null should result in comparison being non-zero\n        builder = new CompareToBuilder();\n        builder.append(null, rightArray);\n        assertTrue(builder.toComparison() != 0);\n        \n        // Non-null array compared to null should result in comparison being non-zero\n        builder = new CompareToBuilder();\n        builder.append(leftArray, null);\n        assertTrue(builder.toComparison() != 0);\n\n        // Arrays of same length but different elements should result in comparison being non-zero\n        builder = new CompareToBuilder();\n        builder.append(leftArray, differentArray);\n        assertTrue(builder.toComparison() != 0);\n\n        // Comparison with a longer array should result in comparison being less than 0\n        builder = new CompareToBuilder();\n        builder.append(shorterArray, longerArray);\n        assertTrue(builder.toComparison() < 0);\n\n        // Comparison with a shorter array should result in comparison being greater than 0\n        builder = new CompareToBuilder();\n        builder.append(longerArray, shorterArray);\n        assertTrue(builder.toComparison() > 0);\n    }\n}",
        "package_metric": 1.11,
        "class_metric": 8.24,
        "method_metric": 81.25,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder testBuilder = new CompareToBuilder();\n\n        byte[] a = new byte[] {1, 2, 3};\n        byte[] b = new byte[] {1, 2, 3};\n        byte[] c = new byte[] {4, 5};\n        byte[] d = null;\n\n        // Test for same arrays\n        testBuilder.append(a, a);\n        assertEquals(0, testBuilder.toComparison(), \"The comparison should be 0 for the same array instances.\");\n\n        // Test for equal arrays\n        testBuilder = new CompareToBuilder();\n        testBuilder.append(a, b);\n        assertEquals(0, testBuilder.toComparison(), \"The comparison should be 0 for equal arrays.\");\n\n        // Test for different arrays with same length\n        testBuilder = new CompareToBuilder();\n        testBuilder.append(b, new byte[] {1, 2, 4});\n        assertTrue(testBuilder.toComparison() < 0, \"The comparison should be less than 0 for arrays that differ and lhs is smaller.\");\n\n        // Test when lhs array is null\n        testBuilder = new CompareToBuilder();\n        testBuilder.append(d, b);\n        assertTrue(testBuilder.toComparison() < 0, \"The comparison should be less than 0 when the lhs array is null.\");\n\n        // Test when rhs array is null\n        testBuilder = new CompareToBuilder();\n        testBuilder.append(a, d);\n        assertTrue(testBuilder.toComparison() > 0, \"The comparison should be greater than 0 when the rhs array is null.\");\n\n        // Test for arrays of different lengths\n        testBuilder = new CompareToBuilder();\n        testBuilder.append(a, c);\n        assertTrue(testBuilder.toComparison() > 0, \"The comparison should be greater than 0 when the lhs array is longer.\");\n \n        testBuilder = new CompareToBuilder();\n        testBuilder.append(c, a);\n        assertTrue(testBuilder.toComparison() < 0, \"The comparison should be less than 0 when the rhs array is longer.\");\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 8.63,
        "method_metric": 84.375,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        byte[] arrayA = {1, 2, 3};\n        byte[] arrayB = {1, 2, 3};\n        byte[] arrayC = {1, 2, 4};\n        byte[] arrayD = {1, 2};\n        byte[] arrayE = null;\n\n        // Test same arrays reference\n        CompareToBuilder builderSameRef = new CompareToBuilder();\n        assertSame(builderSameRef, builderSameRef.append(arrayA, arrayA));\n        \n        // Test equal arrays\n        CompareToBuilder builderEqual = new CompareToBuilder();\n        assertEquals(0, builderEqual.append(arrayA, arrayB).toComparison());\n        \n        // Test arrays with different values\n        CompareToBuilder builderDifferentValues = new CompareToBuilder();\n        assertTrue(builderDifferentValues.append(arrayA, arrayC).toComparison() != 0);\n        \n        // Test arrays with different lengths\n        CompareToBuilder builderDifferentLengths = new CompareToBuilder();\n        assertTrue(builderDifferentLengths.append(arrayA, arrayD).toComparison() != 0);\n        \n        // Test left array null\n        CompareToBuilder builderLeftNull = new CompareToBuilder();\n        assertEquals(-1, builderLeftNull.append(arrayE, arrayB).toComparison());\n        \n        // Test right array null\n        CompareToBuilder builderRightNull = new CompareToBuilder();\n        assertEquals(1, builderRightNull.append(arrayA, arrayE).toComparison());\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 8.63,
        "method_metric": 84.375,
        "pitest": 7.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Test when both byte arrays are the same instance\n        byte[] arraySame = {1, 2, 3};\n        CompareToBuilder builderSame = new CompareToBuilder();\n        int resultSame = builderSame.append(arraySame, arraySame).toComparison();\n        assertEquals(0, resultSame);\n\n        // Test when the left-hand side byte array is null\n        byte[] arrayLeftNull = null;\n        byte[] arrayRight = {1, 2, 3};\n        CompareToBuilder builderLeftNull = new CompareToBuilder();\n        int resultLeftNull = builderLeftNull.append(arrayLeftNull, arrayRight).toComparison();\n        assertEquals(-1, resultLeftNull);\n\n        // Test when the right-hand side byte array is null\n        byte[] arrayLeft = {1, 2, 3};\n        byte[] arrayRightNull = null;\n        CompareToBuilder builderRightNull = new CompareToBuilder();\n        int resultRightNull = builderRightNull.append(arrayLeft, arrayRightNull).toComparison();\n        assertEquals(1, resultRightNull);\n\n        // Test when byte arrays have different lengths\n        byte[] arrayShorter = {1, 2};\n        byte[] arrayLonger = {1, 2, 3};\n        CompareToBuilder builderDiffLengths = new CompareToBuilder();\n        int resultDiffLengths = builderDiffLengths.append(arrayShorter, arrayLonger).toComparison();\n        assertEquals(-1, resultDiffLengths);\n\n        // Test when byte arrays are equal in length but not in content\n        byte[] array1 = {1, 2, 4};\n        byte[] array2 = {1, 2, 3};\n        CompareToBuilder builderDiffContent = new CompareToBuilder();\n        int resultDiffContent = builderDiffContent.append(array1, array2).toComparison();\n        assertTrue(resultDiffContent != 0);\n\n        // Test when byte arrays are completely equal\n        byte[] arrayEqual1 = {1, 2, 3};\n        byte[] arrayEqual2 = {1, 2, 3};\n        CompareToBuilder builderEqualArrays = new CompareToBuilder();\n        int resultEqualArrays = builderEqualArrays.append(arrayEqual1, arrayEqual2).toComparison();\n        assertEquals(0, resultEqualArrays);\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 8.63,
        "method_metric": 84.375,
        "pitest": 7.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder compareToBuilder = new CompareToBuilder();\n\n        byte[] array1 = {1, 2, 3};\n        byte[] array2 = {1, 2, 3};\n        byte[] array3 = {4, 5};\n        byte[] array4 = null;\n\n        // Test where arrays are the same\n        assertEquals(compareToBuilder.append(array1, array2).toComparison(), 0, \"Arrays with same elements should compare equal\");\n\n        // Reset CompareToBuilder for next test\n        compareToBuilder = new CompareToBuilder();\n        \n        // Test where arrays have different lengths\n        assertNotEquals(compareToBuilder.append(array1, array3).toComparison(), 0, \"Arrays with different lengths should not compare equal\");\n\n        // Reset CompareToBuilder for next test\n        compareToBuilder = new CompareToBuilder();\n        \n        // Test where lhs is null\n        assertTrue(compareToBuilder.append(array4, array1).toComparison() < 0, \"Null lhs array should be considered less\");\n\n        // Reset CompareToBuilder for next test\n        compareToBuilder = new CompareToBuilder();\n        \n        // Test where rhs is null\n        assertTrue(compareToBuilder.append(array1, array4).toComparison() > 0, \"Null rhs array should be considered greater\");\n\n        // Reset CompareToBuilder for next test\n        compareToBuilder = new CompareToBuilder();\n        \n        // Test where both are null\n        assertEquals(compareToBuilder.append(array4, array4).toComparison(), 0, \"Both null arrays should compare equal\");\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 8.63,
        "method_metric": 84.375,
        "pitest": 6.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        byte[] lhs = {1, 2, 3};\n        byte[] rhs = {1, 2, 3};\n        byte[] rhsDifferent = {4, 5, 6};\n        byte[] rhsShorter = {1, 2};\n        byte[] rhsLonger = {1, 2, 3, 4};\n\n        // Same arrays reference comparison should be equal\n        builder.append(lhs, lhs);\n        assertEquals(0, builder.toComparison());\n\n        builder = new CompareToBuilder(); // reset builder\n\n        // Different arrays with same values comparison should be equal\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.toComparison());\n\n        builder = new CompareToBuilder(); // reset builder\n\n        // Different arrays with different values should not be equal\n        builder.append(lhs, rhsDifferent);\n        assertTrue(builder.toComparison() != 0);\n\n        builder = new CompareToBuilder(); // reset builder\n\n        // Comparison with null rhs should be greater than\n        builder.append(lhs, null);\n        assertTrue(builder.toComparison() > 0);\n\n        builder = new CompareToBuilder(); // reset builder\n\n        // Comparison with null lhs should be less than\n        builder.append(null, rhs);\n        assertTrue(builder.toComparison() < 0);\n\n        builder = new CompareToBuilder(); // reset builder\n\n        // Comparison with shorter rhs should be greater than\n        builder.append(lhs, rhsShorter);\n        assertTrue(builder.toComparison() > 0);\n\n        builder = new CompareToBuilder(); // reset builder\n\n        // Comparison with longer rhs should be less than\n        builder.append(lhs, rhsLonger);\n        assertTrue(builder.toComparison() < 0);\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 8.63,
        "method_metric": 84.375,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        byte[] lhs = new byte[] {1, 2, 3};\n        byte[] rhs = new byte[] {1, 2, 3};\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.toComparison(), \"Arrays with the same values should be equal\");\n\n        lhs = new byte[] {4, 5, 6};\n        rhs = new byte[] {7, 8, 9};\n        builder = new CompareToBuilder(); // Reset the builder\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() < 0, \"Arrays with smaller values should be less than\");\n\n        lhs = new byte[] {7, 8, 9};\n        rhs = new byte[] {4, 5, 6};\n        builder = new CompareToBuilder(); // Reset the builder\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() > 0, \"Arrays with larger values should be greater than\");\n\n        lhs = new byte[] {1, 2, 3};\n        rhs = null;\n        builder = new CompareToBuilder(); // Reset the builder\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() > 0, \"Any array should be greater than null\");\n\n        lhs = null;\n        rhs = new byte[] {1, 2, 3};\n        builder = new CompareToBuilder(); // Reset the builder\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() < 0, \"Null should be less than any array\");\n\n        lhs = new byte[]{1, 2};\n        rhs = new byte[]{1, 2, 3};\n        builder = new CompareToBuilder(); // Reset the builder\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() < 0, \"Array with fewer elements should be less than array with more elements\");\n\n        lhs = new byte[]{1, 2, 3};\n        rhs = new byte[]{1, 2};\n        builder = new CompareToBuilder(); // Reset the builder\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() > 0, \"Array with more elements should be greater than array with fewer elements\");\n\n        lhs = new byte[]{1, 2, 3};\n        rhs = new byte[]{1, 2, (byte)(3 + 1)};\n        builder = new CompareToBuilder(); // Reset the builder\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() < 0, \"Array with a smaller element should be less than\");\n\n        lhs = new byte[]{1, 2, (byte)(3 + 1)};\n        rhs = new byte[]{1, 2, 3};\n        builder = new CompareToBuilder(); // Reset the builder\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() > 0, \"Array with a larger element should be greater than\");\n    }\n}",
        "package_metric": 1.11,
        "class_metric": 8.24,
        "method_metric": 81.25,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        CompareToBuilder cb = new CompareToBuilder();\n\n        // Test for same arrays reference\n        byte[] arrayRef1 = new byte[]{1, 2, 3};\n        byte[] arrayRef2 = arrayRef1;\n        cb.append(arrayRef1, arrayRef2);\n        assertEquals(0, cb.toComparison(), \"Should be equal when both array references are the same\");\n\n        // Reset CompareToBuilder\n        cb = new CompareToBuilder();\n\n        // Test for equal arrays\n        byte[] array1 = new byte[]{1, 2, 3};\n        byte[] array2 = new byte[]{1, 2, 3};\n        cb.append(array1, array2);\n        assertEquals(0, cb.toComparison(), \"Should be equal for two arrays with the same values\");\n\n        // Reset CompareToBuilder\n        cb = new CompareToBuilder();\n\n        // Test for lhs null and rhs not null\n        byte[] lhsNull = null;\n        byte[] rhsNotNull = new byte[]{1, 2, 3};\n        cb.append(lhsNull, rhsNotNull);\n        assertTrue(cb.toComparison() < 0, \"Should be less than 0 when lhs is null and rhs is not null\");\n\n        // Reset CompareToBuilder\n        cb = new CompareToBuilder();\n\n        // Test for lhs not null and rhs null\n        byte[] lhsNotNull = new byte[]{1, 2, 3};\n        byte[] rhsNull = null;\n        cb.append(lhsNotNull, rhsNull);\n        assertTrue(cb.toComparison() > 0, \"Should be more than 0 when lhs is not null and rhs is null\");\n\n        // Reset CompareToBuilder\n        cb = new CompareToBuilder();\n\n        // Test for arrays of different lengths\n        byte[] shorterArray = new byte[]{1, 2};\n        byte[] longerArray = new byte[]{1, 2, 3};\n        cb.append(shorterArray, longerArray);\n        assertTrue(cb.toComparison() < 0, \"Should be less than 0 when lhs is shorter than rhs\");\n\n        // Reset CompareToBuilder\n        cb = new CompareToBuilder();\n\n        cb.append(longerArray, shorterArray);\n        assertTrue(cb.toComparison() > 0, \"Should be more than 0 when lhs is longer than rhs\");\n\n        // Reset CompareToBuilder\n        cb = new CompareToBuilder();\n\n        // Test for arrays with same length but different contents\n        byte[] array3 = new byte[]{1, 2, 4};\n        cb.append(array1, array3);\n        assertFalse(cb.toComparison() == 0, \"Should not be equal for arrays of same length but different contents\");\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 8.63,
        "method_metric": 84.375,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder compareToBuilder = new CompareToBuilder();\n        \n        byte[] lhs = {1, 2, 3};\n        byte[] rhs = {1, 2, 3};\n        byte[] rhs_differentLength = {1, 2, 3, 4};\n        byte[] rhs_differentContent = {1, 3, 2};\n        byte[] rhs_null = null;\n        \n        // Same arrays references should return same builder\n        assertSame(compareToBuilder.append(lhs, lhs), compareToBuilder,\n                   \"Appending the same array references should not change the comparison\");\n        \n        // Null lhs should set comparison to -1\n        compareToBuilder = new CompareToBuilder(); // Reset the builder\n        compareToBuilder.append(null, rhs);\n        assertNotEquals(0, compareToBuilder.build(), \"Appending null lhs should set comparison to -1\");\n        \n        // Null rhs should set comparison to 1\n        compareToBuilder = new CompareToBuilder(); // Reset the builder\n        compareToBuilder.append(lhs, null);\n        assertNotEquals(0, compareToBuilder.build(), \"Appending null rhs should set comparison to 1\");\n\n        // Different array lengths\n        compareToBuilder = new CompareToBuilder(); // Reset the builder\n        compareToBuilder.append(lhs, rhs_differentLength);\n        assertNotEquals(0, compareToBuilder.build(), \"Appending arrays of different lengths should set comparison\");\n        \n        // Arrays with different content\n        compareToBuilder = new CompareToBuilder(); // Reset the builder\n        compareToBuilder.append(lhs, rhs_differentContent);\n        assertNotEquals(0, compareToBuilder.build(), \"Appending arrays with different content should set comparison\");\n        \n        // Same array contents and lengths should return same builder\n        compareToBuilder = new CompareToBuilder(); // Reset the builder\n        assertSame(compareToBuilder.append(lhs, rhs), compareToBuilder,\n                   \"Appending arrays with same content and length should not change the comparison\");\n    }\n}",
        "package_metric": 1.21,
        "class_metric": 9.02,
        "method_metric": 84.375,
        "pitest": 6.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    \n    private CompareToBuilder compareBuilder;\n\n    @BeforeEach\n    public void setUp() {\n        compareBuilder = new CompareToBuilder();\n    }\n\n    @Test\n    public void appendTest() {\n        // Setup\n        byte[] lhs = new byte[] {1, 2, 3};\n        byte[] rhs = new byte[] {1, 2, 3};\n        byte[] rhsDifferent = new byte[] {4, 5, 6};\n        byte[] rhsDifferentLength = new byte[] {1, 2};\n        byte[] rhsNull = null;\n\n        // Same arrays should return a comparison value of 0\n        CompareToBuilder result1 = compareBuilder.append(lhs, rhs);\n        assertEquals(0, result1.toComparison());\n\n        // Reset the CompareToBuilder object for a new comparison\n        compareBuilder = new CompareToBuilder();\n\n        // Different arrays should not return a comparison value of 0\n        CompareToBuilder result2 = compareBuilder.append(lhs, rhsDifferent);\n        assertNotEquals(0, result2.toComparison());\n\n        // Reset the CompareToBuilder object for a new comparison\n        compareBuilder = new CompareToBuilder();\n\n        // Arrays of different length should not return a comparison value of 0\n        CompareToBuilder result3 = compareBuilder.append(lhs, rhsDifferentLength);\n        assertNotEquals(0, result3.toComparison());\n\n        // Reset the CompareToBuilder object for a new comparison\n        compareBuilder = new CompareToBuilder();\n\n        // When the left-hand side (lhs) is null, comparison should be less than 0\n        CompareToBuilder result4 = compareBuilder.append(null, rhs);\n        assertTrue(result4.toComparison() < 0);\n\n        // Reset the CompareToBuilder object for a new comparison\n        compareBuilder = new CompareToBuilder();\n\n        // When the right-hand side (rhs) is null, the comparison should be greater than 0\n        CompareToBuilder result5 = compareBuilder.append(lhs, rhsNull);\n        assertTrue(result5.toComparison() > 0);\n    }\n}",
        "package_metric": 1.11,
        "class_metric": 8.24,
        "method_metric": 81.25,
        "pitest": 7.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder compareToBuilder = new CompareToBuilder();\n\n        // Test when both lhs and rhs are the same array\n        byte[] sameArray = new byte[]{1, 2, 3};\n        assertSame(compareToBuilder.append(sameArray, sameArray), compareToBuilder);\n\n        // Test when lhs is null\n        byte[] notNullArray = new byte[]{1, 2, 3};\n        compareToBuilder = new CompareToBuilder();\n        assertSame(compareToBuilder.append(null, notNullArray), compareToBuilder);\n        assertEquals(-1, compareToBuilder.toComparison());\n\n        // Test when rhs is null\n        compareToBuilder = new CompareToBuilder();\n        assertSame(compareToBuilder.append(notNullArray, null), compareToBuilder);\n        assertEquals(1, compareToBuilder.toComparison());\n\n        // Test when arrays have different lengths\n        byte[] shorterArray = new byte[]{1, 2};\n        compareToBuilder = new CompareToBuilder();\n        assertSame(compareToBuilder.append(shorterArray, notNullArray), compareToBuilder);\n        assertEquals(-1, compareToBuilder.toComparison());\n\n        compareToBuilder = new CompareToBuilder();\n        assertSame(compareToBuilder.append(notNullArray, shorterArray), compareToBuilder);\n        assertEquals(1, compareToBuilder.toComparison());\n\n        // Test when arrays elements differ\n        byte[] differentArray = new byte[]{1, 2, 4};\n        compareToBuilder = new CompareToBuilder();\n        compareToBuilder.append(notNullArray, differentArray);\n        assertTrue(compareToBuilder.toComparison() != 0);\n\n        // Test when arrays are equal\n        byte[] equalArray = new byte[]{1, 2, 3};\n        compareToBuilder = new CompareToBuilder();\n        assertSame(compareToBuilder.append(notNullArray, equalArray), compareToBuilder);\n        assertEquals(0, compareToBuilder.toComparison());\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 8.63,
        "method_metric": 84.375,
        "pitest": 7.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Initialize CompareToBuilder\n        CompareToBuilder builder = new CompareToBuilder();\n        \n        // Test appending equal boolean arrays\n        boolean[] boolArray1 = {true, false, true};\n        boolean[] boolArray2 = {true, false, true};\n        builder.append(boolArray1, boolArray2);\n        assertEquals(0, builder.toComparison());\n        \n        // Test appending non-equal boolean arrays with different lengths\n        boolean[] boolArray3 = {true, false};\n        builder = new CompareToBuilder(); // Reset builder\n        builder.append(boolArray1, boolArray3);\n        assertTrue(builder.toComparison() > 0);\n        \n        // Test appending non-equal boolean arrays with same length\n        boolean[] boolArray4 = {false, false, true};\n        builder = new CompareToBuilder(); // Reset builder\n        builder.append(boolArray1, boolArray4);\n        assertTrue(builder.toComparison() > 0);\n        \n        // Test appending when first array is null\n        builder = new CompareToBuilder(); // Reset builder\n        builder.append(null, boolArray2);\n        assertTrue(builder.toComparison() < 0);\n        \n        // Test appending when second array is null\n        builder = new CompareToBuilder(); // Reset builder\n        builder.append(boolArray1, null);\n        assertTrue(builder.toComparison() > 0);\n        \n        // Test appending when both arrays are null\n        builder = new CompareToBuilder(); // Reset builder\n        builder.append((boolean[]) null, null);\n        assertEquals(0, builder.toComparison());\n    }\n}",
        "package_metric": 1.32,
        "class_metric": 9.8,
        "method_metric": 84.375,
        "pitest": 6.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Compare same arrays (reference check)\n        boolean[] array1 = new boolean[] {true, false, true};\n        assertEquals(0, builder.append(array1, array1).toComparison());\n\n        // Reset builder\n        builder = new CompareToBuilder();\n\n        // Compare equal arrays (content check)\n        boolean[] array2 = new boolean[] {true, false, true};\n        assertEquals(0, builder.append(array1, array2).toComparison());\n\n        // Reset builder\n        builder = new CompareToBuilder();\n\n        // Compare different arrays (content check)\n        boolean[] array3 = new boolean[] {false, true, true};\n        assertTrue(builder.append(array1, array3).toComparison() != 0);\n\n        // Reset builder\n        builder = new CompareToBuilder();\n\n        // Compare different arrays (length check)\n        boolean[] array4 = new boolean[] {true, false};\n        assertTrue(builder.append(array1, array4).toComparison() != 0);\n\n        // Reset builder\n        builder = new CompareToBuilder();\n\n        // Compare against null (rhs is null, which should give 1)\n        assertEquals(1, builder.append(array1, null).toComparison());\n\n        // Reset builder\n        builder = new CompareToBuilder();\n\n        // Compare against null (lhs is null, which should give -1)\n        assertEquals(-1, builder.append(null, array1).toComparison());\n    }\n}",
        "package_metric": 1.32,
        "class_metric": 9.8,
        "method_metric": 84.375,
        "pitest": 7.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        CompareToBuilder compareToBuilder = new CompareToBuilder();\n        \n        // Test for same arrays (including nulls)\n        boolean[] array1 = new boolean[] {true, false};\n        boolean[] array2 = new boolean[] {true, false};\n        boolean[] nullArray = null;\n\n        assertEquals(0, compareToBuilder.append(array1, array1).toComparison());\n        compareToBuilder = new CompareToBuilder(); // Reset after assertion\n        \n        assertEquals(0, compareToBuilder.append(nullArray, nullArray).toComparison());\n        compareToBuilder = new CompareToBuilder(); // Reset after assertion\n\n        // Test for different arrays with same lengths\n        array2 = new boolean[] {false, true};\n        assertNotEquals(0, compareToBuilder.append(array1, array2).toComparison());\n        compareToBuilder = new CompareToBuilder(); // Reset after assertion\n        \n        // Test for left array null\n        assertEquals(-1, compareToBuilder.append(nullArray, array2).toComparison());\n        compareToBuilder = new CompareToBuilder(); // Reset after assertion\n        \n        // Test for right array null\n        assertEquals(1, compareToBuilder.append(array1, nullArray).toComparison());\n        compareToBuilder = new CompareToBuilder(); // Reset after assertion\n\n        // Test for arrays with different lengths\n        array2 = new boolean[] {true};\n        assertTrue(compareToBuilder.append(array1, array2).toComparison() > 0);\n        compareToBuilder = new CompareToBuilder(); // Reset after assertion\n\n        array1 = new boolean[] {true};\n        array2 = new boolean[] {true, false};\n        assertTrue(compareToBuilder.append(array1, array2).toComparison() < 0);\n        compareToBuilder = new CompareToBuilder(); // Reset after assertion\n\n        // Test for different arrays where first boolean is different\n        array1 = new boolean[] {false, true};\n        array2 = new boolean[] {true, true};\n        assertTrue(compareToBuilder.append(array1, array2).toComparison() < 0);\n        compareToBuilder = new CompareToBuilder(); // Reset after assertion\n    }\n}",
        "package_metric": 1.32,
        "class_metric": 9.8,
        "method_metric": 84.375,
        "pitest": 7.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    \n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Test for both arrays null\n        boolean[] lhsNull = null;\n        boolean[] rhsNull = null;\n        builder.append(lhsNull, rhsNull);\n        assertEquals(0, builder.toComparison());\n\n        // Test for lhs null and rhs not null\n        boolean[] rhsNotNull = { true, false };\n        builder = new CompareToBuilder();\n        builder.append(lhsNull, rhsNotNull);\n        assertEquals(-1, builder.toComparison());\n\n        // Test for lhs not null and rhs null\n        boolean[] lhsNotNull = { true, false };\n        builder = new CompareToBuilder();\n        builder.append(lhsNotNull, rhsNull);\n        assertEquals(1, builder.toComparison());\n\n        // Test for arrays with same length and content\n        boolean[] lhsSame = { true, false };\n        boolean[] rhsSame = { true, false };\n        builder = new CompareToBuilder();\n        builder.append(lhsSame, rhsSame);\n        assertEquals(0, builder.toComparison());\n\n        // Test for different length arrays\n        boolean[] lhsShorter = { true };\n        boolean[] rhsLonger = { true, false };\n        builder = new CompareToBuilder();\n        builder.append(lhsShorter, rhsLonger);\n        assertEquals(-1, builder.toComparison());\n\n        boolean[] lhsLonger = { true, false, true };\n        boolean[] rhsShorter = { true, false };\n        builder = new CompareToBuilder();\n        builder.append(lhsLonger, rhsShorter);\n        assertEquals(1, builder.toComparison());\n\n        // Test for arrays with same length and different content\n        boolean[] lhsDifferent = { true, true };\n        boolean[] rhsDifferent = { true, false };\n        builder = new CompareToBuilder();\n        builder.append(lhsDifferent, rhsDifferent);\n        assertEquals(1, builder.toComparison());\n\n        boolean[] lhsDifferent2 = { false, true };\n        boolean[] rhsDifferent2 = { true, true };\n        builder = new CompareToBuilder();\n        builder.append(lhsDifferent2, rhsDifferent2);\n        assertEquals(-1, builder.toComparison());\n    }\n}",
        "package_metric": 1.37,
        "class_metric": 10.2,
        "method_metric": 90.625,
        "pitest": 6.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Both arrays are equal\n        boolean[] lhs1 = {true, false, true};\n        boolean[] rhs1 = {true, false, true};\n        assertEquals(0, builder.append(lhs1, rhs1).toComparison());\n\n        builder = new CompareToBuilder(); // Reset the builder\n\n        // The lhs array is null\n        boolean[] lhs2 = null;\n        boolean[] rhs2 = {true, false};\n        assertEquals(-1, builder.append(lhs2, rhs2).toComparison());\n\n        builder = new CompareToBuilder(); // Reset the builder\n\n        // The rhs array is null\n        boolean[] lhs3 = {false, true};\n        boolean[] rhs3 = null;\n        assertEquals(1, builder.append(lhs3, rhs3).toComparison());\n\n        builder = new CompareToBuilder(); // Reset the builder\n\n        // lhs and rhs arrays have different lengths\n        boolean[] lhs4 = {true, false};\n        boolean[] rhs4 = {true, false, true};\n        assertEquals(-1, builder.append(lhs4, rhs4).toComparison());\n\n        builder = new CompareToBuilder(); // Reset the builder\n\n        // lhs and rhs arrays have the same lengths but different values\n        boolean[] lhs5 = {true, true, false};\n        boolean[] rhs5 = {true, false, false};\n        assertTrue(builder.append(lhs5, rhs5).toComparison() > 0);\n    }\n}",
        "package_metric": 1.27,
        "class_metric": 9.41,
        "method_metric": 81.25,
        "pitest": 8.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Equal arrays\n        boolean[] array1 = { true, false, true };\n        boolean[] array2 = { true, false, true };\n        CompareToBuilder builder1 = new CompareToBuilder();\n        builder1.append(array1, array2);\n        assertEquals(0, builder1.toComparison());\n\n        // Different arrays\n        boolean[] array3 = { true, false, true };\n        boolean[] array4 = { false, true, false };\n        CompareToBuilder builder2 = new CompareToBuilder();\n        builder2.append(array3, array4);\n        assertNotEquals(0, builder2.toComparison());\n\n\t\t// Different lengths - array1 is shorter\n        boolean[] array5 = { true, false };\n        boolean[] array6 = { true, false, false };\n        CompareToBuilder builder3 = new CompareToBuilder();\n        builder3.append(array5, array6);\n        assertTrue(builder3.toComparison() < 0);\n\n        // Different lengths - array6 is shorter\n        CompareToBuilder builder4 = new CompareToBuilder();\n        builder4.append(array6, array5);\n        assertTrue(builder4.toComparison() > 0);\n\n        // Null lhs array\n        boolean[] arrayNull = null;\n        CompareToBuilder builder5 = new CompareToBuilder();\n        builder5.append(arrayNull, array4);\n        assertTrue(builder5.toComparison() < 0);\n\n        // Null rhs array\n        CompareToBuilder builder6 = new CompareToBuilder();\n        builder6.append(array3, arrayNull);\n        assertTrue(builder6.toComparison() > 0);\n\n        // Both arrays null\n        CompareToBuilder builder7 = new CompareToBuilder();\n        builder7.append(arrayNull, arrayNull);\n        assertEquals(0, builder7.toComparison());\n    }\n}",
        "package_metric": 1.32,
        "class_metric": 9.8,
        "method_metric": 84.375,
        "pitest": 6.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        // Both arrays are null (should be considered equal)\n        CompareToBuilder builder = new CompareToBuilder();\n        boolean[] a1 = null;\n        boolean[] a2 = null;\n        builder.append(a1, a2);\n        assertEquals(0, builder.toComparison());\n\n        // Left array is null and right array is not null (left < right)\n        builder = new CompareToBuilder();\n        a1 = null;\n        a2 = new boolean[]{true, false};\n        builder.append(a1, a2);\n        assertEquals(-1, builder.toComparison());\n\n        // Left array is not null and right array is null (left > right)\n        builder = new CompareToBuilder();\n        a1 = new boolean[]{true, false};\n        a2 = null;\n        builder.append(a1, a2);\n        assertEquals(1, builder.toComparison());\n\n        // Both arrays have different lengths (comparison should not be 0)\n        builder = new CompareToBuilder();\n        a1 = new boolean[]{true, false};\n        a2 = new boolean[]{true, false, true};\n        builder.append(a1, a2);\n        assertTrue(builder.toComparison() != 0);\n\n        // Both arrays have the same length but different values\n        builder = new CompareToBuilder();\n        a1 = new boolean[]{true, false, true};\n        a2 = new boolean[]{true, true, false};\n        builder.append(a1, a2);\n        assertTrue(builder.toComparison() != 0);\n\n        // Both arrays have the same values\n        builder = new CompareToBuilder();\n        a1 = new boolean[]{true, false, true};\n        a2 = new boolean[]{true, false, true};\n        builder.append(a1, a2);\n        assertEquals(0, builder.toComparison());\n\n        // Ensure the comparison obeys the contract by comparing the same array to itself (should be equal)\n        builder = new CompareToBuilder();\n        a1 = new boolean[]{true, true, false};\n        builder.append(a1, a1);\n        assertEquals(0, builder.toComparison());\n    }\n}",
        "package_metric": 1.32,
        "class_metric": 9.8,
        "method_metric": 84.375,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Test when both arrays are null\n        builder = new CompareToBuilder();\n        builder.append((boolean[]) null, (boolean[]) null);\n        assertEquals(0, builder.toComparison(), \"Both null arrays should lead to a comparison of 0\");\n\n        // Test when left array is null\n        builder = new CompareToBuilder();\n        builder.append(null, new boolean[] {true, false});\n        assertEquals(-1, builder.toComparison(), \"Left null array should lead to a comparison of -1\");\n\n        // Test when right array is null\n        builder = new CompareToBuilder();\n        builder.append(new boolean[] {true, false}, null);\n        assertEquals(1, builder.toComparison(), \"Right null array should lead to a comparison of 1\");\n\n        // Test when arrays are of different lengths\n        builder = new CompareToBuilder();\n        builder.append(new boolean[] {true}, new boolean[] {true, false});\n        assertEquals(-1, builder.toComparison(), \"Different array lengths should lead to a comparison of -1 when left is shorter\");\n\n        builder = new CompareToBuilder();\n        builder.append(new boolean[] {true, false}, new boolean[] {true});\n        assertEquals(1, builder.toComparison(), \"Different array lengths should lead to a comparison of 1 when left is longer\");\n\n        // Test when arrays are equal\n        builder = new CompareToBuilder();\n        builder.append(new boolean[] {true, false}, new boolean[] {true, false});\n        assertEquals(0, builder.toComparison(), \"Equal arrays should lead to a comparison of 0\");\n\n        // Test when arrays have different values\n        builder = new CompareToBuilder();\n        builder.append(new boolean[] {false, true}, new boolean[] {true, true});\n        assertTrue(builder.toComparison() < 0, \"Different array values should lead to a comparison < 0 when left has a false where right has a true\");\n\n        builder = new CompareToBuilder();\n        builder.append(new boolean[] {true, true}, new boolean[] {true, false});\n        assertTrue(builder.toComparison() > 0, \"Different array values should lead to a comparison > 0 when left has a true where right has a false\");\n    }\n}",
        "package_metric": 1.37,
        "class_metric": 10.2,
        "method_metric": 90.625,
        "pitest": 6.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        // Setup\n        CompareToBuilder builder = new CompareToBuilder();\n\n        boolean[] lhs = new boolean[]{true, false, true};\n        boolean[] rhs = new boolean[]{true, false, true};\n        boolean[] lhsDifferentLength = new boolean[]{true, false};\n        boolean[] rhsDifferent = new boolean[]{false, true, false};\n        boolean[] lhsNull = null;\n        boolean[] rhsNull = null;\n\n        // Test with same arrays\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.toComparison(), \"Arrays are same, comparison should be 0\");\n\n        builder = new CompareToBuilder(); // Reset builder for next test\n\n        // Test with different length arrays\n        builder.append(lhs, lhsDifferentLength);\n        assertTrue(builder.toComparison() != 0, \"Arrays have different lengths, comparison should not be 0\");\n\n        builder = new CompareToBuilder(); // Reset builder for next test\n        \n        // Test with different arrays of the same length\n        builder.append(lhs, rhsDifferent);\n        assertTrue(builder.toComparison() != 0, \"Arrays have same lengths but different values, comparison should not be 0\");\n\n        builder = new CompareToBuilder(); // Reset builder for next test\n        \n        // Test with first array null \n        builder.append(lhsNull, rhs);\n        assertEquals(-1, builder.toComparison(), \"First array is null, comparison should be -1\");\n\n        builder = new CompareToBuilder(); // Reset builder for next test\n        \n        // Test with second array null \n        builder.append(lhs, rhsNull);\n        assertEquals(1, builder.toComparison(), \"Second array is null, comparison should be 1\");\n\n        builder = new CompareToBuilder(); // Reset builder for next test\n\n        // Test with both arrays null (expect them to be equal)\n        builder.append(lhsNull, rhsNull);\n        assertEquals(0, builder.toComparison(), \"Both arrays are null, comparison should be 0\");\n    }\n}",
        "package_metric": 1.32,
        "class_metric": 9.8,
        "method_metric": 84.375,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Setup CompareToBuilder\n        CompareToBuilder compareToBuilder = new CompareToBuilder();\n\n        // Case with both arrays null should not affect comparison\n        boolean[] lhsNull = null;\n        boolean[] rhsNull = null;\n        compareToBuilder.append(lhsNull, rhsNull);\n        assertEquals(0, compareToBuilder.toComparison());\n\n        // Case with lhs array null and rhs array not null should return -1\n        compareToBuilder = new CompareToBuilder(); // Reset builder for new comparison\n        boolean[] rhsNonNull = {true, false, true};\n        compareToBuilder.append(lhsNull, rhsNonNull);\n        assertEquals(-1, compareToBuilder.toComparison());\n\n        // Case with rhs array null and lhs array not null should return 1\n        compareToBuilder = new CompareToBuilder(); // Reset builder for new comparison\n        boolean[] lhsNonNull = {false, true, false};\n        compareToBuilder.append(lhsNonNull, rhsNull);\n        assertEquals(1, compareToBuilder.toComparison());\n\n        // Case with arrays of different lengths\n        compareToBuilder = new CompareToBuilder(); // Reset builder for new comparison\n        boolean[] lhsShorter = {true, false};\n        boolean[] rhsLonger = {true, false, true};\n        compareToBuilder.append(lhsShorter, rhsLonger);\n        assertEquals(-1, compareToBuilder.toComparison());\n\n        // Case with lhs longer than rhs\n        compareToBuilder = new CompareToBuilder(); // Reset builder for new comparison\n        boolean[] rhsShorter = {true, false};\n        compareToBuilder.append(lhsNonNull, rhsShorter);\n        assertEquals(1, compareToBuilder.toComparison());\n\n        // Case with same length arrays but different values\n        compareToBuilder = new CompareToBuilder(); // Reset builder for new comparison\n        boolean[] rhsDifferent = {true, true, false};\n        compareToBuilder.append(lhsNonNull, rhsDifferent);\n        assertNotEquals(0, compareToBuilder.toComparison());\n\n        // Case with two identical arrays\n        compareToBuilder = new CompareToBuilder(); // Reset builder for new comparison\n        boolean[] rhsSame = {false, true, false};\n        compareToBuilder.append(lhsNonNull, rhsSame);\n        assertEquals(0, compareToBuilder.toComparison());\n    }\n}",
        "package_metric": 1.32,
        "class_metric": 9.8,
        "method_metric": 84.375,
        "pitest": 6.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void testAppendBooleanArray() {\n        CompareToBuilder compareToBuilder = new CompareToBuilder();\n        \n        // Same arrays reference\n        boolean[] array1 = new boolean[] {true, false, true};\n        boolean[] array2 = array1;\n        assertEquals(0, compareToBuilder.append(array1, array2).toComparison());\n        \n        // Different arrays, same content\n        compareToBuilder = new CompareToBuilder();\n        array1 = new boolean[] {true, false, true};\n        array2 = new boolean[] {true, false, true};\n        assertEquals(0, compareToBuilder.append(array1, array2).toComparison());\n        \n        // Different arrays, different content\n        compareToBuilder = new CompareToBuilder();\n        array1 = new boolean[] {true, false, true};\n        array2 = new boolean[] {false, true, false};\n        assertNotEquals(0, compareToBuilder.append(array1, array2).toComparison());\n        \n        // Different lengths\n        compareToBuilder = new CompareToBuilder();\n        array1 = new boolean[] {true, false};\n        array2 = new boolean[] {true, false, true};\n        assertTrue(compareToBuilder.append(array1, array2).toComparison() < 0);\n        \n        // Null first array, non-null second array\n        compareToBuilder = new CompareToBuilder();\n        array1 = null;\n        array2 = new boolean[] {true, false, true};\n        assertTrue(compareToBuilder.append(array1, array2).toComparison() < 0);\n        \n        // Non-null first array, null second array\n        compareToBuilder = new CompareToBuilder();\n        array1 = new boolean[] {true, false, true};\n        array2 = null;\n        assertTrue(compareToBuilder.append(array1, array2).toComparison() > 0);\n        \n        // Both arrays null\n        compareToBuilder = new CompareToBuilder();\n        array1 = null;\n        array2 = null;\n        assertEquals(0, compareToBuilder.append(array1, array2).toComparison());\n    }\n}",
        "package_metric": 1.32,
        "class_metric": 9.8,
        "method_metric": 84.375,
        "pitest": 8.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Create instances of CompareToBuilder\n        CompareToBuilder cbEqualArrays = new CompareToBuilder();\n        CompareToBuilder cbLeftNull = new CompareToBuilder();\n        CompareToBuilder cbRightNull = new CompareToBuilder();\n        CompareToBuilder cbDifferentLengthArrays = new CompareToBuilder();\n        CompareToBuilder cbDifferentValues = new CompareToBuilder();\n\n        // Test arrays\n        boolean[] array1 = {true, false, true};\n        boolean[] array2 = {true, false, true};\n        boolean[] array3 = {false, true};\n        boolean[] array4 = {true, false, false};\n\n        // Test for equal arrays\n        cbEqualArrays.append(array1, array2);\n        assertEquals(0, cbEqualArrays.toComparison(), \"Arrays are equal but did not return 0\");\n\n        // Test for left array null\n        cbLeftNull.append(null, array2);\n        assertEquals(-1, cbLeftNull.toComparison(), \"Left array is null, should return -1\");\n\n        // Test for right array null\n        cbRightNull.append(array1, null);\n        assertEquals(1, cbRightNull.toComparison(), \"Right array is null, should return 1\");\n\n        // Test for arrays of different lengths\n        cbDifferentLengthArrays.append(array1, array3);\n        assertEquals(array1.length < array3.length ? -1 : 1, cbDifferentLengthArrays.toComparison(), \"Arrays are of different lengths\");\n\n        // Test for arrays with different values\n        cbDifferentValues.append(array1, array4);\n        assertEquals(Boolean.compare(array1[2], array4[2]), cbDifferentValues.toComparison(), \"Arrays have different values\");\n    }\n}",
        "package_metric": 1.27,
        "class_metric": 9.41,
        "method_metric": 81.25,
        "pitest": 6.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Test with same arrays.\n        boolean[] array1 = new boolean[] { true, false, true };\n        boolean[] array2 = new boolean[] { true, false, true };\n        builder.append(array1, array2);\n        assertEquals(0, builder.toComparison(), \"Arrays with the same values should be equal\");\n\n        // Test with left array null.\n        boolean[] array3 = null;\n        builder = new CompareToBuilder(); // Reset the builder\n        builder.append(array3, array2);\n        assertEquals(-1, builder.toComparison(), \"Comparing null array to non-null array should return -1\");\n\n        // Test with right array null.\n        builder = new CompareToBuilder(); // Reset the builder\n        builder.append(array1, array3);\n        assertEquals(1, builder.toComparison(), \"Comparing non-null array to null array should return 1\");\n\n        // Test with different lengths.\n        boolean[] array4 = new boolean[] { true, false };\n        builder = new CompareToBuilder(); // Reset the builder\n        builder.append(array1, array4);\n        assertEquals(1, builder.toComparison(), \"Comparing longer array to shorter array should return 1\");\n\n        boolean[] array5 = new boolean[] { true, false, true, false };\n        builder = new CompareToBuilder(); // Reset the builder\n        builder.append(array4, array5);\n        assertEquals(-1, builder.toComparison(), \"Comparing shorter array to longer array should return -1\");\n\n        // Test with different values and same lengths.\n        boolean[] array6 = new boolean[] { false, true, false };\n        builder = new CompareToBuilder(); // Reset the builder\n        builder.append(array1, array6);\n        assertEquals(1, builder.toComparison(), \"Arrays with different values should not be equal\");\n    }\n}",
        "package_metric": 1.27,
        "class_metric": 9.41,
        "method_metric": 81.25,
        "pitest": 6.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    private CompareToBuilder compareToBuilder;\n\n    @BeforeEach\n    public void setUp() {\n        compareToBuilder = new CompareToBuilder();\n    }\n\n    @Test\n    public void appendTestArraysEqual() {\n        boolean[] lhs = {true, false, true};\n        boolean[] rhs = {true, false, true};\n        compareToBuilder.append(lhs, rhs);\n        assertEquals(0, compareToBuilder.toComparison(), \"Arrays are equal but did not return 0\");\n    }\n\n    @Test\n    public void appendTestLeftArrayShorter() {\n        boolean[] lhs = {true};\n        boolean[] rhs = {true, false};\n        compareToBuilder.append(lhs, rhs);\n        assertTrue(compareToBuilder.toComparison() < 0, \"Left array is shorter but did not return less than 0\");\n    }\n\n    @Test\n    public void appendTestRightArrayShorter() {\n        boolean[] lhs = {true, false};\n        boolean[] rhs = {true};\n        compareToBuilder.append(lhs, rhs);\n        assertTrue(compareToBuilder.toComparison() > 0, \"Right array is shorter but did not return greater than 0\");\n    }\n\n    @Test\n    public void appendTestLeftArrayNull() {\n        boolean[] lhs = null;\n        boolean[] rhs = {true, false};\n        compareToBuilder.append(lhs, rhs);\n        assertEquals(-1, compareToBuilder.toComparison(), \"Left array is null but did not return -1\");\n    }\n\n    @Test\n    public void appendTestRightArrayNull() {\n        boolean[] lhs = {true, false};\n        boolean[] rhs = null;\n        compareToBuilder.append(lhs, rhs);\n        assertEquals(1, compareToBuilder.toComparison(), \"Right array is null but did not return 1\");\n    }\n\n    @Test\n    public void appendTestBothArraysNull() {\n        boolean[] lhs = null;\n        boolean[] rhs = null;\n        compareToBuilder.append(lhs, rhs);\n        assertEquals(0, compareToBuilder.toComparison(), \"Both arrays are null but did not return 0\");\n    }\n\n    @Test\n    public void appendTestArraysWithDifferentValues() {\n        boolean[] lhs = {true, true, false};\n        boolean[] rhs = {true, false, true};\n        compareToBuilder.append(lhs, rhs);\n        assertTrue(compareToBuilder.toComparison() != 0, \"Arrays have different values but comparison returned 0\");\n    }\n}",
        "package_metric": 1.32,
        "class_metric": 9.8,
        "method_metric": 84.375,
        "pitest": 6.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    private CompareToBuilder compareToBuilder;\n\n    @BeforeEach\n    public void setUp() {\n        compareToBuilder = new CompareToBuilder();\n    }\n\n    @Test\n    public void appendTestEqualArrays() {\n        boolean[] lhs = {true, false, true};\n        boolean[] rhs = {true, false, true};\n        int comparisonResult = compareToBuilder.append(lhs, rhs).toComparison();\n        assertEquals(0, comparisonResult, \"Arrays are equal, so comparison should return 0\");\n    }\n\n    @Test\n    public void appendTestDifferentArrays() {\n        boolean[] lhs = {true, false};\n        boolean[] rhs = {false, true};\n        int comparisonResult = compareToBuilder.append(lhs, rhs).toComparison();\n        assertNotEquals(0, comparisonResult, \"Arrays differ, so comparison should not return 0\");\n    }\n\n    @Test\n    public void appendTestLeftArrayNull() {\n        boolean[] lhs = null;\n        boolean[] rhs = {false, true};\n        int comparisonResult = compareToBuilder.append(lhs, rhs).toComparison();\n        assertEquals(-1, comparisonResult, \"Left array is null, so comparison should return -1\");\n    }\n\n    @Test\n    public void appendTestRightArrayNull() {\n        boolean[] lhs = {true, false};\n        boolean[] rhs = null;\n        int comparisonResult = compareToBuilder.append(lhs, rhs).toComparison();\n        assertEquals(1, comparisonResult, \"Right array is null, so comparison should return 1\");\n    }\n\n    @Test\n    public void appendTestDifferentLengths() {\n        boolean[] lhs = {true};\n        boolean[] rhs = {true, false};\n        int comparisonResult = compareToBuilder.append(lhs, rhs).toComparison();\n        assertEquals(-1, comparisonResult, \"Left array is shorter, so comparison should return -1\");\n    }\n\n    @Test\n    public void appendTestWithBothArraysNull() {\n        boolean[] lhs = null;\n        boolean[] rhs = null;\n        int comparisonResult = compareToBuilder.append(lhs, rhs).toComparison();\n        assertEquals(0, comparisonResult, \"Both arrays are null, so comparison should return 0\");\n    }\n}",
        "package_metric": 1.32,
        "class_metric": 9.8,
        "method_metric": 84.375,
        "pitest": 8.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Initial setup\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Test equal boolean arrays\n        boolean[] a1 = {true, false, true};\n        boolean[] a2 = {true, false, true};\n        builder.append(a1, a2);\n        assertEquals(0, builder.toComparison());\n\n        // Test the first array being null\n        boolean[] a3 = null;\n        builder = new CompareToBuilder(); // reset builder for next test\n        builder.append(a3, a2);\n        assertEquals(-1, builder.toComparison());\n\n        // Test the second array being null\n        builder = new CompareToBuilder(); // reset builder for next test\n        builder.append(a1, a3);\n        assertEquals(1, builder.toComparison());\n\n        // Test arrays of different lengths\n        boolean[] a4 = {true, false};\n        builder = new CompareToBuilder(); // reset builder for next test\n        builder.append(a1, a4);\n        assertEquals(1, builder.toComparison());\n\n        builder = new CompareToBuilder(); // reset builder for next test\n        builder.append(a4, a1);\n        assertEquals(-1, builder.toComparison());\n\n        // Test arrays with different values\n        boolean[] a5 = {true, true, false};\n        builder = new CompareToBuilder(); // reset builder for next test\n        builder.append(a1, a5);\n        assertTrue(builder.toComparison() != 0);\n\n        // Ensure reference equality check\n        builder = new CompareToBuilder(); // reset builder for next test\n        builder.append(a1, a1);\n        assertEquals(0, builder.toComparison());\n    }\n}",
        "package_metric": 1.32,
        "class_metric": 9.8,
        "method_metric": 84.375,
        "pitest": 6.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        \n        boolean[] array1 = {true, false, true};\n        boolean[] array2 = {true, false, true};\n        boolean[] array3 = {false, true, false};\n        boolean[] array4 = {true, false};\n        boolean[] array5 = null;\n        \n        // Test when arrays are the same\n        builder.append(array1, array1);\n        assertEquals(0, builder.toComparison());\n        \n        // Reset before next test\n        builder = new CompareToBuilder();\n\n        // Test with equal arrays\n        builder.append(array1, array2);\n        assertEquals(0, builder.toComparison());\n\n        // Reset before next test\n        builder = new CompareToBuilder();\n\n        // Test with different arrays\n        builder.append(array1, array3);\n        assertNotEquals(0, builder.toComparison());\n\n        // Reset before next test\n        builder = new CompareToBuilder();\n\n        // Test with lhs array being shorter\n        builder.append(array4, array1);\n        assertTrue(builder.toComparison() < 0);\n        \n        // Reset before next test\n        builder = new CompareToBuilder();\n        \n        // Test with rhs array being shorter\n        builder.append(array1, array4);\n        assertTrue(builder.toComparison() > 0);\n\n        // Reset before next test\n        builder = new CompareToBuilder();\n\n        // Test with lhs array being null\n        builder.append(array5, array1);\n        assertTrue(builder.toComparison() < 0);\n\n        // Reset before next test\n        builder = new CompareToBuilder();\n\n        // Test with rhs array being null\n        builder.append(array1, array5);\n        assertTrue(builder.toComparison() > 0);\n\n        // Reset before next test\n        builder = new CompareToBuilder();\n\n        // Test with both arrays being null\n        builder.append(array5, array5);\n        assertEquals(0, builder.toComparison());\n    }\n}",
        "package_metric": 1.32,
        "class_metric": 9.8,
        "method_metric": 84.375,
        "pitest": 6.0
    }
]