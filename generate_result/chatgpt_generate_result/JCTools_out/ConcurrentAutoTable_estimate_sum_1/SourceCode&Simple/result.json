{
    "project_name": "JCTools",
    "file_name": "ConcurrentAutoTable.java",
    "relative_path": "JCTools/jctools-core/src/main/java/org/jctools/maps/ConcurrentAutoTable.java",
    "execute_path": "JCTools",
    "package": "org.jctools.maps",
    "docstring": null,
    "source_code": "// Fast fuzzy version.  Used a cached value until it gets old, then re-up\n// the cache.\npublic long estimate_sum( ) {\n  // For short tables, just do the work\n  if( _t.length <= 64 ) return sum();\n  // For bigger tables, periodically freshen a cached value\n  long millis = System.currentTimeMillis();\n  if( _fuzzy_time != millis ) { // Time marches on?\n    _fuzzy_sum_cache = sum(); // Get sum the hard way\n    _fuzzy_time = millis;   // Indicate freshness of cached value\n  }\n  return _fuzzy_sum_cache;  // Return cached sum\n}\n",
    "class_name": "ConcurrentAutoTable",
    "method_name": "estimate_sum",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void estimate_sumTest() {\n    ConcurrentAutoTable table = new ConcurrentAutoTable();\n    long expected = table.estimate_sum();\n    long actual = table.estimate_sum();\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void estimate_sumTest() {\n    ConcurrentAutoTable concurrentAutoTable = new ConcurrentAutoTable();\n    long expected = 0;\n    long result = concurrentAutoTable.estimate_sum();\n    assertEquals(expected, result);\n}",
        "@Test\npublic void estimate_sumTest() {\n    long[] t = new long[]{1, 2, 3, 4, 5};\n    ConcurrentAutoTable.CAT cat = new ConcurrentAutoTable.CAT(null, 5, 0);\n    cat._t = t;\n    ConcurrentAutoTable testTable = new ConcurrentAutoTable();\n    testTable._cat = cat;\n\n    long expected = 15;\n    long result = testTable.estimate_sum();\n    assertEquals(expected, result);\n}",
        "@Test\npublic void estimate_sumTest() {\n    ConcurrentAutoTable table = new ConcurrentAutoTable();\n    long result = table.estimate_sum();\n    assertEquals(result, table.estimate_sum());\n}",
        "@Test\npublic void estimate_sumTest() {\n    ConcurrentAutoTable concurrentAutoTable = new ConcurrentAutoTable();\n    long result = concurrentAutoTable.estimate_sum();\n    assertEquals(expectedResult, result);\n}",
        "@Test\npublic void estimate_sumTest() {\n    ConcurrentAutoTable concurrentAutoTable = new ConcurrentAutoTable();\n    long expected = 10;\n    long actual = concurrentAutoTable.estimate_sum();\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void estimate_sumTest() {\n    long sum = 10;\n    long expected = sum;\n    assertEquals(expected, concurrentAutoTable.estimate_sum());\n}",
        "@Test\npublic void estimate_sumTest() {\n    //Create concurrent auto table object\n    ConcurrentAutoTable table = new ConcurrentAutoTable();\n    long result = table.estimate_sum();\n    assertNotNull(result);\n}",
        "@Test\npublic void estimate_sumTest() {\n    ConcurrentAutoTable cat = new ConcurrentAutoTable();\n    long result = cat.estimate_sum();\n    assertEquals(10, result); // Replace 10 with the expected result\n}",
        "@Test\npublic void estimate_sumTest() {\n    ConcurrentAutoTable cat = new ConcurrentAutoTable();\n    long expected = cat.estimate_sum();\n    long actual = cat.estimate_sum();\n    assertEquals(expected, actual);\n}"
    ]
}