{
    "project_name": "JCTools",
    "file_name": "FixedSizeStripedLongCounter.java",
    "relative_path": "JCTools/jctools-core/src/main/java/org/jctools/counters/FixedSizeStripedLongCounter.java",
    "execute_path": "JCTools",
    "package": "org.jctools.counters",
    "docstring": "/**\n     * Returns the probe value for the current thread.\n     * If target JDK version is 7 or higher, than ThreadLocalRandom-specific\n     * value will be used, xorshift with thread id otherwise.\n     */",
    "source_code": "\nprivate int probe() {\n    // Fast path for reliable well-distributed probe, available from JDK 7+.\n    // As long as PROBE is final static this branch will be constant folded\n    // (i.e removed).\n    if (PROBE != -1) {\n        int probe;\n        if ((probe = UNSAFE.getInt(Thread.currentThread(), PROBE)) == 0) {\n            ThreadLocalRandom.current(); // force initialization\n            probe = UNSAFE.getInt(Thread.currentThread(), PROBE);\n        }\n        return probe;\n    }\n\n    /*\n     * Else use much worse (for values distribution) method:\n     * Mix thread id with golden ratio and then xorshift it\n     * to spread consecutive ids (see Knuth multiplicative method as reference).\n     */\n    int probe = (int) ((Thread.currentThread().getId() * 0x9e3779b9) & Integer.MAX_VALUE);\n    // xorshift\n    probe ^= probe << 13;\n    probe ^= probe >>> 17;\n    probe ^= probe << 5;\n    return probe;\n}\n\n",
    "class_name": "FixedSizeStripedLongCounterPrePad",
    "method_name": "probe",
    "arguments": [],
    "generate_test": [
        "\n// Expected value for the probe (replace with the appropriate value)\nint expected = 123;\n\n// Create an instance of FixedSizeStripedLongCounter\nFixedSizeStripedLongCounter counter = new FixedSizeStripedLongCounter(16);\n\n// Call the probe method\nint actual = counter.probe();\n\n// Validate the output\nassertEquals(expected, actual);\n",
        "@Test\npublic void probeTest() {\n    // Initialize a FixedSizeStripedLongCounter instance\n    FixedSizeStripedLongCounter counter = new FixedSizeStripedLongCounter(16);\n    \n    // Call the probe method\n    int result = counter.probe();\n    \n    // Assert that the result is not null\n    assertNotNull(result);\n}",
        "assertEquals(1, new FixedSizeStripedLongCounter(1).probe());",
        "@Test\npublic void probeTest() {\n    FixedSizeStripedLongCounter counter = new FixedSizeStripedLongCounter(10);\n    int result = counter.probe();\n    assertThat(result).isNotEqualTo(0);\n}",
        "@Test\npublic void probeTest() {\n    FixedSizeStripedLongCounter counter = new FixedSizeStripedLongCounter(10) {\n        protected void inc(long[] cells, long offset, long value) {\n            cells[Long.hashCode(offset) & mask] += value;\n        }\n        protected long getAndReset(long[] cells, long offset) {\n            int index = Long.hashCode(offset) & mask;\n            long result = cells[index];\n            cells[index] = 0L;\n            return result;\n        }\n    };\n\n    int expectedProbe = counter.probe();\n    int actualProbe = counter.probe();\n    assertEquals(expectedProbe, actualProbe);\n}\n",
        "@Test\npublic void probeTest() {\n    FixedSizeStripedLongCounter counter = new FixedSizeStripedLongCounter(4);\n    assertEquals(0, counter.probe());\n}",
        "@Test\npublic void probeTest() {\n    FixedSizeStripedLongCounter counter = new FixedSizeStripedLongCounter(10);\n    int result = counter.probe();\n    assertEquals(expectedResult, result);\n}",
        "@Test\npublic void probeTest() {\n    FixedSizeStripedLongCounter counter = new FixedSizeStripedLongCounter(10) {\n        protected void inc(long[] cells, long offset, long value) {\n            cells[(int) (offset >> ELEMENT_SHIFT)] += value;\n        }\n\n        protected long getAndReset(long[] cells, long offset) {\n            return UNSAFE.getAndSetLong(cells, offset, 0L);\n        }\n    };\n\n    int expectedProbe = <FILL>;\n    int actualProbe = counter.probe();\n\n    assertEquals(expectedProbe, actualProbe);\n}",
        "@Test\npublic void probeTest() {\n    // Given\n    FixedSizeStripedLongCounter counter = new FixedSizeStripedLongCounter(4);\n    \n    // When\n    int result = counter.probe();\n    \n    // Then\n    assertTrue(result >= 0);  \n}",
        "@Test\npublic void probeTest() {\n    FixedSizeStripedLongCounterPrePad counter = new FixedSizeStripedLongCounter(4);\n    int expectedProbe = counter.probe();\n    int actualProbe = counter.probe();\n    assertEquals(expectedProbe, actualProbe);\n}"
    ]
}