{
    "project_name": "JCTools",
    "file_name": "NonBlockingHashMap.java",
    "relative_path": "JCTools/jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMap.java",
    "execute_path": "JCTools",
    "package": "org.jctools.maps",
    "docstring": "/**\n   * Returns a string representation of this map.  The string representation\n   * consists of a list of key-value mappings in the order returned by the\n   * map's <tt>entrySet</tt> view's iterator, enclosed in braces\n   * (<tt>\"{}\"</tt>).  Adjacent mappings are separated by the characters\n   * <tt>\", \"</tt> (comma and space).  Each key-value mapping is rendered as\n   * the key followed by an equals sign (<tt>\"=\"</tt>) followed by the\n   * associated value.  Keys and values are converted to strings as by\n   * {@link String#valueOf(Object)}.\n   *\n   * @return a string representation of this map\n   */",
    "source_code": "\n@Override\npublic String toString() {\n  Iterator<Entry<TypeK,TypeV>> i = entrySet().iterator();\n  if( !i.hasNext())\n    return \"{}\";\n\n  StringBuilder sb = new StringBuilder();\n  sb.append('{');\n  for (;;) {\n    Entry<TypeK,TypeV> e = i.next();\n    TypeK key = e.getKey();\n    TypeV value = e.getValue();\n    sb.append(key   == this ? \"(this Map)\" : key);\n    sb.append('=');\n    sb.append(value == this ? \"(this Map)\" : value);\n    if( !i.hasNext())\n      return sb.append('}').toString();\n    sb.append(\", \");\n  }\n}\n",
    "class_name": "NonBlockingHashMap",
    "method_name": "toString",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void toStringTest() {\n    NonBlockingHashMap<TypeK, TypeV> map = new NonBlockingHashMap<>();\n    map.put(key, value);\n    String expected = \"{key=value}\";\n    String actual = map.toString();\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void toStringTest() {\n    // Create a new NonBlockingHashMap instance\n    NonBlockingHashMap<String, String> map = new NonBlockingHashMap<>();\n\n    // Add some key-value pairs to the map\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    map.put(\"key3\", \"value3\");\n\n    // Test the toString method\n    assertEquals(\"{key1=value1, key2=value2, key3=value3}\", map.toString());\n}",
        "@Test\npublic void toStringTest() {\n    NonBlockingHashMap<String, Integer> map = new NonBlockingHashMap<>();\n    map.put(\"A\", 1);\n    map.put(\"B\", 2);\n    String expected = \"{A=1, B=2}\";\n    assertEquals(expected, map.toString());\n}",
        "@Test\npublic void toStringTest() {\n  NonBlockingHashMap map = new NonBlockingHashMap();\n  map.put(\"Key1\", \"Value1\");\n  map.put(\"Key2\", \"Value2\");\n  assertEquals(\"{Key1=Value1, Key2=Value2}\", map.toString());\n}",
        "@Test\npublic void toStringTest() {\n  NonBlockingHashMap<String, Integer> map = new NonBlockingHashMap<>();\n  map.put(\"one\", 1);\n  map.put(\"two\", 2);\n  map.put(\"three\", 3);\n  assertEquals(\"{one=1, two=2, three=3}\", map.toString());\n}",
        "@Test\npublic void toStringTest() {\n    NonBlockingHashMap<String, Integer> map = new NonBlockingHashMap<>();\n    map.put(\"a\", 1);\n    map.put(\"b\", 2);\n    assertEquals(\"{a=1, b=2}\", map.toString());\n}",
        "    @Test\n    public void toStringTest() {\n        NonBlockingHashMap<String, Integer> testMap = new NonBlockingHashMap<>();\n        testMap.put(\"One\", 1);\n        testMap.put(\"Two\", 2);\n        testMap.put(\"Three\", 3);\n\n        assertEquals(\"{One=1, Two=2, Three=3}\", testMap.toString());\n    }",
        "@Test\npublic void toStringTest() {\n    NonBlockingHashMap<String, Integer> map = new NonBlockingHashMap<>();\n    map.put(\"key1\", 1);\n    map.put(\"key2\", 2);\n    assertEquals(\"{key1=1, key2=2}\", map.toString());\n}",
        "@Test\npublic void toStringTest() {\n  NonBlockingHashMap<TypeK, TypeV> map = new NonBlockingHashMap<>();\n  map.put(key, value);\n  String expected = \"{key=value}\";\n  String result = map.toString();\n  assertEquals(expected, result);\n}",
        "@Test\npublic void toStringTest() {\n    NonBlockingHashMap<Integer, String> map = new NonBlockingHashMap<>();\n    map.put(1, \"One\");\n    map.put(2, \"Two\");\n    assertEquals(\"{1=One, 2=Two}\", map.toString());\n}"
    ]
}