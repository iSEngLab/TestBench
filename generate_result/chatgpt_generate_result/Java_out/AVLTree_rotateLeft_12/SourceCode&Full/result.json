{
    "project_name": "Java",
    "file_name": "AVLTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/AVLTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": null,
    "source_code": "private Node rotateLeft(Node a) {\n    Node b = a.right;\n    b.parent = a.parent;\n\n    a.right = b.left;\n\n    if (a.right != null) {\n        a.right.parent = a;\n    }\n\n    b.left = a;\n    a.parent = b;\n\n    if (b.parent != null) {\n        if (b.parent.right == a) {\n            b.parent.right = b;\n        } else {\n            b.parent.left = b;\n        }\n    }\n\n    setBalance(a, b);\n\n    return b;\n}\n",
    "class_name": "AVLTree",
    "method_name": "rotateLeft",
    "arguments": [
        "Node a"
    ],
    "generate_test": [
        "@Test\npublic void rotateLeftTest() {\n    AVLTree avlTree = new AVLTree();\n    avlTree.insert(10);\n    avlTree.insert(5);\n    avlTree.insert(15);\n    avlTree.insert(3);\n    Node node = avlTree.root;\n    AVLTree.Node result = avlTree.rotateLeft(node);\n    // Assert the expected result\n    assertEquals(5, result.key);\n    assertEquals(3, result.left.key);\n    assertEquals(10, result.right.key);\n    assertEquals(15, result.right.right.key);\n}",
        "\n    @Test\n    public void rotateLeftTest() {\n        AVLTree avlTree = new AVLTree();\n        // Create test nodes\n        AVLTree.Node parent = avlTree.new Node(10, null);\n        AVLTree.Node right = avlTree.new Node(20, parent);\n        parent.right = right;\n\n        AVLTree.Node result = avlTree.rotateLeft(parent);\n        assertEquals(right, result); // Verify that the rotation returns the correct result\n    }\n",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    tree.insert(3);\n    tree.insert(2);\n    tree.insert(1);\n    Node result = tree.rotateLeft(tree.root);\n    assertNotNull(result);\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    tree.insert(3);\n    tree.insert(2);\n    tree.insert(5);\n    tree.insert(4);\n    \n    tree.rotateLeft(tree.root.right);\n    \n    // Assert statement to verify the result of the rotateLeft method\n    // Add appropriate assertions based on the expected output\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree avlTree = new AVLTree();\n    avlTree.insert(4);\n    avlTree.insert(2);\n    avlTree.insert(6);\n    avlTree.insert(1);\n    avlTree.insert(3);\n    avlTree.insert(5);\n    avlTree.insert(7);\n    AVLTree.Node node = avlTree.root;\n    AVLTree.Node rotatedNode = avlTree.rotateLeft(node);\n    assertNotNull(rotatedNode);\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    tree.insert(5);\n    tree.insert(3);\n    tree.insert(7);\n    Node result = tree.rotateLeft(tree.root);\n    assertEquals(7, result.key);\n    assertEquals(5, result.left.key);\n    assertEquals(3, result.left.left.key);\n    assertNull(result.left.right);\n    assertNull(result.right);\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    tree.insert(10);\n    tree.insert(20);\n    Node result = tree.root;\n    Node expected = tree.rotateLeft(result);\n    assertEquals(expected, result);\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    \n    // Create a tree with nodes containing keys 1, 2, and 3\n    tree.insert(1);\n    tree.insert(2);\n    tree.insert(3);\n    \n    // Perform rotateLeft on the root node of the tree\n    tree.rotateLeft(tree.root);\n    \n    // Compare expected result with the actual result\n    // <FILL>\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree avlTree = new AVLTree();\n    avlTree.insert(10);\n    avlTree.insert(20);\n    avlTree.insert(30);\n    Node result = avlTree.root;\n    assertEquals(20, result.key);\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    Node a = new Node(5, null);  // specify a test node\n    Node b = tree.rotateLeft(a);\n    // assert statements for the expected output\n    assertNotNull(b);\n    assertEquals(b.parent, a.parent);\n    assertEquals(b.left, a);\n    assertEquals(a.parent, b);\n    // add more assert statements as needed\n}"
    ]
}