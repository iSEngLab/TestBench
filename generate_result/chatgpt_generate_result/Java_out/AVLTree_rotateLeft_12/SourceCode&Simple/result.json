{
    "project_name": "Java",
    "file_name": "AVLTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/AVLTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": null,
    "source_code": "private Node rotateLeft(Node a) {\n    Node b = a.right;\n    b.parent = a.parent;\n\n    a.right = b.left;\n\n    if (a.right != null) {\n        a.right.parent = a;\n    }\n\n    b.left = a;\n    a.parent = b;\n\n    if (b.parent != null) {\n        if (b.parent.right == a) {\n            b.parent.right = b;\n        } else {\n            b.parent.left = b;\n        }\n    }\n\n    setBalance(a, b);\n\n    return b;\n}\n",
    "class_name": "AVLTree",
    "method_name": "rotateLeft",
    "arguments": [
        "Node a"
    ],
    "generate_test": [
        "@Test\npublic void rotateLeftTest() {\n    Node node = new Node(10, null);\n    AVLTree tree = new AVLTree();\n    Node result = tree.rotateLeft(node);\n    // Add assertions here to verify the correctness of the rotateLeft method\n}",
        "@Test\npublic void rotateLeftTest() {\n    Node a = new Node(5, null);\n    Node b = new Node(10, a);\n    a.right = b;\n\n    AVLTree avlTree = new AVLTree();\n    Node result = avlTree.rotateLeft(a);\n    assertNotNull(result);\n}",
        "@Test\npublic void rotateLeftTest() {\n    Node node1 = new Node(5, null);\n    Node node2 = new Node(10, null);\n    Node node3 = new Node(15, null);\n    \n    AVLTree avlTree = new AVLTree();\n    avlTree.insert(5);\n    avlTree.insert(10);\n    avlTree.insert(15);\n    \n    avlTree.root = avlTree.rotateLeft(node1);  \n    assertEquals(15, avlTree.root.key);\n}",
        "@Test\npublic void rotateLeftTest() {\n    // Create AVLTree object\n    AVLTree tree = new AVLTree();\n\n    // Insert nodes\n    tree.insert(30);\n    tree.insert(20);\n    tree.insert(40);\n  \n    // Create node to rotate left\n    Node node = tree.root.right;\n  \n    // Perform rotation left\n    Node rotatedNode = tree.rotateLeft(node);\n  \n    // Check the expected output\n    assertEquals(rotatedNode.key, 40, \"The key of the rotated node should be 40\");\n    assertEquals(rotatedNode.left.key, 30, \"The left child key of the rotated node should be 30\");\n    assertEquals(rotatedNode.right, null, \"The right child of the rotated node should be null\");\n}\n",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree avlTree = new AVLTree();\n    AVLTree.Node nodeA = avlTree.new Node(5, null);\n    AVLTree.Node nodeB = avlTree.new Node(10, null);\n    \n    avlTree.rotateLeft(nodeA);\n    // Add assertions to test the rotation left functionality\n}",
        "@Test\npublic void rotateLeftTest() {\n    Node node = new Node(5, null);\n    Node a = new Node(10, node);\n    Node b = new Node(15, a);\n    \n    AVLTree avlTree = new AVLTree();\n    Node result = avlTree.rotateLeft(a);\n    \n    // Perform assertions for the expected output of rotateLeft\n    assertEquals(b, result);\n    assertEquals(a, result.left);\n    assertEquals(node, result.parent);\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    AVLTree.Node nodeA = tree.new Node(5, null);\n    AVLTree.Node nodeB = tree.rotateLeft(nodeA);\n    assertNotNull(nodeB);\n}",
        "private AVLTree avlTree = new AVLTree();\nNode node1 = avlTree.new Node(5, null);\nNode node2 = avlTree.new Node(10, node1);\nNode expected = node2;\nNode actual = avlTree.rotateLeft(node1);\nassertEquals(expected, actual);",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    Node a = tree.new Node(10, null);\n    Node b = tree.new Node(20, a);\n    a.right = b;\n    // Complete the test case with the input and expected output\n    Node result = tree.rotateLeft(a);\n    // Assertions for expected output\n    assertEquals(b.parent, null, \"Parent of B should be null\");\n    assertEquals(a.right, null, \"Right of A should be null\");\n    assertEquals(b.left, a, \"Left of B should be A\");\n    assertEquals(a.parent, b, \"Parent of A should be B\");\n}",
        "    @Test\n    public void rotateLeftTest() {\n        Node node = new Node(5, null);\n        node.right = new Node(10, node);\n        AVLTree tree = new AVLTree();\n        Node result = tree.rotateLeft(node);\n        // Assert statements for the expected output\n        assertEquals(10, node.parent.key);\n        assertEquals(5, node.right.key);\n        assertEquals(5, node.right.parent.key);\n    }\n}"
    ]
}