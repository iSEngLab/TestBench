{
    "project_name": "Java",
    "file_name": "AVLTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/AVLTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": null,
    "source_code": "private Node rotateLeft(Node a) {\n    Node b = a.right;\n    b.parent = a.parent;\n\n    a.right = b.left;\n\n    if (a.right != null) {\n        a.right.parent = a;\n    }\n\n    b.left = a;\n    a.parent = b;\n\n    if (b.parent != null) {\n        if (b.parent.right == a) {\n            b.parent.right = b;\n        } else {\n            b.parent.left = b;\n        }\n    }\n\n    setBalance(a, b);\n\n    return b;\n}\n",
    "class_name": "AVLTree",
    "method_name": "rotateLeft",
    "arguments": [
        "Node a"
    ],
    "generate_test": [
        "@Test\npublic void rotateLeftTest() {\n    // Initialize AVL tree object\n    AVLTree tree = new AVLTree();\n\n    // Add nodes to the tree\n    tree.insert(10);\n    tree.insert(20);\n    tree.insert(30);\n    tree.insert(40);\n\n    // Perform rotation left test\n    Node rootNode = tree.getRoot();\n    Node newRoot = rootNode.rotateLeft(rootNode);\n    // Add assertions to verify the rotation\n    assertEquals(20, newRoot.getKey());\n    assertEquals(10, newRoot.getLeft().getKey());\n    assertEquals(30, newRoot.getRight().getKey());\n}",
        "@Test\npublic void rotateLeftTest() {\n    Node nodeA = new Node();\n    Node nodeB = new Node();\n    AVLTree avlTree = new AVLTree();\n    Node result = avlTree.rotateLeft(nodeA);\n    assertNotNull(result);\n}",
        "@Test\npublic void rotateLeftTest() {\n    Node a = new Node(5);\n    Node b = new Node(10);\n    a.right = b;\n    b.parent = a;\n    \n    AVLTree tree = new AVLTree();\n    tree.rotateLeft(a);\n    \n    // Add assertions to test the rotation\n}",
        "@Test\npublic void rotateLeftTest() {\n    Node a = new Node(5); \n    Node b = new Node(10);\n    a.setRight(b);\n    \n    // perform the left rotation\n    Node rotatedNode = avlTree.rotateLeft(a);\n    \n    // perform assertions to check the correctness of the rotation\n    // for example:\n    assertEquals(b, rotatedNode); // check if b is the new root after rotation\n    assertEquals(a, b.getLeft()); // check if a is the left child of the new root\n}",
        "@Test\npublic void rotateLeftTest() {\n    Node a = new Node(5);\n    Node b = new Node(10);\n    a.right = b;\n    \n    Node result = avlTree.rotateLeft(a);\n    \n    assertEquals(expectedResult, result);\n}",
        "@Test\npublic void rotateLeftTest() {\n    Node a = new Node(5);\n    Node b = new Node(10);\n    a.setRight(b);\n    Node c = new Node(15);\n    b.setLeft(c);\n    \n    Node result = rotateLeft(a);\n    \n    assertEquals(b, result);\n    assertEquals(a, result.getLeft());\n    assertEquals(c, b.getLeft());\n}",
        "@Test\npublic void rotateLeftTest() {\n    Node parent = new Node(10);\n    Node a = new Node(5);\n    Node b = new Node(15);\n    a.parent = parent;\n    parent.left = a;\n    parent.right = b;\n    \n    AVLTree avlTree = new AVLTree();\n    Node result = avlTree.rotateLeft(a);\n    \n    assertEquals(result, b);\n}",
        "@Test\n    public void rotateLeftTest() {\n        Node a = new Node(10);\n        Node b = new Node(20);\n        a.right = b;\n        b.parent = a;\n        Node c = new Node(30);\n        b.left = c;\n        c.parent = b;\n        \n        // Perform the rotateLeft operation\n        AVLTree avlTree = new AVLTree();\n        Node result = avlTree.rotateLeft(a);\n        \n        // Assert the expected outcome\n        assertEquals(b, result);\n        assertEquals(a, b.left);\n        assertEquals(b, a.parent);\n        assertNull(b.parent);\n        assertEquals(a, b.parent);\n    }\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree avlTree = new AVLTree();\n    Node a = new Node(5);\n    Node b = new Node(10);\n    a.right = b;\n    \n    Node result = avlTree.rotateLeft(a);\n    // Add assertions to verify the correct rotation logic\n    // For example:\n    assertEquals(b, result);\n    assertEquals(a, b.left);\n    assertEquals(b, a.parent);\n    // Add more assertions as needed\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    Node a = new Node(5);\n    Node b = new Node(10);\n    a.right = b;\n    \n    assertEquals(b, tree.rotateLeft(a));\n}"
    ]
}