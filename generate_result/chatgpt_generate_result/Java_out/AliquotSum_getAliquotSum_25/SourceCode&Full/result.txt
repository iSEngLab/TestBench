Source code: 


public static int getAliquotSum(int n) {
    if (n <= 0) return -1;
    int sum = 1;
    double root = Math.sqrt(n);
    /*
     * We can get the factors after the root by dividing number by its factors
     * before the root.
     * Ex- Factors of 100 are 1, 2, 4, 5, 10, 20, 25, 50 and 100.
     * Root of 100 is 10. So factors before 10 are 1, 2, 4 and 5.
     * Now by dividing 100 by each factor before 10 we get:
     * 100/1 = 100, 100/2 = 50, 100/4 = 25 and 100/5 = 20
     * So we get 100, 50, 25 and 20 which are factors of 100 after 10
     */
    for (int i = 2; i <= root; i++) {
        if (n % i == 0) {
            sum += i + n / i;
        }
    }
    // if n is a perfect square then its root was added twice in above loop, so subtracting root
    // from sum
    if (root == (int) root) sum -= root;
    return sum;
}



No.1 generated result --------------------------

public void getAliquotSumTest() {
    assertEquals(9, AliquotSum.getAliquotSum(15));
}


No.2 generated result --------------------------

@Test
public void getAliquotSumTest() {
    assertEquals(9, AliquotSum.getAliquotSum(15));
}


No.3 generated result --------------------------

@Test
public void getAliquotSumTest() {
    assertEquals(9, AliquotSum.getAliquotSum(15));
}


No.4 generated result --------------------------

@Test
public void getAliquotSumTest() {
    assertEquals(9, AliquotSum.getAliquotSum(15));
}


No.5 generated result --------------------------

@Test
public void getAliquotSumTest() {
    // Given
    int n = 15;
    
    // When
    int result = AliquotSum.getAliquotSum(n);
    
    // Then
    assertEquals(9, result);
}


No.6 generated result --------------------------

@Test
public void getAliquotSumTest() {
    int value1 = AliquotSum.getAliquotSum(24);
    assertEquals(36, value1);
    
    int value2 = AliquotSum.getAliquotSum(-3);
    assertEquals(-1, value2);
}


No.7 generated result --------------------------

@Test
public void getAliquotSumTest() {
    assertEquals(9, AliquotSum.getAliquotSum(15));
}


No.8 generated result --------------------------

@Test
public void getAliquotSumTest() {
    assertEquals(7, AliquotSum.getAliquotSum(15));
    assertEquals(1, AliquotSum.getAliquotSum(1));
    assertEquals(1, AliquotSum.getAliquotSum(2));
    assertEquals(3, AliquotSum.getAliquotSum(3));
}


No.9 generated result --------------------------

@Test
public void getAliquotSumTest() {
    assertEquals(6, AliquotSum.getAliquotSum(6));
    assertEquals(16, AliquotSum.getAliquotSum(15));
    assertEquals(12, AliquotSum.getAliquotSum(28));
}


No.10 generated result --------------------------

public void getAliquotSumTest() {
        assertEquals(9, AliquotSum.getAliquotSum(15));
        assertEquals(15, AliquotSum.getAliquotSum(14));
        assertEquals(9, AliquotSum.getAliquotSum(28));
    }


