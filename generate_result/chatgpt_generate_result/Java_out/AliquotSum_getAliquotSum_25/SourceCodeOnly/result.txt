Source code: 


public static int getAliquotSum(int n) {
    if (n <= 0) return -1;
    int sum = 1;
    double root = Math.sqrt(n);
    /*
     * We can get the factors after the root by dividing number by its factors
     * before the root.
     * Ex- Factors of 100 are 1, 2, 4, 5, 10, 20, 25, 50 and 100.
     * Root of 100 is 10. So factors before 10 are 1, 2, 4 and 5.
     * Now by dividing 100 by each factor before 10 we get:
     * 100/1 = 100, 100/2 = 50, 100/4 = 25 and 100/5 = 20
     * So we get 100, 50, 25 and 20 which are factors of 100 after 10
     */
    for (int i = 2; i <= root; i++) {
        if (n % i == 0) {
            sum += i + n / i;
        }
    }
    // if n is a perfect square then its root was added twice in above loop, so subtracting root
    // from sum
    if (root == (int) root) sum -= root;
    return sum;
}



No.1 generated result --------------------------

public void getAliquotSumTest() {
    assertEquals(15, AliquotSum.getAliquotSum(10));
    assertEquals(31, AliquotSum.getAliquotSum(28));
    assertEquals(50, AliquotSum.getAliquotSum(48));
}


No.2 generated result --------------------------

@Test
public void getAliquotSumTest() {
    assertEquals(16, AliquotSum.getAliquotSum(10));
    assertEquals(0, AliquotSum.getAliquotSum(0));
}


No.3 generated result --------------------------

@Test
public void getAliquotSumTest() {
    assertEquals(10, AliquotSum.getAliquotSum(8));
    assertEquals(15, AliquotSum.getAliquotSum(16));
    assertEquals(284, AliquotSum.getAliquotSum(220));
}


No.4 generated result --------------------------

@Test
public void getAliquotSumTest() {
    assertEquals(16, AliquotSum.getAliquotSum(12));
    assertEquals(15, AliquotSum.getAliquotSum(16));
    assertEquals(-1, AliquotSum.getAliquotSum(-16));
}


No.5 generated result --------------------------

@Test
public void getAliquotSumTest() {
    int result = AliquotSum.getAliquotSum(100);
    assertEquals(117, result);
}


No.6 generated result --------------------------

public void getAliquotSumTest() {
        int actual = AliquotSum.getAliquotSum(100);
        int expected = 217;
        assertEquals(expected, actual);
    }


No.7 generated result --------------------------

@Test
public void getAliquotSumTest() {
    int result1 = AliquotSum.getAliquotSum(100);
    assertEquals(117, result1);

    int result2 = AliquotSum.getAliquotSum(12);
    assertEquals(16, result2);
}


No.8 generated result --------------------------

@Test
public void getAliquotSumTest() {
    assertEquals(8, AliquotSum.getAliquotSum(12));
    assertEquals(15, AliquotSum.getAliquotSum(14));
}


No.9 generated result --------------------------

@Test
public void getAliquotSumTest() {
    assertEquals(10, AliquotSum.getAliquotSum(8));
    assertEquals(1, AliquotSum.getAliquotSum(1));
    assertEquals(28, AliquotSum.getAliquotSum(28));
}


No.10 generated result --------------------------

@Test
public void getAliquotSumTest() {
    // Test case for n = 10
    assertEquals(8, AliquotSum.getAliquotSum(10));
    // Test case for n = 100
    assertEquals(117, AliquotSum.getAliquotSum(100));
}


