{
    "project_name": "Java",
    "file_name": "Armstrong.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/Armstrong.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Checks whether a given number is an Armstrong number or not.\n     *\n     * @param number the number to check\n     * @return {@code true} if the given number is an Armstrong number, {@code false} otherwise\n     */",
    "source_code": "\npublic boolean isArmstrong(int number) {\n    long sum = 0;\n    String temp = Integer.toString(number); // Convert the given number to a string\n    int power = temp.length(); // Extract the length of the number (number of digits)\n    long originalNumber = number;\n\n    while (originalNumber > 0) {\n        long digit = originalNumber % 10;\n        sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.\n        originalNumber /= 10;\n    }\n\n    return sum == number;\n}\n",
    "class_name": "Armstrong",
    "method_name": "isArmstrong",
    "arguments": [
        "int number"
    ],
    "generate_test": [
        "\nassertEquals(true, isArmstrong(153));",
        "\n        // Arrange\n        Armstrong armstrong = new Armstrong();\n        \n        // Act\n        boolean result = armstrong.isArmstrong(153);\n        \n        // Assert\n        assertTrue(result);\n        assertEquals(true, result);",
        "@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    boolean result = armstrong.isArmstrong(153);\n    assertTrue(result);\n}",
        "@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    assertTrue(armstrong.isArmstrong(153));\n    assertTrue(armstrong.isArmstrong(9474));\n    assertFalse(armstrong.isArmstrong(123));\n}",
        "@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    assertTrue(armstrong.isArmstrong(153));\n    assertFalse(armstrong.isArmstrong(123));\n    assertTrue(armstrong.isArmstrong(9474));\n}",
        "@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    assertTrue(armstrong.isArmstrong(153));\n    assertFalse(armstrong.isArmstrong(154));\n}",
        "@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    boolean result = armstrong.isArmstrong(153);\n    assertTrue(result);\n}",
        "@Test\npublic void isArmstrongTest() {\n    assertTrue(isArmstrong(153));\n}",
        "@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    assertTrue(armstrong.isArmstrong(153));\n    assertFalse(armstrong.isArmstrong(154));\n}",
        "@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    assertTrue(armstrong.isArmstrong(153)); // Test for Armstrong number\n    assertFalse(armstrong.isArmstrong(123)); // Test for non-Armstrong number\n}"
    ]
}