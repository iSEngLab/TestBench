{
    "project_name": "Java",
    "file_name": "ArrayCombination.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/backtracking/ArrayCombination.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.backtracking",
    "docstring": "/**\n     * Find all combinations of 1..n by creating an array and using backtracking in Combination.java\n     * @param n max value of the array.\n     * @param k length of combination\n     * @return a list of all combinations of length k. If k == 0, return null.\n     */",
    "source_code": "\npublic static List<TreeSet<Integer>> combination(int n, int k) {\n    if (n <= 0) {\n        return null;\n    }\n    length = k;\n    Integer[] arr = new Integer[n];\n    for (int i = 1; i <= n; i++) {\n        arr[i - 1] = i;\n    }\n    return Combination.combination(arr, length);\n}\n",
    "class_name": "ArrayCombination",
    "method_name": "combination",
    "arguments": [
        "int n",
        "int k"
    ],
    "generate_test": [
        "@Test\npublic void combinationTest() {\n    int n = 5;\n    int k = 3;\n    List<TreeSet<Integer>> expected = new ArrayList<>();\n    TreeSet<Integer> combination1 = new TreeSet<>(Arrays.asList(1, 2, 3));\n    TreeSet<Integer> combination2 = new TreeSet<>(Arrays.asList(1, 2, 4));\n    TreeSet<Integer> combination3 = new TreeSet<>(Arrays.asList(1, 2, 5));\n    TreeSet<Integer> combination4 = new TreeSet<>(Arrays.asList(1, 3, 4));\n    TreeSet<Integer> combination5 = new TreeSet<>(Arrays.asList(1, 3, 5));\n    TreeSet<Integer> combination6 = new TreeSet<>(Arrays.asList(1, 4, 5));\n    TreeSet<Integer> combination7 = new TreeSet<>(Arrays.asList(2, 3, 4));\n    TreeSet<Integer> combination8 = new TreeSet<>(Arrays.asList(2, 3, 5));\n    TreeSet<Integer> combination9 = new TreeSet<>(Arrays.asList(2, 4, 5));\n    TreeSet<Integer> combination10 = new TreeSet<>(Arrays.asList(3, 4, 5));\n    \n    expected.add(combination1);\n    expected.add(combination2);\n    expected.add(combination3);\n    expected.add(combination4);\n    expected.add(combination5);\n    expected.add(combination6);\n    expected.add(combination7);\n    expected.add(combination8);\n    expected.add(combination9);\n    expected.add(combination10);\n    \n    assertEquals(expected, ArrayCombination.combination(n, k));\n}",
        "package com.thealgorithms.backtracking;\n\nimport java.util.TreeSet;\nimport java.util.List;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayCombinationTest {\n    @Test\n    public void combinationTest() {\n        int n = 4;\n        int k = 2;\n        List<TreeSet<Integer>> expected = new ArrayList<>();\n        TreeSet<Integer> set1 = new TreeSet<>();\n        set1.add(1);\n        set1.add(2);\n        expected.add(set1);\n        TreeSet<Integer> set2 = new TreeSet<>();\n        set2.add(1);\n        set2.add(3);\n        expected.add(set2);\n        TreeSet<Integer> set3 = new TreeSet<>();\n        set3.add(1);\n        set3.add(4);\n        expected.add(set3);\n        TreeSet<Integer> set4 = new TreeSet<>();\n        set4.add(2);\n        set4.add(3);\n        expected.add(set4);\n        TreeSet<Integer> set5 = new TreeSet<>();\n        set5.add(2);\n        set5.add(4);\n        expected.add(set5);\n        TreeSet<Integer> set6 = new TreeSet<>();\n        set6.add(3);\n        set6.add(4);\n        expected.add(set6);\n\n        List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);\n        assertEquals(expected, result);\n    }\n}",
        "@Test\npublic void combinationTest() {\n    List<TreeSet<Integer>> result = ArrayCombination.combination(5, 2);\n    assertNotNull(result);\n}",
        "@Test\npublic void combinationTest() {\n    int n = 5;\n    int k = 3;\n    List<TreeSet<Integer>> expected = new ArrayList<>();\n    expected.add(new TreeSet<>(Arrays.asList(1, 2, 3)));\n    List<TreeSet<Integer>> actual = ArrayCombination.combination(n, k);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void combinationTest() {\n    int n = 4;\n    int k = 2;\n    List<TreeSet<Integer>> expected = new ArrayList<>();\n    TreeSet<Integer> combination1 = new TreeSet<>(Arrays.asList(1, 2));\n    TreeSet<Integer> combination2 = new TreeSet<>(Arrays.asList(1, 3));\n    TreeSet<Integer> combination3 = new TreeSet<>(Arrays.asList(1, 4));\n    TreeSet<Integer> combination4 = new TreeSet<>(Arrays.asList(2, 3));\n    TreeSet<Integer> combination5 = new TreeSet<>(Arrays.asList(2, 4));\n    TreeSet<Integer> combination6 = new TreeSet<>(Arrays.asList(3, 4));\n    expected.add(combination1);\n    expected.add(combination2);\n    expected.add(combination3);\n    expected.add(combination4);\n    expected.add(combination5);\n    expected.add(combination6);\n    assertEquals(expected, ArrayCombination.combination(n, k));\n}",
        "@Test\npublic void combinationTest() {\n    List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);\n    List<TreeSet<Integer>> expected = new ArrayList<>();\n\n    // Add expected combinations here\n    expected.add(new TreeSet<>(Arrays.asList(1, 2, 3)));\n    expected.add(new TreeSet<>(Arrays.asList(1, 2, 4)));\n    expected.add(new TreeSet<>(Arrays.asList(1, 2, 5)));\n    expected.add(new TreeSet<>(Arrays.asList(1, 3, 4)));\n    expected.add(new TreeSet<>(Arrays.asList(1, 3, 5)));\n    expected.add(new TreeSet<>(Arrays.asList(1, 4, 5)));\n    expected.add(new TreeSet<>(Arrays.asList(2, 3, 4)));\n    expected.add(new TreeSet<>(Arrays.asList(2, 3, 5)));\n    expected.add(new TreeSet<>(Arrays.asList(2, 4, 5)));\n    expected.add(new TreeSet<>(Arrays.asList(3, 4, 5)));\n\n    assertEquals(expected, result);\n}",
        "@Test\npublic void combinationTest() {\n    int n = 5;\n    int k = 2;\n    assertNotNull(ArrayCombination.combination(n, k));\n}",
        "@Test\npublic void combinationTest() {\n    List<TreeSet<Integer>> expected = new ArrayList<>();\n    TreeSet<Integer> set1 = new TreeSet<>();\n    set1.add(1);\n    set1.add(2);\n    set1.add(3);\n    expected.add(set1);\n    assertEquals(expected, ArrayCombination.combination(3, 3));\n}",
        "@Test\npublic void combinationTest() {\n    int n = 5;\n    int k = 2;\n    List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);\n    assertNotNull(result);\n}",
        "List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);\nassertEquals(10, result.size());"
    ]
}