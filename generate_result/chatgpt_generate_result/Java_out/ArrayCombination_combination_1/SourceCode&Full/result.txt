Source code: 


public static List<TreeSet<Integer>> combination(int n, int k) {
    if (n <= 0) {
        return null;
    }
    length = k;
    Integer[] arr = new Integer[n];
    for (int i = 1; i <= n; i++) {
        arr[i - 1] = i;
    }
    return Combination.combination(arr, length);
}



No.1 generated result --------------------------

@Test
public void combinationTest() {
    int n = 5;
    int k = 3;
    List<TreeSet<Integer>> expected = new ArrayList<>();
    TreeSet<Integer> combination1 = new TreeSet<>(Arrays.asList(1, 2, 3));
    TreeSet<Integer> combination2 = new TreeSet<>(Arrays.asList(1, 2, 4));
    TreeSet<Integer> combination3 = new TreeSet<>(Arrays.asList(1, 2, 5));
    TreeSet<Integer> combination4 = new TreeSet<>(Arrays.asList(1, 3, 4));
    TreeSet<Integer> combination5 = new TreeSet<>(Arrays.asList(1, 3, 5));
    TreeSet<Integer> combination6 = new TreeSet<>(Arrays.asList(1, 4, 5));
    TreeSet<Integer> combination7 = new TreeSet<>(Arrays.asList(2, 3, 4));
    TreeSet<Integer> combination8 = new TreeSet<>(Arrays.asList(2, 3, 5));
    TreeSet<Integer> combination9 = new TreeSet<>(Arrays.asList(2, 4, 5));
    TreeSet<Integer> combination10 = new TreeSet<>(Arrays.asList(3, 4, 5));
    
    expected.add(combination1);
    expected.add(combination2);
    expected.add(combination3);
    expected.add(combination4);
    expected.add(combination5);
    expected.add(combination6);
    expected.add(combination7);
    expected.add(combination8);
    expected.add(combination9);
    expected.add(combination10);
    
    assertEquals(expected, ArrayCombination.combination(n, k));
}


No.2 generated result --------------------------

package com.thealgorithms.backtracking;

import java.util.TreeSet;
import java.util.List;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        int n = 4;
        int k = 2;
        List<TreeSet<Integer>> expected = new ArrayList<>();
        TreeSet<Integer> set1 = new TreeSet<>();
        set1.add(1);
        set1.add(2);
        expected.add(set1);
        TreeSet<Integer> set2 = new TreeSet<>();
        set2.add(1);
        set2.add(3);
        expected.add(set2);
        TreeSet<Integer> set3 = new TreeSet<>();
        set3.add(1);
        set3.add(4);
        expected.add(set3);
        TreeSet<Integer> set4 = new TreeSet<>();
        set4.add(2);
        set4.add(3);
        expected.add(set4);
        TreeSet<Integer> set5 = new TreeSet<>();
        set5.add(2);
        set5.add(4);
        expected.add(set5);
        TreeSet<Integer> set6 = new TreeSet<>();
        set6.add(3);
        set6.add(4);
        expected.add(set6);

        List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);
        assertEquals(expected, result);
    }
}


No.3 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> result = ArrayCombination.combination(5, 2);
    assertNotNull(result);
}


No.4 generated result --------------------------

@Test
public void combinationTest() {
    int n = 5;
    int k = 3;
    List<TreeSet<Integer>> expected = new ArrayList<>();
    expected.add(new TreeSet<>(Arrays.asList(1, 2, 3)));
    List<TreeSet<Integer>> actual = ArrayCombination.combination(n, k);
    assertEquals(expected, actual);
}


No.5 generated result --------------------------

@Test
public void combinationTest() {
    int n = 4;
    int k = 2;
    List<TreeSet<Integer>> expected = new ArrayList<>();
    TreeSet<Integer> combination1 = new TreeSet<>(Arrays.asList(1, 2));
    TreeSet<Integer> combination2 = new TreeSet<>(Arrays.asList(1, 3));
    TreeSet<Integer> combination3 = new TreeSet<>(Arrays.asList(1, 4));
    TreeSet<Integer> combination4 = new TreeSet<>(Arrays.asList(2, 3));
    TreeSet<Integer> combination5 = new TreeSet<>(Arrays.asList(2, 4));
    TreeSet<Integer> combination6 = new TreeSet<>(Arrays.asList(3, 4));
    expected.add(combination1);
    expected.add(combination2);
    expected.add(combination3);
    expected.add(combination4);
    expected.add(combination5);
    expected.add(combination6);
    assertEquals(expected, ArrayCombination.combination(n, k));
}


No.6 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);
    List<TreeSet<Integer>> expected = new ArrayList<>();

    // Add expected combinations here
    expected.add(new TreeSet<>(Arrays.asList(1, 2, 3)));
    expected.add(new TreeSet<>(Arrays.asList(1, 2, 4)));
    expected.add(new TreeSet<>(Arrays.asList(1, 2, 5)));
    expected.add(new TreeSet<>(Arrays.asList(1, 3, 4)));
    expected.add(new TreeSet<>(Arrays.asList(1, 3, 5)));
    expected.add(new TreeSet<>(Arrays.asList(1, 4, 5)));
    expected.add(new TreeSet<>(Arrays.asList(2, 3, 4)));
    expected.add(new TreeSet<>(Arrays.asList(2, 3, 5)));
    expected.add(new TreeSet<>(Arrays.asList(2, 4, 5)));
    expected.add(new TreeSet<>(Arrays.asList(3, 4, 5)));

    assertEquals(expected, result);
}


No.7 generated result --------------------------

@Test
public void combinationTest() {
    int n = 5;
    int k = 2;
    assertNotNull(ArrayCombination.combination(n, k));
}


No.8 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> expected = new ArrayList<>();
    TreeSet<Integer> set1 = new TreeSet<>();
    set1.add(1);
    set1.add(2);
    set1.add(3);
    expected.add(set1);
    assertEquals(expected, ArrayCombination.combination(3, 3));
}


No.9 generated result --------------------------

@Test
public void combinationTest() {
    int n = 5;
    int k = 2;
    List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);
    assertNotNull(result);
}


No.10 generated result --------------------------

List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);
assertEquals(10, result.size());


