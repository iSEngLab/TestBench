Source code: 


public static List<TreeSet<Integer>> combination(int n, int k) {
    if (n <= 0) {
        return null;
    }
    length = k;
    Integer[] arr = new Integer[n];
    for (int i = 1; i <= n; i++) {
        arr[i - 1] = i;
    }
    return Combination.combination(arr, length);
}



No.1 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> expected = new ArrayList<>();
    TreeSet<Integer> set1 = new TreeSet<>();
    set1.add(1);
    set1.add(2);
    expected.add(set1);
    assertEquals(expected, ArrayCombination.combination(2, 2));
}


No.2 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);
    assertNotNull(result);
    assertEquals(10, result.size());
}


No.3 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);
    assertNotNull(result);
    // Add more assertions if needed
}


No.4 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> expected = new ArrayList<>();
    TreeSet<Integer> set1 = new TreeSet<>(Arrays.asList(1, 2));
    TreeSet<Integer> set2 = new TreeSet<>(Arrays.asList(1, 3));
    TreeSet<Integer> set3 = new TreeSet<>(Arrays.asList(2, 3));
    expected.add(set1);
    expected.add(set2);
    expected.add(set3);

    List<TreeSet<Integer>> result = ArrayCombination.combination(3, 2);
    
    assertEquals(expected, result);
}


No.5 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);
    // Add assertions here
    assertEquals(10, result.size());
}


No.6 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);
    assertNotNull(result);
    assertEquals(10, result.size());
}


No.7 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);
    assertNotNull(result);
    assertEquals(10, result.size());
}


No.8 generated result --------------------------

@Test
public void combinationTest() {
    int n = 5;
    int k = 3;
    List<TreeSet<Integer>> expected = new ArrayList<>();
    TreeSet<Integer> set = new TreeSet<>();
    set.add(1);
    set.add(2);
    set.add(3);
    expected.add(set);
    TreeSet<Integer> set2 = new TreeSet<>();
    set2.add(1);
    set2.add(2);
    set2.add(4);
    expected.add(set2);
    TreeSet<Integer> set3 = new TreeSet<>();
    set3.add(1);
    set3.add(2);
    set3.add(5);
    expected.add(set3);

    List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);

    assertEquals(expected, result);
}


No.9 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);
    assertEquals(10, result.size());
}


No.10 generated result --------------------------

@Test
public void combinationTest() {
    int n = 5;
    int k = 3;
    List<TreeSet<Integer>> expected = new ArrayList<>();
    TreeSet<Integer> set1 = new TreeSet<>(Arrays.asList(1, 2, 3));
    TreeSet<Integer> set2 = new TreeSet<>(Arrays.asList(1, 2, 4));
    TreeSet<Integer> set3 = new TreeSet<>(Arrays.asList(1, 2, 5));
    TreeSet<Integer> set4 = new TreeSet<>(Arrays.asList(1, 3, 4));
    TreeSet<Integer> set5 = new TreeSet<>(Arrays.asList(1, 3, 5));
    TreeSet<Integer> set6 = new TreeSet<>(Arrays.asList(1, 4, 5));
    TreeSet<Integer> set7 = new TreeSet<>(Arrays.asList(2, 3, 4));
    TreeSet<Integer> set8 = new TreeSet<>(Arrays.asList(2, 3, 5));
    TreeSet<Integer> set9 = new TreeSet<>(Arrays.asList(2, 4, 5));
    TreeSet<Integer> set10 = new TreeSet<>(Arrays.asList(3, 4, 5));
    expected.add(set1);
    expected.add(set2);
    expected.add(set3);
    expected.add(set4);
    expected.add(set5);
    expected.add(set6);
    expected.add(set7);
    expected.add(set8);
    expected.add(set9);
    expected.add(set10);
    List<TreeSet<Integer>> actual = ArrayCombination.combination(n, k);
    assertEquals(expected, actual);
}


