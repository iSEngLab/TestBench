{
    "project_name": "Java",
    "file_name": "ArrayCombination.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/backtracking/ArrayCombination.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.backtracking",
    "docstring": "/**\n     * Find all combinations of 1..n by creating an array and using backtracking in Combination.java\n     * @param n max value of the array.\n     * @param k length of combination\n     * @return a list of all combinations of length k. If k == 0, return null.\n     */",
    "source_code": "\npublic static List<TreeSet<Integer>> combination(int n, int k) {\n    if (n <= 0) {\n        return null;\n    }\n    length = k;\n    Integer[] arr = new Integer[n];\n    for (int i = 1; i <= n; i++) {\n        arr[i - 1] = i;\n    }\n    return Combination.combination(arr, length);\n}\n",
    "class_name": "ArrayCombination",
    "method_name": "combination",
    "arguments": [
        "int n",
        "int k"
    ],
    "generate_test": [
        "\n@Test\npublic void combinationTest() {\n    List<TreeSet<Integer>> expected = new ArrayList<>();\n    TreeSet<Integer> set1 = new TreeSet<>();\n    set1.add(1);\n    set1.add(2);\n    expected.add(set1);\n    TreeSet<Integer> set2 = new TreeSet<>();\n    set2.add(1);\n    set2.add(3);\n    expected.add(set2);\n    TreeSet<Integer> set3 = new TreeSet<>();\n    set3.add(2);\n    set3.add(3);\n    expected.add(set3);\n    assertEquals(expected, ArrayCombination.combination(3, 2));\n}",
        "@Test\npublic void combinationTest() {\n    List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);\n    List<TreeSet<Integer>> expected = new ArrayList<>();\n    expected.add(new TreeSet<>(Arrays.asList(1, 2, 3)));\n    expected.add(new TreeSet<>(Arrays.asList(1, 2, 4)));\n    expected.add(new TreeSet<>(Arrays.asList(1, 2, 5)));\n    expected.add(new TreeSet<>(Arrays.asList(1, 3, 4)));\n    expected.add(new TreeSet<>(Arrays.asList(1, 3, 5)));\n    expected.add(new TreeSet<>(Arrays.asList(1, 4, 5)));\n    expected.add(new TreeSet<>(Arrays.asList(2, 3, 4)));\n    expected.add(new TreeSet<>(Arrays.asList(2, 3, 5)));\n    expected.add(new TreeSet<>(Arrays.asList(2, 4, 5)));\n    expected.add(new TreeSet<>(Arrays.asList(3, 4, 5)));\n\n    assertEquals(expected, result);\n}",
        "public void combinationTest() {\n    int n = 4;\n    int k = 2;\n    List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);\n    assertNotNull(result);\n    assertEquals(6, result.size());\n}",
        "@Test\npublic void combinationTest() {\n    List<TreeSet<Integer>> result = ArrayCombination.combination(5, 2);\n    List<TreeSet<Integer>> expectedOutput = new ArrayList<>();\n    TreeSet<Integer> set1 = new TreeSet<>();\n    set1.add(1);\n    set1.add(2);\n    expectedOutput.add(set1);\n    assertEquals(expectedOutput, result);\n}",
        "@Test\npublic void combinationTest() {\n    List<TreeSet<Integer>> expected = new ArrayList<>();\n    TreeSet<Integer> set1 = new TreeSet<>();\n    set1.add(1);\n    set1.add(2);\n    expected.add(set1);\n    assertEquals(expected, ArrayCombination.combination(3, 2));\n}",
        "@Test\npublic void combinationTest() {\n    List<TreeSet<Integer>> result = combination(5, 3);\n    TreeSet<Integer> expected = new TreeSet<>();\n    expected.add(1);\n    expected.add(2);\n    expected.add(3);\n    \n    for (TreeSet<Integer> set : result) {\n        assertEquals(expected, set);\n    }\n}",
        "public void combinationTest() {\n    List<TreeSet<Integer>> expected = new ArrayList<>();\n    TreeSet<Integer> set1 = new TreeSet<>();\n    set1.add(1);\n    set1.add(2);\n    expected.add(set1);\n    assertEquals(expected, ArrayCombination.combination(3, 2));\n}",
        "public void combinationTest() {\n    List<TreeSet<Integer>> expected = new ArrayList<>();\n    TreeSet<Integer> set1 = new TreeSet<>();\n    set1.add(1);\n    set1.add(2);\n    set1.add(3);\n    expected.add(set1);\n    assertEquals(expected, ArrayCombination.combination(3, 2));\n}",
        "@Test\npublic void combinationTest() {\n    int n = 5;\n    int k = 3;\n    List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);\n    // Assert the result here\n    assertNotNull(result);\n}",
        "public void combinationTest() {\n    List<TreeSet<Integer>> expected = new ArrayList<>();\n    TreeSet<Integer> set1 = new TreeSet<>(Arrays.asList(1, 2, 3));\n    TreeSet<Integer> set2 = new TreeSet<>(Arrays.asList(1, 2, 4));\n    TreeSet<Integer> set3 = new TreeSet<>(Arrays.asList(1, 3, 4));\n    TreeSet<Integer> set4 = new TreeSet<>(Arrays.asList(2, 3, 4));\n    expected.add(set1);\n    expected.add(set2);\n    expected.add(set3);\n    expected.add(set4);\n    \n    List<TreeSet<Integer>> result = ClassName.combination(4, 3); // Replace ClassName with appropriate class name\n    \n    assertEquals(expected, result);\n}"
    ]
}