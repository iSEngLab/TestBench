{
    "project_name": "Java",
    "file_name": "BinaryTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/BinaryTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": "/**\n     * Method to find a Node with a certain value\n     *\n     * @param key Value being looked for\n     * @return The node if it finds it, otherwise returns the parent\n     */",
    "source_code": "\npublic Node find(int key) {\n    Node current = root;\n    while (current != null) {\n        if (key < current.data) {\n            if (current.left == null) {\n                return current; // The key isn't exist, returns the parent\n            }\n            current = current.left;\n        } else if (key > current.data) {\n            if (current.right == null) {\n                return current;\n            }\n            current = current.right;\n        } else { // If you find the value return it\n            return current;\n        }\n    }\n    return null;\n}\n",
    "class_name": "BinaryTree",
    "method_name": "find",
    "arguments": [
        "int key"
    ],
    "generate_test": [
        "@Test\npublic void findTest() {\n    BinaryTree binaryTree = new BinaryTree();\n    binaryTree.put(5);\n    binaryTree.put(3);\n    binaryTree.put(7);\n    binaryTree.put(2);\n    binaryTree.put(4);\n    binaryTree.put(6);\n    binaryTree.put(8);\n    Node result = binaryTree.find(4);\n    assertEquals(4, result.data);\n}",
        "@Test\npublic void findTest() {\n    BinaryTree binaryTree = new BinaryTree();\n    binaryTree.put(10);\n    binaryTree.put(5);\n    binaryTree.put(15);\n    binaryTree.put(3);\n    \n    // Test 1: Key exists in the tree\n    BinaryTree.Node result1 = binaryTree.find(3);\n    assertNotNull(result1);\n    assertEquals(3, result1.data);\n    \n    // Test 2: Key does not exist in the tree, parent should be returned\n    BinaryTree.Node result2 = binaryTree.find(7);\n    assertNotNull(result2);\n    assertEquals(5, result2.data);\n}",
        "@Test\n    public void findTest() {\n        // Create a BinaryTree object\n        BinaryTree binaryTree = new BinaryTree();\n        \n        // Add nodes to the binary tree\n        binaryTree.put(5);\n        binaryTree.put(3);\n        binaryTree.put(7);\n        binaryTree.put(2);\n        \n        // Call the find method to search for a node with key value 3\n        BinaryTree.Node resultNode = binaryTree.find(3);\n        \n        // Check if the resultNode data is equal to the expected value\n        assertEquals(3, resultNode.data);\n    }",
        "@Test\npublic void findTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(5);\n    tree.put(3);\n    tree.put(7);\n    tree.put(6);\n    tree.put(9);\n    Node foundNode = tree.find(7);\n    assertEquals(7, foundNode.data);\n}",
        "@Test\npublic void findTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(5);\n    tree.put(3);\n    tree.put(7);\n    assertEquals(3, tree.find(4).data);\n}",
        "@Test\npublic void findTest() {\n    // Arrange\n    BinaryTree binaryTree = new BinaryTree();\n    Node node1 = new Node(10);\n    binaryTree.put(5);\n    binaryTree.put(15);\n    \n    // Act\n    Node result1 = binaryTree.find(5);\n    Node result2 = binaryTree.find(8);\n    Node result3 = binaryTree.find(20);\n    \n    // Assert\n    assertEquals(result1, node1);\n    assertEquals(result2, node1);\n    assertEquals(result3, node1);\n}",
        "public void findTest() {\n        BinaryTree bt = new BinaryTree();\n        bt.put(5);\n        bt.put(3);\n        bt.put(7);\n        \n        Node result = bt.find(7);\n        \n        assertEquals(7, result.data);\n    }",
        "    @Test\n    public void findTest() {\n        BinaryTree tree = new BinaryTree();\n        tree.put(5);\n        tree.put(3);\n        tree.put(7);\n        assertEquals(tree.find(3).data, 5);\n        assertEquals(tree.find(8).data, 7);\n        assertEquals(tree.find(2).data, 3);\n    }",
        "\n@Test\npublic void findTest() {\n    Node root = new Node(10);\n    BinaryTree tree = new BinaryTree(root);\n    tree.put(5);\n    tree.put(15);\n    tree.put(7);\n    tree.put(12);\n    tree.put(3);\n    assertNull(tree.find(100));\n    assertNotNull(tree.find(7));\n    assertNotNull(tree.find(12));\n}\n",
        "@Test\npublic void findTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(10);\n    tree.put(5);\n    tree.put(15);\n    \n    Node foundNode = tree.find(5);\n    \n    assertEquals(5, foundNode.data);\n}"
    ]
}