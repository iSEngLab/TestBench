{
    "project_name": "Java",
    "file_name": "BinaryTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/BinaryTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": "/**\n     * Method to find a Node with a certain value\n     *\n     * @param key Value being looked for\n     * @return The node if it finds it, otherwise returns the parent\n     */",
    "source_code": "\npublic Node find(int key) {\n    Node current = root;\n    while (current != null) {\n        if (key < current.data) {\n            if (current.left == null) {\n                return current; // The key isn't exist, returns the parent\n            }\n            current = current.left;\n        } else if (key > current.data) {\n            if (current.right == null) {\n                return current;\n            }\n            current = current.right;\n        } else { // If you find the value return it\n            return current;\n        }\n    }\n    return null;\n}\n",
    "class_name": "BinaryTree",
    "method_name": "find",
    "arguments": [
        "int key"
    ],
    "generate_test": [
        "@Test\npublic void findTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(50);\n    tree.put(30);\n    tree.put(70);\n    tree.put(20);\n    tree.put(40);\n    \n    // Test when the key is found\n    assertEquals(30, tree.find(30).data);\n    \n    // Test when the key is not found\n    assertNull(tree.find(60));\n}",
        "@Test\npublic void findTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(5);\n    tree.put(3);\n    tree.put(7);\n    \n    Node result = tree.find(3);\n    \n    assertEquals(result.data, 3);\n}",
        "public void findTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(5);\n    tree.put(3);\n    tree.put(7);\n    tree.put(2);\n    \n    BinaryTree.Node result = tree.find(3);\n    assertNotNull(result);\n    assertEquals(3, result.value);\n}",
        "@Test\npublic void findTest() {\n    BinaryTree tree = new BinaryTree();\n    Node node = new Node(5);\n    tree.put(5);\n    tree.put(4);\n    tree.put(6);\n    tree.put(3);\n    assertEquals(node, tree.find(5));\n}",
        "@Test\npublic void findTest() {\n    BinaryTree bt = new BinaryTree();\n    bt.put(5);\n    bt.put(3);\n    bt.put(7);\n    Node result = bt.find(3);\n    assertEquals(result.data, 3);\n}",
        "public void findTest() {\n    BinaryTree bt = new BinaryTree();\n    bt.put(5);\n    bt.put(3);\n    bt.put(7);\n    bt.put(2);\n    bt.put(4);\n    Node result = bt.find(4);\n    assertEquals(4, result.data);\n}",
        "@Test\npublic void findTest() {\n    BinaryTree.Node root = new BinaryTree.Node(10);\n    BinaryTree tree = new BinaryTree(root);\n    tree.put(5);\n    tree.put(15);\n    tree.put(3);\n    tree.put(7);\n    assertEquals(5, tree.find(5).data);\n    assertEquals(7, tree.find(7).data);\n}",
        "\n    @Test\n    public void findTest() {\n        BinaryTree tree = new BinaryTree();\n        tree.put(5);\n        tree.put(3);\n        tree.put(8);\n        Node result = tree.find(3);\n        assertEquals(3, result.data);\n    }",
        "public void findTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(10);\n    tree.put(5);\n    tree.put(15);\n    tree.put(3);\n    tree.put(7);\n\n    assertEquals(\"Write your expected output here\", tree.find(3), \"Finding node with key 3 should return the node with key 3\");\n}",
        "@Test\npublic void findTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(5);\n    tree.put(3);\n    tree.put(8);\n    Node result = tree.find(3);\n    assertNotNull(result);\n    assertEquals(3, result.data);\n}"
    ]
}