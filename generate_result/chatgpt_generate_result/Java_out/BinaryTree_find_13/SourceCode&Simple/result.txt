Source code: 


public Node find(int key) {
    Node current = root;
    while (current != null) {
        if (key < current.data) {
            if (current.left == null) {
                return current; // The key isn't exist, returns the parent
            }
            current = current.left;
        } else if (key > current.data) {
            if (current.right == null) {
                return current;
            }
            current = current.right;
        } else { // If you find the value return it
            return current;
        }
    }
    return null;
}



No.1 generated result --------------------------

@Test
public void findTest() {
    BinaryTree tree = new BinaryTree();
    tree.put(50);
    tree.put(30);
    tree.put(70);
    tree.put(20);
    tree.put(40);
    
    // Test when the key is found
    assertEquals(30, tree.find(30).data);
    
    // Test when the key is not found
    assertNull(tree.find(60));
}


No.2 generated result --------------------------

@Test
public void findTest() {
    BinaryTree tree = new BinaryTree();
    tree.put(5);
    tree.put(3);
    tree.put(7);
    
    Node result = tree.find(3);
    
    assertEquals(result.data, 3);
}


No.3 generated result --------------------------

public void findTest() {
    BinaryTree tree = new BinaryTree();
    tree.put(5);
    tree.put(3);
    tree.put(7);
    tree.put(2);
    
    BinaryTree.Node result = tree.find(3);
    assertNotNull(result);
    assertEquals(3, result.value);
}


No.4 generated result --------------------------

@Test
public void findTest() {
    BinaryTree tree = new BinaryTree();
    Node node = new Node(5);
    tree.put(5);
    tree.put(4);
    tree.put(6);
    tree.put(3);
    assertEquals(node, tree.find(5));
}


No.5 generated result --------------------------

@Test
public void findTest() {
    BinaryTree bt = new BinaryTree();
    bt.put(5);
    bt.put(3);
    bt.put(7);
    Node result = bt.find(3);
    assertEquals(result.data, 3);
}


No.6 generated result --------------------------

public void findTest() {
    BinaryTree bt = new BinaryTree();
    bt.put(5);
    bt.put(3);
    bt.put(7);
    bt.put(2);
    bt.put(4);
    Node result = bt.find(4);
    assertEquals(4, result.data);
}


No.7 generated result --------------------------

@Test
public void findTest() {
    BinaryTree.Node root = new BinaryTree.Node(10);
    BinaryTree tree = new BinaryTree(root);
    tree.put(5);
    tree.put(15);
    tree.put(3);
    tree.put(7);
    assertEquals(5, tree.find(5).data);
    assertEquals(7, tree.find(7).data);
}


No.8 generated result --------------------------


    @Test
    public void findTest() {
        BinaryTree tree = new BinaryTree();
        tree.put(5);
        tree.put(3);
        tree.put(8);
        Node result = tree.find(3);
        assertEquals(3, result.data);
    }


No.9 generated result --------------------------

public void findTest() {
    BinaryTree tree = new BinaryTree();
    tree.put(10);
    tree.put(5);
    tree.put(15);
    tree.put(3);
    tree.put(7);

    assertEquals("Write your expected output here", tree.find(3), "Finding node with key 3 should return the node with key 3");
}


No.10 generated result --------------------------

@Test
public void findTest() {
    BinaryTree tree = new BinaryTree();
    tree.put(5);
    tree.put(3);
    tree.put(8);
    Node result = tree.find(3);
    assertNotNull(result);
    assertEquals(3, result.data);
}


