{
    "project_name": "Java",
    "file_name": "BinaryTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/BinaryTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": "/**\n     * Method to find a Node with a certain value\n     *\n     * @param key Value being looked for\n     * @return The node if it finds it, otherwise returns the parent\n     */",
    "source_code": "\npublic Node find(int key) {\n    Node current = root;\n    while (current != null) {\n        if (key < current.data) {\n            if (current.left == null) {\n                return current; // The key isn't exist, returns the parent\n            }\n            current = current.left;\n        } else if (key > current.data) {\n            if (current.right == null) {\n                return current;\n            }\n            current = current.right;\n        } else { // If you find the value return it\n            return current;\n        }\n    }\n    return null;\n}\n",
    "class_name": "BinaryTree",
    "method_name": "find",
    "arguments": [
        "int key"
    ],
    "generate_test": [
        "@Test\npublic void findTest() {\n    Node root = new Node(10);\n    root.left = new Node(5);\n    root.right = new Node(15);\n    root.left.left = new Node(3);\n    root.left.right = new Node(7);\n\n    BinaryTree binaryTree = new BinaryTree();\n    Node result = binaryTree.find(7);\n\n    assertEquals(root.left, result);\n}",
        "@Test\npublic void findTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.insert(5);\n    tree.insert(3);\n    tree.insert(7);\n    Node result = tree.find(3);\n    assertNotNull(result);\n    assertEquals(3, result.data);\n}",
        "@Test\npublic void findTest() {\n    Node root = new Node(5);\n    BinaryTree tree = new BinaryTree(root);\n    \n    Node result1 = tree.find(3);\n    assertEquals(5, result1.getData());\n    \n    Node result2 = tree.find(7);\n    assertEquals(5, result2.getData());\n}",
        "@Test\npublic void findTest() {\n    Node root = new Node(10);\n    root.left = new Node(5);\n    root.right = new Node(15);\n    root.left.left = new Node(3);\n    root.left.right = new Node(7);\n    BinaryTree binaryTree = new BinaryTree(root);\n    Node result = binaryTree.find(7);\n    assertNotNull(result);\n    assertEquals(7, result.data);\n}",
        "public void findTest() {\n    Node root = new Node(10);\n    BinaryTree bt = new BinaryTree(root);\n    bt.insert(5);\n    bt.insert(15);\n    bt.insert(3);\n    bt.insert(8);\n    bt.insert(20);\n    Node result = bt.find(8);\n    assertEquals(8, result.data);\n}",
        "@Test\npublic void findTest() {\n    // Create a binary tree\n    BinaryTree tree = new BinaryTree();\n    Node root = new Node(10);\n    tree.insert(root, 5);\n    tree.insert(root, 15);\n    tree.insert(root, 2);\n    tree.insert(root, 7);\n    \n    // Test the find method\n    Node result1 = tree.find(7);\n    assertEquals(7, result1.data);\n    \n    Node result2 = tree.find(20);\n    assertNull(result2);\n}",
        "@Test\npublic void findTest() {\n    Node root = new Node(10); // Assume the root value is 10\n    BinaryTree binaryTree = new BinaryTree(root);\n    Node expectedResult = binaryTree.find(10);\n    assertEquals(expectedResult, root);\n}",
        "@Test\npublic void findTest() {\n    Node node = new Node(10);\n    BinaryTree tree = new BinaryTree(node);\n    Node result = tree.find(10);\n    assertEquals(node, result);\n}",
        "@Test\npublic void findTest() {\n    Node root = new Node(5);\n    root.left = new Node(3);\n    root.right = new Node(8);\n    assertEquals(null, find(7));\n}",
        "@Test\npublic void findTest() {\n    // Create a binary tree with some sample data\n    BinaryTree tree = new BinaryTree();\n    tree.insert(5);\n    tree.insert(3);\n    tree.insert(7);\n    tree.insert(2);\n    tree.insert(4);\n    tree.insert(6);\n    tree.insert(8);\n    \n    // Test the find method with an existing key\n    assertEquals(5, tree.find(5));\n    \n    // Test the find method with a non-existing key\n    Node expectedParent = tree.find(1);\n    assertNull(expectedParent);\n}"
    ]
}