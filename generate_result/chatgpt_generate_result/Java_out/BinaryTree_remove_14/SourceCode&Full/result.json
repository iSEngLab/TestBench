{
    "project_name": "Java",
    "file_name": "BinaryTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/BinaryTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": "/**\n     * Deletes a given value from the Binary Tree\n     *\n     * @param value Value to be deleted\n     * @return If the value was deleted\n     */",
    "source_code": "\npublic boolean remove(int value) {\n    // temp is the node to be deleted\n    Node temp = find(value);\n\n    // If the value doesn't exist\n    if (temp.data != value) {\n        return false;\n    }\n\n    // No children\n    if (temp.right == null && temp.left == null) {\n        if (temp == root) {\n            root = null;\n        } // This if/else assigns the new node to be either the left or right child of the\n          // parent\n        else if (temp.parent.data < temp.data) {\n            temp.parent.right = null;\n        } else {\n            temp.parent.left = null;\n        }\n        return true;\n    } // Two children\n    else if (temp.left != null && temp.right != null) {\n        Node successor = findSuccessor(temp);\n\n        // The left tree of temp is made the left tree of the successor\n        successor.left = temp.left;\n        successor.left.parent = successor;\n\n        // If the successor has a right child, the child's grandparent is it's new parent\n        if (successor.parent != temp) {\n            if (successor.right != null) {\n                successor.right.parent = successor.parent;\n                successor.parent.left = successor.right;\n            } else {\n                successor.parent.left = null;\n            }\n            successor.right = temp.right;\n            successor.right.parent = successor;\n        }\n\n        if (temp == root) {\n            successor.parent = null;\n            root = successor;\n        } // If you're not deleting the root\n        else {\n            successor.parent = temp.parent;\n\n            // This if/else assigns the new node to be either the left or right child of the\n            // parent\n            if (temp.parent.data < temp.data) {\n                temp.parent.right = successor;\n            } else {\n                temp.parent.left = successor;\n            }\n        }\n        return true;\n    } // One child\n    else {\n        // If it has a right child\n        if (temp.right != null) {\n            if (temp == root) {\n                root = temp.right;\n                return true;\n            }\n\n            temp.right.parent = temp.parent;\n\n            // Assigns temp to left or right child\n            if (temp.data < temp.parent.data) {\n                temp.parent.left = temp.right;\n            } else {\n                temp.parent.right = temp.right;\n            }\n        } // If it has a left child\n        else {\n            if (temp == root) {\n                root = temp.left;\n                return true;\n            }\n\n            temp.left.parent = temp.parent;\n\n            // Assigns temp to left or right side\n            if (temp.data < temp.parent.data) {\n                temp.parent.left = temp.left;\n            } else {\n                temp.parent.right = temp.left;\n            }\n        }\n        return true;\n    }\n}\n",
    "class_name": "BinaryTree",
    "method_name": "remove",
    "arguments": [
        "int value"
    ],
    "generate_test": [
        "@Test\npublic void removeTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(5);\n    tree.put(3);\n    tree.put(7);\n    tree.put(2);\n    tree.put(4);\n    tree.put(6);\n    tree.put(8);\n    \n    tree.remove(4);\n    assertFalse(tree.remove(9));\n}",
        "@Test\npublic void removeTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(4);\n    tree.put(2);\n    tree.put(6);\n    tree.put(1);\n    tree.put(3);\n    tree.put(5);\n    tree.put(7);\n    assertTrue(tree.remove(2)); // Testing removal of node with one child\n    assertFalse(tree.remove(9)); // Testing removal of non-existent node\n    assertTrue(tree.remove(4)); // Testing removal of root node with two children\n    assertTrue(tree.remove(6)); // Testing removal of internal node with two children\n}",
        "BinaryTree tree = new BinaryTree();\ntree.put(5);\ntree.put(3);\ntree.put(8);\ntree.put(4);\ntree.put(7);\ntree.put(9);\ntree.remove(4);\nassertEquals(null, tree.find(4)); // Expected output is null because 4 should be removed from the tree",
        "@Test\npublic void removeTest() {\n    BinaryTree bt = new BinaryTree();\n    bt.put(5);\n    bt.put(3);\n    bt.put(7);\n    assertTrue(bt.remove(5));\n    assertFalse(bt.remove(10));\n}",
        "@Test\npublic void removeTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(10);\n    tree.put(5);\n    tree.put(15);\n    tree.put(3);\n    tree.put(7);\n    tree.put(13);\n    tree.put(17);\n    assertTrue(tree.remove(3));\n    assertFalse(tree.remove(20));\n    assertTrue(tree.remove(15));\n    assertTrue(tree.remove(10));\n    assertFalse(tree.remove(10));\n}",
        "@Test\npublic void removeTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(5);\n    tree.put(3);\n    tree.put(7);\n    tree.put(2);\n    tree.put(4);\n    tree.put(6);\n    tree.put(8);\n    assertTrue(tree.remove(5));\n}",
        "java\n    @Test\n    public void removeTest() {\n        BinaryTree tree = new BinaryTree();\n        tree.put(10);\n        tree.put(5);\n        tree.put(15);\n        tree.remove(5);\n        assertNull(tree.find(5));\n        tree.remove(10);\n        assertNull(tree.find(10));\n        tree.remove(15);\n        assertNull(tree.find(15));\n   }\n ",
        "@Test\npublic void removeTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(5);\n    tree.put(3);\n    tree.put(8);\n    tree.put(1);\n    tree.put(4);\n    tree.put(6);\n    tree.put(9);\n    tree.remove(8);\n    assertEquals(null, tree.find(8));\n}",
        "    @Test\n    public void removeTest() {\n        // Create a binary tree\n        BinaryTree bt = new BinaryTree();\n        \n        // Add nodes to the binary tree\n        bt.put(50);\n        bt.put(30);\n        bt.put(20);\n        bt.put(40);\n        bt.put(70);\n        bt.put(60);\n        bt.put(80);\n        \n        // Remove a node from the binary tree\n        boolean result = bt.remove(30);\n        \n        // Assert that the node was removed successfully\n        assertTrue(result);\n    }",
        "@Test\npublic void removeTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(5);\n    tree.put(3);\n    tree.put(8);\n    tree.put(2);\n    tree.put(4);\n    tree.put(7);\n    tree.put(10);\n    assertTrue(tree.remove(8));\n    assertFalse(tree.remove(9));\n    assertTrue(tree.remove(5));\n    assertEquals(4, tree.getRoot().data);\n}"
    ]
}