{
    "project_name": "Java",
    "file_name": "BinaryTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/BinaryTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": "/**\n     * Deletes a given value from the Binary Tree\n     *\n     * @param value Value to be deleted\n     * @return If the value was deleted\n     */",
    "source_code": "\npublic boolean remove(int value) {\n    // temp is the node to be deleted\n    Node temp = find(value);\n\n    // If the value doesn't exist\n    if (temp.data != value) {\n        return false;\n    }\n\n    // No children\n    if (temp.right == null && temp.left == null) {\n        if (temp == root) {\n            root = null;\n        } // This if/else assigns the new node to be either the left or right child of the\n          // parent\n        else if (temp.parent.data < temp.data) {\n            temp.parent.right = null;\n        } else {\n            temp.parent.left = null;\n        }\n        return true;\n    } // Two children\n    else if (temp.left != null && temp.right != null) {\n        Node successor = findSuccessor(temp);\n\n        // The left tree of temp is made the left tree of the successor\n        successor.left = temp.left;\n        successor.left.parent = successor;\n\n        // If the successor has a right child, the child's grandparent is it's new parent\n        if (successor.parent != temp) {\n            if (successor.right != null) {\n                successor.right.parent = successor.parent;\n                successor.parent.left = successor.right;\n            } else {\n                successor.parent.left = null;\n            }\n            successor.right = temp.right;\n            successor.right.parent = successor;\n        }\n\n        if (temp == root) {\n            successor.parent = null;\n            root = successor;\n        } // If you're not deleting the root\n        else {\n            successor.parent = temp.parent;\n\n            // This if/else assigns the new node to be either the left or right child of the\n            // parent\n            if (temp.parent.data < temp.data) {\n                temp.parent.right = successor;\n            } else {\n                temp.parent.left = successor;\n            }\n        }\n        return true;\n    } // One child\n    else {\n        // If it has a right child\n        if (temp.right != null) {\n            if (temp == root) {\n                root = temp.right;\n                return true;\n            }\n\n            temp.right.parent = temp.parent;\n\n            // Assigns temp to left or right child\n            if (temp.data < temp.parent.data) {\n                temp.parent.left = temp.right;\n            } else {\n                temp.parent.right = temp.right;\n            }\n        } // If it has a left child\n        else {\n            if (temp == root) {\n                root = temp.left;\n                return true;\n            }\n\n            temp.left.parent = temp.parent;\n\n            // Assigns temp to left or right side\n            if (temp.data < temp.parent.data) {\n                temp.parent.left = temp.left;\n            } else {\n                temp.parent.right = temp.left;\n            }\n        }\n        return true;\n    }\n}\n",
    "class_name": "BinaryTree",
    "method_name": "remove",
    "arguments": [
        "int value"
    ],
    "generate_test": [
        "Node n = new Node(10);\nNode n1 = new Node(5);\nNode n2 = new Node(15);\nNode n3 = new Node(3);\nNode n4 = new Node(7);\nNode n5 = new Node(12);\nNode n6 = new Node(20);\n\nBinaryTree tree = new BinaryTree(n);\n\nn.left = n1;\nn.right = n2;\nn1.parent = n;\nn2.parent = n;\n\nn1.left = n3;\nn1.right = n4;\nn3.parent = n1;\nn4.parent = n1;\n\nn2.left = n5;\nn2.right = n6;\nn5.parent = n2;\nn6.parent = n2;\n\nassertTrue(tree.remove(15));",
        "\nNode root = new Node(10);\nBinaryTree tree = new BinaryTree(root);\ntree.put(5);\ntree.put(3);\ntree.put(8);\ntree.put(15);\ntree.remove(5);\n",
        "public void removeTest() {\n        BinaryTree tree = new BinaryTree();\n        tree.put(5);\n        tree.put(3);\n        tree.put(7);\n        tree.put(2);\n        \n        tree.remove(3);\n        assertNull(tree.find(3));\n    }",
        "@Test\npublic void removeTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(10);\n    tree.put(5);\n    tree.put(15);\n    tree.put(3);\n    tree.put(7);\n    tree.put(12);\n    tree.put(20);\n    assertTrue(tree.remove(12));\n    assertFalse(tree.remove(8));\n    assertTrue(tree.remove(15));\n}",
        "@Test\npublic void removeTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(5);\n    tree.put(3);\n    tree.put(7);\n    tree.put(2);\n    \n    assertTrue(tree.remove(3));\n    assertFalse(tree.remove(4));\n}",
        "@Test\npublic void removeTest() {\n    BinaryTree binaryTree = new BinaryTree();\n    binaryTree.put(5);\n    binaryTree.put(3);\n    binaryTree.put(2);\n    binaryTree.put(4);\n    binaryTree.put(7);\n    binaryTree.remove(3);\n    assertNull(binaryTree.find(3));\n}",
        "public void removeTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(5);\n    tree.put(3);\n    tree.put(7);\n    assertTrue(tree.remove(3));\n    assertFalse(tree.remove(4));\n}",
        "@Test\npublic void removeTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(10);\n    tree.put(5);\n    tree.put(15);\n    \n    boolean result = tree.remove(5);\n    assertTrue(result);\n    \n    Node removedNode = tree.find(5);\n    assertNull(removedNode);\n}",
        "@Test\npublic void removeTest() {\n    BinaryTree bt = new BinaryTree();\n    bt.put(5);\n    bt.put(3);\n    bt.put(7);\n    bt.put(2);\n    bt.put(4);\n    bt.put(6);\n    bt.put(8);\n    \n    assertTrue(bt.remove(2));\n    assertFalse(bt.remove(9));\n}",
        "\n@Test\npublic void removeTest() {\n    BinaryTree binaryTree = new BinaryTree();\n    binaryTree.put(5);\n    binaryTree.put(3);\n    binaryTree.put(8);\n    assertTrue(binaryTree.remove(3));\n    assertFalse(binaryTree.remove(10));\n}\n"
    ]
}