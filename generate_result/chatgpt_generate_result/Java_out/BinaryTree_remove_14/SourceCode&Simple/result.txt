Source code: 


public boolean remove(int value) {
    // temp is the node to be deleted
    Node temp = find(value);

    // If the value doesn't exist
    if (temp.data != value) {
        return false;
    }

    // No children
    if (temp.right == null && temp.left == null) {
        if (temp == root) {
            root = null;
        } // This if/else assigns the new node to be either the left or right child of the
          // parent
        else if (temp.parent.data < temp.data) {
            temp.parent.right = null;
        } else {
            temp.parent.left = null;
        }
        return true;
    } // Two children
    else if (temp.left != null && temp.right != null) {
        Node successor = findSuccessor(temp);

        // The left tree of temp is made the left tree of the successor
        successor.left = temp.left;
        successor.left.parent = successor;

        // If the successor has a right child, the child's grandparent is it's new parent
        if (successor.parent != temp) {
            if (successor.right != null) {
                successor.right.parent = successor.parent;
                successor.parent.left = successor.right;
            } else {
                successor.parent.left = null;
            }
            successor.right = temp.right;
            successor.right.parent = successor;
        }

        if (temp == root) {
            successor.parent = null;
            root = successor;
        } // If you're not deleting the root
        else {
            successor.parent = temp.parent;

            // This if/else assigns the new node to be either the left or right child of the
            // parent
            if (temp.parent.data < temp.data) {
                temp.parent.right = successor;
            } else {
                temp.parent.left = successor;
            }
        }
        return true;
    } // One child
    else {
        // If it has a right child
        if (temp.right != null) {
            if (temp == root) {
                root = temp.right;
                return true;
            }

            temp.right.parent = temp.parent;

            // Assigns temp to left or right child
            if (temp.data < temp.parent.data) {
                temp.parent.left = temp.right;
            } else {
                temp.parent.right = temp.right;
            }
        } // If it has a left child
        else {
            if (temp == root) {
                root = temp.left;
                return true;
            }

            temp.left.parent = temp.parent;

            // Assigns temp to left or right side
            if (temp.data < temp.parent.data) {
                temp.parent.left = temp.left;
            } else {
                temp.parent.right = temp.left;
            }
        }
        return true;
    }
}



No.1 generated result --------------------------

Node n = new Node(10);
Node n1 = new Node(5);
Node n2 = new Node(15);
Node n3 = new Node(3);
Node n4 = new Node(7);
Node n5 = new Node(12);
Node n6 = new Node(20);

BinaryTree tree = new BinaryTree(n);

n.left = n1;
n.right = n2;
n1.parent = n;
n2.parent = n;

n1.left = n3;
n1.right = n4;
n3.parent = n1;
n4.parent = n1;

n2.left = n5;
n2.right = n6;
n5.parent = n2;
n6.parent = n2;

assertTrue(tree.remove(15));


No.2 generated result --------------------------


Node root = new Node(10);
BinaryTree tree = new BinaryTree(root);
tree.put(5);
tree.put(3);
tree.put(8);
tree.put(15);
tree.remove(5);



No.3 generated result --------------------------

public void removeTest() {
        BinaryTree tree = new BinaryTree();
        tree.put(5);
        tree.put(3);
        tree.put(7);
        tree.put(2);
        
        tree.remove(3);
        assertNull(tree.find(3));
    }


No.4 generated result --------------------------

@Test
public void removeTest() {
    BinaryTree tree = new BinaryTree();
    tree.put(10);
    tree.put(5);
    tree.put(15);
    tree.put(3);
    tree.put(7);
    tree.put(12);
    tree.put(20);
    assertTrue(tree.remove(12));
    assertFalse(tree.remove(8));
    assertTrue(tree.remove(15));
}


No.5 generated result --------------------------

@Test
public void removeTest() {
    BinaryTree tree = new BinaryTree();
    tree.put(5);
    tree.put(3);
    tree.put(7);
    tree.put(2);
    
    assertTrue(tree.remove(3));
    assertFalse(tree.remove(4));
}


No.6 generated result --------------------------

@Test
public void removeTest() {
    BinaryTree binaryTree = new BinaryTree();
    binaryTree.put(5);
    binaryTree.put(3);
    binaryTree.put(2);
    binaryTree.put(4);
    binaryTree.put(7);
    binaryTree.remove(3);
    assertNull(binaryTree.find(3));
}


No.7 generated result --------------------------

public void removeTest() {
    BinaryTree tree = new BinaryTree();
    tree.put(5);
    tree.put(3);
    tree.put(7);
    assertTrue(tree.remove(3));
    assertFalse(tree.remove(4));
}


No.8 generated result --------------------------

@Test
public void removeTest() {
    BinaryTree tree = new BinaryTree();
    tree.put(10);
    tree.put(5);
    tree.put(15);
    
    boolean result = tree.remove(5);
    assertTrue(result);
    
    Node removedNode = tree.find(5);
    assertNull(removedNode);
}


No.9 generated result --------------------------

@Test
public void removeTest() {
    BinaryTree bt = new BinaryTree();
    bt.put(5);
    bt.put(3);
    bt.put(7);
    bt.put(2);
    bt.put(4);
    bt.put(6);
    bt.put(8);
    
    assertTrue(bt.remove(2));
    assertFalse(bt.remove(9));
}


No.10 generated result --------------------------


@Test
public void removeTest() {
    BinaryTree binaryTree = new BinaryTree();
    binaryTree.put(5);
    binaryTree.put(3);
    binaryTree.put(8);
    assertTrue(binaryTree.remove(3));
    assertFalse(binaryTree.remove(10));
}



