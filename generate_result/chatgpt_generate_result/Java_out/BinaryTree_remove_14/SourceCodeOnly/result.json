{
    "project_name": "Java",
    "file_name": "BinaryTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/BinaryTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": "/**\n     * Deletes a given value from the Binary Tree\n     *\n     * @param value Value to be deleted\n     * @return If the value was deleted\n     */",
    "source_code": "\npublic boolean remove(int value) {\n    // temp is the node to be deleted\n    Node temp = find(value);\n\n    // If the value doesn't exist\n    if (temp.data != value) {\n        return false;\n    }\n\n    // No children\n    if (temp.right == null && temp.left == null) {\n        if (temp == root) {\n            root = null;\n        } // This if/else assigns the new node to be either the left or right child of the\n          // parent\n        else if (temp.parent.data < temp.data) {\n            temp.parent.right = null;\n        } else {\n            temp.parent.left = null;\n        }\n        return true;\n    } // Two children\n    else if (temp.left != null && temp.right != null) {\n        Node successor = findSuccessor(temp);\n\n        // The left tree of temp is made the left tree of the successor\n        successor.left = temp.left;\n        successor.left.parent = successor;\n\n        // If the successor has a right child, the child's grandparent is it's new parent\n        if (successor.parent != temp) {\n            if (successor.right != null) {\n                successor.right.parent = successor.parent;\n                successor.parent.left = successor.right;\n            } else {\n                successor.parent.left = null;\n            }\n            successor.right = temp.right;\n            successor.right.parent = successor;\n        }\n\n        if (temp == root) {\n            successor.parent = null;\n            root = successor;\n        } // If you're not deleting the root\n        else {\n            successor.parent = temp.parent;\n\n            // This if/else assigns the new node to be either the left or right child of the\n            // parent\n            if (temp.parent.data < temp.data) {\n                temp.parent.right = successor;\n            } else {\n                temp.parent.left = successor;\n            }\n        }\n        return true;\n    } // One child\n    else {\n        // If it has a right child\n        if (temp.right != null) {\n            if (temp == root) {\n                root = temp.right;\n                return true;\n            }\n\n            temp.right.parent = temp.parent;\n\n            // Assigns temp to left or right child\n            if (temp.data < temp.parent.data) {\n                temp.parent.left = temp.right;\n            } else {\n                temp.parent.right = temp.right;\n            }\n        } // If it has a left child\n        else {\n            if (temp == root) {\n                root = temp.left;\n                return true;\n            }\n\n            temp.left.parent = temp.parent;\n\n            // Assigns temp to left or right side\n            if (temp.data < temp.parent.data) {\n                temp.parent.left = temp.left;\n            } else {\n                temp.parent.right = temp.left;\n            }\n        }\n        return true;\n    }\n}\n",
    "class_name": "BinaryTree",
    "method_name": "remove",
    "arguments": [
        "int value"
    ],
    "generate_test": [
        "@Test\npublic void removeTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.insert(5);\n    tree.insert(3);\n    tree.insert(8);\n    assertTrue(tree.remove(8));\n    assertFalse(tree.remove(9));\n}",
        "public class BinarySearchTreeRemovalTest extends BinaryTreeTest {\n\n  @Test\n  public void removeTest() {\n    BinarySearchTree tree = new BinarySearchTree();\n    \n    tree.insert(5);\n    tree.insert(3);\n    tree.insert(8);\n    tree.insert(2);\n    tree.insert(4);\n    tree.insert(7);\n    tree.insert(9);\n    \n    assertTrue(tree.remove(3)); // testing removal of a node with 1 child\n    assertTrue(tree.remove(8)); // testing removal of a node with 2 children\n    assertTrue(tree.remove(5)); // testing removal of root node with 2 children\n  }\n}",
        "public void removeTest() {\n    BinaryTree bst = new BinaryTree();\n    bst.insert(5);\n    bst.insert(3);\n    bst.insert(8);\n    bst.insert(1);\n    bst.insert(4);\n    \n    assertTrue(bst.remove(3));\n    assertFalse(bst.remove(7));\n}",
        "public BinaryTree tree = new BinaryTree();\nassertTrue(tree.remove(5));",
        "BinaryTree bt = new BinaryTree();\nbt.insert(5);\nbt.insert(3);\nbt.insert(8);\nbt.remove(3);\nassertEquals(false, bt.search(3));",
        "@Test\npublic void removeTest() {\n    BinaryTree tree = new BinaryTree();\n    \n    tree.insert(5);\n    tree.insert(3);\n    tree.insert(8);\n    assertTrue(tree.remove(3));\n    assertFalse(tree.remove(7));\n}",
        "@Test\npublic void removeTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.insert(10);\n    tree.insert(6);\n    tree.insert(14);\n    tree.insert(5);\n    tree.insert(8);\n    tree.insert(11);\n    tree.insert(18);\n\n    assertTrue(tree.remove(11));\n    assertFalse(tree.remove(7));\n    // Add more assert statements if needed\n}",
        "    @Test\n    public void removeTest() {\n        BinaryTree bst = new BinaryTree();\n        bst.insert(7);\n        bst.insert(3);\n        bst.insert(1);\n        bst.insert(5);\n        bst.insert(4);\n        bst.insert(6);\n        bst.remove(1);\n        assertNotNull(bst.find(3));\n        assertNull(bst.find(1));\n    }",
        "@Test\npublic void removeTest() {\n    BinaryTree bt = new BinaryTree();\n    bt.insert(5);\n    bt.insert(3);\n    bt.insert(8);\n    assertTrue(bt.remove(3));\n    assertFalse(bt.remove(7));\n}",
        " @Test\npublic void removeTest() {\n    // Create the BinaryTree object\n    BinaryTree bt = new BinaryTree();\n\n    // Add nodes to the tree\n    bt.add(5);\n    bt.add(3);\n    bt.add(8);\n\n    // Remove a node from the tree\n    boolean result = bt.remove(3);\n\n    // Test case to check if the node has been removed successfully\n    assertTrue(result);\n}\n"
    ]
}