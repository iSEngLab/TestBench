{
    "project_name": "Java",
    "file_name": "BitSwap.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/bitmanipulation/BitSwap.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.bitmanipulation",
    "docstring": null,
    "source_code": "/*\n * @brief Swaps the bits at the position posA and posB from data\n */\npublic static int bitSwap(int data, final int posA, final int posB) {\n    if (SingleBitOperations.getBit(data, posA) != SingleBitOperations.getBit(data, posB)) {\n        data ^= (1 << posA) ^ (1 << posB);\n    }\n    return data;\n}\n",
    "class_name": "BitSwap",
    "method_name": "bitSwap",
    "arguments": [
        "int data",
        "int posA",
        "int posB"
    ],
    "generate_test": [
        "@Test\npublic void bitSwapTest() {\n    int result = BitSwap.bitSwap(5, 1, 2);\n    assertEquals(6, result);\n}",
        "@Test\npublic void bitSwapTest() {\n    int data = 8;\n    int posA = 1;\n    int posB = 3;\n    int expected = 2;\n    int result = BitSwap.bitSwap(data, posA, posB);\n    assertEquals(expected, result);\n}",
        "@Test\npublic void bitSwapTest() {\n    int result = BitSwap.bitSwap(12, 1, 3);\n    assertEquals(12, result);\n}",
        "\n         int data = 5;\n        int posA = 1;\n        int posB = 3;\n        int expectedResult = 13;\n        \n        int result = BitSwap.bitSwap(data, posA, posB);\n        assertEquals(expectedResult, result);\n        assertTrue(result == expectedResult);\n        assertFalse(result != expectedResult);",
        "@Test\n    public void bitSwapTest() {\n        int result = BitSwap.bitSwap(5, 1, 2);\n        assertEquals(6, result);\n    }",
        "public void bitSwapTest() {\n    int data = 12; // Example data\n    int posA = 2; // Example position A\n    int posB = 3; // Example position B\n    int expectedResult = 12; // Expected result after bit swap\n    int actualResult = BitSwap.bitSwap(data, posA, posB);\n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\npublic void bitSwapTest() {\n    assertEquals(5, BitSwap.bitSwap(10, 1, 4));\n}",
        "\npublic void bitSwapTest() {\n    int input = 5;\n    int posA = 1;\n    int posB = 2;\n    \n    int expected = 3;\n    int result = BitSwap.bitSwap(input, posA, posB);\n    \n    assertEquals(expected, result);\n}",
        "@Test\npublic void bitSwapTest() {\n    int input = 5;\n    int posA = 1;\n    int posB = 2;\n    int expectedResult = 6;\n  \n    int result = BitSwap.bitSwap(input, posA, posB);\n  \n    assertEquals(expectedResult, result);\n}",
        "@Test\npublic void bitSwapTest() {\n    int data = 7;\n    int posA = 1;\n    int posB = 2;\n    int expectedResult = 11;\n    int result = BitSwap.bitSwap(data, posA, posB);\n    assertEquals(expectedResult, result);\n}"
    ]
}