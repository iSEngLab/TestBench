{
    "project_name": "Java",
    "file_name": "BitSwap.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/bitmanipulation/BitSwap.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.bitmanipulation",
    "docstring": null,
    "source_code": "/*\n * @brief Swaps the bits at the position posA and posB from data\n */\npublic static int bitSwap(int data, final int posA, final int posB) {\n    if (SingleBitOperations.getBit(data, posA) != SingleBitOperations.getBit(data, posB)) {\n        data ^= (1 << posA) ^ (1 << posB);\n    }\n    return data;\n}\n",
    "class_name": "BitSwap",
    "method_name": "bitSwap",
    "arguments": [
        "int data",
        "int posA",
        "int posB"
    ],
    "generate_test": [
        "@Test\npublic void bitSwapTest() {\n    int data = 5;\n    int posA = 1;\n    int posB = 2;\n    int expected = 6;\n    int result = BitSwap.bitSwap(data, posA, posB);\n    assertEquals(expected, result);\n}",
        "@Test\npublic void bitSwapTest() {\n    int data = 10; // example input\n    assertEquals(5, SingleBitOperations.bitSwap(data, 1, 3)); // expected output\n}",
        "@Test\npublic void bitSwapTest() {\n    // Given\n    int data = 5;  // 00000101 in binary\n    int posA = 1;\n    int posB = 3;\n\n    // When\n    int result = BitSwap.bitSwap(data, posA, posB);\n\n    // Then\n    assertEquals(10, result);  // 00001010 in binary\n}",
        "@Test\npublic void bitSwapTest() {\n    int testValue = 34;\n    int expectedResult = 40;\n    int actualResult = BitSwap.bitSwap(testValue, 1, 2);\n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\npublic void bitSwapTest() {\n    int data = 10;\n    int posA = 1;\n    int posB = 2;\n    \n    int result = BitSwap.bitSwap(data, posA, posB);\n    assertEquals(14, result);\n}",
        "@Test\npublic void bitSwapTest() {\n    int data = 5;\n    int posA = 1;\n    int posB = 2;\n    int expectedResult = 7;\n\n    int result = BitSwap.bitSwap(data, posA, posB);\n\n    assertEquals(expectedResult, result);\n}",
        "@Test\npublic void bitSwapTest() {\n    int data = 45; \n    int posA = 2;\n    int posB = 5;\n    int expected = 61;\n    \n    int result = BitSwap.bitSwap(data, posA, posB);\n    \n    assertEquals(expected, result);\n}",
        "@Test\npublic void bitSwapTest() {\n    int data = 6; // 0110 in binary\n    int posA = 1;\n    int posB = 2;\n    assertEquals(5, BitSwap.bitSwap(data, posA, posB)); // 0101 in binary\n}",
        "@Test\npublic void bitSwapTest() {\n    int data = 5;\n    int posA = 1;\n    int posB = 2;\n    int result = BitSwap.bitSwap(data, posA, posB);\n    assertEquals(6, result);\n}",
        "@Test\npublic void bitSwapTest() {\n    int result = BitSwap.bitSwap(5, 1, 2);\n    assertEquals(6, result);\n}"
    ]
}