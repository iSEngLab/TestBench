{
    "project_name": "Java",
    "file_name": "Caesar.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/Caesar.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Decrypt message by shifting back every Latin char to previous the ASCII\n     * Example : B - 1 -> A\n     *\n     * @return message\n     */",
    "source_code": "\npublic String decode(String encryptedMessage, int shift) {\n    StringBuilder decoded = new StringBuilder();\n\n    shift %= 26;\n\n    final int length = encryptedMessage.length();\n    for (int i = 0; i < length; i++) {\n        char current = encryptedMessage.charAt(i);\n        if (isCapitalLatinLetter(current)) {\n            current -= shift;\n            decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters\n        } else if (isSmallLatinLetter(current)) {\n            current -= shift;\n            decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters\n        } else {\n            decoded.append(current);\n        }\n    }\n    return decoded.toString();\n}\n",
    "class_name": "Caesar",
    "method_name": "decode",
    "arguments": [
        "String encryptedMessage",
        "int shift"
    ],
    "generate_test": [
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    String encryptedMessage = \"defendtheeastwallofthecastle\";\n    int shift = 1;\n    String expected = \"cdecmesgdzrdgzvrncknefrsbdqrd\";\n    String actual = caesar.decode(encryptedMessage, shift);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    String encryptedMessage = \"Gdkkn.\";\n    int shift = 2;\n    String expectedResult = \"Hello.\";\n    String actualResult = caesar.decode(encryptedMessage, shift);\n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    String encryptedMessage = \"KHOORZRUOG\";\n    int shift = 3;\n    String expectedResult = \"HELLOWORLD\";\n    String actualResult = caesar.decode(encryptedMessage, shift);\n    assertEquals(expectedResult, actualResult);\n}",
        "String encryptedMessage = \"Gsrmpmer! ryxvmx!\", shift = 3;\nCaesar testCaesar = new Caesar();\nString actualDecodedMessage = testCaesar.decode(encryptedMessage, shift);\nString expectedDecodedMessage = \"Dolphin! orange!\";\nassertEquals(expectedDecodedMessage, actualDecodedMessage);",
        "@Test\n    public void decodeTest() {\n        Caesar cipher = new Caesar();\n        String encryptedMessage = \"Khoorzruogxvnl\";\n        int shift = 3;\n        String expectedResult = \"Helloworldnice\";\n        assertEquals(expectedResult, cipher.decode(encryptedMessage, shift));\n    }",
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    String expectedDecodedMessage = \"HELLO\";\n    String encryptedMessage = \"MJQQT\";\n    int shift = 5;\n    String actualDecodedMessage = caesar.decode(encryptedMessage, shift);\n    assertEquals(expectedDecodedMessage, actualDecodedMessage);\n}",
        "\n@Test\npublic void decodeTest() {\n    Caesar cipher = new Caesar();\n    String expected = \"HELLO\";\n    String encryptedMessage = \"IFMMP\";\n    int shift = 1;\n    String actual = cipher.decode(encryptedMessage, shift);\n    assertEquals(expected, actual);\n}\n",
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    String encryptedMessage = \"Wklv phvvdjh lv zkdw wklv PDWH Dvvh VDthub\";\n    int shift = 3;\n    String expected = \"This message is what this MEET Class\";\n    \n    assertEquals(expected, caesar.decode(encryptedMessage, shift));\n}",
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    String decryptedMessage = caesar.decode(\"Rovvy, Gybvn!\", 10);\n    assertEquals(\"Hello, World!\", decryptedMessage);\n}",
        "@Test\npublic void decodeTest() {\n    Caesar c = new Caesar();\n    String encryptedMessage = \"Lptl punkPun zL pz tlKivbZaPun\";\n    int shift = 12;\n\n    String expected = \"This is the thirteenth Message\";\n    String actual = c.decode(encryptedMessage, shift);\n\n    assertEquals(expected, actual);\n}"
    ]
}