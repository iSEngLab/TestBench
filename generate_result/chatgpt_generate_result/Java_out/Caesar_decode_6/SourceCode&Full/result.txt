Source code: 


public String decode(String encryptedMessage, int shift) {
    StringBuilder decoded = new StringBuilder();

    shift %= 26;

    final int length = encryptedMessage.length();
    for (int i = 0; i < length; i++) {
        char current = encryptedMessage.charAt(i);
        if (isCapitalLatinLetter(current)) {
            current -= shift;
            decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters
        } else if (isSmallLatinLetter(current)) {
            current -= shift;
            decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters
        } else {
            decoded.append(current);
        }
    }
    return decoded.toString();
}



No.1 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String encryptedMessage = "defendtheeastwallofthecastle";
    int shift = 1;
    String expected = "cdecmesgdzrdgzvrncknefrsbdqrd";
    String actual = caesar.decode(encryptedMessage, shift);
    assertEquals(expected, actual);
}


No.2 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String encryptedMessage = "Gdkkn.";
    int shift = 2;
    String expectedResult = "Hello.";
    String actualResult = caesar.decode(encryptedMessage, shift);
    assertEquals(expectedResult, actualResult);
}


No.3 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String encryptedMessage = "KHOORZRUOG";
    int shift = 3;
    String expectedResult = "HELLOWORLD";
    String actualResult = caesar.decode(encryptedMessage, shift);
    assertEquals(expectedResult, actualResult);
}


No.4 generated result --------------------------

String encryptedMessage = "Gsrmpmer! ryxvmx!", shift = 3;
Caesar testCaesar = new Caesar();
String actualDecodedMessage = testCaesar.decode(encryptedMessage, shift);
String expectedDecodedMessage = "Dolphin! orange!";
assertEquals(expectedDecodedMessage, actualDecodedMessage);


No.5 generated result --------------------------

@Test
    public void decodeTest() {
        Caesar cipher = new Caesar();
        String encryptedMessage = "Khoorzruogxvnl";
        int shift = 3;
        String expectedResult = "Helloworldnice";
        assertEquals(expectedResult, cipher.decode(encryptedMessage, shift));
    }


No.6 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String expectedDecodedMessage = "HELLO";
    String encryptedMessage = "MJQQT";
    int shift = 5;
    String actualDecodedMessage = caesar.decode(encryptedMessage, shift);
    assertEquals(expectedDecodedMessage, actualDecodedMessage);
}


No.7 generated result --------------------------


@Test
public void decodeTest() {
    Caesar cipher = new Caesar();
    String expected = "HELLO";
    String encryptedMessage = "IFMMP";
    int shift = 1;
    String actual = cipher.decode(encryptedMessage, shift);
    assertEquals(expected, actual);
}



No.8 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String encryptedMessage = "Wklv phvvdjh lv zkdw wklv PDWH Dvvh VDthub";
    int shift = 3;
    String expected = "This message is what this MEET Class";
    
    assertEquals(expected, caesar.decode(encryptedMessage, shift));
}


No.9 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String decryptedMessage = caesar.decode("Rovvy, Gybvn!", 10);
    assertEquals("Hello, World!", decryptedMessage);
}


No.10 generated result --------------------------

@Test
public void decodeTest() {
    Caesar c = new Caesar();
    String encryptedMessage = "Lptl punkPun zL pz tlKivbZaPun";
    int shift = 12;

    String expected = "This is the thirteenth Message";
    String actual = c.decode(encryptedMessage, shift);

    assertEquals(expected, actual);
}


