{
    "project_name": "Java",
    "file_name": "Caesar.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/Caesar.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Decrypt message by shifting back every Latin char to previous the ASCII\n     * Example : B - 1 -> A\n     *\n     * @return message\n     */",
    "source_code": "\npublic String decode(String encryptedMessage, int shift) {\n    StringBuilder decoded = new StringBuilder();\n\n    shift %= 26;\n\n    final int length = encryptedMessage.length();\n    for (int i = 0; i < length; i++) {\n        char current = encryptedMessage.charAt(i);\n        if (isCapitalLatinLetter(current)) {\n            current -= shift;\n            decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters\n        } else if (isSmallLatinLetter(current)) {\n            current -= shift;\n            decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters\n        } else {\n            decoded.append(current);\n        }\n    }\n    return decoded.toString();\n}\n",
    "class_name": "Caesar",
    "method_name": "decode",
    "arguments": [
        "String encryptedMessage",
        "int shift"
    ],
    "generate_test": [
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    String expected = \"hello\";\n    String encryptedMessage = \"uryyb\";\n    int shift = 13;\n    String actual = caesar.decode(encryptedMessage, shift);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    String encryptedMessage = \"Wklv lv d whvw phvvdjh\";\n    int shift = 3;\n    String expected = \"This is a test message\";\n    assertEquals(expected, caesar.decode(encryptedMessage, shift));\n}",
        "String decryptedMessage = \"LwkpIyfnsljs\";\nint shift = 5;\nassertEquals(\"HelloWorld\", new Caesar().decode(decryptedMessage, shift));",
        "@Test\n    public void decodeTest() {\n        Caesar caesar = new Caesar();\n        String encryptedMessage = \"JGNNQY KQTFX\";\n        int shift = 5;\n        String expected = \"DEVICE DRIVER\";\n        String actual = caesar.decode(encryptedMessage, shift);\n        assertEquals(expected, actual);\n    }",
        "\nString decrypted = caesar.decode(\"Wklv lv D whvw.\", 3);\nassertEquals(\"This is A test.\", decrypted);\n",
        "@Test\npublic void decodeTest() {\n    Caesar cipher = new Caesar();\n    String encryptedMessage = \"Bcde\";\n    int shift = 1;\n    assertEquals(\"Abcd\", cipher.decode(encryptedMessage, shift));\n}",
        "@Test\npublic void decodeTest() {\n    Caesar cipher = new Caesar();\n    String encryptedMessage = \"KHOOR\";\n    int shift = 3;\n    String expected = \"HELLO\";\n    String actual = cipher.decode(encryptedMessage, shift);\n    assertEquals(expected, actual);\n}",
        "@Test\n    public void decodeTest() {\n        Caesar caesar = new Caesar();\n        String expected = \"HELLO\";\n        String encryptedMessage = \"MJQQT\";\n        int shift = 5;\n        String actual = caesar.decode(encryptedMessage, shift);\n        assertEquals(expected, actual);\n    }",
        "\nString encryptedMessage = \"Kvohv\";\nint shift = 3;\nCaesar caesar = new Caesar();\nString decodedMessage = caesar.decode(encryptedMessage, shift);\nassertEquals(\"Hello\", decodedMessage);\n",
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    String encryptedMessage = \"Lub wy ovqy, lzw fvb pqzeb nwzpqvo!\";\n    int shift = 5;\n    String expectedResult = \"Eat up magic, the most boring breakfast!\";\n    String actualResult = caesar.decode(encryptedMessage, shift);\n    assertEquals(expectedResult, actualResult);\n}"
    ]
}