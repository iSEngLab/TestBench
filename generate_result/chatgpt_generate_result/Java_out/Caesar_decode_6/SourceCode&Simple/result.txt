Source code: 


public String decode(String encryptedMessage, int shift) {
    StringBuilder decoded = new StringBuilder();

    shift %= 26;

    final int length = encryptedMessage.length();
    for (int i = 0; i < length; i++) {
        char current = encryptedMessage.charAt(i);
        if (isCapitalLatinLetter(current)) {
            current -= shift;
            decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters
        } else if (isSmallLatinLetter(current)) {
            current -= shift;
            decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters
        } else {
            decoded.append(current);
        }
    }
    return decoded.toString();
}



No.1 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String expected = "hello";
    String encryptedMessage = "uryyb";
    int shift = 13;
    String actual = caesar.decode(encryptedMessage, shift);
    assertEquals(expected, actual);
}


No.2 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String encryptedMessage = "Wklv lv d whvw phvvdjh";
    int shift = 3;
    String expected = "This is a test message";
    assertEquals(expected, caesar.decode(encryptedMessage, shift));
}


No.3 generated result --------------------------

String decryptedMessage = "LwkpIyfnsljs";
int shift = 5;
assertEquals("HelloWorld", new Caesar().decode(decryptedMessage, shift));


No.4 generated result --------------------------

@Test
    public void decodeTest() {
        Caesar caesar = new Caesar();
        String encryptedMessage = "JGNNQY KQTFX";
        int shift = 5;
        String expected = "DEVICE DRIVER";
        String actual = caesar.decode(encryptedMessage, shift);
        assertEquals(expected, actual);
    }


No.5 generated result --------------------------


String decrypted = caesar.decode("Wklv lv D whvw.", 3);
assertEquals("This is A test.", decrypted);



No.6 generated result --------------------------

@Test
public void decodeTest() {
    Caesar cipher = new Caesar();
    String encryptedMessage = "Bcde";
    int shift = 1;
    assertEquals("Abcd", cipher.decode(encryptedMessage, shift));
}


No.7 generated result --------------------------

@Test
public void decodeTest() {
    Caesar cipher = new Caesar();
    String encryptedMessage = "KHOOR";
    int shift = 3;
    String expected = "HELLO";
    String actual = cipher.decode(encryptedMessage, shift);
    assertEquals(expected, actual);
}


No.8 generated result --------------------------

@Test
    public void decodeTest() {
        Caesar caesar = new Caesar();
        String expected = "HELLO";
        String encryptedMessage = "MJQQT";
        int shift = 5;
        String actual = caesar.decode(encryptedMessage, shift);
        assertEquals(expected, actual);
    }


No.9 generated result --------------------------


String encryptedMessage = "Kvohv";
int shift = 3;
Caesar caesar = new Caesar();
String decodedMessage = caesar.decode(encryptedMessage, shift);
assertEquals("Hello", decodedMessage);



No.10 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String encryptedMessage = "Lub wy ovqy, lzw fvb pqzeb nwzpqvo!";
    int shift = 5;
    String expectedResult = "Eat up magic, the most boring breakfast!";
    String actualResult = caesar.decode(encryptedMessage, shift);
    assertEquals(expectedResult, actualResult);
}


