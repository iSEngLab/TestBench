{
    "project_name": "Java",
    "file_name": "Caesar.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/Caesar.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Decrypt message by shifting back every Latin char to previous the ASCII\n     * Example : B - 1 -> A\n     *\n     * @return message\n     */",
    "source_code": "\npublic String decode(String encryptedMessage, int shift) {\n    StringBuilder decoded = new StringBuilder();\n\n    shift %= 26;\n\n    final int length = encryptedMessage.length();\n    for (int i = 0; i < length; i++) {\n        char current = encryptedMessage.charAt(i);\n        if (isCapitalLatinLetter(current)) {\n            current -= shift;\n            decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters\n        } else if (isSmallLatinLetter(current)) {\n            current -= shift;\n            decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters\n        } else {\n            decoded.append(current);\n        }\n    }\n    return decoded.toString();\n}\n",
    "class_name": "Caesar",
    "method_name": "decode",
    "arguments": [
        "String encryptedMessage",
        "int shift"
    ],
    "generate_test": [
        "@Test\npublic void decodeTest() {\n    Caesar cipher = new Caesar();\n    String encryptedMessage = \"Lipps, Asvph!\";\n    int shift = 4;\n    String expected = \"Hello, World!\";\n    String actual = Caesar.decode(encryptedMessage, shift);\n    assertEquals(expected, actual);\n}",
        "public void decodeTest() {\n    Caesar cipher = new Caesar();\n    assertEquals(\"The quick brown fox jumps over the lazy dog\",\n    cipher.decode(\"Wkh txlfn eurzq ira mxpsv ryhu wkh odcb grj\",\n    3));\n}",
        "@Test\npublic void decodeTest() {\n    assertEquals(\"HELLO\", caesar.decode(\"MJQQT\", 5));\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"Rovvy, Gybvn!\";\n    int shift = 10;\n    String expected = \"Hello, World!\";\n    assertEquals(expected, new Caesar().decode(encryptedMessage, shift));\n}",
        "@Test\n    public void decodeTest() {\n        Caesar cipher = new Caesar();\n        String message = \"Wklv lv d whvw phvvdjh.\";\n        int shift = 3;\n        assertEquals(\"This is a test message.\", cipher.decode(message, shift));\n    }",
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    assertEquals(\"DEF\", caesar.decode(\"GHI\", 3)); // Example test case\n    // Add more test cases to cover different scenarios\n}",
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    String encryptedMessage = \"Wklv lv xqlyhuvh\";\n    int shift = 3;\n    String expectedResult = \"This is variable\";\n    String actualResult = caesar.decode(encryptedMessage, shift);\n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\npublic void decodeTest() {\n    Caesar cipher = new Caesar();\n    String encryptedMessage = \"Wklv lv d phvvdjh.\";\n    int shift = 3;\n    \n    String expected = \"This is a message.\";\n    String actual = cipher.decode(encryptedMessage, shift);\n    \n    assertEquals(expected, actual);\n}",
        "public class TestCaesar {\n\n    @Test\n    public void testDecode() {\n        // Given\n        Caesar caesar = new Caesar();\n        String encryptedMessage = \"KHOOR ZRUOG\";\n        int shift = 3;\n        \n        // When\n        String actual = caesar.decode(encryptedMessage, shift);\n        \n        // Then\n        assertEquals(\"HELLO WORLD\", actual);\n    }\n}",
        "@Test\npublic void decodeTest() {\n    Caesar cipher = new Caesar();\n    assertEquals(\"DEFEND THE EAST WALL OF THE CASTLE\", cipher.decode(\"HIJKLMN ABC FGHQ ZOTL XKBFOTL\", 3));\n}"
    ]
}