Source code: 


public String decode(String encryptedMessage, int shift) {
    StringBuilder decoded = new StringBuilder();

    shift %= 26;

    final int length = encryptedMessage.length();
    for (int i = 0; i < length; i++) {
        char current = encryptedMessage.charAt(i);
        if (isCapitalLatinLetter(current)) {
            current -= shift;
            decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters
        } else if (isSmallLatinLetter(current)) {
            current -= shift;
            decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters
        } else {
            decoded.append(current);
        }
    }
    return decoded.toString();
}



No.1 generated result --------------------------

@Test
public void decodeTest() {
    Caesar cipher = new Caesar();
    String encryptedMessage = "Lipps, Asvph!";
    int shift = 4;
    String expected = "Hello, World!";
    String actual = Caesar.decode(encryptedMessage, shift);
    assertEquals(expected, actual);
}


No.2 generated result --------------------------

public void decodeTest() {
    Caesar cipher = new Caesar();
    assertEquals("The quick brown fox jumps over the lazy dog",
    cipher.decode("Wkh txlfn eurzq ira mxpsv ryhu wkh odcb grj",
    3));
}


No.3 generated result --------------------------

@Test
public void decodeTest() {
    assertEquals("HELLO", caesar.decode("MJQQT", 5));
}


No.4 generated result --------------------------

@Test
public void decodeTest() {
    String encryptedMessage = "Rovvy, Gybvn!";
    int shift = 10;
    String expected = "Hello, World!";
    assertEquals(expected, new Caesar().decode(encryptedMessage, shift));
}


No.5 generated result --------------------------

@Test
    public void decodeTest() {
        Caesar cipher = new Caesar();
        String message = "Wklv lv d whvw phvvdjh.";
        int shift = 3;
        assertEquals("This is a test message.", cipher.decode(message, shift));
    }


No.6 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    assertEquals("DEF", caesar.decode("GHI", 3)); // Example test case
    // Add more test cases to cover different scenarios
}


No.7 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String encryptedMessage = "Wklv lv xqlyhuvh";
    int shift = 3;
    String expectedResult = "This is variable";
    String actualResult = caesar.decode(encryptedMessage, shift);
    assertEquals(expectedResult, actualResult);
}


No.8 generated result --------------------------

@Test
public void decodeTest() {
    Caesar cipher = new Caesar();
    String encryptedMessage = "Wklv lv d phvvdjh.";
    int shift = 3;
    
    String expected = "This is a message.";
    String actual = cipher.decode(encryptedMessage, shift);
    
    assertEquals(expected, actual);
}


No.9 generated result --------------------------

public class TestCaesar {

    @Test
    public void testDecode() {
        // Given
        Caesar caesar = new Caesar();
        String encryptedMessage = "KHOOR ZRUOG";
        int shift = 3;
        
        // When
        String actual = caesar.decode(encryptedMessage, shift);
        
        // Then
        assertEquals("HELLO WORLD", actual);
    }
}


No.10 generated result --------------------------

@Test
public void decodeTest() {
    Caesar cipher = new Caesar();
    assertEquals("DEFEND THE EAST WALL OF THE CASTLE", cipher.decode("HIJKLMN ABC FGHQ ZOTL XKBFOTL", 3));
}


