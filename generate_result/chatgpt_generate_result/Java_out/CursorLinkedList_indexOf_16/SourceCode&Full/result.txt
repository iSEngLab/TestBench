Source code: 


public int indexOf(T element) {
    Objects.requireNonNull(element);
    Node<T> iterator = cursorSpace[head];
    for (int i = 0; i < count; i++) {
        if (iterator.element.equals(element)) {
            return i;
        }
        iterator = cursorSpace[iterator.next];
    }

    return -1;
}



No.1 generated result --------------------------

CursorLinkedList<Integer> list = new CursorLinkedList<>();
list.append(10);
list.append(20);
list.append(30);
int index = list.indexOf(20);
assertEquals(1, index);


No.2 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.append(5);
    list.append(10);
    list.append(15);
    int actualIndex = list.indexOf(10);
    assertEquals(1, actualIndex);
}


No.3 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<String> cursorLinkedList = new CursorLinkedList<>();
    cursorLinkedList.append("Apple");
    cursorLinkedList.append("Banana");
    cursorLinkedList.append("Cherry");
    
    assertEquals(0, cursorLinkedList.indexOf("Apple"));
    assertEquals(1, cursorLinkedList.indexOf("Banana"));
    assertEquals(2, cursorLinkedList.indexOf("Cherry"));
}


No.4 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.append(1);
    list.append(2);
    list.append(3);
    int index = list.indexOf(2);
    assertEquals(1, index);
}


No.5 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<String> cursorLinkedList = new CursorLinkedList<>();
    cursorLinkedList.append("apple");
    cursorLinkedList.append("banana");
    cursorLinkedList.append("cherry");
    assertEquals(0, cursorLinkedList.indexOf("apple"));
    assertEquals(1, cursorLinkedList.indexOf("banana"));
    assertEquals(2, cursorLinkedList.indexOf("cherry"));
    assertEquals(-1, cursorLinkedList.indexOf("orange"));
}


No.6 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.append(10);
    list.append(20);
    list.append(30);
    
    assertEquals(2, list.indexOf(30));
}


No.7 generated result --------------------------

CursorLinkedList<String> list = new CursorLinkedList<>();
list.append("first");
list.append("second");
list.append("third");

int index = list.indexOf("second");
assertEquals(1, index);


No.8 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.append(10);
    list.append(20);
    list.append(30);
    assertEquals(0, list.indexOf(10));
    assertEquals(1, list.indexOf(20));
    assertEquals(2, list.indexOf(30));
}


No.9 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<String> list = new CursorLinkedList<>();
    list.append("a");
    list.append("b");
    list.append("c");
    assertEquals(0, list.indexOf("a"));
    assertEquals(1, list.indexOf("b"));
    assertEquals(2, list.indexOf("c"));
    assertEquals(-1, list.indexOf("d"));
}


No.10 generated result --------------------------

    CursorLinkedList<String> list = new CursorLinkedList<>();
    list.append("A");
    list.append("B");
    list.append("C");
    list.append("D");
    assertEquals(2, list.indexOf("C"), "Incorrect index for element C");
    assertEquals(-1, list.indexOf("E"), "Element E should not be found in list");


