Source code: 


public int indexOf(T element) {
    Objects.requireNonNull(element);
    Node<T> iterator = cursorSpace[head];
    for (int i = 0; i < count; i++) {
        if (iterator.element.equals(element)) {
            return i;
        }
        iterator = cursorSpace[iterator.next];
    }

    return -1;
}



No.1 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.append(5);
    list.append(10);
    list.append(15);
    assertEquals(1, list.indexOf(10));
}


No.2 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.append(1);
    list.append(2);
    list.append(3);
    assertEquals(1, list.indexOf(2));
}


No.3 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList cursorLinkedList = new CursorLinkedList();
    cursorLinkedList.append(10);
    cursorLinkedList.append(20);
    cursorLinkedList.append(30);
    assertEquals(1, cursorLinkedList.indexOf(20));
}


No.4 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<String> list = new CursorLinkedList<>();
    list.append("a");
    list.append("b");
    list.append("c");
    int index = list.indexOf("b");
    assertEquals(1, index);
}


No.5 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.append(10);
    list.append(20);
    list.append(30);
    
    assertEquals(0, list.indexOf(10));
    assertEquals(1, list.indexOf(20));
    assertEquals(2, list.indexOf(30));
    assertEquals(-1, list.indexOf(40));
}


No.6 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList cursorLinkedList = new CursorLinkedList();
    cursorLinkedList.append(5);
    cursorLinkedList.append(10);
    cursorLinkedList.append(15);
    cursorLinkedList.append(20);
    assertEquals(2, cursorLinkedList.indexOf(15));
}


No.7 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.append(10);
    list.append(20);
    list.append(30);
    assertEquals(1, list.indexOf(20));
}


No.8 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.append(1);
    list.append(2);
    list.append(3);
    list.append(4);
    assertEquals(2, list.indexOf(3));
    assertEquals(-1, list.indexOf(5));
}


No.9 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<String> list = new CursorLinkedList<>();
    list.append("A");
    list.append("B");
    list.append("C");
    assertEquals(1, list.indexOf("B"));
}


No.10 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.append(5);
    list.append(10);
    list.append(15);
    assertEquals(1, list.indexOf(10));
    assertEquals(-1, list.indexOf(20));
}


