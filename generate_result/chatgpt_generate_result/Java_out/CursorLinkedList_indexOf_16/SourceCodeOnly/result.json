{
    "project_name": "Java",
    "file_name": "CursorLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/CursorLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * @return the logical index of the element within the list , not the actual\n     * index of the [cursorSpace] array\n     */",
    "source_code": "\npublic int indexOf(T element) {\n    Objects.requireNonNull(element);\n    Node<T> iterator = cursorSpace[head];\n    for (int i = 0; i < count; i++) {\n        if (iterator.element.equals(element)) {\n            return i;\n        }\n        iterator = cursorSpace[iterator.next];\n    }\n\n    return -1;\n}\n",
    "class_name": "CursorLinkedList",
    "method_name": "indexOf",
    "arguments": [
        "T element"
    ],
    "generate_test": [
        "\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.add(5);\n    list.add(10);\n    list.add(15);\n    assertEquals(0, list.indexOf(5));\n    assertEquals(1, list.indexOf(10));\n    assertEquals(2, list.indexOf(15));",
        "@Test\npublic void indexOfTest() {\n    int expected = 2;\n    int actual = cursorLinkedList.indexOf(3);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.add(10);\n    list.add(20);\n    list.add(30);\n    int result = list.indexOf(20);\n    assertEquals(1, result);\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.add(5);\n    list.add(10);\n    list.add(15);\n    assertEquals(1, list.indexOf(10));\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.add(10);\n    list.add(20);\n    list.add(30);\n    int index = list.indexOf(20);\n    assertEquals(1, index);\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.add(5);\n    list.add(10);\n    list.add(15);\n    assertEquals(1, list.indexOf(10));\n    assertEquals(-1, list.indexOf(20));\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<String> list = new CursorLinkedList<>();\n    list.add(\"A\");\n    list.add(\"B\");\n    list.add(\"C\");\n    assertEquals(1, list.indexOf(\"B\"));\n}",
        "\nCursorLinkedList<Integer> list = new CursorLinkedList<>();\nlist.add(5);\nlist.add(10);\nlist.add(15);\nint result = list.indexOf(10);\n\nassertEquals(1, result);\n",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.add(10);\n    list.add(20);\n    list.add(30);\n    assertEquals(1, list.indexOf(20));\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.add(10);\n    list.add(20);\n    \n    assertEquals(0, list.indexOf(10));\n    assertEquals(1, list.indexOf(20));\n    assertEquals(-1, list.indexOf(30));\n}"
    ]
}