Source code: 


public int indexOf(T element) {
    Objects.requireNonNull(element);
    Node<T> iterator = cursorSpace[head];
    for (int i = 0; i < count; i++) {
        if (iterator.element.equals(element)) {
            return i;
        }
        iterator = cursorSpace[iterator.next];
    }

    return -1;
}



No.1 generated result --------------------------


    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.add(5);
    list.add(10);
    list.add(15);
    assertEquals(0, list.indexOf(5));
    assertEquals(1, list.indexOf(10));
    assertEquals(2, list.indexOf(15));


No.2 generated result --------------------------

@Test
public void indexOfTest() {
    int expected = 2;
    int actual = cursorLinkedList.indexOf(3);
    assertEquals(expected, actual);
}


No.3 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.add(10);
    list.add(20);
    list.add(30);
    int result = list.indexOf(20);
    assertEquals(1, result);
}


No.4 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.add(5);
    list.add(10);
    list.add(15);
    assertEquals(1, list.indexOf(10));
}


No.5 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.add(10);
    list.add(20);
    list.add(30);
    int index = list.indexOf(20);
    assertEquals(1, index);
}


No.6 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.add(5);
    list.add(10);
    list.add(15);
    assertEquals(1, list.indexOf(10));
    assertEquals(-1, list.indexOf(20));
}


No.7 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<String> list = new CursorLinkedList<>();
    list.add("A");
    list.add("B");
    list.add("C");
    assertEquals(1, list.indexOf("B"));
}


No.8 generated result --------------------------


CursorLinkedList<Integer> list = new CursorLinkedList<>();
list.add(5);
list.add(10);
list.add(15);
int result = list.indexOf(10);

assertEquals(1, result);



No.9 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.add(10);
    list.add(20);
    list.add(30);
    assertEquals(1, list.indexOf(20));
}


No.10 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.add(10);
    list.add(20);
    
    assertEquals(0, list.indexOf(10));
    assertEquals(1, list.indexOf(20));
    assertEquals(-1, list.indexOf(30));
}


