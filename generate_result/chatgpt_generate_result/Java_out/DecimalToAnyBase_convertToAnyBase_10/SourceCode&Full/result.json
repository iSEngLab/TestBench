{
    "project_name": "Java",
    "file_name": "DecimalToAnyBase.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/conversions/DecimalToAnyBase.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.conversions",
    "docstring": "/**\n     * This method produces a String value of any given input decimal in any\n     * base\n     *\n     * @param inp Decimal of which we need the value in base in String format\n     * @return string format of the converted value in the given base\n     */",
    "source_code": "\npublic static String convertToAnyBase(int inp, int base) {\n    ArrayList<Character> charArr = new ArrayList<>();\n\n    while (inp > 0) {\n        charArr.add(reVal(inp % base));\n        inp /= base;\n    }\n\n    StringBuilder str = new StringBuilder(charArr.size());\n\n    for (Character ch : charArr) {\n        str.append(ch);\n    }\n\n    return str.reverse().toString();\n}\n",
    "class_name": "DecimalToAnyBase",
    "method_name": "convertToAnyBase",
    "arguments": [
        "int inp",
        "int base"
    ],
    "generate_test": [
        "@Test\npublic void convertToAnyBaseTest() {\n    int input = 10;\n    int base = 2;\n    String expected = \"1010\";\n    String result = DecimalToAnyBase.convertToAnyBase(input, base);\n    assertEquals(expected, result);\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    int inp = 10;\n    int base = 2;\n    assertEquals(\"1010\", DecimalToAnyBase.convertToAnyBase(inp, base));\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(2, 2));\n    assertEquals(\"1000\", DecimalToAnyBase.convertToAnyBase(8, 2));\n    assertEquals(\"101\", DecimalToAnyBase.convertToAnyBase(5, 2));\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    assertEquals(\"11010\", DecimalToAnyBase.convertToAnyBase(26, 2));\n    assertEquals(\"1A\", DecimalToAnyBase.convertToAnyBase(26, 16));\n    assertEquals(\"33\", DecimalToAnyBase.convertToAnyBase(110, 5));\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    String expectedResult = \"10010\";\n    assertEquals(expectedResult, DecimalToAnyBase.convertToAnyBase(18, 2));\n}",
        "String result = DecimalToAnyBase.convertToAnyBase(25, 16);\nassertEquals(\"19\", result);",
        "assertEquals(\"0\", convertToAnyBase(0, 2));\nassertEquals(\"1\", convertToAnyBase(1, 2));\nassertEquals(\"1000\", convertToAnyBase(8, 2));\nassertEquals(\"11111111\", convertToAnyBase(255, 2));\nassertEquals(\"1010\", convertToAnyBase(10, 2));\nassertEquals(\"11110000001001000000\", convertToAnyBase(1000000, 2));",
        "@Test\npublic void convertToAnyBaseTest() {\n    assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(16, 2));\n    assertEquals(\"1A\", DecimalToAnyBase.convertToAnyBase(26, 16));\n    assertEquals(\"11011\", DecimalToAnyBase.convertToAnyBase(27, 2));\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n  assertEquals(\"17\", DecimalToAnyBase.convertToAnyBase(15, 16));\n  assertEquals(\"11000\", DecimalToAnyBase.convertToAnyBase(24, 2));\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    int decInput = 100;\n    int base = 16;\n    String expected = \"64\";\n    String actual = DecimalToAnyBase.convertToAnyBase(decInput, base);\n    assertEquals(expected, actual);\n}"
    ]
}