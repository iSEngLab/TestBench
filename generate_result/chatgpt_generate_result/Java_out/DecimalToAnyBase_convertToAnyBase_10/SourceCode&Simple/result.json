{
    "project_name": "Java",
    "file_name": "DecimalToAnyBase.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/conversions/DecimalToAnyBase.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.conversions",
    "docstring": "/**\n     * This method produces a String value of any given input decimal in any\n     * base\n     *\n     * @param inp Decimal of which we need the value in base in String format\n     * @return string format of the converted value in the given base\n     */",
    "source_code": "\npublic static String convertToAnyBase(int inp, int base) {\n    ArrayList<Character> charArr = new ArrayList<>();\n\n    while (inp > 0) {\n        charArr.add(reVal(inp % base));\n        inp /= base;\n    }\n\n    StringBuilder str = new StringBuilder(charArr.size());\n\n    for (Character ch : charArr) {\n        str.append(ch);\n    }\n\n    return str.reverse().toString();\n}\n",
    "class_name": "DecimalToAnyBase",
    "method_name": "convertToAnyBase",
    "arguments": [
        "int inp",
        "int base"
    ],
    "generate_test": [
        "@Test\npublic void convertToAnyBaseTest() {\n    // Given\n    int inp = 10;\n    int base = 2;\n\n    // When\n    String result = DecimalToAnyBase.convertToAnyBase(inp, base);\n\n    // Then\n    assertEquals(\"1010\", result);\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    int input = 15;\n    int base = 2;\n    String expected = \"1111\";\n    String actual = DecimalToAnyBase.convertToAnyBase(input, base);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    int input = 10;\n    int base = 2;\n    String expected = \"1010\";\n    String actual = DecimalToAnyBase.convertToAnyBase(input, base);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    int num = 15;\n    int base = 2;\n    String actual = DecimalToAnyBase.convertToAnyBase(num, base);\n    String expected = \"1111\";\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    int inp = 16;\n    int base = 2;\n    String expected = \"10000\";\n    String actual = convertToAnyBase(inp, base);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    String result = DecimalToAnyBase.convertToAnyBase(17, 2);\n    assertEquals(\"10001\", result);\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    assertEquals(\"1100\", DecimalToAnyBase.convertToAnyBase(12, 2));\n    assertEquals(\"34\", DecimalToAnyBase.convertToAnyBase(16, 4));\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    int input = 15;\n    int base = 2;\n    String expected = \"1111\";\n    String actual = DecimalToAnyBase.convertToAnyBase(input, base);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    assertEquals(\"11001\", DecimalToAnyBase.convertToAnyBase(25, 2));\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    assertEquals(\"1100100\", DecimalToAnyBase.convertToAnyBase(100, 2));\n    assertEquals(\"64\", DecimalToAnyBase.convertToAnyBase(100, 8));\n    assertEquals(\"100\", DecimalToAnyBase.convertToAnyBase(100, 10));\n    assertEquals(\"64\", DecimalToAnyBase.convertToAnyBase(100, 16));\n}"
    ]
}