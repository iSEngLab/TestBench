Source code: 


public static String convertToAnyBase(int inp, int base) {
    ArrayList<Character> charArr = new ArrayList<>();

    while (inp > 0) {
        charArr.add(reVal(inp % base));
        inp /= base;
    }

    StringBuilder str = new StringBuilder(charArr.size());

    for (Character ch : charArr) {
        str.append(ch);
    }

    return str.reverse().toString();
}



No.1 generated result --------------------------

@Test
public void convertToAnyBaseTest() {
    // Given
    int inp = 10;
    int base = 2;

    // When
    String result = DecimalToAnyBase.convertToAnyBase(inp, base);

    // Then
    assertEquals("1010", result);
}


No.2 generated result --------------------------

@Test
public void convertToAnyBaseTest() {
    int input = 15;
    int base = 2;
    String expected = "1111";
    String actual = DecimalToAnyBase.convertToAnyBase(input, base);
    assertEquals(expected, actual);
}


No.3 generated result --------------------------

@Test
public void convertToAnyBaseTest() {
    int input = 10;
    int base = 2;
    String expected = "1010";
    String actual = DecimalToAnyBase.convertToAnyBase(input, base);
    assertEquals(expected, actual);
}


No.4 generated result --------------------------

@Test
public void convertToAnyBaseTest() {
    int num = 15;
    int base = 2;
    String actual = DecimalToAnyBase.convertToAnyBase(num, base);
    String expected = "1111";
    assertEquals(expected, actual);
}


No.5 generated result --------------------------

@Test
public void convertToAnyBaseTest() {
    int inp = 16;
    int base = 2;
    String expected = "10000";
    String actual = convertToAnyBase(inp, base);
    assertEquals(expected, actual);
}


No.6 generated result --------------------------

@Test
public void convertToAnyBaseTest() {
    String result = DecimalToAnyBase.convertToAnyBase(17, 2);
    assertEquals("10001", result);
}


No.7 generated result --------------------------

@Test
public void convertToAnyBaseTest() {
    assertEquals("1100", DecimalToAnyBase.convertToAnyBase(12, 2));
    assertEquals("34", DecimalToAnyBase.convertToAnyBase(16, 4));
}


No.8 generated result --------------------------

@Test
public void convertToAnyBaseTest() {
    int input = 15;
    int base = 2;
    String expected = "1111";
    String actual = DecimalToAnyBase.convertToAnyBase(input, base);
    assertEquals(expected, actual);
}


No.9 generated result --------------------------

@Test
public void convertToAnyBaseTest() {
    assertEquals("11001", DecimalToAnyBase.convertToAnyBase(25, 2));
}


No.10 generated result --------------------------

@Test
public void convertToAnyBaseTest() {
    assertEquals("1100100", DecimalToAnyBase.convertToAnyBase(100, 2));
    assertEquals("64", DecimalToAnyBase.convertToAnyBase(100, 8));
    assertEquals("100", DecimalToAnyBase.convertToAnyBase(100, 10));
    assertEquals("64", DecimalToAnyBase.convertToAnyBase(100, 16));
}


