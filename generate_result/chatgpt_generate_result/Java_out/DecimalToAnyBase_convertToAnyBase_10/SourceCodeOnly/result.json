{
    "project_name": "Java",
    "file_name": "DecimalToAnyBase.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/conversions/DecimalToAnyBase.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.conversions",
    "docstring": "/**\n     * This method produces a String value of any given input decimal in any\n     * base\n     *\n     * @param inp Decimal of which we need the value in base in String format\n     * @return string format of the converted value in the given base\n     */",
    "source_code": "\npublic static String convertToAnyBase(int inp, int base) {\n    ArrayList<Character> charArr = new ArrayList<>();\n\n    while (inp > 0) {\n        charArr.add(reVal(inp % base));\n        inp /= base;\n    }\n\n    StringBuilder str = new StringBuilder(charArr.size());\n\n    for (Character ch : charArr) {\n        str.append(ch);\n    }\n\n    return str.reverse().toString();\n}\n",
    "class_name": "DecimalToAnyBase",
    "method_name": "convertToAnyBase",
    "arguments": [
        "int inp",
        "int base"
    ],
    "generate_test": [
        "@Test\npublic void convertToAnyBaseTest() {\n    assertEquals(\"100\", DecimalToAnyBase.convertToAnyBase(4, 2));\n    assertEquals(\"11\", DecimalToAnyBase.convertToAnyBase(4, 3));\n    assertEquals(\"4\", DecimalToAnyBase.convertToAnyBase(4, 4));\n}",
        "@Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"1001\", DecimalToAnyBase.convertToAnyBase(9, 2));\n    }",
        "@Test\npublic void convertToAnyBaseTest() {\n    assertEquals(\"11001\", DecimalToAnyBase.convertToAnyBase(25, 2));\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    // Arrange\n    int inp = 10;\n    int base = 2;\n    \n    // Act\n    String result = DecimalToAnyBase.convertToAnyBase(inp, base);\n    \n    // Assert\n    assertEquals(\"1010\", result);\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    assertEquals(\"1101\", DecimalToAnyBase.convertToAnyBase(13, 2));\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    DecimalToAnyBaseTest convert = new DecimalToAnyBaseTest();\n    assertEquals(\"MultipleNumbers\", convert.convertToAnyBase(10, 2));\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    assertEquals(\"100\", DecimalToAnyBase.convertToAnyBase(4, 2));\n    assertEquals(\"11\", DecimalToAnyBase.convertToAnyBase(4, 3));\n    assertEquals(\"4\", DecimalToAnyBase.convertToAnyBase(4, 10));\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    assertEquals(\"1100100\", DecimalToAnyBase.convertToAnyBase(100, 2));\n}",
        "@Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"1111\", DecimalToAnyBase.convertToAnyBase(15, 2));\n        assertEquals(\"17\", DecimalToAnyBase.convertToAnyBase(15, 8));\n        assertEquals(\"F\", DecimalToAnyBase.convertToAnyBase(15, 16));\n    }",
        "@Test\npublic void convertToAnyBaseTest() {\n    assertEquals(\"1101\", convertToAnyBase(13, 2));\n    assertEquals(\"15\", convertToAnyBase(21, 16));\n    assertEquals(\"63\", convertToAnyBase(111, 8));\n}"
    ]
}