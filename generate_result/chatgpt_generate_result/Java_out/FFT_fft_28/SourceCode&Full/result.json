{
    "project_name": "Java",
    "file_name": "FFT.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/FFT.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Iterative In-Place Radix-2 Cooley-Tukey Fast Fourier Transform Algorithm\n     * with Bit-Reversal. The size of the input signal must be a power of 2. If\n     * it isn't then it is padded with zeros and the output FFT will be bigger\n     * than the input signal.\n     *\n     * <p>\n     * More info:\n     * https://www.algorithm-archive.org/contents/cooley_tukey/cooley_tukey.html\n     * https://www.geeksforgeeks.org/iterative-fast-fourier-transformation-polynomial-multiplication/\n     * https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm\n     * https://cp-algorithms.com/algebra/fft.html\n     *  @param x The discrete signal which is then converted to the FFT or the\n     * IFFT of signal x.\n     * @param inverse True if you want to find the inverse FFT.\n     * @return\n     */",
    "source_code": "\npublic static ArrayList<Complex> fft(ArrayList<Complex> x, boolean inverse) {\n    /* Pad the signal with zeros if necessary */\n    paddingPowerOfTwo(x);\n    int N = x.size();\n    int log2N = findLog2(N);\n    x = fftBitReversal(N, log2N, x);\n    int direction = inverse ? -1 : 1;\n\n    /* Main loop of the algorithm */\n    for (int len = 2; len <= N; len *= 2) {\n        double angle = -2 * Math.PI / len * direction;\n        Complex wlen = new Complex(Math.cos(angle), Math.sin(angle));\n        for (int i = 0; i < N; i += len) {\n            Complex w = new Complex(1, 0);\n            for (int j = 0; j < len / 2; j++) {\n                Complex u = x.get(i + j);\n                Complex v = w.multiply(x.get(i + j + len / 2));\n                x.set(i + j, u.add(v));\n                x.set(i + j + len / 2, u.subtract(v));\n                w = w.multiply(wlen);\n            }\n        }\n    }\n    x = inverseFFT(N, inverse, x);\n    return x;\n}\n",
    "class_name": "FFT",
    "method_name": "fft",
    "arguments": [
        "ArrayList<Complex> x",
        "boolean inverse"
    ],
    "generate_test": [
        "@Test\npublic void fftTest() {\n    ArrayList<FFT.Complex> input = new ArrayList<>();\n    input.add(new FFT.Complex(3, 5));\n    input.add(new FFT.Complex(2, 6));\n    input.add(new FFT.Complex(7, 8));\n    \n    ArrayList<FFT.Complex> expected = new ArrayList<>();\n    expected.add(new FFT.Complex(-2, 19));\n    expected.add(new FFT.Complex(-11, -1));\n    expected.add(new FFT.Complex(7, 8));\n    \n    ArrayList<FFT.Complex> result = FFT.fft(input, false);\n    \n    for (int i = 0; i < expected.size(); i++) {\n        double delta = 0.0001;\n        assertEquals(expected.get(i).getReal(), result.get(i).getReal(), delta);\n        assertEquals(expected.get(i).getImaginary(), result.get(i).getImaginary(), delta);\n    }\n}\n",
        "ArrayList<Complex> input = new ArrayList<>();\ninput.add(new Complex(1, 2));\ninput.add(new Complex(3, 4));\n\nArrayList<Complex> expectedOutput = new ArrayList<>();\nexpectedOutput.add(new Complex(-2.0, -2.0));\nexpectedOutput.add(new Complex(4.0, 0.0));\n\nArrayList<Complex> actualOutput = FFT.fft(input, false);\nfor (int i = 0; i < input.size(); i++) {\n    assertEquals(expectedOutput.get(i).getReal(), actualOutput.get(i).getReal(), 0.0001);\n    assertEquals(expectedOutput.get(i).getImaginary(), actualOutput.get(i).getImaginary(), 0.0001);\n}",
        "public void fftTest() {\n    ArrayList<Complex> inputSignal = new ArrayList<>();\n    inputSignal.add(new Complex(3, 0));\n    inputSignal.add(new Complex(4, 0));\n    inputSignal.add(new Complex(5, 0));\n    ArrayList<Complex> expectedOutput = new ArrayList<>();\n    expectedOutput.add(new Complex(12, 0));\n    expectedOutput.add(new Complex(-1.5, 3.077683537)).roundedTo(6);\n    expectedOutput.add(new Complex(-1.5, -3.077683537)).roundedTo(6);\n    ArrayList<Complex> actualOutput = FFT.fft(inputSignal, false);\n    for (int i = 0; i < expectedOutput.size(); i++) {\n        assertEquals(expectedOutput.get(i).getReal(), actualOutput.get(i).getReal(), 0.0001);\n        assertEquals(expectedOutput.get(i).getImaginary(), actualOutput.get(i).getImaginary(), 0.0001);\n    }\n}",
        "@Test\npublic void fftTest() {\n    ArrayList<Complex> input = new ArrayList<>();\n    input.add(new Complex(1, 0));\n    input.add(new Complex(2, 0));\n    input.add(new Complex(3, 0));\n    \n    ArrayList<Complex> result = FFT.fft(input, false);\n    // Add assertions for the expected output\n    // ...\n}",
        "@Test\npublic void fftTest() {\n    ArrayList<Complex> signal = new ArrayList<>();\n    signal.add(new Complex(1, 0));\n    signal.add(new Complex(2, 0));\n    signal.add(new Complex(3, 0));\n    signal.add(new Complex(4, 0));\n    \n    ArrayList<Complex> result = FFT.fft(signal, false);\n    \n    assertNotNull(result);\n    assertEquals(1.0000000000000002, result.get(0).getReal());\n    assertEquals(9.656854249492381, result.get(1).getReal());\n    assertEquals(-2.0000000000000004, result.get(2).getReal());\n    assertEquals(0.34314575050761935, result.get(3).getReal());\n}",
        "@Test\npublic void fftTest() {\n    ArrayList<Complex> input = new ArrayList<>();\n    input.add(new Complex(3, 4));\n    input.add(new Complex(2, 5));\n    input.add(new Complex(7, -3));\n    input.add(new Complex(0, 1));\n\n    ArrayList<Complex> expectedOutput = new ArrayList<>();\n    expectedOutput.add(new Complex(12, 7));\n    expectedOutput.add(new Complex(11, -5));\n    expectedOutput.add(new Complex(3, -8));\n    expectedOutput.add(new Complex(9, -11));\n\n    ArrayList<Complex> actualOutput = FFT.fft(input, false);\n\n    assertEquals(expectedOutput, actualOutput);\n}",
        "public void fftTest() {\n    ArrayList<FFT.Complex> signal = new ArrayList<>();\n    signal.add(new FFT.Complex(1, 2);\n    signal.add(new FFT.Complex(3, 4);\n    signal.add(new FFT.Complex(5, 6);\n    ArrayList<FFT.Complex> result = FFT.fft(signal, false);\n    // Assertions\n    assertEquals(new FFT.Complex(9, 12), result.get(0));\n    assertEquals(new FFT.Complex(-3.464, 0.0796), result.get(1));\n    assertEquals(new FFT.Complex(3, -0.079), result.get(2));\n}",
        "public void fftTest() {\n    ArrayList<FFT.Complex> inputSignal = new ArrayList<>();\n    inputSignal.add(new FFT.Complex(1, 0));\n    inputSignal.add(new FFT.Complex(1, 0));\n    ArrayList<FFT.Complex> result = FFT.fft(inputSignal, false);\n    assertEquals(2, result.size());\n}",
        "@Test\npublic void fftTest() {\n    ArrayList<FFT.Complex> inputSignal = new ArrayList<>();\n    inputSignal.add(new FFT.Complex(5, 6));\n    inputSignal.add(new FFT.Complex(2, 8));\n    inputSignal.add(new FFT.Complex(3, 4));\n    inputSignal.add(new FFT.Complex(4, 0));\n  \n    ArrayList<FFT.Complex> expectedOutput = new ArrayList<>();\n    expectedOutput.add(new FFT.Complex(14, 18));\n    expectedOutput.add(new FFT.Complex(-5, -6));\n    expectedOutput.add(new FFT.Complex(10, 2));\n    expectedOutput.add(new FFT.Complex(-11, 14));\n\n    ArrayList<FFT.Complex> actualOutput = FFT.fft(inputSignal, false);\n    assertEquals(expectedOutput, actualOutput);\n}",
        "public void fftTest() {\n    ArrayList<FFT.Complex> input = new ArrayList<>();\n    input.add(new FFT.Complex(1, 0));\n    input.add(new FFT.Complex(2, 0));\n    input.add(new FFT.Complex(3, 0));\n    \n    ArrayList<FFT.Complex> expectedResult = new ArrayList<>();\n    expectedResult.add(new FFT.Complex(6, 0));\n    expectedResult.add(new FFT.Complex(-1.5, 0.866025));\n    expectedResult.add(new FFT.Complex(-1.5, -0.866025));\n    \n    ArrayList<FFT.Complex> result = FFT.fft(input, false);\n    for (int i = 0; i < result.size(); i++) {\n        assertEquals(Math.round(expectedResult.get(i).getReal() * 100.0) / 100.0, \n                     Math.round(result.get(i).getReal() * 100.0) / 100.0);\n        assertEquals(Math.round(expectedResult.get(i).getImaginary() * 100.0) / 100.0, \n                     Math.round(result.get(i).getImaginary() * 100.0) / 100.0);\n    }\n}"
    ]
}