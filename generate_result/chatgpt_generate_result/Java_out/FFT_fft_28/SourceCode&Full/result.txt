Source code: 


public static ArrayList<Complex> fft(ArrayList<Complex> x, boolean inverse) {
    /* Pad the signal with zeros if necessary */
    paddingPowerOfTwo(x);
    int N = x.size();
    int log2N = findLog2(N);
    x = fftBitReversal(N, log2N, x);
    int direction = inverse ? -1 : 1;

    /* Main loop of the algorithm */
    for (int len = 2; len <= N; len *= 2) {
        double angle = -2 * Math.PI / len * direction;
        Complex wlen = new Complex(Math.cos(angle), Math.sin(angle));
        for (int i = 0; i < N; i += len) {
            Complex w = new Complex(1, 0);
            for (int j = 0; j < len / 2; j++) {
                Complex u = x.get(i + j);
                Complex v = w.multiply(x.get(i + j + len / 2));
                x.set(i + j, u.add(v));
                x.set(i + j + len / 2, u.subtract(v));
                w = w.multiply(wlen);
            }
        }
    }
    x = inverseFFT(N, inverse, x);
    return x;
}



No.1 generated result --------------------------

@Test
public void fftTest() {
    ArrayList<FFT.Complex> input = new ArrayList<>();
    input.add(new FFT.Complex(3, 5));
    input.add(new FFT.Complex(2, 6));
    input.add(new FFT.Complex(7, 8));
    
    ArrayList<FFT.Complex> expected = new ArrayList<>();
    expected.add(new FFT.Complex(-2, 19));
    expected.add(new FFT.Complex(-11, -1));
    expected.add(new FFT.Complex(7, 8));
    
    ArrayList<FFT.Complex> result = FFT.fft(input, false);
    
    for (int i = 0; i < expected.size(); i++) {
        double delta = 0.0001;
        assertEquals(expected.get(i).getReal(), result.get(i).getReal(), delta);
        assertEquals(expected.get(i).getImaginary(), result.get(i).getImaginary(), delta);
    }
}



No.2 generated result --------------------------

ArrayList<Complex> input = new ArrayList<>();
input.add(new Complex(1, 2));
input.add(new Complex(3, 4));

ArrayList<Complex> expectedOutput = new ArrayList<>();
expectedOutput.add(new Complex(-2.0, -2.0));
expectedOutput.add(new Complex(4.0, 0.0));

ArrayList<Complex> actualOutput = FFT.fft(input, false);
for (int i = 0; i < input.size(); i++) {
    assertEquals(expectedOutput.get(i).getReal(), actualOutput.get(i).getReal(), 0.0001);
    assertEquals(expectedOutput.get(i).getImaginary(), actualOutput.get(i).getImaginary(), 0.0001);
}


No.3 generated result --------------------------

public void fftTest() {
    ArrayList<Complex> inputSignal = new ArrayList<>();
    inputSignal.add(new Complex(3, 0));
    inputSignal.add(new Complex(4, 0));
    inputSignal.add(new Complex(5, 0));
    ArrayList<Complex> expectedOutput = new ArrayList<>();
    expectedOutput.add(new Complex(12, 0));
    expectedOutput.add(new Complex(-1.5, 3.077683537)).roundedTo(6);
    expectedOutput.add(new Complex(-1.5, -3.077683537)).roundedTo(6);
    ArrayList<Complex> actualOutput = FFT.fft(inputSignal, false);
    for (int i = 0; i < expectedOutput.size(); i++) {
        assertEquals(expectedOutput.get(i).getReal(), actualOutput.get(i).getReal(), 0.0001);
        assertEquals(expectedOutput.get(i).getImaginary(), actualOutput.get(i).getImaginary(), 0.0001);
    }
}


No.4 generated result --------------------------

@Test
public void fftTest() {
    ArrayList<Complex> input = new ArrayList<>();
    input.add(new Complex(1, 0));
    input.add(new Complex(2, 0));
    input.add(new Complex(3, 0));
    
    ArrayList<Complex> result = FFT.fft(input, false);
    // Add assertions for the expected output
    // ...
}


No.5 generated result --------------------------

@Test
public void fftTest() {
    ArrayList<Complex> signal = new ArrayList<>();
    signal.add(new Complex(1, 0));
    signal.add(new Complex(2, 0));
    signal.add(new Complex(3, 0));
    signal.add(new Complex(4, 0));
    
    ArrayList<Complex> result = FFT.fft(signal, false);
    
    assertNotNull(result);
    assertEquals(1.0000000000000002, result.get(0).getReal());
    assertEquals(9.656854249492381, result.get(1).getReal());
    assertEquals(-2.0000000000000004, result.get(2).getReal());
    assertEquals(0.34314575050761935, result.get(3).getReal());
}


No.6 generated result --------------------------

@Test
public void fftTest() {
    ArrayList<Complex> input = new ArrayList<>();
    input.add(new Complex(3, 4));
    input.add(new Complex(2, 5));
    input.add(new Complex(7, -3));
    input.add(new Complex(0, 1));

    ArrayList<Complex> expectedOutput = new ArrayList<>();
    expectedOutput.add(new Complex(12, 7));
    expectedOutput.add(new Complex(11, -5));
    expectedOutput.add(new Complex(3, -8));
    expectedOutput.add(new Complex(9, -11));

    ArrayList<Complex> actualOutput = FFT.fft(input, false);

    assertEquals(expectedOutput, actualOutput);
}


No.7 generated result --------------------------

public void fftTest() {
    ArrayList<FFT.Complex> signal = new ArrayList<>();
    signal.add(new FFT.Complex(1, 2);
    signal.add(new FFT.Complex(3, 4);
    signal.add(new FFT.Complex(5, 6);
    ArrayList<FFT.Complex> result = FFT.fft(signal, false);
    // Assertions
    assertEquals(new FFT.Complex(9, 12), result.get(0));
    assertEquals(new FFT.Complex(-3.464, 0.0796), result.get(1));
    assertEquals(new FFT.Complex(3, -0.079), result.get(2));
}


No.8 generated result --------------------------

public void fftTest() {
    ArrayList<FFT.Complex> inputSignal = new ArrayList<>();
    inputSignal.add(new FFT.Complex(1, 0));
    inputSignal.add(new FFT.Complex(1, 0));
    ArrayList<FFT.Complex> result = FFT.fft(inputSignal, false);
    assertEquals(2, result.size());
}


No.9 generated result --------------------------

@Test
public void fftTest() {
    ArrayList<FFT.Complex> inputSignal = new ArrayList<>();
    inputSignal.add(new FFT.Complex(5, 6));
    inputSignal.add(new FFT.Complex(2, 8));
    inputSignal.add(new FFT.Complex(3, 4));
    inputSignal.add(new FFT.Complex(4, 0));
  
    ArrayList<FFT.Complex> expectedOutput = new ArrayList<>();
    expectedOutput.add(new FFT.Complex(14, 18));
    expectedOutput.add(new FFT.Complex(-5, -6));
    expectedOutput.add(new FFT.Complex(10, 2));
    expectedOutput.add(new FFT.Complex(-11, 14));

    ArrayList<FFT.Complex> actualOutput = FFT.fft(inputSignal, false);
    assertEquals(expectedOutput, actualOutput);
}


No.10 generated result --------------------------

public void fftTest() {
    ArrayList<FFT.Complex> input = new ArrayList<>();
    input.add(new FFT.Complex(1, 0));
    input.add(new FFT.Complex(2, 0));
    input.add(new FFT.Complex(3, 0));
    
    ArrayList<FFT.Complex> expectedResult = new ArrayList<>();
    expectedResult.add(new FFT.Complex(6, 0));
    expectedResult.add(new FFT.Complex(-1.5, 0.866025));
    expectedResult.add(new FFT.Complex(-1.5, -0.866025));
    
    ArrayList<FFT.Complex> result = FFT.fft(input, false);
    for (int i = 0; i < result.size(); i++) {
        assertEquals(Math.round(expectedResult.get(i).getReal() * 100.0) / 100.0, 
                     Math.round(result.get(i).getReal() * 100.0) / 100.0);
        assertEquals(Math.round(expectedResult.get(i).getImaginary() * 100.0) / 100.0, 
                     Math.round(result.get(i).getImaginary() * 100.0) / 100.0);
    }
}


