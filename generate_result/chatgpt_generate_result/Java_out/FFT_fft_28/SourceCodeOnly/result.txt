Source code: 


public static ArrayList<Complex> fft(ArrayList<Complex> x, boolean inverse) {
    /* Pad the signal with zeros if necessary */
    paddingPowerOfTwo(x);
    int N = x.size();
    int log2N = findLog2(N);
    x = fftBitReversal(N, log2N, x);
    int direction = inverse ? -1 : 1;

    /* Main loop of the algorithm */
    for (int len = 2; len <= N; len *= 2) {
        double angle = -2 * Math.PI / len * direction;
        Complex wlen = new Complex(Math.cos(angle), Math.sin(angle));
        for (int i = 0; i < N; i += len) {
            Complex w = new Complex(1, 0);
            for (int j = 0; j < len / 2; j++) {
                Complex u = x.get(i + j);
                Complex v = w.multiply(x.get(i + j + len / 2));
                x.set(i + j, u.add(v));
                x.set(i + j + len / 2, u.subtract(v));
                w = w.multiply(wlen);
            }
        }
    }
    x = inverseFFT(N, inverse, x);
    return x;
}



No.1 generated result --------------------------

public void fftTest() {
        ArrayList<Complex> input = new ArrayList<>();
        input.add(new Complex(1, 0));
        input.add(new Complex(2, 0));
        input.add(new Complex(3, 0));
        input.add(new Complex(4, 0));
        
        ArrayList<Complex> expected = new ArrayList<>();
        expected.add(new Complex(10, 0));
        expected.add(new Complex(-2, 2));
        expected.add(new Complex(-2, 0));
        expected.add(new Complex(-2, -2));
        
        ArrayList<Complex> result = FFT.fft(input, false);
        
        for (int i = 0; i < expected.size(); i++) {
            assertEquals(expected.get(i).getReal(), result.get(i).getReal(), 0.0001);
            assertEquals(expected.get(i).getImaginary(), result.get(i).getImaginary(), 0.0001);
        }
    }
}



No.2 generated result --------------------------

@Test
public void fftTest() {
    ArrayList<Complex> input = new ArrayList<>();
    input.add(new Complex(1, 0));
    input.add(new Complex(2, 0));
    input.add(new Complex(3, 0));
    
    // Perform FFT
    ArrayList<Complex> result = FFT.fft(input, false);
    
    // Assert statements
    assertEquals(3, result.size());
    // Add more assert statements based on expected output
}


No.3 generated result --------------------------

@Test
public void fftTest() {
    ArrayList<Complex> signal = new ArrayList<>();
    signal.add(new Complex(3, 0));
    signal.add(new Complex(4, 0));
    signal.add(new Complex(6, 0));
    
    ArrayList<Complex> result = FFT.fft(signal, false);
    
    // Add assertions here to check the correctness of the FFT result
    assertEquals(expectedResult.get(0).getRealPart(), result.get(0).getRealPart(), 0.0001);
    assertEquals(expectedResult.get(0).getImaginaryPart(), result.get(0).getImaginaryPart(), 0.0001);
    assertEquals(expectedResult.get(1).getRealPart(), result.get(1).getRealPart(), 0.0001);
    assertEquals(expectedResult.get(1).getImaginaryPart(), result.get(1).getImaginaryPart(), 0.0001);
    assertEquals(expectedResult.get(2).getRealPart(), result.get(2).getRealPart(), 0.0001);
    assertEquals(expectedResult.get(2).getImaginaryPart(), result.get(2).getImaginaryPart(), 0.0001);
}


No.4 generated result --------------------------

@Test
public void fftTest() {
    ArrayList<Complex> x = new ArrayList<>();
    x.add(new Complex(1, 0));
    x.add(new Complex(2, 0));
    x.add(new Complex(3, 0));
    ArrayList<Complex> result = FFT.fft(x, false);
    assertEquals(new Complex(6, 0), result.get(0));
    assertEquals(new Complex(-1.5, 0.86602540378), result.get(1));
    assertEquals(new Complex(-1.5, -0.86602540378), result.get(2));
}


No.5 generated result --------------------------

@Test
public void fftTest() {
    ArrayList<Complex> input = new ArrayList<>();
    // Add test data to input ArrayList
    ArrayList<Complex> result = FFT.fft(input, false);
    // Add assertions for the expected output
}


No.6 generated result --------------------------

@Test
public void fftTest() {
    ArrayList<Complex> input = new ArrayList<>();
    input.add(new Complex(1, 0));
    input.add(new Complex(2, 0));
    input.add(new Complex(3, 0));
    input.add(new Complex(4, 0));

    ArrayList<Complex> expectedOutput = new ArrayList<>();
    expectedOutput.add(new Complex(10, 0));
    expectedOutput.add(new Complex(-2, 2));
    expectedOutput.add(new Complex(-2, 0));
    expectedOutput.add(new Complex(-2, -2));

    ArrayList<Complex> result = FFT.fft(input, false);

    for (int i = 0; i < expectedOutput.size(); i++) {
        assertEquals(expectedOutput.get(i).re(), result.get(i).re(), 1e-9);
        assertEquals(expectedOutput.get(i).im(), result.get(i).im(), 1e-9);
    }
}


No.7 generated result --------------------------

@Test
public void fftTest() {
    ArrayList<Complex> inputSignal = new ArrayList<>();
    inputSignal.add(new Complex(3, 4));
    inputSignal.add(new Complex(5, 6));
    inputSignal.add(new Complex(7, 8));

    ArrayList<Complex> expectedOutput = new ArrayList<>();
    expectedOutput.add(new Complex(-11, -16));
    expectedOutput.add(new Complex(-1, 0));
    expectedOutput.add(new Complex(-31, -36));

    ArrayList<Complex> actualOutput = FFT.fft(inputSignal, false);

    for (int i = 0; i < expectedOutput.size(); i++) {
        assertEquals(expectedOutput.get(i).getReal(), actualOutput.get(i).getReal());
        assertEquals(expectedOutput.get(i).getImaginary(), actualOutput.get(i).getImaginary());
    }
}


No.8 generated result --------------------------

@Test
public void fftTest() {
    ArrayList<Complex> input = new ArrayList<>();
    input.add(new Complex(1, 0));
    input.add(new Complex(2, 0));
    input.add(new Complex(3, 0));
    input.add(new Complex(4, 0));
    ArrayList<Complex> result = FFT.fft(input, false);
    ArrayList<Complex> expected = new ArrayList<>();
    expected.add(new Complex(10, 0));
    expected.add(new Complex(-2, 2));
    expected.add(new Complex(-2, 0));
    expected.add(new Complex(-2, -2));
    assertEquals(expected, result);
}


No.9 generated result --------------------------

public void fftTest() {
    ArrayList<Complex> input = new ArrayList<>();
    input.add(new Complex(1, 0));
    input.add(new Complex(2, 0));
    input.add(new Complex(3, 0));
    
    ArrayList<Complex> expectedOutput = new ArrayList<>();
    expectedOutput.add(new Complex(6, 0));
    expectedOutput.add(new Complex(-1.5, 0.866));
    expectedOutput.add(new Complex(-1.5, -0.866));
    
    ArrayList<Complex> result = FFT.fft(input, false);
    
    for (int i = 0; i < expectedOutput.size(); i++) {
        assertEquals(expectedOutput.get(i).getReal(), result.get(i).getReal(), 0.001);
        assertEquals(expectedOutput.get(i).getImaginary(), result.get(i).getImaginary(), 0.001);
    }
}


No.10 generated result --------------------------

public void fftTest() {
    ArrayList<Complex> x = new ArrayList<>();
    x.add(new Complex(1, 0));
    x.add(new Complex(2, 0));
    x.add(new Complex(3, 0));
    
    ArrayList<Complex> expectedResult = new ArrayList<>();
    expectedResult.add(new Complex(6, 0));
    expectedResult.add(new Complex(-1.5, 0.86602540378));
    expectedResult.add(new Complex(-1.5, -0.86602540378));
    
    ArrayList<Complex> result = FFT.fft(x, false);
    
    for (int i = 0; i < expectedResult.size(); i++) {
        assertTrue(Math.abs(result.get(i).getReal() - expectedResult.get(i).getReal()) < 0.0001);
        assertTrue(Math.abs(result.get(i).getImaginary() - expectedResult.get(i).getImaginary()) < 0.0001);
    }
}


