{
    "project_name": "Java",
    "file_name": "FibonacciHeap.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/heaps/FibonacciHeap.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.heaps",
    "docstring": "/**\n     * Creates a node (of type HeapNode) which contains the given key, and inserts it into the heap.\n     *\n     * @pre key>=0\n     * @post (numOfnodes = = $prev numOfnodes + 1)\n     * @post empty == false\n     * $ret = the HeapNode we inserted\n     */",
    "source_code": "\npublic HeapNode insert(int key) {\n    HeapNode toInsert = new HeapNode(key); // creates the node\n    if (this.empty()) {\n        this.min = toInsert;\n    } else { // tree is not empty\n        min.setNext(toInsert);\n        this.updateMin(toInsert);\n    }\n    this.numOfHeapNodes++;\n    this.numOfTrees++;\n    return toInsert;\n}\n",
    "class_name": "FibonacciHeap",
    "method_name": "insert",
    "arguments": [
        "int key"
    ],
    "generate_test": [
        "@Test\n    public void insertTest() {\n        FibonacciHeap fibonacciHeap = new FibonacciHeap();\n        HeapNode node = fibonacciHeap.insert(5);\n        assertEquals(5, node.getKey());\n        assertFalse(fibonacciHeap.empty());\n    }",
        "@Test\npublic void insertTest() {\n    FibonacciHeap fibonacciHeap = new FibonacciHeap();\n    HeapNode node = fibonacciHeap.insert(5);\n    assertEquals(5, node.getKey());\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    heap.insert(5);\n    assertEquals(1, heap.size());\n}",
        "\nFibonacciHeap heap = new FibonacciHeap();\nHeapNode node = heap.insert(5);\nassertEquals(5, node.getKey());\n",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    HeapNode node1 = heap.insert(5);\n    assertNotNull(heap.findMin());\n    assertEquals(5, heap.findMin().getKey());\n    assertEquals(1, heap.size());\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    HeapNode node = heap.insert(5);\n    assertNotNull(node);\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap fibonacciHeap = new FibonacciHeap();\n    int key = 5;\n    HeapNode insertedNode = fibonacciHeap.insert(key);\n    assertEquals(key, insertedNode.getKey());\n}",
        "package com.thealgorithms.datastructures.heaps;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        FibonacciHeap fh = new FibonacciHeap();\n        HeapNode insertedNode = fh.insert(5);\n      \n        assertEquals(5, insertedNode.getKey());\n    }\n}",
        "\n@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    heap.insert(5);\n    assertEquals(1, heap.size());\n    assertTrue(heap.findMin().getKey() == 5);\n}",
        "public void insertTest() {\n    FibonacciHeap fHeap = new FibonacciHeap();\n    HeapNode node = fHeap.insert(5);\n    assertNotNull(node);\n    assertEquals(5, node.getKey());\n}"
    ]
}