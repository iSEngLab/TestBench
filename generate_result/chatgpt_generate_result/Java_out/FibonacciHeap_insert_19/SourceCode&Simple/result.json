{
    "project_name": "Java",
    "file_name": "FibonacciHeap.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/heaps/FibonacciHeap.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.heaps",
    "docstring": "/**\n     * Creates a node (of type HeapNode) which contains the given key, and inserts it into the heap.\n     *\n     * @pre key>=0\n     * @post (numOfnodes = = $prev numOfnodes + 1)\n     * @post empty == false\n     * $ret = the HeapNode we inserted\n     */",
    "source_code": "\npublic HeapNode insert(int key) {\n    HeapNode toInsert = new HeapNode(key); // creates the node\n    if (this.empty()) {\n        this.min = toInsert;\n    } else { // tree is not empty\n        min.setNext(toInsert);\n        this.updateMin(toInsert);\n    }\n    this.numOfHeapNodes++;\n    this.numOfTrees++;\n    return toInsert;\n}\n",
    "class_name": "FibonacciHeap",
    "method_name": "insert",
    "arguments": [
        "int key"
    ],
    "generate_test": [
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    HeapNode inserted = heap.insert(5);\n    assertNotNull(inserted);\n    assertEquals(5, inserted.key);\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    HeapNode node = heap.insert(5);\n    assertNotNull(node);\n    assertEquals(5, node.key);\n}",
        "public void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    assertTrue(heap.empty());\n    int key = 10;\n    HeapNode insertedNode = heap.insert(key);\n    assertFalse(heap.empty());\n    assertEquals(key, insertedNode.getKey());\n}",
        "\npackage com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        // Context information\n        FibonacciHeap fibonacciHeap = new FibonacciHeap();\n        HeapNode result = fibonacciHeap.insert(10);\n        assertEquals(10, result.getKey());\n        // Complete assertion or any other checks\n    }\n}\n",
        "public void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    assertEquals(1, heap.insert(1).key);\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap fibonacciHeap = new FibonacciHeap();\n    HeapNode node = fibonacciHeap.insert(5);\n    int expectedKey = 5;\n    assertEquals(expectedKey, node.getKey());\n}",
        "    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        heap.insert(5);\n        assertEquals(1, heap.numOfHeapNodes);\n    }",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    heap.insert(5);\n    assertEquals(5, heap.findMin().getKey());\n}",
        "@Test\npublic void insertTest() {\n    // Create a new Fibonacci Heap\n    FibonacciHeap heap = new FibonacciHeap();\n    // Insert a key into the heap\n    HeapNode insertedNode = heap.insert(5);\n    // Assert that the inserted node has the correct key\n    assertEquals(5, insertedNode.key);\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    HeapNode node1 = heap.insert(10);\n    assertEquals(10, node1.getKey());\n    assertEquals(1, heap.size());\n}"
    ]
}