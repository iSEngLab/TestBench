Source code: 


public static void floodFill(final int[][] image, final int x, final int y, final int newColor, final int oldColor) {
    if (newColor == oldColor || x < 0 || x >= image.length || y < 0 || y >= image[x].length || getPixel(image, x, y) != oldColor) {
        return;
    }

    putPixel(image, x, y, newColor);

    /* Recursively check for horizontally & vertically adjacent coordinates */
    floodFill(image, x + 1, y, newColor, oldColor);
    floodFill(image, x - 1, y, newColor, oldColor);
    floodFill(image, x, y + 1, newColor, oldColor);
    floodFill(image, x, y - 1, newColor, oldColor);

    /* Recursively check for diagonally adjacent coordinates  */
    floodFill(image, x + 1, y - 1, newColor, oldColor);
    floodFill(image, x - 1, y + 1, newColor, oldColor);
    floodFill(image, x + 1, y + 1, newColor, oldColor);
    floodFill(image, x - 1, y - 1, newColor, oldColor);
}



No.1 generated result --------------------------

@Test
public void floodFillTest() {
    int [][] image = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    int x = 0;
    int y = 0;
    int newColor = 10;
    int oldColor = 1;
    final int expectedOutput[][] = {{10, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    FloodFill.floodFill(image, x, y, newColor, oldColor);
    assertArrayEquals(expectedOutput, image);
}


No.2 generated result --------------------------

int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
FloodFill.floodFill(image, 1, 1, 2, 1);
int[][] expected = {{2, 2, 2}, {2, 2, 0}, {2, 0, 1}};
assertArrayEquals(expected, image);


No.3 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {{0, 0, 0}, {0, 1, 0}, {0, 0, 0}};
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = 1;

    FloodFill.floodFill(image, x, y, newColor, oldColor);

    assertArrayEquals(new int[][]{{0, 0, 0}, {0, 2, 0}, {0, 0, 0}}, image);
}


No.4 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = image[x][y];
    FloodFill.floodFill(image, x, y, newColor, oldColor);
    int[][] expected = {{2, 2, 2}, {2, 2, 0}, {2, 0, 1}};
    assertArrayEquals(expected, image);
}


No.5 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = 1;
  
    FloodFill.floodFill(image, x, y, newColor, oldColor);
  
    int[][] expected = {{2, 2, 2}, {2, 2, 0}, {2, 0, 1}};
    assertArrayEquals(expected, image);
}


No.6 generated result --------------------------

int[][] image = {
    {1, 1, 1, 1, 1},
    {1, 1, 1, 1, 0},
    {1, 0, 0, 1, 1},
    {1, 1, 1, 1, 1}
};
int x = 1;
int y = 1;
int newColor = 2;
int oldColor = image[x][y];
FloodFill.floodFill(image, x, y, newColor, oldColor);
// After the flood-fill operation, the modified image should be asserted
int[][] expected = {
    {2, 2, 2, 2, 2},
    {2, 2, 2, 2, 0},
    {2, 0, 0, 2, 2},
    {2, 2, 2, 2, 2}
};
// Asserting the expected modified image with the resultant after flood-fill operation
assertArrayEquals(expected, image);


No.7 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {{1, 1, 1}, {1, 1, 0}, {0, 0, 1}};
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = 1;

    FloodFill.floodFill(image, x, y, newColor, oldColor);

    int[][] expectedImage = {{2, 2, 2}, {2, 2, 0}, {0, 0, 1}};
    assertArrayEquals(expectedImage, image);
}


No.8 generated result --------------------------

@Test
    public void floodFillTest() {
        int[][] image = {
            {1, 1, 1, 1, 1},
            {1, 1, 1, 0, 1},
            {1, 0, 0, 0, 1},
            {1, 1, 1, 1, 1}
        };
        int x = 2;
        int y = 2;
        int newColor = 2;
        int oldColor = 0;
        
        FloodFill.floodFill(image, x, y, newColor, oldColor);
        
        int[][] expected = {
            {1, 1, 1, 1, 1},
            {1, 1, 1, 2, 1},
            {1, 2, 2, 2, 1},
            {1, 1, 1, 1, 1}
        };
        
        assertArrayEquals(expected, image);
    }


No.9 generated result --------------------------

int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
int x = 1;
int y = 1;
int newColor = 2;
int oldColor = image[x][y];
FloodFill.floodFill(image, x, y, newColor, oldColor);
assertArrayEquals(new int[][]{{2, 2, 2}, {2, 2, 0}, {2, 0, 1}}, image);


No.10 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {{1, 1, 1, 1}, {1, 1, 0, 0}, {1, 0, 1, 1}};
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = 1;
    
    FloodFill.floodFill(image, x, y, newColor, oldColor);
    
    int[][] expectedImage = {{2, 2, 2, 2}, {2, 2, 0, 0}, {2, 0, 1, 1}};
    assertArrayEquals(expectedImage, image);
}


