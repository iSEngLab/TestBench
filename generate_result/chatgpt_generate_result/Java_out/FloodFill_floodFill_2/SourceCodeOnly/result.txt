Source code: 


public static void floodFill(final int[][] image, final int x, final int y, final int newColor, final int oldColor) {
    if (newColor == oldColor || x < 0 || x >= image.length || y < 0 || y >= image[x].length || getPixel(image, x, y) != oldColor) {
        return;
    }

    putPixel(image, x, y, newColor);

    /* Recursively check for horizontally & vertically adjacent coordinates */
    floodFill(image, x + 1, y, newColor, oldColor);
    floodFill(image, x - 1, y, newColor, oldColor);
    floodFill(image, x, y + 1, newColor, oldColor);
    floodFill(image, x, y - 1, newColor, oldColor);

    /* Recursively check for diagonally adjacent coordinates  */
    floodFill(image, x + 1, y - 1, newColor, oldColor);
    floodFill(image, x - 1, y + 1, newColor, oldColor);
    floodFill(image, x + 1, y + 1, newColor, oldColor);
    floodFill(image, x - 1, y - 1, newColor, oldColor);
}



No.1 generated result --------------------------

public static int getPixel(final int[][] image, final int x, final int y) {
    return image[x][y];
}

public static void putPixel(final int[][] image, final int x, final int y, final int newColor) {
    image[x][y] = newColor;
}

@Test
public void floodFillTest() {
    int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = 1;
    floodFill(image, x, y, newColor, oldColor);
    int[][] expected = {{2, 2, 2}, {2, 2, 0}, {2, 0, 1}};
    assertArrayEquals(expected, image);
}


No.2 generated result --------------------------

@Test
    public void floodFillTest() {
         // Create a 5x5 image with the following pixel colors
        int[][] image = {
            {1, 1, 1, 1, 1},
            {1, 0, 0, 1, 1},
            {1, 0, 1, 0, 1},
            {1, 1, 0, 1, 1},
            {1, 1, 1, 1, 1}
        };
        
        // Fill the neighboring pixels starting from (2,2) with new color 2
        floodFill(image, 2, 2, 2, 0);
        
        // Assert the expected image after flood fill
        int[][] expectedImage = {
            {1, 1, 1, 1, 1},
            {1, 2, 2, 1, 1},
            {1, 2, 1, 2, 1},
            {1, 1, 2, 1, 1},
            {1, 1, 1, 1, 1}
        };
        
        assertArrayEquals(expectedImage, image);
    }


No.3 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {
        {1, 1, 1, 1},
        {1, 1, 0, 1},
        {1, 0, 1, 1},
        {1, 1, 1, 1}
    };
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = 1;
    floodFill(image, x, y, newColor, oldColor);
    int[][] expectedImage = {
        {2, 2, 2, 2},
        {2, 2, 0, 2},
        {2, 0, 1, 2},
        {2, 2, 2, 2}
    };
    assertEquals(expectedImage, image);
}


No.4 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
    int x = 1;
    int y = 1;
    int oldColor = 1;
    int newColor = 2;
    FloodFill.floodFill(image, x, y, newColor, oldColor);
    assertArrayEquals(new int[][]{{2, 2, 2}, {2, 2, 0}, {2, 0, 1}}, image);
}


No.5 generated result --------------------------

public static void floodFill(int[][] image, int x, int y, int newColor, int oldColor) {
    floodFill(image, x, y, newColor, oldColor);
    assertEquals(expectedImage, actualImage);
}


No.6 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
    int[][] expected = {{2, 2, 2}, {2, 2, 0}, {2, 0, 1}};
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = 1;
    floodFill(image, x, y, newColor, oldColor);
    assertArrayEquals(expected, image);
}


No.7 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = 1;
    floodFill(image, x, y, newColor, oldColor);
    int[][] expected = {{2, 2, 2}, {2, 2, 0}, {2, 0, 1}};
    assertArrayEquals(expected, image);
}


No.8 generated result --------------------------

@Test
    public void floodFillTest() {
        int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
        int x = 1;
        int y = 1;
        int newColor = 2;
        int oldColor = 1;
        
        FloodFill.floodFill(image, x, y, newColor, oldColor);
        int[][] expected = {{2, 2, 2}, {2, 2, 0}, {2, 0, 1}};
        assertArrayEquals(expected, image);
    }


No.9 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = 1;
    floodFill(image, x, y, newColor, oldColor);
    assertArrayEquals(new int[][]{{2, 2, 2}, {2, 2, 0}, {2, 0, 1}}, image);
}


No.10 generated result --------------------------

public class FloodFillTest {
    @Test
    public void floodFillTest() {
        int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
        int x = 1;
        int y = 1;
        int newColor = 2;
        int oldColor = 1;
        FloodFill.floodFill(image, x, y, newColor, oldColor);
        int[][] expected = {{2, 2, 2}, {2, 2, 0}, {2, 0, 1}};
        assertArrayEquals(expected, image);
    }
}


