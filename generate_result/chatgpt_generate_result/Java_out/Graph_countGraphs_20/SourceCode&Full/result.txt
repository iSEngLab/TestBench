Source code: 


public int countGraphs() {
    int count = 0;
    Set<Node> markedNodes = new HashSet<Node>();

    for (Node n : nodeList) {
        if (!markedNodes.contains(n)) {
            markedNodes.add(n);
            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));
            count++;
        }
    }

    return count;
}



No.1 generated result --------------------------

@Test
public void countGraphsTest() {
    Graph<Integer> graph = new Graph<>();

    graph.addEdge(1, 2);
    graph.addEdge(2, 3);
    graph.addEdge(2, 4);
    graph.addEdge(3, 5);

    assertEquals(2, graph.countGraphs());
}


No.2 generated result --------------------------

@Test
public void countGraphsTest() {
    Graph<Character> graphChars = new Graph<>();
    graphChars.addEdge('a', 'b');
    graphChars.addEdge('a', 'e');
    graphChars.addEdge('b', 'e');
    graphChars.addEdge('b', 'c');
    graphChars.addEdge('c', 'd');
    graphChars.addEdge('d', 'a');

    graphChars.addEdge('x', 'y');
    graphChars.addEdge('x', 'z');

    graphChars.addEdge('w', 'w');

    assertEquals(3, graphChars.countGraphs());
}


No.3 generated result --------------------------

Graph<Integer> graphInts = new Graph<>();
graphInts.addEdge(1, 2);
graphInts.addEdge(2, 3);
graphInts.addEdge(2, 4);
graphInts.addEdge(3, 5);
assertEquals(2, graphInts.countGraphs());


No.4 generated result --------------------------

@Test
public void countGraphsTest() {
    Graph<Integer> graphInts = new Graph<>();

    // Graph 1
    graphInts.addEdge(1, 2);
    graphInts.addEdge(2, 3);
    graphInts.addEdge(2, 4);
    graphInts.addEdge(3, 5);

    graphInts.addEdge(7, 8);
    graphInts.addEdge(8, 10);
    graphInts.addEdge(10, 8);

    assertEquals(2, graphInts.countGraphs());
}


No.5 generated result --------------------------

@Test
public void countGraphsTest() {
    Graph<Integer> graphInts = new Graph<>();
    graphInts.addEdge(1, 2);
    graphInts.addEdge(2, 3);
    graphInts.addEdge(2, 4);
    graphInts.addEdge(3, 5);
    graphInts.addEdge(7, 8);
    graphInts.addEdge(8, 10);
    graphInts.addEdge(10, 8);
    assertEquals(2, graphInts.countGraphs());
}


No.6 generated result --------------------------

@BeforeEach
public void setup() {
    Graph<Character> graphChars = new Graph<>();
    graphChars.addEdge('a', 'b');
    graphChars.addEdge('a', 'e');
    graphChars.addEdge('b', 'e');
    graphChars.addEdge('b', 'c');
    graphChars.addEdge('c', 'd');
    graphChars.addEdge('d', 'a');

    graphChars.addEdge('x', 'y');
    graphChars.addEdge('x', 'z');

    graphChars.addEdge('w', 'w');
}

@Test
public void countGraphsTest() {
    Graph<Character> graphChars = new Graph<>();
    assertEquals(4, graphChars.countGraphs());
}


No.7 generated result --------------------------

public void countGraphsTest() {
    Graph<Integer> graph = new Graph<>();
    graph.addEdge(1, 2);
    graph.addEdge(2, 3);
    graph.addEdge(4, 5);
    assertEquals(2, graph.countGraphs());
}


No.8 generated result --------------------------

@Test
public void countGraphsTest() {
    Graph<Character> graphChars = new Graph<>();
    
    graphChars.addEdge('a', 'b');
    graphChars.addEdge('a', 'e');
    graphChars.addEdge('b', 'e');
    graphChars.addEdge('b', 'c');
    graphChars.addEdge('c', 'd');
    graphChars.addEdge('d', 'a');

    graphChars.addEdge('x', 'y');
    graphChars.addEdge('x', 'z');

    graphChars.addEdge('w', 'w');

    assertEquals(2, graphChars.countGraphs());
}


No.9 generated result --------------------------

@Test
public void countGraphsTest() {
    // Create a new graph
    Graph<Character> graph = new Graph<>();
    // Add edges to the graph
    graph.addEdge('a', 'b');
    graph.addEdge('a', 'e');
    graph.addEdge('b', 'e');
    graph.addEdge('b', 'c');
    graph.addEdge('c', 'd');
    graph.addEdge('d', 'a');
    // Test the count of different graphs
    assertEquals(2, graph.countGraphs());
}


No.10 generated result --------------------------


    @Test
    public void countGraphsTest() {
        Graph<Integer> graph = new Graph<>();
        graph.addEdge(1, 2);
        graph.addEdge(2, 3);
        graph.addEdge(2, 4);
        graph.addEdge(3, 5);
        
        assertEquals(2, graph.countGraphs());
    }



