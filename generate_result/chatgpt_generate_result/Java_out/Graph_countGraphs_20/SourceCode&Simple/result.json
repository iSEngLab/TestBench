{
    "project_name": "Java",
    "file_name": "ConnectedComponent.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/ConnectedComponent.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Main method used for counting the connected components. Iterates through\n     * the array of nodes to do a depth first search to get all nodes of the\n     * graph from the actual node. These nodes are added to the array\n     * markedNodes and will be ignored if they are chosen in the nodeList.\n     *\n     * @return returns the amount of unconnected graphs\n     */",
    "source_code": "\npublic int countGraphs() {\n    int count = 0;\n    Set<Node> markedNodes = new HashSet<Node>();\n\n    for (Node n : nodeList) {\n        if (!markedNodes.contains(n)) {\n            markedNodes.add(n);\n            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));\n            count++;\n        }\n    }\n\n    return count;\n}\n",
    "class_name": "Graph",
    "method_name": "countGraphs",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"B\", \"C\");\n    graph.addEdge(\"D\", \"E\");\n    assertEquals(2, graph.countGraphs());\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"B\", \"C\");\n    graph.addEdge(\"C\", \"D\");\n    graph.addEdge(\"E\", \"F\");\n    graph.addEdge(\"G\", \"H\");\n    graph.addEdge(\"H\", \"I\");\n    graph.addEdge(\"I\", \"J\");\n\n    int expectedResult = 4;\n    int actualResult = graph.countGraphs();\n\n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    graph.addNode(\"A\");\n    graph.addNode(\"B\");\n    graph.addEdge(\"A\", \"B\");\n    graph.addNode(\"C\");\n    graph.addNode(\"D\");\n    graph.addEdge(\"C\", \"D\");\n    assertEquals(2, graph.countGraphs());\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph g = new Graph();\n    g.addEdge(\"A\", \"B\");\n    g.addEdge(\"B\", \"C\");\n    g.addEdge(\"D\", \"E\");\n    g.addEdge(\"F\", \"G\");\n    g.addEdge(\"H\", \"I\");\n    int result = g.countGraphs();\n    assertEquals(3, result);\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"B\", \"C\");\n    graph.addEdge(\"C\", \"A\");\n    assertEquals(1, graph.countGraphs());\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"B\", \"C\");\n    \n    int actualResult = graph.countGraphs();\n    assertEquals(1, actualResult);\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    graph.addEde(\"A\", \"B\");\n    graph.addEde(\"B\", \"C\");\n    graph.addEde(\"D\", \"E\");\n    \n    int result = graph.countGraphs();\n    \n    assertEquals(2, result);\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"B\", \"C\");\n    graph.addEdge(\"C\", \"D\");\n    graph.addEdge(\"E\", \"F\");\n    assertEquals(2, graph.countGraphs());\n}",
        "ArrayList<Node> nodeList = new ArrayList<>();\nConnectedComponent connectedComponent = new ConnectedComponent();\n\nGraph.Node node1 = connectedComponent.new Node(\"A\");\nGraph.Node node2 = connectedComponent.new Node(\"B\");\nGraph.Node node3 = connectedComponent.new Node(\"C\");\n\nnodeList.add(node1);\nnodeList.add(node2);\nnodeList.add(node3);\n\nGraph graph = new Graph(nodeList, new ArrayList<>());\ngraph.addEdge(node1, node2);\ngraph.addEdge(node2, node3);\ngraph.addEdge(node3, node1);\n\nassertEquals(1, graph.countGraphs());",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    \n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"B\", \"C\");\n    graph.addEdge(\"C\",\"D\");\n    graph.addEdge(\"E\",\"F\");\n    \n    int result = graph.countGraphs();\n    assertEquals(2, result);\n}"
    ]
}