Source code: 


public int countGraphs() {
    int count = 0;
    Set<Node> markedNodes = new HashSet<Node>();

    for (Node n : nodeList) {
        if (!markedNodes.contains(n)) {
            markedNodes.add(n);
            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));
            count++;
        }
    }

    return count;
}



No.1 generated result --------------------------

@Test
public void countGraphsTest() {
    Graph graph = new Graph();
    graph.addEdge("A", "B");
    graph.addEdge("B", "C");
    graph.addEdge("D", "E");
    assertEquals(2, graph.countGraphs());
}


No.2 generated result --------------------------

@Test
public void countGraphsTest() {
    Graph graph = new Graph();
    graph.addEdge("A", "B");
    graph.addEdge("B", "C");
    graph.addEdge("C", "D");
    graph.addEdge("E", "F");
    graph.addEdge("G", "H");
    graph.addEdge("H", "I");
    graph.addEdge("I", "J");

    int expectedResult = 4;
    int actualResult = graph.countGraphs();

    assertEquals(expectedResult, actualResult);
}


No.3 generated result --------------------------

@Test
public void countGraphsTest() {
    Graph graph = new Graph();
    graph.addNode("A");
    graph.addNode("B");
    graph.addEdge("A", "B");
    graph.addNode("C");
    graph.addNode("D");
    graph.addEdge("C", "D");
    assertEquals(2, graph.countGraphs());
}


No.4 generated result --------------------------

@Test
public void countGraphsTest() {
    Graph g = new Graph();
    g.addEdge("A", "B");
    g.addEdge("B", "C");
    g.addEdge("D", "E");
    g.addEdge("F", "G");
    g.addEdge("H", "I");
    int result = g.countGraphs();
    assertEquals(3, result);
}


No.5 generated result --------------------------

@Test
public void countGraphsTest() {
    Graph graph = new Graph();
    graph.addEdge("A", "B");
    graph.addEdge("B", "C");
    graph.addEdge("C", "A");
    assertEquals(1, graph.countGraphs());
}


No.6 generated result --------------------------

@Test
public void countGraphsTest() {
    Graph graph = new Graph();
    graph.addEdge("A", "B");
    graph.addEdge("B", "C");
    
    int actualResult = graph.countGraphs();
    assertEquals(1, actualResult);
}


No.7 generated result --------------------------

@Test
public void countGraphsTest() {
    Graph graph = new Graph();
    graph.addEde("A", "B");
    graph.addEde("B", "C");
    graph.addEde("D", "E");
    
    int result = graph.countGraphs();
    
    assertEquals(2, result);
}


No.8 generated result --------------------------

@Test
public void countGraphsTest() {
    Graph graph = new Graph();
    graph.addEdge("A", "B");
    graph.addEdge("B", "C");
    graph.addEdge("C", "D");
    graph.addEdge("E", "F");
    assertEquals(2, graph.countGraphs());
}


No.9 generated result --------------------------

ArrayList<Node> nodeList = new ArrayList<>();
ConnectedComponent connectedComponent = new ConnectedComponent();

Graph.Node node1 = connectedComponent.new Node("A");
Graph.Node node2 = connectedComponent.new Node("B");
Graph.Node node3 = connectedComponent.new Node("C");

nodeList.add(node1);
nodeList.add(node2);
nodeList.add(node3);

Graph graph = new Graph(nodeList, new ArrayList<>());
graph.addEdge(node1, node2);
graph.addEdge(node2, node3);
graph.addEdge(node3, node1);

assertEquals(1, graph.countGraphs());


No.10 generated result --------------------------

@Test
public void countGraphsTest() {
    Graph graph = new Graph();
    
    graph.addEdge("A", "B");
    graph.addEdge("B", "C");
    graph.addEdge("C","D");
    graph.addEdge("E","F");
    
    int result = graph.countGraphs();
    assertEquals(2, result);
}


