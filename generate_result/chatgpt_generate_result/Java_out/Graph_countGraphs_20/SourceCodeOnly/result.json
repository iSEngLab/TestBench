{
    "project_name": "Java",
    "file_name": "ConnectedComponent.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/ConnectedComponent.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Main method used for counting the connected components. Iterates through\n     * the array of nodes to do a depth first search to get all nodes of the\n     * graph from the actual node. These nodes are added to the array\n     * markedNodes and will be ignored if they are chosen in the nodeList.\n     *\n     * @return returns the amount of unconnected graphs\n     */",
    "source_code": "\npublic int countGraphs() {\n    int count = 0;\n    Set<Node> markedNodes = new HashSet<Node>();\n\n    for (Node n : nodeList) {\n        if (!markedNodes.contains(n)) {\n            markedNodes.add(n);\n            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));\n            count++;\n        }\n    }\n\n    return count;\n}\n",
    "class_name": "Graph",
    "method_name": "countGraphs",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    Node nodeA = new Node(\"A\");\n    Node nodeB = new Node(\"B\");\n    Node nodeC = new Node(\"C\");\n    graph.addEdge(nodeA, nodeB);\n    graph.addEdge(nodeB, nodeC);\n    graph.addEdge(nodeC, nodeA);\n    \n    int expectedCount = 1;\n    int actualCount = graph.countGraphs();\n    \n    assertEquals(expectedCount, actualCount);\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    Node node1 = new Node(1);\n    Node node2 = new Node(2);\n    Node node3 = new Node(3);\n    graph.addVertex(node1);\n    graph.addVertex(node2);\n    graph.addVertex(node3);\n    \n    graph.addEdge(node1, node2);\n    graph.addEdge(node2, node3);\n    \n    assertEquals(1, graph.countGraphs());\n}",
        "public Graph graph = new Graph();\nint expected = 2;\nint actual = graph.countGraphs();\nassertEquals(expected, actual);",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    graph.addNode(new Node(1));\n    graph.addNode(new Node(2));\n    graph.addNode(new Node(3));\n    graph.addEdge(1, 2);\n    graph.addEdge(2, 3);\n    assertEquals(2, graph.countGraphs());\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    graph.addNode(new Node(1));\n    graph.addNode(new Node(2));\n    graph.addNode(new Node(3));\n    graph.addEdge(1, 2);\n    graph.addEdge(2, 3);\n    int expected = 1;\n    int actual = graph.countGraphs();\n    assertEquals(expected, actual);\n}\n",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    graph.addNode(1);\n    graph.addNode(2);\n    graph.addNode(3);\n    graph.addEdge(1, 2);\n    graph.addEdge(2, 3);\n    assertEquals(1, graph.countGraphs());\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    // Create nodes and add them to the graph\n    Node node1 = new Node(1);\n    Node node2 = new Node(2);\n    // Add edges between nodes\n    graph.addEdge(node1, node2);\n    \n    // Call the countGraphs method\n    int result = graph.countGraphs();\n    \n    // Assert the result\n    assertEquals(1, result);\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    Node node1 = new Node(1);\n    Node node2 = new Node(2);\n    Node node3 = new Node(3);\n    \n    graph.addEdge(node1, node2);\n    graph.addEdge(node2, node3);\n    graph.addEdge(node3, node1);\n    \n    int expected = 1;\n    int actual = graph.countGraphs();\n    \n    assertEquals(expected, actual);\n}",
        "@Test\npublic void countGraphsTest() {\n    int expected = 3;\n    int actual = countGraphs();\n    assertEquals(expected, actual);\n}",
        "@Test\n    public void countGraphsTest() {\n        Graph graph = new Graph();\n        graph.addNode(node1);\n        graph.addNode(node2);\n        graph.addNode(node3);\n        \n        graph.addEdge(node1, node2);\n        graph.addEdge(node2, node3);\n        graph.addEdge(node3, node1);\n        \n        int result = graph.countGraphs();\n        assertEquals(1, result);\n    }"
    ]
}