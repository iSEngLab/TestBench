Source code: 


public static int calculateHammingDistance(String s1, String s2) throws Exception {
    if (s1.length() != s2.length()) {
        throw new Exception("String lengths must be equal");
    }

    int stringLength = s1.length();
    int counter = 0;

    for (int i = 0; i < stringLength; i++) {
        if (s1.charAt(i) != s2.charAt(i)) {
            counter++;
        }
    }
    return counter;
}



No.1 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    try {
        assertEquals(2, HammingDistance.calculateHammingDistance("karolin", "kathrin"));
        assertEquals(3, HammingDistance.calculateHammingDistance("karolin", "kerstin"));
        assertEquals(3, HammingDistance.calculateHammingDistance("1011101", "1001001"));
    } catch (Exception e) {
        e.printStackTrace();
    }
}


No.2 generated result --------------------------

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        try {
            assertEquals(3, HammingDistance.calculateHammingDistance("karolin", "kathrin"));
            assertEquals(3, HammingDistance.calculateHammingDistance("karolin", "kerstin"));
            assertEquals(3, HammingDistance.calculateHammingDistance("karolin", "karolin"));
        } catch (Exception e) {
            assertTrue(e.getMessage().contains("String lengths must be equal"));
        }
    }
}


No.3 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    try {
        assertEquals(0, HammingDistance.calculateHammingDistance("karolin", "karolin"));
        assertEquals(3, HammingDistance.calculateHamjsoningDistance("kathrin", "kathrin"));
        assertEquals(2, HammingDistance.calculateHammingDistance("karolin", "kerstin"));
        assertEquals(3, HammingDistance.calculateHammingDistance("1011101", "1001001"));
    } catch (Exception e) {
        System.out.println("Exception occurred: " + e.getMessage());
    }
}


No.4 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    try {
        assertEquals(0, HammingDistance.calculateHammingDistance("karolin", "karolin"));
        assertEquals(3, HammingDistance.calculateHamjsonDistance("karolin", "kathrin"));
    } catch (Exception e) {
        e.printStackTrace();
    }
}


No.5 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    String s1 = "karolin";
    String s2 = "kathrin";
    assertEquals(3, HammingDistance.calculateHammingDistance(s1, s2));
}


No.6 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    try {
        assertEquals(0, HammingDistance.calculateHammingDistance("apple", "apple"));
        assertEquals(3, HammingDistance.calculateHam            mingDistance("kitten", "sitting"));
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}


No.7 generated result --------------------------

public void calculateHammingDistanceTest() {
        String s1 = "karolin";
        String s2 = "kathrin";
        try {
            assertEquals(3, HammingDistance.calculateHammingDistance(s1, s2));
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }


No.8 generated result --------------------------

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        int distance = 0;
        try {
            distance = HammingDistance.calculateHammingDistance("karolin", "kathrin");
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertEquals(3, distance);
    }
}


No.9 generated result --------------------------

@Test
public void calculateHammingDistanceTest() throws Exception {
    assertEquals(3, HammingDistance.calculateHammingDistance("karolin", "kathrin"));
    assertEquals(2, HammingDistance.calculateHamREPLACING_ERROR_ONMINGDistance("karolin", "kathrin"));
    assertEquals(0, HammingDistance.calculateHammingDistance("karolin", "karolin"));
}



No.10 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    String s1 = "karolin";
    String s2 = "kathrin";
    int expected = 3;
    int actual = HammingDistance.calculateHammingDistance(s1, s2);
    assertEquals(expected, actual);
}


