{
    "project_name": "Java",
    "file_name": "HammingDistance.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/strings/HammingDistance.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.strings",
    "docstring": "/**\n     * calculate the hamming distance between two strings of equal length\n     *\n     * @param s1 the first string\n     * @param s2 the second string\n     * @return {@code int} hamming distance\n     * @throws Exception\n     */",
    "source_code": "\npublic static int calculateHammingDistance(String s1, String s2) throws Exception {\n    if (s1.length() != s2.length()) {\n        throw new Exception(\"String lengths must be equal\");\n    }\n\n    int stringLength = s1.length();\n    int counter = 0;\n\n    for (int i = 0; i < stringLength; i++) {\n        if (s1.charAt(i) != s2.charAt(i)) {\n            counter++;\n        }\n    }\n    return counter;\n}\n",
    "class_name": "HammingDistance",
    "method_name": "calculateHammingDistance",
    "arguments": [
        "String s1",
        "String s2"
    ],
    "generate_test": [
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        assertEquals(3, HammingDistance.calculateHammingDistance(\"karolin\", \"kathrin\"));\n        assertEquals(1, HammingDistance.calculateHammingDistance(\"karolin\", \"karolin\"));\n        assertEquals(2, HammingDistance.calculateHammingDistance(\"karolin\", \"kerstin\"));\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}",
        "public void calculateHammingDistanceTest() {\n    try {\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"abcde\", \"abcde\"));\n        assertEquals(3, HammingDistance.calculateHamjsonDistance(\"karolin\", \"kathrin\"));\n        assertEquals(1, HammingDistance.calculateHammingDistance(\"karolin\", \"kerstin\"));\n    } catch (Exception e) {\n        fail(\"Exception not expected\");\n    }\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        assertEquals(3, HammingDistance.calculateHammingDistance(\"karolin\", \"kathrin\"));\n        assertEquals(3, HamjsonfinDistance.calculateHammingDistance(\"karolin\", \"kerstin\"));\n        assertEquals(3, HammingDistance.calculateHammingDistance(\"1011101\", \"1001001\"));\n    } catch (Exception e) {\n        fail(\"An exception should not have been thrown\");\n    }\n}",
        "\npublic void calculateHammingDistanceTest() {\n    try {\n        int result = HammingDistance.calculateHammingDistance(\"karolin\", \"kathrin\");\n        assertEquals(3, result);\n    } catch (Exception e) {\n        fail(\"An exception should not have been thrown\");\n    }\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    String s1 = \"karolin\";\n    String s2 = \"kathrin\";\n    try {\n        int result = HammingDistance.calculateHammingDistance(s1, s2);\n        assertEquals(3, result);\n    } catch (Exception e) {\n        fail(\"Exception not expected\" + e.getMessage());\n    }\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    String s1 = \"karolin\";\n    String s2 = \"karolin\";\n    assertThrows(Exception.class, () -> {\n        HammingDistance.calculateHammingDistance(s1, s2);\n    });\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    String s1 = \"10101\";\n    String s2 = \"11100\";\n    int expected = 2;\n    int actual = HammingDistance.calculateHammingDistance(s1, s2);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        assertEquals(2, HammingDistance.calculateHammingDistance(\"karolin\", \"kathrin\"));\n    } catch (Exception e) {\n        fail(\"Exception should not be thrown\");\n    }\n}",
        "String s1 = \"karolin\";\nString s2 = \"kathrin\";\nint expected = 3;\nint result = HammingDistance.calculateHammingDistance(s1, s2);\nassertEquals(expected, result);",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        String s1 = \"karolin\";\n        String s2 = \"kathrin\";\n        int expected = 3;\n        int actual = HammingDistance.calculateHammingDistance(s1, s2);\n        assertEquals(expected, actual);\n    } catch (Exception e) {\n        fail(\"An exception was thrown\");\n    }\n}"
    ]
}