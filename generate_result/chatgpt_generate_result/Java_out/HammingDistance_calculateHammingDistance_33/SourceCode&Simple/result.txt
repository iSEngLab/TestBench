Source code: 


public static int calculateHammingDistance(String s1, String s2) throws Exception {
    if (s1.length() != s2.length()) {
        throw new Exception("String lengths must be equal");
    }

    int stringLength = s1.length();
    int counter = 0;

    for (int i = 0; i < stringLength; i++) {
        if (s1.charAt(i) != s2.charAt(i)) {
            counter++;
        }
    }
    return counter;
}



No.1 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    try {
        assertEquals(3, HammingDistance.calculateHammingDistance("karolin", "kathrin"));
        assertEquals(1, HammingDistance.calculateHammingDistance("karolin", "karolin"));
        assertEquals(2, HammingDistance.calculateHammingDistance("karolin", "kerstin"));
    } catch (Exception e) {
        e.printStackTrace();
    }
}


No.2 generated result --------------------------

public void calculateHammingDistanceTest() {
    try {
        assertEquals(0, HammingDistance.calculateHammingDistance("abcde", "abcde"));
        assertEquals(3, HammingDistance.calculateHamjsonDistance("karolin", "kathrin"));
        assertEquals(1, HammingDistance.calculateHammingDistance("karolin", "kerstin"));
    } catch (Exception e) {
        fail("Exception not expected");
    }
}


No.3 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    try {
        assertEquals(3, HammingDistance.calculateHammingDistance("karolin", "kathrin"));
        assertEquals(3, HamjsonfinDistance.calculateHammingDistance("karolin", "kerstin"));
        assertEquals(3, HammingDistance.calculateHammingDistance("1011101", "1001001"));
    } catch (Exception e) {
        fail("An exception should not have been thrown");
    }
}


No.4 generated result --------------------------


public void calculateHammingDistanceTest() {
    try {
        int result = HammingDistance.calculateHammingDistance("karolin", "kathrin");
        assertEquals(3, result);
    } catch (Exception e) {
        fail("An exception should not have been thrown");
    }
}


No.5 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    String s1 = "karolin";
    String s2 = "kathrin";
    try {
        int result = HammingDistance.calculateHammingDistance(s1, s2);
        assertEquals(3, result);
    } catch (Exception e) {
        fail("Exception not expected" + e.getMessage());
    }
}


No.6 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    String s1 = "karolin";
    String s2 = "karolin";
    assertThrows(Exception.class, () -> {
        HammingDistance.calculateHammingDistance(s1, s2);
    });
}


No.7 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    String s1 = "10101";
    String s2 = "11100";
    int expected = 2;
    int actual = HammingDistance.calculateHammingDistance(s1, s2);
    assertEquals(expected, actual);
}


No.8 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    try {
        assertEquals(2, HammingDistance.calculateHammingDistance("karolin", "kathrin"));
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}


No.9 generated result --------------------------

String s1 = "karolin";
String s2 = "kathrin";
int expected = 3;
int result = HammingDistance.calculateHammingDistance(s1, s2);
assertEquals(expected, result);


No.10 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    try {
        String s1 = "karolin";
        String s2 = "kathrin";
        int expected = 3;
        int actual = HammingDistance.calculateHammingDistance(s1, s2);
        assertEquals(expected, actual);
    } catch (Exception e) {
        fail("An exception was thrown");
    }
}


