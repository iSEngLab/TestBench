{
    "project_name": "Java",
    "file_name": "HammingDistance.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/strings/HammingDistance.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.strings",
    "docstring": "/**\n     * calculate the hamming distance between two strings of equal length\n     *\n     * @param s1 the first string\n     * @param s2 the second string\n     * @return {@code int} hamming distance\n     * @throws Exception\n     */",
    "source_code": "\npublic static int calculateHammingDistance(String s1, String s2) throws Exception {\n    if (s1.length() != s2.length()) {\n        throw new Exception(\"String lengths must be equal\");\n    }\n\n    int stringLength = s1.length();\n    int counter = 0;\n\n    for (int i = 0; i < stringLength; i++) {\n        if (s1.charAt(i) != s2.charAt(i)) {\n            counter++;\n        }\n    }\n    return counter;\n}\n",
    "class_name": "HammingDistance",
    "method_name": "calculateHammingDistance",
    "arguments": [
        "String s1",
        "String s2"
    ],
    "generate_test": [
        "public class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        try {\n            assertEquals(2, HammingDistance.calculateHammingDistance(\"karolin\", \"kathrin\"));\n            assertEquals(3, HammingDistance.calculateHammingDistance(\"karolin\", \"kerstin\"));\n            assertEquals(3, HammingDistance.calculateHammingDistance(\"1011101\", \"1001001\"));\n            assertEquals(0, HammingDistance.calculateHammingDistance(\"karolin\", \"karolin\"));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
        "String s1 = \"karolin\";\nString s2 = \"kathrin\";\nassertEquals(3, HammingDistance.calculateHammingDistance(s1, s2));",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        assertEquals(2, calculateHammingDistance(\"karolin\", \"kathrin\"));\n        assertEquals(3, calculateHam            mingDistance(\"karolin\", \"kerstin\"));\n    } catch(Exception e) {\n        System.out.println(\"Exception caught: \" + e.getMessage());\n    }\n}",
        "public void calculateHammingDistanceTest() {\n    assertEquals(2, HammingDistance.calculateHammingDistance(\"karolin\", \"kathrin\"));\n    assertEquals(3, HammingDistance.calculateHamjsonDistance(\"karolin\", \"kerlin\"));\n    assertEquals(4, HammingDistance.calculateHammingDistance(\"kathrin\", \"kerlin\"));\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        int distance = HammingDistance.calculateHammingDistance(\"abcde\", \"abcdf\");\n        assertEquals(1, distance);\n    } catch (Exception e) {\n        fail(\"Unexpected exception occurred\");\n    }\n}",
        "assertEquals(0, calculateHammingDistance(\"karolin\", \"kathrin\"));",
        "public void calculateHammingDistanceTest() {\n    // Arrange\n    String s1 = \"karolin\";\n    String s2 = \"kathrin\";\n    \n    // Act\n    int result = calculateHammingDistance(s1, s2);\n    \n    // Assert\n    assertEquals(3, result);\n}",
        "\n    String s1 = \"karolin\";\n    String s2 = \"kathrin\";\n    int expectedDistance = 3;\n    int actualDistance = HammingDistance.calculateHammingDistance(s1, s2);\n    assertEquals(expectedDistance, actualDistance);\n    System.out.println(\"The Hamming distance between \" + s1 + \" and \" + s2 + \" is: \" + actualDistance);",
        "@Test\npublic void calculateHammingDistanceTest() {\n    String s1 = \"karolin\";\n    String s2 = \"kathrin\";\n    int expectedDistance = 3;\n    int actualDistance = HammingDistance.calculateHammingDistance(s1, s2);\n    assertEquals(expectedDistance, actualDistance);\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    String s1 = \"karolin\";\n    String s2 = \"kathrin\";\n    int expected = 3;\n    int actual = HammingDistance.calculateHammingDistance(s1, s2);\n    assertEquals(expected, actual);\n}"
    ]
}