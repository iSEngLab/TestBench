Source code: 


public static int calculateHammingDistance(String s1, String s2) throws Exception {
    if (s1.length() != s2.length()) {
        throw new Exception("String lengths must be equal");
    }

    int stringLength = s1.length();
    int counter = 0;

    for (int i = 0; i < stringLength; i++) {
        if (s1.charAt(i) != s2.charAt(i)) {
            counter++;
        }
    }
    return counter;
}



No.1 generated result --------------------------

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        try {
            assertEquals(2, HammingDistance.calculateHammingDistance("karolin", "kathrin"));
            assertEquals(3, HammingDistance.calculateHammingDistance("karolin", "kerstin"));
            assertEquals(3, HammingDistance.calculateHammingDistance("1011101", "1001001"));
            assertEquals(0, HammingDistance.calculateHammingDistance("karolin", "karolin"));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


No.2 generated result --------------------------

String s1 = "karolin";
String s2 = "kathrin";
assertEquals(3, HammingDistance.calculateHammingDistance(s1, s2));


No.3 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    try {
        assertEquals(2, calculateHammingDistance("karolin", "kathrin"));
        assertEquals(3, calculateHam            mingDistance("karolin", "kerstin"));
    } catch(Exception e) {
        System.out.println("Exception caught: " + e.getMessage());
    }
}


No.4 generated result --------------------------

public void calculateHammingDistanceTest() {
    assertEquals(2, HammingDistance.calculateHammingDistance("karolin", "kathrin"));
    assertEquals(3, HammingDistance.calculateHamjsonDistance("karolin", "kerlin"));
    assertEquals(4, HammingDistance.calculateHammingDistance("kathrin", "kerlin"));
}


No.5 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    try {
        int distance = HammingDistance.calculateHammingDistance("abcde", "abcdf");
        assertEquals(1, distance);
    } catch (Exception e) {
        fail("Unexpected exception occurred");
    }
}


No.6 generated result --------------------------

assertEquals(0, calculateHammingDistance("karolin", "kathrin"));


No.7 generated result --------------------------

public void calculateHammingDistanceTest() {
    // Arrange
    String s1 = "karolin";
    String s2 = "kathrin";
    
    // Act
    int result = calculateHammingDistance(s1, s2);
    
    // Assert
    assertEquals(3, result);
}


No.8 generated result --------------------------


    String s1 = "karolin";
    String s2 = "kathrin";
    int expectedDistance = 3;
    int actualDistance = HammingDistance.calculateHammingDistance(s1, s2);
    assertEquals(expectedDistance, actualDistance);
    System.out.println("The Hamming distance between " + s1 + " and " + s2 + " is: " + actualDistance);


No.9 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    String s1 = "karolin";
    String s2 = "kathrin";
    int expectedDistance = 3;
    int actualDistance = HammingDistance.calculateHammingDistance(s1, s2);
    assertEquals(expectedDistance, actualDistance);
}


No.10 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    String s1 = "karolin";
    String s2 = "kathrin";
    int expected = 3;
    int actual = HammingDistance.calculateHammingDistance(s1, s2);
    assertEquals(expected, actual);
}


