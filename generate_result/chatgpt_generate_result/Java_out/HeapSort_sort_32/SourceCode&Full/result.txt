Source code: 


@Override
public <T extends Comparable<T>> T[] sort(T[] unsorted) {
    int n = unsorted.length;
    heapify(unsorted, n);
    while (n > 1) {
        swap(unsorted, 1, n--);
        siftDown(unsorted, 1, n);
    }
    return unsorted;
}



No.1 generated result --------------------------

@Test
    public void sortTest() {
        Integer[] unsorted = {12, 11, 13, 5, 6, 7};
        HeapSort heapSort = new HeapSort();
        heapSort.sort(unsorted);
        Integer[] expected = {5, 6, 7, 11, 12, 13};
        assertArrayEquals(expected, unsorted);
    }


No.2 generated result --------------------------

@Test
public void sortTest() {
    HeapSort heapSort = new HeapSort();
    Integer[] unsorted = {12, 11, 13, 5, 6, 7};
    Integer[] sorted = heapSort.sort(unsorted);
    Integer[] expected = {5, 6, 7, 11, 12, 13};
    assertArrayEquals(expected, sorted);
}


No.3 generated result --------------------------

@Test
public void sortTest() {
    Integer[] input = {4, 2, 9, 6, 23, 12, 34, 0, 1};
    HeapSort heapSort = new HeapSort();
    Integer[] expected = {0, 1, 2, 4, 6, 9, 12, 23, 34};
    assertArrayEquals(expected, heapSort.sort(input));
}


No.4 generated result --------------------------

@Test
public void sortTest() {
    Integer[] input = {4, 2, 9, 10, 1, 5};
    HeapSort heapSort = new HeapSort();
    Integer[] expected = {1, 2, 4, 5, 9, 10};
    assertArrayEquals(expected, heapSort.sort(input));
}


No.5 generated result --------------------------

@Test
public void sortTest() {
    Integer[] unsorted = {4, 7, 1, 9, 3, 5};
    Integer[] expected = {1, 3, 4, 5, 7, 9};
    HeapSort heapSort = new HeapSort();
    Integer[] actual = heapSort.sort(unsorted);
    assertArrayEquals(expected, actual);
}


No.6 generated result --------------------------

@Test
public void sortTest() {
    Integer[] arr = {12, 4, 5, 7, 3, 1, 6};
    HeapSort heapSort = new HeapSort();
    heapSort.sort(arr);
    assertArrayEquals(new Integer[]{1, 3, 4, 5, 6, 7, 12}, arr);
}


No.7 generated result --------------------------

@Test
public void sortTest() {
    Integer[] unsorted = {12, 11, 13, 5, 6, 7};
    Integer[] sorted = {5, 6, 7, 11, 12, 13};
    assertArrayEquals(sorted, new HeapSort().sort(unsorted));
}


No.8 generated result --------------------------

@Test
public void sortTest() {
    HeapSort heapSort = new HeapSort();
    Integer[] unsortedArray = {4, 2, 7, 1, 9, 5};
    Integer[] sortedArray = heapSort.sort(unsortedArray);
    Integer[] expectedArray = {1, 2, 4, 5, 7, 9};
    assertArrayEquals(expectedArray, sortedArray);
}


No.9 generated result --------------------------

@Test
public void sortTest() {
    // Given
    Integer[] unsorted = new Integer[]{4, 2, 0, 5, 3, 1};
    
    // When
    HeapSort heapSort = new HeapSort();
    Integer[] sorted = heapSort.sort(unsorted);
    
    // Then
    Integer[] expected = new Integer[]{0, 1, 2, 3, 4, 5};
    assertArrayEquals(expected, sorted);
}


No.10 generated result --------------------------

@Test
public void sortTest() {
    Integer[] inputArray = {4, 3, 1, 5, 2};
    Integer[] expectedOutput = {1, 2, 3, 4, 5};
    HeapSort heapSort = new HeapSort();
    assertArrayEquals(expectedOutput, heapSort.sort(inputArray));
}


