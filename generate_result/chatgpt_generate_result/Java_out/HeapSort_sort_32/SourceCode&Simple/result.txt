Source code: 


@Override
public <T extends Comparable<T>> T[] sort(T[] unsorted) {
    int n = unsorted.length;
    heapify(unsorted, n);
    while (n > 1) {
        swap(unsorted, 1, n--);
        siftDown(unsorted, 1, n);
    }
    return unsorted;
}



No.1 generated result --------------------------

@Test
public void sortTest() {
    HeapSort heapSort = new HeapSort();
    Integer[] unsorted = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};
    Integer[] expected = {1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9};

    assertArrayEquals(expected, heapSort.sort(unsorted));
}


No.2 generated result --------------------------

public void sortTest() {
        HeapSort heapSort = new HeapSort();
        Integer[] unsorted = {4, 2, 9, 6, 23, 12, 34, 0, 1};
        Integer[] sorted = heapSort.sort(unsorted);
        Integer[] expected = {0, 1, 2, 4, 6, 9, 12, 23, 34};
        assertArrayEquals(expected, sorted);
    }


No.3 generated result --------------------------

Integer[] arr = {9, 5, 7, 6, 1, 2};
HeapSort heapSort = new HeapSort();
Integer[] sortedArr = heapSort.sort(arr);
Integer[] expected = {1, 2, 5, 6, 7, 9};
assertArrayEquals(expected, sortedArr);


No.4 generated result --------------------------

@Test
public void sortTest() {
    HeapSort heapSort = new HeapSort();
    Integer[] unsorted = {6, 3, 8, 4, 1};
    Integer[] expected = {1, 3, 4, 6, 8};
    assertArrayEquals(expected, heapSort.sort(unsorted));
}


No.5 generated result --------------------------

@Test
public void sortTest() {
    HeapSort<Integer> heapSort = new HeapSort<>();
    Integer[] unsorted = {4, 2, 9, 6, 23, 12, 34, 0, 1};
    Integer[] sorted = {0, 1, 2, 4, 6, 9, 12, 23, 34};
    assertArrayEquals(sorted, heapSort.sort(unsorted));
}


No.6 generated result --------------------------

@Test
public void sortTest() {
    Integer[] unsorted = {9, 5, 1, 7, 3, 8, 4, 2, 6};
    Integer[] expected = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    assertArrayEquals(expected, new HeapSort().sort(unsorted));
}


No.7 generated result --------------------------

@Test
public void sortTest() {
    // given
    Integer[] inputArray = {4, 2, 9, 6, 23, 12, 34, 0, 1};
    HeapSort<Integer> heapSort = new HeapSort<>();

    // when
    Integer[] sortedArray = heapSort.sort(inputArray);

    // then
    Integer[] expectedArray = {0, 1, 2, 4, 6, 9, 12, 23, 34};
    assertArrayEquals(expectedArray, sortedArray);
}


No.8 generated result --------------------------

@Test
public void sortTest() {
    Integer[] input = {5, 3, 8, 6, 2};
    Integer[] expected = {2, 3, 5, 6, 8};
    HeapSort heapSort = new HeapSort();
    Integer[] result = heapSort.sort(input);
    assertArrayEquals(expected, result);
}


No.9 generated result --------------------------

@Test
public void sortTest() {
    HeapSort<Integer> heapSort = new HeapSort<>();
    Integer[] unsorted = {4, 2, 6, 1, 9, 3};
    Integer[] sorted = heapSort.sort(unsorted);
    Integer[] expected = {1, 2, 3, 4, 6, 9};
    assertArrayEquals(expected, sorted);
}


No.10 generated result --------------------------

@Test
public void sortTest() {
    Integer[] unsorted = {4, 2, 9, 6, 23, 12, 34, 0, 1};
    HeapSort<Integer> heapSort = new HeapSort<>();
    Integer[] sorted = heapSort.sort(unsorted);
    Integer[] expected = {0, 1, 2, 4, 6, 9, 12, 23, 34};
    assertArrayEquals(expected, sorted);
}


