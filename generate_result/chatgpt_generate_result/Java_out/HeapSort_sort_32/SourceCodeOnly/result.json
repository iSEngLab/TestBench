{
    "project_name": "Java",
    "file_name": "HeapSort.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/sorts/HeapSort.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.sorts",
    "docstring": "/**\n     * For simplicity, we are considering the heap root index as 1 instead of 0.\n     * It simplifies future calculations. Because of that we are decreasing the\n     * provided indexes by 1 in {@link #swap(Object[], int, int)} and\n     * {@link #less(Comparable[], int, int)} functions.\n     */",
    "source_code": "\n@Override\npublic <T extends Comparable<T>> T[] sort(T[] unsorted) {\n    int n = unsorted.length;\n    heapify(unsorted, n);\n    while (n > 1) {\n        swap(unsorted, 1, n--);\n        siftDown(unsorted, 1, n);\n    }\n    return unsorted;\n}\n",
    "class_name": "HeapSort",
    "method_name": "sort",
    "arguments": [
        "T unsorted"
    ],
    "generate_test": [
        "@Test\npublic void sortTest() {\n    Integer[] unsorted = {3, 7, 2, 8, 1, 9};\n    Integer[] expected = {1, 2, 3, 7, 8, 9};\n    assertArrayEquals(expected, new HeapSort().sort(unsorted));\n}",
        "@Test\npublic void sortTest() {\n    Integer[] unsorted = {4, 2, 6, 1, 7};\n    HeapSort hs = new HeapSort();\n    Integer[] sorted = hs.sort(unsorted);\n    Integer[] expected = {1, 2, 4, 6, 7};\n    assertArrayEquals(expected, sorted);\n}",
        "\n@Test\npublic void sortTest() {\n    Integer[] unsorted = {4, 2, 6, 1, 5, 3};\n    Integer[] sorted = {1, 2, 3, 4, 5, 6};\n    HeapSort heapSort = new HeapSort();\n    assertArrayEquals(sorted, heapSort.sort(unsorted));\n}",
        "@Test\npublic void sortTest() {\n    Integer[] input = { 5, 3, 8, 7, 1, 2, 4, 6 };\n    Integer[] expected = { 1, 2, 3, 4, 5, 6, 7, 8 };\n    assertArrayEquals(expected, new HeapSort().sort(input));\n}",
        "@Test\npublic void sortTest() {\n    Integer[] unsorted = {5, 3, 8, 2, 7, 1};\n    Integer[] expected = {1, 2, 3, 5, 7, 8};\n    HeapSort heapSort = new HeapSort();\n    Integer[] sorted = heapSort.sort(unsorted);\n    assertArrayEquals(expected, sorted);\n}",
        "@Test\npublic void sortTest() {\n    Integer[] unsorted = {3, 7, 1, 5, 4, 6, 2};\n    Integer[] expected = {1, 2, 3, 4, 5, 6, 7};\n    HeapSort heapSort = new HeapSort();\n    assertArrayEquals(expected, heapSort.sort(unsorted));\n}",
        "@Test\npublic void sortTest() {\n    HeapSort heapSort = new HeapSort();\n    Integer[] unsorted = {4, 2, 7, 3, 1, 5, 6};\n    Integer[] expected = {1, 2, 3, 4, 5, 6, 7};\n    assertArrayEquals(expected, heapSort.sort(unsorted));\n}",
        "@Test\npublic void sortTest() {\n    Integer[] unsorted = {4, 2, 9, 6, 23, 12, 34, 0, 1};\n    Integer[] expected = {0, 1, 2, 4, 6, 9, 12, 23, 34};\n    HeapSort heapSort = new HeapSort();\n    assertArrayEquals(expected, heapSort.sort(unsorted));\n}",
        "@Test\npublic void sortTest() {\n    HeapSort heapSort = new HeapSort();\n    Integer[] unsorted = {12, 11, 13, 5, 6, 7};\n    Integer[] expected = {5, 6, 7, 11, 12, 13};\n    Integer[] result = heapSort.sort(unsorted);\n    assertArrayEquals(expected, result);\n}",
        "@Test\npublic void sortTest() {\n    Integer[] unsorted = {4, 2, 9, 6, 23, 12, 34, 0, 1};\n    Integer[] expected = {0, 1, 2, 4, 6, 9, 12, 23, 34};\n    HeapSort heapSort = new HeapSort();\n    assertArrayEquals(expected, heapSort.sort(unsorted));\n}"
    ]
}