Source code: 


@Override
public <T extends Comparable<T>> T[] sort(T[] unsorted) {
    int n = unsorted.length;
    heapify(unsorted, n);
    while (n > 1) {
        swap(unsorted, 1, n--);
        siftDown(unsorted, 1, n);
    }
    return unsorted;
}



No.1 generated result --------------------------

@Test
public void sortTest() {
    Integer[] unsorted = {3, 7, 2, 8, 1, 9};
    Integer[] expected = {1, 2, 3, 7, 8, 9};
    assertArrayEquals(expected, new HeapSort().sort(unsorted));
}


No.2 generated result --------------------------

@Test
public void sortTest() {
    Integer[] unsorted = {4, 2, 6, 1, 7};
    HeapSort hs = new HeapSort();
    Integer[] sorted = hs.sort(unsorted);
    Integer[] expected = {1, 2, 4, 6, 7};
    assertArrayEquals(expected, sorted);
}


No.3 generated result --------------------------


@Test
public void sortTest() {
    Integer[] unsorted = {4, 2, 6, 1, 5, 3};
    Integer[] sorted = {1, 2, 3, 4, 5, 6};
    HeapSort heapSort = new HeapSort();
    assertArrayEquals(sorted, heapSort.sort(unsorted));
}


No.4 generated result --------------------------

@Test
public void sortTest() {
    Integer[] input = { 5, 3, 8, 7, 1, 2, 4, 6 };
    Integer[] expected = { 1, 2, 3, 4, 5, 6, 7, 8 };
    assertArrayEquals(expected, new HeapSort().sort(input));
}


No.5 generated result --------------------------

@Test
public void sortTest() {
    Integer[] unsorted = {5, 3, 8, 2, 7, 1};
    Integer[] expected = {1, 2, 3, 5, 7, 8};
    HeapSort heapSort = new HeapSort();
    Integer[] sorted = heapSort.sort(unsorted);
    assertArrayEquals(expected, sorted);
}


No.6 generated result --------------------------

@Test
public void sortTest() {
    Integer[] unsorted = {3, 7, 1, 5, 4, 6, 2};
    Integer[] expected = {1, 2, 3, 4, 5, 6, 7};
    HeapSort heapSort = new HeapSort();
    assertArrayEquals(expected, heapSort.sort(unsorted));
}


No.7 generated result --------------------------

@Test
public void sortTest() {
    HeapSort heapSort = new HeapSort();
    Integer[] unsorted = {4, 2, 7, 3, 1, 5, 6};
    Integer[] expected = {1, 2, 3, 4, 5, 6, 7};
    assertArrayEquals(expected, heapSort.sort(unsorted));
}


No.8 generated result --------------------------

@Test
public void sortTest() {
    Integer[] unsorted = {4, 2, 9, 6, 23, 12, 34, 0, 1};
    Integer[] expected = {0, 1, 2, 4, 6, 9, 12, 23, 34};
    HeapSort heapSort = new HeapSort();
    assertArrayEquals(expected, heapSort.sort(unsorted));
}


No.9 generated result --------------------------

@Test
public void sortTest() {
    HeapSort heapSort = new HeapSort();
    Integer[] unsorted = {12, 11, 13, 5, 6, 7};
    Integer[] expected = {5, 6, 7, 11, 12, 13};
    Integer[] result = heapSort.sort(unsorted);
    assertArrayEquals(expected, result);
}


No.10 generated result --------------------------

@Test
public void sortTest() {
    Integer[] unsorted = {4, 2, 9, 6, 23, 12, 34, 0, 1};
    Integer[] expected = {0, 1, 2, 4, 6, 9, 12, 23, 34};
    HeapSort heapSort = new HeapSort();
    assertArrayEquals(expected, heapSort.sort(unsorted));
}


