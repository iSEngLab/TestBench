Source code: 

// Determinant calculator
public static int determinant(int[][] a, int n) {
    int det = 0, sign = 1, p = 0, q = 0;

    if (n == 1) {
        det = a[0][0];
    } else {
        int[][] b = new int[n - 1][n - 1];
        for (int x = 0; x < n; x++) {
            p = 0;
            q = 0;
            for (int i = 1; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (j != x) {
                        b[p][q++] = a[i][j];
                        if (q % (n - 1) == 0) {
                            p++;
                            q = 0;
                        }
                    }
                }
            }
            det = det + a[0][x] * determinant(b, n - 1) * sign;
            sign = -sign;
        }
    }
    return det;
}



No.1 generated result --------------------------

int[][] matrix = {{4, 7, 6}, {9, 1, 2}, {5, 3, 8}};
assertEquals(96, HillCipher.determinant(matrix, 3));


No.2 generated result --------------------------

@Test
    public void determinantTest() {
        int[][] matrix = {{1, 2}, {3, 4}};
        int n = 2;
        int result = HillCipher.determinant(matrix, n);
        assertEquals(-2, result);
    }


No.3 generated result --------------------------

@Test
public void determinantTest() {
    int[][] a = {{1, 2}, {3, 4}};
    int det = HillCipher.determinant(a, 2);
    assertEquals(-2, det);
}


No.4 generated result --------------------------

int[][] a = {{1, 2}, {3, 4}};
int n = 2;
int result = HillCipher.determinant(a, n);
assertEquals(-2, result);


No.5 generated result --------------------------

@Test
public void determinantTest() {
    int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    int n = 3;
    assertEquals(-3, HillCipher.determinant(matrix, n));
}


No.6 generated result --------------------------

@Test
public void determinantTest() {
    int[][] matrix = new int[][]{{1, 2}, {3, 4}};
    int n = 2;
    int result = HillCipher.determinant(matrix, n);
    assertEquals(-2, result);
}


No.7 generated result --------------------------

@Test
public void determinantTest() {
    int[][] matrix = {{1, 2}, {3, 4}};
    int n = 2;
    int result = HillCipher.determinant(matrix, n);
    assertEquals(-2, result);
}


No.8 generated result --------------------------

@Test
public void determinantTest() {
    int[][] testMatrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    assertEquals(-3, HillCipher.determinant(testMatrix, 3));
}


No.9 generated result --------------------------

int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
int expected = 0; // This is a placeholder for the expected value of the determinant
int result = HillCipher.determinant(matrix, 3);
assertEquals(expected, result);


No.10 generated result --------------------------


int[][] matrix = {{4,5,2}, {3,7,1}, {8,2,9}};
int n = 3;
int expectedOutput = 221;

int actualOutput = HillCipher.determinant(matrix, n);

assertEquals(expectedOutput, actualOutput);


