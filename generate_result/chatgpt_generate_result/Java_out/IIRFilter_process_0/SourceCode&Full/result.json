{
    "project_name": "Java",
    "file_name": "IIRFilter.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/audiofilters/IIRFilter.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.audiofilters",
    "docstring": "/**\n     * Process a single sample\n     *\n     * @param sample the sample to process\n     * @return the processed sample\n     */",
    "source_code": "\npublic double process(double sample) {\n    double result = 0.0;\n\n    // Process\n    for (int i = 1; i <= order; i++) {\n        result += (coeffsB[i] * historyX[i - 1] - coeffsA[i] * historyY[i - 1]);\n    }\n    result = (result + coeffsB[0] * sample) / coeffsA[0];\n\n    // Feedback\n    for (int i = order - 1; i > 0; i--) {\n        historyX[i] = historyX[i - 1];\n        historyY[i] = historyY[i - 1];\n    }\n\n    historyX[0] = sample;\n    historyY[0] = result;\n\n    return result;\n}\n",
    "class_name": "IIRFilter",
    "method_name": "process",
    "arguments": [
        "double sample"
    ],
    "generate_test": [
        "@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter(4);\n    filter.setCoeffs(new double[]{1.0, 2.0, 3.0, 4.0}, new double[]{4.0, 3.0, 2.0, 1.0});\n    double processedSample = filter.process(0.5);\n    assertEquals(0.4, processedSample, 0.0001);\n}",
        "@Test\npublic void processTest() {\n    IIRFilter iirFilter = new IIRFilter(2);\n    double[] aCoeffs = {1.0, 0.5, 0.3};\n    double[] bCoeffs = {0.2, 0.7, 0.1};\n    iirFilter.setCoeffs(aCoeffs, bCoeffs);\n    double result = iirFilter.process(0.6);\n    assertEquals(0.502, result, 0.001);\n}",
        "@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter(2);\n    double[] aCoeffs = {1.0, -1.1430, 0.4128};\n    double[] bCoeffs = {0.2080, 0.6259, 0.2080};\n    filter.setCoeffs(aCoeffs, bCoeffs);\n\n    double result = filter.process(0.5);\n    assertEquals(0.5974242424242425, result);\n}",
        "@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter(3);\n    double[] aCoeffs = {1.0, 0.5, 0.25};\n    double[] bCoeffs = {0.2, 0.4, 0.6};\n    filter.setCoeffs(aCoeffs, bCoeffs);\n    \n    double sample = 0.15;\n    double processedSample = filter.process(sample);\n    assertEquals(0.242, processedSample, 0.001);\n}",
        "@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter(2);\n    filter.setCoeffs(new double[]{1.0, 0.5, 0.2}, new double[]{0.3, 0.7, 0.9});\n    double result = filter.process(0.4);\n    assertEquals(0.276, result, 0.001);\n}",
        "\n @Test\n    public void processTest() {\n        IIRFilter iirFilter = new IIRFilter(3);\n        double[] aCoeffs = {1.0, 0.1, 0.5, 0.2};\n        double[] bCoeffs = {0.5, 0.2, 0.1, 1.0};\n        iirFilter.setCoeffs(aCoeffs, bCoeffs);\n        double sample = 0.8;\n        double expected = 0.812;\n        double result = iirFilter.process(sample);\n        assertEquals(expected, result, 0.001);\n    }\n",
        "@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter(2);\n    double[] aCoeffs = {1.0, 0.5, 0.25};\n    double[] bCoeffs = {0.3, 0.6, 0.2};\n    filter.setCoeffs(aCoeffs, bCoeffs);\n    \n    double output = filter.process(0.5);\n    \n    assertEquals(expectedOutput, output);\n}",
        "@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter(3);\n    double sample = 0.5;\n    filter.setCoeffs(new double[]{1.0, 2.0, 3.0}, new double[]{0.5, 0.3, 0.1});\n    double result = filter.process(sample);\n    assertEquals(expectedResult, result);\n}",
        "@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter(2);\n    double[] aCoeffs = {1.0, -1.1430, 0.4128};\n    double[] bCoeffs = {0.118748, 0, -0.118748};\n    filter.setCoeffs(aCoeffs, bCoeffs);\n    double sample = 0.5;\n    double result = filter.process(sample);\n    double expected = 0.4137075707;\n    assertEquals(expected, result);\n}",
        "@Test\n    public void processTest() {\n        IIRFilter filter = new IIRFilter(2);\n        \n        double[] aCoeffs = {1.0, 0.5, 0.25};\n        double[] bCoeffs = {0.3, 0.6, 0.3};\n        \n        filter.setCoeffs(aCoeffs, bCoeffs);\n        \n        double sample = 0.2;\n        double expected = 0.32; // Replace with expected result\n        \n        assertEquals(expected, filter.process(sample));\n    }"
    ]
}