Source code: 


public double process(double sample) {
    double result = 0.0;

    // Process
    for (int i = 1; i <= order; i++) {
        result += (coeffsB[i] * historyX[i - 1] - coeffsA[i] * historyY[i - 1]);
    }
    result = (result + coeffsB[0] * sample) / coeffsA[0];

    // Feedback
    for (int i = order - 1; i > 0; i--) {
        historyX[i] = historyX[i - 1];
        historyY[i] = historyY[i - 1];
    }

    historyX[0] = sample;
    historyY[0] = result;

    return result;
}



No.1 generated result --------------------------

@Test
public void processTest() {
    IIRFilter filter = new IIRFilter(4);
    filter.setCoeffs(new double[]{1.0, 2.0, 3.0, 4.0}, new double[]{4.0, 3.0, 2.0, 1.0});
    double processedSample = filter.process(0.5);
    assertEquals(0.4, processedSample, 0.0001);
}


No.2 generated result --------------------------

@Test
public void processTest() {
    IIRFilter iirFilter = new IIRFilter(2);
    double[] aCoeffs = {1.0, 0.5, 0.3};
    double[] bCoeffs = {0.2, 0.7, 0.1};
    iirFilter.setCoeffs(aCoeffs, bCoeffs);
    double result = iirFilter.process(0.6);
    assertEquals(0.502, result, 0.001);
}


No.3 generated result --------------------------

@Test
public void processTest() {
    IIRFilter filter = new IIRFilter(2);
    double[] aCoeffs = {1.0, -1.1430, 0.4128};
    double[] bCoeffs = {0.2080, 0.6259, 0.2080};
    filter.setCoeffs(aCoeffs, bCoeffs);

    double result = filter.process(0.5);
    assertEquals(0.5974242424242425, result);
}


No.4 generated result --------------------------

@Test
public void processTest() {
    IIRFilter filter = new IIRFilter(3);
    double[] aCoeffs = {1.0, 0.5, 0.25};
    double[] bCoeffs = {0.2, 0.4, 0.6};
    filter.setCoeffs(aCoeffs, bCoeffs);
    
    double sample = 0.15;
    double processedSample = filter.process(sample);
    assertEquals(0.242, processedSample, 0.001);
}


No.5 generated result --------------------------

@Test
public void processTest() {
    IIRFilter filter = new IIRFilter(2);
    filter.setCoeffs(new double[]{1.0, 0.5, 0.2}, new double[]{0.3, 0.7, 0.9});
    double result = filter.process(0.4);
    assertEquals(0.276, result, 0.001);
}


No.6 generated result --------------------------


 @Test
    public void processTest() {
        IIRFilter iirFilter = new IIRFilter(3);
        double[] aCoeffs = {1.0, 0.1, 0.5, 0.2};
        double[] bCoeffs = {0.5, 0.2, 0.1, 1.0};
        iirFilter.setCoeffs(aCoeffs, bCoeffs);
        double sample = 0.8;
        double expected = 0.812;
        double result = iirFilter.process(sample);
        assertEquals(expected, result, 0.001);
    }



No.7 generated result --------------------------

@Test
public void processTest() {
    IIRFilter filter = new IIRFilter(2);
    double[] aCoeffs = {1.0, 0.5, 0.25};
    double[] bCoeffs = {0.3, 0.6, 0.2};
    filter.setCoeffs(aCoeffs, bCoeffs);
    
    double output = filter.process(0.5);
    
    assertEquals(expectedOutput, output);
}


No.8 generated result --------------------------

@Test
public void processTest() {
    IIRFilter filter = new IIRFilter(3);
    double sample = 0.5;
    filter.setCoeffs(new double[]{1.0, 2.0, 3.0}, new double[]{0.5, 0.3, 0.1});
    double result = filter.process(sample);
    assertEquals(expectedResult, result);
}


No.9 generated result --------------------------

@Test
public void processTest() {
    IIRFilter filter = new IIRFilter(2);
    double[] aCoeffs = {1.0, -1.1430, 0.4128};
    double[] bCoeffs = {0.118748, 0, -0.118748};
    filter.setCoeffs(aCoeffs, bCoeffs);
    double sample = 0.5;
    double result = filter.process(sample);
    double expected = 0.4137075707;
    assertEquals(expected, result);
}


No.10 generated result --------------------------

@Test
    public void processTest() {
        IIRFilter filter = new IIRFilter(2);
        
        double[] aCoeffs = {1.0, 0.5, 0.25};
        double[] bCoeffs = {0.3, 0.6, 0.3};
        
        filter.setCoeffs(aCoeffs, bCoeffs);
        
        double sample = 0.2;
        double expected = 0.32; // Replace with expected result
        
        assertEquals(expected, filter.process(sample));
    }


