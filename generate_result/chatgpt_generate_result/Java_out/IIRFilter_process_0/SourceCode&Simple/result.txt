Source code: 


public double process(double sample) {
    double result = 0.0;

    // Process
    for (int i = 1; i <= order; i++) {
        result += (coeffsB[i] * historyX[i - 1] - coeffsA[i] * historyY[i - 1]);
    }
    result = (result + coeffsB[0] * sample) / coeffsA[0];

    // Feedback
    for (int i = order - 1; i > 0; i--) {
        historyX[i] = historyX[i - 1];
        historyY[i] = historyY[i - 1];
    }

    historyX[0] = sample;
    historyY[0] = result;

    return result;
}



No.1 generated result --------------------------


package com.thealgorithms.audiofilters;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IIRFilterTest {
    @Test
    public void processTest() {
        IIRFilter filter = new IIRFilter(3);
        double[] coeffsA = {1.0, 2.0, 3.0};
        double[] coeffsB = {3.0, 2.0, 1.0};
        filter.setCoeffs(coeffsA, coeffsB);
        double[] historyX = {0.0, 0.0, 0.0};
        double[] historyY = {0.0, 0.0, 0.0};
        filter.process(4.0);
        // Assertion here
    }
}



No.2 generated result --------------------------


double[] aCoeffs = {1.0, 2.0, 3.0};
double[] bCoeffs = {0.5, 0.25, 0.75};
IIRFilter filter = new IIRFilter(3);
filter.setCoeffs(aCoeffs, bCoeffs);
double output = filter.process(5.0);
assertEquals(3.083333333, output, 0.0001);


No.3 generated result --------------------------

@Test
public void processTest() {
    double sample = 5.0;
    IIRFilter filter = new IIRFilter(2);
    double[] aCoeffs = {1.0, -0.5, 0.25};
    double[] bCoeffs = {0.125, 0.25, 0.125};
    filter.setCoeffs(aCoeffs, bCoeffs);
    double result = filter.process(sample);
    assertEquals(2.73125, result);
}


No.4 generated result --------------------------


@Test
public void processTest() {
    double sample = 5.0;
    IIRFilter filter = new IIRFilter(3);
    double[] aCoeffs = {1.0, 2.0, 3.0};
    double[] bCoeffs = {4.0, 5.0, 6.0};
    filter.setCoeffs(aCoeffs, bCoeffs);
    double expectedResult = 10.0; 
    assertEquals(expectedResult, filter.process(sample));
}


No.5 generated result --------------------------

@Test
public void processTest() {
    IIRFilter iirFilter = new IIRFilter(3);
    double[] aCoeffs = {1.0, -1.1430, 0.4128};
    double[] bCoeffs = {0.1, 0.2, 0.1};
    iirFilter.setCoeffs(aCoeffs, bCoeffs);
    double result = iirFilter.process(0.5);
    // Assert the result
    assertEquals(expectedResult, result);
}


No.6 generated result --------------------------

@Test
public void processTest() {
    IIRFilter filter = new IIRFilter(3);
    filter.setCoeffs(new double[]{1.0, 2.0, 1.0}, new double[]{1.0, 1.0, 0.0});
    double result = filter.process(5.0);
    assertEquals(5.0, result);
}


No.7 generated result --------------------------

// Given
IIRFilter filter = new IIRFilter(3);
double[] aCoeffs = {1.0, 2.0, 3.0};
double[] bCoeffs = {0.5, 0.3, 0.1};
filter.setCoeffs(aCoeffs, bCoeffs);

// When
double result = filter.process(5.0);

// Then
assertEquals(expectedResult, result);


No.8 generated result --------------------------

@Test
 public void processTest() {
     IIRFilter filter = new IIRFilter(3);
     double[] coeffsA = {1.0, -1.947463016918843, 0.955587370138107};
     double[] coeffsB = {0.978274159750886, -1.956548319501772, 0.978274159750886};
     filter.setCoeffs(coeffsA, coeffsB);
     double output = filter.process(5.0);
     assertEquals(expectedOutput, actualOutput, 0.0001);
 }


No.9 generated result --------------------------

@Test
public void processTest() {
    IIRFilter filter = new IIRFilter(3);
    double[] coeffsA = {1, 2, 3};
    double[] coeffsB = {4, 5, 6};
    double[] historyX = {7, 8, 9};
    double[] historyY = {10, 11, 12};
    
    filter.setCoeffs(coeffsA, coeffsB);
    filter.process(15.0);
    
    // Assert statements
    // Add your assertions here
}


No.10 generated result --------------------------

@Test
public void processTest() {
    IIRFilter iirFilter = new IIRFilter(3);
    double[] coeffsA = {0.2, 0.3, 0.4};
    double[] coeffsB = {0.5, 0.6, 0.7};
    iirFilter.setCoeffs(coeffsA, coeffsB);
    double sample = 0.1;
    double result = iirFilter.process(sample);
    assertEquals(expectedResult, result);
}


