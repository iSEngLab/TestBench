{
    "project_name": "Java",
    "file_name": "IIRFilter.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/audiofilters/IIRFilter.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.audiofilters",
    "docstring": "/**\n     * Process a single sample\n     *\n     * @param sample the sample to process\n     * @return the processed sample\n     */",
    "source_code": "\npublic double process(double sample) {\n    double result = 0.0;\n\n    // Process\n    for (int i = 1; i <= order; i++) {\n        result += (coeffsB[i] * historyX[i - 1] - coeffsA[i] * historyY[i - 1]);\n    }\n    result = (result + coeffsB[0] * sample) / coeffsA[0];\n\n    // Feedback\n    for (int i = order - 1; i > 0; i--) {\n        historyX[i] = historyX[i - 1];\n        historyY[i] = historyY[i - 1];\n    }\n\n    historyX[0] = sample;\n    historyY[0] = result;\n\n    return result;\n}\n",
    "class_name": "IIRFilter",
    "method_name": "process",
    "arguments": [
        "double sample"
    ],
    "generate_test": [
        "@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter();\n    double sample = 5.0;\n    double result = filter.process(sample);\n    assertEquals(expectedResult, result);\n}",
        "@Test\npublic void processTest() {\n    double[] coeffsB = {1.0, 2.0, 3.0};\n    double[] coeffsA = {4.0, 5.0, 6.0};\n    double[] historyX = {1.0, 2.0, 3.0};\n    double[] historyY = {4.0, 5.0, 6.0};\n    int order = 3;\n    double sample = 1.5;\n\n    IIRFilter filter = new IIRFilter(coeffsB, coeffsA, historyX, historyY, order);\n    double expected = filter.process(sample);\n    assertEquals(2.75, expected);\n}",
        "@Test\npublic void processTest() {\n    double[] coeffsB = {1.0, 2.0, 3.0};\n    double[] coeffsA = {0.5, 1.5, 2.5};\n    double[] historyX = {3.0, 2.0, 1.0};\n    double[] historyY = {1.0, 2.0, 3.0};\n    int order = 3;\n    double sample = 4.0;\n    IIRFilter filter = new IIRFilter(coeffsB, coeffsA, historyX, historyY, order);\n    double actualResult = filter.process(sample);\n    double expectedResult = 9.0; // Replace with the expected result\n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\npublic void processTest() {\n    double sample = 5.0;\n    double expected = 7.0; // Replace with your expected value\n\n    double result = new IIRFilter().process(sample);\n    assertEquals(expected, result); \n}",
        "@Test\npublic void processTest() {\n    double[] coeffsB = {1.0, 2.0, 3.0};\n    double[] coeffsA = {0.5, 0.75, 1.0};\n    double[] historyX = {0.0, 0.0, 0.0};\n    double[] historyY = {0.0, 0.0, 0.0};\n    int order = 3;\n    double sample = 5.0;\n\n    IIRFilter iirFilter = new IIRFilter(coeffsB, coeffsA, historyX, historyY, order);\n    double result = iirFilter.process(sample);\n\n    assertEquals(3.0, result); // Example assertion, please replace with appropriate ones\n}",
        "@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter();\n    filter.setOrder(3);\n    filter.setCoeffsA(new double[]{1.0, 2.0, 3.0});\n    filter.setCoeffsB(new double[]{3.0, 2.0, 1.0});\n    filter.setHistoryX(new double[]{0.0, 0.0, 0.0});\n    filter.setHistoryY(new double[]{0.0, 0.0, 0.0});\n\n    double sample = 5.0;\n    double expectedOutput = 7.3;\n    double result = filter.process(sample);\n\n    assertEquals(expectedOutput, result);\n}",
        "@Test\n    public void processTest() {\n        double[] coeffsB = {0.5, 0.3, 0.1};\n        double[] coeffsA = {0.2, 0.4, 0.6};\n        double[] historyX = {0.7, 0.9, 0.5};\n        double[] historyY = {0.4, 0.6, 0.8};\n        int order = 3;\n        double sample = 0.6;\n\n        IIRFilter filter = new IIRFilter(coeffsB, coeffsA, historyX, historyY, order);\n        double result = filter.process(sample);\n\n        assertEquals(0.96, result, 0.001);\n    }",
        "@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter();\n    double[] coeffsB = {0.5, 0.2, 0.3};\n    double[] coeffsA = {0.1, 0.4, 0.2};\n    double[] historyX = {0.1, 0.3, 0.2};\n    double[] historyY = {0.2, 0.1, 0.3};\n    int order = 3;\n    double sample = 0.5;\n\n    filter.setCoeffsB(coeffsB);\n    filter.setCoeffsA(coeffsA);\n    filter.setHistoryX(historyX);\n    filter.setHistoryY(historyY);\n    filter.setOrder(order);\n\n    double expected = 0.64375; // Expected output based on the given coefficients and history\n    double result = filter.process(sample);\n\n    assertEquals(expected, result);\n}",
        "public void processTest() {\n    IIRFilter filter = new IIRFilter();\n    filter.process(5.0); // Assuming 5.0 as a sample input\n    // Add assertion for expected output\n}",
        "@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter(); // Assuming the IIRFilter class exists\n    filter.setOrder(3); // Assuming a method to set the order exists\n    filter.setCoeffsB(new double[]{1, 2, 3}); // Assuming a method to set coeffsB exists\n    filter.setCoeffsA(new double[]{1, 0.5, 0.25}); // Assuming a method to set coeffsA exists\n    filter.setHistoryX(new double[]{0, 0, 0}); // Assuming a method to set historyX exists\n    filter.setHistoryY(new double[]{0, 0, 0}); // Assuming a method to set historyY exists\n    double sample = 2.0; // Arbitrary sample value\n    double expectedResult = 3.0; // Expected result for the given sample\n    assertEquals(expectedResult, filter.process(sample)); // Assuming a method to process the sample exists and returns the result\n}"
    ]
}