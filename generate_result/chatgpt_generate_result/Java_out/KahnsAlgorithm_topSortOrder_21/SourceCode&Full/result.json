{
    "project_name": "Java",
    "file_name": "KahnsAlgorithm.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/KahnsAlgorithm.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Returns an ArrayList with vertices arranged in topological order\n     */",
    "source_code": "\nArrayList<E> topSortOrder() {\n    calculateInDegree();\n    Queue<E> q = new LinkedList<E>();\n\n    for (E vertex : inDegree.keySet()) {\n        if (inDegree.get(vertex) == 0) {\n            q.add(vertex);\n        }\n    }\n\n    ArrayList<E> answer = new ArrayList<>();\n\n    while (!q.isEmpty()) {\n        E current = q.poll();\n        answer.add(current);\n        for (E adjacent : graph.getAdjacents(current)) {\n            inDegree.put(adjacent, inDegree.get(adjacent) - 1);\n            if (inDegree.get(adjacent) == 0) {\n                q.add(adjacent);\n            }\n        }\n    }\n\n    return answer;\n}\n",
    "class_name": "KahnsAlgorithm",
    "method_name": "topSortOrder",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<Integer> graph = new AdjacencyList<>();\n    graph.addEdge(1, 2);\n    graph.addEdge(2, 3);\n    graph.addEdge(2, 4);\n    graph.addEdge(3, 5);\n    \n    TopologicalSort<Integer> topSort = new TopologicalSort<>(graph);\n    \n    ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n    ArrayList<Integer> result = topSort.topSortOrder();\n    \n    assertEquals(expected, result);\n}",
        "AdjacencyList<String> graph = new AdjacencyList<>();\ngraph.addEdge(\"a\", \"b\");\ngraph.addEdge(\"c\", \"a\");\ngraph.addEdge(\"a\", \"d\");\ngraph.addEdge(\"b\", \"d\");\ngraph.addEdge(\"c\", \"u\");\ngraph.addEdge(\"u\", \"b\");\n\nTopologicalSort<String> topSort = new TopologicalSort<>(graph);\nArrayList<String> expected = new ArrayList<>();\nexpected.add(\"c\");\nexpected.add(\"u\");\nexpected.add(\"a\");\nexpected.add(\"b\");\nexpected.add(\"d\");\nArrayList<String> actual = topSort.topSortOrder();\nassertEquals(expected, actual);",
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    graph.addEdge(\"a\", \"b\");\n    graph.addEdge(\"c\", \"a\");\n    graph.addEdge(\"a\", \"d\");\n    graph.addEdge(\"b\", \"d\");\n    graph.addEdge(\"c\", \"u\");\n    graph.addEdge(\"u\", \"b\");\n\n    TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n\n    ArrayList<String> expected = new ArrayList<>();\n    expected.add(\"c\");\n    expected.add(\"u\");\n    expected.add(\"a\");\n    expected.add(\"b\");\n    expected.add(\"d\");\n\n    assertEquals(expected, topSort.topSortOrder());\n}",
        "@Test\npublic void topSortOrderTest() {\n    // Create a graph\n    AdjacencyList<Integer> graph = new AdjacencyList<>();\n    graph.addEdge(0, 1);\n    graph.addEdge(0, 2);\n    graph.addEdge(1, 3);\n    graph.addEdge(2, 3);\n\n    // Create a topological sort object\n    TopologicalSort<Integer> topSort = new TopologicalSort<>(graph);\n\n    // Test the topological sorting\n    assertArrayEquals(new Integer[] {0, 1, 2, 3}, topSort.topSortOrder().toArray(new Integer[0]));\n}",
        "ArrayList<String> expectedResult = new ArrayList<>();\nexpectedResult.add(\"c\");\nexpectedResult.add(\"a\");\nexpectedResult.add(\"u\");\nexpectedResult.add(\"b\");\nexpectedResult.add(\"d\");\n\nAdjacencyList<String> graph = new AdjacencyList<>();\ngraph.addEdge(\"a\", \"b\");\ngraph.addEdge(\"c\", \"a\");\ngraph.addEdge(\"a\", \"d\");\ngraph.addEdge(\"b\", \"d\");\ngraph.addEdge(\"c\", \"u\");\ngraph.addEdge(\"u\", \"b\");\n\nTopologicalSort<String> topSort = new TopologicalSort<>(graph);\n\nArrayList<String> actualResult = topSort.topSortOrder();\nassertEquals(expectedResult, actualResult);",
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    graph.addEdge(\"a\", \"b\");\n    graph.addEdge(\"c\", \"a\");\n    graph.addEdge(\"a\", \"d\");\n    graph.addEdge(\"b\", \"d\");\n    graph.addEdge(\"c\", \"u\");\n    graph.addEdge(\"u\", \"b\");\n\n    TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n    String[] expected = {\"c\", \"u\", \"a\", \"b\", \"d\"};\n\n    assertArrayEquals(expected, topSort.topSortOrder().toArray());\n}",
        "@Test\npublic void topSortOrderTest() {\n    // Graph definition and initialization\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    graph.addEdge(\"a\", \"b\");\n    graph.addEdge(\"c\", \"a\");\n    graph.addEdge(\"a\", \"d\");\n    graph.addEdge(\"b\", \"d\");\n    graph.addEdge(\"c\", \"u\");\n    graph.addEdge(\"u\", \"b\");\n\n    TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n\n    // Output the order\n    ArrayList<String> expected = new ArrayList<>();\n    expected.add(\"c\");\n    expected.add(\"a\");\n    expected.add(\"u\");\n    expected.add(\"b\");\n    expected.add(\"d\");\n    ArrayList<String> actual = topSort.topSortOrder();\n\n    assertArrayEquals(expected.toArray(), actual.toArray());\n}",
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    graph.addEdge(\"a\", \"b\");\n    graph.addEdge(\"c\", \"a\");\n    graph.addEdge(\"a\", \"d\");\n    graph.addEdge(\"b\", \"d\");\n    graph.addEdge(\"c\", \"u\");\n    graph.addEdge(\"u\", \"b\");\n\n    TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n    \n    ArrayList<String> expected = new ArrayList<>();\n    expected.add(\"c\");\n    expected.add(\"u\");\n    expected.add(\"a\");\n    expected.add(\"b\");\n    expected.add(\"d\");\n    \n    assertIterableEquals(expected, topSort.topSortOrder());\n}",
        "ArrayList<String> expectedResult = new ArrayList<>();\nexpectedResult.add(\"c\");\nexpectedResult.add(\"a\");\nexpectedResult.add(\"u\");\nexpectedResult.add(\"b\");\nexpectedResult.add(\"d\");\n\nAdjacencyList<String> graph = new AdjacencyList<>();\ngraph.addEdge(\"a\", \"b\");\ngraph.addEdge(\"c\", \"a\");\ngraph.addEdge(\"a\", \"d\");\ngraph.addEdge(\"b\", \"d\");\ngraph.addEdge(\"c\", \"u\");\ngraph.addEdge(\"u\", \"b\");\n\nTopologicalSort<String> topSort = new TopologicalSort<>(graph);\nArrayList<String> result = topSort.topSortOrder();\n\nassertEquals(expectedResult, result);",
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<Integer> list = new AdjacencyList<>();\n    list.addEdge(1, 2);\n    list.addEdge(1, 3);\n    list.addEdge(2, 3);\n    list.addEdge(3, 4);\n    \n    TopologicalSort<Integer> ts = new TopologicalSort<>(list);\n    ArrayList<Integer> actual = ts.topSortOrder();\n    ArrayList<Integer> expected = new ArrayList<>();\n    expected.add(1);\n    expected.add(2);\n    expected.add(3);\n    expected.add(4);\n    \n    assertEquals(expected, actual);\n}"
    ]
}