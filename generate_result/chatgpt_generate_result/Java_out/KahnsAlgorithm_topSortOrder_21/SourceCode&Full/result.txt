Source code: 


ArrayList<E> topSortOrder() {
    calculateInDegree();
    Queue<E> q = new LinkedList<E>();

    for (E vertex : inDegree.keySet()) {
        if (inDegree.get(vertex) == 0) {
            q.add(vertex);
        }
    }

    ArrayList<E> answer = new ArrayList<>();

    while (!q.isEmpty()) {
        E current = q.poll();
        answer.add(current);
        for (E adjacent : graph.getAdjacents(current)) {
            inDegree.put(adjacent, inDegree.get(adjacent) - 1);
            if (inDegree.get(adjacent) == 0) {
                q.add(adjacent);
            }
        }
    }

    return answer;
}



No.1 generated result --------------------------

@Test
public void topSortOrderTest() {
    AdjacencyList<Integer> graph = new AdjacencyList<>();
    graph.addEdge(1, 2);
    graph.addEdge(2, 3);
    graph.addEdge(2, 4);
    graph.addEdge(3, 5);
    
    TopologicalSort<Integer> topSort = new TopologicalSort<>(graph);
    
    ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));
    ArrayList<Integer> result = topSort.topSortOrder();
    
    assertEquals(expected, result);
}


No.2 generated result --------------------------

AdjacencyList<String> graph = new AdjacencyList<>();
graph.addEdge("a", "b");
graph.addEdge("c", "a");
graph.addEdge("a", "d");
graph.addEdge("b", "d");
graph.addEdge("c", "u");
graph.addEdge("u", "b");

TopologicalSort<String> topSort = new TopologicalSort<>(graph);
ArrayList<String> expected = new ArrayList<>();
expected.add("c");
expected.add("u");
expected.add("a");
expected.add("b");
expected.add("d");
ArrayList<String> actual = topSort.topSortOrder();
assertEquals(expected, actual);


No.3 generated result --------------------------

@Test
public void topSortOrderTest() {
    AdjacencyList<String> graph = new AdjacencyList<>();
    graph.addEdge("a", "b");
    graph.addEdge("c", "a");
    graph.addEdge("a", "d");
    graph.addEdge("b", "d");
    graph.addEdge("c", "u");
    graph.addEdge("u", "b");

    TopologicalSort<String> topSort = new TopologicalSort<>(graph);

    ArrayList<String> expected = new ArrayList<>();
    expected.add("c");
    expected.add("u");
    expected.add("a");
    expected.add("b");
    expected.add("d");

    assertEquals(expected, topSort.topSortOrder());
}


No.4 generated result --------------------------

@Test
public void topSortOrderTest() {
    // Create a graph
    AdjacencyList<Integer> graph = new AdjacencyList<>();
    graph.addEdge(0, 1);
    graph.addEdge(0, 2);
    graph.addEdge(1, 3);
    graph.addEdge(2, 3);

    // Create a topological sort object
    TopologicalSort<Integer> topSort = new TopologicalSort<>(graph);

    // Test the topological sorting
    assertArrayEquals(new Integer[] {0, 1, 2, 3}, topSort.topSortOrder().toArray(new Integer[0]));
}


No.5 generated result --------------------------

ArrayList<String> expectedResult = new ArrayList<>();
expectedResult.add("c");
expectedResult.add("a");
expectedResult.add("u");
expectedResult.add("b");
expectedResult.add("d");

AdjacencyList<String> graph = new AdjacencyList<>();
graph.addEdge("a", "b");
graph.addEdge("c", "a");
graph.addEdge("a", "d");
graph.addEdge("b", "d");
graph.addEdge("c", "u");
graph.addEdge("u", "b");

TopologicalSort<String> topSort = new TopologicalSort<>(graph);

ArrayList<String> actualResult = topSort.topSortOrder();
assertEquals(expectedResult, actualResult);


No.6 generated result --------------------------

@Test
public void topSortOrderTest() {
    AdjacencyList<String> graph = new AdjacencyList<>();
    graph.addEdge("a", "b");
    graph.addEdge("c", "a");
    graph.addEdge("a", "d");
    graph.addEdge("b", "d");
    graph.addEdge("c", "u");
    graph.addEdge("u", "b");

    TopologicalSort<String> topSort = new TopologicalSort<>(graph);
    String[] expected = {"c", "u", "a", "b", "d"};

    assertArrayEquals(expected, topSort.topSortOrder().toArray());
}


No.7 generated result --------------------------

@Test
public void topSortOrderTest() {
    // Graph definition and initialization
    AdjacencyList<String> graph = new AdjacencyList<>();
    graph.addEdge("a", "b");
    graph.addEdge("c", "a");
    graph.addEdge("a", "d");
    graph.addEdge("b", "d");
    graph.addEdge("c", "u");
    graph.addEdge("u", "b");

    TopologicalSort<String> topSort = new TopologicalSort<>(graph);

    // Output the order
    ArrayList<String> expected = new ArrayList<>();
    expected.add("c");
    expected.add("a");
    expected.add("u");
    expected.add("b");
    expected.add("d");
    ArrayList<String> actual = topSort.topSortOrder();

    assertArrayEquals(expected.toArray(), actual.toArray());
}


No.8 generated result --------------------------

@Test
public void topSortOrderTest() {
    AdjacencyList<String> graph = new AdjacencyList<>();
    graph.addEdge("a", "b");
    graph.addEdge("c", "a");
    graph.addEdge("a", "d");
    graph.addEdge("b", "d");
    graph.addEdge("c", "u");
    graph.addEdge("u", "b");

    TopologicalSort<String> topSort = new TopologicalSort<>(graph);
    
    ArrayList<String> expected = new ArrayList<>();
    expected.add("c");
    expected.add("u");
    expected.add("a");
    expected.add("b");
    expected.add("d");
    
    assertIterableEquals(expected, topSort.topSortOrder());
}


No.9 generated result --------------------------

ArrayList<String> expectedResult = new ArrayList<>();
expectedResult.add("c");
expectedResult.add("a");
expectedResult.add("u");
expectedResult.add("b");
expectedResult.add("d");

AdjacencyList<String> graph = new AdjacencyList<>();
graph.addEdge("a", "b");
graph.addEdge("c", "a");
graph.addEdge("a", "d");
graph.addEdge("b", "d");
graph.addEdge("c", "u");
graph.addEdge("u", "b");

TopologicalSort<String> topSort = new TopologicalSort<>(graph);
ArrayList<String> result = topSort.topSortOrder();

assertEquals(expectedResult, result);


No.10 generated result --------------------------

@Test
public void topSortOrderTest() {
    AdjacencyList<Integer> list = new AdjacencyList<>();
    list.addEdge(1, 2);
    list.addEdge(1, 3);
    list.addEdge(2, 3);
    list.addEdge(3, 4);
    
    TopologicalSort<Integer> ts = new TopologicalSort<>(list);
    ArrayList<Integer> actual = ts.topSortOrder();
    ArrayList<Integer> expected = new ArrayList<>();
    expected.add(1);
    expected.add(2);
    expected.add(3);
    expected.add(4);
    
    assertEquals(expected, actual);
}


