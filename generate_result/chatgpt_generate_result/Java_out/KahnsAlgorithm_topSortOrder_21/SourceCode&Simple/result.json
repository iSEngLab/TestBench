{
    "project_name": "Java",
    "file_name": "KahnsAlgorithm.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/KahnsAlgorithm.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Returns an ArrayList with vertices arranged in topological order\n     */",
    "source_code": "\nArrayList<E> topSortOrder() {\n    calculateInDegree();\n    Queue<E> q = new LinkedList<E>();\n\n    for (E vertex : inDegree.keySet()) {\n        if (inDegree.get(vertex) == 0) {\n            q.add(vertex);\n        }\n    }\n\n    ArrayList<E> answer = new ArrayList<>();\n\n    while (!q.isEmpty()) {\n        E current = q.poll();\n        answer.add(current);\n        for (E adjacent : graph.getAdjacents(current)) {\n            inDegree.put(adjacent, inDegree.get(adjacent) - 1);\n            if (inDegree.get(adjacent) == 0) {\n                q.add(adjacent);\n            }\n        }\n    }\n\n    return answer;\n}\n",
    "class_name": "KahnsAlgorithm",
    "method_name": "topSortOrder",
    "arguments": [],
    "generate_test": [
        "TopologicalSort<String> ts = new TopologicalSort<>(new AdjacencyList<>());\nts.calculateInDegree();\nArrayList<String> expected = new ArrayList<>(Arrays.asList(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"));\nArrayList<String> result = ts.topSortOrder();\nassertEquals(expected, result);",
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"B\", \"C\");\n    graph.addEdge(\"C\", \"D\");\n    TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n    topSort.calculateInDegree();\n    ArrayList<String> expected = new ArrayList<>();\n    expected.add(\"A\");\n    expected.add(\"B\");\n    expected.add(\"C\");\n    expected.add(\"D\");\n    ArrayList<String> actual = topSort.topSortOrder();\n    assertEquals(expected, actual);\n}",
        "AdjacencyList<String> graph = new AdjacencyList<>();\ngraph.addEdge(\"A\", \"C\");\ngraph.addEdge(\"B\", \"C\");\ngraph.addEdge(\"B\", \"D\");\ngraph.addEdge(\"C\", \"E\");\ngraph.addEdge(\"D\", \"F\");\ngraph.addEdge(\"E\", \"F\");\n\nTopologicalSort<String> topSort = new TopologicalSort<>(graph);\ntopSort.calculateInDegree();\nArrayList<String> result = topSort.topSortOrder();\nArrayList<String> expected = new ArrayList<>();\nexpected.add(\"A\");\nexpected.add(\"B\");\nexpected.add(\"C\");\nexpected.add(\"D\");\nexpected.add(\"E\");\nexpected.add(\"F\");\nassertArrayEquals(expected.toArray(), result.toArray());",
        "AdjacencyList<Integer> graph = new AdjacencyList<>();\ngraph.addEdge(1, 2);\ngraph.addEdge(1, 3);\ngraph.addEdge(2, 3);\ngraph.addEdge(4, 1);\nTopologicalSort<Integer> topSort = new TopologicalSort<>(graph);\ntopSort.calculateInDegree();\nArrayList<Integer> result = topSort.topSortOrder();\nassertEquals(4, (int)result.get(0));\nassertEquals(1, (int)result.get(1));\nassertEquals(2, (int)result.get(2));\nassertEquals(3, (int)result.get(3));",
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<Integer> graph = new AdjacencyList<>();\n    graph.addEdge(1, 2);\n    graph.addEdge(2, 3);\n    graph.addEdge(3, 4);\n    \n    TopologicalSort<Integer> topSort = new TopologicalSort<>(graph);\n    topSort.calculateInDegree();\n    \n    ArrayList<Integer> expected = new ArrayList<>();\n    expected.add(1);\n    expected.add(2);\n    expected.add(3);\n    expected.add(4);\n    \n    ArrayList<Integer> result = topSort.topSortOrder();\n    \n    assertIterableEquals(expected, result);\n}",
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<Integer> adjList = new AdjacencyList<>();\n    adjList.addEdge(1, 2);\n    adjList.addEdge(1, 3);\n    adjList.addEdge(2, 3);\n    adjList.addEdge(2, 4);\n    adjList.addEdge(3, 5);\n    \n    TopologicalSort<Integer> topSort = new TopologicalSort<>(adjList);\n    topSort.calculateInDegree();\n    \n    ArrayList<Integer> result = topSort.topSortOrder();\n    \n    ArrayList<Integer> expected = new ArrayList<>();\n    expected.add(1);\n    expected.add(2);\n    expected.add(3);\n    expected.add(4);\n    expected.add(5);\n    \n    assertEquals(expected, result);\n}",
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<Integer> adjacencyList = new AdjacencyList<>();\n    adjacencyList.addEdge(1, 2);\n    \n    TopologicalSort<Integer> topologicalSort = new TopologicalSort<>(adjacencyList);\n    topologicalSort.calculateInDegree();\n    ArrayList<Integer> result = topologicalSort.topSortOrder();\n    \n    ArrayList<Integer> expected = new ArrayList<>();\n    expected.add(1);\n    expected.add(2);\n    \n    assertEquals(expected, result);\n}",
        "TopologicalSort<Integer> topSort = new TopologicalSort<>(new AdjacencyList<>());\ntopSort.graph.addEdge(1, 2);\ntopSort.graph.addEdge(2, 3);\ntopSort.graph.addEdge(2, 4);\ntopSort.calculateInDegree();\nArrayList<Integer> result = topSort.topSortOrder();\nassertEquals(1, result.get(0));\nassertEquals(2, result.get(1));\nassertEquals(4, result.get(2));\nassertEquals(3, result.get(3));",
        "TopologicalSort<Integer> graph = new TopologicalSort<>(new AdjacencyList<>());\n// Add edges and vertices to the graph\nArrayList<Integer> expected = new ArrayList<>();\nexpected.add(1);\nexpected.add(2);\nexpected.add(3);\nArrayList<Integer> result = graph.topSortOrder();\nassertEquals(expected, result);",
        "TopologicalSort<String> ts = new TopologicalSort<>(graph);\nArrayList<String> result = ts.topSortOrder();\nassertEquals(expectedResult, result);"
    ]
}