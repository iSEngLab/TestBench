Source code: 


ArrayList<E> topSortOrder() {
    calculateInDegree();
    Queue<E> q = new LinkedList<E>();

    for (E vertex : inDegree.keySet()) {
        if (inDegree.get(vertex) == 0) {
            q.add(vertex);
        }
    }

    ArrayList<E> answer = new ArrayList<>();

    while (!q.isEmpty()) {
        E current = q.poll();
        answer.add(current);
        for (E adjacent : graph.getAdjacents(current)) {
            inDegree.put(adjacent, inDegree.get(adjacent) - 1);
            if (inDegree.get(adjacent) == 0) {
                q.add(adjacent);
            }
        }
    }

    return answer;
}



No.1 generated result --------------------------

TopologicalSort<String> ts = new TopologicalSort<>(new AdjacencyList<>());
ts.calculateInDegree();
ArrayList<String> expected = new ArrayList<>(Arrays.asList("A", "B", "C", "D", "E", "F", "G"));
ArrayList<String> result = ts.topSortOrder();
assertEquals(expected, result);


No.2 generated result --------------------------

@Test
public void topSortOrderTest() {
    AdjacencyList<String> graph = new AdjacencyList<>();
    graph.addEdge("A", "B");
    graph.addEdge("B", "C");
    graph.addEdge("C", "D");
    TopologicalSort<String> topSort = new TopologicalSort<>(graph);
    topSort.calculateInDegree();
    ArrayList<String> expected = new ArrayList<>();
    expected.add("A");
    expected.add("B");
    expected.add("C");
    expected.add("D");
    ArrayList<String> actual = topSort.topSortOrder();
    assertEquals(expected, actual);
}


No.3 generated result --------------------------

AdjacencyList<String> graph = new AdjacencyList<>();
graph.addEdge("A", "C");
graph.addEdge("B", "C");
graph.addEdge("B", "D");
graph.addEdge("C", "E");
graph.addEdge("D", "F");
graph.addEdge("E", "F");

TopologicalSort<String> topSort = new TopologicalSort<>(graph);
topSort.calculateInDegree();
ArrayList<String> result = topSort.topSortOrder();
ArrayList<String> expected = new ArrayList<>();
expected.add("A");
expected.add("B");
expected.add("C");
expected.add("D");
expected.add("E");
expected.add("F");
assertArrayEquals(expected.toArray(), result.toArray());


No.4 generated result --------------------------

AdjacencyList<Integer> graph = new AdjacencyList<>();
graph.addEdge(1, 2);
graph.addEdge(1, 3);
graph.addEdge(2, 3);
graph.addEdge(4, 1);
TopologicalSort<Integer> topSort = new TopologicalSort<>(graph);
topSort.calculateInDegree();
ArrayList<Integer> result = topSort.topSortOrder();
assertEquals(4, (int)result.get(0));
assertEquals(1, (int)result.get(1));
assertEquals(2, (int)result.get(2));
assertEquals(3, (int)result.get(3));


No.5 generated result --------------------------

@Test
public void topSortOrderTest() {
    AdjacencyList<Integer> graph = new AdjacencyList<>();
    graph.addEdge(1, 2);
    graph.addEdge(2, 3);
    graph.addEdge(3, 4);
    
    TopologicalSort<Integer> topSort = new TopologicalSort<>(graph);
    topSort.calculateInDegree();
    
    ArrayList<Integer> expected = new ArrayList<>();
    expected.add(1);
    expected.add(2);
    expected.add(3);
    expected.add(4);
    
    ArrayList<Integer> result = topSort.topSortOrder();
    
    assertIterableEquals(expected, result);
}


No.6 generated result --------------------------

@Test
public void topSortOrderTest() {
    AdjacencyList<Integer> adjList = new AdjacencyList<>();
    adjList.addEdge(1, 2);
    adjList.addEdge(1, 3);
    adjList.addEdge(2, 3);
    adjList.addEdge(2, 4);
    adjList.addEdge(3, 5);
    
    TopologicalSort<Integer> topSort = new TopologicalSort<>(adjList);
    topSort.calculateInDegree();
    
    ArrayList<Integer> result = topSort.topSortOrder();
    
    ArrayList<Integer> expected = new ArrayList<>();
    expected.add(1);
    expected.add(2);
    expected.add(3);
    expected.add(4);
    expected.add(5);
    
    assertEquals(expected, result);
}


No.7 generated result --------------------------

@Test
public void topSortOrderTest() {
    AdjacencyList<Integer> adjacencyList = new AdjacencyList<>();
    adjacencyList.addEdge(1, 2);
    
    TopologicalSort<Integer> topologicalSort = new TopologicalSort<>(adjacencyList);
    topologicalSort.calculateInDegree();
    ArrayList<Integer> result = topologicalSort.topSortOrder();
    
    ArrayList<Integer> expected = new ArrayList<>();
    expected.add(1);
    expected.add(2);
    
    assertEquals(expected, result);
}


No.8 generated result --------------------------

TopologicalSort<Integer> topSort = new TopologicalSort<>(new AdjacencyList<>());
topSort.graph.addEdge(1, 2);
topSort.graph.addEdge(2, 3);
topSort.graph.addEdge(2, 4);
topSort.calculateInDegree();
ArrayList<Integer> result = topSort.topSortOrder();
assertEquals(1, result.get(0));
assertEquals(2, result.get(1));
assertEquals(4, result.get(2));
assertEquals(3, result.get(3));


No.9 generated result --------------------------

TopologicalSort<Integer> graph = new TopologicalSort<>(new AdjacencyList<>());
// Add edges and vertices to the graph
ArrayList<Integer> expected = new ArrayList<>();
expected.add(1);
expected.add(2);
expected.add(3);
ArrayList<Integer> result = graph.topSortOrder();
assertEquals(expected, result);


No.10 generated result --------------------------

TopologicalSort<String> ts = new TopologicalSort<>(graph);
ArrayList<String> result = ts.topSortOrder();
assertEquals(expectedResult, result);


