{
    "project_name": "Java",
    "file_name": "KahnsAlgorithm.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/KahnsAlgorithm.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Returns an ArrayList with vertices arranged in topological order\n     */",
    "source_code": "\nArrayList<E> topSortOrder() {\n    calculateInDegree();\n    Queue<E> q = new LinkedList<E>();\n\n    for (E vertex : inDegree.keySet()) {\n        if (inDegree.get(vertex) == 0) {\n            q.add(vertex);\n        }\n    }\n\n    ArrayList<E> answer = new ArrayList<>();\n\n    while (!q.isEmpty()) {\n        E current = q.poll();\n        answer.add(current);\n        for (E adjacent : graph.getAdjacents(current)) {\n            inDegree.put(adjacent, inDegree.get(adjacent) - 1);\n            if (inDegree.get(adjacent) == 0) {\n                q.add(adjacent);\n            }\n        }\n    }\n\n    return answer;\n}\n",
    "class_name": "KahnsAlgorithm",
    "method_name": "topSortOrder",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<Integer> graph = new AdjacencyList<>();\n    graph.addDirectedEdge(1, 2);\n    graph.addDirectedEdge(1, 3);\n    graph.addDirectedEdge(2, 3);\n    graph.addDirectedEdge(3, 4);\n\n    ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(1, 2, 3, 4));\n    ArrayList<Integer> actual = graph.topSortOrder();\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"B\", \"C\");\n    graph.addEdge(\"C\", \"D\");\n\n    assertEquals(\"[A, B, C, D]\", graph.topSortOrder().toString());\n}",
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<Integer> graph = new AdjacencyList<>();\n    graph.addEdge(1, 2);\n    graph.addEdge(2, 3);\n    graph.addEdge(4, 5);\n    graph.addEdge(5, 6);\n    ArrayList<Integer> expected = new ArrayList<>();\n    expected.add(1);\n    expected.add(2);\n    expected.add(3);\n    expected.add(4);\n    expected.add(5);\n    expected.add(6);\n    assertEquals(expected, graph.topSortOrder());\n}",
        "@Test\npublic void topSortOrderTest() {\n    ArrayList<Character> expected = new ArrayList<>(Arrays.asList('A', 'B', 'C', 'D', 'E'));\n    ArrayList<Character> actual = graph.topSortOrder();\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<Integer> graph = new AdjacencyList<>();\n    graph.addEdge(1, 2);\n    graph.addEdge(1, 3);\n    graph.addEdge(2, 4);\n    graph.addEdge(3, 4);\n    graph.addEdge(4, 5);\n    ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n    ArrayList<Integer> actual = graph.topSortOrder();\n    assertEquals(expected, actual);\n}",
        "public void topSortOrderTest() {\n        AdjacencyListGraph<String> graph = new AdjacencyListGraph<>();\n        graph.addEdge(\"A\", \"B\");\n        graph.addEdge(\"B\", \"C\");\n        graph.addEdge(\"B\", \"D\");\n        ArrayList<String> expected = new ArrayList<>();\n        expected.add(\"A\");\n        expected.add(\"B\");\n        expected.add(\"C\");\n        expected.add(\"D\");\n        ArrayList<String> actual = graph.topSortOrder();\n        assertEquals(expected, actual);\n    }",
        "ArrayList<Integer> result = new ArrayList<>();\nresult.add(1);\nresult.add(2);\nresult.add(3);\nassertEquals(result, graph.topSortOrder());",
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"B\", \"C\");\n    graph.addEdge(\"C\", \"D\");\n    \n    ArrayList<String> expected = new ArrayList<>();\n    expected.add(\"A\");\n    expected.add(\"B\");\n    expected.add(\"C\");\n    expected.add(\"D\");\n    \n    assertEquals(expected, graph.topSortOrder());\n}",
        "@BeforeEach\npublic void setUp() {\n    graph = new AdjacencyList<>(6);\n    graph.addEdge(5, 2);\n    graph.addEdge(5, 0);\n    graph.addEdge(4, 0);\n    graph.addEdge(4, 1);\n    graph.addEdge(2, 3);\n    graph.addEdge(3, 1);\n}\n\n@Test\npublic void topSortOrderTest() {\n    ArrayList<Integer> result = graph.topSortOrder();\n    assertEquals(List.of(4, 5, 0, 2, 3, 1), result);\n}",
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"A\", \"C\");\n    graph.addEdge(\"B\", \"D\");\n    graph.addEdge(\"C\", \"D\");\n    \n    ArrayList<String> expected = new ArrayList<>();\n    expected.add(\"A\");\n    expected.add(\"B\");\n    expected.add(\"C\");\n    expected.add(\"D\");\n    \n    ArrayList<String> actual = graph.topSortOrder();\n    \n    assertEquals(expected, actual);\n}"
    ]
}