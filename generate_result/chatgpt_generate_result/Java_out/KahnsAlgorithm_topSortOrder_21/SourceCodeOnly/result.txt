Source code: 


ArrayList<E> topSortOrder() {
    calculateInDegree();
    Queue<E> q = new LinkedList<E>();

    for (E vertex : inDegree.keySet()) {
        if (inDegree.get(vertex) == 0) {
            q.add(vertex);
        }
    }

    ArrayList<E> answer = new ArrayList<>();

    while (!q.isEmpty()) {
        E current = q.poll();
        answer.add(current);
        for (E adjacent : graph.getAdjacents(current)) {
            inDegree.put(adjacent, inDegree.get(adjacent) - 1);
            if (inDegree.get(adjacent) == 0) {
                q.add(adjacent);
            }
        }
    }

    return answer;
}



No.1 generated result --------------------------

@Test
public void topSortOrderTest() {
    AdjacencyList<Integer> graph = new AdjacencyList<>();
    graph.addDirectedEdge(1, 2);
    graph.addDirectedEdge(1, 3);
    graph.addDirectedEdge(2, 3);
    graph.addDirectedEdge(3, 4);

    ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(1, 2, 3, 4));
    ArrayList<Integer> actual = graph.topSortOrder();
    assertEquals(expected, actual);
}


No.2 generated result --------------------------

@Test
public void topSortOrderTest() {
    AdjacencyList<String> graph = new AdjacencyList<>();
    graph.addEdge("A", "B");
    graph.addEdge("B", "C");
    graph.addEdge("C", "D");

    assertEquals("[A, B, C, D]", graph.topSortOrder().toString());
}


No.3 generated result --------------------------

@Test
public void topSortOrderTest() {
    AdjacencyList<Integer> graph = new AdjacencyList<>();
    graph.addEdge(1, 2);
    graph.addEdge(2, 3);
    graph.addEdge(4, 5);
    graph.addEdge(5, 6);
    ArrayList<Integer> expected = new ArrayList<>();
    expected.add(1);
    expected.add(2);
    expected.add(3);
    expected.add(4);
    expected.add(5);
    expected.add(6);
    assertEquals(expected, graph.topSortOrder());
}


No.4 generated result --------------------------

@Test
public void topSortOrderTest() {
    ArrayList<Character> expected = new ArrayList<>(Arrays.asList('A', 'B', 'C', 'D', 'E'));
    ArrayList<Character> actual = graph.topSortOrder();
    assertEquals(expected, actual);
}


No.5 generated result --------------------------

@Test
public void topSortOrderTest() {
    AdjacencyList<Integer> graph = new AdjacencyList<>();
    graph.addEdge(1, 2);
    graph.addEdge(1, 3);
    graph.addEdge(2, 4);
    graph.addEdge(3, 4);
    graph.addEdge(4, 5);
    ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));
    ArrayList<Integer> actual = graph.topSortOrder();
    assertEquals(expected, actual);
}


No.6 generated result --------------------------

public void topSortOrderTest() {
        AdjacencyListGraph<String> graph = new AdjacencyListGraph<>();
        graph.addEdge("A", "B");
        graph.addEdge("B", "C");
        graph.addEdge("B", "D");
        ArrayList<String> expected = new ArrayList<>();
        expected.add("A");
        expected.add("B");
        expected.add("C");
        expected.add("D");
        ArrayList<String> actual = graph.topSortOrder();
        assertEquals(expected, actual);
    }


No.7 generated result --------------------------

ArrayList<Integer> result = new ArrayList<>();
result.add(1);
result.add(2);
result.add(3);
assertEquals(result, graph.topSortOrder());


No.8 generated result --------------------------

@Test
public void topSortOrderTest() {
    AdjacencyList<String> graph = new AdjacencyList<>();
    graph.addEdge("A", "B");
    graph.addEdge("B", "C");
    graph.addEdge("C", "D");
    
    ArrayList<String> expected = new ArrayList<>();
    expected.add("A");
    expected.add("B");
    expected.add("C");
    expected.add("D");
    
    assertEquals(expected, graph.topSortOrder());
}


No.9 generated result --------------------------

@BeforeEach
public void setUp() {
    graph = new AdjacencyList<>(6);
    graph.addEdge(5, 2);
    graph.addEdge(5, 0);
    graph.addEdge(4, 0);
    graph.addEdge(4, 1);
    graph.addEdge(2, 3);
    graph.addEdge(3, 1);
}

@Test
public void topSortOrderTest() {
    ArrayList<Integer> result = graph.topSortOrder();
    assertEquals(List.of(4, 5, 0, 2, 3, 1), result);
}


No.10 generated result --------------------------

@Test
public void topSortOrderTest() {
    AdjacencyList<String> graph = new AdjacencyList<>();
    graph.addEdge("A", "B");
    graph.addEdge("A", "C");
    graph.addEdge("B", "D");
    graph.addEdge("C", "D");
    
    ArrayList<String> expected = new ArrayList<>();
    expected.add("A");
    expected.add("B");
    expected.add("C");
    expected.add("D");
    
    ArrayList<String> actual = graph.topSortOrder();
    
    assertEquals(expected, actual);
}


