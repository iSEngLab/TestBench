{
    "project_name": "Java",
    "file_name": "MColoring.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/backtracking/MColoring.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.backtracking",
    "docstring": null,
    "source_code": "static int possiblePaint(ArrayList<Node> nodes, int n, int m) {\n\n    // Create a visited array of n nodes\n    ArrayList<Integer> visited = new ArrayList<Integer>();\n    for (int i = 0; i < n + 1; i++) {\n        visited.add(0);\n    }\n\n    // maxColors used till now are 1 as\n    // all nodes are painted color 1\n    int maxColors = 1;\n\n    for (int sv = 1; sv <= n; sv++) {\n        if (visited.get(sv) > 0) {\n            continue;\n        }\n\n        // If the starting point is unvisited,\n        // mark it visited and push it in queue\n        visited.set(sv, 1);\n        Queue<Integer> q = new LinkedList<>();\n        q.add(sv);\n\n        // BFS\n        while (q.size() != 0) {\n            int top = q.peek();\n            q.remove();\n\n            // Checking all adjacent nodes\n            // to \"top\" edge in our queue\n            for (int it : nodes.get(top).edges) {\n\n                // If the color of the\n                // adjacent node is same, increase it by\n                // 1\n                if (nodes.get(top).color == nodes.get(it).color) {\n                    nodes.get(it).color += 1;\n                }\n\n                // If number of colors used exceeds m,\n                // return 0\n                maxColors = Math.max(maxColors, Math.max(nodes.get(top).color, nodes.get(it).color));\n                if (maxColors > m) return 0;\n\n                // If the adjacent node is not visited,\n                // mark it visited and push it in queue\n                if (visited.get(it) == 0) {\n                    visited.set(it, 1);\n                    q.add(it);\n                }\n            }\n        }\n    }\n    return 1;\n}\n",
    "class_name": "MColoring",
    "method_name": "possiblePaint",
    "arguments": [
        "ArrayList<Node> nodes",
        "int n",
        "int m"
    ],
    "generate_test": [
        "@Test\npublic void possiblePaintTest() {\n    ArrayList<Node> nodes = new ArrayList<>();\n    // Populate nodes with data for testing dynamically based on the specific test case\n    int n = 5;\n    int m = 3;\n    assertEquals(1, MColoring.possiblePaint(nodes, n, m));\n}",
        "@Test\npublic void possiblePaintTest() {\n    ArrayList<Node> nodes = new ArrayList<>();\n    Node node1 = new Node();\n    Node node2 = new Node();\n    // Add edges to nodes\n    // node1.edges.add(<some value>);\n    // node2.edges.add(<some value>);\n    int n = <number of nodes>;\n    int m = <number of colors>;\n    int expected = 1;\n    int actual = MColoring.possiblePaint(nodes, n, m);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void possiblePaintTest() {\n    ArrayList<Node> nodes = new ArrayList<>();\n    // Create and add nodes for testing\n    // Fill in with relevant data for testing\n    int n = 6;\n    int m = 3;\n    int result = MColoring.possiblePaint(nodes, n, m);\n    assertEquals(1, result);\n}",
        "@Test\npublic void possiblePaintTest() {\n    ArrayList<Node> nodes = new ArrayList<>();\n    Node node1 = new Node();\n    Node node2 = new Node();\n    nodes.add(node1);\n    nodes.add(node2);\n    node1.edges.add(2);\n    node2.edges.add(1);\n    assertEquals(1, MColoring.possiblePaint(nodes, 2, 2));\n}",
        "public void possiblePaintTest() {\n    ArrayList<Node> nodes = new ArrayList<>();\n    Node node1 = new Node();\n    node1.color = 1;\n    node1.edges.add(2);\n\n    Node node2 = new Node();\n    node2.color = 1;\n    node2.edges.add(1);\n\n    nodes.add(node1);\n    nodes.add(node2);\n\n    int n = 2;\n    int m = 2;\n\n    int result = MColoring.possiblePaint(nodes, n, m);\n\n    assertEquals(1, result);\n}",
        "@Test\npublic void possiblePaintTest() {\n    ArrayList<Node> nodes = new ArrayList<Node>();\n    Node node1 = new Node();\n    Node node2 = new Node();\n    // Add edges\n    node1.edges.add(2);\n    node2.edges.add(1);\n    nodes.add(node1);\n    nodes.add(node2);\n    assertEquals(1, MColoring.possiblePaint(nodes, 2, 2));\n}",
        "public void possiblePaintTest() {\n    ArrayList<Node> nodes = new ArrayList<Node>();\n    Node node1 = new Node();\n    Node node2 = new Node();\n    // Add edges to nodes\n    node1.edges.add(2);\n    node2.edges.add(1);\n    nodes.add(node1);\n    nodes.add(node2);\n\n    int n = 2;\n    int m = 2;\n    int expected = 1;\n    int actual = MColoring.possiblePaint(nodes, n, m);\n    assertEquals(expected, actual);\n}\n",
        "@Test\npublic void possiblePaintTest() {\n    ArrayList<Node> nodes = new ArrayList<>();\n    Node node1 = new Node();\n    Node node2 = new Node();\n    node1.edges.add(2);\n    node2.edges.add(1);\n    nodes.add(node1);\n    nodes.add(node2);\n    int n = 2;\n    int m = 2;\n    int expected = 1;\n    int result = MColoring.possiblePaint(nodes, n, m);\n    assertEquals(expected, result);\n}",
        "@Test\npublic void possiblePaintTest() {\n    ArrayList<Node> nodes = new ArrayList<>();\n    int n = 5;\n    int m = 3;\n    \n    // create nodes and add edges\n    \n    int result = MColoring.possiblePaint(nodes, n, m);\n    assertEquals(1, result);\n}",
        "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.Queue;\nimport java.util.LinkedList;\n\npublic class MColoringTest {\n    @Test\n    public void possiblePaintTest() {\n        ArrayList<Node> nodes = new ArrayList<>();\n        Node node1 = new Node();\n        Node node2 = new Node();\n        Node node3 = new Node();\n        node1.color = 1;\n        node2.color = 2;\n        node3.color = 3;\n        node1.edges.add(2);\n        node1.edges.add(3);\n        node2.edges.add(1);\n        node2.edges.add(3);\n        node3.edges.add(1);\n        node3.edges.add(2);\n        nodes.add(node1);\n        nodes.add(node2);\n        nodes.add(node3);\n        int n = 3;\n        int m = 3;\n\n        int result = MColoring.possiblePaint(nodes, n, m);\n\n        assertEquals(1, result);\n    }\n}"
    ]
}