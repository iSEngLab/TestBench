Source code: 

static int possiblePaint(ArrayList<Node> nodes, int n, int m) {

    // Create a visited array of n nodes
    ArrayList<Integer> visited = new ArrayList<Integer>();
    for (int i = 0; i < n + 1; i++) {
        visited.add(0);
    }

    // maxColors used till now are 1 as
    // all nodes are painted color 1
    int maxColors = 1;

    for (int sv = 1; sv <= n; sv++) {
        if (visited.get(sv) > 0) {
            continue;
        }

        // If the starting point is unvisited,
        // mark it visited and push it in queue
        visited.set(sv, 1);
        Queue<Integer> q = new LinkedList<>();
        q.add(sv);

        // BFS
        while (q.size() != 0) {
            int top = q.peek();
            q.remove();

            // Checking all adjacent nodes
            // to "top" edge in our queue
            for (int it : nodes.get(top).edges) {

                // If the color of the
                // adjacent node is same, increase it by
                // 1
                if (nodes.get(top).color == nodes.get(it).color) {
                    nodes.get(it).color += 1;
                }

                // If number of colors used exceeds m,
                // return 0
                maxColors = Math.max(maxColors, Math.max(nodes.get(top).color, nodes.get(it).color));
                if (maxColors > m) return 0;

                // If the adjacent node is not visited,
                // mark it visited and push it in queue
                if (visited.get(it) == 0) {
                    visited.set(it, 1);
                    q.add(it);
                }
            }
        }
    }
    return 1;
}



No.1 generated result --------------------------

Node node1 = new Node(1);
Node node2 = new Node(2);
Node node3 = new Node(3);
node1.addEdge(2);
node1.addEdge(3);
node2.addEdge(1);
node3.addEdge(1);
ArrayList<Node> nodes = new ArrayList<>();
nodes.add(node1);
nodes.add(node2);
nodes.add(node3);
int n = 3;
int m = 2;
int expectedResult = 1;
int result = possiblePaint(nodes, n, m);
assertEquals(expectedResult, result);


No.2 generated result --------------------------


@Test
public void possiblePaintTest() {
    ArrayList<Node> nodes = new ArrayList<Node>();
    nodes.add(new Node(1, 1, new ArrayList<Integer>(Arrays.asList(2))));
    nodes.add(new Node(2, 1, new ArrayList<Integer>(Arrays.asList(1, 3))));
    nodes.add(new Node(3, 1, new ArrayList<Integer>(Arrays.asList(2))));
    int n = 3;
    int m = 2;
    int result = Main.possiblePaint(nodes, n, m);
    assertEquals(1, result);
}



No.3 generated result --------------------------

@Test
public void possiblePaintTest() {
    ArrayList<Node> nodes = new ArrayList<>();
    Node node1 = new Node(1, new ArrayList<>(Arrays.asList(2, 3)), 1);
    Node node2 = new Node(2, new ArrayList<>(Arrays.asList(1, 3)), 1);
    Node node3 = new Node(3, new ArrayList<>(Arrays.asList(1, 2)), 2);
    nodes.add(node1);
    nodes.add(node2);
    nodes.add(node3);
    int n = 3;
    int m = 2;
    
    int actual = possiblePaint(nodes, n, m);
    assertEquals(1, actual);
}


No.4 generated result --------------------------

@Test
public void possiblePaintTest() {
    ArrayList<Node> nodes = new ArrayList<Node>();
    // Add nodes and edges here
    int n = 5;
    int m = 3;
    int expected = 1;
    int actual = Node.possiblePaint(nodes, n, m);
    assertEquals(expected, actual);
}


No.5 generated result --------------------------

@Test
public void possiblePaintTest() {
    ArrayList<Node> nodes = new ArrayList<>();
    Node node1 = new Node(1, 1, new ArrayList<>(Arrays.asList(2)));
    Node node2 = new Node(2, 1, new ArrayList<>(Arrays.asList(1)));
    nodes.add(node1);
    nodes.add(node2);
    
    int n = 2;
    int m = 2;
    
    int result = Node.possiblePaint(nodes, n, m);
    
    assertEquals(1, result);
}


No.6 generated result --------------------------

int result = Node.possiblePaint(nodes, n, m);
assertEquals(1, result);


No.7 generated result --------------------------

int result = possiblePaint(nodes, 5, 3);
assertEquals(1, result);


No.8 generated result --------------------------

@Test
public void possiblePaintTest() {
    ArrayList<Node> nodes = new ArrayList<>();
    Node node1 = new Node();
    Node node2 = new Node();
    // Add edges to nodes
    ArrayList<Integer> edges1 = new ArrayList<>();
    edges1.add(2);
    ArrayList<Integer> edges2 = new ArrayList<>();
    edges2.add(1);
    node1.setEdges(edges1);
    node2.setEdges(edges2);
    // Set initial color to both nodes
    node1.setColor(1);
    node2.setColor(1);
    // Add nodes to the arraylist
    nodes.add(node1);
    nodes.add(node2);
    int n = 2;
    int m = 2;
    assertEquals(1, possiblePaint(nodes, n, m));
}



No.9 generated result --------------------------

@Test
public void possiblePaintTest() {
    ArrayList<Node> nodes = new ArrayList<>();
    int n = 5;
    int m = 3;
    assertEquals(1, possiblePaint(nodes, n, m));
}


No.10 generated result --------------------------

public void possiblePaintTest() {
    ArrayList<Node> nodes = new ArrayList<>();
    Node node1 = new Node(1, 1, new ArrayList<>(Arrays.asList(2, 3)));
    Node node2 = new Node(2, 1, new ArrayList<>(Arrays.asList(1, 3)));
    Node node3 = new Node(3, 1, new ArrayList<>(Arrays.asList(1, 2)));
    nodes.add(node1);
    nodes.add(node2);
    nodes.add(node3);
    int output = Node.possiblePaint(nodes, 3, 2);
    assertEquals(1, output);
}


