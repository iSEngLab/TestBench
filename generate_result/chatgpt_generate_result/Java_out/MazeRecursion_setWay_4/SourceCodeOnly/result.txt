Source code: 


public static boolean setWay(int[][] map, int i, int j) {
    if (map[6][5] == 2) { // means the ball find its path, ending condition
        return true;
    }
    if (map[i][j] == 0) { // if the ball haven't gone through this point
        // then the ball follows the move strategy : down -> right -> up -> left
        map[i][j] = 2; // we assume that this path is feasible first, set the current point to 2
                       // firstã€‚
        if (setWay(map, i + 1, j)) { // go down
            return true;
        } else if (setWay(map, i, j + 1)) { // go right
            return true;
        } else if (setWay(map, i - 1, j)) { // go up
            return true;
        } else if (setWay(map, i, j - 1)) { // go left
            return true;
        } else {
            // means that the current point is the dead end, the ball cannot proceed, set
            // the current point to 3 and return false, the backtracking will start, it will
            // go to the previous step and check for feasible path again
            map[i][j] = 3;
            return false;
        }
    } else { // if the map[i][j] != 0 , it will probably be 1,2,3, return false because the
        // ball cannot hit the wall, cannot go to the path that has gone though before,
        // and cannot head to deadened.
        return false;
    }
}



No.1 generated result --------------------------

@Test
public void setWayTest() {
    int[][] map = {
        {1, 1, 1, 1, 1},
        {1, 0, 0, 0, 1},
        {1, 1, 1, 0, 1},
        {1, 0, 0, 0, 0},
        {1, 1, 1, 1, 1}
    };
    assertTrue(setWay(map, 1, 1));
}


No.2 generated result --------------------------

@Test
public void setWayTest() {
    int[][] map = {
        {1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 1, 0, 0, 1},
        {1, 0, 0, 0, 1, 0, 0, 1},
        {1, 1, 1, 0, 0, 0, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1}
    };

    assertTrue(MazeRecursion.setWay(map, 1, 1));
}


No.3 generated result --------------------------


@Test
public void setWayTest() {
    int[][] map = {
        {1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 1, 0, 1},
        {1, 0, 0, 0, 0, 0, 1},
        {1, 0, 1, 0, 0, 1, 1},
        {1, 1, 1, 1, 1, 1, 1}
    };
    assertTrue(MazeRecursion.setWay(map, 1, 1));
}


No.4 generated result --------------------------

@Test
public void setWayTest() {
    int[][] map = {
        {1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 1},
        {1, 1, 1, 0, 1, 1, 1, 1},
        {1, 1, 1, 0, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 1},
        {1, 1, 1, 1, 1, 1, 1, 1}
    };

    assertTrue(MazeRecursion.setWay(map, 1, 1));
}


No.5 generated result --------------------------

@Test
public void setWayTest() {
    int[][] map = {
        {1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 1, 0, 0, 1},
        {1, 0, 0, 0, 1, 0, 1, 1},
        {1, 1, 1, 0, 1, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1}
    };
    assertTrue(MazeRecursion.setWay(map, 1, 1));
}



No.6 generated result --------------------------

@Test
public void setWayTest() {
    int[][] map = { {1, 1, 1, 1, 1, 1, 1},
                    {1, 0, 0, 0, 0, 0, 1},
                    {1, 1, 1, 0, 1, 1, 1},
                    {1, 0, 1, 0, 0, 0, 1},
                    {1, 1, 1, 1, 1, 1, 1} };
    assertTrue(MazeRecursion.setWay(map, 1, 1));
}


No.7 generated result --------------------------

@Test
public void setWayTest() {
    int[][] map = {
        {1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 1, 0, 1},
        {1, 0, 0, 0, 1, 0, 1},
        {1, 0, 0, 0, 0, 0, 1},
        {1, 1, 1, 1, 1, 1, 1}
    };
    assertTrue(MazeRecursion.setWay(map, 1, 1));
}



No.8 generated result --------------------------

@Test
public void setWayTest() {
    int[][] map = {{1, 1, 1, 1, 1, 1, 1},
                   {1, 0, 0, 0, 0, 0, 1},
                   {1, 1, 1, 1, 1, 0, 1},
                   {1, 0, 0, 0, 0, 0, 1},
                   {1, 1, 1, 1, 1, 1, 1}};
    assertTrue(MazeRecursion.setWay(map, 1, 1));
}



No.9 generated result --------------------------

@Test
public void setWayTest() {
    int[][] map = {{1,1,1,1,1,1,1,1},
                   {1,0,0,0,0,0,0,1},
                   {1,1,1,1,1,1,0,1},
                   {1,1,0,0,0,0,0,1},
                   {1,1,0,1,0,1,0,1},
                   {1,1,0,0,0,0,0,1},
                   {1,0,0,0,1,0,0,1},
                   {1,1,1,1,1,1,1,1}};
    assertTrue(setWay(map, 1, 1));
}


No.10 generated result --------------------------

@Test
public void shouldFindPath() {
    int[][] map = {
        {1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 1},
        {1, 1, 1, 0, 1, 1, 1, 1},
        {1, 1, 1, 0, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 1, 1},
        {1, 0, 1, 0, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 1},
        {1, 1, 1, 1, 1, 1, 1, 1}
    };
    assertTrue(MazeRecursion.setWay(map, 1, 1));
}



