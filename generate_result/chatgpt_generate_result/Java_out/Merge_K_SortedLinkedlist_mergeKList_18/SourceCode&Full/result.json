{
    "project_name": "Java",
    "file_name": "Merge_K_SortedLinkedlist.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/Merge_K_SortedLinkedlist.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * This function merge K sorted LinkedList\n     *\n     * @param a array of LinkedList\n     * @param N size of array\n     * @return node\n     */",
    "source_code": "\nNode mergeKList(Node[] a, int N) {\n    // Min Heap\n    PriorityQueue<Node> min = new PriorityQueue<>(Comparator.comparingInt(x -> x.data));\n\n    // adding head of all linkedList in min heap\n    min.addAll(Arrays.asList(a).subList(0, N));\n\n    // Make new head among smallest heads in K linkedList\n    Node head = min.poll();\n    min.add(head.next);\n    Node curr = head;\n\n    // merging LinkedList\n    while (!min.isEmpty()) {\n        Node temp = min.poll();\n        curr.next = temp;\n        curr = temp;\n\n        // Add Node in min Heap only if temp.next is not null\n        if (temp.next != null) {\n            min.add(temp.next);\n        }\n    }\n\n    return head;\n}\n",
    "class_name": "Merge_K_SortedLinkedlist",
    "method_name": "mergeKList",
    "arguments": [
        "Node a",
        "int N"
    ],
    "generate_test": [
        "Node[] lists = new Node[3];\nNode list1 = new Node();\nlist1.data = 1;\nNode list2 = new Node();\nlist2.data = 2;\nNode list3 = new Node();\nlist3.data = 3;\n\nlists[0] = list1;\nlists[1] = list2;\nlists[2] = list3;\n\nMerge_K_SortedLinkedlist mergedList = new Merge_K_SortedLinkedlist();\nNode result = mergedList.mergeKList(lists, 3);\n\n// Add assertions here to verify the result",
        "@Test\npublic void mergeKListTest() {\n    Merge_K_SortedLinkedlist ml = new Merge_K_SortedLinkedlist();\n    Merge_K_SortedLinkedlist.Node node1 = ml.new Node();\n    Merge_K_SortedLinkedlist.Node node2 = ml.new Node();\n    node1.data = 1;\n    node2.data = 2;\n    node1.next = node2;\n    Merge_K_SortedLinkedlist.Node node3 = ml.new Node();\n    node3.data = 3;\n    node2.next = node3;\n    Merge_K_SortedLinkedlist.Node[] nodes = {node1, node2, node3};\n    Merge_K_SortedLinkedlist.Node result = ml.mergeKList(nodes, 3);\n    assertEquals(1, result.data);\n    assertEquals(2, result.next.data);\n    assertEquals(3, result.next.next.data);\n}",
        "@Test\npublic void mergeKListTest() {\n    Merge_K_SortedLinkedlist linkedList = new Merge_K_SortedLinkedlist();\n\n    Merge_K_SortedLinkedlist.Node[] sampleArray = new Merge_K_SortedLinkedlist.Node[3];\n\n    Merge_K_SortedLinkedlist.Node first = linkedList.new Node();\n    first.data = 1;\n    first.next = linkedList.new Node();\n    first.next.data = 4;\n    first.next.next = linkedList.new Node();\n    first.next.next.data = 5;\n\n    Merge_K_SortedLinkedlist.Node second = linkedList.new Node();\n    second.data = 1;\n    second.next = linkedList.new Node();\n    second.next.data = 3;\n    second.next.next = linkedList.new Node();\n    second.next.next.data = 4;\n\n    Merge_K_SortedLinkedlist.Node third = linkedList.new Node();\n    third.data = 2;\n    third.next = linkedList.new Node();\n    third.next.data = 6;\n\n    sampleArray[0] = first;\n    sampleArray[1] = second;\n    sampleArray[2] = third;\n\n    Merge_K_SortedLinkedlist.Node result = linkedList.mergeKList(sampleArray, 3);\n\n    assertEquals(1, result.data);\n    assertEquals(1, result.next.data);\n    assertEquals(2, result.next.next.data);\n    assertEquals(3, result.next.next.next.data);\n    assertEquals(4, result.next.next.next.next.data);\n    assertEquals(4, result.next.next.next.next.next.data);\n    assertEquals(5, result.next.next.next.next.next.next.data);\n    assertEquals(6, result.next.next.next.next.next.next.next.data);\n}",
        "@Test\npublic void mergeKListTest() {\n    Merge_K_SortedLinkedlist ml = new Merge_K_SortedLinkedlist();\n    Merge_K_SortedLinkedlist.Node[] a = new Merge_K_SortedLinkedlist.Node[3];\n    Merge_K_SortedLinkedlist.Node n1 = ml.new Node();\n    Merge_K_SortedLinkedlist.Node n2 = ml.new Node();\n    Merge_K_SortedLinkedlist.Node n3 = ml.new Node();\n    n1.data = 1;\n    n2.data = 2;\n    n3.data = 3;\n    n1.next = n2;\n    n2.next = n3;\n    a[0] = n1;\n\n    Merge_K_SortedLinkedlist.Node n4 = ml.new Node();\n    Merge_K_SortedLinkedlist.Node n5 = ml.new Node();\n    Merge_K_SortedLinkedlist.Node n6 = ml.new Node();\n    n4.data = 4;\n    n5.data = 5;\n    n6.data = 6;\n    n4.next = n5;\n    n5.next = n6;\n    a[1] = n4;\n\n    Merge_K_SortedLinkedlist.Node n7 = ml.new Node();\n    Merge_K_SortedLinkedlist.Node n8 = ml.new Node();\n    Merge_K_SortedLinkedlist.Node n9 = ml.new Node();\n    n7.data = 7;\n    n8.data = 8;\n    n9.data = 9;\n    n7.next = n8;\n    n8.next = n9;\n    a[2] = n7;\n\n    Merge_K_SortedLinkedlist.Node head = ml.mergeKList(a, 3);\n    assertEquals(1, head.data);\n    assertEquals(2, head.next.data);\n    assertEquals(3, head.next.next.data);\n    assertEquals(4, head.next.next.next.data);\n    assertEquals(5, head.next.next.next.next.data);\n    assertEquals(6, head.next.next.next.next.next.data);\n    assertEquals(7, head.next.next.next.next.next.next.data);\n    assertEquals(8, head.next.next.next.next.next.next.next.data);\n    assertEquals(9, head.next.next.next.next.next.next.next.next.data);\n}",
        "@Test\npublic void mergeKListTest() {\n    Node n1 = new Node(1, null);\n    Node n2 = new Node(2, null);\n    Node n3 = new Node(3, null);\n    \n    Node[] arr = {n1, n2, n3};\n    Merge_K_SortedLinkedlist mergeList = new Merge_K_SortedLinkedlist();\n    Node result = mergeList.mergeKList(arr, 3);\n    \n    assertEquals(1, result.data);\n    assertEquals(2, result.next.data);\n    assertEquals(3, result.next.next.data);\n}",
        "@Test\npublic void mergeKListTest() {\n    Merge_K_SortedLinkedlist testObject = new Merge_K_SortedLinkedlist();\n    Merge_K_SortedLinkedlist.Node node1 = testObject.new Node(1);\n    Merge_K_SortedLinkedlist.Node node2 = testObject.new Node(2);\n    Merge_K_SortedLinkedlist.Node node3 = testObject.new Node(3);\n    node1.next = node2;\n    node2.next = node3;\n    Merge_K_SortedLinkedlist.Node node4 = testObject.new Node(4);\n    Merge_K_SortedLinkedlist.Node node5 = testObject.new Node(5);\n    Merge_K_SortedLinkedlist.Node node6 = testObject.new Node(6);\n    node4.next = node5;\n    node5.next = node6;\n    Merge_K_SortedLinkedlist.Node[] array = {node1, node4};\n    Merge_K_SortedLinkedlist.Node result = testObject.mergeKList(array, array.length);\n    assertEquals(1, result.data);\n    assertEquals(2, result.next.data);\n    assertEquals(3, result.next.next.data);\n    assertEquals(4, result.next.next.next.data);\n    assertEquals(5, result.next.next.next.next.data);\n    assertEquals(6, result.next.next.next.next.next.data);\n}",
        "Node[] a = new Node[3];\nNode list1 = new Node();\nlist1.data = 1;\nNode list2 = new Node();\nlist2.data = 3;\nNode list3 = new Node();\nlist3.data = 2;\na[0] = list1;\na[1] = list2; \na[2] = list3;\nint N = 3;\n\nMerge_K_SortedLinkedlist merge = new Merge_K_SortedLinkedlist();\nNode result = merge.mergeKList(a, N);",
        "@Test\npublic void mergeKListTest() {\n    Merge_K_SortedLinkedlist merge_k_sortedLinkedlist = new Merge_K_SortedLinkedlist();\n    //create your test data. Here replace with actual test data\n    Node[] a = new Node[3];\n    a[0] = new Node();\n    a[1] = new Node();\n    a[2] = new Node();\n    // Call the method you are testing\n    Node result = merge_k_sortedLinkedlist.mergeKList(a, a.length);\n    // Verify the result is as expected\n    assertNotNull(result);\n    // Add additional assertions as per your test case\n}",
        "@Test\npublic void mergeKListTest() {\n    // Create K sorted LinkedList\n    Merge_K_SortedLinkedlist list = new Merge_K_SortedLinkedlist();\n    Merge_K_SortedLinkedlist.Node[] a = new Merge_K_SortedLinkedlist.Node[3];\n    a[0] = list.new Node(1);\n    a[1] = list.new Node(2);\n    a[2] = list.new Node(3);\n\n    Merge_K_SortedLinkedlist.Node result = list.mergeKList(a, 3);\n\n    // Add assertions here to test the result\n    assertNotNull(result);\n}",
        "@Test\npublic void mergeKListTest() {\n    Merge_K_SortedLinkedlist merge_k_sortedLinkedlist = new Merge_K_SortedLinkedlist();\n    Merge_K_SortedLinkedlist.Node node1 = merge_k_sortedLinkedlist.new Node();\n    node1.data = 1;\n    Merge_K_SortedLinkedlist.Node node2 = merge_k_sortedLinkedlist.new Node();\n    node2.data = 2;\n    Merge_K_SortedLinkedlist.Node node3 = merge_k_sortedLinkedlist.new Node();\n    node3.data = 3;\n    \n    node1.next = node2;\n    node2.next = node3;\n    \n    Merge_K_SortedLinkedlist.Node[] nodes = {node1, node2, node3};\n    Merge_K_SortedLinkedlist.Node merged = merge_k_sortedLinkedlist.mergeKList(nodes, nodes.length);\n    \n    int[] expected = {1, 2, 3};\n    int index = 0;\n    while (merged != null) {\n        assertEquals(expected[index++], merged.data);\n        merged = merged.next;\n    }\n}"
    ]
}