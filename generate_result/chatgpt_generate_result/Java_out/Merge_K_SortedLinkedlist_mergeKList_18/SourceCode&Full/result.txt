Source code: 


Node mergeKList(Node[] a, int N) {
    // Min Heap
    PriorityQueue<Node> min = new PriorityQueue<>(Comparator.comparingInt(x -> x.data));

    // adding head of all linkedList in min heap
    min.addAll(Arrays.asList(a).subList(0, N));

    // Make new head among smallest heads in K linkedList
    Node head = min.poll();
    min.add(head.next);
    Node curr = head;

    // merging LinkedList
    while (!min.isEmpty()) {
        Node temp = min.poll();
        curr.next = temp;
        curr = temp;

        // Add Node in min Heap only if temp.next is not null
        if (temp.next != null) {
            min.add(temp.next);
        }
    }

    return head;
}



No.1 generated result --------------------------

Node[] lists = new Node[3];
Node list1 = new Node();
list1.data = 1;
Node list2 = new Node();
list2.data = 2;
Node list3 = new Node();
list3.data = 3;

lists[0] = list1;
lists[1] = list2;
lists[2] = list3;

Merge_K_SortedLinkedlist mergedList = new Merge_K_SortedLinkedlist();
Node result = mergedList.mergeKList(lists, 3);

// Add assertions here to verify the result


No.2 generated result --------------------------

@Test
public void mergeKListTest() {
    Merge_K_SortedLinkedlist ml = new Merge_K_SortedLinkedlist();
    Merge_K_SortedLinkedlist.Node node1 = ml.new Node();
    Merge_K_SortedLinkedlist.Node node2 = ml.new Node();
    node1.data = 1;
    node2.data = 2;
    node1.next = node2;
    Merge_K_SortedLinkedlist.Node node3 = ml.new Node();
    node3.data = 3;
    node2.next = node3;
    Merge_K_SortedLinkedlist.Node[] nodes = {node1, node2, node3};
    Merge_K_SortedLinkedlist.Node result = ml.mergeKList(nodes, 3);
    assertEquals(1, result.data);
    assertEquals(2, result.next.data);
    assertEquals(3, result.next.next.data);
}


No.3 generated result --------------------------

@Test
public void mergeKListTest() {
    Merge_K_SortedLinkedlist linkedList = new Merge_K_SortedLinkedlist();

    Merge_K_SortedLinkedlist.Node[] sampleArray = new Merge_K_SortedLinkedlist.Node[3];

    Merge_K_SortedLinkedlist.Node first = linkedList.new Node();
    first.data = 1;
    first.next = linkedList.new Node();
    first.next.data = 4;
    first.next.next = linkedList.new Node();
    first.next.next.data = 5;

    Merge_K_SortedLinkedlist.Node second = linkedList.new Node();
    second.data = 1;
    second.next = linkedList.new Node();
    second.next.data = 3;
    second.next.next = linkedList.new Node();
    second.next.next.data = 4;

    Merge_K_SortedLinkedlist.Node third = linkedList.new Node();
    third.data = 2;
    third.next = linkedList.new Node();
    third.next.data = 6;

    sampleArray[0] = first;
    sampleArray[1] = second;
    sampleArray[2] = third;

    Merge_K_SortedLinkedlist.Node result = linkedList.mergeKList(sampleArray, 3);

    assertEquals(1, result.data);
    assertEquals(1, result.next.data);
    assertEquals(2, result.next.next.data);
    assertEquals(3, result.next.next.next.data);
    assertEquals(4, result.next.next.next.next.data);
    assertEquals(4, result.next.next.next.next.next.data);
    assertEquals(5, result.next.next.next.next.next.next.data);
    assertEquals(6, result.next.next.next.next.next.next.next.data);
}


No.4 generated result --------------------------

@Test
public void mergeKListTest() {
    Merge_K_SortedLinkedlist ml = new Merge_K_SortedLinkedlist();
    Merge_K_SortedLinkedlist.Node[] a = new Merge_K_SortedLinkedlist.Node[3];
    Merge_K_SortedLinkedlist.Node n1 = ml.new Node();
    Merge_K_SortedLinkedlist.Node n2 = ml.new Node();
    Merge_K_SortedLinkedlist.Node n3 = ml.new Node();
    n1.data = 1;
    n2.data = 2;
    n3.data = 3;
    n1.next = n2;
    n2.next = n3;
    a[0] = n1;

    Merge_K_SortedLinkedlist.Node n4 = ml.new Node();
    Merge_K_SortedLinkedlist.Node n5 = ml.new Node();
    Merge_K_SortedLinkedlist.Node n6 = ml.new Node();
    n4.data = 4;
    n5.data = 5;
    n6.data = 6;
    n4.next = n5;
    n5.next = n6;
    a[1] = n4;

    Merge_K_SortedLinkedlist.Node n7 = ml.new Node();
    Merge_K_SortedLinkedlist.Node n8 = ml.new Node();
    Merge_K_SortedLinkedlist.Node n9 = ml.new Node();
    n7.data = 7;
    n8.data = 8;
    n9.data = 9;
    n7.next = n8;
    n8.next = n9;
    a[2] = n7;

    Merge_K_SortedLinkedlist.Node head = ml.mergeKList(a, 3);
    assertEquals(1, head.data);
    assertEquals(2, head.next.data);
    assertEquals(3, head.next.next.data);
    assertEquals(4, head.next.next.next.data);
    assertEquals(5, head.next.next.next.next.data);
    assertEquals(6, head.next.next.next.next.next.data);
    assertEquals(7, head.next.next.next.next.next.next.data);
    assertEquals(8, head.next.next.next.next.next.next.next.data);
    assertEquals(9, head.next.next.next.next.next.next.next.next.data);
}


No.5 generated result --------------------------

@Test
public void mergeKListTest() {
    Node n1 = new Node(1, null);
    Node n2 = new Node(2, null);
    Node n3 = new Node(3, null);
    
    Node[] arr = {n1, n2, n3};
    Merge_K_SortedLinkedlist mergeList = new Merge_K_SortedLinkedlist();
    Node result = mergeList.mergeKList(arr, 3);
    
    assertEquals(1, result.data);
    assertEquals(2, result.next.data);
    assertEquals(3, result.next.next.data);
}


No.6 generated result --------------------------

@Test
public void mergeKListTest() {
    Merge_K_SortedLinkedlist testObject = new Merge_K_SortedLinkedlist();
    Merge_K_SortedLinkedlist.Node node1 = testObject.new Node(1);
    Merge_K_SortedLinkedlist.Node node2 = testObject.new Node(2);
    Merge_K_SortedLinkedlist.Node node3 = testObject.new Node(3);
    node1.next = node2;
    node2.next = node3;
    Merge_K_SortedLinkedlist.Node node4 = testObject.new Node(4);
    Merge_K_SortedLinkedlist.Node node5 = testObject.new Node(5);
    Merge_K_SortedLinkedlist.Node node6 = testObject.new Node(6);
    node4.next = node5;
    node5.next = node6;
    Merge_K_SortedLinkedlist.Node[] array = {node1, node4};
    Merge_K_SortedLinkedlist.Node result = testObject.mergeKList(array, array.length);
    assertEquals(1, result.data);
    assertEquals(2, result.next.data);
    assertEquals(3, result.next.next.data);
    assertEquals(4, result.next.next.next.data);
    assertEquals(5, result.next.next.next.next.data);
    assertEquals(6, result.next.next.next.next.next.data);
}


No.7 generated result --------------------------

Node[] a = new Node[3];
Node list1 = new Node();
list1.data = 1;
Node list2 = new Node();
list2.data = 3;
Node list3 = new Node();
list3.data = 2;
a[0] = list1;
a[1] = list2; 
a[2] = list3;
int N = 3;

Merge_K_SortedLinkedlist merge = new Merge_K_SortedLinkedlist();
Node result = merge.mergeKList(a, N);


No.8 generated result --------------------------

@Test
public void mergeKListTest() {
    Merge_K_SortedLinkedlist merge_k_sortedLinkedlist = new Merge_K_SortedLinkedlist();
    //create your test data. Here replace with actual test data
    Node[] a = new Node[3];
    a[0] = new Node();
    a[1] = new Node();
    a[2] = new Node();
    // Call the method you are testing
    Node result = merge_k_sortedLinkedlist.mergeKList(a, a.length);
    // Verify the result is as expected
    assertNotNull(result);
    // Add additional assertions as per your test case
}


No.9 generated result --------------------------

@Test
public void mergeKListTest() {
    // Create K sorted LinkedList
    Merge_K_SortedLinkedlist list = new Merge_K_SortedLinkedlist();
    Merge_K_SortedLinkedlist.Node[] a = new Merge_K_SortedLinkedlist.Node[3];
    a[0] = list.new Node(1);
    a[1] = list.new Node(2);
    a[2] = list.new Node(3);

    Merge_K_SortedLinkedlist.Node result = list.mergeKList(a, 3);

    // Add assertions here to test the result
    assertNotNull(result);
}


No.10 generated result --------------------------

@Test
public void mergeKListTest() {
    Merge_K_SortedLinkedlist merge_k_sortedLinkedlist = new Merge_K_SortedLinkedlist();
    Merge_K_SortedLinkedlist.Node node1 = merge_k_sortedLinkedlist.new Node();
    node1.data = 1;
    Merge_K_SortedLinkedlist.Node node2 = merge_k_sortedLinkedlist.new Node();
    node2.data = 2;
    Merge_K_SortedLinkedlist.Node node3 = merge_k_sortedLinkedlist.new Node();
    node3.data = 3;
    
    node1.next = node2;
    node2.next = node3;
    
    Merge_K_SortedLinkedlist.Node[] nodes = {node1, node2, node3};
    Merge_K_SortedLinkedlist.Node merged = merge_k_sortedLinkedlist.mergeKList(nodes, nodes.length);
    
    int[] expected = {1, 2, 3};
    int index = 0;
    while (merged != null) {
        assertEquals(expected[index++], merged.data);
        merged = merged.next;
    }
}


