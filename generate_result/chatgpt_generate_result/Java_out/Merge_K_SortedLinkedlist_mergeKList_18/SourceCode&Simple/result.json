{
    "project_name": "Java",
    "file_name": "Merge_K_SortedLinkedlist.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/Merge_K_SortedLinkedlist.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * This function merge K sorted LinkedList\n     *\n     * @param a array of LinkedList\n     * @param N size of array\n     * @return node\n     */",
    "source_code": "\nNode mergeKList(Node[] a, int N) {\n    // Min Heap\n    PriorityQueue<Node> min = new PriorityQueue<>(Comparator.comparingInt(x -> x.data));\n\n    // adding head of all linkedList in min heap\n    min.addAll(Arrays.asList(a).subList(0, N));\n\n    // Make new head among smallest heads in K linkedList\n    Node head = min.poll();\n    min.add(head.next);\n    Node curr = head;\n\n    // merging LinkedList\n    while (!min.isEmpty()) {\n        Node temp = min.poll();\n        curr.next = temp;\n        curr = temp;\n\n        // Add Node in min Heap only if temp.next is not null\n        if (temp.next != null) {\n            min.add(temp.next);\n        }\n    }\n\n    return head;\n}\n",
    "class_name": "Merge_K_SortedLinkedlist",
    "method_name": "mergeKList",
    "arguments": [
        "Node a",
        "int N"
    ],
    "generate_test": [
        "Node[] nodes = {new Node(1), new Node(2), new Node(3)};\nNode result = mergeKList(nodes, 3);\nassertEquals(1, result.data);\nassertEquals(2, result.next.data);\nassertEquals(3, result.next.next.data);",
        "Node node1 = new Node();\nnode1.data = 1;\nNode node2 = new Node();\nnode2.data = 2;\nNode node3 = new Node();\nnode3.data = 3;\n\nNode[] array = new Node[]{node1, node2, node3};\nMerge_K_SortedLinkedlist testObj = new Merge_K_SortedLinkedlist();\nNode result = testObj.mergeKList(array, 3);\n\nassertNotNull(result);\nassertEquals(1, result.data);\nassertEquals(2, result.next.data);\nassertEquals(3, result.next.next.data);",
        "Node[] a = new Node[3];\nMerge_K_SortedLinkedlist list = new Merge_K_SortedLinkedlist();\nNode n = list.new Node();\nn.data = 1;\na[0] = n;\n\nn = list.new Node();\nn.data = 2;\na[1] = n;\n\nn = list.new Node();\nn.data = 3;\na[2] = n;\n\nNode mergedList = list.mergeKList(a, 3);\nassertEquals(1, mergedList.data);\nassertEquals(2, mergedList.next.data);\nassertEquals(3, mergedList.next.next.data);",
        "Node[] array = new Node[3];\nNode node1 = new Node();\nNode node2 = new Node();\nNode node3 = new Node();\n\nnode1.data = 1;\nnode2.data = 2;\nnode3.data = 3;\n\nnode1.next = node2;\nnode2.next = node3;\n\narray[0] = node1;\narray[1] = node1;\narray[2] = node1;\n\nNode result = new Merge_K_SortedLinkedlist().mergeKList(array, 3);\nassertEquals(1, result.data);\nassertEquals(1, result.next.data);\nassertEquals(1, result.next.next.data);",
        "@Test\npublic void mergeKListTest() {\n     Node[] a = new Node[3];\n     for (int i = 0; i < a.length; i++) {\n         a[i] = new Node();\n     }\n     a[0].data = 1;\n     a[1].data = 2;\n     a[2].data = 3;\n     a[0].next = new Node();\n     a[0].next.data = 4;\n     a[0].next.next = new Node();\n     a[0].next.next.data = 5;\n     a[1].next = new Node();\n     a[1].next.data = 6;\n     a[1].next.next = new Node();\n     a[1].next.next.data = 7;\n     a[2].next = new Node();\n     a[2].next.data = 8;\n     a[2].next.next = new Node();\n     a[2].next.next.data = 9;\n\n     Node result = mergeKList(a, a.length);\n     assertEquals(1, result.data);\n     assertEquals(2, result.next.data);\n     assertEquals(3, result.next.next.data);\n     assertEquals(4, result.next.next.next.data);\n     assertEquals(5, result.next.next.next.next.data);\n     assertEquals(6, result.next.next.next.next.next.data);\n     assertEquals(7, result.next.next.next.next.next.next.data);\n     assertEquals(8, result.next.next.next.next.next.next.next.data);\n     assertEquals(9, result.next.next.next.next.next.next.next.next.data);\n }",
        "Node n1 = new Node(1);\nNode n2 = new Node(4);\nNode n3 = new Node(5);\nNode[] nodes = {n1, n2, n3};\nMerge_K_SortedLinkedlist mergeK = new Merge_K_SortedLinkedlist();\nNode result = mergeK.mergeKList(nodes, 3);\nassertEquals(1, result.data);\nassertEquals(4, result.next.data);\nassertEquals(5, result.next.next.data);",
        "@Test\npublic void mergeKListTest() {\n    Merge_K_SortedLinkedlist.Node[] nodeList = new Merge_K_SortedLinkedlist.Node[3];\n    nodeList[0] = new Merge_K_SortedLinkedlist.Node(1);\n    nodeList[1] = new Merge_K_SortedLinkedlist.Node(2);\n    nodeList[2] = new Merge_K_SortedLinkedlist.Node(3);\n    Merge_K_SortedLinkedlist mergeList = new Merge_K_SortedLinkedlist();\n    Merge_K_SortedLinkedlist.Node merged = mergeList.mergeKList(nodeList, 3);\n    assertEquals(1, merged.data);\n    assertEquals(2, merged.next.data);\n    assertEquals(3, merged.next.next.data);\n}",
        "\nNode[] nodes = new Node[3];\nnodes[0] = new Node(1, null);\nnodes[1] = new Node(2, null);\nnodes[2] = new Node(3, null);\n\nMerge_K_SortedLinkedlist merge_k = new Merge_K_SortedLinkedlist();\nNode mergedList = merge_k.mergeKList(nodes, 3);\n\n// Add assertions to validate the merged list\nassertEquals(1, mergedList.data);\nassertEquals(2, mergedList.next.data);\nassertEquals(3, mergedList.next.next.data);",
        "\n    Node[] nodes = new Node[3];\n    Node node1 = new Node(1, new Node(4, new Node(5, null)));\n    Node node2 = new Node(1, new Node(3, new Node(4, null)));\n    Node node3 = new Node(2, new Node(6, null));\n    nodes[0] = node1;\n    nodes[1] = node2;\n    nodes[2] = node3;\n    \n    Merge_K_SortedLinkedlist mergeKSortedLinkedlist = new Merge_K_SortedLinkedlist();\n    Node result = mergeKSortedLinkedlist.mergeKList(nodes, 3);\n\n    assertEquals(1, result.data);\n    assertEquals(1, result.next.data);\n    assertEquals(2, result.next.next.data);\n    assertEquals(3, result.next.next.next.data);\n    assertEquals(4, result.next.next.next.next.data);\n    assertEquals(4, result.next.next.next.next.next.data);\n    assertEquals(5, result.next.next.next.next.next.next.data);\n    assertEquals(6, result.next.next.next.next.next.next.next.data);",
        "@Test\npublic void mergeKListTest() {\n    Node n1 = new Node();\n    n1.data = 1;\n    Node n2 = new Node();\n    n2.data = 2;\n    Node n3 = new Node();\n    n3.data = 3;\n    \n    Node[] nodes = {n1, n2, n3};\n    \n    Node result = mergeKList(nodes, 3);\n    assertEquals(1, result.data);\n    assertEquals(2, result.next.data);\n    assertEquals(3, result.next.next.data);\n}"
    ]
}