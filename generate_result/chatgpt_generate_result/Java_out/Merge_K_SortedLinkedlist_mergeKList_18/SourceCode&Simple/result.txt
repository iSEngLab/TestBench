Source code: 


Node mergeKList(Node[] a, int N) {
    // Min Heap
    PriorityQueue<Node> min = new PriorityQueue<>(Comparator.comparingInt(x -> x.data));

    // adding head of all linkedList in min heap
    min.addAll(Arrays.asList(a).subList(0, N));

    // Make new head among smallest heads in K linkedList
    Node head = min.poll();
    min.add(head.next);
    Node curr = head;

    // merging LinkedList
    while (!min.isEmpty()) {
        Node temp = min.poll();
        curr.next = temp;
        curr = temp;

        // Add Node in min Heap only if temp.next is not null
        if (temp.next != null) {
            min.add(temp.next);
        }
    }

    return head;
}



No.1 generated result --------------------------

Node[] nodes = {new Node(1), new Node(2), new Node(3)};
Node result = mergeKList(nodes, 3);
assertEquals(1, result.data);
assertEquals(2, result.next.data);
assertEquals(3, result.next.next.data);


No.2 generated result --------------------------

Node node1 = new Node();
node1.data = 1;
Node node2 = new Node();
node2.data = 2;
Node node3 = new Node();
node3.data = 3;

Node[] array = new Node[]{node1, node2, node3};
Merge_K_SortedLinkedlist testObj = new Merge_K_SortedLinkedlist();
Node result = testObj.mergeKList(array, 3);

assertNotNull(result);
assertEquals(1, result.data);
assertEquals(2, result.next.data);
assertEquals(3, result.next.next.data);


No.3 generated result --------------------------

Node[] a = new Node[3];
Merge_K_SortedLinkedlist list = new Merge_K_SortedLinkedlist();
Node n = list.new Node();
n.data = 1;
a[0] = n;

n = list.new Node();
n.data = 2;
a[1] = n;

n = list.new Node();
n.data = 3;
a[2] = n;

Node mergedList = list.mergeKList(a, 3);
assertEquals(1, mergedList.data);
assertEquals(2, mergedList.next.data);
assertEquals(3, mergedList.next.next.data);


No.4 generated result --------------------------

Node[] array = new Node[3];
Node node1 = new Node();
Node node2 = new Node();
Node node3 = new Node();

node1.data = 1;
node2.data = 2;
node3.data = 3;

node1.next = node2;
node2.next = node3;

array[0] = node1;
array[1] = node1;
array[2] = node1;

Node result = new Merge_K_SortedLinkedlist().mergeKList(array, 3);
assertEquals(1, result.data);
assertEquals(1, result.next.data);
assertEquals(1, result.next.next.data);


No.5 generated result --------------------------

@Test
public void mergeKListTest() {
     Node[] a = new Node[3];
     for (int i = 0; i < a.length; i++) {
         a[i] = new Node();
     }
     a[0].data = 1;
     a[1].data = 2;
     a[2].data = 3;
     a[0].next = new Node();
     a[0].next.data = 4;
     a[0].next.next = new Node();
     a[0].next.next.data = 5;
     a[1].next = new Node();
     a[1].next.data = 6;
     a[1].next.next = new Node();
     a[1].next.next.data = 7;
     a[2].next = new Node();
     a[2].next.data = 8;
     a[2].next.next = new Node();
     a[2].next.next.data = 9;

     Node result = mergeKList(a, a.length);
     assertEquals(1, result.data);
     assertEquals(2, result.next.data);
     assertEquals(3, result.next.next.data);
     assertEquals(4, result.next.next.next.data);
     assertEquals(5, result.next.next.next.next.data);
     assertEquals(6, result.next.next.next.next.next.data);
     assertEquals(7, result.next.next.next.next.next.next.data);
     assertEquals(8, result.next.next.next.next.next.next.next.data);
     assertEquals(9, result.next.next.next.next.next.next.next.next.data);
 }


No.6 generated result --------------------------

Node n1 = new Node(1);
Node n2 = new Node(4);
Node n3 = new Node(5);
Node[] nodes = {n1, n2, n3};
Merge_K_SortedLinkedlist mergeK = new Merge_K_SortedLinkedlist();
Node result = mergeK.mergeKList(nodes, 3);
assertEquals(1, result.data);
assertEquals(4, result.next.data);
assertEquals(5, result.next.next.data);


No.7 generated result --------------------------

@Test
public void mergeKListTest() {
    Merge_K_SortedLinkedlist.Node[] nodeList = new Merge_K_SortedLinkedlist.Node[3];
    nodeList[0] = new Merge_K_SortedLinkedlist.Node(1);
    nodeList[1] = new Merge_K_SortedLinkedlist.Node(2);
    nodeList[2] = new Merge_K_SortedLinkedlist.Node(3);
    Merge_K_SortedLinkedlist mergeList = new Merge_K_SortedLinkedlist();
    Merge_K_SortedLinkedlist.Node merged = mergeList.mergeKList(nodeList, 3);
    assertEquals(1, merged.data);
    assertEquals(2, merged.next.data);
    assertEquals(3, merged.next.next.data);
}


No.8 generated result --------------------------


Node[] nodes = new Node[3];
nodes[0] = new Node(1, null);
nodes[1] = new Node(2, null);
nodes[2] = new Node(3, null);

Merge_K_SortedLinkedlist merge_k = new Merge_K_SortedLinkedlist();
Node mergedList = merge_k.mergeKList(nodes, 3);

// Add assertions to validate the merged list
assertEquals(1, mergedList.data);
assertEquals(2, mergedList.next.data);
assertEquals(3, mergedList.next.next.data);


No.9 generated result --------------------------


    Node[] nodes = new Node[3];
    Node node1 = new Node(1, new Node(4, new Node(5, null)));
    Node node2 = new Node(1, new Node(3, new Node(4, null)));
    Node node3 = new Node(2, new Node(6, null));
    nodes[0] = node1;
    nodes[1] = node2;
    nodes[2] = node3;
    
    Merge_K_SortedLinkedlist mergeKSortedLinkedlist = new Merge_K_SortedLinkedlist();
    Node result = mergeKSortedLinkedlist.mergeKList(nodes, 3);

    assertEquals(1, result.data);
    assertEquals(1, result.next.data);
    assertEquals(2, result.next.next.data);
    assertEquals(3, result.next.next.next.data);
    assertEquals(4, result.next.next.next.next.data);
    assertEquals(4, result.next.next.next.next.next.data);
    assertEquals(5, result.next.next.next.next.next.next.data);
    assertEquals(6, result.next.next.next.next.next.next.next.data);


No.10 generated result --------------------------

@Test
public void mergeKListTest() {
    Node n1 = new Node();
    n1.data = 1;
    Node n2 = new Node();
    n2.data = 2;
    Node n3 = new Node();
    n3.data = 3;
    
    Node[] nodes = {n1, n2, n3};
    
    Node result = mergeKList(nodes, 3);
    assertEquals(1, result.data);
    assertEquals(2, result.next.data);
    assertEquals(3, result.next.next.data);
}


