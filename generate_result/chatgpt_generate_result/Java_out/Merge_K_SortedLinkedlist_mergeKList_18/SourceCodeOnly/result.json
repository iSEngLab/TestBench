{
    "project_name": "Java",
    "file_name": "Merge_K_SortedLinkedlist.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/Merge_K_SortedLinkedlist.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * This function merge K sorted LinkedList\n     *\n     * @param a array of LinkedList\n     * @param N size of array\n     * @return node\n     */",
    "source_code": "\nNode mergeKList(Node[] a, int N) {\n    // Min Heap\n    PriorityQueue<Node> min = new PriorityQueue<>(Comparator.comparingInt(x -> x.data));\n\n    // adding head of all linkedList in min heap\n    min.addAll(Arrays.asList(a).subList(0, N));\n\n    // Make new head among smallest heads in K linkedList\n    Node head = min.poll();\n    min.add(head.next);\n    Node curr = head;\n\n    // merging LinkedList\n    while (!min.isEmpty()) {\n        Node temp = min.poll();\n        curr.next = temp;\n        curr = temp;\n\n        // Add Node in min Heap only if temp.next is not null\n        if (temp.next != null) {\n            min.add(temp.next);\n        }\n    }\n\n    return head;\n}\n",
    "class_name": "Merge_K_SortedLinkedlist",
    "method_name": "mergeKList",
    "arguments": [
        "Node a",
        "int N"
    ],
    "generate_test": [
        "@Test\npublic void mergeKListTest() {\n    Node[] lists = new Node[3];\n    lists[0] = new Node(1);\n    lists[0].next = new Node(4);\n    lists[0].next.next = new Node(5);\n\n    lists[1] = new Node(1);\n    lists[1].next = new Node(3);\n    lists[1].next.next = new Node(4);\n\n    lists[2] = new Node(2);\n    lists[2].next = new Node(6);\n\n    Merge_K_SortedLinkedlist mergeKSortedLinkedlist = new Merge_K_SortedLinkedlist();\n    Node result = mergeKSortedLinkedlist.mergeKList(lists, 3);\n\n    assertEquals(1, result.data);\n    assertEquals(1, result.next.data);\n    assertEquals(2, result.next.next.data);\n    assertEquals(3, result.next.next.next.data);\n    assertEquals(4, result.next.next.next.next.data);\n    assertEquals(4, result.next.next.next.next.next.data);\n    assertEquals(5, result.next.next.next.next.next.next.data);\n    assertEquals(6, result.next.next.next.next.next.next.next.data);\n    assertNull(result.next.next.next.next.next.next.next.next);\n}",
        "@Test\npublic void mergeKListTest() {\n    Node[] a = new Node[3];\n    a[0] = new Node(1);\n    a[1] = new Node(3);\n    a[2] = new Node(2);\n\n    Node result = mergeKList(a, 3);\n    assertEquals(result.data, 1);\n    assertEquals(result.next.data, 2);\n    assertEquals(result.next.next.data, 3);\n}",
        "@Test\npublic void mergeKListTest() {\n    // Create array of Nodes\n    Node[] a = new Node[4];\n    a[0] = new Node(1);\n    a[1] = new Node(4);\n    a[2] = new Node(3);\n    a[3] = new Node(2);\n    \n    // Merge the K sorted linked list\n    Node result = mergeKList(a, 4);\n    \n    // Assertions for the merged linked list\n    assertEquals(1, result.data);\n    assertEquals(2, result.next.data);\n    assertEquals(3, result.next.next.data);\n    assertEquals(4, result.next.next.next.data);\n}\n",
        "@Test\npublic void mergeKListTest() {\n    Node[] lists = {new Node(1), new Node(2), new Node(3)};\n    Node result = mergeKList(lists, lists.length);\n    assertEquals(1, result.data);\n    assertEquals(2, result.next.data);\n    assertEquals(3, result.next.next.data);\n}",
        "@Test\npublic void mergeKListTest() {\n    // Create input LinkedLists\n    Node head1 = new Node(1);\n    head1.next = new Node(4);\n    head1.next.next = new Node(5);\n\n    Node head2 = new Node(1);\n    head2.next = new Node(3);\n    head2.next.next = new Node(4);\n\n    Node head3 = new Node(2);\n    head3.next = new Node(6);\n\n    Node[] input = {head1, head2, head3};\n\n    // Call the method to test\n    Node result = mergeKList(input, 3);\n\n    // Test the result\n    assertEquals(1, result.data);\n    assertEquals(1, result.next.data);\n    assertEquals(2, result.next.next.data);\n    assertEquals(3, result.next.next.next.data);\n    assertEquals(4, result.next.next.next.next.data);\n    assertEquals(4, result.next.next.next.next.next.data);\n    assertEquals(5, result.next.next.next.next.next.next.data);\n    assertEquals(6, result.next.next.next.next.next.next.next.data);\n}",
        "@Test\npublic void mergeKListTest() {\n    Node list1 = new Node(1);\n    list1.next = new Node(4);\n    list1.next.next = new Node(5);\n\n    Node list2 = new Node(1);\n    list2.next = new Node(3);\n    list2.next.next = new Node(4);\n\n    Node list3 = new Node(2);\n    list3.next = new Node(6);\n\n    Node[] input = {list1, list2, list3};\n    Node result = mergeKList(input, 3);\n\n    assertEquals(1, result.data);\n    assertEquals(1, result.next.data);\n    assertEquals(2, result.next.next.data);\n    assertEquals(3, result.next.next.next.data);\n    assertEquals(4, result.next.next.next.next.data);\n    assertEquals(4, result.next.next.next.next.next.data);\n    assertEquals(5, result.next.next.next.next.next.next.data);\n    assertEquals(6, result.next.next.next.next.next.next.next.data);\n    assertNull(result.next.next.next.next.next.next.next.next);\n}",
        "@Test\npublic void mergeKListTest() {\n    Node[] lists = new Node[]{node1, node2, node3}; // Replace node1, node2, node3 with actual nodes\n    int N = lists.length;\n    Node result = mergeKList(lists, N);\n    // Add assertions here to test the merged linked list\n    // For example:\n    // assertEquals(expectedResult, result);\n}",
        "@Test\npublic void mergeKListTest() {\n    Node[] a = new Node[3];\n    a[0] = new Node(1);\n    a[0].next = new Node(4);\n    a[0].next.next = new Node(5);\n\n    a[1] = new Node(1);\n    a[1].next = new Node(3);\n    a[1].next.next = new Node(4);\n\n    a[2] = new Node(2);\n    a[2].next = new Node(6);\n\n    Node result = mergeKList(a, 3);\n\n    // Add assertions to verify the result\n    assertEquals(1, result.data);\n    assertEquals(1, result.next.data);\n    assertEquals(2, result.next.next.data);\n    assertEquals(3, result.next.next.next.data);\n    assertEquals(4, result.next.next.next.next.data);\n    assertEquals(4, result.next.next.next.next.next.data);\n    assertEquals(5, result.next.next.next.next.next.next.data);\n    assertEquals(6, result.next.next.next.next.next.next.next.data);\n}",
        "@Test\npublic void mergeKListTest() {\n    Node[] lists = new Node[3]; // assuming 3 linked lists for testing\n    lists[0] = new Node(1); \n    lists[0].next = new Node(4);\n    lists[0].next.next = new Node(5);\n    lists[1] = new Node(1);\n    lists[1].next = new Node(3);\n    lists[1].next.next = new Node(4);\n    // fill in the rest of the linked list nodes for testing\n\n    Node result = mergeKList(lists, lists.length);\n\n    // assert the result as expected\n    // e.g. assertEquals(expected, result);\n}",
        " @Test\n    public void mergeKListTest() {\n       //creating input linked list\n       Node list1 = new Node(1);\n       list1.next = new Node(4);\n       list1.next.next = new Node(5);\n\n       Node list2 = new Node(1);\n       list2.next = new Node(3);\n       list2.next.next = new Node(4);\n\n       Node list3 = new Node(2);\n       list3.next = new Node(6);\n\n       Node[] input = {list1, list2, list3};\n\n       //expected result\n       Node expected = new Node(1);\n       expected.next = new Node(1);\n       expected.next.next = new Node(2);\n       expected.next.next.next = new Node(3);\n       expected.next.next.next.next = new Node(4);\n       expected.next.next.next.next.next = new Node(4);\n       expected.next.next.next.next.next.next = new Node(5);\n       expected.next.next.next.next.next.next.next = new Node(6);\n\n       //unit test\n       Merge_K_SortedLinkedlist mergeK = new Merge_K_SortedLinkedlist();\n       Node result = mergeK.mergeKList(input, 3);\n       while(expected != null && result != null) {\n           assertEquals(expected.data, result.data);\n           expected = expected.next;\n           result = result.next;\n       }\n       assertNull(expected);\n       assertNull(result);\n    }\n}"
    ]
}