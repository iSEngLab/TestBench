Source code: 


Node mergeKList(Node[] a, int N) {
    // Min Heap
    PriorityQueue<Node> min = new PriorityQueue<>(Comparator.comparingInt(x -> x.data));

    // adding head of all linkedList in min heap
    min.addAll(Arrays.asList(a).subList(0, N));

    // Make new head among smallest heads in K linkedList
    Node head = min.poll();
    min.add(head.next);
    Node curr = head;

    // merging LinkedList
    while (!min.isEmpty()) {
        Node temp = min.poll();
        curr.next = temp;
        curr = temp;

        // Add Node in min Heap only if temp.next is not null
        if (temp.next != null) {
            min.add(temp.next);
        }
    }

    return head;
}



No.1 generated result --------------------------

@Test
public void mergeKListTest() {
    Node[] lists = new Node[3];
    lists[0] = new Node(1);
    lists[0].next = new Node(4);
    lists[0].next.next = new Node(5);

    lists[1] = new Node(1);
    lists[1].next = new Node(3);
    lists[1].next.next = new Node(4);

    lists[2] = new Node(2);
    lists[2].next = new Node(6);

    Merge_K_SortedLinkedlist mergeKSortedLinkedlist = new Merge_K_SortedLinkedlist();
    Node result = mergeKSortedLinkedlist.mergeKList(lists, 3);

    assertEquals(1, result.data);
    assertEquals(1, result.next.data);
    assertEquals(2, result.next.next.data);
    assertEquals(3, result.next.next.next.data);
    assertEquals(4, result.next.next.next.next.data);
    assertEquals(4, result.next.next.next.next.next.data);
    assertEquals(5, result.next.next.next.next.next.next.data);
    assertEquals(6, result.next.next.next.next.next.next.next.data);
    assertNull(result.next.next.next.next.next.next.next.next);
}


No.2 generated result --------------------------

@Test
public void mergeKListTest() {
    Node[] a = new Node[3];
    a[0] = new Node(1);
    a[1] = new Node(3);
    a[2] = new Node(2);

    Node result = mergeKList(a, 3);
    assertEquals(result.data, 1);
    assertEquals(result.next.data, 2);
    assertEquals(result.next.next.data, 3);
}


No.3 generated result --------------------------

@Test
public void mergeKListTest() {
    // Create array of Nodes
    Node[] a = new Node[4];
    a[0] = new Node(1);
    a[1] = new Node(4);
    a[2] = new Node(3);
    a[3] = new Node(2);
    
    // Merge the K sorted linked list
    Node result = mergeKList(a, 4);
    
    // Assertions for the merged linked list
    assertEquals(1, result.data);
    assertEquals(2, result.next.data);
    assertEquals(3, result.next.next.data);
    assertEquals(4, result.next.next.next.data);
}



No.4 generated result --------------------------

@Test
public void mergeKListTest() {
    Node[] lists = {new Node(1), new Node(2), new Node(3)};
    Node result = mergeKList(lists, lists.length);
    assertEquals(1, result.data);
    assertEquals(2, result.next.data);
    assertEquals(3, result.next.next.data);
}


No.5 generated result --------------------------

@Test
public void mergeKListTest() {
    // Create input LinkedLists
    Node head1 = new Node(1);
    head1.next = new Node(4);
    head1.next.next = new Node(5);

    Node head2 = new Node(1);
    head2.next = new Node(3);
    head2.next.next = new Node(4);

    Node head3 = new Node(2);
    head3.next = new Node(6);

    Node[] input = {head1, head2, head3};

    // Call the method to test
    Node result = mergeKList(input, 3);

    // Test the result
    assertEquals(1, result.data);
    assertEquals(1, result.next.data);
    assertEquals(2, result.next.next.data);
    assertEquals(3, result.next.next.next.data);
    assertEquals(4, result.next.next.next.next.data);
    assertEquals(4, result.next.next.next.next.next.data);
    assertEquals(5, result.next.next.next.next.next.next.data);
    assertEquals(6, result.next.next.next.next.next.next.next.data);
}


No.6 generated result --------------------------

@Test
public void mergeKListTest() {
    Node list1 = new Node(1);
    list1.next = new Node(4);
    list1.next.next = new Node(5);

    Node list2 = new Node(1);
    list2.next = new Node(3);
    list2.next.next = new Node(4);

    Node list3 = new Node(2);
    list3.next = new Node(6);

    Node[] input = {list1, list2, list3};
    Node result = mergeKList(input, 3);

    assertEquals(1, result.data);
    assertEquals(1, result.next.data);
    assertEquals(2, result.next.next.data);
    assertEquals(3, result.next.next.next.data);
    assertEquals(4, result.next.next.next.next.data);
    assertEquals(4, result.next.next.next.next.next.data);
    assertEquals(5, result.next.next.next.next.next.next.data);
    assertEquals(6, result.next.next.next.next.next.next.next.data);
    assertNull(result.next.next.next.next.next.next.next.next);
}


No.7 generated result --------------------------

@Test
public void mergeKListTest() {
    Node[] lists = new Node[]{node1, node2, node3}; // Replace node1, node2, node3 with actual nodes
    int N = lists.length;
    Node result = mergeKList(lists, N);
    // Add assertions here to test the merged linked list
    // For example:
    // assertEquals(expectedResult, result);
}


No.8 generated result --------------------------

@Test
public void mergeKListTest() {
    Node[] a = new Node[3];
    a[0] = new Node(1);
    a[0].next = new Node(4);
    a[0].next.next = new Node(5);

    a[1] = new Node(1);
    a[1].next = new Node(3);
    a[1].next.next = new Node(4);

    a[2] = new Node(2);
    a[2].next = new Node(6);

    Node result = mergeKList(a, 3);

    // Add assertions to verify the result
    assertEquals(1, result.data);
    assertEquals(1, result.next.data);
    assertEquals(2, result.next.next.data);
    assertEquals(3, result.next.next.next.data);
    assertEquals(4, result.next.next.next.next.data);
    assertEquals(4, result.next.next.next.next.next.data);
    assertEquals(5, result.next.next.next.next.next.next.data);
    assertEquals(6, result.next.next.next.next.next.next.next.data);
}


No.9 generated result --------------------------

@Test
public void mergeKListTest() {
    Node[] lists = new Node[3]; // assuming 3 linked lists for testing
    lists[0] = new Node(1); 
    lists[0].next = new Node(4);
    lists[0].next.next = new Node(5);
    lists[1] = new Node(1);
    lists[1].next = new Node(3);
    lists[1].next.next = new Node(4);
    // fill in the rest of the linked list nodes for testing

    Node result = mergeKList(lists, lists.length);

    // assert the result as expected
    // e.g. assertEquals(expected, result);
}


No.10 generated result --------------------------

 @Test
    public void mergeKListTest() {
       //creating input linked list
       Node list1 = new Node(1);
       list1.next = new Node(4);
       list1.next.next = new Node(5);

       Node list2 = new Node(1);
       list2.next = new Node(3);
       list2.next.next = new Node(4);

       Node list3 = new Node(2);
       list3.next = new Node(6);

       Node[] input = {list1, list2, list3};

       //expected result
       Node expected = new Node(1);
       expected.next = new Node(1);
       expected.next.next = new Node(2);
       expected.next.next.next = new Node(3);
       expected.next.next.next.next = new Node(4);
       expected.next.next.next.next.next = new Node(4);
       expected.next.next.next.next.next.next = new Node(5);
       expected.next.next.next.next.next.next.next = new Node(6);

       //unit test
       Merge_K_SortedLinkedlist mergeK = new Merge_K_SortedLinkedlist();
       Node result = mergeK.mergeKList(input, 3);
       while(expected != null && result != null) {
           assertEquals(expected.data, result.data);
           expected = expected.next;
           result = result.next;
       }
       assertNull(expected);
       assertNull(result);
    }
}


