{
    "project_name": "Java",
    "file_name": "NodeStack.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/stacks/NodeStack.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.stacks",
    "docstring": "/**\n     * Put a value onto the stack.\n     *\n     * @param item : value to be put on the stack.\n     */",
    "source_code": "\npublic void push(Item item) {\n    NodeStack<Item> newNs = new NodeStack<Item>(item);\n\n    if (this.isEmpty()) {\n        NodeStack.setHead(new NodeStack<>(item));\n        newNs.setNext(null);\n        newNs.setPrevious(null);\n    } else {\n        newNs.setPrevious(NodeStack.head);\n        NodeStack.head.setNext(newNs);\n        NodeStack.setHead(newNs);\n    }\n\n    NodeStack.setSize(NodeStack.getSize() + 1);\n}\n",
    "class_name": "NodeStack",
    "method_name": "push",
    "arguments": [
        "Item item"
    ],
    "generate_test": [
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    stack.push(3);\n    stack.push(4);\n    stack.push(5);\n    assertEquals(3,stack.peek());\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<Integer>();\n    stack.push(1);\n    stack.push(2);\n    stack.push(3);\n    stack.push(4);\n    stack.push(5);\n    \n    assertEquals(5, stack.size());\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<Integer>();\n    stack.push(3);\n    stack.push(4);\n    stack.push(5);\n    assertEquals(3, stack.peek());\n    assertEquals(3, stack.pop());\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    stack.push(3);\n    stack.push(4);\n    stack.push(5);\n    stack.print();  // prints: 5 4 3\n    assertEquals(3, stack.peek());\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> Stack = new NodeStack<Integer>();\n\n    Stack.push(3);\n    Stack.push(4);\n    Stack.push(5);\n\n    assertEquals(3, (int) Stack.peek());\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> testStack = new NodeStack<>();\n    testStack.push(1);\n    testStack.push(2);\n    testStack.push(3);\n    testStack.push(4);\n    assertEquals(4, testStack.size());\n    testStack.push(5);\n    assertEquals(5, testStack.size());\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> myStack = new NodeStack<>();\n    myStack.push(3);\n    myStack.push(4);\n    myStack.push(5);\n    myStack.print(); // prints : 5 4 3\n    String expected = \"5\\n4\\n3\\n\";\n    assertEquals(expected, outContent.toString());\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> Stack = new NodeStack<Integer>();\n\n    Stack.push(5);\n    Stack.push(3);\n    Stack.push(1);\n\n    assertEquals(3,Stack.size());\n    assertEquals(false,Stack.isEmpty());\n    Stack.print();\n}\n",
        "NodeStack<Integer> Stack = new NodeStack<Integer>();\n\nStack.push(3);\nStack.push(4);\nStack.push(5);\n\nString expectedOutput = \"Testing :\\n5\\n4\\n3\\n\";\nByteArrayOutputStream output = new ByteArrayOutputStream();\nSystem.setOut(new PrintStream(output));\nStack.print();\nassertEquals(expectedOutput, output.toString());",
        "@Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        stack.push(5);\n        stack.push(10);\n        stack.push(15);\n        assertEquals(3, stack.size());\n    }"
    ]
}