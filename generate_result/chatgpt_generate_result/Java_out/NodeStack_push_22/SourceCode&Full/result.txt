Source code: 


public void push(Item item) {
    NodeStack<Item> newNs = new NodeStack<Item>(item);

    if (this.isEmpty()) {
        NodeStack.setHead(new NodeStack<>(item));
        newNs.setNext(null);
        newNs.setPrevious(null);
    } else {
        newNs.setPrevious(NodeStack.head);
        NodeStack.head.setNext(newNs);
        NodeStack.setHead(newNs);
    }

    NodeStack.setSize(NodeStack.getSize() + 1);
}



No.1 generated result --------------------------

@Test
public void pushTest() {
    NodeStack<Integer> stack = new NodeStack<>();
    stack.push(3);
    stack.push(4);
    stack.push(5);
    assertEquals(3,stack.peek());
}


No.2 generated result --------------------------

@Test
public void pushTest() {
    NodeStack<Integer> stack = new NodeStack<Integer>();
    stack.push(1);
    stack.push(2);
    stack.push(3);
    stack.push(4);
    stack.push(5);
    
    assertEquals(5, stack.size());
}


No.3 generated result --------------------------

@Test
public void pushTest() {
    NodeStack<Integer> stack = new NodeStack<Integer>();
    stack.push(3);
    stack.push(4);
    stack.push(5);
    assertEquals(3, stack.peek());
    assertEquals(3, stack.pop());
}


No.4 generated result --------------------------

@Test
public void pushTest() {
    NodeStack<Integer> stack = new NodeStack<>();
    stack.push(3);
    stack.push(4);
    stack.push(5);
    stack.print();  // prints: 5 4 3
    assertEquals(3, stack.peek());
}


No.5 generated result --------------------------

@Test
public void pushTest() {
    NodeStack<Integer> Stack = new NodeStack<Integer>();

    Stack.push(3);
    Stack.push(4);
    Stack.push(5);

    assertEquals(3, (int) Stack.peek());
}


No.6 generated result --------------------------

@Test
public void pushTest() {
    NodeStack<Integer> testStack = new NodeStack<>();
    testStack.push(1);
    testStack.push(2);
    testStack.push(3);
    testStack.push(4);
    assertEquals(4, testStack.size());
    testStack.push(5);
    assertEquals(5, testStack.size());
}


No.7 generated result --------------------------

@Test
public void pushTest() {
    NodeStack<Integer> myStack = new NodeStack<>();
    myStack.push(3);
    myStack.push(4);
    myStack.push(5);
    myStack.print(); // prints : 5 4 3
    String expected = "5\n4\n3\n";
    assertEquals(expected, outContent.toString());
}


No.8 generated result --------------------------

@Test
public void pushTest() {
    NodeStack<Integer> Stack = new NodeStack<Integer>();

    Stack.push(5);
    Stack.push(3);
    Stack.push(1);

    assertEquals(3,Stack.size());
    assertEquals(false,Stack.isEmpty());
    Stack.print();
}



No.9 generated result --------------------------

NodeStack<Integer> Stack = new NodeStack<Integer>();

Stack.push(3);
Stack.push(4);
Stack.push(5);

String expectedOutput = "Testing :\n5\n4\n3\n";
ByteArrayOutputStream output = new ByteArrayOutputStream();
System.setOut(new PrintStream(output));
Stack.print();
assertEquals(expectedOutput, output.toString());


No.10 generated result --------------------------

@Test
    public void pushTest() {
        NodeStack<Integer> stack = new NodeStack<>();
        stack.push(5);
        stack.push(10);
        stack.push(15);
        assertEquals(3, stack.size());
    }


