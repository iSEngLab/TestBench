{
    "project_name": "Java",
    "file_name": "NodeStack.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/stacks/NodeStack.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.stacks",
    "docstring": "/**\n     * Put a value onto the stack.\n     *\n     * @param item : value to be put on the stack.\n     */",
    "source_code": "\npublic void push(Item item) {\n    NodeStack<Item> newNs = new NodeStack<Item>(item);\n\n    if (this.isEmpty()) {\n        NodeStack.setHead(new NodeStack<>(item));\n        newNs.setNext(null);\n        newNs.setPrevious(null);\n    } else {\n        newNs.setPrevious(NodeStack.head);\n        NodeStack.head.setNext(newNs);\n        NodeStack.setHead(newNs);\n    }\n\n    NodeStack.setSize(NodeStack.getSize() + 1);\n}\n",
    "class_name": "NodeStack",
    "method_name": "push",
    "arguments": [
        "Item item"
    ],
    "generate_test": [
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> nodeStack = new NodeStack<>();\n    nodeStack.push(5);\n    assertEquals(1, nodeStack.size());\n    nodeStack.push(10);\n    assertEquals(2, nodeStack.size());\n    assertEquals(10, nodeStack.peek());\n}",
        "@Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        \n        int initialSize = NodeStack.getSize();\n        \n        stack.push(5);\n        \n        assertEquals(initialSize + 1, NodeStack.getSize());\n        assertEquals(5, (int) stack.peek());\n    }\n",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    stack.push(5);\n    stack.push(10);\n    assertEquals(2, NodeStack.getSize());\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    stack.push(5);\n    assertEquals(1, stack.size());\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> ns = new NodeStack<Integer>();\n    ns.push(5);\n    assertEquals(1, ns.size());\n\n    ns.push(10);\n    assertEquals(2, ns.size());\n\n    assertEquals(10, ns.peek());\n\n    ns.pop();\n    assertEquals(1, ns.size());\n\n    assertEquals(5, ns.peek());\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> ns = new NodeStack<>();\n    ns.push(5);\n    ns.push(10);\n    ns.push(15);\n    assertEquals(3, ns.size());\n    assertEquals(15, ns.peek());\n}",
        "@Test\npublic void pushTest() {\n    Item item = new Item();\n    NodeStack<Item> stack = new NodeStack<>();\n    stack.push(item);\n    assertNotNull(stack.peek());\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    stack.push(5);\n    assertEquals(1, stack.size());\n    stack.push(10);\n    assertEquals(2, stack.size());\n}",
        "@Test\npublic void pushTest() {\n    Item item = new Item(); // Create dummy item for testing\n    NodeStack<Item> stack = new NodeStack<>();\n    stack.push(item); // Call the push method\n    assertEquals(item, stack.pop()); // Verify that the pushed item is at the top of the stack\n}",
        "@Test\npublic void pushTest() {\n    Item item = new Item(); // Create a mock Item object\n    NodeStack<Item> stack = new NodeStack<>();\n    stack.push(item);\n    // Add assertions to test the push method\n}"
    ]
}