{
    "project_name": "Java",
    "file_name": "NodeStack.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/stacks/NodeStack.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.stacks",
    "docstring": "/**\n     * Put a value onto the stack.\n     *\n     * @param item : value to be put on the stack.\n     */",
    "source_code": "\npublic void push(Item item) {\n    NodeStack<Item> newNs = new NodeStack<Item>(item);\n\n    if (this.isEmpty()) {\n        NodeStack.setHead(new NodeStack<>(item));\n        newNs.setNext(null);\n        newNs.setPrevious(null);\n    } else {\n        newNs.setPrevious(NodeStack.head);\n        NodeStack.head.setNext(newNs);\n        NodeStack.setHead(newNs);\n    }\n\n    NodeStack.setSize(NodeStack.getSize() + 1);\n}\n",
    "class_name": "NodeStack",
    "method_name": "push",
    "arguments": [
        "Item item"
    ],
    "generate_test": [
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    stack.push(5);\n    assertEquals(1, NodeStack.getSize());\n    stack.push(10);\n    assertEquals(2, NodeStack.getSize());\n    // Add additional tests as needed\n}",
        "\n@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    stack.push(1);\n    stack.push(2);\n    assertEquals(2, stack.getSize());\n    assertEquals(2, stack.peek());\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    stack.push(5);\n    assertEquals(1, NodeStack.getSize());\n}",
        "@Test\npublic void pushTest() {\n    NodeStackTest nodeStackTest = new NodeStackTest();\n    nodeStackTest.push(Item);\n    assertEquals(Item, nodeStackTest.getItem());\n}\n",
        "@Test\npublic void pushTest() {\n   NodeStack<Integer> ns = new NodeStack<>();\n   ns.push(5);\n   assertEquals(1, NodeStack.getSize());\n   ns.push(10);\n   assertEquals(2, NodeStack.getSize());\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    stack.push(5);\n    assertEquals(1, NodeStack.getSize());\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<String> stack = new NodeStack<>();\n    stack.push(\"A\");\n    stack.push(\"B\");\n    stack.push(\"C\");\n    assertEquals(\"C\", stack.peek());\n}",
        "NodeStack<String> ns = new NodeStack<>();\nns.push(\"A\");\nassertEquals(\"A\", NodeStack.getHead().toString());",
        "@Test\npublic void pushTest() {\n    NodeStack<String> stack = new NodeStack<>();\n    stack.push(\"A\");\n    stack.push(\"B\");\n    assertEquals(\"B\", stack.peek());\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    stack.push(10);\n    stack.push(20);\n    assertEquals(2, NodeStack.getSize());\n}"
    ]
}