{
    "project_name": "Java",
    "file_name": "QuickSort.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/sorts/QuickSort.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.sorts",
    "docstring": "/**\n     * This method implements the Generic Quick Sort\n     *\n     * @param array The array to be sorted Sorts the array in increasing order\n     */",
    "source_code": "\n@Override\npublic <T extends Comparable<T>> T[] sort(T[] array) {\n    doSort(array, 0, array.length - 1);\n    return array;\n}\n",
    "class_name": "QuickSort",
    "method_name": "sort",
    "arguments": [
        "T array"
    ],
    "generate_test": [
        "@Test\npublic void sortTest() {\n    QuickSort quickSort = new QuickSort();\n    Integer[] arr = {4, 2, 3, 1};\n    Integer[] sortedArr = quickSort.sort(arr);\n    Integer[] expectedArr = {1, 2, 3, 4};\n    assertArrayEquals(expectedArr, sortedArr);\n}",
        "@Test\npublic void sortTest() {\n    Integer[] input = {4, 2, 9, 6, 23, 12, 34, 0, 1};\n    Integer[] expected = {0, 1, 2, 4, 6, 9, 12, 23, 34};\n    QuickSort quickSort = new QuickSort();\n    quickSort.sort(input);\n    assertArrayEquals(expected, input);\n}",
        "QuickSort quickSort = new QuickSort();\nInteger[] arr = new Integer[] {64, 34, 25, 12, 22, 11, 90};\nquickSort.sort(arr);\nassertArrayEquals(new Integer[] {11, 12, 22, 25, 34, 64, 90}, arr);",
        "QuickSort quickSort = new QuickSort();\nInteger[] arr = {64, 34, 25, 12, 22, 11, 90};\nInteger[] expected = {11, 12, 22, 25, 34, 64, 90};\nassertArrayEquals(expected, quickSort.sort(arr));",
        "QuickSort quickSort = new QuickSort();\nInteger[] arr = new Integer[]{5, 3, 2, 7, 1, -1, 0};\nInteger[] sortedArray = quickSort.sort(arr);\nassertArrayEquals(new Integer[]{-1, 0, 1, 2, 3, 5, 7}, sortedArray);",
        "@Test\npublic void sortTest() {\n    Integer[] input = {2, 5, 3, 1, 4};\n    QuickSort quickSort = new QuickSort();\n    Integer[] expected = {1, 2, 3, 4, 5};\n    assertArrayEquals(expected, quickSort.sort(input));\n}",
        "@Test\npublic void sortTest() {\n    QuickSort quickSort= new QuickSort();\n    Integer[] unsorted= {3, 56, 2, 96, 5};\n    Integer[] expectedResult = {2, 3, 5, 56, 96};\n    Integer[] result = quickSort.sort(unsorted);\n    assertArrayEquals(expectedResult, result);\n}",
        "@Test\npublic void sortTest() {\n    QuickSort quickSort=new QuickSort();\n    Integer[] arr={4,3,1,5};\n    Integer[] expected={1,3,4,5};\n    quickSort.sort(arr);\n    assertArrayEquals(expected, arr);\n}",
        "    QuickSort quickSort = new QuickSort();\n    Integer[] input = {9, 7, 5, 11, 12, 2, 14, 3, 10, 6};\n    Integer[] expected = {2, 3, 5, 6, 7, 9, 10, 11, 12, 14};\n    assertArrayEquals(expected, quickSort.sort(input));",
        "\nQuickSort<Integer> quickSort = new QuickSort<>();\nInteger[] array = {5, 3, 8, 2, 7, 1};\nInteger[] expected = {1, 2, 3, 5, 7, 8};\nquickSort.sort(array);\nassertArrayEquals(expected, array);"
    ]
}