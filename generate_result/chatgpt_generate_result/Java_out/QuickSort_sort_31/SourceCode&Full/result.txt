Source code: 


@Override
public <T extends Comparable<T>> T[] sort(T[] array) {
    doSort(array, 0, array.length - 1);
    return array;
}



No.1 generated result --------------------------

@Test
public void sortTest() {
    QuickSort quickSort = new QuickSort();
    Integer[] arr = {4, 2, 3, 1};
    Integer[] sortedArr = quickSort.sort(arr);
    Integer[] expectedArr = {1, 2, 3, 4};
    assertArrayEquals(expectedArr, sortedArr);
}


No.2 generated result --------------------------

@Test
public void sortTest() {
    Integer[] input = {4, 2, 9, 6, 23, 12, 34, 0, 1};
    Integer[] expected = {0, 1, 2, 4, 6, 9, 12, 23, 34};
    QuickSort quickSort = new QuickSort();
    quickSort.sort(input);
    assertArrayEquals(expected, input);
}


No.3 generated result --------------------------

QuickSort quickSort = new QuickSort();
Integer[] arr = new Integer[] {64, 34, 25, 12, 22, 11, 90};
quickSort.sort(arr);
assertArrayEquals(new Integer[] {11, 12, 22, 25, 34, 64, 90}, arr);


No.4 generated result --------------------------

QuickSort quickSort = new QuickSort();
Integer[] arr = {64, 34, 25, 12, 22, 11, 90};
Integer[] expected = {11, 12, 22, 25, 34, 64, 90};
assertArrayEquals(expected, quickSort.sort(arr));


No.5 generated result --------------------------

QuickSort quickSort = new QuickSort();
Integer[] arr = new Integer[]{5, 3, 2, 7, 1, -1, 0};
Integer[] sortedArray = quickSort.sort(arr);
assertArrayEquals(new Integer[]{-1, 0, 1, 2, 3, 5, 7}, sortedArray);


No.6 generated result --------------------------

@Test
public void sortTest() {
    Integer[] input = {2, 5, 3, 1, 4};
    QuickSort quickSort = new QuickSort();
    Integer[] expected = {1, 2, 3, 4, 5};
    assertArrayEquals(expected, quickSort.sort(input));
}


No.7 generated result --------------------------

@Test
public void sortTest() {
    QuickSort quickSort= new QuickSort();
    Integer[] unsorted= {3, 56, 2, 96, 5};
    Integer[] expectedResult = {2, 3, 5, 56, 96};
    Integer[] result = quickSort.sort(unsorted);
    assertArrayEquals(expectedResult, result);
}


No.8 generated result --------------------------

@Test
public void sortTest() {
    QuickSort quickSort=new QuickSort();
    Integer[] arr={4,3,1,5};
    Integer[] expected={1,3,4,5};
    quickSort.sort(arr);
    assertArrayEquals(expected, arr);
}


No.9 generated result --------------------------

    QuickSort quickSort = new QuickSort();
    Integer[] input = {9, 7, 5, 11, 12, 2, 14, 3, 10, 6};
    Integer[] expected = {2, 3, 5, 6, 7, 9, 10, 11, 12, 14};
    assertArrayEquals(expected, quickSort.sort(input));


No.10 generated result --------------------------


QuickSort<Integer> quickSort = new QuickSort<>();
Integer[] array = {5, 3, 8, 2, 7, 1};
Integer[] expected = {1, 2, 3, 5, 7, 8};
quickSort.sort(array);
assertArrayEquals(expected, array);


