{
    "project_name": "Java",
    "file_name": "QuickSort.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/sorts/QuickSort.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.sorts",
    "docstring": "/**\n     * This method implements the Generic Quick Sort\n     *\n     * @param array The array to be sorted Sorts the array in increasing order\n     */",
    "source_code": "\n@Override\npublic <T extends Comparable<T>> T[] sort(T[] array) {\n    doSort(array, 0, array.length - 1);\n    return array;\n}\n",
    "class_name": "QuickSort",
    "method_name": "sort",
    "arguments": [
        "T array"
    ],
    "generate_test": [
        "QuickSort quickSort = new QuickSort();\nInteger[] array = {4, 2, 1, 5, 3};\nInteger[] sorted = quickSort.sort(array);\nassertArrayEquals(new Integer[]{1, 2, 3, 4, 5}, sorted);",
        " @Test\n    public void sortTest() {\n        QuickSort sorter = new QuickSort();\n        Integer[] input = {4, 2, 9, 6, 23, 12, 34, 0, 1};\n        Integer[] expected = {0, 1, 2, 4, 6, 9, 12, 23, 34};\n        assertArrayEquals(expected, sorter.sort(input));\n    }",
        "\n@Test\npublic void sortTest() {\n    QuickSort quickSort = new QuickSort();\n    Integer[] input = {3, 6, 8, 1, 2, 4, 7, 5};\n    Integer[] expectedOutput = {1, 2, 3, 4, 5, 6, 7, 8};\n    assertArrayEquals(expectedOutput, quickSort.sort(input));\n}",
        "@Test\npublic void sortTest() {\n    QuickSort quickSort = new QuickSort();\n    Integer[] array = {5, 2, 8, 4, 7, 1, 3, 6};\n    Integer[] expected = {1, 2, 3, 4, 5, 6, 7, 8};\n    assertArrayEquals(expected, quickSort.sort(array));\n}",
        "@Test\npublic void sortTest() {\n    QuickSort quickSort = new QuickSort();\n    Integer[] unsortedArray = {9, 4, 7, 1, -2, 6, 5};\n    Integer[] expectedArray = {-2, 1, 4, 5, 6, 7, 9};\n    Integer[] sortedArray = quickSort.sort(unsortedArray);\n    assertArrayEquals(expectedArray, sortedArray);\n}",
        "@Test\npublic void sortTest() {\n    QuickSort quickSort = new QuickSort();\n    Integer[] array = {5, 2, 9, 1, 5};\n    Integer[] expected = {1, 2, 5, 5, 9};\n    assertArrayEquals(expected, quickSort.sort(array));\n}",
        "@Test\npublic void sortTest() {\n    QuickSort quickSort = new QuickSort();\n    Integer[] array = {5, 3, 8, 6, 2, 7, 1, 4};\n    Integer[] expected = {1, 2, 3, 4, 5, 6, 7, 8};\n    assertArrayEquals(expected, quickSort.sort(array));\n}",
        "@Test\npublic void sortTest() {\n    QuickSort quickSort = new QuickSort();\n    Integer[] unsortedArray = {5, 3, 8, 6, 2, 7, 1, 4};\n    Integer[] sortedArray = {1, 2, 3, 4, 5, 6, 7, 8};\n    assertArrayEquals(sortedArray, quickSort.sort(unsortedArray));\n}",
        "QuickSort quickSort = new QuickSort();\nInteger[] inputArray = {9, 7, 5, 11, 12, 2, 14, 3, 10, 6};\nInteger[] expectedArray = {2, 3, 5, 6, 7, 9, 10, 11, 12, 14};\nassertArrayEquals(expectedArray, quickSort.sort(inputArray));",
        "@Test\npublic void sortTest() {\n    QuickSort quickSort = new QuickSort();\n    Integer[] input = {5, 3, 8, 6, 2, 7, 1, 4};\n    Integer[] expected = {1, 2, 3, 4, 5, 6, 7, 8};\n    assertArrayEquals(expected, quickSort.sort(input));\n}"
    ]
}