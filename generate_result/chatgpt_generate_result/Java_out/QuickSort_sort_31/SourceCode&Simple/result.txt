Source code: 


@Override
public <T extends Comparable<T>> T[] sort(T[] array) {
    doSort(array, 0, array.length - 1);
    return array;
}



No.1 generated result --------------------------

QuickSort quickSort = new QuickSort();
Integer[] array = {4, 2, 1, 5, 3};
Integer[] sorted = quickSort.sort(array);
assertArrayEquals(new Integer[]{1, 2, 3, 4, 5}, sorted);


No.2 generated result --------------------------

 @Test
    public void sortTest() {
        QuickSort sorter = new QuickSort();
        Integer[] input = {4, 2, 9, 6, 23, 12, 34, 0, 1};
        Integer[] expected = {0, 1, 2, 4, 6, 9, 12, 23, 34};
        assertArrayEquals(expected, sorter.sort(input));
    }


No.3 generated result --------------------------


@Test
public void sortTest() {
    QuickSort quickSort = new QuickSort();
    Integer[] input = {3, 6, 8, 1, 2, 4, 7, 5};
    Integer[] expectedOutput = {1, 2, 3, 4, 5, 6, 7, 8};
    assertArrayEquals(expectedOutput, quickSort.sort(input));
}


No.4 generated result --------------------------

@Test
public void sortTest() {
    QuickSort quickSort = new QuickSort();
    Integer[] array = {5, 2, 8, 4, 7, 1, 3, 6};
    Integer[] expected = {1, 2, 3, 4, 5, 6, 7, 8};
    assertArrayEquals(expected, quickSort.sort(array));
}


No.5 generated result --------------------------

@Test
public void sortTest() {
    QuickSort quickSort = new QuickSort();
    Integer[] unsortedArray = {9, 4, 7, 1, -2, 6, 5};
    Integer[] expectedArray = {-2, 1, 4, 5, 6, 7, 9};
    Integer[] sortedArray = quickSort.sort(unsortedArray);
    assertArrayEquals(expectedArray, sortedArray);
}


No.6 generated result --------------------------

@Test
public void sortTest() {
    QuickSort quickSort = new QuickSort();
    Integer[] array = {5, 2, 9, 1, 5};
    Integer[] expected = {1, 2, 5, 5, 9};
    assertArrayEquals(expected, quickSort.sort(array));
}


No.7 generated result --------------------------

@Test
public void sortTest() {
    QuickSort quickSort = new QuickSort();
    Integer[] array = {5, 3, 8, 6, 2, 7, 1, 4};
    Integer[] expected = {1, 2, 3, 4, 5, 6, 7, 8};
    assertArrayEquals(expected, quickSort.sort(array));
}


No.8 generated result --------------------------

@Test
public void sortTest() {
    QuickSort quickSort = new QuickSort();
    Integer[] unsortedArray = {5, 3, 8, 6, 2, 7, 1, 4};
    Integer[] sortedArray = {1, 2, 3, 4, 5, 6, 7, 8};
    assertArrayEquals(sortedArray, quickSort.sort(unsortedArray));
}


No.9 generated result --------------------------

QuickSort quickSort = new QuickSort();
Integer[] inputArray = {9, 7, 5, 11, 12, 2, 14, 3, 10, 6};
Integer[] expectedArray = {2, 3, 5, 6, 7, 9, 10, 11, 12, 14};
assertArrayEquals(expectedArray, quickSort.sort(inputArray));


No.10 generated result --------------------------

@Test
public void sortTest() {
    QuickSort quickSort = new QuickSort();
    Integer[] input = {5, 3, 8, 6, 2, 7, 1, 4};
    Integer[] expected = {1, 2, 3, 4, 5, 6, 7, 8};
    assertArrayEquals(expected, quickSort.sort(input));
}


