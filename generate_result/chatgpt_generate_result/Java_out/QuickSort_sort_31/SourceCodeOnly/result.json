{
    "project_name": "Java",
    "file_name": "QuickSort.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/sorts/QuickSort.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.sorts",
    "docstring": "/**\n     * This method implements the Generic Quick Sort\n     *\n     * @param array The array to be sorted Sorts the array in increasing order\n     */",
    "source_code": "\n@Override\npublic <T extends Comparable<T>> T[] sort(T[] array) {\n    doSort(array, 0, array.length - 1);\n    return array;\n}\n",
    "class_name": "QuickSort",
    "method_name": "sort",
    "arguments": [
        "T array"
    ],
    "generate_test": [
        "@Test\npublic void sortTest() {\n    QuickSort<Integer> quickSort = new QuickSort<>();\n    Integer[] array = {5, 3, 8, 6, 2, 7, 4, 1};\n    Integer[] sortedArray = {1, 2, 3, 4, 5, 6, 7, 8};\n    assertEquals(sortedArray, quickSort.sort(array));\n}",
        "@Test\npublic void sortTest() {\n    QuickSort quickSort = new QuickSort();\n    Integer[] array = {5, 3, 1, 2, 4};\n    Integer[] expected = {1, 2, 3, 4, 5};\n    assertArrayEquals(expected, quickSort.sort(array));\n}",
        "\n@Test\npublic void sortTest() {\n    QuickSort quickSort = new QuickSort();\n    Integer[] inputArray = {5, 3, 8, 4, 1, 2};\n    Integer[] expectedOutput = {1, 2, 3, 4, 5, 8};\n    assertArrayEquals(expectedOutput, quickSort.sort(inputArray));\n}",
        "@Test\npublic void sortTest() {\n    Integer[] array = {5, 3, 8, 6, 2, 7, 1, 4};\n    QuickSort quickSort = new QuickSort();\n    Integer[] sortedArray = quickSort.sort(array);\n    Integer[] expected = {1, 2, 3, 4, 5, 6, 7, 8};\n    assertArrayEquals(expected, sortedArray);\n}",
        "@Test\npublic void sortTest() {\n    QuickSort quickSort = new QuickSort();\n    Integer[] testArray = {5, 2, 9, 1, 5, 6};\n    Integer[] expected = {1, 2, 5, 5, 6, 9};\n    assertArrayEquals(expected, quickSort.sort(testArray));\n}",
        "@Test\npublic void sortTest() {\n  QuickSort quickSort = new QuickSort();\n  Integer[] inputArray = {4, 2, 5, 3, 1};\n  Integer[] expected = {1, 2, 3, 4, 5};\n  assertArrayEquals(expected, quickSort.sort(inputArray));\n}",
        "@Test\npublic void sortTest() {\n    QuickSort quickSort = new QuickSort();\n    Integer[] inputArray = {4, 2, 6, 1, 5, 3};\n    Integer[] expectedOutput = {1, 2, 3, 4, 5, 6};\n    Integer[] actualOutput = quickSort.sort(inputArray);\n    assertArrayEquals(expectedOutput, actualOutput);\n}",
        "@Test\npublic void sortTest() {\n    Integer[] inputArray = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};\n    QuickSort quickSort = new QuickSort();\n    Integer[] sortedArray = quickSort.sort(inputArray);\n    Integer[] expectedArray = {1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9};\n    assertArrayEquals(expectedArray, sortedArray);\n}",
        "@Test\npublic void sortTest() {\n    QuickSort quickSort = new QuickSort();\n    Integer[] inputArray = {5, 3, 8, 2, 9, 1};\n    Integer[] expectedArray = {1, 2, 3, 5, 8, 9};\n    assertArrayEquals(expectedArray, quickSort.sort(inputArray));\n}",
        "@Test\npublic void sortTest() {\n    Integer[] inputArray = {5, 2, 7, 3, 9, 1};\n    QuickSort quickSort = new QuickSort();\n    quickSort.sort(inputArray);\n    Integer[] expectedArray = {1, 2, 3, 5, 7, 9};\n    assertArrayEquals(expectedArray, inputArray);\n}"
    ]
}