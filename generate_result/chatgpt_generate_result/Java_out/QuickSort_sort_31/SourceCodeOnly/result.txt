Source code: 


@Override
public <T extends Comparable<T>> T[] sort(T[] array) {
    doSort(array, 0, array.length - 1);
    return array;
}



No.1 generated result --------------------------

@Test
public void sortTest() {
    QuickSort<Integer> quickSort = new QuickSort<>();
    Integer[] array = {5, 3, 8, 6, 2, 7, 4, 1};
    Integer[] sortedArray = {1, 2, 3, 4, 5, 6, 7, 8};
    assertEquals(sortedArray, quickSort.sort(array));
}


No.2 generated result --------------------------

@Test
public void sortTest() {
    QuickSort quickSort = new QuickSort();
    Integer[] array = {5, 3, 1, 2, 4};
    Integer[] expected = {1, 2, 3, 4, 5};
    assertArrayEquals(expected, quickSort.sort(array));
}


No.3 generated result --------------------------


@Test
public void sortTest() {
    QuickSort quickSort = new QuickSort();
    Integer[] inputArray = {5, 3, 8, 4, 1, 2};
    Integer[] expectedOutput = {1, 2, 3, 4, 5, 8};
    assertArrayEquals(expectedOutput, quickSort.sort(inputArray));
}


No.4 generated result --------------------------

@Test
public void sortTest() {
    Integer[] array = {5, 3, 8, 6, 2, 7, 1, 4};
    QuickSort quickSort = new QuickSort();
    Integer[] sortedArray = quickSort.sort(array);
    Integer[] expected = {1, 2, 3, 4, 5, 6, 7, 8};
    assertArrayEquals(expected, sortedArray);
}


No.5 generated result --------------------------

@Test
public void sortTest() {
    QuickSort quickSort = new QuickSort();
    Integer[] testArray = {5, 2, 9, 1, 5, 6};
    Integer[] expected = {1, 2, 5, 5, 6, 9};
    assertArrayEquals(expected, quickSort.sort(testArray));
}


No.6 generated result --------------------------

@Test
public void sortTest() {
  QuickSort quickSort = new QuickSort();
  Integer[] inputArray = {4, 2, 5, 3, 1};
  Integer[] expected = {1, 2, 3, 4, 5};
  assertArrayEquals(expected, quickSort.sort(inputArray));
}


No.7 generated result --------------------------

@Test
public void sortTest() {
    QuickSort quickSort = new QuickSort();
    Integer[] inputArray = {4, 2, 6, 1, 5, 3};
    Integer[] expectedOutput = {1, 2, 3, 4, 5, 6};
    Integer[] actualOutput = quickSort.sort(inputArray);
    assertArrayEquals(expectedOutput, actualOutput);
}


No.8 generated result --------------------------

@Test
public void sortTest() {
    Integer[] inputArray = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};
    QuickSort quickSort = new QuickSort();
    Integer[] sortedArray = quickSort.sort(inputArray);
    Integer[] expectedArray = {1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9};
    assertArrayEquals(expectedArray, sortedArray);
}


No.9 generated result --------------------------

@Test
public void sortTest() {
    QuickSort quickSort = new QuickSort();
    Integer[] inputArray = {5, 3, 8, 2, 9, 1};
    Integer[] expectedArray = {1, 2, 3, 5, 8, 9};
    assertArrayEquals(expectedArray, quickSort.sort(inputArray));
}


No.10 generated result --------------------------

@Test
public void sortTest() {
    Integer[] inputArray = {5, 2, 7, 3, 9, 1};
    QuickSort quickSort = new QuickSort();
    quickSort.sort(inputArray);
    Integer[] expectedArray = {1, 2, 3, 5, 7, 9};
    assertArrayEquals(expectedArray, inputArray);
}


