{
    "project_name": "Java",
    "file_name": "SegmentTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/SegmentTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": null,
    "source_code": "/* A function to get the sum of the elements from index l to index r. This will be called\n * internally*/\nprivate int getSumTree(int start, int end, int q_start, int q_end, int seg_index) {\n    if (q_start <= start && q_end >= end) {\n        return this.seg_t[seg_index];\n    }\n\n    if (q_start > end || q_end < start) {\n        return 0;\n    }\n\n    int mid = start + (end - start) / 2;\n    return (getSumTree(start, mid, q_start, q_end, seg_index * 2 + 1) + getSumTree(mid + 1, end, q_start, q_end, seg_index * 2 + 2));\n}\n",
    "class_name": "SegmentTree",
    "method_name": "getSumTree",
    "arguments": [
        "int start",
        "int end",
        "int q_start",
        "int q_end",
        "int seg_index"
    ],
    "generate_test": [
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree tree = new SegmentTree(5, new int[]{1, 3, 5, 7, 9});\n    int result = tree.getSumTree(0, 4, 1, 3, 0);\n    assertEquals(15, result);\n}",
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree segmentTree = new SegmentTree(5, new int[]{1, 2, 3, 4, 5});\n    int actual = segmentTree.getSumTree(0, 4, 1, 3, 0);\n    int expected = 9;\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void getSumTreeTest() {\n    int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    SegmentTree st = new SegmentTree(10, arr);\n    int sum = st.getSumTree(0, 9, 1, 3, 0);\n    assertEquals(9, sum);\n}",
        "@Test\npublic void getSumTreeTest() {\n    int[] arr = {1, 3, 5, 7, 9, 11};\n    SegmentTree st = new SegmentTree(arr.length, arr);\n    assertEquals(25, st.getSum(1, 3));\n}",
        "@Test\npublic void getSumTreeTest() {\n    int[] arr = {1, 3, 5, 7, 9, 11};\n    int n = arr.length;\n    SegmentTree tree = new SegmentTree(n, arr);\n    int sum = tree.getSum(1, 3);\n    assertEquals(15, sum);\n}",
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree segmentTree = new SegmentTree(5, new int[]{1, 3, 5, 7, 9});\n    int result = segmentTree.getSumTree(0, 4, 1, 3, 0);\n    assertEquals(15, result);\n}",
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree testTree = new SegmentTree(5, new int[]{1, 2, 3, 4, 5});\n    int result = testTree.getSumTree(0, 4, 1, 3, 0);\n    assertEquals(9, result);\n}",
        "@Test\npublic void getSumTreeTest() {\n    int[] arr = {1, 2, 3, 4, 5, 6};\n    SegmentTree segTree = new SegmentTree(arr.length, arr);\n    assertEquals(21, segTree.getSum(0, 5));\n    assertEquals(7, segTree.getSum(0, 3));\n    assertEquals(14, segTree.getSum(2, 5));\n}",
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree segmentTree = new SegmentTree(5, new int[] {1, 3, 5, 7, 9});\n    int result = segmentTree.getSumTree(0, 4, 1, 3, 0);\n    assertEquals(15, result);\n}",
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree st = new SegmentTree(5, new int[]{1, 3, 5, 7, 9});\n    int start = 0;\n    int end = 4;\n    int expectedSum = 25; \n    int actualSum = st.getSum(start, end);\n    assertEquals(expectedSum, actualSum, \"Sum of elements from index 0 to 4 should be 25\");\n}"
    ]
}