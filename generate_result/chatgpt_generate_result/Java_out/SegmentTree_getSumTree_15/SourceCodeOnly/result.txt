Source code: 

/* A function to get the sum of the elements from index l to index r. This will be called
 * internally*/
private int getSumTree(int start, int end, int q_start, int q_end, int seg_index) {
    if (q_start <= start && q_end >= end) {
        return this.seg_t[seg_index];
    }

    if (q_start > end || q_end < start) {
        return 0;
    }

    int mid = start + (end - start) / 2;
    return (getSumTree(start, mid, q_start, q_end, seg_index * 2 + 1) + getSumTree(mid + 1, end, q_start, q_end, seg_index * 2 + 2));
}



No.1 generated result --------------------------

@Test
    public void getSumTreeTest() {
        int[] inputArray = {1, 3, 5, 7, 9, 11};
        SegmentTree segmentTree = new SegmentTree(inputArray);
        int result = segmentTree.getSum(1, 3);
        assertEquals(15, result);
    }


No.2 generated result --------------------------

@Test
public void getSumTreeTest() {
    int[] arr = {1, 2, 3, 4, 5, 6, 7, 8};
    SegmentTree st = new SegmentTree(arr);
    assertEquals(10, st.getSumTree(0, arr.length - 1, 0, 3, 0));
    assertEquals(15, st.getSumTree(0, arr.length - 1, 3, 5, 0));
}


No.3 generated result --------------------------

@Test
public void getSumTreeTest() {
    SegmentTree tree = new SegmentTree(new int[]{1, 3, 5, 7, 9, 11});
    int result = tree.getSum(1, 3);
    assertEquals(15, result);
}


No.4 generated result --------------------------

 @Test
    public void getSumTreeTest() {
        SegmentTree st = new SegmentTree(new int[]{1, 3, 5, 7, 9, 11});
        int expectedSum = 28;
        int actualSum = st.getSum(1, 3);
        assertEquals(expectedSum, actualSum);
    }


No.5 generated result --------------------------

public void getSumTreeTest() {
    int[] arr = {1, 3, 5, 7, 9, 11};
    SegmentTree tree = new SegmentTree(arr);
    int actual = tree.getSum(0, 2);
    int expected = 9;
    assertEquals(expected, actual);
}


No.6 generated result --------------------------

@Test
public void getSumTreeTest() {
    int[] arr = {1, 3, 5, 7, 9, 11};
    SegmentTree tree = new SegmentTree(arr);
    int result = tree.getSum(1, 3);
    assertEquals(15, result);
}


No.7 generated result --------------------------

@Test
public void getSumTreeTest() {
    SegmentTree segmentTree = new SegmentTree(new int[]{1, 3, 5, 7, 9, 11});
    assertEquals(18, segmentTree.getSumTree(0, 5, 1, 3, 0));
}


No.8 generated result --------------------------

@Test
public void getSumTreeTest() {
    SegmentTree segmentTree = new SegmentTree(new int[]{1, 2, 3, 4, 5, 6});
    assertEquals(9, segmentTree.getSumTree(0, 5, 1, 3, 0));
}


No.9 generated result --------------------------

@Test
public void getSumTreeTest() {
    int[] arr = {1, 3, 4, 8, 6, 1, 4, 2};
    SegmentTree segmentTree = new SegmentTree(arr);
    assertEquals(16, segmentTree.getSum(1, 3));
}


No.10 generated result --------------------------

@Test
public void getSumTreeTest() {
    int[] arr = {1, 3, 5, 7, 9, 11};
    SegmentTree segmentTree = new SegmentTree(arr);
    int result = segmentTree.getSum(1, 3);
    assertEquals(15, result);
}


