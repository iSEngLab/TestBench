{
    "project_name": "Java",
    "file_name": "SimpleSubstitutionCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/SimpleSubstitutionCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Decrypt message by replacing each element with its opposite character in\n     * cipher.\n     *\n     * @return message\n     */",
    "source_code": "\npublic static String decode(String encryptedMessage, String cipherSmall) {\n    StringBuilder decoded = new StringBuilder();\n\n    Map<Character, Character> cipherMap = new HashMap<>();\n\n    char beginSmallLetter = 'a';\n    char beginCapitalLetter = 'A';\n\n    cipherSmall = cipherSmall.toLowerCase();\n    String cipherCapital = cipherSmall.toUpperCase();\n\n    for (int i = 0; i < cipherSmall.length(); i++) {\n        cipherMap.put(cipherSmall.charAt(i), beginSmallLetter++);\n        cipherMap.put(cipherCapital.charAt(i), beginCapitalLetter++);\n    }\n\n    for (int i = 0; i < encryptedMessage.length(); i++) {\n        if (Character.isAlphabetic(encryptedMessage.charAt(i))) {\n            decoded.append(cipherMap.get(encryptedMessage.charAt(i)));\n        } else {\n            decoded.append(encryptedMessage.charAt(i));\n        }\n    }\n\n    return decoded.toString();\n}\n",
    "class_name": "SimpleSubstitutionCipher",
    "method_name": "decode",
    "arguments": [
        "String encryptedMessage",
        "String cipherSmall"
    ],
    "generate_test": [
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"yfyl fvb\";\n    String cipherSmall = \"qwertyuiopasdfghjklzxcvbnm\";\n    String expected = \"test case\";\n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"Rovvy%\";\n    String cipherSmall = \"defghijklmnopqrstuvwxyzabc\";\n    String expected = \"Hello!\";\n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n    assertEquals(expected, actual);\n}",
        "@Test\n    public void decodeTest() {\n        String encryptedMessage = \"defendtheeastwallofthecastle\";\n        String cipherSmall = \"phqgiumeaylnofdxjkrcvstzwb\";\n        String expectedResult = \"gkfnghlkgnghftuhhnigosgngvf\";\n        \n        assertEquals(expectedResult, SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));\n    }",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"def\";\n    String cipherSmall = \"bcadfe\";\n    String expected = \"abc\";\n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"Kfaov vf xli qebob npj ljthpqiltk ebovfkd.\";\n    String cipherSmall = \"cdefghijklmnopqrstuvwxyzab\";\n    String expected = \"Happy is the only way forward.\";\n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"vukixlxy winvarix piwwmx\";\n    String cipherSmall = \"apzgfho\";\n    String expectedDecodedMessage = \"mysterious mountains\";\n    String actualDecodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n    assertEquals(expectedDecodedMessage, actualDecodedMessage);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"Rvw, oev bbvc!!\";\n    String cipherSmall = \"qwertyuiopasdfghjklzxcvbnm\";\n    String expected = \"Hey, you work!!\";\n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    assertEquals(\"the quick brown fox jumps over the lazy dog\", SimpleSubstitutionCipher.decode(\"wli tlska exptj fvz hovsk yli wpeb rap\", \"dcoders\"));\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"yrkk zru\";\n    String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n    String expected = \"well done\";\n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"Rtk pgy.\";\n    String cipherSmall = \"qwertyuiopasdfghjklzxcvbnm\";\n    String expected = \"Hey man.\";\n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n    assertEquals(expected, actual);\n}"
    ]
}