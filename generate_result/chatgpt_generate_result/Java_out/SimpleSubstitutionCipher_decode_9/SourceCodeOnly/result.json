{
    "project_name": "Java",
    "file_name": "SimpleSubstitutionCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/SimpleSubstitutionCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Decrypt message by replacing each element with its opposite character in\n     * cipher.\n     *\n     * @return message\n     */",
    "source_code": "\npublic static String decode(String encryptedMessage, String cipherSmall) {\n    StringBuilder decoded = new StringBuilder();\n\n    Map<Character, Character> cipherMap = new HashMap<>();\n\n    char beginSmallLetter = 'a';\n    char beginCapitalLetter = 'A';\n\n    cipherSmall = cipherSmall.toLowerCase();\n    String cipherCapital = cipherSmall.toUpperCase();\n\n    for (int i = 0; i < cipherSmall.length(); i++) {\n        cipherMap.put(cipherSmall.charAt(i), beginSmallLetter++);\n        cipherMap.put(cipherCapital.charAt(i), beginCapitalLetter++);\n    }\n\n    for (int i = 0; i < encryptedMessage.length(); i++) {\n        if (Character.isAlphabetic(encryptedMessage.charAt(i))) {\n            decoded.append(cipherMap.get(encryptedMessage.charAt(i)));\n        } else {\n            decoded.append(encryptedMessage.charAt(i));\n        }\n    }\n\n    return decoded.toString();\n}\n",
    "class_name": "SimpleSubstitutionCipher",
    "method_name": "decode",
    "arguments": [
        "String encryptedMessage",
        "String cipherSmall"
    ],
    "generate_test": [
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"FgnSQRWVqVTgY5r47Ff2hqzNxGrcX6xzSy\";\n    String cipherSmall = \"khoqgvmnzlapfdiebrwystucxj\";\n    assertEquals(\"SomeSecretMessage1234\", decode(encryptedMessage, cipherSmall));\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"Bmj af b tmfq.\";\n    String cipherSmall = \"xyzabcdefghijklmnopqrstuvw\";\n    String expected = \"You are a hero.\";\n    assertEquals(expected, SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"defend the east wall of the castle\";\n    String cipherSmall = \"phqgiumeaylnofdxjkrcvstzwb\";\n    \n    String expected = \"giuifg cei iprc tpnn du cei qprcni\";\n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n    \n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"abc\";\n    String cipherSmall = \"zyx\";\n\n    String expectedResult = \"zyx\";\n    String actualResult = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"Ebiil Tloia\";\n    String cipher = \"qwertyuiopasdfghjklzxcvbnm\";\n    String expected = \"Hello World\";\n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipher);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"khoor, zruog!\";\n    String cipherSmall = \"defghijklmnopqrstuvwxyzabc\";\n    assertEquals(\"hello, world!\", SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"Qixiepq we awr fqfargpiad\";\n    String cipherSmall = \"bqngfwvcjlmrodhixytkaupzes\";\n    String expectedResult = \"Developer is an essential\";\n    assertEquals(expectedResult, SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"KICSKKSI\";\n    String cipherSmall = \"defghijklmnopqrstuvwxyzcba\";\n    String expected = \"HELLOWORLD\";\n    assertEquals(expected, SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));\n}",
        "@Test\npublic void decodeTest() {\n    assertEquals(\"Hello, World!\", SimpleSubstitutionCipher.decode(\"Uryyb, Jbeyq!\", \"qwertyuiopasdfghjklzxcvbnm\"));\n}",
        "@Test\npublic void decodeTest() {\n    assertEquals(\"a\", SimpleSubstitutionCipher.decode(\"a\", \"b\"));\n}"
    ]
}