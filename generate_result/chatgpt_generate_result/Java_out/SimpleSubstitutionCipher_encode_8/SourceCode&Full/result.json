{
    "project_name": "Java",
    "file_name": "SimpleSubstitutionCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/SimpleSubstitutionCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Encrypt text by replacing each element with its opposite character.\n     *\n     * @return Encrypted message\n     */",
    "source_code": "\npublic static String encode(String message, String cipherSmall) {\n    StringBuilder encoded = new StringBuilder();\n\n    // This map is used to encode\n    Map<Character, Character> cipherMap = new HashMap<>();\n\n    char beginSmallLetter = 'a';\n    char beginCapitalLetter = 'A';\n\n    cipherSmall = cipherSmall.toLowerCase();\n    String cipherCapital = cipherSmall.toUpperCase();\n\n    // To handle Small and Capital letters\n    for (int i = 0; i < cipherSmall.length(); i++) {\n        cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));\n        cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));\n    }\n\n    for (int i = 0; i < message.length(); i++) {\n        if (Character.isAlphabetic(message.charAt(i))) {\n            encoded.append(cipherMap.get(message.charAt(i)));\n        } else {\n            encoded.append(message.charAt(i));\n        }\n    }\n\n    return encoded.toString();\n}\n",
    "class_name": "SimpleSubstitutionCipher",
    "method_name": "encode",
    "arguments": [
        "String message",
        "String cipherSmall"
    ],
    "generate_test": [
        "@Test\npublic void encodeTest() {\n    String message = \"Hello, World!\";\n    String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n    String expected = \"Svool, Dliow!\";\n    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void encodeTest() {\n   String message = \"Hello\";\n   String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n   assertEquals(\"Ifmmp\", SimpleSubstitutionCipher.encode(message, cipherSmall));\n}",
        "\n@Test\npublic void encodeTest() {\n    String message = \"Hello, World!\";\n    String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n\n    String expectedResult = \"Svool, Dliow!\";\n    String actualResult = SimpleSubstitutionCipher.encode(message, cipherSmall);\n\n    assertEquals(expectedResult, actualResult);\n}\n",
        "@Test\npublic void encodeTest() {\n    String message = \"Hello, World!\";\n    String cipherSmall = \"qwertyuiopasdfghjklzxcvbnm\";\n    String expected = \"itssg, fxkrm!\";\n    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n    assertEquals(expected, actual);\n}",
        "@Test\n    public void encodeTest() {\n        String message = \"Hello, World!\";\n        String cipherKey = \"jlmnkyxualeovgciftqswpzdbr\";\n        String expectedResult = \"Ieqqi, Vktad!\";\n      \n        assertEquals(expectedResult, SimpleSubstitutionCipher.encode(message, cipherKey));\n    }",
        "@Test\npublic void encodeTest() {\n    String message = \"Hello\";\n    String cipherSmall = \"qwertyuiopasdfghjklzxcvbnm\";\n    \n    assertEquals(\"it should return Encoded message\", \"Ittcf\", SimpleSubstitutionCipher.encode(message, cipherSmall));\n}",
        "public void encodeTest() {\n        String message = \"Hello, World!\";\n        String cipherSmall = \"qwertyuiopasdfghjklzxcvbnm\";\n        String expectedOutput = \"itssv, hrutj!\";\n        \n        String actualOutput = SimpleSubstitutionCipher.encode(message, cipherSmall);\n        \n        assertEquals(expectedOutput, actualOutput);\n    }",
        "public void encodeTest() {\n    String message = \"Hello, World!\";\n    String cipher = \"zyxwvutsrqponmlkjihgfedcba\";\n    String expected = \"Svool, Dliow!\";\n    String actual = SimpleSubstitutionCipher.encode(message, cipher);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void encodeTest() {\n    String message = \"Hello\";\n    String cipherSmall = \"efghijkabcdlmnopqrstuvwxyz\";\n    String expected = \"Itssb\";\n    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void encodeTest() {\n    assertEquals(\"dahyjaohz\", SimpleSubstitutionCipher.encode(\"substitution\", \"zyxwvutsrqponmlkjihgfedcba\"));\n}"
    ]
}