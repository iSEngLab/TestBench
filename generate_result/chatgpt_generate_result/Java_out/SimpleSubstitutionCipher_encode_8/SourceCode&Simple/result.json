{
    "project_name": "Java",
    "file_name": "SimpleSubstitutionCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/SimpleSubstitutionCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Encrypt text by replacing each element with its opposite character.\n     *\n     * @return Encrypted message\n     */",
    "source_code": "\npublic static String encode(String message, String cipherSmall) {\n    StringBuilder encoded = new StringBuilder();\n\n    // This map is used to encode\n    Map<Character, Character> cipherMap = new HashMap<>();\n\n    char beginSmallLetter = 'a';\n    char beginCapitalLetter = 'A';\n\n    cipherSmall = cipherSmall.toLowerCase();\n    String cipherCapital = cipherSmall.toUpperCase();\n\n    // To handle Small and Capital letters\n    for (int i = 0; i < cipherSmall.length(); i++) {\n        cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));\n        cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));\n    }\n\n    for (int i = 0; i < message.length(); i++) {\n        if (Character.isAlphabetic(message.charAt(i))) {\n            encoded.append(cipherMap.get(message.charAt(i)));\n        } else {\n            encoded.append(message.charAt(i));\n        }\n    }\n\n    return encoded.toString();\n}\n",
    "class_name": "SimpleSubstitutionCipher",
    "method_name": "encode",
    "arguments": [
        "String message",
        "String cipherSmall"
    ],
    "generate_test": [
        "@Test\npublic void encodeTest() {\n    String message = \"hello\";\n    String cipherSmall = \"qwertyuiopasdfghjklzxcvbnm\";\n\n    String expectedResult = \"itssi\";\n    String actualResult = SimpleSubstitutionCipher.encode(message, cipherSmall);\n\n    assertEquals(expectedResult, actualResult);\n}",
        "import static org.junit.jupiter.api.Assertions.*;\n    @Test\n    public void encodeTest() {\n        String message = \"Hello\";\n        String cipherSmall = \"xyzabc\";\n        String expected = \"Czggj\";\n        String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n        assertEquals(expected, actual);\n    }",
        "@Test\npublic void encodeTest() {\n    String message = \"Hello\";\n    String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n    \n    String expected = \"Ifmmp\";\n    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n    \n    assertEquals(expected, actual);\n}",
        "@Test\npublic void encodeTest() {\n    String message = \"Hello World\";\n    String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n    String expectedResult = \"Svool Dliow\";\n    String encodedResult = SimpleSubstitutionCipher.encode(message, cipherSmall);\n    assertEquals(expectedResult, encodedResult);\n}",
        "@Test\npublic void encodeTest() {\n    String message = \"Hello\";\n    String cipherSmall = \"ekmflgdqvzntowyhxuspaibrcj\";\n\n    String expected = \"Wtaad\";\n    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void encodeTest() {\n    String inputMessage = \"Hello\";\n    String inputCipher = \"defghijklmnopqrstuvwxyzabc\";\n    String expectedOutput = \"Khoor\";\n\n    String actualOutput = SimpleSubstitutionCipher.encode(inputMessage, inputCipher);\n    assertEquals(expectedOutput, actualOutput);\n}",
        "@Test\npublic void encodeTest() {\n    String message = \"Hello World\";\n    String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n    String expectedOutput = \"Svool Dliow\";\n    assertEquals(expectedOutput, SimpleSubstitutionCipher.encode(message, cipherSmall));\n}",
        "@Test\npublic void encodeTest() {\n    String message = \"hello\";\n    String cipherSmall = \"qwertyuiopasdfghjklzxcvbnm\";\n    String expected = \"itssg\";\n    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void encodeTest() {\n    String message = \"Hello World\";\n    String cipherSmall = \"cdefghijklmnopqrstuvwxyzab\";\n\n    assertEquals(\"Jmppr Yosmc\", SimpleSubstitutionCipher.encode(message, cipherSmall));\n}",
        "\nMap<Character, Character> cipherMap = new HashMap<>();\nchar beginSmallLetter = 'a';\nchar beginCapitalLetter = 'A';\nString cipherSmall = \"xyzabcdefghijklmnopqrstuvw\";\nString message = \"Hello, World!\";\nString expectedOutput = \"Xbnvs, Dqnvz!\";\nString encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);\nassertEquals(expectedOutput, encodedMessage);"
    ]
}