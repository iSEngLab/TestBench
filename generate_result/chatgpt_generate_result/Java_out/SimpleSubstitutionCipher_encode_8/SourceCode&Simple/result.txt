Source code: 


public static String encode(String message, String cipherSmall) {
    StringBuilder encoded = new StringBuilder();

    // This map is used to encode
    Map<Character, Character> cipherMap = new HashMap<>();

    char beginSmallLetter = 'a';
    char beginCapitalLetter = 'A';

    cipherSmall = cipherSmall.toLowerCase();
    String cipherCapital = cipherSmall.toUpperCase();

    // To handle Small and Capital letters
    for (int i = 0; i < cipherSmall.length(); i++) {
        cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));
        cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));
    }

    for (int i = 0; i < message.length(); i++) {
        if (Character.isAlphabetic(message.charAt(i))) {
            encoded.append(cipherMap.get(message.charAt(i)));
        } else {
            encoded.append(message.charAt(i));
        }
    }

    return encoded.toString();
}



No.1 generated result --------------------------

@Test
public void encodeTest() {
    String message = "hello";
    String cipherSmall = "qwertyuiopasdfghjklzxcvbnm";

    String expectedResult = "itssi";
    String actualResult = SimpleSubstitutionCipher.encode(message, cipherSmall);

    assertEquals(expectedResult, actualResult);
}


No.2 generated result --------------------------

import static org.junit.jupiter.api.Assertions.*;
    @Test
    public void encodeTest() {
        String message = "Hello";
        String cipherSmall = "xyzabc";
        String expected = "Czggj";
        String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);
        assertEquals(expected, actual);
    }


No.3 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello";
    String cipherSmall = "bcdefghijklmnopqrstuvwxyza";
    
    String expected = "Ifmmp";
    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);
    
    assertEquals(expected, actual);
}


No.4 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello World";
    String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
    String expectedResult = "Svool Dliow";
    String encodedResult = SimpleSubstitutionCipher.encode(message, cipherSmall);
    assertEquals(expectedResult, encodedResult);
}


No.5 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello";
    String cipherSmall = "ekmflgdqvzntowyhxuspaibrcj";

    String expected = "Wtaad";
    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);

    assertEquals(expected, actual);
}


No.6 generated result --------------------------

@Test
public void encodeTest() {
    String inputMessage = "Hello";
    String inputCipher = "defghijklmnopqrstuvwxyzabc";
    String expectedOutput = "Khoor";

    String actualOutput = SimpleSubstitutionCipher.encode(inputMessage, inputCipher);
    assertEquals(expectedOutput, actualOutput);
}


No.7 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello World";
    String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
    String expectedOutput = "Svool Dliow";
    assertEquals(expectedOutput, SimpleSubstitutionCipher.encode(message, cipherSmall));
}


No.8 generated result --------------------------

@Test
public void encodeTest() {
    String message = "hello";
    String cipherSmall = "qwertyuiopasdfghjklzxcvbnm";
    String expected = "itssg";
    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);
    assertEquals(expected, actual);
}


No.9 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello World";
    String cipherSmall = "cdefghijklmnopqrstuvwxyzab";

    assertEquals("Jmppr Yosmc", SimpleSubstitutionCipher.encode(message, cipherSmall));
}


No.10 generated result --------------------------


Map<Character, Character> cipherMap = new HashMap<>();
char beginSmallLetter = 'a';
char beginCapitalLetter = 'A';
String cipherSmall = "xyzabcdefghijklmnopqrstuvw";
String message = "Hello, World!";
String expectedOutput = "Xbnvs, Dqnvz!";
String encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);
assertEquals(expectedOutput, encodedMessage);


