Source code: 


public static String encode(String message, String cipherSmall) {
    StringBuilder encoded = new StringBuilder();

    // This map is used to encode
    Map<Character, Character> cipherMap = new HashMap<>();

    char beginSmallLetter = 'a';
    char beginCapitalLetter = 'A';

    cipherSmall = cipherSmall.toLowerCase();
    String cipherCapital = cipherSmall.toUpperCase();

    // To handle Small and Capital letters
    for (int i = 0; i < cipherSmall.length(); i++) {
        cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));
        cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));
    }

    for (int i = 0; i < message.length(); i++) {
        if (Character.isAlphabetic(message.charAt(i))) {
            encoded.append(cipherMap.get(message.charAt(i)));
        } else {
            encoded.append(message.charAt(i));
        }
    }

    return encoded.toString();
}



No.1 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello World";
    String cipher = "zyxwvutsrqponmlkjihgfedcba";
    String expected = "Svool Dliow";
    String actual = SimpleSubstitutionCipher.encode(message, cipher);
    assertEquals(expected, actual);
}


No.2 generated result --------------------------


@Test
public void encodeTest() {
    String message = "hello";
    String cipherSmall = "bcdefghijklmnopqrstuvwxyza";
    String expected = "ifmmp";
    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);
    assertEquals(expected, actual);
}


No.3 generated result --------------------------

@Test
    public void encodeTest() {
        String message = "Hello, World!";
        String cipherSmall = "xycwzvutsrqponmlkjihgfedba";
        String expected = "Qkrrs, Posql!";
        String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);
        assertEquals(expected, actual);
    }


No.4 generated result --------------------------

@Test
public void encodeTest() {
    assertEquals("Gstd ex ejdx ot efd jgex jnkx", SimpleSubstitutionCipher.encode("This is this to the test", "zyxwvutsrqponmkjihgfedcba"));
}


No.5 generated result --------------------------

public void encodeTest() {
      String actual = SimpleSubstitutionCipher.encode("Hello", "defghijklmnopqrstuvwxyzabc");
      String expected = "khoor";
      assertEquals(expected, actual);
  }


No.6 generated result --------------------------

@Test
public void encodeTest() {
    String result = SimpleSubstitutionCipher.encode("Hello World!", "bcdefghijklmnopqrstuvwxyza");
    assertEquals("Ifmmp Xpsme!", result);
}


No.7 generated result --------------------------

@Test
public void encodeTest() {
    SimpleSubstitutionCipher cipher = new SimpleSubstitutionCipher();
    String message = "Hello World";
    String cipherSmall = "qwertyuiopasdfghjklzxcvbnm";
    String expected = "Ittq Ptwqi";
    String actual = cipher.encode(message, cipherSmall);
    assertEquals(expected, actual);
}


No.8 generated result --------------------------

@Test
public void encodeTest() {
    assertEquals("Ub fgnsl rfgqmeir", SimpleSubstitutionCipher.encode("To sleep perchance", "zyxwvutsrqponmlkjihgfedcba"));
}


No.9 generated result --------------------------


@Test
public void encodeTest() {
    String message = "Hello";
    String cipherSmall = "jklmnopqrstuvwxyzabcdefghi";
    assertEquals("Hryyq", SimpleSubstitutionCipher.encode(message, cipherSmall));
}


No.10 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello World";
    String cipher = "qwertyuiopasdfghjklzxcvbnm";
    String expected = "Ittgi Gqbqt";
    String actual = SimpleSubstitutionCipher.encode(message, cipher);
    assertEquals(expected, actual);
}


