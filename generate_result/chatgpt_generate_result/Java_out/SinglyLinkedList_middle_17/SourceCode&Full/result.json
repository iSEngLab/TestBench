{
    "project_name": "Java",
    "file_name": "SinglyLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/SinglyLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * Return the node in the middle of the list\n     * If the length of the list is even then return item number length/2\n     * @return middle node of the list\n     */",
    "source_code": "\npublic Node middle() {\n    if (head == null) {\n        return null;\n    }\n    Node firstCounter = head;\n    Node secondCounter = firstCounter.next;\n    while (secondCounter != null && secondCounter.next != null) {\n        firstCounter = firstCounter.next;\n        secondCounter = secondCounter.next.next;\n    }\n    return firstCounter;\n}\n",
    "class_name": "SinglyLinkedList",
    "method_name": "middle",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.insert(1);\n    list.insert(2);\n    list.insert(3);\n    list.insert(4);\n    Node middle = list.middle();\n    assertEquals(3, middle.value);\n}\n",
        "public void middleTest() {\n    SinglyLinkedList singlyLinkedList = new SinglyLinkedList();\n    singlyLinkedList.insert(1);\n    singlyLinkedList.insert(2);\n    singlyLinkedList.insert(3);\n    singlyLinkedList.insert(4);\n    singlyLinkedList.insert(5);\n    Node middle = singlyLinkedList.middle();\n    assertEquals(3, middle.value);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.insert(1);\n    list.insert(2);\n    list.insert(3);\n    list.insert(4);\n    assertEquals(2, list.middle().value);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.insertHead(5);\n    list.insertHead(7);\n    list.insertHead(10);\n    list.insert(3);\n    list.insertNth(1, 4);\n\n    Node expectedMiddle = list.middle();\n\n    assertEquals(7, expectedMiddle.value);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.insert(1);\n    list.insert(2);\n    list.insert(3);\n    list.insert(4);\n    assertEquals(2, list.middle());\n}",
        "public void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.insert(5);\n    list.insert(7);\n    list.insert(10);\n    list.insert(3);\n    list.insert(1);\n    Node actualMiddle = list.middle();\n    assertEquals(7, actualMiddle.value);\n}",
        "\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        list.insertHead(5);\n        list.insertHead(7);\n        list.insertHead(10);\n        list.insert(3);\n        list.insertNth(1, 4);\n        Node middleNode = list.middle();\n        assertEquals(7, middleNode.value);\n    }\n",
        "@Test\npublic void middleTest() {\n    Node head = new Node(1, new Node(2, new Node(3, new Node(4, new Node(5)))));\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.setHead(head);\n    Node result = list.middle();\n    assertEquals(3, result.value);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList singlyLinkedList = new SinglyLinkedList();\n    singlyLinkedList.insertHead(5);\n    singlyLinkedList.insertHead(7);\n    singlyLinkedList.insertHead(10);\n    singlyLinkedList.insert(3);\n    singlyLinkedList.insertNth(1, 4);\n    Node middleNode = singlyLinkedList.middle();\n    assertEquals(5, middleNode.value);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.insert(1);\n    list.insert(2);\n    list.insert(3);\n    list.insert(4);\n    list.insert(5);\n    Node middleNode = list.middle();\n    assertEquals(3, middleNode.value);\n}"
    ]
}