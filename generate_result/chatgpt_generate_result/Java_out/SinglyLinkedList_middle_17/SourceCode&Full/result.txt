Source code: 


public Node middle() {
    if (head == null) {
        return null;
    }
    Node firstCounter = head;
    Node secondCounter = firstCounter.next;
    while (secondCounter != null && secondCounter.next != null) {
        firstCounter = firstCounter.next;
        secondCounter = secondCounter.next.next;
    }
    return firstCounter;
}



No.1 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.insert(1);
    list.insert(2);
    list.insert(3);
    list.insert(4);
    Node middle = list.middle();
    assertEquals(3, middle.value);
}



No.2 generated result --------------------------

public void middleTest() {
    SinglyLinkedList singlyLinkedList = new SinglyLinkedList();
    singlyLinkedList.insert(1);
    singlyLinkedList.insert(2);
    singlyLinkedList.insert(3);
    singlyLinkedList.insert(4);
    singlyLinkedList.insert(5);
    Node middle = singlyLinkedList.middle();
    assertEquals(3, middle.value);
}


No.3 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.insert(1);
    list.insert(2);
    list.insert(3);
    list.insert(4);
    assertEquals(2, list.middle().value);
}


No.4 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.insertHead(5);
    list.insertHead(7);
    list.insertHead(10);
    list.insert(3);
    list.insertNth(1, 4);

    Node expectedMiddle = list.middle();

    assertEquals(7, expectedMiddle.value);
}


No.5 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.insert(1);
    list.insert(2);
    list.insert(3);
    list.insert(4);
    assertEquals(2, list.middle());
}


No.6 generated result --------------------------

public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.insert(5);
    list.insert(7);
    list.insert(10);
    list.insert(3);
    list.insert(1);
    Node actualMiddle = list.middle();
    assertEquals(7, actualMiddle.value);
}


No.7 generated result --------------------------


    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();
        list.insertHead(5);
        list.insertHead(7);
        list.insertHead(10);
        list.insert(3);
        list.insertNth(1, 4);
        Node middleNode = list.middle();
        assertEquals(7, middleNode.value);
    }



No.8 generated result --------------------------

@Test
public void middleTest() {
    Node head = new Node(1, new Node(2, new Node(3, new Node(4, new Node(5)))));
    SinglyLinkedList list = new SinglyLinkedList();
    list.setHead(head);
    Node result = list.middle();
    assertEquals(3, result.value);
}


No.9 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList singlyLinkedList = new SinglyLinkedList();
    singlyLinkedList.insertHead(5);
    singlyLinkedList.insertHead(7);
    singlyLinkedList.insertHead(10);
    singlyLinkedList.insert(3);
    singlyLinkedList.insertNth(1, 4);
    Node middleNode = singlyLinkedList.middle();
    assertEquals(5, middleNode.value);
}


No.10 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.insert(1);
    list.insert(2);
    list.insert(3);
    list.insert(4);
    list.insert(5);
    Node middleNode = list.middle();
    assertEquals(3, middleNode.value);
}


