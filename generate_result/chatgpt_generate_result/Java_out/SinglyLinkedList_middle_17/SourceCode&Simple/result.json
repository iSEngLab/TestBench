{
    "project_name": "Java",
    "file_name": "SinglyLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/SinglyLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * Return the node in the middle of the list\n     * If the length of the list is even then return item number length/2\n     * @return middle node of the list\n     */",
    "source_code": "\npublic Node middle() {\n    if (head == null) {\n        return null;\n    }\n    Node firstCounter = head;\n    Node secondCounter = firstCounter.next;\n    while (secondCounter != null && secondCounter.next != null) {\n        firstCounter = firstCounter.next;\n        secondCounter = secondCounter.next.next;\n    }\n    return firstCounter;\n}\n",
    "class_name": "SinglyLinkedList",
    "method_name": "middle",
    "arguments": [],
    "generate_test": [
        "@Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        list.insert(1);\n        list.insert(2);\n        list.insert(3);\n        list.insert(4);\n        Node middleNode = list.middle();\n        assertEquals(3, middleNode.value);\n    }",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.insert(1);\n    list.insert(2);\n    list.insert(3);\n    list.insert(4);\n    assertEquals(list.middle().value, 3);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.insert(1);\n    list.insert(2);\n    list.insert(3);\n    list.insert(4);\n    Node middle = list.middle();\n    assertEquals(3, middle.value);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.insert(1);\n    list.insert(2);\n    list.insert(3);\n    list.insert(4);\n    Node middleNode = list.middle();\n    assertEquals(3, middleNode.value);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.insert(1);\n    list.insert(2);\n    list.insert(3);\n    list.insert(4);\n    list.insert(5);\n    Node middle = list.middle();\n    assertEquals(3, middle.value);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.insert(1);\n    list.insert(2);\n    list.insert(3);\n    Node result = list.middle();\n    assertEquals(2, result.value);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    Node node1 = new Node(1);\n    Node node2 = new Node(2);\n    Node node3 = new Node(3);\n    list.setHead(node1);\n    node1.next = node2;\n    node2.next = node3;\n    Node middleNode = list.middle();\n    assertEquals(2, middleNode.value);\n}",
        "Node middle = new Node(3);\nSinglyLinkedList list = new SinglyLinkedList();\nlist.insertHead(1);\nlist.insertHead(2);\nlist.insertHead(3);\nlist.insertHead(4);\nlist.insertHead(5);\nassertEquals(middle, list.middle());",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.insert(1);\n    list.insert(2);\n    list.insert(3);\n    list.insert(4);\n    list.insert(5);\n    Node middleNode = list.middle();\n    assertEquals(3, middleNode.value);\n}",
        "SinglyLinkedList singlyLinkedList = new SinglyLinkedList();\nsinglyLinkedList.insert(1);\nsinglyLinkedList.insert(2);\nsinglyLinkedList.insert(3);\nassertEquals(2, singlyLinkedList.middle().value);"
    ]
}