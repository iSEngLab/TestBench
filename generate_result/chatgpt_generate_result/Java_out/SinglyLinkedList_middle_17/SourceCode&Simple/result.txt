Source code: 


public Node middle() {
    if (head == null) {
        return null;
    }
    Node firstCounter = head;
    Node secondCounter = firstCounter.next;
    while (secondCounter != null && secondCounter.next != null) {
        firstCounter = firstCounter.next;
        secondCounter = secondCounter.next.next;
    }
    return firstCounter;
}



No.1 generated result --------------------------

@Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();
        list.insert(1);
        list.insert(2);
        list.insert(3);
        list.insert(4);
        Node middleNode = list.middle();
        assertEquals(3, middleNode.value);
    }


No.2 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.insert(1);
    list.insert(2);
    list.insert(3);
    list.insert(4);
    assertEquals(list.middle().value, 3);
}


No.3 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.insert(1);
    list.insert(2);
    list.insert(3);
    list.insert(4);
    Node middle = list.middle();
    assertEquals(3, middle.value);
}


No.4 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.insert(1);
    list.insert(2);
    list.insert(3);
    list.insert(4);
    Node middleNode = list.middle();
    assertEquals(3, middleNode.value);
}


No.5 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.insert(1);
    list.insert(2);
    list.insert(3);
    list.insert(4);
    list.insert(5);
    Node middle = list.middle();
    assertEquals(3, middle.value);
}


No.6 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.insert(1);
    list.insert(2);
    list.insert(3);
    Node result = list.middle();
    assertEquals(2, result.value);
}


No.7 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    Node node1 = new Node(1);
    Node node2 = new Node(2);
    Node node3 = new Node(3);
    list.setHead(node1);
    node1.next = node2;
    node2.next = node3;
    Node middleNode = list.middle();
    assertEquals(2, middleNode.value);
}


No.8 generated result --------------------------

Node middle = new Node(3);
SinglyLinkedList list = new SinglyLinkedList();
list.insertHead(1);
list.insertHead(2);
list.insertHead(3);
list.insertHead(4);
list.insertHead(5);
assertEquals(middle, list.middle());


No.9 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.insert(1);
    list.insert(2);
    list.insert(3);
    list.insert(4);
    list.insert(5);
    Node middleNode = list.middle();
    assertEquals(3, middleNode.value);
}


No.10 generated result --------------------------

SinglyLinkedList singlyLinkedList = new SinglyLinkedList();
singlyLinkedList.insert(1);
singlyLinkedList.insert(2);
singlyLinkedList.insert(3);
assertEquals(2, singlyLinkedList.middle().value);


