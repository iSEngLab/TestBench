{
    "project_name": "Java",
    "file_name": "SinglyLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/SinglyLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * Return the node in the middle of the list\n     * If the length of the list is even then return item number length/2\n     * @return middle node of the list\n     */",
    "source_code": "\npublic Node middle() {\n    if (head == null) {\n        return null;\n    }\n    Node firstCounter = head;\n    Node secondCounter = firstCounter.next;\n    while (secondCounter != null && secondCounter.next != null) {\n        firstCounter = firstCounter.next;\n        secondCounter = secondCounter.next.next;\n    }\n    return firstCounter;\n}\n",
    "class_name": "SinglyLinkedList",
    "method_name": "middle",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.append(1);\n    list.append(2);\n    list.append(3);\n    list.append(4);\n    list.append(5);\n    // FILL: add the assertion to test the middle method\n    assertEquals(3, list.middle().data);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.append(1);\n    list.append(2);\n    list.append(3);\n    assertEquals(2, list.middle().getData());\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.append(1);\n    list.append(2);\n    list.append(3);\n    list.append(4);\n    list.append(5);\n    \n    Node expected = list.getHead().getNext().getNext();\n    Node actual = list.middle();\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.add(1);\n    list.add(2);\n    list.add(3);\n    Node result = list.middle();\n    assertEquals(2, result.getData());\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.append(1);\n    list.append(2);\n    list.append(3);\n    list.append(4);\n    list.append(5);\n    assertEquals(3, list.middle().data);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.insertAtHead(3);\n    list.insertAtHead(2);\n    list.insertAtHead(1);\n    assertEquals(2, list.middle().getData());\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.append(1);\n    list.append(2);\n    list.append(3);\n    list.append(4);\n    list.append(5);\n    assertEquals(3, list.middle().getData());\n}",
        "@Test\npublic void middleTest() {\n    // Create a new SinglyLinkedList\n    SinglyLinkedList list = new SinglyLinkedList();\n    \n    // Add nodes to the list \n    list.add(1);\n    list.add(2);\n    list.add(3);\n    list.add(4);\n    list.add(5);\n    \n    // Verify that the middle method returns the correct middle node\n    assertEquals(3, list.middle());\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.insertAtHead(1);\n    list.insertAtHead(2);\n    list.insertAtHead(3);\n    list.insertAtHead(4);\n    Node result = list.middle();\n    assertEquals(2, result.getData());\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    // Add nodes to the list\n    \n    // Call middle() method\n    \n    // Verify the output with assertEquals()\n}"
    ]
}