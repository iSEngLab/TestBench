Source code: 


public Node middle() {
    if (head == null) {
        return null;
    }
    Node firstCounter = head;
    Node secondCounter = firstCounter.next;
    while (secondCounter != null && secondCounter.next != null) {
        firstCounter = firstCounter.next;
        secondCounter = secondCounter.next.next;
    }
    return firstCounter;
}



No.1 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.append(1);
    list.append(2);
    list.append(3);
    list.append(4);
    list.append(5);
    // FILL: add the assertion to test the middle method
    assertEquals(3, list.middle().data);
}


No.2 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.append(1);
    list.append(2);
    list.append(3);
    assertEquals(2, list.middle().getData());
}


No.3 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.append(1);
    list.append(2);
    list.append(3);
    list.append(4);
    list.append(5);
    
    Node expected = list.getHead().getNext().getNext();
    Node actual = list.middle();
    assertEquals(expected, actual);
}


No.4 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.add(1);
    list.add(2);
    list.add(3);
    Node result = list.middle();
    assertEquals(2, result.getData());
}


No.5 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.append(1);
    list.append(2);
    list.append(3);
    list.append(4);
    list.append(5);
    assertEquals(3, list.middle().data);
}


No.6 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.insertAtHead(3);
    list.insertAtHead(2);
    list.insertAtHead(1);
    assertEquals(2, list.middle().getData());
}


No.7 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.append(1);
    list.append(2);
    list.append(3);
    list.append(4);
    list.append(5);
    assertEquals(3, list.middle().getData());
}


No.8 generated result --------------------------

@Test
public void middleTest() {
    // Create a new SinglyLinkedList
    SinglyLinkedList list = new SinglyLinkedList();
    
    // Add nodes to the list 
    list.add(1);
    list.add(2);
    list.add(3);
    list.add(4);
    list.add(5);
    
    // Verify that the middle method returns the correct middle node
    assertEquals(3, list.middle());
}


No.9 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.insertAtHead(1);
    list.insertAtHead(2);
    list.insertAtHead(3);
    list.insertAtHead(4);
    Node result = list.middle();
    assertEquals(2, result.getData());
}


No.10 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    // Add nodes to the list
    
    // Call middle() method
    
    // Verify the output with assertEquals()
}


