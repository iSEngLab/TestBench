Source code: 


static int getTwinPrime(int inputNumber) {

    // if inputNumber and (inputNumber + 2) are both prime
    // then return (inputNumber + 2) as a result
    if (PrimeCheck.isPrime(inputNumber) && PrimeCheck.isPrime(inputNumber + 2)) {
        return inputNumber + 2;
    }
    // if any one from inputNumber and (inputNumber + 2) or if both of them are not prime
    // then return -1 as a result
    return -1;
}



No.1 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    assertEquals(29, TwinPrime.getTwinPrime(23));
    assertEquals(23, TwinPrime.getTwinPrime(19));
    assertEquals(-1, TwinPrime.getTwinPrime(10));
}


No.2 generated result --------------------------

public void getTwinPrimeTest() {
        assertEquals(5, TwinPrime.getTwinPrime(3));
        assertEquals(-1, TwinPrime.getTwinPrime(10));
        assertEquals(101, TwinPrime.getTwinPrime(97));
    }


No.3 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    assertEquals(3, TwinPrime.getTwinPrime(1)); // Twin prime of 1 is 3
    assertEquals(11, TwinPrime.getTwinPrime(3)); // Twin prime of 3 is 11
    assertEquals(17, TwinPrime.getTwinPrime(11)); // Twin prime of 11 is 17
    assertEquals(-1, TwinPrime.getTwinPrime(4)); // 4 is not a prime number
}


No.4 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    assertEquals(19, TwinPrime.getTwinPrime(17));
    assertEquals(-1, TwinPrime.getTwinPrime(19));
}


No.5 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    assertEquals(3, TwinPrime.getTwinPrime(1));
    assertEquals(3, TwinPrime.getTwinPrime(3));
    assertEquals(5, TwinPrime.getTwinPrime(3));
    assertEquals(-1, TwinPrime.getTwinPrime(20));
}


No.6 generated result --------------------------

@Test
    public void getTwinPrimeTest() {
        int result = TwinPrime.getTwinPrime(3);
        assertEquals(5, result);
    }


No.7 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    assertEquals(TwinPrime.getTwinPrime(3), 5);
    assertEquals(TwinPrime.getTwinPrime(11), 13);
    assertEquals(TwinPrime.getTwinPrime(17), -1);
}


No.8 generated result --------------------------

@Test
    public void getTwinPrimeTest() {
        assertEquals(3, TwinPrime.getTwinPrime(1));
        assertEquals(5, TwinPrime.getTwinPrime(3));
        assertEquals(-1, TwinPrime.getTwinPrime(4));
    }


No.9 generated result --------------------------

@Test
    public void getTwinPrimeTest() {
        assertEquals(5, TwinPrime.getTwinPrime(3));
        assertEquals(11, TwinPrime.getTwinPrime(7));
        assertEquals(-1, TwinPrime.getTwinPrime(6));
    }


No.10 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    assertEquals(3, TwinPrime.getTwinPrime(1));
    assertEquals(-1, TwinPrime.getTwinPrime(8));
    assertEquals(11, TwinPrime.getTwinPrime(3));
}


