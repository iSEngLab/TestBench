Source code: 


static int getTwinPrime(int inputNumber) {

    // if inputNumber and (inputNumber + 2) are both prime
    // then return (inputNumber + 2) as a result
    if (PrimeCheck.isPrime(inputNumber) && PrimeCheck.isPrime(inputNumber + 2)) {
        return inputNumber + 2;
    }
    // if any one from inputNumber and (inputNumber + 2) or if both of them are not prime
    // then return -1 as a result
    return -1;
}



No.1 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    // Test case for inputNumber = 3
    assertEquals(5, TwinPrime.getTwinPrime(3));
    // Test case for inputNumber = 11
    assertEquals(13, TwinPrime.getTwinPrime(11));
    // Test case for inputNumber = 17
    assertEquals(-1, TwinPrime.getTwinPrime(17));
}


No.2 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    assertEquals(5, getTwinPrime(3));
    assertEquals(5, getTwinPrime(5));
    assertEquals(11, getTwinPrime(11));
    assertEquals(-1, getTwinPrime(4));
}


No.3 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    assertEquals(3, TwinPrime.getTwinPrime(1));
    assertEquals(5, TwinPrime.getTwinPrime(3));
    assertEquals(11, TwinPrime.getTwinPrime(7));
    assertEquals(-1, TwinPrime.getTwinPrime(4));
    assertEquals(-1, TwinPrime.getTwinPrime(6));
}


No.4 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    assertEquals(5, getTwinPrime(3));
    assertEquals(11, getTwinPrime(7));
    assertEquals(-1, getTwinPrime(10));
}


No.5 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    assertEquals(3, TwinPrime.getTwinPrime(1));
    assertEquals(5, TwinPrime.getTwinPrime(3));
    assertEquals(-1, TwinPrime.getTwinPrime(8));
}


No.6 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    assertEquals(5, getTwinPrime(3));
    assertEquals(17, getTwinPrime(11));
    assertEquals(-1, getTwinPrime(8));
    assertEquals(101, getTwinPrime(97));
}


No.7 generated result --------------------------

assertEquals(3, getTwinPrime(1));
assertEquals(-1, getTwinPrime(4));
assertEquals(5, getTwinPrime(3));


No.8 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    assertEquals(3, getTwinPrime(1));
    assertEquals(11, getTwinPrime(3));
    assertEquals(17, getTwinPrime(13));
    assertEquals(-1, getTwinPrime(10));
}


No.9 generated result --------------------------


    @Test
    public void getTwinPrimeTest() {
        assertEquals(3, AbcMath.getTwinPrime(1));
        assertEquals(5, AbcMath.getTwinPrime(3));
        assertEquals(7, AbcMath.getTwinPrime(5));
        assertEquals(11, AbcMath.getTwinPrime(7));
        assertEquals(13, AbcMath.getTwinPrime(11));
        assertEquals(-1, AbcMath.getTwinPrime(4));
        assertEquals(-1, AbcMath.getTwinPrime(6));
        assertEquals(-1, AbcMath.getTwinPrime(8));
        assertEquals(-1, AbcMath.getTwinPrime(10));
        assertEquals(-1, AbcMath.getTwinPrime(12));
    }


No.10 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    assertEquals(3, getTwinPrime(1));
    assertEquals(5, getTwinPrime(3));
    assertEquals(7, getTwinPrime(5));
    assertEquals(11, getTwinPrime(7));
    assertEquals(-1, getTwinPrime(4));
}



