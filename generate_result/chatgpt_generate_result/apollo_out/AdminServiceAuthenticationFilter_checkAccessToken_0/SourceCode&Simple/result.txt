Source code: 

private boolean checkAccessToken(String token) {
  String accessTokens = bizConfig.getAdminServiceAccessTokens();

  // if user forget to configure access tokens, then default to pass
  if (Strings.isNullOrEmpty(accessTokens)) {
    return true;
  }

  // no need to check
  if (Strings.isNullOrEmpty(token)) {
    return false;
  }

  // update cache
  if (!accessTokens.equals(lastAccessTokens)) {
    synchronized (this) {
      accessTokenList = ACCESS_TOKEN_SPLITTER.splitToList(accessTokens);
      lastAccessTokens = accessTokens;
    }
  }

  return accessTokenList.contains(token);
}



No.1 generated result --------------------------

@Test
public void checkAccessTokenTest() {
    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);
    boolean result = filter.checkAccessToken("sampleToken");
    assertTrue(result);
}


No.2 generated result --------------------------

@Test
public void checkAccessTokenTest() {
    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);
    String validToken = "validToken";
    String invalidToken = "invalidToken";
    
    assertTrue(filter.checkAccessToken(validToken));
    assertFalse(filter.checkAccessToken(invalidToken));
}


No.3 generated result --------------------------

@Test
public void checkAccessTokenTest() {
  // Test case when access tokens are configured
  // Given
  AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(mock(BizConfig.class));
  String validToken = "validToken";
  String invalidToken = "invalidToken";
  filter.init(mock(FilterConfig.class));

  // When
  boolean actual1 = filter.checkAccessToken(validToken);
  boolean actual2 = filter.checkAccessToken(invalidToken);

  // Then
  assertTrue(actual1);
  assertFalse(actual2);
}


No.4 generated result --------------------------

@Test
public void checkAccessTokenTest() {
    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(new BizConfig());
    assertTrue(filter.checkAccessToken("testToken"));
}


No.5 generated result --------------------------

@Test
public void checkAccessTokenTest() {
    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(new BizConfig());
    boolean result = filter.checkAccessToken("testToken");
    assertTrue(result);
}


No.6 generated result --------------------------

@Test
public void checkAccessTokenTest() {
  AdminServiceAuthenticationFilter adminServiceAuthenticationFilter = new AdminServiceAuthenticationFilter(bizConfig);
  boolean result = adminServiceAuthenticationFilter.checkAccessToken("token");
  assertTrue(result);
}


No.7 generated result --------------------------

@Test
public void checkAccessTokenTest() {
    // Given
    String validToken = "validToken";
    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(new BizConfig());
    
    // When
    boolean result = filter.checkAccessToken(validToken);
    
    // Then
    assertTrue(result);
}


No.8 generated result --------------------------

@Test
  public void checkAccessTokenTest() {
    AdminServiceAuthenticationFilter adminServiceAuthenticationFilter = new AdminServiceAuthenticationFilter(new BizConfig());
    String token = "exampleToken";
    boolean result = adminServiceAuthenticationFilter.checkAccessToken(token);
    assertTrue(result);
  }


No.9 generated result --------------------------

@Test
public void checkAccessTokenTest() {
    // Create an instance of the AdminServiceAuthenticationFilter class
    BizConfig bizConfig = new BizConfig();
    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);
  
    // Set up the required variables for the test
    String validToken = "validToken";
    String invalidToken = "invalidToken";
  
    // Perform the test for valid access token
    boolean validTokenResult = filter.checkAccessToken(validToken);
    assertTrue(validTokenResult);
  
    // Perform the test for invalid access token
    boolean invalidTokenResult = filter.checkAccessToken(invalidToken);
    assertFalse(invalidTokenResult);
}


No.10 generated result --------------------------

@Test
public void checkAccessTokenTest() {
    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);
    
    String validToken = "validToken";
    String invalidToken = "invalidToken";
    
    assertTrue(filter.checkAccessToken(validToken));
    assertFalse(filter.checkAccessToken(invalidToken));
}


