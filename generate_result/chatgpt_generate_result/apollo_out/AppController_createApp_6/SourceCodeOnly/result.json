{
    "project_name": "apollo",
    "file_name": "AppController.java",
    "relative_path": "apollo/apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/AppController.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.openapi.v1.controller",
    "docstring": "/**\n   * @see com.ctrip.framework.apollo.portal.controller.AppController#create(AppModel)\n   */",
    "source_code": "\n@Transactional\n@PreAuthorize(value = \"@consumerPermissionValidator.hasCreateApplicationPermission(#request)\")\n@PostMapping(value = \"/apps\")\npublic void createApp(\n    @RequestBody OpenCreateAppDTO req,\n    HttpServletRequest request\n) {\n  if (null == req.getApp()) {\n    throw new BadRequestException(\"App is null\");\n  }\n  final OpenAppDTO app = req.getApp();\n  if (null == app.getAppId()) {\n    throw new BadRequestException(\"AppId is null\");\n  }\n  // create app\n  this.appOpenApiService.createApp(req);\n  if (req.isAssignAppRoleToSelf()) {\n    long consumerId = this.consumerAuthUtil.retrieveConsumerId(request);\n    consumerService.assignAppRoleToConsumer(consumerId, app.getAppId());\n  }\n}\n",
    "class_name": "AppController",
    "method_name": "createApp",
    "arguments": [
        "OpenCreateAppDTO req",
        "HttpServletRequest request"
    ],
    "generate_test": [
        "@Test\npublic void createAppTest() {\n    // Create a request object with valid app details\n    OpenCreateAppDTO req = new OpenCreateAppDTO();\n    OpenAppDTO app = new OpenAppDTO();\n    app.setAppId(\"12345\");\n    req.setApp(app);\n\n    // Create a mock HttpServletRequest\n    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n\n    // Create an instance of the controller\n    AppController appController = new AppController();\n\n    // Call the method to be tested\n    appController.createApp(req, request);\n\n    // Add assertions to verify the behavior, such as checking if the app is created\n    // and if the app role is assigned to the consumer\n}",
        "@Test\npublic void createAppTest() {\n    // Arrange\n    OpenCreateAppDTO mockReq = new OpenCreateAppDTO();\n    mockReq.setApp(new OpenAppDTO());\n\n    HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);\n    Mockito.when(mockRequest.isAssignAppRoleToSelf()).thenReturn(true);\n\n    ConsumerService mockConsumerService = Mockito.mock(ConsumerService.class);\n    Mockito.when(mockConsumerService.retrieveConsumerId(Mockito.any())).thenReturn(123L);\n\n    AppOpenApiService mockAppOpenApiService = Mockito.mock(AppOpenApiService.class);\n\n    AppController appController = new AppController(mockAppOpenApiService, mockConsumerService);\n\n    // Act\n    appController.createApp(mockReq, mockRequest);\n\n    // Assert\n    Mockito.verify(mockAppOpenApiService, Mockito.times(1)).createApp(mockReq);\n    Mockito.verify(mockConsumerService, Mockito.times(1)).assignAppRoleToConsumer(123L, mockReq.getApp().getAppId());\n}",
        "\n@Test\npublic void createAppTest() {\n    // Create test data\n    OpenCreateAppDTO testReq = new OpenCreateAppDTO();\n    OpenAppDTO app = new OpenAppDTO();\n    app.setAppId(\"testAppId\");\n    testReq.setApp(app);\n    testReq.setAssignAppRoleToSelf(true);\n    \n    // Mock HttpServletRequest\n    HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);\n    \n    // Create test instance\n    AppController appController = new AppController();\n    \n    // Test the createApp method\n    appController.createApp(testReq, mockRequest);\n    \n    // Add assertions as needed to validate the behavior\n}",
        "@Test\npublic void createAppTest() {\n   OpenCreateAppDTO req = new OpenCreateAppDTO();\n   OpenAppDTO app = new OpenAppDTO();\n   app.setAppId(123);\n   req.setApp(app);\n   HttpServletRequest request = new HttpServletRequest(); // Create a mock HttpServletRequest\n  \n   // Call the method to be tested and assert the expected behavior\n   assertThrows(BadRequestException.class, () -> {\n       createApp(req, request);\n   });\n}",
        "@Test\npublic void createAppTest() {\n    OpenCreateAppDTO req = new OpenCreateAppDTO();\n    OpenAppDTO app = new OpenAppDTO();\n    app.setAppId(\"testAppId\");\n    req.setApp(app);\n    \n    // perform the createApp method\n    // assert the expected results\n}",
        "@Test\npublic void createAppTest() {\n    OpenCreateAppDTO req = new OpenCreateAppDTO();\n    OpenAppDTO app = new OpenAppDTO();\n    app.setAppId(\"TestAppId\");\n    req.setApp(app);\n    \n    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n    \n    Mockito.when(consumerPermissionValidator.hasCreateApplicationPermission(req)).thenReturn(true);\n    Mockito.when(appOpenApiService.createApp(req)).thenReturn(someReturnValue);\n    \n    // Perform the test and assert the expected behavior\n    appController.createApp(req, request);\n    \n    assertEquals(expectedValue, actualValue);\n}",
        "@Test\npublic void createAppTest() {\n    OpenCreateAppDTO req = new OpenCreateAppDTO();\n    req.setApp(new OpenAppDTO());\n    req.getApp().setAppId(\"testAppId\");\n    HttpServletRequest request = new MockHttpServletRequest();\n\n    BadRequestException exception = assertThrows(BadRequestException.class, () -> appController.createApp(req, request));\n    assertEquals(\"AppId is null\", exception.getMessage());\n}",
        "@Test\npublic void createAppTest() {\n    // Create request and set necessary data\n    // Call createApp method\n    // Assert the expected behavior\n}\n",
        "@Test\npublic void createAppTest() {\n    OpenCreateAppDTO openCreateAppDTO = new OpenCreateAppDTO();\n    OpenAppDTO openAppDTO = new OpenAppDTO();\n    openAppDTO.setAppId(\"123\");\n    openCreateAppDTO.setApp(openAppDTO);\n    HttpServletRequest request = new HttpServletRequest();\n    // Complete the test case by adding method calls and assertions as per the source code\n}",
        "@Test\npublic void createAppTest() {\n    OpenCreateAppDTO openCreateAppDTO = new OpenCreateAppDTO();\n    OpenAppDTO appDTO = new OpenAppDTO();\n    appDTO.setAppId(\"testAppId\");\n    openCreateAppDTO.setApp(appDTO);\n    \n    HttpServletRequest request = new MockHttpServletRequest();\n    \n    AppController appController = new AppController();\n    assertThrows(BadRequestException.class, () -> appController.createApp(openCreateAppDTO, request));\n}"
    ]
}