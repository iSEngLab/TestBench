Source code: 


@SuppressWarnings("unchecked")
public static <K, V> Map<K, V> mapByKey(String key, List<?> list) {
  Map<K, V> map = new HashMap<>();
  if (CollectionUtils.isEmpty(list)) {
    return map;
  }
  try {
    Class<?> clazz = list.get(0).getClass();
    Field field = deepFindField(clazz, key);
    if (field == null) {
        throw new IllegalArgumentException("Could not find the key");
    }
    field.setAccessible(true);
    for (Object o : list) {
      map.put((K) field.get(o), (V) o);
    }
  } catch (Exception e) {
    throw new BeanUtilsException(e);
  }
  return map;
}



No.1 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<Map<Integer, UserDTO>> result = BeanUtils.mapByKey("userId", userDTOList);
    assertTrue(result.size() > 0);
}


No.2 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<UserDTO> userList = userService.queryUsers();
    Map<Integer, UserDTO> userIdToUser = BeanUtil.mapByKey("userId", userList);
    assertNotNull(userIdToUser);
    assertEquals(userList.size(), userIdToUser.size());
}


No.3 generated result --------------------------

@Test
public void mapByKeyTest() {
    // Given
    List<SomeObject> list = new ArrayList<>();
    list.add(new SomeObject("key1", "value1"));
    list.add(new SomeObject("key2", "value2"));
    
    // When
    Map<String, SomeObject> result = BeanUtils.mapByKey("key", list);
    
    // Then
    assertEquals("value1", result.get("key1").getValue());
    assertEquals("value2", result.get("key2").getValue());
}


No.4 generated result --------------------------

@Test
public void mapByKeyTest() {
    String key = "id";
    List<User> userList = new ArrayList<>();
    userList.add(new User(1, "Alice"));
    userList.add(new User(2, "Bob"));
    Map<Integer, User> result = BeanUtils.mapByKey(key, userList);
    assertEquals(1, result.get(1).getId());
    assertEquals("Alice", result.get(1).getName());
    assertEquals(2, result.get(2).getId());
    assertEquals("Bob", result.get(2).getName());
}


No.5 generated result --------------------------

@Test
public void mapByKeyTest() {
    // Arrange
    String key = "id";
    List<UserDTO> userList = userService.queryUsers(); // Assuming userService is provided
    Map<Integer, UserDTO> userIdToUserMap = BeanUtils.mapByKey(key, userList);

    // Assert
    assertNotNull(userIdToUserMap);
    // Add more assertions based on the expected behavior of the mapByKey method
}


No.6 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<Map<String, Integer>> list = new ArrayList<>();
    Map<String, Integer> map1 = new HashMap<>();
    map1.put("key1", 1);
    list.add(map1);
    
    Map<String, Integer> map2 = new HashMap<>();
    map2.put("key2", 2);
    list.add(map2);
    
    Map<String, Integer> result = BeanUtils.mapByKey("key", list);
    assertEquals(1, result.get("key1"));
    assertEquals(2, result.get("key2"));
}


No.7 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<UserDTO> userList = userService.queryUsers();
    Map<Integer, UserDTO> userIdToUser = BeanUtil.mapByKey("userId", userList);
    assertNotNull(userIdToUser);
    assertEquals(userList.size(), userIdToUser.size());
}


No.8 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<Object> list = new ArrayList<>();
    // Add objects to the list
    Map<String, Object> map = BeanUtils.mapByKey("key", list);
    // Assert statements for the expected output
    assertEquals(expectedMapSize, map.size());
    assertTrue(map.containsKey(expectedKey));
    assertEquals(expectedValue, map.get(expectedKey));
}


No.9 generated result --------------------------

@Test
public void mapByKeyTest() {
    //given
    List<UserDTO> userList = userService.queryUsers();
    
    //when
    Map<Integer, userDTO> userIdToUser = BeanUtil.mapByKey("userId", userList);
    
    //then
    //assert statements
}


No.10 generated result --------------------------

@Test
    public void mapByKeyTest() {
        List<UserDTO> userList = userService.queryUsers();
        Map<Integer, userDTO> userIdToUser = BeanUtil.mapByKey("userId", userList);
        assertNotNull(userIdToUser);
    }


