{
    "project_name": "apollo",
    "file_name": "BeanUtils.java",
    "relative_path": "apollo/apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/BeanUtils.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.common.utils",
    "docstring": "/**\n   * \u7528\u4e8e\u5c06\u4e00\u4e2a\u5217\u8868\u8f6c\u6362\u4e3a\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\u7684\u67d0\u4e2a\u5c5e\u6027\u6620\u5c04\u5230\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\n   *\n   * <pre>\n   *      List<UserDTO> userList = userService.queryUsers();\n   *      Map<Integer, userDTO> userIdToUser = BeanUtil.mapByKey(\"userId\", userList);\n   * </pre>\n   *\n   * @param key \u5c5e\u6027\u540d\n   */",
    "source_code": "\n@SuppressWarnings(\"unchecked\")\npublic static <K, V> Map<K, V> mapByKey(String key, List<?> list) {\n  Map<K, V> map = new HashMap<>();\n  if (CollectionUtils.isEmpty(list)) {\n    return map;\n  }\n  try {\n    Class<?> clazz = list.get(0).getClass();\n    Field field = deepFindField(clazz, key);\n    if (field == null) {\n        throw new IllegalArgumentException(\"Could not find the key\");\n    }\n    field.setAccessible(true);\n    for (Object o : list) {\n      map.put((K) field.get(o), (V) o);\n    }\n  } catch (Exception e) {\n    throw new BeanUtilsException(e);\n  }\n  return map;\n}\n",
    "class_name": "BeanUtils",
    "method_name": "mapByKey",
    "arguments": [
        "String key",
        "List<> list"
    ],
    "generate_test": [
        "\nMap<String, Object> testMap = BeanUtils.mapByKey(\"id\", Collections.singletonList(new TestObject(\"1\", \"test\")));\nassertEquals(1, testMap.size());\nassertTrue(testMap.containsKey(\"1\"));\n",
        "@Test\npublic void mapByKeyTest() {\n    String key = \"id\";\n    List<Object> list = new ArrayList<>();\n    // Add test data to the list\n\n    Map<String, Object> expectedMap = new HashMap<>();\n    // Add expected mappings to the expectedMap\n\n    Map<String, Object> resultMap = BeanUtils.mapByKey(key, list);\n    assertEquals(expectedMap, resultMap);\n}",
        "@Test\npublic void mapByKeyTest() {\n    String key = \"id\";\n    List<MyObject> list = new ArrayList<>();\n    MyObject obj1 = new MyObject();\n    obj1.setId(1);\n    MyObject obj2 = new MyObject();\n    obj2.setId(2);\n    list.add(obj1);\n    list.add(obj2);\n    \n    Map<Integer, MyObject> result = BeanUtils.mapByKey(key, list);\n    assertEquals(1, result.get(1).getId());\n    assertEquals(2, result.get(2).getId());\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<String> list = new ArrayList<>();\n    list.add(\"apple\");\n    list.add(\"banana\");\n    list.add(\"cherry\");\n    Map<String, String> result = BeanUtils.mapByKey(\"fruit\", list);\n    assertEquals(3, result.size());\n    assertTrue(result.containsKey(\"apple\"));\n    assertTrue(result.containsValue(\"apple\"));\n    assertTrue(result.containsKey(\"banana\"));\n    assertTrue(result.containsValue(\"banana\"));\n    assertTrue(result.containsKey(\"cherry\"));\n    assertTrue(result.containsValue(\"cherry\"));\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<String> list = new ArrayList<>();\n    list.add(\"apple\");\n    list.add(\"banana\");\n    list.add(\"orange\");\n    Map<String, String> result = BeanUtils.mapByKey(\"fruit\", list);\n    Map<String, String> expectedResult = new HashMap<>();\n    expectedResult.put(\"apple\", \"apple\");\n    expectedResult.put(\"banana\", \"banana\");\n    expectedResult.put(\"orange\", \"orange\");\n    assertEquals(expectedResult, result);\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<String> list = new ArrayList<>();\n    list.add(\"apple\");\n    list.add(\"banana\");\n    list.add(\"cherry\");\n    Map<String, String> map = BeanUtils.mapByKey(\"fruit\", list);\n    assertEquals(3, map.size());\n    assertEquals(\"apple\", map.get(\"apple\"));\n    assertEquals(\"banana\", map.get(\"banana\"));\n    assertEquals(\"cherry\", map.get(\"cherry\"));\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<String> list = new ArrayList<>();\n    list.add(\"apple\");\n    list.add(\"banana\");\n    Map<String, String> map = BeanUtils.mapByKey(\"fruit\", list);\n    assertEquals(\"apple\", map.get(\"apple\"));\n    assertEquals(\"banana\", map.get(\"banana\"));\n}",
        "@Test\npublic void mapByKeyTest() {\n    // Create sample list\n    List<String> list = new ArrayList<>();\n    list.add(\"apple\");\n    list.add(\"banana\");\n    list.add(\"orange\");\n    \n    // Create map with key as the first character and value as the entire string\n    Map<Character, String> expectedMap = new HashMap<>();\n    expectedMap.put('a', \"apple\");\n    expectedMap.put('b', \"banana\");\n    expectedMap.put('o', \"orange\");\n    \n    // Call the method and compare the result with the expected map\n    Map<Character, String> actualMap = BeanUtils.mapByKey(\"charAt\", list); // assuming \"charAt\" is the key\n    assertEquals(expectedMap, actualMap);\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<String> list = new ArrayList<>();\n    list.add(\"apple\");\n    list.add(\"banana\");\n    \n    Map<String, String> expectedMap = new HashMap<>();\n    expectedMap.put(\"apple\", \"apple\");\n    expectedMap.put(\"banana\", \"banana\");\n\n    Map<String, String> actualMap = BeanUtils.mapByKey(\"name\", list);\n    \n    assertEquals(expectedMap, actualMap);\n}",
        "@Test\npublic void mapByKeyTest() {\n    String key = \"id\";\n    List<Entity> list = new ArrayList<>();\n    Entity entity1 = new Entity(1, \"A\");\n    Entity entity2 = new Entity(2, \"B\");\n    list.add(entity1);\n    list.add(entity2);\n    Map<Integer, Entity> result = BeanUtils.mapByKey(key, list);\n    Map<Integer, Entity> expected = new HashMap<>();\n    expected.put(1, entity1);\n    expected.put(2, entity2);\n    assertEquals(expected, result);\n}"
    ]
}