Source code: 


@SuppressWarnings("unchecked")
public static <K, V> Map<K, V> mapByKey(String key, List<?> list) {
  Map<K, V> map = new HashMap<>();
  if (CollectionUtils.isEmpty(list)) {
    return map;
  }
  try {
    Class<?> clazz = list.get(0).getClass();
    Field field = deepFindField(clazz, key);
    if (field == null) {
        throw new IllegalArgumentException("Could not find the key");
    }
    field.setAccessible(true);
    for (Object o : list) {
      map.put((K) field.get(o), (V) o);
    }
  } catch (Exception e) {
    throw new BeanUtilsException(e);
  }
  return map;
}



No.1 generated result --------------------------


Map<String, Object> testMap = BeanUtils.mapByKey("id", Collections.singletonList(new TestObject("1", "test")));
assertEquals(1, testMap.size());
assertTrue(testMap.containsKey("1"));



No.2 generated result --------------------------

@Test
public void mapByKeyTest() {
    String key = "id";
    List<Object> list = new ArrayList<>();
    // Add test data to the list

    Map<String, Object> expectedMap = new HashMap<>();
    // Add expected mappings to the expectedMap

    Map<String, Object> resultMap = BeanUtils.mapByKey(key, list);
    assertEquals(expectedMap, resultMap);
}


No.3 generated result --------------------------

@Test
public void mapByKeyTest() {
    String key = "id";
    List<MyObject> list = new ArrayList<>();
    MyObject obj1 = new MyObject();
    obj1.setId(1);
    MyObject obj2 = new MyObject();
    obj2.setId(2);
    list.add(obj1);
    list.add(obj2);
    
    Map<Integer, MyObject> result = BeanUtils.mapByKey(key, list);
    assertEquals(1, result.get(1).getId());
    assertEquals(2, result.get(2).getId());
}


No.4 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<String> list = new ArrayList<>();
    list.add("apple");
    list.add("banana");
    list.add("cherry");
    Map<String, String> result = BeanUtils.mapByKey("fruit", list);
    assertEquals(3, result.size());
    assertTrue(result.containsKey("apple"));
    assertTrue(result.containsValue("apple"));
    assertTrue(result.containsKey("banana"));
    assertTrue(result.containsValue("banana"));
    assertTrue(result.containsKey("cherry"));
    assertTrue(result.containsValue("cherry"));
}


No.5 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<String> list = new ArrayList<>();
    list.add("apple");
    list.add("banana");
    list.add("orange");
    Map<String, String> result = BeanUtils.mapByKey("fruit", list);
    Map<String, String> expectedResult = new HashMap<>();
    expectedResult.put("apple", "apple");
    expectedResult.put("banana", "banana");
    expectedResult.put("orange", "orange");
    assertEquals(expectedResult, result);
}


No.6 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<String> list = new ArrayList<>();
    list.add("apple");
    list.add("banana");
    list.add("cherry");
    Map<String, String> map = BeanUtils.mapByKey("fruit", list);
    assertEquals(3, map.size());
    assertEquals("apple", map.get("apple"));
    assertEquals("banana", map.get("banana"));
    assertEquals("cherry", map.get("cherry"));
}


No.7 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<String> list = new ArrayList<>();
    list.add("apple");
    list.add("banana");
    Map<String, String> map = BeanUtils.mapByKey("fruit", list);
    assertEquals("apple", map.get("apple"));
    assertEquals("banana", map.get("banana"));
}


No.8 generated result --------------------------

@Test
public void mapByKeyTest() {
    // Create sample list
    List<String> list = new ArrayList<>();
    list.add("apple");
    list.add("banana");
    list.add("orange");
    
    // Create map with key as the first character and value as the entire string
    Map<Character, String> expectedMap = new HashMap<>();
    expectedMap.put('a', "apple");
    expectedMap.put('b', "banana");
    expectedMap.put('o', "orange");
    
    // Call the method and compare the result with the expected map
    Map<Character, String> actualMap = BeanUtils.mapByKey("charAt", list); // assuming "charAt" is the key
    assertEquals(expectedMap, actualMap);
}


No.9 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<String> list = new ArrayList<>();
    list.add("apple");
    list.add("banana");
    
    Map<String, String> expectedMap = new HashMap<>();
    expectedMap.put("apple", "apple");
    expectedMap.put("banana", "banana");

    Map<String, String> actualMap = BeanUtils.mapByKey("name", list);
    
    assertEquals(expectedMap, actualMap);
}


No.10 generated result --------------------------

@Test
public void mapByKeyTest() {
    String key = "id";
    List<Entity> list = new ArrayList<>();
    Entity entity1 = new Entity(1, "A");
    Entity entity2 = new Entity(2, "B");
    list.add(entity1);
    list.add(entity2);
    Map<Integer, Entity> result = BeanUtils.mapByKey(key, list);
    Map<Integer, Entity> expected = new HashMap<>();
    expected.put(1, entity1);
    expected.put(2, entity2);
    assertEquals(expected, result);
}


