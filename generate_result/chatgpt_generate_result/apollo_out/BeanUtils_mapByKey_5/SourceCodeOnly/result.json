{
    "project_name": "apollo",
    "file_name": "BeanUtils.java",
    "relative_path": "apollo/apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/BeanUtils.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.common.utils",
    "docstring": "/**\n   * \u7528\u4e8e\u5c06\u4e00\u4e2a\u5217\u8868\u8f6c\u6362\u4e3a\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\u7684\u67d0\u4e2a\u5c5e\u6027\u6620\u5c04\u5230\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\n   *\n   * <pre>\n   *      List<UserDTO> userList = userService.queryUsers();\n   *      Map<Integer, userDTO> userIdToUser = BeanUtil.mapByKey(\"userId\", userList);\n   * </pre>\n   *\n   * @param key \u5c5e\u6027\u540d\n   */",
    "source_code": "\n@SuppressWarnings(\"unchecked\")\npublic static <K, V> Map<K, V> mapByKey(String key, List<?> list) {\n  Map<K, V> map = new HashMap<>();\n  if (CollectionUtils.isEmpty(list)) {\n    return map;\n  }\n  try {\n    Class<?> clazz = list.get(0).getClass();\n    Field field = deepFindField(clazz, key);\n    if (field == null) {\n        throw new IllegalArgumentException(\"Could not find the key\");\n    }\n    field.setAccessible(true);\n    for (Object o : list) {\n      map.put((K) field.get(o), (V) o);\n    }\n  } catch (Exception e) {\n    throw new BeanUtilsException(e);\n  }\n  return map;\n}\n",
    "class_name": "BeanUtils",
    "method_name": "mapByKey",
    "arguments": [
        "String key",
        "List<> list"
    ],
    "generate_test": [
        "@Test\npublic void mapByKeyTest() {\n    List<String> list = new ArrayList<>();\n    list.add(\"Apple\");\n    list.add(\"Banana\");\n    list.add(\"Orange\");\n    \n    Map<String, String> expectedMap = new HashMap<>();\n    expectedMap.put(\"A\", \"Apple\");\n    expectedMap.put(\"B\", \"Banana\");\n    expectedMap.put(\"O\", \"Orange\");\n    \n    Map<String, String> actualMap = BeanUtils.mapByKey(\"substring(0, 1)\", list);\n    \n    assertEquals(expectedMap, actualMap);\n}",
        "public static class TestData{\n  private String id;\n  private String value;\n\n  // getters and setters\n}\n\n@Test\npublic void mapByKeyTest() {\n    TestData data1 = new TestData(\"1\", \"A\");\n    TestData data2 = new TestData(\"2\", \"B\");\n\n    List<TestData> dataList = Arrays.asList(data1, data2);\n\n    Map<String, TestData> map = BeanUtils.mapByKey(\"id\", dataList);\n\n    assertEquals(data1, map.get(\"1\"));\n    assertEquals(data2, map.get(\"2\"));\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<Person> personList = new ArrayList<>();\n    personList.add(new Person(\"John\", 25));\n    personList.add(new Person(\"Emily\", 28));\n    \n    Map<String, Person> map = BeanUtils.mapByKey(\"name\", personList);\n    \n    assertEquals(2, map.size());\n    assertTrue(map.containsKey(\"John\"));\n    assertTrue(map.containsKey(\"Emily\"));\n    assertEquals(personList.get(0), map.get(\"John\"));\n    assertEquals(personList.get(1), map.get(\"Emily\"));\n}",
        "@Test\npublic void mapByKeyTest() {\n  String key = \"id\";\n  List<User> userList = new ArrayList<>();\n  userList.add(new User(1, \"John\"));\n  userList.add(new User(2, \"Jane\"));\n  Map<Integer, User> result = BeanUtils.mapByKey(key, userList);\n  assertEquals(2, result.size());\n  assertEquals(\"John\", result.get(1).getName());\n  assertEquals(\"Jane\", result.get(2).getName());\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<String> list = List.of(\"apple\", \"banana\", \"cherry\");\n    Map<String, String> expectedMap = new HashMap<>();\n    expectedMap.put(\"apple\", \"apple\");\n    expectedMap.put(\"banana\", \"banana\");\n    expectedMap.put(\"cherry\", \"cherry\");\n    Map<String, String> result = BeanUtils.mapByKey(\"length\", list);\n    assertEquals(expectedMap, result);\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<String> list = new ArrayList<>();\n    list.add(\"apple\");\n    list.add(\"banana\");\n    list.add(\"orange\");\n    \n    Map<String, String> result = mapByKey(\"fruitType\", list);\n    \n    Map<String, String> expected = new HashMap<>();\n    expected.put(\"apple\", \"apple\");\n    expected.put(\"banana\", \"banana\");\n    expected.put(\"orange\", \"orange\");\n    \n    assertEquals(expected, result);\n}",
        "@Test\npublic void mapByKeyTest() {\n    // Create a list\n    List<String> list = new ArrayList<>();\n    list.add(\"apple\");\n    list.add(\"banana\");\n    \n    // Create a map\n    Map<String, String> expectedMap = new HashMap<>();\n    expectedMap.put(\"a\", \"apple\");\n    expectedMap.put(\"b\", \"banana\");\n\n    // Call the method to be tested\n    Map<String, String> resultMap = BeanUtils.mapByKey(\"length\", list);\n\n    // Assert the expected result\n    assertEquals(expectedMap, resultMap);\n}",
        "@Test\npublic void mapByKeyTest() {\n  List<?> testList = new ArrayList<>();\n  testList.add(new YourObject(\"key1\", \"value1\"));\n  testList.add(new YourObject(\"key2\", \"value2\"));\n  Map<String, YourObject> result = BeanUtils.mapByKey(\"key\", testList);\n  assertEquals(testList.get(0), result.get(\"key1\"));\n  assertEquals(testList.get(1), result.get(\"key2\"));\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<String> list = new ArrayList<>();\n    list.add(\"apple\");\n    list.add(\"banana\");\n    list.add(\"cherry\");\n    Map<String, String> result = BeanUtils.mapByKey(\"name\", list);\n    Map<String, String> expected = new HashMap<>();\n    expected.put(\"apple\", \"apple\");\n    expected.put(\"banana\", \"banana\");\n    expected.put(\"cherry\", \"cherry\");\n    assertEquals(expected, result);\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<String> list = new ArrayList<>();\n    list.add(\"apple\");\n    list.add(\"banana\");\n    list.add(\"cherry\");\n    Map<String, String> result = BeanUtils.mapByKey(\"fruit\", list);\n    assertEquals(3, result.size());\n    assertEquals(\"apple\", result.get(\"apple\"));\n}"
    ]
}