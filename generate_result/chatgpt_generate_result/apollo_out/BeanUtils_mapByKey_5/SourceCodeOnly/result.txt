Source code: 


@SuppressWarnings("unchecked")
public static <K, V> Map<K, V> mapByKey(String key, List<?> list) {
  Map<K, V> map = new HashMap<>();
  if (CollectionUtils.isEmpty(list)) {
    return map;
  }
  try {
    Class<?> clazz = list.get(0).getClass();
    Field field = deepFindField(clazz, key);
    if (field == null) {
        throw new IllegalArgumentException("Could not find the key");
    }
    field.setAccessible(true);
    for (Object o : list) {
      map.put((K) field.get(o), (V) o);
    }
  } catch (Exception e) {
    throw new BeanUtilsException(e);
  }
  return map;
}



No.1 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<String> list = new ArrayList<>();
    list.add("Apple");
    list.add("Banana");
    list.add("Orange");
    
    Map<String, String> expectedMap = new HashMap<>();
    expectedMap.put("A", "Apple");
    expectedMap.put("B", "Banana");
    expectedMap.put("O", "Orange");
    
    Map<String, String> actualMap = BeanUtils.mapByKey("substring(0, 1)", list);
    
    assertEquals(expectedMap, actualMap);
}


No.2 generated result --------------------------

public static class TestData{
  private String id;
  private String value;

  // getters and setters
}

@Test
public void mapByKeyTest() {
    TestData data1 = new TestData("1", "A");
    TestData data2 = new TestData("2", "B");

    List<TestData> dataList = Arrays.asList(data1, data2);

    Map<String, TestData> map = BeanUtils.mapByKey("id", dataList);

    assertEquals(data1, map.get("1"));
    assertEquals(data2, map.get("2"));
}


No.3 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<Person> personList = new ArrayList<>();
    personList.add(new Person("John", 25));
    personList.add(new Person("Emily", 28));
    
    Map<String, Person> map = BeanUtils.mapByKey("name", personList);
    
    assertEquals(2, map.size());
    assertTrue(map.containsKey("John"));
    assertTrue(map.containsKey("Emily"));
    assertEquals(personList.get(0), map.get("John"));
    assertEquals(personList.get(1), map.get("Emily"));
}


No.4 generated result --------------------------

@Test
public void mapByKeyTest() {
  String key = "id";
  List<User> userList = new ArrayList<>();
  userList.add(new User(1, "John"));
  userList.add(new User(2, "Jane"));
  Map<Integer, User> result = BeanUtils.mapByKey(key, userList);
  assertEquals(2, result.size());
  assertEquals("John", result.get(1).getName());
  assertEquals("Jane", result.get(2).getName());
}


No.5 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<String> list = List.of("apple", "banana", "cherry");
    Map<String, String> expectedMap = new HashMap<>();
    expectedMap.put("apple", "apple");
    expectedMap.put("banana", "banana");
    expectedMap.put("cherry", "cherry");
    Map<String, String> result = BeanUtils.mapByKey("length", list);
    assertEquals(expectedMap, result);
}


No.6 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<String> list = new ArrayList<>();
    list.add("apple");
    list.add("banana");
    list.add("orange");
    
    Map<String, String> result = mapByKey("fruitType", list);
    
    Map<String, String> expected = new HashMap<>();
    expected.put("apple", "apple");
    expected.put("banana", "banana");
    expected.put("orange", "orange");
    
    assertEquals(expected, result);
}


No.7 generated result --------------------------

@Test
public void mapByKeyTest() {
    // Create a list
    List<String> list = new ArrayList<>();
    list.add("apple");
    list.add("banana");
    
    // Create a map
    Map<String, String> expectedMap = new HashMap<>();
    expectedMap.put("a", "apple");
    expectedMap.put("b", "banana");

    // Call the method to be tested
    Map<String, String> resultMap = BeanUtils.mapByKey("length", list);

    // Assert the expected result
    assertEquals(expectedMap, resultMap);
}


No.8 generated result --------------------------

@Test
public void mapByKeyTest() {
  List<?> testList = new ArrayList<>();
  testList.add(new YourObject("key1", "value1"));
  testList.add(new YourObject("key2", "value2"));
  Map<String, YourObject> result = BeanUtils.mapByKey("key", testList);
  assertEquals(testList.get(0), result.get("key1"));
  assertEquals(testList.get(1), result.get("key2"));
}


No.9 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<String> list = new ArrayList<>();
    list.add("apple");
    list.add("banana");
    list.add("cherry");
    Map<String, String> result = BeanUtils.mapByKey("name", list);
    Map<String, String> expected = new HashMap<>();
    expected.put("apple", "apple");
    expected.put("banana", "banana");
    expected.put("cherry", "cherry");
    assertEquals(expected, result);
}


No.10 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<String> list = new ArrayList<>();
    list.add("apple");
    list.add("banana");
    list.add("cherry");
    Map<String, String> result = BeanUtils.mapByKey("fruit", list);
    assertEquals(3, result.size());
    assertEquals("apple", result.get("apple"));
}


