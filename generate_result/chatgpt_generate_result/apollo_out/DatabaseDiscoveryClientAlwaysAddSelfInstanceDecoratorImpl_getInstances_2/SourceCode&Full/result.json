{
    "project_name": "apollo",
    "file_name": "DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl.java",
    "relative_path": "apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/registry/DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.biz.registry",
    "docstring": "/**\n   * if the serviceName is same with self, always return self's instance\n   * @return never be empty list when serviceName is same with self\n   */",
    "source_code": "\n@Override\npublic List<ServiceInstance> getInstances(String serviceName) {\n  if (Objects.equals(serviceName, this.selfInstance.getServiceName())) {\n    List<ServiceInstance> serviceInstances = this.delegate.getInstances(serviceName);\n    if (containSelf(serviceInstances, this.selfInstance)) {\n      // contains self instance already\n      return serviceInstances;\n    }\n\n    // add self instance to result\n    List<ServiceInstance> result = new ArrayList<>(serviceInstances.size() + 1);\n    result.add(this.selfInstance);\n    result.addAll(serviceInstances);\n    return result;\n  } else {\n    return this.delegate.getInstances(serviceName);\n  }\n}\n",
    "class_name": "DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl",
    "method_name": "getInstances",
    "arguments": [
        "String serviceName"
    ],
    "generate_test": [
        "@Test\npublic void getInstancesTest() {\n    // Setup\n    DatabaseDiscoveryClient delegate = new DatabaseDiscoveryClient();\n    ServiceInstance selfInstance = new ServiceInstance();\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl testObject = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n\n    // Test\n    List<ServiceInstance> result = testObject.getInstances(\"testService\");\n\n    // Verify\n    // Add assertions to verify the result\n    assertNotNull(result);\n    assertEquals(1, result.size());\n    assertEquals(selfInstance, result.get(0));\n}",
        "@Test\npublic void getInstancesTest() {\n    List<ServiceInstance> serviceInstances = new ArrayList<>();\n    ServiceInstance selfInstance = new ServiceInstance(\"serviceName\", new URI(\"http://localhost:8080\"), \"cluster\");\n    DatabaseDiscoveryClient delegate = new DatabaseDiscoveryClientImpl();\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    List<ServiceInstance> result = decorator.getInstances(\"serviceName\");\n    assertTrue(result.contains(selfInstance));\n}",
        "@Test\npublic void getInstancesTest() {\n    DatabaseDiscoveryClient delegate = Mockito.mock(DatabaseDiscoveryClient.class);\n    ServiceInstance selfInstance = new ServiceInstance(\"testService\", URI.create(\"http://localhost:8080\"), \"testCluster\");\n\n    List<ServiceInstance> existingInstances = Arrays.asList(\n            new ServiceInstance(\"testService\", URI.create(\"http://localhost:8081\"), \"testCluster2\"),\n            new ServiceInstance(\"testService\", URI.create(\"http://localhost:8082\"), \"testCluster3\")\n    );\n\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl client = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n\n    Mockito.when(delegate.getInstances(eq(\"testService\"))).thenReturn(existingInstances);\n    List<ServiceInstance> instances = client.getInstances(\"testService\");\n\n    assertNotNull(instances);\n    assertTrue(instances.contains(selfInstance));\n    assertTrue(instances.containsAll(existingInstances));\n}",
        "@Override\npublic void getInstancesTest() {\n    //given\n    DatabaseDiscoveryClient delegate = new DatabaseDiscoveryClientImpl();\n    ServiceInstance selfInstance = new ServiceInstance();\n\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n\n    //when\n    List<ServiceInstance> result = decorator.getInstances(\"testService\");\n\n    //then\n    //Assert statements go here\n    assertNotNull(result);\n}\n",
        "@Test\npublic void getInstancesTest() {\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl client = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    List<ServiceInstance> result = client.getInstances(\"testService\");\n    List<ServiceInstance> expected = new ArrayList<>();\n    expected.add(selfInstance);\n    expected.addAll(mockedListOfInstances);\n    assertEquals(expected, result);\n}",
        "@Test\npublic void getInstancesTest() {\n    // Given\n    ServiceInstance selfInstance = new ServiceInstance(\"selfService\", new URI(\"http://localhost:8080\"), \"cluster\");\n    DatabaseDiscoveryClient delegate = Mockito.mock(DatabaseDiscoveryClient.class);\n    List<ServiceInstance> serviceInstances = new ArrayList<>();\n    serviceInstances.add(new ServiceInstance(\"serviceName\", new URI(\"http://localhost:8081\"), \"cluster\"));\n    Mockito.when(delegate.getInstances(\"serviceName\")).thenReturn(serviceInstances);\n\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl client = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n\n    // When\n    List<ServiceInstance> instances = client.getInstances(\"selfService\");\n\n    // Then\n    assertEquals(2, instances.size(), \"The size of instances should be 2\");\n    assertTrue(instances.contains(selfInstance), \"The instances should contain selfInstance\");\n}",
        "@Test\n    public void getInstancesTest() {\n        List<ServiceInstance> selfServiceInstances = new ArrayList<>();\n        selfServiceInstances.add(selfInstance);\n        List<ServiceInstance> otherServiceInstances = new ArrayList<>();\n        otherServiceInstances.add(new ServiceInstance(\"otherService\", URI.create(\"otherUri\"), \"otherCluster\"));\n        when(delegate.getInstances(\"selfService\")).thenReturn(otherServiceInstances);\n\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl databaseDiscoveryClient = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n        List<ServiceInstance> result = databaseDiscoveryClient.getInstances(\"selfService\");\n        \n        assertFalse(result.isEmpty());\n        assertTrue(result.contains(selfInstance));\n        assertEquals(2, result.size());\n\n        result = databaseDiscoveryClient.getInstances(\"otherService\");\n        assertEquals(otherServiceInstances, result);\n    }\n}",
        "@Test\npublic void getInstancesTest() {\n    DatabaseDiscoveryClient delegate = mock(DatabaseDiscoveryClient.class);\n    ServiceInstance selfInstance = new ServiceInstance(\"testService\", URI.create(\"http://localhost:8080\"), \"testCluster\");\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    List<ServiceInstance> serviceInstances = new ArrayList<>();\n    serviceInstances.add(selfInstance);\n    when(delegate.getInstances(\"testService\")).thenReturn(serviceInstances);\n\n    List<ServiceInstance> actualInstances = decorator.getInstances(\"testService\");\n    assertNotNull(actualInstances);\n    assertFalse(actualInstances.isEmpty());\n    assertEquals(serviceInstances.size() + 1, actualInstances.size());\n    assertTrue(actualInstances.contains(selfInstance));\n}",
        "\nAssertions.assertAll(() -> {\n  // Arrange\n  DatabaseDiscoveryClient delegate = new DatabaseDiscoveryClient();\n  ServiceInstance selfInstance = new ServiceInstance();\n  DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl instance = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n  \n  // Act\n  List<ServiceInstance> result = instance.getInstances(\"serviceName\");\n  \n  // Assert\n  assertEquals(expectedResult, result);\n});",
        "@Test\npublic void getInstancesTest() {\n    // Given\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl testInstance = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl();\n    String serviceName = \"testServiceName\";\n    \n    List<ServiceInstance> serviceInstances = new ArrayList<>();\n    ServiceInstance selfInstance = new ServiceInstance();\n    List<ServiceInstance> result = new ArrayList<>();\n    \n    // When\n    List<ServiceInstance> actualResult = testInstance.getInstances(serviceName);\n    \n    // Then\n    assertEquals(result, actualResult);\n}"
    ]
}