{
    "project_name": "apollo",
    "file_name": "DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl.java",
    "relative_path": "apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/registry/DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.biz.registry",
    "docstring": "/**\n   * if the serviceName is same with self, always return self's instance\n   * @return never be empty list when serviceName is same with self\n   */",
    "source_code": "\n@Override\npublic List<ServiceInstance> getInstances(String serviceName) {\n  if (Objects.equals(serviceName, this.selfInstance.getServiceName())) {\n    List<ServiceInstance> serviceInstances = this.delegate.getInstances(serviceName);\n    if (containSelf(serviceInstances, this.selfInstance)) {\n      // contains self instance already\n      return serviceInstances;\n    }\n\n    // add self instance to result\n    List<ServiceInstance> result = new ArrayList<>(serviceInstances.size() + 1);\n    result.add(this.selfInstance);\n    result.addAll(serviceInstances);\n    return result;\n  } else {\n    return this.delegate.getInstances(serviceName);\n  }\n}\n",
    "class_name": "DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl",
    "method_name": "getInstances",
    "arguments": [
        "String serviceName"
    ],
    "generate_test": [
        "@Test\npublic void getInstancesTest() {\n    // Test when getting instances for the self service\n    List<ServiceInstance> serviceInstances = new ArrayList<>();\n    ServiceInstance selfInstance = new ServiceInstance(new URI(\"http://localhost:8080\"));\n    DatabaseDiscoveryClient delegate = new DatabaseDiscoveryClientImpl();\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl client = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    List<ServiceInstance> result = client.getInstances(\"selfService\");\n    assertTrue(result.contains(selfInstance));\n}",
        "@Test\npublic void getInstancesTest() {\n    // Given\n    DatabaseDiscoveryClient delegate = new DatabaseDiscoveryClient();\n    ServiceInstance selfInstance = new ServiceInstance(new URI(\"http://localhost:8080\"), \"TestService\");\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl client = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n\n    // When\n    List<ServiceInstance> instances = client.getInstances(\"TestService\");\n\n    // Then\n    assertNotNull(instances);\n    assertEquals(1, instances.size());\n    assertEquals(selfInstance, instances.get(0));\n}",
        "@Test\npublic void getInstancesTest() {\n    // Create mock DatabaseDiscoveryClient delegate and selfInstance\n    DatabaseDiscoveryClient delegate = mock(DatabaseDiscoveryClient.class);\n    ServiceInstance selfInstance = new ServiceInstance(new URI(\"http://localhost:8080\"));\n    \n    // Create an instance of DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    \n    // Verify the behavior of getInstances method\n    when(delegate.getInstances(anyString())).thenReturn(Collections.singletonList(new ServiceInstance(new URI(\"http://otherhost:8080\"))));\n    \n    List<ServiceInstance> instances = decorator.getInstances(\"someServiceName\");\n    assertEquals(2, instances.size());\n}\n",
        "@Test\npublic void getInstancesTest() {\n    // Create a DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl object\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl client = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    \n    // Create a list of ServiceInstance objects\n    List<ServiceInstance> serviceInstances = new ArrayList<>();\n    \n    // Add ServiceInstance objects to the list\n    \n    // Call the getInstances method and assert the expected result\n    List<ServiceInstance> result = client.getInstances(\"serviceName\");\n    assertNotNull(result);\n    // Add assertions for the expected behavior of the getInstances method\n}",
        "@Test\npublic void getInstancesTest() {\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl client = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    List<ServiceInstance> result = client.getInstances(\"serviceName\");\n    assertNotNull(result);\n    // Add assertions for the expected result based on the logic in the Java Source Code\n}",
        "@Service\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n\n  @Mock\n  private DatabaseDiscoveryClient delegate;\n\n  private DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl databaseDiscoveryClient;\n\n  private ServiceInstance selfInstance;\n\n  @Before\n  public void setUp() {\n    databaseDiscoveryClient = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n  }\n\n  @Test\n  public void getInstancesTest() {\n      // Arrange\n      when(delegate.getInstances(anyString())).thenReturn(Collections.singletonList(new ServiceInstance(\"serviceName\", new URI(\"http://example.com\"))));\n      \n      // Act\n      List<ServiceInstance> result = databaseDiscoveryClient.getInstances(\"serviceName\");\n      \n      // Assert\n      assertNotNull(result);\n      assertEquals(2, result.size());\n      assertEquals(selfInstance, result.get(0));\n  }\n}",
        "@Test\npublic void getInstancesTest() {\n  DatabaseDiscoveryClient delegate = mock(DatabaseDiscoveryClient.class);\n  ServiceInstance selfInstance = new ServiceInstance(new URI(\"http://localhost:8080\"));\n  DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl client = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n  ServiceInstance instance = new ServiceInstance(new URI(\"http://localhost:8080\"));\n  List<ServiceInstance> serviceInstances = new ArrayList<>();\n  serviceInstances.add(instance);\n  when(delegate.getInstances(\"myService\")).thenReturn(serviceInstances);\n\n  List<ServiceInstance> result = client.getInstances(\"myService\");\n  assertTrue(result.size() == 2);\n}\n",
        "@Test\npublic void getInstancesTest() {\n    //create mock objects for delegate and selfInstance\n    DatabaseDiscoveryClient delegate = createDelegateMock();\n    ServiceInstance selfInstance = createSelfInstanceMock();\n\n    //create instance of DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl client = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n\n    //initialize serviceInstances and serviceName\n    List<ServiceInstance> serviceInstances = new ArrayList<>();\n    String serviceName = \"exampleService\";\n\n    //call the method\n    List<ServiceInstance> result = client.getInstances(serviceName);\n\n    //assertions\n    assertEquals(result.size(), serviceInstances.size() + 1); //checking size increase\n    assertTrue(result.contains(selfInstance)); //checking self instance is added\n    assertTrue(result.containsAll(serviceInstances)); //checking all other service instances are present\n}\n",
        "@Test\npublic void getInstancesTest() {\n    // Given\n    String serviceName = \"exampleService\";\n    DatabaseDiscoveryClient delegate = new DatabaseDiscoveryClientImpl();\n    ServiceInstance selfInstance = new ServiceInstance(new URI(\"http://localhost:8080\"), \"exampleService\");\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl client = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    \n    // When\n    List<ServiceInstance> instances = client.getInstances(serviceName);\n    \n    // Then\n    assertEquals(2, instances.size()); // Including self instance\n}",
        "@Test\npublic void getInstancesTest() {\n    // Given\n    DatabaseDiscoveryClient delegate = new DatabaseDiscoveryClient();\n    ServiceInstance selfInstance = new ServiceInstance(new URI(\"http://localhost:8080\"));\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl client = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    \n    // When\n    List<ServiceInstance> instances = client.getInstances(\"exampleService\");\n    \n    // Then\n    assertNotNull(instances);\n    assertFalse(instances.isEmpty());\n}"
    ]
}