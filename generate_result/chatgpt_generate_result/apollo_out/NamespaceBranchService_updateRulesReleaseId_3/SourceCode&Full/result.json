{
    "project_name": "apollo",
    "file_name": "NamespaceBranchService.java",
    "relative_path": "apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/NamespaceBranchService.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.biz.service",
    "docstring": null,
    "source_code": "@Transactional\npublic GrayReleaseRule updateRulesReleaseId(String appId, String clusterName,\n                                 String namespaceName, String branchName,\n                                 long latestReleaseId, String operator) {\n  GrayReleaseRule oldRules = grayReleaseRuleRepository.\n      findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName);\n\n  if (oldRules == null) {\n    return null;\n  }\n\n  GrayReleaseRule newRules = new GrayReleaseRule();\n  newRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);\n  newRules.setReleaseId(latestReleaseId);\n  newRules.setRules(oldRules.getRules());\n  newRules.setAppId(oldRules.getAppId());\n  newRules.setClusterName(oldRules.getClusterName());\n  newRules.setNamespaceName(oldRules.getNamespaceName());\n  newRules.setBranchName(oldRules.getBranchName());\n  newRules.setDataChangeCreatedBy(operator);\n  newRules.setDataChangeLastModifiedBy(operator);\n\n  grayReleaseRuleRepository.save(newRules);\n\n  grayReleaseRuleRepository.delete(oldRules);\n\n  return newRules;\n}\n",
    "class_name": "NamespaceBranchService",
    "method_name": "updateRulesReleaseId",
    "arguments": [
        "String appId",
        "String clusterName",
        "String namespaceName",
        "String branchName",
        "long latestReleaseId",
        "String operator"
    ],
    "generate_test": [
        "@Test\npublic void updateRulesReleaseIdTest() {\n    // Given\n    String appId = \"testAppId\";\n    String clusterName = \"testCluster\";\n    String namespaceName = \"testNamespace\";\n    String branchName = \"testBranch\";\n    long latestReleaseId = 12345L;\n    String operator = \"testOperator\";\n    \n    // When\n    GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n    \n    // Then\n    assertNotNull(updatedRules);\n    assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus());\n    assertEquals(latestReleaseId, updatedRules.getReleaseId());\n    assertEquals(operator, updatedRules.getDataChangeCreatedBy());\n    assertEquals(operator, updatedRules.getDataChangeLastModifiedBy());\n}",
        "public class NamespaceBranchServiceTest {\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // Create an instance of NamespaceBranchService\n        NamespaceBranchService namespaceBranchService = new NamespaceBranchService(auditService, grayReleaseRuleRepository, clusterService, releaseService, namespaceService, releaseHistoryService);\n\n        // Define the required parameters\n        String appId = \"testApp\";\n        String clusterName = \"testCluster\";\n        String namespaceName = \"testNamespace\";\n        String branchName = \"testBranch\";\n        long latestReleaseId = 1234;\n        String operator = \"testOperator\";\n\n        // Call the updateRulesReleaseId method\n        GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        // Perform assertions on the result\n        assertNotNull(result);\n        assertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());\n        assertEquals(latestReleaseId, result.getReleaseId());\n        assertEquals(operator, result.getDataChangeCreatedBy());\n        assertEquals(operator, result.getDataChangeLastModifiedBy());\n    }\n}",
        "@Test\npublic void updateRulesReleaseIdTest() {\n  // Context setup\n  String appId = \"testAppId\";\n  String clusterName = \"testCluster\";\n  String namespaceName = \"testNamespace\";\n  String branchName = \"testBranch\";\n  long latestReleaseId = 12345;\n  String operator = \"testOperator\";\n  \n  //Unit test\n  GrayReleaseRule grayReleaseRule = new GrayReleaseRule();\n  grayReleaseRule.setAppId(appId);\n  grayReleaseRule.setClusterName(clusterName);\n  grayReleaseRule.setNamespaceName(namespaceName);\n  grayReleaseRule.setBranchName(branchName);\n  \n  GrayReleaseRule savedRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n  \n  assertNotEquals(null, savedRules);\n}",
        "@Test\npublic void updateRulesReleaseIdTest() {\n  // Initialize Data\n  String appId = \"testApp\";\n  String clusterName = \"testCluster\";\n  String namespaceName = \"testNamespace\";\n  String branchName = \"testBranch\";\n  long latestReleaseId = 12345L;\n  String operator = \"testOperator\";\n  \n  // Create instance of NamespaceBranchService\n  NamespaceBranchService branchService = new NamespaceBranchService(new AuditService(), new GrayReleaseRuleRepository(),\n      new ClusterService(), new ReleaseService(), new NamespaceService(), new ReleaseHistoryService());\n  \n  // Call the method being tested\n  GrayReleaseRule result = branchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n  \n  // Assert the result\n  assertNotNull(result);\n  assertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());\n  assertEquals(latestReleaseId, result.getReleaseId());\n  assertEquals(clusterName, result.getClusterName());\n  assertEquals(namespaceName, result.getNamespaceName());\n  assertEquals(branchName, result.getBranchName());\n  assertEquals(operator, result.getDataChangeCreatedBy());\n  assertEquals(operator, result.getDataChangeLastModifiedBy());\n}",
        "GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\nassertNotNull(result);\nassertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());",
        "@Test\npublic void updateRulesReleaseIdTest() {\n    // Create a test case to update rules and release id\n    String appId = \"testApp\";\n    String clusterName = \"testCluster\";\n    String namespaceName = \"testNamespace\";\n    String branchName = \"testBranch\";\n    long latestReleaseId = 12345;\n    String operator = \"testOperator\";\n\n    GrayReleaseRuleRepository grayReleaseRuleRepository = Mockito.mock(GrayReleaseRuleRepository.class);\n    \n    // Mock the old rules\n    GrayReleaseRule oldRules = new GrayReleaseRule();\n    oldRules.setAppId(\"oldAppId\");\n    oldRules.setClusterName(\"oldCluster\");\n    oldRules.setNamespaceName(\"oldNamespace\");\n    oldRules.setBranchName(\"oldBranch\");\n    oldRules.setRules(\"oldRules\");\n    Mockito.when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);\n\n    // Mock the save and delete operations\n    Mockito.when(grayReleaseRuleRepository.save(ArgumentMatchers.any(GrayReleaseRule.class))).thenReturn(new GrayReleaseRule());\n    \n    // Call the method\n    GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n    // Verify the newRules output\n    assertNotNull(updatedRules);\n    assertEquals(latestReleaseId, updatedRules.getReleaseId());\n    assertEquals(\"testApp\", updatedRules.getAppId());\n    assertEquals(\"testCluster\", updatedRules.getClusterName());\n    assertEquals(\"testNamespace\", updatedRules.getNamespaceName());\n    assertEquals(\"testBranch\", updatedRules.getBranchName());\n    assertEquals(\"testOperator\", updatedRules.getDataChangeCreatedBy());\n    assertEquals(\"testOperator\", updatedRules.getDataChangeLastModifiedBy());\n    \n    // Verify the save and delete method calls\n    Mockito.verify(grayReleaseRuleRepository, Mockito.times(1)).save(ArgumentMatchers.any(GrayReleaseRule.class));\n    Mockito.verify(grayReleaseRuleRepository, Mockito.times(1)).delete(oldRules);\n}\n}",
        "@Test\npublic void updateRulesReleaseIdTest() {\n    // Given\n    NamespaceBranchService namespaceBranchService = new NamespaceBranchService(auditService, grayReleaseRuleRepository, clusterService, releaseService, namespaceService, releaseHistoryService);\n  \n    String appId = \"testAppId\";\n    String clusterName = \"testCluster\";\n    String namespaceName = \"testNamespace\";\n    String branchName = \"testBranch\";\n    long latestReleaseId = 12345L;\n    String operator = \"testOperator\";\n  \n    // When\n    GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n  \n    // Then\n    assertNotNull(result);\n  \tassertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());\n  \tassertEquals(latestReleaseId, result.getReleaseId());\n  \tassertEquals(operator, result.getDataChangeCreatedBy());\n  \tassertEquals(operator, result.getDataChangeLastModifiedBy());\n}",
        "@Test\npublic void updateRulesReleaseIdTest() {\n    // Initialize necessary variables\n    String appId = \"testAppId\";\n    String clusterName = \"testCluster\";\n    String namespaceName = \"testNamespace\";\n    String branchName = \"testBranch\";\n    long latestReleaseId = 12345L;\n    String operator = \"testOperator\";\n\n    // Call the method to be tested\n    GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n    // Assert the result\n    assertNotNull(result);\n    assertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());\n    assertEquals(latestReleaseId, result.getReleaseId());\n    assertEquals(appId, result.getAppId());\n    assertEquals(clusterName, result.getClusterName());\n    assertEquals(namespaceName, result.getNamespaceName());\n    assertEquals(branchName, result.getBranchName());\n    assertEquals(operator, result.getDataChangeCreatedBy());\n    assertEquals(operator, result.getDataChangeLastModifiedBy());\n}",
        "\nGrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(\"appId\", \"clusterName\", \"namespaceName\", \"branchName\", 12345, \"operator\");\nassertNotNull(result);\n",
        "@Test\npublic void updateRulesReleaseIdTest() {\n    // Given\n    String appId = \"testApp\";\n    String clusterName = \"testCluster\";\n    String namespaceName = \"testNamespace\";\n    String branchName = \"testBranch\";\n    long releaseId = 12345;\n    String operator = \"testOperator\";\n    GrayReleaseRule oldRules = new GrayReleaseRule();\n    \n    // When\n    GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, releaseId, operator);\n    \n    // Then\n    assertNotNull(result);\n    assertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());\n    assertEquals(releaseId, result.getReleaseId());\n    assertEquals(oldRules.getRules(), result.getRules());\n    assertEquals(appId, result.getAppId());\n    assertEquals(clusterName, result.getClusterName());\n    assertEquals(namespaceName, result.getNamespaceName());\n    assertEquals(branchName, result.getBranchName());\n    assertEquals(operator, result.getDataChangeCreatedBy());\n    assertEquals(operator, result.getDataChangeLastModifiedBy());\n}"
    ]
}