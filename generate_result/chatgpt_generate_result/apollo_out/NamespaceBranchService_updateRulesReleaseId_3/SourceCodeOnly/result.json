{
    "project_name": "apollo",
    "file_name": "NamespaceBranchService.java",
    "relative_path": "apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/NamespaceBranchService.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.biz.service",
    "docstring": null,
    "source_code": "@Transactional\npublic GrayReleaseRule updateRulesReleaseId(String appId, String clusterName,\n                                 String namespaceName, String branchName,\n                                 long latestReleaseId, String operator) {\n  GrayReleaseRule oldRules = grayReleaseRuleRepository.\n      findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName);\n\n  if (oldRules == null) {\n    return null;\n  }\n\n  GrayReleaseRule newRules = new GrayReleaseRule();\n  newRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);\n  newRules.setReleaseId(latestReleaseId);\n  newRules.setRules(oldRules.getRules());\n  newRules.setAppId(oldRules.getAppId());\n  newRules.setClusterName(oldRules.getClusterName());\n  newRules.setNamespaceName(oldRules.getNamespaceName());\n  newRules.setBranchName(oldRules.getBranchName());\n  newRules.setDataChangeCreatedBy(operator);\n  newRules.setDataChangeLastModifiedBy(operator);\n\n  grayReleaseRuleRepository.save(newRules);\n\n  grayReleaseRuleRepository.delete(oldRules);\n\n  return newRules;\n}\n",
    "class_name": "NamespaceBranchService",
    "method_name": "updateRulesReleaseId",
    "arguments": [
        "String appId",
        "String clusterName",
        "String namespaceName",
        "String branchName",
        "long latestReleaseId",
        "String operator"
    ],
    "generate_test": [
        "\nGrayReleaseRule expected = new GrayReleaseRule();\nexpected.setBranchStatus(NamespaceBranchStatus.ACTIVE);\nexpected.setReleaseId(1234L);  // Replace 1234 with the expected release ID\nexpected.setRules(\"test rule\");\nexpected.setAppId(\"testAppId\");\nexpected.setClusterName(\"testClusterName\");\nexpected.setNamespaceName(\"testNamespace\");\nexpected.setBranchName(\"testBranch\");\nexpected.setDataChangeCreatedBy(\"testOperator\");\nexpected.setDataChangeLastModifiedBy(\"testOperator\");\n\nGrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(\"testAppId\", \"testClusterName\",\n                                                                  \"testNamespace\", \"testBranch\", 1234, \"testOperator\");\nassertEquals(expected, result);\n",
        "@Test\npublic void updateRulesReleaseIdTest() {\n    // Given\n    String appId = \"testApp\";\n    String clusterName = \"testCluster\";\n    String namespaceName = \"testNamespace\";\n    String branchName = \"testBranch\";\n    long latestReleaseId = 12345;\n    String operator = \"testOperator\";\n    \n    // When\n    GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName,\n                                                                       branchName, latestReleaseId, operator);\n    \n    // Then\n    assertNotNull(result);\n    assertEquals(latestReleaseId, result.getReleaseId());\n    // Add more assertions as needed\n}",
        "@Test\npublic void updateRulesReleaseIdTest() {\n   // Create test data\n   String appId = \"testApp\";\n   String clusterName = \"testCluster\";\n   String namespaceName = \"testNamespace\";\n   String branchName = \"testBranch\";\n   long latestReleaseId = 12345;\n   String operator = \"testOperator\";\n\n   // Call the method being tested\n   GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n   // Verify the result\n   assertNotNull(result);\n   assertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());\n   assertEquals(latestReleaseId, result.getReleaseId());\n   assertEquals(oldRules.getRules(), result.getRules());\n   assertEquals(appId, result.getAppId());\n   assertEquals(clusterName, result.getClusterName());\n   assertEquals(namespaceName, result.getNamespaceName());\n   assertEquals(branchName, result.getBranchName());\n   assertEquals(operator, result.getDataChangeCreatedBy());\n   assertEquals(operator, result.getDataChangeLastModifiedBy());\n\n   // Verify that oldRules has been deleted\n   GrayReleaseRule oldRules = grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName);\n   assertNull(oldRules);\n}",
        "@Test\npublic void updateRulesReleaseIdTest() {\n  // Given\n  String appId = \"testAppId\";\n  String clusterName = \"testCluster\";\n  String namespaceName = \"testNamespace\";\n  String branchName = \"testBranch\";\n  long latestReleaseId = 12345;\n  String operator = \"testOperator\";\n  \n  // When\n  GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n  \n  // Then\n  assertNotNull(result);\n  // Add more assertions as needed\n}",
        "@Test\npublic void updateRulesReleaseIdTest() {\n  // Given\n  String appId = \"testApp\";\n  String clusterName = \"testCluster\";\n  String namespaceName = \"testNamespace\";\n  String branchName = \"testBranch\";\n  long latestReleaseId = 12345;\n  String operator = \"testOperator\";\n\n  // When\n  GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n  // Then\n  assertNotNull(result);\n  assertEquals(branchName, result.getBranchName());\n  assertEquals(latestReleaseId, result.getReleaseId());\n  assertEquals(operator, result.getDataChangeLastModifiedBy());\n}",
        "@Test\npublic void updateRulesReleaseIdTest() {\n    // Input parameters\n    String appId = \"testApp\";\n    String clusterName = \"testCluster\";\n    String namespaceName = \"testNamespace\";\n    String branchName = \"testBranch\";\n    long latestReleaseId = 123;\n    String operator = \"testOperator\";\n    \n    // Call the method\n    GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n    \n    // Assert statements\n    assertNotNull(result);\n    assertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());\n    assertEquals(latestReleaseId, result.getReleaseId());\n    // Add more assertions as needed\n}",
        "@Test\npublic void updateRulesReleaseIdTest() {\n    String appId = \"testAppId\";\n    String clusterName = \"testCluster\";\n    String namespaceName = \"testNamespace\";\n    String branchName = \"testBranch\";\n    long latestReleaseId = 12345;\n    String operator = \"testOperator\";\n\n    GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n    assertNotNull(result);\n    // Add assertions for the expected behavior of the method\n}",
        "@Test\npublic void updateRulesReleaseIdTest() {\n  // Given\n  String appId = \"testApp\";\n  String clusterName = \"testCluster\";\n  String namespaceName = \"testNamespace\";\n  String branchName = \"testBranch\";\n  long latestReleaseId = 12345;\n  String operator = \"testOperator\";\n\n  // When\n  GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n  // Then\n  assertNotNull(result);\n  assertEquals(branchName, result.getBranchName());\n  assertEquals(latestReleaseId, result.getReleaseId());\n}",
        "@Test\npublic void updateRulesReleaseIdTest() {\n    // Input values\n    String appId = \"testApp\";\n    String clusterName = \"testCluster\";\n    String namespaceName = \"testNamespace\";\n    String branchName = \"testBranch\";\n    long latestReleaseId = 12345;\n    String operator = \"testOperator\";\n\n    // Call the method\n    GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n    // Assert statements\n    assertNotNull(result);\n    assertEquals(namespaceName, result.getNamespaceName());\n    // Add more assertions as needed\n}",
        "@Test\npublic void updateRulesReleaseIdTest() {\n    // Given\n    String appId = \"testApp\";\n    String clusterName = \"testCluster\";\n    String namespaceName = \"testNamespace\";\n    String branchName = \"testBranch\";\n    long latestReleaseId = 12345L;\n    String operator = \"testOperator\";\n    \n    // When\n    GrayReleaseRule grayReleaseRule = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n    \n    // Then\n    assertNotNull(grayReleaseRule);\n    // Add more assertions as needed\n}"
    ]
}