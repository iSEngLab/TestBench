Source code: 


public CompareToBuilder append(final byte[] lhs, final byte[] rhs) {
    if (comparison != 0) {
        return this;
    }
    if (lhs == rhs) {
        return this;
    }
    if (lhs == null) {
        comparison = -1;
        return this;
    }
    if (rhs == null) {
        comparison = 1;
        return this;
    }
    if (lhs.length != rhs.length) {
        comparison = lhs.length < rhs.length ? -1 : 1;
        return this;
    }
    for (int i = 0; i < lhs.length && comparison == 0; i++) {
        append(lhs[i], rhs[i]);
    }
    return this;
}



No.1 generated result --------------------------

package org.apache.commons.lang3.builder;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CompareToBuilderTest {
    @Test
    public void appendTest() {
        CompareToBuilder builder = new CompareToBuilder();
        int result = builder.append(new byte[]{1, 2, 3}, new byte[]{1, 2, 3}).toComparison();
        assertEquals(0, result);
    }
}


No.2 generated result --------------------------

@Test
public void appendTest() {
    CompareToBuilder builder = new CompareToBuilder();
    byte[] arr1 = {1, 2, 3};
    byte[] arr2 = {1, 2, 4};
    CompareToBuilder result = builder.append(arr1, arr2);
    assertEquals(0, result.toComparison());
}


No.3 generated result --------------------------

CompareToBuilder builder;

@BeforeEach
public void setup() {
    builder = new CompareToBuilder();
}

@Test
public void appendTest() {
    builder.append(new byte[] { 1, 2, 3 }, new byte[] { 4, 5, 6 });
    int comparison = builder.toComparison();
    assertEquals(-1, comparison);
}


No.4 generated result --------------------------

CompareToBuilder compareToBuilder = new CompareToBuilder();
compareToBuilder.append(new byte[] { 1, 2, 3 }, new byte[] { 1, 2, 3 });
assertEquals(0, compareToBuilder.toComparison());


No.5 generated result --------------------------

@Test
public void appendTest() {
    CompareToBuilder builder = new CompareToBuilder();
    builder.append((byte) 1, (byte) 2);
    int result = builder.toComparison();
    assertEquals(-1, result);
}


No.6 generated result --------------------------

CompareToBuilder cb = new CompareToBuilder();
cb.append(new byte[]{1, 2, 3}, new byte[]{1, 2, 3});
assertEquals(0, cb.toComparison());


No.7 generated result --------------------------

@Test
public void appendTest() {
    CompareToBuilder builder = new CompareToBuilder();
    assertEquals(0, builder.append((byte) 1, (byte) 1).toComparison());
}


No.8 generated result --------------------------

@Test
public void appendTest() {
    CompareToBuilder builder = new CompareToBuilder();
    builder.append(new byte[]{1, 2, 3}, new byte[]{1, 2, 3});
    int result = builder.toComparison();
    assertEquals(0, result);
}


No.9 generated result --------------------------

CompareToBuilder builder = new CompareToBuilder();
int result = builder.append(new byte[]{1, 2, 3, 4}, new byte[]{1, 2, 3, 4}).toComparison();
assertTrue(result == 0, "Comparison result should be 0");


No.10 generated result --------------------------

@Test
public void appendTest() {
    CompareToBuilder builder = new CompareToBuilder();
    byte[] lhs = new byte[] {1, 2, 3};
    byte[] rhs = new byte[] {1, 2, 3};
    int result = builder.append(lhs, rhs).toComparison();
    assertEquals(0, result);
}


