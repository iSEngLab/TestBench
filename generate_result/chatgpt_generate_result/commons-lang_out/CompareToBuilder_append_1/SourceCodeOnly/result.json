{
    "project_name": "commons-lang",
    "file_name": "CompareToBuilder.java",
    "relative_path": "commons-lang/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java",
    "execute_path": "commons-lang",
    "package": "org.apache.commons.lang3.builder",
    "docstring": "/**\n     * Appends to the {@code builder} the deep comparison of\n     * two {@code byte} arrays.\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using {@code ==}</li>\n     *  <li>Check if for {@code null}, {@code null} is less than non-{@code null}</li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(byte, byte)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand side array\n     * @param rhs  right-hand side array\n     * @return this\n     */",
    "source_code": "\npublic CompareToBuilder append(final byte[] lhs, final byte[] rhs) {\n    if (comparison != 0) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null) {\n        comparison = -1;\n        return this;\n    }\n    if (rhs == null) {\n        comparison = 1;\n        return this;\n    }\n    if (lhs.length != rhs.length) {\n        comparison = lhs.length < rhs.length ? -1 : 1;\n        return this;\n    }\n    for (int i = 0; i < lhs.length && comparison == 0; i++) {\n        append(lhs[i], rhs[i]);\n    }\n    return this;\n}\n",
    "class_name": "CompareToBuilder",
    "method_name": "append",
    "arguments": [
        "byte[] lhs",
        "byte[] rhs"
    ],
    "generate_test": [
        "\npublic void appendTest() {\n    CompareToBuilder builder = new CompareToBuilder();\n    byte[] lhs = new byte[]{1, 2, 3};\n    byte[] rhs = new byte[]{1, 2, 3};\n    assertEquals(builder.append(lhs, rhs), builder);\n}",
        "@Test\npublic void appendTest() {\n    CompareToBuilder builder = new CompareToBuilder();\n    byte[] lhs = new byte[]{1, 2, 3};\n    byte[] rhs = new byte[]{1, 2, 3};\n    builder.append(lhs, rhs);\n    assertEquals(0, builder.toComparison());\n}",
        "@Test\npublic void appendTest() {\n    CompareToBuilder builder = new CompareToBuilder();\n    byte[] lhs = {1, 2, 3};\n    byte[] rhs = {1, 2, 4};\n    CompareToBuilder result = builder.append(lhs, rhs);\n    assertEquals(-1, result.toComparison());\n}",
        "@Test\npublic void appendTest() {\n    CompareToBuilder builder = new CompareToBuilder();\n    byte[] lhs = {1, 2, 3};\n    byte[] rhs = {1, 2, 3};\n    \n    CompareToBuilder result = builder.append(lhs, rhs);\n    // Add assertion here for the expected result\n    // For example:\n    // assertEquals(builder, result);\n}",
        "@Test\npublic void appendTest() {\n    CompareToBuilder compareToBuilder = new CompareToBuilder();\n    byte[] lhs = {1, 2, 3};\n    byte[] rhs = {1, 2, 4};\n    CompareToBuilder result = compareToBuilder.append(lhs, rhs);\n    assertEquals(-1, result.toComparison());\n}",
        "@Test\npublic void appendTest() {\n    CompareToBuilder compareToBuilder = new CompareToBuilder();\n    byte[] lhs = {1, 2, 3};\n    byte[] rhs = {1, 2, 3};\n    int result = compareToBuilder.append(lhs, rhs).toComparison();\n    assertEquals(0, result);\n}",
        "public void appendTest() {\n   CompareToBuilder compareToBuilder = new CompareToBuilder();\n   byte[] lhs = {1, 2, 3};\n   byte[] rhs = {1, 2, 3};\n   CompareToBuilder result = compareToBuilder.append(lhs,rhs);\n   assertEquals(0, result.toComparison());\n}",
        "@Test\npublic void appendTest() {\n    CompareToBuilder compareToBuilder = new CompareToBuilder();\n    byte[] lhs = {1, 2, 3};\n    byte[] rhs = {1, 2, 3};\n    CompareToBuilder result = compareToBuilder.append(lhs, rhs);\n    assertEquals(compareToBuilder, result);\n}",
        "@Test\npublic void appendTest() {\n    CompareToBuilder compareToBuilder = new CompareToBuilder();\n    byte[] lhs = {1, 2, 3};\n    byte[] rhs = {1, 2, 3};\n    CompareToBuilder result = compareToBuilder.append(lhs, rhs);\n    assertNotNull(result);\n}",
        "@Test\npublic void appendTest() {\n    CompareToBuilder builder = new CompareToBuilder();\n    byte[] lhs = {1, 2, 3};\n    byte[] rhs = {1, 2, 4};\n    CompareToBuilder result = builder.append(lhs, rhs);\n    int expected = -1;\n    assertEquals(expected, result.toComparison());\n}"
    ]
}