Source code: 


public CompareToBuilder append(final double[] lhs, final double[] rhs) {
    if (comparison != 0) {
        return this;
    }
    if (lhs == rhs) {
        return this;
    }
    if (lhs == null) {
        comparison = -1;
        return this;
    }
    if (rhs == null) {
        comparison = 1;
        return this;
    }
    if (lhs.length != rhs.length) {
        comparison = lhs.length < rhs.length ? -1 : 1;
        return this;
    }
    for (int i = 0; i < lhs.length && comparison == 0; i++) {
        append(lhs[i], rhs[i]);
    }
    return this;
}



No.1 generated result --------------------------

@Test
public void appendTest() {
    CompareToBuilder builder = new CompareToBuilder();
    double[] lhs = {1.0, 2.0, 3.0};
    double[] rhs = {1.0, 2.0, 3.0};
    CompareToBuilder result = builder.append(lhs, rhs);
    assertNotNull(result);
}


No.2 generated result --------------------------

public void appendTest() {
    CompareToBuilder builder = new CompareToBuilder();
    double[] lhs = {1.0, 2.0, 3.0};
    double[] rhs = {1.0, 2.0, 3.0};
    builder.append(lhs, rhs);
    int comparisonResult = builder.toComparison();
    assertEquals(0, comparisonResult);
}


No.3 generated result --------------------------

@Test
public void appendTest() {
    CompareToBuilder builder = new CompareToBuilder();
    double[] arr1 = {1.0, 2.5, 3.7};
    double[] arr2 = {1.0, 2.5, 3.7};
    CompareToBuilder result = builder.append(arr1, arr2);
    assertEquals(builder, result);
}


No.4 generated result --------------------------

@Test
public void appendTest() {
    CompareToBuilder builder = new CompareToBuilder();
    double[] lhs = {1.0, 2.0, 3.0};
    double[] rhs = {1.0, 2.0, 3.0};
    assertEquals(builder.append(lhs, rhs), builder);
    assertEquals(builder.toComparison(), 0);
}


No.5 generated result --------------------------

@Test
public void appendTest() {
    CompareToBuilder builder = new CompareToBuilder();
    double[] lhs = {1.2, 2.3, 3.4};
    double[] rhs = {1.2, 2.3, 3.4};
    CompareToBuilder result = builder.append(lhs, rhs);
    assertEquals(0, result.toComparison());
}


No.6 generated result --------------------------

@Test
public void appendTest() {
    CompareToBuilder builder = new CompareToBuilder();
    double[] lhs = {1.0, 2.0, 3.0};
    double[] rhs = {1.0, 2.0, 3.0};
    CompareToBuilder result = builder.append(lhs, rhs);
    assertEquals(builder, result);
}


No.7 generated result --------------------------

@Test
public void appendTest() {
    CompareToBuilder builder = new CompareToBuilder();
    double[] lhs = {1.0, 2.0, 3.0};
    double[] rhs = {1.0, 2.0, 3.0};
    CompareToBuilder result = builder.append(lhs, rhs);
    assertEquals(builder, result);
}


No.8 generated result --------------------------

public void appendTest() {
    double[] lhs1 = new double[] { 1.0, 2.0, 3.0 };
    double[] rhs1 = new double[] { 1.0, 2.0, 3.0 };
    int result1 = new CompareToBuilder().append(lhs1, rhs1).toComparison();
    assertEquals(0, result1);

    double[] lhs2 = new double[] { 1.5, 2.5, 3.5 };
    double[] rhs2 = new double[] { 1.5, 2.5, 4.0 };
    int result2 = new CompareToBuilder().append(lhs2, rhs2).toComparison();
    assertEquals(-1, result2);
}


No.9 generated result --------------------------

@Test
public void appendTest() {
    double[] lhs = {1.0, 2.0, 3.0};
    double[] rhs = {1.0, 2.0, 3.0};
    CompareToBuilder builder = new CompareToBuilder().append(lhs, rhs);
    assertEquals(0, builder.toComparison());
}


No.10 generated result --------------------------

@Test
    public void appendTest() {
        CompareToBuilder builder = new CompareToBuilder();
        builder.append(new double[]{1.5, 2.5}, new double[]{1.5, 2.5});
        assertEquals(0, builder.toComparison());
    }


