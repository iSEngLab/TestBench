Source code: 


public CompareToBuilder append(final double[] lhs, final double[] rhs) {
    if (comparison != 0) {
        return this;
    }
    if (lhs == rhs) {
        return this;
    }
    if (lhs == null) {
        comparison = -1;
        return this;
    }
    if (rhs == null) {
        comparison = 1;
        return this;
    }
    if (lhs.length != rhs.length) {
        comparison = lhs.length < rhs.length ? -1 : 1;
        return this;
    }
    for (int i = 0; i < lhs.length && comparison == 0; i++) {
        append(lhs[i], rhs[i]);
    }
    return this;
}



No.1 generated result --------------------------

@Test
public void appendTest() {
    CompareToBuilder builder = new CompareToBuilder();
    double[] arr1 = {1.2, 3.4, 5.6};
    double[] arr2 = {1.2, 3.4, 5.6};
    builder.append(arr1, arr2);
    assertEquals(0, builder.toComparison());
}


No.2 generated result --------------------------

@Test
public void appendTest() {
    CompareToBuilder builder = new CompareToBuilder();
    double[] lhs = {1.0, 2.0, 3.0};
    double[] rhs = {1.0, 2.0, 4.0};
    CompareToBuilder result = builder.append(lhs, rhs);
    assertEquals(-1, result.toComparison());
}


No.3 generated result --------------------------

@Test
public void appendTest() {
    CompareToBuilder compareToBuilder = new CompareToBuilder();
    double[] array1 = {2.3, 4.5, 6.7};
    double[] array2 = {2.3, 4.5, 6.7};
    compareToBuilder.append(array1, array2);
    assertEquals(0, compareToBuilder.toComparison());
}


No.4 generated result --------------------------

assertEquals(0, new CompareToBuilder().append(new double[]{1, 2, 3}, new double[]{1, 2, 3}).toComparison());


No.5 generated result --------------------------

@Test
    public void appendTest() {
        CompareToBuilder compareToBuilder = new CompareToBuilder();
        double[] lhs = {1.0, 2.0, 3.0};
        double[] rhs = {1.0, 2.0, 3.0};
        compareToBuilder.append(lhs, rhs);
        assertEquals(0, compareToBuilder.toComparison());
    }


No.6 generated result --------------------------

public void appendTest() {
    CompareToBuilder builder = new CompareToBuilder();
    double[] arr1 = {1.1, 2.2, 3.3};
    double[] arr2 = {1.1, 2.2, 3.3};
    CompareToBuilder result = builder.append(arr1, arr2);
    assertEquals(builder, result);
}


No.7 generated result --------------------------


 public void appendTest() {
     CompareToBuilder result = new CompareToBuilder();
     double[] arr1 = {1.5, 2.0, 3.7};
     double[] arr2 = {1.5, 2.0, 3.7};
     result.append(arr1, arr2);
     assertEquals(0, result.toComparison());
 }


No.8 generated result --------------------------

@Test
public void appendTest() {
    CompareToBuilder compareToBuilder = new CompareToBuilder();
    double[] lhs = {1.0, 2.0, 3.0};
    double[] rhs = {1.0, 2.0, 4.0};
    compareToBuilder.append(lhs, rhs);
    int result = compareToBuilder.toComparison();
    assertEquals(-1, result);
}


No.9 generated result --------------------------


CompareToBuilder ctb = new CompareToBuilder();
double[] arr1 = {1.0, 2.0, 3.0};
double[] arr2 = {1.0, 2.0, 3.0};
CTBResult result = ctb.append(arr1, arr2);
assertEquals(0, result.comparison);



No.10 generated result --------------------------

@Test
public void appendTest() {
    CompareToBuilder builder = new CompareToBuilder();
    double[] lhs = {1.0, 2.0, 3.0};
    double[] rhs = {1.0, 2.0, 3.0};
    CompareToBuilder result = builder.append(lhs, rhs);
    assertEquals(builder, result);
}


