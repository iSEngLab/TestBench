{
    "project_name": "commons-math",
    "file_name": "AccurateMathCalc.java",
    "relative_path": "commons-math/commons-math-core/src/main/java/org/apache/commons/math4/core/jdkmath/AccurateMathCalc.java",
    "execute_path": "commons-math/commons-math-core",
    "package": "org.apache.commons.math4.core.jdkmath",
    "docstring": "/**\n     * Print an array.\n     * @param out text output stream where output should be printed\n     * @param name array name\n     * @param expectedLen expected length of the array\n     * @param array2d array data\n     */",
    "source_code": "\nstatic void printarray(PrintStream out, String name, int expectedLen, double[][] array2d) {\n    out.println(name);\n    checkLen(expectedLen, array2d.length);\n    out.println(TABLE_START_DECL + \" \");\n    int i = 0;\n    for (double[] array : array2d) { // \"double array[]\" causes PMD parsing error\n        out.print(\"        {\");\n        for (double d : array) { // assume inner array has very few entries\n            out.printf(\"%-25.25s\", format(d)); // multiple entries per line\n        }\n        out.println(\"}, // \" + i++);\n    }\n    out.println(TABLE_END_DECL);\n}\n",
    "class_name": "AccurateMathCalc",
    "method_name": "printarray",
    "arguments": [
        "PrintStream out",
        "String name",
        "int expectedLen",
        "double[][] array2d"
    ],
    "generate_test": [
        "@Test\npublic void printarrayTest() {\n    // Create a PrintStream object for testing\n    ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    PrintStream printStream = new PrintStream(outContent);\n    \n    // Define the input values for the method\n    String name = \"TestArray\";\n    int expectedLen = 3;\n    double[][] array2d = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}};\n    \n    // Call the method to be tested\n    AccurateMathCalc.printarray(printStream, name, expectedLen, array2d);\n    \n    // Capture the printed output\n    String printedOutput = outContent.toString();\n    \n    // Define the expected output\n    String expectedOutput = \"TestArray\\n    {1.0                 2.0                 3.0                }, // 0\\n    {4.0                 5.0                 6.0                }, // 1\\n    }\\n\";\n    \n    // Verify the expected output matches the printed output\n    assertEquals(expectedOutput, printedOutput);\n}",
        "@Test\npublic void printarrayTest() {\n    double[][] testArray = new double[][]{\n        {1.0, 2.0, 3.0},\n        {4.0, 5.0, 6.0}\n    };\n    assertDoesNotThrow(() -> AccurateMathCalc.printarray(System.out, \"testArray\", 2, testArray));\n}",
        "@Test\npublic void printarrayTest() {\n    ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    System.setOut(new PrintStream(outContent));\n    String name = \"arrayName\";\n    int expectedLen = 3;\n    double[][] array2d = {{1.23, 4.56, 7.89}, {0.12, 3.45, 6.78}, {9.01, 2.34, 5.67}};\n    AccurateMathCalc.printarray(System.out, name, expectedLen, array2d);\n    String expectedOutput =\n            \"arrayName\\n\" +\n            \"    {        +1.23d,                +4.56d,                +7.89d,}, // 0\\n\" +\n            \"    {        +0.12d,                +3.45d,                +6.78d,}, // 1\\n\" +\n            \"    {        +9.01d,                +2.34d,                +5.67d,}, // 2\\n\";\n    assertEquals(expectedOutput, outContent.toString());\n}\n",
        "@Test\npublic void printarrayTest() {\n    ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    System.setOut(new PrintStream(outContent));\n    double[][] array2d = {{1.0, 2.0}, {3.0, 4.0}};\n    int expectedLen = 2;\n    AccurateMathCalc.printarray(System.out, \"Test Array\", expectedLen, array2d);\n    String expectedOutput = \"Test Array\\n\" +\n                            \"    {1.0                 2.0                 }, // 0\\n\" +\n                            \"    {3.0                 4.0                 }, // 1\\n\";\n    assertEquals(expectedOutput, outContent.toString());\n}",
        "@Test\npublic void printarrayTest() {\n    double[][] array2d = {{1.0, 2.0}, {3.0, 4.0}}; // example array data\n    assertDoesNotThrow(() -> AccurateMathCalc.printarray(System.out, \"Array2D\", 2, array2d));\n}",
        "@Test\npublic void printarrayTest() {\n    double[][] array = {{1.0, 2.0}, {3.0, 4.0}};\n    assertDoesNotThrow(() -> AccurateMathCalc.printarray(System.out, \"testArray\", 2, array));\n}",
        "@Test\npublic void printarrayTest() {\n  ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n  System.setOut(new PrintStream(outContent));\n  String expectedOutput = \"<Expected Output String>\";\n  AccurateMathCalc.printarray(System.out, \"testArray\", 3, new double[][] {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}});\n  assertTrue(outContent.toString().contains(expectedOutput));\n}",
        "@Test\npublic void printarrayTest() {\n    assertEquals(\"Test case for printArray method\", expected, actual);\n}",
        "@Test\npublic void printarrayTest() {\n    ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    System.setOut(new PrintStream(outContent));\n    String name = \"TestArray\";\n    int expectedLen = 4;\n    double[][] array2d = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0}, {10.0, 11.0, 12.0}};\n    \n    AccurateMathCalc.printarray(System.out, name, expectedLen, array2d);\n    \n    String expected = \"TestArray\\n    {\\n        +1.0                  +2.0                  +3.0                  }, // 0\\n        +4.0                  +5.0                  +6.0                  }, // 1\\n        +7.0                  +8.0                  +9.0                  }, // 2\\n        +10.0                 +11.0                 +12.0                 }, // 3\\n    };\";\n    assertEquals(expected, outContent.toString().trim());\n}",
        "@Test\npublic void printarrayTest() {\n    PrintStream out = System.out;\n    String name = \"testArray\";\n    int expectedLen = 2;\n    double[][] array2d = {{1.1, 2.2}, {3.3, 4.4}};\n\n    AccurateMathCalc.printarray(out, name, expectedLen, array2d);\n}"
    ]
}