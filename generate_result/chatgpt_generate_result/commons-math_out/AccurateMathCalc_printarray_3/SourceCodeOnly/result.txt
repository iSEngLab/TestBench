Source code: 


static void printarray(PrintStream out, String name, int expectedLen, double[][] array2d) {
    out.println(name);
    checkLen(expectedLen, array2d.length);
    out.println(TABLE_START_DECL + " ");
    int i = 0;
    for (double[] array : array2d) { // "double array[]" causes PMD parsing error
        out.print("        {");
        for (double d : array) { // assume inner array has very few entries
            out.printf("%-25.25s", format(d)); // multiple entries per line
        }
        out.println("}, // " + i++);
    }
    out.println(TABLE_END_DECL);
}



No.1 generated result --------------------------

public void printarrayTest() {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    int expectedLen = 2;
    double[][] array2d = {{1.1, 2.2}, {3.3, 4.4}};
    printarray(new PrintStream(out), "Array Test", expectedLen, array2d);
    assertEquals("Array Test\n{1.1                 2.2                }, // 0\n{3.3                 4.4                }, // 1\n", out.toString());
}


No.2 generated result --------------------------

@Test
public void printarrayTest() {
    ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    System.setOut(new PrintStream(outContent));

    double[][] testArray = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}};
    printarray(System.out, "Test Array", 2, testArray);

    String expectedOutput = "Test Array\n";
    expectedOutput += "  \n";
    expectedOutput += "        {1.0                   2.0                  3.0                  }, // 0\n";
    expectedOutput += "        {4.0                   5.0                  6.0                  }, // 1\n";
    expectedOutput += "    \n";

    assertEquals(expectedOutput, outContent.toString());
}


No.3 generated result --------------------------

@Test
public void printarrayTest() {
    ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    PrintStream out = new PrintStream(outContent);
    
    String name = "Test";
    int expectedLen = 2;
    double[][] array2d = {{1.5, 2.5}, {3.5, 4.5}};
    
    printarray(out, name, expectedLen, array2d);
    assertEquals("Expected output", outContent.toString().trim());
}


No.4 generated result --------------------------

@Test
    public void printarrayTest() {
        PrintStream out = System.out;
        String name = "Test Array";
        int expectedLen = 3;
        double[][] array2d = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0}};

        printarray(out, name, expectedLen, array2d);
    }


No.5 generated result --------------------------

@Test
public void printarrayTest() {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    PrintStream printStream = new PrintStream(out);
    String name = "testArray";
    int expectedLen = 3;
    double[][] array2d = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0}};
    AccurateMathCalc.printarray(printStream, name, expectedLen, array2d);
    assertEquals("testArray\n{ 1.0                    2.0                    3.0                    }, // 0\n{ 4.0                    5.0                    6.0                    }, // 1\n{ 7.0                    8.0                    9.0                    }, // 2\n", out.toString());
}



No.6 generated result --------------------------

@Test
public void printarrayTest() {
    ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    System.setOut(new PrintStream(outContent));
    double[][] testArray = {{1.5, 2.5}, {3.5, 4.5}};
    printarray(System.out, "Test Array", 2, testArray);
    String expectedOutput = "Test Array\n" + "    {{1.5               2.5}, // 0\n    {3.5               4.5}, // 1\n}";
    assertEquals(expectedOutput, outContent.toString());
}


No.7 generated result --------------------------

@Test
public void printarrayTest() {
    ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    System.setOut(new PrintStream(outContent));
    
    double[][] testArray = {{1.5, 2.3, 3.7}, {4.2, 5.8, 6.4}};
    printarray(System.out, "Test Array", 2, testArray);
    
    String expectedOutput = "Test Array\n" +
                            "        {1.5                  2.3                  3.7                  }, // 0\n" +
                            "        {4.2                  5.8                  6.4                  }, // 1\n";
    
    assertEquals(expectedOutput, outContent.toString());
}


No.8 generated result --------------------------

@Test
public void printarrayTest() {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    PrintStream ps = new PrintStream(out);
    String name = "Test Array";
    int expectedLen = 3;
    double[][] array2d = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0}};
    printarray(ps, name, expectedLen, array2d);
    String output = out.toString();
    assertEquals("Expected Output", output); // Replace "Expected Output" with the expected output of the printarray method
}


No.9 generated result --------------------------

@Test
public void printarrayTest() {
   ByteArrayOutputStream outContent = new ByteArrayOutputStream();
   System.setOut(new PrintStream(outContent));
   double[][] testArray = {{1.1, 2.2, 3.3}, {4.4, 5.5, 6.6}};
   printarray(System.out, "Test Array", 2, testArray);
   String expectedOutput = "Test Array\n"
                          "  {1.1                   2.2                   3.3}, // 0\n"
                          "  {4.4                   5.5                   6.6}, // 1\n"
   assertEquals(expectedOutput, outContent.toString());
}



No.10 generated result --------------------------

@Test
public void printarrayTest() {
    PrintStream out = System.out;
    String name = "Test Name";
    int expectedLen = 2;
    double[][] array2d = {{1.0, 2.0}, {3.0, 4.0}};
    
    AccurateMathCalc.printarray(out, name, expectedLen, array2d);
}


