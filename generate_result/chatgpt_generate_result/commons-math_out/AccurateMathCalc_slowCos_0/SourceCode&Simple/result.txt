Source code: 


static double slowCos(final double x, final double[] result) {

    final double[] xs = new double[2];
    final double[] ys = new double[2];
    final double[] facts = new double[2];
    final double[] as = new double[2];
    split(x, xs);
    ys[0] = ys[1] = 0.0;

    for (int i = FACT.length - 1; i >= 0; i--) {
        splitMult(xs, ys, as);
        ys[0] = as[0];
        ys[1] = as[1];

        if ((i & 1) != 0) { // skip odd entries
            continue;
        }

        split(FACT[i], as);
        splitReciprocal(as, facts);

        if ((i & 2) != 0) { // alternate terms are negative
            facts[0] = -facts[0];
            facts[1] = -facts[1];
        }

        splitAdd(ys, facts, as);
        ys[0] = as[0]; ys[1] = as[1];
    }

    if (result != null) {
        result[0] = ys[0];
        result[1] = ys[1];
    }

    return ys[0] + ys[1];
}



No.1 generated result --------------------------

@Test
public void slowCosTest() {
    double x = 1.0;
    double[] result = new double[2];
    double output = AccurateMathCalc.slowCos(x, result);
    assertNotNull(result);
    assertEquals(0.5403023058681398, result[0]);
    assertEquals(0.0, result[1]);
    assertEquals(0.5403023058681398, output);
}


No.2 generated result --------------------------

@Test
    public void slowCosTest() {
        double x = 0.5;
        double[] result = new double[2];
        double expected = Math.cos(x);
        double actual = AccurateMathCalc.slowCos(x, result);
        
        assertEquals(expected, actual, 0.0001);
    }


No.3 generated result --------------------------

@Test
public void slowCosTest() {
    double x = 0.5;
    double[] result = new double[2];
    double expected = Math.cos(x);
    double actual = AccurateMathCalc.slowCos(x, result);
    assertEquals(expected, actual, 0.0001);
}


No.4 generated result --------------------------

@Test
public void slowCosTest() {
    double[] result = new double[2];
    double x = 0.5;
    double actual = AccurateMathCalc.slowCos(x, result);
    double expected = Math.cos(x);
    assertEquals(expected, actual);
    assertEquals(expected, result[0] + result[1]);
}


No.5 generated result --------------------------

@Test
    public void slowCosTest() {
        double x = 0.5;
        double[] result = new double[2];
        double actual = AccurateMathCalc.slowCos(x, result);
        double expected = Math.cos(x);
        assertEquals(expected, actual, 0.0001);
    }


No.6 generated result --------------------------


@Test
public void slowCosTest() {
    double x = 1.0;
    double[] result = new double[2];
    double actual = AccurateMathCalc.slowCos(x, result);
    double expected = Math.cos(x);
    assertEquals(expected, actual);
}


No.7 generated result --------------------------

@Test
public void slowCosTest() {
    double x = Math.PI / 4;
    double[] result = new double[2];
    double actual = AccurateMathCalc.slowCos(x, result);
    double expected = Math.cos(x);
    assertEquals(expected, actual);
}


No.8 generated result --------------------------

@Test
public void slowCosTest() {
    double x = 0.5;
    double[] result = new double[2];
    double expected = Math.cos(x);
    double actual = AccurateMathCalc.slowCos(x, result);
    assertEquals(expected, actual);
}


No.9 generated result --------------------------

@Test
public void slowCosTest() {
    double x = 0.5;
    double[] result = new double[2];
    double output = AccurateMathCalc.slowCos(x, result);
    assertEquals(output, Math.cos(x));
    assertEquals(result[0] + result[1], Math.cos(x), 0.0001);
}


No.10 generated result --------------------------

@Test
public void slowCosTest() {
    double x = 0.5;
    double[] result = new double[2];
    double actual = AccurateMathCalc.slowCos(x, result);
    double expected = Math.cos(x);
    assertEquals(expected, actual);
}


