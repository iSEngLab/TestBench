{
    "project_name": "commons-math",
    "file_name": "AccurateMathCalc.java",
    "relative_path": "commons-math/commons-math-core/src/main/java/org/apache/commons/math4/core/jdkmath/AccurateMathCalc.java",
    "execute_path": "commons-math/commons-math-core",
    "package": "org.apache.commons.math4.core.jdkmath",
    "docstring": "/**\n     *  For x between 0 and 1, returns exp(x), uses extended precision.\n     *  @param x argument of exponential\n     *  @param result placeholder where to place exp(x) split in two terms\n     *  for extra precision (i.e. exp(x) = result[0] + result[1]\n     *  @return exp(x)\n     */",
    "source_code": "\nstatic double slowexp(final double x, final double[] result) {\n    final double[] xs = new double[2];\n    final double[] ys = new double[2];\n    final double[] facts = new double[2];\n    final double[] as = new double[2];\n    split(x, xs);\n    ys[0] = ys[1] = 0.0;\n\n    for (int i = FACT.length - 1; i >= 0; i--) {\n        splitMult(xs, ys, as);\n        ys[0] = as[0];\n        ys[1] = as[1];\n\n        split(FACT[i], as);\n        splitReciprocal(as, facts);\n\n        splitAdd(ys, facts, as);\n        ys[0] = as[0];\n        ys[1] = as[1];\n    }\n\n    if (result != null) {\n        result[0] = ys[0];\n        result[1] = ys[1];\n    }\n\n    return ys[0] + ys[1];\n}\n",
    "class_name": "AccurateMathCalc",
    "method_name": "slowexp",
    "arguments": [
        "double x",
        "double[] result"
    ],
    "generate_test": [
        "@Test\npublic void slowexpTest() {\n    double x = 5.0;\n    double[] result = new double[2];\n    double actual = AccurateMathCalc.slowexp(x, result);\n    \n    double expected = Math.exp(x);\n    assertEquals(expected, actual, 1e-15);\n}",
        "@Test\npublic void slowexpTest() {\n    double x = 2.5;\n    final double[] result = new double[2];\n    double actual = AccurateMathCalc.slowexp(x, result);\n    assertNotNull(result);\n    assertEquals(12.182493960703473, actual);\n    // Output the whole test case\n    System.out.println(\"Unit Test: slowexpTest\");\n    System.out.println(\"Input x: \" + x);\n    System.out.println(\"Result[0]: \" + result[0]);\n    System.out.println(\"Result[1]: \" + result[1]);\n    System.out.println(\"Expected Output: 12.182493960703473\");\n    System.out.println(\"Actual Output: \" + actual);\n}\n",
        "@Test\npublic void slowexpTest() {\n    double x = 2.0; // Example input value\n    double[] result = new double[2]; // Placeholder for the result\n    double expectedResult = Math.exp(x); // Expected result using standard library\n\n    double actualResult = AccurateMathCalc.slowexp(x, result); // Actual result using the slowexp method\n\n    // Verify that the actual result matches the expected result within a small delta\n    assertEquals(expectedResult, actualResult, 0.0001);\n}",
        "public void slowexpTest() {\n    double x = 2.0;\n    double[] result = new double[2];\n    double expected = Math.exp(x);\n    double actual = AccurateMathCalc.slowexp(x, result);\n    assertEquals(expected, actual, 0.0001);\n    assertEquals(expected, result[0] + result[1], 0.0001);\n}",
        "@Test\npublic void slowexpTest() {\n    double x = 5.0;\n    final double[] result = new double[2];\n    double expected = Math.exp(x);\n    double actual = AccurateMathCalc.slowexp(x, result);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void slowexpTest() {\n    double x = 5.0; // Example input\n    double[] result = new double[2];\n    double actual = AccurateMathCalc.slowexp(x, result);\n    // Assertion to check the correctness of the result\n    assertEquals(Math.exp(x), actual + result[0] + result[1]);\n}",
        "@Test\npublic void slowexpTest() {\n    double[] result = new double[2];\n    double x = 2.0; // example input\n    double expected = Math.exp(x);\n    \n    // Call the slowexp method\n    double actual = AccurateMathCalc.slowexp(x, result);\n    \n    // Check if the actual result matches the expected result\n    assertEquals(expected, actual, 0.0001);\n}",
        "@Test\npublic void slowexpTest() {\n    double x = 4.0;\n    final double[] result = new double[2];\n    double expected = Math.exp(x);\n    double actual = AccurateMathCalc.slowexp(x, result);\n    assertEquals(expected, actual, 0.001);\n}",
        "@Test\npublic void slowexpTest() {\n    double[] result = new double[2];\n    double input = 3.5;\n    double expected = 33.11545;  // Replace with expected result\n    double actual = AccurateMathCalc.slowexp(input, result);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void slowexpTest() {\n    double x = 5.0;\n    double[] result = new double[2];\n    double expected = Math.exp(x);\n    double actual = AccurateMathCalc.slowexp(x, result);\n    assertEquals(expected, actual);\n}"
    ]
}