{
    "project_name": "commons-math",
    "file_name": "AccurateMathCalc.java",
    "relative_path": "commons-math/commons-math-core/src/main/java/org/apache/commons/math4/core/jdkmath/AccurateMathCalc.java",
    "execute_path": "commons-math/commons-math-core",
    "package": "org.apache.commons.math4.core.jdkmath",
    "docstring": "/**\n     *  For x between 0 and 1, returns exp(x), uses extended precision.\n     *  @param x argument of exponential\n     *  @param result placeholder where to place exp(x) split in two terms\n     *  for extra precision (i.e. exp(x) = result[0] + result[1]\n     *  @return exp(x)\n     */",
    "source_code": "\nstatic double slowexp(final double x, final double[] result) {\n    final double[] xs = new double[2];\n    final double[] ys = new double[2];\n    final double[] facts = new double[2];\n    final double[] as = new double[2];\n    split(x, xs);\n    ys[0] = ys[1] = 0.0;\n\n    for (int i = FACT.length - 1; i >= 0; i--) {\n        splitMult(xs, ys, as);\n        ys[0] = as[0];\n        ys[1] = as[1];\n\n        split(FACT[i], as);\n        splitReciprocal(as, facts);\n\n        splitAdd(ys, facts, as);\n        ys[0] = as[0];\n        ys[1] = as[1];\n    }\n\n    if (result != null) {\n        result[0] = ys[0];\n        result[1] = ys[1];\n    }\n\n    return ys[0] + ys[1];\n}\n",
    "class_name": "AccurateMathCalc",
    "method_name": "slowexp",
    "arguments": [
        "double x",
        "double[] result"
    ],
    "generate_test": [
        "@Test\npublic void slowexpTest() {\n    double x = 2.0;\n    double[] result = new double[2];\n    double expected = Math.exp(x);\n    double actual = AccurateMathCalc.slowexp(x, result);\n    assertEquals(expected, actual, 0.0001);\n}",
        "@Test\npublic void slowexpTest() {\n    double[] result = new double[2];\n    double x = 2.0;\n    double expected = Math.exp(2.0);\n    double actual = AccurateMathCalc.slowexp(x, result);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void slowexpTest() {\n    double x = 2.0;\n    double[] result = new double[2];\n    double expected = Math.exp(x);\n    double actual = AccurateMathCalc.slowexp(x, result);\n    assertEquals(expected, actual);\n}",
        "@Test\n    public void slowexpTest() {\n        double x = 2.0;\n        double[] result = new double[2];\n        double expectedResult = Math.exp(x);\n\n        // Call the method to be tested\n        double actualResult = AccurateMathCalc.slowexp(x, result);\n\n        assertEquals(expectedResult, actualResult, 0.0001);\n    }",
        "@Test\npublic void slowexpTest() {\n    double x = 2.5;\n    double[] result = new double[2];\n    double expectedResult = Math.exp(x);\n    double actualResult = AccurateMathCalc.slowexp(x, result);\n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\npublic void slowexpTest() {\n    double x = 2.0;\n    double[] result = new double[2];\n    double expectedResult = 7.3890560989306495;\n    double actualResult = AccurateMathCalc.slowexp(x, result);\n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\npublic void slowexpTest() {\n    double x = 5.0;\n    double[] result = new double[2];\n    double actualResult = AccurateMathCalc.slowexp(x, result);\n    // add assertions here to check against expected values\n    // for example:\n    // assertEquals(expectedValue, actualResult);\n}",
        "@Test\npublic void slowexpTest() {\n    double x = 2.0;\n    double[] result = new double[2];\n    double expectedResult = 7.3890560989306495;\n    double actualResult = AccurateMathCalc.slowexp(x, result);\n    assertEquals(expectedResult, actualResult);\n    assertArrayEquals(new double[]{7.3890560989306495, 0.0}, result);\n}",
        "@Test\npublic void slowexpTest() {\n    double x = 5.0;\n    double[] result = new double[2];\n    double output = AccurateMathCalc.slowexp(x, result);\n    // Add assertions here to test the output\n    assertEquals(expectedValue, output);\n    assertArrayEquals(expectedArray, result);\n}",
        "@Test\npublic void slowexpTest() {\n    double x = 2.0;\n    double[] result = new double[2];\n    double expected = Math.exp(x);\n    double actual = AccurateMathCalc.slowexp(x, result);\n    assertEquals(expected, actual);\n}"
    ]
}