Source code: 


static void splitReciprocal(final double[] in, final double[] result) {
    final double b = 1.0 / 4194304.0;
    final double a = 1.0 - b;

    if (in[0] == 0.0) {
        in[0] = in[1];
        in[1] = 0.0;
    }

    result[0] = a / in[0];
    result[1] = (b * in[0] - a * in[1]) / (in[0] * in[0] + in[0] * in[1]);

    if (result[1] != result[1]) { // can happen if result[1] is NAN
        result[1] = 0.0;
    }

    /* Resplit */
    resplit(result);

    for (int i = 0; i < 2; i++) {
        /* this may be overkill, probably once is enough */
        double err = 1.0 - result[0] * in[0] - result[0] * in[1] -
            result[1] * in[0] - result[1] * in[1];
        /*err = 1.0 - err; */
        err *= result[0] + result[1];
        /*printf("err = %16e\n", err); */
        result[1] += err;
    }
}



No.1 generated result --------------------------

@Test
public void splitReciprocalTest() {
    double[] in = {3.0, 4.0};
    double[] result = new double[2];
    AccurateMathCalc.splitReciprocal(in, result);
    assertEquals(0.12, result[0], 0.01);
    assertEquals(0.16, result[1], 0.01);
}


No.2 generated result --------------------------

@Test
public void splitReciprocalTest() {
    double[] in = {2.0, 4.0};
    double[] result = new double[2];
    AccurateMathCalc.splitReciprocal(in, result);
    assertEquals(0.5, result[0]);
    assertEquals(0.125, result[1]);
}


No.3 generated result --------------------------

@Test
public void splitReciprocalTest() {
    double[] in = {3.0, 2.0};
    double[] result = new double[2];
    AccurateMathCalc.splitReciprocal(in, result);
    assertEquals(0.6666666666666666, result[0]);
    assertEquals(-1.3333333333333333, result[1]);
    double[] in2 = {0.0, 2.0};
    double[] result2 = new double[2];
    AccurateMathCalc.splitReciprocal(in2, result2);
    assertEquals(0.0, result2[0]);
    assertEquals(0.0, result2[1]);
}



No.4 generated result --------------------------

@Test
public void splitReciprocalTest() {
    double[] in = {2.0, 4.0};
    double[] result = new double[2];
    AccurateMathCalc.splitReciprocal(in, result);
    assertEquals(0.5, result[0]);
    assertEquals(-0.25, result[1]);
}


No.5 generated result --------------------------

@Test
public void splitReciprocalTest() {
    double[] in = {2.0, 3.0};
    double[] result = new double[2];
    AccurateMathCalc.splitReciprocal(in, result);
    assertArrayEquals(new double[]{0.3333333333333333, -0.333333333333335}, result, 0.0);
}


No.6 generated result --------------------------

@Test
public void splitReciprocalTest() {
    double[] in = {1.0, 2.0};
    double[] result = new double[2];
    AccurateMathCalc.splitReciprocal(in, result);
    
    double[] expected = new double[2];
    expected[0] = 1.9999997141042495;
    expected[1] = -3.1987002362379795E-8;
    
    assertArrayEquals(expected, result, 1e-15);
}


No.7 generated result --------------------------

@Test
public void splitReciprocalTest() {
    double[] in = {4.0, 2.0};
    double[] result = new double[2];
    AccurateMathCalc.splitReciprocal(in, result);
    assertEquals(0.16666666666666666, result[0]);
    assertEquals(-0.08333333333333333, result[1]);
    in = new double[]{0, 3};
    AccurateMathCalc.splitReciprocal(in, result);
    assertEquals(0.0, result[0]);
    assertEquals(0.0, result[1]);
}


No.8 generated result --------------------------

@Test
public void splitReciprocalTest() {
    double[] in = {3.0, 2.0};
    double[] expected = {1.0, 4.0};
    AccurateMathCalc.splitReciprocal(in, in);
    assertArrayEquals(expected, in);
}


No.9 generated result --------------------------

@Test
public void splitReciprocalTest() {
    double[] in = new double[]{2.0, 1.0};
    double[] result = new double[2];
    AccurateMathCalc.splitReciprocal(in, result);
    assertEquals(0.6666666666666666, result[0]); // assert expected result for the first value
    assertEquals(-1.0000009536743164, result[1]); // assert expected result for the second value
}



No.10 generated result --------------------------

@Test
public void splitReciprocalTest() {
    double[] in = {2.5, 3.0};
    double[] result = new double[2];
    AccurateMathCalc.splitReciprocal(in, result);
    assertEquals(0.4, result[0]);
    assertEquals(0.06666666666666667, result[1]);
}


