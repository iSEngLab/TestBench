{
    "project_name": "commons-math",
    "file_name": "Neuron.java",
    "relative_path": "commons-math/commons-math-neuralnet/src/main/java/org/apache/commons/math4/neuralnet/Neuron.java",
    "execute_path": "commons-math/commons-math-neuralnet",
    "package": "org.apache.commons.math4.neuralnet",
    "docstring": "/**\n     * Tries to atomically update the neuron's features.\n     * Update will be performed only if the expected values match the\n     * current values.<br>\n     * In effect, when concurrent threads call this method, the state\n     * could be modified by one, so that it does not correspond to the\n     * the state assumed by another.\n     * Typically, a caller {@link #getFeatures() retrieves the current state},\n     * and uses it to compute the new state.\n     * During this computation, another thread might have done the same\n     * thing, and updated the state: If the current thread were to proceed\n     * with its own update, it would overwrite the new state (which might\n     * already have been used by yet other threads).\n     * To prevent this, the method does not perform the update when a\n     * concurrent modification has been detected, and returns {@code false}.\n     * When this happens, the caller should fetch the new current state,\n     * redo its computation, and call this method again.\n     *\n     * @param expect Current values of the features, as assumed by the caller.\n     * Update will never succeed if the contents of this array does not match\n     * the values returned by {@link #getFeatures()}.\n     * @param update Features's new values.\n     * @return {@code true} if the update was successful, {@code false}\n     * otherwise.\n     * @throws IllegalArgumentException if the length of {@code update} is\n     * not the same as specified in the {@link #Neuron(long,double[])\n     * constructor}.\n     */",
    "source_code": "\npublic boolean compareAndSetFeatures(double[] expect,\n                                     double[] update) {\n    if (update.length != size) {\n        throw new NeuralNetException(NeuralNetException.SIZE_MISMATCH,\n                                     update.length, size);\n    }\n\n    // Get the internal reference. Note that this must not be a copy;\n    // otherwise the \"compareAndSet\" below will always fail.\n    final double[] current = features.get();\n    if (!containSameValues(current, expect)) {\n        // Some other thread already modified the state.\n        return false;\n    }\n\n    // Increment attempt counter.\n    numberOfAttemptedUpdates.incrementAndGet();\n\n    if (features.compareAndSet(current, update.clone())) {\n        // The current thread could atomically update the state (attempt succeeded).\n        numberOfSuccessfulUpdates.incrementAndGet();\n        return true;\n    } else {\n        // Some other thread came first (attempt failed).\n        return false;\n    }\n}\n",
    "class_name": "Neuron",
    "method_name": "compareAndSetFeatures",
    "arguments": [
        "double[] expect",
        "double[] update"
    ],
    "generate_test": [
        "@Test\npublic void compareAndSetFeaturesTest() {\n    Neuron neuron = new Neuron();\n    double[] current = {1.0, 2.0, 3.0};\n    double[] expect = {1.0, 2.0, 3.0};\n    double[] update = {4.0, 5.0, 6.0};\n\n    boolean result = neuron.compareAndSetFeatures(current, update);\n\n    assertTrue(result);\n}",
        "    @Test\n    public void compareAndSetFeaturesTest() {\n        double[] expect = {1.0, 2.0, 3.0};\n        double[] update = {4.0, 5.0, 6.0};\n        \n        Neuron neuron = new Neuron();\n        \n        boolean result = neuron.compareAndSetFeatures(expect, update);\n        assertTrue(result);\n    }",
        "// Given\nNeuron neuron = new Neuron();\ndouble[] expect = {1.0, 2.0, 3.0};\ndouble[] update = {2.0, 3.0, 4.0};\n\n// When\nboolean result = neuron.compareAndSetFeatures(expect, update);\n\n// Then\nassertTrue(result);",
        "public void compareAndSetFeaturesTest() {\n   Neuron neuron = new Neuron();\n   double[] expect = {1.0, 2.0, 3.0};\n   double[] update = {4.0, 5.0, 6.0};\n   assertThrows(NeuralNetException.class, () -> {\n       neuron.compareAndSetFeatures(expect, update);\n   });\n}",
        "@Test\npublic void compareAndSetFeaturesTest() {\n    Neuron neuron = new Neuron();\n    double[] current = {1.0, 2.0, 3.0};\n    double[] update = {4.0, 5.0, 6.0};\n    assertTrue(neuron.compareAndSetFeatures(current, update));\n}",
        "@Test\npublic void compareAndSetFeaturesTest() {\n    Neuron neuron = new Neuron();\n    double[] current = new double[]{1.0, 2.0, 3.0};\n    double[] expect = new double[]{1.0, 2.0, 3.0};\n    double[] update = new double[]{4.0, 5.0, 6.0};\n    \n    neuron.features.set(current);\n    \n    assertTrue(neuron.compareAndSetFeatures(expect, update));\n}",
        "public class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        Neuron neuron = new Neuron();\n        \n        double[] expect = {1.0, 2.0, 3.0};\n        double[] update = {4.0, 5.0, 6.0};\n        \n        boolean result = neuron.compareAndSetFeatures(expect, update);\n        assertTrue(result);\n    }\n}",
        "public void compareAndSetFeaturesTest() {\n    Neuron neuron = new Neuron();\n    double[] expect = {1.0, 2.0, 3.0};\n    double[] update = {4.0, 5.0, 6.0};\n    assertTrue(neuron.compareAndSetFeatures(expect, update));\n}",
        "double[] expect = {1.0, 2.0, 3.0};\ndouble[] update = {4.0, 5.0, 6.0};\n\nNeuron neuron = new Neuron();\nboolean result = neuron.compareAndSetFeatures(expect, update);\nassertTrue(result);",
        "Neuron neuron = new Neuron();\ndouble[] expect = {1.0, 2.0, 3.0};\ndouble[] update = {4.0, 5.0, 6.0};\n\nboolean result = neuron.compareAndSetFeatures(expect, update);\nassertTrue(result);"
    ]
}