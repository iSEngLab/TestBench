Source code: 


public boolean compareAndSetFeatures(double[] expect,
                                     double[] update) {
    if (update.length != size) {
        throw new NeuralNetException(NeuralNetException.SIZE_MISMATCH,
                                     update.length, size);
    }

    // Get the internal reference. Note that this must not be a copy;
    // otherwise the "compareAndSet" below will always fail.
    final double[] current = features.get();
    if (!containSameValues(current, expect)) {
        // Some other thread already modified the state.
        return false;
    }

    // Increment attempt counter.
    numberOfAttemptedUpdates.incrementAndGet();

    if (features.compareAndSet(current, update.clone())) {
        // The current thread could atomically update the state (attempt succeeded).
        numberOfSuccessfulUpdates.incrementAndGet();
        return true;
    } else {
        // Some other thread came first (attempt failed).
        return false;
    }
}



No.1 generated result --------------------------

@Test
public void compareAndSetFeaturesTest() {
    Neuron neuron = new Neuron();
    double[] current = {1.0, 2.0, 3.0};
    double[] expect = {1.0, 2.0, 3.0};
    double[] update = {4.0, 5.0, 6.0};

    boolean result = neuron.compareAndSetFeatures(current, update);

    assertTrue(result);
}


No.2 generated result --------------------------

    @Test
    public void compareAndSetFeaturesTest() {
        double[] expect = {1.0, 2.0, 3.0};
        double[] update = {4.0, 5.0, 6.0};
        
        Neuron neuron = new Neuron();
        
        boolean result = neuron.compareAndSetFeatures(expect, update);
        assertTrue(result);
    }


No.3 generated result --------------------------

// Given
Neuron neuron = new Neuron();
double[] expect = {1.0, 2.0, 3.0};
double[] update = {2.0, 3.0, 4.0};

// When
boolean result = neuron.compareAndSetFeatures(expect, update);

// Then
assertTrue(result);


No.4 generated result --------------------------

public void compareAndSetFeaturesTest() {
   Neuron neuron = new Neuron();
   double[] expect = {1.0, 2.0, 3.0};
   double[] update = {4.0, 5.0, 6.0};
   assertThrows(NeuralNetException.class, () -> {
       neuron.compareAndSetFeatures(expect, update);
   });
}


No.5 generated result --------------------------

@Test
public void compareAndSetFeaturesTest() {
    Neuron neuron = new Neuron();
    double[] current = {1.0, 2.0, 3.0};
    double[] update = {4.0, 5.0, 6.0};
    assertTrue(neuron.compareAndSetFeatures(current, update));
}


No.6 generated result --------------------------

@Test
public void compareAndSetFeaturesTest() {
    Neuron neuron = new Neuron();
    double[] current = new double[]{1.0, 2.0, 3.0};
    double[] expect = new double[]{1.0, 2.0, 3.0};
    double[] update = new double[]{4.0, 5.0, 6.0};
    
    neuron.features.set(current);
    
    assertTrue(neuron.compareAndSetFeatures(expect, update));
}


No.7 generated result --------------------------

public class NeuronTest {
    @Test
    public void compareAndSetFeaturesTest() {
        Neuron neuron = new Neuron();
        
        double[] expect = {1.0, 2.0, 3.0};
        double[] update = {4.0, 5.0, 6.0};
        
        boolean result = neuron.compareAndSetFeatures(expect, update);
        assertTrue(result);
    }
}


No.8 generated result --------------------------

public void compareAndSetFeaturesTest() {
    Neuron neuron = new Neuron();
    double[] expect = {1.0, 2.0, 3.0};
    double[] update = {4.0, 5.0, 6.0};
    assertTrue(neuron.compareAndSetFeatures(expect, update));
}


No.9 generated result --------------------------

double[] expect = {1.0, 2.0, 3.0};
double[] update = {4.0, 5.0, 6.0};

Neuron neuron = new Neuron();
boolean result = neuron.compareAndSetFeatures(expect, update);
assertTrue(result);


No.10 generated result --------------------------

Neuron neuron = new Neuron();
double[] expect = {1.0, 2.0, 3.0};
double[] update = {4.0, 5.0, 6.0};

boolean result = neuron.compareAndSetFeatures(expect, update);
assertTrue(result);


