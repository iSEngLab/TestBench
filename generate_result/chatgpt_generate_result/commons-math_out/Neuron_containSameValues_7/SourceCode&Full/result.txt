Source code: 


private boolean containSameValues(double[] current,
                                  double[] expect) {
    if (expect.length != size) {
        throw new NeuralNetException(NeuralNetException.SIZE_MISMATCH,
                                     expect.length, size);
    }

    for (int i = 0; i < size; i++) {
        if (!Precision.equals(current[i], expect[i])) {
            return false;
        }
    }
    return true;
}




No.1 generated result --------------------------

@Test
public void containSameValuesTest() {
    Neuron neuron = new Neuron(1, new double[]{1.0, 2.0, 3.0});
    double[] current = neuron.getFeatures();
    double[] expect = {1.0, 2.0, 3.0};
    assertTrue(neuron.containSameValues(current, expect));
}


No.2 generated result --------------------------

@Test
public void containSameValuesTest() {
    double[] current = new double[] {1.0, 2.0, 3.0};
    double[] expect = new double[] {1.0, 2.0, 3.0};
    Neuron neuron = new Neuron(1, current);
    boolean result = neuron.compareAndSetFeatures(expect, current);
    assertTrue(result);
}


No.3 generated result --------------------------

@Test
    public void containSameValuesTest() {
        double[] current = {1.0, 2.0, 3.0};
        double[] expect = {1.0, 2.0, 3.0};

        Neuron neuron = new Neuron(1, current);
        boolean result = neuron.containSameValues(current, expect);
        assertTrue(result);
    }


No.4 generated result --------------------------

public void containSameValuesTest() {
    Neuron neuron = new Neuron(1, new double[]{1.1, 2.2, 3.3});
    double[] current = {1.1, 2.2, 3.3};
    double[] expect = {1.1, 2.2, 3.3};

    assertTrue(neuron.containSameValues(current, expect));
}


No.5 generated result --------------------------

@Test
public void containSameValuesTest() {
    Neuron neuron = new Neuron(1, new double[]{1.0, 2.0, 3.0});
    assertTrue(neuron.containSameValues(new double[]{1.0, 2.0, 3.0}, new double[]{1.0, 2.0, 3.0}));
    assertFalse(neuron.containSameValues(new double[]{1.0, 2.0, 3.0}, new double[]{1.0, 2.5, 3.0}));
    assertThrows(NeuralNetException.class, () -> neuron.containSameValues(new double[]{1.0, 2.0, 3.0}, new double[]{1.0, 2.0}));
}


No.6 generated result --------------------------

@Test
public void containSameValuesTest() {
    Neuron neuron = new Neuron(1, new double[]{1.0, 2.0, 3.0});
    double[] current = new double[]{1.0, 2.0, 3.0};
    double[] expect = new double[]{1.0, 2.0, 3.0};
    assertTrue(neuron.containSameValues(current, expect));
}


No.7 generated result --------------------------

@Test
public void containSameValuesTest() {
    Neuron neuron = new Neuron(1, new double[]{1.0, 2.0, 3.0});
    double[] current = new double[]{1.0, 2.0, 3.0};
    double[] expect = new double[]{1.0, 2.0, 3.0};
    assertTrue(neuron.containSameValues(current, expect));
}


No.8 generated result --------------------------

@Test
public void containSameValuesTest() {
    Neuron n = new Neuron(1, new double[]{1.0, 2.0, 3.0});
    double[] current = n.getFeatures();
    double[] expect = {1.0, 2.0, 3.0};
    assertTrue(n.containSameValues(current, expect));
}


No.9 generated result --------------------------

@Test
public void containSameValuesTest() {
    double[] current = {1.0, 2.0, 3.0};
    double[] expect = {1.0, 2.0, 3.0};
    assertTrue(containSameValues(current, expect));
}


No.10 generated result --------------------------

@Test
public void containSameValuesTest() {
    double[] current = {1.0, 2.0, 3.0};
    double[] expected = {1.0, 2.0, 3.0};

    Neuron neuron = new Neuron(1, current);
    boolean result = neuron.containSameValues(current, expected);

    assertTrue(result);
}


