Source code: 


private boolean containSameValues(double[] current,
                                  double[] expect) {
    if (expect.length != size) {
        throw new NeuralNetException(NeuralNetException.SIZE_MISMATCH,
                                     expect.length, size);
    }

    for (int i = 0; i < size; i++) {
        if (!Precision.equals(current[i], expect[i])) {
            return false;
        }
    }
    return true;
}




No.1 generated result --------------------------

@Test
public void containSameValuesTest() {
    double[] current = {0.5, 0.25, 0.75};
    double[] expect = {0.5, 0.25, 0.75};
    boolean result = containSameValues(current, expect);
    assertTrue(result);
}


No.2 generated result --------------------------

public void containSameValuesTest() {
    double[] current = {1.0, 2.0, 3.0};
    double[] expect = {1.0, 2.0, 3.0};
    assertTrue(containSameValues(current, expect));
}


No.3 generated result --------------------------

@Test
public void containSameValuesTest() {
    NeuronTest neuron = new NeuronTest();
    double[] current = new double[]{1.0, 2.0, 3.0};
    double[] expect = new double[]{1.0, 2.0, 3.0};
    assertTrue(neuron.containSameValues(current, expect));
}


No.4 generated result --------------------------

double[] current = {0.1, 0.2, 0.3};
double[] expect = {0.1, 0.2, 0.4};
boolean result = containSameValues(current, expect);
assertFalse(result);


No.5 generated result --------------------------

@Test
public void containSameValuesTest() {
    double[] current = {1.0, 2.0, 3.0};
    double[] expect = {1.0, 2.0, 3.0};
    assertTrue(containSameValues(current, expect));
}


No.6 generated result --------------------------

double[] current = {0.1, 0.2, 0.3};
double[] expect = {0.1, 0.2, 0.3};
boolean result = containSameValues(current, expect);
assertTrue(result);


No.7 generated result --------------------------

@Test
public void containSameValuesTest() {
    boolean result = containSameValues(new double[]{1.0, 2.0, 3.0}, new double[]{1.0, 2.0, 3.0});
    assertTrue(result);
}


No.8 generated result --------------------------

@Test
public void containSameValuesTest() {
    double[] current = {1.0, 2.0, 3.0};
    double[] expect = {1.0, 2.0, 3.0};
    assertTrue(containSameValues(current, expect));
}


No.9 generated result --------------------------

@Test
public void containSameValuesTest() {
    double[] current = {1.0, 2.0, 3.0};
    double[] expected = {1.0, 2.0, 3.0};
    assertTrue(containSameValues(current, expected));
}


No.10 generated result --------------------------

@Test
public void containSameValuesTest() {
    double[] current = {1.0, 2.0, 3.0};
    double[] expect = {1.0, 2.0, 3.0};
    assertTrue(containSameValues(current, expect));
}


