{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compare the specified object with this entry for equality.\n     *\n     * @param o Object.\n     * @return {@code true} if the given object is also a map entry and\n     * the two entries represent the same mapping.\n     */",
    "source_code": "\n@Override\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (!(o instanceof Pair)) {\n        return false;\n    } else {\n        Pair<?, ?> oP = (Pair<?, ?>) o;\n        return (key == null ?\n                oP.key == null :\n                key.equals(oP.key)) &&\n            (value == null ?\n             oP.value == null :\n             value.equals(oP.value));\n    }\n}\n",
    "class_name": "Pair",
    "method_name": "equals",
    "arguments": [
        "Object o"
    ],
    "generate_test": [
        "@Test\npublic void equalsTest() {\n    Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n    Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n    Pair<Integer, String> pair3 = new Pair<>(2, \"two\");\n\n    assertTrue(pair1.equals(pair2));\n    assertFalse(pair1.equals(pair3));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"A\", 1);\n    Pair<String, Integer> pair2 = new Pair<>(\"A\", 1);\n    Pair<String, Integer> pair3 = new Pair<>(\"B\", 2);\n    \n    assertTrue(pair1.equals(pair2));\n    assertFalse(pair1.equals(pair3));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<Integer, String> pair1 = new Pair<>(1, \"One\");\n    Pair<Integer, String> pair2 = new Pair<>(1, \"One\");\n    assertEquals(pair1, pair2);\n}",
        "@Test\npublic void equalsTest() {\n    Pair<Integer, String> pair1 = new Pair<>(1, \"One\");\n    Pair<Integer, String> pair2 = new Pair<>(1, \"One\");\n    assertEquals(pair1, pair2);\n}",
        "@Test\npublic void equalsTest() {\n    Pair<Integer, String> pair1 = new Pair<>(1, \"One\");\n    Pair<Integer, String> pair2 = new Pair<>(1, \"One\");\n    Pair<Integer, String> pair3 = new Pair<>(2, \"Two\");\n    assertTrue(pair1.equals(pair2));\n    assertFalse(pair1.equals(pair3));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<Integer, String> pair1 = new Pair<>(1, \"One\");\n    Pair<Integer, String> pair2 = new Pair<>(1, \"One\");\n    Pair<Integer, String> pair3 = new Pair<>(2, \"Two\");\n\n    assertTrue(pair1.equals(pair2));\n    assertFalse(pair1.equals(pair3));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"A\", 1);\n    Pair<String, Integer> pair2 = new Pair<>(\"B\", 2);\n    Pair<String, Integer> pair3 = new Pair<>(\"A\", 1);\n    \n    assertTrue(pair1.equals(pair1)); // Reflexive property\n    assertTrue(pair1.equals(pair3) && pair3.equals(pair1)); // Symmetric property\n    assertTrue(pair1.equals(pair3) && pair3.equals(pair2) && pair2.equals(pair1)); // Transitive property\n    assertFalse(pair1.equals(null)); // Non-nullity property\n}\n",
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"key\", 1);\n    Pair<String, Integer> pair2 = new Pair<>(\"key\", 1);\n    Pair<String, Integer> pair3 = new Pair<>(\"differentKey\", 2);\n\n    assertTrue(pair1.equals(pair2));\n    assertFalse(pair1.equals(pair3));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"one\", 1);\n    Pair<String, Integer> pair2 = new Pair<>(\"one\", 1);\n    Pair<String, Integer> pair3 = new Pair<>(\"two\", 2);\n  \n    assertTrue(pair1.equals(pair2));\n    assertFalse(pair1.equals(pair3));\n}\n",
        "@Test\npublic void equalsTest() {\n    Pair<Integer, String> firstPair = new Pair<>(1, \"one\");\n    Pair<Integer, String> secondPair = new Pair<>(2, \"two\");\n\n    assertFalse(firstPair.equals(secondPair));\n}"
    ]
}