Source code: 


@Override
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (!(o instanceof Pair)) {
        return false;
    } else {
        Pair<?, ?> oP = (Pair<?, ?>) o;
        return (key == null ?
                oP.key == null :
                key.equals(oP.key)) &&
            (value == null ?
             oP.value == null :
             value.equals(oP.value));
    }
}



No.1 generated result --------------------------

@Test
public void equalsTest() {
    Pair<Integer, String> pair1 = new Pair<>(1, "one");
    Pair<Integer, String> pair2 = new Pair<>(1, "one");
    Pair<Integer, String> pair3 = new Pair<>(2, "two");

    assertTrue(pair1.equals(pair2));
    assertFalse(pair1.equals(pair3));
}


No.2 generated result --------------------------

@Test
public void equalsTest() {
    Pair<String, Integer> pair1 = new Pair<>("A", 1);
    Pair<String, Integer> pair2 = new Pair<>("A", 1);
    Pair<String, Integer> pair3 = new Pair<>("B", 2);
    
    assertTrue(pair1.equals(pair2));
    assertFalse(pair1.equals(pair3));
}


No.3 generated result --------------------------

@Test
public void equalsTest() {
    Pair<Integer, String> pair1 = new Pair<>(1, "One");
    Pair<Integer, String> pair2 = new Pair<>(1, "One");
    assertEquals(pair1, pair2);
}


No.4 generated result --------------------------

@Test
public void equalsTest() {
    Pair<Integer, String> pair1 = new Pair<>(1, "One");
    Pair<Integer, String> pair2 = new Pair<>(1, "One");
    assertEquals(pair1, pair2);
}


No.5 generated result --------------------------

@Test
public void equalsTest() {
    Pair<Integer, String> pair1 = new Pair<>(1, "One");
    Pair<Integer, String> pair2 = new Pair<>(1, "One");
    Pair<Integer, String> pair3 = new Pair<>(2, "Two");
    assertTrue(pair1.equals(pair2));
    assertFalse(pair1.equals(pair3));
}


No.6 generated result --------------------------

@Test
public void equalsTest() {
    Pair<Integer, String> pair1 = new Pair<>(1, "One");
    Pair<Integer, String> pair2 = new Pair<>(1, "One");
    Pair<Integer, String> pair3 = new Pair<>(2, "Two");

    assertTrue(pair1.equals(pair2));
    assertFalse(pair1.equals(pair3));
}


No.7 generated result --------------------------

@Test
public void equalsTest() {
    Pair<String, Integer> pair1 = new Pair<>("A", 1);
    Pair<String, Integer> pair2 = new Pair<>("B", 2);
    Pair<String, Integer> pair3 = new Pair<>("A", 1);
    
    assertTrue(pair1.equals(pair1)); // Reflexive property
    assertTrue(pair1.equals(pair3) && pair3.equals(pair1)); // Symmetric property
    assertTrue(pair1.equals(pair3) && pair3.equals(pair2) && pair2.equals(pair1)); // Transitive property
    assertFalse(pair1.equals(null)); // Non-nullity property
}



No.8 generated result --------------------------

@Test
public void equalsTest() {
    Pair<String, Integer> pair1 = new Pair<>("key", 1);
    Pair<String, Integer> pair2 = new Pair<>("key", 1);
    Pair<String, Integer> pair3 = new Pair<>("differentKey", 2);

    assertTrue(pair1.equals(pair2));
    assertFalse(pair1.equals(pair3));
}


No.9 generated result --------------------------

@Test
public void equalsTest() {
    Pair<String, Integer> pair1 = new Pair<>("one", 1);
    Pair<String, Integer> pair2 = new Pair<>("one", 1);
    Pair<String, Integer> pair3 = new Pair<>("two", 2);
  
    assertTrue(pair1.equals(pair2));
    assertFalse(pair1.equals(pair3));
}



No.10 generated result --------------------------

@Test
public void equalsTest() {
    Pair<Integer, String> firstPair = new Pair<>(1, "one");
    Pair<Integer, String> secondPair = new Pair<>(2, "two");

    assertFalse(firstPair.equals(secondPair));
}


