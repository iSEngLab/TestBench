{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compare the specified object with this entry for equality.\n     *\n     * @param o Object.\n     * @return {@code true} if the given object is also a map entry and\n     * the two entries represent the same mapping.\n     */",
    "source_code": "\n@Override\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (!(o instanceof Pair)) {\n        return false;\n    } else {\n        Pair<?, ?> oP = (Pair<?, ?>) o;\n        return (key == null ?\n                oP.key == null :\n                key.equals(oP.key)) &&\n            (value == null ?\n             oP.value == null :\n             value.equals(oP.value));\n    }\n}\n",
    "class_name": "Pair",
    "method_name": "equals",
    "arguments": [
        "Object o"
    ],
    "generate_test": [
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"key\", 1);\n    Pair<String, Integer> pair2 = new Pair<>(\"key\", 1);\n    Pair<String, Integer> pair3 = new Pair<>(\"key2\", 2);\n\n    // Test for equal pairs\n    assertTrue(pair1.equals(pair2));\n    \n    // Test for non-equal pairs\n    assertFalse(pair1.equals(pair3));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"A\", 1);\n    Pair<String, Integer> pair2 = new Pair<>(\"A\", 1);\n    Pair<String, Integer> pair3 = new Pair<>(\"B\", 2);\n    \n    assertTrue(pair1.equals(pair2));\n    assertFalse(pair1.equals(pair3));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"test\", 5);\n    Pair<String, Integer> pair2 = new Pair<>(\"test\", 5);\n    Pair<String, Integer> pair3 = new Pair<>(\"test\", 10);\n    \n    assertTrue(pair1.equals(pair2), \"Pairs are equal\");\n    assertFalse(pair1.equals(pair3), \"Pairs are not equal\");\n}",
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"key1\", 10);\n    Pair<String, Integer> pair2 = new Pair<>(\"key1\", 10);\n    Pair<String, Integer> pair3 = new Pair<>(\"key2\", 20);\n    \n    assertTrue(pair1.equals(pair2));\n    assertFalse(pair1.equals(pair3));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<Integer, String> pair1 = new Pair<Integer, String>(1, \"One\");\n    Pair<Integer, String> pair2 = new Pair<Integer, String>(1, \"One\");\n    \n    assertTrue(pair1.equals(pair2));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<Integer, String> pair1 = new Pair<>(1, \"One\");\n    Pair<Integer, String> pair2 = new Pair<>(1, \"One\");\n    assertTrue(pair1.equals(pair2));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<Integer, String> p1 = new Pair<>(1, \"One\");\n    Pair<Integer, String> p2 = new Pair<>(1, \"Two\");\n    assertFalse(p1.equals(null));\n    assertFalse(p1.equals(p2));\n    assertTrue(p1.equals(p1));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"A\", 1);\n    Pair<String, Integer> pair2 = new Pair<>(\"A\", 1);\n    assertTrue(pair1.equals(pair2));\n}",
        "Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\nPair<Integer, String> pair2 = new Pair<>(1, \"one\");\nassertEquals(pair1, pair2);",
        " @Test\n    public void equalsTest() {\n        Pair<String, Integer> p1 = Pair.create(\"A\", 1);\n        Pair<String, Integer> p2 = Pair.create(\"A\", 1);\n        Pair<String, Integer> p3 = Pair.create(\"B\", 2);\n\n        assertTrue(p1.equals(p2));\n        assertFalse(p1.equals(p3));\n    }"
    ]
}