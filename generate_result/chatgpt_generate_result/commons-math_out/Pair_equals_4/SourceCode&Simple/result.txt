Source code: 


@Override
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (!(o instanceof Pair)) {
        return false;
    } else {
        Pair<?, ?> oP = (Pair<?, ?>) o;
        return (key == null ?
                oP.key == null :
                key.equals(oP.key)) &&
            (value == null ?
             oP.value == null :
             value.equals(oP.value));
    }
}



No.1 generated result --------------------------

@Test
public void equalsTest() {
    Pair<String, Integer> pair1 = new Pair<>("key", 1);
    Pair<String, Integer> pair2 = new Pair<>("key", 1);
    Pair<String, Integer> pair3 = new Pair<>("key2", 2);

    // Test for equal pairs
    assertTrue(pair1.equals(pair2));
    
    // Test for non-equal pairs
    assertFalse(pair1.equals(pair3));
}


No.2 generated result --------------------------

@Test
public void equalsTest() {
    Pair<String, Integer> pair1 = new Pair<>("A", 1);
    Pair<String, Integer> pair2 = new Pair<>("A", 1);
    Pair<String, Integer> pair3 = new Pair<>("B", 2);
    
    assertTrue(pair1.equals(pair2));
    assertFalse(pair1.equals(pair3));
}


No.3 generated result --------------------------

@Test
public void equalsTest() {
    Pair<String, Integer> pair1 = new Pair<>("test", 5);
    Pair<String, Integer> pair2 = new Pair<>("test", 5);
    Pair<String, Integer> pair3 = new Pair<>("test", 10);
    
    assertTrue(pair1.equals(pair2), "Pairs are equal");
    assertFalse(pair1.equals(pair3), "Pairs are not equal");
}


No.4 generated result --------------------------

@Test
public void equalsTest() {
    Pair<String, Integer> pair1 = new Pair<>("key1", 10);
    Pair<String, Integer> pair2 = new Pair<>("key1", 10);
    Pair<String, Integer> pair3 = new Pair<>("key2", 20);
    
    assertTrue(pair1.equals(pair2));
    assertFalse(pair1.equals(pair3));
}


No.5 generated result --------------------------

@Test
public void equalsTest() {
    Pair<Integer, String> pair1 = new Pair<Integer, String>(1, "One");
    Pair<Integer, String> pair2 = new Pair<Integer, String>(1, "One");
    
    assertTrue(pair1.equals(pair2));
}


No.6 generated result --------------------------

@Test
public void equalsTest() {
    Pair<Integer, String> pair1 = new Pair<>(1, "One");
    Pair<Integer, String> pair2 = new Pair<>(1, "One");
    assertTrue(pair1.equals(pair2));
}


No.7 generated result --------------------------

@Test
public void equalsTest() {
    Pair<Integer, String> p1 = new Pair<>(1, "One");
    Pair<Integer, String> p2 = new Pair<>(1, "Two");
    assertFalse(p1.equals(null));
    assertFalse(p1.equals(p2));
    assertTrue(p1.equals(p1));
}


No.8 generated result --------------------------

@Test
public void equalsTest() {
    Pair<String, Integer> pair1 = new Pair<>("A", 1);
    Pair<String, Integer> pair2 = new Pair<>("A", 1);
    assertTrue(pair1.equals(pair2));
}


No.9 generated result --------------------------

Pair<Integer, String> pair1 = new Pair<>(1, "one");
Pair<Integer, String> pair2 = new Pair<>(1, "one");
assertEquals(pair1, pair2);


No.10 generated result --------------------------

 @Test
    public void equalsTest() {
        Pair<String, Integer> p1 = Pair.create("A", 1);
        Pair<String, Integer> p2 = Pair.create("A", 1);
        Pair<String, Integer> p3 = Pair.create("B", 2);

        assertTrue(p1.equals(p2));
        assertFalse(p1.equals(p3));
    }


