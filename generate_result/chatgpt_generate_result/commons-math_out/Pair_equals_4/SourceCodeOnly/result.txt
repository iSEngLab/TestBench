Source code: 


@Override
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (!(o instanceof Pair)) {
        return false;
    } else {
        Pair<?, ?> oP = (Pair<?, ?>) o;
        return (key == null ?
                oP.key == null :
                key.equals(oP.key)) &&
            (value == null ?
             oP.value == null :
             value.equals(oP.value));
    }
}



No.1 generated result --------------------------

@Test
public void equalsTest() {
    Pair<Integer, String> p1 = new Pair<>(1, "one");
    Pair<Integer, String> p2 = new Pair<>(1, "one");
    Pair<Integer, String> p3 = new Pair<>(2, "two");
    
    assertTrue(p1.equals(p2));
    assertFalse(p1.equals(p3));
}


No.2 generated result --------------------------

@Test
public void equalsTest() {
    Pair<String, Integer> pair1 = new Pair<>("A", 1);
    Pair<String, Integer> pair2 = new Pair<>("A", 1);
    Pair<String, Integer> pair3 = new Pair<>("B", 2);
    
    assertTrue(pair1.equals(pair2));
    assertFalse(pair1.equals(pair3));
}


No.3 generated result --------------------------

 @Test
public void equalsTest() {
    Pair<String, Integer> pair1 = new Pair<>("A", 1);
    Pair<String, Integer> pair2 = new Pair<>("A", 1);
    Pair<String, Integer> pair3 = new Pair<>("B", 2);

    assertTrue(pair1.equals(pair2));
    assertFalse(pair1.equals(pair3));
}


No.4 generated result --------------------------

@Test
public void equalsTest() {
    Pair<String, String> pair1 = new Pair<>("key", "value");
    Pair<String, String> pair2 = new Pair<>("key", "value");
    assertEquals(pair1, pair2);
}


No.5 generated result --------------------------

@Test
    public void equalsTest() {
        Pair<Integer, String> pair1 = new Pair<>(1, "apple");
        Pair<Integer, String> pair2 = new Pair<>(1, "apple");
        Pair<Integer, String> pair3 = new Pair<>(2, "orange");
        
        assertEquals(pair1, pair2);
        assertNotEquals(pair1, pair3);
    }


No.6 generated result --------------------------

@Test
public void equalsTest() {
    Pair<String, Integer> pair1 = new Pair<>("A", 1);
    Pair<String, Integer> pair2 = new Pair<>("A", 1);
    assertEquals(pair1, pair2);
}


No.7 generated result --------------------------

@Test
public void equalsTest() {
    Pair<String, Integer> pair1 = new Pair<>("A", 1);
    Pair<String, Integer> pair2 = new Pair<>("A", 1);
    assertTrue(pair1.equals(pair2));
}


No.8 generated result --------------------------

@Test
public void equalsTest() {
    Pair<String, Integer> pair1 = new Pair<>("A", 1);
    Pair<String, Integer> pair2 = new Pair<>("A", 1);
    Pair<String, Integer> pair3 = new Pair<>("B", 2);
    
    assertTrue(pair1.equals(pair2));
    assertFalse(pair1.equals(pair3));
}


No.9 generated result --------------------------

@Test
public void equalsTest() {
    Pair<Integer, String> pair1 = new Pair<>(1, "A");
    Pair<Integer, String> pair2 = new Pair<>(1, "A");
    Pair<Integer, String> pair3 = new Pair<>(2, "B");
    
    assertTrue(pair1.equals(pair2));
    assertFalse(pair1.equals(pair3));
}


No.10 generated result --------------------------

@Test
public void equalsTest() {
    Pair<Integer, String> pair1 = new Pair<>(1, "Hello");
    Pair<Integer, String> pair2 = new Pair<>(1, "Hello");
    Pair<Integer, String> pair3 = new Pair<>(2, "World");

    assertTrue(pair1.equals(pair2)); // Testing equality of pair1 and pair2
    assertFalse(pair1.equals(pair3)); // Testing inequality of pair1 and pair3
}


