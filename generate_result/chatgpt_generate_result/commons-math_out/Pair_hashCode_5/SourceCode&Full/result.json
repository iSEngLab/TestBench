{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compute a hash code.\n     *\n     * @return the hash code value.\n     */",
    "source_code": "\n@Override\npublic int hashCode() {\n    int result = key == null ? 0 : key.hashCode();\n\n    final int h = value == null ? 0 : value.hashCode();\n    result = 37 * result + h ^ (h >>> 16);\n\n    return result;\n}\n",
    "class_name": "Pair",
    "method_name": "hashCode",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"test\", 100);\n    int expectedHashCode = 31 * \"test\".hashCode() + 31 * 100;\n    assertEquals(expectedHashCode, pair.hashCode());\n}",
        "\n        Pair<String, Integer> pair = new Pair<>(\"test\", 5);\n        int expected = (pair.getFirst() == null ? 0 : pair.getFirst().hashCode());\n        final int h = (pair.getSecond() == null ? 0 : pair.getSecond().hashCode());\n        expected = 37 * expected + h ^ (h >>> 16);\n        int result = pair.hashCode();\n        assertEquals(expected, result);\n    ",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"test\", 100);\n    int expectedHashCode = pair.hashCode();\n    assertEquals(expectedHashCode, pair.hashCode());\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"test\", 5);\n    int expectedHashCode = pair.hashCode();\n    int actualHashCode = 37 * \"test\".hashCode() + 5 ^ (5 >>> 16);\n    assertEquals(expectedHashCode, actualHashCode);\n}",
        "@Test\n    public void hashCodeTest() {\n        Pair<Integer, String> pair = new Pair<>(1, \"test\");\n        int expected = pair.hashCode();\n        int actual = 31 * pair.getKey().hashCode() + pair.getValue().hashCode();\n        assertEquals(expected, actual);\n    }",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"test\", 5);\n    int expected = 37 * pair.getKey().hashCode() + pair.getValue().hashCode();\n    int result = pair.hashCode();\n    assertEquals(expected, result);\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"Test\", 10);\n    int hashCode = pair.hashCode();\n    int expectedResult = 37 * \"test\".hashCode() + 10 ^ (10 >>> 16);\n    assertEquals(expectedResult, hashCode);\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"test\", 123);\n    int expected = pair.hashCode();\n    int actual = 37 * \"test\".hashCode() + 123 ^ (123 >>> 16);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"key\", 123);\n    int expectedHashCode = pair.hashCode();\n\n    assertEquals(expectedHashCode, pair.hashCode());\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"key\", 5);\n    assertEquals(pair.hashCode(), pair.hashCode());\n}"
    ]
}