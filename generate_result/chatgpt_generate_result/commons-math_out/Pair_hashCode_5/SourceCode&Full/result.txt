Source code: 


@Override
public int hashCode() {
    int result = key == null ? 0 : key.hashCode();

    final int h = value == null ? 0 : value.hashCode();
    result = 37 * result + h ^ (h >>> 16);

    return result;
}



No.1 generated result --------------------------

@Test
public void hashCodeTest() {
    Pair<String, Integer> pair = new Pair<>("test", 100);
    int expectedHashCode = 31 * "test".hashCode() + 31 * 100;
    assertEquals(expectedHashCode, pair.hashCode());
}


No.2 generated result --------------------------


        Pair<String, Integer> pair = new Pair<>("test", 5);
        int expected = (pair.getFirst() == null ? 0 : pair.getFirst().hashCode());
        final int h = (pair.getSecond() == null ? 0 : pair.getSecond().hashCode());
        expected = 37 * expected + h ^ (h >>> 16);
        int result = pair.hashCode();
        assertEquals(expected, result);
    


No.3 generated result --------------------------

@Test
public void hashCodeTest() {
    Pair<String, Integer> pair = new Pair<>("test", 100);
    int expectedHashCode = pair.hashCode();
    assertEquals(expectedHashCode, pair.hashCode());
}


No.4 generated result --------------------------

@Test
public void hashCodeTest() {
    Pair<String, Integer> pair = new Pair<>("test", 5);
    int expectedHashCode = pair.hashCode();
    int actualHashCode = 37 * "test".hashCode() + 5 ^ (5 >>> 16);
    assertEquals(expectedHashCode, actualHashCode);
}


No.5 generated result --------------------------

@Test
    public void hashCodeTest() {
        Pair<Integer, String> pair = new Pair<>(1, "test");
        int expected = pair.hashCode();
        int actual = 31 * pair.getKey().hashCode() + pair.getValue().hashCode();
        assertEquals(expected, actual);
    }


No.6 generated result --------------------------

@Test
public void hashCodeTest() {
    Pair<String, Integer> pair = new Pair<>("test", 5);
    int expected = 37 * pair.getKey().hashCode() + pair.getValue().hashCode();
    int result = pair.hashCode();
    assertEquals(expected, result);
}


No.7 generated result --------------------------

@Test
public void hashCodeTest() {
    Pair<String, Integer> pair = new Pair<>("Test", 10);
    int hashCode = pair.hashCode();
    int expectedResult = 37 * "test".hashCode() + 10 ^ (10 >>> 16);
    assertEquals(expectedResult, hashCode);
}


No.8 generated result --------------------------

@Test
public void hashCodeTest() {
    Pair<String, Integer> pair = new Pair<>("test", 123);
    int expected = pair.hashCode();
    int actual = 37 * "test".hashCode() + 123 ^ (123 >>> 16);
    assertEquals(expected, actual);
}


No.9 generated result --------------------------

@Test
public void hashCodeTest() {
    Pair<String, Integer> pair = new Pair<>("key", 123);
    int expectedHashCode = pair.hashCode();

    assertEquals(expectedHashCode, pair.hashCode());
}


No.10 generated result --------------------------

@Test
public void hashCodeTest() {
    Pair<String, Integer> pair = new Pair<>("key", 5);
    assertEquals(pair.hashCode(), pair.hashCode());
}


