{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compute a hash code.\n     *\n     * @return the hash code value.\n     */",
    "source_code": "\n@Override\npublic int hashCode() {\n    int result = key == null ? 0 : key.hashCode();\n\n    final int h = value == null ? 0 : value.hashCode();\n    result = 37 * result + h ^ (h >>> 16);\n\n    return result;\n}\n",
    "class_name": "Pair",
    "method_name": "hashCode",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void hashCodeTest() {\n    Pair<Integer, String> pair = new Pair<>(5, \"test\");\n    int expected = 5 + \"test\".hashCode();\n    \n    assertEquals(expected, pair.hashCode());\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"test\", 100);\n    int expected = 123; // Replace with expected hash code value\n    int result = pair.hashCode();\n    assertEquals(expected, result);\n}",
        "@Test\n    public void hashCodeTest() {\n        Pair<String, Integer> pair = new Pair<>(\"key\", 123);\n        int expected = pair.hashCode();\n        assertEquals(expected, pair.hashCode());\n    }",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"key\", 5);\n    int expectedHashCode = 31 * (\"key\" == null ? 0 : \"key\".hashCode()) + (5 == null ? 0 : 5.hashCode());\n    assertEquals(expectedHashCode, pair.hashCode());\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<Integer, String> pair = Pair.create(1, \"test\");\n    assertEquals(1234567, pair.hashCode());\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"test\", 123);\n    int expectedHashCode = (pair.getKey() == null ? 0 : pair.getKey().hashCode()) * 37 +\n            (pair.getValue() == null ? 0 : pair.getValue().hashCode());\n    int result = pair.hashCode();\n    assertEquals(expectedHashCode, result);\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<Integer, String> pair = new Pair<>(5, \"test\");\n    int expected = 37 * (pair.getKey() == null ? 0 : pair.getKey().hashCode()) +\n                   (pair.getValue() == null ? 0 : pair.getValue().hashCode()) * (pair.getValue() == null ? 0 : pair.getValue().hashCode()) ^ \n                   ((pair.getValue() == null ? 0 : pair.getValue().hashCode()) >>> 16);\n    assertEquals(expected, pair.hashCode());\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"key\", 10);\n    int expectedHashCode = 31 * ((\"key\" == null ? 0 : \"key\".hashCode()) + (31 * (10 == null ? 0 : 10.hashCode())));\n\n    assertEquals(expectedHashCode, pair.hashCode());\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<Integer, String> pair = new Pair<>(1, \"test\");\n    int expectedHashCode = 31 * (pair.getKey() == null ? 0 : pair.getKey().hashCode()) + (pair.getValue() == null ? 0 : pair.getValue().hashCode());\n    int actualHashCode = pair.hashCode();\n    assertEquals(expectedHashCode, actualHashCode);\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"Test\", 100);\n    int expectedHashCode = 31 * (\"Test\" == null ? 0 : \"Test\".hashCode()) + (100 == null ? 0 : 100.hashCode());\n    int actualHashCode = pair.hashCode();\n    assertEquals(expectedHashCode, actualHashCode);\n}"
    ]
}