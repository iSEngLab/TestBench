{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compute a hash code.\n     *\n     * @return the hash code value.\n     */",
    "source_code": "\n@Override\npublic int hashCode() {\n    int result = key == null ? 0 : key.hashCode();\n\n    final int h = value == null ? 0 : value.hashCode();\n    result = 37 * result + h ^ (h >>> 16);\n\n    return result;\n}\n",
    "class_name": "Pair",
    "method_name": "hashCode",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void hashCodeTest() {\n    Pair pair = new Pair(\"testKey\", \"testValue\");\n    int expectedHashCode = 961548;\n    int actualHashCode = pair.hashCode();\n    assertEquals(expectedHashCode, actualHashCode);\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair pair = new Pair(\"testKey\", \"testValue\");\n    int expectedHashCode = 37 * (pair.getKey() == null ? 0 : pair.getKey().hashCode()) + (pair.getValue() == null ? 0 : pair.getValue().hashCode());\n    int actualHashCode = pair.hashCode();\n    assertEquals(expectedHashCode, actualHashCode);\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair pair = new Pair(\"testKey\", \"testValue\");\n    assertEquals(expectedHashCode, pair.hashCode());\n}",
        "@Test\npublic void hashCodeTest() {\n    String key = \"testKey\";\n    String value = \"testValue\";\n    Pair pair = new Pair(key, value);\n    \n    int expectedResult = 37 * (key == null ? 0 : key.hashCode()) + \n                        (value == null ? 0 : value.hashCode()) ^ \n                        ((value == null ? 0 : value.hashCode()) >>> 16);\n    \n    assertEquals(expectedResult, pair.hashCode());\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"test\", 5);\n    int expected = pair.getKey().hashCode() + 37 * pair.getValue().hashCode() ^ (pair.getValue().hashCode() >>> 16);\n    int actual = pair.hashCode();\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair pair = new Pair(\"testKey\", \"testValue\");\n    assertEquals(expectedHashCode, pair.hashCode());\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"Test\", 10);\n    int expectedHashCode = 31 * (pair.getKey() == null ? 0 : pair.getKey().hashCode()) + (pair.getValue() == null ? 0 : pair.getValue().hashCode());\n    int actualHashCode = pair.hashCode();\n    assertEquals(expectedHashCode, actualHashCode);\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"Test\", 5);\n    int expectedHashCode = 37 * (pair.getKey() == null ? 0 : pair.getKey().hashCode()) + (pair.getValue() == null ? 0 : pair.getValue().hashCode()) ^ ((pair.getValue() == null ? 0 : pair.getValue().hashCode()) >>> 16);\n    int actualHashCode = pair.hashCode();\n    assertEquals(expectedHashCode, actualHashCode);\n}",
        "@Test\npublic void hashCodeTest() {\n    String key = \"testKey\";\n    String value = \"testValue\";\n    Pair<String, String> pair = new Pair<>(key, value);\n    \n    int expectedHashCode = Objects.hash(key, value);\n    int actualHashCode = pair.hashCode();\n    \n    assertEquals(expectedHashCode, actualHashCode);\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"key1\", 100);\n    Pair<String, Integer> pair2 = new Pair<>(null, null);\n    \n    assertEquals(31 * (pair1.getKey() == null ? 0 : pair1.getKey().hashCode()) + (pair1.getValue() == null ? 0 : pair1.getValue().hashCode()), pair1.hashCode());\n    assertEquals(pair2.getKey() == null ? 0 : pair2.getKey().hashCode(), pair2.hashCode());\n}"
    ]
}