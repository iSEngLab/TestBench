Source code: 


@Override
public int hashCode() {
    int result = key == null ? 0 : key.hashCode();

    final int h = value == null ? 0 : value.hashCode();
    result = 37 * result + h ^ (h >>> 16);

    return result;
}



No.1 generated result --------------------------

@Test
public void hashCodeTest() {
    Pair pair = new Pair("testKey", "testValue");
    int expectedHashCode = 961548;
    int actualHashCode = pair.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
}


No.2 generated result --------------------------

@Test
public void hashCodeTest() {
    Pair pair = new Pair("testKey", "testValue");
    int expectedHashCode = 37 * (pair.getKey() == null ? 0 : pair.getKey().hashCode()) + (pair.getValue() == null ? 0 : pair.getValue().hashCode());
    int actualHashCode = pair.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
}


No.3 generated result --------------------------

@Test
public void hashCodeTest() {
    Pair pair = new Pair("testKey", "testValue");
    assertEquals(expectedHashCode, pair.hashCode());
}


No.4 generated result --------------------------

@Test
public void hashCodeTest() {
    String key = "testKey";
    String value = "testValue";
    Pair pair = new Pair(key, value);
    
    int expectedResult = 37 * (key == null ? 0 : key.hashCode()) + 
                        (value == null ? 0 : value.hashCode()) ^ 
                        ((value == null ? 0 : value.hashCode()) >>> 16);
    
    assertEquals(expectedResult, pair.hashCode());
}


No.5 generated result --------------------------

@Test
public void hashCodeTest() {
    Pair<String, Integer> pair = new Pair<>("test", 5);
    int expected = pair.getKey().hashCode() + 37 * pair.getValue().hashCode() ^ (pair.getValue().hashCode() >>> 16);
    int actual = pair.hashCode();
    assertEquals(expected, actual);
}


No.6 generated result --------------------------

@Test
public void hashCodeTest() {
    Pair pair = new Pair("testKey", "testValue");
    assertEquals(expectedHashCode, pair.hashCode());
}


No.7 generated result --------------------------

@Test
public void hashCodeTest() {
    Pair<String, Integer> pair = new Pair<>("Test", 10);
    int expectedHashCode = 31 * (pair.getKey() == null ? 0 : pair.getKey().hashCode()) + (pair.getValue() == null ? 0 : pair.getValue().hashCode());
    int actualHashCode = pair.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
}


No.8 generated result --------------------------

@Test
public void hashCodeTest() {
    Pair<String, Integer> pair = new Pair<>("Test", 5);
    int expectedHashCode = 37 * (pair.getKey() == null ? 0 : pair.getKey().hashCode()) + (pair.getValue() == null ? 0 : pair.getValue().hashCode()) ^ ((pair.getValue() == null ? 0 : pair.getValue().hashCode()) >>> 16);
    int actualHashCode = pair.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
}


No.9 generated result --------------------------

@Test
public void hashCodeTest() {
    String key = "testKey";
    String value = "testValue";
    Pair<String, String> pair = new Pair<>(key, value);
    
    int expectedHashCode = Objects.hash(key, value);
    int actualHashCode = pair.hashCode();
    
    assertEquals(expectedHashCode, actualHashCode);
}


No.10 generated result --------------------------

@Test
public void hashCodeTest() {
    Pair<String, Integer> pair1 = new Pair<>("key1", 100);
    Pair<String, Integer> pair2 = new Pair<>(null, null);
    
    assertEquals(31 * (pair1.getKey() == null ? 0 : pair1.getKey().hashCode()) + (pair1.getValue() == null ? 0 : pair1.getValue().hashCode()), pair1.hashCode());
    assertEquals(pair2.getKey() == null ? 0 : pair2.getKey().hashCode(), pair2.hashCode());
}


