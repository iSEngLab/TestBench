{
    "project_name": "javacv",
    "file_name": "AndroidFrameConverter.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/AndroidFrameConverter.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**\n     * Convert YUV 4:2:0 SP (NV21) data to BGR, as received, for example,\n     * via {@link Camera.PreviewCallback#onPreviewFrame(byte[],Camera)}.\n     */",
    "source_code": "\npublic Frame convert(byte[] data, int width, int height) {\n    if (frame == null || frame.imageWidth != width\n            || frame.imageHeight != height || frame.imageChannels != 3) {\n        if (frame != null) {\n            frame.close();\n        }\n        frame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);\n    }\n    ByteBuffer out = (ByteBuffer)frame.image[0];\n    int stride = frame.imageStride;\n\n    // ported from https://android.googlesource.com/platform/development/+/master/tools/yuv420sp2rgb/yuv420sp2rgb.c\n    int offset = height * width;\n    for (int i = 0; i < height; i++) {\n        for (int j = 0; j < width; j++) {\n            int Y = data[i * width + j] & 0xFF;\n            int V = data[offset + (i/2) * width + 2 * (j/2)    ] & 0xFF;\n            int U = data[offset + (i/2) * width + 2 * (j/2) + 1] & 0xFF;\n\n            // Yuv Convert\n            Y -= 16;\n            U -= 128;\n            V -= 128;\n\n            if (Y < 0)\n                Y = 0;\n\n            // R = (int)(1.164 * Y + 2.018 * U);\n            // G = (int)(1.164 * Y - 0.813 * V - 0.391 * U);\n            // B = (int)(1.164 * Y + 1.596 * V);\n\n            int B = (int)(1192 * Y + 2066 * U);\n            int G = (int)(1192 * Y - 833 * V - 400 * U);\n            int R = (int)(1192 * Y + 1634 * V);\n\n            R = Math.min(262143, Math.max(0, R));\n            G = Math.min(262143, Math.max(0, G));\n            B = Math.min(262143, Math.max(0, B));\n\n            R >>= 10; R &= 0xff;\n            G >>= 10; G &= 0xff;\n            B >>= 10; B &= 0xff;\n\n            out.put(i * stride + 3 * j,     (byte)B);\n            out.put(i * stride + 3 * j + 1, (byte)G);\n            out.put(i * stride + 3 * j + 2, (byte)R);\n        }\n    }\n    return frame;\n}\n",
    "class_name": "AndroidFrameConverter",
    "method_name": "convert",
    "arguments": [
        "byte[] data",
        "int width",
        "int height"
    ],
    "generate_test": [
        "@Test\npublic void convertYUVTest() {\n    byte[] data = new byte[100];\n    int width = 10;\n    int height = 10;\n    FrameConverter<Bitmap> converter = new AndroidFrameConverter();\n    Frame result = converter.convert(data, width, height);\n    assertNotNull(result);\n}",
        "public void convertTest() {\n    byte[] data = // sample data;\n    int width = // sample width;\n    int height = // sample height;\n    AndroidFrameConverter androidFrameConverter = new AndroidFrameConverter();\n    Frame expectedResult = androidFrameConverter.convert(data, width, height);\n    Frame actualResult = // call the method to be tested;\n    assertEquals(expectedResult, actualResult);\n}",
        "FrameConverter converter = new AndroidFrameConverter();\nFrame inputFrame = new Frame(640, 480, Frame.DEPTH_UBYTE, 3);\nBitmap bitmapOutput = converter.convert(inputFrame);\nFrame frameOutput = converter.convert(bitmapOutput);\nassertNotNull(bitmapOutput);\nassertNotNull(frameOutput);",
        "@Test\npublic void convertTest() {\n    AndroidFrameConverter converter = new AndroidFrameConverter();\n    byte[] data = new byte[10];\n    int width = 100;\n    int height = 100;\n    Frame result = converter.convert(data, width, height);\n    assertNotNull(result);\n}",
        "@Test\npublic void convertTest() {\n    byte[] data = {/* your test data here */};\n    int width = /* your test width here */;\n    int height = /* your test height here */;\n    Frame expected = new Frame(width, height, Frame.DEPTH_UBYTE, 3);\n\n    AndroidFrameConverter androidFrameConverter = new AndroidFrameConverter();\n    Frame result = androidFrameConverter.convert(data, width, height);\n\n    assertEquals(expected, result);\n}",
        "@Test\npublic void convertTest() {\n    byte[] data = new byte[100];\n    int width = 50;\n    int height = 50;\n\n    // Create an instance of the AndroidFrameConverter class\n    AndroidFrameConverter converter = new AndroidFrameConverter();\n\n    // Call the convert method with the given data, width, and height\n    Frame result = converter.convert(data, width, height);\n    \n    // Add assertions to verify the result\n    assertNotNull(result);\n    assertEquals(width, result.imageWidth);\n    assertEquals(height, result.imageHeight);\n}",
        " @Test\n    public void convertTest() {\n        byte[] data = new byte[100];\n        int width = 10;\n        int height = 10;\n        AndroidFrameConverter converter = new AndroidFrameConverter();\n        Frame result = converter.convert(data, width, height);\n        assertNotNull(result);\n    }",
        "@Test\npublic void convertTest() {\n    byte[] data = new byte[100]; // replace with actual data\n    int width = 10;\n    int height = 10;\n    \n    Frame frame = convert(data, width, height);\n    assertNotNull(frame);\n}",
        "@Test\npublic void convertTest() {\n    AndroidFrameConverter converter = new AndroidFrameConverter();\n    byte[] data = new byte[]{ /* test data */ };\n    int width = 640;\n    int height = 480;\n    Frame result = converter.convert(data, width, height);\n    assertNotNull(result);\n}",
        "Frame frame = // create a new Frame object with the necessary parameters\nbyte[] data = { /* fill with sample data */ };\nint width = // specify the width;\nint height = // specify the height;\n\nAndroidFrameConverter androidFrameConverter = new AndroidFrameConverter();\nFrame result = androidFrameConverter.convert(data, width, height);\n\n// Add assertions to verify the correctness of the conversion\n// For example:\n// assertEquals(expectedResult, result);"
    ]
}