Source code: 


public Frame convert(byte[] data, int width, int height) {
    if (frame == null || frame.imageWidth != width
            || frame.imageHeight != height || frame.imageChannels != 3) {
        if (frame != null) {
            frame.close();
        }
        frame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);
    }
    ByteBuffer out = (ByteBuffer)frame.image[0];
    int stride = frame.imageStride;

    // ported from https://android.googlesource.com/platform/development/+/master/tools/yuv420sp2rgb/yuv420sp2rgb.c
    int offset = height * width;
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            int Y = data[i * width + j] & 0xFF;
            int V = data[offset + (i/2) * width + 2 * (j/2)    ] & 0xFF;
            int U = data[offset + (i/2) * width + 2 * (j/2) + 1] & 0xFF;

            // Yuv Convert
            Y -= 16;
            U -= 128;
            V -= 128;

            if (Y < 0)
                Y = 0;

            // R = (int)(1.164 * Y + 2.018 * U);
            // G = (int)(1.164 * Y - 0.813 * V - 0.391 * U);
            // B = (int)(1.164 * Y + 1.596 * V);

            int B = (int)(1192 * Y + 2066 * U);
            int G = (int)(1192 * Y - 833 * V - 400 * U);
            int R = (int)(1192 * Y + 1634 * V);

            R = Math.min(262143, Math.max(0, R));
            G = Math.min(262143, Math.max(0, G));
            B = Math.min(262143, Math.max(0, B));

            R >>= 10; R &= 0xff;
            G >>= 10; G &= 0xff;
            B >>= 10; B &= 0xff;

            out.put(i * stride + 3 * j,     (byte)B);
            out.put(i * stride + 3 * j + 1, (byte)G);
            out.put(i * stride + 3 * j + 2, (byte)R);
        }
    }
    return frame;
}



No.1 generated result --------------------------

@Test
public void convertYUVTest() {
    byte[] data = new byte[100];
    int width = 10;
    int height = 10;
    FrameConverter<Bitmap> converter = new AndroidFrameConverter();
    Frame result = converter.convert(data, width, height);
    assertNotNull(result);
}


No.2 generated result --------------------------

public void convertTest() {
    byte[] data = // sample data;
    int width = // sample width;
    int height = // sample height;
    AndroidFrameConverter androidFrameConverter = new AndroidFrameConverter();
    Frame expectedResult = androidFrameConverter.convert(data, width, height);
    Frame actualResult = // call the method to be tested;
    assertEquals(expectedResult, actualResult);
}


No.3 generated result --------------------------

FrameConverter converter = new AndroidFrameConverter();
Frame inputFrame = new Frame(640, 480, Frame.DEPTH_UBYTE, 3);
Bitmap bitmapOutput = converter.convert(inputFrame);
Frame frameOutput = converter.convert(bitmapOutput);
assertNotNull(bitmapOutput);
assertNotNull(frameOutput);


No.4 generated result --------------------------

@Test
public void convertTest() {
    AndroidFrameConverter converter = new AndroidFrameConverter();
    byte[] data = new byte[10];
    int width = 100;
    int height = 100;
    Frame result = converter.convert(data, width, height);
    assertNotNull(result);
}


No.5 generated result --------------------------

@Test
public void convertTest() {
    byte[] data = {/* your test data here */};
    int width = /* your test width here */;
    int height = /* your test height here */;
    Frame expected = new Frame(width, height, Frame.DEPTH_UBYTE, 3);

    AndroidFrameConverter androidFrameConverter = new AndroidFrameConverter();
    Frame result = androidFrameConverter.convert(data, width, height);

    assertEquals(expected, result);
}


No.6 generated result --------------------------

@Test
public void convertTest() {
    byte[] data = new byte[100];
    int width = 50;
    int height = 50;

    // Create an instance of the AndroidFrameConverter class
    AndroidFrameConverter converter = new AndroidFrameConverter();

    // Call the convert method with the given data, width, and height
    Frame result = converter.convert(data, width, height);
    
    // Add assertions to verify the result
    assertNotNull(result);
    assertEquals(width, result.imageWidth);
    assertEquals(height, result.imageHeight);
}


No.7 generated result --------------------------

 @Test
    public void convertTest() {
        byte[] data = new byte[100];
        int width = 10;
        int height = 10;
        AndroidFrameConverter converter = new AndroidFrameConverter();
        Frame result = converter.convert(data, width, height);
        assertNotNull(result);
    }


No.8 generated result --------------------------

@Test
public void convertTest() {
    byte[] data = new byte[100]; // replace with actual data
    int width = 10;
    int height = 10;
    
    Frame frame = convert(data, width, height);
    assertNotNull(frame);
}


No.9 generated result --------------------------

@Test
public void convertTest() {
    AndroidFrameConverter converter = new AndroidFrameConverter();
    byte[] data = new byte[]{ /* test data */ };
    int width = 640;
    int height = 480;
    Frame result = converter.convert(data, width, height);
    assertNotNull(result);
}


No.10 generated result --------------------------

Frame frame = // create a new Frame object with the necessary parameters
byte[] data = { /* fill with sample data */ };
int width = // specify the width;
int height = // specify the height;

AndroidFrameConverter androidFrameConverter = new AndroidFrameConverter();
Frame result = androidFrameConverter.convert(data, width, height);

// Add assertions to verify the correctness of the conversion
// For example:
// assertEquals(expectedResult, result);


