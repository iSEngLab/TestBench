{
    "project_name": "javacv",
    "file_name": "AndroidFrameConverter.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/AndroidFrameConverter.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**\n     * Convert YUV 4:2:0 SP (NV21) data to BGR, as received, for example,\n     * via {@link Camera.PreviewCallback#onPreviewFrame(byte[],Camera)}.\n     */",
    "source_code": "\npublic Frame convert(byte[] data, int width, int height) {\n    if (frame == null || frame.imageWidth != width\n            || frame.imageHeight != height || frame.imageChannels != 3) {\n        if (frame != null) {\n            frame.close();\n        }\n        frame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);\n    }\n    ByteBuffer out = (ByteBuffer)frame.image[0];\n    int stride = frame.imageStride;\n\n    // ported from https://android.googlesource.com/platform/development/+/master/tools/yuv420sp2rgb/yuv420sp2rgb.c\n    int offset = height * width;\n    for (int i = 0; i < height; i++) {\n        for (int j = 0; j < width; j++) {\n            int Y = data[i * width + j] & 0xFF;\n            int V = data[offset + (i/2) * width + 2 * (j/2)    ] & 0xFF;\n            int U = data[offset + (i/2) * width + 2 * (j/2) + 1] & 0xFF;\n\n            // Yuv Convert\n            Y -= 16;\n            U -= 128;\n            V -= 128;\n\n            if (Y < 0)\n                Y = 0;\n\n            // R = (int)(1.164 * Y + 2.018 * U);\n            // G = (int)(1.164 * Y - 0.813 * V - 0.391 * U);\n            // B = (int)(1.164 * Y + 1.596 * V);\n\n            int B = (int)(1192 * Y + 2066 * U);\n            int G = (int)(1192 * Y - 833 * V - 400 * U);\n            int R = (int)(1192 * Y + 1634 * V);\n\n            R = Math.min(262143, Math.max(0, R));\n            G = Math.min(262143, Math.max(0, G));\n            B = Math.min(262143, Math.max(0, B));\n\n            R >>= 10; R &= 0xff;\n            G >>= 10; G &= 0xff;\n            B >>= 10; B &= 0xff;\n\n            out.put(i * stride + 3 * j,     (byte)B);\n            out.put(i * stride + 3 * j + 1, (byte)G);\n            out.put(i * stride + 3 * j + 2, (byte)R);\n        }\n    }\n    return frame;\n}\n",
    "class_name": "AndroidFrameConverter",
    "method_name": "convert",
    "arguments": [
        "byte[] data",
        "int width",
        "int height"
    ],
    "generate_test": [
        "@Test\npublic void convertTest() {\n    byte[] data = new byte[640*480*3];\n    int width = 640;\n    int height = 480;\n    \n    AndroidFrameConverter converter = new AndroidFrameConverter();\n    Frame result = converter.convert(data, width, height);\n    \n    assertNotNull(result);\n    // Add additional assertions as needed to verify the behavior of the convert method\n}",
        "public void convertTest() {\n    AndroidFrameConverter converter = new AndroidFrameConverter();\n    byte[] testData = new byte[100];\n    int testWidth = 10;\n    int testHeight = 10;\n    Frame expectedFrame = new Frame(testWidth, testHeight, Frame.DEPTH_UBYTE, 3);\n    expectedFrame.image[0] = ByteBuffer.allocateDirect(3 * testWidth * testHeight);\n    \n    Frame actualFrame = converter.convert(testData, testWidth, testHeight);\n    \n    // Perform assertions to compare actualFrame with expectedFrame\n}",
        "public void convertTest() {\n    byte[] data = new byte[10]; // Replace with actual data\n    int width = 640; // Replace with actual width\n    int height = 480; // Replace with actual height\n    \n    AndroidFrameConverter converter = new AndroidFrameConverter();\n    Frame frame = converter.convert(data, width, height);\n    \n    assertNotNull(frame);\n    // Add more assertions as needed\n}",
        "@Test\npublic void convertTest() {\n    byte[] testData = new byte[100];\n    int testWidth = 10;\n    int testHeight = 10;\n    Frame expectedOutput = new Frame(testWidth, testHeight, Frame.DEPTH_UBYTE, 3);\n    AndroidFrameConverter converter = new AndroidFrameConverter();\n    \n    // Call the method to be tested\n    Frame actualOutput = converter.convert(testData, testWidth, testHeight);\n    \n    // Compare actual output with expected output\n    assertEquals(expectedOutput, actualOutput);\n}",
        "@Test\npublic void convertTest() {\n    AndroidFrameConverter converter = new AndroidFrameConverter();\n    byte[] data = {1, 2, 3, 4, 5, 6}; // Example byte array\n    int width = 640; // Example width\n    int height = 480; // Example height\n    Frame result = converter.convert(data, width, height);\n    assertNotNull(result);\n}",
        "public void convertTest() {\n    AndroidFrameConverter androidFrameConverter = new AndroidFrameConverter();\n    byte[] data = new byte[]{/*array elements*/};\n    int width = 640;\n    int height = 480;\n    Frame frame = androidFrameConverter.convert(data, width, height);\n    assertNotNull(frame);\n}",
        "@Test\npublic void convertTest() {\n    // Create test data\n    byte[] data = new byte[100];\n    int width = 10;\n    int height = 10;\n\n    // Create a new AndroidFrameConverter\n    AndroidFrameConverter converter = new AndroidFrameConverter();\n\n    // Call the convert method\n    Frame result = converter.convert(data, width, height);\n\n    // Assert that the result is not null\n    assertNotNull(result);\n}",
        "    // Given\n    byte[] data = new byte[/* specify the length of the byte array */];\n    int width = /* specify the width */;\n    int height = /* specify the height */;\n    \n    // When\n    AndroidFrameConverter converter = new AndroidFrameConverter();\n    Frame result = converter.convert(data, width, height);\n    \n    // Then\n    assertNotNull(result);",
        "@Test\npublic void convertTest() {\n    byte[] data = [12, 34, 56, 78, 90, 12, 34, 56, 78, 90];\n    int width = 2;\n    int height = 2;\n    AndroidFrameConverter afc = new AndroidFrameConverter();\n    Frame result = afc.convert(data, width, height);\n    assertNotNull(result);\n}",
        "@Test\npublic void convertTest() {\n    byte[] data = new byte[100];\n    int width = 30;\n    int height = 30;\n    \n    AndroidFrameConverter converter = new AndroidFrameConverter();\n    Frame frame = converter.convert(data, width, height);\n    \n    assertNotNull(frame);\n}"
    ]
}