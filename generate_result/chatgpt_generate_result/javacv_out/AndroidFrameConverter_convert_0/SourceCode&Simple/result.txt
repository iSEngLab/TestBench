Source code: 


public Frame convert(byte[] data, int width, int height) {
    if (frame == null || frame.imageWidth != width
            || frame.imageHeight != height || frame.imageChannels != 3) {
        if (frame != null) {
            frame.close();
        }
        frame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);
    }
    ByteBuffer out = (ByteBuffer)frame.image[0];
    int stride = frame.imageStride;

    // ported from https://android.googlesource.com/platform/development/+/master/tools/yuv420sp2rgb/yuv420sp2rgb.c
    int offset = height * width;
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            int Y = data[i * width + j] & 0xFF;
            int V = data[offset + (i/2) * width + 2 * (j/2)    ] & 0xFF;
            int U = data[offset + (i/2) * width + 2 * (j/2) + 1] & 0xFF;

            // Yuv Convert
            Y -= 16;
            U -= 128;
            V -= 128;

            if (Y < 0)
                Y = 0;

            // R = (int)(1.164 * Y + 2.018 * U);
            // G = (int)(1.164 * Y - 0.813 * V - 0.391 * U);
            // B = (int)(1.164 * Y + 1.596 * V);

            int B = (int)(1192 * Y + 2066 * U);
            int G = (int)(1192 * Y - 833 * V - 400 * U);
            int R = (int)(1192 * Y + 1634 * V);

            R = Math.min(262143, Math.max(0, R));
            G = Math.min(262143, Math.max(0, G));
            B = Math.min(262143, Math.max(0, B));

            R >>= 10; R &= 0xff;
            G >>= 10; G &= 0xff;
            B >>= 10; B &= 0xff;

            out.put(i * stride + 3 * j,     (byte)B);
            out.put(i * stride + 3 * j + 1, (byte)G);
            out.put(i * stride + 3 * j + 2, (byte)R);
        }
    }
    return frame;
}



No.1 generated result --------------------------

@Test
public void convertTest() {
    byte[] data = new byte[640*480*3];
    int width = 640;
    int height = 480;
    
    AndroidFrameConverter converter = new AndroidFrameConverter();
    Frame result = converter.convert(data, width, height);
    
    assertNotNull(result);
    // Add additional assertions as needed to verify the behavior of the convert method
}


No.2 generated result --------------------------

public void convertTest() {
    AndroidFrameConverter converter = new AndroidFrameConverter();
    byte[] testData = new byte[100];
    int testWidth = 10;
    int testHeight = 10;
    Frame expectedFrame = new Frame(testWidth, testHeight, Frame.DEPTH_UBYTE, 3);
    expectedFrame.image[0] = ByteBuffer.allocateDirect(3 * testWidth * testHeight);
    
    Frame actualFrame = converter.convert(testData, testWidth, testHeight);
    
    // Perform assertions to compare actualFrame with expectedFrame
}


No.3 generated result --------------------------

public void convertTest() {
    byte[] data = new byte[10]; // Replace with actual data
    int width = 640; // Replace with actual width
    int height = 480; // Replace with actual height
    
    AndroidFrameConverter converter = new AndroidFrameConverter();
    Frame frame = converter.convert(data, width, height);
    
    assertNotNull(frame);
    // Add more assertions as needed
}


No.4 generated result --------------------------

@Test
public void convertTest() {
    byte[] testData = new byte[100];
    int testWidth = 10;
    int testHeight = 10;
    Frame expectedOutput = new Frame(testWidth, testHeight, Frame.DEPTH_UBYTE, 3);
    AndroidFrameConverter converter = new AndroidFrameConverter();
    
    // Call the method to be tested
    Frame actualOutput = converter.convert(testData, testWidth, testHeight);
    
    // Compare actual output with expected output
    assertEquals(expectedOutput, actualOutput);
}


No.5 generated result --------------------------

@Test
public void convertTest() {
    AndroidFrameConverter converter = new AndroidFrameConverter();
    byte[] data = {1, 2, 3, 4, 5, 6}; // Example byte array
    int width = 640; // Example width
    int height = 480; // Example height
    Frame result = converter.convert(data, width, height);
    assertNotNull(result);
}


No.6 generated result --------------------------

public void convertTest() {
    AndroidFrameConverter androidFrameConverter = new AndroidFrameConverter();
    byte[] data = new byte[]{/*array elements*/};
    int width = 640;
    int height = 480;
    Frame frame = androidFrameConverter.convert(data, width, height);
    assertNotNull(frame);
}


No.7 generated result --------------------------

@Test
public void convertTest() {
    // Create test data
    byte[] data = new byte[100];
    int width = 10;
    int height = 10;

    // Create a new AndroidFrameConverter
    AndroidFrameConverter converter = new AndroidFrameConverter();

    // Call the convert method
    Frame result = converter.convert(data, width, height);

    // Assert that the result is not null
    assertNotNull(result);
}


No.8 generated result --------------------------

    // Given
    byte[] data = new byte[/* specify the length of the byte array */];
    int width = /* specify the width */;
    int height = /* specify the height */;
    
    // When
    AndroidFrameConverter converter = new AndroidFrameConverter();
    Frame result = converter.convert(data, width, height);
    
    // Then
    assertNotNull(result);


No.9 generated result --------------------------

@Test
public void convertTest() {
    byte[] data = [12, 34, 56, 78, 90, 12, 34, 56, 78, 90];
    int width = 2;
    int height = 2;
    AndroidFrameConverter afc = new AndroidFrameConverter();
    Frame result = afc.convert(data, width, height);
    assertNotNull(result);
}


No.10 generated result --------------------------

@Test
public void convertTest() {
    byte[] data = new byte[100];
    int width = 30;
    int height = 30;
    
    AndroidFrameConverter converter = new AndroidFrameConverter();
    Frame frame = converter.convert(data, width, height);
    
    assertNotNull(frame);
}


