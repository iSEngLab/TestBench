Source code: 

// Determine the prior (lower number) region that meets the desired conditions
public static int PriorRegion(int Parent, int Color, double MinArea, double MaxArea, int Label)
{
    double DParent = (double) Parent; 
    double DColor = (double) Color; if(DColor > 0) DColor = 1;
    
    int i;
    for(i = Label; i >= 0; i--)
    {
        double [] Region = RegionData[i];
        double ThisParent = Region[BLOBPARENT];
        double ThisColor = Region[BLOBCOLOR];
        if(DParent >= 0 && DParent != ThisParent) continue;
        if(DColor >= 0 && DColor != ThisColor) continue;
        if(Region[BLOBAREA] < MinArea || Region[BLOBAREA] > MaxArea) continue;  
        break;      // We have a match!
    }
    if(i < 0) i = -1;   // Use -1 to flag that there was no match
    return i;
}



No.1 generated result --------------------------

@Test
public void PriorRegionTest() {
    int result = PriorRegion(1, 2, 3.0, 5.0, 4);
    assertEquals(-1, result);
}


No.2 generated result --------------------------

@Test
public void PriorRegionTest() {
    int Parent = 2;
    int Color = 1;
    double MinArea = 10.0;
    double MaxArea = 20.0;
    int Label = 5;
    
    int result = Blobs.PriorRegion(Parent, Color, MinArea, MaxArea, Label);
    assertEquals(-1, result);
}


No.3 generated result --------------------------

@Test
public void PriorRegionTest() {
    int Parent = 1;
    int Color = 1;
    double MinArea = 1.0;
    double MaxArea = 10.0;
    int Label = 0; // Example label value

    int expected = -1; // Example expected value

    int result = Blobs.PriorRegion(Parent, Color, MinArea, MaxArea, Label);

    assertEquals(expected, result);
}


No.4 generated result --------------------------

@Test
public void PriorRegionTest() {
    int Parent = 5;
    int Color = 1;
    double MinArea = 10.0;
    double MaxArea = 100.0;
    int Label = 3;
    int result = Blobs.PriorRegion(Parent, Color, MinArea, MaxArea, Label);
    assertEquals(expectedResult, result);
}


No.5 generated result --------------------------

@Test
public void PriorRegionTest() {
    int Parent = 1;
    int Color = 0;
    double MinArea = 10.0;
    double MaxArea = 100.0;
    int Label = 5;
    int result = Blobs.PriorRegion(Parent, Color, MinArea, MaxArea, Label);
    assertEquals(-1, result);
}


No.6 generated result --------------------------

@Test
public void PriorRegionTest() {
    int label = 1;
    int result = Blobs.PriorRegion(1, 1, 0.0, 100.0, label);
    assertEquals(-1, result);
}


No.7 generated result --------------------------

@Test
public void PriorRegionTest() {
    int result = Blobs.PriorRegion(0, 1, 10.0, 20.0, 1);
    assertEquals(-1, result);
}


No.8 generated result --------------------------

@Test
public void PriorRegionTest() {
    int parent = 1;
    int color = 0;
    double minArea = 10.0;
    double maxArea = 100.0;
    int label = 1;
    int result = Blobs.PriorRegion(parent, color, minArea, maxArea, label);
    assertEquals(1, result);
}


No.9 generated result --------------------------

@Test
public void PriorRegionTest() {
    int result = Blobs.PriorRegion(1, 2, 3.0, 4.0, 5);
    assertEquals(-1, result);
}


No.10 generated result --------------------------

@Test
public void PriorRegionTest() {
    int expected = -1; // Since PriorRegion() returns -1 when there is no match
    int actual = Blobs.PriorRegion(0, 1, 10.0, 100.0, 1); // Example input values
    assertEquals(expected, actual);
}


