Source code: 

// Determine the prior (lower number) region that meets the desired conditions
public static int PriorRegion(int Parent, int Color, double MinArea, double MaxArea, int Label)
{
    double DParent = (double) Parent; 
    double DColor = (double) Color; if(DColor > 0) DColor = 1;
    
    int i;
    for(i = Label; i >= 0; i--)
    {
        double [] Region = RegionData[i];
        double ThisParent = Region[BLOBPARENT];
        double ThisColor = Region[BLOBCOLOR];
        if(DParent >= 0 && DParent != ThisParent) continue;
        if(DColor >= 0 && DColor != ThisColor) continue;
        if(Region[BLOBAREA] < MinArea || Region[BLOBAREA] > MaxArea) continue;  
        break;      // We have a match!
    }
    if(i < 0) i = -1;   // Use -1 to flag that there was no match
    return i;
}



No.1 generated result --------------------------

@Test
public void PriorRegionTest() {
    int result = PriorRegion(2, 1, 30.5, 45.0, 3);
    assertEquals(2, result);
}


No.2 generated result --------------------------

@Test
public void PriorRegionTest() {
    int parent = 3;
    int color = 1;
    double minArea = 10.0;
    double maxArea = 100.0;
    int label = 0;
    int result = PriorRegion(parent, color, minArea, maxArea, label);
    assertEquals(-1, result);
}


No.3 generated result --------------------------

@Test
public void PriorRegionTest() {
    int parent = 5;
    int color = 1;
    double minArea = 100.0;
    double maxArea = 200.0;
    int label = 3;
    int expected = 2; // Expected output based on test case
    int result = Blobs.PriorRegion(parent, color, minArea, maxArea, label);
    assertEquals(expected, result);
}


No.4 generated result --------------------------

@Test
public void PriorRegionTest() {
    int result = PriorRegion(4, 1, 10, 100, 3);
    assertEquals(2, result);
}


No.5 generated result --------------------------

@Test
public void PriorRegionTest() {
    int Parent = <FILL>;
    int Color = <FILL>;
    double MinArea = <FILL>;
    double MaxArea = <FILL>;
    int Label = <FILL>;

    int expected = <FILL>;  // Expected output value
    int actual = Blobs.PriorRegion(Parent, Color, MinArea, MaxArea, Label);
    assertEquals(expected, actual);
}


No.6 generated result --------------------------

@Test
public void PriorRegionTest() {
    int result = PriorRegion(10, 1, 20.0, 50.0, 1);
    assertEquals(-1, result);
}


No.7 generated result --------------------------

@Test
public void PriorRegionTest() {
    int result = Blobs.PriorRegion(5, 1, 10.0, 50.0, 3);
    assertEquals(-1, result);
}


No.8 generated result --------------------------

@Test
public void PriorRegionTest() {
    int result = PriorRegion(2, 1, 10.0, 20.0, 3);
    assertEquals(-1, result);
}


No.9 generated result --------------------------

@Test
public void PriorRegionTest() {
    int parent = 5;
    int color = 3;
    double minArea = 25.5;
    double maxArea = 100.0;
    int label = 2;
    
    int result = Blobs.PriorRegion(parent, color, minArea, maxArea, label);
    
    assertEquals(-1, result);
}


No.10 generated result --------------------------

@Test
public void PriorRegionTest() {
    int result = PriorRegion(1, 2, 10.0, 20.0, 5);
    assertEquals(-1, result);
}


