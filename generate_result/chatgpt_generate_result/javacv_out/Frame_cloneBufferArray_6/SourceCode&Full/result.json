{
    "project_name": "javacv",
    "file_name": "Frame.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/Frame.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**\n     * This private method takes a buffer array as input and returns a deep copy.\n     * It is assumed that all buffers in the input array are of the same subclass.\n     *\n     * @param srcBuffers - Buffer array to be cloned\n     * @param clonedBuffers - Buffer array to fill with clones\n     * @return Opaque object to store\n     *\n     *  @author Extension proposed by Dragos Dutu\n     */",
    "source_code": "\nprivate static Pointer cloneBufferArray(Buffer[] srcBuffers, Buffer[] clonedBuffers) {\n    Pointer opaque = null;\n\n    if (srcBuffers != null && srcBuffers.length > 0) {\n        int totalCapacity = 0;\n        for (int i = 0; i < srcBuffers.length; i++) {\n            srcBuffers[i].rewind();\n            totalCapacity += srcBuffers[i].capacity();\n        }\n\n        /*\n         * In order to optimize the transfer we need a type check.\n         *\n         * Most CPUs support hardware memory transfer for different data\n         * types, so it's faster to copy more bytes at once rather\n         * than one byte per iteration as in case of ByteBuffer.\n         *\n         * For example, Intel CPUs support MOVSB (byte transfer), MOVSW\n         * (word transfer), MOVSD (double word transfer), MOVSS (32 bit\n         * scalar single precision floating point), MOVSQ (quad word\n         * transfer) and so on...\n         *\n         * Type checking may be improved by changing the order in\n         * which a buffer is checked against. If it's likely that the\n         * expected buffer is of type \"ShortBuffer\", then it should be\n         * checked at first place.\n         *\n         */\n\n        if (srcBuffers[0] instanceof ByteBuffer) {\n            BytePointer pointer = new BytePointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((ByteBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof ShortBuffer) {\n            ShortPointer pointer = new ShortPointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((ShortBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof IntBuffer) {\n            IntPointer pointer = new IntPointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((IntBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof LongBuffer) {\n            LongPointer pointer = new LongPointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((LongBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof FloatBuffer) {\n            FloatPointer pointer = new FloatPointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((FloatBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof DoubleBuffer) {\n            DoublePointer pointer = new DoublePointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((DoubleBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        }\n\n        for (int i = 0; i < srcBuffers.length; i++) {\n            srcBuffers[i].rewind();\n            clonedBuffers[i].rewind();\n        }\n    }\n\n    if (opaque != null) {\n        opaque.retainReference();\n    }\n    return opaque;\n}\n",
    "class_name": "Frame",
    "method_name": "cloneBufferArray",
    "arguments": [
        "Buffer srcBuffers",
        "Buffer clonedBuffers"
    ],
    "generate_test": [
        "@Test\npublic void cloneBufferArrayTest() {\n    Buffer[] srcBuffers = new Buffer[1];\n    Buffer[] clonedBuffers = new Buffer[1];\n    srcBuffers[0] = ByteBuffer.allocate(10);\n\n    Pointer result = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n    assertNotNull(result);\n}",
        "@Test\npublic void cloneBufferArrayTest() {\n    // create source and cloned buffers\n    Buffer[] srcBuffers = new Buffer[2];\n    Buffer[] clonedBuffers = new Buffer[2];\n\n    // create and fill srcBuffers\n    ByteBuffer buffer1 = ByteBuffer.allocateDirect(16);\n    buffer1.put(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16});\n    buffer1.rewind();\n    srcBuffers[0] = buffer1;\n\n    ShortBuffer buffer2 = ShortBuffer.allocate(4);\n    buffer2.put(new short[]{17, 18, 19, 20});\n    buffer2.rewind();\n    srcBuffers[1] = buffer2;\n\n    // clone the buffer array\n    Pointer opaque = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n\n    // assert that clonedBuffers are not null and have been filled\n    assertNotNull(clonedBuffers[0]);\n    assertNotNull(clonedBuffers[1]);\n    assertEquals(buffer1, clonedBuffers[0]);\n    assertEquals(buffer2, clonedBuffers[1]);\n}",
        "@Test\npublic void cloneBufferArrayTest() {\n    Buffer[] srcBuffers = new Buffer[1];\n    Buffer[] clonedBuffers = new Buffer[1];\n    srcBuffers[0] = ByteBuffer.allocate(100);\n    Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n    assertNotNull(clonedBuffers[0]);\n}",
        "@Test\npublic void cloneBufferArrayTest() {\n    Buffer[] srcBuffers = new Buffer[1];\n    Buffer[] clonedBuffers = new Buffer[1];\n    srcBuffers[0] = ByteBuffer.allocateDirect(16);\n    FrameTest.cloneBufferArray(srcBuffers, clonedBuffers);\n    assertNotNull(clonedBuffers[0]);\n}",
        "@Test\npublic void cloneBufferArrayTest() {\n    // Create sample buffers\n    ByteBuffer byteBuffer = ByteBuffer.allocate(10);\n    ShortBuffer shortBuffer = ShortBuffer.allocate(10);\n    IntBuffer intBuffer = IntBuffer.allocate(10);\n    \n    // Create an array of Buffer to be cloned\n    Buffer[] srcBuffers = {byteBuffer, shortBuffer, intBuffer};\n    \n    // Create an array to hold the cloned buffers\n    Buffer[] clonedBuffers = new Buffer[srcBuffers.length];\n    \n    // Run the cloneBufferArray method and check the output\n    Pointer result = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n    \n    assertNotNull(result);\n    assertEquals(result.limit(), 30);\n}",
        "@Test\npublic void cloneBufferArrayTest() {\n    Buffer[] srcBuffers = new Buffer[3];\n    Buffer[] clonedBuffers = new Buffer[3];\n    srcBuffers[0] = ByteBuffer.allocate(10);\n    srcBuffers[1] = ShortBuffer.allocate(10);\n    srcBuffers[2] = IntBuffer.allocate(10);\n\n    // Add test assertions here\n}",
        "\n    @Test\n    public void cloneBufferArrayTest() {\n        Buffer[] srcBuffers = new Buffer[1];\n        ByteBuffer byteBuffer = ByteBuffer.allocate(10);\n        srcBuffers[0] = byteBuffer;\n\n        Buffer[] clonedBuffers = new Buffer[1];\n        Pointer opaque = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n\n        assertEquals(10, clonedBuffers[0].capacity());\n    }\n",
        "@Test\npublic void cloneBufferArrayTest() {\n    Frame frame = new Frame();\n    frame.image = new Buffer[1];\n    frame.samples = new Buffer[1];\n    frame.data = ByteBuffer.allocate(1024);\n\n    Buffer[] clonedImage = new Buffer[frame.image.length];\n    Buffer[] clonedSamples = new Buffer[frame.samples.length];\n    ByteBuffer[] clonedData = new ByteBuffer[1];\n\n    Pointer result = Frame.cloneBufferArray(frame.image, clonedImage);\n    assertNotNull(result);\n\n    result = Frame.cloneBufferArray(frame.samples, clonedSamples);\n    assertNotNull(result);\n\n    result = Frame.cloneBufferArray(new ByteBuffer[]{frame.data}, clonedData);\n    assertNotNull(result);\n}\n",
        "@Test\npublic void cloneBufferArrayTest() {\n    Buffer[] srcBuffers = new Buffer[1];\n    srcBuffers[0] = ByteBuffer.allocate(10);\n    Buffer[] clonedBuffers = new Buffer[1];\n    Pointer opaque = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n    assertNotNull(opaque);\n}",
        "package org.bytedeco.javacv;\n\nimport org.bytedeco.javacpp.BytePointer;\nimport org.bytedeco.javacpp.Pointer;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.nio.Buffer;\nimport java.nio.ByteBuffer;\n\npublic class FrameTest {\n    @Test\n    public void cloneBufferArrayTest() {\n        Buffer[] srcBuffers = new Buffer[1];\n        srcBuffers[0] = ByteBuffer.allocate(16);\n        Buffer[] clonedBuffers = new Buffer[1];\n\n        Pointer opaque = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n        assertNotNull(opaque);\n    }\n}"
    ]
}