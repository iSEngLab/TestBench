{
    "project_name": "javacv",
    "file_name": "Frame.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/Frame.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**\n     * This private method takes a buffer array as input and returns a deep copy.\n     * It is assumed that all buffers in the input array are of the same subclass.\n     *\n     * @param srcBuffers - Buffer array to be cloned\n     * @param clonedBuffers - Buffer array to fill with clones\n     * @return Opaque object to store\n     *\n     *  @author Extension proposed by Dragos Dutu\n     */",
    "source_code": "\nprivate static Pointer cloneBufferArray(Buffer[] srcBuffers, Buffer[] clonedBuffers) {\n    Pointer opaque = null;\n\n    if (srcBuffers != null && srcBuffers.length > 0) {\n        int totalCapacity = 0;\n        for (int i = 0; i < srcBuffers.length; i++) {\n            srcBuffers[i].rewind();\n            totalCapacity += srcBuffers[i].capacity();\n        }\n\n        /*\n         * In order to optimize the transfer we need a type check.\n         *\n         * Most CPUs support hardware memory transfer for different data\n         * types, so it's faster to copy more bytes at once rather\n         * than one byte per iteration as in case of ByteBuffer.\n         *\n         * For example, Intel CPUs support MOVSB (byte transfer), MOVSW\n         * (word transfer), MOVSD (double word transfer), MOVSS (32 bit\n         * scalar single precision floating point), MOVSQ (quad word\n         * transfer) and so on...\n         *\n         * Type checking may be improved by changing the order in\n         * which a buffer is checked against. If it's likely that the\n         * expected buffer is of type \"ShortBuffer\", then it should be\n         * checked at first place.\n         *\n         */\n\n        if (srcBuffers[0] instanceof ByteBuffer) {\n            BytePointer pointer = new BytePointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((ByteBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof ShortBuffer) {\n            ShortPointer pointer = new ShortPointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((ShortBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof IntBuffer) {\n            IntPointer pointer = new IntPointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((IntBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof LongBuffer) {\n            LongPointer pointer = new LongPointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((LongBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof FloatBuffer) {\n            FloatPointer pointer = new FloatPointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((FloatBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof DoubleBuffer) {\n            DoublePointer pointer = new DoublePointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((DoubleBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        }\n\n        for (int i = 0; i < srcBuffers.length; i++) {\n            srcBuffers[i].rewind();\n            clonedBuffers[i].rewind();\n        }\n    }\n\n    if (opaque != null) {\n        opaque.retainReference();\n    }\n    return opaque;\n}\n",
    "class_name": "Frame",
    "method_name": "cloneBufferArray",
    "arguments": [
        "Buffer srcBuffers",
        "Buffer clonedBuffers"
    ],
    "generate_test": [
        "@Test\npublic void cloneBufferArrayTest() {\n    Buffer[] srcBuffers = new Buffer[10];\n    Buffer[] clonedBuffers = new Buffer[10];\n    Pointer result = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n    assertNotNull(result);\n}",
        "@Test\npublic void cloneBufferArrayTest() {\n    Buffer[] srcBuffers = new Buffer[5];\n    Buffer[] clonedBuffers = new Buffer[5];\n    Pointer result = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n    assertNotNull(result);\n}",
        "    @Test\n    public void cloneBufferArrayTest() {\n        // Initialize test buffers\n        ByteBuffer byteBuffer = ByteBuffer.allocate(10);\n        ShortBuffer shortBuffer = ShortBuffer.allocate(10);\n        IntBuffer intBuffer = IntBuffer.allocate(10);\n        LongBuffer longBuffer = LongBuffer.allocate(10);\n        FloatBuffer floatBuffer = FloatBuffer.allocate(10);\n        DoubleBuffer doubleBuffer = DoubleBuffer.allocate(10);\n        Buffer[] srcBuffers = {byteBuffer, shortBuffer, intBuffer, longBuffer, floatBuffer, doubleBuffer};\n        Buffer[] clonedBuffers = new Buffer[6];\n\n        // Call the method under test\n        Pointer result = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n\n        // Assert the result\n        assertNotNull(result);\n    }",
        "@Test\npublic void cloneBufferArrayTest() {\n    ByteBuffer byteBuffer = ByteBuffer.allocate(10);\n    Buffer[] srcBuffers = {byteBuffer};\n    Buffer[] clonedBuffers = new Buffer[srcBuffers.length];\n    Pointer result = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n    assertNotNull(result);\n}",
        "@Test\n    public void cloneBufferArrayTest() {\n        // Create source buffers and cloned buffers\n        Buffer[] srcBuffers = new Buffer[3];\n        Buffer[] clonedBuffers = new Buffer[3];\n\n        // Create some example data for the source buffers\n        ByteBuffer byteBuffer1 = ByteBuffer.allocate(10);\n        ByteBuffer byteBuffer2 = ByteBuffer.allocate(15);\n        ByteBuffer byteBuffer3 = ByteBuffer.allocate(20);\n        srcBuffers[0] = byteBuffer1;\n        srcBuffers[1] = byteBuffer2;\n        srcBuffers[2] = byteBuffer3;\n\n        // Call the method to test\n        Pointer result = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n\n        // Validate the result and cloned buffers\n        assertNotNull(result);\n        assertNotNull(clonedBuffers[0]);\n        assertNotNull(clonedBuffers[1]);\n        assertNotNull(clonedBuffers[2]);\n    }",
        "@Test\npublic void cloneBufferArrayTest() {\n    // Create srcBuffers and clonedBuffers\n    Buffer[] srcBuffers = new Buffer[10];\n    Buffer[] clonedBuffers = new Buffer[10];\n\n    // Populate srcBuffers with some test data\n    // ...\n\n    // Call the method to be tested\n    Pointer result = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n\n    // Perform assertions on the result\n    assertNotNull(result);\n    // Add more assertions as needed\n}",
        "private static Pointer cloneBufferArrayTest() {\n      //create test data\n      int length = 5;\n      Buffer[] srcBuffers = new Buffer[length];\n      Buffer[] clonedBuffers = new Buffer[length];\n\n      for (int i = 0; i < srcBuffers.length; i++) {\n          if (i % 2 == 0) {\n              srcBuffers[i] = ByteBuffer.allocate(10);\n              clonedBuffers[i] = ByteBuffer.allocate(10);\n          } else {\n              srcBuffers[i] = ShortBuffer.allocate(10);\n              clonedBuffers[i] = ShortBuffer.allocate(10);\n          }\n      }\n\n      //call the method being tested\n      Pointer result = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n\n      //perform assertions\n      assertNotNull(result);\n      // add more assertions if needed\n      return result;\n  }",
        "@Test\npublic void cloneBufferArrayTest() {\n    // Arrange\n    Buffer[] srcBuffers = new Buffer[1];\n    Buffer[] clonedBuffers = new Buffer[1];\n    \n    srcBuffers[0] = ByteBuffer.allocate(1024);\n    \n    // Act\n    Pointer result = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n    \n    // Assert\n    assertNotNull(result);\n}",
        "@Test\npublic void cloneBufferArrayTest() {\n    // Create test input\n    Buffer[] srcBuffers = new Buffer[1]; // Replace with actual test input\n    Buffer[] clonedBuffers = new Buffer[1]; // Replace with actual test output\n    \n    // Call the method under test\n    Pointer result = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n    \n    // Perform assertions\n    assertNotNull(result);\n    // Add more assertions as needed\n}",
        "@Test\npublic void cloneBufferArrayTest() {\n    // Create source and cloned buffer arrays\n    Buffer[] srcBuffers = new Buffer[1];\n    srcBuffers[0] = ByteBuffer.allocate(10);\n    Buffer[] clonedBuffers = new Buffer[1];\n    \n    // Call the method to be tested\n    Pointer result = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n    \n    // Perform assertions for the expected output\n    assertNotNull(result);\n    assertTrue(result instanceof BytePointer);\n    assertNotNull(clonedBuffers[0]);\n    assertTrue(clonedBuffers[0] instanceof ByteBuffer);\n}"
    ]
}