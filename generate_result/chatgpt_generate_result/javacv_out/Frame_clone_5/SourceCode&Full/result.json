{
    "project_name": "javacv",
    "file_name": "Frame.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/Frame.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**Care must be taken if this method is to be used in conjunction with movie recordings.\n     *  Cloning a frame containing a full HD picture (alpha channel included) would take 1920 x 1080 * 4 = 8.294.400 Bytes.\n     *  Expect a heap overflow exception when using this method without cleaning up.\n     *\n     * @return A deep copy of this frame.\n     * @see {@link #cloneBufferArray}\n     *\n     * @author Extension proposed by Dragos Dutu\n     * */",
    "source_code": "\n@Override\npublic Frame clone() {\n    Frame newFrame = new Frame();\n\n    // Video part\n    newFrame.imageWidth = imageWidth;\n    newFrame.imageHeight = imageHeight;\n    newFrame.imageDepth = imageDepth;\n    newFrame.imageChannels = imageChannels;\n    newFrame.imageStride = imageStride;\n    newFrame.keyFrame = keyFrame;\n    newFrame.pictType = pictType;\n    newFrame.streamIndex = streamIndex;\n    newFrame.type = type;\n    newFrame.opaque = new Pointer[3];\n    if (image != null) {\n        newFrame.image = new Buffer[image.length];\n        ((Pointer[])newFrame.opaque)[0] = cloneBufferArray(image, newFrame.image);\n    }\n\n    // Audio part\n    newFrame.audioChannels = audioChannels;\n    newFrame.sampleRate = sampleRate;\n    if (samples != null) {\n        newFrame.samples = new Buffer[samples.length];\n        ((Pointer[])newFrame.opaque)[1] = cloneBufferArray(samples, newFrame.samples);\n    }\n\n    // Other data streams\n    if (data != null) {\n        ByteBuffer[] dst = new ByteBuffer[1];\n        ((Pointer[])newFrame.opaque)[2] = cloneBufferArray(new ByteBuffer[]{data}, dst);\n        newFrame.data = dst[0];\n    }\n\n    // Add timestamp\n    newFrame.timestamp = timestamp;\n\n    return newFrame;\n}\n",
    "class_name": "Frame",
    "method_name": "clone",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void cloneTest() {\n    Frame frame = new Frame();\n    Frame clonedFrame = frame.clone();\n\n    // Assert that all fields of the cloned frame are equal to the original frame\n    assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n    assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n    assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n    assertEquals(frame.imageChannels, clonedFrame.imageChannels);\n    assertEquals(frame.imageStride, clonedFrame.imageStride);\n    assertEquals(frame.keyFrame, clonedFrame.keyFrame);\n    assertEquals(frame.pictType, clonedFrame.pictType);\n    assertEquals(frame.streamIndex, clonedFrame.streamIndex);\n    assertEquals(frame.type, clonedFrame.type);\n    assertEquals(frame.image.length, clonedFrame.image.length);\n    assertEquals(frame.audioChannels, clonedFrame.audioChannels);\n    assertEquals(frame.sampleRate, clonedFrame.sampleRate);\n    assertEquals(frame.samples.length, clonedFrame.samples.length);\n    assertEquals(frame.data, clonedFrame.data);\n    assertEquals(frame.timestamp, clonedFrame.timestamp);\n}\n",
        "@Test\npublic void cloneTest() {\n    Frame frame = new Frame(640, 480, Frame.DEPTH_UBYTE, 3);\n    Frame clonedFrame = frame.clone();\n    assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n    assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n    assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n    assertEquals(frame.imageChannels, clonedFrame.imageChannels);\n    assertEquals(frame.imageStride, clonedFrame.imageStride);\n    assertEquals(frame.keyFrame, clonedFrame.keyFrame);\n    assertEquals(frame.pictType, clonedFrame.pictType);\n    assertEquals(frame.streamIndex, clonedFrame.streamIndex);\n    assertEquals(frame.type, clonedFrame.type);\n    assertArrayEquals(frame.image, clonedFrame.image);\n    assertEquals(frame.audioChannels, clonedFrame.audioChannels);\n    assertEquals(frame.sampleRate, clonedFrame.sampleRate);\n    assertArrayEquals(frame.samples, clonedFrame.samples);\n    assertEquals(frame.data, clonedFrame.data);\n    assertEquals(frame.timestamp, clonedFrame.timestamp);\n}",
        "@Test\n    public void cloneTest() {\n        // Create a new Frame object\n        Frame frame = new Frame();\n\n        // Populate the fields of the frame\n        frame.imageWidth = 640;\n        frame.imageHeight = 480;\n        frame.imageDepth = 24;\n        frame.imageChannels = 3;\n        frame.keyFrame = true;\n        frame.pictType = 'I';\n        frame.streamIndex = 0;\n        frame.type = Type.VIDEO;\n        frame.opaque = new Pointer[3];\n        frame.image = new Buffer[1]; // Replace with appropriate Buffer if available\n        frame.audioChannels = 2;\n        frame.sampleRate = 44100;\n        frame.samples = new Buffer[2]; // Replace with appropriate Buffer if available\n        frame.data = ByteBuffer.allocate(1024);\n        frame.timestamp = 123456789L;\n\n        // Clone the frame\n        Frame clonedFrame = frame.clone();\n\n        // Add assertions to verify the cloning\n        assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n        assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n        assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n        assertEquals(frame.imageChannels, clonedFrame.imageChannels);\n        assertEquals(frame.keyFrame, clonedFrame.keyFrame);\n        assertEquals(frame.pictType, clonedFrame.pictType);\n        assertEquals(frame.streamIndex, clonedFrame.streamIndex);\n        assertEquals(frame.type, clonedFrame.type);\n        assertEquals(frame.opaque, clonedFrame.opaque);\n        // Add assertions for other fields as needed\n    }",
        "@Test\npublic void cloneTest() {\n    Frame originalFrame = new Frame();\n    // Set up originalFrame with necessary parameters\n    // ...\n\n    Frame clonedFrame = originalFrame.clone();\n\n    // Add assertions to compare originalFrame and clonedFrame values\n    // ...\n}",
        "@Test\npublic void cloneTest() {\n    Frame frame = new Frame();\n    Frame clonedFrame = frame.clone();\n\n    // perform assertions to verify that the clonedFrame is a deep copy of the original frame\n    // for example:\n    assertEquals(frame.getImageWidth(), clonedFrame.getImageWidth());\n    assertEquals(frame.getImageHeight(), clonedFrame.getImageHeight());\n    // ... continue with the assertions for other properties\n}",
        "@Test\npublic void cloneTest() {\n    Frame sourceFrame = new Frame();\n    sourceFrame.imageWidth = 640;\n    sourceFrame.imageHeight = 480;\n    sourceFrame.imageDepth = Frame.DEPTH_UBYTE;\n    sourceFrame.imageChannels = 3;\n    sourceFrame.imageStride = 1920;\n    sourceFrame.keyFrame = true;\n    sourceFrame.pictType = 'I';\n    sourceFrame.streamIndex = 1;\n    sourceFrame.type = Frame.Type.VIDEO;\n    sourceFrame.audioChannels = 2;\n    sourceFrame.sampleRate = 44100;\n    sourceFrame.timestamp = 123456789;\n\n    Frame clonedFrame = sourceFrame.clone();\n\n    assertEquals(sourceFrame.imageWidth, clonedFrame.imageWidth);\n    assertEquals(sourceFrame.imageHeight, clonedFrame.imageHeight);\n    assertEquals(sourceFrame.imageDepth, clonedFrame.imageDepth);\n    assertEquals(sourceFrame.imageChannels, clonedFrame.imageChannels);\n    assertEquals(sourceFrame.imageStride, clonedFrame.imageStride);\n    assertEquals(sourceFrame.keyFrame, clonedFrame.keyFrame);\n    assertEquals(sourceFrame.pictType, clonedFrame.pictType);\n    assertEquals(sourceFrame.streamIndex, clonedFrame.streamIndex);\n    assertEquals(sourceFrame.type, clonedFrame.type);\n    assertEquals(sourceFrame.audioChannels, clonedFrame.audioChannels);\n    assertEquals(sourceFrame.sampleRate, clonedFrame.sampleRate);\n    assertEquals(sourceFrame.timestamp, clonedFrame.timestamp);\n\n    // Verify that the clone is a deep copy\n    assertNotSame(sourceFrame.image, clonedFrame.image);\n    assertNotSame(sourceFrame.samples, clonedFrame.samples);\n    assertNotSame(sourceFrame.data, clonedFrame.data);\n}",
        "Frame frame = new Frame(640, 480, Frame.DEPTH_UBYTE, 3);\nframe.keyFrame = true;\nframe.pictType = 'I';\nframe.streamIndex = 0;\nframe.type = Frame.Type.VIDEO;\n// Add necessary data for audio part\n// Add necessary data for other data streams\nframe.timestamp = 123456;\nFrame clonedFrame = frame.clone();\n// Add assertions to compare each field in the original frame and clonedFrame\nassertEquals(frame.keyFrame, clonedFrame.keyFrame);\nassertEquals(frame.pictType, clonedFrame.pictType);\nassertEquals(frame.streamIndex, clonedFrame.streamIndex);\nassertEquals(frame.type, clonedFrame.type);\nassertEquals(frame.timestamp, clonedFrame.timestamp);",
        "@Test\npublic void cloneTest() {\n    Frame frame = new Frame();\n    frame.imageWidth = 640;\n    frame.imageHeight = 480;\n    frame.imageDepth = Frame.DEPTH_BYTE;\n    frame.imageChannels = 3;\n    frame.imageStride = 1920;\n    frame.keyFrame = true;\n    frame.pictType = 'I';\n    frame.streamIndex = 0;\n    frame.type = Frame.Type.VIDEO;\n    frame.opaque = new Pointer[3];\n\n    // Fill in the image part\n    ByteBuffer imageBuffer = ByteBuffer.allocateDirect(640 * 480 * 3);\n    frame.image = new Buffer[]{imageBuffer};\n\n    // Fill in the audio part\n    frame.audioChannels = 2;\n    frame.sampleRate = 44100;\n    ShortBuffer sampleBuffer = ShortBuffer.allocate(1024);\n    frame.samples = new Buffer[]{sampleBuffer};\n\n    // Fill in the data part\n    ByteBuffer dataBuffer = ByteBuffer.allocateDirect(1024);\n    frame.data = dataBuffer;\n\n    // Add timestamp\n    frame.timestamp = 123456789L;\n\n    Frame clonedFrame = frame.clone();\n    assertNotNull(clonedFrame);\n}",
        "@Test\npublic void cloneTest() {\n    Frame frame = new Frame(640, 480, Frame.DEPTH_BYTE, 3);\n    frame.data = ByteBuffer.allocate(1024);\n    frame.samples = new Buffer[] { ByteBuffer.allocateDirect(1024) };\n    \n    Frame clonedFrame = frame.clone();\n    \n    assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n    assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n    assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n    assertEquals(frame.imageChannels, clonedFrame.imageChannels);\n    assertEquals(frame.imageStride, clonedFrame.imageStride);\n    assertEquals(frame.keyFrame, clonedFrame.keyFrame);\n    assertEquals(frame.pictType, clonedFrame.pictType);\n    assertEquals(frame.streamIndex, clonedFrame.streamIndex);\n    assertEquals(frame.type, clonedFrame.type);\n    assertEquals(frame.image[0], clonedFrame.image[0]);\n    assertEquals(frame.audioChannels, clonedFrame.audioChannels);\n    assertEquals(frame.sampleRate, clonedFrame.sampleRate);\n    assertEquals(frame.samples[0], clonedFrame.samples[0]);\n    assertEquals(frame.data, clonedFrame.data);\n    assertEquals(frame.timestamp, clonedFrame.timestamp);\n}",
        "@Test\npublic void cloneTest() {\n    Frame frame = new Frame();\n    Frame clonedFrame = frame.clone();\n    assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n    assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n    assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n    assertEquals(frame.imageChannels, clonedFrame.imageChannels);\n    assertEquals(frame.imageStride, clonedFrame.imageStride);\n    assertEquals(frame.keyFrame, clonedFrame.keyFrame);\n    assertEquals(frame.pictType, clonedFrame.pictType);\n    assertEquals(frame.streamIndex, clonedFrame.streamIndex);\n    assertEquals(frame.type, clonedFrame.type);\n    assertEquals(frame.samples, clonedFrame.samples);\n    assertEquals(frame.data, clonedFrame.data);\n    assertEquals(frame.timestamp, clonedFrame.timestamp);\n}"
    ]
}