Source code: 


private static int toIntExact(long value) {
    if ((int) value != value) {
        throw new ArithmeticException("integer overflow");
    }
    return (int) value;
}



No.1 generated result --------------------------

public void toIntExactTest() {
    // Test when the value does not overflow
    long value1 = 10;
    int result1 = IPCameraFrameGrabber.toIntExact(value1);
    assertEquals(10, result1);
    
    // Test when the value overflows
    long value2 = 2147483648L; // This value overflows an int
    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value2));
}


No.2 generated result --------------------------

@Test
public void toIntExactTest() {
    long value = 1000L;
    int expected = 1000;
    int result = IPCameraFrameGrabber.toIntExact(value);
    assertEquals(expected, result);
}


No.3 generated result --------------------------

@Test
public void toIntExactTest() {
    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(2147483648L));
}


No.4 generated result --------------------------

@Test
public void toIntExactTest() {
    // Given
    long value = 5L;

    // When
    int result = IPCameraFrameGrabber.toIntExact(value);

    // Then
    assertEquals(5, result);
}


No.5 generated result --------------------------

@Test
public void toIntExactTest() {
    // Given
    long value = 10;
    
    // When
    int result = IPCameraFrameGrabber.toIntExact(value);
    
    // Then
    assertEquals(10, result);
}


No.6 generated result --------------------------

@Test
public void toIntExactTest() {
    assertThrows(ArithmeticException.class, () -> {
        IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE);
    });
}


No.7 generated result --------------------------

@Test
public void toIntExactTest() {
    assertThrows(ArithmeticException.class, () -> {
        IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE);
    });
}


No.8 generated result --------------------------

@Test
public void toIntExactTest() {
    long value = 10L;
    int result = IPCameraFrameGrabber.toIntExact(value);
    assertEquals(10, result);
}


No.9 generated result --------------------------

public void toIntExactTest() {
    long value = 12345L;
    int expected = 12345;
    int actual = IPCameraFrameGrabber.toIntExact(value);
    assertEquals(expected, actual);
}


No.10 generated result --------------------------

@Test
public void toIntExactTest() {
    assertThrows(ArithmeticException.class, () -> {
        IPCameraFrameGrabber.toIntExact(2147483648L);
    });
}


