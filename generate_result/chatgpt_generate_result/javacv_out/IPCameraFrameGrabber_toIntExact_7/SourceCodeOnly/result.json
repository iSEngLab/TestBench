{
    "project_name": "javacv",
    "file_name": "IPCameraFrameGrabber.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/IPCameraFrameGrabber.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**\n     * Returns the value of the {@code long} argument;\n     * throwing an exception if the value overflows an {@code int}.\n     *\n     * @param value the long value\n     * @return the argument as an int\n     * @throws ArithmeticException if the {@code argument} overflows an int\n     * @see <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toIntExact-long-\">Java 8 Implementation</a>\n     */",
    "source_code": "\nprivate static int toIntExact(long value) {\n    if ((int) value != value) {\n        throw new ArithmeticException(\"integer overflow\");\n    }\n    return (int) value;\n}\n",
    "class_name": "IPCameraFrameGrabber",
    "method_name": "toIntExact",
    "arguments": [
        "long value"
    ],
    "generate_test": [
        "@Test\npublic void toIntExactTest() {\n    long value = 10L;\n    int expectedResult = 10;\n    int actualResult = toIntExact(value);\n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\npublic void toIntExactTest() {\n    long value = 10;\n    int expectedResult = 10;\n    int actualResult = IPCameraFrameGrabber.toIntExact(value);\n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\npublic void toIntExactTest() {\n    long input = 10L;\n    int expected = 10;\n    int result = IPCameraFrameGrabber.toIntExact(input);\n    assertEquals(expected, result);\n}",
        "@Test\npublic void toIntExactTest() {\n    long value = 5;\n    int expected = 5;\n    int result = IPCameraFrameGrabber.toIntExact(value);\n    assertEquals(expected, result);\n}",
        "@Test\npublic void toIntExactTest() {\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(2147483648L));\n    assertEquals(-2147483648, IPCameraFrameGrabber.toIntExact(-2147483648L));\n}",
        "\n@Test\npublic void toIntExactTest() {\n    // Arrange\n    long value = 5L;\n    \n    // Act\n    int result = IPCameraFrameGrabber.toIntExact(value);\n    \n    // Assert\n    assertEquals((int)value, result);\n}",
        "\n@Test\npublic void toIntExactTest() {\n    assertEquals(5, IPCameraFrameGrabber.toIntExact(5L));\n    assertThrows(ArithmeticException.class, () -> {\n        IPCameraFrameGrabber.toIntExact(2147483648L);\n    });\n}",
        "@Test\npublic void toIntExactTest() {\n    // Given\n    long value = 10L;\n    \n    // When\n    int result = toIntExact(value);\n    \n    // Then\n    assertEquals(10, result);\n}",
        "@Test\npublic void toIntExactTest() {\n    long testValue = 10L;\n    int expected = 10;\n    int result = IPCameraFrameGrabber.toIntExact(testValue);\n    assertEquals(expected, result);\n}",
        "@Test\npublic void toIntExactTest() {\n    try {\n        assertEquals(10, IPCameraFrameGrabber.toIntExact(10));\n    } catch (ArithmeticException e) {\n        fail(\"Unexpected ArithmeticException\");\n    }\n}"
    ]
}