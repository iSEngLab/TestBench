{
    "project_name": "javacv",
    "file_name": "JavaCV.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/JavaCV.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**\n     * Ported to Java/OpenCV from\n     * Bill Triggs. Autocalibration from Planar Scenes. In 5th European Conference\n     * on Computer Vision (ECCV \u201998), volume I, pages 89\u2013105. Springer-Verlag, 1998.\n     */",
    "source_code": "\npublic static double homogToRt(CvMat H,\n        CvMat R1, CvMat t1, CvMat n1,\n        CvMat R2, CvMat t2, CvMat n2) {\n    CvMat S = S3x3.get(), U = U3x3.get(), V = V3x3.get();\n    cvSVD(H, S, U, V, 0);\n    double zeta = homogToRt(S, U, V, R1, t1, n1, R2, t2, n2);\n    return zeta;\n}\n",
    "class_name": "JavaCV",
    "method_name": "homogToRt",
    "arguments": [
        "CvMat H",
        "CvMat R1",
        "CvMat t1",
        "CvMat n1",
        "CvMat R2",
        "CvMat t2",
        "CvMat n2"
    ],
    "generate_test": [
        "@Test\npublic void homogToRtTest() {\n    // Fill in the test case here\n}",
        "@Test\npublic void homogToRtTest() {\n    // Create input CvMat objects\n    CvMat H = new CvMat(), R1 = new CvMat(), t1 = new CvMat(), n1 = new CvMat(), R2 = new CvMat(), t2 = new CvMat(), n2 = new CvMat();\n    \n    // Call the method to be tested\n    double result = JavaCV.homogToRt(H, R1, t1, n1, R2, t2, n2);\n    \n    // Add assertions to validate the result\n    // Example:\n    assertEquals(expectedResult, result);\n}",
        "public void homogToRtTest() {\n    CvMat H = new CvMat(); // Create an instance of CvMat\n    CvMat R1 = new CvMat(); // Create an instance of CvMat\n    CvMat t1 = new CvMat(); // Create an instance of CvMat\n    CvMat n1 = new CvMat(); // Create an instance of CvMat\n    CvMat R2 = new CvMat(); // Create an instance of CvMat\n    CvMat t2 = new CvMat(); // Create an instance of CvMat\n    CvMat n2 = new CvMat(); // Create an instance of CvMat\n    \n    double result = JavaCV.homogToRt(H, R1, t1, n1, R2, t2, n2); // Call the method to be tested\n    \n    assertEquals(expectedValue, result); // Assert the expected value against the actual result\n}",
        "@Test\npublic void homogToRtTest() {\n    CvMat H = new CvMat(3, 3); // create CvMat H object\n    CvMat R1 = new CvMat(); // create CvMat R1 object\n    CvMat t1 = new CvMat(); // create CvMat t1 object\n    CvMat n1 = new CvMat(); // create CvMat n1 object\n    CvMat R2 = new CvMat(); // create CvMat R2 object\n    CvMat t2 = new CvMat(); // create CvMat t2 object\n    CvMat n2 = new CvMat(); // create CvMat n2 object\n    \n    // perform the test\n    double result = JavaCV.homogToRt(H, R1, t1, n1, R2, t2, n2);\n    \n    // assert the expected output\n    assertEquals(expectedResult, result);\n}",
        "@Test\npublic void homogToRtTest() {\n    // Arrange\n    CvMat H = // initialize CvMat;\n    CvMat R1 = // initialize CvMat;\n    CvMat t1 = // initialize CvMat;\n    CvMat n1 = // initialize CvMat;\n    CvMat R2 = // initialize CvMat;\n    CvMat t2 = // initialize CvMat;\n    CvMat n2 = // initialize CvMat;\n\n    // Act \n    double result = JavaCV.homogToRt(H, R1, t1, n1, R2, t2, n2);\n\n    // Assert\n    assertEquals(expectedValue, result);\n}",
        "@Test\npublic void homogToRtTest() {\n    // Arrange\n    CvMat H = new CvMat();\n    CvMat R1 = new CvMat();\n    CvMat t1 = new CvMat();\n    CvMat n1 = new CvMat();\n    CvMat R2 = new CvMat();\n    CvMat t2 = new CvMat();\n    CvMat n2 = new CvMat();\n\n    // Act\n    double result = JavaCV.homogToRt(H, R1, t1, n1, R2, t2, n2);\n\n    // Assert\n    assertEquals(expectedResult, result);\n}",
        "@Test\npublic void homogToRtTest() {\n    CvMat H = new CvMat();\n    CvMat R1 = new CvMat();\n    CvMat t1 = new CvMat();\n    CvMat n1 = new CvMat();\n    CvMat R2 = new CvMat();\n    CvMat t2 = new CvMat();\n    CvMat n2 = new CvMat();\n    \n    double result = JavaCV.homogToRt(H, R1, t1, n1, R2, t2, n2);\n    \n    // Assert\n    assertEquals(expectedResult, result);\n}",
        "@Test\n    public void homogToRtTest() {\n        // Arrange\n        CvMat H = new CvMat();\n        CvMat R1 = new CvMat();\n        CvMat t1 = new CvMat();\n        CvMat n1 = new CvMat();\n        CvMat R2 = new CvMat();\n        CvMat t2 = new CvMat();\n        CvMat n2 = new CvMat();\n        \n        // Act\n        double result = JavaCV.homogToRt(H, R1, t1, n1, R2, t2, n2);\n        \n        // Assert\n        // Add assertion statements here\n        // Example: assertEquals(expected, result);\n    }",
        "@Test\npublic void homogToRtTest() {\n    CvMat H = new CvMat();\n    CvMat R1 = new CvMat();\n    CvMat t1 = new CvMat();\n    CvMat n1 = new CvMat();\n    CvMat R2 = new CvMat();\n    CvMat t2 = new CvMat();\n    CvMat n2 = new CvMat();\n    \n    double result = JavaCV.homogToRt(H, R1, t1, n1, R2, t2, n2);\n    \n    // Add assertions here to test the result\n}",
        "@Test\npublic void homogToRtTest() {\n    // Create CvMat objects for R1, t1, n1, R2, t2, and n2\n    CvMat R1 = new CvMat(), t1 = new CvMat(), n1 = new CvMat();\n    CvMat R2 = new CvMat(), t2 = new CvMat(), n2 = new CvMat();\n    \n    // Create a CvMat object for H\n    CvMat H = new CvMat();\n    \n    // Call the homogToRt method with the CvMat objects as parameters\n    double result = JavaCV.homogToRt(H, R1, t1, n1, R2, t2, n2);\n    \n    // Verify the result\n    assertEquals(expectedResult, result);\n}"
    ]
}