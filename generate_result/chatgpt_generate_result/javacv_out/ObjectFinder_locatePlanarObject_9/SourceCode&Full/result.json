{
    "project_name": "javacv",
    "file_name": "ObjectFinder.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/ObjectFinder.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/** a rough implementation for object location */",
    "source_code": "\ndouble[] locatePlanarObject(KeyPointVector objectKeypoints, Mat objectDescriptors,\n        KeyPointVector imageKeypoints, Mat imageDescriptors, double[] srcCorners) {\n    ptpairs.clear();\n    if (settings.useFLANN) {\n        flannFindPairs(objectDescriptors, imageDescriptors);\n    } else {\n        findPairs(objectDescriptors, imageDescriptors);\n    }\n    int n = ptpairs.size()/2;\n    logger.info(n + \" matching pairs found\");\n    if (n < settings.matchesMin) {\n        return null;\n    }\n\n    pt1 .resize(n);\n    pt2 .resize(n);\n    mask.resize(n);\n    FloatBuffer pt1Idx = pt1.createBuffer();\n    FloatBuffer pt2Idx = pt2.createBuffer();\n    for (int i = 0; i < n; i++) {\n        Point2f p1 = objectKeypoints.get(ptpairs.get(2*i)).pt();\n        pt1Idx.put(2*i, p1.x()); pt1Idx.put(2*i+1, p1.y());\n        Point2f p2 = imageKeypoints.get(ptpairs.get(2*i+1)).pt();\n        pt2Idx.put(2*i, p2.x()); pt2Idx.put(2*i+1, p2.y());\n    }\n\n    H = findHomography(pt1, pt2, CV_RANSAC, settings.ransacReprojThreshold, mask, 2000, 0.995);\n    if (H.empty() || countNonZero(mask) < settings.matchesMin) {\n        return null;\n    }\n\n    double[] h = (double[])H.createIndexer(false).array();\n    double[] dstCorners = new double[srcCorners.length];\n    for(int i = 0; i < srcCorners.length/2; i++) {\n        double x = srcCorners[2*i], y = srcCorners[2*i + 1];\n        double Z = 1/(h[6]*x + h[7]*y + h[8]);\n        double X = (h[0]*x + h[1]*y + h[2])*Z;\n        double Y = (h[3]*x + h[4]*y + h[5])*Z;\n        dstCorners[2*i    ] = X;\n        dstCorners[2*i + 1] = Y;\n    }\n    return dstCorners;\n}\n",
    "class_name": "ObjectFinder",
    "method_name": "locatePlanarObject",
    "arguments": [
        "KeyPointVector objectKeypoints",
        "Mat objectDescriptors",
        "KeyPointVector imageKeypoints",
        "Mat imageDescriptors",
        "double[] srcCorners"
    ],
    "generate_test": [
        "@Test\npublic void locatePlanarObjectTest() {\n    // Create the test data\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = {0, 0, 100, 0, 100, 100, 0, 100}; // Example source corners\n\n    // Create the ObjectFinder\n    ObjectFinder.Settings settings = new ObjectFinder.Settings();\n    ObjectFinder finder = new ObjectFinder(settings);\n\n    // Call the method to be tested\n    double[] result = finder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n\n    // Verify the result\n    assertNotNull(result);\n}\n",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Create ObjectFinder instance\n    IplImage objectImage = new IplImage();\n    ObjectFinder objectFinder = new ObjectFinder(objectImage);\n    \n    // Create necessary input data for the test\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = {0, 0, 100, 0, 100, 100, 0, 100}; // Example input for srcCorners\n    \n    // Call the method to be tested\n    double[] result = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n    \n    // Perform assertions on the result\n    assertNotNull(result);\n    // Add additional assertions as needed\n}",
        "package org.bytedeco.javacv;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ObjectFinderTest {\n    @Test\n    public void locatePlanarObjectTest() {\n        // Create sample data for testing\n        KeyPointVector objectKeypoints = new KeyPointVector();\n        Mat objectDescriptors = new Mat();\n        KeyPointVector imageKeypoints = new KeyPointVector();\n        Mat imageDescriptors = new Mat();\n        double[] srcCorners = {0, 0, 100, 0, 100, 100, 0, 100};\n\n        // Create an instance of ObjectFinder\n        ObjectFinder objectFinder = new ObjectFinder();\n        \n        // Invoke the method being tested\n        double[] result = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors,\n                imageKeypoints, imageDescriptors, srcCorners);\n\n        // Assert the result\n        assertNotNull(result);\n        assertEquals(8, result.length);\n    }\n}",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Create test data for input parameters\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = {0, 0,  0, 1,  1, 0,  1, 1}; // Example source corners\n    \n    // Create an instance of ObjectFinder and call the method to be tested\n    ObjectFinder.Settings settings = new ObjectFinder.Settings();\n    ObjectFinder finder = new ObjectFinder(settings);\n    double[] result = finder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n    \n    // Assert the expected output based on the given input\n    assertNotNull(result);\n    assertEquals(8, result.length); // Check if the output array has the correct size\n    // Add more specific assertions based on the expected behavior of the method\n}",
        "double[] testSrcCorners = {0, 0, 1, 0, 1, 1, 0, 1};\nKeyPointVector objectKeypoints = new KeyPointVector();\nMat objectDescriptors = new Mat();\nKeyPointVector imageKeypoints = new KeyPointVector();\nMat imageDescriptors = new Mat();\ndouble[] srcCorners = {0, 0, 0, 1, 1, 1, 1, 0};\nObjectFinder objectFinder = new ObjectFinder();\ndouble[] result = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\nassertNotNull(result);",
        "package org.bytedeco.javacv;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ObjectFinderTest {\n    @Test\n    public void locatePlanarObjectTest() {\n        // Create sample input data\n        KeyPointVector objectKeypoints = new KeyPointVector();\n        Mat objectDescriptors = new Mat();\n        KeyPointVector imageKeypoints = new KeyPointVector();\n        Mat imageDescriptors = new Mat();\n        double[] srcCorners = {0, 0,  100, 0,  100, 100,  0, 100};\n\n        ObjectFinder objectFinder = new ObjectFinder();\n        double[] result = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors, \n                                                          imageKeypoints, imageDescriptors, srcCorners);\n        \n        // Perform assertions to verify the result\n        assertNotNull(result);\n        // Add more assertions as needed for specific test cases\n    }\n}",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Create test input data\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = {0, 0, 100, 0, 100, 100, 0, 100};\n\n    // Create the ObjectFinder instance\n    ObjectFinder.Settings settings = new ObjectFinder.Settings();\n    ObjectFinder finder = new ObjectFinder(settings);\n\n    // Call the method to be tested\n    double[] result = finder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n\n    // Assert the result\n    assertNotNull(result);\n    assertEquals(8, result.length);\n}\n",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Given\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = {0, 0,  100, 0,  100, 100,  0, 100};\n    \n    // When\n    ObjectFinder objectFinder = new ObjectFinder();\n    double[] result = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n    \n    // Then\n    assertNotNull(result);\n    assertEquals(8, result.length);\n}\n",
        "\n    @Test\n    public void locatePlanarObjectTest() {\n        // Create mock objectKeypoints, objectDescriptors, imageKeypoints, and imageDescriptors\n        KeyPointVector objectKeypoints = new KeyPointVector(); // mock\n        Mat objectDescriptors = new Mat(); // mock\n        KeyPointVector imageKeypoints = new KeyPointVector(); // mock\n        Mat imageDescriptors = new Mat(); // mock\n        \n        // Create mock srcCorners array\n        double[] srcCorners = {0, 0,  100, 0,  100, 100,  0, 100}; // example values\n        \n        // Call the method to test\n        ObjectFinder objectFinder = new ObjectFinder();\n        double[] result = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n        \n        // Assert the expected output\n        double[] expected = {0, 0,  50, 0,  50, 50,  0, 50}; // example expected values\n        assertArrayEquals(expected, result);\n    }\n}",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Create test data for input parameters\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = {0.0, 0.0, 100.0, 0.0, 100.0, 100.0, 0.0, 100.0};\n\n    // Create an instance of the ObjectFinder class\n    ObjectFinder objectFinder = new ObjectFinder();\n\n    // Call the method to be tested\n    double[] result = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors,\n            imageKeypoints, imageDescriptors, srcCorners);\n\n    // Assert the expected results\n    double[] expected = {10.0, 10.0, 90.0, 10.0, 90.0, 90.0, 10.0, 90.0};\n    assertArrayEquals(expected, result);\n}"
    ]
}