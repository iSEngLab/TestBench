{
    "project_name": "javacv",
    "file_name": "ObjectFinder.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/ObjectFinder.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/** a rough implementation for object location */",
    "source_code": "\ndouble[] locatePlanarObject(KeyPointVector objectKeypoints, Mat objectDescriptors,\n        KeyPointVector imageKeypoints, Mat imageDescriptors, double[] srcCorners) {\n    ptpairs.clear();\n    if (settings.useFLANN) {\n        flannFindPairs(objectDescriptors, imageDescriptors);\n    } else {\n        findPairs(objectDescriptors, imageDescriptors);\n    }\n    int n = ptpairs.size()/2;\n    logger.info(n + \" matching pairs found\");\n    if (n < settings.matchesMin) {\n        return null;\n    }\n\n    pt1 .resize(n);\n    pt2 .resize(n);\n    mask.resize(n);\n    FloatBuffer pt1Idx = pt1.createBuffer();\n    FloatBuffer pt2Idx = pt2.createBuffer();\n    for (int i = 0; i < n; i++) {\n        Point2f p1 = objectKeypoints.get(ptpairs.get(2*i)).pt();\n        pt1Idx.put(2*i, p1.x()); pt1Idx.put(2*i+1, p1.y());\n        Point2f p2 = imageKeypoints.get(ptpairs.get(2*i+1)).pt();\n        pt2Idx.put(2*i, p2.x()); pt2Idx.put(2*i+1, p2.y());\n    }\n\n    H = findHomography(pt1, pt2, CV_RANSAC, settings.ransacReprojThreshold, mask, 2000, 0.995);\n    if (H.empty() || countNonZero(mask) < settings.matchesMin) {\n        return null;\n    }\n\n    double[] h = (double[])H.createIndexer(false).array();\n    double[] dstCorners = new double[srcCorners.length];\n    for(int i = 0; i < srcCorners.length/2; i++) {\n        double x = srcCorners[2*i], y = srcCorners[2*i + 1];\n        double Z = 1/(h[6]*x + h[7]*y + h[8]);\n        double X = (h[0]*x + h[1]*y + h[2])*Z;\n        double Y = (h[3]*x + h[4]*y + h[5])*Z;\n        dstCorners[2*i    ] = X;\n        dstCorners[2*i + 1] = Y;\n    }\n    return dstCorners;\n}\n",
    "class_name": "ObjectFinder",
    "method_name": "locatePlanarObject",
    "arguments": [
        "KeyPointVector objectKeypoints",
        "Mat objectDescriptors",
        "KeyPointVector imageKeypoints",
        "Mat imageDescriptors",
        "double[] srcCorners"
    ],
    "generate_test": [
        "@Test\npublic void locatePlanarObjectTest() {\n    // Create the necessary input data for the test\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = {0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0};\n\n    // Call the method to be tested\n    double[] result = locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n\n    // Assert the expected output\n    assertArrayEquals(new double[]{0, 0, 1, 0, 1, 1, 0, 1}, result);\n}",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Arrange\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = new double[8];\n\n    ObjectFinder objectFinder = new ObjectFinder();\n\n    // Act\n    double[] result = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n\n    // Assert\n    assertNotNull(result);\n}",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Arrange\n    ObjectFinder objectFinder = new ObjectFinder(objectImage);\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = {10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0};\n\n    // Act\n    double[] result = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n\n    // Assert\n    assertNotNull(result);\n}",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Create dummy input data\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = {0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0};\n\n    // Call the method under test\n    double[] result = locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n\n    // Assert the result\n    assertNotNull(result);\n    assertNotEquals(0, result.length);\n}",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Create instances of objectKeypoints, imageKeypoints, objectDescriptors, and imageDescriptors\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    Mat imageDescriptors = new Mat();\n\n    // Create an array for srcCorners\n    double[] srcCorners = { 10.0, 20.0, 30.0, 40.0 };  // Example values\n\n    // Call the function and retrieve the result\n    double[] result = new ObjectFinder().locatePlanarObject(objectKeypoints, objectDescriptors,\n            imageKeypoints, imageDescriptors, srcCorners);\n\n    // Verify the result\n    assertNotNull(result);\n    // Additional assertions can be added to verify the specific values in the result array\n}",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Create necessary mock objects and input data\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = { 10.0, 10.0, 50.0, 10.0, 50.0, 50.0, 10.0, 50.0 };\n\n    // Call the method to be tested\n    double[] result = ObjectFinder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n    \n    // Assert the expected output against the actual result\n    assertNotNull(result);\n    assertEquals(8, result.length);\n    // Add more specific assertions for the result array if needed\n}",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Given\n    ObjectFinder objectFinder = new ObjectFinder(new IplImage());\n    Settings settings = new ObjectFinder.Settings();\n    // Add any other necessary setup\n    \n    // When\n    // Call the method with necessary parameters\n    double[] result = objectFinder.locatePlanarObject(new KeyPointVector(), new Mat(), new KeyPointVector(), new Mat(), new double[4]);\n    \n    // Then\n    // Add assertions to verify the results\n    assertNotNull(result);\n    // Add any other necessary assertions\n}",
        "double[] expected = {1.0, 2.0, 3.0, 4.0};  // Fill this with the expected output values\ndouble[] result = new ObjectFinder().locatePlanarObject(new KeyPointVector(), new Mat(), \n                       new KeyPointVector(), new Mat(), new double[]{1.0, 2.0, 3.0, 4.0});\nassertArrayEquals(expected, result);",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Arrange\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = new double[]{10.0, 20.0, 30.0, 40.0};\n    \n    // Act\n    ObjectFinder objectFinder = new ObjectFinder();\n    double[] result = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n    \n    // Assert\n    assertNotNull(result);\n    // Add more assertions as needed\n}",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Create test data for objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, and srcCorners\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = {10.0, 10.0, 20.0, 10.0, 20.0, 20.0, 10.0, 20.0};\n\n    // Create ObjectFinder and Settings objects\n    ObjectFinder objectFinder = new ObjectFinder(settings);\n    ObjectFinder.Settings settings = new ObjectFinder.Settings();\n\n    // Call the method locatePlanarObject with the test data\n    double[] result = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n\n    // Assert the result matches the expected output\n    assertArrayEquals(expectedOutput, result);\n}"
    ]
}