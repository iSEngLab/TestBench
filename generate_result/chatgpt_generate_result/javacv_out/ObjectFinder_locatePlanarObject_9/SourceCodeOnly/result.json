{
    "project_name": "javacv",
    "file_name": "ObjectFinder.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/ObjectFinder.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/** a rough implementation for object location */",
    "source_code": "\ndouble[] locatePlanarObject(KeyPointVector objectKeypoints, Mat objectDescriptors,\n        KeyPointVector imageKeypoints, Mat imageDescriptors, double[] srcCorners) {\n    ptpairs.clear();\n    if (settings.useFLANN) {\n        flannFindPairs(objectDescriptors, imageDescriptors);\n    } else {\n        findPairs(objectDescriptors, imageDescriptors);\n    }\n    int n = ptpairs.size()/2;\n    logger.info(n + \" matching pairs found\");\n    if (n < settings.matchesMin) {\n        return null;\n    }\n\n    pt1 .resize(n);\n    pt2 .resize(n);\n    mask.resize(n);\n    FloatBuffer pt1Idx = pt1.createBuffer();\n    FloatBuffer pt2Idx = pt2.createBuffer();\n    for (int i = 0; i < n; i++) {\n        Point2f p1 = objectKeypoints.get(ptpairs.get(2*i)).pt();\n        pt1Idx.put(2*i, p1.x()); pt1Idx.put(2*i+1, p1.y());\n        Point2f p2 = imageKeypoints.get(ptpairs.get(2*i+1)).pt();\n        pt2Idx.put(2*i, p2.x()); pt2Idx.put(2*i+1, p2.y());\n    }\n\n    H = findHomography(pt1, pt2, CV_RANSAC, settings.ransacReprojThreshold, mask, 2000, 0.995);\n    if (H.empty() || countNonZero(mask) < settings.matchesMin) {\n        return null;\n    }\n\n    double[] h = (double[])H.createIndexer(false).array();\n    double[] dstCorners = new double[srcCorners.length];\n    for(int i = 0; i < srcCorners.length/2; i++) {\n        double x = srcCorners[2*i], y = srcCorners[2*i + 1];\n        double Z = 1/(h[6]*x + h[7]*y + h[8]);\n        double X = (h[0]*x + h[1]*y + h[2])*Z;\n        double Y = (h[3]*x + h[4]*y + h[5])*Z;\n        dstCorners[2*i    ] = X;\n        dstCorners[2*i + 1] = Y;\n    }\n    return dstCorners;\n}\n",
    "class_name": "ObjectFinder",
    "method_name": "locatePlanarObject",
    "arguments": [
        "KeyPointVector objectKeypoints",
        "Mat objectDescriptors",
        "KeyPointVector imageKeypoints",
        "Mat imageDescriptors",
        "double[] srcCorners"
    ],
    "generate_test": [
        "@Test\npublic void locatePlanarObjectTest() {\n    // Create KeyPointVector, Mat, and double array to use as input for the method\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = new double[8]; // Replace 8 with the actual length of the array\n\n    // Call the method and store the result in a variable\n    double[] result = locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n\n    // Assert the expected output based on the input provided\n    assertNotNull(result); // Change this assertion based on the expected behavior of the method\n}\n",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Create KeyPointVector, Mat, double array\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = new double[8];\n    \n    // Call the locatePlanarObject method\n    double[] result = locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n    \n    // Assert the result is not null\n    assertNotNull(result);\n}\n",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Create KeyPointVector and Mat objects\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    \n    // Create double array for srcCorners\n    double[] srcCorners = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0};\n\n    // Call the method to be tested\n    double[] result = locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n\n    // Assert the expected output\n    assertNotNull(result);\n}",
        "double[] result = locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\nassertNotNull(result);",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Create test data\n    KeyPointVector objectKeypoints = createObjectKeypoints();\n    Mat objectDescriptors = createObjectDescriptors();\n    KeyPointVector imageKeypoints = createImageKeypoints();\n    Mat imageDescriptors = createImageDescriptors();\n    double[] srcCorners = {0, 0, 1, 0, 1, 1, 0, 1};\n    \n    // Call the method\n    double[] result = locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n    \n    // Test the result\n    assertNotNull(result);\n    assertEquals(8, result.length);\n}\n",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Arrange\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = {0.0, 0.0, 100.0, 0.0, 100.0, 100.0, 0.0, 100.0};\n    \n    // Act\n    double[] result = locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n    \n    // Assert\n    assertArrayEquals(new double[]{}, result);\n}",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Create test data\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = {0, 0, 1, 0, 1, 1, 0, 1};\n\n    // Create ObjectFinder instance\n    ObjectFinder finder = new ObjectFinder();\n\n    // Call the method and test the output\n    double[] result = finder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n\n    // Assert the result\n    assertArrayEquals(expectedOutput, result);\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ObjectFinderTest {\n    @Test\n    public void locatePlanarObjectTest() {\n        // Create instance of KeyPointVector, Mat, double[] and ObjectFinder class\n        KeyPointVector objectKeypoints = new KeyPointVector();\n        Mat objectDescriptors = new Mat();\n        KeyPointVector imageKeypoints = new KeyPointVector();\n        Mat imageDescriptors = new Mat();\n        double[] srcCorners = new double[8];\n        for (int i = 0; i < 8; i++) {\n            srcCorners[i] = i+1;\n        }\n\n        ObjectFinder objectFinder = new ObjectFinder();\n        double[] result = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n\n        // Complete the test assertions\n        assertNotNull(result, \"Result should not be null\");\n        assertEquals(8, result.length, \"Result should contain 8 elements\");\n    }\n}",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Arrange\n    // Create the necessary objects and parameters for the test\n    \n    // Act\n    // Call the `locatePlanarObject` method with the necessary parameters\n    \n    // Assert\n    // Check the output and compare with expected results\n}",
        "public void locatePlanarObjectTest() {\n    // Create test data for objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, and srcCorners\n    KeyPointVector objectKeypoints = <create test objectKeypoints>;\n    Mat objectDescriptors = <create test objectDescriptors>;\n    KeyPointVector imageKeypoints = <create test imageKeypoints>;\n    Mat imageDescriptors = <create test imageDescriptors>;\n    double[] srcCorners = <create test srcCorners>;\n\n    // Call the method to be tested\n    double[] result = locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n\n    // Add assertions to check the expected result against the actual result\n    assertNotNull(result);\n    // Add more assertions based on the business logic of the method\n}"
    ]
}