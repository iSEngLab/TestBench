{
    "project_name": "javacv",
    "file_name": "PS3EyeFrameGrabber.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/PS3EyeFrameGrabber.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/** Grab one frame and return it as int[] (in the internal camera format RGBA).\n     *  Note: use makeImage() to create RGBA, 4-ch image\n     * @return frame as int[] without any processing or null if frame is not available \n     */",
    "source_code": "\npublic int[] grab_raw() {\n    if (camera.getCameraFrame(ps3_frame, timeout)) {\n        return ps3_frame;\n    }\n    else return null;\n}\n",
    "class_name": "PS3EyeFrameGrabber",
    "method_name": "grab_raw",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void grab_rawTest() {\n    PS3EyeFrameGrabber grabber = new PS3EyeFrameGrabber();\n    int[] expected = {1, 2, 3, 4};\n    grabber.ps3_frame = expected;\n    assertArrayEquals(expected, grabber.grab_raw());\n}",
        "@Test\npublic void grab_rawTest() {\n    PS3EyeFrameGrabber grabber = new PS3EyeFrameGrabber();\n    int[] expected = new int[]{255, 0, 127};\n    assertArrayEquals(expected, grabber.grab_raw());\n}",
        "@Test\npublic void grab_rawTest() {\n    PS3EyeFrameGrabber grabber = new PS3EyeFrameGrabber();\n    int[] actual = grabber.grab_raw();\n    assertNotNull(actual);\n}",
        "public void grab_rawTest() {\n    PS3EyeFrameGrabber grabber = new PS3EyeFrameGrabber();\n    int[] expected = {0, 0, 0, 0}; // Fill in with expected values\n    int[] actual = grabber.grab_raw();\n    assertArrayEquals(expected, actual);\n}",
        "@Test\npublic void grab_rawTest() {\n    // Given\n    PS3EyeFrameGrabber grabber = new PS3EyeFrameGrabber();\n    int[] expected = {1, 2, 3, 4}; // Replace with expected values\n\n    // When\n    int[] result = grabber.grab_raw();\n\n    // Then\n    assertArrayEquals(expected, result);\n}",
        "@Test\npublic void grab_rawTest() {\n    int[] expected = {1, 2, 3, 4, 5};\n    int[] actual = grab_raw();\n    assertArrayEquals(expected, actual);\n}",
        "@Test\npublic void grab_rawTest() {\n    int[] expected = new int[] {1, 2, 3, 4, 5};\n    PS3EyeFrameGrabber grabber = new PS3EyeFrameGrabber();\n    int[] actual = grabber.grab_raw();\n    assertArrayEquals(expected, actual);\n}",
        "@Test\npublic void grab_rawTest() {\n    int[] expectedOutput = {1, 2, 3, 4};\n    PS3EyeFrameGrabber ps3EyeFrameGrabber = new PS3EyeFrameGrabber();\n    ps3EyeFrameGrabber.camera = new CLCamera();\n    ps3EyeFrameGrabber.ps3_frame = new int[]{1, 2, 3, 4};\n    int[] actualOutput = ps3EyeFrameGrabber.grab_raw();\n    assertArrayEquals(expectedOutput, actualOutput);\n}",
        "@Test\npublic void grab_rawTest() {\n    int[] expectedFrame = {0, 1, 2, 3, 4, 5};\n    PS3EyeFrameGrabber frameGrabber = new PS3EyeFrameGrabber();\n    int[] actualFrame = frameGrabber.grab_raw();\n    assertArrayEquals(expectedFrame, actualFrame);\n}",
        "@Test\npublic void grab_rawTest() {\n    PS3EyeFrameGrabber grabber = new PS3EyeFrameGrabber();\n    int[] expected = {1, 2, 3, 4};\n    when(grabber.grab_raw()).thenReturn(expected);\n    int[] actual = grabber.grab_raw();\n    assertArrayEquals(expected, actual);\n}"
    ]
}