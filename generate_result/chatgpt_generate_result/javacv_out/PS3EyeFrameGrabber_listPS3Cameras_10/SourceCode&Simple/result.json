{
    "project_name": "javacv",
    "file_name": "PS3EyeFrameGrabber.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/PS3EyeFrameGrabber.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/** Ask the driver for all installed PS3 cameras. Resulting array is sorted in order of camera index.\n     *  Its size is defined by CLCamera.cameraCount().\n     * \n     * @return array of camera unique uuids or null if there is no PS3 camera\n     */",
    "source_code": "\npublic static String[] listPS3Cameras() {\n    int no = getCameraCount();\n    String[] uuids;\n    if (no > 0) {\n        uuids = new String[no];\n        for (--no; no >=0; no--) { uuids[no] = CLCamera.cameraUUID(no); }\n        return uuids;\n    }\n    return null;\n}\n",
    "class_name": "PS3EyeFrameGrabber",
    "method_name": "listPS3Cameras",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void listPS3CamerasTest() {\n    String[] expected = {\"camera1\", \"camera2\", \"camera3\"}; // Replace with actual cameraUUIDs\n    String[] actual = PS3EyeFrameGrabber.listPS3Cameras();\n    assertArrayEquals(expected, actual);\n}",
        "@Test\npublic void listPS3CamerasTest() {\n    String[] result = PS3EyeFrameGrabber.listPS3Cameras();\n    assertNotNull(result);\n    assertEquals(3, result.length);\n    assertEquals(\"camera1\", result[0]);\n    assertEquals(\"camera2\", result[1]);\n    assertEquals(\"camera3\", result[2]);\n}",
        "@Test\npublic void listPS3CamerasTest() {\n    String[] expected = {\"uuid1\", \"uuid2\", \"uuid3\"};\n    String[] actual = PS3EyeFrameGrabber.listPS3Cameras();\n    assertArrayEquals(expected, actual);\n}",
        "@Test\npublic void listPS3CamerasTest() {\n    String[] expected = {\"uuid1\", \"uuid2\", \"uuid3\"};\n    assertArrayEquals(expected, PS3EyeFrameGrabber.listPS3Cameras());\n}",
        "@Test\npublic void listPS3CamerasTest() {\n    String[] result = PS3EyeFrameGrabber.listPS3Cameras();\n    assertNotNull(result);\n    assertArrayEquals(new String[]{\"uuid1\", \"uuid2\", \"uuid3\"}, result);\n}",
        "@Test\npublic void listPS3CamerasTest() {\n    String[] expected = {\"uuid1\", \"uuid2\"};\n    String[] actual = PS3EyeFrameGrabber.listPS3Cameras();\n    assertArrayEquals(expected, actual);\n}",
        "@Test\npublic void listPS3CamerasTest() {\n    String[] expectedUUIDs = new String[]{\"UUID1\", \"UUID2\", \"UUID3\"};\n    String[] actualUUIDs = PS3EyeFrameGrabber.listPS3Cameras();\n    assertArrayEquals(expectedUUIDs, actualUUIDs);\n}",
        "@Test\npublic void listPS3CamerasTest() {\n    String[] cameraList = PS3EyeFrameGrabber.listPS3Cameras();\n    assertNotNull(cameraList);\n    assertNotEquals(0, cameraList.length);\n}",
        "@Test\npublic void listPS3CamerasTest() {\n    String[] expected = {\"uuid1\", \"uuid2\", \"uuid3\"};\n    String[] actual = PS3EyeFrameGrabber.listPS3Cameras();\n    assertArrayEquals(expected, actual);\n}",
        "@Test\npublic void listPS3CamerasTest() {\n    String[] actualList = PS3EyeFrameGrabber.listPS3Cameras();\n    assertNotNull(actualList);\n    assertEquals(expectedList.length, actualList.length);\n    for (int i = 0; i < actualList.length; i++) {\n        assertEquals(expectedList[i], actualList[i]);\n    }\n}"
    ]
}