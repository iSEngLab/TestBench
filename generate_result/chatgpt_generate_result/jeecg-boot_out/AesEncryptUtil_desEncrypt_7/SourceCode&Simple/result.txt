Source code: 


public static String desEncrypt(String data, String key, String iv) throws Exception {
    //update-begin-author:taoyan date:2022-5-23 for:VUEN-1084 【vue3】online表单测试发现的新问题 6、解密报错 ---解码失败应该把异常抛出去，在外面处理
    byte[] encrypted1 = Base64.decode(data);

    Cipher cipher = Cipher.getInstance("AES/CBC/NoPadding");
    SecretKeySpec keyspec = new SecretKeySpec(key.getBytes(), "AES");
    IvParameterSpec ivspec = new IvParameterSpec(iv.getBytes());

    cipher.init(Cipher.DECRYPT_MODE, keyspec, ivspec);

    byte[] original = cipher.doFinal(encrypted1);
    String originalString = new String(original);
    //加密解码后的字符串会出现\u0000
    return originalString.replaceAll("\\u0000", "");
    //update-end-author:taoyan date:2022-5-23 for:VUEN-1084 【vue3】online表单测试发现的新问题 6、解密报错 ---解码失败应该把异常抛出去，在外面处理
}



No.1 generated result --------------------------

 @Test
    public void desEncryptTest() {
        String data = "sampleData";
        String key = "sampleKey";
        String iv = "sampleIV";
        try {
            String encryptedData = AesEncryptUtil.desEncrypt(data, key, iv);
            assertNotNull(encryptedData);
            // Additional assertions can be added as per the requirements
        } catch (Exception e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }


No.2 generated result --------------------------

@Test
public void desEncryptTest() {
    String data = "exampleData";
    String key = "exampleKey";
    String iv = "exampleIV";
    String expected = "expectedResult";
    String actual = AesEncryptUtil.desEncrypt(data, key, iv);
    assertEquals(expected, actual);
}


No.3 generated result --------------------------

AesEncryptUtil desEncUtil = new AesEncryptUtil();
String data = "testData";
String key = "testKey";
String iv = "testIV";
String expectedResult = "expectedResult";

String result = desEncUtil.desEncrypt(data, key, iv);
assertEquals(expectedResult, result);


No.4 generated result --------------------------

@Test
public void desEncryptTest() {
    String encryptedData = "data"; 
    String key = "key"; 
    String iv = "iv";
    String expectedResult = "expectedResult";
    try {
        String actualResult = AesEncryptUtil.desEncrypt(encryptedData, key, iv);
        assertEquals(expectedResult, actualResult);
    } catch (Exception e) {
        fail("An exception occurred");
    }
}


No.5 generated result --------------------------

@Test
public void desEncryptTest() {
    String data = "testData";
    String key = "testKey";
    String iv = "testIv";
    try {
        String encryptedData = AesEncryptUtil.encrypt(data, key, iv);
        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);
        assertEquals(data, decryptedData);
    } catch (Exception e) {
        fail("Exception thrown: " + e.getMessage());
    }
}


No.6 generated result --------------------------

@Test
public void desEncryptTest() {
    String data = "exampleData";
    String key = "exampleKey";
    String iv = "exampleIv";

    try {
        String result = AesEncryptUtil.desEncrypt(data, key, iv);
        assertEquals("expectedDecryptedString", result);
    } catch (Exception e) {
        e.printStackTrace();
    }
}


No.7 generated result --------------------------

@Test
public void desEncryptTest() {
    String data = "exampleData";
    String key = "exampleKey";
    String iv = "exampleIV";
    
    try {
        String encryptedData = AesEncryptUtil.encrypt(data, key, iv);
        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);
        assertEquals(data, decryptedData, "Decrypted data does not match original data");
    } catch (Exception e) {
        fail("Exception thrown during decryption: " + e.getMessage());
    }
}


No.8 generated result --------------------------

@Test
public void desEncryptTest() {
    String data = "testData";
    String key = "testKey";
    String iv = "testIV";
    String expectedOutput = "expectedOutputString";

    try {
        String result = AesEncryptUtil.desEncrypt(data, key, iv);
        assertEquals(expectedOutput, result);
    } catch (Exception e) {
        fail("An exception occurred: " + e.getMessage());
    }
}


No.9 generated result --------------------------

@Test
public void desEncryptTest() {
    // Given
    String data = "testData";
    String key = "testKey";
    String iv = "testIV";
    
    // When
    String result = AesEncryptUtil.desEncrypt(data, key, iv);
    
    // Then
    assertEquals(expectedResult, result);
}


No.10 generated result --------------------------

public void desEncryptTest() {
    String data = "exampleData";
    String key = "exampleKey";
    String iv = "exampleIV";
    try {
        String encryptedData = AesEncryptUtil.encrypt(data, key, iv);
        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);
        assertEquals(data, decryptedData);
    } catch (Exception e) {
        fail("An exception occurred: " + e.getMessage());
    }
}


