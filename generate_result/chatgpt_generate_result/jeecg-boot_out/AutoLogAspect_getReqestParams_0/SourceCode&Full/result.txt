Source code: 


private String getReqestParams(HttpServletRequest request, JoinPoint joinPoint) {
    String httpMethod = request.getMethod();
    String params = "";
    if (CommonConstant.HTTP_POST.equals(httpMethod) || CommonConstant.HTTP_PUT.equals(httpMethod) || CommonConstant.HTTP_PATCH.equals(httpMethod)) {
        Object[] paramsArray = joinPoint.getArgs();
        // java.lang.IllegalStateException: It is illegal to call this method if the current request is not in asynchronous mode (i.e. isAsyncStarted() returns false)
        //  https://my.oschina.net/mengzhang6/blog/2395893
        Object[] arguments  = new Object[paramsArray.length];
        for (int i = 0; i < paramsArray.length; i++) {
            if (paramsArray[i] instanceof BindingResult || paramsArray[i] instanceof ServletRequest || paramsArray[i] instanceof ServletResponse || paramsArray[i] instanceof MultipartFile) {
                //ServletRequest不能序列化，从入参里排除，否则报异常：java.lang.IllegalStateException: It is illegal to call this method if the current request is not in asynchronous mode (i.e. isAsyncStarted() returns false)
                //ServletResponse不能序列化 从入参里排除，否则报异常：java.lang.IllegalStateException: getOutputStream() has already been called for this response
                continue;
            }
            arguments[i] = paramsArray[i];
        }
        //update-begin-author:taoyan date:20200724 for:日志数据太长的直接过滤掉
        PropertyFilter profilter = new PropertyFilter() {
            @Override
            public boolean apply(Object o, String name, Object value) {
                int length = 500;
                if(value!=null && value.toString().length()>length){
                    return false;
                }
                return true;
            }
        };
        params = JSONObject.toJSONString(arguments, profilter);
        //update-end-author:taoyan date:20200724 for:日志数据太长的直接过滤掉
    } else {
        MethodSignature signature = (MethodSignature) joinPoint.getSignature();
        Method method = signature.getMethod();
        // 请求的方法参数值
        Object[] args = joinPoint.getArgs();
        // 请求的方法参数名称
        LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer();
        String[] paramNames = u.getParameterNames(method);
        if (args != null && paramNames != null) {
            for (int i = 0; i < args.length; i++) {
                params += "  " + paramNames[i] + ": " + args[i];
            }
        }
    }
    return params;
}



No.1 generated result --------------------------

@Test
public void getReqestParamsTest() {
    // Create mock HttpServletRequest and JoinPoint objects
    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    JoinPoint joinPoint = Mockito.mock(JoinPoint.class);
    
    // Set up the mock objects
    Object[] paramsArray = new Object[2];
    paramsArray[0] = "param1";
    paramsArray[1] = "param2";

    // Test the getReqestParams method
    AutoLogAspect autoLogAspect = new AutoLogAspect();
    String result = autoLogAspect.getReqestParams(request, joinPoint, paramsArray);
  
    // Set the expected result
    String expected = "\"param1\",\"param2\"";
  
    // Verify the result
    assertEquals(expected, result);
}


No.2 generated result --------------------------

package org.jeecg.common.aspect;

import org.aspectj.lang.JoinPoint;
import org.junit.jupiter.api.Test;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class AutoLogAspectTest {
    @Test
    public void getReqestParamsTest() {
        // Arrange
        AutoLogAspect autoLogAspect = new AutoLogAspect();
        HttpServletRequest request = new HttpServletRequestWrapper(null);
        JoinPoint joinPoint = null;
        
        // Act
        String result = autoLogAspect.getReqestParams(request, joinPoint);
        
        // Assert
        assertEquals("", result);
    }
}


No.3 generated result --------------------------

@Test
public void getReqestParamsTest() {
    // Given
    HttpServletRequest request = mock(HttpServletRequest.class);
    JoinPoint joinPoint = mock(JoinPoint.class);
    when(request.getMethod()).thenReturn("POST");
    
    Object[] paramsArray = { "param1", "param2" };
    when(joinPoint.getArgs()).thenReturn(paramsArray);
    
    // When
    String result = autoLogAspect.getReqestParams(request, joinPoint);
    
    // Then
    assertEquals("["param1","param2"]", result);
}


No.4 generated result --------------------------

@Test
public void getReqestParamsTest() {
    HttpServletRequest request = mock(HttpServletRequest.class);
    JoinPoint joinPoint = mock(JoinPoint.class);
    
    AutoLogAspect autoLogAspect = new AutoLogAspect();
    
    String expectedResult = "";  // specify the expected result
    
    // Call the method under test
    String result = autoLogAspect.getReqestParams(request, joinPoint);
    
    assertEquals(expectedResult, result);
}


No.5 generated result --------------------------

String expectedResult = "Expected result";
// Perform the unit test actions
String actualResult = getReqestParams(request, joinPoint);
// Assert the result
assertEquals(expectedResult, actualResult);


No.6 generated result --------------------------

package org.jeecg.common.aspect;

import org.aspectj.lang.JoinPoint;
import org.jeecg.common.api.vo.Result;
import org.jeecg.common.aspect.annotation.AutoLog;
import org.jeecg.common.constant.CommonConstant;
import org.jeecg.common.constant.enums.ModuleType;
import org.jeecg.common.constant.enums.OperateTypeEnum;
import org.jeecg.common.system.vo.LoginUser;
import org.jeecg.common.util.IpUtils;
import org.jeecg.common.util.oConvertUtils;
import org.jeecg.common.util.SpringContextUtils;
import org.junit.jupiter.api.*;
import org.springframework.validation.BindingResult;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import java.lang.reflect.Method;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;


public class AutoLogAspectTest {
    @Test
    public void getReqestParamsTest() {
        AutoLogAspect autoLogAspect = new AutoLogAspect();
        HttpServletRequest request = null; // Fill with appropriate HttpServletRequest parameter
        JoinPoint joinPoint = null; // Fill with appropriate JoinPoint parameter
        String expectedResult = ""; // Fill with the expected result
        String actualResult = autoLogAspect.getReqestParams(request, joinPoint);
        assertEquals(expectedResult, actualResult);
    }
}



No.7 generated result --------------------------

@Test
public void getReqestParamsTest() {
    HttpServletRequest request = mock(HttpServletRequest.class);
    when(request.getMethod()).thenReturn("POST");

    JoinPoint joinPoint = mock(JoinPoint.class);
    Object[] args = new Object[]{"arg1", "arg2", new BindingResult(), mock(ServletRequest.class), mock(ServletResponse.class), mock(MultipartFile.class)};
    when(joinPoint.getArgs()).thenReturn(args);

    AutoLogAspect autoLogAspect = new AutoLogAspect();
    String result = autoLogAspect.getReqestParams(request, joinPoint);

    assertNotNull(result);
    assertEquals("", result);
}


No.8 generated result --------------------------

@Test
public void getReqestParamsTest() {
    // Given
    HttpServletRequest request = mock(HttpServletRequest.class);
    JoinPoint joinPoint = mock(JoinPoint.class);
    
    // When
    String result = autoLogAspect.getReqestParams(request, joinPoint);
    
    // Then
    assertEquals(expectedResult, result);
}


No.9 generated result --------------------------

@Test
public void getReqestParamsTest() {
    // Create a mock for HttpServletRequest
    HttpServletRequest request = mock(HttpServletRequest.class);
    
    // Create a mock for JoinPoint
    JoinPoint joinPoint = mock(JoinPoint.class);
    
    // Set up the method for mock
    when(request.getMethod()).thenReturn("GET");
    
    // Execute the method being tested
    AutoLogAspect autoLogAspect = new AutoLogAspect();
    String result = autoLogAspect.getReqestParams(request, joinPoint);
    
    // Assertions
    assertEquals("", result);
}


No.10 generated result --------------------------

@Test
public void getReqestParamsTest() {
    AutoLogAspect aspect = new AutoLogAspect();
    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    JoinPoint joinPoint = Mockito.mock(JoinPoint.class);
    when(request.getMethod()).thenReturn("GET");
    when(joinPoint.getArgs()).thenReturn(new Object[]{"arg1", "arg2"});
    
    assertEquals("  0: arg1  1: arg2", aspect.getReqestParams(request, joinPoint));
}


