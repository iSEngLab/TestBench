Source code: 


private String getReqestParams(HttpServletRequest request, JoinPoint joinPoint) {
    String httpMethod = request.getMethod();
    String params = "";
    if (CommonConstant.HTTP_POST.equals(httpMethod) || CommonConstant.HTTP_PUT.equals(httpMethod) || CommonConstant.HTTP_PATCH.equals(httpMethod)) {
        Object[] paramsArray = joinPoint.getArgs();
        // java.lang.IllegalStateException: It is illegal to call this method if the current request is not in asynchronous mode (i.e. isAsyncStarted() returns false)
        //  https://my.oschina.net/mengzhang6/blog/2395893
        Object[] arguments  = new Object[paramsArray.length];
        for (int i = 0; i < paramsArray.length; i++) {
            if (paramsArray[i] instanceof BindingResult || paramsArray[i] instanceof ServletRequest || paramsArray[i] instanceof ServletResponse || paramsArray[i] instanceof MultipartFile) {
                //ServletRequest不能序列化，从入参里排除，否则报异常：java.lang.IllegalStateException: It is illegal to call this method if the current request is not in asynchronous mode (i.e. isAsyncStarted() returns false)
                //ServletResponse不能序列化 从入参里排除，否则报异常：java.lang.IllegalStateException: getOutputStream() has already been called for this response
                continue;
            }
            arguments[i] = paramsArray[i];
        }
        //update-begin-author:taoyan date:20200724 for:日志数据太长的直接过滤掉
        PropertyFilter profilter = new PropertyFilter() {
            @Override
            public boolean apply(Object o, String name, Object value) {
                int length = 500;
                if(value!=null && value.toString().length()>length){
                    return false;
                }
                return true;
            }
        };
        params = JSONObject.toJSONString(arguments, profilter);
        //update-end-author:taoyan date:20200724 for:日志数据太长的直接过滤掉
    } else {
        MethodSignature signature = (MethodSignature) joinPoint.getSignature();
        Method method = signature.getMethod();
        // 请求的方法参数值
        Object[] args = joinPoint.getArgs();
        // 请求的方法参数名称
        LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer();
        String[] paramNames = u.getParameterNames(method);
        if (args != null && paramNames != null) {
            for (int i = 0; i < args.length; i++) {
                params += "  " + paramNames[i] + ": " + args[i];
            }
        }
    }
    return params;
}



No.1 generated result --------------------------

@Test
public void getRequestParamsTest() {
    // Create mock objects for HttpServletRequest and JoinPoint
    HttpServletRequest request = mock(HttpServletRequest.class);
    JoinPoint joinPoint = mock(JoinPoint.class);

    // Create a new instance of AutoLogAspect
    AutoLogAspect autoLogAspect = new AutoLogAspect();

    // Perform the method operation
    String result = autoLogAspect.getReqestParams(request, joinPoint);

    // Assert the result
    assertNotNull(result);
}


No.2 generated result --------------------------

@Test
public void getReqestParamsTest() {
    HttpServletRequest request = mock(HttpServletRequest.class);
    JoinPoint joinPoint = mock(JoinPoint.class);
    when(request.getMethod()).thenReturn("GET");
    when(joinPoint.getArgs()).thenReturn(new Object[]{"arg1", "arg2"});
    AutoLogAspect autoLogAspect = new AutoLogAspect();
    String result = autoLogAspect.getReqestParams(request, joinPoint);
    assertEquals("  null: arg1  null: arg2", result);
}


No.3 generated result --------------------------

@Test
public void getReqestParamsTest() {
    // Create instance of HttpServletRequest and JoinPoint
    HttpServletRequest request = mock(HttpServletRequest.class);
    JoinPoint joinPoint = mock(JoinPoint.class);

    // Mock the necessary methods and parameters for the test case
    when(request.getMethod()).thenReturn("POST");
    Object[] paramsArray = { "param1", "param2" };
    when(joinPoint.getArgs()).thenReturn(paramsArray);

    // Call the method and assert the expected output
    String result = autoLogAspect.getReqestParams(request, joinPoint);
    assertEquals("[\"param1\",\"param2\"]", result);
}


No.4 generated result --------------------------

@SpringBootTest
public class AutoLogAspectTest {
    @Test
    public void getReqestParamsTest() {
        // Create a mock HttpServletRequest
        HttpServletRequest request = mock(HttpServletRequest.class);
        when(request.getMethod()).thenReturn("GET");

        // Create a mock JoinPoint
        JoinPoint joinPoint = mock(JoinPoint.class);
        when(joinPoint.getArgs()).thenReturn(new Object[]{"arg1", "arg2"});

        // Create an instance of the class containing the method to be tested
        YourClassContainingMethodToBeTested instance = new YourClassContainingMethodToBeTested();

        // Call the method to be tested and then assert the result
        String result = instance.getReqestParams(request, joinPoint);
        assertEquals("expectedResult", result);
    }
}


No.5 generated result --------------------------

    AutoLogAspectTest aspect = new AutoLogAspectTest();
    HttpServletRequest request = mock(HttpServletRequest.class);
    when(request.getMethod()).thenReturn("POST");
    
    JoinPoint joinPoint = mock(JoinPoint.class);
    when(joinPoint.getArgs()).thenReturn(new Object[] {"arg1", "arg2"});
    
    String result = aspect.getReqestParams(request, joinPoint);
    
    assertNotNull(result);


No.6 generated result --------------------------

@Test
public void getReqestParamsTest() {
    HttpServletRequest request = new HttpServletRequest();
    JoinPoint joinPoint = new JoinPoint();
    AutoLogAspect aspect = new AutoLogAspect();
    String result = aspect.getReqestParams(request, joinPoint);
    // add assertions here to validate the result
    assertNotNull(result);
    // other assertions if needed
}


No.7 generated result --------------------------

@Test
public void getReqestParamsTest() {
    HttpServletRequest request = new HttpServletRequest();
    JoinPoint joinPoint = new JoinPoint();
    String params = autoLogAspect.getReqestParams(request, joinPoint);
    assertEquals(expectedParams, params);
}


No.8 generated result --------------------------

@Test
public void getReqestParamsTest() {
    HttpServletRequest request = mock(HttpServletRequest.class);
    JoinPoint joinPoint = mock(JoinPoint.class);
    
    when(request.getMethod()).thenReturn(CommonConstant.HTTP_POST);
    
    ArgumentCaptor<String> argument = ArgumentCaptor.forClass(String.class);
    
    String result = getReqestParams(request, joinPoint);
    
    assertEquals("", result);
}


No.9 generated result --------------------------

@Test
public void getReqestParamsTest() {
    HttpServletRequest request = mock(HttpServletRequest.class);
    JoinPoint joinPoint = mock(JoinPoint.class);

    when(request.getMethod()).thenReturn("GET");
    when(joinPoint.getArgs()).thenReturn(new Object[]{"arg1", "arg2"});

    AutoLogAspect autoLogAspect = new AutoLogAspect();
    String result = autoLogAspect.getReqestParams(request, joinPoint);
    assertEquals("  arg1: arg1  arg2: arg2", result);
}


No.10 generated result --------------------------

@Test
public void getReqestParamsTest() {
    HttpServletRequest request = new MockHttpServletRequest();
    JoinPoint joinPoint = Mockito.mock(JoinPoint.class);
  
    AutoLogAspect aspect = new AutoLogAspect();
    String result = aspect.getReqestParams(request, joinPoint);

    assertEquals("", result);
}


