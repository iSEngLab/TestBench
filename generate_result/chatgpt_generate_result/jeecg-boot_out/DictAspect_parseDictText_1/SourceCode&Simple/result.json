{
    "project_name": "jeecg-boot",
    "file_name": "DictAspect.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/aspect/DictAspect.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.aspect",
    "docstring": "/**\n     * \u672c\u65b9\u6cd5\u9488\u5bf9\u8fd4\u56de\u5bf9\u8c61\u4e3aResult \u7684IPage\u7684\u5206\u9875\u5217\u8868\u6570\u636e\u8fdb\u884c\u52a8\u6001\u5b57\u5178\u6ce8\u5165\n     * \u5b57\u5178\u6ce8\u5165\u5b9e\u73b0 \u901a\u8fc7\u5bf9\u5b9e\u4f53\u7c7b\u6dfb\u52a0\u6ce8\u89e3@dict \u6765\u6807\u8bc6\u9700\u8981\u7684\u5b57\u5178\u5185\u5bb9,\u5b57\u5178\u5206\u4e3a\u5355\u5b57\u5178code\u5373\u53ef \uff0ctable\u5b57\u5178 code table text\u914d\u5408\u4f7f\u7528\u4e0e\u539f\u6765jeecg\u7684\u7528\u6cd5\u76f8\u540c\n     * \u793a\u4f8b\u4e3aSysUser   \u5b57\u6bb5\u4e3asex \u6dfb\u52a0\u4e86\u6ce8\u89e3@Dict(dicCode = \"sex\") \u4f1a\u5728\u5b57\u5178\u670d\u52a1\u7acb\u9a6c\u67e5\u51fa\u6765\u5bf9\u5e94\u7684text \u7136\u540e\u5728\u8bf7\u6c42list\u7684\u65f6\u5019\u5c06\u8fd9\u4e2a\u5b57\u5178text\uff0c\u5df2\u5b57\u6bb5\u540d\u79f0\u52a0_dictText\u5f62\u5f0f\u8fd4\u56de\u5230\u524d\u7aef\n     * \u4f8b\u8f93\u5165\u5f53\u524d\u8fd4\u56de\u503c\u7684\u5c31\u4f1a\u591a\u51fa\u4e00\u4e2asex_dictText\u5b57\u6bb5\n     * {\n     *      sex:1,\n     *      sex_dictText:\"\u7537\"\n     * }\n     * \u524d\u7aef\u76f4\u63a5\u53d6\u503csext_dictText\u5728table\u91cc\u9762\u65e0\u9700\u518d\u8fdb\u884c\u524d\u7aef\u7684\u5b57\u5178\u8f6c\u6362\u4e86\n     *  customRender:function (text) {\n     *               if(text==1){\n     *                 return \"\u7537\";\n     *               }else if(text==2){\n     *                 return \"\u5973\";\n     *               }else{\n     *                 return text;\n     *               }\n     *             }\n     *             \u76ee\u524dvue\u662f\u8fd9\u4e48\u8fdb\u884c\u5b57\u5178\u6e32\u67d3\u5230table\u4e0a\u7684\u591a\u4e86\u5c31\u5f88\u9ebb\u70e6\u4e86 \u8fd9\u4e2a\u76f4\u63a5\u5728\u670d\u52a1\u7aef\u6e32\u67d3\u5b8c\u6210\u524d\u7aef\u53ef\u4ee5\u76f4\u63a5\u7528\n     * @param result\n     */",
    "source_code": "\nprivate Object parseDictText(Object result) {\n    if (result instanceof Result) {\n        if (((Result) result).getResult() instanceof IPage) {\n            List<JSONObject> items = new ArrayList<>();\n\n            //step.1 \u7b5b\u9009\u51fa\u52a0\u4e86 Dict \u6ce8\u89e3\u7684\u5b57\u6bb5\u5217\u8868\n            List<Field> dictFieldList = new ArrayList<>();\n            // \u5b57\u5178\u6570\u636e\u5217\u8868\uff0c key = \u5b57\u5178code\uff0cvalue=\u6570\u636e\u5217\u8868\n            Map<String, List<String>> dataListMap = new HashMap<>(5);\n            //\u53d6\u51fa\u7ed3\u679c\u96c6\n            List<Object> records=((IPage) ((Result) result).getResult()).getRecords();\n            //update-begin--Author:zyf -- Date:20220606 ----for\uff1a\u3010VUEN-1230\u3011 \u5224\u65ad\u662f\u5426\u542b\u6709\u5b57\u5178\u6ce8\u89e3,\u6ca1\u6709\u6ce8\u89e3\u8fd4\u56de-----\n            Boolean hasDict= checkHasDict(records);\n            if(!hasDict){\n                return result;\n            }\n\n            log.debug(\" __ \u8fdb\u5165\u5b57\u5178\u7ffb\u8bd1\u5207\u9762 DictAspect \u2014\u2014 \" );\n            //update-end--Author:zyf -- Date:20220606 ----for\uff1a\u3010VUEN-1230\u3011 \u5224\u65ad\u662f\u5426\u542b\u6709\u5b57\u5178\u6ce8\u89e3,\u6ca1\u6709\u6ce8\u89e3\u8fd4\u56de-----\n            for (Object record : records) {\n                String json=\"{}\";\n                try {\n                    //update-begin--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                    //\u89e3\u51b3@JsonFormat\u6ce8\u89e3\u89e3\u6790\u4e0d\u4e86\u7684\u95ee\u9898\u8be6\u89c1SysAnnouncement\u7c7b\u7684@JsonFormat\n                     json = objectMapper.writeValueAsString(record);\n                    //update-end--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                } catch (JsonProcessingException e) {\n                    log.error(\"json\u89e3\u6790\u5931\u8d25\"+e.getMessage(),e);\n                }\n                //update-begin--Author:scott -- Date:20211223 ----for\uff1a\u3010issues/3303\u3011restcontroller\u8fd4\u56dejson\u6570\u636e\u540ekey\u987a\u5e8f\u9519\u4e71 -----\n                JSONObject item = JSONObject.parseObject(json, Feature.OrderedField);\n                //update-end--Author:scott -- Date:20211223 ----for\uff1a\u3010issues/3303\u3011restcontroller\u8fd4\u56dejson\u6570\u636e\u540ekey\u987a\u5e8f\u9519\u4e71 -----\n\n                //update-begin--Author:scott -- Date:20190603 ----for\uff1a\u89e3\u51b3\u7ee7\u627f\u5b9e\u4f53\u5b57\u6bb5\u65e0\u6cd5\u7ffb\u8bd1\u95ee\u9898------\n                //for (Field field : record.getClass().getDeclaredFields()) {\n                // \u904d\u5386\u6240\u6709\u5b57\u6bb5\uff0c\u628a\u5b57\u5178Code\u53d6\u51fa\u6765\uff0c\u653e\u5230 map \u91cc\n                for (Field field : oConvertUtils.getAllFields(record)) {\n                    String value = item.getString(field.getName());\n                    if (oConvertUtils.isEmpty(value)) {\n                        continue;\n                    }\n                //update-end--Author:scott  -- Date:20190603 ----for\uff1a\u89e3\u51b3\u7ee7\u627f\u5b9e\u4f53\u5b57\u6bb5\u65e0\u6cd5\u7ffb\u8bd1\u95ee\u9898------\n                    if (field.getAnnotation(Dict.class) != null) {\n                        if (!dictFieldList.contains(field)) {\n                            dictFieldList.add(field);\n                        }\n                        String code = field.getAnnotation(Dict.class).dicCode();\n                        String text = field.getAnnotation(Dict.class).dicText();\n                        String table = field.getAnnotation(Dict.class).dictTable();\n\n                        List<String> dataList;\n                        String dictCode = code;\n                        if (!StringUtils.isEmpty(table)) {\n                            dictCode = String.format(\"%s,%s,%s\", table, text, code);\n                        }\n                        dataList = dataListMap.computeIfAbsent(dictCode, k -> new ArrayList<>());\n                        this.listAddAllDeduplicate(dataList, Arrays.asList(value.split(\",\")));\n                    }\n                    //date\u7c7b\u578b\u9ed8\u8ba4\u8f6c\u6362string\u683c\u5f0f\u5316\u65e5\u671f\n                    //update-begin--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                    //if (JAVA_UTIL_DATE.equals(field.getType().getName())&&field.getAnnotation(JsonFormat.class)==null&&item.get(field.getName())!=null){\n                        //SimpleDateFormat aDate=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n                        // item.put(field.getName(), aDate.format(new Date((Long) item.get(field.getName()))));\n                    //}\n                    //update-end--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                }\n                items.add(item);\n            }\n\n            //step.2 \u8c03\u7528\u7ffb\u8bd1\u65b9\u6cd5\uff0c\u4e00\u6b21\u6027\u7ffb\u8bd1\n            Map<String, List<DictModel>> translText = this.translateAllDict(dataListMap);\n\n            //step.3 \u5c06\u7ffb\u8bd1\u7ed3\u679c\u586b\u5145\u5230\u8fd4\u56de\u7ed3\u679c\u91cc\n            for (JSONObject record : items) {\n                for (Field field : dictFieldList) {\n                    String code = field.getAnnotation(Dict.class).dicCode();\n                    String text = field.getAnnotation(Dict.class).dicText();\n                    String table = field.getAnnotation(Dict.class).dictTable();\n\n                    String fieldDictCode = code;\n                    if (!StringUtils.isEmpty(table)) {\n                        fieldDictCode = String.format(\"%s,%s,%s\", table, text, code);\n                    }\n\n                    String value = record.getString(field.getName());\n                    if (oConvertUtils.isNotEmpty(value)) {\n                        List<DictModel> dictModels = translText.get(fieldDictCode);\n                        if(dictModels==null || dictModels.size()==0){\n                            continue;\n                        }\n\n                        String textValue = this.translDictText(dictModels, value);\n                        log.debug(\" \u5b57\u5178Val : \" + textValue);\n                        log.debug(\" __\u7ffb\u8bd1\u5b57\u5178\u5b57\u6bb5__ \" + field.getName() + CommonConstant.DICT_TEXT_SUFFIX + \"\uff1a \" + textValue);\n\n                        // TODO-sun \u6d4b\u8bd5\u8f93\u51fa\uff0c\u5f85\u5220\n                        log.debug(\" ---- dictCode: \" + fieldDictCode);\n                        log.debug(\" ---- value: \" + value);\n                        log.debug(\" ----- text: \" + textValue);\n                        log.debug(\" ---- dictModels: \" + JSON.toJSONString(dictModels));\n\n                        record.put(field.getName() + CommonConstant.DICT_TEXT_SUFFIX, textValue);\n                    }\n                }\n            }\n\n            ((IPage) ((Result) result).getResult()).setRecords(items);\n        }\n\n    }\n    return result;\n}\n",
    "class_name": "DictAspect",
    "method_name": "parseDictText",
    "arguments": [
        "Object result"
    ],
    "generate_test": [
        "@Test\npublic void parseDictTextTest() {\n    // Create test data and objects\n    Object result = new Object();\n    \n    // Perform the method to be tested\n    DictAspect dictAspect = new DictAspect();\n    Object expectedResult = dictAspect.parseDictText(result);\n    \n    // Assert the expected result\n    assertNotNull(expectedResult);\n}",
        "@Test\npublic void parseDictTextTest() {\n    // Create a new instance of the class containing the parseDictText method\n    DictAspect aspect = new DictAspect();\n\n    // Create a mock Result object\n    Result mockResult = new Result();\n    IPage mockPage = new IPage();\n    mockResult.setResult(mockPage);\n\n    // Create a mock records list\n    List<Object> mockRecords = new ArrayList<>();\n    mockPage.setRecords(mockRecords);\n\n    // Add some mock data to the records list\n    // ...\n\n    // Call the parseDictText method and assert the result\n    Object result = aspect.parseDictText(mockResult);\n    assertNotNull(result);\n}\n",
        "@Test\npublic void parseDictTextTest() {\n    Object result = null; // Replace null with appropriate test input\n    DictAspect dictAspect = new DictAspect();\n    Object actualResult = dictAspect.parseDictText(result);\n    // Add assertions based on expected behavior\n}",
        "// Create a new instance of DictAspect and call the parseDictText method with a valid object\nDictAspect dictAspect = new DictAspect();\nObject result = new Object();\nObject actual = dictAspect.parseDictText(result);\nassertEquals(result, actual);",
        "@Test\npublic void parseDictTextTest() {\n    // Create test data\n    // Execute the method being tested\n    // Verify the output\n}",
        "@Test\npublic void parseDictTextTest() {\n    // Create test data\n    Object result = new Object();\n\n    // Call the method to be tested\n    DictAspect dictAspect = new DictAspect();\n    Object parsedResult = dictAspect.parseDictText(result);\n\n    // Verify the result\n    assertNotNull(parsedResult);\n    assertEquals(result, parsedResult);\n}",
        "@Test\npublic void parseDictTextTest() {\n    // Create mock objects and set up test data\n    Object result = null;\n\n    // Call the method under test\n    Object actualResult = new DictAspect().parseDictText(result);\n\n    // Verify the expected output\n    assertEquals(result, actualResult, \"The parsed result should match the expected result\");\n}",
        "public class DictAspectTest {\n    @Test\n    public void parseDictTextTest() {\n        // Create a new instance of the class containing the parseDictText method\n        DictAspect dictAspect = new DictAspect();\n\n        // Create a mock Result object to use as input for the parseDictText method\n        Result mockResult = new Result();\n        IPage mockIPage = new IPage();\n        List<Object> mockRecords = new ArrayList<>();\n        \n        // Fill the mockRecord list with sample data\n        // ...\n\n        // Set the mock data on the mock objects\n        mockIPage.setRecords(mockRecords);\n        mockResult.setResult(mockIPage);\n        \n        // Call the parseDictText method with the mock Result object\n        Object parsedResult = dictAspect.parseDictText(mockResult);\n        \n        // Perform assertions on the parsedResult object\n        // ...\n    }\n}",
        "@Test\npublic void parseDictTextTest() {\n    // Create test data\n    Result result = new Result();\n    IPage iPage = new IPage();\n    List<Object> records = new ArrayList<>();\n    records.add(new Object());\n    iPage.setRecords(records);\n    result.setResult(iPage);\n\n    // Create instance of DictAspect\n    DictAspect dictAspect = new DictAspect();\n\n    // Call the method parseDictText on the test data\n    Object parsedResult = dictAspect.parseDictText(result);\n    \n    // Verify the result\n    assertNotNull(parsedResult);\n}",
        "public class DictAspectTest {\n    @Test\n    public void parseDictTextTest() {\n        // Create an instance of the object to be tested\n        DictAspect dictAspect = new DictAspect();\n\n        // Create a mock Result object to pass to the method\n        Result result = new Result();\n\n        // Call the method and store the returned object\n        Object parsedResult = dictAspect.parseDictText(result);\n\n        // Add assertions to verify the correctness of the parsed result\n        assertNotNull(parsedResult);\n        // Other assertions as needed based on the expected behavior of the parseDictText method\n    }\n}\n"
    ]
}