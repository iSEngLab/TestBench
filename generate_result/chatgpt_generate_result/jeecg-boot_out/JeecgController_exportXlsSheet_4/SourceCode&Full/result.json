{
    "project_name": "jeecg-boot",
    "file_name": "JeecgController.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/base/controller/JeecgController.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.system.base.controller",
    "docstring": "/**\n     * \u6839\u636e\u6bcf\u9875sheet\u6570\u91cf\u5bfc\u51fa\u591asheet\n     *\n     * @param request\n     * @param object \u5b9e\u4f53\u7c7b\n     * @param clazz \u5b9e\u4f53\u7c7bclass\n     * @param title \u6807\u9898\n     * @param exportFields \u5bfc\u51fa\u5b57\u6bb5\u81ea\u5b9a\u4e49\n     * @param pageNum \u6bcf\u4e2asheet\u7684\u6570\u636e\u6761\u6570\n     * @param request\n     */",
    "source_code": "\nprotected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title,String exportFields,Integer pageNum) {\n    // Step.1 \u7ec4\u88c5\u67e5\u8be2\u6761\u4ef6\n    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());\n    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n    // Step.2 \u8ba1\u7b97\u5206\u9875sheet\u6570\u636e\n    double total = service.count();\n    int count = (int)Math.ceil(total/pageNum);\n    //update-begin-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.3  \u8fc7\u6ee4\u9009\u4e2d\u6570\u636e\n    String selections = request.getParameter(\"selections\");\n    if (oConvertUtils.isNotEmpty(selections)) {\n        List<String> selectionList = Arrays.asList(selections.split(\",\"));\n        queryWrapper.in(\"id\",selectionList);\n    }\n    //update-end-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.4 \u591asheet\u5904\u7406\n    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();\n    for (int i = 1; i <=count ; i++) {\n        Page<T> page = new Page<T>(i, pageNum);\n        IPage<T> pageList = service.page(page, queryWrapper);\n        List<T> exportList = pageList.getRecords();\n        Map<String, Object> map = new HashMap<>(5);\n        ExportParams exportParams=new ExportParams(title + \"\u62a5\u8868\", \"\u5bfc\u51fa\u4eba:\" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload());\n        exportParams.setType(ExcelType.XSSF);\n        //map.put(\"title\",exportParams);\n        //\u8868\u683cTitle\n        map.put(NormalExcelConstants.PARAMS,exportParams);\n        //\u8868\u683c\u5bf9\u5e94\u5b9e\u4f53\n        map.put(NormalExcelConstants.CLASS,clazz);\n        //\u6570\u636e\u96c6\u5408\n        map.put(NormalExcelConstants.DATA_LIST, exportList);\n        listMap.add(map);\n    }\n    // Step.4 AutoPoi \u5bfc\u51faExcel\n    ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());\n    //\u6b64\u5904\u8bbe\u7f6e\u7684filename\u65e0\u6548 ,\u524d\u7aef\u4f1a\u91cd\u66f4\u65b0\u8bbe\u7f6e\u4e00\u4e0b\n    mv.addObject(NormalExcelConstants.FILE_NAME, title);\n    mv.addObject(NormalExcelConstants.MAP_LIST, listMap);\n    return mv;\n}\n",
    "class_name": "JeecgController",
    "method_name": "exportXlsSheet",
    "arguments": [
        "HttpServletRequest request",
        "T object",
        "Class<T> clazz",
        "String title",
        "String exportFields",
        "Integer pageNum"
    ],
    "generate_test": [
        "@Test\npublic void exportXlsSheetTest() {\n    // create a mock request and object\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    T object = mock(T.class);\n    // mock other dependencies as needed\n    \n    // call the method to be tested\n    ModelAndView result = exportXlsSheet(request, object, clazz, \"Test Title\", \"field1,field2\", 10);\n    \n    // perform assertions on the result\n    assertNotNull(result);\n    // add more specific assertions as needed\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    // Create mock objects for request, object, class, title, exportFields, and pageNum\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    T object = mock(T.class);\n    Class<T> clazz = mock(Class<T>.class);\n    String title = \"TestTitle\";\n    String exportFields = \"field1,field2\";\n    Integer pageNum = 10;\n    \n    // Call the method to be tested\n    ModelAndView result = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    \n    // Assert the result with expected output\n    // Add assertion statements here\n}\n",
        "@Test\npublic void exportXlsSheetTest() {\n    // Initialize test data\n    HttpServletRequest request = new HttpServletRequest();\n    T object = new T();\n    Class<T> clazz = new Class<T>();\n    String title = \"Test Title\";\n    String exportFields = \"Test Export Fields\";\n    Integer pageNum = 10;\n    \n    // Execute the method to be tested\n    JeecgController jeecgController = new JeecgController();\n    ModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n\n    // Verify the result\n    assertNotNull(result);\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    // Create a mock HttpServletRequest\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    \n    // Create an instance of the class to be tested\n    JeecgController jeecgController = new JeecgController();\n    \n    // Create necessary parameters for the method\n    T object = new T(); // Replace T with the actual class\n    Class<T> clazz = T.class; // Replace T with the actual class\n    String title = \"Test Title\";\n    String exportFields = \"Field1, Field2, Field3\";\n    Integer pageNum = 10;\n    \n    // Call the method and store the result\n    ModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n\n    // Assert the result is not null\n    assertNotNull(result, \"The result should not be null\");\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    // Create a mock HttpServletRequest, T object, Class<T> clazz, and other necessary objects\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    T object = // create T object\n    Class<T> clazz = // create Class<T> object\n    String title = \"Test Title\";\n    String exportFields = \"Field1, Field2, Field3\"; // Example export fields\n    Integer pageNum = 10; // Example page number\n\n    // Call the method to be tested\n    JeecgController<T, S> controller = new JeecgController<>();\n    ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n\n    // Assert the result or other necessary validations\n    assertNotNull(result);\n    // other assertions\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    // Create the necessary objects\n    HttpServletRequest request = new HttpServletRequest();\n    T object = new T();\n    Class<T> clazz = new Class<T>();\n    String title = \"Test Title\";\n    String exportFields = \"Field1, Field2\";\n    Integer pageNum = 10;\n    \n    // Execute the method to be tested\n    JeecgController<T, S> controller = new JeecgController<>();\n    ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    \n    // Verify the result\n    assertNotNull(result);\n    assertEquals(\"Test Title\", result.getModel().get(NormalExcelConstants.FILE_NAME));\n}\n",
        "@Test\npublic void exportXlsSheetTest() {\n    // Create mock objects for HttpServletRequest, T, Class<T>, String, Integer\n    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n    T object = Mockito.mock(T.class);\n    Class<T> clazz = Mockito.mock(Class.class);\n    String title = \"Test Title\";\n    Integer pageNum = 10;\n    \n    // Complete the test case by calling the method and asserting the result\n    JeecgController<T, S> jeecgController = new JeecgController<>();\n    ModelAndView modelAndView = jeecgController.exportXlsSheet(request, object, clazz, title, null, pageNum);\n    assertNotNull(modelAndView);\n}\n",
        "@Test\npublic void exportXlsSheetTest() {\n    // Create mock objects for request, object, class, title, exportFields, and pageNum\n    HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);\n    Object mockObject = Mockito.mock(Object.class);\n    Class<Object> mockClass = (Class<Object>) mockObject.getClass();\n    String title = \"TestTitle\";\n    String exportFields = \"field1,field2,field3\";\n    Integer pageNum = 10;\n    \n    JeecgController<Object, IService<Object>> jeecgController = new JeecgController<>();\n    ModelAndView mv = jeecgController.exportXlsSheet(mockRequest, mockObject, mockClass, title, exportFields, pageNum);\n    \n    // Add assertions to check if the ModelAndView is not null and contains the expected data\n    assertNotNull(mv);\n    assertNotNull(mv.getModel().get(NormalExcelConstants.MAP_LIST));\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    // Creating a mock request with dummy parameters\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    when(request.getParameter(\"selections\")).thenReturn(\"1,2,3\");  // Mocking the parameter selections to contain comma-separated IDs\n    \n    // Creating a mock object and class for testing\n    T object = mock(T.class);\n    Class<T> clazz = <Type_of_T>;  // Replace <Type_of_T> with the actual class type\n\n    // Creating a mock controller instance\n    JeecgController<T, IService<T>> controller = new JeecgController<>();\n\n    // Executing the method to be tested\n    ModelAndView result = controller.exportXlsSheet(request, object, clazz, \"Test Title\", \"exportFields\", 10);\n\n    // Verifying the result\n    assertNotNull(result);  // Checking if the result is not null\n    // Add more assertions as needed based on the specific requirements of the test\n}\n",
        "@Test\npublic void exportXlsSheetTest() {\n    // Create a mock HttpServletRequest, T object, Class<T> clazz, and other necessary variables\n    // Instantiate the JeecgController\n    // Call the exportXlsSheet method with the mock data\n    // Validate the returned ModelAndView\n}"
    ]
}