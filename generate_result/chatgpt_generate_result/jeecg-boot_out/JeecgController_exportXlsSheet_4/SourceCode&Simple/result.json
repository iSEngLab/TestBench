{
    "project_name": "jeecg-boot",
    "file_name": "JeecgController.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/base/controller/JeecgController.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.system.base.controller",
    "docstring": "/**\n     * \u6839\u636e\u6bcf\u9875sheet\u6570\u91cf\u5bfc\u51fa\u591asheet\n     *\n     * @param request\n     * @param object \u5b9e\u4f53\u7c7b\n     * @param clazz \u5b9e\u4f53\u7c7bclass\n     * @param title \u6807\u9898\n     * @param exportFields \u5bfc\u51fa\u5b57\u6bb5\u81ea\u5b9a\u4e49\n     * @param pageNum \u6bcf\u4e2asheet\u7684\u6570\u636e\u6761\u6570\n     * @param request\n     */",
    "source_code": "\nprotected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title,String exportFields,Integer pageNum) {\n    // Step.1 \u7ec4\u88c5\u67e5\u8be2\u6761\u4ef6\n    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());\n    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n    // Step.2 \u8ba1\u7b97\u5206\u9875sheet\u6570\u636e\n    double total = service.count();\n    int count = (int)Math.ceil(total/pageNum);\n    //update-begin-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.3  \u8fc7\u6ee4\u9009\u4e2d\u6570\u636e\n    String selections = request.getParameter(\"selections\");\n    if (oConvertUtils.isNotEmpty(selections)) {\n        List<String> selectionList = Arrays.asList(selections.split(\",\"));\n        queryWrapper.in(\"id\",selectionList);\n    }\n    //update-end-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.4 \u591asheet\u5904\u7406\n    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();\n    for (int i = 1; i <=count ; i++) {\n        Page<T> page = new Page<T>(i, pageNum);\n        IPage<T> pageList = service.page(page, queryWrapper);\n        List<T> exportList = pageList.getRecords();\n        Map<String, Object> map = new HashMap<>(5);\n        ExportParams exportParams=new ExportParams(title + \"\u62a5\u8868\", \"\u5bfc\u51fa\u4eba:\" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload());\n        exportParams.setType(ExcelType.XSSF);\n        //map.put(\"title\",exportParams);\n        //\u8868\u683cTitle\n        map.put(NormalExcelConstants.PARAMS,exportParams);\n        //\u8868\u683c\u5bf9\u5e94\u5b9e\u4f53\n        map.put(NormalExcelConstants.CLASS,clazz);\n        //\u6570\u636e\u96c6\u5408\n        map.put(NormalExcelConstants.DATA_LIST, exportList);\n        listMap.add(map);\n    }\n    // Step.4 AutoPoi \u5bfc\u51faExcel\n    ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());\n    //\u6b64\u5904\u8bbe\u7f6e\u7684filename\u65e0\u6548 ,\u524d\u7aef\u4f1a\u91cd\u66f4\u65b0\u8bbe\u7f6e\u4e00\u4e0b\n    mv.addObject(NormalExcelConstants.FILE_NAME, title);\n    mv.addObject(NormalExcelConstants.MAP_LIST, listMap);\n    return mv;\n}\n",
    "class_name": "JeecgController",
    "method_name": "exportXlsSheet",
    "arguments": [
        "HttpServletRequest request",
        "T object",
        "Class<T> clazz",
        "String title",
        "String exportFields",
        "Integer pageNum"
    ],
    "generate_test": [
        "protected ModelAndView modelAndView = new ModelAndView();\nModelAndView output = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\nassertEquals(modelAndView, output);",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JeecgControllerTest {\n    @Test\n    public void exportXlsSheetTest() {\n        // Given\n        HttpServletRequest request = new HttpServletRequest();\n        Class<T> clazz = T.class;\n        String title = \"Test Title\";\n        String exportFields = \"field1, field2\";\n        Integer pageNum = 10;\n        T object = new T(); // Create an instance of the object\n\n        // When\n        ModelAndView result = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n\n        // Then\n        assertNotNull(result);\n        assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));\n    }\n}",
        "protected ModelAndView result = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n\nassertEquals(\"Expected Title\u62a5\u8868\u5bfc\u51fa\u4eba:User\" + 1, result.getViewName());\nassertEquals(\"Expected Title1\", result.getModel().get(\"NormalExcelConstants.PARAMS\"));\nassertEquals(\"Expected Title Report\", result.getModel().get(\"NormalExcelConstants.CLASS\"));\nassertEquals(\"Expected List<>\", result.getModel().get(\"NormalExcelConstants.DATA_LIST\"));",
        "import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport org.jeecg.common.system.query.QueryGenerator;\nimport org.jeecg.common.system.vo.LoginUser;\nimport org.jeecg.common.util.oConvertUtils;\nimport org.jeecg.config.JeecgBaseConfig;\nimport org.jeecgframework.poi.excel.def.NormalExcelConstants;\nimport org.jeecgframework.poi.excel.entity.ExportParams;\nimport org.jeecgframework.poi.excel.entity.enmus.ExcelType;\nimport org.jeecgframework.poi.excel.view.JeecgEntityExcelView;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport org.springframework.web.servlet.ModelAndView;\nimport java.util.List;\nimport java.util.Arrays;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\npublic class JeecgControllerTest {\n    @Test\n    public void exportXlsSheetTest() {\n        T object = createTObject();  // replace with actual object creation\n        Class<T> clazz = createTClass();  // replace with actual class creation\n        String title = \"Test Title\";\n        String exportFields = \"Test Export Fields\";\n        Integer pageNum = 10;\n        HttpServletRequest request = new MockHttpServletRequest();\n        \n        JeecgController jeecgController = new JeecgController();  // replace with actual controller creation\n        jeecgController.service = createIService();  // replace with actual service creation\n        jeecgController.jeecgBaseConfig = createJeecgBaseConfig();  // replace with actual config creation\n        \n        ModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n        \n        assertNotNull(result);\n        // Add additional assertions for the expected outcome\n        // Example: assertEquals(\"Expected Value\", result.getValue());\n    }\n}\n",
        "@Test\npublic void exportXlsSheetTest() {\n    // Create a new instance of HttpServletRequest\n    HttpServletRequest request = new HttpServletRequest();\n\n    // Create object to be passed\n    T object = new T();\n\n    // Create object to be passed\n    Class<T> clazz = new Class<T>();\n\n    // Define title\n    String title = \"Test Title\";\n\n    // Define export fields\n    String exportFields = \"Field1, Field2, Field3\";\n\n    // Define page number\n    Integer pageNum = 10;\n\n    // Call the method and assert the output\n    ModelAndView modelAndView = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    assertNotNull(modelAndView);\n}",
        "@Override\npublic void exportXlsSheetTest() {\n    // Create a new instance of the object and set any necessary attributes\n    HttpServletRequest request = new HttpServletRequest();\n    T object = new T();\n    Class<T> clazz = T.class;\n    String title = \"Test Title\";\n    String exportFields = \"Test Fields\";\n    Integer pageNum = 5;\n    \n    // Call the method to be tested\n    ModelAndView result = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    \n    // Use assertions to verify the returned ModelAndView\n    assertNotNull(result);\n    // Add specific assertions for the expected output of the method\n    // ...\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    // Create and set up mock objects such as HttpServletRequest, T object, Class<T> clazz, String title, String exportFields, and Integer pageNum\n    // Call exportXlsSheet method with the mock objects\n    // Verify the expected result\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    // Create request, object, clazz, title, exportFields, and pageNum\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    T object = // create T object;\n    Class<T> clazz = // create Class<T> clazz;\n    String title = // provide title;\n    String exportFields = // provide export fields;\n    Integer pageNum = // provide page number;\n\n    // Create the expected ModelAndView\n    ModelAndView expectedModelAndView = new ModelAndView(new JeecgEntityExcelView());\n    expectedModelAndView.addObject(NormalExcelConstants.FILE_NAME, title);\n    expectedModelAndView.addObject(NormalExcelConstants.MAP_LIST, // provide listMap);\n\n    // Create the queryWrapper\n    QueryWrapper<T> queryWrapper = createQueryWrapper(object, request.getParameterMap());\n\n    // Call the method to test\n    ModelAndView actualModelAndView = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n\n    // Compare the expected and actual ModelAndViews\n    assertEquals(expectedModelAndView.getModel().size(), actualModelAndView.getModel().size());\n    // Add further assertions if needed\n}",
        "protected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title, String exportFields, Integer pageNum) {\n    // Step.1 \u7ec4\u88c5\u67e5\u8be2\u6761\u4ef6\n    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());\n    LoginUser sysUser = new LoginUser();\n    // Step.2 \u8ba1\u7b97\u5206\u9875sheet\u6570\u636e\n    double total = service.count();\n    int count = (int)Math.ceil(total / pageNum);\n    // Step.3 \u8fc7\u6ee4\u9009\u4e2d\u6570\u636e\n    String selections = \"1,2,3\";  // Example selections for testing\n    if (oConvertUtils.isNotEmpty(selections)) {\n        List<String> selectionList = Arrays.asList(selections.split(\",\"));\n        queryWrapper.in(\"id\", selectionList);\n    }\n    // Step.4 \u591asheet\u5904\u7406\n    List<Map<String, Object>> listMap = new ArrayList<>();\n    for (int i = 1; i <= count; i++) {\n        Page<T> page = new Page<>(i, pageNum);\n        IPage<T> pageList = service.page(page, queryWrapper);\n        List<T> exportList = pageList.getRecords();\n        Map<String, Object> map = new HashMap<>(5);\n        ExportParams exportParams=new ExportParams(title + \"\u62a5\u8868\", \"\u5bfc\u51fa\u4eba:\", title+i,jeecgBaseConfig.getPath().getUpload());\n        exportParams.setType(ExcelType.XSSF);\n        //map.put(\"title\",exportParams);\n        //\u8868\u683cTitle\n        map.put(NormalExcelConstants.PARAMS, exportParams);\n        //\u8868\u683c\u5bf9\u5e94\u5b9e\u4f53\n        map.put(NormalExcelConstants.CLASS, clazz);\n        //\u6570\u636e\u96c6\u5408\n        map.put(NormalExcelConstants.DATA_LIST, exportList);\n        listMap.add(map);\n    }\n    // Step.4 AutoPoi \u5bfc\u51faExcel\n    ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());\n    //\u6b64\u5904\u8bbe\u7f6e\u7684filename\u65e0\u6548 ,\u524d\u7aef\u4f1a\u91cd\u66f4\u65b0\u8bbe\u7f6e\u4e00\u4e0b\n    mv.addObject(NormalExcelConstants.FILE_NAME, title);\n    mv.addObject(NormalExcelConstants.MAP_LIST, listMap);\n    return mv;\n}",
        "protected ModelAndView mv = new JeecgController().exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\nassertNotNull(mv);\nassertEquals(title, mv.getModel().get(NormalExcelConstants.FILE_NAME));"
    ]
}