{
    "project_name": "jeecg-boot",
    "file_name": "OssBootUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/oss/OssBootUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.util.oss",
    "docstring": "/**\n     * \u4e0a\u4f20\u6587\u4ef6\u81f3\u963f\u91cc\u4e91 OSS\n     * \u6587\u4ef6\u4e0a\u4f20\u6210\u529f,\u8fd4\u56de\u6587\u4ef6\u5b8c\u6574\u8bbf\u95ee\u8def\u5f84\n     * \u6587\u4ef6\u4e0a\u4f20\u5931\u8d25,\u8fd4\u56de null\n     *\n     * @param file    \u5f85\u4e0a\u4f20\u6587\u4ef6\n     * @param fileDir \u6587\u4ef6\u4fdd\u5b58\u76ee\u5f55\n     * @return oss \u4e2d\u7684\u76f8\u5bf9\u6587\u4ef6\u8def\u5f84\n     */",
    "source_code": "\npublic static String upload(FileItemStream file, String fileDir) {\n    String filePath = null;\n    initOss(endPoint, accessKeyId, accessKeySecret);\n    StringBuilder fileUrl = new StringBuilder();\n    try {\n        String suffix = file.getName().substring(file.getName().lastIndexOf('.'));\n        String fileName = UUID.randomUUID().toString().replace(\"-\", \"\") + suffix;\n        if (!fileDir.endsWith(SymbolConstant.SINGLE_SLASH)) {\n            fileDir = fileDir.concat(SymbolConstant.SINGLE_SLASH);\n        }\n        fileDir = StrAttackFilter.filter(fileDir);\n        fileUrl = fileUrl.append(fileDir + fileName);\n        if (oConvertUtils.isNotEmpty(staticDomain) && staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n            filePath = staticDomain + SymbolConstant.SINGLE_SLASH + fileUrl;\n        } else {\n            filePath = \"https://\" + bucketName + \".\" + endPoint + SymbolConstant.SINGLE_SLASH + fileUrl;\n        }\n        PutObjectResult result = ossClient.putObject(bucketName, fileUrl.toString(), file.openStream());\n        // \u8bbe\u7f6e\u6743\u9650(\u516c\u5f00\u8bfb)\n        ossClient.setBucketAcl(bucketName, CannedAccessControlList.PublicRead);\n        if (result != null) {\n            log.info(\"------OSS\u6587\u4ef6\u4e0a\u4f20\u6210\u529f------\" + fileUrl);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n    return filePath;\n}\n",
    "class_name": "OssBootUtil",
    "method_name": "upload",
    "arguments": [
        "FileItemStream file",
        "String fileDir"
    ],
    "generate_test": [
        "@Test\npublic void uploadTest() {\n    FileItemStream file = mock(FileItemStream.class);\n    when(file.getName()).thenReturn(\"test.jpg\");\n    when(file.openStream()).thenReturn(new FileInputStream(\"test.jpg\"));\n\n\n    String fileDir = \"uploads/\";\n    String result = OssBootUtil.upload(file, fileDir);\n\n    assertNotNull(result);\n}",
        "@Test\npublic void uploadTest() {\n    // Create a test file\n    FileItemStream file = new FileItemStream();\n    file.setName(\"testFile.jpg\");\n    file.openStream = new InputStream();\n\n    // Call the upload method and test the returned file path\n    String filePath = OssBootUtil.upload(file, \"/uploads\");\n    assertNotNull(filePath);\n    System.out.println(\"File Uploaded to: \" + filePath);\n}",
        "@Test\npublic void uploadTest() {\n    // Create a FileItemStream\n    FileItemStream file = // create a FileItemStream object\n    String fileDir = // set the file directory\n    String result = OssBootUtil.upload(file, fileDir);\n    assertNotNull(result);\n}",
        "@Test\npublic void uploadTest() {\n    String fileDir = \"/test\";\n    FileItemStream file = createMockFileItemStream(\"testfile.jpg\");\n    String result = OssBootUtil.upload(file, fileDir);\n    assertNotNull(result);\n}",
        "@Test\npublic void uploadTest() {\n    // Create a FileItemStream\n    FileItemStream fileItemStream = createFileItemStream();\n\n    // Set the file directory\n    String fileDir = \"testDirectory/\";\n\n    // Call the upload method in OssBootUtil\n    String result = OssBootUtil.upload(fileItemStream, fileDir);\n\n    // Check if the result is not null\n    assertNotNull(result);\n}",
        "@Test\npublic void uploadTest() {\n    // Given\n    // Create a FileItemStream object for testing purposes\n    FileItemStream file = createTestFileItemStream();\n    String fileDir = \"testDirectory/\";\n\n    // When\n    String result = OssBootUtil.upload(file, fileDir);\n\n    // Then\n    assertNotNull(result);\n    assertTrue(result.contains(\"https://\") || result.contains(\"http://\"));\n}",
        "@Test\npublic void uploadTest() {\n    // Create a mock fileItemStream object\n    // Call the upload method with the mock fileItemStream object and a file directory\n    // Verify that the upload method returns the correct file path\n    // Use assertEquals to compare the expected file path with the actual file path returned by the upload method\n}",
        "@Test\npublic void uploadTest() {\n    // Create a mock FileItemStream and FileDir\n    FileItemStream file = Mockito.mock(FileItemStream.class);\n    String fileDir = \"/test-directory/\";\n\n    // Call the upload method and assert that it returns a non-null value\n    String result = OssBootUtil.upload(file, fileDir);\n    assertNotNull(result);\n}",
        "@Test\npublic void uploadTest() {\n    // Arrange\n    FileItemStream file = <initialize file item stream>;\n    String fileDir = \"testDir\";\n    \n    // Act\n    String result = OssBootUtil.upload(file, fileDir);\n    \n    // Assert\n    assertNotNull(result);\n    // Add more assertions as needed\n}",
        "@Test\npublic void uploadTest() {\n    // Creating a mock FileItemStream and fileDir\n    FileItemStream file = mock(FileItemStream.class);\n    when(file.getName()).thenReturn(\"testfile.jpg\");\n    when(file.openStream()).thenReturn(new ByteArrayInputStream(\"test file content\".getBytes()));\n    String fileDir = \"uploads/\";\n\n    // Calling the upload method and asserting the returned filePath\n    String filePath = OssBootUtil.upload(file, fileDir);\n    assertNotNull(filePath);\n    assertTrue(filePath.startsWith(\"https://\")); // Assuming the filePath starts with \"https://\"\n}"
    ]
}