Source code: 


private static void installMplus(QueryWrapper<?> queryWrapper,Object searchObj,Map<String, String[]> parameterMap) {
	
	/*
	 * 注意:权限查询由前端配置数据规则 当一个人有多个所属部门时候 可以在规则配置包含条件 orgCode 包含 #{sys_org_code}
	但是不支持在自定义SQL中写orgCode in #{sys_org_code} 
	当一个人只有一个部门 就直接配置等于条件: orgCode 等于 #{sys_org_code} 或者配置自定义SQL: orgCode = '#{sys_org_code}'
	*/
	
	//区间条件组装 模糊查询 高级查询组装 简单排序 权限查询
	PropertyDescriptor[] origDescriptors = PropertyUtils.getPropertyDescriptors(searchObj);
	Map<String,SysPermissionDataRuleModel> ruleMap = getRuleMap();
	
	//权限规则自定义SQL表达式
	for (String c : ruleMap.keySet()) {
		if(oConvertUtils.isNotEmpty(c) && c.startsWith(SQL_RULES_COLUMN)){
			queryWrapper.and(i ->i.apply(getSqlRuleValue(ruleMap.get(c).getRuleValue())));
		}
	}
	
	String name, type, column;
	// update-begin--Author:taoyan  Date:20200923 for：issues/1671 如果字段加注解了@TableField(exist = false),不走DB查询-------
	//定义实体字段和数据库字段名称的映射 高级查询中 只能获取实体字段 如果设置TableField注解 那么查询条件会出问题
	Map<String,String> fieldColumnMap = new HashMap<>(5);
	for (int i = 0; i < origDescriptors.length; i++) {
		//aliasName = origDescriptors[i].getName();  mybatis  不存在实体属性 不用处理别名的情况
		name = origDescriptors[i].getName();
		type = origDescriptors[i].getPropertyType().toString();
		try {
			if (judgedIsUselessField(name)|| !PropertyUtils.isReadable(searchObj, name)) {
				continue;
			}

			Object value = PropertyUtils.getSimpleProperty(searchObj, name);
			column = ReflectHelper.getTableFieldName(searchObj.getClass(), name);
			if(column==null){
				//column为null只有一种情况 那就是 添加了注解@TableField(exist = false) 后续都不用处理了
				continue;
			}
			fieldColumnMap.put(name,column);
			//数据权限查询
			if(ruleMap.containsKey(name)) {
				addRuleToQueryWrapper(ruleMap.get(name), column, origDescriptors[i].getPropertyType(), queryWrapper);
			}
			//区间查询
			doIntervalQuery(queryWrapper, parameterMap, type, name, column);
			//判断单值  参数带不同标识字符串 走不同的查询
			//TODO 这种前后带逗号的支持分割后模糊查询(多选字段查询生效) 示例：,1,3,
			if (null != value && value.toString().startsWith(COMMA) && value.toString().endsWith(COMMA)) {
				String multiLikeval = value.toString().replace(",,", COMMA);
				String[] vals = multiLikeval.substring(1, multiLikeval.length()).split(COMMA);
				final String field = oConvertUtils.camelToUnderline(column);
				if(vals.length>1) {
					queryWrapper.and(j -> {
                           log.info("---查询过滤器，Query规则---field:{}, rule:{}, value:{}", field, "like", vals[0]);
						j = j.like(field,vals[0]);
						for (int k=1;k<vals.length;k++) {
							j = j.or().like(field,vals[k]);
							log.info("---查询过滤器，Query规则 .or()---field:{}, rule:{}, value:{}", field, "like", vals[k]);
						}
						//return j;
					});
				}else {
					log.info("---查询过滤器，Query规则---field:{}, rule:{}, value:{}", field, "like", vals[0]);
					queryWrapper.and(j -> j.like(field,vals[0]));
				}
			}else {
				//根据参数值带什么关键字符串判断走什么类型的查询
				QueryRuleEnum rule = convert2Rule(value);
				value = replaceValue(rule,value);
				// add -begin 添加判断为字符串时设为全模糊查询
				//if( (rule==null || QueryRuleEnum.EQ.equals(rule)) && "class java.lang.String".equals(type)) {
					// 可以设置左右模糊或全模糊，因人而异
					//rule = QueryRuleEnum.LIKE;
				//}
				// add -end 添加判断为字符串时设为全模糊查询
				addEasyQuery(queryWrapper, column, rule, value);
			}
			
		} catch (Exception e) {
			log.error(e.getMessage(), e);
		}
	}
	// 排序逻辑 处理
	doMultiFieldsOrder(queryWrapper, parameterMap, fieldColumnMap);
			
	//高级查询
	doSuperQuery(queryWrapper, parameterMap, fieldColumnMap);
	// update-end--Author:taoyan  Date:20200923 for：issues/1671 如果字段加注解了@TableField(exist = false),不走DB查询-------
	
}



No.1 generated result --------------------------

@Test
public void installMplusTest() {
    // Create the necessary objects for testing, such as queryWrapper, searchObj, and parameterMap
    QueryWrapper<Object> queryWrapper = new QueryWrapper<>();
    Object searchObj = new Object();  // Replace with actual search object
    Map<String, String[]> parameterMap = new HashMap<>();  // Replace with actual parameter map
    
    // Call the installMplus method with the created objects
    QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap);
    
    // Assert the expected output by comparing the actual queryWrapper with the expected queryWrapper
    // Replace expectedQueryWrapper with the expected QueryWrapper
    QueryWrapper<Object> expectedQueryWrapper = new QueryWrapper<>();
    // Add the expected conditions to the expectedQueryWrapper
    
    assertEquals(expectedQueryWrapper, queryWrapper);
}


No.2 generated result --------------------------

@Test
public void installMplusTest() {
    // Start with creating a QueryWrapper, SearchObj, and parameterMap
    QueryWrapper<?> queryWrapper = new QueryWrapper<>();
    Object searchObj = new Object();
    Map<String, String[]> parameterMap = new HashMap<>();

    // Call the installMplus method with the created QueryWrapper, SearchObj, and parameterMap
    QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap);

    // Assert the expected outcome
    assertNotNull(queryWrapper);
}


No.3 generated result --------------------------

@Test
public void installMplusTest() {
    // Create a test query wrapper, search object, and parameter map
    QueryWrapper<TestObject> queryWrapper = new QueryWrapper<TestObject>();
    TestObject searchObj = new TestObject();
    Map<String, String[]> parameterMap = new HashMap<String, String[]>();
    
    // Call the installMplus method with the test query wrapper, search object, and parameter map
    QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap);
    
    // Add assertions here
    // assertEquals(expected, actual);
}


No.4 generated result --------------------------

    @Test
    public void installMplusTest() {
        // Create a new instance of the QueryWrapper
        QueryWrapper<?> queryWrapper = new QueryWrapper<>();
        
        // Create a sample object for testing
        SearchObj searchObj = new SearchObj();
        searchObj.setName("Test");
        searchObj.setValue(123);
        
        // Create a sample parameter map for testing
        Map<String, String[]> parameterMap = new HashMap<>();
        parameterMap.put("name", new String[] {"Test"});
        parameterMap.put("value", new String[] {"123"});
        
        // Call the installMplus method with the test data
        QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap);
        
        // Generate the expected result based on the test data and verify the test case
        // ...
    }


No.5 generated result --------------------------

@Test
public void installMplusTest() {
    // Create a QueryWrapper object for testing
    QueryWrapper<User> queryWrapper = new QueryWrapper<>();

    // Create a User object for testing
    User searchObj = new User();
    searchObj.setName("John");
    searchObj.setAge(30);
    
    // Create a parameterMap containing request parameters
    Map<String, String[]> parameterMap = new HashMap<>();
    parameterMap.put("name", new String[]{"John"});
    parameterMap.put("age", new String[]{"30"});

    // Call the installMplus() method with the QueryWrapper, searchObj, and parameterMap as parameters
    QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap);

    // Assert the correctness of the unit test by checking the generated SQL query or other relevant aspects
    // For example:
    // assertEquals("SELECT * FROM user WHERE name='John' AND age=30", queryWrapper.getCustomSqlSegment());
}


No.6 generated result --------------------------

package org.jeecg.common.system.query;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringJUnitConfig
@SpringBootTest
@Import(QueryGenerator.class)
public class QueryGeneratorTest {

    @MockBean
    private QueryWrapper queryWrapper;

    @Test
    public void installMplusTest() {
        QueryWrapper<?> queryWrapper = new QueryWrapper<>();
        Object searchObj = new Object();  // Populate with appropriate search object
        Map<String, String[]> parameterMap = new HashMap<>();  // Populate with appropriate parameter map

        QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap);

        assertNotNull(queryWrapper, "QueryWrapper is not null");
        assertNotNull(queryWrapper.getInited(), "QueryWrapper is initialized");
    }
}


No.7 generated result --------------------------

@Test
public void installMplusTest() {
    // Create mock objects for QueryWrapper, searchObj, and parameterMap
    QueryWrapper<MockObject> queryWrapper = new QueryWrapper<>();
    MockObject searchObj = new MockObject();
    Map<String, String[]> parameterMap = new HashMap<>();

    // Call the installMplus method
    QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap);

    // Verify the expected behavior
    // Add assertions here
}


No.8 generated result --------------------------

@Test
public void installMplusTest() {
    // Create a QueryWrapper
    QueryWrapper<Object> queryWrapper = new QueryWrapper<>();
    
    // Create a test search object
    TestObject searchObj = new TestObject();
    
    // Create a test parameter map
    Map<String, String[]> parameterMap = new HashMap<>();
    parameterMap.put("param1", new String[]{"value1"});
    parameterMap.put("param2", new String[]{"value2"});
    
    // Call the installMplus method
    QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap);
    
    // Add assertions here for expected behavior of the queryWrapper
}


No.9 generated result --------------------------

@Test
public void installMplusTest() {
    // Given
    QueryWrapper<?> queryWrapper = new QueryWrapper<>();
    Object searchObj = new Object();
    Map<String, String[]> parameterMap = new HashMap<>();

    // When
    QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap);
    
    // Then
    // Add assertions to validate the behavior of the method
    // ...
}


No.10 generated result --------------------------

@Test
public void installMplusTest() {
    // Given
    QueryWrapper<?> queryWrapper = new QueryWrapper<>();
    Object searchObj = new Object();
    Map<String, String[]> parameterMap = new HashMap<>();

    // When
    QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap);

    // Then
    // Add assertions here
}


