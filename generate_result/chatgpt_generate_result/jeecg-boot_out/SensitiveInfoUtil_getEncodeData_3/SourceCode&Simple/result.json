{
    "project_name": "jeecg-boot",
    "file_name": "SensitiveInfoUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/desensitization/util/SensitiveInfoUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.desensitization.util",
    "docstring": "/**\n     * \u5904\u7406\u6570\u636e \u83b7\u53d6\u52a0\u5bc6\u540e\u7684\u6570\u636e \u6216\u662f\u683c\u5f0f\u5316\u540e\u7684\u6570\u636e\n     * @param data \u5b57\u7b26\u4e32\n     * @param sensitiveEnum \u7c7b\u578b\n     * @return \u5904\u7406\u540e\u7684\u5b57\u7b26\u4e32\n     */",
    "source_code": "\npublic static String getEncodeData(String data, SensitiveEnum sensitiveEnum){\n    String result;\n    switch (sensitiveEnum){\n        case ENCODE:\n            try {\n                result = AesEncryptUtil.encrypt(data);\n            } catch (Exception exception) {\n                log.error(\"\u6570\u636e\u52a0\u5bc6\u9519\u8bef\", exception.getMessage());\n                result = data;\n            }\n            break;\n        case CHINESE_NAME:\n            result = chineseName(data);\n            break;\n        case ID_CARD:\n            result = idCardNum(data);\n            break;\n        case FIXED_PHONE:\n            result = fixedPhone(data);\n            break;\n        case MOBILE_PHONE:\n            result = mobilePhone(data);\n            break;\n        case ADDRESS:\n            result = address(data, 3);\n            break;\n        case EMAIL:\n            result = email(data);\n            break;\n        case BANK_CARD:\n            result = bankCard(data);\n            break;\n        case CNAPS_CODE:\n            result = cnapsCode(data);\n            break;\n        default:\n            result = data;\n    }\n    return result;\n}\n",
    "class_name": "SensitiveInfoUtil",
    "method_name": "getEncodeData",
    "arguments": [
        "String data",
        "SensitiveEnum sensitiveEnum"
    ],
    "generate_test": [
        "@Test\npublic void getEncodeDataTest() {\n    String testData = \"1234567890\";\n    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n    String expectedResult = AesEncryptUtil.encrypt(testData);\n    String actualResult = SensitiveInfoUtil.getEncodeData(testData, sensitiveEnum);\n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\npublic void getEncodeDataTest() {\n    String data = \"test data\";\n    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n    String expectedResult = \"expected result\";\n\n    String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n\n    assertEquals(expectedResult, result);\n}",
        "@Test\npublic void getEncodeDataTest() {\n    String input = \"Sensitive Data\";\n    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n    \n    String expected = AesEncryptUtil.encrypt(input);\n    String actual = SensitiveInfoUtil.getEncodeData(input, sensitiveEnum);\n    \n    assertEquals(expected, actual);\n}",
        "@Test\npublic void getEncodeDataTest() {\n    String testData = \"1234567890\";\n    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n    String expected = \"EncryptedData\";  // Replace with expected encrypted data\n    String actual = SensitiveInfoUtil.getEncodeData(testData, sensitiveEnum);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void getEncodeDataTest() {\n    // Given\n    String data = \"123456789\";\n    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n    \n    // When\n    String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n    \n    // Then\n    assertEquals(\"encrypted_result\", result); // Replace \"encrypted_result\" with the expected encrypted result\n}",
        "@Test\npublic void getEncodeDataTest() {\n    // Given\n    String data = \"123456\";\n    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n\n    // When\n    String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n\n    // Then\n    assertEquals(\"expectedEncodedStringHere\", result);\n}",
        "@Test\n    public void getEncodeDataTest() {\n        String data = \"1234567890\";\n        SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n        String expected = \"encryptedData\"; // Replace with expected encrypted data\n        \n        String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n        \n        assertEquals(expected, result);\n    }",
        "@Test\npublic void getEncodeDataTest() {\n    String data = \"123456789\";\n    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n    String expectedResult = \"encryptedData\"; // replace with expected encrypted data\n    String actualResult = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n    assertEquals(expectedResult, actualResult);\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.jeecg.common.desensitization.enums.SensitiveEnum;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        String testData = \"test12345\";\n        SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n        String expectedResult = \"encrypted_test12345\";\n        \n        // Mocking the AesEncryptUtil.encrypt method\n        AesEncryptUtil aesEncryptUtil = mock(AesEncryptUtil.class);\n        when(aesEncryptUtil.encrypt(testData)).thenReturn(\"encrypted_test12345\");\n\n        // Testing the getEncodeData method\n        String actualResult = SensitiveInfoUtil.getEncodeData(testData, sensitiveEnum);\n\n        // Verifying the AesEncryptUtil.encrypt method is called with the correct input\n        verify(aesEncryptUtil).encrypt(testData);\n\n        // Asserting the expected result with the actual result\n        assertEquals(expectedResult, actualResult);\n    }\n}",
        "@Test\npublic void getEncodeDataTest() {\n    String data = \"123456789\";\n    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n    String expectedResult = \"encryptedData\"; // replace with expected result\n    String actualResult = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n    assertEquals(expectedResult, actualResult);\n}"
    ]
}