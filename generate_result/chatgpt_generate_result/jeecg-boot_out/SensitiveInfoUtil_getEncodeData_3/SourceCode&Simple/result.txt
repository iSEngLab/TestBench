Source code: 


public static String getEncodeData(String data, SensitiveEnum sensitiveEnum){
    String result;
    switch (sensitiveEnum){
        case ENCODE:
            try {
                result = AesEncryptUtil.encrypt(data);
            } catch (Exception exception) {
                log.error("数据加密错误", exception.getMessage());
                result = data;
            }
            break;
        case CHINESE_NAME:
            result = chineseName(data);
            break;
        case ID_CARD:
            result = idCardNum(data);
            break;
        case FIXED_PHONE:
            result = fixedPhone(data);
            break;
        case MOBILE_PHONE:
            result = mobilePhone(data);
            break;
        case ADDRESS:
            result = address(data, 3);
            break;
        case EMAIL:
            result = email(data);
            break;
        case BANK_CARD:
            result = bankCard(data);
            break;
        case CNAPS_CODE:
            result = cnapsCode(data);
            break;
        default:
            result = data;
    }
    return result;
}



No.1 generated result --------------------------

@Test
public void getEncodeDataTest() {
    String testData = "1234567890";
    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;
    String expectedResult = AesEncryptUtil.encrypt(testData);
    String actualResult = SensitiveInfoUtil.getEncodeData(testData, sensitiveEnum);
    assertEquals(expectedResult, actualResult);
}


No.2 generated result --------------------------

@Test
public void getEncodeDataTest() {
    String data = "test data";
    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;
    String expectedResult = "expected result";

    String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);

    assertEquals(expectedResult, result);
}


No.3 generated result --------------------------

@Test
public void getEncodeDataTest() {
    String input = "Sensitive Data";
    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;
    
    String expected = AesEncryptUtil.encrypt(input);
    String actual = SensitiveInfoUtil.getEncodeData(input, sensitiveEnum);
    
    assertEquals(expected, actual);
}


No.4 generated result --------------------------

@Test
public void getEncodeDataTest() {
    String testData = "1234567890";
    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;
    String expected = "EncryptedData";  // Replace with expected encrypted data
    String actual = SensitiveInfoUtil.getEncodeData(testData, sensitiveEnum);
    assertEquals(expected, actual);
}


No.5 generated result --------------------------

@Test
public void getEncodeDataTest() {
    // Given
    String data = "123456789";
    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;
    
    // When
    String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);
    
    // Then
    assertEquals("encrypted_result", result); // Replace "encrypted_result" with the expected encrypted result
}


No.6 generated result --------------------------

@Test
public void getEncodeDataTest() {
    // Given
    String data = "123456";
    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;

    // When
    String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);

    // Then
    assertEquals("expectedEncodedStringHere", result);
}


No.7 generated result --------------------------

@Test
    public void getEncodeDataTest() {
        String data = "1234567890";
        SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;
        String expected = "encryptedData"; // Replace with expected encrypted data
        
        String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);
        
        assertEquals(expected, result);
    }


No.8 generated result --------------------------

@Test
public void getEncodeDataTest() {
    String data = "123456789";
    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;
    String expectedResult = "encryptedData"; // replace with expected encrypted data
    String actualResult = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);
    assertEquals(expectedResult, actualResult);
}


No.9 generated result --------------------------

package org.jeecg.common.desensitization.util;

import org.jeecg.common.desensitization.enums.SensitiveEnum;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class SensitiveInfoUtilTest {
    @Test
    public void getEncodeDataTest() {
        String testData = "test12345";
        SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;
        String expectedResult = "encrypted_test12345";
        
        // Mocking the AesEncryptUtil.encrypt method
        AesEncryptUtil aesEncryptUtil = mock(AesEncryptUtil.class);
        when(aesEncryptUtil.encrypt(testData)).thenReturn("encrypted_test12345");

        // Testing the getEncodeData method
        String actualResult = SensitiveInfoUtil.getEncodeData(testData, sensitiveEnum);

        // Verifying the AesEncryptUtil.encrypt method is called with the correct input
        verify(aesEncryptUtil).encrypt(testData);

        // Asserting the expected result with the actual result
        assertEquals(expectedResult, actualResult);
    }
}


No.10 generated result --------------------------

@Test
public void getEncodeDataTest() {
    String data = "123456789";
    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;
    String expectedResult = "encryptedData"; // replace with expected result
    String actualResult = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);
    assertEquals(expectedResult, actualResult);
}


