{
    "project_name": "jeecg-boot",
    "file_name": "SensitiveInfoUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/desensitization/util/SensitiveInfoUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.desensitization.util",
    "docstring": "/**\n     * \u5904\u7406\u5d4c\u5957\u5bf9\u8c61\n     * @param obj \u65b9\u6cd5\u8fd4\u56de\u503c\n     * @param entity \u5b9e\u4f53class\n     * @param isEncode \u662f\u5426\u52a0\u5bc6\uff08true: \u52a0\u5bc6\u64cd\u4f5c / false:\u89e3\u5bc6\u64cd\u4f5c\uff09\n     * @throws IllegalAccessException\n     */",
    "source_code": "\npublic static void handleNestedObject(Object obj, Class entity, boolean isEncode) throws IllegalAccessException {\n    Field[] fields = obj.getClass().getDeclaredFields();\n    for (Field field : fields) {\n        if(field.getType().isPrimitive()){\n            continue;\n        }\n        if(field.getType().equals(entity)){\n            // \u5bf9\u8c61\u91cc\u9762\u662f\u5b9e\u4f53\n            field.setAccessible(true);\n            Object nestedObject = field.get(obj);\n            handlerObject(nestedObject, isEncode);\n            break;\n        }else{\n            // \u5bf9\u8c61\u91cc\u9762\u662fList<\u5b9e\u4f53>\n            if(field.getGenericType() instanceof ParameterizedType){\n                ParameterizedType pt = (ParameterizedType)field.getGenericType();\n                if(pt.getRawType().equals(List.class)){\n                    if(pt.getActualTypeArguments()[0].equals(entity)){\n                        field.setAccessible(true);\n                        Object nestedObject = field.get(obj);\n                        handleList(nestedObject, entity, isEncode);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "class_name": "SensitiveInfoUtil",
    "method_name": "handleNestedObject",
    "arguments": [
        "Object obj",
        "Class entity",
        "boolean isEncode"
    ],
    "generate_test": [
        "// Test case to ensure that the handleNestedObject method works as expected\n@Test\npublic void handleNestedObjectTest() {\n    // Given\n    Object obj = new Object();\n    Class entity = Object.class;\n    boolean isEncode = true;  // Assuming true for this test\n    \n    // When\n    // Call the handleNestedObject method and assert that it does not throw an exception\n    assertDoesNotThrow(() -> {\n        SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n    });\n}",
        "@Test\npublic void handleNestedObjectTest() {\n    try {\n        SensitiveInfoUtil.handleNestedObject(new Object(), Class.class, true);\n    } catch (IllegalAccessException e) {\n        fail(\"Exception thrown while testing handleNestedObject method: \" + e.getMessage());\n    }\n}",
        "@Test\npublic void handleNestedObjectTest() {\n    Class entity = ExampleEntity.class;\n    Object obj = new ExampleObject();\n    boolean isEncode = true;\n    assertDoesNotThrow(() -> SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode));\n}",
        "public void handleNestedObjectTest() {\n    Object obj = new Object();\n    Class entity = obj.getClass();\n    boolean isEncode = true;\n    assertThrows(IllegalAccessException.class, () -> SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode)); \n}",
        "public void handleNestedObjectTest() {\n    // Create mock object\n    MyEntity nestedEntity = new MyEntity();\n    nestedEntity.setSensitiveField(\"sensitive\");\n\n    // Create main entity\n    MainEntity mainEntity = new MainEntity();\n    mainEntity.setNestedObject(nestedEntity);\n\n    // Call the method\n    try {\n        SensitiveInfoUtil.handleNestedObject(mainEntity, MyEntity.class, false);\n    } catch (IllegalAccessException e) {\n        fail(\"Exception thrown\");\n    }\n\n    // Write assertions here\n    <Assert that the nested object has been handled correctly>\n}",
        "@Test\npublic void handleNestedObjectTest() {\n    // Initialize test data\n    Class entity = TestEntity.class;\n    boolean isEncode = true;\n    Object testObj = new TestObject();\n\n    // Call the method and test\n    assertDoesNotThrow(() -> SensitiveInfoUtil.handleNestedObject(testObj, entity, isEncode));\n}",
        "@Test\npublic void handleNestedObjectTest() {\n    // Given\n    Object obj = new Object(); // Replace with actual object\n    Class entity = Object.class; // Replace with actual entity class\n    boolean isEncode = true;\n    \n    // When\n    // Call the method to be tested\n    assertDoesNotThrow(() -> SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode));\n    \n    // Then\n    // Verify the expected behavior\n    // Add specific assertions based on the expected behavior of the handleNestedObject method\n    // For example:\n    // assertTrue(specificCondition);\n    // assertEquals(expectedValue, actualValue);\n}",
        "@Test\n    public void handleNestedObjectTest() {\n        Object obj = new Object();\n        Class entity = obj.getClass();\n        boolean isEncode = false;\n        assertDoesNotThrow(() -> SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode));\n    }",
        "@Test\npublic void handleNestedObjectTest() {\n    // Arrange\n    Object obj = new Object();  // replace with actual object\n    Class entity = Object.class;  // replace with actual entity class\n    boolean isEncode = false;  // replace with actual value\n    \n    // Act\n    try {\n        SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n    } catch (IllegalAccessException e) {\n        e.printStackTrace();\n    }\n    \n    // Assert\n    // Add assertion statements based on the expected behavior of the handleNestedObject function\n}",
        "\n@Test\npublic void handleNestedObjectTest() {\n    // Create a test object and entity\n    Object obj = new Object();\n    Class entity = Object.class;\n    boolean isEncode = true;\n  \n    // Call the method\n    assertDoesNotThrow(() -> SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode));\n}"
    ]
}