Source code: 


public static void handleNestedObject(Object obj, Class entity, boolean isEncode) throws IllegalAccessException {
    Field[] fields = obj.getClass().getDeclaredFields();
    for (Field field : fields) {
        if(field.getType().isPrimitive()){
            continue;
        }
        if(field.getType().equals(entity)){
            // 对象里面是实体
            field.setAccessible(true);
            Object nestedObject = field.get(obj);
            handlerObject(nestedObject, isEncode);
            break;
        }else{
            // 对象里面是List<实体>
            if(field.getGenericType() instanceof ParameterizedType){
                ParameterizedType pt = (ParameterizedType)field.getGenericType();
                if(pt.getRawType().equals(List.class)){
                    if(pt.getActualTypeArguments()[0].equals(entity)){
                        field.setAccessible(true);
                        Object nestedObject = field.get(obj);
                        handleList(nestedObject, entity, isEncode);
                        break;
                    }
                }
            }
        }
    }
}



No.1 generated result --------------------------

// Test case to ensure that the handleNestedObject method works as expected
@Test
public void handleNestedObjectTest() {
    // Given
    Object obj = new Object();
    Class entity = Object.class;
    boolean isEncode = true;  // Assuming true for this test
    
    // When
    // Call the handleNestedObject method and assert that it does not throw an exception
    assertDoesNotThrow(() -> {
        SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);
    });
}


No.2 generated result --------------------------

@Test
public void handleNestedObjectTest() {
    try {
        SensitiveInfoUtil.handleNestedObject(new Object(), Class.class, true);
    } catch (IllegalAccessException e) {
        fail("Exception thrown while testing handleNestedObject method: " + e.getMessage());
    }
}


No.3 generated result --------------------------

@Test
public void handleNestedObjectTest() {
    Class entity = ExampleEntity.class;
    Object obj = new ExampleObject();
    boolean isEncode = true;
    assertDoesNotThrow(() -> SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode));
}


No.4 generated result --------------------------

public void handleNestedObjectTest() {
    Object obj = new Object();
    Class entity = obj.getClass();
    boolean isEncode = true;
    assertThrows(IllegalAccessException.class, () -> SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode)); 
}


No.5 generated result --------------------------

public void handleNestedObjectTest() {
    // Create mock object
    MyEntity nestedEntity = new MyEntity();
    nestedEntity.setSensitiveField("sensitive");

    // Create main entity
    MainEntity mainEntity = new MainEntity();
    mainEntity.setNestedObject(nestedEntity);

    // Call the method
    try {
        SensitiveInfoUtil.handleNestedObject(mainEntity, MyEntity.class, false);
    } catch (IllegalAccessException e) {
        fail("Exception thrown");
    }

    // Write assertions here
    <Assert that the nested object has been handled correctly>
}


No.6 generated result --------------------------

@Test
public void handleNestedObjectTest() {
    // Initialize test data
    Class entity = TestEntity.class;
    boolean isEncode = true;
    Object testObj = new TestObject();

    // Call the method and test
    assertDoesNotThrow(() -> SensitiveInfoUtil.handleNestedObject(testObj, entity, isEncode));
}


No.7 generated result --------------------------

@Test
public void handleNestedObjectTest() {
    // Given
    Object obj = new Object(); // Replace with actual object
    Class entity = Object.class; // Replace with actual entity class
    boolean isEncode = true;
    
    // When
    // Call the method to be tested
    assertDoesNotThrow(() -> SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode));
    
    // Then
    // Verify the expected behavior
    // Add specific assertions based on the expected behavior of the handleNestedObject method
    // For example:
    // assertTrue(specificCondition);
    // assertEquals(expectedValue, actualValue);
}


No.8 generated result --------------------------

@Test
    public void handleNestedObjectTest() {
        Object obj = new Object();
        Class entity = obj.getClass();
        boolean isEncode = false;
        assertDoesNotThrow(() -> SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode));
    }


No.9 generated result --------------------------

@Test
public void handleNestedObjectTest() {
    // Arrange
    Object obj = new Object();  // replace with actual object
    Class entity = Object.class;  // replace with actual entity class
    boolean isEncode = false;  // replace with actual value
    
    // Act
    try {
        SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    }
    
    // Assert
    // Add assertion statements based on the expected behavior of the handleNestedObject function
}


No.10 generated result --------------------------


@Test
public void handleNestedObjectTest() {
    // Create a test object and entity
    Object obj = new Object();
    Class entity = Object.class;
    boolean isEncode = true;
  
    // Call the method
    assertDoesNotThrow(() -> SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode));
}


