{
    "project_name": "jeecg-boot",
    "file_name": "SensitiveInfoUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/desensitization/util/SensitiveInfoUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.desensitization.util",
    "docstring": "/**\n     * \u5904\u7406\u5d4c\u5957\u5bf9\u8c61\n     * @param obj \u65b9\u6cd5\u8fd4\u56de\u503c\n     * @param entity \u5b9e\u4f53class\n     * @param isEncode \u662f\u5426\u52a0\u5bc6\uff08true: \u52a0\u5bc6\u64cd\u4f5c / false:\u89e3\u5bc6\u64cd\u4f5c\uff09\n     * @throws IllegalAccessException\n     */",
    "source_code": "\npublic static void handleNestedObject(Object obj, Class entity, boolean isEncode) throws IllegalAccessException {\n    Field[] fields = obj.getClass().getDeclaredFields();\n    for (Field field : fields) {\n        if(field.getType().isPrimitive()){\n            continue;\n        }\n        if(field.getType().equals(entity)){\n            // \u5bf9\u8c61\u91cc\u9762\u662f\u5b9e\u4f53\n            field.setAccessible(true);\n            Object nestedObject = field.get(obj);\n            handlerObject(nestedObject, isEncode);\n            break;\n        }else{\n            // \u5bf9\u8c61\u91cc\u9762\u662fList<\u5b9e\u4f53>\n            if(field.getGenericType() instanceof ParameterizedType){\n                ParameterizedType pt = (ParameterizedType)field.getGenericType();\n                if(pt.getRawType().equals(List.class)){\n                    if(pt.getActualTypeArguments()[0].equals(entity)){\n                        field.setAccessible(true);\n                        Object nestedObject = field.get(obj);\n                        handleList(nestedObject, entity, isEncode);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "class_name": "SensitiveInfoUtil",
    "method_name": "handleNestedObject",
    "arguments": [
        "Object obj",
        "Class entity",
        "boolean isEncode"
    ],
    "generate_test": [
        "\n@Test\npublic void handleNestedObjectTest() {\n    // create object and entity for testing\n    Object obj = new Object();\n    Class entity = obj.getClass();\n    boolean isEncode = true;\n    \n    // call the method and assert the result\n    assertThrows(IllegalAccessException.class, () -> { SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode); });\n}",
        "@Test\npublic void handleNestedObjectTest() {\n    // Create object to test\n    Object testObject = new Object();\n    Class<Object> entityClass = Object.class;\n    boolean isEncode = true;\n    \n    // Call the method\n    try {\n        SensitiveInfoUtil.handleNestedObject(testObject, entityClass, isEncode);\n        // Add assertions here based on the expected behavior of the method\n    } catch (IllegalAccessException e) {\n        e.printStackTrace();\n    }\n}",
        "@Test\npublic void handleNestedObjectTest() {\n    // Create an object to be tested\n    Object obj = new Object();\n    // Define the entity class\n    Class entity = SomeEntity.class;\n    // Define boolean flag for encoding\n    boolean isEncode = true;\n    \n    // Call the method being tested\n    assertDoesNotThrow(() -> {\n        SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n    });\n}",
        "@Test\npublic void handleNestedObjectTest() {\n    Object obj = // create an instance of the object to test\n    Class entity = // specify the entity class\n    boolean isEncode = true; // or false\n    assertThrows(IllegalAccessException.class, () -> SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode));\n}",
        "@Test\npublic void handleNestedObjectTest() {\n   // Creating an object\n   YourClass obj = new YourClass();\n   // Setting up the values\n   obj.setField1(\"value1\");\n   obj.setField2(\"value2\");\n   \n   // Replacing the sensitive info\n   SensitiveInfoUtil.handleNestedObject(obj, YourEntity.class, true);\n   \n   // Testing the results\n   // Use assertions to verify the output after the sensitive info is handled\n   assertEquals(\"expectedValue1\", obj.getField1());\n   assertEquals(\"expectedValue2\", obj.getField2());\n}",
        "@Test\npublic void handleNestedObjectTest() {\n    // Create object to test\n    Object obj = new Object();\n    Class entity = Object.class;\n    boolean isEncode = true;\n    // Call the method to test\n    SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n    // Add assertions for the expected outcome\n    <ADD ASSERTIONS HERE>\n}",
        "    // Arrange\n    Object obj = new Object();\n    Class entity = Object.class;\n    boolean isEncode = true;\n    \n    // Act\n    try {\n        SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n    } catch (IllegalAccessException e) {\n        e.printStackTrace();\n    }\n    \n    // Assert\n    // Add assertion here based on the expected behavior of the method",
        "@Test\npublic void handleNestedObjectTest() {\n    // Create test object\n    Object testObj = new Object();\n    \n    // Call the method to be tested\n    assertDoesNotThrow(() -> {\n        SensitiveInfoUtil.handleNestedObject(testObj, MyEntity.class, true);\n    });\n}",
        "@Test\npublic void handleNestedObjectTest() {\n    // Create mock object and entity\n    Object obj = new Object();\n    Class entity = Object.class;\n    boolean isEncode = true;\n    \n    // Call the method and assert the result\n    assertThrows(IllegalAccessException.class, () -> SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode));\n}",
        "@Test\npublic void handleNestedObjectTest() {\n    // Create an object and class for testing\n    Object obj = new Object();\n    Class entity = Object.class;\n    boolean isEncode = true;\n    // Call the method to test\n    SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n    // Add assertions for the expected output\n    //...\n}"
    ]
}