Source code: 


public static void handleNestedObject(Object obj, Class entity, boolean isEncode) throws IllegalAccessException {
    Field[] fields = obj.getClass().getDeclaredFields();
    for (Field field : fields) {
        if(field.getType().isPrimitive()){
            continue;
        }
        if(field.getType().equals(entity)){
            // 对象里面是实体
            field.setAccessible(true);
            Object nestedObject = field.get(obj);
            handlerObject(nestedObject, isEncode);
            break;
        }else{
            // 对象里面是List<实体>
            if(field.getGenericType() instanceof ParameterizedType){
                ParameterizedType pt = (ParameterizedType)field.getGenericType();
                if(pt.getRawType().equals(List.class)){
                    if(pt.getActualTypeArguments()[0].equals(entity)){
                        field.setAccessible(true);
                        Object nestedObject = field.get(obj);
                        handleList(nestedObject, entity, isEncode);
                        break;
                    }
                }
            }
        }
    }
}



No.1 generated result --------------------------


@Test
public void handleNestedObjectTest() {
    // create object and entity for testing
    Object obj = new Object();
    Class entity = obj.getClass();
    boolean isEncode = true;
    
    // call the method and assert the result
    assertThrows(IllegalAccessException.class, () -> { SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode); });
}


No.2 generated result --------------------------

@Test
public void handleNestedObjectTest() {
    // Create object to test
    Object testObject = new Object();
    Class<Object> entityClass = Object.class;
    boolean isEncode = true;
    
    // Call the method
    try {
        SensitiveInfoUtil.handleNestedObject(testObject, entityClass, isEncode);
        // Add assertions here based on the expected behavior of the method
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    }
}


No.3 generated result --------------------------

@Test
public void handleNestedObjectTest() {
    // Create an object to be tested
    Object obj = new Object();
    // Define the entity class
    Class entity = SomeEntity.class;
    // Define boolean flag for encoding
    boolean isEncode = true;
    
    // Call the method being tested
    assertDoesNotThrow(() -> {
        SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);
    });
}


No.4 generated result --------------------------

@Test
public void handleNestedObjectTest() {
    Object obj = // create an instance of the object to test
    Class entity = // specify the entity class
    boolean isEncode = true; // or false
    assertThrows(IllegalAccessException.class, () -> SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode));
}


No.5 generated result --------------------------

@Test
public void handleNestedObjectTest() {
   // Creating an object
   YourClass obj = new YourClass();
   // Setting up the values
   obj.setField1("value1");
   obj.setField2("value2");
   
   // Replacing the sensitive info
   SensitiveInfoUtil.handleNestedObject(obj, YourEntity.class, true);
   
   // Testing the results
   // Use assertions to verify the output after the sensitive info is handled
   assertEquals("expectedValue1", obj.getField1());
   assertEquals("expectedValue2", obj.getField2());
}


No.6 generated result --------------------------

@Test
public void handleNestedObjectTest() {
    // Create object to test
    Object obj = new Object();
    Class entity = Object.class;
    boolean isEncode = true;
    // Call the method to test
    SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);
    // Add assertions for the expected outcome
    <ADD ASSERTIONS HERE>
}


No.7 generated result --------------------------

    // Arrange
    Object obj = new Object();
    Class entity = Object.class;
    boolean isEncode = true;
    
    // Act
    try {
        SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    }
    
    // Assert
    // Add assertion here based on the expected behavior of the method


No.8 generated result --------------------------

@Test
public void handleNestedObjectTest() {
    // Create test object
    Object testObj = new Object();
    
    // Call the method to be tested
    assertDoesNotThrow(() -> {
        SensitiveInfoUtil.handleNestedObject(testObj, MyEntity.class, true);
    });
}


No.9 generated result --------------------------

@Test
public void handleNestedObjectTest() {
    // Create mock object and entity
    Object obj = new Object();
    Class entity = Object.class;
    boolean isEncode = true;
    
    // Call the method and assert the result
    assertThrows(IllegalAccessException.class, () -> SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode));
}


No.10 generated result --------------------------

@Test
public void handleNestedObjectTest() {
    // Create an object and class for testing
    Object obj = new Object();
    Class entity = Object.class;
    boolean isEncode = true;
    // Call the method to test
    SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);
    // Add assertions for the expected output
    //...
}


