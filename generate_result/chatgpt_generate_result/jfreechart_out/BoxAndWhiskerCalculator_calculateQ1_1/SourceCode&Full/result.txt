Source code: 


public static double calculateQ1(List values) {
    Args.nullNotPermitted(values, "values");

    double result = Double.NaN;
    int count = values.size();
    if (count > 0) {
        if (count % 2 == 1) {
            if (count > 1) {
                result = Statistics.calculateMedian(values, 0, count / 2);
            }
            else {
                result = Statistics.calculateMedian(values, 0, 0);
            }
        }
        else {
            result = Statistics.calculateMedian(values, 0, count / 2 - 1);
        }

    }
    return result;
}



No.1 generated result --------------------------

@Test
public void calculateQ1Test() {
    List<Double> testValues = new ArrayList<>();
    testValues.add(1.0);
    testValues.add(2.0);
    testValues.add(3.0);
    testValues.add(4.0);
    testValues.add(5.0);
    double q1 = BoxAndWhiskerCalculator.calculateQ1(testValues);
    assertEquals(2.5, q1);
}


No.2 generated result --------------------------

@Test
public void calculateQ1Test() {
    List<Double> values = new ArrayList<>();
    values.add(1.0);
    values.add(2.0);
    values.add(3.0);
    double q1 = BoxAndWhiskerCalculator.calculateQ1(values);
    assertEquals(1.0, q1, 0.0001);
}


No.3 generated result --------------------------

@Test
public void calculateQ1Test() {
    List<Double> values = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);
    double q1 = BoxAndWhiskerCalculator.calculateQ1(values);
    assertEquals(2.0, q1);
}


No.4 generated result --------------------------

@Test
public void calculateQ1Test() {
    List<Double> values = new ArrayList<>();
    values.add(1.0);
    values.add(2.0);
    values.add(3.0);
    values.add(4.0);
    
    double expected = 1.5; 
    double actual = BoxAndWhiskerCalculator.calculateQ1(values);
    
    assertEquals(expected, actual, 0.001);
}


No.5 generated result --------------------------

@Test
public void calculateQ1Test() {
    List<Double> values = new ArrayList<>();
    values.add(1.0);
    values.add(3.0);
    values.add(5.0);
    values.add(7.0);
    values.add(9.0);
    double q1 = BoxAndWhiskerCalculator.calculateQ1(values);
    assertEquals(3.0, q1, 0.0001);
}


No.6 generated result --------------------------

public void calculateQ1Test() {
    List<Double> values = new ArrayList<>();
    values.add(10.0);
    values.add(20.0);
    values.add(30.0);
    
    double result = BoxAndWhiskerCalculator.calculateQ1(values);
    
    assertEquals(15.0, result, 0.001);
}


No.7 generated result --------------------------

@Test
public void calculateQ1Test() {
    List<Double> testValues = new ArrayList<>();
    testValues.add(10.0);
    testValues.add(20.0);
    testValues.add(30.0);
    testValues.add(40.0);
    
    double expectedQ1 = 15.0;
    double actualQ1 = BoxAndWhiskerCalculator.calculateQ1(testValues);
    assertEquals(expectedQ1, actualQ1, 0.0001);
}


No.8 generated result --------------------------

public void calculateQ1Test() {
    List<Double> testValues = new ArrayList<>();
    testValues.add(1.0);
    testValues.add(2.0);
    testValues.add(3.0);
    testValues.add(4.0);
    testValues.add(5.0);
    
    double q1 = BoxAndWhiskerCalculator.calculateQ1(testValues);
    
    assertEquals(2.0, q1);
}


No.9 generated result --------------------------

public void calculateQ1Test() {
        // Create a list of test values
        List<Double> testValues = new ArrayList<>();
        testValues.add(1.0);
        testValues.add(2.0);
        testValues.add(3.0);
        testValues.add(4.0);
        testValues.add(5.0);

        // Calculate the first quartile
        double q1 = BoxAndWhiskerCalculator.calculateQ1(testValues);

        // Assert the result
        assertEquals(1.5, q1, 0.0001);
    }


No.10 generated result --------------------------

@Test
public void calculateQ1Test() {
    List<Double> values = new ArrayList<>();
    values.add(2.0);
    values.add(4.0);
    values.add(6.0);
    values.add(8.0);
    double result = BoxAndWhiskerCalculator.calculateQ1(values);
    assertEquals(3.0, result, 0.001);
}


