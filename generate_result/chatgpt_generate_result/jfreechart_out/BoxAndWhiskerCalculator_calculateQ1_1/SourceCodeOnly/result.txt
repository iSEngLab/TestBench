Source code: 


public static double calculateQ1(List values) {
    Args.nullNotPermitted(values, "values");

    double result = Double.NaN;
    int count = values.size();
    if (count > 0) {
        if (count % 2 == 1) {
            if (count > 1) {
                result = Statistics.calculateMedian(values, 0, count / 2);
            }
            else {
                result = Statistics.calculateMedian(values, 0, 0);
            }
        }
        else {
            result = Statistics.calculateMedian(values, 0, count / 2 - 1);
        }

    }
    return result;
}



No.1 generated result --------------------------

@Test
public void calculateQ1Test() {
    List<Double> values = new ArrayList<>();
    values.add(1.0);
    values.add(2.0);
    values.add(3.0);
    double result = BoxAndWhiskerCalculator.calculateQ1(values);
    assertEquals(1.5, result, 0.001);
}


No.2 generated result --------------------------

@Test
public void calculateQ1Test() {
    List<Double> values = new ArrayList<>();
    values.add(1.0);
    values.add(2.0);
    values.add(3.0);
    double actual = BoxAndWhiskerCalculator.calculateQ1(values);
    double expected = 1.5;
    assertEquals(expected, actual, 0.001);
}


No.3 generated result --------------------------

@Test
public void calculateQ1Test() {
    List<Double> values = new ArrayList<>();
    values.add(10.0);
    values.add(20.0);
    values.add(30.0);
    values.add(40.0);
  
    double result = BoxAndWhiskerCalculator.calculateQ1(values);
  
    assertEquals(15.0, result, 0.00001);
}


No.4 generated result --------------------------

@Test
public void calculateQ1Test() {
    List<Integer> values = Arrays.asList(1, 2, 3, 4, 5);
    double expected = 2.5; 
    double result = BoxAndWhiskerCalculator.calculateQ1(values);
    assertEquals(expected, result, 0);
}


No.5 generated result --------------------------


public void calculateQ1Test() {
    List<Double> values = new ArrayList<>();
    values.add(10.0);
    values.add(20.0);
    values.add(30.0);
    
    double result = BoxAndWhiskerCalculator.calculateQ1(values);
    
    assertEquals(10.0, result, 0.0001);
}


No.6 generated result --------------------------

@Test
public void calculateQ1Test() {
    List<Double> values = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);
    double result = BoxAndWhiskerCalculator.calculateQ1(values);
    assertEquals(2.0, result, 0.000001);
}


No.7 generated result --------------------------

@Test
public void calculateQ1Test() {
    List<Double> values = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);
    double expected = 2.0; // Replace with the expected value
    double actual = Statistics.calculateQ1(values);
    assertEquals(expected, actual, 0.0001); // Replace with the acceptable delta value
}


No.8 generated result --------------------------

@Test
public void calculateQ1Test() {
    List<Double> testList = new ArrayList<>();
    testList.add(1.0);
    testList.add(2.0);
    testList.add(3.0);
    double result = BoxAndWhiskerCalculator.calculateQ1(testList);
    assertEquals(1.5, result, 0.0001);
}


No.9 generated result --------------------------

@Test
public void calculateQ1Test() {
    List<Double> values = new ArrayList<Double>();
    values.add(10.0);
    values.add(20.0);
    values.add(30.0);
    values.add(40.0);
    values.add(50.0);
    double result = BoxAndWhiskerCalculator.calculateQ1(values);
    assertEquals(15.0, result, 0.0001);
}


No.10 generated result --------------------------

List<Integer> testList = new ArrayList<>();
testList.add(5);
testList.add(10);
testList.add(15);
double expected = 5;
double actual = BoxAndWhiskerCalculator.calculateQ1(testList);
assertEquals(expected, actual);


