{
    "project_name": "jfreechart",
    "file_name": "DatasetUtils.java",
    "relative_path": "jfreechart/src/main/java/org/jfree/data/general/DatasetUtils.java",
    "execute_path": "jfreechart",
    "package": "org.jfree.data.general",
    "docstring": "/**\n     * Calculates the total of all the values in a {@link PieDataset}.  If\n     * the dataset contains negative or {@code null} values, they are\n     * ignored.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The total.\n     */",
    "source_code": "\npublic static double calculatePieDatasetTotal(PieDataset dataset) {\n    Args.nullNotPermitted(dataset, \"dataset\");\n    List keys = dataset.getKeys();\n    double totalValue = 0;\n    Iterator iterator = keys.iterator();\n    while (iterator.hasNext()) {\n        Comparable current = (Comparable) iterator.next();\n        if (current != null) {\n            Number value = dataset.getValue(current);\n            double v = 0.0;\n            if (value != null) {\n                v = value.doubleValue();\n            }\n            if (v > 0) {\n                totalValue = totalValue + v;\n            }\n        }\n    }\n    return totalValue;\n}\n",
    "class_name": "DatasetUtils",
    "method_name": "calculatePieDatasetTotal",
    "arguments": [
        "PieDataset dataset"
    ],
    "generate_test": [
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    PieDataset dataset = new DefaultPieDataset();\n    ((DefaultPieDataset) dataset).setValue(\"Category1\", 10);\n    ((DefaultPieDataset) dataset).setValue(\"Category2\", 15);\n    double expected = 25.0;\n    double result = DatasetUtils.calculatePieDatasetTotal(dataset);\n    assertEquals(expected, result, 0);\n}\n",
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    DefaultPieDataset dataset = new DefaultPieDataset();\n    dataset.setValue(\"A\", 1.0);\n    dataset.setValue(\"B\", 2.0);\n    dataset.setValue(\"C\", 3.0);\n    double expected = 6.0;\n    double result = DatasetUtils.calculatePieDatasetTotal(dataset);\n    assertEquals(expected, result);\n}",
        "public void calculatePieDatasetTotalTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"A\", 10);\n        dataset.setValue(\"B\", 20);\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(30, total);\n}",
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    // Create mock PieDataset\n    PieDataset dataset = Mockito.mock(PieDataset.class);\n    Mockito.when(dataset.getKeys()).thenReturn(new ArrayList<>()); // set up dataset keys\n    \n    // Set up dataset values\n    Mockito.when(dataset.getValue(\"Key1\")).thenReturn(5);\n    Mockito.when(dataset.getValue(\"Key2\")).thenReturn(10);\n    \n    double result = DatasetUtils.calculatePieDatasetTotal(dataset);\n    \n    assertEquals(15, result); // Compare expected result with actual result\n}",
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    DefaultPieDataset dataset = new DefaultPieDataset();\n    dataset.setValue(\"A\", 10);\n    dataset.setValue(\"B\", 20);\n    dataset.setValue(\"C\", 30);\n    double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n    assertEquals(60, total);\n}",
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    DefaultPieDataset dataset = new DefaultPieDataset();\n    dataset.setValue(\"A\", 10);\n    dataset.setValue(\"B\", 20);\n    dataset.setValue(\"C\", 30);\n    double result = DatasetUtils.calculatePieDatasetTotal(dataset);\n    assertEquals(60.0, result, 0.001);\n}",
        "PieDataset dataset = new DefaultPieDataset();\n((DefaultPieDataset) dataset).setValue(\"A\", 10.0);\n((DefaultPieDataset) dataset).setValue(\"B\", 20.0);\n((DefaultPieDataset) dataset).setValue(\"C\", 30.0);\ndouble result = DatasetUtils.calculatePieDatasetTotal(dataset);\nassertEquals(60.0, result, 0.0001);",
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    // Create a test PieDataset\n    DefaultPieDataset testDataset = new DefaultPieDataset();\n    testDataset.setValue(\"A\", 10);\n    testDataset.setValue(\"B\", 20);\n    testDataset.setValue(\"C\", 30);\n    \n    // Call the method being tested\n    double result = DatasetUtils.calculatePieDatasetTotal(testDataset);\n    \n    // Verify the result\n    assertEquals(60, result, 0.0001);\n}",
        "public void calculatePieDatasetTotalTest() {\n    DefaultPieDataset dataset = new DefaultPieDataset();\n    dataset.setValue(\"A\", 10);\n    dataset.setValue(\"B\", 20);\n    dataset.setValue(\"C\", 30);\n    \n    double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n    \n    assertEquals(60, total, 0.0);\n}",
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    // Create a sample PieDataset\n    DefaultPieDataset pieDataset = new DefaultPieDataset();\n    pieDataset.setValue(\"A\", 10);\n    pieDataset.setValue(\"B\", 20);\n    pieDataset.setValue(\"C\", 30);\n    \n    // Test the calculatePieDatasetTotal method\n    double total = DatasetUtils.calculatePieDatasetTotal(pieDataset);\n    assertEquals(60, total);\n}\n"
    ]
}