{
    "project_name": "jfreechart",
    "file_name": "DatasetUtils.java",
    "relative_path": "jfreechart/src/main/java/org/jfree/data/general/DatasetUtils.java",
    "execute_path": "jfreechart",
    "package": "org.jfree.data.general",
    "docstring": "/**\n     * Calculates the total of all the values in a {@link PieDataset}.  If\n     * the dataset contains negative or {@code null} values, they are\n     * ignored.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The total.\n     */",
    "source_code": "\npublic static double calculatePieDatasetTotal(PieDataset dataset) {\n    Args.nullNotPermitted(dataset, \"dataset\");\n    List keys = dataset.getKeys();\n    double totalValue = 0;\n    Iterator iterator = keys.iterator();\n    while (iterator.hasNext()) {\n        Comparable current = (Comparable) iterator.next();\n        if (current != null) {\n            Number value = dataset.getValue(current);\n            double v = 0.0;\n            if (value != null) {\n                v = value.doubleValue();\n            }\n            if (v > 0) {\n                totalValue = totalValue + v;\n            }\n        }\n    }\n    return totalValue;\n}\n",
    "class_name": "DatasetUtils",
    "method_name": "calculatePieDatasetTotal",
    "arguments": [
        "PieDataset dataset"
    ],
    "generate_test": [
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    DefaultPieDataset dataset = new DefaultPieDataset();\n    dataset.setValue(\"Category1\", 50);\n    dataset.setValue(\"Category2\", 75);\n    dataset.setValue(\"Category3\", 100);\n    assertEquals(225, calculatePieDatasetTotal(dataset));\n}",
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    DefaultPieDataset dataset = new DefaultPieDataset();\n    dataset.setValue(\"Category 1\", 50.0);\n    dataset.setValue(\"Category 2\", 75.0);\n    assertEquals(125.0, calculatePieDatasetTotal(dataset));\n}",
        "public void calculatePieDatasetTotalTest() {\n    DefaultPieDataset dataset = new DefaultPieDataset();\n    dataset.setValue(\"A\", 25);\n    dataset.setValue(\"B\", 35);\n    double result = DatasetUtils.calculatePieDatasetTotal(dataset);\n    assertEquals(60.0, result);\n}",
        "public void calculatePieDatasetTotalTest() {\n    DefaultPieDataset dataset = new DefaultPieDataset();\n    dataset.setValue(\"A\", 25.0);\n    dataset.setValue(\"B\", 50.0);\n    dataset.setValue(\"C\", 75.0);\n    double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n    assertEquals(150.0, total, 0.001);\n}",
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    DefaultPieDataset dataset = new DefaultPieDataset();\n    dataset.setValue(\"Category 1\", 100);\n    dataset.setValue(\"Category 2\", 200);\n    double result = DatasetUtils.calculatePieDatasetTotal(dataset);\n    assertEquals(300, result);\n}",
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    DefaultPieDataset dataset = new DefaultPieDataset();\n    dataset.setValue(\"Java\", 50);\n    dataset.setValue(\"Python\", 30);\n    dataset.setValue(\"C++\", 20);\n    \n    double totalValue = DatasetUtils.calculatePieDatasetTotal(dataset);\n    \n    assertEquals(100.0, totalValue);\n}",
        "\n@Test\npublic void calculatePieDatasetTotalTest() {\n    DefaultKeyedValues values = new DefaultKeyedValues();\n    values.addValue(\"A\", 10.0);\n    values.addValue(\"B\", 20.0);\n    PieDataset dataset = new DefaultPieDataset(values);\n    \n    double result = DatasetUtils.calculatePieDatasetTotal(dataset);\n    assertEquals(30.0, result);\n}",
        "Double totalValue = DatasetUtils.calculatePieDatasetTotal(<FILL>); \nassertEquals(10, totalValue);",
        "\ndouble total = DatasetUtils.calculatePieDatasetTotal(/* Add test dataset here */);\nassertEquals(23.5, total);",
        "public void calculatePieDatasetTotalTest() {\n    DefaultPieDataset dataset = new DefaultPieDataset();\n    dataset.setValue(\"Category A\", 20);\n    dataset.setValue(\"Category B\", 30);\n    dataset.setValue(\"Category C\", 50);\n    \n    double result = DatasetUtils.calculatePieDatasetTotal(dataset);\n    assertEquals(100, result, 0.001);\n}"
    ]
}