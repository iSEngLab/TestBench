{
    "project_name": "jfreechart",
    "file_name": "JSONUtils.java",
    "relative_path": "jfreechart/src/main/java/org/jfree/data/json/JSONUtils.java",
    "execute_path": "jfreechart",
    "package": "org.jfree.data.json",
    "docstring": "/**\n     * Returns a string containing the data in JSON format.  The format is\n     * an array of arrays, where each sub-array represents one data value.\n     * The sub-array should contain two items, first the item key as a string\n     * and second the item value as a number.  For example:\n     * {@code [[\"Key A\", 1.0], [\"Key B\", 2.0]]}\n     * <br><br>\n     * Note that this method can be used with instances of {@link PieDataset}.\n     * \n     * @param data  the data ({@code null} not permitted).\n     * \n     * @return A string in JSON format. \n     */",
    "source_code": "\npublic static String writeKeyedValues(KeyedValues data) {\n    Args.nullNotPermitted(data, \"data\");\n    StringWriter sw = new StringWriter();\n    try {\n        writeKeyedValues(data, sw);\n    } catch (IOException ex) {\n        throw new RuntimeException(ex);\n    }\n    return sw.toString();\n}\n",
    "class_name": "JSONUtils",
    "method_name": "writeKeyedValues",
    "arguments": [
        "KeyedValues data"
    ],
    "generate_test": [
        "public void writeKeyedValuesTest() {\n    KeyedValues data = new DefaultKeyedValues();\n    data.addValue(\"A\", 1.0);\n    data.addValue(\"B\", 2.0);\n    String result = JSONUtils.writeKeyedValues(data);\n    assertEquals(\"[[\\\"A\\\", 1.0], [\\\"B\\\", 2.0]]\", result);\n}",
        "@Test\npublic void writeKeyedValuesTest() {\n    KeyedValuesTestImpl data = new KeyedValuesTestImpl();\n    data.addValue(\"A\", 1.0);\n    data.addValue(\"B\", 2.0);\n    String result = JSONUtils.writeKeyedValues(data);\n    String expected = \"[[\\\"A\\\", 1.0], [\\\"B\\\", 2.0]]\";\n    assertEquals(expected, result);\n}\n\nclass KeyedValuesTestImpl implements KeyedValues {\n    private List<Comparable> keys = new ArrayList<>();\n    private List<Number> values = new ArrayList<>();\n\n    public void addValue(Comparable key, Number value) {\n        keys.add(key);\n        values.add(value);\n    }\n\n    // Implement all the methods of KeyedValues interface\n    // ...\n}",
        "@Test\n  public void writeKeyedValuesTest() {\n    KeyedValues data = new KeyedValues () {\n      public Number getValue(Comparable key) {\n        return 1;\n      }\n      public int getItemCount() {return 1;}\n      public Comparable getKey(int item) {return \"Key A\";}\n      public int getIndex(Comparable key) {return 0;}\n    };\n    \n    String expected = \"[[\\\"Key A\\\", 1]]\";\n    assertEquals(expected, JSONUtilsTest.writeKeyedValues(data));\n  }",
        "@Test\npublic void writeKeyedValuesTest() {\n    KeyedValues data = new DefaultKeyedValues();\n    data.addValue(\"A\", 1.0);\n    data.addValue(\"B\", 2.0);\n    \n    String expectedResult = \"[[\\\"A\\\", 1.0], [\\\"B\\\", 2.0]]\";\n    assertEquals(expectedResult, JSONUtils.writeKeyedValues(data));\n}",
        "public void writeKeyedValuesTest() {\n    // Given\n    KeyedValues keyedValues = new DefaultKeyDataset();\n    keyedValues.addValue(\"A\", 1.0);\n    keyedValues.addValue(\"B\", 2.0);\n    \n    // When\n    String result = JSONUtils.writeKeyedValues(keyedValues);\n    \n    // Then\n    String expected = \"[[\\\"A\\\", 1.0], [\\\"B\\\", 2.0]]\";\n    assertEquals(expected, result);\n}",
        "public void writeKeyedValuesTest() {\n        KeyedValues data = new KeyedValues() {\n            public int getItemCount() {\n                return 0;\n            }\n            public Number getValue(int item) {\n                return null;\n            }\n            public Comparable getKey(int index) {\n                return null;\n            }\n            public int getIndex(Comparable key) {\n                return 0;\n            }\n            public List getKeys() {\n                return null;\n            }\n            public Number getValue(Comparable key) {\n                return null;\n            }\n            public int getIndex(Comparable key) {\n                return 0;\n            }\n        };\n        String result = JSONUtils.writeKeyedValues(data);\n        assertNotNull(result);\n    }",
        "public void writeKeyedValuesTest() {\n    KeyedValues data = new KeyedValues() {\n        public int getItemCount() {\n            return 2;\n        }\n\n        public Number getValue(int item) {\n            if (item == 0) {\n                return 1.0;\n            } else {\n                return 2.0;\n            }\n        }\n\n        public Comparable getKey(int index) {\n            if (index == 0) {\n                return \"Key A\";\n            } else {\n                return \"Key B\";\n            }\n        }\n\n        public int getIndex(Comparable key) {\n            if (key.equals(\"Key A\")) {\n                return 0;\n            } else {\n                return 1;\n            }\n        }\n\n        public Number getValue(Comparable key) {\n            if (key.equals(\"Key A\")) {\n                return 1.0;\n            } else {\n                return 2.0;\n            }\n        }\n    };\n    String result = JSONUtils.writeKeyedValues(data);\n    assertEquals(\"[[\\\"Key A\\\", 1.0], [\\\"Key B\\\", 2.0]]\", result);\n}",
        "@Test\npublic void writeKeyedValuesTest() {\n    KeyedValues data = new DefaultKeyedValues();\n    // Add data to the KeyedValues object\n    data.addValue(\"Key A\", 1.0);\n    data.addValue(\"Key B\", 2.0);\n    String expectedOutput = \"[[\\\"Key A\\\", 1.0], [\\\"Key B\\\", 2.0]]\";\n    String actualOutput = JSONUtils.writeKeyedValues(data);\n    assertEquals(expectedOutput, actualOutput);\n}",
        "\n@Test\npublic void writeKeyedValuesTest() {\n    KeyedValues data = new DefaultKeyedValues();\n    data.addValue(\"A\", 1.0);\n    data.addValue(\"B\", 2.0);\n    String expected = \"[[\\\"A\\\", 1.0], [\\\"B\\\", 2.0]]\";\n    String result = JSONUtils.writeKeyedValues(data);\n    assertEquals(expected, result);\n}",
        "@Test\npublic void writeKeyedValuesTest() {\n    KeyedValues data = new DefaultKeyedValues();\n    data.addValue(\"A\", 1.0);\n    data.addValue(\"B\", 2.0);\n    String result = JSONUtils.writeKeyedValues(data);\n    String expected = \"[[\\\"A\\\", 1.0], [\\\"B\\\", 2.0]]\";\n    assertEquals(expected, result);\n}"
    ]
}