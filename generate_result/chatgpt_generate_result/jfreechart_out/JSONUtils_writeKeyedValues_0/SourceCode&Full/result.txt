Source code: 


public static String writeKeyedValues(KeyedValues data) {
    Args.nullNotPermitted(data, "data");
    StringWriter sw = new StringWriter();
    try {
        writeKeyedValues(data, sw);
    } catch (IOException ex) {
        throw new RuntimeException(ex);
    }
    return sw.toString();
}



No.1 generated result --------------------------

public void writeKeyedValuesTest() {
    KeyedValues data = new DefaultKeyedValues();
    data.addValue("A", 1.0);
    data.addValue("B", 2.0);
    String result = JSONUtils.writeKeyedValues(data);
    assertEquals("[[\"A\", 1.0], [\"B\", 2.0]]", result);
}


No.2 generated result --------------------------

@Test
public void writeKeyedValuesTest() {
    KeyedValuesTestImpl data = new KeyedValuesTestImpl();
    data.addValue("A", 1.0);
    data.addValue("B", 2.0);
    String result = JSONUtils.writeKeyedValues(data);
    String expected = "[[\"A\", 1.0], [\"B\", 2.0]]";
    assertEquals(expected, result);
}

class KeyedValuesTestImpl implements KeyedValues {
    private List<Comparable> keys = new ArrayList<>();
    private List<Number> values = new ArrayList<>();

    public void addValue(Comparable key, Number value) {
        keys.add(key);
        values.add(value);
    }

    // Implement all the methods of KeyedValues interface
    // ...
}


No.3 generated result --------------------------

@Test
  public void writeKeyedValuesTest() {
    KeyedValues data = new KeyedValues () {
      public Number getValue(Comparable key) {
        return 1;
      }
      public int getItemCount() {return 1;}
      public Comparable getKey(int item) {return "Key A";}
      public int getIndex(Comparable key) {return 0;}
    };
    
    String expected = "[[\"Key A\", 1]]";
    assertEquals(expected, JSONUtilsTest.writeKeyedValues(data));
  }


No.4 generated result --------------------------

@Test
public void writeKeyedValuesTest() {
    KeyedValues data = new DefaultKeyedValues();
    data.addValue("A", 1.0);
    data.addValue("B", 2.0);
    
    String expectedResult = "[[\"A\", 1.0], [\"B\", 2.0]]";
    assertEquals(expectedResult, JSONUtils.writeKeyedValues(data));
}


No.5 generated result --------------------------

public void writeKeyedValuesTest() {
    // Given
    KeyedValues keyedValues = new DefaultKeyDataset();
    keyedValues.addValue("A", 1.0);
    keyedValues.addValue("B", 2.0);
    
    // When
    String result = JSONUtils.writeKeyedValues(keyedValues);
    
    // Then
    String expected = "[[\"A\", 1.0], [\"B\", 2.0]]";
    assertEquals(expected, result);
}


No.6 generated result --------------------------

public void writeKeyedValuesTest() {
        KeyedValues data = new KeyedValues() {
            public int getItemCount() {
                return 0;
            }
            public Number getValue(int item) {
                return null;
            }
            public Comparable getKey(int index) {
                return null;
            }
            public int getIndex(Comparable key) {
                return 0;
            }
            public List getKeys() {
                return null;
            }
            public Number getValue(Comparable key) {
                return null;
            }
            public int getIndex(Comparable key) {
                return 0;
            }
        };
        String result = JSONUtils.writeKeyedValues(data);
        assertNotNull(result);
    }


No.7 generated result --------------------------

public void writeKeyedValuesTest() {
    KeyedValues data = new KeyedValues() {
        public int getItemCount() {
            return 2;
        }

        public Number getValue(int item) {
            if (item == 0) {
                return 1.0;
            } else {
                return 2.0;
            }
        }

        public Comparable getKey(int index) {
            if (index == 0) {
                return "Key A";
            } else {
                return "Key B";
            }
        }

        public int getIndex(Comparable key) {
            if (key.equals("Key A")) {
                return 0;
            } else {
                return 1;
            }
        }

        public Number getValue(Comparable key) {
            if (key.equals("Key A")) {
                return 1.0;
            } else {
                return 2.0;
            }
        }
    };
    String result = JSONUtils.writeKeyedValues(data);
    assertEquals("[[\"Key A\", 1.0], [\"Key B\", 2.0]]", result);
}


No.8 generated result --------------------------

@Test
public void writeKeyedValuesTest() {
    KeyedValues data = new DefaultKeyedValues();
    // Add data to the KeyedValues object
    data.addValue("Key A", 1.0);
    data.addValue("Key B", 2.0);
    String expectedOutput = "[[\"Key A\", 1.0], [\"Key B\", 2.0]]";
    String actualOutput = JSONUtils.writeKeyedValues(data);
    assertEquals(expectedOutput, actualOutput);
}


No.9 generated result --------------------------


@Test
public void writeKeyedValuesTest() {
    KeyedValues data = new DefaultKeyedValues();
    data.addValue("A", 1.0);
    data.addValue("B", 2.0);
    String expected = "[[\"A\", 1.0], [\"B\", 2.0]]";
    String result = JSONUtils.writeKeyedValues(data);
    assertEquals(expected, result);
}


No.10 generated result --------------------------

@Test
public void writeKeyedValuesTest() {
    KeyedValues data = new DefaultKeyedValues();
    data.addValue("A", 1.0);
    data.addValue("B", 2.0);
    String result = JSONUtils.writeKeyedValues(data);
    String expected = "[[\"A\", 1.0], [\"B\", 2.0]]";
    assertEquals(expected, result);
}


