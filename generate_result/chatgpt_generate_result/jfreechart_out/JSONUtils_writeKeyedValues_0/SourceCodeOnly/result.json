{
    "project_name": "jfreechart",
    "file_name": "JSONUtils.java",
    "relative_path": "jfreechart/src/main/java/org/jfree/data/json/JSONUtils.java",
    "execute_path": "jfreechart",
    "package": "org.jfree.data.json",
    "docstring": "/**\n     * Returns a string containing the data in JSON format.  The format is\n     * an array of arrays, where each sub-array represents one data value.\n     * The sub-array should contain two items, first the item key as a string\n     * and second the item value as a number.  For example:\n     * {@code [[\"Key A\", 1.0], [\"Key B\", 2.0]]}\n     * <br><br>\n     * Note that this method can be used with instances of {@link PieDataset}.\n     * \n     * @param data  the data ({@code null} not permitted).\n     * \n     * @return A string in JSON format. \n     */",
    "source_code": "\npublic static String writeKeyedValues(KeyedValues data) {\n    Args.nullNotPermitted(data, \"data\");\n    StringWriter sw = new StringWriter();\n    try {\n        writeKeyedValues(data, sw);\n    } catch (IOException ex) {\n        throw new RuntimeException(ex);\n    }\n    return sw.toString();\n}\n",
    "class_name": "JSONUtils",
    "method_name": "writeKeyedValues",
    "arguments": [
        "KeyedValues data"
    ],
    "generate_test": [
        "@Test\npublic void writeKeyedValuesTest() {\n    DefaultKeyedValues data = new DefaultKeyedValues();\n    data.addValue(\"A\", 1);\n    data.addValue(\"B\", 2);\n    \n    String expected = \"{\\\"data\\\":[{\\\"key\\\":\\\"A\\\",\\\"value\\\":1.0},{\\\"key\\\":\\\"B\\\",\\\"value\\\":2.0}]}\";\n    String actual = JSONUtils.writeKeyedValues(data);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void writeKeyedValuesTest() {\n    DefaultKeyedValues data = new DefaultKeyedValues();\n    data.addValue(\"A\", 1);\n    data.addValue(\"B\", 2);\n    String expected = \"{\\\"A\\\":1,\\\"B\\\":2}\";\n    String result = JSONUtils.writeKeyedValues(data);\n    assertEquals(expected, result);\n}",
        "@Test\npublic void writeKeyedValuesTest() {\n    KeyedValues data = new DefaultKeyedValues();\n    data.addValue(\"A\", 1.0);\n    data.addValue(\"B\", 2.0);\n    String result = JSONUtils.writeKeyedValues(data);\n    assertEquals(\"{\\\"A\\\":1.0,\\\"B\\\":2.0}\", result);\n}",
        "@Test\npublic void writeKeyedValuesTest() {\n    DefaultKeyedValues dataset = new DefaultKeyedValues();\n    dataset.addValue(\"A\", 1);\n    dataset.addValue(\"B\", 2);\n    \n    String expected = \"{\\\"A\\\":1,\\\"B\\\":2}\";\n    String result = JSONUtils.writeKeyedValues(dataset);\n    \n    assertEquals(expected, result);\n}",
        "@Test\npublic void writeKeyedValuesTest() {\n    KeyedValues data = new DefaultKeyedValues();\n    data.addValue(\"A\", 1);\n    data.addValue(\"B\", 2);\n    data.addValue(\"C\", 3);\n    String result = JSONUtils.writeKeyedValues(data);\n    assertEquals(\"{\\\"A\\\":1,\\\"B\\\":2,\\\"C\\\":3}\", result);\n}",
        "@Test\npublic void writeKeyedValuesTest() {\n    KeyedValues data = new KeyedValues(); // create or initialize KeyedValues object\n    String result = JSONUtils.writeKeyedValues(data);\n    // add assertions to test the result\n    assertEquals(expectedValue, result); // replace expectedValue with the expected output\n}",
        "@Test\npublic void writeKeyedValuesTest() {\n    KeyedValues kv = new DefaultKeyedValues();\n    kv.addValue(\"A\", 1);\n    kv.addValue(\"B\", 2);\n    String result = JSONUtils.writeKeyedValues(kv);\n    String expected = \"{\\\"0\\\":{\\\"key\\\":\\\"A\\\",\\\"value\\\":1.0},\\\"1\\\":{\\\"key\\\":\\\"B\\\",\\\"value\\\":2.0}}\";\n    assertEquals(expected, result);\n}",
        "@Test\npublic void writeKeyedValuesTest() {\n    // Arrange\n    DefaultValueKeyedValues data = new DefaultValueKeyedValues();\n    data.put(\"A\", 1);\n    data.put(\"B\", 2);\n    data.put(\"C\", 3);\n\n    // Act\n    String result = JSONUtils.writeKeyedValues(data);\n\n    // Assert\n    assertEquals(\"{\\\"A\\\":1,\\\"B\\\":2,\\\"C\\\":3}\", result);\n}",
        "\npublic void writeKeyedValuesTest() {\n    KeyedValues data = new DefaultKeyedValues();\n    data.addValue(\"A\", 1.0);\n    data.addValue(\"B\", 2.0);\n    String result = JSONUtils.writeKeyedValues(data);\n    String expected = \"{\\\"A\\\":1.0,\\\"B\\\":2.0}\";\n    assertEquals(expected, result);\n}",
        "@Test\npublic void writeKeyedValuesTest() {\n    // Given\n    DefaultKeyedValues data = new DefaultKeyedValues();\n    data.setValue(\"A\", 1);\n    data.setValue(\"B\", 2);\n    \n    // When\n    String result = JSONUtils.writeKeyedValues(data);\n    \n    // Then\n    assertEquals(\"{\\\"A\\\":1,\\\"B\\\":2}\", result);\n}"
    ]
}