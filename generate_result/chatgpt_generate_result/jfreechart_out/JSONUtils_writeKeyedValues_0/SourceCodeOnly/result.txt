Source code: 


public static String writeKeyedValues(KeyedValues data) {
    Args.nullNotPermitted(data, "data");
    StringWriter sw = new StringWriter();
    try {
        writeKeyedValues(data, sw);
    } catch (IOException ex) {
        throw new RuntimeException(ex);
    }
    return sw.toString();
}



No.1 generated result --------------------------

@Test
public void writeKeyedValuesTest() {
    DefaultKeyedValues data = new DefaultKeyedValues();
    data.addValue("A", 1);
    data.addValue("B", 2);
    
    String expected = "{\"data\":[{\"key\":\"A\",\"value\":1.0},{\"key\":\"B\",\"value\":2.0}]}";
    String actual = JSONUtils.writeKeyedValues(data);
    assertEquals(expected, actual);
}


No.2 generated result --------------------------

@Test
public void writeKeyedValuesTest() {
    DefaultKeyedValues data = new DefaultKeyedValues();
    data.addValue("A", 1);
    data.addValue("B", 2);
    String expected = "{\"A\":1,\"B\":2}";
    String result = JSONUtils.writeKeyedValues(data);
    assertEquals(expected, result);
}


No.3 generated result --------------------------

@Test
public void writeKeyedValuesTest() {
    KeyedValues data = new DefaultKeyedValues();
    data.addValue("A", 1.0);
    data.addValue("B", 2.0);
    String result = JSONUtils.writeKeyedValues(data);
    assertEquals("{\"A\":1.0,\"B\":2.0}", result);
}


No.4 generated result --------------------------

@Test
public void writeKeyedValuesTest() {
    DefaultKeyedValues dataset = new DefaultKeyedValues();
    dataset.addValue("A", 1);
    dataset.addValue("B", 2);
    
    String expected = "{\"A\":1,\"B\":2}";
    String result = JSONUtils.writeKeyedValues(dataset);
    
    assertEquals(expected, result);
}


No.5 generated result --------------------------

@Test
public void writeKeyedValuesTest() {
    KeyedValues data = new DefaultKeyedValues();
    data.addValue("A", 1);
    data.addValue("B", 2);
    data.addValue("C", 3);
    String result = JSONUtils.writeKeyedValues(data);
    assertEquals("{\"A\":1,\"B\":2,\"C\":3}", result);
}


No.6 generated result --------------------------

@Test
public void writeKeyedValuesTest() {
    KeyedValues data = new KeyedValues(); // create or initialize KeyedValues object
    String result = JSONUtils.writeKeyedValues(data);
    // add assertions to test the result
    assertEquals(expectedValue, result); // replace expectedValue with the expected output
}


No.7 generated result --------------------------

@Test
public void writeKeyedValuesTest() {
    KeyedValues kv = new DefaultKeyedValues();
    kv.addValue("A", 1);
    kv.addValue("B", 2);
    String result = JSONUtils.writeKeyedValues(kv);
    String expected = "{\"0\":{\"key\":\"A\",\"value\":1.0},\"1\":{\"key\":\"B\",\"value\":2.0}}";
    assertEquals(expected, result);
}


No.8 generated result --------------------------

@Test
public void writeKeyedValuesTest() {
    // Arrange
    DefaultValueKeyedValues data = new DefaultValueKeyedValues();
    data.put("A", 1);
    data.put("B", 2);
    data.put("C", 3);

    // Act
    String result = JSONUtils.writeKeyedValues(data);

    // Assert
    assertEquals("{\"A\":1,\"B\":2,\"C\":3}", result);
}


No.9 generated result --------------------------


public void writeKeyedValuesTest() {
    KeyedValues data = new DefaultKeyedValues();
    data.addValue("A", 1.0);
    data.addValue("B", 2.0);
    String result = JSONUtils.writeKeyedValues(data);
    String expected = "{\"A\":1.0,\"B\":2.0}";
    assertEquals(expected, result);
}


No.10 generated result --------------------------

@Test
public void writeKeyedValuesTest() {
    // Given
    DefaultKeyedValues data = new DefaultKeyedValues();
    data.setValue("A", 1);
    data.setValue("B", 2);
    
    // When
    String result = JSONUtils.writeKeyedValues(data);
    
    // Then
    assertEquals("{\"A\":1,\"B\":2}", result);
}


