Source code: 


public static double[] getPowerRegression(double[][] data) {

    int n = data.length;
    if (n < 2) {
        throw new IllegalArgumentException("Not enough data.");
    }

    double sumX = 0;
    double sumY = 0;
    double sumXX = 0;
    double sumXY = 0;
    for (int i = 0; i < n; i++) {
        double x = Math.log(data[i][0]);
        double y = Math.log(data[i][1]);
        sumX += x;
        sumY += y;
        double xx = x * x;
        sumXX += xx;
        double xy = x * y;
        sumXY += xy;
    }
    double sxx = sumXX - (sumX * sumX) / n;
    double sxy = sumXY - (sumX * sumY) / n;
    double xbar = sumX / n;
    double ybar = sumY / n;

    double[] result = new double[2];
    result[1] = sxy / sxx;
    result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);

    return result;

}



No.1 generated result --------------------------

@Test
public void getPowerRegressionTest() {
    double[][] data = {{1, 2}, {3, 4}};
    double[] expected = {2.0, 0.5};
    assertArrayEquals(expected, Regression.getPowerRegression(data));
}


No.2 generated result --------------------------

@Test
public void getPowerRegressionTest() {
    double[][] data = {{1, 2}, {3, 4}, {5, 6}};
    double[] expected = {0.7071, 1.4142}; // Replace with expected values calculated manually
    assertArrayEquals(expected, Regression.getPowerRegression(data));
}


No.3 generated result --------------------------

@Test
public void getPowerRegressionTest() {
    double[][] data = {{2, 4}, {3, 8}, {4, 16}, {5, 32}};
    double[] result = Regression.getPowerRegression(data);
    double[] expected = {4.000000000000013, 1.9998666186658475};
    assertArrayEquals(expected, result, 0.0001);
}


No.4 generated result --------------------------

public void getPowerRegressionTest() {
    double[][] data = {{1, 2}, {3, 4}, {5, 6}};
    double[] expected = {0, 0};
    assertArrayEquals(expected, Regression.getPowerRegression(data));
}


No.5 generated result --------------------------

@Test
public void getPowerRegressionTest() {
    double[][] data = {{1, 2}, {3, 4}, {5, 6}};
    double[] expected = {1.8854377516594485, 0.7396917000274926};
    assertArrayEquals(expected, Regression.getPowerRegression(data));
}


No.6 generated result --------------------------

double[][] data = {{1, 1}, {2, 4}, {3, 9}, {4, 16}, {5, 25}};
double[] expected = {1.531, 2.236};

double[] result = Regression.getPowerRegression(data);
assertArrayEquals(expected, result, 0.001);


No.7 generated result --------------------------

@Test
public void getPowerRegressionTest() {
    double[][] testData = {{1, 2}, {3, 4}, {5, 6}}; 
    double[] expected = {2, 0.5};
    assertArrayEquals(expected, Regression.getPowerRegression(testData));
}


No.8 generated result --------------------------


@Test
public void getPowerRegressionTest() {
    double[][] data = {{1, 2}, {3, 4}, {5, 6}};
    double[] expected = {2, 0.7369567003765016};
    assertArrayEquals(expected, Regression.getPowerRegression(data));
}


No.9 generated result --------------------------

@Test
public void getPowerRegressionTest() {
    double[][] testData = {{1, 2}, {3, 4}, {5, 6}};
    double[] expectedResult = {1, 2};
    double[] actualResult = Regression.getPowerRegression(testData);
    assertArrayEquals(expectedResult, actualResult, 0.001);
}


No.10 generated result --------------------------

double[][] data = {{1, 4}, {2, 5}, {3, 6}};
double[] expected = {1.661, 1.029};
assertArrayEquals(expected, Regression.getPowerRegression(data), 0.001);


