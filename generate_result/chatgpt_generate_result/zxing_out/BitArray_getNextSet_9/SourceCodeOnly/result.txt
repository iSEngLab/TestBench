Source code: 


public int getNextSet(int from) {
  if (from >= size) {
    return size;
  }
  int bitsOffset = from / 32;
  int currentBits = bits[bitsOffset];
  // mask off lesser bits first
  currentBits &= -(1 << (from & 0x1F));
  while (currentBits == 0) {
    if (++bitsOffset == bits.length) {
      return size;
    }
    currentBits = bits[bitsOffset];
  }
  int result = (bitsOffset * 32) + Integer.numberOfTrailingZeros(currentBits);
  return Math.min(result, size);
}



No.1 generated result --------------------------

@Test
public void getNextSetTest() {
    BitArrayTest bitArrayTest = new BitArrayTest();
    assertEquals(4, bitArrayTest.getNextSet(5));
}


No.2 generated result --------------------------

@Test
public void getNextSetTest() {
    BitArray bitArray = new BitArray();
    bitArray.setBit(0, true);
    bitArray.setBit(1, true);
    int result = bitArray.getNextSet(1);
    assertEquals(1, result);
}


No.3 generated result --------------------------

public void getNextSetTest() {
  BitArray bitArray = new BitArray();
  bitArray.appendBit(0);
  bitArray.appendBit(1);
  assertEquals(1, bitArray.getNextSet(0));
  assertEquals(1, bitArray.getNextSet(1));
}


No.4 generated result --------------------------

@Test
public void getNextSetTest() {
    BitArrayTest bitArrayTest = new BitArrayTest();
    int result = bitArrayTest.getNextSet(3);
    assertEquals(5, result);
}


No.5 generated result --------------------------

@Test
public void getNextSetTest() {
    int[] bits = new int[4];
    bits[0] = 5;
    bits[1] = 10;
    bits[2] = 0;
    bits[3] = 15;
    BitArrayTest bat = new BitArrayTest();
    assertEquals(1, bat.getNextSet(5, bits)); 
}


No.6 generated result --------------------------

@Test
public void getNextSetTest() {
    BitArray arr = new BitArray();
    int result = arr.getNextSet(14);
    assertEquals(15, result);
}


No.7 generated result --------------------------

@Test
public void getNextSetTest() {
    int[] bits = {5, 10, 15, 20};
    int size = 4;
    BitArrayTest bitArrayTest = new BitArrayTest(bits, size);
    assertEquals(10, bitArrayTest.getNextSet(4));
}


No.8 generated result --------------------------

@Test
public void getNextSetTest() {
    BitArrayTest bitArrayTest = new BitArrayTest();
    int result = bitArrayTest.getNextSet(10);
    assertEquals(15, result);
}


No.9 generated result --------------------------

@Test
public void getNextSetTest() {
    int[] bits = {1, 2, 3, 0, 7, 8, 9};
    BitArrayTest bitArrayTest = new BitArrayTest(bits);
    assertEquals(1, bitArrayTest.getNextSet(0));
    assertEquals(5, bitArrayTest.getNextSet(4));
}


No.10 generated result --------------------------

@Test
public void getNextSetTest() {
    BitArrayTest test = new BitArrayTest();
    int result = test.getNextSet(5);
    assertEquals(5, result);
}


