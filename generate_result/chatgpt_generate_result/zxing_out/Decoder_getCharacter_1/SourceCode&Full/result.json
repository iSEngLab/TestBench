{
    "project_name": "zxing",
    "file_name": "Decoder.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/decoder/Decoder.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.decoder",
    "docstring": "/**\n   * Gets the character (or string) corresponding to the passed code in the given table\n   *\n   * @param table the table used\n   * @param code the code of the character\n   */",
    "source_code": "\nprivate static String getCharacter(Table table, int code) {\n  switch (table) {\n    case UPPER:\n      return UPPER_TABLE[code];\n    case LOWER:\n      return LOWER_TABLE[code];\n    case MIXED:\n      return MIXED_TABLE[code];\n    case PUNCT:\n      return PUNCT_TABLE[code];\n    case DIGIT:\n      return DIGIT_TABLE[code];\n    default:\n      // Should not reach here.\n      throw new IllegalStateException(\"Bad table\");\n  }\n}\n",
    "class_name": "Decoder",
    "method_name": "getCharacter",
    "arguments": [
        "Table table",
        "int code"
    ],
    "generate_test": [
        "@Test\npublic void getCharacterTest() {\n    Table table = Table.UPPER;\n    int code = 3;\n    String expectedResult = \"C\";\n    String result = Decoder.getCharacter(table, code);\n    assertEquals(expectedResult, result);\n}",
        "\n@Test\npublic void getCharacterTest() {\n    Table table = Table.UPPER;\n    int code = 2;\n    String expected = \"A\";\n    String result = Decoder.getCharacter(table, code);\n    assertEquals(expected, result);\n}",
        "@Test\npublic void getCharacterTest() {\n    Table table = Table.UPPER;\n    int code = 3;\n    String expected = \"C\";\n    String result = Decoder.getCharacter(table, code);\n    assertEquals(expected, result);\n}",
        "@Test\npublic void getCharacterTest() {\n    assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 2));\n    assertEquals(\"h\", Decoder.getCharacter(Decoder.Table.LOWER, 7));\n    assertEquals(\"\\1\", Decoder.getCharacter(Decoder.Table.MIXED, 2));\n    assertEquals(\",\", Decoder.getCharacter(Decoder.Table.DIGIT, 11));\n    assertEquals(\": \", Decoder.getCharacter(Decoder.Table.PUNCT, 6));\n}",
        "@Test\npublic void getCharacterTest() {\n    // Test cases for getCharacter method\n    // Test UPPER table\n    assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 2));\n    // Test LOWER table\n    assertEquals(\"z\", Decoder.getCharacter(Decoder.Table.LOWER, 25));\n    // Test MIXED table\n    assertEquals(\"\\4\", Decoder.getCharacter(Decoder.Table.MIXED, 3));\n    // Test PUNCT table\n    assertEquals(\", \", Decoder.getCharacter(Decoder.Table.PUNCT, 5));\n    // Test DIGIT table\n    assertEquals(\"1\", Decoder.getCharacter(Decoder.Table.DIGIT, 1));\n    // Test default case\n    assertThrows(IllegalStateException.class, () -> Decoder.getCharacter(null, 5));\n}\n",
        "@Test\npublic void getCharacterTest() {\n    // Test UPPER table\n    assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 2));\n    // Test LOWER table\n    assertEquals(\"o\", Decoder.getCharacter(Decoder.Table.LOWER, 15));\n    // Test MIXED table\n    assertEquals(\"\\4\", Decoder.getCharacter(Decoder.Table.MIXED, 3));\n    // Test PUNCT table\n    assertEquals(\":\", Decoder.getCharacter(Decoder.Table.PUNCT, 22));\n    // Test DIGIT table\n    assertEquals(\"4\", Decoder.getCharacter(Decoder.Table.DIGIT, 4));\n    // Test default (should throw IllegalStateException)\n    assertThrows(IllegalStateException.class, () -> {\n        Decoder.getCharacter(Decoder.Table.BINARY, 0);\n    });\n}",
        "    @Test\n    public void getCharacterTest() {\n        Table table = Table.UPPER;\n        int code = 5;\n        String expected = \"E\";\n        String actual = getCharacter(table, code);\n        assertEquals(expected, actual);\n    }",
        "@Test\npublic void getCharacterTest() {\n    assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 2));\n    assertEquals(\"b\", Decoder.getCharacter(Decoder.Table.LOWER, 3));\n    assertEquals(\"\\1\", Decoder.getCharacter(Decoder.Table.MIXED, 2));\n    assertEquals(\",\", Decoder.getCharacter(Decoder.Table.PUNCT, 12));\n    assertEquals(\"4\", Decoder.getCharacter(Decoder.Table.DIGIT, 4));\n}",
        "@Test\npublic void getCharacterTest() {\n    // Given\n    Table table = Table.UPPER;\n    int code = 1;\n    \n    // When\n    String result = Decoder.getCharacter(table, code);\n    \n    // Then\n    assertEquals(\" \", result);\n}",
        "@Test\npublic void getCharacterTest() {\n    Table table = Table.UPPER;\n    int code = 5;\n    assertEquals(\"E\", Decoder.getCharacter(table, code));\n}"
    ]
}