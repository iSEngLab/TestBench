{
    "project_name": "zxing",
    "file_name": "Decoder.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/decoder/Decoder.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.decoder",
    "docstring": "/**\n   * Gets the character (or string) corresponding to the passed code in the given table\n   *\n   * @param table the table used\n   * @param code the code of the character\n   */",
    "source_code": "\nprivate static String getCharacter(Table table, int code) {\n  switch (table) {\n    case UPPER:\n      return UPPER_TABLE[code];\n    case LOWER:\n      return LOWER_TABLE[code];\n    case MIXED:\n      return MIXED_TABLE[code];\n    case PUNCT:\n      return PUNCT_TABLE[code];\n    case DIGIT:\n      return DIGIT_TABLE[code];\n    default:\n      // Should not reach here.\n      throw new IllegalStateException(\"Bad table\");\n  }\n}\n",
    "class_name": "Decoder",
    "method_name": "getCharacter",
    "arguments": [
        "Table table",
        "int code"
    ],
    "generate_test": [
        "@Test\npublic void getCharacterTest() {\n    Table table = Table.UPPER;\n    int code = 65;\n    String expectedResult = \"A\";\n    String actualResult = Decoder.getCharacter(table, code);\n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\npublic void getCharacterTest() {\n    Table table = Table.UPPER;\n    int code = 65;\n    assertEquals(\"A\", Decoder.getCharacter(table, code));\n}",
        "@Test\npublic void getCharacterTest() {\n    Table table = Table.UPPER;\n    int code = 65;\n    String expected = \"A\";\n    String result = private static String getCharacter(table, code);\n    assertEquals(expected, result);\n}",
        "@Test\npublic void getCharacterTest() {\n    Table table = Table.UPPER;\n    int code = 2;\n    String expectedOutput = \"C\";\n    String result = Decoder.getCharacter(table, code);\n    assertEquals(expectedOutput, result);\n}",
        "@Test\n    public void getCharacterTest() {\n        Table table = Table.UPPER;\n        int code = 65;\n        String expected = \"A\";\n        String result = Decoder.getCharacter(table, code);\n        assertEquals(expected, result);\n    }",
        "\n@Test\npublic void getCharacterTest() {\n    Table table = Table.UPPER;\n    int code = 65;\n    String expected = \"A\";\n    String actual = Decoder.getCharacter(table, code);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void getCharacterTest() {\n    Table table = Table.UPPER;\n    int code = 65;\n    String expected = \"A\";\n    String result = Decoder.getCharacter(table, code);\n    assertEquals(expected, result);\n}",
        "@Test\npublic void getCharacterTest() {\n    // Given\n    Table table = Table.UPPER;\n    int code = 10;\n    \n    // When\n    String result = Decoder.getCharacter(table, code);\n    \n    // Then\n    assertEquals(\"A\", result);\n}",
        "@Test\npublic void getCharacterTest() {\n    Table table = Table.LOWER;\n    int code = 3;\n    String result = Decoder.getCharacter(table, code);\n    assertEquals(\"e\", result);\n}",
        "@Test\npublic void getCharacterTest() {\n    Table table = Table.UPPER;\n    int code = 65;\n    String expected = \"A\";\n    String result = Decoder.getCharacter(table, code);\n    assertEquals(expected, result);\n}"
    ]
}