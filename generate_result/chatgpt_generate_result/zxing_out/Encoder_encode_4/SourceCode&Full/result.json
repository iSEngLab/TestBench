{
    "project_name": "zxing",
    "file_name": "Encoder.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/encoder/Encoder.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.encoder",
    "docstring": "/**\n   * Encodes the given string content as an Aztec symbol\n   *\n   * @param data input data string\n   * @param minECCPercent minimal percentage of error check words (According to ISO/IEC 24778:2008,\n   *                      a minimum of 23% + 3 words is recommended)\n   * @param userSpecifiedLayers if non-zero, a user-specified value for the number of layers\n   * @param charset character set in which to encode string using ECI; if null, no ECI code\n   *                will be inserted, and the string must be encodable as ISO/IEC 8859-1\n   *                (Latin-1), the default encoding of the symbol.\n   * @return Aztec symbol matrix with metadata\n   */",
    "source_code": "\npublic static AztecCode encode(String data, int minECCPercent, int userSpecifiedLayers, Charset charset) {\n  byte[] bytes = data.getBytes(null != charset ? charset : StandardCharsets.ISO_8859_1);\n  return encode(bytes, minECCPercent, userSpecifiedLayers, charset);\n}\n",
    "class_name": "Encoder",
    "method_name": "encode",
    "arguments": [
        "String data",
        "int minECCPercent",
        "int userSpecifiedLayers",
        "Charset charset"
    ],
    "generate_test": [
        "@Test\n    public void encodeTest() {\n        AztecCode result = Encoder.encode(\"Test data\", 20, 5, StandardCharsets.UTF_8);\n        assertNotNull(result);\n    }",
        "AztecCode result = Encoder.encode(\"Test data\", 25, 5, StandardCharsets.UTF_8);\nassertNotNull(result);\nassertEquals(5, result.getLayers());",
        "AztecCode aztecCode = Encoder.encode(\"test data\", 50, 4, StandardCharsets.UTF_8);\n// Add assertions here to check the result\nassertTrue(aztecCode.getSize() > 0);",
        "@Test\npublic void encodeTest() {\n    String data = \"Test data\";\n    int minECCPercent = 25;\n    int userSpecifiedLayers = 0;\n    Charset charset = StandardCharsets.UTF_8;\n    AztecCode result = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n    assertNotNull(result);\n}",
        "@Test\npublic void encodeTest() {\n    AztecCode result = Encoder.encode(\"test data\", 25, 4, Charset.defaultCharset());\n    // Add assertions here to validate the result\n}",
        "AztecCode result = Encoder.encode(\"Hello, World\", 40, 1, StandardCharsets.UTF_8);\nassertNotNull(result);\nassertEquals(45, result.getMatrix().getHeight());",
        "@Test\npublic void encodeTest() {\n    AztecCode result = Encoder.encode(\"Test Data\", 33, 2, StandardCharsets.UTF_8);\n    // Add assertions as needed\n    assertNotNull(result);\n}",
        "AztecCode aztecCode = Encoder.encode(\"Hello, World!\", 25, 4, StandardCharsets.UTF_8);\nassertNotNull(aztecCode);\nassertEquals(32, aztecCode.getSize());\nassertTrue(aztecCode.isCompact());\nassertEquals(4, aztecCode.getLayers());\nassertEquals(7, aztecCode.getCodeWords());",
        "@Test\npublic void encodeTest() {\n    AztecCode result = Encoder.encode(\"Test Data\", 30, 5, Charset.forName(\"UTF-8\"));\n    // add assertion here for the result\n    assertNotNull(result);\n}",
        "AztecCode result = Encoder.encode(\"test data\", 35, 5, StandardCharsets.UTF_8);\nassertNotNull(result);"
    ]
}