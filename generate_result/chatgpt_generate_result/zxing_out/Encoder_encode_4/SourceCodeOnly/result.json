{
    "project_name": "zxing",
    "file_name": "Encoder.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/encoder/Encoder.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.encoder",
    "docstring": "/**\n   * Encodes the given string content as an Aztec symbol\n   *\n   * @param data input data string\n   * @param minECCPercent minimal percentage of error check words (According to ISO/IEC 24778:2008,\n   *                      a minimum of 23% + 3 words is recommended)\n   * @param userSpecifiedLayers if non-zero, a user-specified value for the number of layers\n   * @param charset character set in which to encode string using ECI; if null, no ECI code\n   *                will be inserted, and the string must be encodable as ISO/IEC 8859-1\n   *                (Latin-1), the default encoding of the symbol.\n   * @return Aztec symbol matrix with metadata\n   */",
    "source_code": "\npublic static AztecCode encode(String data, int minECCPercent, int userSpecifiedLayers, Charset charset) {\n  byte[] bytes = data.getBytes(null != charset ? charset : StandardCharsets.ISO_8859_1);\n  return encode(bytes, minECCPercent, userSpecifiedLayers, charset);\n}\n",
    "class_name": "Encoder",
    "method_name": "encode",
    "arguments": [
        "String data",
        "int minECCPercent",
        "int userSpecifiedLayers",
        "Charset charset"
    ],
    "generate_test": [
        "AztecCode result = Encoder.encode(\"Test Data\", 20, 5, Charset.defaultCharset());\n// Add assertions to validate the result",
        "@Test\npublic void encodeTest() {\n    String data = \"Test data\";\n    int minECCPercent = 25;\n    int userSpecifiedLayers = 5;\n    Charset charset = StandardCharsets.UTF_8;\n    AztecCode result = AztecCode.encode(data, minECCPercent, userSpecifiedLayers, charset);\n    assertNotNull(result);\n}",
        "@Test\npublic void encodeTest() {\n  AztecCode result = AztecCode.encode(\"Test\", 25, 5, StandardCharsets.UTF_8);\n  assertNotNull(result);\n}",
        "@Test\npublic void encodeTest() {\n  AztecCode result = AztecCode.encode(\"Hello\", 25, 2, StandardCharsets.UTF_8);\n  // Add assertions to test the result\n  assertNotNull(result);\n  // Add more assertions as needed\n}",
        "@Test\n public void encodeTest() {\n    String data = \"Hello, World!\";\n    int minECCPercent = 25;\n    int userSpecifiedLayers = 10;\n    Charset charset = StandardCharsets.UTF_8;\n    AztecCode result = AztecCode.encode(data, minECCPercent, userSpecifiedLayers, charset);\n    assertNotNull(result);\n}",
        "\npublic void encodeTest() {\n  String data = \"Hello World\";\n  int minECCPercent = 25;\n  int userSpecifiedLayers = 5;\n  Charset charset = StandardCharsets.UTF_8;\n  \n  AztecCode result = AztecCode.encode(data, minECCPercent, userSpecifiedLayers, charset);\n  \n  assertNotNull(result);\n}",
        " @Test\n public void encodeTest() {\n      String data = \"Test Data\";\n      int minECCPercent = 50;\n      int userSpecifiedLayers = 2;\n      Charset charset = StandardCharsets.UTF_8;\n      AztecCode result = AztecCode.encode(data, minECCPercent, userSpecifiedLayers, charset);\n      assertNotNull(result);\n }",
        "@Test\npublic void encodeTest() {\n  String data = \"test\";\n  int minECCPercent = 25;\n  int userSpecifiedLayers = 4;\n  Charset charset = StandardCharsets.UTF_8;\n  AztecCode result = AztecCode.encode(data, minECCPercent, userSpecifiedLayers, charset);\n  assertNotNull(result);\n}",
        "@Test\npublic void encodeTest() {\n  AztecCode result = Encoder.encode(\"test\", 25, 5, StandardCharsets.UTF_8);\n  assertNotNull(result);\n}",
        "@Test\npublic void encodeTest() {\n  AztecCode result = AztecCode.encode(\"Test Data\", 25, 2, StandardCharsets.UTF_8);\n  assertNotNull(result);\n}"
    ]
}