{
    "project_name": "zxing",
    "file_name": "FinderPattern.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/oned/rss/FinderPattern.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.oned.rss",
    "docstring": null,
    "source_code": "@Override\npublic boolean equals(Object o) {\n  if (!(o instanceof FinderPattern)) {\n    return false;\n  }\n  FinderPattern that = (FinderPattern) o;\n  return value == that.value;\n}\n",
    "class_name": "FinderPattern",
    "method_name": "equals",
    "arguments": [
        "Object o"
    ],
    "generate_test": [
        "@Test\npublic void equalsTest() {\n    FinderPattern finderPattern1 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    FinderPattern finderPattern2 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    assertTrue(finderPattern1.equals(finderPattern2));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    FinderPattern pattern2 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    FinderPattern pattern3 = new FinderPattern(2, new int[]{1, 2}, 3, 4, 5);\n    assertTrue(pattern1.equals(pattern2));\n    assertFalse(pattern1.equals(pattern3));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern finderPattern = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    FinderPattern sameFinderPattern = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    assertTrue(finderPattern.equals(sameFinderPattern));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern finderPattern1 = new FinderPattern(5, new int[]{1, 2}, 10, 20, 30);\n    FinderPattern finderPattern2 = new FinderPattern(5, new int[]{1, 2}, 10, 20, 30);\n    FinderPattern finderPattern3 = new FinderPattern(3, new int[]{1, 2}, 10, 20, 30);\n    Object object = new Object();\n\n    assertEquals(true, finderPattern1.equals(finderPattern2));\n    assertEquals(false, finderPattern1.equals(finderPattern3));\n    assertEquals(false, finderPattern1.equals(object));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(5, new int[]{10, 20}, 50, 60, 1);\n    FinderPattern pattern2 = new FinderPattern(5, new int[]{10, 20}, 50, 60, 1);\n    assertTrue(pattern1.equals(pattern2));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern finderPattern1 = new FinderPattern(2, new int[]{1, 4}, 2, 5, 3);\n    FinderPattern finderPattern2 = new FinderPattern(2, new int[]{1, 4}, 2, 5, 3);\n    \n    assertTrue(finderPattern1.equals(finderPattern2));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern finderPattern1 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    FinderPattern finderPattern2 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    FinderPattern finderPattern3 = new FinderPattern(2, new int[]{3, 4}, 5, 6, 7);\n    \n    assertEquals(true, finderPattern1.equals(finderPattern2));\n    assertEquals(false, finderPattern1.equals(finderPattern3));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern finderPattern1 = new FinderPattern(5, new int[] { 1, 2 }, 3, 4, 5);\n    FinderPattern finderPattern2 = new FinderPattern(5, new int[] { 1, 2 }, 3, 4, 5);\n    assertTrue(finderPattern1.equals(finderPattern2));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern fp1 = new FinderPattern(1, new int[]{0, 1}, 2, 3, 4);\n    FinderPattern fp2 = new FinderPattern(1, new int[]{0, 1}, 2, 3, 4);\n    assertTrue(fp1.equals(fp2));\n}",
        "\n@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(5, new int[]{2, 8}, 2, 8, 3);\n    FinderPattern pattern2 = new FinderPattern(5, new int[]{2, 8}, 2, 8, 3);\n    assertTrue(pattern1.equals(pattern2));\n}"
    ]
}