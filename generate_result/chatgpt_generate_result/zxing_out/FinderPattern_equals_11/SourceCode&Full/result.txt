Source code: 

@Override
public boolean equals(Object o) {
  if (!(o instanceof FinderPattern)) {
    return false;
  }
  FinderPattern that = (FinderPattern) o;
  return value == that.value;
}



No.1 generated result --------------------------

@Test
public void equalsTest() {
    FinderPattern finderPattern1 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);
    FinderPattern finderPattern2 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);
    assertTrue(finderPattern1.equals(finderPattern2));
}


No.2 generated result --------------------------

@Test
public void equalsTest() {
    FinderPattern pattern1 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);
    FinderPattern pattern2 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);
    FinderPattern pattern3 = new FinderPattern(2, new int[]{1, 2}, 3, 4, 5);
    assertTrue(pattern1.equals(pattern2));
    assertFalse(pattern1.equals(pattern3));
}


No.3 generated result --------------------------

@Test
public void equalsTest() {
    FinderPattern finderPattern = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);
    FinderPattern sameFinderPattern = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);
    assertTrue(finderPattern.equals(sameFinderPattern));
}


No.4 generated result --------------------------

@Test
public void equalsTest() {
    FinderPattern finderPattern1 = new FinderPattern(5, new int[]{1, 2}, 10, 20, 30);
    FinderPattern finderPattern2 = new FinderPattern(5, new int[]{1, 2}, 10, 20, 30);
    FinderPattern finderPattern3 = new FinderPattern(3, new int[]{1, 2}, 10, 20, 30);
    Object object = new Object();

    assertEquals(true, finderPattern1.equals(finderPattern2));
    assertEquals(false, finderPattern1.equals(finderPattern3));
    assertEquals(false, finderPattern1.equals(object));
}


No.5 generated result --------------------------

@Test
public void equalsTest() {
    FinderPattern pattern1 = new FinderPattern(5, new int[]{10, 20}, 50, 60, 1);
    FinderPattern pattern2 = new FinderPattern(5, new int[]{10, 20}, 50, 60, 1);
    assertTrue(pattern1.equals(pattern2));
}


No.6 generated result --------------------------

@Test
public void equalsTest() {
    FinderPattern finderPattern1 = new FinderPattern(2, new int[]{1, 4}, 2, 5, 3);
    FinderPattern finderPattern2 = new FinderPattern(2, new int[]{1, 4}, 2, 5, 3);
    
    assertTrue(finderPattern1.equals(finderPattern2));
}


No.7 generated result --------------------------

@Test
public void equalsTest() {
    FinderPattern finderPattern1 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);
    FinderPattern finderPattern2 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);
    FinderPattern finderPattern3 = new FinderPattern(2, new int[]{3, 4}, 5, 6, 7);
    
    assertEquals(true, finderPattern1.equals(finderPattern2));
    assertEquals(false, finderPattern1.equals(finderPattern3));
}


No.8 generated result --------------------------

@Test
public void equalsTest() {
    FinderPattern finderPattern1 = new FinderPattern(5, new int[] { 1, 2 }, 3, 4, 5);
    FinderPattern finderPattern2 = new FinderPattern(5, new int[] { 1, 2 }, 3, 4, 5);
    assertTrue(finderPattern1.equals(finderPattern2));
}


No.9 generated result --------------------------

@Test
public void equalsTest() {
    FinderPattern fp1 = new FinderPattern(1, new int[]{0, 1}, 2, 3, 4);
    FinderPattern fp2 = new FinderPattern(1, new int[]{0, 1}, 2, 3, 4);
    assertTrue(fp1.equals(fp2));
}


No.10 generated result --------------------------


@Test
public void equalsTest() {
    FinderPattern pattern1 = new FinderPattern(5, new int[]{2, 8}, 2, 8, 3);
    FinderPattern pattern2 = new FinderPattern(5, new int[]{2, 8}, 2, 8, 3);
    assertTrue(pattern1.equals(pattern2));
}


