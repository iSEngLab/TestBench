{
    "project_name": "zxing",
    "file_name": "FinderPattern.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/oned/rss/FinderPattern.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.oned.rss",
    "docstring": null,
    "source_code": "@Override\npublic boolean equals(Object o) {\n  if (!(o instanceof FinderPattern)) {\n    return false;\n  }\n  FinderPattern that = (FinderPattern) o;\n  return value == that.value;\n}\n",
    "class_name": "FinderPattern",
    "method_name": "equals",
    "arguments": [
        "Object o"
    ],
    "generate_test": [
        "@Test\npublic void equalsTest() {\n    FinderPattern finderPattern1 = new FinderPattern(5, new int[]{1, 2, 3, 4}, new ResultPoint(1, 2), 1, 2);\n    FinderPattern finderPattern2 = new FinderPattern(5, new int[]{1, 2, 3, 4}, new ResultPoint(1, 2), 1, 2);\n    assertTrue(finderPattern1.equals(finderPattern2));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern finderPattern1 = new FinderPattern(5, new int[]{0, 1, 2}, new ResultPoint(0, 0), 0, 3);\n    FinderPattern finderPattern2 = new FinderPattern(5, new int[]{0, 1, 2}, new ResultPoint(0, 0), 0, 3);\n    assertTrue(finderPattern1.equals(finderPattern2));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern finderPattern1 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    FinderPattern finderPattern2 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    assertTrue(finderPattern1.equals(finderPattern2));\n    assertFalse(finderPattern1.equals(null));\n    assertFalse(finderPattern1.equals(new ResultPoint(1, 2)));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern finderPattern1 = new FinderPattern(1, new int[]{1, 2}, 1, 2, 1);\n    FinderPattern finderPattern2 = new FinderPattern(1, new int[]{1, 2}, 1, 2, 1);\n    assertTrue(finderPattern1.equals(finderPattern2));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern finderPattern1 = new FinderPattern(5, new int[]{1, 2}, 3, 4, 5);\n    FinderPattern finderPattern2 = new FinderPattern(5, new int[]{1, 2}, 3, 4, 5);\n    assertTrue(finderPattern1.equals(finderPattern2));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern finderPattern1 = new FinderPattern(1, new int[]{1, 2, 3}, 4, 5, 6);\n    FinderPattern finderPattern2 = new FinderPattern(1, new int[]{1, 2, 3}, 4, 5, 6);\n    assertTrue(finderPattern1.equals(finderPattern2));\n}",
        "@Test\npublic void equalsTest() {\n    // Create two FinderPattern objects\n    FinderPattern finderPattern1 = new FinderPattern(1, new int[]{1, 2, 3}, new ResultPoint(1, 1));\n    FinderPattern finderPattern2 = new FinderPattern(1, new int[]{1, 2, 3}, new ResultPoint(1, 1));\n    \n    // Test equals method\n    assertTrue(finderPattern1.equals(finderPattern2));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern finderPattern1 = new FinderPattern(1, new int[]{0, 1}, 0, 1, 1);\n    FinderPattern finderPattern2 = new FinderPattern(1, new int[]{0, 1}, 0, 1, 1);\n    assertTrue(finderPattern1.equals(finderPattern2));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern finderPattern1 = new FinderPattern(5, new int[]{1, 2, 3}, new ResultPoint(1, 2), 1, 2);\n    FinderPattern finderPattern2 = new FinderPattern(5, new int[]{1, 2, 3}, new ResultPoint(1, 2), 1, 2);\n    assertTrue(finderPattern1.equals(finderPattern2));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern finderPattern1 = new FinderPattern(1, new int[]{1, 2}, 1, 2, 3);\n    FinderPattern finderPattern2 = new FinderPattern(1, new int[]{1, 2}, 1, 2, 3);\n    assertEquals(true, finderPattern1.equals(finderPattern2));\n}"
    ]
}