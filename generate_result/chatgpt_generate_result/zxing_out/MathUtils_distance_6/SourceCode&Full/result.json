{
    "project_name": "zxing",
    "file_name": "MathUtils.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/common/detector/MathUtils.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.common.detector",
    "docstring": "/**\n   * @param aX point A x coordinate\n   * @param aY point A y coordinate\n   * @param bX point B x coordinate\n   * @param bY point B y coordinate\n   * @return Euclidean distance between points A and B\n   */",
    "source_code": "\npublic static float distance(int aX, int aY, int bX, int bY) {\n  double xDiff = aX - bX;\n  double yDiff = aY - bY;\n  return (float) Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n}\n",
    "class_name": "MathUtils",
    "method_name": "distance",
    "arguments": [
        "int aX",
        "int aY",
        "int bX",
        "int bY"
    ],
    "generate_test": [
        "@Test\npublic void distanceTest() {\n    float result = MathUtils.distance(2, 3, 6, 5);\n    assertEquals(result, 4.47213595499958f);\n}",
        "@Test\npublic void distanceTest() {\n    float result = MathUtils.distance(3, 4, 5, 8);\n    assertEquals(5.0, result);\n}",
        "@Test\n    public void distanceTest() {\n        float result = MathUtils.distance(3, 5, 8, 10);\n        assertEquals((float) 7.071068, result, 0.000001);\n    }",
        "@Test\npublic void distanceTest() {\n    float result = MathUtils.distance(3, 4, 6, 8);\n    assertEquals(5.0, result);\n}",
        "@Test\npublic void distanceTest() {\n    assertEquals(5.0, MathUtils.distance(0, 0, 3, 4));\n}",
        "@Test\npublic void distanceTest() {\n    // Given\n    int aX = 3;\n    int aY = 4;\n    int bX = 3;\n    int bY = 2;\n    \n    // When\n    float result = MathUtils.distance(aX, aY, bX, bY);\n    \n    // Then\n    assertEquals(2.0f, result);\n}",
        "@Test\npublic void distanceTest() {\n  float expectedDistance = MathUtils.distance(3, 4, 7, 1);\n  float actualDistance = (float) Math.sqrt(Math.pow(3-7, 2) + Math.pow(4-1, 2));\n  assertEquals(expectedDistance, actualDistance);\n}",
        "@Test\npublic void distanceTest() {\n    float result = MathUtils.distance(3, 4, 6, 7);\n    assertEquals(4.24264f, result, 0.0001);\n}",
        "@Test\npublic void distanceTest() {\n    float expected = (float)Math.sqrt(8 + 8);\n    float result = MathUtils.distance(3, 4, 7, 6);\n    assertEquals(expected, result);\n}",
        "public void distanceTest() {\n        float result = MathUtils.distance(3, 4, 0, 0);\n        assertEquals(5.0, result, 0.0);\n    }"
    ]
}