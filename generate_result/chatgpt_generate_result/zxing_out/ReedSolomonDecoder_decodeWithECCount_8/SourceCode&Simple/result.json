{
    "project_name": "zxing",
    "file_name": "ReedSolomonDecoder.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/common/reedsolomon/ReedSolomonDecoder.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.common.reedsolomon",
    "docstring": "/**\n   * <p>Decodes given set of received codewords, which include both data and error-correction\n   * codewords. Really, this means it uses Reed-Solomon to detect and correct errors, in-place,\n   * in the input.</p>\n   *\n   * @param received data and error-correction codewords\n   * @param twoS number of error-correction codewords available\n   * @return the number of errors corrected\n   * @throws ReedSolomonException if decoding fails for any reason\n   */",
    "source_code": "\npublic int decodeWithECCount(int[] received, int twoS) throws ReedSolomonException {\n  GenericGFPoly poly = new GenericGFPoly(field, received);\n  int[] syndromeCoefficients = new int[twoS];\n  boolean noError = true;\n  for (int i = 0; i < twoS; i++) {\n    int eval = poly.evaluateAt(field.exp(i + field.getGeneratorBase()));\n    syndromeCoefficients[syndromeCoefficients.length - 1 - i] = eval;\n    if (eval != 0) {\n      noError = false;\n    }\n  }\n  if (noError) {\n    return 0;\n  }\n  GenericGFPoly syndrome = new GenericGFPoly(field, syndromeCoefficients);\n  GenericGFPoly[] sigmaOmega =\n      runEuclideanAlgorithm(field.buildMonomial(twoS, 1), syndrome, twoS);\n  GenericGFPoly sigma = sigmaOmega[0];\n  GenericGFPoly omega = sigmaOmega[1];\n  int[] errorLocations = findErrorLocations(sigma);\n  int[] errorMagnitudes = findErrorMagnitudes(omega, errorLocations);\n  for (int i = 0; i < errorLocations.length; i++) {\n    int position = received.length - 1 - field.log(errorLocations[i]);\n    if (position < 0) {\n      throw new ReedSolomonException(\"Bad error location\");\n    }\n    received[position] = GenericGF.addOrSubtract(received[position], errorMagnitudes[i]);\n  }\n  return errorLocations.length;\n}\n",
    "class_name": "ReedSolomonDecoder",
    "method_name": "decodeWithECCount",
    "arguments": [
        "int[] received",
        "int twoS"
    ],
    "generate_test": [
        "int[] received = {5, 4, 7, 10, 3, 9};\nint twoS = 3;\nReedSolomonDecoder rsDecoder = new ReedSolomonDecoder(new GenericGF(twoS));\ntry {\n    int result = rsDecoder.decodeWithECCount(received, twoS);\n    assertEquals(0, result);\n} catch (ReedSolomonException e) {\n    fail(\"Exception thrown: \" + e.getMessage());\n}",
        "@Test\n    public void decodeWithECCountTest() {\n        GenericGF field = new GenericGF(0x011D, 256, 1);\n        int[] received = {1, 2, 3, 4, 5, 6};\n        int twoS = 4;\n        ReedSolomonDecoder decoder = new ReedSolomonDecoder(field);\n        int result = decoder.decodeWithECCount(received, twoS);\n        assertEquals(0, result);\n    }",
        "@Test\npublic void decodeWithECCountTest() {\n    ReedSolomonDecoder decoder = new ReedSolomonDecoder(new GenericGF());\n    int[] received = {1, 2, 3, 4, 5};\n    int twoS = 5;\n    try {\n        int result = decoder.decodeWithECCount(received, twoS);\n        assertEquals(0, result);\n    } catch (ReedSolomonException e) {\n        fail(\"An exception should not have been thrown\");\n    }\n}",
        "@Test\npublic void decodeWithECCountTest() throws ReedSolomonException {\n    int[] received = {1, 2, 3, 4, 5, 6};\n    int twoS = 3;\n    ReedSolomonDecoder decoder = new ReedSolomonDecoder(new GenericGF());\n    int result = decoder.decodeWithECCount(received, twoS);\n    assertEquals(0, result);\n}",
        "    @Test\n    public void decodeWithECCountTest() throws ReedSolomonException {\n        int[] received = {1, 2, 3, 4, 5};\n        int twoS = 3;\n        \n        ReedSolomonDecoder decoder = new ReedSolomonDecoder(new GenericGF(0, 0, 0));\n        int result = decoder.decodeWithECCount(received, twoS);\n        \n        assertEquals(0, result);\n    }",
        "@Test\npublic void decodeWithECCountTest() {\n    // Create test objects\n    GenericGF field = new GenericGF(0x11D, 256, 1);\n    int[] received = {123, 234, 345, 456};\n    int twoS = 4;\n    \n    // Create instance of ReedSolomonDecoder\n    ReedSolomonDecoder decoder = new ReedSolomonDecoder(field);\n    \n    // Call the method to test\n    int result = decoder.decodeWithECCount(received, twoS);\n    \n    // Verify the result\n    assertEquals(0, result);\n}",
        "@Test\npublic void decodeWithECCountTest() {\n    int[] received = {4, 2, 1, 3};\n    GenericGF field = new GenericGF(0x11D, 256, 1);\n    ReedSolomonDecoder rsDecoder = new ReedSolomonDecoder(field);\n    int twoS = 2;\n    int result;\n    try {\n        result = rsDecoder.decodeWithECCount(received, twoS);\n        assertEquals(0, result);\n    } catch (ReedSolomonException e) {\n        e.printStackTrace();\n    }\n}",
        "@Test\npublic void decodeWithECCountTest() {\n    int[] received = {1, 0, 1, 0, 1, 0};\n    int twoS = 3;\n    ReedSolomonDecoder rsDecoder = new ReedSolomonDecoder(new GenericGF(0, 2));\n    try {\n        int result = rsDecoder.decodeWithECCount(received, twoS);\n        assertEquals(0, result);\n    } catch (ReedSolomonException e) {\n        e.printStackTrace();\n    }\n}",
        "@Test\npublic void decodeWithECCountTest() {\n    // Arrange\n    GenericGF field = new GenericGF(285, 256, 0);\n    ReedSolomonDecoder decoder = new ReedSolomonDecoder(field);\n    int[] received = {135, 216, 30, 32, 32, 38, 44, 25, 177, 179, 1, 170, 47, 204, 74};\n    int twoS = 5;\n\n    // Act\n    int result = decoder.decodeWithECCount(received, twoS);\n\n    // Assert\n    assertEquals(5, result);\n}",
        "@Test\npublic void decodeWithECCountTest() {\n    ReedSolomonDecoder decoder = new ReedSolomonDecoder(GenericGF.DATA_MATRIX_FIELD_256);\n    int[] received = {1, 2, 3, 4, 5};\n    int twoS = 4;\n    try {\n        int result = decoder.decodeWithECCount(received, twoS);\n        assertEquals(0, result);\n    } catch (ReedSolomonException e) {\n        fail(\"Exception thrown\");\n    }\n}"
    ]
}