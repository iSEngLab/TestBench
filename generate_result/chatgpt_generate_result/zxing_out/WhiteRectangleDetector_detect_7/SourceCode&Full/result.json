{
    "project_name": "zxing",
    "file_name": "WhiteRectangleDetector.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/common/detector/WhiteRectangleDetector.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.common.detector",
    "docstring": "/**\n   * <p>\n   * Detects a candidate barcode-like rectangular region within an image. It\n   * starts around the center of the image, increases the size of the candidate\n   * region until it finds a white rectangular region.\n   * </p>\n   *\n   * @return {@link ResultPoint}[] describing the corners of the rectangular\n   *         region. The first and last points are opposed on the diagonal, as\n   *         are the second and third. The first point will be the topmost\n   *         point and the last, the bottommost. The second point will be\n   *         leftmost and the third, the rightmost\n   * @throws NotFoundException if no Data Matrix Code can be found\n   */",
    "source_code": "\npublic ResultPoint[] detect() throws NotFoundException {\n\n  int left = leftInit;\n  int right = rightInit;\n  int up = upInit;\n  int down = downInit;\n  boolean sizeExceeded = false;\n  boolean aBlackPointFoundOnBorder = true;\n\n  boolean atLeastOneBlackPointFoundOnRight = false;\n  boolean atLeastOneBlackPointFoundOnBottom = false;\n  boolean atLeastOneBlackPointFoundOnLeft = false;\n  boolean atLeastOneBlackPointFoundOnTop = false;\n\n  while (aBlackPointFoundOnBorder) {\n\n    aBlackPointFoundOnBorder = false;\n\n    // .....\n    // .   |\n    // .....\n    boolean rightBorderNotWhite = true;\n    while ((rightBorderNotWhite || !atLeastOneBlackPointFoundOnRight) && right < width) {\n      rightBorderNotWhite = containsBlackPoint(up, down, right, false);\n      if (rightBorderNotWhite) {\n        right++;\n        aBlackPointFoundOnBorder = true;\n        atLeastOneBlackPointFoundOnRight = true;\n      } else if (!atLeastOneBlackPointFoundOnRight) {\n        right++;\n      }\n    }\n\n    if (right >= width) {\n      sizeExceeded = true;\n      break;\n    }\n\n    // .....\n    // .   .\n    // .___.\n    boolean bottomBorderNotWhite = true;\n    while ((bottomBorderNotWhite || !atLeastOneBlackPointFoundOnBottom) && down < height) {\n      bottomBorderNotWhite = containsBlackPoint(left, right, down, true);\n      if (bottomBorderNotWhite) {\n        down++;\n        aBlackPointFoundOnBorder = true;\n        atLeastOneBlackPointFoundOnBottom = true;\n      } else if (!atLeastOneBlackPointFoundOnBottom) {\n        down++;\n      }\n    }\n\n    if (down >= height) {\n      sizeExceeded = true;\n      break;\n    }\n\n    // .....\n    // |   .\n    // .....\n    boolean leftBorderNotWhite = true;\n    while ((leftBorderNotWhite || !atLeastOneBlackPointFoundOnLeft) && left >= 0) {\n      leftBorderNotWhite = containsBlackPoint(up, down, left, false);\n      if (leftBorderNotWhite) {\n        left--;\n        aBlackPointFoundOnBorder = true;\n        atLeastOneBlackPointFoundOnLeft = true;\n      } else if (!atLeastOneBlackPointFoundOnLeft) {\n        left--;\n      }\n    }\n\n    if (left < 0) {\n      sizeExceeded = true;\n      break;\n    }\n\n    // .___.\n    // .   .\n    // .....\n    boolean topBorderNotWhite = true;\n    while ((topBorderNotWhite || !atLeastOneBlackPointFoundOnTop) && up >= 0) {\n      topBorderNotWhite = containsBlackPoint(left, right, up, true);\n      if (topBorderNotWhite) {\n        up--;\n        aBlackPointFoundOnBorder = true;\n        atLeastOneBlackPointFoundOnTop = true;\n      } else if (!atLeastOneBlackPointFoundOnTop) {\n        up--;\n      }\n    }\n\n    if (up < 0) {\n      sizeExceeded = true;\n      break;\n    }\n\n  }\n\n  if (!sizeExceeded) {\n\n    int maxSize = right - left;\n\n    ResultPoint z = null;\n    for (int i = 1; z == null && i < maxSize; i++) {\n      z = getBlackPointOnSegment(left, down - i, left + i, down);\n    }\n\n    if (z == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n\n    ResultPoint t = null;\n    //go down right\n    for (int i = 1; t == null && i < maxSize; i++) {\n      t = getBlackPointOnSegment(left, up + i, left + i, up);\n    }\n\n    if (t == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n\n    ResultPoint x = null;\n    //go down left\n    for (int i = 1; x == null && i < maxSize; i++) {\n      x = getBlackPointOnSegment(right, up + i, right - i, up);\n    }\n\n    if (x == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n\n    ResultPoint y = null;\n    //go up left\n    for (int i = 1; y == null && i < maxSize; i++) {\n      y = getBlackPointOnSegment(right, down - i, right - i, down);\n    }\n\n    if (y == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n\n    return centerEdges(y, z, x, t);\n\n  } else {\n    throw NotFoundException.getNotFoundInstance();\n  }\n}\n",
    "class_name": "WhiteRectangleDetector",
    "method_name": "detect",
    "arguments": [],
    "generate_test": [
        "// given\nBitMatrix image = new BitMatrix(10);\nWhiteRectangleDetector detector = new WhiteRectangleDetector(image);\n\n// when\nResultPoint[] result = null;\nException exception = null;\ntry {\n    result = detector.detect();\n} catch (NotFoundException e) {\n    exception = e;\n}\n\n// then\nassertNull(exception);\nassertNotNull(result);\nassertEquals(4, result.length);",
        "ResultPoint[] result = null;\nWhiteRectangleDetector detector = new WhiteRectangleDetector(new BitMatrix(10, 10));\ntry {\n  result = detector.detect();\n  assertTrue(result.length > 0);\n} catch (NotFoundException e) {\n  fail(\"NotFoundException thrown\");\n}",
        "@Test\npublic void detectTest() {\n    // Given\n    BitMatrix bitMatrix = new BitMatrix(10, 10);\n    WhiteRectangleDetector whiteRectangleDetector = new WhiteRectangleDetector(bitMatrix);\n    \n    // When\n    ResultPoint[] resultPoints = whiteRectangleDetector.detect();\n\n    // Then\n    // Add assertions here to verify the expected result points\n}",
        "@Test\npublic void detectTest() {\n    try {\n        WhiteRectangleDetector detector = new WhiteRectangleDetector(new BitMatrix(width, height));\n        ResultPoint[] points = detector.detect();\n        assertNotNull(points);\n        assertEquals(4, points.length);\n        // Add specific assertions for the result points here\n    } catch (NotFoundException e) {\n        fail(\"Exception thrown during detection\");\n    }\n}",
        "ResultPoint[] resultPoints;\ntry {\n    resultPoints = whiteRectangleDetector.detect();\n    assertNotNull(resultPoints);\n} catch (NotFoundException e) {\n    fail(\"NotFoundException thrown: \" + e.getMessage());\n}",
        "@Test\npublic void detectTest() throws NotFoundException {\n    BitMatrix bitMatrix = new BitMatrix(10, 10);\n    WhiteRectangleDetector whiteRectangleDetector = new WhiteRectangleDetector(bitMatrix);\n    ResultPoint[] resultPoints = whiteRectangleDetector.detect();\n    assertNotNull(resultPoints);\n}",
        " @Test\n    public void detectTest() {\n        try {\n            BitMatrix image = new BitMatrix(10, 10);\n            WhiteRectangleDetector detector = new WhiteRectangleDetector(image);\n            ResultPoint[] result = detector.detect();\n            assertNotNull(result);\n        } catch (NotFoundException e) {\n            fail(\"Exception thrown\");\n        }\n    }",
        "ResultPoint[] result = new ResultPoint[4];\nresult[0] = new ResultPoint(10, 20);\nresult[1] = new ResultPoint(30, 40);\nresult[2] = new ResultPoint(50, 60);\nresult[3] = new ResultPoint(70, 80);\n\nassertArrayEquals(result, new WhiteRectangleDetector(image).detect());",
        "        WhiteRectangleDetector whiteRectangleDetector = new WhiteRectangleDetector(image);\n        ResultPoint[] result = whiteRectangleDetector.detect();\n        assertNotNull(result);",
        "@Test\npublic void detectTest() {\n    // Create a BitMatrix with test data\n    BitMatrix testMatrix = new BitMatrix(10, 10);\n    WhiteRectangleDetector detector = new WhiteRectangleDetector(testMatrix);\n    \n    // Perform the detection\n    try {\n        ResultPoint[] result = detector.detect();\n        assertNotNull(result);\n        // Add assertions for the expected result\n    } catch (NotFoundException e) {\n        fail(\"Exception thrown: \" + e.getMessage());\n    }\n}"
    ]
}