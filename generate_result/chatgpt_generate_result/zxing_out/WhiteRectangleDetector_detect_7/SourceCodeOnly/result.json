{
    "project_name": "zxing",
    "file_name": "WhiteRectangleDetector.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/common/detector/WhiteRectangleDetector.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.common.detector",
    "docstring": "/**\n   * <p>\n   * Detects a candidate barcode-like rectangular region within an image. It\n   * starts around the center of the image, increases the size of the candidate\n   * region until it finds a white rectangular region.\n   * </p>\n   *\n   * @return {@link ResultPoint}[] describing the corners of the rectangular\n   *         region. The first and last points are opposed on the diagonal, as\n   *         are the second and third. The first point will be the topmost\n   *         point and the last, the bottommost. The second point will be\n   *         leftmost and the third, the rightmost\n   * @throws NotFoundException if no Data Matrix Code can be found\n   */",
    "source_code": "\npublic ResultPoint[] detect() throws NotFoundException {\n\n  int left = leftInit;\n  int right = rightInit;\n  int up = upInit;\n  int down = downInit;\n  boolean sizeExceeded = false;\n  boolean aBlackPointFoundOnBorder = true;\n\n  boolean atLeastOneBlackPointFoundOnRight = false;\n  boolean atLeastOneBlackPointFoundOnBottom = false;\n  boolean atLeastOneBlackPointFoundOnLeft = false;\n  boolean atLeastOneBlackPointFoundOnTop = false;\n\n  while (aBlackPointFoundOnBorder) {\n\n    aBlackPointFoundOnBorder = false;\n\n    // .....\n    // .   |\n    // .....\n    boolean rightBorderNotWhite = true;\n    while ((rightBorderNotWhite || !atLeastOneBlackPointFoundOnRight) && right < width) {\n      rightBorderNotWhite = containsBlackPoint(up, down, right, false);\n      if (rightBorderNotWhite) {\n        right++;\n        aBlackPointFoundOnBorder = true;\n        atLeastOneBlackPointFoundOnRight = true;\n      } else if (!atLeastOneBlackPointFoundOnRight) {\n        right++;\n      }\n    }\n\n    if (right >= width) {\n      sizeExceeded = true;\n      break;\n    }\n\n    // .....\n    // .   .\n    // .___.\n    boolean bottomBorderNotWhite = true;\n    while ((bottomBorderNotWhite || !atLeastOneBlackPointFoundOnBottom) && down < height) {\n      bottomBorderNotWhite = containsBlackPoint(left, right, down, true);\n      if (bottomBorderNotWhite) {\n        down++;\n        aBlackPointFoundOnBorder = true;\n        atLeastOneBlackPointFoundOnBottom = true;\n      } else if (!atLeastOneBlackPointFoundOnBottom) {\n        down++;\n      }\n    }\n\n    if (down >= height) {\n      sizeExceeded = true;\n      break;\n    }\n\n    // .....\n    // |   .\n    // .....\n    boolean leftBorderNotWhite = true;\n    while ((leftBorderNotWhite || !atLeastOneBlackPointFoundOnLeft) && left >= 0) {\n      leftBorderNotWhite = containsBlackPoint(up, down, left, false);\n      if (leftBorderNotWhite) {\n        left--;\n        aBlackPointFoundOnBorder = true;\n        atLeastOneBlackPointFoundOnLeft = true;\n      } else if (!atLeastOneBlackPointFoundOnLeft) {\n        left--;\n      }\n    }\n\n    if (left < 0) {\n      sizeExceeded = true;\n      break;\n    }\n\n    // .___.\n    // .   .\n    // .....\n    boolean topBorderNotWhite = true;\n    while ((topBorderNotWhite || !atLeastOneBlackPointFoundOnTop) && up >= 0) {\n      topBorderNotWhite = containsBlackPoint(left, right, up, true);\n      if (topBorderNotWhite) {\n        up--;\n        aBlackPointFoundOnBorder = true;\n        atLeastOneBlackPointFoundOnTop = true;\n      } else if (!atLeastOneBlackPointFoundOnTop) {\n        up--;\n      }\n    }\n\n    if (up < 0) {\n      sizeExceeded = true;\n      break;\n    }\n\n  }\n\n  if (!sizeExceeded) {\n\n    int maxSize = right - left;\n\n    ResultPoint z = null;\n    for (int i = 1; z == null && i < maxSize; i++) {\n      z = getBlackPointOnSegment(left, down - i, left + i, down);\n    }\n\n    if (z == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n\n    ResultPoint t = null;\n    //go down right\n    for (int i = 1; t == null && i < maxSize; i++) {\n      t = getBlackPointOnSegment(left, up + i, left + i, up);\n    }\n\n    if (t == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n\n    ResultPoint x = null;\n    //go down left\n    for (int i = 1; x == null && i < maxSize; i++) {\n      x = getBlackPointOnSegment(right, up + i, right - i, up);\n    }\n\n    if (x == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n\n    ResultPoint y = null;\n    //go up left\n    for (int i = 1; y == null && i < maxSize; i++) {\n      y = getBlackPointOnSegment(right, down - i, right - i, down);\n    }\n\n    if (y == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n\n    return centerEdges(y, z, x, t);\n\n  } else {\n    throw NotFoundException.getNotFoundInstance();\n  }\n}\n",
    "class_name": "WhiteRectangleDetector",
    "method_name": "detect",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void detectTest() {\n    ResultPoint[] expectedResult = {new ResultPoint(2.0f, 3.0f), new ResultPoint(3.0f, 4.0f), new ResultPoint(4.0f, 3.0f), new ResultPoint(3.0f, 2.0f)};\n    WhiteRectangleDetector whiteRectangleDetector = new WhiteRectangleDetector();\n    ResultPoint[] actualResult = whiteRectangleDetector.detect();\n    assertArrayEquals(expectedResult, actualResult);\n}",
        "ResultPoint[] result = new ResultPoint[4];\ntry {\n    WhiteRectangleDetector whiteRectangleDetector = new WhiteRectangleDetector(luminances);\n    result = whiteRectangleDetector.detect();\n    assertNotNull(result);\n} catch (NotFoundException e) {\n    fail(\"NotFoundException thrown: \" + e.getMessage());\n}",
        "@Test\npublic void detectTest() {\n    try {\n        WhiteRectangleDetector detector = new WhiteRectangleDetector(); // instantiate the class to be tested\n        ResultPoint[] result = detector.detect(); // call the method to be tested\n        assertNotNull(result); // assert that the result is not null\n        // add specific assertions for the expected behavior of the detect method\n    } catch (NotFoundException e) {\n        fail(\"NotFoundException should not be thrown\");\n    }\n}",
        "@Test\npublic void detectTest() {\n    try {\n      ResultPoint[] resultPoints = detector.detect();\n      assertNotNull(resultPoints);\n      // Add additional assertions as needed\n    } catch (NotFoundException e) {\n      fail(\"NotFoundException should not have been thrown\");\n    }\n}",
        "@Test\npublic void detectTest() {\n  // Initialize the object to be tested\n  WhiteRectangleDetector detector = new WhiteRectangleDetector(image);\n  \n  // Call the method to be tested\n  ResultPoint[] result = detector.detect();\n  \n  // Assert the expected result\n  <FILL>\n}",
        "ResultPoint[] result = null;\ntry {\n    result = new WhiteRectangleDetector(EMPTY_MATRIX).detect();\n} catch (NotFoundException e) {\n    fail(\"NotFoundException was thrown: \" + e.getMessage());\n}\nassertNotNull(result);",
        "@Test\npublic void detectTest() {\n    ResultPoint[] result;\n    try {\n        result = whiteRectangleDetectorInstance.detect();\n        // Assert statements for the expected output\n    } catch (NotFoundException e) {\n        fail(\"NotFoundException thrown\");\n    }\n}",
        "@Test\npublic void detectTest() {\n    ResultPoint[] expectedPoints = { new ResultPoint(10, 20), new ResultPoint(30, 40) };\n    \n    WhiteRectangleDetector detector = new WhiteRectangleDetector(10, 20, 30, 40);\n    ResultPoint[] detectedPoints = detector.detect();\n    \n    assertArrayEquals(expectedPoints, detectedPoints);\n}",
        "@Test\npublic void detectTest() {\n  // Create a new instance of the WhiteRectangleDetector class\n  WhiteRectangleDetector detector = new WhiteRectangleDetector(image);\n\n  // Call the detect method\n  try {\n    ResultPoint[] result = detector.detect();\n\n    // Perform assertions on the result, such as checking the size of the result array\n    // and the values of individual ResultPoint objects\n    assertEquals(4, result.length);\n    // Add more specific assertions based on the expected behavior of the detect method\n  } catch (NotFoundException e) {\n    // Handle the NotFoundException, if expected\n    fail(\"Exception should not be thrown\");\n  }\n}\n",
        "\npublic void detectTest() {\n    try {\n        ResultPoint[] result = new WhiteRectangleDetector(<FILL>).detect();\n        // perform assertions on the result array\n        // Example: assertEquals(4, result.length);\n    } catch (NotFoundException e) {\n        fail(\"NotFoundException thrown\");\n    }\n}\n"
    ]
}