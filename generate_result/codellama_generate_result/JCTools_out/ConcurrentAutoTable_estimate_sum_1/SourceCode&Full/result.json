{
    "project_name": "JCTools",
    "file_name": "ConcurrentAutoTable.java",
    "relative_path": "JCTools/jctools-core/src/main/java/org/jctools/maps/ConcurrentAutoTable.java",
    "execute_path": "JCTools",
    "package": "org.jctools.maps",
    "docstring": null,
    "source_code": "// Fast fuzzy version.  Used a cached value until it gets old, then re-up\n// the cache.\npublic long estimate_sum( ) {\n  // For short tables, just do the work\n  if( _t.length <= 64 ) return sum();\n  // For bigger tables, periodically freshen a cached value\n  long millis = System.currentTimeMillis();\n  if( _fuzzy_time != millis ) { // Time marches on?\n    _fuzzy_sum_cache = sum(); // Get sum the hard way\n    _fuzzy_time = millis;   // Indicate freshness of cached value\n  }\n  return _fuzzy_sum_cache;  // Return cached sum\n}\n",
    "class_name": "ConcurrentAutoTable",
    "method_name": "estimate_sum",
    "arguments": [],
    "generate_test": [
        "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ConcurrentAutoTableTest {\n    @Test\n    public void estimate_sumTest() {\n        // Test case 1: Verify that the method returns a positive value for any input table size greater than or equal to 64.\n        int[] tableSizes = new int[]{64, 128, 256};\n        for (int i = 0; i < tableSizes.length; ++i) {\n            int size = tableSizes[i];\n            ConcurrentAutoTable cat = new ConcurrentAutoTable(size);\n            long expectedSum = 1 + (long)(Math.random() * (size - 1));\n            for (int j = 0; j < expectedSum; ++j) {\n                cat.add(1L);\n            }\n            assertTrue(cat.estimate_sum() >= expectedSum, \"The estimated sum should be greater than or equal to the actual sum.\");\n        }\n\n        // Test case 2: Verify that the method returns a negative value for any input table size less than 64.\n        int[] smallTableSizes = new int[]{0, 1, 32};\n        for (int i = 0; i < smallTableSizes.length; ++i) {\n            int size = smallTableSizes[i];\n            ConcurrentAutoTable cat = new ConcurrentAutoTable(size);\n            assertTrue(cat.estimate_sum() <= 0, \"The estimated sum should be less than or equal to 0 for a table size smaller than 64.\");\n        }\n    }\n}",
        "package org.jctools.maps;\n\nimport java.util.*;\n\npublic class ConcurrentAutoTableTest {\n    @Test\n    public void estimate_sumTest() {\n        Map<Integer,Integer> map = new HashMap<>();\n        for( int i=0; i<10000; i++ ) {\n            map.put(i,i);\n        }\n        long expectedSum = 0;\n        for( Integer v : map.values() ) expectedSum += v;\n        \n        ConcurrentAutoTable<Integer> table = new ConcurrentAutoTable<>();\n        for( int i=0; i<10000; i++ ) {\n            assertEquals(expectedSum,table.sum());\n            long r = table.add(i);\n            expectedSum += i-r;  // Sum is the sum of all adds so far, plus the delta\n        }\n    }\n}",
        "package org.jctools.maps;\n\nimport java.util.Arrays;\nimport java.util.Random;\n\npublic class ConcurrentAutoTableTest {\n    @Test\n    public void estimate_sumTest() {\n        // Create a CAT with 2 long values in each bucket\n        final int numBuckets = 100, numEntriesPerBucket = 2;\n        ConcurrentAutoTable table = new ConcurrentAutoTable(numBuckets);\n        for (int i=0; i<numBuckets; i++) {\n            long expectedValue = i*numEntriesPerBucket;\n            assertEquals(expectedValue, table.estimate_sum());\n        }\n    }\n}\n    \n\n### Response:",
        "\npublic long estimate_sum() {\n    if (_fuzzy_time != 0 && _fuzzy_time > System.currentTimeMillis()) {\n        return _fuzzy_sum_cache;\n    } else {\n        _fuzzy_sum_cache = sum();\n        _fuzzy_time = System.currentTimeMillis() + 1000L; // Update cache every second\n        return _fuzzy_sum_cache;\n    }\n}\n",
        "    @Test\n    public void estimate_sumTest() {\n        CAT cat = new CAT();\n        long x = (long)Math.random(), y = (long)Math.random(), z = (long)Math.random();\n        assertEquals(0, cat.estimate_sum()); // Empty table sums to 0\n        cat.add(x);\n        assertTrue(cat.estimate_sum() >= x && cat.estimate_sum() < 2*x);\n        cat.add(y);\n        assertTrue(cat.estimate_sum() >= x+y && cat.estimate_sum() < 2*(x+y));\n        cat.add(z);\n        assertTrue(cat.estimate_sum() >= x+y+z && cat.estimate_sum() < 2*(x+y+z));\n    }\n    \n    \n### JUNIT Test case:\npackage org.jctools.maps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ConcurrentAutoTableTest {\n    @Test\n    public void sumTest() {\n        <FILL>\n    }\n}\n    \n\n### Response:",
        "@Test\npublic void estimate_sumTest() {\n    final int N = 1024*1024; // Million entries\n    final ConcurrentAutoTable<Integer> cat = new ConcurrentAutoTable<>();\n    assertEquals(0, cat.estimate_sum());\n\n    for (int i = 0; i < N; i++) {\n        cat.add(i);\n        if (i % (N / 10) == 0) { // Every 10%\n            long estimate = cat.estimate_sum();\n            double error = Math.abs((double) estimate - (double) i * (i + 1) / 2.0);\n            System.out.println(String.format(\"At %d, estimate is %d with error %.2f%%\", i, estimate, error * 100.0 / N));\n        }\n    }\n\n    assertEquals((long) (N * (N + 1L) / 2L), cat.estimate_sum());\n}",
        "    public static void estimate_sumTest() {\n      ConcurrentAutoTable auto = new ConcurrentAutoTable(0L, 16, null);\n      long e = auto.estimate_sum();\n      assertEquals(0L, e);\n      // Add a single element to the table and check that estimate_sum gives same result as sum.\n      auto._t[0] += 1;\n      e = auto.estimate_sum();\n      long s = auto.sum();\n      assertEquals(s, e);\n    }\n    \n\n### Response:",
        "\npublic class ConcurrentAutoTableTest {\n    @Test public void estimate_sumTest() {\n        ConcurrentAutoTable<String, Integer> caut = new ConcurrentAutoTable<>();\n        assertEquals(0, caut.estimate_sum()); // Initial sum is 0\n        \n        caut.adjustOrCreateValue(\"foo\", 1, 1);\n        assertEquals(1, caut.estimate_sum()); // Adjusted 'foo' to 1\n        \n        caut.adjustOrCreateValue(\"foo\", 2, -1);\n        assertEquals(0, caut.estimate_sum()); // Adjusted 'foo' back to 0\n    }\n}\n    \n\n### Response:",
        "\npackage org.jctools.maps;\n\nimport java.util.*;\n\npublic class ConcurrentAutoTableTest {\n    public static void estimate_sumTest() {\n        // Create a new CAT with 1 element\n        final long x = 42L;\n        final CAT cat = new CAT(null,x);\n        assertEquals(cat.estimate_sum(), x);\n        // Add another element to the end of the table\n        final long y = 1037L;\n        cat.add(y);\n        assertEquals(cat.estimate_sum(), x + y);\n    }\n}\n\n    \n\n### JUNIT Test case:\npackage org.jctools.maps;\n\nimport java.util.*;\n\npublic class ConcurrentAutoTableTest {\n    public static void estimate_sumTest() {\n        // Create a new CAT with 1 element\n        final long x = 42L;\n        final CAT cat = new CAT(null,x);\n        assertEquals(cat.estimate_sum(), x);\n        // Add another element to the end of the table\n        final long y = 1037L;\n        cat.add(y);\n        assertEquals(cat.estimate_sum(), x + y);\n    }\n}\n    \n\n### Response:",
        "@Test\npublic void estimate_sumTest() {\n    final int N = 10;\n    CAT t = new CAT(null,N);\n    assertEquals(t.estimate_sum(),t._t[N]);\n}"
    ]
}