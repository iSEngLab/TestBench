{
    "project_name": "JCTools",
    "file_name": "FixedSizeStripedLongCounter.java",
    "relative_path": "JCTools/jctools-core/src/main/java/org/jctools/counters/FixedSizeStripedLongCounter.java",
    "execute_path": "JCTools",
    "package": "org.jctools.counters",
    "docstring": "/**\n     * Returns the probe value for the current thread.\n     * If target JDK version is 7 or higher, than ThreadLocalRandom-specific\n     * value will be used, xorshift with thread id otherwise.\n     */",
    "source_code": "\nprivate int probe() {\n    // Fast path for reliable well-distributed probe, available from JDK 7+.\n    // As long as PROBE is final static this branch will be constant folded\n    // (i.e removed).\n    if (PROBE != -1) {\n        int probe;\n        if ((probe = UNSAFE.getInt(Thread.currentThread(), PROBE)) == 0) {\n            ThreadLocalRandom.current(); // force initialization\n            probe = UNSAFE.getInt(Thread.currentThread(), PROBE);\n        }\n        return probe;\n    }\n\n    /*\n     * Else use much worse (for values distribution) method:\n     * Mix thread id with golden ratio and then xorshift it\n     * to spread consecutive ids (see Knuth multiplicative method as reference).\n     */\n    int probe = (int) ((Thread.currentThread().getId() * 0x9e3779b9) & Integer.MAX_VALUE);\n    // xorshift\n    probe ^= probe << 13;\n    probe ^= probe >>> 17;\n    probe ^= probe << 5;\n    return probe;\n}\n\n",
    "class_name": "FixedSizeStripedLongCounterPrePad",
    "method_name": "probe",
    "arguments": [],
    "generate_test": [
        "\npackage org.jctools.counters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FixedSizeStripedLongCounterPrePadTest {\n    @Test\n    public void probeTest() {\n        int probe = FixedSizeStripedLongCounter.probe();\n        assertTrue(probe >= 0); // ensure the probe value is non-negative\n        assertEquals((int) (Thread.currentThread().getId() * 0x9e3779b9) & Integer.MAX_VALUE, probe); // check that the probe value matches the expected distribution pattern\n    }\n}\n",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FixedSizeStripedLongCounterPrePadTest {\n    @Test\n    public void probeTest() {\n        assertEquals(probe(1), 3); // Expected result: 3\n        assertEquals(probe(2), 5); // Expected result: 5\n        assertEquals(probe(3), 7); // Expected result: 7\n    }\n}\n",
        "package org.jctools.counters;\n\nimport java.util.HashSet;\nimport java.util.Random;\n\npublic class FixedSizeStripedLongCounterPrePadTest {\n    @Test\n    public void probeTest() {\n        // Generate a set of random thread IDs\n        HashSet<Integer> ids = new HashSet<>();\n        for (int i = 0; i < 100; i++) {\n            ids.add(new Random().nextInt());\n        }\n\n        // Verify that the hash value is unique for each thread ID\n        for (Integer id : ids) {\n            int probe = FixedSizeStripedLongCounterPrePadTest.probe(id);\n            assertFalse(ids.contains(probe));\n        }\n    }\n}",
        "\npublic class FixedSizeStripedLongCounterPrePadTest {\n    @Test\n    public void probeTest() {\n        // Test the fast path for reliable well-distributed probe, available from JDK 7+.\n        int probe = UNSAFE.getInt(Thread.currentThread(), PROBE);\n        assertEquals((int) ((Thread.currentThread().getId() * 0x9e3779b9) & Integer.MAX_VALUE), probe);\n    }\n}",
        "\npackage org.jctools.counters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FixedSizeStripedLongCounterPrePadTest {\n    @Test\n    public void probeTest() {\n        int expectedProbe = 1; // Replace with the expected value of the probe\n        assertEquals(expectedProbe, FixedSizeStripedLongCounter.probe());\n    }\n}",
        "package org.jctools.counters;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FixedSizeStripedLongCounterPrePadTest {\n    @Test\n    public void probeTest() {\n        List<Thread> threads = new ArrayList<>();\n        for (int i = 0; i < 10; i++) { // create 10 threads\n            Thread thread = new Thread(() -> System.out.println(probe()));\n            threads.add(thread);\n            thread.start();\n        }\n        \n        int[] probes = new int[threads.size()];\n        for (int i = 0; i < threads.size(); i++) { // wait for each thread to finish and store its probe value in an array\n            try {\n                threads.get(i).join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            probes[i] = Integer.parseInt(threads.get(i).getProbe());\n        }\n        \n        for (int i = 0; i < probes.length - 1; i++) { // check that each probe value is different from the others\n            assertNotEquals(probes[i], probes[i + 1]);\n        }\n    }\n}",
        "\npackage org.jctools.counters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FixedSizeStripedLongCounterPrePadTest {\n    @Test\n    public void probeTest() {\n        int[] probes = new int[5];\n        for (int i = 0; i < probes.length; i++) {\n            assertNotEquals(probes[i], -1);\n            assertTrue((Thread.currentThread().getId() * 0x9e3779b9) & Integer.MAX_VALUE >= 0);\n        }\n    }\n}",
        "@Test\npublic void probeTest() {\n    // Create a list of thread IDs to use in the test\n    List<Long> threadIds = new ArrayList<>();\n    for (int i = 0; i < 100; i++) {\n        threadIds.add(Thread.currentThread().getId());\n    }\n    \n    // Call probe() once for each thread ID and store the returned values in a set\n    Set<Integer> uniqueValues = new HashSet<>();\n    for (long id : threadIds) {\n        uniqueValues.add(probe(id));\n    }\n    \n    // Verify that all returned values are unique\n    assertEquals(uniqueValues.size(), 100);\n}",
        "\npackage org.jctools.counters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FixedSizeStripedLongCounterPrePadTest {\n    @Test\n    public void probeTest() {\n        int probe = 1; // initialize with a value other than 0\n        \n        assertEquals(probe, UNSAFE.getInt(Thread.currentThread(), PROBE));\n        \n        ThreadLocalRandom.current(); // force initialization\n        \n        assertEquals((int) ((Thread.currentThread().getId() * 0x9e3779b9) & Integer.MAX_VALUE), UNSAFE.getInt(Thread.currentThread(), PROBE));\n    }\n}",
        "\npackage org.jctools.counters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FixedSizeStripedLongCounterPrePadTest {\n    @Test\n    public void probeTest() {\n        int probe = 1234; // Replace with the actual value of probe in the test case\n        assertEquals(probe, probe());\n    }\n}"
    ]
}