{
    "project_name": "JCTools",
    "file_name": "NonBlockingHashMap.java",
    "relative_path": "JCTools/jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMap.java",
    "execute_path": "JCTools",
    "package": "org.jctools.maps",
    "docstring": "/**\n   * Returns a string representation of this map.  The string representation\n   * consists of a list of key-value mappings in the order returned by the\n   * map's <tt>entrySet</tt> view's iterator, enclosed in braces\n   * (<tt>\"{}\"</tt>).  Adjacent mappings are separated by the characters\n   * <tt>\", \"</tt> (comma and space).  Each key-value mapping is rendered as\n   * the key followed by an equals sign (<tt>\"=\"</tt>) followed by the\n   * associated value.  Keys and values are converted to strings as by\n   * {@link String#valueOf(Object)}.\n   *\n   * @return a string representation of this map\n   */",
    "source_code": "\n@Override\npublic String toString() {\n  Iterator<Entry<TypeK,TypeV>> i = entrySet().iterator();\n  if( !i.hasNext())\n    return \"{}\";\n\n  StringBuilder sb = new StringBuilder();\n  sb.append('{');\n  for (;;) {\n    Entry<TypeK,TypeV> e = i.next();\n    TypeK key = e.getKey();\n    TypeV value = e.getValue();\n    sb.append(key   == this ? \"(this Map)\" : key);\n    sb.append('=');\n    sb.append(value == this ? \"(this Map)\" : value);\n    if( !i.hasNext())\n      return sb.append('}').toString();\n    sb.append(\", \");\n  }\n}\n",
    "class_name": "NonBlockingHashMap",
    "method_name": "toString",
    "arguments": [],
    "generate_test": [
        "package org.jctools.maps;\n\nimport java.util.*;\n\npublic class NonBlockingHashMapTest {\n    @Test\n    public void toStringTest() {\n        Map<Integer, String> map = new NonBlockingHashMap<>();\n        assertEquals(\"{}\", map.toString());\n        \n        map.put(1, \"one\");\n        assertEquals(\"{1=one}\", map.toString());\n        \n        map.put(2, \"two\");\n        assertEquals(\"{2=two, 1=one}\", map.toString());\n    }\n}\n    \n\n### Response:",
        "\npublic String toString() {\n    int size = 0;\n    for (int i = 0; i < slots(); i++) {\n        if (key(i) != null) {\n            size++;\n        }\n    }\n    StringBuilder sb = new StringBuilder(\"{\");\n    boolean first = true;\n    for (int i = 0; i < slots(); i++) {\n        Object k = key(i);\n        if (k == null) continue;\n        Object v = get(i);\n        if (!first) sb.append(\", \");\n        first = false;\n        sb.append(k).append(\"=\").append(v);\n    }\n    return sb.append(\"}\").toString();\n}\n",
        "package org.jctools.maps;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class NonBlockingHashMap<TypeK, TypeV> {\n    private final static int DEFAULT_INITIAL_CAPACITY = 16;\n    private final static float DEFAULT_LOAD_FACTOR = 0.75f;\n    private final static int MAXIMUM_CAPACITY = 2 << 30;\n    private final static int MINIMUM_CAPACITY = 4;\n    private final static int REPROBE_LIMIT = 64;\n    public NonBlockingHashMap();\n    public NonBlockingHashMap(float loadFactor);\n    public NonBlockingHashMap(int initialCapacity, float loadFactor);\n    public NonBlockingHashMap(int initialCapacity);\n    public int size();\n    public boolean isEmpty();\n    public boolean containsKey(Object key);\n    public TypeV put(TypeK key, TypeV val);\n    public TypeV remove(Object key);\n    public TypeV replace(TypeK key, Object val);\n    public boolean replace(TypeK key, Object oldValue, Object newValue);\n    private static boolean objectsEquals(Object a, Object b);\n    public final TypeV putIfMatchAllowNull(Object key, Object newVal, Object oldVal);\n    public final TypeV putIfMatch(Object key, Object newVal, Object oldVal);\n    public  putAll(Map<TypeK, TypeV> m);\n    public  clear();\n    public boolean containsValue(Object val);\n    protected  rehash();\n    private static Object clone_impl(NonBlockingHashMap topmap, Object kvs, int n, Object[] a);\n    public Object clone();\n    private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException;\n    private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException;\n    private static final long serialVersionUID = 1L;\n}\n    \n\n### JUNIT Test case:\npackage org.jctools.maps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NonBlockingHashMapTest {\n    @Test\n    public void testToString() {\n        NonBlockingHashMap<String, Integer> map = new NonBlockingHashMap<>();\n        assertEquals(map.toString(), \"{}\");\n        \n        map.put(\"a\", 1);\n        assertEquals(map.toString(), \"{a=1}\");\n        \n        map.put(\"b\", 2);\n        assertEquals(map.toString(), \"{a=1, b=2}\");\n    }\n    \n    @Test\n    public void testSize() {\n        NonBlockingHashMap<String, Integer> map = new NonBlockingHashMap<>();\n        assertEquals(map.size(), 0);\n        \n        map.put(\"a\", 1);\n        assertEquals(map.size(), 1);\n        \n        map.put(\"b\", 2);\n        assertEquals(map.size(), 2);\n    }\n    \n    @Test\n    public void testIsEmpty() {\n        NonBlockingHashMap<String, Integer> map = new NonBlockingHashMap<>();\n        assertTrue(map.isEmpty());\n        \n        map.put(\"a\", 1);\n        assertFalse(map.isEmpty());\n        \n        map.clear();\n        assertTrue(map.isEmpty());\n    }\n    \n    @Test\n    public void testContainsKey() {\n        NonBlockingHashMap<String, Integer> map = new NonBlockingHashMap<>();\n        map.put(\"a\", 1);\n        \n        assertTrue(map.containsKey(\"a\"))\n        assertFalse((map.containsKey(\"b\"))\n    }\n    \n    @Test\n    public void testPut() {\n        NonBlockingHashMap<String, Integer> map = new NonBlockingHashMap<>();\n        assertNull((map.put(\"a\", 1)));\n        \n        map = new NonBlockingHashMap<>();\n        map.put(\"a\", 1);\n        assertEquals(map.size(), 1);\n    }\n    \n    @Test\n    public void testRemove() {\n        NonBlockingHashMap<String, Integer> map = new NonBlockingHashMap<>();\n        \n        map.put(\"a\", 1);\n        map.put(\"b\", 2);\n        assertEquals(map.size(), 2);\n        \n        assertNotNull((map.remove(\"a\")));\n        assertEquals(map.size(), 1);\n        \n        assertNotNull((map.remove(\"b\")));\n        assertEquals(map.size(), 0);\n    }\n    \n    @Test\n    public void testReplace() {\n        NonBlockingHashMap<String, Integer> map = new NonBlockingHashMap<>();\n        \n        assertNull((map.replace(\"a\", 1)));\n        assertNull((map.replace(\"b\", 2)));\n        \n        assertNotNull((map.put(\"c\", 3)));\n        assertEquals(map.size(), 1);\n        \n        assertNotNull((map.replace(\"c\", 4, 3)));\n        assertEquals(map.size(), 1);\n        \n        assertNotNull((map.replace(\"c\", 5, 4)));\n        assertEquals(map.size(), 0);\n    }\n    \n    @Test\n    public void testRehash() {\n        NonBlockingHashMap<String, Integer> map = new NonBlockingHashMap<>();\n        \n        map.put(\"a\", 1);\n        map.rehash();\n        \n        map.put(\"b\", 2);\n        assertEquals(map.size(), 2);\n    }\n    \n    @Test\n    public void testClone() {\n        NonBlockingHashMap<String, Integer> map = new NonBlockingHashMap<>();\n        \n        map.put(\"a\", 1);\n        map.clone();\n        \n        assertNotNull((map.put(\"b\", 2)));\n        assertEquals(map.size(), 2);\n    }\n    \n    @Test\n    public void testContainsValue() {\n        NonBlockingHashMap<String, Integer> map = new NonBlockingHashMap<>();\n        \n        map.put(\"a\", 1);\n        assertTrue((map.containsValue(1)));\n        \n        assertFalse((map.containsValue(2)));\n    }\n}\n    \n\n",
        "public class NonBlockingHashMap<K, V> {\n    private static final int MAX_RETRIES = 10;\n    \n    @Override\n    public String toString() {\n        return \"NonBlockingHashMap{\" + \"table=\" + table + '}';\n    }\n    \n    <SNIPPET>\n\n}",
        "package org.jctools.maps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NonBlockingHashMapTest {\n    @Test\n    public void toStringTest() {\n        NonBlockingHashMap<Integer, Integer> map = new NonBlockingHashMap<>();\n        assertEquals(\"{}\", map.toString());\n        \n        map.put(1, 2);\n        String expectedToString = \"{1=\" + 2 + \"}\";\n        assertEquals(expectedToString, map.toString());\n    }\n}\n    ",
        "package org.jctools.maps;\n\nimport java.util.*;\n\npublic class NonBlockingHashMapTest {\n    @Test\n    public void toStringTest() {\n        NonBlockingHashMap<Integer, String> map = new NonBlockingHashMap<>();\n        assertEquals(\"{}\", map.toString());\n        map.put(1, \"one\");\n        map.put(2, \"two\");\n        map.put(3, \"three\");\n        assertEquals(\"{1=one, 2=two, 3=three}\", map.toString());\n    }\n}",
        "\npackage org.jctools.maps;\nimport java.util.*;\n\npublic class NonBlockingHashMapTest {\n    private static final int MAX_CAPACITY = 1 << 30; // max capacity (ie 1 << 30)\n    @Test\n    public void toStringTest() {\n        assertEquals(\"{}\", new NonBlockingHashMap<>().toString());\n        assertEquals(NonBlockingHashMap.class.getName() + \"{size=0}\", new NonBlockingHashMap<>().toString());\n        \n        // insert one key-value pair into the map and test its toString() method\n        final int n = 1;\n        final NonBlockingHashMap<Integer, Integer> m = new NonBlockingHashMap<>();\n        for (int i = 0; i < n; i++) {\n            assertTrue(m.putIfMatch((i * 5) % MAX_CAPACITY, i, null)); // insert a key-value pair\n        }\n        \n        // get the current map's toString() result\n        final String mToString = m.toString();\n        \n        // check if all keys and values are present in the string representation of the map\n        assertTrue(mToString.contains(\"{\" + (0 * 5) % MAX_CAPACITY + \"=\" + 0 + \",\"));\n        assertTrue(mToString.endsWith(\"}\"));\n    }\n}",
        "@Test\npublic void toStringTest() {\n    NonBlockingHashMap<Integer, String> map = new NonBlockingHashMap<>();\n    assertEquals(\"{}\", map.toString());\n}",
        "package org.jctools.maps;\n\nimport java.util.*;\npublic class NonBlockingHashMapTest {\n    @Test\n    public void toStringTest() {\n        NonBlockingHashMap<Integer, String> map = new NonBlockingHashMap<>();\n        map.put(1, \"one\");\n        map.put(2, \"two\");\n        assertEquals(\"{1=one, 2=two}\", map.toString());\n    }\n}",
        "public class NonBlockingHashMapTest {\n    @Test\n    public void toStringTest() {\n        assertEquals(map.toString(), \"{}\");\n        map.put(\"a\", 1);\n        assertEquals(map.toString(), \"{a=1}\");\n        map.put(\"b\", 2);\n        assertEquals(map.toString(), \"{a=1, b=2}\");\n    }\n}"
    ]
}