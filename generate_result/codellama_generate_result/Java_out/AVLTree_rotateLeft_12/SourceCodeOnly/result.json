{
    "project_name": "Java",
    "file_name": "AVLTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/AVLTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": null,
    "source_code": "private Node rotateLeft(Node a) {\n    Node b = a.right;\n    b.parent = a.parent;\n\n    a.right = b.left;\n\n    if (a.right != null) {\n        a.right.parent = a;\n    }\n\n    b.left = a;\n    a.parent = b;\n\n    if (b.parent != null) {\n        if (b.parent.right == a) {\n            b.parent.right = b;\n        } else {\n            b.parent.left = b;\n        }\n    }\n\n    setBalance(a, b);\n\n    return b;\n}\n",
    "class_name": "AVLTree",
    "method_name": "rotateLeft",
    "arguments": [
        "Node a"
    ],
    "generate_test": [
        "@Test\npublic void rotateLeftTest() {\n    // Create a sample tree with three nodes: A, B, and C\n    Node root = new Node(\"A\");\n    Node left = new Node(\"B\");\n    Node right = new Node(\"C\");\n    root.setChildren(left, right);\n\n    // Rotate the subtree to the left\n    rotateLeft(root);\n\n    // Check that the rotation was successful\n    assertEquals(root.getRight(), left);\n    assertEquals(left.getParent(), root);\n    assertEquals(right.getParent(), left);\n}",
        "\nimport java.lang.reflect.*;\n\npublic class AVLTreeTest {\n    private static final String CLASS_NAME = \"com.thealgorithms.datastructures.trees.AVLTree\";\n\n    @Test\n    public void rotateLeftTest() throws Exception {\n        // Create a new instance of the AVLTree class\n        Class<?> clazz = Class.forName(CLASS_NAME);\n        Constructor<?> constructor = clazz.getDeclaredConstructor();\n        Object avlTree = constructor.newInstance();\n\n        // Call the rotateLeft method on the instance\n        Method rotateLeftMethod = clazz.getDeclaredMethod(\"rotateLeft\", Node.class);\n        Node root = new Node(1, null, null);\n        Node child = new Node(2, root, null);\n        Object result = rotateLeftMethod.invoke(avlTree, child);\n\n        // Check the result of the method call\n        assertEquals(child.left, result);\n    }\n}\n",
        "@Test\npublic void rotateLeftTest() {\n    // Create a sample Node object\n    Node node = new Node(10, null, null);\n    // Set the parent of the Node to another Node\n    Node parentNode = new Node(20, null, null);\n    node.parent = parentNode;\n    // Rotate the Node to the left\n    Node rotatedNode = rotateLeft(node);\n    // Check that the rotated Node has the correct left child\n    assertEquals(rotatedNode.left.value, 10);\n    // Check that the rotated Node has the correct right child\n    assertEquals(rotatedNode.right.value, 20);\n    // Check that the parent of the rotated Node is still the same as the original node\n    assertEquals(parentNode, rotatedNode.parent);\n}",
        "Node a = new Node();\na.data = \"A\";\n\nNode b = new Node();\nb.data = \"B\";\n\na.left = b;\nb.parent = a;\n\nassertEquals(rotateLeft(a), b);",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AVLTreeTest {\n    @Test\n    public void rotateLeftTest() {\n        // Create a sample tree with two nodes, A and B\n        Node root = new Node();\n        Node nodeA = new Node(root);\n        Node nodeB = new Node(nodeA);\n\n        // Set the left child of node A to be node B\n        nodeA.left = nodeB;\n\n        // Rotate the tree using the rotateLeft method\n        Node newRoot = rotateLeft(root);\n\n        // Assert that the new root is node B, and that the parent of node A is now node B\n        assertEquals(nodeB, newRoot);\n        assertEquals(nodeA.parent, nodeB);\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class AVLTreeTest {\n    @Test\n    public void rotateLeftTest() {\n        Node a = new Node(10);\n        Node b = new Node(20);\n        a.right = b;\n        b.parent = a;\n        Node c = new Node(30);\n        b.left = c;\n        c.parent = b;\n        AVLTree tree = new AVLTree();\n        tree.rotateLeft(a);\n        assertEquals(b, a.right);\n        assertEquals(c, b.left);\n    }\n}",
        "@Test\npublic void rotateLeftTest() {\n    // Set up the initial state of the tree\n    AVLTree<Integer> tree = new AVLTree<>();\n    tree.insert(10);\n    tree.insert(5);\n    tree.insert(20);\n    tree.insert(8);\n    tree.insert(15);\n    tree.insert(12);\n\n    // Call the rotateLeft method and verify that it returns the correct node\n    Node<Integer> rotatedNode = tree.rotateLeft(tree.getRoot());\n    assertEquals(rotatedNode.getValue(), 10);\n\n    // Verify that the left child of the root is now the right child of the rotated node\n    assertEquals(rotatedNode.right, tree.getRoot().left);\n\n    // Verify that the parent and grandparent nodes have been updated correctly\n    assertEquals(tree.getRoot().parent, rotatedNode);\n    assertEquals(tree.getRoot().grandParent, rotatedNode.parent);\n\n    // Verify that the balance factor of the tree has been updated correctly\n    assertEquals(rotatedNode.balanceFactor, 0);\n}",
        "\npackage com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AVLTreeTest {\n    @Test\n    public void rotateLeftTest() {\n        Node a = new Node(1);\n        Node b = new Node(2);\n        a.right = b;\n        b.left = a;\n        b.parent = a;\n\n        assertEquals(a.right, b);\n        assertEquals(b.left, a);\n        assertEquals(b.parent, a);\n\n        Node c = rotateLeft(a);\n        assertEquals(c, b);\n        assertEquals(c.parent, b.parent);\n    }\n}\n",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AVLTreeTest {\n    @Test\n    public void rotateLeftTest() {\n        // Create a new instance of the AVLTree class and add some nodes to it\n        AVLTree tree = new AVLTree();\n        Node root = new Node(10);\n        tree.addNode(root);\n        Node leftChild = new Node(5);\n        tree.addNode(leftChild);\n        Node rightChild = new Node(20);\n        tree.addNode(rightChild);\n        \n        // Select one of the nodes in the tree and call the rotateLeft() method with that node as input\n        Node nodeToRotate = leftChild;\n        Node rotatedNode = tree.rotateLeft(nodeToRotate);\n        \n        // Verify that the rotation was successful by checking the properties of the nodes involved in the rotation\n        assertEquals(rotatedNode.getBalanceFactor(), 0);\n        assertEquals(rotatedNode.getParent().getValue(), 10);\n        assertEquals(rotatedNode.getLeftChild().getValue(), 5);\n        assertEquals(rotatedNode.getRightChild().getValue(), 20);\n    }\n}",
        "\npackage com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AVLTreeTest {\n    @Test\n    public void rotateLeftTest() {\n        Node a = new Node(10, null);\n        Node b = new Node(20, null);\n        a.right = b;\n        b.parent = a;\n        \n        Node c = a.rotateLeft();\n        \n        assertEquals(c.data, 20);\n        assertEquals(c.left.data, 10);\n        assertNull(c.right);\n    }\n}\n"
    ]
}