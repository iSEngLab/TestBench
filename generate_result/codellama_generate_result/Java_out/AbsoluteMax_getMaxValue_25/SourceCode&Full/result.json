{
    "project_name": "Java",
    "file_name": "AbsoluteMax.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/AbsoluteMax.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Finds the absolute maximum value among the given numbers.\n     *\n     * @param numbers The numbers to compare.\n     * @return The absolute maximum value.\n     * @throws IllegalArgumentException If the input array is empty or null.\n     */",
    "source_code": "\npublic static int getMaxValue(int... numbers) {\n    if (numbers == null || numbers.length == 0) {\n        throw new IllegalArgumentException(\"Numbers array cannot be empty or null\");\n    }\n    int absMax = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (Math.abs(numbers[i]) > Math.abs(absMax)) {\n            absMax = numbers[i];\n        }\n    }\n    return absMax;\n}\n",
    "class_name": "AbsoluteMax",
    "method_name": "getMaxValue",
    "arguments": [
        "int numbers"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = {1, 2, 3};\n        int expected = 3;\n        assertEquals(expected, AbsoluteMax.getMaxValue(numbers));\n        \n        numbers = new int[] {-1, -2, -3};\n        expected = -1;\n        assertEquals(expected, AbsoluteMax.getMaxValue(numbers));\n        \n        numbers = new int[] {1, 2, 3, 4, 5};\n        expected = 5;\n        assertEquals(expected, AbsoluteMax.getMaxValue(numbers));\n    }\n}",
        "\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = new int[] {-1, 2, -3, 4, -5};\n        assertEquals(5, AbsoluteMax.getMaxValue(numbers));\n    }\n}\n",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = new int[] {1, 2, 3};\n        assertEquals(3, AbsoluteMax.getMaxValue(numbers));\n\n        numbers = new int[] {-1, -2, -3};\n        assertEquals(-1, AbsoluteMax.getMaxValue(numbers));\n\n        numbers = new int[] {0, 0, 0};\n        assertEquals(0, AbsoluteMax.getMaxValue(numbers));\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Test case 1: Empty array\n        int[] emptyArray = {};\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(emptyArray));\n\n        // Test case 2: Single-element array\n        int[] singleElementArray = {3};\n        assertEquals(3, AbsoluteMax.getMaxValue(singleElementArray));\n\n        // Test case 3: Multiple-element array with positive and negative numbers\n        int[] multiElementArray = {-10, -5, 10, 20, 40};\n        assertEquals(40, AbsoluteMax.getMaxValue(multiElementArray));\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = new int[] {-1, 2, -3, 4, -5};\n        assertEquals(5, AbsoluteMax.getMaxValue(numbers));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Test case 1: Test with positive numbers\n        int[] numbers = new int[] {1, 2, 3, 4};\n        assertEquals(4, AbsoluteMax.getMaxValue(numbers));\n\n        // Test case 2: Test with negative numbers\n        numbers = new int[] {-1, -2, -3, -4};\n        assertEquals(-1, AbsoluteMax.getMaxValue(numbers));\n\n        // Test case 3: Test with a mix of positive and negative numbers\n        numbers = new int[] {1, -2, 3, -4};\n        assertEquals(3, AbsoluteMax.getMaxValue(numbers));\n    }\n}",
        "@Test\npublic void getMaxValueTest() {\n    int[] numbers = new int[] {-5, -2, 3, 10};\n    assertEquals(10, AbsoluteMax.getMaxValue(numbers));\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = new int[] {-1, 2, -3, 4};\n        assertEquals(4, AbsoluteMax.getMaxValue(numbers));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = new int[] {-2, -1, 0, 1, 2};\n        assertEquals(2, AbsoluteMax.getMaxValue(numbers));\n        \n        int[] emptyArray = {};\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(emptyArray);\n        });\n        \n        int[] nullArray = null;\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(nullArray);\n        });\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = new int[] {-1, -2, 3};\n        assertEquals(3, AbsoluteMax.getMaxValue(numbers));\n\n        numbers = new int[] {-10, -20, 30};\n        assertEquals(-10, AbsoluteMax.getMaxValue(numbers));\n    }\n}"
    ]
}