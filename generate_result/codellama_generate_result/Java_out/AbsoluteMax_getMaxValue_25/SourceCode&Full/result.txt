Source code: 


public static int getMaxValue(int... numbers) {
    if (numbers == null || numbers.length == 0) {
        throw new IllegalArgumentException("Numbers array cannot be empty or null");
    }
    int absMax = numbers[0];
    for (int i = 1; i < numbers.length; i++) {
        if (Math.abs(numbers[i]) > Math.abs(absMax)) {
            absMax = numbers[i];
        }
    }
    return absMax;
}



No.1 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = {1, 2, 3};
        int expected = 3;
        assertEquals(expected, AbsoluteMax.getMaxValue(numbers));
        
        numbers = new int[] {-1, -2, -3};
        expected = -1;
        assertEquals(expected, AbsoluteMax.getMaxValue(numbers));
        
        numbers = new int[] {1, 2, 3, 4, 5};
        expected = 5;
        assertEquals(expected, AbsoluteMax.getMaxValue(numbers));
    }
}


No.2 generated result --------------------------


import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {-1, 2, -3, 4, -5};
        assertEquals(5, AbsoluteMax.getMaxValue(numbers));
    }
}



No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {1, 2, 3};
        assertEquals(3, AbsoluteMax.getMaxValue(numbers));

        numbers = new int[] {-1, -2, -3};
        assertEquals(-1, AbsoluteMax.getMaxValue(numbers));

        numbers = new int[] {0, 0, 0};
        assertEquals(0, AbsoluteMax.getMaxValue(numbers));
    }
}


No.4 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        // Test case 1: Empty array
        int[] emptyArray = {};
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(emptyArray));

        // Test case 2: Single-element array
        int[] singleElementArray = {3};
        assertEquals(3, AbsoluteMax.getMaxValue(singleElementArray));

        // Test case 3: Multiple-element array with positive and negative numbers
        int[] multiElementArray = {-10, -5, 10, 20, 40};
        assertEquals(40, AbsoluteMax.getMaxValue(multiElementArray));
    }
}


No.5 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {-1, 2, -3, 4, -5};
        assertEquals(5, AbsoluteMax.getMaxValue(numbers));
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        // Test case 1: Test with positive numbers
        int[] numbers = new int[] {1, 2, 3, 4};
        assertEquals(4, AbsoluteMax.getMaxValue(numbers));

        // Test case 2: Test with negative numbers
        numbers = new int[] {-1, -2, -3, -4};
        assertEquals(-1, AbsoluteMax.getMaxValue(numbers));

        // Test case 3: Test with a mix of positive and negative numbers
        numbers = new int[] {1, -2, 3, -4};
        assertEquals(3, AbsoluteMax.getMaxValue(numbers));
    }
}


No.7 generated result --------------------------

@Test
public void getMaxValueTest() {
    int[] numbers = new int[] {-5, -2, 3, 10};
    assertEquals(10, AbsoluteMax.getMaxValue(numbers));
}


No.8 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {-1, 2, -3, 4};
        assertEquals(4, AbsoluteMax.getMaxValue(numbers));
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {-2, -1, 0, 1, 2};
        assertEquals(2, AbsoluteMax.getMaxValue(numbers));
        
        int[] emptyArray = {};
        assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(emptyArray);
        });
        
        int[] nullArray = null;
        assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(nullArray);
        });
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {-1, -2, 3};
        assertEquals(3, AbsoluteMax.getMaxValue(numbers));

        numbers = new int[] {-10, -20, 30};
        assertEquals(-10, AbsoluteMax.getMaxValue(numbers));
    }
}


