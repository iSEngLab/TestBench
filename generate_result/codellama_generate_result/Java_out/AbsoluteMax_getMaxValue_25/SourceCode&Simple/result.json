{
    "project_name": "Java",
    "file_name": "AbsoluteMax.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/AbsoluteMax.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Finds the absolute maximum value among the given numbers.\n     *\n     * @param numbers The numbers to compare.\n     * @return The absolute maximum value.\n     * @throws IllegalArgumentException If the input array is empty or null.\n     */",
    "source_code": "\npublic static int getMaxValue(int... numbers) {\n    if (numbers == null || numbers.length == 0) {\n        throw new IllegalArgumentException(\"Numbers array cannot be empty or null\");\n    }\n    int absMax = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (Math.abs(numbers[i]) > Math.abs(absMax)) {\n            absMax = numbers[i];\n        }\n    }\n    return absMax;\n}\n",
    "class_name": "AbsoluteMax",
    "method_name": "getMaxValue",
    "arguments": [
        "int numbers"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = new int[] {1, 2, 3, -4, 5};\n        assertEquals(5, AbsoluteMax.getMaxValue(numbers));\n        \n        numbers = new int[] {-1, -2, -3, -4, -5};\n        assertEquals(-1, AbsoluteMax.getMaxValue(numbers));\n        \n        numbers = new int[] {0, 0, 0, 0, 0};\n        assertEquals(0, AbsoluteMax.getMaxValue(numbers));\n    }\n}\n",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = new int[] {-1, 2, -3, 4, -5};\n        assertEquals(getMaxValue(numbers), 4);\n        \n        numbers = new int[] {-1, 2, -3, 4};\n        assertEquals(getMaxValue(numbers), 2);\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = new int[] {1, 2, 3};\n        assertEquals(3, AbsoluteMax.getMaxValue(numbers));\n    }\n}\n",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = new int[] {-10, 20, -30, 40};\n        assertEquals(40, AbsoluteMax.getMaxValue(numbers));\n    }\n}\n",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = new int[] {1, 2, 3};\n        int expectedOutput = 3;\n        assertEquals(expectedOutput, AbsoluteMax.getMaxValue(numbers));\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = new int[] {1, 2, 3, 4};\n        assertEquals(Math.abs(getMaxValue(numbers)), Math.abs(4));\n\n        numbers = new int[] {-1, -2, -3, -4};\n        assertEquals(Math.abs(getMaxValue(numbers)), Math.abs(-1));\n\n        numbers = new int[] {1, 2, 3, -4};\n        assertEquals(Math.abs(getMaxValue(numbers)), Math.abs(3));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = new int[] {-1, 2, -3, 4};\n        assertEquals(4, AbsoluteMax.getMaxValue(numbers));\n        \n        numbers = new int[] {};\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(numbers));\n    }\n}",
        "The response to the instruction will be:\n\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Test case 1: Test with a null array\n        int[] numbers = null;\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(numbers));\n        \n        // Test case 2: Test with an empty array\n        numbers = new int[0];\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(numbers));\n        \n        // Test case 3: Test with a positive number\n        numbers = new int[] {1, 2, 3};\n        assertEquals(AbsoluteMax.getMaxValue(numbers), 3);\n        \n        // Test case 4: Test with a negative number\n        numbers = new int[] {-1, -2, -3};\n        assertEquals(AbsoluteMax.getMaxValue(numbers), -1);\n    }\n}",
        "\n@Test\npublic void getMaxValueTest() {\n    int[] numbers = new int[] {-1, 2, -3, 4, -5};\n    assertEquals(getMaxValue(numbers), 5);\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = new int[] {-1, 2, -3};\n        int absMax = getMaxValue(numbers);\n        assertEquals(2, absMax);\n        \n        int[] numbers2 = new int[] {100, -100, 50};\n        int absMax2 = getMaxValue(numbers2);\n        assertEquals(100, absMax2);\n    }\n}"
    ]
}