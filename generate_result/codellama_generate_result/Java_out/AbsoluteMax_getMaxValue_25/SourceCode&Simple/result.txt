Source code: 


public static int getMaxValue(int... numbers) {
    if (numbers == null || numbers.length == 0) {
        throw new IllegalArgumentException("Numbers array cannot be empty or null");
    }
    int absMax = numbers[0];
    for (int i = 1; i < numbers.length; i++) {
        if (Math.abs(numbers[i]) > Math.abs(absMax)) {
            absMax = numbers[i];
        }
    }
    return absMax;
}



No.1 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {1, 2, 3, -4, 5};
        assertEquals(5, AbsoluteMax.getMaxValue(numbers));
        
        numbers = new int[] {-1, -2, -3, -4, -5};
        assertEquals(-1, AbsoluteMax.getMaxValue(numbers));
        
        numbers = new int[] {0, 0, 0, 0, 0};
        assertEquals(0, AbsoluteMax.getMaxValue(numbers));
    }
}



No.2 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {-1, 2, -3, 4, -5};
        assertEquals(getMaxValue(numbers), 4);
        
        numbers = new int[] {-1, 2, -3, 4};
        assertEquals(getMaxValue(numbers), 2);
    }
}


No.3 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {1, 2, 3};
        assertEquals(3, AbsoluteMax.getMaxValue(numbers));
    }
}



No.4 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {-10, 20, -30, 40};
        assertEquals(40, AbsoluteMax.getMaxValue(numbers));
    }
}



No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {1, 2, 3};
        int expectedOutput = 3;
        assertEquals(expectedOutput, AbsoluteMax.getMaxValue(numbers));
    }
}


No.6 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {1, 2, 3, 4};
        assertEquals(Math.abs(getMaxValue(numbers)), Math.abs(4));

        numbers = new int[] {-1, -2, -3, -4};
        assertEquals(Math.abs(getMaxValue(numbers)), Math.abs(-1));

        numbers = new int[] {1, 2, 3, -4};
        assertEquals(Math.abs(getMaxValue(numbers)), Math.abs(3));
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {-1, 2, -3, 4};
        assertEquals(4, AbsoluteMax.getMaxValue(numbers));
        
        numbers = new int[] {};
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(numbers));
    }
}


No.8 generated result --------------------------

The response to the instruction will be:

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        // Test case 1: Test with a null array
        int[] numbers = null;
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(numbers));
        
        // Test case 2: Test with an empty array
        numbers = new int[0];
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(numbers));
        
        // Test case 3: Test with a positive number
        numbers = new int[] {1, 2, 3};
        assertEquals(AbsoluteMax.getMaxValue(numbers), 3);
        
        // Test case 4: Test with a negative number
        numbers = new int[] {-1, -2, -3};
        assertEquals(AbsoluteMax.getMaxValue(numbers), -1);
    }
}


No.9 generated result --------------------------


@Test
public void getMaxValueTest() {
    int[] numbers = new int[] {-1, 2, -3, 4, -5};
    assertEquals(getMaxValue(numbers), 5);
}


No.10 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {-1, 2, -3};
        int absMax = getMaxValue(numbers);
        assertEquals(2, absMax);
        
        int[] numbers2 = new int[] {100, -100, 50};
        int absMax2 = getMaxValue(numbers2);
        assertEquals(100, absMax2);
    }
}


