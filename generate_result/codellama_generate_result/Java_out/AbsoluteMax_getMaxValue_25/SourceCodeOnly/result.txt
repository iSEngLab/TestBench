Source code: 


public static int getMaxValue(int... numbers) {
    if (numbers == null || numbers.length == 0) {
        throw new IllegalArgumentException("Numbers array cannot be empty or null");
    }
    int absMax = numbers[0];
    for (int i = 1; i < numbers.length; i++) {
        if (Math.abs(numbers[i]) > Math.abs(absMax)) {
            absMax = numbers[i];
        }
    }
    return absMax;
}



No.1 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {1, 2, -3, 4};
        assertEquals(4, AbsoluteMax.getMaxValue(numbers));

        numbers = new int[] {-1000, 1000};
        assertEquals(1000, AbsoluteMax.getMaxValue(numbers));

        numbers = new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE};
        assertEquals(Integer.MAX_VALUE, AbsoluteMax.getMaxValue(numbers));
    }
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {-1, 2, 3, -4};
        int expectedResult = -1;
        
        assertEquals(expectedResult, AbsoluteMax.getMaxValue(numbers));
    }
}


No.3 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {1, 2, 3};
        assertEquals(Math.abs(getMaxValue(numbers)), Math.abs(3));
        
        numbers = new int[] {-1, -2, -3};
        assertEquals(Math.abs(getMaxValue(numbers)), Math.abs(-1));
        
        numbers = new int[] {1, -2, 3};
        assertEquals(Math.abs(getMaxValue(numbers)), Math.abs(3));
    }
}


No.4 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = {1, 2, 3};
        assertEquals(Math.abs(getMaxValue(numbers)), Math.abs(3));
    }
}


No.5 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {1, 2, 3};
        assertEquals(3, getMaxValue(numbers));
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {1, 2, 3};
        assertEquals(getMaxValue(numbers), 3);

        numbers = new int[] {-1, -2, -3};
        assertEquals(getMaxValue(numbers), -1);

        numbers = new int[] {0, 0, 0};
        assertEquals(getMaxValue(numbers), 0);
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[]{-5, 10, -20};
        assertEquals(10, AbsoluteMax.getMaxValue(numbers));
        
        int[] numbers2 = new int[]{4, -5, -8};
        assertEquals(-5, AbsoluteMax.getMaxValue(numbers2));
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = new int[] {1, 2, 3, 4};
        assertEquals(getMaxValue(numbers), 4);
        
        numbers = new int[] {-1, -2, -3, -4};
        assertEquals(getMaxValue(numbers), -1);
        
        numbers = new int[] {1, 0, 0, 0};
        assertEquals(getMaxValue(numbers), 1);
        
        numbers = new int[] {-1, -2, -3, -4};
        assertEquals(getMaxValue(numbers), -1);
    }
}


No.9 generated result --------------------------


public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = {1, 2, 3};
        int expected = 3;
        assertEquals(expected, AbsoluteMax.getMaxValue(numbers));
        
        int[] numbers2 = {-1, -2, -3};
        int expected2 = -1;
        assertEquals(expected2, AbsoluteMax.getMaxValue(numbers2));
    }
}


No.10 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        // Test with a single positive number
        int[] numbers = new int[] { 10 };
        assertEquals(10, getMaxValue(numbers));

        // Test with a single negative number
        numbers = new int[] { -10 };
        assertEquals(-10, getMaxValue(numbers));

        // Test with multiple positive and negative numbers
        numbers = new int[] { 5, -2, 8, -6, 3, 9 };
        assertEquals(9, getMaxValue(numbers));
    }
}



