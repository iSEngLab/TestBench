{
    "project_name": "Java",
    "file_name": "AliquotSum.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/AliquotSum.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Function to calculate the aliquot sum of an integer number\n     *\n     * @param n a positive integer\n     * @return aliquot sum of given {@code number}\n     */",
    "source_code": "\npublic static int getAliquotSum(int n) {\n    if (n <= 0) return -1;\n    int sum = 1;\n    double root = Math.sqrt(n);\n    /*\n     * We can get the factors after the root by dividing number by its factors\n     * before the root.\n     * Ex- Factors of 100 are 1, 2, 4, 5, 10, 20, 25, 50 and 100.\n     * Root of 100 is 10. So factors before 10 are 1, 2, 4 and 5.\n     * Now by dividing 100 by each factor before 10 we get:\n     * 100/1 = 100, 100/2 = 50, 100/4 = 25 and 100/5 = 20\n     * So we get 100, 50, 25 and 20 which are factors of 100 after 10\n     */\n    for (int i = 2; i <= root; i++) {\n        if (n % i == 0) {\n            sum += i + n / i;\n        }\n    }\n    // if n is a perfect square then its root was added twice in above loop, so subtracting root\n    // from sum\n    if (root == (int) root) sum -= root;\n    return sum;\n}\n",
    "class_name": "AliquotSum",
    "method_name": "getAliquotSum",
    "arguments": [
        "int n"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(1, AliquotSum.getAliquotSum(1));\n        assertEquals(9, AliquotSum.getAliquotSum(15));\n        assertEquals(4, AliquotSum.getAliquotSum(20));\n        assertEquals(8, AliquotSum.getAliquotSum(32));\n        assertEquals(7, AliquotSum.getAliquotSum(35));\n        assertEquals(16, AliquotSum.getAliquotSum(40));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(1, AliquotSum.getAliquotSum(0)); // 0 is a perfect square, so the sum should be 1\n        assertEquals(6, AliquotSum.getAliquotSum(9)); // 9 has factors 1 and 9, so the sum should be 6\n        assertEquals(28, AliquotSum.getAliquotSum(30)); // 30 has factors 1, 2, 3, 5, and 15, so the sum should be 28\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        int n = 10;\n        int expectedResult = 9;\n        assertEquals(expectedResult, AliquotSum.getAliquotSum(n));\n\n        n = 25;\n        expectedResult = 17;\n        assertEquals(expectedResult, AliquotSum.getAliquotSum(n));\n\n        n = 100;\n        expectedResult = 134;\n        assertEquals(expectedResult, AliquotSum.getAliquotSum(n));\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        // Test that the method returns -1 for negative inputs\n        assertEquals(-1, AliquotSum.getAliquotSum(-1));\n        \n        // Test that the method returns 0 for 0 and 1\n        assertEquals(0, AliquotSum.getAliquotSum(0));\n        assertEquals(0, AliquotSum.getAliquotSum(1));\n        \n        // Test that the method returns the correct aliquot sum for various positive inputs\n        assertEquals(3, AliquotSum.getAliquotSum(4));\n        assertEquals(6, AliquotSum.getAliquotSum(8));\n        assertEquals(10, AliquotSum.getAliquotSum(25));\n    }\n}\n",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(1, AliquotSum.getAliquotSum(1)); // Test case 1: Sum of aliquot divisors for prime numbers\n        assertEquals(3, AliquotSum.getAliquotSum(2)); // Test case 2: Sum of aliquot divisors for a perfect square\n        assertEquals(9, AliquotSum.getAliquotSum(15)); // Test case 3: Sum of aliquot divisors for a non-perfect square\n    }\n}\n",
        "\n@Test\npublic void getAliquotSumTest() {\n    // Test 1: Verify that the method returns -1 for a negative input\n    int result = AliquotSum.getAliquotSum(-1);\n    assertEquals(-1, result);\n\n    // Test 2: Verify that the method returns 0 for input 0\n    result = AliquotSum.getAliquotSum(0);\n    assertEquals(0, result);\n\n    // Test 3: Verify that the method returns the correct value for a positive integer input\n    result = AliquotSum.getAliquotSum(15);\n    assertEquals(9, result);\n}\n",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        // Positive input number\n        assertEquals(1, AliquotSum.getAliquotSum(0));\n        assertEquals(4, AliquotSum.getAliquotSum(2));\n        assertEquals(8, AliquotSum.getAliquotSum(6));\n        assertEquals(15, AliquotSum.getAliquotSum(10));\n\n        // Negative input number\n        assertEquals(-1, AliquotSum.getAliquotSum(-1));\n        assertEquals(-1, AliquotSum.getAliquotSum(-2));\n        assertEquals(-1, AliquotSum.getAliquotSum(-6));\n        assertEquals(-1, AliquotSum.getAliquotSum(-10));\n\n        // Input number is 0\n        assertEquals(1, AliquotSum.getAliquotSum(0));\n\n        // Input number is a perfect square\n        assertEquals(9, AliquotSum.getAliquotSum(15));\n        assertEquals(25, AliquotSum.getAliquotSum(36));\n        assertEquals(49, AliquotSum.getAliquotSum(64));\n\n        // Input number has multiple factors\n        assertEquals(10, AliquotSum.getAliquotSum(12));\n        assertEquals(25, AliquotSum.getAliquotSum(30));\n        assertEquals(35, AliquotSum.getAliquotSum(48));\n\n        // Input number has no factors\n        assertEquals(1, AliquotSum.getAliquotSum(1));\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        int actual = AliquotSum.getAliquotSum(12);\n        assertEquals(6, actual);\n        \n        actual = AliquotSum.getAliquotSum(30);\n        assertEquals(48, actual);\n        \n        actual = AliquotSum.getAliquotSum(100);\n        assertEquals(257, actual);\n    }\n}",
        "\nThe response to the task is as follows:\n\n@Test\npublic void getAliquotSumTest() {\n  int result = AliquotSum.getAliquotSum(12);\n  assertEquals(result, 34); // Expected aliquot sum of 12 is 34\n}\n\nIn this test case, we are testing the `getAliquotSum` method by passing an input value of 12 and checking if the result is equal to the expected aliquot sum of 34.",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        // Test case 1: n = 0, expected result = -1\n        assertEquals(-1, AliquotSum.getAliquotSum(0));\n        \n        // Test case 2: n = 1, expected result = 1\n        assertEquals(1, AliquotSum.getAliquotSum(1));\n        \n        // Test case 3: n = 4, expected result = 5 (1 + 2 + 4)\n        assertEquals(5, AliquotSum.getAliquotSum(4));\n        \n        // Test case 4: n = 100, expected result = 98 (1 + 2 + 4 + 5 + 10 + 20 + 25 + 50)\n        assertEquals(98, AliquotSum.getAliquotSum(100));\n        \n        // Test case 5: n = 36, expected result = 7 (1 + 3 + 9 + 12)\n        assertEquals(7, AliquotSum.getAliquotSum(36));\n    }\n}"
    ]
}