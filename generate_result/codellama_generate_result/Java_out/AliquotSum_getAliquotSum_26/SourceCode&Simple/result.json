{
    "project_name": "Java",
    "file_name": "AliquotSum.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/AliquotSum.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Function to calculate the aliquot sum of an integer number\n     *\n     * @param n a positive integer\n     * @return aliquot sum of given {@code number}\n     */",
    "source_code": "\npublic static int getAliquotSum(int n) {\n    if (n <= 0) return -1;\n    int sum = 1;\n    double root = Math.sqrt(n);\n    /*\n     * We can get the factors after the root by dividing number by its factors\n     * before the root.\n     * Ex- Factors of 100 are 1, 2, 4, 5, 10, 20, 25, 50 and 100.\n     * Root of 100 is 10. So factors before 10 are 1, 2, 4 and 5.\n     * Now by dividing 100 by each factor before 10 we get:\n     * 100/1 = 100, 100/2 = 50, 100/4 = 25 and 100/5 = 20\n     * So we get 100, 50, 25 and 20 which are factors of 100 after 10\n     */\n    for (int i = 2; i <= root; i++) {\n        if (n % i == 0) {\n            sum += i + n / i;\n        }\n    }\n    // if n is a perfect square then its root was added twice in above loop, so subtracting root\n    // from sum\n    if (root == (int) root) sum -= root;\n    return sum;\n}\n",
    "class_name": "AliquotSum",
    "method_name": "getAliquotSum",
    "arguments": [
        "int n"
    ],
    "generate_test": [
        "\nimport com.thealgorithms.maths.AliquotSum;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        int number = 100;\n        int expectedResult = 385;\n\n        assertEquals(expectedResult, AliquotSum.getAliquotSum(number));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        int expected = 1 + 2 + 3;\n        int actual = AliquotSum.getAliquotSum(6);\n        assertEquals(expected, actual);\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        // Test that the sum of aliquot values for 12 is correct\n        assertEquals(36, AliquotSum.getAliquotSum(12));\n        \n        // Test that the sum of aliquot values for -12 is correct\n        assertEquals(-36, AliquotSum.getAliquotSum(-12));\n        \n        // Test that the sum of aliquot values for 9 is correct\n        assertEquals(27, AliquotSum.getAliquotSum(9));\n        \n        // Test that the sum of aliquot values for 49 is correct\n        assertEquals(108, AliquotSum.getAliquotSum(49));\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(1, AliquotSum.getAliquotSum(1));\n        assertEquals(4, AliquotSum.getAliquotSum(2));\n        assertEquals(6, AliquotSum.getAliquotSum(3));\n        assertEquals(10, AliquotSum.getAliquotSum(4));\n        assertEquals(18, AliquotSum.getAliquotSum(5));\n        assertEquals(22, AliquotSum.getAliquotSum(6));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport java.util.stream.IntStream;\n\npublic class AliquotSum {\n    public static int getAliquotValue(int number) {\n        // Define the getAliquotValue method here\n    }\n    \n    public static int getAliquotSum(int n) {\n        if (n <= 0) return -1;\n        int sum = 1;\n        double root = Math.sqrt(n);\n        for (int i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                sum += i + n / i;\n            }\n        }\n        if (root == (int) root) sum -= root;\n        return sum;\n    }\n}",
        "\n@Test\npublic void getAliquotSumTest() {\n    // Test case 1: n = 0\n    assertEquals(-1, AliquotSum.getAliquotSum(0));\n\n    // Test case 2: n = 1\n    assertEquals(1, AliquotSum.getAliquotSum(1));\n\n    // Test case 3: n = 5\n    assertEquals(6, AliquotSum.getAliquotSum(5));\n\n    // Test case 4: n = 9\n    assertEquals(12, AliquotSum.getAliquotSum(9));\n\n    // Test case 5: n = 100\n    assertEquals(285, AliquotSum.getAliquotSum(100));\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(1, AliquotSum.getAliquotSum(1));\n        assertEquals(2, AliquotSum.getAliquotSum(2));\n        assertEquals(4, AliquotSum.getAliquotSum(3));\n        assertEquals(6, AliquotSum.getAliquotSum(4));\n        assertEquals(7, AliquotSum.getAliquotSum(5));\n        assertEquals(10, AliquotSum.getAliquotSum(6));\n        assertEquals(12, AliquotSum.getAliquotSum(7));\n        assertEquals(14, AliquotSum.getAliquotSum(8));\n    }\n}",
        "import static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        int[] inputs = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n        int[] expectedResults = new int[] { 1, 3, 6, 10, 15, 21, 28, 36, 45, 55 };\n        \n        for (int i = 0; i < inputs.length; i++) {\n            assertEquals(expectedResults[i], AliquotSum.getAliquotSum(inputs[i]));\n        }\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        // Test that the sum of divisors is correct for a few different numbers\n        assertEquals(10, AliquotSum.getAliquotSum(10));\n        assertEquals(28, AliquotSum.getAliquotSum(20));\n        assertEquals(46, AliquotSum.getAliquotSum(35));\n        \n        // Test that the sum of divisors is correct for a number with multiple factors\n        assertEquals(17, AliquotSum.getAliquotSum(17));\n        assertEquals(290, AliquotSum.getAliquotSum(290));\n    }\n}\n",
        "@Test\npublic void getAliquotSumTest() {\n    int number = 10;\n    int expectedResult = 21; // 1 + 2 + 5 + 10\n    assertEquals(expectedResult, AliquotSum.getAliquotSum(number));\n}"
    ]
}