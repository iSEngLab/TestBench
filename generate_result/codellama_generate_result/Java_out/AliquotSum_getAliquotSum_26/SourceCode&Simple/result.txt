Source code: 


public static int getAliquotSum(int n) {
    if (n <= 0) return -1;
    int sum = 1;
    double root = Math.sqrt(n);
    /*
     * We can get the factors after the root by dividing number by its factors
     * before the root.
     * Ex- Factors of 100 are 1, 2, 4, 5, 10, 20, 25, 50 and 100.
     * Root of 100 is 10. So factors before 10 are 1, 2, 4 and 5.
     * Now by dividing 100 by each factor before 10 we get:
     * 100/1 = 100, 100/2 = 50, 100/4 = 25 and 100/5 = 20
     * So we get 100, 50, 25 and 20 which are factors of 100 after 10
     */
    for (int i = 2; i <= root; i++) {
        if (n % i == 0) {
            sum += i + n / i;
        }
    }
    // if n is a perfect square then its root was added twice in above loop, so subtracting root
    // from sum
    if (root == (int) root) sum -= root;
    return sum;
}



No.1 generated result --------------------------


import com.thealgorithms.maths.AliquotSum;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        int number = 100;
        int expectedResult = 385;

        assertEquals(expectedResult, AliquotSum.getAliquotSum(number));
    }
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        int expected = 1 + 2 + 3;
        int actual = AliquotSum.getAliquotSum(6);
        assertEquals(expected, actual);
    }
}


No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        // Test that the sum of aliquot values for 12 is correct
        assertEquals(36, AliquotSum.getAliquotSum(12));
        
        // Test that the sum of aliquot values for -12 is correct
        assertEquals(-36, AliquotSum.getAliquotSum(-12));
        
        // Test that the sum of aliquot values for 9 is correct
        assertEquals(27, AliquotSum.getAliquotSum(9));
        
        // Test that the sum of aliquot values for 49 is correct
        assertEquals(108, AliquotSum.getAliquotSum(49));
    }
}


No.4 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        assertEquals(1, AliquotSum.getAliquotSum(1));
        assertEquals(4, AliquotSum.getAliquotSum(2));
        assertEquals(6, AliquotSum.getAliquotSum(3));
        assertEquals(10, AliquotSum.getAliquotSum(4));
        assertEquals(18, AliquotSum.getAliquotSum(5));
        assertEquals(22, AliquotSum.getAliquotSum(6));
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import java.util.stream.IntStream;

public class AliquotSum {
    public static int getAliquotValue(int number) {
        // Define the getAliquotValue method here
    }
    
    public static int getAliquotSum(int n) {
        if (n <= 0) return -1;
        int sum = 1;
        double root = Math.sqrt(n);
        for (int i = 2; i <= root; i++) {
            if (n % i == 0) {
                sum += i + n / i;
            }
        }
        if (root == (int) root) sum -= root;
        return sum;
    }
}


No.6 generated result --------------------------


@Test
public void getAliquotSumTest() {
    // Test case 1: n = 0
    assertEquals(-1, AliquotSum.getAliquotSum(0));

    // Test case 2: n = 1
    assertEquals(1, AliquotSum.getAliquotSum(1));

    // Test case 3: n = 5
    assertEquals(6, AliquotSum.getAliquotSum(5));

    // Test case 4: n = 9
    assertEquals(12, AliquotSum.getAliquotSum(9));

    // Test case 5: n = 100
    assertEquals(285, AliquotSum.getAliquotSum(100));
}


No.7 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        assertEquals(1, AliquotSum.getAliquotSum(1));
        assertEquals(2, AliquotSum.getAliquotSum(2));
        assertEquals(4, AliquotSum.getAliquotSum(3));
        assertEquals(6, AliquotSum.getAliquotSum(4));
        assertEquals(7, AliquotSum.getAliquotSum(5));
        assertEquals(10, AliquotSum.getAliquotSum(6));
        assertEquals(12, AliquotSum.getAliquotSum(7));
        assertEquals(14, AliquotSum.getAliquotSum(8));
    }
}


No.8 generated result --------------------------

import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        int[] inputs = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        int[] expectedResults = new int[] { 1, 3, 6, 10, 15, 21, 28, 36, 45, 55 };
        
        for (int i = 0; i < inputs.length; i++) {
            assertEquals(expectedResults[i], AliquotSum.getAliquotSum(inputs[i]));
        }
    }
}


No.9 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        // Test that the sum of divisors is correct for a few different numbers
        assertEquals(10, AliquotSum.getAliquotSum(10));
        assertEquals(28, AliquotSum.getAliquotSum(20));
        assertEquals(46, AliquotSum.getAliquotSum(35));
        
        // Test that the sum of divisors is correct for a number with multiple factors
        assertEquals(17, AliquotSum.getAliquotSum(17));
        assertEquals(290, AliquotSum.getAliquotSum(290));
    }
}



No.10 generated result --------------------------

@Test
public void getAliquotSumTest() {
    int number = 10;
    int expectedResult = 21; // 1 + 2 + 5 + 10
    assertEquals(expectedResult, AliquotSum.getAliquotSum(number));
}


