{
    "project_name": "Java",
    "file_name": "AliquotSum.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/AliquotSum.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Function to calculate the aliquot sum of an integer number\n     *\n     * @param n a positive integer\n     * @return aliquot sum of given {@code number}\n     */",
    "source_code": "\npublic static int getAliquotSum(int n) {\n    if (n <= 0) return -1;\n    int sum = 1;\n    double root = Math.sqrt(n);\n    /*\n     * We can get the factors after the root by dividing number by its factors\n     * before the root.\n     * Ex- Factors of 100 are 1, 2, 4, 5, 10, 20, 25, 50 and 100.\n     * Root of 100 is 10. So factors before 10 are 1, 2, 4 and 5.\n     * Now by dividing 100 by each factor before 10 we get:\n     * 100/1 = 100, 100/2 = 50, 100/4 = 25 and 100/5 = 20\n     * So we get 100, 50, 25 and 20 which are factors of 100 after 10\n     */\n    for (int i = 2; i <= root; i++) {\n        if (n % i == 0) {\n            sum += i + n / i;\n        }\n    }\n    // if n is a perfect square then its root was added twice in above loop, so subtracting root\n    // from sum\n    if (root == (int) root) sum -= root;\n    return sum;\n}\n",
    "class_name": "AliquotSum",
    "method_name": "getAliquotSum",
    "arguments": [
        "int n"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(1, AliquotSum.getAliquotSum(-1));\n        assertEquals(3, AliquotSum.getAliquotSum(2));\n        assertEquals(15, AliquotSum.getAliquotSum(4));\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        int n = 100;\n        assertEquals(getAliquotSum(n), 225);\n        \n        n = 10;\n        assertEquals(getAliquotSum(n), 10);\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        int n = 100; // Provide input value for the method\n        int expectedSum = 28; // Calculate the expected sum of divisors manually\n        int actualSum = AliquotSum.getAliquotSum(n); // Get the actual sum from the method\n        assertEquals(expectedSum, actualSum); // Check if the actual sum is equal to the expected sum\n    }\n}\n",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        // Test case 1: n = 100, expected output: 1 + 2 + 4 + 5 + 10 + 20 + 25 + 50 + 100 = 376\n        assertEquals(376, AliquotSum.getAliquotSum(100));\n        \n        // Test case 2: n = 120, expected output: 1 + 2 + 4 + 5 + 8 + 10 + 12 + 20 + 30 + 60 + 120 = 376\n        assertEquals(376, AliquotSum.getAliquotSum(120));\n        \n        // Test case 3: n = 50, expected output: 1 + 2 + 4 + 5 + 10 + 25 + 50 = 86\n        assertEquals(86, AliquotSum.getAliquotSum(50));\n        \n        // Test case 4: n = 36, expected output: 1 + 2 + 3 + 4 + 6 + 9 + 12 + 18 + 36 = 72\n        assertEquals(72, AliquotSum.getAliquotSum(36));\n        \n        // Test case 5: n = 0, expected output: -1\n        assertEquals(-1, AliquotSum.getAliquotSum(0));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(100, AliquotSum.getAliquotSum(100));\n        assertEquals(194, AliquotSum.getAliquotSum(123456789));\n        assertEquals(-1, AliquotSum.getAliquotSum(-1));\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        // Test with a negative number\n        int actual = AliquotSum.getAliquotSum(-1);\n        assertEquals(actual, -1);\n        \n        // Test with 0\n        actual = AliquotSum.getAliquotSum(0);\n        assertEquals(actual, 1);\n        \n        // Test with a positive number\n        actual = AliquotSum.getAliquotSum(12);\n        int expected = 36;\n        assertEquals(actual, expected);\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        // Test case 1: n = 0\n        assertEquals(-1, AliquotSum.getAliquotSum(0));\n        \n        // Test case 2: n = 1\n        assertEquals(1, AliquotSum.getAliquotSum(1));\n        \n        // Test case 3: n = 100\n        assertEquals(64, AliquotSum.getAliquotSum(100));\n        \n        // Test case 4: n = 250\n        assertEquals(648, AliquotSum.getAliquotSum(250));\n    }\n}",
        "\nimport org.junit.jupiter.api.Test;\n\nclass AliquotSumTest {\n    @Test\n    public void testGetAliquotSum() {\n        assertEquals(1, getAliquotSum(0));\n        assertEquals(-1, getAliquotSum(-1));\n        assertEquals(1, getAliquotSum(1));\n        assertEquals(2, getAliquotSum(2));\n        assertEquals(3, getAliquotSum(3));\n        assertEquals(4, getAliquotSum(4));\n        assertEquals(5, getAliquotSum(5));\n        assertEquals(6, getAliquotSum(6));\n        assertEquals(7, getAliquotSum(7));\n        assertEquals(8, getAliquotSum(8));\n        assertEquals(9, getAliquotSum(9));\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        int expectedSum = 100; // Expected aliquot sum of 100 is 100\n        assertEquals(expectedSum, AliquotSum.getAliquotSum(100));\n\n        expectedSum = 55; // Expected aliquot sum of 12 is 6 + 4 + 3 + 2 + 1 = 16\n        assertEquals(expectedSum, AliquotSum.getAliquotSum(12));\n\n        expectedSum = -1; // Expected aliquot sum of 0 is -1 because 0 is not a positive integer\n        assertEquals(expectedSum, AliquotSum.getAliquotSum(0));\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(100, AliquotSum.getAliquotSum(25));\n    }\n}"
    ]
}