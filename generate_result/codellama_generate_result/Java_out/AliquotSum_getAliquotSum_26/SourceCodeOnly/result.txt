Source code: 


public static int getAliquotSum(int n) {
    if (n <= 0) return -1;
    int sum = 1;
    double root = Math.sqrt(n);
    /*
     * We can get the factors after the root by dividing number by its factors
     * before the root.
     * Ex- Factors of 100 are 1, 2, 4, 5, 10, 20, 25, 50 and 100.
     * Root of 100 is 10. So factors before 10 are 1, 2, 4 and 5.
     * Now by dividing 100 by each factor before 10 we get:
     * 100/1 = 100, 100/2 = 50, 100/4 = 25 and 100/5 = 20
     * So we get 100, 50, 25 and 20 which are factors of 100 after 10
     */
    for (int i = 2; i <= root; i++) {
        if (n % i == 0) {
            sum += i + n / i;
        }
    }
    // if n is a perfect square then its root was added twice in above loop, so subtracting root
    // from sum
    if (root == (int) root) sum -= root;
    return sum;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        assertEquals(1, AliquotSum.getAliquotSum(-1));
        assertEquals(3, AliquotSum.getAliquotSum(2));
        assertEquals(15, AliquotSum.getAliquotSum(4));
    }
}


No.2 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        int n = 100;
        assertEquals(getAliquotSum(n), 225);
        
        n = 10;
        assertEquals(getAliquotSum(n), 10);
    }
}


No.3 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        int n = 100; // Provide input value for the method
        int expectedSum = 28; // Calculate the expected sum of divisors manually
        int actualSum = AliquotSum.getAliquotSum(n); // Get the actual sum from the method
        assertEquals(expectedSum, actualSum); // Check if the actual sum is equal to the expected sum
    }
}



No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        // Test case 1: n = 100, expected output: 1 + 2 + 4 + 5 + 10 + 20 + 25 + 50 + 100 = 376
        assertEquals(376, AliquotSum.getAliquotSum(100));
        
        // Test case 2: n = 120, expected output: 1 + 2 + 4 + 5 + 8 + 10 + 12 + 20 + 30 + 60 + 120 = 376
        assertEquals(376, AliquotSum.getAliquotSum(120));
        
        // Test case 3: n = 50, expected output: 1 + 2 + 4 + 5 + 10 + 25 + 50 = 86
        assertEquals(86, AliquotSum.getAliquotSum(50));
        
        // Test case 4: n = 36, expected output: 1 + 2 + 3 + 4 + 6 + 9 + 12 + 18 + 36 = 72
        assertEquals(72, AliquotSum.getAliquotSum(36));
        
        // Test case 5: n = 0, expected output: -1
        assertEquals(-1, AliquotSum.getAliquotSum(0));
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        assertEquals(100, AliquotSum.getAliquotSum(100));
        assertEquals(194, AliquotSum.getAliquotSum(123456789));
        assertEquals(-1, AliquotSum.getAliquotSum(-1));
    }
}


No.6 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        // Test with a negative number
        int actual = AliquotSum.getAliquotSum(-1);
        assertEquals(actual, -1);
        
        // Test with 0
        actual = AliquotSum.getAliquotSum(0);
        assertEquals(actual, 1);
        
        // Test with a positive number
        actual = AliquotSum.getAliquotSum(12);
        int expected = 36;
        assertEquals(actual, expected);
    }
}


No.7 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        // Test case 1: n = 0
        assertEquals(-1, AliquotSum.getAliquotSum(0));
        
        // Test case 2: n = 1
        assertEquals(1, AliquotSum.getAliquotSum(1));
        
        // Test case 3: n = 100
        assertEquals(64, AliquotSum.getAliquotSum(100));
        
        // Test case 4: n = 250
        assertEquals(648, AliquotSum.getAliquotSum(250));
    }
}


No.8 generated result --------------------------


import org.junit.jupiter.api.Test;

class AliquotSumTest {
    @Test
    public void testGetAliquotSum() {
        assertEquals(1, getAliquotSum(0));
        assertEquals(-1, getAliquotSum(-1));
        assertEquals(1, getAliquotSum(1));
        assertEquals(2, getAliquotSum(2));
        assertEquals(3, getAliquotSum(3));
        assertEquals(4, getAliquotSum(4));
        assertEquals(5, getAliquotSum(5));
        assertEquals(6, getAliquotSum(6));
        assertEquals(7, getAliquotSum(7));
        assertEquals(8, getAliquotSum(8));
        assertEquals(9, getAliquotSum(9));
    }
}


No.9 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        int expectedSum = 100; // Expected aliquot sum of 100 is 100
        assertEquals(expectedSum, AliquotSum.getAliquotSum(100));

        expectedSum = 55; // Expected aliquot sum of 12 is 6 + 4 + 3 + 2 + 1 = 16
        assertEquals(expectedSum, AliquotSum.getAliquotSum(12));

        expectedSum = -1; // Expected aliquot sum of 0 is -1 because 0 is not a positive integer
        assertEquals(expectedSum, AliquotSum.getAliquotSum(0));
    }
}


No.10 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        assertEquals(100, AliquotSum.getAliquotSum(25));
    }
}


