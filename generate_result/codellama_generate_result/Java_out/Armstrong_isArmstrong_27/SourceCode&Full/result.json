{
    "project_name": "Java",
    "file_name": "Armstrong.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/Armstrong.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Checks whether a given number is an Armstrong number or not.\n     *\n     * @param number the number to check\n     * @return {@code true} if the given number is an Armstrong number, {@code false} otherwise\n     */",
    "source_code": "\npublic boolean isArmstrong(int number) {\n    long sum = 0;\n    String temp = Integer.toString(number); // Convert the given number to a string\n    int power = temp.length(); // Extract the length of the number (number of digits)\n    long originalNumber = number;\n\n    while (originalNumber > 0) {\n        long digit = originalNumber % 10;\n        sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.\n        originalNumber /= 10;\n    }\n\n    return sum == number;\n}\n",
    "class_name": "Armstrong",
    "method_name": "isArmstrong",
    "arguments": [
        "int number"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        int number = 153; // 1^3 + 5^3 + 3^3 = 153\n        assertTrue(new Armstrong().isArmstrong(number));\n        \n        number = 105; // 1^2 + 0^2 + 5^2 != 105\n        assertFalse(new Armstrong().isArmstrong(number));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        // Test with a valid input\n        assertTrue(new Armstrong().isArmstrong(153)); // 1^3 + 5^3 + 3^3 = 153\n        \n        // Test with an invalid input\n        assertFalse(new Armstrong().isArmstrong(-1)); // Negative numbers are not valid\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        // Test 1:\n        int number = 370;\n        assertTrue(new Armstrong().isArmstrong(number));\n\n        // Test 2:\n        number = 1634;\n        assertTrue(new Armstrong().isArmstrong(number));\n\n        // Test 3:\n        number = 153;\n        assertFalse(new Armstrong().isArmstrong(number));\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n\n        assertTrue(armstrong.isArmstrong(370)); // 3^3 + 7^3 + 0^3 = 370\n        assertTrue(armstrong.isArmstrong(1634)); // 1^4 + 6^4 + 3^4 + 4^4 = 1634\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    private final Armstrong armstrong = new Armstrong();\n\n    @Test\n    public void isArmstrongTest() {\n        assertTrue(armstrong.isArmstrong(370)); // 3^3 + 7^3 + 0^3 = 370\n        assertFalse(armstrong.isArmstrong(1634)); // 1^4 + 6^4 + 3^4 + 4^4 != 1634\n    }\n}\n",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        assertTrue(new Armstrong().isArmstrong(153)); // 1^3 + 5^3 + 3^3 = 153, so this should return true.\n        assertFalse(new Armstrong().isArmstrong(240)); // 2^3 + 4^3 + 0^3 != 240, so this should return false.\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        // Test 1: 370 should be an Armstrong number because 3^3 + 7^3 + 0^3 = 370\n        assertTrue(new Armstrong().isArmstrong(370));\n\n        // Test 2: 1634 should be an Armstrong number because 1^4 + 6^4 + 3^4 + 4^4 = 1634\n        assertTrue(new Armstrong().isArmstrong(1634));\n\n        // Test 3: -153 should not be an Armstrong number because it has a negative sign\n        assertFalse(new Armstrong().isArmstrong(-153));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        // Test 1: Positive Armstrong number (370)\n        int number = 370;\n        boolean expectedResult = true;\n        assertEquals(expectedResult, new Armstrong().isArmstrong(number));\n\n        // Test 2: Negative Armstrong number (-370)\n        number = -370;\n        expectedResult = false;\n        assertEquals(expectedResult, new Armstrong().isArmstrong(number));\n\n        // Test 3: Non-Armstrong number (1634)\n        number = 1634;\n        expectedResult = false;\n        assertEquals(expectedResult, new Armstrong().isArmstrong(number));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        // Create an instance of the Armstrong class\n        Armstrong arm = new Armstrong();\n        \n        // Test for a positive Armstrong number\n        assertTrue(arm.isArmstrong(370));\n        \n        // Test for a negative Armstrong number\n        assertFalse(arm.isArmstrong(-1634));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        int[] armstrongNumbers = {370, 1634}; // These are two examples of Armstrong numbers\n        for (int number : armstrongNumbers) {\n            assertTrue(new Armstrong().isArmstrong(number), \"Number \" + number + \" is not an Armstrong number\");\n        }\n    }\n}"
    ]
}