Source code: 


public boolean isArmstrong(int number) {
    long sum = 0;
    String temp = Integer.toString(number); // Convert the given number to a string
    int power = temp.length(); // Extract the length of the number (number of digits)
    long originalNumber = number;

    while (originalNumber > 0) {
        long digit = originalNumber % 10;
        sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.
        originalNumber /= 10;
    }

    return sum == number;
}



No.1 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        int number = 153; // 1^3 + 5^3 + 3^3 = 153
        assertTrue(new Armstrong().isArmstrong(number));
        
        number = 105; // 1^2 + 0^2 + 5^2 != 105
        assertFalse(new Armstrong().isArmstrong(number));
    }
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        // Test with a valid input
        assertTrue(new Armstrong().isArmstrong(153)); // 1^3 + 5^3 + 3^3 = 153
        
        // Test with an invalid input
        assertFalse(new Armstrong().isArmstrong(-1)); // Negative numbers are not valid
    }
}


No.3 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        // Test 1:
        int number = 370;
        assertTrue(new Armstrong().isArmstrong(number));

        // Test 2:
        number = 1634;
        assertTrue(new Armstrong().isArmstrong(number));

        // Test 3:
        number = 153;
        assertFalse(new Armstrong().isArmstrong(number));
    }
}


No.4 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        Armstrong armstrong = new Armstrong();

        assertTrue(armstrong.isArmstrong(370)); // 3^3 + 7^3 + 0^3 = 370
        assertTrue(armstrong.isArmstrong(1634)); // 1^4 + 6^4 + 3^4 + 4^4 = 1634
    }
}


No.5 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    private final Armstrong armstrong = new Armstrong();

    @Test
    public void isArmstrongTest() {
        assertTrue(armstrong.isArmstrong(370)); // 3^3 + 7^3 + 0^3 = 370
        assertFalse(armstrong.isArmstrong(1634)); // 1^4 + 6^4 + 3^4 + 4^4 != 1634
    }
}



No.6 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        assertTrue(new Armstrong().isArmstrong(153)); // 1^3 + 5^3 + 3^3 = 153, so this should return true.
        assertFalse(new Armstrong().isArmstrong(240)); // 2^3 + 4^3 + 0^3 != 240, so this should return false.
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        // Test 1: 370 should be an Armstrong number because 3^3 + 7^3 + 0^3 = 370
        assertTrue(new Armstrong().isArmstrong(370));

        // Test 2: 1634 should be an Armstrong number because 1^4 + 6^4 + 3^4 + 4^4 = 1634
        assertTrue(new Armstrong().isArmstrong(1634));

        // Test 3: -153 should not be an Armstrong number because it has a negative sign
        assertFalse(new Armstrong().isArmstrong(-153));
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        // Test 1: Positive Armstrong number (370)
        int number = 370;
        boolean expectedResult = true;
        assertEquals(expectedResult, new Armstrong().isArmstrong(number));

        // Test 2: Negative Armstrong number (-370)
        number = -370;
        expectedResult = false;
        assertEquals(expectedResult, new Armstrong().isArmstrong(number));

        // Test 3: Non-Armstrong number (1634)
        number = 1634;
        expectedResult = false;
        assertEquals(expectedResult, new Armstrong().isArmstrong(number));
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        // Create an instance of the Armstrong class
        Armstrong arm = new Armstrong();
        
        // Test for a positive Armstrong number
        assertTrue(arm.isArmstrong(370));
        
        // Test for a negative Armstrong number
        assertFalse(arm.isArmstrong(-1634));
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        int[] armstrongNumbers = {370, 1634}; // These are two examples of Armstrong numbers
        for (int number : armstrongNumbers) {
            assertTrue(new Armstrong().isArmstrong(number), "Number " + number + " is not an Armstrong number");
        }
    }
}


