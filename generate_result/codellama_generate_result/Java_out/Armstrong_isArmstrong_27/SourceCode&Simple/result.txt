Source code: 


public boolean isArmstrong(int number) {
    long sum = 0;
    String temp = Integer.toString(number); // Convert the given number to a string
    int power = temp.length(); // Extract the length of the number (number of digits)
    long originalNumber = number;

    while (originalNumber > 0) {
        long digit = originalNumber % 10;
        sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.
        originalNumber /= 10;
    }

    return sum == number;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        // Test 1: Verify that 0 is not an Armstrong number
        assertFalse(new Armstrong().isArmstrong(0));

        // Test 2: Verify that 1 is not an Armstrong number
        assertFalse(new Armstrong().isArmstrong(1));

        // Test 3: Verify that 2 is not an Armstrong number
        assertFalse(new Armstrong().isArmstrong(2));

        // Test 4: Verify that 3 is not an Armstrong number
        assertFalse(new Armstrong().isArmstrong(3));

        // Test 5: Verify that 153 is an Armstrong number
        assertTrue(new Armstrong().isArmstrong(153));
    }
}


No.2 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        Armstrong armstrong = new Armstrong();
        assertTrue(armstrong.isArmstrong(153)); // 1^3 + 5^3 + 3^3 = 153
        assertFalse(armstrong.isArmstrong(246)); // 2^3 + 4^3 + 6^3 = 245, not equal to the given number
    }
}



No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        Armstrong armstrong = new Armstrong();
        assertTrue(armstrong.isArmstrong(1));
        assertFalse(armstrong.isArmstrong(200));
        assertTrue(armstrong.isArmstrong(370));
    }
}


No.4 generated result --------------------------


public boolean isArmstrong(int number) {
    long sum = 0;
    String temp = Integer.toString(number); // Convert the given number to a string
    int power = temp.length(); // Extract the length of the number (number of digits)
    long originalNumber = number;

    while (originalNumber > 0) {
        long digit = originalNumber % 10;
        sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.
        originalNumber /= 10;
    }

    return sum == number;
}



No.5 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        Armstrong arm = new Armstrong();
        
        // Test for a positive number that is not an Armstrong number
        assertFalse(arm.isArmstrong(123));
        
        // Test for a negative number that is not an Armstrong number
        assertFalse(arm.isArmstrong(-456));
        
        // Test for a zero
        assertTrue(arm.isArmstrong(0));
        
        // Test for a positive number that is an Armstrong number
        assertTrue(arm.isArmstrong(153));
    }
}



No.6 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        // Test 1: check if the number 0 is an Armstrong number
        assertTrue(new Armstrong().isArmstrong(0));

        // Test 2: check if the number 153 is an Armstrong number
        assertTrue(new Armstrong().isArmstrong(153));

        // Test 3: check if the number 1634 is an Armstrong number
        assertFalse(new Armstrong().isArmstrong(1634));
    }
}



No.7 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        // Test case 1:
        assertTrue(new Armstrong().isArmstrong(1));

        // Test case 2:
        assertTrue(new Armstrong().isArmstrong(91));

        // Test case 3:
        assertFalse(new Armstrong().isArmstrong(555));
    }
}


No.8 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        Armstrong arm = new Armstrong();
        
        assertTrue(arm.isArmstrong(153)); // 1^3 + 5^3 + 3^3 = 153
        assertFalse(arm.isArmstrong(100)); // 1^3 + 0^3 + 0^3 = 0, not equal to the input
    }
}


No.9 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        // Create a new instance of the Armstrong class
        Armstrong arm = new Armstrong();
        
        // Test case 1: number = 0
        assertEquals(arm.isArmstrong(0), true);
        
        // Test case 2: number = 153
        assertEquals(arm.isArmstrong(153), true);
        
        // Test case 3: number = 9
        assertEquals(arm.isArmstrong(9), false);
    }
}


No.10 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        Armstrong arm = new Armstrong();
        
        assertTrue(arm.isArmstrong(1)); // 1^3 + 0^3 + 0^3 = 1
        assertFalse(arm.isArmstrong(2)); // 2^3 + 0^3 + 0^3 = 8, not equal to 2
        assertTrue(arm.isArmstrong(3)); // 3^3 + 0^3 + 0^3 = 3
        assertFalse(arm.isArmstrong(153)); // 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153, not equal to 153
    }
}


