Source code: 


public static List<TreeSet<Integer>> combination(int n, int k) {
    if (n <= 0) {
        return null;
    }
    length = k;
    Integer[] arr = new Integer[n];
    for (int i = 1; i <= n; i++) {
        arr[i - 1] = i;
    }
    return Combination.combination(arr, length);
}



No.1 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        int n = 4;
        int k = 2;
        List<TreeSet<Integer>> actualOutput = ArrayCombination.combination(n, k);
        
        // Expected output: [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]
        List<TreeSet<Integer>> expectedOutput = new ArrayList<>();
        expectedOutput.add(new TreeSet<>(Arrays.asList(1, 2)));
        expectedOutput.add(new TreeSet<>(Arrays.asList(1, 3)));
        expectedOutput.add(new TreeSet<>(Arrays.asList(1, 4)));
        expectedOutput.add(new TreeSet<>(Arrays.asList(2, 3)));
        expectedOutput.add(new TreeSet<>(Arrays.asList(2, 4)));
        expectedOutput.add(new TreeSet<>(Arrays.asList(3, 4)));
        
        assertEquals(expectedOutput, actualOutput);
    }
}


No.2 generated result --------------------------


package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        int n = 5, k = 3;
        List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);
        assertNotNull(result);
        for (int i = 0; i < result.size(); i++) {
            TreeSet<Integer> set = result.get(i);
            assertEquals(k, set.size());
            for (Integer element : set) {
                assertTrue(element >= 1 && element <= n);
            }
        }
    }
}


No.3 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        int n = 4; // Input array length
        int k = 3; // Combination length
        List<TreeSet<Integer>> actual = ArrayCombination.combination(n, k);
        
        // Expected output:
        // [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]
        List<TreeSet<Integer>> expected = new ArrayList<>();
        TreeSet<Integer> set = new TreeSet<>();
        set.add(1);
        set.add(2);
        set.add(3);
        expected.add(set);
        set = new TreeSet<>();
        set.add(1);
        set.add(2);
        set.add(4);
        expected.add(set);
        set = new TreeSet<>();
        set.add(1);
        set.add(3);
        set.add(4);
        expected.add(set);
        set = new TreeSet<>();
        set.add(2);
        set.add(3);
        set.add(4);
        expected.add(set);
        
        assertEquals(expected, actual);
    }
}


No.4 generated result --------------------------


package com.thealgorithms.backtracking;

import java.util.*;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        int n = 5;
        int k = 3;
        List<TreeSet<Integer>> expected = new ArrayList<>();
        TreeSet<Integer> set1 = new TreeSet<>();
        set1.add(1);
        set1.add(2);
        set1.add(3);
        TreeSet<Integer> set2 = new TreeSet<>();
        set2.add(1);
        set2.add(4);
        set2.add(5);
        expected.add(set1);
        expected.add(set2);

        List<TreeSet<Integer>> actual = ArrayCombination.combination(n, k);

        assertEquals(expected, actual);
    }
}


No.5 generated result --------------------------

@Test
public void combinationTest() {
    int n = 5;
    int k = 3;
    List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);
    assertEquals(10, result.size());
    for (int i = 0; i < result.size(); i++) {
        TreeSet<Integer> set = result.get(i);
        assertEquals(k, set.size());
        int[] arr = new int[k];
        int j = 0;
        for (Integer num : set) {
            arr[j++] = num;
        }
        Arrays.sort(arr);
        if (i == 0) {
            assertArrayEquals(new int[]{1, 2, 3}, arr);
        } else if (i == 1) {
            assertArrayEquals(new int[]{1, 2, 4}, arr);
        } else if (i == 2) {
            assertArrayEquals(new int[]{1, 3, 4}, arr);
        } else if (i == 3) {
            assertArrayEquals(new int[]{2, 3, 4}, arr);
        } else if (i == 4) {
            assertArrayEquals(new int[]{1, 5, 6}, arr);
        } else if (i == 5) {
            assertArrayEquals(new int[]{2, 5, 6}, arr);
        } else if (i == 6) {
            assertArrayEquals(new int[]{3, 5, 6}, arr);
        } else if (i == 7) {
            assertArrayEquals(new int[]{4, 5, 6}, arr);
        } else if (i == 8) {
            assertArrayEquals(new int[]{1, 7, 8}, arr);
        } else if (i == 9) {
            assertArrayEquals(new int[]{2, 7, 8}, arr);
        }
    }
}


No.6 generated result --------------------------

@Test
public void combinationTest() {
    int n = 5;
    int k = 3;
    List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);
    assertEquals(10, result.size());
}


No.7 generated result --------------------------


@Test
public void combinationTest() {
    // Arrange
    int n = 5;
    int k = 3;
    List<TreeSet<Integer>> expectedCombinations = new ArrayList<>();
    expectedCombinations.add(new TreeSet<>(Arrays.asList(1, 2, 3)));
    expectedCombinations.add(new TreeSet<>(Arrays.asList(1, 2, 4)));
    expectedCombinations.add(new TreeSet<>(Arrays.asList(1, 2, 5)));
    expectedCombinations.add(new TreeSet<>(Arrays.asList(1, 3, 4)));
    expectedCombinations.add(new TreeSet<>(Arrays.asList(1, 3, 5)));
    expectedCombinations.add(new TreeSet<>(Arrays.asList(1, 4, 5)));
    expectedCombinations.add(new TreeSet<>(Arrays.asList(2, 3, 4)));
    expectedCombinations.add(new TreeSet<>(Arrays.asList(2, 3, 5)));
    expectedCombinations.add(new TreeSet<>(Arrays.asList(2, 4, 5)));
    expectedCombinations.add(new TreeSet<>(Arrays.asList(3, 4, 5)));
    
    // Act
    List<TreeSet<Integer>> actualCombinations = ArrayCombination.combination(n, k);
    
    // Assert
    assertEquals(expectedCombinations, actualCombinations);
}


No.8 generated result --------------------------


package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        // Test case 1: n = 0, k = 1
        int n = 0;
        int k = 1;
        List<TreeSet<Integer>> actual = ArrayCombination.combination(n, k);
        assertEquals(actual.size(), 1); // Expected size of output list is 1
        TreeSet<Integer> expected = new TreeSet<>();
        expected.add(0);
        assertEquals(expected, actual.get(0)); // Expected output is a single-element TreeSet containing the value 0

        // Test case 2: n = 3, k = 2
        n = 3;
        k = 2;
        actual = ArrayCombination.combination(n, k);
        assertEquals(actual.size(), 6); // Expected size of output list is 6
        expected = new TreeSet<>();
        expected.add(0);
        expected.add(1);
        assertTrue(actual.contains(expected)); // Expected output contains the element [0, 1]
    }
}



No.9 generated result --------------------------


package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        int n = 3;
        int k = 2;
        List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);
        assertEquals(result.size(), 10);
        
        // Test case 1: [1,2]
        TreeSet<Integer> expected = new TreeSet<>();
        expected.add(1);
        expected.add(2);
        assertTrue(result.contains(expected));
        
        // Test case 2: [1,3]
        expected = new TreeSet<>();
        expected.add(1);
        expected.add(3);
        assertTrue(result.contains(expected));
        
        // Test case 3: [2,3]
        expected = new TreeSet<>();
        expected.add(2);
        expected.add(3);
        assertTrue(result.contains(expected));
    }
}


No.10 generated result --------------------------


package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        // Test case 1: n = 0, k = 2
        int n = 0;
        int k = 2;
        List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);
        assertNull(result);

        // Test case 2: n = 1, k = 2
        n = 1;
        k = 2;
        result = ArrayCombination.combination(n, k);
        assertEquals(1, result.size());
        TreeSet<Integer> expectedResult = new TreeSet<>();
        expectedResult.add(1);
        assertTrue(result.contains(expectedResult));

        // Test case 3: n = 2, k = 3
        n = 2;
        k = 3;
        result = ArrayCombination.combination(n, k);
        assertEquals(3, result.size());
        expectedResult = new TreeSet<>();
        expectedResult.add(1);
        expectedResult.add(2);
        assertTrue(result.contains(expectedResult));
    }
}


