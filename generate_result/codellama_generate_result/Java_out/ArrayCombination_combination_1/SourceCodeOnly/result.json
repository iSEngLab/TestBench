{
    "project_name": "Java",
    "file_name": "ArrayCombination.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/backtracking/ArrayCombination.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.backtracking",
    "docstring": "/**\n     * Find all combinations of 1..n by creating an array and using backtracking in Combination.java\n     * @param n max value of the array.\n     * @param k length of combination\n     * @return a list of all combinations of length k. If k == 0, return null.\n     */",
    "source_code": "\npublic static List<TreeSet<Integer>> combination(int n, int k) {\n    if (n <= 0) {\n        return null;\n    }\n    length = k;\n    Integer[] arr = new Integer[n];\n    for (int i = 1; i <= n; i++) {\n        arr[i - 1] = i;\n    }\n    return Combination.combination(arr, length);\n}\n",
    "class_name": "ArrayCombination",
    "method_name": "combination",
    "arguments": [
        "int n",
        "int k"
    ],
    "generate_test": [
        "\n@Test\npublic void combinationTest() {\n    int n = 5;\n    int k = 3;\n    List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);\n    assertEquals(10, result.size());\n    assertTrue(result.get(0).containsAll(Arrays.asList(1, 2, 3)));\n    assertTrue(result.get(9).containsAll(Arrays.asList(5, 6, 7)));\n}",
        "\npackage com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayCombinationTest {\n    @Test\n    public void combinationTest() {\n        int n = 4, k = 2;\n        List<TreeSet<Integer>> actualResult = ArrayCombination.combination(n, k);\n        List<TreeSet<Integer>> expectedResult = new ArrayList<>();\n        expectedResult.add(new TreeSet<>(Arrays.asList(1, 2)));\n        expectedResult.add(new TreeSet<>(Arrays.asList(1, 3)));\n        expectedResult.add(new TreeSet<>(Arrays.asList(1, 4)));\n        expectedResult.add(new TreeSet<>(Arrays.asList(2, 3)));\n        expectedResult.add(new TreeSet<>(Arrays.asList(2, 4)));\n        expectedResult.add(new TreeSet<>(Arrays.asList(3, 4)));\n        \n        assertEquals(expectedResult, actualResult);\n    }\n}",
        "\npackage com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayCombinationTest {\n    @Test\n    public void combinationTest() {\n        int n = 5, k = 3;\n        List<TreeSet<Integer>> combinations = Combination.combination(n, k);\n        assertEquals(10, combinations.size());\n        for (int i = 0; i < combinations.size(); i++) {\n            TreeSet<Integer> combination = combinations.get(i);\n            assertEquals(k, combination.size());\n            for (Integer num : combination) {\n                assertTrue(num >= 1 && num <= n);\n            }\n        }\n    }\n}",
        "@Test\npublic void combinationTest() {\n    int n = 5; // number of elements in the array\n    int k = 3; // length of each subarray\n    List<TreeSet<Integer>> combinations = Combination.combination(n, k);\n    assertEquals(combinations.size(), 10);\n    for (TreeSet<Integer> combination : combinations) {\n        assertEquals(combination.size(), k);\n    }\n}",
        "\npublic class ArrayCombinationTest {\n    @Test\n    public void combinationTest() {\n        int n = 5;\n        int k = 3;\n        List<TreeSet<Integer>> combinations = Combination.combination(n, k);\n        assertEquals(10, combinations.size());\n        for (int i = 0; i < 10; i++) {\n            TreeSet<Integer> combination = combinations.get(i);\n            assertTrue(combination.contains(1));\n            assertTrue(combination.contains(2));\n            assertTrue(combination.contains(3));\n        }\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayCombinationTest extends junit.framework.TestCase {\n    @Test\n    public void combinationTest() {\n        int n = 5;\n        int k = 3;\n        List<TreeSet<Integer>> expectedOutput = new ArrayList<>();\n        TreeSet<Integer> set1 = new TreeSet<>();\n        set1.add(1);\n        set1.add(2);\n        set1.add(3);\n        expectedOutput.add(set1);\n        TreeSet<Integer> set2 = new TreeSet<>();\n        set2.add(1);\n        set2.add(4);\n        set2.add(5);\n        expectedOutput.add(set2);\n        assertEquals(ArrayCombinationTest.combination(n, k), expectedOutput);\n    }\n}",
        "\npackage com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayCombinationTest {\n    @Test\n    public void combinationTest() {\n        int n = 4, k = 2;\n        List<TreeSet<Integer>> actual = ArrayCombination.combination(n, k);\n        List<TreeSet<Integer>> expected = new ArrayList<>();\n        TreeSet<Integer> set1 = new TreeSet<>();\n        set1.add(1);\n        set1.add(2);\n        TreeSet<Integer> set2 = new TreeSet<>();\n        set2.add(3);\n        set2.add(4);\n        expected.add(set1);\n        expected.add(set2);\n        \n        assertEquals(expected, actual);\n    }\n}",
        "\npackage com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayCombinationTest {\n    @Test\n    public void combinationTest() {\n        int n = 3, k = 2;\n        List<TreeSet<Integer>> expectedResult = new ArrayList<>();\n        TreeSet<Integer> set1 = new TreeSet<>();\n        set1.add(1);\n        set1.add(2);\n        TreeSet<Integer> set2 = new TreeSet<>();\n        set2.add(1);\n        set2.add(3);\n        TreeSet<Integer> set3 = new TreeSet<>();\n        set3.add(2);\n        set3.add(3);\n        expectedResult.add(set1);\n        expectedResult.add(set2);\n        expectedResult.add(set3);\n        List<TreeSet<Integer>> actualResult = ArrayCombination.combination(n, k);\n        assertEquals(expectedResult, actualResult);\n    }\n}",
        "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayCombinationTest {\n    @Test\n    public void combinationTest() {\n        int n = 5, k = 3;\n        List<TreeSet<Integer>> combinations = Combination.combination(n, k);\n        assertEquals(10, combinations.size());\n        for (int i = 0; i < combinations.size(); i++) {\n            TreeSet<Integer> combination = combinations.get(i);\n            assertEquals(3, combination.size());\n            for (int j = 0; j < combination.size(); j++) {\n                int value = combination.toArray()[j];\n                assertTrue((value >= 1) && (value <= n));\n            }\n        }\n    }\n}",
        "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayCombinationTest {\n    @Test\n    public void combinationTest() {\n        int n = 5; // number of elements in the array\n        int k = 3; // length of each subarray\n        \n        List<TreeSet<Integer>> expectedOutput = new ArrayList<>();\n        expectedOutput.add(new TreeSet<>(Arrays.asList(1, 2, 3)));\n        expectedOutput.add(new TreeSet<>(Arrays.asList(1, 2, 4)));\n        expectedOutput.add(new TreeSet<>(Arrays.asList(1, 2, 5)));\n        expectedOutput.add(new TreeSet<>(Arrays.asList(1, 3, 4)));\n        expectedOutput.add(new TreeSet<>(Arrays.asList(1, 3, 5)));\n        expectedOutput.add(new TreeSet<>(Arrays.asList(1, 4, 5)));\n        expectedOutput.add(new TreeSet<>(Arrays.asList(2, 3, 4)));\n        expectedOutput.add(new TreeSet<>(Arrays.asList(2, 3, 5)));\n        expectedOutput.add(new TreeSet<>(Arrays.asList(2, 4, 5)));\n        expectedOutput.add(new TreeSet<>(Arrays.asList(3, 4, 5)));\n        \n        List<TreeSet<Integer>> actualOutput = ArrayCombination.combination(n, k);\n        \n        assertEquals(expectedOutput, actualOutput);\n    }\n}"
    ]
}