Source code: 


public static List<TreeSet<Integer>> combination(int n, int k) {
    if (n <= 0) {
        return null;
    }
    length = k;
    Integer[] arr = new Integer[n];
    for (int i = 1; i <= n; i++) {
        arr[i - 1] = i;
    }
    return Combination.combination(arr, length);
}



No.1 generated result --------------------------


@Test
public void combinationTest() {
    int n = 5;
    int k = 3;
    List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);
    assertEquals(10, result.size());
    assertTrue(result.get(0).containsAll(Arrays.asList(1, 2, 3)));
    assertTrue(result.get(9).containsAll(Arrays.asList(5, 6, 7)));
}


No.2 generated result --------------------------


package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        int n = 4, k = 2;
        List<TreeSet<Integer>> actualResult = ArrayCombination.combination(n, k);
        List<TreeSet<Integer>> expectedResult = new ArrayList<>();
        expectedResult.add(new TreeSet<>(Arrays.asList(1, 2)));
        expectedResult.add(new TreeSet<>(Arrays.asList(1, 3)));
        expectedResult.add(new TreeSet<>(Arrays.asList(1, 4)));
        expectedResult.add(new TreeSet<>(Arrays.asList(2, 3)));
        expectedResult.add(new TreeSet<>(Arrays.asList(2, 4)));
        expectedResult.add(new TreeSet<>(Arrays.asList(3, 4)));
        
        assertEquals(expectedResult, actualResult);
    }
}


No.3 generated result --------------------------


package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        int n = 5, k = 3;
        List<TreeSet<Integer>> combinations = Combination.combination(n, k);
        assertEquals(10, combinations.size());
        for (int i = 0; i < combinations.size(); i++) {
            TreeSet<Integer> combination = combinations.get(i);
            assertEquals(k, combination.size());
            for (Integer num : combination) {
                assertTrue(num >= 1 && num <= n);
            }
        }
    }
}


No.4 generated result --------------------------

@Test
public void combinationTest() {
    int n = 5; // number of elements in the array
    int k = 3; // length of each subarray
    List<TreeSet<Integer>> combinations = Combination.combination(n, k);
    assertEquals(combinations.size(), 10);
    for (TreeSet<Integer> combination : combinations) {
        assertEquals(combination.size(), k);
    }
}


No.5 generated result --------------------------


public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        int n = 5;
        int k = 3;
        List<TreeSet<Integer>> combinations = Combination.combination(n, k);
        assertEquals(10, combinations.size());
        for (int i = 0; i < 10; i++) {
            TreeSet<Integer> combination = combinations.get(i);
            assertTrue(combination.contains(1));
            assertTrue(combination.contains(2));
            assertTrue(combination.contains(3));
        }
    }
}


No.6 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest extends junit.framework.TestCase {
    @Test
    public void combinationTest() {
        int n = 5;
        int k = 3;
        List<TreeSet<Integer>> expectedOutput = new ArrayList<>();
        TreeSet<Integer> set1 = new TreeSet<>();
        set1.add(1);
        set1.add(2);
        set1.add(3);
        expectedOutput.add(set1);
        TreeSet<Integer> set2 = new TreeSet<>();
        set2.add(1);
        set2.add(4);
        set2.add(5);
        expectedOutput.add(set2);
        assertEquals(ArrayCombinationTest.combination(n, k), expectedOutput);
    }
}


No.7 generated result --------------------------


package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        int n = 4, k = 2;
        List<TreeSet<Integer>> actual = ArrayCombination.combination(n, k);
        List<TreeSet<Integer>> expected = new ArrayList<>();
        TreeSet<Integer> set1 = new TreeSet<>();
        set1.add(1);
        set1.add(2);
        TreeSet<Integer> set2 = new TreeSet<>();
        set2.add(3);
        set2.add(4);
        expected.add(set1);
        expected.add(set2);
        
        assertEquals(expected, actual);
    }
}


No.8 generated result --------------------------


package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        int n = 3, k = 2;
        List<TreeSet<Integer>> expectedResult = new ArrayList<>();
        TreeSet<Integer> set1 = new TreeSet<>();
        set1.add(1);
        set1.add(2);
        TreeSet<Integer> set2 = new TreeSet<>();
        set2.add(1);
        set2.add(3);
        TreeSet<Integer> set3 = new TreeSet<>();
        set3.add(2);
        set3.add(3);
        expectedResult.add(set1);
        expectedResult.add(set2);
        expectedResult.add(set3);
        List<TreeSet<Integer>> actualResult = ArrayCombination.combination(n, k);
        assertEquals(expectedResult, actualResult);
    }
}


No.9 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        int n = 5, k = 3;
        List<TreeSet<Integer>> combinations = Combination.combination(n, k);
        assertEquals(10, combinations.size());
        for (int i = 0; i < combinations.size(); i++) {
            TreeSet<Integer> combination = combinations.get(i);
            assertEquals(3, combination.size());
            for (int j = 0; j < combination.size(); j++) {
                int value = combination.toArray()[j];
                assertTrue((value >= 1) && (value <= n));
            }
        }
    }
}


No.10 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        int n = 5; // number of elements in the array
        int k = 3; // length of each subarray
        
        List<TreeSet<Integer>> expectedOutput = new ArrayList<>();
        expectedOutput.add(new TreeSet<>(Arrays.asList(1, 2, 3)));
        expectedOutput.add(new TreeSet<>(Arrays.asList(1, 2, 4)));
        expectedOutput.add(new TreeSet<>(Arrays.asList(1, 2, 5)));
        expectedOutput.add(new TreeSet<>(Arrays.asList(1, 3, 4)));
        expectedOutput.add(new TreeSet<>(Arrays.asList(1, 3, 5)));
        expectedOutput.add(new TreeSet<>(Arrays.asList(1, 4, 5)));
        expectedOutput.add(new TreeSet<>(Arrays.asList(2, 3, 4)));
        expectedOutput.add(new TreeSet<>(Arrays.asList(2, 3, 5)));
        expectedOutput.add(new TreeSet<>(Arrays.asList(2, 4, 5)));
        expectedOutput.add(new TreeSet<>(Arrays.asList(3, 4, 5)));
        
        List<TreeSet<Integer>> actualOutput = ArrayCombination.combination(n, k);
        
        assertEquals(expectedOutput, actualOutput);
    }
}


