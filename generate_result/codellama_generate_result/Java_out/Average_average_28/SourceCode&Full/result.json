{
    "project_name": "Java",
    "file_name": "Average.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/Average.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * find average value of an int array\n     *\n     * @param numbers the array contains element and the sum does not excess long\n     *                value limit\n     * @return average value\n     */",
    "source_code": "\npublic static int average(int[] numbers) {\n    if (numbers == null || numbers.length == 0) {\n        throw new IllegalArgumentException(\"Numbers array cannot be empty or null\");\n    }\n    long sum = 0;\n    for (int number : numbers) {\n        sum += number;\n    }\n    return (int) (sum / numbers.length);\n}\n",
    "class_name": "Average",
    "method_name": "average",
    "arguments": [
        "int[] numbers"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = {1, 2, 3};\n        assertEquals(2, Average.average(numbers));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        // Test with int array\n        int[] numbers = {1, 2, 3, 4};\n        assertEquals(2.5, Average.average(numbers));\n        \n        // Test with double array\n        double[] doubles = {1.0, 2.0, 3.0, 4.0};\n        assertEquals(2.5, Average.average(doubles));\n    }\n}",
        "The code you provided is a Java class called `Average` that contains two methods for calculating the average of an array of numbers. The first method, `average(double[] numbers)`, calculates the average of an array of double values and returns a double value. The second method, `average(int[] numbers)`, calculates the average of an array of integer values and returns an integer value.\n\nThe unit test you provided is for the `Average` class and has been partially completed. You need to fill in the <FILL> tag with the appropriate code to complete the test case.\n\nHere's a hint: you can use JUnit's `assertEquals()` method to compare two values and make sure they are equal. You will also need to use JUnit's `@Test` annotation to mark the method as a test case.\n\nOnce you have completed the test case, you can run it using JUnit by right-clicking on the file in Eclipse and selecting \"Run As\" > \"JUnit Test\". This will execute the test case and give you the results of your assertions.",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        // Test the case when numbers array is null or empty\n        assertThrows(IllegalArgumentException.class, () -> Average.average((int[]) null));\n        assertThrows(IllegalArgumentException.class, () -> Average.average(new int[0]));\n        \n        // Test the case when numbers array is not empty and sum of elements does not exceed long value limit\n        int[] numbers = {1, 2, 3};\n        assertEquals(Average.average(numbers), 2);\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = new int[] {1, 2, 3};\n        assertEquals(2, Average.average(numbers));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = new int[] {1, 2, 3};\n        assertEquals(2, Average.average(numbers));\n        \n        int[] negativeNumbers = new int[] {-1, -2, -3};\n        assertEquals(-2, Average.average(negativeNumbers));\n    }\n}",
        "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = new int[0];\n        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers));\n        \n        numbers = new int[] {1, 2, 3};\n        assertEquals(2, Average.average(numbers));\n        \n        numbers = new int[] {-10, 5, -2};\n        assertEquals(-4, Average.average(numbers));\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        // Test case 1: null or empty array\n        int[] numbers = null;\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(numbers);\n        });\n\n        numbers = new int[0];\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(numbers);\n        });\n\n        // Test case 2: array with one element\n        numbers = new int[] {1};\n        assertEquals(1, Average.average(numbers));\n\n        // Test case 3: array with multiple elements\n        numbers = new int[] {1, 2, 3, 4, 5};\n        assertEquals(3, Average.average(numbers));\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = new int[3];\n        numbers[0] = 1;\n        numbers[1] = 2;\n        numbers[2] = 3;\n        assertEquals(Average.average(numbers), 2);\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        // Test case 1: Empty array\n        int[] numbers = new int[0];\n        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers));\n\n        // Test case 2: Single element array\n        numbers = new int[]{1};\n        assertEquals(1, Average.average(numbers));\n\n        // Test case 3: Multiple elements array\n        numbers = new int[]{1, 2, 3};\n        assertEquals(2, Average.average(numbers));\n    }\n}"
    ]
}