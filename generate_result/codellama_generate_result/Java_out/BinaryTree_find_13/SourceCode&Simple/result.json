{
    "project_name": "Java",
    "file_name": "BinaryTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/BinaryTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": "/**\n     * Method to find a Node with a certain value\n     *\n     * @param key Value being looked for\n     * @return The node if it finds it, otherwise returns the parent\n     */",
    "source_code": "\npublic Node find(int key) {\n    Node current = root;\n    while (current != null) {\n        if (key < current.data) {\n            if (current.left == null) {\n                return current; // The key isn't exist, returns the parent\n            }\n            current = current.left;\n        } else if (key > current.data) {\n            if (current.right == null) {\n                return current;\n            }\n            current = current.right;\n        } else { // If you find the value return it\n            return current;\n        }\n    }\n    return null;\n}\n",
    "class_name": "BinaryTree",
    "method_name": "find",
    "arguments": [
        "int key"
    ],
    "generate_test": [
        "@Test\npublic void findTest() {\n    // Create a new instance of BinaryTree\n    BinaryTree tree = new BinaryTree();\n    \n    // Add some nodes to the tree\n    tree.root = new Node(10);\n    tree.root.left = new Node(5);\n    tree.root.right = new Node(20);\n    tree.root.left.left = new Node(3);\n    tree.root.left.right = new Node(7);\n    tree.root.right.left = new Node(15);\n    tree.root.right.right = new Node(30);\n    \n    // Test that the find method returns the correct node for each key\n    assertEquals(tree.find(5), tree.root.left);\n    assertEquals(tree.find(7), tree.root.left.right);\n    assertEquals(tree.find(30), tree.root.right.right);\n    \n    // Test that the find method returns null if the key is not found\n    assertNull(tree.find(4));\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        // Create a new binary tree with a single node\n        BinaryTree bt = new BinaryTree(new Node(1));\n        \n        // Test the case where the key is not in the tree\n        assertEquals(null, bt.find(2));\n        \n        // Add more nodes to the tree and test find() again\n        bt.put(2);\n        bt.put(3);\n        bt.put(4);\n        assertEquals(new Node(1), bt.find(1));\n        assertEquals(new Node(2), bt.find(2));\n        assertEquals(new Node(3), bt.find(3));\n        assertEquals(new Node(4), bt.find(4));\n    }\n}",
        "\n@Test\npublic void findTest() {\n    // Create a binary tree with the following structure:\n    //        5\n    //      /   \\\n    //    3      8\n    //  /  \\   /  \\\n    // 1    4 6    9\n    BinaryTree tree = new BinaryTree(new Node(5, null, null));\n    tree.put(3);\n    tree.put(8);\n    tree.put(1);\n    tree.put(4);\n    tree.put(6);\n    tree.put(9);\n    \n    // Test finding a value that exists in the tree\n    int key = 4;\n    Node foundNode = tree.find(key);\n    assertEquals(foundNode.data, key);\n    \n    // Test finding a value that does not exist in the tree\n    key = 10;\n    foundNode = tree.find(key);\n    assertNull(foundNode);\n}",
        "@Test\npublic void findTest() {\n    BinaryTree<Integer> binaryTree = new BinaryTree<>();\n    Node root = new Node(1);\n    Node leftChild = new Node(2);\n    Node rightChild = new Node(3);\n    Node foundNode = new Node(4);\n    Node notFoundNode = new Node(5);\n    \n    binaryTree.root = root;\n    root.left = leftChild;\n    root.right = rightChild;\n    root.parent = null;\n    leftChild.left = null;\n    leftChild.right = foundNode;\n    leftChild.parent = root;\n    rightChild.left = notFoundNode;\n    rightChild.right = null;\n    rightChild.parent = root;\n    \n    // Test that the method returns the correct node when it exists in the tree\n    assertEquals(foundNode, binaryTree.find(4));\n    \n    // Test that the method returns null when the key is not found in the tree\n    assertNull(binaryTree.find(5));\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        // create a new binary tree instance\n        BinaryTree binaryTree = new BinaryTree();\n        \n        // add some nodes to the tree\n        binaryTree.put(10);\n        binaryTree.put(5);\n        binaryTree.put(3);\n        binaryTree.put(8);\n        binaryTree.put(12);\n        \n        // test finding a node in the tree\n        Node found = binaryTree.find(8);\n        assertEquals(found.data, 8);\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        Node root = new Node(5);\n        root.left = new Node(2);\n        root.right = new Node(9);\n        root.left.left = new Node(1);\n        root.left.right = new Node(3);\n        root.right.left = new Node(6);\n        root.right.right = new Node(7);\n\n        BinaryTree tree = new BinaryTree(root);\n\n        assertEquals(root, tree.find(5));\n        assertEquals(null, tree.find(-1));\n        assertEquals(root.left, tree.find(2));\n        assertEquals(root.right, tree.find(9));\n        assertEquals(root.left.left, tree.find(1));\n        assertEquals(root.left.right, tree.find(3));\n        assertEquals(root.right.left, tree.find(6));\n        assertEquals(root.right.right, tree.find(7));\n    }\n}",
        "@Test\npublic void findTest() {\n    // Create a sample binary tree with the following structure:\n    //      4\n    //     / \\\n    //    2   6\n    //   / \\   \\\n    //  1   3   5\n    BinaryTree bt = new BinaryTree();\n    Node root = new Node(4);\n    root.left = new Node(2);\n    root.right = new Node(6);\n    root.left.left = new Node(1);\n    root.left.right = new Node(3);\n    root.right.right = new Node(5);\n    bt.root = root;\n    \n    // Test case 1: Find a key that exists in the tree\n    int key = 4;\n    assertEquals(bt.find(key), root);\n    \n    // Test case 2: Find a key that does not exist in the tree but has children\n    key = 3;\n    Node expectedResult = new Node(1);\n    assertEquals(bt.find(key), expectedResult);\n    \n    // Test case 3: Find a key that is a leaf node with no children\n    key = 5;\n    assertNull(bt.find(key));\n}",
        "package com.thealgorithms.datastructures.trees;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        // Set up the test data\n        BinaryTree tree = new BinaryTree();\n        Node root = tree.getRoot();\n        if (root == null) {\n            return; // The tree is empty, there's nothing to find\n        }\n        int key = 5;\n        Node node = tree.find(key);\n        assertEquals(node.data, key);\n    }\n}",
        "import org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        // Test that the method correctly finds a node when the key is present in the tree\n        BinaryTree tree = new BinaryTree();\n        Node root = new Node(5);\n        Node leftChild = new Node(3);\n        Node rightChild = new Node(10);\n        root.left = leftChild;\n        root.right = rightChild;\n        tree.root = root;\n        assertEquals(tree.find(5), root);\n        assertEquals(tree.find(3), leftChild);\n        assertEquals(tree.find(10), rightChild);\n        \n        // Test that the method correctly returns null when the key is not present in the tree\n        assertNull(tree.find(1));\n        assertNull(tree.find(9));\n        \n        // Test that the method correctly handles cases where the root node has no children\n        Node newRoot = new Node(2);\n        tree.root = newRoot;\n        assertEquals(tree.find(2), newRoot);\n        \n        // Test that the method correctly handles cases where the root node has only one child\n        leftChild = new Node(1);\n        rightChild = null;\n        newRoot.left = leftChild;\n        tree.root = newRoot;\n        assertEquals(tree.find(1), leftChild);\n        \n        // Test that the method correctly handles cases where the tree contains multiple nodes with the same key\n        Node node1 = new Node(5);\n        Node node2 = new Node(5);\n        root.left = node1;\n        root.right = node2;\n        assertEquals(tree.find(5), root);\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        // Create a binary tree with three nodes: 5, 3, and 7\n        Node root = new Node(5);\n        root.left = new Node(3);\n        root.right = new Node(7);\n        \n        BinaryTree tree = new BinaryTree(root);\n        \n        // Test finding a key that exists in the binary tree\n        assertEquals(tree.find(5), root);\n        assertEquals(tree.find(3), root.left);\n        assertEquals(tree.find(7), root.right);\n        \n        // Test finding a key that doesn't exist in the binary tree\n        assertNull(tree.find(10));\n    }\n}"
    ]
}