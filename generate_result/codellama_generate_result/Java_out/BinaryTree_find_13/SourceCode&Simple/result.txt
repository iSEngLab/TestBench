Source code: 


public Node find(int key) {
    Node current = root;
    while (current != null) {
        if (key < current.data) {
            if (current.left == null) {
                return current; // The key isn't exist, returns the parent
            }
            current = current.left;
        } else if (key > current.data) {
            if (current.right == null) {
                return current;
            }
            current = current.right;
        } else { // If you find the value return it
            return current;
        }
    }
    return null;
}



No.1 generated result --------------------------

@Test
public void findTest() {
    // Create a new instance of BinaryTree
    BinaryTree tree = new BinaryTree();
    
    // Add some nodes to the tree
    tree.root = new Node(10);
    tree.root.left = new Node(5);
    tree.root.right = new Node(20);
    tree.root.left.left = new Node(3);
    tree.root.left.right = new Node(7);
    tree.root.right.left = new Node(15);
    tree.root.right.right = new Node(30);
    
    // Test that the find method returns the correct node for each key
    assertEquals(tree.find(5), tree.root.left);
    assertEquals(tree.find(7), tree.root.left.right);
    assertEquals(tree.find(30), tree.root.right.right);
    
    // Test that the find method returns null if the key is not found
    assertNull(tree.find(4));
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    @Test
    public void findTest() {
        // Create a new binary tree with a single node
        BinaryTree bt = new BinaryTree(new Node(1));
        
        // Test the case where the key is not in the tree
        assertEquals(null, bt.find(2));
        
        // Add more nodes to the tree and test find() again
        bt.put(2);
        bt.put(3);
        bt.put(4);
        assertEquals(new Node(1), bt.find(1));
        assertEquals(new Node(2), bt.find(2));
        assertEquals(new Node(3), bt.find(3));
        assertEquals(new Node(4), bt.find(4));
    }
}


No.3 generated result --------------------------


@Test
public void findTest() {
    // Create a binary tree with the following structure:
    //        5
    //      /   \
    //    3      8
    //  /  \   /  \
    // 1    4 6    9
    BinaryTree tree = new BinaryTree(new Node(5, null, null));
    tree.put(3);
    tree.put(8);
    tree.put(1);
    tree.put(4);
    tree.put(6);
    tree.put(9);
    
    // Test finding a value that exists in the tree
    int key = 4;
    Node foundNode = tree.find(key);
    assertEquals(foundNode.data, key);
    
    // Test finding a value that does not exist in the tree
    key = 10;
    foundNode = tree.find(key);
    assertNull(foundNode);
}


No.4 generated result --------------------------

@Test
public void findTest() {
    BinaryTree<Integer> binaryTree = new BinaryTree<>();
    Node root = new Node(1);
    Node leftChild = new Node(2);
    Node rightChild = new Node(3);
    Node foundNode = new Node(4);
    Node notFoundNode = new Node(5);
    
    binaryTree.root = root;
    root.left = leftChild;
    root.right = rightChild;
    root.parent = null;
    leftChild.left = null;
    leftChild.right = foundNode;
    leftChild.parent = root;
    rightChild.left = notFoundNode;
    rightChild.right = null;
    rightChild.parent = root;
    
    // Test that the method returns the correct node when it exists in the tree
    assertEquals(foundNode, binaryTree.find(4));
    
    // Test that the method returns null when the key is not found in the tree
    assertNull(binaryTree.find(5));
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    @Test
    public void findTest() {
        // create a new binary tree instance
        BinaryTree binaryTree = new BinaryTree();
        
        // add some nodes to the tree
        binaryTree.put(10);
        binaryTree.put(5);
        binaryTree.put(3);
        binaryTree.put(8);
        binaryTree.put(12);
        
        // test finding a node in the tree
        Node found = binaryTree.find(8);
        assertEquals(found.data, 8);
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    @Test
    public void findTest() {
        Node root = new Node(5);
        root.left = new Node(2);
        root.right = new Node(9);
        root.left.left = new Node(1);
        root.left.right = new Node(3);
        root.right.left = new Node(6);
        root.right.right = new Node(7);

        BinaryTree tree = new BinaryTree(root);

        assertEquals(root, tree.find(5));
        assertEquals(null, tree.find(-1));
        assertEquals(root.left, tree.find(2));
        assertEquals(root.right, tree.find(9));
        assertEquals(root.left.left, tree.find(1));
        assertEquals(root.left.right, tree.find(3));
        assertEquals(root.right.left, tree.find(6));
        assertEquals(root.right.right, tree.find(7));
    }
}


No.7 generated result --------------------------

@Test
public void findTest() {
    // Create a sample binary tree with the following structure:
    //      4
    //     / \
    //    2   6
    //   / \   \
    //  1   3   5
    BinaryTree bt = new BinaryTree();
    Node root = new Node(4);
    root.left = new Node(2);
    root.right = new Node(6);
    root.left.left = new Node(1);
    root.left.right = new Node(3);
    root.right.right = new Node(5);
    bt.root = root;
    
    // Test case 1: Find a key that exists in the tree
    int key = 4;
    assertEquals(bt.find(key), root);
    
    // Test case 2: Find a key that does not exist in the tree but has children
    key = 3;
    Node expectedResult = new Node(1);
    assertEquals(bt.find(key), expectedResult);
    
    // Test case 3: Find a key that is a leaf node with no children
    key = 5;
    assertNull(bt.find(key));
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.trees;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
public class BinaryTreeTest {
    @Test
    public void findTest() {
        // Set up the test data
        BinaryTree tree = new BinaryTree();
        Node root = tree.getRoot();
        if (root == null) {
            return; // The tree is empty, there's nothing to find
        }
        int key = 5;
        Node node = tree.find(key);
        assertEquals(node.data, key);
    }
}


No.9 generated result --------------------------

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    @Test
    public void findTest() {
        // Test that the method correctly finds a node when the key is present in the tree
        BinaryTree tree = new BinaryTree();
        Node root = new Node(5);
        Node leftChild = new Node(3);
        Node rightChild = new Node(10);
        root.left = leftChild;
        root.right = rightChild;
        tree.root = root;
        assertEquals(tree.find(5), root);
        assertEquals(tree.find(3), leftChild);
        assertEquals(tree.find(10), rightChild);
        
        // Test that the method correctly returns null when the key is not present in the tree
        assertNull(tree.find(1));
        assertNull(tree.find(9));
        
        // Test that the method correctly handles cases where the root node has no children
        Node newRoot = new Node(2);
        tree.root = newRoot;
        assertEquals(tree.find(2), newRoot);
        
        // Test that the method correctly handles cases where the root node has only one child
        leftChild = new Node(1);
        rightChild = null;
        newRoot.left = leftChild;
        tree.root = newRoot;
        assertEquals(tree.find(1), leftChild);
        
        // Test that the method correctly handles cases where the tree contains multiple nodes with the same key
        Node node1 = new Node(5);
        Node node2 = new Node(5);
        root.left = node1;
        root.right = node2;
        assertEquals(tree.find(5), root);
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    @Test
    public void findTest() {
        // Create a binary tree with three nodes: 5, 3, and 7
        Node root = new Node(5);
        root.left = new Node(3);
        root.right = new Node(7);
        
        BinaryTree tree = new BinaryTree(root);
        
        // Test finding a key that exists in the binary tree
        assertEquals(tree.find(5), root);
        assertEquals(tree.find(3), root.left);
        assertEquals(tree.find(7), root.right);
        
        // Test finding a key that doesn't exist in the binary tree
        assertNull(tree.find(10));
    }
}


