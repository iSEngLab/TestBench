{
    "project_name": "Java",
    "file_name": "BinaryTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/BinaryTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": "/**\n     * Method to find a Node with a certain value\n     *\n     * @param key Value being looked for\n     * @return The node if it finds it, otherwise returns the parent\n     */",
    "source_code": "\npublic Node find(int key) {\n    Node current = root;\n    while (current != null) {\n        if (key < current.data) {\n            if (current.left == null) {\n                return current; // The key isn't exist, returns the parent\n            }\n            current = current.left;\n        } else if (key > current.data) {\n            if (current.right == null) {\n                return current;\n            }\n            current = current.right;\n        } else { // If you find the value return it\n            return current;\n        }\n    }\n    return null;\n}\n",
    "class_name": "BinaryTree",
    "method_name": "find",
    "arguments": [
        "int key"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        Node root = new Node(10); // Create a tree with the root node set to 10\n        Node leftChild = new Node(5); // Set the left child of the root node to 5\n        Node rightChild = new Node(20); // Set the right child of the root node to 20\n        Node leftGrandchild = new Node(3); // Set the left grandchild of the root node to 3\n        Node rightGrandchild = new Node(15); // Set the right grandchild of the root node to 15\n        root.left = leftChild; // Link the left child to its parent (root)\n        root.right = rightChild; // Link the right child to its parent (root)\n        leftChild.left = leftGrandchild; // Link the left grandchild to its parent (leftChild)\n        leftChild.right = rightGrandchild; // Link the right grandchild to its parent (leftChild)\n\n        assertEquals(root, root.find(10)); // Test that the find method returns the correct node when searching for the key 10\n        assertEquals(leftChild, root.find(5)); // Test that the find method returns the correct node when searching for the key 5\n        assertEquals(rightChild, root.find(20)); // Test that the find method returns the correct node when searching for the key 20\n        assertEquals(leftGrandchild, root.find(3)); // Test that the find method returns the correct node when searching for the key 3\n        assertEquals(rightGrandchild, root.find(15)); // Test that the find method returns the correct node when searching for the key 15\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        // Create a binary tree with the following structure:\n        //      4\n        //     / \\\n        //    2   6\n        //   / \\\n        //  1   3\n        BinaryTree<Integer> tree = new BinaryTree<>();\n        tree.add(4);\n        tree.add(2);\n        tree.add(6);\n        tree.add(1);\n        tree.add(3);\n        \n        // Test the find method with different keys\n        assertEquals(tree.find(4), 4);\n        assertEquals(tree.find(2), 2);\n        assertEquals(tree.find(6), 6);\n        assertEquals(tree.find(1), 1);\n        assertEquals(tree.find(3), 3);\n        \n        // Test the find method with a key that doesn't exist in the tree\n        assertNull(tree.find(7));\n    }\n}",
        "    \npackage com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        // Create a binary tree with the following structure:\n        //      4\n        //     / \\\n        //    2   6\n        //   / \\   \\\n        //  1   3   5\n        BinaryTree<Integer> tree = new BinaryTree<>();\n        tree.add(4);\n        tree.add(2);\n        tree.add(1);\n        tree.add(3);\n        tree.add(6);\n        tree.add(5);\n\n        // Test the find() method with a key that exists in the tree\n        Node<Integer> foundNode = tree.find(3);\n        assertEquals(3, foundNode.data);\n\n        // Test the find() method with a key that doesn't exist in the tree\n        foundNode = tree.find(7);\n        assertNull(foundNode);\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        // Create a tree with the following structure:\n        //    5\n        //   / \\\n        //  2   8\n        //       \\\n        //        7\n        Node root = new Node(5);\n        root.left = new Node(2);\n        root.right = new Node(8);\n        root.right.right = new Node(7);\n\n        BinaryTree tree = new BinaryTree(root);\n\n        // Test finding a key that is in the tree\n        assertEquals(new Node(5), tree.find(2));\n        assertEquals(new Node(8), tree.find(7));\n\n        // Test finding a key that is not in the tree\n        assertNull(tree.find(10));\n    }\n}",
        "\n@Test\npublic void findTest() {\n    // Create a binary tree with the following structure:\n    //       4\n    //      / \\\n    //     2   6\n    //    / \\   \\\n    //   1   3   7\n    BinaryTree bt = new BinaryTree(4);\n    bt.insert(2);\n    bt.insert(6);\n    bt.insert(1);\n    bt.insert(3);\n    bt.insert(7);\n\n    // Test finding the root node (key=4)\n    Node found = bt.find(4);\n    assertEquals(found.data, 4);\n\n    // Test finding a leaf node (key=1)\n    found = bt.find(1);\n    assertEquals(found.data, 1);\n\n    // Test finding a middle node (key=3)\n    found = bt.find(3);\n    assertEquals(found.data, 3);\n\n    // Test finding a non-existent key (key=5)\n    found = bt.find(5);\n    assertNull(found);\n}",
        "\n@Test\npublic void findTest() {\n    // Arrange\n    int key = 5; // The key to be searched for\n    Node expectedNode = new Node(key); // The expected node to be returned\n\n    BinaryTree tree = new BinaryTree();\n    tree.root = new Node(10);\n    tree.root.left = new Node(5);\n    tree.root.right = new Node(20);\n\n    // Act\n    Node actualNode = tree.find(key);\n\n    // Assert\n    assertEquals(expectedNode, actualNode);\n}",
        "\npublic class BinaryTreeTest {\n    private BinarySearchTree tree;\n\n    @BeforeEach\n    public void setUp() {\n        tree = new BinarySearchTree();\n    }\n\n    @Test\n    public void findExistingValueTest() {\n        tree.insert(10);\n        tree.insert(5);\n        tree.insert(20);\n        tree.insert(30);\n        tree.insert(25);\n\n        Node node = tree.find(25);\n\n        assertNotNull(node);\n        assertEquals(25, node.data);\n    }\n\n    @Test\n    public void findNonExistingValueTest() {\n        tree.insert(10);\n        tree.insert(5);\n        tree.insert(20);\n        tree.insert(30);\n        tree.insert(25);\n\n        Node node = tree.find(40);\n\n        assertNull(node);\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        // Create a binary tree with the following structure:\n        //      10\n        //     /  \\\n        //    5   15\n        //   / \\ \n        //  3   7\n        BinaryTree<Integer> tree = new BinaryTree<>();\n        tree.insert(10);\n        tree.insert(5);\n        tree.insert(15);\n        tree.insert(3);\n        tree.insert(7);\n        \n        // Test that the find method returns the correct node for a given key\n        assertEquals(tree.find(5), 3);\n        assertEquals(tree.find(10), 15);\n        assertNull(tree.find(2));\n    }\n}",
        "\npackage com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        // Create a new binary tree with the following structure:\n        //      4\n        //     / \\\n        //    2   6\n        //   / \\   \\\n        //  1   3   5\n        BinaryTree<Integer> tree = new BinaryTree<>();\n        tree.insert(4);\n        tree.insert(2);\n        tree.insert(6);\n        tree.insert(1);\n        tree.insert(3);\n        tree.insert(5);\n\n        // Test if the find() method returns the correct node for an existing key\n        assertEquals(tree.find(4), new Node<>(4));\n        assertEquals(tree.find(2), new Node<>(2));\n        assertEquals(tree.find(6), new Node<>(6));\n        assertEquals(tree.find(1), new Node<>(1));\n        assertEquals(tree.find(3), new Node<>(3));\n        assertEquals(tree.find(5), new Node<>(5));\n\n        // Test if the find() method returns the correct node for a non-existing key\n        assertNull(tree.find(7));\n    }\n}",
        "\npackage com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        BinaryTree tree = new BinaryTree();\n        tree.insert(10);\n        tree.insert(5);\n        tree.insert(20);\n        tree.insert(8);\n        tree.insert(15);\n        tree.insert(12);\n        tree.insert(17);\n\n        assertEquals(tree.find(8), new Node(8));\n        assertEquals(tree.find(12), new Node(12));\n        assertEquals(tree.find(15), new Node(15));\n        assertEquals(tree.find(17), new Node(17));\n    }\n}"
    ]
}