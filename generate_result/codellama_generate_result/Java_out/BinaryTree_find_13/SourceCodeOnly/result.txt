Source code: 


public Node find(int key) {
    Node current = root;
    while (current != null) {
        if (key < current.data) {
            if (current.left == null) {
                return current; // The key isn't exist, returns the parent
            }
            current = current.left;
        } else if (key > current.data) {
            if (current.right == null) {
                return current;
            }
            current = current.right;
        } else { // If you find the value return it
            return current;
        }
    }
    return null;
}



No.1 generated result --------------------------


package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    @Test
    public void findTest() {
        Node root = new Node(10); // Create a tree with the root node set to 10
        Node leftChild = new Node(5); // Set the left child of the root node to 5
        Node rightChild = new Node(20); // Set the right child of the root node to 20
        Node leftGrandchild = new Node(3); // Set the left grandchild of the root node to 3
        Node rightGrandchild = new Node(15); // Set the right grandchild of the root node to 15
        root.left = leftChild; // Link the left child to its parent (root)
        root.right = rightChild; // Link the right child to its parent (root)
        leftChild.left = leftGrandchild; // Link the left grandchild to its parent (leftChild)
        leftChild.right = rightGrandchild; // Link the right grandchild to its parent (leftChild)

        assertEquals(root, root.find(10)); // Test that the find method returns the correct node when searching for the key 10
        assertEquals(leftChild, root.find(5)); // Test that the find method returns the correct node when searching for the key 5
        assertEquals(rightChild, root.find(20)); // Test that the find method returns the correct node when searching for the key 20
        assertEquals(leftGrandchild, root.find(3)); // Test that the find method returns the correct node when searching for the key 3
        assertEquals(rightGrandchild, root.find(15)); // Test that the find method returns the correct node when searching for the key 15
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    @Test
    public void findTest() {
        // Create a binary tree with the following structure:
        //      4
        //     / \
        //    2   6
        //   / \
        //  1   3
        BinaryTree<Integer> tree = new BinaryTree<>();
        tree.add(4);
        tree.add(2);
        tree.add(6);
        tree.add(1);
        tree.add(3);
        
        // Test the find method with different keys
        assertEquals(tree.find(4), 4);
        assertEquals(tree.find(2), 2);
        assertEquals(tree.find(6), 6);
        assertEquals(tree.find(1), 1);
        assertEquals(tree.find(3), 3);
        
        // Test the find method with a key that doesn't exist in the tree
        assertNull(tree.find(7));
    }
}


No.3 generated result --------------------------

    
package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    @Test
    public void findTest() {
        // Create a binary tree with the following structure:
        //      4
        //     / \
        //    2   6
        //   / \   \
        //  1   3   5
        BinaryTree<Integer> tree = new BinaryTree<>();
        tree.add(4);
        tree.add(2);
        tree.add(1);
        tree.add(3);
        tree.add(6);
        tree.add(5);

        // Test the find() method with a key that exists in the tree
        Node<Integer> foundNode = tree.find(3);
        assertEquals(3, foundNode.data);

        // Test the find() method with a key that doesn't exist in the tree
        foundNode = tree.find(7);
        assertNull(foundNode);
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    @Test
    public void findTest() {
        // Create a tree with the following structure:
        //    5
        //   / \
        //  2   8
        //       \
        //        7
        Node root = new Node(5);
        root.left = new Node(2);
        root.right = new Node(8);
        root.right.right = new Node(7);

        BinaryTree tree = new BinaryTree(root);

        // Test finding a key that is in the tree
        assertEquals(new Node(5), tree.find(2));
        assertEquals(new Node(8), tree.find(7));

        // Test finding a key that is not in the tree
        assertNull(tree.find(10));
    }
}


No.5 generated result --------------------------


@Test
public void findTest() {
    // Create a binary tree with the following structure:
    //       4
    //      / \
    //     2   6
    //    / \   \
    //   1   3   7
    BinaryTree bt = new BinaryTree(4);
    bt.insert(2);
    bt.insert(6);
    bt.insert(1);
    bt.insert(3);
    bt.insert(7);

    // Test finding the root node (key=4)
    Node found = bt.find(4);
    assertEquals(found.data, 4);

    // Test finding a leaf node (key=1)
    found = bt.find(1);
    assertEquals(found.data, 1);

    // Test finding a middle node (key=3)
    found = bt.find(3);
    assertEquals(found.data, 3);

    // Test finding a non-existent key (key=5)
    found = bt.find(5);
    assertNull(found);
}


No.6 generated result --------------------------


@Test
public void findTest() {
    // Arrange
    int key = 5; // The key to be searched for
    Node expectedNode = new Node(key); // The expected node to be returned

    BinaryTree tree = new BinaryTree();
    tree.root = new Node(10);
    tree.root.left = new Node(5);
    tree.root.right = new Node(20);

    // Act
    Node actualNode = tree.find(key);

    // Assert
    assertEquals(expectedNode, actualNode);
}


No.7 generated result --------------------------


public class BinaryTreeTest {
    private BinarySearchTree tree;

    @BeforeEach
    public void setUp() {
        tree = new BinarySearchTree();
    }

    @Test
    public void findExistingValueTest() {
        tree.insert(10);
        tree.insert(5);
        tree.insert(20);
        tree.insert(30);
        tree.insert(25);

        Node node = tree.find(25);

        assertNotNull(node);
        assertEquals(25, node.data);
    }

    @Test
    public void findNonExistingValueTest() {
        tree.insert(10);
        tree.insert(5);
        tree.insert(20);
        tree.insert(30);
        tree.insert(25);

        Node node = tree.find(40);

        assertNull(node);
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    @Test
    public void findTest() {
        // Create a binary tree with the following structure:
        //      10
        //     /  \
        //    5   15
        //   / \ 
        //  3   7
        BinaryTree<Integer> tree = new BinaryTree<>();
        tree.insert(10);
        tree.insert(5);
        tree.insert(15);
        tree.insert(3);
        tree.insert(7);
        
        // Test that the find method returns the correct node for a given key
        assertEquals(tree.find(5), 3);
        assertEquals(tree.find(10), 15);
        assertNull(tree.find(2));
    }
}


No.9 generated result --------------------------


package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    @Test
    public void findTest() {
        // Create a new binary tree with the following structure:
        //      4
        //     / \
        //    2   6
        //   / \   \
        //  1   3   5
        BinaryTree<Integer> tree = new BinaryTree<>();
        tree.insert(4);
        tree.insert(2);
        tree.insert(6);
        tree.insert(1);
        tree.insert(3);
        tree.insert(5);

        // Test if the find() method returns the correct node for an existing key
        assertEquals(tree.find(4), new Node<>(4));
        assertEquals(tree.find(2), new Node<>(2));
        assertEquals(tree.find(6), new Node<>(6));
        assertEquals(tree.find(1), new Node<>(1));
        assertEquals(tree.find(3), new Node<>(3));
        assertEquals(tree.find(5), new Node<>(5));

        // Test if the find() method returns the correct node for a non-existing key
        assertNull(tree.find(7));
    }
}


No.10 generated result --------------------------


package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    @Test
    public void findTest() {
        BinaryTree tree = new BinaryTree();
        tree.insert(10);
        tree.insert(5);
        tree.insert(20);
        tree.insert(8);
        tree.insert(15);
        tree.insert(12);
        tree.insert(17);

        assertEquals(tree.find(8), new Node(8));
        assertEquals(tree.find(12), new Node(12));
        assertEquals(tree.find(15), new Node(15));
        assertEquals(tree.find(17), new Node(17));
    }
}


