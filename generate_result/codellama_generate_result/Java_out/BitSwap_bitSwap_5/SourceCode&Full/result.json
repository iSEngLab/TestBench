{
    "project_name": "Java",
    "file_name": "BitSwap.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/bitmanipulation/BitSwap.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.bitmanipulation",
    "docstring": null,
    "source_code": "/*\n * @brief Swaps the bits at the position posA and posB from data\n */\npublic static int bitSwap(int data, final int posA, final int posB) {\n    if (SingleBitOperations.getBit(data, posA) != SingleBitOperations.getBit(data, posB)) {\n        data ^= (1 << posA) ^ (1 << posB);\n    }\n    return data;\n}\n",
    "class_name": "BitSwap",
    "method_name": "bitSwap",
    "arguments": [
        "int data",
        "int posA",
        "int posB"
    ],
    "generate_test": [
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b1010; // initial value\n        int posA = 2;      // position of first bit to swap\n        int posB = 3;      // position of second bit to swap\n        int expectedResult = 0b1100; // expected result after swapping bits at positions posA and posB\n\n        assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));\n    }\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b1100;\n        int posA = 2;\n        int posB = 3;\n        int expectedResult = 0b1110;\n\n        assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));\n    }\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 10; // binary: 1010\n        int posA = 2; // position of the first bit to be swapped (counting from 0)\n        int posB = 3; // position of the second bit to be swapped (counting from 0)\n        \n        int expectedData = 6; // binary: 1100\n        assertEquals(expectedData, BitSwap.bitSwap(data, posA, posB));\n    }\n}",
        "\npackage com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b1010; // binary representation of the integer 10 (decimal)\n        int posA = 2;\n        int posB = 3;\n        int expectedResult = 0b0110; // binary representation of the integer 6 (decimal)\n\n        assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));\n    }\n}\n",
        "\npackage com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b101010; // the initial value of data\n        int posA = 3; // the position of bit A to swap\n        int posB = 4; // the position of bit B to swap\n        \n        int result = BitSwap.bitSwap(data, posA, posB);\n        \n        assertEquals(result, 0b110110); // the expected result after swapping bits at positions posA and posB\n    }\n}\n",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b1111; // 15 in decimal\n        int posA = 2;\n        int posB = 3;\n\n        assertEquals(BitSwap.bitSwap(data, posA, posB), 0b1011);\n    }\n}",
        "\n@Test\npublic void bitSwapTest() {\n    int data = 0b1111; // data = 15 (decimal)\n    int posA = 2; // position A = 2\n    int posB = 3; // position B = 3\n    \n    int expectedResult = 0b1101; // 14 (decimal)\n    \n    int actualResult = BitSwap.bitSwap(data, posA, posB);\n    \n    assertEquals(expectedResult, actualResult);\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 10; // decimal value is 1010\n        int posA = 2;\n        int posB = 3;\n        \n        int expectedResult = 14; // decimal value is 1110\n        assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));\n    }\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 3; // initial data value: 00000011\n        int posA = 2; // position of the first bit to swap: 00000100\n        int posB = 3; // position of the second bit to swap: 00001000\n        \n        int expectedData = 12; // expected data value after swapping bits at positions 2 and 3: 00001100\n        \n        assertEquals(expectedData, BitSwap.bitSwap(data, posA, posB));\n    }\n}",
        "\npackage com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 10; // binary: 1010\n        int posA = 2; // position of the first bit to swap\n        int posB = 3; // position of the second bit to swap\n        \n        assertEquals(BitSwap.bitSwap(data, posA, posB), 6); // binary: 1101 (swapping bits at positions 2 and 3)\n    }\n}"
    ]
}