Source code: 

/*
 * @brief Swaps the bits at the position posA and posB from data
 */
public static int bitSwap(int data, final int posA, final int posB) {
    if (SingleBitOperations.getBit(data, posA) != SingleBitOperations.getBit(data, posB)) {
        data ^= (1 << posA) ^ (1 << posB);
    }
    return data;
}



No.1 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 0b1010; // initial value
        int posA = 2;      // position of first bit to swap
        int posB = 3;      // position of second bit to swap
        int expectedResult = 0b1100; // expected result after swapping bits at positions posA and posB

        assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));
    }
}


No.2 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 0b1100;
        int posA = 2;
        int posB = 3;
        int expectedResult = 0b1110;

        assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));
    }
}


No.3 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 10; // binary: 1010
        int posA = 2; // position of the first bit to be swapped (counting from 0)
        int posB = 3; // position of the second bit to be swapped (counting from 0)
        
        int expectedData = 6; // binary: 1100
        assertEquals(expectedData, BitSwap.bitSwap(data, posA, posB));
    }
}


No.4 generated result --------------------------


package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 0b1010; // binary representation of the integer 10 (decimal)
        int posA = 2;
        int posB = 3;
        int expectedResult = 0b0110; // binary representation of the integer 6 (decimal)

        assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));
    }
}



No.5 generated result --------------------------


package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 0b101010; // the initial value of data
        int posA = 3; // the position of bit A to swap
        int posB = 4; // the position of bit B to swap
        
        int result = BitSwap.bitSwap(data, posA, posB);
        
        assertEquals(result, 0b110110); // the expected result after swapping bits at positions posA and posB
    }
}



No.6 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 0b1111; // 15 in decimal
        int posA = 2;
        int posB = 3;

        assertEquals(BitSwap.bitSwap(data, posA, posB), 0b1011);
    }
}


No.7 generated result --------------------------


@Test
public void bitSwapTest() {
    int data = 0b1111; // data = 15 (decimal)
    int posA = 2; // position A = 2
    int posB = 3; // position B = 3
    
    int expectedResult = 0b1101; // 14 (decimal)
    
    int actualResult = BitSwap.bitSwap(data, posA, posB);
    
    assertEquals(expectedResult, actualResult);
}


No.8 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 10; // decimal value is 1010
        int posA = 2;
        int posB = 3;
        
        int expectedResult = 14; // decimal value is 1110
        assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));
    }
}


No.9 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 3; // initial data value: 00000011
        int posA = 2; // position of the first bit to swap: 00000100
        int posB = 3; // position of the second bit to swap: 00001000
        
        int expectedData = 12; // expected data value after swapping bits at positions 2 and 3: 00001100
        
        assertEquals(expectedData, BitSwap.bitSwap(data, posA, posB));
    }
}


No.10 generated result --------------------------


package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 10; // binary: 1010
        int posA = 2; // position of the first bit to swap
        int posB = 3; // position of the second bit to swap
        
        assertEquals(BitSwap.bitSwap(data, posA, posB), 6); // binary: 1101 (swapping bits at positions 2 and 3)
    }
}


