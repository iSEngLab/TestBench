{
    "project_name": "Java",
    "file_name": "BitSwap.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/bitmanipulation/BitSwap.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.bitmanipulation",
    "docstring": null,
    "source_code": "/*\n * @brief Swaps the bits at the position posA and posB from data\n */\npublic static int bitSwap(int data, final int posA, final int posB) {\n    if (SingleBitOperations.getBit(data, posA) != SingleBitOperations.getBit(data, posB)) {\n        data ^= (1 << posA) ^ (1 << posB);\n    }\n    return data;\n}\n",
    "class_name": "BitSwap",
    "method_name": "bitSwap",
    "arguments": [
        "int data",
        "int posA",
        "int posB"
    ],
    "generate_test": [
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 123456789;\n        int posA = 5;\n        int posB = 10;\n        \n        int result = BitSwap.bitSwap(data, posA, posB);\n        \n        assertEquals(result, 123456789);\n    }\n}",
        "The requested response is as follows:\n\npackage com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b1010; // binary representation of 10\n        assertEquals(0b1101, BitSwap.bitSwap(data, 0, 2));\n    }\n}",
        "\npackage com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b1010; // binary: 1010\n        int posA = 2;      // position A to swap (counting from right to left)\n        int posB = 4;      // position B to swap (counting from right to left)\n\n        assertEquals(BitSwap.bitSwap(data, posA, posB), 0b1010); // no change\n\n        data = 0b0101;     // binary: 0101\n        posA = 2;          // position A to swap (counting from right to left)\n        posB = 3;          // position B to swap (counting from right to left)\n\n        assertEquals(BitSwap.bitSwap(data, posA, posB), 0b1011); // should result in 1011\n    }\n}\n",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 123456789; // a random number to test the method with\n        int posA = 2; // position of the first bit to swap\n        int posB = 3; // position of the second bit to swap\n        \n        assertEquals(BitSwap.bitSwap(data, posA, posB), 123456789); // expected output: no change since both bits are already swapped\n        \n        data = 123456789; // reset the data to its original value\n        posA = 2; // position of the first bit to swap\n        posB = 5; // position of the second bit to swap\n        \n        assertEquals(BitSwap.bitSwap(data, posA, posB), 123456789); // expected output: no change since both bits are already swapped\n    }\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 5; // binary representation: 101\n        int posA = 2; // binary representation: 10\n        int posB = 3; // binary representation: 11\n\n        int expectedResult = 9; // binary representation: 1001\n\n        assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));\n    }\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 128; // 0b10000000\n        int posA = 6;   // 0b01100000\n        int posB = 3;   // 0b00001100\n\n        int expectedData = 72; // 0b01001000\n\n        assertEquals(expectedData, BitSwap.bitSwap(data, posA, posB));\n    }\n}",
        "\npackage com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 31; // binary: 00011111\n        int posA = 2;  // binary: 00000010\n        int posB = 5;  // binary: 00000100\n        \n        assertEquals(BitSwap.bitSwap(data, posA, posB), 39); // binary: 00011111 ^ (1 << 2) ^ (1 << 5) = 00011111 ^ 00000100 = 00011111 ^ 00000100 = 00011111\n        \n        data = 32; // binary: 00010000\n        posA = 4;  // binary: 00000100\n        posB = 6;  // binary: 00001000\n        \n        assertEquals(BitSwap.bitSwap(data, posA, posB), 32); // binary: 00010000 ^ (1 << 4) ^ (1 << 6) = 00010000 ^ 00000100 = 00010000\n    }\n}",
        "int data = 0b1010;\nint posA = 2;\nint posB = 3;\nint expectedResult = 0b1100;\nassertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 15; // binary: 1111\n        int posA = 3; // posA: 3, posB: 2\n        int posB = 2;\n        int expectedResult = 9; // binary: 0001\n\n        assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));\n    }\n}",
        "\n@Test\npublic void bitSwapTest() {\n    int data = 0b1010; // initial value\n    int posA = 2; // position of first bit to swap\n    int posB = 3; // position of second bit to swap\n    \n    assertEquals(BitSwap.bitSwap(data, posA, posB), 0b1010 ^ (1 << posA) ^ (1 << posB));\n}"
    ]
}