Source code: 

/*
 * @brief Swaps the bits at the position posA and posB from data
 */
public static int bitSwap(int data, final int posA, final int posB) {
    if (SingleBitOperations.getBit(data, posA) != SingleBitOperations.getBit(data, posB)) {
        data ^= (1 << posA) ^ (1 << posB);
    }
    return data;
}



No.1 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 123456789;
        int posA = 5;
        int posB = 10;
        
        int result = BitSwap.bitSwap(data, posA, posB);
        
        assertEquals(result, 123456789);
    }
}


No.2 generated result --------------------------

The requested response is as follows:

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 0b1010; // binary representation of 10
        assertEquals(0b1101, BitSwap.bitSwap(data, 0, 2));
    }
}


No.3 generated result --------------------------


package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 0b1010; // binary: 1010
        int posA = 2;      // position A to swap (counting from right to left)
        int posB = 4;      // position B to swap (counting from right to left)

        assertEquals(BitSwap.bitSwap(data, posA, posB), 0b1010); // no change

        data = 0b0101;     // binary: 0101
        posA = 2;          // position A to swap (counting from right to left)
        posB = 3;          // position B to swap (counting from right to left)

        assertEquals(BitSwap.bitSwap(data, posA, posB), 0b1011); // should result in 1011
    }
}



No.4 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 123456789; // a random number to test the method with
        int posA = 2; // position of the first bit to swap
        int posB = 3; // position of the second bit to swap
        
        assertEquals(BitSwap.bitSwap(data, posA, posB), 123456789); // expected output: no change since both bits are already swapped
        
        data = 123456789; // reset the data to its original value
        posA = 2; // position of the first bit to swap
        posB = 5; // position of the second bit to swap
        
        assertEquals(BitSwap.bitSwap(data, posA, posB), 123456789); // expected output: no change since both bits are already swapped
    }
}


No.5 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 5; // binary representation: 101
        int posA = 2; // binary representation: 10
        int posB = 3; // binary representation: 11

        int expectedResult = 9; // binary representation: 1001

        assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));
    }
}


No.6 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 128; // 0b10000000
        int posA = 6;   // 0b01100000
        int posB = 3;   // 0b00001100

        int expectedData = 72; // 0b01001000

        assertEquals(expectedData, BitSwap.bitSwap(data, posA, posB));
    }
}


No.7 generated result --------------------------


package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 31; // binary: 00011111
        int posA = 2;  // binary: 00000010
        int posB = 5;  // binary: 00000100
        
        assertEquals(BitSwap.bitSwap(data, posA, posB), 39); // binary: 00011111 ^ (1 << 2) ^ (1 << 5) = 00011111 ^ 00000100 = 00011111 ^ 00000100 = 00011111
        
        data = 32; // binary: 00010000
        posA = 4;  // binary: 00000100
        posB = 6;  // binary: 00001000
        
        assertEquals(BitSwap.bitSwap(data, posA, posB), 32); // binary: 00010000 ^ (1 << 4) ^ (1 << 6) = 00010000 ^ 00000100 = 00010000
    }
}


No.8 generated result --------------------------

int data = 0b1010;
int posA = 2;
int posB = 3;
int expectedResult = 0b1100;
assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));


No.9 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 15; // binary: 1111
        int posA = 3; // posA: 3, posB: 2
        int posB = 2;
        int expectedResult = 9; // binary: 0001

        assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));
    }
}


No.10 generated result --------------------------


@Test
public void bitSwapTest() {
    int data = 0b1010; // initial value
    int posA = 2; // position of first bit to swap
    int posB = 3; // position of second bit to swap
    
    assertEquals(BitSwap.bitSwap(data, posA, posB), 0b1010 ^ (1 << posA) ^ (1 << posB));
}


