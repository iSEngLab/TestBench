{
    "project_name": "Java",
    "file_name": "BitSwap.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/bitmanipulation/BitSwap.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.bitmanipulation",
    "docstring": null,
    "source_code": "/*\n * @brief Swaps the bits at the position posA and posB from data\n */\npublic static int bitSwap(int data, final int posA, final int posB) {\n    if (SingleBitOperations.getBit(data, posA) != SingleBitOperations.getBit(data, posB)) {\n        data ^= (1 << posA) ^ (1 << posB);\n    }\n    return data;\n}\n",
    "class_name": "BitSwap",
    "method_name": "bitSwap",
    "arguments": [
        "int data",
        "int posA",
        "int posB"
    ],
    "generate_test": [
        "@Test\npublic void bitSwapTest() {\n    int data = 0b1010; // decimal 10\n    int posA = 2;\n    int posB = 3;\n    int expectedResult = 0b1100; // decimal 12\n    \n    assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));\n}",
        "\npackage com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b1101; // binary representation of 13\n        int posA = 2; // position of the first bit to swap (bit 2)\n        int posB = 3; // position of the second bit to swap (bit 3)\n        \n        assertEquals(BitManipulation.bitSwap(data, posA, posB), 0b1011); // expected result: binary representation of 9\n    }\n}\n",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b1010; // 10 in binary\n        int posA = 2;\n        int posB = 3;\n\n        assertEquals(0b1110, BitSwap.bitSwap(data, posA, posB)); // 14 in binary\n    }\n}",
        "\npackage com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b10101;\n        int posA = 3;\n        int posB = 4;\n        assertEquals(bitSwap(data, posA, posB), 0b11101);\n    }\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b1010; // 0xA (10)\n        int posA = 2;      // 3rd position from right (2^2)\n        int posB = 3;      // 4th position from right (2^3)\n        int expectedData = 0b1101; // 0xD (13)\n\n        assertEquals(expectedData, BitSwap.bitSwap(data, posA, posB));\n    }\n}",
        "package com.thealgorithms.bitmanipulation;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b10011; // decimal 21\n        int posA = 3; // bit position to swap\n        int posB = 4; // bit position to swap\n        \n        int expected = BitManipulation.bitSwap(data, posA, posB);\n        assertEquals(expected, 0b10101); // decimal 25\n    }\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b1010; // initial data = 10 (decimal)\n        assertEquals(bitSwap(data, 2, 3), 0b1100); // expected result = 14 (decimal)\n    }\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 12; // 00001100\n        int posA = 3; // posA is the position of the bit to be swapped (posB)\n        int posB = 6; // posB is the position of the bit to be swapped (posA)\n        \n        assertEquals(14, BitSwap.bitSwap(data, posA, posB)); // 00001110\n    }\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 12; // 0b00001100\n        int posA = 3;\n        int posB = 4;\n        int expected = 27; // 0b00011001\n\n        assertEquals(expected, BitSwap.bitSwap(data, posA, posB));\n    }\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b1010; // binary representation of 10\n        int posA = 3, posB = 2; // position of the bits to be swapped\n        assertEquals(BitManipulation.bitSwap(data, posA, posB), 0b1101); // expected result: binary representation of 15\n    }\n}"
    ]
}