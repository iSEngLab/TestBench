Source code: 

/*
 * @brief Swaps the bits at the position posA and posB from data
 */
public static int bitSwap(int data, final int posA, final int posB) {
    if (SingleBitOperations.getBit(data, posA) != SingleBitOperations.getBit(data, posB)) {
        data ^= (1 << posA) ^ (1 << posB);
    }
    return data;
}



No.1 generated result --------------------------

@Test
public void bitSwapTest() {
    int data = 0b1010; // decimal 10
    int posA = 2;
    int posB = 3;
    int expectedResult = 0b1100; // decimal 12
    
    assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));
}


No.2 generated result --------------------------


package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 0b1101; // binary representation of 13
        int posA = 2; // position of the first bit to swap (bit 2)
        int posB = 3; // position of the second bit to swap (bit 3)
        
        assertEquals(BitManipulation.bitSwap(data, posA, posB), 0b1011); // expected result: binary representation of 9
    }
}



No.3 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 0b1010; // 10 in binary
        int posA = 2;
        int posB = 3;

        assertEquals(0b1110, BitSwap.bitSwap(data, posA, posB)); // 14 in binary
    }
}


No.4 generated result --------------------------


package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 0b10101;
        int posA = 3;
        int posB = 4;
        assertEquals(bitSwap(data, posA, posB), 0b11101);
    }
}


No.5 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 0b1010; // 0xA (10)
        int posA = 2;      // 3rd position from right (2^2)
        int posB = 3;      // 4th position from right (2^3)
        int expectedData = 0b1101; // 0xD (13)

        assertEquals(expectedData, BitSwap.bitSwap(data, posA, posB));
    }
}


No.6 generated result --------------------------

package com.thealgorithms.bitmanipulation;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 0b10011; // decimal 21
        int posA = 3; // bit position to swap
        int posB = 4; // bit position to swap
        
        int expected = BitManipulation.bitSwap(data, posA, posB);
        assertEquals(expected, 0b10101); // decimal 25
    }
}


No.7 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 0b1010; // initial data = 10 (decimal)
        assertEquals(bitSwap(data, 2, 3), 0b1100); // expected result = 14 (decimal)
    }
}


No.8 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 12; // 00001100
        int posA = 3; // posA is the position of the bit to be swapped (posB)
        int posB = 6; // posB is the position of the bit to be swapped (posA)
        
        assertEquals(14, BitSwap.bitSwap(data, posA, posB)); // 00001110
    }
}


No.9 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 12; // 0b00001100
        int posA = 3;
        int posB = 4;
        int expected = 27; // 0b00011001

        assertEquals(expected, BitSwap.bitSwap(data, posA, posB));
    }
}


No.10 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 0b1010; // binary representation of 10
        int posA = 3, posB = 2; // position of the bits to be swapped
        assertEquals(BitManipulation.bitSwap(data, posA, posB), 0b1101); // expected result: binary representation of 15
    }
}


