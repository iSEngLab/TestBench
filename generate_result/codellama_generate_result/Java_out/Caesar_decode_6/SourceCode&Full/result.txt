Source code: 


public String decode(String encryptedMessage, int shift) {
    StringBuilder decoded = new StringBuilder();

    shift %= 26;

    final int length = encryptedMessage.length();
    for (int i = 0; i < length; i++) {
        char current = encryptedMessage.charAt(i);
        if (isCapitalLatinLetter(current)) {
            current -= shift;
            decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters
        } else if (isSmallLatinLetter(current)) {
            current -= shift;
            decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters
        } else {
            decoded.append(current);
        }
    }
    return decoded.toString();
}



No.1 generated result --------------------------


package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    @Test
    public void decodeTest() {
        Caesar caesar = new Caesar();
        String encryptedMessage = "ABCD";
        int shift = 3;
        String expectedDecodedMessage = "GHIJ";
        assertEquals(expectedDecodedMessage, caesar.decode(encryptedMessage, shift));
    }
}


No.2 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    @Test
    public void decodeTest() {
        // Create a Caesar object to test the decode method
        Caesar caesar = new Caesar();

        // Test the decode method with different shift values
        assertEquals("Hello", caesar.decode("Hey!", 1));
        assertEquals("Hey!", caesar.decode("Hello", -1));
        assertEquals("Hey!", caesar.decode("Hello", 0));
    }
}


No.3 generated result --------------------------

@Test
public void decodeTest() {
    String encryptedMessage = "HELLO WORLD";
    int shift = 3;
    
    Caesar cipher = new Caesar();
    String decoded = cipher.decode(encryptedMessage, shift);
    
    assertEquals("HELLO WORLD", decoded);
}


No.4 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    @Test
    public void decodeTest() {
        // Test case 1: Encrypted message is empty
        String encryptedMessage = "";
        int shift = 0;
        assertEquals("", new Caesar().decode(encryptedMessage, shift));

        // Test case 2: Encrypted message has only one character
        encryptedMessage = "A";
        shift = 1;
        assertEquals("B", new Caesar().decode(encryptedMessage, shift));

        // Test case 3: Encrypted message has multiple characters
        encryptedMessage = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        shift = 1;
        assertEquals("BCDEFGHIJKLMNOPQRSTUVWXYZA", new Caesar().decode(encryptedMessage, shift));
    }
}


No.5 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    @Test
    public void decodeTest() {
        // Create an instance of the Caesar class
        Caesar caesar = new Caesar();
        
        // Test that decoding a message with no shift results in the original message
        String encryptedMessage = "Hello World!";
        int shift = 0;
        String expectedDecodedMessage = "Hello World!";
        assertEquals(expectedDecodedMessage, caesar.decode(encryptedMessage, shift));
        
        // Test that decoding a message with a shift results in the correct decoded message
        encryptedMessage = "Hll Wrld!";
        shift = 1;
        expectedDecodedMessage = "Hello World!";
        assertEquals(expectedDecodedMessage, caesar.decode(encryptedMessage, shift));
    }
}


No.6 generated result --------------------------


@Test
public void decodeTest() {
    String encryptedMessage = "ABCD"; // This is a sample encrypted message
    int shiftValue = 2; // This is the shift value for this test case
    
    // Decode the message with the given shift value
    String decodedMessage = Caesar.decode(encryptedMessage, shiftValue);
    
    // Check if the output is correct
    assertEquals("CDEF", decodedMessage);
}



No.7 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    @Test
    public void decodeTest() {
        String encryptedMessage = "XQHJC XNZDHZ RKDQRK KLGWJ"; // This is an example of a Caesar Cipher text
        int shift = 3;
        
        Caesar cipher = new Caesar();
        String decoded = cipher.decode(encryptedMessage, shift);
        
        assertEquals("THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG", decoded); // This is the expected output of the decryption process
    }
}


No.8 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    @Test
    public void decodeTest() {
        // Create a new instance of the Caesar class
        Caesar caesar = new Caesar();
        
        // Test that "ABCD" is decoded to "ZYXW" with a shift of 5
        String expected = "ZYXW";
        String actual = caesar.decode("ABCD", 5);
        assertEquals(expected, actual);
        
        // Test that "XYZA" is decoded to "ABCX" with a shift of 3
        expected = "ABCX";
        actual = caesar.decode("XYZA", 3);
        assertEquals(expected, actual);
    }
}


No.9 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    @Test
    public void decodeTest() {
        String encryptedMessage = "ZXHF YWJJ" // encrypted message using shift 4
        int shift = 4; // shift used to encrypt the message
        
        Caesar caesar = new Caesar();
        String decodedMessage = caesar.decode(encryptedMessage, shift);
        
        assertEquals("THE QUICK BROWN FOX", decodedMessage); // expected value of the decoded message
    }
}


No.10 generated result --------------------------

import org.junit.jupiter.api.Test;

public class CaesarTest {
    @Test
    public void decodeTest() {
        Caesar caesar = new Caesar();
        String encryptedMessage = "KHOOR ZRUOGH"; // "HELLO WORLD" shifted by 1
        int shift = 1;
        String decodedMessage = caesar.decode(encryptedMessage, shift);
        assertEquals("HELLO WORLD", decodedMessage);
    }
}


