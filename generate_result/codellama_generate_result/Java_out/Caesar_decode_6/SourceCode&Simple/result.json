{
    "project_name": "Java",
    "file_name": "Caesar.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/Caesar.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Decrypt message by shifting back every Latin char to previous the ASCII\n     * Example : B - 1 -> A\n     *\n     * @return message\n     */",
    "source_code": "\npublic String decode(String encryptedMessage, int shift) {\n    StringBuilder decoded = new StringBuilder();\n\n    shift %= 26;\n\n    final int length = encryptedMessage.length();\n    for (int i = 0; i < length; i++) {\n        char current = encryptedMessage.charAt(i);\n        if (isCapitalLatinLetter(current)) {\n            current -= shift;\n            decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters\n        } else if (isSmallLatinLetter(current)) {\n            current -= shift;\n            decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters\n        } else {\n            decoded.append(current);\n        }\n    }\n    return decoded.toString();\n}\n",
    "class_name": "Caesar",
    "method_name": "decode",
    "arguments": [
        "String encryptedMessage",
        "int shift"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    @Test\n    public void decodeTest() {\n        // Test case 1: Encrypted message = \"hello\", shift = 0\n        String encryptedMessage1 = \"hello\";\n        int shift1 = 0;\n        assertEquals(\"hello\", new Caesar().decode(encryptedMessage1, shift1));\n\n        // Test case 2: Encrypted message = \"hello\", shift = 3\n        String encryptedMessage2 = \"hello\";\n        int shift2 = 3;\n        assertEquals(\"khoor\", new Caesar().decode(encryptedMessage2, shift2));\n\n        // Test case 3: Encrypted message = \"hello\", shift = -3\n        String encryptedMessage3 = \"hello\";\n        int shift3 = -3;\n        assertEquals(\"dhlmr\", new Caesar().decode(encryptedMessage3, shift3));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    @Test\n    public void decodeTest() {\n        String encryptedMessage = \"THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG\";\n        int shift = 3;\n        Caesar caesar = new Caesar();\n        assertEquals(\"DEFENDTHEEASTWALLOFTHECASTLE\", caesar.decode(encryptedMessage, shift));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    @Test\n    public void decodeTest() {\n        // Test 1: Empty string input\n        String decoded = new Caesar().decode(\"\", 0);\n        assertEquals(\"\", decoded, \"Empty string input should return empty string\");\n\n        // Test 2: Valid string input with no shift\n        String message = \"Hello World!\";\n        int shift = 0;\n        String expected = \"Hello World!\";\n        String actual = new Caesar().decode(message, shift);\n        assertEquals(expected, actual, \"Valid string input with no shift should return the same string\");\n\n        // Test 3: Valid string input with positive shift\n        message = \"Hello World!\";\n        shift = 1;\n        expected = \"Ifmmp Xpsme!\";\n        actual = new Caesar().decode(message, shift);\n        assertEquals(expected, actual, \"Valid string input with positive shift should return the decoded string\");\n\n        // Test 4: Valid string input with negative shift\n        message = \"Hello World!\";\n        shift = -1;\n        expected = \"Gdkkn hwOwqm!\";\n        actual = new Caesar().decode(message, shift);\n        assertEquals(expected, actual, \"Valid string input with negative shift should return the decoded string\");\n\n        // Test 5: Invalid string input (non-latin characters)\n        message = \"Hello World! \ud83e\udd14\";\n        int shift = 1;\n        String expected = \"Ifmmp Xpsme! \ud83e\udd14\";\n        String actual = new Caesar().decode(message, shift);\n        assertEquals(expected, actual, \"Invalid string input (non-latin characters) should return the same string\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    @Test\n    public void decodeTest() {\n        String encryptedMessage = \"ZMJYDH\";\n        int shift = 3;\n        \n        Caesar caesar = new Caesar();\n        String decodedMessage = caesar.decode(encryptedMessage, shift);\n        \n        assertEquals(\"HELLO\", decodedMessage);\n    }\n}",
        "package com.thealgorithms.ciphers;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class CaesarTest {\n    @Test\n    public void decodeTest() {\n        // Test case 1: Decoding an encrypted message with a shift of 0 should return the original message.\n        String message = \"Hello, World!\";\n        int shift = 0;\n        Caesar cipher = new Caesar();\n        String actual = cipher.decode(message, shift);\n        assertEquals(\"Decoding an encrypted message with a shift of 0 should return the original message.\", message, actual);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    @Test\n    public void decodeTest() {\n        // Test case 1: Decoding a message with shift = 0\n        String inputMessage = \"Hello World!\";\n        int shift = 0;\n        String expectedOutput = \"Hello World!\";\n        assertEquals(expectedOutput, Caesar.decode(inputMessage, shift));\n\n        // Test case 2: Decoding a message with shift = 1\n        inputMessage = \"Hello World!\";\n        shift = 1;\n        expectedOutput = \"Ifmmp Xpsme!\";\n        assertEquals(expectedOutput, Caesar.decode(inputMessage, shift));\n\n        // Test case 3: Decoding a message with shift = 26\n        inputMessage = \"Hello World!\";\n        shift = 26;\n        expectedOutput = \"Hello World!\";\n        assertEquals(expectedOutput, Caesar.decode(inputMessage, shift));\n\n        // Test case 4: Decoding a message with shift > 26\n        inputMessage = \"Hello World!\";\n        shift = 30;\n        expectedOutput = \"Ifmmp Xpsme!\";\n        assertEquals(expectedOutput, Caesar.decode(inputMessage, shift));\n    }\n}",
        "\npackage com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    @Test\n    public void decodeTest() {\n        String encryptedMessage = \"LBH QVQ VG!\";\n        int shift = 5;\n        assertEquals(\"HELLO WORLD!\", new Caesar().decode(encryptedMessage, shift));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    @Test\n    public void decodeTest() {\n        String encryptedMessage = \"Hello, World!\";\n        int shift = 1;\n        Caesar cipher = new Caesar();\n        assertEquals(cipher.decode(encryptedMessage, shift), \"Ifmmp, Xpsme!\");\n    }\n}",
        "\n@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    String encryptedMessage = \"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\";\n    int shift = 3;\n    String decodedMessage = caesar.decode(encryptedMessage, shift);\n    assertEquals(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", decodedMessage);\n}",
        "\npackage com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    @Test\n    public void decodeTest() {\n        // Test Case 1: Shift of 0\n        String encryptedMessage = \"ABCD\";\n        int shift = 0;\n        Caesar caesar = new Caesar();\n        assertEquals(encryptedMessage, caesar.decode(encryptedMessage, shift));\n        \n        // Test Case 2: Shift of 1\n        encryptedMessage = \"BCDE\";\n        shift = 1;\n        caesar = new Caesar();\n        assertEquals(encryptedMessage, caesar.decode(encryptedMessage, shift));\n        \n        // Test Case 3: Shift of 26\n        encryptedMessage = \"ZABC\";\n        shift = 26;\n        caesar = new Caesar();\n        assertEquals(\"AABB\", caesar.decode(encryptedMessage, shift));\n    }\n}"
    ]
}