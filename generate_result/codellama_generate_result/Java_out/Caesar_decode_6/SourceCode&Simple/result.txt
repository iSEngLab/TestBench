Source code: 


public String decode(String encryptedMessage, int shift) {
    StringBuilder decoded = new StringBuilder();

    shift %= 26;

    final int length = encryptedMessage.length();
    for (int i = 0; i < length; i++) {
        char current = encryptedMessage.charAt(i);
        if (isCapitalLatinLetter(current)) {
            current -= shift;
            decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters
        } else if (isSmallLatinLetter(current)) {
            current -= shift;
            decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters
        } else {
            decoded.append(current);
        }
    }
    return decoded.toString();
}



No.1 generated result --------------------------


package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    @Test
    public void decodeTest() {
        // Test case 1: Encrypted message = "hello", shift = 0
        String encryptedMessage1 = "hello";
        int shift1 = 0;
        assertEquals("hello", new Caesar().decode(encryptedMessage1, shift1));

        // Test case 2: Encrypted message = "hello", shift = 3
        String encryptedMessage2 = "hello";
        int shift2 = 3;
        assertEquals("khoor", new Caesar().decode(encryptedMessage2, shift2));

        // Test case 3: Encrypted message = "hello", shift = -3
        String encryptedMessage3 = "hello";
        int shift3 = -3;
        assertEquals("dhlmr", new Caesar().decode(encryptedMessage3, shift3));
    }
}


No.2 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    @Test
    public void decodeTest() {
        String encryptedMessage = "THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG";
        int shift = 3;
        Caesar caesar = new Caesar();
        assertEquals("DEFENDTHEEASTWALLOFTHECASTLE", caesar.decode(encryptedMessage, shift));
    }
}


No.3 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    @Test
    public void decodeTest() {
        // Test 1: Empty string input
        String decoded = new Caesar().decode("", 0);
        assertEquals("", decoded, "Empty string input should return empty string");

        // Test 2: Valid string input with no shift
        String message = "Hello World!";
        int shift = 0;
        String expected = "Hello World!";
        String actual = new Caesar().decode(message, shift);
        assertEquals(expected, actual, "Valid string input with no shift should return the same string");

        // Test 3: Valid string input with positive shift
        message = "Hello World!";
        shift = 1;
        expected = "Ifmmp Xpsme!";
        actual = new Caesar().decode(message, shift);
        assertEquals(expected, actual, "Valid string input with positive shift should return the decoded string");

        // Test 4: Valid string input with negative shift
        message = "Hello World!";
        shift = -1;
        expected = "Gdkkn hwOwqm!";
        actual = new Caesar().decode(message, shift);
        assertEquals(expected, actual, "Valid string input with negative shift should return the decoded string");

        // Test 5: Invalid string input (non-latin characters)
        message = "Hello World! ðŸ¤”";
        int shift = 1;
        String expected = "Ifmmp Xpsme! ðŸ¤”";
        String actual = new Caesar().decode(message, shift);
        assertEquals(expected, actual, "Invalid string input (non-latin characters) should return the same string");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    @Test
    public void decodeTest() {
        String encryptedMessage = "ZMJYDH";
        int shift = 3;
        
        Caesar caesar = new Caesar();
        String decodedMessage = caesar.decode(encryptedMessage, shift);
        
        assertEquals("HELLO", decodedMessage);
    }
}


No.5 generated result --------------------------

package com.thealgorithms.ciphers;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
public class CaesarTest {
    @Test
    public void decodeTest() {
        // Test case 1: Decoding an encrypted message with a shift of 0 should return the original message.
        String message = "Hello, World!";
        int shift = 0;
        Caesar cipher = new Caesar();
        String actual = cipher.decode(message, shift);
        assertEquals("Decoding an encrypted message with a shift of 0 should return the original message.", message, actual);
    }
}


No.6 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    @Test
    public void decodeTest() {
        // Test case 1: Decoding a message with shift = 0
        String inputMessage = "Hello World!";
        int shift = 0;
        String expectedOutput = "Hello World!";
        assertEquals(expectedOutput, Caesar.decode(inputMessage, shift));

        // Test case 2: Decoding a message with shift = 1
        inputMessage = "Hello World!";
        shift = 1;
        expectedOutput = "Ifmmp Xpsme!";
        assertEquals(expectedOutput, Caesar.decode(inputMessage, shift));

        // Test case 3: Decoding a message with shift = 26
        inputMessage = "Hello World!";
        shift = 26;
        expectedOutput = "Hello World!";
        assertEquals(expectedOutput, Caesar.decode(inputMessage, shift));

        // Test case 4: Decoding a message with shift > 26
        inputMessage = "Hello World!";
        shift = 30;
        expectedOutput = "Ifmmp Xpsme!";
        assertEquals(expectedOutput, Caesar.decode(inputMessage, shift));
    }
}


No.7 generated result --------------------------


package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    @Test
    public void decodeTest() {
        String encryptedMessage = "LBH QVQ VG!";
        int shift = 5;
        assertEquals("HELLO WORLD!", new Caesar().decode(encryptedMessage, shift));
    }
}


No.8 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    @Test
    public void decodeTest() {
        String encryptedMessage = "Hello, World!";
        int shift = 1;
        Caesar cipher = new Caesar();
        assertEquals(cipher.decode(encryptedMessage, shift), "Ifmmp, Xpsme!");
    }
}


No.9 generated result --------------------------


@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String encryptedMessage = "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG";
    int shift = 3;
    String decodedMessage = caesar.decode(encryptedMessage, shift);
    assertEquals("ABCDEFGHIJKLMNOPQRSTUVWXYZ", decodedMessage);
}


No.10 generated result --------------------------


package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    @Test
    public void decodeTest() {
        // Test Case 1: Shift of 0
        String encryptedMessage = "ABCD";
        int shift = 0;
        Caesar caesar = new Caesar();
        assertEquals(encryptedMessage, caesar.decode(encryptedMessage, shift));
        
        // Test Case 2: Shift of 1
        encryptedMessage = "BCDE";
        shift = 1;
        caesar = new Caesar();
        assertEquals(encryptedMessage, caesar.decode(encryptedMessage, shift));
        
        // Test Case 3: Shift of 26
        encryptedMessage = "ZABC";
        shift = 26;
        caesar = new Caesar();
        assertEquals("AABB", caesar.decode(encryptedMessage, shift));
    }
}


