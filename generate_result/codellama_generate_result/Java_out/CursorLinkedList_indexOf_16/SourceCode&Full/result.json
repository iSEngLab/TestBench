{
    "project_name": "Java",
    "file_name": "CursorLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/CursorLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * @return the logical index of the element within the list , not the actual\n     * index of the [cursorSpace] array\n     */",
    "source_code": "\npublic int indexOf(T element) {\n    Objects.requireNonNull(element);\n    Node<T> iterator = cursorSpace[head];\n    for (int i = 0; i < count; i++) {\n        if (iterator.element.equals(element)) {\n            return i;\n        }\n        iterator = cursorSpace[iterator.next];\n    }\n\n    return -1;\n}\n",
    "class_name": "CursorLinkedList",
    "method_name": "indexOf",
    "arguments": [
        "T element"
    ],
    "generate_test": [
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.append(1);\n    list.append(2);\n    list.append(3);\n    assertEquals(0, list.indexOf(1));\n    assertEquals(1, list.indexOf(2));\n    assertEquals(2, list.indexOf(3));\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // Create a new instance of the CursorLinkedList class\n        CursorLinkedList<String> list = new CursorLinkedList<>();\n\n        // Add some elements to the list\n        list.append(\"apple\");\n        list.append(\"banana\");\n        list.append(\"cherry\");\n\n        // Check if indexOf returns the correct index for each element\n        assertEquals(0, list.indexOf(\"apple\"));\n        assertEquals(1, list.indexOf(\"banana\"));\n        assertEquals(2, list.indexOf(\"cherry\"));\n    }\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.append(1);\n    list.append(2);\n    list.append(3);\n    list.append(4);\n    list.append(5);\n\n    assertEquals(0, list.indexOf(1));\n    assertEquals(1, list.indexOf(2));\n    assertEquals(2, list.indexOf(3));\n    assertEquals(3, list.indexOf(4));\n    assertEquals(4, list.indexOf(5));\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    assertEquals(-1, list.indexOf(null));\n    assertEquals(-1, list.indexOf(5));\n    list.append(1);\n    assertEquals(0, list.indexOf(1));\n    list.append(2);\n    assertEquals(1, list.indexOf(2));\n    list.append(3);\n    assertEquals(2, list.indexOf(3));\n    list.removeByIndex(1);\n    assertEquals(-1, list.indexOf(2));\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // Create an instance of the CursorLinkedList class\n        CursorLinkedList<String> list = new CursorLinkedList<>();\n\n        // Append some elements to the list\n        list.append(\"apple\");\n        list.append(\"banana\");\n        list.append(\"orange\");\n\n        // Test that indexOf returns the correct index for an element in the list\n        assertEquals(0, list.indexOf(\"apple\"));\n        assertEquals(1, list.indexOf(\"banana\"));\n        assertEquals(2, list.indexOf(\"orange\"));\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // Set up the test environment\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n        \n        // Test 1: Empty list\n        assertEquals(-1, list.indexOf(5));\n        \n        // Test 2: Single element list\n        list.append(3);\n        assertEquals(0, list.indexOf(3));\n        \n        // Test 3: List with multiple elements\n        list.append(7);\n        list.append(9);\n        assertEquals(1, list.indexOf(7));\n    }\n}",
        "@Test\npublic void indexOfTest() {\n    // Create an instance of the CursorLinkedList class\n    CursorLinkedList<String> list = new CursorLinkedList<>();\n\n    // Add elements to the list\n    list.append(\"A\");\n    list.append(\"B\");\n    list.append(\"C\");\n    list.append(\"D\");\n\n    // Test that the indexOf method returns the correct index for each element in the list\n    assertEquals(0, list.indexOf(\"A\"));\n    assertEquals(1, list.indexOf(\"B\"));\n    assertEquals(2, list.indexOf(\"C\"));\n    assertEquals(3, list.indexOf(\"D\"));\n}",
        "\npublic class CursorLinkedList<T> {\n\n    private static class Node<T> {\n\n        T element;\n        int next;\n\n        Node(T element, int next) {\n            this.element = element;\n            this.next = next;\n        }\n    }\n\n    private final int os;\n    private int head;\n    private final Node<T>[] cursorSpace;\n    private int count;\n    private static final int CURSOR_SPACE_SIZE = 100;\n\n    {\n        // init at loading time\n        cursorSpace = new Node[CURSOR_SPACE_SIZE];\n        for (int i = 0; i < CURSOR_SPACE_SIZE; i++) {\n            cursorSpace[i] = new Node<>(null, i + 1);\n        }\n        cursorSpace[CURSOR_SPACE_SIZE - 1].next = 0;\n    }\n\n    public CursorLinkedList() {\n        os = 0;\n        count = 0;\n        head = -1;\n    }\n\n    public void printList() {\n        if (head != -1) {\n            int start = head;\n            while (start != -1) {\n                T element = cursorSpace[start].element;\n                System.out.println(element);\n                start = cursorSpace[start].next;\n            }\n        }\n    }\n\n    public void append(T element) {\n        Objects.requireNonNull(element);\n        int availableIndex = alloc();\n        cursorSpace[availableIndex].element = element;\n\n        if (head == -1) {\n            head = availableIndex;\n        }\n\n        int iterator = head;\n        while (cursorSpace[iterator].next != -1) {\n            iterator = cursorSpace[iterator].next;\n        }\n\n        cursorSpace[iterator].next = availableIndex;\n        cursorSpace[availableIndex].next = -1;\n\n        count++;\n    }\n\n    private void free(int index) {\n        Node os_node = cursorSpace[os];\n        int os_next = os_node.next;\n        cursorSpace[os].next = index;\n        cursorSpace[index].element = null;\n        cursorSpace[index].next = os_next;\n    }\n\n    private int alloc() {\n        // 1- get the index at which the os is pointing\n        int availableNodeIndex = cursorSpace[os].next;\n\n        if (availableNodeIndex == 0) {\n            throw new OutOfMemoryError();\n        }\n\n        // 2- make the os point to the next of the @var{availableNodeIndex}\n        cursorSpace[os].next = cursorSpace[availableNodeIndex].next;\n\n        // this to indicate an end of the list , helpful at testing since any err\n        // would throw an outOfBoundException\n        cursorSpace[availableNodeIndex].next = -1;\n\n        return availableNodeIndex;\n    }\n}",
        "@Test\npublic void indexOfTest() {\n    // create a list instance\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n\n    // add some elements to the list\n    list.append(1);\n    list.append(2);\n    list.append(3);\n    list.append(4);\n\n    // test if indexOf() method works correctly with existing element\n    assertEquals(0, list.indexOf(1));\n    assertEquals(1, list.indexOf(2));\n    assertEquals(2, list.indexOf(3));\n    assertEquals(3, list.indexOf(4));\n\n    // test if indexOf() method returns -1 for non-existing element\n    assertEquals(-1, list.indexOf(5));\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // create a new instance of the CursorLinkedList\n        CursorLinkedList<Integer> cursorLinkedList = new CursorLinkedList<>();\n\n        // add elements to the list\n        cursorLinkedList.append(1);\n        cursorLinkedList.append(2);\n        cursorLinkedList.append(3);\n\n        // check that indexOf() method returns correct index for each element\n        assertEquals(0, cursorLinkedList.indexOf(1));\n        assertEquals(1, cursorLinkedList.indexOf(2));\n        assertEquals(2, cursorLinkedList.indexOf(3));\n    }\n}"
    ]
}