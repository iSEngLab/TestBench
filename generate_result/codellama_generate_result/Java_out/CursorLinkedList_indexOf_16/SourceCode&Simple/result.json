{
    "project_name": "Java",
    "file_name": "CursorLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/CursorLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * @return the logical index of the element within the list , not the actual\n     * index of the [cursorSpace] array\n     */",
    "source_code": "\npublic int indexOf(T element) {\n    Objects.requireNonNull(element);\n    Node<T> iterator = cursorSpace[head];\n    for (int i = 0; i < count; i++) {\n        if (iterator.element.equals(element)) {\n            return i;\n        }\n        iterator = cursorSpace[iterator.next];\n    }\n\n    return -1;\n}\n",
    "class_name": "CursorLinkedList",
    "method_name": "indexOf",
    "arguments": [
        "T element"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n        \n        // Test case 1: Empty list\n        assertEquals(-1, list.indexOf(42));\n        \n        // Test case 2: List with one element\n        list.append(42);\n        assertEquals(0, list.indexOf(42));\n        \n        // Test case 3: List with multiple elements\n        list.append(13);\n        list.append(7);\n        list.append(42);\n        assertEquals(2, list.indexOf(42));\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // Create an instance of the CursorLinkedList class\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n\n        // Add elements to the list\n        list.append(1);\n        list.append(2);\n        list.append(3);\n        list.append(4);\n        list.append(5);\n\n        // Check that indexOf() returns the correct index for each element\n        assertEquals(0, list.indexOf(1));\n        assertEquals(1, list.indexOf(2));\n        assertEquals(2, list.indexOf(3));\n        assertEquals(3, list.indexOf(4));\n        assertEquals(4, list.indexOf(5));\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // Create a new instance of the CursorLinkedList class\n        CursorLinkedList list = new CursorLinkedList();\n        \n        // Add elements to the list\n        list.append(1);\n        list.append(2);\n        list.append(3);\n        list.append(4);\n        list.append(5);\n        \n        // Test that indexOf returns the correct index for an element in the list\n        assertEquals(0, list.indexOf(1));\n        assertEquals(1, list.indexOf(2));\n        assertEquals(2, list.indexOf(3));\n        assertEquals(3, list.indexOf(4));\n        assertEquals(4, list.indexOf(5));\n        \n        // Test that indexOf returns -1 for an element not in the list\n        assertEquals(-1, list.indexOf(0));\n    }\n}",
        "\n@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.append(1);\n    list.append(2);\n    list.append(3);\n    assertEquals(0, list.indexOf(1));\n    assertEquals(1, list.indexOf(2));\n    assertEquals(2, list.indexOf(3));\n    assertEquals(-1, list.indexOf(4));\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // Create an instance of the CursorLinkedList class\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n\n        // Add elements to the list\n        list.append(1);\n        list.append(2);\n        list.append(3);\n\n        // Test that indexOf() returns the correct index of an element in the list\n        assertEquals(0, list.indexOf(1));\n        assertEquals(1, list.indexOf(2));\n        assertEquals(2, list.indexOf(3));\n    }\n}",
        "@Test\npublic void indexOfTest() {\n    // Create a new instance of the CursorLinkedList class\n    CursorLinkedList list = new CursorLinkedList();\n\n    // Add some elements to the list\n    list.append(1);\n    list.append(2);\n    list.append(3);\n    list.append(4);\n    list.append(5);\n\n    // Check that the indexOf method returns the correct index for each element\n    assertEquals(0, list.indexOf(1));\n    assertEquals(1, list.indexOf(2));\n    assertEquals(2, list.indexOf(3));\n    assertEquals(3, list.indexOf(4));\n    assertEquals(4, list.indexOf(5));\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n        list.append(1);\n        list.append(2);\n        assertEquals(0, list.indexOf(1));\n        assertEquals(1, list.indexOf(2));\n    }\n}",
        "\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n        list.append(1);\n        list.append(2);\n        list.append(3);\n        assertEquals(0, list.indexOf(1));\n        assertEquals(1, list.indexOf(2));\n        assertEquals(2, list.indexOf(3));\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // Create a list with three elements\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n        list.append(1);\n        list.append(2);\n        list.append(3);\n\n        // Test that the method returns -1 if the element is not in the list\n        assertEquals(-1, list.indexOf(4));\n\n        // Test that the method returns the correct index for an element that is in the list\n        assertEquals(0, list.indexOf(1));\n        assertEquals(1, list.indexOf(2));\n        assertEquals(2, list.indexOf(3));\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // Create a new instance of the CursorLinkedList class\n        CursorLinkedList list = new CursorLinkedList();\n\n        // Add some elements to the list\n        list.append(\"A\");\n        list.append(\"B\");\n        list.append(\"C\");\n\n        // Test that indexOf() returns the correct index for each element in the list\n        assertEquals(0, list.indexOf(\"A\"));\n        assertEquals(1, list.indexOf(\"B\"));\n        assertEquals(2, list.indexOf(\"C\"));\n    }\n}"
    ]
}