Source code: 


public int indexOf(T element) {
    Objects.requireNonNull(element);
    Node<T> iterator = cursorSpace[head];
    for (int i = 0; i < count; i++) {
        if (iterator.element.equals(element)) {
            return i;
        }
        iterator = cursorSpace[iterator.next];
    }

    return -1;
}



No.1 generated result --------------------------


package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        CursorLinkedList<Integer> list = new CursorLinkedList<>();
        
        // Test case 1: Empty list
        assertEquals(-1, list.indexOf(42));
        
        // Test case 2: List with one element
        list.append(42);
        assertEquals(0, list.indexOf(42));
        
        // Test case 3: List with multiple elements
        list.append(13);
        list.append(7);
        list.append(42);
        assertEquals(2, list.indexOf(42));
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        // Create an instance of the CursorLinkedList class
        CursorLinkedList<Integer> list = new CursorLinkedList<>();

        // Add elements to the list
        list.append(1);
        list.append(2);
        list.append(3);
        list.append(4);
        list.append(5);

        // Check that indexOf() returns the correct index for each element
        assertEquals(0, list.indexOf(1));
        assertEquals(1, list.indexOf(2));
        assertEquals(2, list.indexOf(3));
        assertEquals(3, list.indexOf(4));
        assertEquals(4, list.indexOf(5));
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        // Create a new instance of the CursorLinkedList class
        CursorLinkedList list = new CursorLinkedList();
        
        // Add elements to the list
        list.append(1);
        list.append(2);
        list.append(3);
        list.append(4);
        list.append(5);
        
        // Test that indexOf returns the correct index for an element in the list
        assertEquals(0, list.indexOf(1));
        assertEquals(1, list.indexOf(2));
        assertEquals(2, list.indexOf(3));
        assertEquals(3, list.indexOf(4));
        assertEquals(4, list.indexOf(5));
        
        // Test that indexOf returns -1 for an element not in the list
        assertEquals(-1, list.indexOf(0));
    }
}


No.4 generated result --------------------------


@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.append(1);
    list.append(2);
    list.append(3);
    assertEquals(0, list.indexOf(1));
    assertEquals(1, list.indexOf(2));
    assertEquals(2, list.indexOf(3));
    assertEquals(-1, list.indexOf(4));
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        // Create an instance of the CursorLinkedList class
        CursorLinkedList<Integer> list = new CursorLinkedList<>();

        // Add elements to the list
        list.append(1);
        list.append(2);
        list.append(3);

        // Test that indexOf() returns the correct index of an element in the list
        assertEquals(0, list.indexOf(1));
        assertEquals(1, list.indexOf(2));
        assertEquals(2, list.indexOf(3));
    }
}


No.6 generated result --------------------------

@Test
public void indexOfTest() {
    // Create a new instance of the CursorLinkedList class
    CursorLinkedList list = new CursorLinkedList();

    // Add some elements to the list
    list.append(1);
    list.append(2);
    list.append(3);
    list.append(4);
    list.append(5);

    // Check that the indexOf method returns the correct index for each element
    assertEquals(0, list.indexOf(1));
    assertEquals(1, list.indexOf(2));
    assertEquals(2, list.indexOf(3));
    assertEquals(3, list.indexOf(4));
    assertEquals(4, list.indexOf(5));
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        CursorLinkedList<Integer> list = new CursorLinkedList<>();
        list.append(1);
        list.append(2);
        assertEquals(0, list.indexOf(1));
        assertEquals(1, list.indexOf(2));
    }
}


No.8 generated result --------------------------


package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        CursorLinkedList<Integer> list = new CursorLinkedList<>();
        list.append(1);
        list.append(2);
        list.append(3);
        assertEquals(0, list.indexOf(1));
        assertEquals(1, list.indexOf(2));
        assertEquals(2, list.indexOf(3));
    }
}


No.9 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        // Create a list with three elements
        CursorLinkedList<Integer> list = new CursorLinkedList<>();
        list.append(1);
        list.append(2);
        list.append(3);

        // Test that the method returns -1 if the element is not in the list
        assertEquals(-1, list.indexOf(4));

        // Test that the method returns the correct index for an element that is in the list
        assertEquals(0, list.indexOf(1));
        assertEquals(1, list.indexOf(2));
        assertEquals(2, list.indexOf(3));
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        // Create a new instance of the CursorLinkedList class
        CursorLinkedList list = new CursorLinkedList();

        // Add some elements to the list
        list.append("A");
        list.append("B");
        list.append("C");

        // Test that indexOf() returns the correct index for each element in the list
        assertEquals(0, list.indexOf("A"));
        assertEquals(1, list.indexOf("B"));
        assertEquals(2, list.indexOf("C"));
    }
}


