{
    "project_name": "Java",
    "file_name": "CursorLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/CursorLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * @return the logical index of the element within the list , not the actual\n     * index of the [cursorSpace] array\n     */",
    "source_code": "\npublic int indexOf(T element) {\n    Objects.requireNonNull(element);\n    Node<T> iterator = cursorSpace[head];\n    for (int i = 0; i < count; i++) {\n        if (iterator.element.equals(element)) {\n            return i;\n        }\n        iterator = cursorSpace[iterator.next];\n    }\n\n    return -1;\n}\n",
    "class_name": "CursorLinkedList",
    "method_name": "indexOf",
    "arguments": [
        "T element"
    ],
    "generate_test": [
        "@Test\npublic void indexOfTest() {\n    // Create a new cursor linked list and add some elements to it\n    CursorLinkedList<String> list = new CursorLinkedList<>();\n    list.add(\"apple\");\n    list.add(\"banana\");\n    list.add(\"cherry\");\n    list.add(\"date\");\n    \n    // Test that the indexOf method returns the correct index for an element in the list\n    assertEquals(list.indexOf(\"banana\"), 1);\n    assertEquals(list.indexOf(\"cherry\"), 2);\n    assertEquals(list.indexOf(\"date\"), 3);\n    \n    // Test that the indexOf method returns -1 if the element is not in the list\n    assertEquals(list.indexOf(\"orange\"), -1);\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // Create a new CursorLinkedList object\n        CursorLinkedList<String> list = new CursorLinkedList<>();\n\n        // Add some elements to the list\n        list.add(\"apple\");\n        list.add(\"banana\");\n        list.add(\"cherry\");\n\n        // Test the indexOf method with a non-existent element\n        assertEquals(-1, list.indexOf(\"orange\"));\n\n        // Test the indexOf method with an existing element\n        assertEquals(0, list.indexOf(\"apple\"));\n\n        // Test the indexOf method with an element at the end of the list\n        assertEquals(2, list.indexOf(\"cherry\"));\n    }\n}",
        "\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // Create an instance of the CursorLinkedList class\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n\n        // Add some elements to the list\n        list.add(1);\n        list.add(2);\n        list.add(3);\n\n        // Verify that the indexOf() method works correctly\n        assertEquals(0, list.indexOf(1));\n        assertEquals(1, list.indexOf(2));\n        assertEquals(2, list.indexOf(3));\n    }\n}",
        "@Test\npublic void indexOfTest() {\n    // Create a new instance of the CursorLinkedList class\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n\n    // Add some elements to the list\n    list.add(1);\n    list.add(2);\n    list.add(3);\n    list.add(4);\n\n    // Test that the indexOf method returns the correct index for each element\n    assertEquals(0, list.indexOf(1));\n    assertEquals(1, list.indexOf(2));\n    assertEquals(2, list.indexOf(3));\n    assertEquals(3, list.indexOf(4));\n\n    // Test that the indexOf method returns -1 for elements not in the list\n    assertEquals(-1, list.indexOf(5));\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        CursorLinkedList<String> list = new CursorLinkedList<>();\n        list.add(\"one\");\n        list.add(\"two\");\n        list.add(\"three\");\n        \n        assertEquals(0, list.indexOf(\"one\"));\n        assertEquals(1, list.indexOf(\"two\"));\n        assertEquals(2, list.indexOf(\"three\"));\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // Initialize the linked list with some elements\n        CursorLinkedList<String> linkedList = new CursorLinkedList<>();\n        linkedList.add(\"A\");\n        linkedList.add(\"B\");\n        linkedList.add(\"C\");\n        \n        // Test that the index of an element is correct\n        assertEquals(linkedList.indexOf(\"B\"), 1);\n    }\n}",
        "\n@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.add(1);\n    list.add(2);\n    list.add(3);\n    assertEquals(0, list.indexOf(1));\n    assertEquals(1, list.indexOf(2));\n    assertEquals(2, list.indexOf(3));\n    assertEquals(-1, list.indexOf(4));\n}",
        "\n@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.add(1);\n    list.add(2);\n    list.add(3);\n    \n    assertEquals(0, list.indexOf(1));\n    assertEquals(1, list.indexOf(2));\n    assertEquals(2, list.indexOf(3));\n}\n",
        "\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // Create a new instance of the CursorLinkedList class\n        CursorLinkedList<String> list = new CursorLinkedList<>();\n\n        // Add some elements to the list\n        list.add(\"apple\");\n        list.add(\"banana\");\n        list.add(\"cherry\");\n\n        // Test that indexOf() returns the correct index for an element in the list\n        assertEquals(0, list.indexOf(\"apple\"));\n        assertEquals(1, list.indexOf(\"banana\"));\n        assertEquals(2, list.indexOf(\"cherry\"));\n\n        // Test that indexOf() returns -1 when the element is not found in the list\n        assertEquals(-1, list.indexOf(\"orange\"));\n    }\n}",
        "\npublic int indexOf(T element) {\n    Objects.requireNonNull(element);\n    Node<T> iterator = cursorSpace[head];\n    for (int i = 0; i < count; i++) {\n        if (iterator.element.equals(element)) {\n            return i;\n        }\n        iterator = cursorSpace[iterator.next];\n    }\n\n    return -1;\n}\n\nYou can use the following JUnit test case to check that the indexOf() method works correctly:\n\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n        assertEquals(-1, list.indexOf(5));\n        list.add(0);\n        assertEquals(0, list.indexOf(0));\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        assertEquals(1, list.indexOf(1));\n    }\n}"
    ]
}