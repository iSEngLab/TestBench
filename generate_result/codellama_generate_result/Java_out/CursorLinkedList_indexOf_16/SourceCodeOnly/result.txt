Source code: 


public int indexOf(T element) {
    Objects.requireNonNull(element);
    Node<T> iterator = cursorSpace[head];
    for (int i = 0; i < count; i++) {
        if (iterator.element.equals(element)) {
            return i;
        }
        iterator = cursorSpace[iterator.next];
    }

    return -1;
}



No.1 generated result --------------------------

@Test
public void indexOfTest() {
    // Create a new cursor linked list and add some elements to it
    CursorLinkedList<String> list = new CursorLinkedList<>();
    list.add("apple");
    list.add("banana");
    list.add("cherry");
    list.add("date");
    
    // Test that the indexOf method returns the correct index for an element in the list
    assertEquals(list.indexOf("banana"), 1);
    assertEquals(list.indexOf("cherry"), 2);
    assertEquals(list.indexOf("date"), 3);
    
    // Test that the indexOf method returns -1 if the element is not in the list
    assertEquals(list.indexOf("orange"), -1);
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        // Create a new CursorLinkedList object
        CursorLinkedList<String> list = new CursorLinkedList<>();

        // Add some elements to the list
        list.add("apple");
        list.add("banana");
        list.add("cherry");

        // Test the indexOf method with a non-existent element
        assertEquals(-1, list.indexOf("orange"));

        // Test the indexOf method with an existing element
        assertEquals(0, list.indexOf("apple"));

        // Test the indexOf method with an element at the end of the list
        assertEquals(2, list.indexOf("cherry"));
    }
}


No.3 generated result --------------------------


package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        // Create an instance of the CursorLinkedList class
        CursorLinkedList<Integer> list = new CursorLinkedList<>();

        // Add some elements to the list
        list.add(1);
        list.add(2);
        list.add(3);

        // Verify that the indexOf() method works correctly
        assertEquals(0, list.indexOf(1));
        assertEquals(1, list.indexOf(2));
        assertEquals(2, list.indexOf(3));
    }
}


No.4 generated result --------------------------

@Test
public void indexOfTest() {
    // Create a new instance of the CursorLinkedList class
    CursorLinkedList<Integer> list = new CursorLinkedList<>();

    // Add some elements to the list
    list.add(1);
    list.add(2);
    list.add(3);
    list.add(4);

    // Test that the indexOf method returns the correct index for each element
    assertEquals(0, list.indexOf(1));
    assertEquals(1, list.indexOf(2));
    assertEquals(2, list.indexOf(3));
    assertEquals(3, list.indexOf(4));

    // Test that the indexOf method returns -1 for elements not in the list
    assertEquals(-1, list.indexOf(5));
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        CursorLinkedList<String> list = new CursorLinkedList<>();
        list.add("one");
        list.add("two");
        list.add("three");
        
        assertEquals(0, list.indexOf("one"));
        assertEquals(1, list.indexOf("two"));
        assertEquals(2, list.indexOf("three"));
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        // Initialize the linked list with some elements
        CursorLinkedList<String> linkedList = new CursorLinkedList<>();
        linkedList.add("A");
        linkedList.add("B");
        linkedList.add("C");
        
        // Test that the index of an element is correct
        assertEquals(linkedList.indexOf("B"), 1);
    }
}


No.7 generated result --------------------------


@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.add(1);
    list.add(2);
    list.add(3);
    assertEquals(0, list.indexOf(1));
    assertEquals(1, list.indexOf(2));
    assertEquals(2, list.indexOf(3));
    assertEquals(-1, list.indexOf(4));
}


No.8 generated result --------------------------


@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.add(1);
    list.add(2);
    list.add(3);
    
    assertEquals(0, list.indexOf(1));
    assertEquals(1, list.indexOf(2));
    assertEquals(2, list.indexOf(3));
}



No.9 generated result --------------------------


package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        // Create a new instance of the CursorLinkedList class
        CursorLinkedList<String> list = new CursorLinkedList<>();

        // Add some elements to the list
        list.add("apple");
        list.add("banana");
        list.add("cherry");

        // Test that indexOf() returns the correct index for an element in the list
        assertEquals(0, list.indexOf("apple"));
        assertEquals(1, list.indexOf("banana"));
        assertEquals(2, list.indexOf("cherry"));

        // Test that indexOf() returns -1 when the element is not found in the list
        assertEquals(-1, list.indexOf("orange"));
    }
}


No.10 generated result --------------------------


public int indexOf(T element) {
    Objects.requireNonNull(element);
    Node<T> iterator = cursorSpace[head];
    for (int i = 0; i < count; i++) {
        if (iterator.element.equals(element)) {
            return i;
        }
        iterator = cursorSpace[iterator.next];
    }

    return -1;
}

You can use the following JUnit test case to check that the indexOf() method works correctly:

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        CursorLinkedList<Integer> list = new CursorLinkedList<>();
        assertEquals(-1, list.indexOf(5));
        list.add(0);
        assertEquals(0, list.indexOf(0));
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        assertEquals(1, list.indexOf(1));
    }
}


