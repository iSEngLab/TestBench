{
    "project_name": "Java",
    "file_name": "DecimalToAnyBase.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/conversions/DecimalToAnyBase.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.conversions",
    "docstring": "/**\n     * This method produces a String value of any given input decimal in any\n     * base\n     *\n     * @param inp Decimal of which we need the value in base in String format\n     * @return string format of the converted value in the given base\n     */",
    "source_code": "\npublic static String convertToAnyBase(int inp, int base) {\n    ArrayList<Character> charArr = new ArrayList<>();\n\n    while (inp > 0) {\n        charArr.add(reVal(inp % base));\n        inp /= base;\n    }\n\n    StringBuilder str = new StringBuilder(charArr.size());\n\n    for (Character ch : charArr) {\n        str.append(ch);\n    }\n\n    return str.reverse().toString();\n}\n",
    "class_name": "DecimalToAnyBase",
    "method_name": "convertToAnyBase",
    "arguments": [
        "int inp",
        "int base"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(10, 2));\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16));\n        assertEquals(\"Z\", DecimalToAnyBase.convertToAnyBase(35, 36));\n    }\n}",
        "\npackage com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    @Test\n    public void convertToAnyBaseTest() {\n        // Test case 1: input = 0, base = 2\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 2));\n\n        // Test case 2: input = 5, base = 8\n        assertEquals(\"7\", DecimalToAnyBase.convertToAnyBase(5, 8));\n\n        // Test case 3: input = 10, base = 16\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16));\n    }\n}\n",
        "\n@Test\npublic void convertToAnyBaseTest() {\n    // Test case 1: Convert 10 to base 2\n    assertEquals(\"1010\", DecimalToAnyBase.convertToAnyBase(10, 2));\n\n    // Test case 2: Convert 37 to base 8\n    assertEquals(\"43\", DecimalToAnyBase.convertToAnyBase(37, 8));\n\n    // Test case 3: Convert 255 to base 16\n    assertEquals(\"ff\", DecimalToAnyBase.convertToAnyBase(255, 16));\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"32\", DecimalToAnyBase.convertToAnyBase(32, 10));\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    @Test\n    public void convertToAnyBaseTest() {\n        // Test case 1: input = 0, base = 2, expected output = \"0\"\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 2));\n        \n        // Test case 2: input = 5, base = 2, expected output = \"101\"\n        assertEquals(\"101\", DecimalToAnyBase.convertToAnyBase(5, 2));\n        \n        // Test case 3: input = 7, base = 8, expected output = \"111\"\n        assertEquals(\"111\", DecimalToAnyBase.convertToAnyBase(7, 8));\n    }\n}",
        "\npackage com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    @Test\n    public void convertToAnyBaseTest() {\n        int inp = 10;\n        int base = 2;\n        \n        String actualResult = DecimalToAnyBase.convertToAnyBase(inp, base);\n        assertEquals(\"1010\", actualResult);\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    @Test\n    public void convertToAnyBaseTest() {\n        int input = 25;\n        int base = 8;\n        String expectedResult = \"37\";\n        String actualResult = DecimalToAnyBase.convertToAnyBase(input, base);\n        assertEquals(expectedResult, actualResult);\n    }\n}",
        "The response to the instruction would be as follows:\n\npackage com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    @Test\n    public void convertToAnyBaseTest() {\n        int input = 10;\n        int base = 2;\n        String expectedOutput = \"1010\";\n        \n        assertEquals(expectedOutput, DecimalToAnyBase.convertToAnyBase(input, base));\n    }\n}\n\nIn this test case, we have created a new instance of the `DecimalToAnyBaseTest` class and defined the `@Test` annotation to indicate that it is a test method. We have also imported all the necessary dependencies for testing.\n\nInside the test method, we have declared two variables, `input` and `base`, which are used as inputs to the `convertToAnyBase` method. We have also defined an expected output variable called `expectedOutput` that is set to the string \"1010\".\n\nNext, we use the `assertEquals` method from the JUnit library to compare the actual output of the `convertToAnyBase` method with the expected output. If the two values are equal, the test will pass. If they are not equal, an exception will be thrown, and the test will fail.\n\nIn this way, we have written a unit test for the `DecimalToAnyBaseTest` class to ensure that it behaves as expected for different inputs and outputs.",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    @Test\n    public void convertToAnyBaseTest() {\n        // Test case 1: Convert a number to binary base\n        int inp = 5;\n        int base = 2;\n        String expectedResult = \"101\";\n        assertEquals(expectedResult, DecimalToAnyBase.convertToAnyBase(inp, base));\n        \n        // Test case 2: Convert a number to octal base\n        inp = 56789;\n        base = 8;\n        expectedResult = \"14102\";\n        assertEquals(expectedResult, DecimalToAnyBase.convertToAnyBase(inp, base));\n        \n        // Test case 3: Convert a number to hexadecimal base\n        inp = 123;\n        base = 16;\n        expectedResult = \"7B\";\n        assertEquals(expectedResult, DecimalToAnyBase.convertToAnyBase(inp, base));\n    }\n}",
        "\n@Test\npublic void convertToAnyBaseTest() {\n    int inp = 123456;\n    int base = 2;\n    String expected = \"10011100111\";\n    assertEquals(expected, DecimalToAnyBase.convertToAnyBase(inp, base));\n}\n"
    ]
}