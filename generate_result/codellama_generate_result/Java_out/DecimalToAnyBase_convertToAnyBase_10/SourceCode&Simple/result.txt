Source code: 


public static String convertToAnyBase(int inp, int base) {
    ArrayList<Character> charArr = new ArrayList<>();

    while (inp > 0) {
        charArr.add(reVal(inp % base));
        inp /= base;
    }

    StringBuilder str = new StringBuilder(charArr.size());

    for (Character ch : charArr) {
        str.append(ch);
    }

    return str.reverse().toString();
}



No.1 generated result --------------------------


package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {
    @Test
    public void convertToAnyBaseTest() {
        assertEquals("10", DecimalToAnyBase.convertToAnyBase(10, 2));
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16));
        assertEquals("Z", DecimalToAnyBase.convertToAnyBase(35, 36));
    }
}


No.2 generated result --------------------------


package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {
    @Test
    public void convertToAnyBaseTest() {
        // Test case 1: input = 0, base = 2
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 2));

        // Test case 2: input = 5, base = 8
        assertEquals("7", DecimalToAnyBase.convertToAnyBase(5, 8));

        // Test case 3: input = 10, base = 16
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16));
    }
}



No.3 generated result --------------------------


@Test
public void convertToAnyBaseTest() {
    // Test case 1: Convert 10 to base 2
    assertEquals("1010", DecimalToAnyBase.convertToAnyBase(10, 2));

    // Test case 2: Convert 37 to base 8
    assertEquals("43", DecimalToAnyBase.convertToAnyBase(37, 8));

    // Test case 3: Convert 255 to base 16
    assertEquals("ff", DecimalToAnyBase.convertToAnyBase(255, 16));
}


No.4 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {
    @Test
    public void convertToAnyBaseTest() {
        assertEquals("32", DecimalToAnyBase.convertToAnyBase(32, 10));
    }
}


No.5 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {
    @Test
    public void convertToAnyBaseTest() {
        // Test case 1: input = 0, base = 2, expected output = "0"
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 2));
        
        // Test case 2: input = 5, base = 2, expected output = "101"
        assertEquals("101", DecimalToAnyBase.convertToAnyBase(5, 2));
        
        // Test case 3: input = 7, base = 8, expected output = "111"
        assertEquals("111", DecimalToAnyBase.convertToAnyBase(7, 8));
    }
}


No.6 generated result --------------------------


package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {
    @Test
    public void convertToAnyBaseTest() {
        int inp = 10;
        int base = 2;
        
        String actualResult = DecimalToAnyBase.convertToAnyBase(inp, base);
        assertEquals("1010", actualResult);
    }
}


No.7 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {
    @Test
    public void convertToAnyBaseTest() {
        int input = 25;
        int base = 8;
        String expectedResult = "37";
        String actualResult = DecimalToAnyBase.convertToAnyBase(input, base);
        assertEquals(expectedResult, actualResult);
    }
}


No.8 generated result --------------------------

The response to the instruction would be as follows:

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {
    @Test
    public void convertToAnyBaseTest() {
        int input = 10;
        int base = 2;
        String expectedOutput = "1010";
        
        assertEquals(expectedOutput, DecimalToAnyBase.convertToAnyBase(input, base));
    }
}

In this test case, we have created a new instance of the `DecimalToAnyBaseTest` class and defined the `@Test` annotation to indicate that it is a test method. We have also imported all the necessary dependencies for testing.

Inside the test method, we have declared two variables, `input` and `base`, which are used as inputs to the `convertToAnyBase` method. We have also defined an expected output variable called `expectedOutput` that is set to the string "1010".

Next, we use the `assertEquals` method from the JUnit library to compare the actual output of the `convertToAnyBase` method with the expected output. If the two values are equal, the test will pass. If they are not equal, an exception will be thrown, and the test will fail.

In this way, we have written a unit test for the `DecimalToAnyBaseTest` class to ensure that it behaves as expected for different inputs and outputs.


No.9 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {
    @Test
    public void convertToAnyBaseTest() {
        // Test case 1: Convert a number to binary base
        int inp = 5;
        int base = 2;
        String expectedResult = "101";
        assertEquals(expectedResult, DecimalToAnyBase.convertToAnyBase(inp, base));
        
        // Test case 2: Convert a number to octal base
        inp = 56789;
        base = 8;
        expectedResult = "14102";
        assertEquals(expectedResult, DecimalToAnyBase.convertToAnyBase(inp, base));
        
        // Test case 3: Convert a number to hexadecimal base
        inp = 123;
        base = 16;
        expectedResult = "7B";
        assertEquals(expectedResult, DecimalToAnyBase.convertToAnyBase(inp, base));
    }
}


No.10 generated result --------------------------


@Test
public void convertToAnyBaseTest() {
    int inp = 123456;
    int base = 2;
    String expected = "10011100111";
    assertEquals(expected, DecimalToAnyBase.convertToAnyBase(inp, base));
}



