{
    "project_name": "Java",
    "file_name": "FibonacciHeap.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/heaps/FibonacciHeap.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.heaps",
    "docstring": "/**\n     * Creates a node (of type HeapNode) which contains the given key, and inserts it into the heap.\n     *\n     * @pre key>=0\n     * @post (numOfnodes = = $prev numOfnodes + 1)\n     * @post empty == false\n     * $ret = the HeapNode we inserted\n     */",
    "source_code": "\npublic HeapNode insert(int key) {\n    HeapNode toInsert = new HeapNode(key); // creates the node\n    if (this.empty()) {\n        this.min = toInsert;\n    } else { // tree is not empty\n        min.setNext(toInsert);\n        this.updateMin(toInsert);\n    }\n    this.numOfHeapNodes++;\n    this.numOfTrees++;\n    return toInsert;\n}\n",
    "class_name": "FibonacciHeap",
    "method_name": "insert",
    "arguments": [
        "int key"
    ],
    "generate_test": [
        "@Test\npublic void insertTest() {\n    // Create a new instance of FibonacciHeap\n    FibonacciHeap heap = new FibonacciHeap();\n\n    // Insert a new node with key 5 into the heap\n    HeapNode toInsert = heap.insert(5);\n\n    // Assert that the returned node is equal to the one inserted\n    assertEquals(toInsert, new HeapNode(5));\n\n    // Assert that the minimum value of the heap has been updated correctly\n    assertEquals(heap.findMin(), new HeapNode(5));\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    HeapNode inserted = heap.insert(5);\n    assertEquals(heap.min, inserted);\n    assertEquals(1, heap.numOfTrees);\n    assertEquals(1, heap.numOfHeapNodes);\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        // Create a new instance of the FibonacciHeap\n        FibonacciHeap fibonacciHeap = new FibonacciHeap();\n        \n        // Insert an element into the heap\n        HeapNode insertedNode = fibonacciHeap.insert(10);\n        \n        // Check if the minimum node is updated correctly\n        assertEquals(insertedNode, fibonacciHeap.min);\n    }\n}",
        "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        FibonacciHeap fib = new FibonacciHeap();\n        \n        HeapNode inserted1 = fib.insert(5);\n        assertEquals(5, inserted1.key);\n        assertEquals(0, inserted1.rank);\n        assertFalse(inserted1.marked);\n        assertNull(inserted1.child);\n        assertNull(inserted1.next);\n        assertNull(inserted1.prev);\n        \n        HeapNode inserted2 = fib.insert(3);\n        assertEquals(3, inserted2.key);\n        assertEquals(0, inserted2.rank);\n        assertFalse(inserted2.marked);\n        assertNull(inserted2.child);\n        assertNull(inserted2.next);\n        assertNull(inserted2.prev);\n        \n        HeapNode inserted3 = fib.insert(10);\n        assertEquals(10, inserted3.key);\n        assertEquals(0, inserted3.rank);\n        assertFalse(inserted3.marked);\n        assertNull(inserted3.child);\n        assertNull(inserted3.next);\n        assertNull(inserted3.prev);\n        \n        HeapNode min = fib.findMin();\n        assertEquals(3, min.key);\n        assertFalse(min.marked);\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        // Create a new FibonacciHeap object\n        FibonacciHeap heap = new FibonacciHeap();\n\n        // Insert a new node with key 5\n        HeapNode insertedNode = heap.insert(5);\n\n        // Check that the inserted node has the correct key\n        assertEquals(5, insertedNode.getKey());\n\n        // Check that the inserted node is the minimum of the heap\n        assertEquals(insertedNode, heap.findMin());\n\n        // Insert another new node with key 3\n        HeapNode insertedNode2 = heap.insert(3);\n\n        // Check that the second inserted node has the correct key\n        assertEquals(3, insertedNode2.getKey());\n\n        // Check that the second inserted node is not the minimum of the heap\n        assertNotEquals(insertedNode2, heap.findMin());\n    }\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    HeapNode node = heap.insert(5);\n    assertEquals(5, node.getKey());\n    assertNull(node.child);\n    assertNull(node.prev);\n    assertNull(node.next);\n    assertNull(node.parent);\n    assertFalse(node.marked);\n    assertEquals(1, heap.numOfHeapNodes);\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        \n        // Test inserting a single node with key 5\n        HeapNode node1 = heap.insert(5);\n        assertEquals(node1.getKey(), 5);\n        assertTrue(node1.isRoot());\n        \n        // Test inserting two nodes with keys 3 and 7\n        HeapNode node2 = heap.insert(3);\n        HeapNode node3 = heap.insert(7);\n        assertEquals(node2.getKey(), 3);\n        assertTrue(node2.isRoot());\n        assertEquals(node3.getKey(), 7);\n        assertFalse(node3.isRoot());\n        \n        // Test inserting a node with key 10 and checking that it is the new min\n        HeapNode node4 = heap.insert(10);\n        assertEquals(heap.findMin().getKey(), 10);\n    }\n}\n",
        "\npublic class FibonacciHeapTest {\n    private FibonacciHeap heap;\n\n    @BeforeEach\n    public void setUp() {\n        heap = new FibonacciHeap();\n    }\n\n    @Test\n    public void insertTest() {\n        int key = 5;\n        HeapNode toInsert = new HeapNode(key);\n        HeapNode insertedNode = heap.insert(toInsert);\n\n        assertEquals(toInsert, insertedNode);\n        assertEquals(1, heap.numOfHeapNodes);\n    }\n}",
        "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        HeapNode node1 = heap.insert(1);\n        assertEquals(node1.getKey(), 1, \"Incorrect key returned for inserted node\");\n        assertTrue(heap.empty(), \"Heap should be empty after inserting a single node\");\n        assertEquals(heap.min, node1, \"The min node of the heap should be the same as the inserted node\");\n    }\n}",
        "@Test\npublic void insertTest() {\n    // Create a new FibonacciHeap instance\n    FibonacciHeap heap = new FibonacciHeap();\n    \n    // Insert an element into the heap\n    HeapNode node = heap.insert(5);\n    \n    // Check that the element was inserted correctly\n    assertEquals(node.getKey(), 5);\n}"
    ]
}