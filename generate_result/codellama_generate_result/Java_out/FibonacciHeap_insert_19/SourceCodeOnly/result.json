{
    "project_name": "Java",
    "file_name": "FibonacciHeap.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/heaps/FibonacciHeap.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.heaps",
    "docstring": "/**\n     * Creates a node (of type HeapNode) which contains the given key, and inserts it into the heap.\n     *\n     * @pre key>=0\n     * @post (numOfnodes = = $prev numOfnodes + 1)\n     * @post empty == false\n     * $ret = the HeapNode we inserted\n     */",
    "source_code": "\npublic HeapNode insert(int key) {\n    HeapNode toInsert = new HeapNode(key); // creates the node\n    if (this.empty()) {\n        this.min = toInsert;\n    } else { // tree is not empty\n        min.setNext(toInsert);\n        this.updateMin(toInsert);\n    }\n    this.numOfHeapNodes++;\n    this.numOfTrees++;\n    return toInsert;\n}\n",
    "class_name": "FibonacciHeap",
    "method_name": "insert",
    "arguments": [
        "int key"
    ],
    "generate_test": [
        "\n@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n\n    HeapNode node1 = heap.insert(3);\n    assertEquals(3, node1.getKey());\n    assertNull(node1.getNext());\n    assertTrue(heap.contains(node1));\n\n    HeapNode node2 = heap.insert(5);\n    assertEquals(5, node2.getKey());\n    assertNull(node2.getNext());\n    assertTrue(heap.contains(node2));\n\n    HeapNode node3 = heap.insert(1);\n    assertEquals(1, node3.getKey());\n    assertNotNull(node3.getNext());\n    assertTrue(heap.contains(node3));\n\n    assertEquals(3, heap.numOfHeapNodes());\n    assertEquals(2, heap.numOfTrees());\n}",
        "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        HeapNode node1 = heap.insert(5); // insert a node with key value 5\n        assertEquals(node1.key, 5); // check that the node's key is set correctly\n        assertEquals(heap.numOfHeapNodes, 1); // check that the number of nodes in the heap is incremented correctly\n        assertEquals(heap.min.key, 5); // check that the minimum node is set correctly\n        \n        HeapNode node2 = heap.insert(3); // insert a node with key value 3\n        assertEquals(node2.key, 3); // check that the node's key is set correctly\n        assertEquals(heap.numOfHeapNodes, 2); // check that the number of nodes in the heap is incremented correctly\n        assertEquals(heap.min.key, 3); // check that the minimum node is set correctly\n        \n        HeapNode node3 = heap.insert(10); // insert a node with key value 10\n        assertEquals(node3.key, 10); // check that the node's key is set correctly\n        assertEquals(heap.numOfHeapNodes, 3); // check that the number of nodes in the heap is incremented correctly\n        assertEquals(heap.min.key, 3); // check that the minimum node is still correct\n        \n        HeapNode node4 = heap.insert(8); // insert a node with key value 8\n        assertEquals(node4.key, 8); // check that the node's key is set correctly\n        assertEquals(heap.numOfHeapNodes, 4); // check that the number of nodes in the heap is incremented correctly\n        assertEquals(heap.min.key, 3); // check that the minimum node is still correct\n    }\n}",
        "\n@Test\npublic void insertTest() {\n    // Set up the test fixture\n    FibonacciHeap<Integer> heap = new FibonacciHeap<>();\n    HeapNode<Integer> toInsert = new HeapNode<>(10);\n\n    // Test that the node is inserted correctly\n    HeapNode<Integer> actual = heap.insert(toInsert);\n    assertEquals(actual, toInsert);\n    assertEquals(heap.getNumOfHeapNodes(), 1);\n    assertEquals(heap.getMin().getValue(), toInsert.getValue());\n\n    // Test that the node is inserted correctly when there are other nodes in the heap\n    heap.insert(new HeapNode<>(20));\n    heap.insert(new HeapNode<>(30));\n    actual = heap.insert(toInsert);\n    assertEquals(actual, toInsert);\n    assertEquals(heap.getNumOfHeapNodes(), 4);\n    assertEquals(heap.getMin().getValue(), toInsert.getValue());\n}",
        "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap(); // create a new empty heap\n        \n        HeapNode toInsert1 = new HeapNode(5); // create the node to be inserted\n        HeapNode toInsert2 = new HeapNode(3); // create the node to be inserted\n        \n        // insert the nodes into the heap\n        heap.insert(toInsert1);\n        heap.insert(toInsert2);\n        \n        assertEquals(heap.min, toInsert1); // check that the min value is correct\n        assertEquals(heap.numOfHeapNodes, 2); // check that the number of nodes in the heap is correct\n        assertEquals(heap.numOfTrees, 2); // check that the number of trees in the heap is correct\n        \n        // check that the nodes are linked correctly\n        assertEquals(toInsert1.next, toInsert2);\n    }\n}",
        "\npackage com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        HeapNode node1 = heap.insert(1);\n        assertEquals(1, heap.min.key);\n        assertEquals(node1, heap.min);\n        assertEquals(2, heap.numOfHeapNodes); // 1 + 1 inserted nodes\n        assertEquals(1, heap.numOfTrees); // 1 tree created\n        \n        HeapNode node2 = heap.insert(2);\n        assertEquals(2, heap.min.key);\n        assertEquals(node2, heap.min);\n        assertEquals(3, heap.numOfHeapNodes); // 2 + 1 inserted nodes\n        assertEquals(2, heap.numOfTrees); // 1 tree created\n        \n        HeapNode node3 = heap.insert(3);\n        assertEquals(3, heap.min.key);\n        assertEquals(node3, heap.min);\n        assertEquals(4, heap.numOfHeapNodes); // 3 + 1 inserted nodes\n        assertEquals(2, heap.numOfTrees); // 1 tree created\n        \n        HeapNode node4 = heap.insert(4);\n        assertEquals(4, heap.min.key);\n        assertEquals(node4, heap.min);\n        assertEquals(5, heap.numOfHeapNodes); // 4 + 1 inserted nodes\n        assertEquals(2, heap.numOfTrees); // 1 tree created\n    }\n}",
        "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap(); // create a new instance of the heap\n        HeapNode node = heap.insert(10); // insert a node with key 10 into the heap\n        assertEquals(node.getKey(), 10, \"The inserted node should have key 10\"); // test that the inserted node has key 10\n        assertTrue(heap.contains(10), \"The heap should contain the inserted node with key 10\"); // test that the heap contains the inserted node\n    }\n}",
        "\npackage com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        // Create a new instance of the FibonacciHeap class\n        FibonacciHeap heap = new FibonacciHeap();\n        \n        // Insert an element into the heap\n        int key = 10;\n        HeapNode toInsert = heap.insert(key);\n        \n        // Check that the insertion was successful\n        assertNotNull(toInsert);\n        assertEquals(key, toInsert.getKey());\n        \n        // Check that the minimum element of the heap is correct\n        assertEquals(heap.min(), toInsert);\n    }\n}",
        "\npackage com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        \n        // Test case 1: Inserting a single node into an empty heap\n        int key = 5;\n        HeapNode toInsert = new HeapNode(key);\n        assertTrue(heap.empty());\n        assertEquals(0, heap.numOfHeapNodes);\n        assertNull(heap.min);\n        \n        // Inserting the node into the heap\n        heap.insert(toInsert);\n        \n        // Checking that the node was inserted correctly\n        assertFalse(heap.empty());\n        assertEquals(1, heap.numOfHeapNodes);\n        assertNotNull(heap.min);\n        assertEquals(key, heap.min.key);\n        \n        // Test case 2: Inserting a node into a non-empty heap\n        key = 7;\n        toInsert = new HeapNode(key);\n        assertFalse(heap.empty());\n        assertEquals(1, heap.numOfHeapNodes);\n        assertNotNull(heap.min);\n        \n        // Inserting the node into the heap\n        heap.insert(toInsert);\n        \n        // Checking that the node was inserted correctly\n        assertFalse(heap.empty());\n        assertEquals(2, heap.numOfHeapNodes);\n        assertNotNull(heap.min);\n        assertEquals(key, heap.min.key);\n    }\n}\n",
        "\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        // Create a new instance of the Fibonacci heap\n        FibonacciHeap heap = new FibonacciHeap();\n\n        // Insert 3 nodes into the heap\n        heap.insert(10);\n        heap.insert(5);\n        heap.insert(8);\n\n        // Assert that the size of the heap is now 3\n        assertEquals(3, heap.size());\n\n        // Assert that the root node has the minimum key value\n        assertEquals(5, heap.min.key);\n\n        // Assert that the tree structure is correct\n        assertEquals(10, heap.min.left.key);\n        assertEquals(8, heap.min.right.key);\n    }\n}\n",
        "\npackage com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        // create a new instance of the heap\n        FibonacciHeap<Integer> fibonacciHeap = new FibonacciHeap<>();\n        \n        // create a new node to insert into the heap\n        HeapNode<Integer> toInsert = new HeapNode<>(1);\n        \n        // perform the insertion operation\n        fibonacciHeap.insert(toInsert);\n        \n        // check that the size of the heap is 1\n        assertEquals(fibonacciHeap.size(), 1);\n        \n        // check that the minimum element in the heap is equal to the inserted node\n        assertEquals(fibonacciHeap.min, toInsert);\n    }\n}"
    ]
}