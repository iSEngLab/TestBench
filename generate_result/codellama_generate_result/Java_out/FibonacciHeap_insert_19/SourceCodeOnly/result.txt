Source code: 


public HeapNode insert(int key) {
    HeapNode toInsert = new HeapNode(key); // creates the node
    if (this.empty()) {
        this.min = toInsert;
    } else { // tree is not empty
        min.setNext(toInsert);
        this.updateMin(toInsert);
    }
    this.numOfHeapNodes++;
    this.numOfTrees++;
    return toInsert;
}



No.1 generated result --------------------------


@Test
public void insertTest() {
    FibonacciHeap heap = new FibonacciHeap();

    HeapNode node1 = heap.insert(3);
    assertEquals(3, node1.getKey());
    assertNull(node1.getNext());
    assertTrue(heap.contains(node1));

    HeapNode node2 = heap.insert(5);
    assertEquals(5, node2.getKey());
    assertNull(node2.getNext());
    assertTrue(heap.contains(node2));

    HeapNode node3 = heap.insert(1);
    assertEquals(1, node3.getKey());
    assertNotNull(node3.getNext());
    assertTrue(heap.contains(node3));

    assertEquals(3, heap.numOfHeapNodes());
    assertEquals(2, heap.numOfTrees());
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {
    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap();
        HeapNode node1 = heap.insert(5); // insert a node with key value 5
        assertEquals(node1.key, 5); // check that the node's key is set correctly
        assertEquals(heap.numOfHeapNodes, 1); // check that the number of nodes in the heap is incremented correctly
        assertEquals(heap.min.key, 5); // check that the minimum node is set correctly
        
        HeapNode node2 = heap.insert(3); // insert a node with key value 3
        assertEquals(node2.key, 3); // check that the node's key is set correctly
        assertEquals(heap.numOfHeapNodes, 2); // check that the number of nodes in the heap is incremented correctly
        assertEquals(heap.min.key, 3); // check that the minimum node is set correctly
        
        HeapNode node3 = heap.insert(10); // insert a node with key value 10
        assertEquals(node3.key, 10); // check that the node's key is set correctly
        assertEquals(heap.numOfHeapNodes, 3); // check that the number of nodes in the heap is incremented correctly
        assertEquals(heap.min.key, 3); // check that the minimum node is still correct
        
        HeapNode node4 = heap.insert(8); // insert a node with key value 8
        assertEquals(node4.key, 8); // check that the node's key is set correctly
        assertEquals(heap.numOfHeapNodes, 4); // check that the number of nodes in the heap is incremented correctly
        assertEquals(heap.min.key, 3); // check that the minimum node is still correct
    }
}


No.3 generated result --------------------------


@Test
public void insertTest() {
    // Set up the test fixture
    FibonacciHeap<Integer> heap = new FibonacciHeap<>();
    HeapNode<Integer> toInsert = new HeapNode<>(10);

    // Test that the node is inserted correctly
    HeapNode<Integer> actual = heap.insert(toInsert);
    assertEquals(actual, toInsert);
    assertEquals(heap.getNumOfHeapNodes(), 1);
    assertEquals(heap.getMin().getValue(), toInsert.getValue());

    // Test that the node is inserted correctly when there are other nodes in the heap
    heap.insert(new HeapNode<>(20));
    heap.insert(new HeapNode<>(30));
    actual = heap.insert(toInsert);
    assertEquals(actual, toInsert);
    assertEquals(heap.getNumOfHeapNodes(), 4);
    assertEquals(heap.getMin().getValue(), toInsert.getValue());
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {
    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap(); // create a new empty heap
        
        HeapNode toInsert1 = new HeapNode(5); // create the node to be inserted
        HeapNode toInsert2 = new HeapNode(3); // create the node to be inserted
        
        // insert the nodes into the heap
        heap.insert(toInsert1);
        heap.insert(toInsert2);
        
        assertEquals(heap.min, toInsert1); // check that the min value is correct
        assertEquals(heap.numOfHeapNodes, 2); // check that the number of nodes in the heap is correct
        assertEquals(heap.numOfTrees, 2); // check that the number of trees in the heap is correct
        
        // check that the nodes are linked correctly
        assertEquals(toInsert1.next, toInsert2);
    }
}


No.5 generated result --------------------------


package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {
    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap();
        HeapNode node1 = heap.insert(1);
        assertEquals(1, heap.min.key);
        assertEquals(node1, heap.min);
        assertEquals(2, heap.numOfHeapNodes); // 1 + 1 inserted nodes
        assertEquals(1, heap.numOfTrees); // 1 tree created
        
        HeapNode node2 = heap.insert(2);
        assertEquals(2, heap.min.key);
        assertEquals(node2, heap.min);
        assertEquals(3, heap.numOfHeapNodes); // 2 + 1 inserted nodes
        assertEquals(2, heap.numOfTrees); // 1 tree created
        
        HeapNode node3 = heap.insert(3);
        assertEquals(3, heap.min.key);
        assertEquals(node3, heap.min);
        assertEquals(4, heap.numOfHeapNodes); // 3 + 1 inserted nodes
        assertEquals(2, heap.numOfTrees); // 1 tree created
        
        HeapNode node4 = heap.insert(4);
        assertEquals(4, heap.min.key);
        assertEquals(node4, heap.min);
        assertEquals(5, heap.numOfHeapNodes); // 4 + 1 inserted nodes
        assertEquals(2, heap.numOfTrees); // 1 tree created
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {
    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap(); // create a new instance of the heap
        HeapNode node = heap.insert(10); // insert a node with key 10 into the heap
        assertEquals(node.getKey(), 10, "The inserted node should have key 10"); // test that the inserted node has key 10
        assertTrue(heap.contains(10), "The heap should contain the inserted node with key 10"); // test that the heap contains the inserted node
    }
}


No.7 generated result --------------------------


package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {
    @Test
    public void insertTest() {
        // Create a new instance of the FibonacciHeap class
        FibonacciHeap heap = new FibonacciHeap();
        
        // Insert an element into the heap
        int key = 10;
        HeapNode toInsert = heap.insert(key);
        
        // Check that the insertion was successful
        assertNotNull(toInsert);
        assertEquals(key, toInsert.getKey());
        
        // Check that the minimum element of the heap is correct
        assertEquals(heap.min(), toInsert);
    }
}


No.8 generated result --------------------------


package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {
    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap();
        
        // Test case 1: Inserting a single node into an empty heap
        int key = 5;
        HeapNode toInsert = new HeapNode(key);
        assertTrue(heap.empty());
        assertEquals(0, heap.numOfHeapNodes);
        assertNull(heap.min);
        
        // Inserting the node into the heap
        heap.insert(toInsert);
        
        // Checking that the node was inserted correctly
        assertFalse(heap.empty());
        assertEquals(1, heap.numOfHeapNodes);
        assertNotNull(heap.min);
        assertEquals(key, heap.min.key);
        
        // Test case 2: Inserting a node into a non-empty heap
        key = 7;
        toInsert = new HeapNode(key);
        assertFalse(heap.empty());
        assertEquals(1, heap.numOfHeapNodes);
        assertNotNull(heap.min);
        
        // Inserting the node into the heap
        heap.insert(toInsert);
        
        // Checking that the node was inserted correctly
        assertFalse(heap.empty());
        assertEquals(2, heap.numOfHeapNodes);
        assertNotNull(heap.min);
        assertEquals(key, heap.min.key);
    }
}



No.9 generated result --------------------------


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {
    @Test
    public void insertTest() {
        // Create a new instance of the Fibonacci heap
        FibonacciHeap heap = new FibonacciHeap();

        // Insert 3 nodes into the heap
        heap.insert(10);
        heap.insert(5);
        heap.insert(8);

        // Assert that the size of the heap is now 3
        assertEquals(3, heap.size());

        // Assert that the root node has the minimum key value
        assertEquals(5, heap.min.key);

        // Assert that the tree structure is correct
        assertEquals(10, heap.min.left.key);
        assertEquals(8, heap.min.right.key);
    }
}



No.10 generated result --------------------------


package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {
    @Test
    public void insertTest() {
        // create a new instance of the heap
        FibonacciHeap<Integer> fibonacciHeap = new FibonacciHeap<>();
        
        // create a new node to insert into the heap
        HeapNode<Integer> toInsert = new HeapNode<>(1);
        
        // perform the insertion operation
        fibonacciHeap.insert(toInsert);
        
        // check that the size of the heap is 1
        assertEquals(fibonacciHeap.size(), 1);
        
        // check that the minimum element in the heap is equal to the inserted node
        assertEquals(fibonacciHeap.min, toInsert);
    }
}


