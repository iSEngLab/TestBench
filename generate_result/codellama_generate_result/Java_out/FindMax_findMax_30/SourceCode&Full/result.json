{
    "project_name": "Java",
    "file_name": "FindMax.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/FindMax.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * @brief finds the maximum value stored in the input array\n     *\n     * @param array the input array\n     * @exception IllegalArgumentException input array is empty\n     * @return the maximum value stored in the input array\n     */",
    "source_code": "\npublic static int findMax(final int[] array) {\n    int n = array.length;\n    if (n == 0) {\n        throw new IllegalArgumentException(\"Array must be non-empty.\");\n    }\n    int max = array[0];\n    for (int i = 1; i < n; i++) {\n        if (array[i] > max) {\n            max = array[i];\n        }\n    }\n    return max;\n}\n",
    "class_name": "FindMax",
    "method_name": "findMax",
    "arguments": [
        "int[] array"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] inputArray = new int[]{1, 2, 3, 4, 5};\n        assertEquals(5, FindMax.findMax(inputArray));\n\n        inputArray = new int[]{5, 4, 3, 2, 1};\n        assertEquals(5, FindMax.findMax(inputArray));\n\n        inputArray = new int[]{-1, -2, -3, -4, -5};\n        assertEquals(-1, FindMax.findMax(inputArray));\n\n        inputArray = new int[]{Integer.MIN_VALUE, Integer.MAX_VALUE};\n        assertEquals(Integer.MAX_VALUE, FindMax.findMax(inputArray));\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        // Test case 1: Empty array\n        int[] emptyArray = {};\n        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(emptyArray));\n        \n        // Test case 2: Array with only one element\n        int[] arrayWithOneElement = {4};\n        assertEquals(4, FindMax.findMax(arrayWithOneElement));\n        \n        // Test case 3: Array with multiple elements\n        int[] arrayWithMultipleElements = {1, 2, 3, 4, 5};\n        assertEquals(5, FindMax.findMax(arrayWithMultipleElements));\n    }\n}",
        "@Test\npublic void findMaxTest() {\n    int[] arr = new int[] {1, 2, 3, 4};\n    assertEquals(FindMax.findMax(arr), 4);\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] arr = new int[]{1, 2, 3};\n        assertEquals(3, FindMax.findMax(arr));\n        \n        arr = new int[]{4, 5, 6};\n        assertEquals(6, FindMax.findMax(arr));\n        \n        arr = new int[]{7, 8, 9};\n        assertEquals(9, FindMax.findMax(arr));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = new int[] {1, 2, 3};\n        assertEquals(3, FindMax.findMax(array));\n\n        array = new int[] {4, 5, 6};\n        assertEquals(6, FindMax.findMax(array));\n\n        array = new int[] {7, 8, 9};\n        assertEquals(9, FindMax.findMax(array));\n\n        array = new int[] {};\n        try {\n            FindMax.findMax(array);\n            fail(\"Should throw an exception for empty input array\");\n        } catch (IllegalArgumentException e) {\n            // Expected exception\n        }\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        // Test case 1: empty array\n        int[] array = {};\n        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(array));\n        \n        // Test case 2: single element array\n        array = new int[]{1};\n        assertEquals(1, FindMax.findMax(array));\n        \n        // Test case 3: multiple elements array\n        array = new int[]{1, 2, 3, 4, 5};\n        assertEquals(5, FindMax.findMax(array));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] emptyArray = {};\n        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(emptyArray));\n\n        int[] nonEmptyArray1 = {1, 2, 3};\n        assertEquals(3, FindMax.findMax(nonEmptyArray1));\n\n        int[] nonEmptyArray2 = {-1, -2, -3};\n        assertEquals(-1, FindMax.findMax(nonEmptyArray2));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = new int[] {1, 2, 3, 4, 5};\n        assertEquals(5, FindMax.findMax(array));\n        \n        array = new int[] {-1, -2, -3, -4, -5};\n        assertEquals(-1, FindMax.findMax(array));\n        \n        array = new int[] {0, 0, 0, 0, 0};\n        assertEquals(0, FindMax.findMax(array));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = new int[]{1, 2, 3, 4, 5};\n        assertEquals(FindMax.findMax(array), 5);\n        \n        array = new int[]{9, 8, 7, 6, 5, 4, 3, 2, 1};\n        assertEquals(FindMax.findMax(array), 9);\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = {1, 2, 3};\n        assertEquals(3, FindMax.findMax(array));\n    }\n}"
    ]
}