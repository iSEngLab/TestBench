Source code: 


public static int findMax(final int[] array) {
    int n = array.length;
    if (n == 0) {
        throw new IllegalArgumentException("Array must be non-empty.");
    }
    int max = array[0];
    for (int i = 1; i < n; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    return max;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        int[] inputArray = new int[]{1, 2, 3, 4, 5};
        assertEquals(5, FindMax.findMax(inputArray));

        inputArray = new int[]{5, 4, 3, 2, 1};
        assertEquals(5, FindMax.findMax(inputArray));

        inputArray = new int[]{-1, -2, -3, -4, -5};
        assertEquals(-1, FindMax.findMax(inputArray));

        inputArray = new int[]{Integer.MIN_VALUE, Integer.MAX_VALUE};
        assertEquals(Integer.MAX_VALUE, FindMax.findMax(inputArray));
    }
}


No.2 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        // Test case 1: Empty array
        int[] emptyArray = {};
        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(emptyArray));
        
        // Test case 2: Array with only one element
        int[] arrayWithOneElement = {4};
        assertEquals(4, FindMax.findMax(arrayWithOneElement));
        
        // Test case 3: Array with multiple elements
        int[] arrayWithMultipleElements = {1, 2, 3, 4, 5};
        assertEquals(5, FindMax.findMax(arrayWithMultipleElements));
    }
}


No.3 generated result --------------------------

@Test
public void findMaxTest() {
    int[] arr = new int[] {1, 2, 3, 4};
    assertEquals(FindMax.findMax(arr), 4);
}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        int[] arr = new int[]{1, 2, 3};
        assertEquals(3, FindMax.findMax(arr));
        
        arr = new int[]{4, 5, 6};
        assertEquals(6, FindMax.findMax(arr));
        
        arr = new int[]{7, 8, 9};
        assertEquals(9, FindMax.findMax(arr));
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        int[] array = new int[] {1, 2, 3};
        assertEquals(3, FindMax.findMax(array));

        array = new int[] {4, 5, 6};
        assertEquals(6, FindMax.findMax(array));

        array = new int[] {7, 8, 9};
        assertEquals(9, FindMax.findMax(array));

        array = new int[] {};
        try {
            FindMax.findMax(array);
            fail("Should throw an exception for empty input array");
        } catch (IllegalArgumentException e) {
            // Expected exception
        }
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        // Test case 1: empty array
        int[] array = {};
        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(array));
        
        // Test case 2: single element array
        array = new int[]{1};
        assertEquals(1, FindMax.findMax(array));
        
        // Test case 3: multiple elements array
        array = new int[]{1, 2, 3, 4, 5};
        assertEquals(5, FindMax.findMax(array));
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        int[] emptyArray = {};
        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(emptyArray));

        int[] nonEmptyArray1 = {1, 2, 3};
        assertEquals(3, FindMax.findMax(nonEmptyArray1));

        int[] nonEmptyArray2 = {-1, -2, -3};
        assertEquals(-1, FindMax.findMax(nonEmptyArray2));
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        int[] array = new int[] {1, 2, 3, 4, 5};
        assertEquals(5, FindMax.findMax(array));
        
        array = new int[] {-1, -2, -3, -4, -5};
        assertEquals(-1, FindMax.findMax(array));
        
        array = new int[] {0, 0, 0, 0, 0};
        assertEquals(0, FindMax.findMax(array));
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        int[] array = new int[]{1, 2, 3, 4, 5};
        assertEquals(FindMax.findMax(array), 5);
        
        array = new int[]{9, 8, 7, 6, 5, 4, 3, 2, 1};
        assertEquals(FindMax.findMax(array), 9);
    }
}


No.10 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        int[] array = {1, 2, 3};
        assertEquals(3, FindMax.findMax(array));
    }
}


