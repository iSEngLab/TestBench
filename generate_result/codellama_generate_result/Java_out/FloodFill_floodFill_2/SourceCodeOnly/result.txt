Source code: 


public static void floodFill(final int[][] image, final int x, final int y, final int newColor, final int oldColor) {
    if (newColor == oldColor || x < 0 || x >= image.length || y < 0 || y >= image[x].length || getPixel(image, x, y) != oldColor) {
        return;
    }

    putPixel(image, x, y, newColor);

    /* Recursively check for horizontally & vertically adjacent coordinates */
    floodFill(image, x + 1, y, newColor, oldColor);
    floodFill(image, x - 1, y, newColor, oldColor);
    floodFill(image, x, y + 1, newColor, oldColor);
    floodFill(image, x, y - 1, newColor, oldColor);

    /* Recursively check for diagonally adjacent coordinates  */
    floodFill(image, x + 1, y - 1, newColor, oldColor);
    floodFill(image, x - 1, y + 1, newColor, oldColor);
    floodFill(image, x + 1, y + 1, newColor, oldColor);
    floodFill(image, x - 1, y - 1, newColor, oldColor);
}



No.1 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = new int[5][5]; // Initialize the 2D array of size 5x5
    int x = 0, y = 0; // Set the starting coordinates (x=0, y=0)
    int oldColor = 1; // Set the initial color to be replaced (oldColor=1)
    int newColor = 2; // Set the replacement color (newColor=2)

    image[0][0] = 1; // Initialize the first element of the array
    image[1][1] = 1; // Initialize the second element of the array
    image[2][2] = 1; // Initialize the third element of the array
    image[3][3] = 1; // Initialize the fourth element of the array
    image[4][4] = 1; // Initialize the fifth element of the array

    floodFill(image, x, y, newColor, oldColor); // Call the floodFill function

    assertEquals(2, image[0][0]); // Assert that the first element has been replaced
    assertEquals(2, image[1][1]); // Assert that the second element has been replaced
    assertEquals(2, image[2][2]); // Assert that the third element has been replaced
    assertEquals(2, image[3][3]); // Assert that the fourth element has been replaced
    assertEquals(2, image[4][4]); // Assert that the fifth element has been replaced
}


No.2 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {
    @Test
    public void floodFillTest() {
        int[][] image = new int[3][3];
        int x = 0;
        int y = 1;
        int newColor = 255;
        int oldColor = 0;

        image[x][y] = oldColor;
        FloodFill.floodFill(image, x, y, newColor, oldColor);

        assertEquals(newColor, image[x][y]);
    }
}


No.3 generated result --------------------------


package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {
    @Test
    public void floodFillTest() {
        int[][] image = new int[][] {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        int x = 0;
        int y = 0;
        int newColor = 10;
        int oldColor = 0;
        
        floodFill(image, x, y, newColor, oldColor);
        
        assertEquals(newColor, image[x][y]);
    }
}


No.4 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {
    @Test
    public void floodFillTest() {
        int[][] image = new int[3][3];
        image[0][0] = 1; // blue pixel
        image[1][0] = 2; // red pixel
        image[2][0] = 3; // green pixel
        image[0][1] = 4; // yellow pixel
        image[1][1] = 5; // purple pixel
        image[2][1] = 6; // blue pixel
        image[0][2] = 7; // brown pixel
        image[1][2] = 8; // pink pixel
        image[2][2] = 9; // orange pixel

        int x = 1, y = 1, newColor = 10, oldColor = 5;
        floodFill(image, x, y, newColor, oldColor);

        assertEquals(10, image[0][0]);
        assertEquals(2, image[1][0]); // unchanged pixel
        assertEquals(3, image[2][0]);
        assertEquals(4, image[0][1]);
        assertEquals(10, image[1][1]); // changed pixel
        assertEquals(6, image[2][1]);
        assertEquals(7, image[0][2]);
        assertEquals(8, image[1][2]);
        assertEquals(9, image[2][2]);
    }
}


No.5 generated result --------------------------


Before:
0 0 0
0 0 0
0 0 0

After:
1 1 1
1 1 1
1 1 1



No.6 generated result --------------------------

@Test
public void floodFillTest() {
    // Set up the test data
    int[][] image = new int[3][4];
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 4; j++) {
            if ((i == 1 && j == 2) || (i == 2 && j == 3)) {
                image[i][j] = 1; // Set the pixel to old color
            } else {
                image[i][j] = 0; // Set the pixel to new color
            }
        }
    }

    // Test that the flood fill algorithm correctly fills the image
    FloodFill.floodFill(image, 1, 2, 1, 0);
    assertEquals(1, image[0][0]); // Top left pixel should be filled
    assertEquals(1, image[0][1]); // Top right pixel should be filled
    assertEquals(1, image[0][2]); // Bottom left pixel should be filled
    assertEquals(1, image[0][3]); // Bottom right pixel should be filled
    assertEquals(1, image[1][0]); // Left side of the fill area should be filled
    assertEquals(1, image[1][1]); // Right side of the fill area should be filled
    assertEquals(1, image[2][0]); // Top row of the fill area should be filled
    assertEquals(1, image[2][1]); // Bottom row of the fill area should be filled
}


No.7 generated result --------------------------


package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {
    @Test
    public void floodFillTest() {
        int[][] image = new int[3][4];
        image[0][0] = 1;
        image[1][2] = 2;
        image[2][3] = 3;
        image[1][1] = 0;
        floodFill(image, 1, 1, 4, 0);
        assertEquals(4, getPixel(image, 0, 0));
        assertEquals(4, getPixel(image, 1, 2));
        assertEquals(3, getPixel(image, 2, 3));
        assertEquals(4, getPixel(image, 1, 1));
    }
}


No.8 generated result --------------------------

The `floodFill` method is a recursive method that fills in an image with the specified color. The method takes four arguments:

* `image`: A 2D array representing the image to be filled.
* `x`: The x-coordinate of the starting pixel.
* `y`: The y-coordinate of the starting pixel.
* `newColor`: The new color that will be used to fill the image.
* `oldColor`: The original color of the pixels in the image.

The method first checks if the new and old colors are the same or if the x and y coordinates are outside the bounds of the image. If so, it returns immediately without making any changes.

Otherwise, the method sets the pixel at the specified coordinates to the new color using the `putPixel` method. It then recursively calls itself with different coordinates to fill in the entire image. The coordinates that are checked for each pixel are:

* Horizontally adjacent pixels (left and right)
* Vertically adjacent pixels (up and down)
* Diagonally adjacent pixels (top-right, bottom-right, top-left, bottom-left)

The method uses the `floodFill` method to recursively fill in each of these areas. The method continues until all pixels have been filled with the new color.


No.9 generated result --------------------------


import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {
    @Test
    public void floodFillTest() {
        // Create an image with two disconnected regions of different colors
        int[][] image = new int[5][5];
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                if (i == 2 || j == 2) {
                    image[i][j] = 1; // Color of the first region
                } else {
                    image[i][j] = 2; // Color of the second region
                }
            }
        }
        
        // Call the floodFill method with the coordinates (0, 0) and color 3
        int[][] resultImage = new int[5][5];
        FloodFill.floodFill(image, 0, 0, 3, 1);
        
        // Check that all pixels in the first region are now colored with 3
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                if (i == 2 || j == 2) {
                    assertEquals(resultImage[i][j], 3);
                } else {
                    assertNotEquals(resultImage[i][j], 3);
                }
            }
        }
        
        // Check that all pixels in the second region are not colored with 3
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                if (i != 2 && j != 2) {
                    assertNotEquals(resultImage[i][j], 3);
                } else {
                    assertEquals(resultImage[i][j], 1);
                }
            }
        }
        
        // Check that the image is now connected and has no disconnected regions
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                assertEquals(resultImage[i][j], resultImage[i + 1][j]);
                assertEquals(resultImage[i][j], resultImage[i][j + 1]);
            }
        }
    }
}



No.10 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = new int[3][3];
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = 1;
    
    // Test case 1: The pixel at coordinates (x, y) has the value oldColor and is surrounded by pixels with different values.
    image[0][0] = oldColor;
    image[0][1] = newColor;
    image[0][2] = newColor;
    image[1][0] = newColor;
    image[1][1] = oldColor;
    image[1][2] = newColor;
    image[2][0] = newColor;
    image[2][1] = newColor;
    image[2][2] = oldColor;
    
    floodFill(image, x, y, newColor, oldColor);
    
    assertEquals(newColor, image[x][y]);
    assertEquals(newColor, image[0][1]);
    assertEquals(newColor, image[1][0]);
    assertEquals(newColor, image[2][0]);
    assertEquals(newColor, image[1][2]);
    
    // Test case 2: The pixel at coordinates (x, y) has the value oldColor and is surrounded by pixels with the same value.
    image = new int[3][3];
    image[0][0] = oldColor;
    image[0][1] = oldColor;
    image[0][2] = oldColor;
    image[1][0] = oldColor;
    image[1][1] = oldColor;
    image[1][2] = oldColor;
    image[2][0] = oldColor;
    image[2][1] = oldColor;
    image[2][2] = oldColor;
    
    floodFill(image, x, y, newColor, oldColor);
    
    assertEquals(oldColor, image[x][y]);
    assertEquals(oldColor, image[0][1]);
    assertEquals(oldColor, image[1][0]);
    assertEquals(oldColor, image[2][0]);
    assertEquals(oldColor, image[1][2]);
}


