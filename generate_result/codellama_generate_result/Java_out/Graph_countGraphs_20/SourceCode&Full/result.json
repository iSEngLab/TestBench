{
    "project_name": "Java",
    "file_name": "ConnectedComponent.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/ConnectedComponent.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Main method used for counting the connected components. Iterates through\n     * the array of nodes to do a depth first search to get all nodes of the\n     * graph from the actual node. These nodes are added to the array\n     * markedNodes and will be ignored if they are chosen in the nodeList.\n     *\n     * @return returns the amount of unconnected graphs\n     */",
    "source_code": "\npublic int countGraphs() {\n    int count = 0;\n    Set<Node> markedNodes = new HashSet<Node>();\n\n    for (Node n : nodeList) {\n        if (!markedNodes.contains(n)) {\n            markedNodes.add(n);\n            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));\n            count++;\n        }\n    }\n\n    return count;\n}\n",
    "class_name": "Graph",
    "method_name": "countGraphs",
    "arguments": [],
    "generate_test": [
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Test with empty graph\n        Graph<Integer> g = new Graph<>();\n        assertEquals(0, g.countGraphs());\n        \n        // Test with single node graph\n        g.addNode(\"a\");\n        assertEquals(1, g.countGraphs());\n        \n        // Test with two node graph\n        g.addEdge(\"a\", \"b\");\n        assertEquals(2, g.countGraphs());\n        \n        // Test with multiple node graph\n        g.addNode(\"c\");\n        g.addNode(\"d\");\n        g.addNode(\"e\");\n        g.addEdge(\"b\", \"c\");\n        g.addEdge(\"c\", \"d\");\n        g.addEdge(\"d\", \"a\");\n        assertEquals(3, g.countGraphs());\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a new graph with 5 nodes and 4 edges\n        Graph<Integer> graph = new Graph<>();\n        for (int i = 0; i < 5; i++) {\n            graph.addNode(i);\n        }\n        for (int i = 0; i < 4; i++) {\n            graph.addEdge(i, i + 1);\n        }\n        \n        // Test that the correct number of connected components is returned\n        int expectedNumberOfComponents = 2;\n        assertEquals(expectedNumberOfComponents, graph.countGraphs());\n    }\n}",
        "import static org.junit.jupiter.api.Assertions.*;\n\nimport com.thealgorithms.datastructures.graphs.Graph;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Test case 1: Empty graph\n        Graph<Character> emptyGraph = new Graph<>();\n        assertEquals(0, emptyGraph.countGraphs());\n\n        // Test case 2: Single node\n        Graph<Character> singleNodeGraph = new Graph<>();\n        singleNodeGraph.addEdge('a', 'b');\n        assertEquals(1, singleNodeGraph.countGraphs());\n\n        // Test case 3: Two connected nodes\n        Graph<Character> twoNodesGraph = new Graph<>();\n        twoNodesGraph.addEdge('a', 'b');\n        twoNodesGraph.addEdge('b', 'c');\n        assertEquals(1, twoNodesGraph.countGraphs());\n\n        // Test case 4: Three connected nodes\n        Graph<Character> threeNodesGraph = new Graph<>();\n        threeNodesGraph.addEdge('a', 'b');\n        threeNodesGraph.addEdge('b', 'c');\n        threeNodesGraph.addEdge('c', 'd');\n        assertEquals(1, threeNodesGraph.countGraphs());\n\n        // Test case 5: Two disconnected nodes\n        Graph<Character> twoDisconnectedNodesGraph = new Graph<>();\n        twoDisconnectedNodesGraph.addEdge('a', 'b');\n        twoDisconnectedNodesGraph.addEdge('c', 'd');\n        assertEquals(2, twoDisconnectedNodesGraph.countGraphs());\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a graph with 3 connected components\n        Graph<String> graph = new Graph<>();\n        graph.addEdge(\"A\", \"B\");\n        graph.addEdge(\"B\", \"C\");\n        graph.addEdge(\"C\", \"D\");\n        graph.addEdge(\"E\", \"F\");\n        graph.addEdge(\"G\", \"H\");\n        \n        // Test that the countGraphs method returns 3 for this graph\n        assertEquals(3, graph.countGraphs());\n    }\n}",
        "\npackage com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a graph with some nodes and edges\n        Graph<Character> graph = new Graph<>();\n        graph.addEdge('a', 'b');\n        graph.addEdge('a', 'e');\n        graph.addEdge('b', 'e');\n        graph.addEdge('b', 'c');\n        graph.addEdge('c', 'd');\n        graph.addEdge('d', 'a');\n\n        // Count the number of different connected components in the graph\n        int expectedOutput = 1; // There is only one connected component in this graph\n        assertEquals(expectedOutput, graph.countGraphs());\n    }\n}\n",
        "@Test\npublic void countGraphsTest() {\n    // Test case 1: Testing the correctness of countGraphs method for char-graphs\n    Graph<Character> graphChars = new Graph<>();\n    graphChars.addEdge('a', 'b');\n    graphChars.addEdge('a', 'e');\n    graphChars.addEdge('b', 'e');\n    graphChars.addEdge('b', 'c');\n    graphChars.addEdge('c', 'd');\n    graphChars.addEdge('d', 'a');\n    graphChars.addEdge('x', 'y');\n    graphChars.addEdge('x', 'z');\n    graphChars.addEdge('w', 'w');\n    assertEquals(3, graphChars.countGraphs());\n\n    // Test case 2: Testing the correctness of countGraphs method for int-graphs\n    Graph<Integer> graphInts = new Graph<>();\n    graphInts.addEdge(1, 2);\n    graphInts.addEdge(2, 3);\n    graphInts.addEdge(2, 4);\n    graphInts.addEdge(3, 5);\n    graphInts.addEdge(7, 8);\n    graphInts.addEdge(8, 10);\n    graphInts.addEdge(10, 8);\n    assertEquals(2, graphInts.countGraphs());\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Test graph 1\n        Graph<Character> graphChars = new Graph<>();\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n        \n        assertEquals(2, graphChars.countGraphs());\n        \n        // Test graph 2\n        Graph<Integer> graphInts = new Graph<>();\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n        \n        assertEquals(3, graphInts.countGraphs());\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a graph with 3 connected components:\n        // - Component 1: {a, b, c}\n        // - Component 2: {x, y, z}\n        // - Component 3: {w}\n        Graph<Character> graph = new Graph<>();\n        graph.addEdge('a', 'b');\n        graph.addEdge('a', 'c');\n        graph.addEdge('b', 'c');\n        graph.addEdge('x', 'y');\n        graph.addEdge('x', 'z');\n        graph.addEdge('w', 'w');\n        \n        // Expected number of connected components: 3\n        int expectedCount = 3;\n        \n        // Check that the countGraphs() method returns the correct result:\n        assertEquals(expectedCount, graph.countGraphs());\n    }\n}",
        "\n@Test\npublic void countGraphsTest() {\n    // Test 1: Test case with multiple connected components in a graph\n    Graph<Character> graphChars = new Graph<>();\n\n    graphChars.addEdge('a', 'b');\n    graphChars.addEdge('a', 'e');\n    graphChars.addEdge('b', 'e');\n    graphChars.addEdge('b', 'c');\n    graphChars.addEdge('c', 'd');\n    graphChars.addEdge('d', 'a');\n\n    graphChars.addEdge('x', 'y');\n    graphChars.addEdge('x', 'z');\n\n    assertEquals(2, graphChars.countGraphs());\n\n    // Test 2: Test case with a single connected component in a graph\n    Graph<Character> graphCharsSingle = new Graph<>();\n\n    graphCharsSingle.addEdge('a', 'b');\n    graphCharsSingle.addEdge('a', 'e');\n    graphCharsSingle.addEdge('b', 'e');\n    graphCharsSingle.addEdge('b', 'c');\n    graphCharsSingle.addEdge('c', 'd');\n    graphCharsSingle.addEdge('d', 'a');\n\n    assertEquals(1, graphCharsSingle.countGraphs());\n\n    // Test 3: Test case with a disconnected graph\n    Graph<Character> graphCharsDis = new Graph<>();\n\n    graphCharsDis.addEdge('a', 'b');\n    graphCharsDis.addEdge('c', 'd');\n\n    assertEquals(2, graphCharsDis.countGraphs());\n}",
        "\n@Test\npublic void countGraphsTest() {\n    Graph<Integer> graph = new Graph<>();\n    \n    // Add nodes and edges to the graph\n    graph.addEdge(1, 2);\n    graph.addEdge(2, 3);\n    graph.addEdge(3, 4);\n    graph.addEdge(4, 5);\n    graph.addEdge(5, 6);\n    \n    // Count the number of connected components in the graph\n    int numConnectedComponents = graph.countGraphs();\n    \n    // Assert that there are 3 connected components in the graph\n    assertEquals(3, numConnectedComponents);\n}\n"
    ]
}