Source code: 


public int countGraphs() {
    int count = 0;
    Set<Node> markedNodes = new HashSet<Node>();

    for (Node n : nodeList) {
        if (!markedNodes.contains(n)) {
            markedNodes.add(n);
            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));
            count++;
        }
    }

    return count;
}



No.1 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Test with empty graph
        Graph<Integer> g = new Graph<>();
        assertEquals(0, g.countGraphs());
        
        // Test with single node graph
        g.addNode("a");
        assertEquals(1, g.countGraphs());
        
        // Test with two node graph
        g.addEdge("a", "b");
        assertEquals(2, g.countGraphs());
        
        // Test with multiple node graph
        g.addNode("c");
        g.addNode("d");
        g.addNode("e");
        g.addEdge("b", "c");
        g.addEdge("c", "d");
        g.addEdge("d", "a");
        assertEquals(3, g.countGraphs());
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Create a new graph with 5 nodes and 4 edges
        Graph<Integer> graph = new Graph<>();
        for (int i = 0; i < 5; i++) {
            graph.addNode(i);
        }
        for (int i = 0; i < 4; i++) {
            graph.addEdge(i, i + 1);
        }
        
        // Test that the correct number of connected components is returned
        int expectedNumberOfComponents = 2;
        assertEquals(expectedNumberOfComponents, graph.countGraphs());
    }
}


No.3 generated result --------------------------

import static org.junit.jupiter.api.Assertions.*;

import com.thealgorithms.datastructures.graphs.Graph;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Test case 1: Empty graph
        Graph<Character> emptyGraph = new Graph<>();
        assertEquals(0, emptyGraph.countGraphs());

        // Test case 2: Single node
        Graph<Character> singleNodeGraph = new Graph<>();
        singleNodeGraph.addEdge('a', 'b');
        assertEquals(1, singleNodeGraph.countGraphs());

        // Test case 3: Two connected nodes
        Graph<Character> twoNodesGraph = new Graph<>();
        twoNodesGraph.addEdge('a', 'b');
        twoNodesGraph.addEdge('b', 'c');
        assertEquals(1, twoNodesGraph.countGraphs());

        // Test case 4: Three connected nodes
        Graph<Character> threeNodesGraph = new Graph<>();
        threeNodesGraph.addEdge('a', 'b');
        threeNodesGraph.addEdge('b', 'c');
        threeNodesGraph.addEdge('c', 'd');
        assertEquals(1, threeNodesGraph.countGraphs());

        // Test case 5: Two disconnected nodes
        Graph<Character> twoDisconnectedNodesGraph = new Graph<>();
        twoDisconnectedNodesGraph.addEdge('a', 'b');
        twoDisconnectedNodesGraph.addEdge('c', 'd');
        assertEquals(2, twoDisconnectedNodesGraph.countGraphs());
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Create a graph with 3 connected components
        Graph<String> graph = new Graph<>();
        graph.addEdge("A", "B");
        graph.addEdge("B", "C");
        graph.addEdge("C", "D");
        graph.addEdge("E", "F");
        graph.addEdge("G", "H");
        
        // Test that the countGraphs method returns 3 for this graph
        assertEquals(3, graph.countGraphs());
    }
}


No.5 generated result --------------------------


package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Create a graph with some nodes and edges
        Graph<Character> graph = new Graph<>();
        graph.addEdge('a', 'b');
        graph.addEdge('a', 'e');
        graph.addEdge('b', 'e');
        graph.addEdge('b', 'c');
        graph.addEdge('c', 'd');
        graph.addEdge('d', 'a');

        // Count the number of different connected components in the graph
        int expectedOutput = 1; // There is only one connected component in this graph
        assertEquals(expectedOutput, graph.countGraphs());
    }
}



No.6 generated result --------------------------

@Test
public void countGraphsTest() {
    // Test case 1: Testing the correctness of countGraphs method for char-graphs
    Graph<Character> graphChars = new Graph<>();
    graphChars.addEdge('a', 'b');
    graphChars.addEdge('a', 'e');
    graphChars.addEdge('b', 'e');
    graphChars.addEdge('b', 'c');
    graphChars.addEdge('c', 'd');
    graphChars.addEdge('d', 'a');
    graphChars.addEdge('x', 'y');
    graphChars.addEdge('x', 'z');
    graphChars.addEdge('w', 'w');
    assertEquals(3, graphChars.countGraphs());

    // Test case 2: Testing the correctness of countGraphs method for int-graphs
    Graph<Integer> graphInts = new Graph<>();
    graphInts.addEdge(1, 2);
    graphInts.addEdge(2, 3);
    graphInts.addEdge(2, 4);
    graphInts.addEdge(3, 5);
    graphInts.addEdge(7, 8);
    graphInts.addEdge(8, 10);
    graphInts.addEdge(10, 8);
    assertEquals(2, graphInts.countGraphs());
}


No.7 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Test graph 1
        Graph<Character> graphChars = new Graph<>();
        graphChars.addEdge('a', 'b');
        graphChars.addEdge('a', 'e');
        graphChars.addEdge('b', 'e');
        graphChars.addEdge('b', 'c');
        graphChars.addEdge('c', 'd');
        graphChars.addEdge('d', 'a');
        
        assertEquals(2, graphChars.countGraphs());
        
        // Test graph 2
        Graph<Integer> graphInts = new Graph<>();
        graphInts.addEdge(1, 2);
        graphInts.addEdge(2, 3);
        graphInts.addEdge(2, 4);
        graphInts.addEdge(3, 5);
        
        assertEquals(3, graphInts.countGraphs());
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Create a graph with 3 connected components:
        // - Component 1: {a, b, c}
        // - Component 2: {x, y, z}
        // - Component 3: {w}
        Graph<Character> graph = new Graph<>();
        graph.addEdge('a', 'b');
        graph.addEdge('a', 'c');
        graph.addEdge('b', 'c');
        graph.addEdge('x', 'y');
        graph.addEdge('x', 'z');
        graph.addEdge('w', 'w');
        
        // Expected number of connected components: 3
        int expectedCount = 3;
        
        // Check that the countGraphs() method returns the correct result:
        assertEquals(expectedCount, graph.countGraphs());
    }
}


No.9 generated result --------------------------


@Test
public void countGraphsTest() {
    // Test 1: Test case with multiple connected components in a graph
    Graph<Character> graphChars = new Graph<>();

    graphChars.addEdge('a', 'b');
    graphChars.addEdge('a', 'e');
    graphChars.addEdge('b', 'e');
    graphChars.addEdge('b', 'c');
    graphChars.addEdge('c', 'd');
    graphChars.addEdge('d', 'a');

    graphChars.addEdge('x', 'y');
    graphChars.addEdge('x', 'z');

    assertEquals(2, graphChars.countGraphs());

    // Test 2: Test case with a single connected component in a graph
    Graph<Character> graphCharsSingle = new Graph<>();

    graphCharsSingle.addEdge('a', 'b');
    graphCharsSingle.addEdge('a', 'e');
    graphCharsSingle.addEdge('b', 'e');
    graphCharsSingle.addEdge('b', 'c');
    graphCharsSingle.addEdge('c', 'd');
    graphCharsSingle.addEdge('d', 'a');

    assertEquals(1, graphCharsSingle.countGraphs());

    // Test 3: Test case with a disconnected graph
    Graph<Character> graphCharsDis = new Graph<>();

    graphCharsDis.addEdge('a', 'b');
    graphCharsDis.addEdge('c', 'd');

    assertEquals(2, graphCharsDis.countGraphs());
}


No.10 generated result --------------------------


@Test
public void countGraphsTest() {
    Graph<Integer> graph = new Graph<>();
    
    // Add nodes and edges to the graph
    graph.addEdge(1, 2);
    graph.addEdge(2, 3);
    graph.addEdge(3, 4);
    graph.addEdge(4, 5);
    graph.addEdge(5, 6);
    
    // Count the number of connected components in the graph
    int numConnectedComponents = graph.countGraphs();
    
    // Assert that there are 3 connected components in the graph
    assertEquals(3, numConnectedComponents);
}



