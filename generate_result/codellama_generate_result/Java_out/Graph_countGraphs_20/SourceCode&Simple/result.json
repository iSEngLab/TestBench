{
    "project_name": "Java",
    "file_name": "ConnectedComponent.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/ConnectedComponent.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Main method used for counting the connected components. Iterates through\n     * the array of nodes to do a depth first search to get all nodes of the\n     * graph from the actual node. These nodes are added to the array\n     * markedNodes and will be ignored if they are chosen in the nodeList.\n     *\n     * @return returns the amount of unconnected graphs\n     */",
    "source_code": "\npublic int countGraphs() {\n    int count = 0;\n    Set<Node> markedNodes = new HashSet<Node>();\n\n    for (Node n : nodeList) {\n        if (!markedNodes.contains(n)) {\n            markedNodes.add(n);\n            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));\n            count++;\n        }\n    }\n\n    return count;\n}\n",
    "class_name": "Graph",
    "method_name": "countGraphs",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void countGraphsTest() {\n    // Create a graph with 3 nodes and 2 edges\n    Graph graph = new Graph();\n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"A\", \"C\");\n    assertEquals(2, graph.countGraphs());\n}",
        "\nimport com.thealgorithms.datastructures.graphs.Graph;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        Graph graph = new Graph();\n        graph.addEdge(\"A\", \"B\");\n        graph.addEdge(\"A\", \"C\");\n        graph.addEdge(\"B\", \"D\");\n        graph.addEdge(\"C\", \"E\");\n        graph.addEdge(\"D\", \"F\");\n        graph.addEdge(\"F\", \"G\");\n        Assertions.assertEquals(2, graph.countGraphs());\n    }\n}",
        "\npublic class ConnectedComponent extends Graph {\n    public int countGraphs() {\n        int count = 0;\n        Set<Node> markedNodes = new HashSet<Node>();\n\n        for (Node n : nodeList) {\n            if (!markedNodes.contains(n)) {\n                markedNodes.add(n);\n                markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        ConnectedComponent graph = new ConnectedComponent();\n        Node n1 = new Node(\"A\");\n        Node n2 = new Node(\"B\");\n        Node n3 = new Node(\"C\");\n        Node n4 = new Node(\"D\");\n        Edge e1 = new Edge(n1, n2);\n        Edge e2 = new Edge(n1, n3);\n        Edge e3 = new Edge(n2, n4);\n        graph.addEdge(e1);\n        graph.addEdge(e2);\n        graph.addEdge(e3);\n        assertEquals(2, graph.countGraphs());\n    }\n}",
        "\npackage com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        Graph graph = new Graph();\n        Node node1 = new Node(\"node1\");\n        Node node2 = new Node(\"node2\");\n        Node node3 = new Node(\"node3\");\n        Node node4 = new Node(\"node4\");\n        Edge edge1 = new Edge(node1, node2);\n        Edge edge2 = new Edge(node1, node3);\n        Edge edge3 = new Edge(node2, node3);\n        graph.addEdge(edge1);\n        graph.addEdge(edge2);\n        graph.addEdge(edge3);\n        int count = graph.countGraphs();\n        assertEquals(2, count);\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a graph with 2 nodes and 1 edge\n        Graph graph = new Graph();\n        Node node1 = new Node(\"A\");\n        Node node2 = new Node(\"B\");\n        Edge edge = new Edge(node1, node2);\n        graph.addEdge(edge);\n        \n        // Count the number of graphs in the graph\n        int count = graph.countGraphs();\n        \n        // Verify that there is 1 graph in the graph\n        assertEquals(1, count);\n    }\n}",
        "\n@Test\npublic void countGraphsTest() {\n    // Create a graph with 3 nodes and 2 edges\n    Graph graph = new Graph();\n    Node node1 = new Node(\"A\");\n    Node node2 = new Node(\"B\");\n    Node node3 = new Node(\"C\");\n    graph.addEdge(node1, node2);\n    graph.addEdge(node2, node3);\n\n    // Check that the count of graphs is 1\n    assertEquals(graph.countGraphs(), 1);\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a graph with 2 nodes and 1 edge\n        Graph graph = new Graph();\n        Node nodeA = new Node(\"A\");\n        Node nodeB = new Node(\"B\");\n        Edge edgeAB = new Edge(nodeA, nodeB);\n        graph.addEdge(edgeAB);\n\n        // Count the number of graphs in the graph\n        int count = graph.countGraphs();\n\n        // Assert that the count is correct\n        assertEquals(2, count);\n    }\n}",
        "\npackage com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a graph with 3 nodes and 2 edges\n        Graph graph = new Graph();\n        Node node1 = new Node(\"A\");\n        Node node2 = new Node(\"B\");\n        Node node3 = new Node(\"C\");\n        graph.addEdge(node1, node2);\n        graph.addEdge(node1, node3);\n\n        // Check that the number of graphs is 2\n        assertEquals(2, graph.countGraphs());\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Test case 1: Empty graph\n        Graph emptyGraph = new Graph();\n        assertEquals(0, emptyGraph.countGraphs());\n\n        // Test case 2: Single node graph\n        Graph singleNodeGraph = new Graph();\n        Node n1 = new Node(\"node1\");\n        singleNodeGraph.addEdge(n1, n1);\n        assertEquals(1, singleNodeGraph.countGraphs());\n\n        // Test case 3: Cyclic graph with two nodes\n        Graph cyclicGraph = new Graph();\n        Node n2 = new Node(\"node2\");\n        Node n3 = new Node(\"node3\");\n        cyclicGraph.addEdge(n2, n3);\n        cyclicGraph.addEdge(n3, n2);\n        assertEquals(1, cyclicGraph.countGraphs());\n\n        // Test case 4: Disconnected graph with three nodes\n        Graph disconnectedGraph = new Graph();\n        Node n4 = new Node(\"node4\");\n        Node n5 = new Node(\"node5\");\n        Node n6 = new Node(\"node6\");\n        disconnectedGraph.addEdge(n4, n5);\n        disconnectedGraph.addEdge(n6, n5);\n        assertEquals(2, disconnectedGraph.countGraphs());\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a graph with 3 nodes and 2 edges\n        Graph graph = new Graph();\n        graph.addEdge(0, 1);\n        graph.addEdge(0, 2);\n\n        // Count the number of connected components in the graph\n        int count = graph.countGraphs();\n\n        // Assert that there are 3 connected components in the graph\n        assertEquals(3, count);\n    }\n}"
    ]
}