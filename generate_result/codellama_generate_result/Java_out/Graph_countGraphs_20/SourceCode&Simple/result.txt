Source code: 


public int countGraphs() {
    int count = 0;
    Set<Node> markedNodes = new HashSet<Node>();

    for (Node n : nodeList) {
        if (!markedNodes.contains(n)) {
            markedNodes.add(n);
            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));
            count++;
        }
    }

    return count;
}



No.1 generated result --------------------------

@Test
public void countGraphsTest() {
    // Create a graph with 3 nodes and 2 edges
    Graph graph = new Graph();
    graph.addEdge("A", "B");
    graph.addEdge("A", "C");
    assertEquals(2, graph.countGraphs());
}


No.2 generated result --------------------------


import com.thealgorithms.datastructures.graphs.Graph;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        Graph graph = new Graph();
        graph.addEdge("A", "B");
        graph.addEdge("A", "C");
        graph.addEdge("B", "D");
        graph.addEdge("C", "E");
        graph.addEdge("D", "F");
        graph.addEdge("F", "G");
        Assertions.assertEquals(2, graph.countGraphs());
    }
}


No.3 generated result --------------------------


public class ConnectedComponent extends Graph {
    public int countGraphs() {
        int count = 0;
        Set<Node> markedNodes = new HashSet<Node>();

        for (Node n : nodeList) {
            if (!markedNodes.contains(n)) {
                markedNodes.add(n);
                markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));
                count++;
            }
        }

        return count;
    }
}

public class GraphTest {
    @Test
    public void countGraphsTest() {
        ConnectedComponent graph = new ConnectedComponent();
        Node n1 = new Node("A");
        Node n2 = new Node("B");
        Node n3 = new Node("C");
        Node n4 = new Node("D");
        Edge e1 = new Edge(n1, n2);
        Edge e2 = new Edge(n1, n3);
        Edge e3 = new Edge(n2, n4);
        graph.addEdge(e1);
        graph.addEdge(e2);
        graph.addEdge(e3);
        assertEquals(2, graph.countGraphs());
    }
}


No.4 generated result --------------------------


package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        Graph graph = new Graph();
        Node node1 = new Node("node1");
        Node node2 = new Node("node2");
        Node node3 = new Node("node3");
        Node node4 = new Node("node4");
        Edge edge1 = new Edge(node1, node2);
        Edge edge2 = new Edge(node1, node3);
        Edge edge3 = new Edge(node2, node3);
        graph.addEdge(edge1);
        graph.addEdge(edge2);
        graph.addEdge(edge3);
        int count = graph.countGraphs();
        assertEquals(2, count);
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Create a graph with 2 nodes and 1 edge
        Graph graph = new Graph();
        Node node1 = new Node("A");
        Node node2 = new Node("B");
        Edge edge = new Edge(node1, node2);
        graph.addEdge(edge);
        
        // Count the number of graphs in the graph
        int count = graph.countGraphs();
        
        // Verify that there is 1 graph in the graph
        assertEquals(1, count);
    }
}


No.6 generated result --------------------------


@Test
public void countGraphsTest() {
    // Create a graph with 3 nodes and 2 edges
    Graph graph = new Graph();
    Node node1 = new Node("A");
    Node node2 = new Node("B");
    Node node3 = new Node("C");
    graph.addEdge(node1, node2);
    graph.addEdge(node2, node3);

    // Check that the count of graphs is 1
    assertEquals(graph.countGraphs(), 1);
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Create a graph with 2 nodes and 1 edge
        Graph graph = new Graph();
        Node nodeA = new Node("A");
        Node nodeB = new Node("B");
        Edge edgeAB = new Edge(nodeA, nodeB);
        graph.addEdge(edgeAB);

        // Count the number of graphs in the graph
        int count = graph.countGraphs();

        // Assert that the count is correct
        assertEquals(2, count);
    }
}


No.8 generated result --------------------------


package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Create a graph with 3 nodes and 2 edges
        Graph graph = new Graph();
        Node node1 = new Node("A");
        Node node2 = new Node("B");
        Node node3 = new Node("C");
        graph.addEdge(node1, node2);
        graph.addEdge(node1, node3);

        // Check that the number of graphs is 2
        assertEquals(2, graph.countGraphs());
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Test case 1: Empty graph
        Graph emptyGraph = new Graph();
        assertEquals(0, emptyGraph.countGraphs());

        // Test case 2: Single node graph
        Graph singleNodeGraph = new Graph();
        Node n1 = new Node("node1");
        singleNodeGraph.addEdge(n1, n1);
        assertEquals(1, singleNodeGraph.countGraphs());

        // Test case 3: Cyclic graph with two nodes
        Graph cyclicGraph = new Graph();
        Node n2 = new Node("node2");
        Node n3 = new Node("node3");
        cyclicGraph.addEdge(n2, n3);
        cyclicGraph.addEdge(n3, n2);
        assertEquals(1, cyclicGraph.countGraphs());

        // Test case 4: Disconnected graph with three nodes
        Graph disconnectedGraph = new Graph();
        Node n4 = new Node("node4");
        Node n5 = new Node("node5");
        Node n6 = new Node("node6");
        disconnectedGraph.addEdge(n4, n5);
        disconnectedGraph.addEdge(n6, n5);
        assertEquals(2, disconnectedGraph.countGraphs());
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Create a graph with 3 nodes and 2 edges
        Graph graph = new Graph();
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);

        // Count the number of connected components in the graph
        int count = graph.countGraphs();

        // Assert that there are 3 connected components in the graph
        assertEquals(3, count);
    }
}


