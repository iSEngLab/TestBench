{
    "project_name": "Java",
    "file_name": "ConnectedComponent.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/ConnectedComponent.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Main method used for counting the connected components. Iterates through\n     * the array of nodes to do a depth first search to get all nodes of the\n     * graph from the actual node. These nodes are added to the array\n     * markedNodes and will be ignored if they are chosen in the nodeList.\n     *\n     * @return returns the amount of unconnected graphs\n     */",
    "source_code": "\npublic int countGraphs() {\n    int count = 0;\n    Set<Node> markedNodes = new HashSet<Node>();\n\n    for (Node n : nodeList) {\n        if (!markedNodes.contains(n)) {\n            markedNodes.add(n);\n            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));\n            count++;\n        }\n    }\n\n    return count;\n}\n",
    "class_name": "Graph",
    "method_name": "countGraphs",
    "arguments": [],
    "generate_test": [
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // create a list of nodes for the input\n        List<Node> nodeList = new ArrayList<>();\n        Node n1 = new Node(\"A\");\n        Node n2 = new Node(\"B\");\n        Node n3 = new Node(\"C\");\n        nodeList.add(n1);\n        nodeList.add(n2);\n        nodeList.add(n3);\n\n        // create a graph object with the input list of nodes\n        Graph g = new Graph(nodeList);\n\n        // call the countGraphs() method and assert that it returns 3 (the number of distinct graphs in the input)\n        assertEquals(3, g.countGraphs());\n    }\n}",
        "\npackage com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a graph with 3 nodes and 2 edges between them\n        List<Node> nodeList = new ArrayList<>();\n        Node node1 = new Node(\"A\");\n        Node node2 = new Node(\"B\");\n        Node node3 = new Node(\"C\");\n        nodeList.add(node1);\n        nodeList.add(node2);\n        nodeList.add(node3);\n        \n        // Create an edge between nodes \"A\" and \"B\"\n        Edge edgeAB = new Edge(node1, node2);\n        // Create an edge between nodes \"A\" and \"C\"\n        Edge edgeAC = new Edge(node1, node3);\n        // Add the edges to the graph\n        nodeList.add(edgeAB);\n        nodeList.add(edgeAC);\n        \n        Graph graph = new Graph();\n        graph.setNodeList(nodeList);\n        \n        int expectedCount = 2;\n        int actualCount = graph.countGraphs();\n        assertEquals(expectedCount, actualCount);\n    }\n}",
        "\n@Test\npublic void countGraphsTest() {\n    // Create an empty graph\n    List<Node> nodeList = new ArrayList<>();\n    assertEquals(0, new Graph().countGraphs());\n\n    // Add a single node to the graph\n    Node n1 = new Node();\n    nodeList.add(n1);\n    assertEquals(1, new Graph().countGraphs());\n\n    // Add two nodes that are connected to each other\n    Node n2 = new Node();\n    n1.neighbors.add(n2);\n    n2.neighbors.add(n1);\n    assertEquals(1, new Graph().countGraphs());\n\n    // Add another node that is not connected to any other nodes\n    Node n3 = new Node();\n    nodeList.add(n3);\n    assertEquals(2, new Graph().countGraphs());\n}\n",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a simple graph with 3 nodes and 2 edges\n        Node node1 = new Node(\"node1\");\n        Node node2 = new Node(\"node2\");\n        Node node3 = new Node(\"node3\");\n        Edge edge1 = new Edge(node1, node2);\n        Edge edge2 = new Edge(node2, node3);\n        Graph graph = new Graph();\n        graph.addNode(node1);\n        graph.addNode(node2);\n        graph.addNode(node3);\n        graph.addEdge(edge1);\n        graph.addEdge(edge2);\n        \n        // Call the method and verify that it returns 2\n        int count = graph.countGraphs();\n        assertEquals(2, count);\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Set up the test data\n        List<Node> nodeList = new ArrayList<>();\n        Node n1 = new Node(0);\n        Node n2 = new Node(1);\n        Node n3 = new Node(2);\n        Node n4 = new Node(3);\n        nodeList.add(n1);\n        nodeList.add(n2);\n        nodeList.add(n3);\n        nodeList.add(n4);\n\n        // Set up the expected result\n        int expectedCount = 2;\n\n        // Call the method being tested\n        int actualCount = countGraphs(nodeList);\n\n        // Check that the result is correct\n        assertEquals(expectedCount, actualCount);\n    }\n}",
        "\n@Test\npublic void countGraphsTest() {\n    // Create a graph with 3 nodes and 2 edges\n    Graph graph = new Graph();\n    Node node1 = new Node(\"Node 1\");\n    Node node2 = new Node(\"Node 2\");\n    Node node3 = new Node(\"Node 3\");\n    graph.addNode(node1);\n    graph.addNode(node2);\n    graph.addNode(node3);\n    graph.addEdge(node1, node2);\n    graph.addEdge(node2, node3);\n\n    // Count the number of connected components in the graph\n    int expectedCount = 2;\n    assertEquals(expectedCount, graph.countGraphs());\n}",
        "\n@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    Node node1 = new Node(1);\n    Node node2 = new Node(2);\n    Node node3 = new Node(3);\n    Node node4 = new Node(4);\n\n    graph.addNode(node1);\n    graph.addNode(node2);\n    graph.addNode(node3);\n    graph.addNode(node4);\n\n    graph.addEdge(node1, node2);\n    graph.addEdge(node1, node3);\n    graph.addEdge(node2, node3);\n    graph.addEdge(node3, node4);\n\n    assertEquals(2, graph.countGraphs());\n}",
        "\npackage com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a graph with 5 nodes and 6 edges\n        Node node1 = new Node(1);\n        Node node2 = new Node(2);\n        Node node3 = new Node(3);\n        Node node4 = new Node(4);\n        Node node5 = new Node(5);\n\n        node1.addNeighbor(node2, 7);\n        node1.addNeighbor(node3, 9);\n        node1.addNeighbor(node4, 14);\n        node1.addNeighbor(node5, 20);\n\n        node2.addNeighbor(node1, 7);\n        node2.addNeighbor(node3, 10);\n        node2.addNeighbor(node4, 15);\n        node2.addNeighbor(node5, 21);\n\n        node3.addNeighbor(node1, 9);\n        node3.addNeighbor(node2, 10);\n        node3.addNeighbor(node4, 11);\n        node3.addNeighbor(node5, 22);\n\n        node4.addNeighbor(node1, 14);\n        node4.addNeighbor(node2, 15);\n        node4.addNeighbor(node3, 11);\n        node4.addNeighbor(node5, 23);\n\n        node5.addNeighbor(node1, 20);\n        node5.addNeighbor(node2, 21);\n        node5.addNeighbor(node3, 22);\n        node5.addNeighbor(node4, 23);\n\n        // Create a graph with 3 nodes and 2 edges\n        Node node6 = new Node(6);\n        Node node7 = new Node(7);\n        Node node8 = new Node(8);\n\n        node6.addNeighbor(node7, 5);\n        node6.addNeighbor(node8, 3);\n\n        node7.addNeighbor(node6, 5);\n        node7.addNeighbor(node8, 4);\n\n        node8.addNeighbor(node6, 3);\n        node8.addNeighbor(node7, 4);\n\n        // Create a graph with 2 nodes and 1 edge\n        Node node9 = new Node(9);\n        Node node10 = new Node(10);\n\n        node9.addNeighbor(node10, 5);\n        node10.addNeighbor(node9, 5);\n\n        // Create a graph with 1 nodes and 0 edges\n        Node node11 = new Node(11);\n\n        // Create a list of graphs\n        List<Graph> graphList = new ArrayList<>();\n        graphList.add(new Graph(node1, node2, node3, node4, node5));\n        graphList.add(new Graph(node6, node7, node8));\n        graphList.add(new Graph(node9, node10));\n        graphList.add(new Graph(node11));\n\n        // Call the countGraphs method and check if it returns the correct number of graphs\n        assertEquals(4, new Graph().countGraphs(graphList));\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Arrange\n        Graph graph = new Graph();\n        Node n1 = new Node(1);\n        Node n2 = new Node(2);\n        Node n3 = new Node(3);\n        Node n4 = new Node(4);\n        Node n5 = new Node(5);\n        graph.addNode(n1);\n        graph.addNode(n2);\n        graph.addNode(n3);\n        graph.addNode(n4);\n        graph.addNode(n5);\n        graph.connectNodes(n1, n2);\n        graph.connectNodes(n2, n3);\n        graph.connectNodes(n3, n4);\n        graph.connectNodes(n4, n5);\n\n        // Act\n        int actual = graph.countGraphs();\n\n        // Assert\n        assertEquals(2, actual);\n    }\n}",
        "\npackage com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a graph with 2 connected components\n        List<Node> nodeList = new ArrayList<>();\n        nodeList.add(new Node(\"A\"));\n        nodeList.add(new Node(\"B\"));\n        nodeList.add(new Node(\"C\"));\n        nodeList.get(0).neighbors.add(nodeList.get(1));\n        nodeList.get(1).neighbors.add(nodeList.get(2));\n\n        // Run the countGraphs method on the graph\n        int result = Graph.countGraphs(nodeList);\n\n        // Check that the number of connected components is correct\n        assertEquals(2, result);\n    }\n}\n"
    ]
}