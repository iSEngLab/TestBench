Source code: 


public int countGraphs() {
    int count = 0;
    Set<Node> markedNodes = new HashSet<Node>();

    for (Node n : nodeList) {
        if (!markedNodes.contains(n)) {
            markedNodes.add(n);
            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));
            count++;
        }
    }

    return count;
}



No.1 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // create a list of nodes for the input
        List<Node> nodeList = new ArrayList<>();
        Node n1 = new Node("A");
        Node n2 = new Node("B");
        Node n3 = new Node("C");
        nodeList.add(n1);
        nodeList.add(n2);
        nodeList.add(n3);

        // create a graph object with the input list of nodes
        Graph g = new Graph(nodeList);

        // call the countGraphs() method and assert that it returns 3 (the number of distinct graphs in the input)
        assertEquals(3, g.countGraphs());
    }
}


No.2 generated result --------------------------


package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Create a graph with 3 nodes and 2 edges between them
        List<Node> nodeList = new ArrayList<>();
        Node node1 = new Node("A");
        Node node2 = new Node("B");
        Node node3 = new Node("C");
        nodeList.add(node1);
        nodeList.add(node2);
        nodeList.add(node3);
        
        // Create an edge between nodes "A" and "B"
        Edge edgeAB = new Edge(node1, node2);
        // Create an edge between nodes "A" and "C"
        Edge edgeAC = new Edge(node1, node3);
        // Add the edges to the graph
        nodeList.add(edgeAB);
        nodeList.add(edgeAC);
        
        Graph graph = new Graph();
        graph.setNodeList(nodeList);
        
        int expectedCount = 2;
        int actualCount = graph.countGraphs();
        assertEquals(expectedCount, actualCount);
    }
}


No.3 generated result --------------------------


@Test
public void countGraphsTest() {
    // Create an empty graph
    List<Node> nodeList = new ArrayList<>();
    assertEquals(0, new Graph().countGraphs());

    // Add a single node to the graph
    Node n1 = new Node();
    nodeList.add(n1);
    assertEquals(1, new Graph().countGraphs());

    // Add two nodes that are connected to each other
    Node n2 = new Node();
    n1.neighbors.add(n2);
    n2.neighbors.add(n1);
    assertEquals(1, new Graph().countGraphs());

    // Add another node that is not connected to any other nodes
    Node n3 = new Node();
    nodeList.add(n3);
    assertEquals(2, new Graph().countGraphs());
}



No.4 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Create a simple graph with 3 nodes and 2 edges
        Node node1 = new Node("node1");
        Node node2 = new Node("node2");
        Node node3 = new Node("node3");
        Edge edge1 = new Edge(node1, node2);
        Edge edge2 = new Edge(node2, node3);
        Graph graph = new Graph();
        graph.addNode(node1);
        graph.addNode(node2);
        graph.addNode(node3);
        graph.addEdge(edge1);
        graph.addEdge(edge2);
        
        // Call the method and verify that it returns 2
        int count = graph.countGraphs();
        assertEquals(2, count);
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Set up the test data
        List<Node> nodeList = new ArrayList<>();
        Node n1 = new Node(0);
        Node n2 = new Node(1);
        Node n3 = new Node(2);
        Node n4 = new Node(3);
        nodeList.add(n1);
        nodeList.add(n2);
        nodeList.add(n3);
        nodeList.add(n4);

        // Set up the expected result
        int expectedCount = 2;

        // Call the method being tested
        int actualCount = countGraphs(nodeList);

        // Check that the result is correct
        assertEquals(expectedCount, actualCount);
    }
}


No.6 generated result --------------------------


@Test
public void countGraphsTest() {
    // Create a graph with 3 nodes and 2 edges
    Graph graph = new Graph();
    Node node1 = new Node("Node 1");
    Node node2 = new Node("Node 2");
    Node node3 = new Node("Node 3");
    graph.addNode(node1);
    graph.addNode(node2);
    graph.addNode(node3);
    graph.addEdge(node1, node2);
    graph.addEdge(node2, node3);

    // Count the number of connected components in the graph
    int expectedCount = 2;
    assertEquals(expectedCount, graph.countGraphs());
}


No.7 generated result --------------------------


@Test
public void countGraphsTest() {
    Graph graph = new Graph();
    Node node1 = new Node(1);
    Node node2 = new Node(2);
    Node node3 = new Node(3);
    Node node4 = new Node(4);

    graph.addNode(node1);
    graph.addNode(node2);
    graph.addNode(node3);
    graph.addNode(node4);

    graph.addEdge(node1, node2);
    graph.addEdge(node1, node3);
    graph.addEdge(node2, node3);
    graph.addEdge(node3, node4);

    assertEquals(2, graph.countGraphs());
}


No.8 generated result --------------------------


package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Create a graph with 5 nodes and 6 edges
        Node node1 = new Node(1);
        Node node2 = new Node(2);
        Node node3 = new Node(3);
        Node node4 = new Node(4);
        Node node5 = new Node(5);

        node1.addNeighbor(node2, 7);
        node1.addNeighbor(node3, 9);
        node1.addNeighbor(node4, 14);
        node1.addNeighbor(node5, 20);

        node2.addNeighbor(node1, 7);
        node2.addNeighbor(node3, 10);
        node2.addNeighbor(node4, 15);
        node2.addNeighbor(node5, 21);

        node3.addNeighbor(node1, 9);
        node3.addNeighbor(node2, 10);
        node3.addNeighbor(node4, 11);
        node3.addNeighbor(node5, 22);

        node4.addNeighbor(node1, 14);
        node4.addNeighbor(node2, 15);
        node4.addNeighbor(node3, 11);
        node4.addNeighbor(node5, 23);

        node5.addNeighbor(node1, 20);
        node5.addNeighbor(node2, 21);
        node5.addNeighbor(node3, 22);
        node5.addNeighbor(node4, 23);

        // Create a graph with 3 nodes and 2 edges
        Node node6 = new Node(6);
        Node node7 = new Node(7);
        Node node8 = new Node(8);

        node6.addNeighbor(node7, 5);
        node6.addNeighbor(node8, 3);

        node7.addNeighbor(node6, 5);
        node7.addNeighbor(node8, 4);

        node8.addNeighbor(node6, 3);
        node8.addNeighbor(node7, 4);

        // Create a graph with 2 nodes and 1 edge
        Node node9 = new Node(9);
        Node node10 = new Node(10);

        node9.addNeighbor(node10, 5);
        node10.addNeighbor(node9, 5);

        // Create a graph with 1 nodes and 0 edges
        Node node11 = new Node(11);

        // Create a list of graphs
        List<Graph> graphList = new ArrayList<>();
        graphList.add(new Graph(node1, node2, node3, node4, node5));
        graphList.add(new Graph(node6, node7, node8));
        graphList.add(new Graph(node9, node10));
        graphList.add(new Graph(node11));

        // Call the countGraphs method and check if it returns the correct number of graphs
        assertEquals(4, new Graph().countGraphs(graphList));
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Arrange
        Graph graph = new Graph();
        Node n1 = new Node(1);
        Node n2 = new Node(2);
        Node n3 = new Node(3);
        Node n4 = new Node(4);
        Node n5 = new Node(5);
        graph.addNode(n1);
        graph.addNode(n2);
        graph.addNode(n3);
        graph.addNode(n4);
        graph.addNode(n5);
        graph.connectNodes(n1, n2);
        graph.connectNodes(n2, n3);
        graph.connectNodes(n3, n4);
        graph.connectNodes(n4, n5);

        // Act
        int actual = graph.countGraphs();

        // Assert
        assertEquals(2, actual);
    }
}


No.10 generated result --------------------------


package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Create a graph with 2 connected components
        List<Node> nodeList = new ArrayList<>();
        nodeList.add(new Node("A"));
        nodeList.add(new Node("B"));
        nodeList.add(new Node("C"));
        nodeList.get(0).neighbors.add(nodeList.get(1));
        nodeList.get(1).neighbors.add(nodeList.get(2));

        // Run the countGraphs method on the graph
        int result = Graph.countGraphs(nodeList);

        // Check that the number of connected components is correct
        assertEquals(2, result);
    }
}



