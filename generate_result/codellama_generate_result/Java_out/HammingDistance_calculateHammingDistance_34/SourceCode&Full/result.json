{
    "project_name": "Java",
    "file_name": "HammingDistance.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/strings/HammingDistance.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.strings",
    "docstring": "/**\n     * calculate the hamming distance between two strings of equal length\n     *\n     * @param s1 the first string\n     * @param s2 the second string\n     * @return {@code int} hamming distance\n     * @throws Exception\n     */",
    "source_code": "\npublic static int calculateHammingDistance(String s1, String s2) throws Exception {\n    if (s1.length() != s2.length()) {\n        throw new Exception(\"String lengths must be equal\");\n    }\n\n    int stringLength = s1.length();\n    int counter = 0;\n\n    for (int i = 0; i < stringLength; i++) {\n        if (s1.charAt(i) != s2.charAt(i)) {\n            counter++;\n        }\n    }\n    return counter;\n}\n",
    "class_name": "HammingDistance",
    "method_name": "calculateHammingDistance",
    "arguments": [
        "String s1",
        "String s2"
    ],
    "generate_test": [
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        String s1 = \"1110\";\n        String s2 = \"1110\";\n        assertEquals(calculateHammingDistance(s1, s2), 0);\n\n        s1 = \"1011\";\n        s2 = \"1111\";\n        assertEquals(calculateHammingDistance(s1, s2), 2);\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test 1: empty strings\n        String s1 = \"\";\n        String s2 = \"\";\n        int expected = 0;\n        assertEquals(expected, HammingDistance.calculateHammingDistance(s1, s2));\n\n        // Test 2: different string lengths\n        s1 = \"abc\";\n        s2 = \"abcd\";\n        expected = -1;\n        assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance(s1, s2));\n\n        // Test 3: same string length and contents\n        s1 = \"abc\";\n        s2 = \"abc\";\n        expected = 0;\n        assertEquals(expected, HammingDistance.calculateHammingDistance(s1, s2));\n\n        // Test 4: same string length but different contents\n        s1 = \"abcd\";\n        s2 = \"abbc\";\n        expected = 2;\n        assertEquals(expected, HammingDistance.calculateHammingDistance(s1, s2));\n    }\n}",
        "\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        String s1 = \"ABCD\";\n        String s2 = \"ABCD\";\n        int expected = 0;\n        int actual = HammingDistance.calculateHammingDistance(s1, s2);\n        assertEquals(expected, actual);\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"\", \"\")); // both strings are empty\n        \n        assertEquals(1, HammingDistance.calculateHammingDistance(\"a\", \"b\")); // distance is 1 between \"a\" and \"b\"\n        \n        assertEquals(2, HammingDistance.calculateHammingDistance(\"abcd\", \"bcde\")); // distance is 2 between \"abcd\" and \"bcde\"\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"abc\", \"abc\"));\n        assertEquals(1, HammingDistance.calculateHammingDistance(\"abc\", \"abd\"));\n        assertEquals(2, HammingDistance.calculateHammingDistance(\"abc\", \"bcd\"));\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test case 1: equal strings\n        String s1 = \"abc\";\n        String s2 = \"abc\";\n        int expected = 0;\n        assertEquals(expected, HammingDistance.calculateHammingDistance(s1, s2));\n\n        // Test case 2: different lengths\n        s1 = \"abcd\";\n        s2 = \"abcde\";\n        assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance(s1, s2));\n\n        // Test case 3: different strings\n        s1 = \"abcd\";\n        s2 = \"wxyz\";\n        expected = 4;\n        assertEquals(expected, HammingDistance.calculateHammingDistance(s1, s2));\n    }\n}",
        "\npackage com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test case 1: Equal length strings with no difference\n        String s1 = \"abcde\";\n        String s2 = \"abcde\";\n        int expectedResult = 0;\n        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));\n\n        // Test case 2: Equal length strings with difference\n        s1 = \"abcde\";\n        s2 = \"abcdE\";\n        expectedResult = 1;\n        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));\n\n        // Test case 3: Unequal length strings\n        s1 = \"abcde\";\n        s2 = \"abcdefghijklmnopqrstuvwxyz\";\n        expectedResult = -1;\n        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));\n    }\n}",
        "\npackage com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test with two equal strings\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"abc\", \"abc\"));\n\n        // Test with different length strings\n        assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance(\"abc\", \"abcd\"));\n\n        // Test with two unequal strings\n        assertEquals(2, HammingDistance.calculateHammingDistance(\"abc\", \"abb\"));\n    }\n}",
        "\npublic class HammingDistanceTest {\n    private static final String s1 = \"abcde\";\n    private static final String s2 = \"abdce\";\n\n    @Test\n    public void calculateHammingDistanceTest() throws Exception {\n        int expected = 2;\n        assertEquals(expected, HammingDistance.calculateHammingDistance(s1, s2));\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        String s1 = \"abcd\";\n        String s2 = \"bcde\";\n        int expectedResult = 1;\n\n        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));\n    }\n}"
    ]
}