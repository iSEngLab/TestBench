Source code: 


public static int calculateHammingDistance(String s1, String s2) throws Exception {
    if (s1.length() != s2.length()) {
        throw new Exception("String lengths must be equal");
    }

    int stringLength = s1.length();
    int counter = 0;

    for (int i = 0; i < stringLength; i++) {
        if (s1.charAt(i) != s2.charAt(i)) {
            counter++;
        }
    }
    return counter;
}



No.1 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        String s1 = "1110";
        String s2 = "1110";
        assertEquals(calculateHammingDistance(s1, s2), 0);

        s1 = "1011";
        s2 = "1111";
        assertEquals(calculateHammingDistance(s1, s2), 2);
    }
}


No.2 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        // Test 1: empty strings
        String s1 = "";
        String s2 = "";
        int expected = 0;
        assertEquals(expected, HammingDistance.calculateHammingDistance(s1, s2));

        // Test 2: different string lengths
        s1 = "abc";
        s2 = "abcd";
        expected = -1;
        assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance(s1, s2));

        // Test 3: same string length and contents
        s1 = "abc";
        s2 = "abc";
        expected = 0;
        assertEquals(expected, HammingDistance.calculateHammingDistance(s1, s2));

        // Test 4: same string length but different contents
        s1 = "abcd";
        s2 = "abbc";
        expected = 2;
        assertEquals(expected, HammingDistance.calculateHammingDistance(s1, s2));
    }
}


No.3 generated result --------------------------


public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        String s1 = "ABCD";
        String s2 = "ABCD";
        int expected = 0;
        int actual = HammingDistance.calculateHammingDistance(s1, s2);
        assertEquals(expected, actual);
    }
}


No.4 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        assertEquals(0, HammingDistance.calculateHammingDistance("", "")); // both strings are empty
        
        assertEquals(1, HammingDistance.calculateHammingDistance("a", "b")); // distance is 1 between "a" and "b"
        
        assertEquals(2, HammingDistance.calculateHammingDistance("abcd", "bcde")); // distance is 2 between "abcd" and "bcde"
    }
}


No.5 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        assertEquals(0, HammingDistance.calculateHammingDistance("abc", "abc"));
        assertEquals(1, HammingDistance.calculateHammingDistance("abc", "abd"));
        assertEquals(2, HammingDistance.calculateHammingDistance("abc", "bcd"));
    }
}


No.6 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        // Test case 1: equal strings
        String s1 = "abc";
        String s2 = "abc";
        int expected = 0;
        assertEquals(expected, HammingDistance.calculateHammingDistance(s1, s2));

        // Test case 2: different lengths
        s1 = "abcd";
        s2 = "abcde";
        assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance(s1, s2));

        // Test case 3: different strings
        s1 = "abcd";
        s2 = "wxyz";
        expected = 4;
        assertEquals(expected, HammingDistance.calculateHammingDistance(s1, s2));
    }
}


No.7 generated result --------------------------


package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        // Test case 1: Equal length strings with no difference
        String s1 = "abcde";
        String s2 = "abcde";
        int expectedResult = 0;
        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));

        // Test case 2: Equal length strings with difference
        s1 = "abcde";
        s2 = "abcdE";
        expectedResult = 1;
        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));

        // Test case 3: Unequal length strings
        s1 = "abcde";
        s2 = "abcdefghijklmnopqrstuvwxyz";
        expectedResult = -1;
        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));
    }
}


No.8 generated result --------------------------


package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        // Test with two equal strings
        assertEquals(0, HammingDistance.calculateHammingDistance("abc", "abc"));

        // Test with different length strings
        assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance("abc", "abcd"));

        // Test with two unequal strings
        assertEquals(2, HammingDistance.calculateHammingDistance("abc", "abb"));
    }
}


No.9 generated result --------------------------


public class HammingDistanceTest {
    private static final String s1 = "abcde";
    private static final String s2 = "abdce";

    @Test
    public void calculateHammingDistanceTest() throws Exception {
        int expected = 2;
        assertEquals(expected, HammingDistance.calculateHammingDistance(s1, s2));
    }
}


No.10 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        String s1 = "abcd";
        String s2 = "bcde";
        int expectedResult = 1;

        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));
    }
}


