{
    "project_name": "Java",
    "file_name": "HammingDistance.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/strings/HammingDistance.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.strings",
    "docstring": "/**\n     * calculate the hamming distance between two strings of equal length\n     *\n     * @param s1 the first string\n     * @param s2 the second string\n     * @return {@code int} hamming distance\n     * @throws Exception\n     */",
    "source_code": "\npublic static int calculateHammingDistance(String s1, String s2) throws Exception {\n    if (s1.length() != s2.length()) {\n        throw new Exception(\"String lengths must be equal\");\n    }\n\n    int stringLength = s1.length();\n    int counter = 0;\n\n    for (int i = 0; i < stringLength; i++) {\n        if (s1.charAt(i) != s2.charAt(i)) {\n            counter++;\n        }\n    }\n    return counter;\n}\n",
    "class_name": "HammingDistance",
    "method_name": "calculateHammingDistance",
    "arguments": [
        "String s1",
        "String s2"
    ],
    "generate_test": [
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test that method throws exception when string lengths are not equal\n        String s1 = \"hello\";\n        String s2 = \"world\";\n        assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance(s1, s2));\n\n        // Test that method returns correct Hamming distance for two strings with the same length\n        s1 = \"hello\";\n        s2 = \"hell0\";\n        assertEquals(1, HammingDistance.calculateHammingDistance(s1, s2));\n    }\n}",
        "\npackage com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        String s1 = \"hello\";\n        String s2 = \"world\";\n        int expectedDistance = 4; // the number of characters that are different between s1 and s2\n\n        try {\n            int actualDistance = HammingDistance.calculateHammingDistance(s1, s2);\n            assertEquals(expectedDistance, actualDistance);\n        } catch (Exception e) {\n            fail(\"Exception thrown: \" + e.getMessage());\n        }\n    }\n}\n",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test case 1: String lengths are equal\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"\", \"\"));\n        assertEquals(1, HammingDistance.calculateHammingDistance(\"abcde\", \"abcdf\"));\n        assertEquals(2, HammingDistance.calculateHammingDistance(\"abcd\", \"bcda\"));\n        \n        // Test case 2: String lengths are not equal\n        assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance(\"abcde\", \"abcdef\"));\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Create two similar but not identical strings\n        String s1 = \"abcdefgh\";\n        String s2 = \"abcdEfgh\";\n        \n        // Calculate the Hamming distance between them\n        int hammingDistance = HammingDistance.calculateHammingDistance(s1, s2);\n        \n        // Assert that the result is correct\n        assertEquals(hammingDistance, 1);\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        String s1 = \"abcd\";\n        String s2 = \"abce\";\n        \n        int hammingDistance = HammingDistance.calculateHammingDistance(s1, s2);\n        \n        assertEquals(1, hammingDistance);\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        String s1 = \"abcdefgh\";\n        String s2 = \"abcdxyz\";\n        int expectedResult = 3; // expected result is the number of positions at which the corresponding characters are different\n        int actualResult = HammingDistance.calculateHammingDistance(s1, s2);\n        assertEquals(expectedResult, actualResult);\n    }\n}\n",
        "@Test\npublic void calculateHammingDistanceTest() {\n    String s1 = \"hello\";\n    String s2 = \"world\";\n    int expected = 4;\n    assertEquals(expected, HammingDistance.calculateHammingDistance(s1, s2));\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance(\"abcd\", \"abc\"));\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"abcd\", \"abcd\"));\n        assertEquals(1, HammingDistance.calculateHammingDistance(\"abcd\", \"abcde\"));\n        assertEquals(2, HammingDistance.calculateHammingDistance(\"abcd\", \"bcde\"));\n        assertEquals(3, HammingDistance.calculateHammingDistance(\"abcd\", \"cdef\"));\n    }\n}\n",
        "@Test\npublic void calculateHammingDistanceTest() throws Exception {\n    String s1 = \"hello\";\n    String s2 = \"world\";\n    int expected = 4; // hamming distance between \"hello\" and \"world\" is 4\n    \n    int actual = HammingDistance.calculateHammingDistance(s1, s2);\n    \n    assertEquals(expected, actual);\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        String s1 = \"abc\";\n        String s2 = \"def\";\n\n        assertEquals(3, HammingDistance.calculateHammingDistance(s1, s2));\n    }\n}"
    ]
}