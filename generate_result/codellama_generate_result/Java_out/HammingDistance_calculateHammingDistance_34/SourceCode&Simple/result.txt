Source code: 


public static int calculateHammingDistance(String s1, String s2) throws Exception {
    if (s1.length() != s2.length()) {
        throw new Exception("String lengths must be equal");
    }

    int stringLength = s1.length();
    int counter = 0;

    for (int i = 0; i < stringLength; i++) {
        if (s1.charAt(i) != s2.charAt(i)) {
            counter++;
        }
    }
    return counter;
}



No.1 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        // Test that method throws exception when string lengths are not equal
        String s1 = "hello";
        String s2 = "world";
        assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance(s1, s2));

        // Test that method returns correct Hamming distance for two strings with the same length
        s1 = "hello";
        s2 = "hell0";
        assertEquals(1, HammingDistance.calculateHammingDistance(s1, s2));
    }
}


No.2 generated result --------------------------


package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        String s1 = "hello";
        String s2 = "world";
        int expectedDistance = 4; // the number of characters that are different between s1 and s2

        try {
            int actualDistance = HammingDistance.calculateHammingDistance(s1, s2);
            assertEquals(expectedDistance, actualDistance);
        } catch (Exception e) {
            fail("Exception thrown: " + e.getMessage());
        }
    }
}



No.3 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        // Test case 1: String lengths are equal
        assertEquals(0, HammingDistance.calculateHammingDistance("", ""));
        assertEquals(1, HammingDistance.calculateHammingDistance("abcde", "abcdf"));
        assertEquals(2, HammingDistance.calculateHammingDistance("abcd", "bcda"));
        
        // Test case 2: String lengths are not equal
        assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance("abcde", "abcdef"));
    }
}


No.4 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        // Create two similar but not identical strings
        String s1 = "abcdefgh";
        String s2 = "abcdEfgh";
        
        // Calculate the Hamming distance between them
        int hammingDistance = HammingDistance.calculateHammingDistance(s1, s2);
        
        // Assert that the result is correct
        assertEquals(hammingDistance, 1);
    }
}


No.5 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        String s1 = "abcd";
        String s2 = "abce";
        
        int hammingDistance = HammingDistance.calculateHammingDistance(s1, s2);
        
        assertEquals(1, hammingDistance);
    }
}


No.6 generated result --------------------------


import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        String s1 = "abcdefgh";
        String s2 = "abcdxyz";
        int expectedResult = 3; // expected result is the number of positions at which the corresponding characters are different
        int actualResult = HammingDistance.calculateHammingDistance(s1, s2);
        assertEquals(expectedResult, actualResult);
    }
}



No.7 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    String s1 = "hello";
    String s2 = "world";
    int expected = 4;
    assertEquals(expected, HammingDistance.calculateHammingDistance(s1, s2));
}


No.8 generated result --------------------------


import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance("abcd", "abc"));
        assertEquals(0, HammingDistance.calculateHammingDistance("abcd", "abcd"));
        assertEquals(1, HammingDistance.calculateHammingDistance("abcd", "abcde"));
        assertEquals(2, HammingDistance.calculateHammingDistance("abcd", "bcde"));
        assertEquals(3, HammingDistance.calculateHammingDistance("abcd", "cdef"));
    }
}



No.9 generated result --------------------------

@Test
public void calculateHammingDistanceTest() throws Exception {
    String s1 = "hello";
    String s2 = "world";
    int expected = 4; // hamming distance between "hello" and "world" is 4
    
    int actual = HammingDistance.calculateHammingDistance(s1, s2);
    
    assertEquals(expected, actual);
}


No.10 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        String s1 = "abc";
        String s2 = "def";

        assertEquals(3, HammingDistance.calculateHammingDistance(s1, s2));
    }
}


