{
    "project_name": "Java",
    "file_name": "HammingDistance.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/strings/HammingDistance.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.strings",
    "docstring": "/**\n     * calculate the hamming distance between two strings of equal length\n     *\n     * @param s1 the first string\n     * @param s2 the second string\n     * @return {@code int} hamming distance\n     * @throws Exception\n     */",
    "source_code": "\npublic static int calculateHammingDistance(String s1, String s2) throws Exception {\n    if (s1.length() != s2.length()) {\n        throw new Exception(\"String lengths must be equal\");\n    }\n\n    int stringLength = s1.length();\n    int counter = 0;\n\n    for (int i = 0; i < stringLength; i++) {\n        if (s1.charAt(i) != s2.charAt(i)) {\n            counter++;\n        }\n    }\n    return counter;\n}\n",
    "class_name": "HammingDistance",
    "method_name": "calculateHammingDistance",
    "arguments": [
        "String s1",
        "String s2"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test case 1: equal strings, should return 0\n        String s1 = \"hello\";\n        String s2 = \"hello\";\n        int expectedResult = 0;\n        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));\n\n        // Test case 2: unequal strings of different lengths, should throw Exception\n        s1 = \"hello\";\n        s2 = \"world\";\n        expectedResult = -1;\n        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));\n\n        // Test case 3: unequal strings of same length, should return correct hamming distance\n        s1 = \"hello\";\n        s2 = \"world\";\n        expectedResult = 4;\n        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));\n    }\n}",
        "\npackage com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"\", \"\"));\n        assertEquals(1, HammingDistance.calculateHammingDistance(\"a\", \"b\"));\n        assertEquals(2, HammingDistance.calculateHammingDistance(\"ab\", \"c\"));\n        assertEquals(3, HammingDistance.calculateHammingDistance(\"abc\", \"cba\"));\n    }\n}",
        "\npackage com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        String s1 = \"ABCD\";\n        String s2 = \"BCDE\";\n        int expectedDistance = 2;\n\n        int actualDistance = HammingDistance.calculateHammingDistance(s1, s2);\n\n        assertEquals(expectedDistance, actualDistance);\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"\", \"\"));\n        assertEquals(1, HammingDistance.calculateHammingDistance(\"a\", \"b\"));\n        assertEquals(2, HammingDistance.calculateHammingDistance(\"ab\", \"ba\"));\n        assertEquals(3, HammingDistance.calculateHammingDistance(\"abc\", \"cde\"));\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test that the method throws an exception when the string lengths are not equal\n        assertThrows(Exception.class, () -> {\n            String s1 = \"Hello\";\n            String s2 = \"World!\";\n            int result = HammingDistance.calculateHammingDistance(s1, s2);\n            // Should throw an exception because string lengths are not equal\n        });\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test case 1: equal strings with no differences\n        String s1 = \"abcde\";\n        String s2 = \"abcde\";\n        int expectedResult = 0;\n        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));\n        \n        // Test case 2: strings with one difference\n        s1 = \"abcd\";\n        s2 = \"abcde\";\n        expectedResult = 1;\n        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));\n        \n        // Test case 3: strings with multiple differences\n        s1 = \"abcd\";\n        s2 = \"bcdea\";\n        expectedResult = 4;\n        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));\n        \n        // Test case 4: strings with different lengths\n        s1 = \"abc\";\n        s2 = \"abcd\";\n        try {\n            expectedResult = 0;\n            assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));\n            fail(\"Exception should have been thrown\");\n        } catch (Exception e) {\n            // Expected exception: String lengths must be equal\n            assertEquals(\"String lengths must be equal\", e.getMessage());\n        }\n    }\n}\n",
        "\npackage com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test case 1: equal strings\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"abcde\", \"abcde\"));\n        \n        // Test case 2: unequal strings\n        assertEquals(1, HammingDistance.calculateHammingDistance(\"abcde\", \"abcdE\"));\n        \n        // Test case 3: unequal strings of different lengths\n        assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance(\"abc\", \"abcd\"));\n    }\n}",
        "\npackage com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        String s1 = \"abcdef\";\n        String s2 = \"abcdxy\";\n        int expectedDistance = 2;\n        \n        assertEquals(expectedDistance, HammingDistance.calculateHammingDistance(s1, s2));\n    }\n}\n",
        "\npackage com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        assertEquals(calculateHammingDistance(\"1010\", \"1010\"), 0); // equal strings, no difference\n        assertEquals(calculateHammingDistance(\"1010\", \"1011\"), 1); // one different character\n        assertEquals(calculateHammingDistance(\"1010\", \"1111\"), 4); // all characters are different\n        assertThrows(Exception.class, () -> calculateHammingDistance(\"123\", \"12\")); // string lengths not equal\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        String s1 = \"hello\";\n        String s2 = \"world\";\n        int expectedResult = 4; // The hamming distance between \"hello\" and \"world\" is 4\n\n        try {\n            int actualResult = HammingDistance.calculateHammingDistance(s1, s2);\n            assertEquals(expectedResult, actualResult);\n        } catch (Exception e) {\n            fail(\"An exception was thrown: \" + e);\n        }\n    }\n}"
    ]
}