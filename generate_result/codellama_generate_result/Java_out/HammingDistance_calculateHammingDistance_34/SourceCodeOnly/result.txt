Source code: 


public static int calculateHammingDistance(String s1, String s2) throws Exception {
    if (s1.length() != s2.length()) {
        throw new Exception("String lengths must be equal");
    }

    int stringLength = s1.length();
    int counter = 0;

    for (int i = 0; i < stringLength; i++) {
        if (s1.charAt(i) != s2.charAt(i)) {
            counter++;
        }
    }
    return counter;
}



No.1 generated result --------------------------


package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        // Test case 1: equal strings, should return 0
        String s1 = "hello";
        String s2 = "hello";
        int expectedResult = 0;
        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));

        // Test case 2: unequal strings of different lengths, should throw Exception
        s1 = "hello";
        s2 = "world";
        expectedResult = -1;
        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));

        // Test case 3: unequal strings of same length, should return correct hamming distance
        s1 = "hello";
        s2 = "world";
        expectedResult = 4;
        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));
    }
}


No.2 generated result --------------------------


package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        assertEquals(0, HammingDistance.calculateHammingDistance("", ""));
        assertEquals(1, HammingDistance.calculateHammingDistance("a", "b"));
        assertEquals(2, HammingDistance.calculateHammingDistance("ab", "c"));
        assertEquals(3, HammingDistance.calculateHammingDistance("abc", "cba"));
    }
}


No.3 generated result --------------------------


package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        String s1 = "ABCD";
        String s2 = "BCDE";
        int expectedDistance = 2;

        int actualDistance = HammingDistance.calculateHammingDistance(s1, s2);

        assertEquals(expectedDistance, actualDistance);
    }
}


No.4 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        assertEquals(0, HammingDistance.calculateHammingDistance("", ""));
        assertEquals(1, HammingDistance.calculateHammingDistance("a", "b"));
        assertEquals(2, HammingDistance.calculateHammingDistance("ab", "ba"));
        assertEquals(3, HammingDistance.calculateHammingDistance("abc", "cde"));
    }
}


No.5 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        // Test that the method throws an exception when the string lengths are not equal
        assertThrows(Exception.class, () -> {
            String s1 = "Hello";
            String s2 = "World!";
            int result = HammingDistance.calculateHammingDistance(s1, s2);
            // Should throw an exception because string lengths are not equal
        });
    }
}


No.6 generated result --------------------------


import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        // Test case 1: equal strings with no differences
        String s1 = "abcde";
        String s2 = "abcde";
        int expectedResult = 0;
        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));
        
        // Test case 2: strings with one difference
        s1 = "abcd";
        s2 = "abcde";
        expectedResult = 1;
        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));
        
        // Test case 3: strings with multiple differences
        s1 = "abcd";
        s2 = "bcdea";
        expectedResult = 4;
        assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));
        
        // Test case 4: strings with different lengths
        s1 = "abc";
        s2 = "abcd";
        try {
            expectedResult = 0;
            assertEquals(expectedResult, HammingDistance.calculateHammingDistance(s1, s2));
            fail("Exception should have been thrown");
        } catch (Exception e) {
            // Expected exception: String lengths must be equal
            assertEquals("String lengths must be equal", e.getMessage());
        }
    }
}



No.7 generated result --------------------------


package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        // Test case 1: equal strings
        assertEquals(0, HammingDistance.calculateHammingDistance("abcde", "abcde"));
        
        // Test case 2: unequal strings
        assertEquals(1, HammingDistance.calculateHammingDistance("abcde", "abcdE"));
        
        // Test case 3: unequal strings of different lengths
        assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance("abc", "abcd"));
    }
}


No.8 generated result --------------------------


package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        String s1 = "abcdef";
        String s2 = "abcdxy";
        int expectedDistance = 2;
        
        assertEquals(expectedDistance, HammingDistance.calculateHammingDistance(s1, s2));
    }
}



No.9 generated result --------------------------


package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        assertEquals(calculateHammingDistance("1010", "1010"), 0); // equal strings, no difference
        assertEquals(calculateHammingDistance("1010", "1011"), 1); // one different character
        assertEquals(calculateHammingDistance("1010", "1111"), 4); // all characters are different
        assertThrows(Exception.class, () -> calculateHammingDistance("123", "12")); // string lengths not equal
    }
}


No.10 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        String s1 = "hello";
        String s2 = "world";
        int expectedResult = 4; // The hamming distance between "hello" and "world" is 4

        try {
            int actualResult = HammingDistance.calculateHammingDistance(s1, s2);
            assertEquals(expectedResult, actualResult);
        } catch (Exception e) {
            fail("An exception was thrown: " + e);
        }
    }
}


