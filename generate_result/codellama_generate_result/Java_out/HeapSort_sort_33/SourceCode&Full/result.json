{
    "project_name": "Java",
    "file_name": "HeapSort.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/sorts/HeapSort.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.sorts",
    "docstring": "/**\n     * For simplicity, we are considering the heap root index as 1 instead of 0.\n     * It simplifies future calculations. Because of that we are decreasing the\n     * provided indexes by 1 in {@link #swap(Object[], int, int)} and\n     * {@link #less(Comparable[], int, int)} functions.\n     */",
    "source_code": "\n@Override\npublic <T extends Comparable<T>> T[] sort(T[] unsorted) {\n    int n = unsorted.length;\n    heapify(unsorted, n);\n    while (n > 1) {\n        swap(unsorted, 1, n--);\n        siftDown(unsorted, 1, n);\n    }\n    return unsorted;\n}\n",
    "class_name": "HeapSort",
    "method_name": "sort",
    "arguments": [
        "T unsorted"
    ],
    "generate_test": [
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        // Test sorting an empty array\n        int[] empty = new int[0];\n        assertArrayEquals(empty, HeapSort.sort(empty));\n\n        // Test sorting a single-element array\n        int[] singleElement = { 5 };\n        assertArrayEquals(singleElement, HeapSort.sort(singleElement));\n\n        // Test sorting an array of size 2\n        int[] sizeTwo = { 10, 5 };\n        assertArrayEquals(sizeTwo, HeapSort.sort(sizeTwo));\n\n        // Test sorting an array of size 3\n        int[] sizeThree = { 10, 5, 20 };\n        assertArrayEquals(sizeThree, HeapSort.sort(sizeThree));\n\n        // Test sorting an array of size 4\n        int[] sizeFour = { 10, 5, 20, 8 };\n        assertArrayEquals(sizeFour, HeapSort.sort(sizeFour));\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        int[] unsorted = new int[]{5, 3, 1, 2, 4};\n        int[] sorted = new int[]{1, 2, 3, 4, 5};\n        assertArrayEquals(sorted, HeapSort.sort(unsorted));\n    }\n}",
        "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        int[] unsorted = new int[] {5, 3, 12, 8, 4};\n        int[] sorted = new int[] {1, 2, 4, 5, 6};\n        HeapSort heapSort = new HeapSort();\n        assertArrayEquals(sorted, heapSort.sort(unsorted));\n    }\n}",
        "@Test\npublic void sortTest() {\n    Integer[] input = new Integer[] {3, 2, 1};\n    HeapSort.sort(input);\n    assertArrayEquals(new Integer[] {1, 2, 3}, input);\n}",
        "\npackage com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        // Arrange\n        Integer[] unsorted = new Integer[] { 5, 3, 10, 8, 2 };\n        \n        // Act\n        HeapSort heapSort = new HeapSort();\n        Integer[] sorted = heapSort.sort(unsorted);\n        \n        // Assert\n        assertArrayEquals(new Integer[] { 2, 3, 5, 8, 10 }, sorted);\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        int[] input = new int[]{5, 2, 7, 1, 4};\n        int[] expectedOutput = new int[]{1, 2, 4, 5, 7};\n        assertArrayEquals(expectedOutput, HeapSort.sort(input));\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        // Test for sorting an empty array\n        assertEquals(0, new HeapSort().sort(new Integer[0]).length);\n\n        // Test for sorting a single-element array\n        assertArrayEquals(new Integer[] { 1 }, new HeapSort().sort(new Integer[] { 1 }));\n\n        // Test for sorting a two-element array\n        assertArrayEquals(new Integer[] { 1, 2 }, new HeapSort().sort(new Integer[] { 2, 1 }));\n\n        // Test for sorting a three-element array\n        assertArrayEquals(new Integer[] { 1, 2, 3 }, new HeapSort().sort(new Integer[] { 2, 3, 1 }));\n    }\n}",
        "package com.thealgorithms.sorts;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class HeapSortTest {\n    @Test public void sortTest() {\n        Integer[] unsorted = {3, 2, 1, 4};\n        HeapSort heapSort = new HeapSort();\n        Integer[] sorted = heapSort.sort(unsorted);\n        assertArrayEquals(new Integer[]{1, 2, 3, 4}, sorted);\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        int[] arr = new int[] { 5, 2, 6, 1, 3 };\n        HeapSort heapSort = new HeapSort();\n        int[] sortedArr = heapSort.sort(arr);\n        \n        assertTrue(isInAscendingOrder(sortedArr));\n    }\n    \n    private boolean isInAscendingOrder(int[] arr) {\n        for (int i = 0; i < arr.length - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        int[] unsorted = new int[] { 3, 2, 1 };\n        int[] sorted = HeapSort.sort(unsorted);\n        assertArrayEquals(new int[] { 1, 2, 3 }, sorted);\n    }\n}"
    ]
}