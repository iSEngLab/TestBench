Source code: 


@Override
public <T extends Comparable<T>> T[] sort(T[] unsorted) {
    int n = unsorted.length;
    heapify(unsorted, n);
    while (n > 1) {
        swap(unsorted, 1, n--);
        siftDown(unsorted, 1, n);
    }
    return unsorted;
}



No.1 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        // Test sorting an empty array
        int[] empty = new int[0];
        assertArrayEquals(empty, HeapSort.sort(empty));

        // Test sorting a single-element array
        int[] singleElement = { 5 };
        assertArrayEquals(singleElement, HeapSort.sort(singleElement));

        // Test sorting an array of size 2
        int[] sizeTwo = { 10, 5 };
        assertArrayEquals(sizeTwo, HeapSort.sort(sizeTwo));

        // Test sorting an array of size 3
        int[] sizeThree = { 10, 5, 20 };
        assertArrayEquals(sizeThree, HeapSort.sort(sizeThree));

        // Test sorting an array of size 4
        int[] sizeFour = { 10, 5, 20, 8 };
        assertArrayEquals(sizeFour, HeapSort.sort(sizeFour));
    }
}


No.2 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        int[] unsorted = new int[]{5, 3, 1, 2, 4};
        int[] sorted = new int[]{1, 2, 3, 4, 5};
        assertArrayEquals(sorted, HeapSort.sort(unsorted));
    }
}


No.3 generated result --------------------------

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        int[] unsorted = new int[] {5, 3, 12, 8, 4};
        int[] sorted = new int[] {1, 2, 4, 5, 6};
        HeapSort heapSort = new HeapSort();
        assertArrayEquals(sorted, heapSort.sort(unsorted));
    }
}


No.4 generated result --------------------------

@Test
public void sortTest() {
    Integer[] input = new Integer[] {3, 2, 1};
    HeapSort.sort(input);
    assertArrayEquals(new Integer[] {1, 2, 3}, input);
}


No.5 generated result --------------------------


package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        // Arrange
        Integer[] unsorted = new Integer[] { 5, 3, 10, 8, 2 };
        
        // Act
        HeapSort heapSort = new HeapSort();
        Integer[] sorted = heapSort.sort(unsorted);
        
        // Assert
        assertArrayEquals(new Integer[] { 2, 3, 5, 8, 10 }, sorted);
    }
}


No.6 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        int[] input = new int[]{5, 2, 7, 1, 4};
        int[] expectedOutput = new int[]{1, 2, 4, 5, 7};
        assertArrayEquals(expectedOutput, HeapSort.sort(input));
    }
}


No.7 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        // Test for sorting an empty array
        assertEquals(0, new HeapSort().sort(new Integer[0]).length);

        // Test for sorting a single-element array
        assertArrayEquals(new Integer[] { 1 }, new HeapSort().sort(new Integer[] { 1 }));

        // Test for sorting a two-element array
        assertArrayEquals(new Integer[] { 1, 2 }, new HeapSort().sort(new Integer[] { 2, 1 }));

        // Test for sorting a three-element array
        assertArrayEquals(new Integer[] { 1, 2, 3 }, new HeapSort().sort(new Integer[] { 2, 3, 1 }));
    }
}


No.8 generated result --------------------------

package com.thealgorithms.sorts;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
public class HeapSortTest {
    @Test public void sortTest() {
        Integer[] unsorted = {3, 2, 1, 4};
        HeapSort heapSort = new HeapSort();
        Integer[] sorted = heapSort.sort(unsorted);
        assertArrayEquals(new Integer[]{1, 2, 3, 4}, sorted);
    }
}


No.9 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        int[] arr = new int[] { 5, 2, 6, 1, 3 };
        HeapSort heapSort = new HeapSort();
        int[] sortedArr = heapSort.sort(arr);
        
        assertTrue(isInAscendingOrder(sortedArr));
    }
    
    private boolean isInAscendingOrder(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                return false;
            }
        }
        return true;
    }
}


No.10 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        int[] unsorted = new int[] { 3, 2, 1 };
        int[] sorted = HeapSort.sort(unsorted);
        assertArrayEquals(new int[] { 1, 2, 3 }, sorted);
    }
}


