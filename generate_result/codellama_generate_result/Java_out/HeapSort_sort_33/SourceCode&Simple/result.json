{
    "project_name": "Java",
    "file_name": "HeapSort.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/sorts/HeapSort.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.sorts",
    "docstring": "/**\n     * For simplicity, we are considering the heap root index as 1 instead of 0.\n     * It simplifies future calculations. Because of that we are decreasing the\n     * provided indexes by 1 in {@link #swap(Object[], int, int)} and\n     * {@link #less(Comparable[], int, int)} functions.\n     */",
    "source_code": "\n@Override\npublic <T extends Comparable<T>> T[] sort(T[] unsorted) {\n    int n = unsorted.length;\n    heapify(unsorted, n);\n    while (n > 1) {\n        swap(unsorted, 1, n--);\n        siftDown(unsorted, 1, n);\n    }\n    return unsorted;\n}\n",
    "class_name": "HeapSort",
    "method_name": "sort",
    "arguments": [
        "T unsorted"
    ],
    "generate_test": [
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        // Create an array of 10 elements\n        Integer[] unsorted = new Integer[10];\n        for (int i = 0; i < 10; i++) {\n            unsorted[i] = i * 2 + 1;\n        }\n\n        // Sort the array using heap sort algorithm\n        HeapSort heapSort = new HeapSort();\n        Integer[] sorted = heapSort.sort(unsorted);\n\n        // Check if the array is sorted in ascending order\n        assertTrue(java.util.Arrays.equals(sorted, new Integer[]{1, 3, 5, 7, 9}));\n    }\n}",
        "\npackage com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        // Test for empty array\n        int[] arr = {};\n        HeapSort heapSort = new HeapSort();\n        assertEquals(heapSort.sort(arr), arr);\n\n        // Test for single element array\n        arr = new int[]{1};\n        assertEquals(heapSort.sort(arr), arr);\n\n        // Test for array with multiple elements\n        arr = new int[]{3, 2, 1, 4, 5};\n        int[] expected = {1, 2, 3, 4, 5};\n        assertArrayEquals(heapSort.sort(arr), expected);\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        // Create an array of objects that implement the Comparable interface\n        Comparable[] arr = new Comparable[]{1, 3, 2, 5, 4};\n        \n        // Sort the array using the HeapSort algorithm\n        HeapSort.sort(arr);\n        \n        // Check that the sorted array is in ascending order\n        assertArrayEquals(new Comparable[] {1, 2, 3, 4, 5}, arr);\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        // Test case 1: Empty array\n        Integer[] emptyArray = new Integer[0];\n        HeapSort heapSort = new HeapSort();\n        assertEquals(emptyArray, heapSort.sort(emptyArray));\n        \n        // Test case 2: Single element array\n        Integer[] singleElementArray = new Integer[]{4};\n        assertEquals(singleElementArray, heapSort.sort(singleElementArray));\n        \n        // Test case 3: Multi-element array\n        Integer[] multiElementArray = new Integer[]{9, 8, 7, 6, 5, 4, 3, 2, 1};\n        Integer[] sortedMultiElementArray = new Integer[]{1, 2, 3, 4, 5, 6, 7, 8, 9};\n        assertEquals(sortedMultiElementArray, heapSort.sort(multiElementArray));\n    }\n}",
        "@Test\npublic void sortTest() {\n    HeapSort heapSort = new HeapSort();\n    Integer[] unsortedArray = new Integer[] {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\n    Integer[] sortedArray = new Integer[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    assertArrayEquals(sortedArray, heapSort.sort(unsortedArray));\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        // Create an array of integers to be sorted\n        Integer[] unsorted = new Integer[] { 3, 1, 2, 5, 4 };\n        \n        // Sort the array using the heapify method\n        int n = unsorted.length;\n        HeapSort.heapify(unsorted, n);\n        \n        // Check that the array is sorted in ascending order\n        for (int i = 1; i < n; i++) {\n            assertTrue(unsorted[i - 1] <= unsorted[i]);\n        }\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        // Empty array test case\n        int[] emptyArray = {};\n        assertEquals(emptyArray, new HeapSort().sort(emptyArray));\n        \n        // Single element array test case\n        int[] singleElementArray = {1};\n        assertEquals(singleElementArray, new HeapSort().sort(singleElementArray));\n        \n        // Multi-element array test case\n        int[] multiElementArray = {5, 2, 8, 3, 6, 1, 4};\n        int[] expectedSortedArray = {1, 2, 3, 4, 5, 6, 8};\n        assertEquals(expectedSortedArray, new HeapSort().sort(multiElementArray));\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        // Test with an empty array\n        int[] input = {};\n        int[] expectedOutput = {};\n        assertArrayEquals(expectedOutput, new HeapSort().sort(input));\n\n        // Test with a single element array\n        input = new int[]{1};\n        expectedOutput = new int[]{1};\n        assertArrayEquals(expectedOutput, new HeapSort().sort(input));\n\n        // Test with an unsorted array\n        input = new int[]{3, 2, 1};\n        expectedOutput = new int[]{1, 2, 3};\n        assertArrayEquals(expectedOutput, new HeapSort().sort(input));\n\n        // Test with a sorted array\n        input = new int[]{1, 2, 3};\n        expectedOutput = new int[]{1, 2, 3};\n        assertArrayEquals(expectedOutput, new HeapSort().sort(input));\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n        int[] unsortedArray = {5, 3, 7, 2, 1};\n        int[] sortedArray = {1, 2, 3, 5, 7};\n\n        assertArrayEquals(sortedArray, heapSort.sort(unsortedArray));\n    }\n}",
        "@Test\npublic void sortTest() {\n    int[] unsorted = new int[] { 5, 2, 6, 1, 3 };\n    int[] expected = new int[] { 1, 2, 3, 5, 6 };\n\n    HeapSort heapSort = new HeapSort();\n    assertArrayEquals(expected, heapSort.sort(unsorted));\n}"
    ]
}