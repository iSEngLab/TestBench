Source code: 


@Override
public <T extends Comparable<T>> T[] sort(T[] unsorted) {
    int n = unsorted.length;
    heapify(unsorted, n);
    while (n > 1) {
        swap(unsorted, 1, n--);
        siftDown(unsorted, 1, n);
    }
    return unsorted;
}



No.1 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        // Create an array of 10 elements
        Integer[] unsorted = new Integer[10];
        for (int i = 0; i < 10; i++) {
            unsorted[i] = i * 2 + 1;
        }

        // Sort the array using heap sort algorithm
        HeapSort heapSort = new HeapSort();
        Integer[] sorted = heapSort.sort(unsorted);

        // Check if the array is sorted in ascending order
        assertTrue(java.util.Arrays.equals(sorted, new Integer[]{1, 3, 5, 7, 9}));
    }
}


No.2 generated result --------------------------


package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        // Test for empty array
        int[] arr = {};
        HeapSort heapSort = new HeapSort();
        assertEquals(heapSort.sort(arr), arr);

        // Test for single element array
        arr = new int[]{1};
        assertEquals(heapSort.sort(arr), arr);

        // Test for array with multiple elements
        arr = new int[]{3, 2, 1, 4, 5};
        int[] expected = {1, 2, 3, 4, 5};
        assertArrayEquals(heapSort.sort(arr), expected);
    }
}


No.3 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        // Create an array of objects that implement the Comparable interface
        Comparable[] arr = new Comparable[]{1, 3, 2, 5, 4};
        
        // Sort the array using the HeapSort algorithm
        HeapSort.sort(arr);
        
        // Check that the sorted array is in ascending order
        assertArrayEquals(new Comparable[] {1, 2, 3, 4, 5}, arr);
    }
}


No.4 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        // Test case 1: Empty array
        Integer[] emptyArray = new Integer[0];
        HeapSort heapSort = new HeapSort();
        assertEquals(emptyArray, heapSort.sort(emptyArray));
        
        // Test case 2: Single element array
        Integer[] singleElementArray = new Integer[]{4};
        assertEquals(singleElementArray, heapSort.sort(singleElementArray));
        
        // Test case 3: Multi-element array
        Integer[] multiElementArray = new Integer[]{9, 8, 7, 6, 5, 4, 3, 2, 1};
        Integer[] sortedMultiElementArray = new Integer[]{1, 2, 3, 4, 5, 6, 7, 8, 9};
        assertEquals(sortedMultiElementArray, heapSort.sort(multiElementArray));
    }
}


No.5 generated result --------------------------

@Test
public void sortTest() {
    HeapSort heapSort = new HeapSort();
    Integer[] unsortedArray = new Integer[] {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
    Integer[] sortedArray = new Integer[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    assertArrayEquals(sortedArray, heapSort.sort(unsortedArray));
}


No.6 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        // Create an array of integers to be sorted
        Integer[] unsorted = new Integer[] { 3, 1, 2, 5, 4 };
        
        // Sort the array using the heapify method
        int n = unsorted.length;
        HeapSort.heapify(unsorted, n);
        
        // Check that the array is sorted in ascending order
        for (int i = 1; i < n; i++) {
            assertTrue(unsorted[i - 1] <= unsorted[i]);
        }
    }
}


No.7 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        // Empty array test case
        int[] emptyArray = {};
        assertEquals(emptyArray, new HeapSort().sort(emptyArray));
        
        // Single element array test case
        int[] singleElementArray = {1};
        assertEquals(singleElementArray, new HeapSort().sort(singleElementArray));
        
        // Multi-element array test case
        int[] multiElementArray = {5, 2, 8, 3, 6, 1, 4};
        int[] expectedSortedArray = {1, 2, 3, 4, 5, 6, 8};
        assertEquals(expectedSortedArray, new HeapSort().sort(multiElementArray));
    }
}


No.8 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        // Test with an empty array
        int[] input = {};
        int[] expectedOutput = {};
        assertArrayEquals(expectedOutput, new HeapSort().sort(input));

        // Test with a single element array
        input = new int[]{1};
        expectedOutput = new int[]{1};
        assertArrayEquals(expectedOutput, new HeapSort().sort(input));

        // Test with an unsorted array
        input = new int[]{3, 2, 1};
        expectedOutput = new int[]{1, 2, 3};
        assertArrayEquals(expectedOutput, new HeapSort().sort(input));

        // Test with a sorted array
        input = new int[]{1, 2, 3};
        expectedOutput = new int[]{1, 2, 3};
        assertArrayEquals(expectedOutput, new HeapSort().sort(input));
    }
}


No.9 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        HeapSort heapSort = new HeapSort();
        int[] unsortedArray = {5, 3, 7, 2, 1};
        int[] sortedArray = {1, 2, 3, 5, 7};

        assertArrayEquals(sortedArray, heapSort.sort(unsortedArray));
    }
}


No.10 generated result --------------------------

@Test
public void sortTest() {
    int[] unsorted = new int[] { 5, 2, 6, 1, 3 };
    int[] expected = new int[] { 1, 2, 3, 5, 6 };

    HeapSort heapSort = new HeapSort();
    assertArrayEquals(expected, heapSort.sort(unsorted));
}


