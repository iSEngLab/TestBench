{
    "project_name": "Java",
    "file_name": "HeapSort.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/sorts/HeapSort.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.sorts",
    "docstring": "/**\n     * For simplicity, we are considering the heap root index as 1 instead of 0.\n     * It simplifies future calculations. Because of that we are decreasing the\n     * provided indexes by 1 in {@link #swap(Object[], int, int)} and\n     * {@link #less(Comparable[], int, int)} functions.\n     */",
    "source_code": "\n@Override\npublic <T extends Comparable<T>> T[] sort(T[] unsorted) {\n    int n = unsorted.length;\n    heapify(unsorted, n);\n    while (n > 1) {\n        swap(unsorted, 1, n--);\n        siftDown(unsorted, 1, n);\n    }\n    return unsorted;\n}\n",
    "class_name": "HeapSort",
    "method_name": "sort",
    "arguments": [
        "T unsorted"
    ],
    "generate_test": [
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        // Create an unsorted array of integers\n        int[] unsorted = new int[]{5, 2, 6, 3, 1, 4};\n        \n        // Sort the array using the heap sort algorithm\n        HeapSort.sort(unsorted);\n        \n        // Check that the sorted array is in ascending order\n        assertArrayEquals(new int[]{1, 2, 3, 4, 5, 6}, unsorted);\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        // Test case 1: empty array\n        Integer[] empty = {};\n        Integer[] sortedEmpty = HeapSort.sort(empty);\n        assertArrayEquals(sortedEmpty, empty);\n        \n        // Test case 2: single element array\n        Integer[] single = {5};\n        Integer[] sortedSingle = HeapSort.sort(single);\n        assertArrayEquals(sortedSingle, single);\n        \n        // Test case 3: sorted array\n        Integer[] sortedArray = {1, 2, 3, 4, 5};\n        Integer[] sorted = HeapSort.sort(sortedArray);\n        assertArrayEquals(sorted, sortedArray);\n        \n        // Test case 4: reverse-sorted array\n        Integer[] reverseSortedArray = {5, 4, 3, 2, 1};\n        Integer[] reverseSorted = HeapSort.sort(reverseSortedArray);\n        assertArrayEquals(reverseSorted, sortedArray);\n        \n        // Test case 5: random array\n        Integer[] randomArray = {5, 7, 9, 1, 3, 2, 4, 6};\n        Integer[] random = HeapSort.sort(randomArray);\n        assertArrayEquals(random, sortedArray);\n    }\n}",
        "\npackage com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] unsorted = new Integer[]{5, 3, 1, 2, 4};\n        Integer[] sorted = new Integer[]{1, 2, 3, 4, 5};\n        \n        assertArrayEquals(sorted, HeapSort.sort(unsorted));\n    }\n}",
        "I'm not able to complete the test case as it is not clear what the expected output of the `sort` method should be. The `sort` method in the code you provided takes an array of objects that implement the `Comparable` interface and sorts them using a heap sort algorithm. The method returns the sorted array, but it's not clear how to determine if the sorting was correct or not.\n\nIf you provide more information about what the expected output should be for the test case, I can help you complete it.",
        "\n@Test\npublic void sortTest() {\n    int[] unsorted = new int[]{4, 2, 1, 3};\n    HeapSort.sort(unsorted);\n    assertArrayEquals(new int[]{1, 2, 3, 4}, unsorted);\n}",
        "\n@Test\npublic void sortTest() {\n    // Create an array of integers to test the sorting algorithm\n    int[] arr = new int[] {5, 3, 2, 1, 4};\n\n    // Call the sort method with the array as a parameter\n    HeapSort.sort(arr);\n\n    // Check if the array is sorted in ascending order\n    assertArrayEquals(new int[] {1, 2, 3, 4, 5}, arr);\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        int[] unsorted = new int[]{3, 2, 1};\n        int[] sorted = new int[]{1, 2, 3};\n        assertArrayEquals(sorted, new HeapSort().sort(unsorted));\n    }\n}",
        "\npackage com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] unsorted = new Integer[] {4, 2, 7, 1, 3};\n        Integer[] sorted = new Integer[] {1, 2, 3, 4, 7};\n        assertArrayEquals(sorted, HeapSort.sort(unsorted));\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        int[] unsorted = new int[] {5, 3, 2, 1, 4};\n        int[] sorted = new int[] {1, 2, 3, 4, 5};\n        HeapSort heapSort = new HeapSort();\n        assertArrayEquals(heapSort.sort(unsorted), sorted);\n    }\n}",
        "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        // Create an instance of the HeapSort class\n        HeapSort heapSort = new HeapSort();\n        \n        // Create an unsorted input array\n        Integer[] unsortedArray = {5, 2, 6, 1, 3};\n        \n        // Call the sort method with the unsorted input array\n        Integer[] sortedArray = heapSort.sort(unsortedArray);\n        \n        // Check that the sorted output array is correct\n        assertArrayEquals(new Integer[]{1, 2, 3, 5, 6}, sortedArray);\n    }\n}"
    ]
}