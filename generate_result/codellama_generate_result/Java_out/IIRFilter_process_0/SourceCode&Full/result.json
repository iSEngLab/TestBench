{
    "project_name": "Java",
    "file_name": "IIRFilter.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/audiofilters/IIRFilter.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.audiofilters",
    "docstring": "/**\n     * Process a single sample\n     *\n     * @param sample the sample to process\n     * @return the processed sample\n     */",
    "source_code": "\npublic double process(double sample) {\n    double result = 0.0;\n\n    // Process\n    for (int i = 1; i <= order; i++) {\n        result += (coeffsB[i] * historyX[i - 1] - coeffsA[i] * historyY[i - 1]);\n    }\n    result = (result + coeffsB[0] * sample) / coeffsA[0];\n\n    // Feedback\n    for (int i = order - 1; i > 0; i--) {\n        historyX[i] = historyX[i - 1];\n        historyY[i] = historyY[i - 1];\n    }\n\n    historyX[0] = sample;\n    historyY[0] = result;\n\n    return result;\n}\n",
    "class_name": "IIRFilter",
    "method_name": "process",
    "arguments": [
        "double sample"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Create an instance of the filter with order 10\n        IIRFilter filter = new IIRFilter(10);\n\n        // Set coefficients\n        double[] aCoeffs = new double[11];\n        double[] bCoeffs = new double[11];\n        for (int i = 0; i <= 10; i++) {\n            aCoeffs[i] = Math.pow(2, -i);\n            bCoeffs[i] = Math.pow(3, i);\n        }\n        filter.setCoeffs(aCoeffs, bCoeffs);\n\n        // Test the process method with some sample inputs\n        assertEquals(0.0, filter.process(1.0), 1e-5);\n        assertEquals(-2.67549836942, filter.process(-1.0), 1e-5);\n    }\n}\n",
        "@Test\npublic void testConstructor_OrderZero() {\n    assertThrows(IllegalArgumentException.class, () -> new IIRFilter(0));\n}\n\n@Test\npublic void testConstructor_OrderNegative() {\n    assertThrows(IllegalArgumentException.class, () -> new IIRFilter(-1));\n}",
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        double sample = 0.5; // arbitrary value for sample\n        int order = 3; // arbitrary value for filter order\n        double[] aCoeffs = new double[]{1, -2, 1}; // arbitrary values for denominator coefficients\n        double[] bCoeffs = new double[]{1, 0.5, 0.25}; // arbitrary values for numerator coefficients\n\n        IIRFilter filter = new IIRFilter(order);\n        filter.setCoeffs(aCoeffs, bCoeffs);\n        double expectedResult = 0.375; // computed manually using difference equation and sample value\n\n        assertEquals(expectedResult, filter.process(sample));\n    }\n}",
        "import com.thealgorithms.audiofilters.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Test case 1: Verify that the filter returns the correct result when no feedback is used\n        IIRFilter filter = new IIRFilter(2);\n        double[] aCoeffs = {1.0, -1.5, 0.6};\n        double[] bCoeffs = {1.0, 1.3, -0.8};\n        filter.setCoeffs(aCoeffs, bCoeffs);\n        \n        double sample = 0.7;\n        double expectedResult = 0.34; // Calculated using the difference equation from Wikipedia\n        assertEquals(expectedResult, filter.process(sample));\n        \n        // Test case 2: Verify that the filter returns the correct result when feedback is used\n        filter = new IIRFilter(5);\n        aCoeffs = new double[6];\n        bCoeffs = new double[6];\n        for (int i = 0; i < 6; i++) {\n            aCoeffs[i] = Math.pow(-1, i) * (i + 1);\n            bCoeffs[i] = Math.pow(2, i) * (i + 1);\n        }\n        filter.setCoeffs(aCoeffs, bCoeffs);\n        \n        sample = -0.5;\n        expectedResult = 0.0934; // Calculated using the difference equation from Wikipedia\n        assertEquals(expectedResult, filter.process(sample));\n    }\n}",
        "\n@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter(2);\n    double[] aCoeffs = {1.0, 0.5};\n    double[] bCoeffs = {0.25, 0.75};\n    \n    // Set coefficients\n    filter.setCoeffs(aCoeffs, bCoeffs);\n    \n    // Process a single sample\n    double result = filter.process(0.1234);\n    \n    assertEquals(result, 0.0594, 0.0001);\n}",
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Create a new instance of the IIRFilter with order 2\n        IIRFilter filter = new IIRFilter(2);\n        \n        // Set the coefficients to the following values:\n        double[] aCoeffs = {1.0, -1.3};\n        double[] bCoeffs = {1.5, -0.7};\n        filter.setCoeffs(aCoeffs, bCoeffs);\n        \n        // Process some sample values and assert that the output is as expected:\n        double result = filter.process(-0.5);\n        assertEquals(result, 0.78, 1e-6);\n        \n        result = filter.process(-0.25);\n        assertEquals(result, -0.34, 1e-6);\n        \n        result = filter.process(0.25);\n        assertEquals(result, -0.08, 1e-6);\n    }\n}",
        "@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter(3);\n    double[] aCoeffs = {0.1, 0.2, 0.3};\n    double[] bCoeffs = {0.4, 0.5, 0.6};\n    filter.setCoeffs(aCoeffs, bCoeffs);\n    assertArrayEquals(filter.coeffsA, aCoeffs);\n    assertArrayEquals(filter.coeffsB, bCoeffs);\n}",
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Test case 1: Verify that the filter processes a single sample correctly\n        IIRFilter filter = new IIRFilter(2);\n        double result = filter.process(1.0);\n        assertEquals(result, 0.584, 0.001);\n\n        // Test case 2: Verify that the filter processes multiple samples correctly\n        double[] samples = {1.0, 2.0, 3.0};\n        result = filter.process(samples[0]);\n        assertEquals(result, 0.584, 0.001);\n        for (int i = 1; i < samples.length - 1; i++) {\n            result += filter.process(samples[i]);\n        }\n        assertEquals(result, 3.276, 0.001);\n    }\n}",
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Create a new filter instance with order 2\n        IIRFilter filter = new IIRFilter(2);\n\n        // Set the numerator and denominator coefficients to [1, -0.5] and [1, 0.5] respectively\n        filter.setCoeffs([1.0, -0.5], [1.0, 0.5]);\n\n        // Test the process method with input sample 1\n        double result = filter.process(1.0);\n\n        // Check if the expected output is returned (which should be 0.5)\n        assertEquals(result, 0.5, 1e-6);\n    }\n}",
        "\n@Test\npublic void processTest() {\n    // Test a simple case with one sample and one coefficient\n    double[] coeffsA = new double[]{0.5};\n    double[] coeffsB = new double[]{0.25};\n    IIRFilter filter = new IIRFilter(1);\n    filter.setCoeffs(coeffsA, coeffsB);\n    assertEquals(filter.process(1.0), 0.75, 1e-9);\n}"
    ]
}