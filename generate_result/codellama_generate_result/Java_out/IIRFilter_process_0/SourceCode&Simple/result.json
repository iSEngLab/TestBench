{
    "project_name": "Java",
    "file_name": "IIRFilter.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/audiofilters/IIRFilter.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.audiofilters",
    "docstring": "/**\n     * Process a single sample\n     *\n     * @param sample the sample to process\n     * @return the processed sample\n     */",
    "source_code": "\npublic double process(double sample) {\n    double result = 0.0;\n\n    // Process\n    for (int i = 1; i <= order; i++) {\n        result += (coeffsB[i] * historyX[i - 1] - coeffsA[i] * historyY[i - 1]);\n    }\n    result = (result + coeffsB[0] * sample) / coeffsA[0];\n\n    // Feedback\n    for (int i = order - 1; i > 0; i--) {\n        historyX[i] = historyX[i - 1];\n        historyY[i] = historyY[i - 1];\n    }\n\n    historyX[0] = sample;\n    historyY[0] = result;\n\n    return result;\n}\n",
    "class_name": "IIRFilter",
    "method_name": "process",
    "arguments": [
        "double sample"
    ],
    "generate_test": [
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        IIRFilter filter = new IIRFilter(3);\n        double[] coeffsA = {1, 2, 3};\n        double[] coeffsB = {4, 5, 6};\n        filter.setCoeffs(coeffsA, coeffsB);\n\n        double result = filter.process(1.0);\n        assertEquals(result, -2.0, 0.001);\n    }\n}",
        "\npackage com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Initialize the filter with a specific order\n        int order = 4;\n        IIRFilter filter = new IIRFilter(order);\n        \n        // Set the coefficients for the filter\n        double[] aCoeffs = new double[order + 1];\n        double[] bCoeffs = new double[order + 1];\n        for (int i = 0; i <= order; i++) {\n            aCoeffs[i] = Math.pow(2, -i);\n            bCoeffs[i] = Math.pow(3, -i);\n        }\n        \n        // Check that the coefficients are set correctly\n        assertArrayEquals(aCoeffs, filter.getACoeffs());\n        assertArrayEquals(bCoeffs, filter.getBCoeffs());\n        \n        // Test the process method with different inputs\n        double[] inputs = new double[] {10, 20, 30};\n        for (int i = 0; i < inputs.length; i++) {\n            double expectedResult = aCoeffs[0] * inputs[i];\n            for (int j = 1; j <= order; j++) {\n                expectedResult += bCoeffs[j] * filter.historyX[j - 1] - aCoeffs[j] * filter.historyY[j - 1];\n            }\n            double actualResult = filter.process(inputs[i]);\n            assertEquals(expectedResult, actualResult);\n        }\n    }\n}",
        "\n@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter(2);\n    double[] aCoeffs = new double[]{0.1, 0.2};\n    double[] bCoeffs = new double[]{0.3, 0.4};\n    filter.setCoeffs(aCoeffs, bCoeffs);\n    \n    double sample = 0.5;\n    double expectedResult = 1.2; // This should be the expected result for the given coefficients and input sample\n    \n    double actualResult = filter.process(sample);\n    \n    assertEquals(expectedResult, actualResult, 0.0001);\n}\n",
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Set up the test fixture (IIRFilter instance)\n        IIRFilter filter = new IIRFilter(2);\n        \n        // Set coefficients for testing\n        double[] aCoeffs = {1.0, 2.0};\n        double[] bCoeffs = {3.0, 4.0};\n        filter.setCoeffs(aCoeffs, bCoeffs);\n        \n        // Test the process method with a sample input\n        double result = filter.process(10.0);\n        assertEquals(result, 20.0, \"The result of processing a sample is not correct\");\n    }\n}",
        "\npackage com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Arrange\n        int order = 2;\n        double[] coeffsA = new double[] {1.0, -1.5, 0.5};\n        double[] coeffsB = new double[] {1.0, 0.75, -0.25};\n        IIRFilter filter = new IIRFilter(order);\n        filter.setCoeffs(coeffsA, coeffsB);\n        double sample = 0.5;\n\n        // Act\n        double result1 = filter.process(sample);\n        double result2 = filter.process(sample + 1.0);\n\n        // Assert\n        assertEquals(result1, -0.27692308, 1e-5);\n        assertEquals(result2, 1.48630137, 1e-5);\n    }\n}",
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Set up the filter with a specific order and coefficients\n        int order = 2;\n        double[] coeffsA = new double[order + 1];\n        double[] coeffsB = new double[order + 1];\n        for (int i = 0; i <= order; i++) {\n            coeffsA[i] = 1.0 / (i + 1);\n            coeffsB[i] = 2.0 * (i + 1);\n        }\n        IIRFilter filter = new IIRFilter(order);\n        filter.setCoeffs(coeffsA, coeffsB);\n        \n        // Test the process method with a specific input value\n        double sample = 3.0;\n        double result = filter.process(sample);\n        assertEquals((2 * sample + 1) / (1 + 1), result, 0.001);\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Create an instance of the IIRFilter class with a filter order of 2\n        IIRFilter filter = new IIRFilter(2);\n        \n        // Set the coefficients for the filter using the setCoeffs method\n        double[] aCoeffs = {1.0, -1.5, 0.7};\n        double[] bCoeffs = {0.5, -0.6, 0.2};\n        filter.setCoeffs(aCoeffs, bCoeffs);\n        \n        // Create an input signal for the filter\n        double[] inputSignal = {1.0, 2.0, 3.0, 4.0, 5.0};\n        \n        // Process the input signal using the filter's process method\n        double[] outputSignal = filter.process(inputSignal);\n        \n        // Check that the output signal has the expected values\n        assertArrayEquals(outputSignal, new double[]{1.0, 2.5, 3.7});\n    }\n}\n",
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        IIRFilter filter = new IIRFilter(3); // create a filter with order 3\n        double[] aCoeffs = {1, 0, -0.5}; // set the coefficient matrix for the feedback part of the filter\n        double[] bCoeffs = {0, 1, 1}; // set the coefficient matrix for the input part of the filter\n        \n        filter.setCoeffs(aCoeffs, bCoeffs); // set the coefficients for the filter\n        assertEquals(filter.process(0.5), 0.1678, 1e-3); // check that the output of the filter is approximately equal to 0.1678 with a tolerance of 1e-3\n    }\n}",
        "\npackage com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Test 1: Check that the result of processing a sample is correct\n        IIRFilter filter = new IIRFilter(2);\n        double[] coeffsA = {0.5, -0.5};\n        double[] coeffsB = {0.25, -0.75};\n        filter.setCoeffs(coeffsA, coeffsB);\n        double sample = 1.0;\n        double expectedResult = 0.84375;\n        assertEquals(expectedResult, filter.process(sample), 0.0001);\n        \n        // Test 2: Check that the result of processing a sample is correct when the order of the filter is 3\n        IIRFilter filter = new IIRFilter(3);\n        double[] coeffsA = {0.5, -0.5};\n        double[] coeffsB = {0.25, -0.75};\n        filter.setCoeffs(coeffsA, coeffsB);\n        double sample = 1.0;\n        double expectedResult = 0.84375;\n        assertEquals(expectedResult, filter.process(sample), 0.0001);\n        \n        // Test 3: Check that the result of processing a sample is correct when the order of the filter is 4\n        IIRFilter filter = new IIRFilter(4);\n        double[] coeffsA = {0.5, -0.5};\n        double[] coeffsB = {0.25, -0.75};\n        filter.setCoeffs(coeffsA, coeffsB);\n        double sample = 1.0;\n        double expectedResult = 0.84375;\n        assertEquals(expectedResult, filter.process(sample), 0.0001);\n    }\n}",
        "\n@Test\npublic void processTest() {\n    // Create an IIR filter with order 2\n    IIRFilter iirFilter = new IIRFilter(2);\n    \n    // Set the coefficients to [1, -0.5, -0.3] and [1, 0.25, 0.1]\n    double[] aCoeffs = {1, -0.5, -0.3};\n    double[] bCoeffs = {1, 0.25, 0.1};\n    iirFilter.setCoeffs(aCoeffs, bCoeffs);\n    \n    // Pass in the input value 0.5 and check that the output is 0.3\n    double result = iirFilter.process(0.5);\n    assertEquals(result, 0.3);\n}\n"
    ]
}