{
    "project_name": "Java",
    "file_name": "IIRFilter.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/audiofilters/IIRFilter.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.audiofilters",
    "docstring": "/**\n     * Process a single sample\n     *\n     * @param sample the sample to process\n     * @return the processed sample\n     */",
    "source_code": "\npublic double process(double sample) {\n    double result = 0.0;\n\n    // Process\n    for (int i = 1; i <= order; i++) {\n        result += (coeffsB[i] * historyX[i - 1] - coeffsA[i] * historyY[i - 1]);\n    }\n    result = (result + coeffsB[0] * sample) / coeffsA[0];\n\n    // Feedback\n    for (int i = order - 1; i > 0; i--) {\n        historyX[i] = historyX[i - 1];\n        historyY[i] = historyY[i - 1];\n    }\n\n    historyX[0] = sample;\n    historyY[0] = result;\n\n    return result;\n}\n",
    "class_name": "IIRFilter",
    "method_name": "process",
    "arguments": [
        "double sample"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Create an instance of the IIR filter\n        IIRFilter filter = new IIRFilter();\n\n        // Test that the filter returns the expected result for a given input\n        double sample = 1.0;\n        double expectedResult = <FILL>;\n        assertEquals(expectedResult, filter.process(sample));\n    }\n}\n",
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Test with sample = 0\n        double result = new IIRFilter().process(0.0);\n        assertEquals(result, 0.0);\n\n        // Test with sample = 1\n        result = new IIRFilter().process(1.0);\n        assertEquals(result, 1.0);\n\n        // Test with sample = -1\n        result = new IIRFilter().process(-1.0);\n        assertEquals(result, -1.0);\n    }\n}",
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        double[] historyX = new double[2];\n        double[] historyY = new double[2];\n        double[] coeffsA = new double[3];\n        double[] coeffsB = new double[3];\n        int order = 2;\n        IIRFilter filter = new IIRFilter(historyX, historyY, coeffsA, coeffsB, order);\n\n        double sample = 1.0;\n        double expectedResult = 1.0 / (coeffsA[0] * coeffsB[0]);\n\n        assertEquals(expectedResult, filter.process(sample), 0.0001);\n    }\n}",
        "\n@Test\npublic void processTest() {\n    double sample = 0.5;\n    double result = 0.0;\n\n    // Process\n    for (int i = 1; i <= order; i++) {\n        result += (coeffsB[i] * historyX[i - 1] - coeffsA[i] * historyY[i - 1]);\n    }\n    result = (result + coeffsB[0] * sample) / coeffsA[0];\n\n    // Feedback\n    for (int i = order - 1; i > 0; i--) {\n        historyX[i] = historyX[i - 1];\n        historyY[i] = historyY[i - 1];\n    }\n\n    historyX[0] = sample;\n    historyY[0] = result;\n\n    assertEquals(result, process(sample), 0.0);\n}",
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Test the filter with a single sample\n        double[] coeffsA = {1, 2};\n        double[] coeffsB = {3, 4};\n        int order = 2;\n        IIRFilter filter = new IIRFilter(coeffsA, coeffsB, order);\n        double sample = 5.0;\n        double result = filter.process(sample);\n        assertEquals(result, (coeffsB[1] * historyX[1] - coeffsA[1] * historyY[1]) + (coeffsB[2] * historyX[2] - coeffsA[2] * historyY[2]));\n    }\n}",
        "\npackage com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        double[] coeffsB = new double[3];\n        double[] coeffsA = new double[3];\n        int order = 2;\n        \n        for (int i = 0; i <= order; i++) {\n            coeffsB[i] = Math.random();\n            coeffsA[i] = Math.random();\n        }\n        \n        IIRFilter filter = new IIRFilter(coeffsB, coeffsA);\n        double[] historyX = new double[order];\n        double[] historyY = new double[order];\n        \n        for (int i = 0; i <= order - 1; i++) {\n            historyX[i] = Math.random();\n            historyY[i] = Math.random();\n        }\n        \n        double sample = Math.random();\n        double result = filter.process(sample, historyX, historyY);\n        \n        assertEquals(result, (coeffsB[0] * sample + coeffsB[1] * historyX[0] - coeffsA[0] * historyY[0] - coeffsA[1] * historyY[1]) / coeffsA[2], 1e-6);\n    }\n}",
        "\npackage com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Create an instance of the filter class\n        IIRFilter filter = new IIRFilter();\n\n        // Test the process method with different input values and expected output values\n        double[] sampleValues = new double[]{1.0, 2.0, 3.0};\n        double[] expectedOutputValues = new double[]{1.0, 2.0, 3.0};\n\n        for (int i = 0; i < sampleValues.length; i++) {\n            assertEquals(expectedOutputValues[i], filter.process(sampleValues[i]), 0.0);\n        }\n    }\n}",
        "@Test\npublic void processTest() {\n    // Set up the test data\n    double[] coeffsA = {1, 2, 3};\n    double[] coeffsB = {4, 5, 6};\n    int order = 2;\n    double sample = 7.0;\n    IIRFilter filter = new IIRFilter(coeffsA, coeffsB);\n\n    // Test the process method with a valid input\n    assertEquals(19.0, filter.process(sample));\n\n    // Test the process method with an invalid input (null)\n    assertThrows(NullPointerException.class, () -> filter.process(null));\n}",
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Create a new instance of the IIRFilter class\n        IIRFilter filter = new IIRFilter();\n\n        // Set the coefficients for the filter\n        double[] coeffsA = new double[] { 0.2, 0.3, 0.4 };\n        double[] coeffsB = new double[] { 1.1, 1.2, 1.3 };\n        int order = 2;\n        filter.setCoefficients(coeffsA, coeffsB, order);\n\n        // Create a sample input signal\n        double[] inputSignal = new double[] { 1.0, 2.0, 3.0 };\n\n        // Process the input signal through the filter\n        double[] outputSignal = filter.process(inputSignal);\n\n        // Check that the output signal has the expected values\n        assertArrayEquals(outputSignal, new double[] { 12.5, 14.5, 16.5 }, 0.01);\n    }\n}",
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Create an instance of the filter and initialize its parameters\n        IIRFilter filter = new IIRFilter(coeffsB, coeffsA);\n        filter.setHistoryX(historyX);\n        filter.setHistoryY(historyY);\n\n        // Process a sample input and verify the output\n        double result = filter.process(sample);\n        assertEquals(result, expectedResult, 0.001);\n    }\n}"
    ]
}