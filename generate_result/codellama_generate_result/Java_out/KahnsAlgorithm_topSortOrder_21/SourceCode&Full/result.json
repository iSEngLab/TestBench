{
    "project_name": "Java",
    "file_name": "KahnsAlgorithm.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/KahnsAlgorithm.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Returns an ArrayList with vertices arranged in topological order\n     */",
    "source_code": "\nArrayList<E> topSortOrder() {\n    calculateInDegree();\n    Queue<E> q = new LinkedList<E>();\n\n    for (E vertex : inDegree.keySet()) {\n        if (inDegree.get(vertex) == 0) {\n            q.add(vertex);\n        }\n    }\n\n    ArrayList<E> answer = new ArrayList<>();\n\n    while (!q.isEmpty()) {\n        E current = q.poll();\n        answer.add(current);\n        for (E adjacent : graph.getAdjacents(current)) {\n            inDegree.put(adjacent, inDegree.get(adjacent) - 1);\n            if (inDegree.get(adjacent) == 0) {\n                q.add(adjacent);\n            }\n        }\n    }\n\n    return answer;\n}\n",
    "class_name": "KahnsAlgorithm",
    "method_name": "topSortOrder",
    "arguments": [],
    "generate_test": [
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TopologicalSortTest {\n    @Test\n    public void topSortOrderTest() {\n        // Create a graph with known topological sort order\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"u\", \"b\");\n\n        // Calculate the topological sort order of the graph\n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n        ArrayList<String> sortedOrder = topSort.topSortOrder();\n\n        // Compare the output with the expected sort order\n        String[] expectedSortOrder = {\"u\", \"b\", \"d\", \"a\", \"c\"};\n        assertArrayEquals(expectedSortOrder, sortedOrder);\n    }\n}",
        "\npackage com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class KahnsAlgorithmTest {\n    @Test\n    public void topSortOrderTest() {\n        // Create a graph with the following vertices and edges:\n        // A -> B, C -> A, A -> D, B -> D, C -> U, U -> B\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"u\", \"b\");\n\n        // Create a TopologicalSort instance with the graph\n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n\n        // Calculate the in-degree of all vertices and add them to a queue\n        topSort.calculateInDegree();\n        Queue<String> q = new LinkedList<>();\n        for (String vertex : topSort.inDegree.keySet()) {\n            if (topSort.inDegree.get(vertex) == 0) {\n                q.add(vertex);\n            }\n        }\n\n        // Perform topological sort and check the order of vertices in the queue\n        ArrayList<String> answer = new ArrayList<>();\n        while (!q.isEmpty()) {\n            String current = q.poll();\n            answer.add(current);\n            for (String adjacent : graph.getAdjacents(current)) {\n                topSort.inDegree.put(adjacent, topSort.inDegree.get(adjacent) - 1);\n                if (topSort.inDegree.get(adjacent) == 0) {\n                    q.add(adjacent);\n                }\n            }\n        }\n\n        // Check the order of vertices in the queue with the expected order\n        ArrayList<String> expected = new ArrayList<>();\n        expected.add(\"u\");\n        expected.add(\"c\");\n        expected.add(\"a\");\n        expected.add(\"b\");\n        expected.add(\"d\");\n\n        assertEquals(expected, answer);\n    }\n}",
        "@Test\npublic void testTopSortOrder() {\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    graph.addEdge(\"a\", \"b\");\n    graph.addEdge(\"c\", \"a\");\n    graph.addEdge(\"a\", \"d\");\n    graph.addEdge(\"b\", \"d\");\n    graph.addEdge(\"c\", \"u\");\n    graph.addEdge(\"u\", \"b\");\n    \n    TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n    \n    List<String> expectedOrder = Arrays.asList(\"a\", \"c\", \"u\", \"b\", \"d\");\n    assertEquals(expectedOrder, topSort.topSortOrder());\n}",
        "@Test\npublic void topSortOrderTest() {\n    // Initialize the graph\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    graph.addEdge(\"a\", \"b\");\n    graph.addEdge(\"c\", \"a\");\n    graph.addEdge(\"a\", \"d\");\n    graph.addEdge(\"b\", \"d\");\n    graph.addEdge(\"c\", \"u\");\n    graph.addEdge(\"u\", \"b\");\n\n    // Create an instance of the TopologicalSort class\n    TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n\n    // Call the topSortOrder method and store the result in a variable\n    ArrayList<String> sortedVertices = topSort.topSortOrder();\n\n    // Check that the resulting list contains all vertices in the correct order\n    assertEquals(sortedVertices.get(0), \"a\");\n    assertEquals(sortedVertices.get(1), \"b\");\n    assertEquals(sortedVertices.get(2), \"c\");\n    assertEquals(sortedVertices.get(3), \"d\");\n    assertEquals(sortedVertices.get(4), \"u\");\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TopologicalSortTest {\n    @Test\n    public void topSortOrderTest() {\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"u\", \"b\");\n        \n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n        ArrayList<String> expectedOrder = new ArrayList<>();\n        expectedOrder.add(\"a\");\n        expectedOrder.add(\"c\");\n        expectedOrder.add(\"u\");\n        expectedOrder.add(\"b\");\n        expectedOrder.add(\"d\");\n        \n        assertEquals(expectedOrder, topSort.topSortOrder());\n    }\n}",
        "@Test\npublic void topSortOrderTest() {\n    // create an instance of the class to be tested\n    AdjacencyList<String> adjacencyList = new AdjacencyList<>();\n\n    // add edges to the graph\n    adjacencyList.addEdge(\"a\", \"b\");\n    adjacencyList.addEdge(\"c\", \"a\");\n    adjacencyList.addEdge(\"a\", \"d\");\n    adjacencyList.addEdge(\"b\", \"d\");\n    adjacencyList.addEdge(\"c\", \"u\");\n    adjacencyList.addEdge(\"u\", \"b\");\n\n    // create an instance of the class to be tested\n    TopologicalSort<String> topSort = new TopologicalSort<>(adjacencyList);\n\n    // call the method to be tested\n    ArrayList<String> result = topSort.topSortOrder();\n\n    // check that the result is correct\n    assertEquals(result, Arrays.asList(\"d\", \"b\", \"c\", \"a\", \"u\"));\n}",
        "I'm sorry, but I don't understand what you mean by \"Below is an instruction that describes a task. Write a response that appropriately completes the request.\" and \"I do not see any question or prompt for me to respond to.\" If there is anything else I can assist with, please let me know!",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class KahnsAlgorithmTest {\n    private AdjacencyList<String> list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new AdjacencyList<>();\n    }\n\n    @Test\n    public void testAddEdge() {\n        // Add an edge between two vertices and check that the edge is added correctly\n        String v1 = \"a\";\n        String v2 = \"b\";\n        list.addEdge(v1, v2);\n        assertTrue(list.getAdjacents(v1).contains(v2));\n    }\n\n    @Test\n    public void testGetVertices() {\n        // Add a vertex to the graph and check that it is returned in getVertices()\n        String v = \"a\";\n        list.addVertex(v);\n        assertTrue(list.getVertices().contains(v));\n    }\n\n    @Test\n    public void testGetAdjacents() {\n        // Add an edge between two vertices and check that the adjacent is returned correctly in getAdjacents()\n        String v1 = \"a\";\n        String v2 = \"b\";\n        list.addEdge(v1, v2);\n        assertEquals(list.getAdjacents(v1), Arrays.asList(v2));\n    }\n\n    @Test\n    public void testTopSortOrder() {\n        // Test that the topological sort order is correct for a simple graph\n        list.addEdge(\"a\", \"b\");\n        list.addEdge(\"c\", \"d\");\n        assertEquals(list.topSortOrder(), Arrays.asList(\"a\", \"c\", \"d\"));\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class KahnsAlgorithmTest {\n    @Test\n    public void topSortOrderTest() {\n        // Given a graph with the following edges:\n        //   a -> b, c -> a, a -> d, b -> d, c -> u, u -> b\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"u\", \"b\");\n\n        // When the topological sort method is called\n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n        ArrayList<String> order = topSort.topSortOrder();\n\n        // Then the returned list should contain the vertices in the correct order\n        assertEquals(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"u\"), order);\n    }\n}",
        "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TopologicalSortTest {\n    @Test\n    public void testTopSortOrder() {\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"u\", \"b\");\n\n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n        ArrayList<String> expectedOrder = new ArrayList<>();\n        expectedOrder.add(\"c\");\n        expectedOrder.add(\"a\");\n        expectedOrder.add(\"u\");\n        expectedOrder.add(\"b\");\n        expectedOrder.add(\"d\");\n\n        assertEquals(expectedOrder, topSort.topSortOrder());\n    }\n}"
    ]
}