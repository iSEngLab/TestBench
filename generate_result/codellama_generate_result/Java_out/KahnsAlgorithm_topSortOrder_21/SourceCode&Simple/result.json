{
    "project_name": "Java",
    "file_name": "KahnsAlgorithm.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/KahnsAlgorithm.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Returns an ArrayList with vertices arranged in topological order\n     */",
    "source_code": "\nArrayList<E> topSortOrder() {\n    calculateInDegree();\n    Queue<E> q = new LinkedList<E>();\n\n    for (E vertex : inDegree.keySet()) {\n        if (inDegree.get(vertex) == 0) {\n            q.add(vertex);\n        }\n    }\n\n    ArrayList<E> answer = new ArrayList<>();\n\n    while (!q.isEmpty()) {\n        E current = q.poll();\n        answer.add(current);\n        for (E adjacent : graph.getAdjacents(current)) {\n            inDegree.put(adjacent, inDegree.get(adjacent) - 1);\n            if (inDegree.get(adjacent) == 0) {\n                q.add(adjacent);\n            }\n        }\n    }\n\n    return answer;\n}\n",
    "class_name": "KahnsAlgorithm",
    "method_name": "topSortOrder",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void topSortOrderTest() {\n    // create a graph with vertices A, B, C, and D\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"A\", \"C\");\n    graph.addEdge(\"B\", \"D\");\n    graph.addEdge(\"C\", \"D\");\n\n    // create a TopologicalSort object and calculate the in-degree of each vertex\n    TopologicalSort<String> ts = new TopologicalSort<>(graph);\n    ts.calculateInDegree();\n\n    // test that the top sort order is correct\n    ArrayList<String> expectedOrder = new ArrayList<>();\n    expectedOrder.add(\"D\");\n    expectedOrder.add(\"B\");\n    expectedOrder.add(\"C\");\n    expectedOrder.add(\"A\");\n\n    assertEquals(expectedOrder, ts.topSortOrder());\n}",
        "\n@Test\npublic void topSortOrderTest() {\n    // Create a graph with two nodes and an edge between them\n    AdjacencyList<Integer> graph = new AdjacencyList<>();\n    graph.addEdge(0, 1);\n    \n    // Calculate the in-degree of each node\n    TopologicalSort topologicalSort = new TopologicalSort(graph);\n    topologicalSort.calculateInDegree();\n    \n    // Run Kahn's algorithm and assert that the result is correct\n    ArrayList<Integer> expectedOrder = new ArrayList<>();\n    expectedOrder.add(0);\n    expectedOrder.add(1);\n    assertEquals(expectedOrder, topologicalSort.topSortOrder());\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class KahnsAlgorithmTest {\n    @Test\n    public void topSortOrderTest() {\n        AdjacencyList<E> graph = new AdjacencyList<>();\n        graph.addEdge(\"A\", \"B\");\n        graph.addEdge(\"B\", \"C\");\n        graph.addEdge(\"D\", \"E\");\n        graph.addEdge(\"E\", \"F\");\n\n        TopologicalSort<E> topologicalSort = new TopologicalSort<>(graph);\n        ArrayList<E> answer = topologicalSort.topSortOrder();\n\n        assertEquals(answer.size(), 6);\n        assertTrue(answer.contains(\"A\"));\n        assertTrue(answer.contains(\"B\"));\n        assertTrue(answer.contains(\"C\"));\n        assertTrue(answer.contains(\"D\"));\n        assertTrue(answer.contains(\"E\"));\n        assertTrue(answer.contains(\"F\"));\n    }\n}",
        "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TopologicalSortTest {\n    @Test\n    public void topSortOrderTest() {\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"A\", \"B\");\n        graph.addEdge(\"B\", \"C\");\n        graph.addEdge(\"C\", \"D\");\n        graph.addEdge(\"D\", \"E\");\n\n        TopologicalSort<String> topSort = new TopologicalSort(graph);\n        ArrayList<String> expectedOrder = new ArrayList<>();\n        expectedOrder.add(\"A\");\n        expectedOrder.add(\"B\");\n        expectedOrder.add(\"C\");\n        expectedOrder.add(\"D\");\n        expectedOrder.add(\"E\");\n\n        assertEquals(expectedOrder, topSort.topSortOrder());\n    }\n}",
        "\npackage com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class KahnsAlgorithmTest {\n    @Test\n    public void topSortOrderTest() {\n        TopologicalSort<Integer> ts = new TopologicalSort<>(new AdjacencyList<>());\n        assertEquals(ts.topSortOrder(), Arrays.asList(1, 2, 3));\n    }\n}",
        "\npackage com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class KahnsAlgorithmTest {\n    @Test\n    public void topSortOrderTest() {\n        // Create an instance of the AdjacencyList class\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        \n        // Add vertices to the graph\n        graph.addVertex(\"A\");\n        graph.addVertex(\"B\");\n        graph.addVertex(\"C\");\n        graph.addVertex(\"D\");\n        graph.addVertex(\"E\");\n        \n        // Add edges to the graph\n        graph.addEdge(\"A\", \"B\");\n        graph.addEdge(\"A\", \"C\");\n        graph.addEdge(\"B\", \"D\");\n        graph.addEdge(\"C\", \"D\");\n        graph.addEdge(\"C\", \"E\");\n        \n        // Create an instance of the TopologicalSort class\n        TopologicalSort<String> ts = new TopologicalSort<>(graph);\n        \n        // Calculate the in-degree for each vertex\n        ts.calculateInDegree();\n        \n        // Perform topological sorting on the graph\n        ArrayList<String> sortedVertices = ts.topSortOrder();\n        \n        // Assert that the sorted vertices are correct\n        assertEquals(sortedVertices, Arrays.asList(\"E\", \"C\", \"B\", \"D\", \"A\"));\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class KahnsAlgorithmTest {\n    @Test\n    public void topSortOrderTest() {\n        // Create an instance of AdjacencyList and populate it with some vertices and edges\n        AdjacencyList graph = new AdjacencyList();\n        graph.addEdge(0, 1);\n        graph.addEdge(1, 2);\n        graph.addEdge(2, 3);\n        \n        // Create an instance of TopologicalSort and pass the AdjacencyList to its constructor\n        TopologicalSort ts = new TopologicalSort(graph);\n        \n        // Call the calculateInDegree() method on the TopologicalSort instance to calculate the in-degree of each vertex in the graph\n        ts.calculateInDegree();\n        \n        // Call the topSortOrder() method on the TopologicalSort instance to perform a topological sort on the graph\n        ArrayList<Integer> sortedVertices = ts.topSortOrder();\n        \n        // Verify that the returned list contains all the vertices in the correct order using the assertEquals() method\n        assertEquals(sortedVertices.size(), 4);\n        assertEquals(sortedVertices.get(0), 3);\n        assertEquals(sortedVertices.get(1), 2);\n        assertEquals(sortedVertices.get(2), 1);\n        assertEquals(sortedVertices.get(3), 0);\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class KahnsAlgorithmTest {\n    @Test\n    public void topSortOrderTest() {\n        // Create a new instance of your extended class\n        MyAdjacencyList list = new MyAdjacencyList();\n        \n        // Add some edges to the graph\n        list.addEdge(1, 2);\n        list.addEdge(2, 3);\n        list.addEdge(3, 4);\n        \n        // Call the topSortOrder() method on the instance\n        List<Integer> result = list.topSortOrder();\n        \n        // Check that the result is correct\n        assertEquals(result, Arrays.asList(1, 2, 3, 4));\n    }\n}",
        "@Test\npublic void topSortOrderTest() {\n    // Create a sample graph with some vertices and edges\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    graph.addVertex(\"A\");\n    graph.addVertex(\"B\");\n    graph.addVertex(\"C\");\n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"B\", \"C\");\n\n    // Call topSortOrder() on the graph and check that it returns the correct order\n    ArrayList<String> expectedOrder = new ArrayList<>();\n    expectedOrder.add(\"A\");\n    expectedOrder.add(\"B\");\n    expectedOrder.add(\"C\");\n    assertEquals(expectedOrder, graph.topSortOrder());\n}",
        "@Test\npublic void topSortOrderTest() {\n    TopologicalSort<String> topologicalSort = new TopologicalSort<>(new AdjacencyList<>());\n    ArrayList<String> answer = new ArrayList<>();\n\n    // Create a graph with the following structure: A -> B, C -> D, E -> F\n    topologicalSort.graph.addEdge(\"A\", \"B\");\n    topologicalSort.graph.addEdge(\"C\", \"D\");\n    topologicalSort.graph.addEdge(\"E\", \"F\");\n\n    // Calculate the in-degree of each vertex\n    topologicalSort.calculateInDegree();\n\n    // Perform a BFS traversal starting from vertices with in-degree 0\n    Queue<String> q = new LinkedList<>();\n    for (String vertex : topologicalSort.inDegree.keySet()) {\n        if (topologicalSort.inDegree.get(vertex) == 0) {\n            q.add(vertex);\n        }\n    }\n\n    // Perform BFS traversal and add vertices to the answer list\n    while (!q.isEmpty()) {\n        String current = q.poll();\n        answer.add(current);\n        for (String adjacent : topologicalSort.graph.getAdjacents(current)) {\n            topologicalSort.inDegree.put(adjacent, topologicalSort.inDegree.get(adjacent) - 1);\n            if (topologicalSort.inDegree.get(adjacent) == 0) {\n                q.add(adjacent);\n            }\n        }\n    }\n\n    // Check if the answer list contains all vertices in topological order\n    assertEquals(topologicalSort.graph.getVertices(), answer);\n}"
    ]
}