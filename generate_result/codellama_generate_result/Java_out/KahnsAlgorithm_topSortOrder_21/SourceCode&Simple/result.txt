Source code: 


ArrayList<E> topSortOrder() {
    calculateInDegree();
    Queue<E> q = new LinkedList<E>();

    for (E vertex : inDegree.keySet()) {
        if (inDegree.get(vertex) == 0) {
            q.add(vertex);
        }
    }

    ArrayList<E> answer = new ArrayList<>();

    while (!q.isEmpty()) {
        E current = q.poll();
        answer.add(current);
        for (E adjacent : graph.getAdjacents(current)) {
            inDegree.put(adjacent, inDegree.get(adjacent) - 1);
            if (inDegree.get(adjacent) == 0) {
                q.add(adjacent);
            }
        }
    }

    return answer;
}



No.1 generated result --------------------------

@Test
public void topSortOrderTest() {
    // create a graph with vertices A, B, C, and D
    AdjacencyList<String> graph = new AdjacencyList<>();
    graph.addEdge("A", "B");
    graph.addEdge("A", "C");
    graph.addEdge("B", "D");
    graph.addEdge("C", "D");

    // create a TopologicalSort object and calculate the in-degree of each vertex
    TopologicalSort<String> ts = new TopologicalSort<>(graph);
    ts.calculateInDegree();

    // test that the top sort order is correct
    ArrayList<String> expectedOrder = new ArrayList<>();
    expectedOrder.add("D");
    expectedOrder.add("B");
    expectedOrder.add("C");
    expectedOrder.add("A");

    assertEquals(expectedOrder, ts.topSortOrder());
}


No.2 generated result --------------------------


@Test
public void topSortOrderTest() {
    // Create a graph with two nodes and an edge between them
    AdjacencyList<Integer> graph = new AdjacencyList<>();
    graph.addEdge(0, 1);
    
    // Calculate the in-degree of each node
    TopologicalSort topologicalSort = new TopologicalSort(graph);
    topologicalSort.calculateInDegree();
    
    // Run Kahn's algorithm and assert that the result is correct
    ArrayList<Integer> expectedOrder = new ArrayList<>();
    expectedOrder.add(0);
    expectedOrder.add(1);
    assertEquals(expectedOrder, topologicalSort.topSortOrder());
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdjacencyListTest {
    @Test
    public void topSortOrderTest() {
        AdjacencyList<E> graph = new AdjacencyList<>();
        graph.addEdge("A", "B");
        graph.addEdge("B", "C");
        graph.addEdge("D", "E");
        graph.addEdge("E", "F");

        TopologicalSort<E> topologicalSort = new TopologicalSort<>(graph);
        ArrayList<E> answer = topologicalSort.topSortOrder();

        assertEquals(answer.size(), 6);
        assertTrue(answer.contains("A"));
        assertTrue(answer.contains("B"));
        assertTrue(answer.contains("C"));
        assertTrue(answer.contains("D"));
        assertTrue(answer.contains("E"));
        assertTrue(answer.contains("F"));
    }
}


No.4 generated result --------------------------

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class TopologicalSortTest {
    @Test
    public void topSortOrderTest() {
        AdjacencyList<String> graph = new AdjacencyList<>();
        graph.addEdge("A", "B");
        graph.addEdge("B", "C");
        graph.addEdge("C", "D");
        graph.addEdge("D", "E");

        TopologicalSort<String> topSort = new TopologicalSort(graph);
        ArrayList<String> expectedOrder = new ArrayList<>();
        expectedOrder.add("A");
        expectedOrder.add("B");
        expectedOrder.add("C");
        expectedOrder.add("D");
        expectedOrder.add("E");

        assertEquals(expectedOrder, topSort.topSortOrder());
    }
}


No.5 generated result --------------------------


package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdjacencyListTest {
    @Test
    public void topSortOrderTest() {
        TopologicalSort<Integer> ts = new TopologicalSort<>(new AdjacencyList<>());
        assertEquals(ts.topSortOrder(), Arrays.asList(1, 2, 3));
    }
}


No.6 generated result --------------------------


package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdjacencyListTest {
    @Test
    public void topSortOrderTest() {
        // Create an instance of the AdjacencyList class
        AdjacencyList<String> graph = new AdjacencyList<>();
        
        // Add vertices to the graph
        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");
        graph.addVertex("D");
        graph.addVertex("E");
        
        // Add edges to the graph
        graph.addEdge("A", "B");
        graph.addEdge("A", "C");
        graph.addEdge("B", "D");
        graph.addEdge("C", "D");
        graph.addEdge("C", "E");
        
        // Create an instance of the TopologicalSort class
        TopologicalSort<String> ts = new TopologicalSort<>(graph);
        
        // Calculate the in-degree for each vertex
        ts.calculateInDegree();
        
        // Perform topological sorting on the graph
        ArrayList<String> sortedVertices = ts.topSortOrder();
        
        // Assert that the sorted vertices are correct
        assertEquals(sortedVertices, Arrays.asList("E", "C", "B", "D", "A"));
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdjacencyListTest {
    @Test
    public void topSortOrderTest() {
        // Create an instance of AdjacencyList and populate it with some vertices and edges
        AdjacencyList graph = new AdjacencyList();
        graph.addEdge(0, 1);
        graph.addEdge(1, 2);
        graph.addEdge(2, 3);
        
        // Create an instance of TopologicalSort and pass the AdjacencyList to its constructor
        TopologicalSort ts = new TopologicalSort(graph);
        
        // Call the calculateInDegree() method on the TopologicalSort instance to calculate the in-degree of each vertex in the graph
        ts.calculateInDegree();
        
        // Call the topSortOrder() method on the TopologicalSort instance to perform a topological sort on the graph
        ArrayList<Integer> sortedVertices = ts.topSortOrder();
        
        // Verify that the returned list contains all the vertices in the correct order using the assertEquals() method
        assertEquals(sortedVertices.size(), 4);
        assertEquals(sortedVertices.get(0), 3);
        assertEquals(sortedVertices.get(1), 2);
        assertEquals(sortedVertices.get(2), 1);
        assertEquals(sortedVertices.get(3), 0);
    }
}


No.8 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdjacencyListTest {
    @Test
    public void topSortOrderTest() {
        // Create a new instance of your extended class
        MyAdjacencyList list = new MyAdjacencyList();
        
        // Add some edges to the graph
        list.addEdge(1, 2);
        list.addEdge(2, 3);
        list.addEdge(3, 4);
        
        // Call the topSortOrder() method on the instance
        List<Integer> result = list.topSortOrder();
        
        // Check that the result is correct
        assertEquals(result, Arrays.asList(1, 2, 3, 4));
    }
}


No.9 generated result --------------------------

@Test
public void topSortOrderTest() {
    // Create a sample graph with some vertices and edges
    AdjacencyList<String> graph = new AdjacencyList<>();
    graph.addVertex("A");
    graph.addVertex("B");
    graph.addVertex("C");
    graph.addEdge("A", "B");
    graph.addEdge("B", "C");

    // Call topSortOrder() on the graph and check that it returns the correct order
    ArrayList<String> expectedOrder = new ArrayList<>();
    expectedOrder.add("A");
    expectedOrder.add("B");
    expectedOrder.add("C");
    assertEquals(expectedOrder, graph.topSortOrder());
}


No.10 generated result --------------------------

@Test
public void topSortOrderTest() {
    TopologicalSort<String> topologicalSort = new TopologicalSort<>(new AdjacencyList<>());
    ArrayList<String> answer = new ArrayList<>();

    // Create a graph with the following structure: A -> B, C -> D, E -> F
    topologicalSort.graph.addEdge("A", "B");
    topologicalSort.graph.addEdge("C", "D");
    topologicalSort.graph.addEdge("E", "F");

    // Calculate the in-degree of each vertex
    topologicalSort.calculateInDegree();

    // Perform a BFS traversal starting from vertices with in-degree 0
    Queue<String> q = new LinkedList<>();
    for (String vertex : topologicalSort.inDegree.keySet()) {
        if (topologicalSort.inDegree.get(vertex) == 0) {
            q.add(vertex);
        }
    }

    // Perform BFS traversal and add vertices to the answer list
    while (!q.isEmpty()) {
        String current = q.poll();
        answer.add(current);
        for (String adjacent : topologicalSort.graph.getAdjacents(current)) {
            topologicalSort.inDegree.put(adjacent, topologicalSort.inDegree.get(adjacent) - 1);
            if (topologicalSort.inDegree.get(adjacent) == 0) {
                q.add(adjacent);
            }
        }
    }

    // Check if the answer list contains all vertices in topological order
    assertEquals(topologicalSort.graph.getVertices(), answer);
}


