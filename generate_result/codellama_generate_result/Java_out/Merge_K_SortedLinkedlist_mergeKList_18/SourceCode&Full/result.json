{
    "project_name": "Java",
    "file_name": "Merge_K_SortedLinkedlist.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/Merge_K_SortedLinkedlist.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * This function merge K sorted LinkedList\n     *\n     * @param a array of LinkedList\n     * @param N size of array\n     * @return node\n     */",
    "source_code": "\nNode mergeKList(Node[] a, int N) {\n    // Min Heap\n    PriorityQueue<Node> min = new PriorityQueue<>(Comparator.comparingInt(x -> x.data));\n\n    // adding head of all linkedList in min heap\n    min.addAll(Arrays.asList(a).subList(0, N));\n\n    // Make new head among smallest heads in K linkedList\n    Node head = min.poll();\n    min.add(head.next);\n    Node curr = head;\n\n    // merging LinkedList\n    while (!min.isEmpty()) {\n        Node temp = min.poll();\n        curr.next = temp;\n        curr = temp;\n\n        // Add Node in min Heap only if temp.next is not null\n        if (temp.next != null) {\n            min.add(temp.next);\n        }\n    }\n\n    return head;\n}\n",
    "class_name": "Merge_K_SortedLinkedlist",
    "method_name": "mergeKList",
    "arguments": [
        "Node a",
        "int N"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        // Test case 1: Empty array of linked lists\n        Node[] a = new Node[0];\n        int N = a.length;\n        assertEquals(null, Merge_K_SortedLinkedlist.mergeKList(a, N));\n\n        // Test case 2: Single element in each list\n        a = new Node[]{new Node(1), new Node(2), new Node(3)};\n        N = a.length;\n        assertEquals(new Node(1).next.equals(new Node(2)).next, Merge_K_SortedLinkedlist.mergeKList(a, N));\n\n        // Test case 3: Multiple elements in each list\n        a = new Node[]{new Node(1, 4), new Node(2, 5), new Node(3, 6)};\n        N = a.length;\n        assertEquals(new Node(1, 4).next.equals(new Node(2, 5)).next, Merge_K_SortedLinkedlist.mergeKList(a, N));\n    }\n}",
        "@Test\npublic void mergeKListTest() {\n    // Set up inputs and expected outputs\n    Node[] a = new Node[3];\n    a[0] = new Node(1);\n    a[0].next = new Node(2);\n    a[0].next.next = new Node(4);\n\n    a[1] = new Node(1);\n    a[1].next = new Node(3);\n    a[1].next.next = new Node(4);\n\n    a[2] = new Node(2);\n    a[2].next = new Node(6);\n\n    int N = 3;\n\n    Node expectedOutput = new Node(1);\n    expectedOutput.next = new Node(1);\n    expectedOutput.next.next = new Node(2);\n    expectedOutput.next.next.next = new Node(3);\n    expectedOutput.next.next.next.next = new Node(4);\n    expectedOutput.next.next.next.next.next = new Node(6);\n\n    // Perform the merge operation\n    Node output = Merge_K_SortedLinkedlist.mergeKList(a, N);\n\n    // Assert that the output is correct\n    assertEquals(expectedOutput, output);\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        // Test case 1: Empty array\n        Node[] a = new Node[0];\n        int N = 0;\n        assertNull(mergeKList(a, N));\n\n        // Test case 2: Single element array\n        a = new Node[]{new Node(1)};\n        N = 1;\n        assertEquals(a[0], mergeKList(a, N));\n\n        // Test case 3: Two or more elements array\n        a = new Node[]{new Node(1), new Node(2), new Node(3)};\n        N = 3;\n        assertEquals(a[0].data + a[1].data + a[2].data, mergeKList(a, N).data);\n    }\n}",
        "@Test\npublic void mergeKListTest() {\n    // Create an array of LinkedLists to be merged\n    Node[] linkedLists = new Node[3];\n\n    // Create the first LinkedList with nodes having data 1, 2, and 5\n    linkedLists[0] = createLinkedList(new int[]{1, 2, 5});\n\n    // Create the second LinkedList with nodes having data 4, 6, and 8\n    linkedLists[1] = createLinkedList(new int[]{4, 6, 8});\n\n    // Create the third LinkedList with nodes having data 7, 9, and 10\n    linkedLists[2] = createLinkedList(new int[]{7, 9, 10});\n\n    // Merge the LinkedLists using the mergeKList method\n    Node result = mergeKList(linkedLists, 3);\n\n    // Check if the result is correct\n    assertEquals(result.data, 1);\n    assertEquals(result.next.data, 2);\n    assertEquals(result.next.next.data, 4);\n    assertEquals(result.next.next.next.data, 5);\n    assertEquals(result.next.next.next.next.data, 6);\n    assertEquals(result.next.next.next.next.next.data, 7);\n    assertEquals(result.next.next.next.next.next.next.data, 8);\n    assertEquals(result.next.next.next.next.next.next.next.data, 9);\n    assertEquals(result.next.next.next.next.next.next.next.next.data, 10);\n}",
        "\n@Test\npublic void mergeKListTest() {\n    Node[] a = new Node[3];\n    a[0] = new Node(1, null);\n    a[1] = new Node(2, null);\n    a[2] = new Node(3, null);\n    int N = 3;\n\n    Node head = mergeKList(a, N);\n\n    assertEquals(1, head.data);\n    assertEquals(2, head.next.data);\n    assertEquals(3, head.next.next.data);\n}",
        "\n@Test\npublic void mergeKListTest() {\n    // Create an instance of the Merge_K_SortedLinkedlist class\n    Merge_K_SortedLinkedlist mksl = new Merge_K_SortedLinkedlist();\n    \n    // Create input data for the test case\n    Node[] a = {new Node(1), new Node(3), new Node(5)};\n    int N = 3;\n    \n    // Call the mergeKList method with the input data\n    Node head = mksl.mergeKList(a, N);\n    \n    // Use JUnit's assertions to check that the output is correct\n    Assertions.assertEquals(head.data, 1);\n    Assertions.assertEquals(head.next.data, 3);\n    Assertions.assertEquals(head.next.next.data, 5);\n}\n",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        // Test case 1: Empty input array\n        Node[] emptyArray = new Node[0];\n        int expectedSize = 0;\n        assertEquals(expectedSize, Merge_K_SortedLinkedlist.mergeKList(emptyArray, 0).size());\n\n        // Test case 2: Single element in input array\n        Node[] singleElementArray = new Node[1];\n        int expectedValue = 5;\n        assertEquals(expectedValue, Merge_K_SortedLinkedlist.mergeKList(singleElementArray, 0).get(0));\n\n        // Test case 3: Two elements in input array\n        Node[] twoElementsArray = new Node[2];\n        int expectedValue1 = 5;\n        int expectedValue2 = 7;\n        assertEquals(expectedValue1, Merge_K_SortedLinkedlist.mergeKList(twoElementsArray, 0).get(0));\n        assertEquals(expectedValue2, Merge_K_SortedLinkedlist.mergeKList(twoElementsArray, 1).get(1));\n\n        // Test case 4: Three elements in input array\n        Node[] threeElementsArray = new Node[3];\n        int expectedValue1 = 5;\n        int expectedValue2 = 7;\n        int expectedValue3 = 9;\n        assertEquals(expectedValue1, Merge_K_SortedLinkedlist.mergeKList(threeElementsArray, 0).get(0));\n        assertEquals(expectedValue2, Merge_K_SortedLinkedlist.mergeKList(threeElementsArray, 1).get(1));\n        assertEquals(expectedValue3, Merge_K_SortedLinkedlist.mergeKList(threeElementsArray, 2).get(2));\n    }\n}",
        "@Test\npublic void mergeKListTest() {\n    // Test with 1 linked list\n    Node[] a = new Node[1];\n    a[0] = new Node(3, null);\n    int N = 1;\n    assertEquals(a[0], mergeKList(a, N));\n\n    // Test with 2 linked lists\n    a = new Node[2];\n    a[0] = new Node(3, null);\n    a[1] = new Node(4, null);\n    N = 2;\n    assertEquals(a[0], mergeKList(a, N));\n\n    // Test with 3 linked lists\n    a = new Node[3];\n    a[0] = new Node(3, null);\n    a[1] = new Node(4, null);\n    a[2] = new Node(5, null);\n    N = 3;\n    assertEquals(a[0], mergeKList(a, N));\n}",
        "\n@Test\npublic void mergeKListTest() {\n    Node[] a = new Node[3];\n    for (int i = 0; i < a.length; i++) {\n        a[i] = new Merge_K_SortedLinkedlist.Node();\n        a[i].data = i + 1;\n        if (i < a.length - 1) {\n            a[i].next = a[i + 1];\n        }\n    }\n    \n    Node result = mergeKList(a, a.length);\n    assertEquals(result.data, 1);\n    assertEquals(result.next.data, 2);\n    assertEquals(result.next.next.data, 3);\n}",
        "@Test\npublic void mergeKListTest() {\n    // Set up the input array of linked lists\n    Node[] a = new Node[3];\n    a[0] = new Node(1, null);\n    a[1] = new Node(2, null);\n    a[2] = new Node(3, null);\n\n    // Set up the expected output linked list\n    Node head = new Node(1, null);\n    head.next = new Node(2, null);\n    head.next.next = new Node(3, null);\n\n    // Invoke the method and check the result\n    assertEquals(head, mergeKList(a, 3));\n}"
    ]
}