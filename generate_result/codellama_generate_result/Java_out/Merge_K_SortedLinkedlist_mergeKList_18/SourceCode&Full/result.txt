Source code: 


Node mergeKList(Node[] a, int N) {
    // Min Heap
    PriorityQueue<Node> min = new PriorityQueue<>(Comparator.comparingInt(x -> x.data));

    // adding head of all linkedList in min heap
    min.addAll(Arrays.asList(a).subList(0, N));

    // Make new head among smallest heads in K linkedList
    Node head = min.poll();
    min.add(head.next);
    Node curr = head;

    // merging LinkedList
    while (!min.isEmpty()) {
        Node temp = min.poll();
        curr.next = temp;
        curr = temp;

        // Add Node in min Heap only if temp.next is not null
        if (temp.next != null) {
            min.add(temp.next);
        }
    }

    return head;
}



No.1 generated result --------------------------


package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class Merge_K_SortedLinkedlistTest {
    @Test
    public void mergeKListTest() {
        // Test case 1: Empty array of linked lists
        Node[] a = new Node[0];
        int N = a.length;
        assertEquals(null, Merge_K_SortedLinkedlist.mergeKList(a, N));

        // Test case 2: Single element in each list
        a = new Node[]{new Node(1), new Node(2), new Node(3)};
        N = a.length;
        assertEquals(new Node(1).next.equals(new Node(2)).next, Merge_K_SortedLinkedlist.mergeKList(a, N));

        // Test case 3: Multiple elements in each list
        a = new Node[]{new Node(1, 4), new Node(2, 5), new Node(3, 6)};
        N = a.length;
        assertEquals(new Node(1, 4).next.equals(new Node(2, 5)).next, Merge_K_SortedLinkedlist.mergeKList(a, N));
    }
}


No.2 generated result --------------------------

@Test
public void mergeKListTest() {
    // Set up inputs and expected outputs
    Node[] a = new Node[3];
    a[0] = new Node(1);
    a[0].next = new Node(2);
    a[0].next.next = new Node(4);

    a[1] = new Node(1);
    a[1].next = new Node(3);
    a[1].next.next = new Node(4);

    a[2] = new Node(2);
    a[2].next = new Node(6);

    int N = 3;

    Node expectedOutput = new Node(1);
    expectedOutput.next = new Node(1);
    expectedOutput.next.next = new Node(2);
    expectedOutput.next.next.next = new Node(3);
    expectedOutput.next.next.next.next = new Node(4);
    expectedOutput.next.next.next.next.next = new Node(6);

    // Perform the merge operation
    Node output = Merge_K_SortedLinkedlist.mergeKList(a, N);

    // Assert that the output is correct
    assertEquals(expectedOutput, output);
}


No.3 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class Merge_K_SortedLinkedlistTest {
    @Test
    public void mergeKListTest() {
        // Test case 1: Empty array
        Node[] a = new Node[0];
        int N = 0;
        assertNull(mergeKList(a, N));

        // Test case 2: Single element array
        a = new Node[]{new Node(1)};
        N = 1;
        assertEquals(a[0], mergeKList(a, N));

        // Test case 3: Two or more elements array
        a = new Node[]{new Node(1), new Node(2), new Node(3)};
        N = 3;
        assertEquals(a[0].data + a[1].data + a[2].data, mergeKList(a, N).data);
    }
}


No.4 generated result --------------------------

@Test
public void mergeKListTest() {
    // Create an array of LinkedLists to be merged
    Node[] linkedLists = new Node[3];

    // Create the first LinkedList with nodes having data 1, 2, and 5
    linkedLists[0] = createLinkedList(new int[]{1, 2, 5});

    // Create the second LinkedList with nodes having data 4, 6, and 8
    linkedLists[1] = createLinkedList(new int[]{4, 6, 8});

    // Create the third LinkedList with nodes having data 7, 9, and 10
    linkedLists[2] = createLinkedList(new int[]{7, 9, 10});

    // Merge the LinkedLists using the mergeKList method
    Node result = mergeKList(linkedLists, 3);

    // Check if the result is correct
    assertEquals(result.data, 1);
    assertEquals(result.next.data, 2);
    assertEquals(result.next.next.data, 4);
    assertEquals(result.next.next.next.data, 5);
    assertEquals(result.next.next.next.next.data, 6);
    assertEquals(result.next.next.next.next.next.data, 7);
    assertEquals(result.next.next.next.next.next.next.data, 8);
    assertEquals(result.next.next.next.next.next.next.next.data, 9);
    assertEquals(result.next.next.next.next.next.next.next.next.data, 10);
}


No.5 generated result --------------------------


@Test
public void mergeKListTest() {
    Node[] a = new Node[3];
    a[0] = new Node(1, null);
    a[1] = new Node(2, null);
    a[2] = new Node(3, null);
    int N = 3;

    Node head = mergeKList(a, N);

    assertEquals(1, head.data);
    assertEquals(2, head.next.data);
    assertEquals(3, head.next.next.data);
}


No.6 generated result --------------------------


@Test
public void mergeKListTest() {
    // Create an instance of the Merge_K_SortedLinkedlist class
    Merge_K_SortedLinkedlist mksl = new Merge_K_SortedLinkedlist();
    
    // Create input data for the test case
    Node[] a = {new Node(1), new Node(3), new Node(5)};
    int N = 3;
    
    // Call the mergeKList method with the input data
    Node head = mksl.mergeKList(a, N);
    
    // Use JUnit's assertions to check that the output is correct
    Assertions.assertEquals(head.data, 1);
    Assertions.assertEquals(head.next.data, 3);
    Assertions.assertEquals(head.next.next.data, 5);
}



No.7 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class Merge_K_SortedLinkedlistTest {
    @Test
    public void mergeKListTest() {
        // Test case 1: Empty input array
        Node[] emptyArray = new Node[0];
        int expectedSize = 0;
        assertEquals(expectedSize, Merge_K_SortedLinkedlist.mergeKList(emptyArray, 0).size());

        // Test case 2: Single element in input array
        Node[] singleElementArray = new Node[1];
        int expectedValue = 5;
        assertEquals(expectedValue, Merge_K_SortedLinkedlist.mergeKList(singleElementArray, 0).get(0));

        // Test case 3: Two elements in input array
        Node[] twoElementsArray = new Node[2];
        int expectedValue1 = 5;
        int expectedValue2 = 7;
        assertEquals(expectedValue1, Merge_K_SortedLinkedlist.mergeKList(twoElementsArray, 0).get(0));
        assertEquals(expectedValue2, Merge_K_SortedLinkedlist.mergeKList(twoElementsArray, 1).get(1));

        // Test case 4: Three elements in input array
        Node[] threeElementsArray = new Node[3];
        int expectedValue1 = 5;
        int expectedValue2 = 7;
        int expectedValue3 = 9;
        assertEquals(expectedValue1, Merge_K_SortedLinkedlist.mergeKList(threeElementsArray, 0).get(0));
        assertEquals(expectedValue2, Merge_K_SortedLinkedlist.mergeKList(threeElementsArray, 1).get(1));
        assertEquals(expectedValue3, Merge_K_SortedLinkedlist.mergeKList(threeElementsArray, 2).get(2));
    }
}


No.8 generated result --------------------------

@Test
public void mergeKListTest() {
    // Test with 1 linked list
    Node[] a = new Node[1];
    a[0] = new Node(3, null);
    int N = 1;
    assertEquals(a[0], mergeKList(a, N));

    // Test with 2 linked lists
    a = new Node[2];
    a[0] = new Node(3, null);
    a[1] = new Node(4, null);
    N = 2;
    assertEquals(a[0], mergeKList(a, N));

    // Test with 3 linked lists
    a = new Node[3];
    a[0] = new Node(3, null);
    a[1] = new Node(4, null);
    a[2] = new Node(5, null);
    N = 3;
    assertEquals(a[0], mergeKList(a, N));
}


No.9 generated result --------------------------


@Test
public void mergeKListTest() {
    Node[] a = new Node[3];
    for (int i = 0; i < a.length; i++) {
        a[i] = new Merge_K_SortedLinkedlist.Node();
        a[i].data = i + 1;
        if (i < a.length - 1) {
            a[i].next = a[i + 1];
        }
    }
    
    Node result = mergeKList(a, a.length);
    assertEquals(result.data, 1);
    assertEquals(result.next.data, 2);
    assertEquals(result.next.next.data, 3);
}


No.10 generated result --------------------------

@Test
public void mergeKListTest() {
    // Set up the input array of linked lists
    Node[] a = new Node[3];
    a[0] = new Node(1, null);
    a[1] = new Node(2, null);
    a[2] = new Node(3, null);

    // Set up the expected output linked list
    Node head = new Node(1, null);
    head.next = new Node(2, null);
    head.next.next = new Node(3, null);

    // Invoke the method and check the result
    assertEquals(head, mergeKList(a, 3));
}


