{
    "project_name": "Java",
    "file_name": "Merge_K_SortedLinkedlist.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/Merge_K_SortedLinkedlist.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * This function merge K sorted LinkedList\n     *\n     * @param a array of LinkedList\n     * @param N size of array\n     * @return node\n     */",
    "source_code": "\nNode mergeKList(Node[] a, int N) {\n    // Min Heap\n    PriorityQueue<Node> min = new PriorityQueue<>(Comparator.comparingInt(x -> x.data));\n\n    // adding head of all linkedList in min heap\n    min.addAll(Arrays.asList(a).subList(0, N));\n\n    // Make new head among smallest heads in K linkedList\n    Node head = min.poll();\n    min.add(head.next);\n    Node curr = head;\n\n    // merging LinkedList\n    while (!min.isEmpty()) {\n        Node temp = min.poll();\n        curr.next = temp;\n        curr = temp;\n\n        // Add Node in min Heap only if temp.next is not null\n        if (temp.next != null) {\n            min.add(temp.next);\n        }\n    }\n\n    return head;\n}\n",
    "class_name": "Merge_K_SortedLinkedlist",
    "method_name": "mergeKList",
    "arguments": [
        "Node a",
        "int N"
    ],
    "generate_test": [
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        // Create a linked list with 3 nodes and set the next pointer of the last node to null\n        Node head = new Node(1);\n        Node second = new Node(2);\n        Node third = new Node(3);\n        head.next = second;\n        second.next = third;\n        third.next = null;\n\n        // Create a second linked list with 4 nodes and set the next pointer of the last node to null\n        Node head1 = new Node(1);\n        Node second1 = new Node(2);\n        Node third1 = new Node(3);\n        Node fourth = new Node(4);\n        head1.next = second1;\n        second1.next = third1;\n        third1.next = fourth;\n        fourth.next = null;\n\n        // Create a third linked list with 5 nodes and set the next pointer of the last node to null\n        Node head2 = new Node(1);\n        Node second2 = new Node(2);\n        Node third2 = new Node(3);\n        Node fourth2 = new Node(4);\n        Node fifth = new Node(5);\n        head2.next = second2;\n        second2.next = third2;\n        third2.next = fourth2;\n        fourth2.next = fifth;\n        fifth.next = null;\n\n        // Create an array of linked lists and set the next pointer of the last node to null\n        Node[] a = new Node[3];\n        a[0] = head;\n        a[1] = head1;\n        a[2] = head2;\n\n        // Set the size parameter for the mergeKList method\n        int N = 3;\n\n        // Call the mergeKList method and store the result in a variable\n        Node result = Merge_K_SortedLinkedlist.mergeKList(a, N);\n\n        // Assert that the result is not null\n        assertNotNull(result);\n\n        // Assert that the result is the expected linked list\n        int[] expected = new int[]{1, 2, 3, 4, 5};\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], result.data);\n            if (result.next != null) {\n                result = result.next;\n            }\n        }\n    }\n}",
        "@Test\npublic void mergeKListTest() {\n    // Create a sample K-sorted linked list with 3 nodes\n    Node[] a = new Node[3];\n    a[0] = new Node(1);\n    a[1] = new Node(3);\n    a[2] = new Node(5);\n\n    // Create expected output\n    Node expected = new Node(1);\n    expected.next = new Node(3);\n    expected.next.next = new Node(5);\n\n    // Merge the linked list using the mergeKList method\n    Node actual = Merge_K_SortedLinkedlist.mergeKList(a, 3);\n\n    // Assert that the output is correct\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void mergeKListTest() {\n    Node[] lists = new Node[4];\n    lists[0] = new Node(1, null);\n    lists[1] = new Node(2, new Node(3, null));\n    lists[2] = new Node(4, new Node(5, null));\n    lists[3] = new Node(6, new Node(7, null));\n    \n    Node mergedList = mergeKList(lists, 4);\n    assertEquals(mergedList.data, 1);\n    assertEquals(mergedList.next.data, 2);\n    assertEquals(mergedList.next.next.data, 3);\n    assertEquals(mergedList.next.next.next.data, 4);\n    assertEquals(mergedList.next.next.next.next.data, 5);\n    assertEquals(mergedList.next.next.next.next.next.data, 6);\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        // Create a sample input for the function\n        Node[] lists = new Node[3];\n        lists[0] = new Node(1, null);\n        lists[0].next = new Node(2, null);\n        lists[0].next.next = new Node(3, null);\n        lists[1] = new Node(4, null);\n        lists[1].next = new Node(5, null);\n        lists[1].next.next = new Node(6, null);\n        lists[2] = new Node(7, null);\n        lists[2].next = new Node(8, null);\n        lists[2].next.next = new Node(9, null);\n        int N = 3;\n\n        // Call the function and assert that the result is correct\n        Node result = Merge_K_SortedLinkedlist.mergeKList(lists, N);\n        assertEquals(result.data, 1);\n        assertEquals(result.next.data, 2);\n        assertEquals(result.next.next.data, 3);\n        assertEquals(result.next.next.next.data, 4);\n        assertEquals(result.next.next.next.next.data, 5);\n        assertEquals(result.next.next.next.next.next.data, 6);\n        assertEquals(result.next.next.next.next.next.next.data, 7);\n        assertEquals(result.next.next.next.next.next.next.next.data, 8);\n        assertEquals(result.next.next.next.next.next.next.next.next.data, 9);\n    }\n}",
        "Sure, I'd be happy to help! Please provide more details about the task you are trying to complete, such as what you have tried so far and where you are getting stuck. This will help me better understand your question and provide a more accurate response.",
        "@Test\npublic void mergeKListTest() {\n    // Create input array of linked lists\n    Node[] a = new Node[5];\n    for (int i = 0; i < a.length; i++) {\n        a[i] = new Node(1);\n        for (int j = 1; j <= i; j++) {\n            a[i].next = new Node(j + 1);\n            a[i] = a[i].next;\n        }\n    }\n    \n    // Call the mergeKList method with input array and number of linked lists\n    Node head = Merge_K_SortedLinkedlist.mergeKList(a, a.length);\n    \n    // Assert that the return value is equal to the expected result\n    assertEquals(\"1->2->3->4->5\", head.toString());\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        // Test case 1: Empty linked list\n        Node[] a = new Node[5];\n        int N = 0;\n        assertEquals(null, mergeKList(a, N));\n\n        // Test case 2: Single element in the linked list\n        a = new Node[5];\n        for (int i = 0; i < 5; i++) {\n            a[i] = new Node();\n            a[i].data = i + 1;\n        }\n        N = 1;\n        assertEquals(a[0], mergeKList(a, N));\n\n        // Test case 3: Multiple elements in the linked list\n        a = new Node[5];\n        for (int i = 0; i < 5; i++) {\n            a[i] = new Node();\n            a[i].data = i + 1;\n        }\n        N = 3;\n        assertEquals(a[0], mergeKList(a, N));\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        // Test case 1: No linked lists to be merged\n        Node[] a = new Node[0];\n        int N = 0;\n        assertNull(mergeKList(a, N));\n        \n        // Test case 2: One linked list\n        a = new Node[1];\n        a[0] = new Node(5);\n        N = 1;\n        assertEquals(new Node(5), mergeKList(a, N).next);\n        \n        // Test case 3: Multiple linked lists, no cycles\n        a = new Node[] {new Node(1), new Node(2), new Node(3)};\n        N = 3;\n        assertEquals(new Node(1, 2, 3), mergeKList(a, N).next);\n        \n        // Test case 4: Multiple linked lists, cycles\n        a = new Node[] {new Node(1), new Node(2), new Node(3)};\n        Node node1 = new Node(5);\n        Node node2 = new Node(6);\n        Node node3 = new Node(7);\n        Node node4 = new Node(8);\n        a[0].next = node1;\n        a[1].next = node2;\n        a[2].next = node3;\n        N = 3;\n        assertEquals(new Node(1, 2, 3), mergeKList(a, N).next);\n        \n        // Test case 5: Null values\n        a = new Node[] {null, null};\n        N = 2;\n        assertNull(mergeKList(a, N));\n    }\n}",
        "@Test\npublic void mergeKListTest() {\n    // Create K linked list with 1 element each\n    Node[] a = new Node[4];\n    for (int i = 0; i < a.length; i++) {\n        a[i] = new Node();\n        a[i].data = i + 1;\n    }\n\n    // Merge K linked list and check the result\n    int N = 4;\n    Node head = mergeKList(a, N);\n    assertEquals(head.data, 1);\n    assertEquals(head.next.data, 2);\n    assertEquals(head.next.next.data, 3);\n    assertEquals(head.next.next.next.data, 4);\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        // Create an array of 3 Node objects\n        Node[] nodes = new Node[3];\n        \n        // Create the first node and set its data to 10\n        nodes[0] = new Node(10);\n        \n        // Create the second node and set its data to 20\n        nodes[1] = new Node(20);\n        \n        // Create the third node and set its data to 30\n        nodes[2] = new Node(30);\n        \n        // Call the mergeKList method with the array of Node objects and N=3\n        Node result = Merge_K_SortedLinkedlist.mergeKList(nodes, 3);\n        \n        // Check that the result is not null\n        assertNotNull(result);\n        \n        // Check that the data of the first node in the merged linked list is 10\n        assertEquals(10, result.data);\n        \n        // Check that the next node in the merged linked list has a data value of 20\n        assertEquals(20, result.next.data);\n        \n        // Check that the next node after that has a data value of 30\n        assertEquals(30, result.next.next.data);\n    }\n}"
    ]
}