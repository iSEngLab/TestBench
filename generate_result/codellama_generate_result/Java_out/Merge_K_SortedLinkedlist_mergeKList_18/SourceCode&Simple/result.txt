Source code: 


Node mergeKList(Node[] a, int N) {
    // Min Heap
    PriorityQueue<Node> min = new PriorityQueue<>(Comparator.comparingInt(x -> x.data));

    // adding head of all linkedList in min heap
    min.addAll(Arrays.asList(a).subList(0, N));

    // Make new head among smallest heads in K linkedList
    Node head = min.poll();
    min.add(head.next);
    Node curr = head;

    // merging LinkedList
    while (!min.isEmpty()) {
        Node temp = min.poll();
        curr.next = temp;
        curr = temp;

        // Add Node in min Heap only if temp.next is not null
        if (temp.next != null) {
            min.add(temp.next);
        }
    }

    return head;
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class Merge_K_SortedLinkedlistTest {
    @Test
    public void mergeKListTest() {
        // Create a linked list with 3 nodes and set the next pointer of the last node to null
        Node head = new Node(1);
        Node second = new Node(2);
        Node third = new Node(3);
        head.next = second;
        second.next = third;
        third.next = null;

        // Create a second linked list with 4 nodes and set the next pointer of the last node to null
        Node head1 = new Node(1);
        Node second1 = new Node(2);
        Node third1 = new Node(3);
        Node fourth = new Node(4);
        head1.next = second1;
        second1.next = third1;
        third1.next = fourth;
        fourth.next = null;

        // Create a third linked list with 5 nodes and set the next pointer of the last node to null
        Node head2 = new Node(1);
        Node second2 = new Node(2);
        Node third2 = new Node(3);
        Node fourth2 = new Node(4);
        Node fifth = new Node(5);
        head2.next = second2;
        second2.next = third2;
        third2.next = fourth2;
        fourth2.next = fifth;
        fifth.next = null;

        // Create an array of linked lists and set the next pointer of the last node to null
        Node[] a = new Node[3];
        a[0] = head;
        a[1] = head1;
        a[2] = head2;

        // Set the size parameter for the mergeKList method
        int N = 3;

        // Call the mergeKList method and store the result in a variable
        Node result = Merge_K_SortedLinkedlist.mergeKList(a, N);

        // Assert that the result is not null
        assertNotNull(result);

        // Assert that the result is the expected linked list
        int[] expected = new int[]{1, 2, 3, 4, 5};
        for (int i = 0; i < expected.length; i++) {
            assertEquals(expected[i], result.data);
            if (result.next != null) {
                result = result.next;
            }
        }
    }
}


No.2 generated result --------------------------

@Test
public void mergeKListTest() {
    // Create a sample K-sorted linked list with 3 nodes
    Node[] a = new Node[3];
    a[0] = new Node(1);
    a[1] = new Node(3);
    a[2] = new Node(5);

    // Create expected output
    Node expected = new Node(1);
    expected.next = new Node(3);
    expected.next.next = new Node(5);

    // Merge the linked list using the mergeKList method
    Node actual = Merge_K_SortedLinkedlist.mergeKList(a, 3);

    // Assert that the output is correct
    assertEquals(expected, actual);
}


No.3 generated result --------------------------

@Test
public void mergeKListTest() {
    Node[] lists = new Node[4];
    lists[0] = new Node(1, null);
    lists[1] = new Node(2, new Node(3, null));
    lists[2] = new Node(4, new Node(5, null));
    lists[3] = new Node(6, new Node(7, null));
    
    Node mergedList = mergeKList(lists, 4);
    assertEquals(mergedList.data, 1);
    assertEquals(mergedList.next.data, 2);
    assertEquals(mergedList.next.next.data, 3);
    assertEquals(mergedList.next.next.next.data, 4);
    assertEquals(mergedList.next.next.next.next.data, 5);
    assertEquals(mergedList.next.next.next.next.next.data, 6);
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class Merge_K_SortedLinkedlistTest {
    @Test
    public void mergeKListTest() {
        // Create a sample input for the function
        Node[] lists = new Node[3];
        lists[0] = new Node(1, null);
        lists[0].next = new Node(2, null);
        lists[0].next.next = new Node(3, null);
        lists[1] = new Node(4, null);
        lists[1].next = new Node(5, null);
        lists[1].next.next = new Node(6, null);
        lists[2] = new Node(7, null);
        lists[2].next = new Node(8, null);
        lists[2].next.next = new Node(9, null);
        int N = 3;

        // Call the function and assert that the result is correct
        Node result = Merge_K_SortedLinkedlist.mergeKList(lists, N);
        assertEquals(result.data, 1);
        assertEquals(result.next.data, 2);
        assertEquals(result.next.next.data, 3);
        assertEquals(result.next.next.next.data, 4);
        assertEquals(result.next.next.next.next.data, 5);
        assertEquals(result.next.next.next.next.next.data, 6);
        assertEquals(result.next.next.next.next.next.next.data, 7);
        assertEquals(result.next.next.next.next.next.next.next.data, 8);
        assertEquals(result.next.next.next.next.next.next.next.next.data, 9);
    }
}


No.5 generated result --------------------------

Sure, I'd be happy to help! Please provide more details about the task you are trying to complete, such as what you have tried so far and where you are getting stuck. This will help me better understand your question and provide a more accurate response.


No.6 generated result --------------------------

@Test
public void mergeKListTest() {
    // Create input array of linked lists
    Node[] a = new Node[5];
    for (int i = 0; i < a.length; i++) {
        a[i] = new Node(1);
        for (int j = 1; j <= i; j++) {
            a[i].next = new Node(j + 1);
            a[i] = a[i].next;
        }
    }
    
    // Call the mergeKList method with input array and number of linked lists
    Node head = Merge_K_SortedLinkedlist.mergeKList(a, a.length);
    
    // Assert that the return value is equal to the expected result
    assertEquals("1->2->3->4->5", head.toString());
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class Merge_K_SortedLinkedlistTest {
    @Test
    public void mergeKListTest() {
        // Test case 1: Empty linked list
        Node[] a = new Node[5];
        int N = 0;
        assertEquals(null, mergeKList(a, N));

        // Test case 2: Single element in the linked list
        a = new Node[5];
        for (int i = 0; i < 5; i++) {
            a[i] = new Node();
            a[i].data = i + 1;
        }
        N = 1;
        assertEquals(a[0], mergeKList(a, N));

        // Test case 3: Multiple elements in the linked list
        a = new Node[5];
        for (int i = 0; i < 5; i++) {
            a[i] = new Node();
            a[i].data = i + 1;
        }
        N = 3;
        assertEquals(a[0], mergeKList(a, N));
    }
}


No.8 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class Merge_K_SortedLinkedlistTest {
    @Test
    public void mergeKListTest() {
        // Test case 1: No linked lists to be merged
        Node[] a = new Node[0];
        int N = 0;
        assertNull(mergeKList(a, N));
        
        // Test case 2: One linked list
        a = new Node[1];
        a[0] = new Node(5);
        N = 1;
        assertEquals(new Node(5), mergeKList(a, N).next);
        
        // Test case 3: Multiple linked lists, no cycles
        a = new Node[] {new Node(1), new Node(2), new Node(3)};
        N = 3;
        assertEquals(new Node(1, 2, 3), mergeKList(a, N).next);
        
        // Test case 4: Multiple linked lists, cycles
        a = new Node[] {new Node(1), new Node(2), new Node(3)};
        Node node1 = new Node(5);
        Node node2 = new Node(6);
        Node node3 = new Node(7);
        Node node4 = new Node(8);
        a[0].next = node1;
        a[1].next = node2;
        a[2].next = node3;
        N = 3;
        assertEquals(new Node(1, 2, 3), mergeKList(a, N).next);
        
        // Test case 5: Null values
        a = new Node[] {null, null};
        N = 2;
        assertNull(mergeKList(a, N));
    }
}


No.9 generated result --------------------------

@Test
public void mergeKListTest() {
    // Create K linked list with 1 element each
    Node[] a = new Node[4];
    for (int i = 0; i < a.length; i++) {
        a[i] = new Node();
        a[i].data = i + 1;
    }

    // Merge K linked list and check the result
    int N = 4;
    Node head = mergeKList(a, N);
    assertEquals(head.data, 1);
    assertEquals(head.next.data, 2);
    assertEquals(head.next.next.data, 3);
    assertEquals(head.next.next.next.data, 4);
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class Merge_K_SortedLinkedlistTest {
    @Test
    public void mergeKListTest() {
        // Create an array of 3 Node objects
        Node[] nodes = new Node[3];
        
        // Create the first node and set its data to 10
        nodes[0] = new Node(10);
        
        // Create the second node and set its data to 20
        nodes[1] = new Node(20);
        
        // Create the third node and set its data to 30
        nodes[2] = new Node(30);
        
        // Call the mergeKList method with the array of Node objects and N=3
        Node result = Merge_K_SortedLinkedlist.mergeKList(nodes, 3);
        
        // Check that the result is not null
        assertNotNull(result);
        
        // Check that the data of the first node in the merged linked list is 10
        assertEquals(10, result.data);
        
        // Check that the next node in the merged linked list has a data value of 20
        assertEquals(20, result.next.data);
        
        // Check that the next node after that has a data value of 30
        assertEquals(30, result.next.next.data);
    }
}


