{
    "project_name": "Java",
    "file_name": "Merge_K_SortedLinkedlist.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/Merge_K_SortedLinkedlist.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * This function merge K sorted LinkedList\n     *\n     * @param a array of LinkedList\n     * @param N size of array\n     * @return node\n     */",
    "source_code": "\nNode mergeKList(Node[] a, int N) {\n    // Min Heap\n    PriorityQueue<Node> min = new PriorityQueue<>(Comparator.comparingInt(x -> x.data));\n\n    // adding head of all linkedList in min heap\n    min.addAll(Arrays.asList(a).subList(0, N));\n\n    // Make new head among smallest heads in K linkedList\n    Node head = min.poll();\n    min.add(head.next);\n    Node curr = head;\n\n    // merging LinkedList\n    while (!min.isEmpty()) {\n        Node temp = min.poll();\n        curr.next = temp;\n        curr = temp;\n\n        // Add Node in min Heap only if temp.next is not null\n        if (temp.next != null) {\n            min.add(temp.next);\n        }\n    }\n\n    return head;\n}\n",
    "class_name": "Merge_K_SortedLinkedlist",
    "method_name": "mergeKList",
    "arguments": [
        "Node a",
        "int N"
    ],
    "generate_test": [
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        // Test case 1: empty list\n        LinkedList<Integer>[] lists = new LinkedList[0];\n        Node head = mergeKList(lists, 0);\n        assertEquals(null, head.data);\n        \n        // Test case 2: single element list\n        lists = new LinkedList[]{new LinkedList<>(1)};\n        head = mergeKList(lists, 1);\n        assertEquals(1, head.data);\n        \n        // Test case 3: multiple element list\n        lists = new LinkedList[] {new LinkedList<>(1), new LinkedList<>(2), new LinkedList<>(3)};\n        head = mergeKList(lists, 3);\n        assertEquals(1, head.data);\n        assertEquals(2, head.next.data);\n        assertEquals(3, head.next.next.data);\n    }\n}",
        "\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MergeKSortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        // Create 3 linked lists with the following values:\n        Node list1 = new Node(1, new Node(2, new Node(3)));\n        Node list2 = new Node(4, new Node(5));\n        Node list3 = new Node(6, new Node(7));\n        \n        // Merge the 3 linked lists into a single sorted linked list:\n        Node result = mergeKLists(new Node[] {list1, list2, list3}, 3);\n        \n        // Check that the resulting linked list is sorted and contains all the expected values:\n        assertEquals(\"[1, 2, 3, 4, 5, 6, 7]\", result.toString());\n    }\n}\n",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MergeKSortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        // Create an array of Nodes with 3 linked lists each having 2 nodes\n        Node[] a = new Node[3];\n        for (int i = 0; i < 3; i++) {\n            a[i] = new Node(1);\n            a[i].next = new Node(2);\n        }\n        // Set the next node of the last node in each linked list to null\n        for (int i = 0; i < 3; i++) {\n            a[i].next.next = null;\n        }\n        // Test if the mergeKList method returns the expected head of the merged linked list\n        assertEquals(mergeKList(a, 3), new Node(1));\n    }\n}",
        "@Test\npublic void mergeKListTest() {\n    // Create two linked lists and add them to an array\n    Node[] a = new Node[2];\n    a[0] = new Node(1, null);\n    a[1] = new Node(2, null);\n\n    // Set the next pointers of each node in the linked list\n    a[0].next = new Node(3, null);\n    a[1].next = new Node(4, null);\n\n    // Call the function to merge the linked lists and check the result\n    assertEquals(mergeKList(a, 2), new Node(1, new Node(2, new Node(3, new Node(4, null)))));\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MergeKListTest {\n    @Test\n    public void mergeKListTest() {\n        Node[] a = new Node[3];\n        a[0] = new Node(1, null);\n        a[1] = new Node(2, null);\n        a[2] = new Node(3, null);\n        int N = 3;\n        Node head = mergeKList(a, N);\n        assertEquals(head.data, 1);\n        assertEquals(head.next.data, 2);\n        assertEquals(head.next.next.data, 3);\n    }\n}",
        "\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        Node[] a = new Node[3];\n        a[0] = new Node(1);\n        a[0].next = new Node(2);\n        a[0].next.next = new Node(3);\n\n        a[1] = new Node(4);\n        a[1].next = new Node(5);\n        a[1].next.next = new Node(6);\n\n        a[2] = new Node(7);\n        a[2].next = new Node(8);\n        a[2].next.next = new Node(9);\n\n        int N = 3;\n\n        Node result = mergeKList(a, N);\n        assertEquals(1, result.data);\n        assertEquals(2, result.next.data);\n        assertEquals(3, result.next.next.data);\n        assertEquals(4, result.next.next.next.data);\n        assertEquals(5, result.next.next.next.next.data);\n        assertEquals(6, result.next.next.next.next.next.data);\n        assertEquals(7, result.next.next.next.next.next.next.data);\n        assertEquals(8, result.next.next.next.next.next.next.next.data);\n        assertEquals(9, result.next.next.next.next.next.next.next.next.data);\n    }\n}",
        "\n@Test\npublic void mergeKListTest() {\n    // Create a list of 3 linked lists, each with 2 nodes\n    Node[] lists = new Node[3];\n    lists[0] = new Node(1);\n    lists[0].next = new Node(3);\n    \n    lists[1] = new Node(2);\n    lists[1].next = new Node(4);\n    \n    lists[2] = new Node(5);\n    lists[2].next = new Node(6);\n    \n    // Set the head and tail of each linked list\n    lists[0].head = lists[0];\n    lists[0].tail = lists[0].next;\n    \n    lists[1].head = lists[1];\n    lists[1].tail = lists[1].next;\n    \n    lists[2].head = lists[2];\n    lists[2].tail = lists[2].next;\n    \n    // Merge the linked lists using the mergeKList function\n    Node mergedLists = mergeKList(lists, 3);\n    \n    // Check that the merged list is sorted in ascending order\n    assertEquals(mergedLists.data, 1);\n    assertEquals(mergedLists.next.data, 2);\n    assertEquals(mergedLists.next.next.data, 3);\n    assertEquals(mergedLists.next.next.next.data, 4);\n    assertEquals(mergedLists.next.next.next.next.data, 5);\n    assertEquals(mergedLists.next.next.next.next.next.data, 6);\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        Node[] a = new Node[3];\n        for (int i = 0; i < a.length; i++) {\n            a[i] = new Node(1, null);\n        }\n        \n        int N = a.length;\n        assertEquals(a, mergeKList(a, N));\n    }\n}",
        "\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        Node[] a = new Node[3];\n        for (int i = 0; i < 3; i++) {\n            a[i] = new Node(1);\n            a[i].next = new Node(2);\n            a[i].next.next = new Node(3);\n        }\n\n        int N = 3;\n        assertEquals(new Node(1), Merge_K_SortedLinkedlist.mergeKList(a, N));\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        Node[] a = new Node[3];\n        a[0] = new Node(1, null);\n        a[1] = new Node(2, null);\n        a[2] = new Node(3, null);\n\n        int N = 3;\n\n        Node head = mergeKList(a, N);\n\n        assertEquals(head.data, 1);\n        assertEquals(head.next.data, 2);\n        assertEquals(head.next.next.data, 3);\n    }\n}"
    ]
}