Source code: 


Node mergeKList(Node[] a, int N) {
    // Min Heap
    PriorityQueue<Node> min = new PriorityQueue<>(Comparator.comparingInt(x -> x.data));

    // adding head of all linkedList in min heap
    min.addAll(Arrays.asList(a).subList(0, N));

    // Make new head among smallest heads in K linkedList
    Node head = min.poll();
    min.add(head.next);
    Node curr = head;

    // merging LinkedList
    while (!min.isEmpty()) {
        Node temp = min.poll();
        curr.next = temp;
        curr = temp;

        // Add Node in min Heap only if temp.next is not null
        if (temp.next != null) {
            min.add(temp.next);
        }
    }

    return head;
}



No.1 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class Merge_K_SortedLinkedlistTest {
    @Test
    public void mergeKListTest() {
        // Test case 1: empty list
        LinkedList<Integer>[] lists = new LinkedList[0];
        Node head = mergeKList(lists, 0);
        assertEquals(null, head.data);
        
        // Test case 2: single element list
        lists = new LinkedList[]{new LinkedList<>(1)};
        head = mergeKList(lists, 1);
        assertEquals(1, head.data);
        
        // Test case 3: multiple element list
        lists = new LinkedList[] {new LinkedList<>(1), new LinkedList<>(2), new LinkedList<>(3)};
        head = mergeKList(lists, 3);
        assertEquals(1, head.data);
        assertEquals(2, head.next.data);
        assertEquals(3, head.next.next.data);
    }
}


No.2 generated result --------------------------


package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class MergeKSortedLinkedlistTest {
    @Test
    public void mergeKListTest() {
        // Create 3 linked lists with the following values:
        Node list1 = new Node(1, new Node(2, new Node(3)));
        Node list2 = new Node(4, new Node(5));
        Node list3 = new Node(6, new Node(7));
        
        // Merge the 3 linked lists into a single sorted linked list:
        Node result = mergeKLists(new Node[] {list1, list2, list3}, 3);
        
        // Check that the resulting linked list is sorted and contains all the expected values:
        assertEquals("[1, 2, 3, 4, 5, 6, 7]", result.toString());
    }
}



No.3 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class MergeKSortedLinkedlistTest {
    @Test
    public void mergeKListTest() {
        // Create an array of Nodes with 3 linked lists each having 2 nodes
        Node[] a = new Node[3];
        for (int i = 0; i < 3; i++) {
            a[i] = new Node(1);
            a[i].next = new Node(2);
        }
        // Set the next node of the last node in each linked list to null
        for (int i = 0; i < 3; i++) {
            a[i].next.next = null;
        }
        // Test if the mergeKList method returns the expected head of the merged linked list
        assertEquals(mergeKList(a, 3), new Node(1));
    }
}


No.4 generated result --------------------------

@Test
public void mergeKListTest() {
    // Create two linked lists and add them to an array
    Node[] a = new Node[2];
    a[0] = new Node(1, null);
    a[1] = new Node(2, null);

    // Set the next pointers of each node in the linked list
    a[0].next = new Node(3, null);
    a[1].next = new Node(4, null);

    // Call the function to merge the linked lists and check the result
    assertEquals(mergeKList(a, 2), new Node(1, new Node(2, new Node(3, new Node(4, null)))));
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class MergeKListTest {
    @Test
    public void mergeKListTest() {
        Node[] a = new Node[3];
        a[0] = new Node(1, null);
        a[1] = new Node(2, null);
        a[2] = new Node(3, null);
        int N = 3;
        Node head = mergeKList(a, N);
        assertEquals(head.data, 1);
        assertEquals(head.next.data, 2);
        assertEquals(head.next.next.data, 3);
    }
}


No.6 generated result --------------------------


package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class Merge_K_SortedLinkedlistTest {
    @Test
    public void mergeKListTest() {
        Node[] a = new Node[3];
        a[0] = new Node(1);
        a[0].next = new Node(2);
        a[0].next.next = new Node(3);

        a[1] = new Node(4);
        a[1].next = new Node(5);
        a[1].next.next = new Node(6);

        a[2] = new Node(7);
        a[2].next = new Node(8);
        a[2].next.next = new Node(9);

        int N = 3;

        Node result = mergeKList(a, N);
        assertEquals(1, result.data);
        assertEquals(2, result.next.data);
        assertEquals(3, result.next.next.data);
        assertEquals(4, result.next.next.next.data);
        assertEquals(5, result.next.next.next.next.data);
        assertEquals(6, result.next.next.next.next.next.data);
        assertEquals(7, result.next.next.next.next.next.next.data);
        assertEquals(8, result.next.next.next.next.next.next.next.data);
        assertEquals(9, result.next.next.next.next.next.next.next.next.data);
    }
}


No.7 generated result --------------------------


@Test
public void mergeKListTest() {
    // Create a list of 3 linked lists, each with 2 nodes
    Node[] lists = new Node[3];
    lists[0] = new Node(1);
    lists[0].next = new Node(3);
    
    lists[1] = new Node(2);
    lists[1].next = new Node(4);
    
    lists[2] = new Node(5);
    lists[2].next = new Node(6);
    
    // Set the head and tail of each linked list
    lists[0].head = lists[0];
    lists[0].tail = lists[0].next;
    
    lists[1].head = lists[1];
    lists[1].tail = lists[1].next;
    
    lists[2].head = lists[2];
    lists[2].tail = lists[2].next;
    
    // Merge the linked lists using the mergeKList function
    Node mergedLists = mergeKList(lists, 3);
    
    // Check that the merged list is sorted in ascending order
    assertEquals(mergedLists.data, 1);
    assertEquals(mergedLists.next.data, 2);
    assertEquals(mergedLists.next.next.data, 3);
    assertEquals(mergedLists.next.next.next.data, 4);
    assertEquals(mergedLists.next.next.next.next.data, 5);
    assertEquals(mergedLists.next.next.next.next.next.data, 6);
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class Merge_K_SortedLinkedlistTest {
    @Test
    public void mergeKListTest() {
        Node[] a = new Node[3];
        for (int i = 0; i < a.length; i++) {
            a[i] = new Node(1, null);
        }
        
        int N = a.length;
        assertEquals(a, mergeKList(a, N));
    }
}


No.9 generated result --------------------------


package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class Merge_K_SortedLinkedlistTest {
    @Test
    public void mergeKListTest() {
        Node[] a = new Node[3];
        for (int i = 0; i < 3; i++) {
            a[i] = new Node(1);
            a[i].next = new Node(2);
            a[i].next.next = new Node(3);
        }

        int N = 3;
        assertEquals(new Node(1), Merge_K_SortedLinkedlist.mergeKList(a, N));
    }
}


No.10 generated result --------------------------


import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class Merge_K_SortedLinkedlistTest {
    @Test
    public void mergeKListTest() {
        Node[] a = new Node[3];
        a[0] = new Node(1, null);
        a[1] = new Node(2, null);
        a[2] = new Node(3, null);

        int N = 3;

        Node head = mergeKList(a, N);

        assertEquals(head.data, 1);
        assertEquals(head.next.data, 2);
        assertEquals(head.next.next.data, 3);
    }
}


