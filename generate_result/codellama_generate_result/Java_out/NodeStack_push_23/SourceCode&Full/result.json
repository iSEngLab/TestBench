{
    "project_name": "Java",
    "file_name": "NodeStack.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/stacks/NodeStack.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.stacks",
    "docstring": "/**\n     * Put a value onto the stack.\n     *\n     * @param item : value to be put on the stack.\n     */",
    "source_code": "\npublic void push(Item item) {\n    NodeStack<Item> newNs = new NodeStack<Item>(item);\n\n    if (this.isEmpty()) {\n        NodeStack.setHead(new NodeStack<>(item));\n        newNs.setNext(null);\n        newNs.setPrevious(null);\n    } else {\n        newNs.setPrevious(NodeStack.head);\n        NodeStack.head.setNext(newNs);\n        NodeStack.setHead(newNs);\n    }\n\n    NodeStack.setSize(NodeStack.getSize() + 1);\n}\n",
    "class_name": "NodeStack",
    "method_name": "push",
    "arguments": [
        "Item item"
    ],
    "generate_test": [
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> Stack = new NodeStack<>();\n    int sizeBefore = Stack.size();\n    Stack.push(3);\n    assertEquals(3, Stack.peek());\n    assertEquals(sizeBefore + 1, Stack.size());\n}",
        "I'm not sure I understand what you are saying. Could you explain?",
        "I'm not sure I understand what you are saying. Could you explain?",
        "I'm not sure I understand what you are saying. Could you explain?",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        // Create a new stack\n        NodeStack<Integer> Stack = new NodeStack<Integer>();\n\n        // Push some values onto the stack\n        Stack.push(3);\n        Stack.push(4);\n        Stack.push(5);\n\n        // Check that the stack size is correct after pushing the values\n        assertEquals(3, Stack.size());\n\n        // Check that the head of the stack is correct after pushing the values\n        assertEquals(Integer.valueOf(5), Stack.head.getData());\n\n        // Check that the previous node of the head of the stack is correct after pushing the values\n        assertEquals(Integer.valueOf(4), Stack.head.previous.getData());\n\n        // Check that the next node of the head of the stack is correct after pushing the values\n        assertNull(Stack.head.next);\n    }\n}",
        "\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        \n        // Test that the size of the stack increases by 1 after pushing an item\n        stack.push(5);\n        assertEquals(stack.size(), 1);\n        \n        // Test that the head of the stack is set to the pushed item\n        assertEquals(stack.head, 5);\n    }\n}\n",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n\n        // Test pushing a single value onto the stack\n        int item1 = 3;\n        stack.push(item1);\n        assertEquals(stack.peek(), item1, \"Expected peek to return pushed value\");\n        assertEquals(stack.size(), 1, \"Expected size to be 1 after pushing a single value onto the stack\");\n\n        // Test pushing multiple values onto the stack\n        int item2 = 4;\n        stack.push(item2);\n        assertEquals(stack.peek(), item2, \"Expected peek to return pushed value\");\n        assertEquals(stack.size(), 2, \"Expected size to be 2 after pushing multiple values onto the stack\");\n    }\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    stack.push(1);\n    assertEquals(stack.size(), 1);\n    assertEquals(stack.peek(), (int) 1);\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        assertEquals(0, stack.size());\n        \n        stack.push(1);\n        assertEquals(1, stack.size());\n        assertEquals(1, (int)stack.peek());\n        \n        stack.push(2);\n        assertEquals(2, stack.size());\n        assertEquals(2, (int)stack.peek());\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        int size = stack.size();\n        \n        // Test that the method correctly adds a value to the stack\n        stack.push(1);\n        assertEquals(size + 1, stack.size());\n        assertEquals(1, (int) stack.peek());\n        \n        // Test that the head of the stack is updated correctly\n        stack.push(2);\n        assertEquals(2, (int) stack.head.getData());\n    }\n}"
    ]
}