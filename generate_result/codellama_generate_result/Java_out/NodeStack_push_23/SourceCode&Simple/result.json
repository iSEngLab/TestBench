{
    "project_name": "Java",
    "file_name": "NodeStack.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/stacks/NodeStack.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.stacks",
    "docstring": "/**\n     * Put a value onto the stack.\n     *\n     * @param item : value to be put on the stack.\n     */",
    "source_code": "\npublic void push(Item item) {\n    NodeStack<Item> newNs = new NodeStack<Item>(item);\n\n    if (this.isEmpty()) {\n        NodeStack.setHead(new NodeStack<>(item));\n        newNs.setNext(null);\n        newNs.setPrevious(null);\n    } else {\n        newNs.setPrevious(NodeStack.head);\n        NodeStack.head.setNext(newNs);\n        NodeStack.setHead(newNs);\n    }\n\n    NodeStack.setSize(NodeStack.getSize() + 1);\n}\n",
    "class_name": "NodeStack",
    "method_name": "push",
    "arguments": [
        "Item item"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        // Set up the stack with an initial item\n        Item item1 = new Item();\n        NodeStack<Item> stack = new NodeStack<>();\n        stack.push(item1);\n        \n        // Push a second item onto the stack\n        Item item2 = new Item();\n        stack.push(item2);\n        \n        // Check that the size property is updated correctly\n        assertEquals(stack.size(), 2);\n        \n        // Check that the head property of the stack is set to the correct value\n        assertEquals(stack.head, item2);\n    }\n}\n",
        "\npackage com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        // Create a new instance of the NodeStack class\n        NodeStack stack = new NodeStack();\n\n        // Check that the size is 0 before pushing any items\n        assertEquals(0, stack.size());\n\n        // Push an item onto the stack\n        stack.push(\"apple\");\n\n        // Check that the size is now 1\n        assertEquals(1, stack.size());\n\n        // Check that the top item on the stack is \"apple\"\n        assertEquals(\"apple\", stack.peek());\n    }\n}",
        "\npackage com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        // Create a new NodeStack object\n        NodeStack ns = new NodeStack();\n        \n        // Check that the size is initially 0\n        assertEquals(0, ns.size());\n        \n        // Push an item to the stack\n        Item item1 = new Item(\"item1\");\n        ns.push(item1);\n        \n        // Check that the size has increased by 1\n        assertEquals(1, ns.size());\n        \n        // Check that the head node is set correctly\n        NodeStack headNode = ns.head;\n        assertNotNull(headNode);\n        assertEquals(item1, headNode.data);\n        \n        // Push another item to the stack\n        Item item2 = new Item(\"item2\");\n        ns.push(item2);\n        \n        // Check that the size has increased by 1 again\n        assertEquals(2, ns.size());\n        \n        // Check that the head node is set correctly after pushing another item\n        headNode = ns.head;\n        assertNotNull(headNode);\n        assertEquals(item2, headNode.data);\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        // Create a new NodeStack instance\n        NodeStack<Integer> ns = new NodeStack<>();\n        \n        // Test that the size of the stack is 0 after creation\n        assertEquals(0, ns.size());\n        \n        // Push an item onto the stack\n        ns.push(1);\n        \n        // Test that the size of the stack is now 1\n        assertEquals(1, ns.size());\n        \n        // Test that the head of the stack is set correctly\n        assertEquals(ns.head(), 1);\n        \n        // Test that the previous item in the stack is null\n        assertNull(ns.getPrevious());\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        stack.push(1);\n        assertEquals(stack.peek(), 1);\n        stack.push(2);\n        assertEquals(stack.peek(), 2);\n        stack.pop();\n        assertEquals(stack.peek(), 1);\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        for (int i = 0; i < 10; i++) {\n            stack.push(i);\n        }\n\n        assertEquals(stack.size(), 10);\n    }\n}",
        "\n@Test\npublic void pushTest() {\n    // Set up the test fixture by creating a new instance of NodeStack\n    NodeStack<Integer> stack = new NodeStack<>();\n\n    // Test that push() adds an item to the top of the stack\n    int item1 = 5;\n    stack.push(item1);\n    assertEquals(stack.peek(), item1, \"Push should add an item to the top of the stack\");\n\n    // Test that push() sets the previous node of the new NodeStack object to null\n    int item2 = 10;\n    stack.push(item2);\n    assertNull(stack.getPrevious(), \"Push should set the previous node of the new NodeStack object to null\");\n\n    // Test that push() sets the next node of the previous NodeStack object to the new NodeStack object\n    int item3 = 15;\n    stack.push(item3);\n    assertEquals(stack.getPrevious().getNext(), stack, \"Push should set the next node of the previous NodeStack object to the new NodeStack object\");\n\n    // Test that push() sets the head of the linked list to the new NodeStack object\n    int item4 = 20;\n    stack.push(item4);\n    assertEquals(NodeStack.getHead(), stack, \"Push should set the head of the linked list to the new NodeStack object\");\n}",
        "\npackage com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        // Create a new instance of the NodeStack class\n        NodeStack ns = new NodeStack();\n\n        // Push an item onto the stack\n        ns.push(1);\n\n        // Check that the size of the stack is 1\n        assertEquals(1, ns.size());\n\n        // Check that the head node's data is equal to the pushed item\n        assertEquals(1, ns.head.data);\n\n        // Push another item onto the stack\n        ns.push(2);\n\n        // Check that the size of the stack is 2\n        assertEquals(2, ns.size());\n\n        // Check that the head node's data is equal to the pushed item\n        assertEquals(2, ns.head.data);\n\n        // Check that the previous node's data is equal to the first item pushed\n        assertEquals(1, ns.head.previous.data);\n    }\n}",
        "@Test\npublic void pushTest() {\n    // Test case 1: Push an item to an empty stack\n    NodeStack<Integer> stack = new NodeStack<>();\n    int expectedSize = 1;\n    int actualSize = stack.size();\n    assertEquals(expectedSize, actualSize);\n\n    // Test case 2: Push multiple items to a non-empty stack\n    stack.push(10);\n    stack.push(20);\n    stack.push(30);\n    expectedSize = 4;\n    actualSize = stack.size();\n    assertEquals(expectedSize, actualSize);\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    for (int i = 0; i < 5; i++) {\n        stack.push(i);\n    }\n    assertEquals(stack.size(), 5);\n}"
    ]
}