{
    "project_name": "Java",
    "file_name": "NodeStack.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/stacks/NodeStack.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.stacks",
    "docstring": "/**\n     * Put a value onto the stack.\n     *\n     * @param item : value to be put on the stack.\n     */",
    "source_code": "\npublic void push(Item item) {\n    NodeStack<Item> newNs = new NodeStack<Item>(item);\n\n    if (this.isEmpty()) {\n        NodeStack.setHead(new NodeStack<>(item));\n        newNs.setNext(null);\n        newNs.setPrevious(null);\n    } else {\n        newNs.setPrevious(NodeStack.head);\n        NodeStack.head.setNext(newNs);\n        NodeStack.setHead(newNs);\n    }\n\n    NodeStack.setSize(NodeStack.getSize() + 1);\n}\n",
    "class_name": "NodeStack",
    "method_name": "push",
    "arguments": [
        "Item item"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        // create a new NodeStack with size 10\n        NodeStack<Integer> stack = new NodeStack<>(10);\n\n        // check that the head is null and the size is 0\n        assertNull(stack.head);\n        assertEquals(0, stack.size);\n\n        // push an item onto the stack\n        stack.push(5);\n\n        // check that the head has been updated to point to a new NodeStack with value 5 and size 1\n        assertNotNull(stack.head);\n        assertEquals(5, stack.head.value);\n        assertEquals(1, stack.size);\n\n        // push another item onto the stack\n        stack.push(8);\n\n        // check that the head has been updated to point to a new NodeStack with value 8 and size 2\n        assertNotNull(stack.head);\n        assertEquals(8, stack.head.value);\n        assertEquals(2, stack.size);\n\n        // push another item onto the stack\n        stack.push(3);\n\n        // check that the head has been updated to point to a new NodeStack with value 3 and size 3\n        assertNotNull(stack.head);\n        assertEquals(3, stack.head.value);\n        assertEquals(3, stack.size);\n    }\n}",
        "\npackage com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        // Test 1: Empty stack, adding one item\n        Item item = new Item(\"item1\");\n        NodeStack<Item> ns = new NodeStack<>();\n        ns.push(item);\n        assertEquals(ns.getHead().getValue(), \"item1\");\n        assertEquals(ns.getSize(), 1);\n\n        // Test 2: Non-empty stack, adding one item\n        Item item2 = new Item(\"item2\");\n        ns.push(item2);\n        assertEquals(ns.getHead().getValue(), \"item2\");\n        assertEquals(ns.getSize(), 2);\n\n        // Test 3: Non-empty stack, adding two items\n        Item item3 = new Item(\"item3\");\n        ns.push(item3);\n        assertEquals(ns.getHead().getValue(), \"item3\");\n        assertEquals(ns.getSize(), 3);\n    }\n}\n",
        "\npackage com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        assertEquals(0, stack.getSize());\n        \n        stack.push(1);\n        assertEquals(1, stack.getSize());\n        assertEquals(\"[1]\", stack.toString());\n        \n        stack.push(2);\n        assertEquals(2, stack.getSize());\n        assertEquals(\"[2, 1]\", stack.toString());\n        \n        stack.push(3);\n        assertEquals(3, stack.getSize());\n        assertEquals(\"[3, 2, 1]\", stack.toString());\n    }\n}",
        "\npackage com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        stack.push(1);\n        assertEquals(stack.size(), 1);\n        assertTrue(stack.head != null);\n        assertTrue(stack.tail != null);\n        assertEquals(stack.head, 1);\n        assertEquals(stack.tail, 1);\n        \n        stack.push(2);\n        assertEquals(stack.size(), 2);\n        assertTrue(stack.head != null);\n        assertTrue(stack.tail != null);\n        assertEquals(stack.head, 2);\n        assertEquals(stack.tail, 1);\n        \n        stack.push(3);\n        assertEquals(stack.size(), 3);\n        assertTrue(stack.head != null);\n        assertTrue(stack.tail != null);\n        assertEquals(stack.head, 3);\n        assertEquals(stack.tail, 1);\n    }\n}\n",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        // Create a new empty stack\n        NodeStack<Integer> stack = new NodeStack<>();\n        \n        // Push an item onto the stack\n        stack.push(1);\n        \n        // Verify that the size of the stack is now 1\n        assertEquals(stack.size(), 1);\n        \n        // Verify that the head of the stack is the pushed item\n        assertEquals(stack.head, 1);\n        \n        // Push another item onto the stack\n        stack.push(2);\n        \n        // Verify that the size of the stack is now 2\n        assertEquals(stack.size(), 2);\n        \n        // Verify that the head of the stack is the second pushed item\n        assertEquals(stack.head, 2);\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> nodeStack = new NodeStack<>();\n\n        // Test case 1: Pushing a single item to an empty stack\n        assertEquals(0, nodeStack.size());\n        nodeStack.push(1);\n        assertEquals(1, nodeStack.size());\n        assertEquals(1, (int) nodeStack.head.getValue());\n        assertNull(nodeStack.head.getNext());\n\n        // Test case 2: Pushing multiple items to an empty stack\n        nodeStack.push(2);\n        nodeStack.push(3);\n        assertEquals(3, nodeStack.size());\n        assertEquals(1, (int) nodeStack.head.getValue());\n        assertEquals(2, (int) nodeStack.head.getNext().getValue());\n        assertEquals(3, (int) nodeStack.head.getNext().getNext().getValue());\n        assertNull(nodeStack.head.getNext().getNext().getNext());\n\n        // Test case 3: Pushing an item to a non-empty stack\n        nodeStack.push(4);\n        assertEquals(4, nodeStack.size());\n        assertEquals(1, (int) nodeStack.head.getValue());\n        assertEquals(2, (int) nodeStack.head.getNext().getValue());\n        assertEquals(3, (int) nodeStack.head.getNext().getNext().getValue());\n        assertEquals(4, (int) nodeStack.head.getNext().getNext().getNext().getValue());\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        assertEquals(0, stack.getSize());\n        \n        stack.push(1);\n        assertEquals(1, stack.getSize());\n        assertEquals(1, stack.peek().getValue());\n        \n        stack.push(2);\n        assertEquals(2, stack.getSize());\n        assertEquals(2, stack.peek().getValue());\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<String> stack = new NodeStack<>();\n        \n        // Test pushing a single item\n        String item1 = \"item1\";\n        stack.push(item1);\n        assertEquals(stack.head.getItem(), item1, \"The head of the stack should be 'item1'\");\n        assertNull(stack.head.getNext(), \"The next node should be null after pushing a single item\");\n        \n        // Test pushing multiple items\n        String item2 = \"item2\";\n        stack.push(item2);\n        assertEquals(stack.head.getItem(), item2, \"The head of the stack should be 'item2'\");\n        assertNotNull(stack.head.getNext(), \"The next node should not be null after pushing multiple items\");\n        \n        // Test popping an item\n        String poppedItem = stack.pop();\n        assertEquals(poppedItem, item2, \"The popped item should be 'item2'\");\n        assertNotNull(stack.head.getNext(), \"The next node should not be null after popping an item\");\n        \n        // Test isEmpty() method\n        assertFalse(stack.isEmpty(), \"The stack should not be empty after pushing and popping items\");\n    }\n}",
        "\npackage com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        stack.push(1);\n        assertEquals(stack.getSize(), 1);\n        stack.push(2);\n        assertEquals(stack.getSize(), 2);\n        stack.push(3);\n        assertEquals(stack.getSize(), 3);\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        assertTrue(stack.isEmpty());\n        \n        // Test push method when the stack is empty\n        stack.push(1);\n        assertFalse(stack.isEmpty());\n        assertEquals(1, stack.head.item);\n        assertNull(stack.head.previous);\n        assertNull(stack.head.next);\n        \n        // Test push method when the stack is not empty\n        stack.push(2);\n        assertFalse(stack.isEmpty());\n        assertEquals(1, stack.head.item);\n        assertNotNull(stack.head.previous);\n        assertEquals(2, stack.head.next.item);\n        \n        // Test push method when the size of the stack is 2\n        stack.push(3);\n        assertFalse(stack.isEmpty());\n        assertEquals(1, stack.head.item);\n        assertNotNull(stack.head.previous);\n        assertEquals(2, stack.head.next.item);\n        assertNotNull(stack.head.next.next);\n        assertEquals(3, stack.head.next.next.item);\n    }\n}"
    ]
}