Source code: 


public void push(Item item) {
    NodeStack<Item> newNs = new NodeStack<Item>(item);

    if (this.isEmpty()) {
        NodeStack.setHead(new NodeStack<>(item));
        newNs.setNext(null);
        newNs.setPrevious(null);
    } else {
        newNs.setPrevious(NodeStack.head);
        NodeStack.head.setNext(newNs);
        NodeStack.setHead(newNs);
    }

    NodeStack.setSize(NodeStack.getSize() + 1);
}



No.1 generated result --------------------------


package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    @Test
    public void pushTest() {
        // create a new NodeStack with size 10
        NodeStack<Integer> stack = new NodeStack<>(10);

        // check that the head is null and the size is 0
        assertNull(stack.head);
        assertEquals(0, stack.size);

        // push an item onto the stack
        stack.push(5);

        // check that the head has been updated to point to a new NodeStack with value 5 and size 1
        assertNotNull(stack.head);
        assertEquals(5, stack.head.value);
        assertEquals(1, stack.size);

        // push another item onto the stack
        stack.push(8);

        // check that the head has been updated to point to a new NodeStack with value 8 and size 2
        assertNotNull(stack.head);
        assertEquals(8, stack.head.value);
        assertEquals(2, stack.size);

        // push another item onto the stack
        stack.push(3);

        // check that the head has been updated to point to a new NodeStack with value 3 and size 3
        assertNotNull(stack.head);
        assertEquals(3, stack.head.value);
        assertEquals(3, stack.size);
    }
}


No.2 generated result --------------------------


package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    @Test
    public void pushTest() {
        // Test 1: Empty stack, adding one item
        Item item = new Item("item1");
        NodeStack<Item> ns = new NodeStack<>();
        ns.push(item);
        assertEquals(ns.getHead().getValue(), "item1");
        assertEquals(ns.getSize(), 1);

        // Test 2: Non-empty stack, adding one item
        Item item2 = new Item("item2");
        ns.push(item2);
        assertEquals(ns.getHead().getValue(), "item2");
        assertEquals(ns.getSize(), 2);

        // Test 3: Non-empty stack, adding two items
        Item item3 = new Item("item3");
        ns.push(item3);
        assertEquals(ns.getHead().getValue(), "item3");
        assertEquals(ns.getSize(), 3);
    }
}



No.3 generated result --------------------------


package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    @Test
    public void pushTest() {
        NodeStack<Integer> stack = new NodeStack<>();
        assertEquals(0, stack.getSize());
        
        stack.push(1);
        assertEquals(1, stack.getSize());
        assertEquals("[1]", stack.toString());
        
        stack.push(2);
        assertEquals(2, stack.getSize());
        assertEquals("[2, 1]", stack.toString());
        
        stack.push(3);
        assertEquals(3, stack.getSize());
        assertEquals("[3, 2, 1]", stack.toString());
    }
}


No.4 generated result --------------------------


package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    @Test
    public void pushTest() {
        NodeStack<Integer> stack = new NodeStack<>();
        stack.push(1);
        assertEquals(stack.size(), 1);
        assertTrue(stack.head != null);
        assertTrue(stack.tail != null);
        assertEquals(stack.head, 1);
        assertEquals(stack.tail, 1);
        
        stack.push(2);
        assertEquals(stack.size(), 2);
        assertTrue(stack.head != null);
        assertTrue(stack.tail != null);
        assertEquals(stack.head, 2);
        assertEquals(stack.tail, 1);
        
        stack.push(3);
        assertEquals(stack.size(), 3);
        assertTrue(stack.head != null);
        assertTrue(stack.tail != null);
        assertEquals(stack.head, 3);
        assertEquals(stack.tail, 1);
    }
}



No.5 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    @Test
    public void pushTest() {
        // Create a new empty stack
        NodeStack<Integer> stack = new NodeStack<>();
        
        // Push an item onto the stack
        stack.push(1);
        
        // Verify that the size of the stack is now 1
        assertEquals(stack.size(), 1);
        
        // Verify that the head of the stack is the pushed item
        assertEquals(stack.head, 1);
        
        // Push another item onto the stack
        stack.push(2);
        
        // Verify that the size of the stack is now 2
        assertEquals(stack.size(), 2);
        
        // Verify that the head of the stack is the second pushed item
        assertEquals(stack.head, 2);
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    @Test
    public void pushTest() {
        NodeStack<Integer> nodeStack = new NodeStack<>();

        // Test case 1: Pushing a single item to an empty stack
        assertEquals(0, nodeStack.size());
        nodeStack.push(1);
        assertEquals(1, nodeStack.size());
        assertEquals(1, (int) nodeStack.head.getValue());
        assertNull(nodeStack.head.getNext());

        // Test case 2: Pushing multiple items to an empty stack
        nodeStack.push(2);
        nodeStack.push(3);
        assertEquals(3, nodeStack.size());
        assertEquals(1, (int) nodeStack.head.getValue());
        assertEquals(2, (int) nodeStack.head.getNext().getValue());
        assertEquals(3, (int) nodeStack.head.getNext().getNext().getValue());
        assertNull(nodeStack.head.getNext().getNext().getNext());

        // Test case 3: Pushing an item to a non-empty stack
        nodeStack.push(4);
        assertEquals(4, nodeStack.size());
        assertEquals(1, (int) nodeStack.head.getValue());
        assertEquals(2, (int) nodeStack.head.getNext().getValue());
        assertEquals(3, (int) nodeStack.head.getNext().getNext().getValue());
        assertEquals(4, (int) nodeStack.head.getNext().getNext().getNext().getValue());
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    @Test
    public void pushTest() {
        NodeStack<Integer> stack = new NodeStack<>();
        assertEquals(0, stack.getSize());
        
        stack.push(1);
        assertEquals(1, stack.getSize());
        assertEquals(1, stack.peek().getValue());
        
        stack.push(2);
        assertEquals(2, stack.getSize());
        assertEquals(2, stack.peek().getValue());
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    @Test
    public void pushTest() {
        NodeStack<String> stack = new NodeStack<>();
        
        // Test pushing a single item
        String item1 = "item1";
        stack.push(item1);
        assertEquals(stack.head.getItem(), item1, "The head of the stack should be 'item1'");
        assertNull(stack.head.getNext(), "The next node should be null after pushing a single item");
        
        // Test pushing multiple items
        String item2 = "item2";
        stack.push(item2);
        assertEquals(stack.head.getItem(), item2, "The head of the stack should be 'item2'");
        assertNotNull(stack.head.getNext(), "The next node should not be null after pushing multiple items");
        
        // Test popping an item
        String poppedItem = stack.pop();
        assertEquals(poppedItem, item2, "The popped item should be 'item2'");
        assertNotNull(stack.head.getNext(), "The next node should not be null after popping an item");
        
        // Test isEmpty() method
        assertFalse(stack.isEmpty(), "The stack should not be empty after pushing and popping items");
    }
}


No.9 generated result --------------------------


package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    @Test
    public void pushTest() {
        NodeStack<Integer> stack = new NodeStack<>();
        stack.push(1);
        assertEquals(stack.getSize(), 1);
        stack.push(2);
        assertEquals(stack.getSize(), 2);
        stack.push(3);
        assertEquals(stack.getSize(), 3);
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    @Test
    public void pushTest() {
        NodeStack<Integer> stack = new NodeStack<>();
        assertTrue(stack.isEmpty());
        
        // Test push method when the stack is empty
        stack.push(1);
        assertFalse(stack.isEmpty());
        assertEquals(1, stack.head.item);
        assertNull(stack.head.previous);
        assertNull(stack.head.next);
        
        // Test push method when the stack is not empty
        stack.push(2);
        assertFalse(stack.isEmpty());
        assertEquals(1, stack.head.item);
        assertNotNull(stack.head.previous);
        assertEquals(2, stack.head.next.item);
        
        // Test push method when the size of the stack is 2
        stack.push(3);
        assertFalse(stack.isEmpty());
        assertEquals(1, stack.head.item);
        assertNotNull(stack.head.previous);
        assertEquals(2, stack.head.next.item);
        assertNotNull(stack.head.next.next);
        assertEquals(3, stack.head.next.next.item);
    }
}


