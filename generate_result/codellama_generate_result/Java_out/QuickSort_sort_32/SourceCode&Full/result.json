{
    "project_name": "Java",
    "file_name": "QuickSort.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/sorts/QuickSort.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.sorts",
    "docstring": "/**\n     * This method implements the Generic Quick Sort\n     *\n     * @param array The array to be sorted Sorts the array in increasing order\n     */",
    "source_code": "\n@Override\npublic <T extends Comparable<T>> T[] sort(T[] array) {\n    doSort(array, 0, array.length - 1);\n    return array;\n}\n",
    "class_name": "QuickSort",
    "method_name": "sort",
    "arguments": [
        "T array"
    ],
    "generate_test": [
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        int[] array = new int[] {1, 2, 3};\n        assertArrayEquals(new int[] {1, 2, 3}, QuickSort.sort(array));\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] array = new Integer[] { 5, 2, 8, 3, 1, 6 };\n        QuickSort quickSort = new QuickSort();\n        assertArrayEquals(new Integer[] { 1, 2, 3, 5, 6, 8 }, quickSort.sort(array));\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        int[] array = new int[]{4, 2, 1, 3};\n        QuickSort quickSort = new QuickSort();\n        int[] sortedArray = quickSort.sort(array);\n        assertEquals(sortedArray[0], 1);\n        assertEquals(sortedArray[1], 2);\n        assertEquals(sortedArray[2], 3);\n        assertEquals(sortedArray[3], 4);\n    }\n}",
        "@Test\npublic void sortTest() {\n    // Create a random array with 10 elements\n    int[] array = new int[10];\n    for (int i = 0; i < array.length; i++) {\n        array[i] = (int) Math.random();\n    }\n    \n    // Sort the array using the QuickSort algorithm\n    QuickSort quickSort = new QuickSort();\n    int[] sortedArray = quickSort.sort(array);\n    \n    // Check that the array is sorted correctly\n    for (int i = 1; i < sortedArray.length; i++) {\n        assertTrue(sortedArray[i] >= sortedArray[i - 1]);\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        // Test an empty array\n        Integer[] emptyArray = {};\n        QuickSort quickSort = new QuickSort();\n        assertEquals(quickSort.sort(emptyArray), emptyArray);\n\n        // Test a single-element array\n        Integer[] singleElementArray = {5};\n        assertEquals(quickSort.sort(singleElementArray), singleElementArray);\n\n        // Test an unsorted array\n        Integer[] unsortedArray = {3, 1, 2, 4};\n        Integer[] expectedUnsortedArray = {1, 2, 3, 4};\n        assertEquals(quickSort.sort(unsortedArray), expectedUnsortedArray);\n\n        // Test a sorted array\n        Integer[] sortedArray = {1, 2, 3, 4};\n        assertEquals(quickSort.sort(sortedArray), sortedArray);\n    }\n}",
        "\npackage com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] array = new Integer[] { 5, 2, 9, 1, 6 };\n        int left = 0;\n        int right = array.length - 1;\n        QuickSort quickSort = new QuickSort();\n        assertArrayEquals(new Integer[] { 1, 2, 5, 6, 9 }, quickSort.sort(array));\n    }\n}",
        "\npackage com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        // Create an array of integers to be sorted\n        Integer[] arr = new Integer[]{5, 10, 3, 2, 8, 6, 9};\n        \n        // Sort the array using QuickSort algorithm\n        QuickSort quickSort = new QuickSort();\n        Integer[] sortedArr = quickSort.sort(arr);\n        \n        // Check if the array is sorted in increasing order\n        assertArrayEquals(new Integer[]{2, 3, 5, 6, 8, 9, 10}, sortedArr);\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    private final SortAlgorithm sort = new QuickSort();\n\n    @Test\n    public void sortTest() {\n        Integer[] input = new Integer[] { 3, 2, 1 };\n        Integer[] expectedOutput = new Integer[] { 1, 2, 3 };\n        Integer[] actualOutput = sort.sort(input);\n        assertArrayEquals(expectedOutput, actualOutput);\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        // Test case 1: Sort an empty array\n        int[] input = {};\n        QuickSort quickSort = new QuickSort();\n        int[] output = quickSort.sort(input);\n        assertArrayEquals(output, input, \"Empty array should be sorted\");\n\n        // Test case 2: Sort a single-element array\n        input = {1};\n        output = quickSort.sort(input);\n        assertArrayEquals(output, input, \"Single-element array should be sorted\");\n\n        // Test case 3: Sort an array with multiple elements\n        input = {5, 2, 8, 3, 1, 6};\n        output = quickSort.sort(input);\n        assertArrayEquals(output, new int[] {1, 2, 3, 5, 6, 8}, \"Multi-element array should be sorted\");\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        // Test an empty array\n        int[] input = new int[0];\n        int[] expectedOutput = new int[0];\n        int[] actualOutput = QuickSort.sort(input);\n        assertArrayEquals(expectedOutput, actualOutput);\n\n        // Test a single-element array\n        input = new int[]{5};\n        expectedOutput = new int[]{5};\n        actualOutput = QuickSort.sort(input);\n        assertArrayEquals(expectedOutput, actualOutput);\n\n        // Test a small array with several elements\n        input = new int[]{3, 2, 1, 4};\n        expectedOutput = new int[]{1, 2, 3, 4};\n        actualOutput = QuickSort.sort(input);\n        assertArrayEquals(expectedOutput, actualOutput);\n    }\n}"
    ]
}