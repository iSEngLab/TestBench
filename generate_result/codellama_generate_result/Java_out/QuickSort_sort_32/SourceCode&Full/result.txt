Source code: 


@Override
public <T extends Comparable<T>> T[] sort(T[] array) {
    doSort(array, 0, array.length - 1);
    return array;
}



No.1 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    @Test
    public void sortTest() {
        int[] array = new int[] {1, 2, 3};
        assertArrayEquals(new int[] {1, 2, 3}, QuickSort.sort(array));
    }
}


No.2 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    @Test
    public void sortTest() {
        Integer[] array = new Integer[] { 5, 2, 8, 3, 1, 6 };
        QuickSort quickSort = new QuickSort();
        assertArrayEquals(new Integer[] { 1, 2, 3, 5, 6, 8 }, quickSort.sort(array));
    }
}


No.3 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    @Test
    public void sortTest() {
        int[] array = new int[]{4, 2, 1, 3};
        QuickSort quickSort = new QuickSort();
        int[] sortedArray = quickSort.sort(array);
        assertEquals(sortedArray[0], 1);
        assertEquals(sortedArray[1], 2);
        assertEquals(sortedArray[2], 3);
        assertEquals(sortedArray[3], 4);
    }
}


No.4 generated result --------------------------

@Test
public void sortTest() {
    // Create a random array with 10 elements
    int[] array = new int[10];
    for (int i = 0; i < array.length; i++) {
        array[i] = (int) Math.random();
    }
    
    // Sort the array using the QuickSort algorithm
    QuickSort quickSort = new QuickSort();
    int[] sortedArray = quickSort.sort(array);
    
    // Check that the array is sorted correctly
    for (int i = 1; i < sortedArray.length; i++) {
        assertTrue(sortedArray[i] >= sortedArray[i - 1]);
    }
}


No.5 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    @Test
    public void sortTest() {
        // Test an empty array
        Integer[] emptyArray = {};
        QuickSort quickSort = new QuickSort();
        assertEquals(quickSort.sort(emptyArray), emptyArray);

        // Test a single-element array
        Integer[] singleElementArray = {5};
        assertEquals(quickSort.sort(singleElementArray), singleElementArray);

        // Test an unsorted array
        Integer[] unsortedArray = {3, 1, 2, 4};
        Integer[] expectedUnsortedArray = {1, 2, 3, 4};
        assertEquals(quickSort.sort(unsortedArray), expectedUnsortedArray);

        // Test a sorted array
        Integer[] sortedArray = {1, 2, 3, 4};
        assertEquals(quickSort.sort(sortedArray), sortedArray);
    }
}


No.6 generated result --------------------------


package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    @Test
    public void sortTest() {
        Integer[] array = new Integer[] { 5, 2, 9, 1, 6 };
        int left = 0;
        int right = array.length - 1;
        QuickSort quickSort = new QuickSort();
        assertArrayEquals(new Integer[] { 1, 2, 5, 6, 9 }, quickSort.sort(array));
    }
}


No.7 generated result --------------------------


package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    @Test
    public void sortTest() {
        // Create an array of integers to be sorted
        Integer[] arr = new Integer[]{5, 10, 3, 2, 8, 6, 9};
        
        // Sort the array using QuickSort algorithm
        QuickSort quickSort = new QuickSort();
        Integer[] sortedArr = quickSort.sort(arr);
        
        // Check if the array is sorted in increasing order
        assertArrayEquals(new Integer[]{2, 3, 5, 6, 8, 9, 10}, sortedArr);
    }
}


No.8 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    private final SortAlgorithm sort = new QuickSort();

    @Test
    public void sortTest() {
        Integer[] input = new Integer[] { 3, 2, 1 };
        Integer[] expectedOutput = new Integer[] { 1, 2, 3 };
        Integer[] actualOutput = sort.sort(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }
}


No.9 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    @Test
    public void sortTest() {
        // Test case 1: Sort an empty array
        int[] input = {};
        QuickSort quickSort = new QuickSort();
        int[] output = quickSort.sort(input);
        assertArrayEquals(output, input, "Empty array should be sorted");

        // Test case 2: Sort a single-element array
        input = {1};
        output = quickSort.sort(input);
        assertArrayEquals(output, input, "Single-element array should be sorted");

        // Test case 3: Sort an array with multiple elements
        input = {5, 2, 8, 3, 1, 6};
        output = quickSort.sort(input);
        assertArrayEquals(output, new int[] {1, 2, 3, 5, 6, 8}, "Multi-element array should be sorted");
    }
}


No.10 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    @Test
    public void sortTest() {
        // Test an empty array
        int[] input = new int[0];
        int[] expectedOutput = new int[0];
        int[] actualOutput = QuickSort.sort(input);
        assertArrayEquals(expectedOutput, actualOutput);

        // Test a single-element array
        input = new int[]{5};
        expectedOutput = new int[]{5};
        actualOutput = QuickSort.sort(input);
        assertArrayEquals(expectedOutput, actualOutput);

        // Test a small array with several elements
        input = new int[]{3, 2, 1, 4};
        expectedOutput = new int[]{1, 2, 3, 4};
        actualOutput = QuickSort.sort(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }
}


