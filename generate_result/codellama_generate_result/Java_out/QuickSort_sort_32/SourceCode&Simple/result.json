{
    "project_name": "Java",
    "file_name": "QuickSort.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/sorts/QuickSort.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.sorts",
    "docstring": "/**\n     * This method implements the Generic Quick Sort\n     *\n     * @param array The array to be sorted Sorts the array in increasing order\n     */",
    "source_code": "\n@Override\npublic <T extends Comparable<T>> T[] sort(T[] array) {\n    doSort(array, 0, array.length - 1);\n    return array;\n}\n",
    "class_name": "QuickSort",
    "method_name": "sort",
    "arguments": [
        "T array"
    ],
    "generate_test": [
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        // Test empty array\n        int[] empty = {};\n        assertArrayEquals(empty, new QuickSort().sort(empty));\n        \n        // Test array with one element\n        int[] oneElement = {5};\n        assertArrayEquals(oneElement, new QuickSort().sort(oneElement));\n        \n        // Test array with multiple elements\n        int[] unsorted = {3, 2, 1, 4, 6, 8, 7, 9};\n        int[] sorted = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n        assertArrayEquals(sorted, new QuickSort().sort(unsorted));\n    }\n}",
        "\n@Test\npublic void sortTest() {\n    int[] input = new int[]{5, 3, 2, 1, 4};\n    QuickSort quickSort = new QuickSort();\n    int[] result = quickSort.sort(input);\n    \n    assertArrayEquals(new int[]{1, 2, 3, 4, 5}, result);\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        // Create an instance of the QuickSort class\n        QuickSort quickSort = new QuickSort();\n        \n        // Create an unsorted array of integers\n        int[] unsortedArray = { 4, 2, 10, 3, 5 };\n        \n        // Call the sort(T[] array) method with the unsorted array as input\n        T[] sortedArray = quickSort.sort(unsortedArray);\n        \n        // Check that the output array is sorted using the SortUtils.isSorted() method\n        assertTrue(SortUtils.isSorted(sortedArray));\n    }\n}",
        "\npackage com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        // Create an array of integers to be sorted\n        int[] arr = new int[]{3, 2, 1, 4, 5};\n\n        // Sort the array using the QuickSort algorithm\n        Integer[] result = (Integer[]) new QuickSort().sort(arr);\n\n        // Check that the array is sorted correctly\n        assertArrayEquals(result, new int[]{1, 2, 3, 4, 5});\n    }\n}\n",
        "\npublic T[] sort(T[] array) {\n    doSort(array, 0, array.length - 1);\n    return array;\n}\n",
        "\npackage com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        // Arrange\n        int[] array = new int[]{5, 2, 8, 3, 1, 6, 4};\n        QuickSort quickSort = new QuickSort();\n        \n        // Act\n        int[] sortedArray = quickSort.sort(array);\n        \n        // Assert\n        assertArrayEquals(new int[]{1, 2, 3, 4, 5, 6, 8}, sortedArray);\n    }\n}",
        "@Test\npublic void sortTest() {\n    // Create an array of integers to be sorted\n    int[] array = new int[] { 5, 2, 9, 1, 7 };\n    \n    // Sort the array using the QuickSort algorithm\n    QuickSort.sort(array);\n    \n    // Check that the array has been sorted correctly\n    assertArrayEquals(new int[] { 1, 2, 5, 7, 9 }, array);\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        int[] arr = new int[] { 3, 1, 2, 5, 7, 9 };\n        QuickSort qs = new QuickSort();\n        int[] sortedArr = qs.sort(arr);\n        assertArrayEquals(sortedArr, new int[] { 1, 2, 3, 5, 7, 9 });\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        // Test with empty array\n        int[] emptyArray = new int[0];\n        QuickSort quickSort = new QuickSort();\n        assertThrows(IllegalArgumentException.class, () -> quickSort.sort(emptyArray));\n\n        // Test with null array\n        int[] nullArray = null;\n        assertThrows(NullPointerException.class, () -> quickSort.sort(nullArray));\n\n        // Test with single element array\n        int[] singleElementArray = new int[1];\n        singleElementArray[0] = 5;\n        assertEquals(singleElementArray, quickSort.sort(singleElementArray));\n\n        // Test with multi-element array\n        int[] multiElementArray = new int[3];\n        multiElementArray[0] = 7;\n        multiElementArray[1] = 2;\n        multiElementArray[2] = 9;\n        assertEquals(multiElementArray, quickSort.sort(multiElementArray));\n    }\n}",
        "@Test\npublic void sortTest() {\n    // Create an array to be sorted\n    Integer[] arr = new Integer[] { 1, 5, 2, 3, 4 };\n    \n    // Sort the array using the QuickSort algorithm\n    QuickSort quickSort = new QuickSort();\n    Integer[] sortedArr = quickSort.sort(arr);\n    \n    // Check that the array is sorted correctly\n    assertArrayEquals(sortedArr, new Integer[] { 1, 2, 3, 4, 5 });\n}"
    ]
}