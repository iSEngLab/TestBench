{
    "project_name": "Java",
    "file_name": "QuickSort.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/sorts/QuickSort.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.sorts",
    "docstring": "/**\n     * This method implements the Generic Quick Sort\n     *\n     * @param array The array to be sorted Sorts the array in increasing order\n     */",
    "source_code": "\n@Override\npublic <T extends Comparable<T>> T[] sort(T[] array) {\n    doSort(array, 0, array.length - 1);\n    return array;\n}\n",
    "class_name": "QuickSort",
    "method_name": "sort",
    "arguments": [
        "T array"
    ],
    "generate_test": [
        "@Test\npublic void sortTest() {\n    // Arrange\n    int[] input = new int[] { 5, 2, 8, 3, 1, 6, 4 };\n    int expectedOutputLength = input.length;\n    \n    // Act\n    int[] actualOutput = QuickSortTest.sort(input);\n    \n    // Assert\n    assertEquals(expectedOutputLength, actualOutput.length);\n}",
        "\npackage com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        int[] array = {5, 2, 8, 3, 1};\n        QuickSort quickSort = new QuickSort();\n        int[] sortedArray = quickSort.sort(array);\n        assertEquals(\"Incorrect sorting\", new int[]{1, 2, 3, 5, 8}, sortedArray);\n    }\n}\n",
        "The response to the instruction would be:\n\npackage com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        int[] inputArray = new int[] {4, 2, 6, 1, 3};\n        int[] expectedOutput = new int[] {1, 2, 3, 4, 6};\n        \n        QuickSort sorter = new QuickSort();\n        int[] outputArray = sorter.sort(inputArray);\n        \n        assertArrayEquals(expectedOutput, outputArray);\n    }\n}",
        "\npackage com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] input = new Integer[] { 3, 2, 1 };\n        Integer[] expectedOutput = new Integer[] { 1, 2, 3 };\n        \n        QuickSort quickSort = new QuickSort();\n        Integer[] actualOutput = quickSort.sort(input);\n        \n        assertArrayEquals(expectedOutput, actualOutput);\n    }\n}",
        "@Test\npublic void sortTest() {\n    Integer[] arr = new Integer[]{5, 2, 8, 3, 1};\n    QuickSort<Integer> quickSort = new QuickSort<>();\n    Integer[] sortedArr = quickSort.sort(arr);\n    assertArrayEquals(new Integer[]{1, 2, 3, 5, 8}, sortedArr);\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        // Create an array of integers to be sorted\n        int[] input = new int[] { 5, 2, 8, 3, 1, 6, 4 };\n        \n        // Sort the array using the QuickSort method\n        int[] output = QuickSort.sort(input);\n        \n        // Check that the sorted array is in ascending order\n        for (int i = 0; i < output.length - 1; i++) {\n            assertTrue(output[i] <= output[i + 1]);\n        }\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        int[] array = new int[]{5, 2, 8, 3, 1};\n        int[] expectedArray = new int[]{1, 2, 3, 5, 8};\n        QuickSort quicksort = new QuickSort();\n        int[] resultArray = quicksort.sort(array);\n        assertArrayEquals(expectedArray, resultArray);\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        // Test case 1: empty array\n        int[] array = {};\n        QuickSort quickSort = new QuickSort();\n        assertArrayEquals(array, quickSort.sort(array));\n        \n        // Test case 2: single element array\n        array = new int[]{5};\n        quickSort = new QuickSort();\n        assertArrayEquals(array, quickSort.sort(array));\n        \n        // Test case 3: already sorted array\n        array = new int[]{1, 2, 3, 4, 5};\n        quickSort = new QuickSort();\n        assertArrayEquals(array, quickSort.sort(array));\n        \n        // Test case 4: reverse sorted array\n        array = new int[]{5, 4, 3, 2, 1};\n        quickSort = new QuickSort();\n        assertArrayEquals(array, quickSort.sort(array));\n    }\n}",
        "\npackage com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] inputArray = new Integer[]{10, 5, 23, 7};\n        Integer[] expectedOutput = new Integer[]{5, 7, 10, 23};\n        \n        QuickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedOutput, inputArray);\n    }\n}",
        "@Test\npublic void sortTest() {\n    // Arrange\n    Integer[] input = new Integer[] { 4, 2, 1, 3 };\n    QuickSort quickSort = new QuickSort();\n\n    // Act\n    Integer[] output = quickSort.sort(input);\n\n    // Assert\n    assertArrayEquals(new Integer[] { 1, 2, 3, 4 }, output);\n}"
    ]
}