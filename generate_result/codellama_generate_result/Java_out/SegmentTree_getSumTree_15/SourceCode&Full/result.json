{
    "project_name": "Java",
    "file_name": "SegmentTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/SegmentTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": null,
    "source_code": "/* A function to get the sum of the elements from index l to index r. This will be called\n * internally*/\nprivate int getSumTree(int start, int end, int q_start, int q_end, int seg_index) {\n    if (q_start <= start && q_end >= end) {\n        return this.seg_t[seg_index];\n    }\n\n    if (q_start > end || q_end < start) {\n        return 0;\n    }\n\n    int mid = start + (end - start) / 2;\n    return (getSumTree(start, mid, q_start, q_end, seg_index * 2 + 1) + getSumTree(mid + 1, end, q_start, q_end, seg_index * 2 + 2));\n}\n",
    "class_name": "SegmentTree",
    "method_name": "getSumTree",
    "arguments": [
        "int start",
        "int end",
        "int q_start",
        "int q_end",
        "int seg_index"
    ],
    "generate_test": [
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree tree = new SegmentTree(5, new int[] {1, 2, 3, 4, 5});\n    assertEquals(tree.getSumTree(0, 4, 0, 4), 15);\n}",
        "@Test\npublic void getSumTreeTest() {\n    int[] arr = new int[]{1, 2, 3, 4, 5};\n    SegmentTree tree = new SegmentTree(arr.length, arr);\n    \n    // Test the sum of a single element\n    assertEquals(tree.getSumTree(0, 0, 0, 0, 0), 1);\n    \n    // Test the sum of a range of elements\n    assertEquals(tree.getSumTree(0, 4, 0, 3, 0), 10);\n}",
        "The `getSumTree` method is used to calculate the sum of elements in a subarray of an array represented as a segment tree. The method takes in four parameters: `start`, `end`, `q_start`, and `q_end`. These parameters represent the start and end indices of the subarray, as well as the query start and end indices.\n\nThe `getSumTree` method uses recursion to calculate the sum of elements in the subarray. It first checks if the query range overlaps with the current segment tree node by comparing the query start and end indices with the start and end indices of the current node. If the query range does not overlap, then the method returns 0.\n\nIf the query range does overlap, then the method calculates the sum of elements in the left and right child nodes of the current node by recursively calling `getSumTree` on these nodes with the appropriate indices. The method then adds the sums of the left and right child nodes to get the total sum of elements in the subarray.\n\nThe `getSumTree` method is an internal method used by other methods in the `SegmentTree` class, such as `getSum`, which calculates the sum of elements in a subarray of the original array represented as a segment tree. The `getSumTree` method is called by these other methods to calculate the sum of elements in the subarray represented as a segment tree.",
        "public int getSumTree(int start, int end, int q_start, int q_end, int seg_index) {\n    if (q_start <= start && q_end >= end) {\n        return this.seg_t[seg_index];\n    }\n\n    if (q_start > end || q_end < start) {\n        return 0;\n    }\n\n    int mid = start + (end - start) / 2;\n    return getSumTree(start, mid, q_start, q_end, seg_index * 2 + 1) + getSumTree(mid + 1, end, q_start, q_end, seg_index * 2 + 2);\n}",
        "The `getSumTree` function is used to calculate the sum of all elements in a given range. It takes four parameters, `start`, `end`, `q_start`, and `q_end`, which represent the starting index, ending index, query starting index, and query ending index respectively. The function first checks if the query range overlaps with the current node's range by checking if `q_start <= start && q_end >= end`. If there is no overlap, the function returns 0.\n\nIf there is an overlap, the function calculates the midpoint of the current node's range and recursively calls itself on the left and right child nodes with the updated ranges and indices. The returned values from the recursive calls are then added together to get the final sum for the current node.\n\nThe `getSumTree` function is used in the `getSum` method of the `SegmentTree` class, which takes two parameters, `start` and `end`, which represent the starting index and ending index respectively. The method first checks if the query range is valid by checking if `start < 0 || end > n || start > end`. If the query range is invalid, the method returns 0.\n\nOtherwise, it calls the `getSumTree` function with the appropriate parameters and returns the result.",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n    @Test\n    public void getSumTreeTest() {\n        int[] arr = new int[]{1, 2, 3, 4, 5};\n        SegmentTree tree = new SegmentTree(arr);\n        \n        assertEquals(tree.getSumTree(0, arr.length - 1, 0, arr.length - 1, 0), 15);\n    }\n}",
        "@Test\npublic void getSumTreeTest() {\n    int[] arr = new int[] {1, 2, 3, 4, 5};\n    SegmentTree tree = new SegmentTree(arr.length, arr);\n\n    assertEquals(tree.getSumTree(0, 4, 0, 4, 0), 15);\n}",
        "int start = 0;\nint end = arr.length - 1;\nint q_start = 2;\nint q_end = 5;\nint sum = getSumTree(start, end, q_start, q_end, 0);\nSystem.out.println(\"Sum of elements from index \" + q_start + \" to index \" + q_end + \" is: \" + sum);",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n    @Test\n    public void getSumTreeTest() {\n        // Create a new SegmentTree instance with the following array: [1, 2, 3, 4, 5]\n        int[] arr = {1, 2, 3, 4, 5};\n        SegmentTree tree = new SegmentTree(arr);\n\n        // Test that the method returns the correct sum for different ranges of indices:\n        assertEquals(tree.getSumTree(0, 0), 1);\n        assertEquals(tree.getSumTree(0, 2), 6);\n        assertEquals(tree.getSumTree(3, 4), 9);\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n    @Test\n    public void getSumTreeTest() {\n        int[] arr = new int[]{1, 2, 3, 4, 5};\n        SegmentTree st = new SegmentTree(arr.length, arr);\n        assertEquals(st.getSumTree(0, 4, 0, 4, 0), 15);\n    }\n}"
    ]
}