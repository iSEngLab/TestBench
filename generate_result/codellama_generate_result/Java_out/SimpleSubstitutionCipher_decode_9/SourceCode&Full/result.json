{
    "project_name": "Java",
    "file_name": "SimpleSubstitutionCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/SimpleSubstitutionCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Decrypt message by replacing each element with its opposite character in\n     * cipher.\n     *\n     * @return message\n     */",
    "source_code": "\npublic static String decode(String encryptedMessage, String cipherSmall) {\n    StringBuilder decoded = new StringBuilder();\n\n    Map<Character, Character> cipherMap = new HashMap<>();\n\n    char beginSmallLetter = 'a';\n    char beginCapitalLetter = 'A';\n\n    cipherSmall = cipherSmall.toLowerCase();\n    String cipherCapital = cipherSmall.toUpperCase();\n\n    for (int i = 0; i < cipherSmall.length(); i++) {\n        cipherMap.put(cipherSmall.charAt(i), beginSmallLetter++);\n        cipherMap.put(cipherCapital.charAt(i), beginCapitalLetter++);\n    }\n\n    for (int i = 0; i < encryptedMessage.length(); i++) {\n        if (Character.isAlphabetic(encryptedMessage.charAt(i))) {\n            decoded.append(cipherMap.get(encryptedMessage.charAt(i)));\n        } else {\n            decoded.append(encryptedMessage.charAt(i));\n        }\n    }\n\n    return decoded.toString();\n}\n",
    "class_name": "SimpleSubstitutionCipher",
    "method_name": "decode",
    "arguments": [
        "String encryptedMessage",
        "String cipherSmall"
    ],
    "generate_test": [
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        // Set up the test data\n        String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n        String encryptedMessage = \"zyxwvutsrqponmlkjihgfedcba\";\n        SimpleSubstitutionCipher simpleSubstitutionCipher = new SimpleSubstitutionCipher();\n\n        // Perform the decode operation\n        String decodedMessage = simpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n        // Assert that the decoded message is correct\n        assertEquals(\"expectedDecodedMessage\", decodedMessage);\n    }\n}",
        "assertEquals(\"The quick brown fox jumps over the lazy dog\", \n              SimpleSubstitutionCipher.decode(\n                  \"Gur cnffjbeq vf zl frperg qvpgvba gur pbzzrag.\", \n                  \"abcdefghijklmnopqrstuvwxyz\"));",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        // Create a hash table that maps each character in the plaintext to its corresponding encoded character\n        Map<Character, Character> cipherMap = new HashMap<>();\n        for (int i = 0; i < 26; i++) {\n            char plaintextChar = 'a' + i;\n            char ciphertextChar = 'A' + i;\n            cipherMap.put(plaintextChar, ciphertextChar);\n        }\n\n        // Create a new string variable that will contain the decoded message\n        String decodedMessage = \"\";\n\n        // Loop through each character in the encrypted message and use the hash table to look up its corresponding encoded character\n        for (int i = 0; i < 26; i++) {\n            char encryptedChar = 'A' + i;\n            char decodedChar = cipherMap.get(encryptedChar);\n            decodedMessage += decodedChar;\n        }\n\n        // Compare the resulting string to the expected output using an assertion method\n        assertEquals(\"abcdefghijklmnopqrstuvwxyz\", decodedMessage);\n    }\n}\n",
        "@Test\npublic void decodeTest() {\n    // Set up the test data\n    String encryptedMessage = \"Hello World!\";\n    String cipherSmall = \"abcd efgh ijkl mnop qrst uvwx yz\";\n    \n    // Create an instance of the SimpleSubstitutionCipher class\n    SimpleSubstitutionCipher ssc = new SimpleSubstitutionCipher();\n    \n    // Call the decode method with the test data\n    String decodedMessage = ssc.decode(encryptedMessage, cipherSmall);\n    \n    // Assert that the decoded message is correct\n    assertEquals(\"Hello World!\", decodedMessage);\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"bcd\";\n        String encryptedMessage = \"adefghijklmnopqrstuvwxyz\";\n        String decodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n        assertEquals(\"abcdefghijklmnopqrstuvwxyz\", decodedMessage);\n    }\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"The quick brown fox jumps over the lazy dog\";\n    String cipherString = \"abcdefghijklmnopqrstuvwxyz\";\n    String expectedDecodedMessage = \"Tihg srhc mjhpfd wkd gnvp hd\";\n    \n    assertEquals(expectedDecodedMessage, SimpleSubstitutionCipher.decode(encryptedMessage, cipherString));\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        String message = \"Hello World!\";\n        String cipherSmall = \"abcd...xyz\";\n        String decodedMessage = SimpleSubstitutionCipher.decode(message, cipherSmall);\n        assertEquals(\"Hellp Wrdl!\", decodedMessage);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n        String message = \"This is a test message.\";\n        String expectedDecodedMessage = \"Gur cnffjbeq vf gur ehyrf.\");\n        SimpleSubstitutionCipher cipher = new SimpleSubstitutionCipher(cipherSmall);\n        String actualDecodedMessage = cipher.decode(message, cipherSmall);\n        assertEquals(expectedDecodedMessage, actualDecodedMessage);\n    }\n}",
        "\n@Test\npublic void decodeTest() {\n    String cipherSmall = \"xyz\";\n    String encryptedMessage = SimpleSubstitutionCipher.encode(\"hello\", cipherSmall);\n    assertEquals(encryptedMessage, \"khoor\");\n}",
        "\n@Test\npublic void decodeTest() {\n    String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n    String encryptedMessage = \"zabcdefghijklmnopqrstuvwxy\";\n    String expectedDecodedMessage = \"hello world\";\n    \n    // Test case 1: Valid input\n    assertEquals(expectedDecodedMessage, SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));\n    \n    // Test case 2: Invalid input (cipher and message have different lengths)\n    encryptedMessage = \"zabcdefghijklmnopqrstuvwxy\";\n    assertThrows(IllegalArgumentException.class, () -> SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));\n    \n    // Test case 3: Boundary case (message contains only letters)\n    encryptedMessage = \"abcdefghijklmnopqrstuvwxyz\";\n    expectedDecodedMessage = \"abcdefghijklmnopqrstuvwxyz\";\n    assertEquals(expectedDecodedMessage, SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));\n}\n"
    ]
}