Source code: 


public static String decode(String encryptedMessage, String cipherSmall) {
    StringBuilder decoded = new StringBuilder();

    Map<Character, Character> cipherMap = new HashMap<>();

    char beginSmallLetter = 'a';
    char beginCapitalLetter = 'A';

    cipherSmall = cipherSmall.toLowerCase();
    String cipherCapital = cipherSmall.toUpperCase();

    for (int i = 0; i < cipherSmall.length(); i++) {
        cipherMap.put(cipherSmall.charAt(i), beginSmallLetter++);
        cipherMap.put(cipherCapital.charAt(i), beginCapitalLetter++);
    }

    for (int i = 0; i < encryptedMessage.length(); i++) {
        if (Character.isAlphabetic(encryptedMessage.charAt(i))) {
            decoded.append(cipherMap.get(encryptedMessage.charAt(i)));
        } else {
            decoded.append(encryptedMessage.charAt(i));
        }
    }

    return decoded.toString();
}



No.1 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void decodeTest() {
        // Set up the test data
        String cipherSmall = "abcdefghijklmnopqrstuvwxyz";
        String encryptedMessage = "zyxwvutsrqponmlkjihgfedcba";
        SimpleSubstitutionCipher simpleSubstitutionCipher = new SimpleSubstitutionCipher();

        // Perform the decode operation
        String decodedMessage = simpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);

        // Assert that the decoded message is correct
        assertEquals("expectedDecodedMessage", decodedMessage);
    }
}


No.2 generated result --------------------------

assertEquals("The quick brown fox jumps over the lazy dog", 
              SimpleSubstitutionCipher.decode(
                  "Gur cnffjbeq vf zl frperg qvpgvba gur pbzzrag.", 
                  "abcdefghijklmnopqrstuvwxyz"));


No.3 generated result --------------------------


import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void decodeTest() {
        // Create a hash table that maps each character in the plaintext to its corresponding encoded character
        Map<Character, Character> cipherMap = new HashMap<>();
        for (int i = 0; i < 26; i++) {
            char plaintextChar = 'a' + i;
            char ciphertextChar = 'A' + i;
            cipherMap.put(plaintextChar, ciphertextChar);
        }

        // Create a new string variable that will contain the decoded message
        String decodedMessage = "";

        // Loop through each character in the encrypted message and use the hash table to look up its corresponding encoded character
        for (int i = 0; i < 26; i++) {
            char encryptedChar = 'A' + i;
            char decodedChar = cipherMap.get(encryptedChar);
            decodedMessage += decodedChar;
        }

        // Compare the resulting string to the expected output using an assertion method
        assertEquals("abcdefghijklmnopqrstuvwxyz", decodedMessage);
    }
}



No.4 generated result --------------------------

@Test
public void decodeTest() {
    // Set up the test data
    String encryptedMessage = "Hello World!";
    String cipherSmall = "abcd efgh ijkl mnop qrst uvwx yz";
    
    // Create an instance of the SimpleSubstitutionCipher class
    SimpleSubstitutionCipher ssc = new SimpleSubstitutionCipher();
    
    // Call the decode method with the test data
    String decodedMessage = ssc.decode(encryptedMessage, cipherSmall);
    
    // Assert that the decoded message is correct
    assertEquals("Hello World!", decodedMessage);
}


No.5 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void decodeTest() {
        String cipherSmall = "bcd";
        String encryptedMessage = "adefghijklmnopqrstuvwxyz";
        String decodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);
        assertEquals("abcdefghijklmnopqrstuvwxyz", decodedMessage);
    }
}


No.6 generated result --------------------------

@Test
public void decodeTest() {
    String encryptedMessage = "The quick brown fox jumps over the lazy dog";
    String cipherString = "abcdefghijklmnopqrstuvwxyz";
    String expectedDecodedMessage = "Tihg srhc mjhpfd wkd gnvp hd";
    
    assertEquals(expectedDecodedMessage, SimpleSubstitutionCipher.decode(encryptedMessage, cipherString));
}


No.7 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void decodeTest() {
        String message = "Hello World!";
        String cipherSmall = "abcd...xyz";
        String decodedMessage = SimpleSubstitutionCipher.decode(message, cipherSmall);
        assertEquals("Hellp Wrdl!", decodedMessage);
    }
}


No.8 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void decodeTest() {
        String cipherSmall = "abcdefghijklmnopqrstuvwxyz";
        String message = "This is a test message.";
        String expectedDecodedMessage = "Gur cnffjbeq vf gur ehyrf.");
        SimpleSubstitutionCipher cipher = new SimpleSubstitutionCipher(cipherSmall);
        String actualDecodedMessage = cipher.decode(message, cipherSmall);
        assertEquals(expectedDecodedMessage, actualDecodedMessage);
    }
}


No.9 generated result --------------------------


@Test
public void decodeTest() {
    String cipherSmall = "xyz";
    String encryptedMessage = SimpleSubstitutionCipher.encode("hello", cipherSmall);
    assertEquals(encryptedMessage, "khoor");
}


No.10 generated result --------------------------


@Test
public void decodeTest() {
    String cipherSmall = "abcdefghijklmnopqrstuvwxyz";
    String encryptedMessage = "zabcdefghijklmnopqrstuvwxy";
    String expectedDecodedMessage = "hello world";
    
    // Test case 1: Valid input
    assertEquals(expectedDecodedMessage, SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));
    
    // Test case 2: Invalid input (cipher and message have different lengths)
    encryptedMessage = "zabcdefghijklmnopqrstuvwxy";
    assertThrows(IllegalArgumentException.class, () -> SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));
    
    // Test case 3: Boundary case (message contains only letters)
    encryptedMessage = "abcdefghijklmnopqrstuvwxyz";
    expectedDecodedMessage = "abcdefghijklmnopqrstuvwxyz";
    assertEquals(expectedDecodedMessage, SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));
}



