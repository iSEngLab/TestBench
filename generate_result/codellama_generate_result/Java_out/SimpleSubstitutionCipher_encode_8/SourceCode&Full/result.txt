Source code: 


public static String encode(String message, String cipherSmall) {
    StringBuilder encoded = new StringBuilder();

    // This map is used to encode
    Map<Character, Character> cipherMap = new HashMap<>();

    char beginSmallLetter = 'a';
    char beginCapitalLetter = 'A';

    cipherSmall = cipherSmall.toLowerCase();
    String cipherCapital = cipherSmall.toUpperCase();

    // To handle Small and Capital letters
    for (int i = 0; i < cipherSmall.length(); i++) {
        cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));
        cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));
    }

    for (int i = 0; i < message.length(); i++) {
        if (Character.isAlphabetic(message.charAt(i))) {
            encoded.append(cipherMap.get(message.charAt(i)));
        } else {
            encoded.append(message.charAt(i));
        }
    }

    return encoded.toString();
}



No.1 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello, World!";
    String cipherSmall = "xyzabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba";
    String expectedEncodedMessage = "Khoor, Zruog!";

    assertEquals(expectedEncodedMessage, SimpleSubstitutionCipher.encode(message, cipherSmall));
}


No.2 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        String message = "Hello World!";
        String cipherSmall = "abcdedfghijklmnopqrstuvwxyz";
        String expectedEncodedMessage = "Uryyb Jbeyq!";

        SimpleSubstitutionCipher simpleSubstitutionCipher = new SimpleSubstitutionCipher();
        String actualEncodedMessage = simpleSubstitutionCipher.encode(message, cipherSmall);

        assertEquals(expectedEncodedMessage, actualEncodedMessage);
    }
}


No.3 generated result --------------------------

@Test
public void encodeTest() {
    String plaintext = "Hello World!";
    String cipherSmall = "abcdefghijklmnopqrstuvwxyz";
    String cipherCapital = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    Map<Character, Character> cipherMap = new HashMap<>();
    
    for (int i = 0; i < cipherSmall.length(); i++) {
        cipherMap.put(cipherSmall.charAt(i), beginSmallLetter++);
        cipherMap.put(cipherCapital.charAt(i), beginCapitalLetter++);
    }
    
    StringBuilder encoded = new StringBuilder();
    for (int i = 0; i < plaintext.length(); i++) {
        if (Character.isAlphabetic(plaintext.charAt(i))) {
            encoded.append(cipherMap.get(plaintext.charAt(i)));
        } else {
            encoded.append(plaintext.charAt(i));
        }
    }
    
    assertEquals("Nczbxhz gsvf!", encoded.toString());
}


No.4 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        String message = "Hello World!";
        String cipherSmall = "abcd";
        
        // Expected result: "Elnv Dkzb!"
        String expectedEncodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);
        
        assertEquals(expectedEncodedMessage, "Elnv Dkzb!");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        String plaintext = "hello";
        String cipherKey = "1234567890"; // 10-digit key

        String encodedMessage = SimpleSubstitutionCipher.encode(plaintext, cipherKey);
        assertEquals("khoor", encodedMessage); // Check that the encoded message is correct
    }
}


No.6 generated result --------------------------


@Test
public void encodeTest() {
    String message = "Hello World!";
    String cipherSmall = "abcdefghijklmnopqrstuvwxyz";
    assertEquals("Hellow Orld!", SimpleSubstitutionCipher.encode(message, cipherSmall));
}


No.7 generated result --------------------------

@Test
public void encodeTest() {
    String message = "hello world";
    String cipherSmall = "abcdefghijklmnopqrstuvwxyz";
    String expectedEncodedMessage = "hkjnmdwvxfgqeyuiptcbzrlan";
    
    SimpleSubstitutionCipher cipher = new SimpleSubstitutionCipher();
    String actualEncodedMessage = cipher.encode(message, cipherSmall);
    
    assertEquals(expectedEncodedMessage, actualEncodedMessage);
}


No.8 generated result --------------------------

@Test
public void encodeTest() {
    String message = "hello";
    String cipherSmall = "abcdefghijklmnopqrstuvwxyz";
    String expectedOutput = "ifmmpxpsme"; // this is the expected output for "hello" with the given cipher
    
    SimpleSubstitutionCipher cipher = new SimpleSubstitutionCipher();
    String actualOutput = cipher.encode(message, cipherSmall);
    
    assertEquals(expectedOutput, actualOutput);
}


No.9 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        String input = "hello";
        String cipherSmall = "abcdefghijklmnopqrstuvwxyz";
        String expectedOutput = "ifmmp"; // calculated manually using the cipher alphabet
        
        SimpleSubstitutionCipher instance = new SimpleSubstitutionCipher();
        String actualOutput = instance.encode(input, cipherSmall);
        
        assertEquals(expectedOutput, actualOutput);
    }
}


No.10 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        String message = "Hello World!";
        String cipherSmall = "abcdefghijklmnopqrstuvwxyz";
        String encoded = SimpleSubstitutionCipher.encode(message, cipherSmall);
        
        assertEquals("Ifmmp Xpsme!", encoded);
    }
}


