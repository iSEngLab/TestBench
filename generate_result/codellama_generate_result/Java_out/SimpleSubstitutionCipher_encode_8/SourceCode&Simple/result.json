{
    "project_name": "Java",
    "file_name": "SimpleSubstitutionCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/SimpleSubstitutionCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Encrypt text by replacing each element with its opposite character.\n     *\n     * @return Encrypted message\n     */",
    "source_code": "\npublic static String encode(String message, String cipherSmall) {\n    StringBuilder encoded = new StringBuilder();\n\n    // This map is used to encode\n    Map<Character, Character> cipherMap = new HashMap<>();\n\n    char beginSmallLetter = 'a';\n    char beginCapitalLetter = 'A';\n\n    cipherSmall = cipherSmall.toLowerCase();\n    String cipherCapital = cipherSmall.toUpperCase();\n\n    // To handle Small and Capital letters\n    for (int i = 0; i < cipherSmall.length(); i++) {\n        cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));\n        cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));\n    }\n\n    for (int i = 0; i < message.length(); i++) {\n        if (Character.isAlphabetic(message.charAt(i))) {\n            encoded.append(cipherMap.get(message.charAt(i)));\n        } else {\n            encoded.append(message.charAt(i));\n        }\n    }\n\n    return encoded.toString();\n}\n",
    "class_name": "SimpleSubstitutionCipher",
    "method_name": "encode",
    "arguments": [
        "String message",
        "String cipherSmall"
    ],
    "generate_test": [
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String message = \"hello world\";\n        String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n        \n        String encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);\n        assertEquals(\"ifmmp xpsme\", encodedMessage);\n    }\n}",
        "\npackage com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String cipherSmall = \"hello\";\n        String message = \"This is a test.\";\n        String expectedEncodedMessage = \"Gur sber bs gur grfg.\";\n        \n        SimpleSubstitutionCipher simpleSubstitutionCipher = new SimpleSubstitutionCipher();\n        String actualEncodedMessage = simpleSubstitutionCipher.encode(message, cipherSmall);\n        \n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        SimpleSubstitutionCipher cipher = new SimpleSubstitutionCipher();\n        \n        // Test 1: \"hello\" -> \"khoor\"\n        String input = \"hello\";\n        String expectedOutput = \"khoor\";\n        assertEquals(expectedOutput, cipher.encode(input));\n        \n        // Test 2: \"this is a test\" -> \"gdkv f vftb\"\n        input = \"this is a test\";\n        expectedOutput = \"gdkv f vftb\";\n        assertEquals(expectedOutput, cipher.encode(input));\n    }\n}\n",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String message = \"This is a test message\";\n        String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n        String expectedEncodedMessage = \"qwertyuiopasdfghjklzxcvbnm\";\n        \n        // Test that the method returns the correct encoded message\n        assertEquals(expectedEncodedMessage, SimpleSubstitutionCipher.encode(message, cipherSmall));\n        \n        // Test that the method throws an exception when given an invalid input\n        String emptyString = \"\";\n        String nullInput = null;\n        assertThrows(IllegalArgumentException.class, () -> {\n            SimpleSubstitutionCipher.encode(emptyString, cipherSmall);\n            SimpleSubstitutionCipher.encode(nullInput, cipherSmall);\n        });\n    }\n}",
        "@Test\npublic void encodeTest() {\n    String message = \"Hello World!\";\n    String cipherSmall = \"xyzabcdefghijklmnopqrstuvwxy\";\n    String encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);\n    assertEquals(\"Xyzcdefghijklmnoqrstuvwxy!\", encodedMessage);\n}",
        "\npackage com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String message = \"Hello World\";\n        String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n        String expectedResult = \"ifmmp xpsme\";\n\n        SimpleSubstitutionCipher cipher = new SimpleSubstitutionCipher();\n        String actualResult = cipher.encode(message, cipherSmall);\n\n        assertEquals(expectedResult, actualResult);\n    }\n}",
        "@Test\npublic void encodeTest() {\n    // Test with empty string\n    String message = \"\";\n    String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n    assertEquals(\"\", SimpleSubstitutionCipher.encode(message, cipherSmall));\n\n    // Test with one-letter strings\n    message = \"a\";\n    assertEquals(\"b\", SimpleSubstitutionCipher.encode(message, cipherSmall));\n\n    message = \"z\";\n    assertEquals(\"y\", SimpleSubstitutionCipher.encode(message, cipherSmall));\n\n    // Test with multiple-letter strings\n    message = \"hello\";\n    assertEquals(\"ifmmp\", SimpleSubstitutionCipher.encode(message, cipherSmall));\n\n    message = \"world\";\n    assertEquals(\"xbtoh\", SimpleSubstitutionCipher.encode(message, cipherSmall));\n\n    // Test with invalid input\n    message = null;\n    assertThrows(NullPointerException.class, () -> SimpleSubstitutionCipher.encode(message, cipherSmall));\n\n    message = \" \";\n    assertThrows(IllegalArgumentException.class, () -> SimpleSubstitutionCipher.encode(message, cipherSmall));\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String message = \"Hello World!\";\n        String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n\n        String encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);\n\n        assertEquals(\"Ifmmp Xpsme!\", encodedMessage);\n    }\n}",
        "\npackage com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String message = \"Hello World!\";\n        String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n        String expectedEncodedMessage = \"Ifmmp Xpsme!\";\n\n        SimpleSubstitutionCipher simpleSubstitutionCipher = new SimpleSubstitutionCipher();\n        String actualEncodedMessage = simpleSubstitutionCipher.encode(message, cipherSmall);\n\n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String message = \"Hello World!\";\n        String cipherSmall = \"xyzabcdefghijklmnopqrstuvwxyz\";\n        assertEquals(\"hijqvwlpmnrcsozftydgxkue\", SimpleSubstitutionCipher.encode(message, cipherSmall));\n    }\n}"
    ]
}