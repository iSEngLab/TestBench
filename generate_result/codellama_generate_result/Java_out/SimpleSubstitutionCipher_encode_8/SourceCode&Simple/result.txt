Source code: 


public static String encode(String message, String cipherSmall) {
    StringBuilder encoded = new StringBuilder();

    // This map is used to encode
    Map<Character, Character> cipherMap = new HashMap<>();

    char beginSmallLetter = 'a';
    char beginCapitalLetter = 'A';

    cipherSmall = cipherSmall.toLowerCase();
    String cipherCapital = cipherSmall.toUpperCase();

    // To handle Small and Capital letters
    for (int i = 0; i < cipherSmall.length(); i++) {
        cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));
        cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));
    }

    for (int i = 0; i < message.length(); i++) {
        if (Character.isAlphabetic(message.charAt(i))) {
            encoded.append(cipherMap.get(message.charAt(i)));
        } else {
            encoded.append(message.charAt(i));
        }
    }

    return encoded.toString();
}



No.1 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        String message = "hello world";
        String cipherSmall = "abcdefghijklmnopqrstuvwxyz";
        
        String encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);
        assertEquals("ifmmp xpsme", encodedMessage);
    }
}


No.2 generated result --------------------------


package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        String cipherSmall = "hello";
        String message = "This is a test.";
        String expectedEncodedMessage = "Gur sber bs gur grfg.";
        
        SimpleSubstitutionCipher simpleSubstitutionCipher = new SimpleSubstitutionCipher();
        String actualEncodedMessage = simpleSubstitutionCipher.encode(message, cipherSmall);
        
        assertEquals(expectedEncodedMessage, actualEncodedMessage);
    }
}


No.3 generated result --------------------------


import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        SimpleSubstitutionCipher cipher = new SimpleSubstitutionCipher();
        
        // Test 1: "hello" -> "khoor"
        String input = "hello";
        String expectedOutput = "khoor";
        assertEquals(expectedOutput, cipher.encode(input));
        
        // Test 2: "this is a test" -> "gdkv f vftb"
        input = "this is a test";
        expectedOutput = "gdkv f vftb";
        assertEquals(expectedOutput, cipher.encode(input));
    }
}



No.4 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        String message = "This is a test message";
        String cipherSmall = "abcdefghijklmnopqrstuvwxyz";
        String expectedEncodedMessage = "qwertyuiopasdfghjklzxcvbnm";
        
        // Test that the method returns the correct encoded message
        assertEquals(expectedEncodedMessage, SimpleSubstitutionCipher.encode(message, cipherSmall));
        
        // Test that the method throws an exception when given an invalid input
        String emptyString = "";
        String nullInput = null;
        assertThrows(IllegalArgumentException.class, () -> {
            SimpleSubstitutionCipher.encode(emptyString, cipherSmall);
            SimpleSubstitutionCipher.encode(nullInput, cipherSmall);
        });
    }
}


No.5 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello World!";
    String cipherSmall = "xyzabcdefghijklmnopqrstuvwxy";
    String encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);
    assertEquals("Xyzcdefghijklmnoqrstuvwxy!", encodedMessage);
}


No.6 generated result --------------------------


package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        String message = "Hello World";
        String cipherSmall = "abcdefghijklmnopqrstuvwxyz";
        String expectedResult = "ifmmp xpsme";

        SimpleSubstitutionCipher cipher = new SimpleSubstitutionCipher();
        String actualResult = cipher.encode(message, cipherSmall);

        assertEquals(expectedResult, actualResult);
    }
}


No.7 generated result --------------------------

@Test
public void encodeTest() {
    // Test with empty string
    String message = "";
    String cipherSmall = "abcdefghijklmnopqrstuvwxyz";
    assertEquals("", SimpleSubstitutionCipher.encode(message, cipherSmall));

    // Test with one-letter strings
    message = "a";
    assertEquals("b", SimpleSubstitutionCipher.encode(message, cipherSmall));

    message = "z";
    assertEquals("y", SimpleSubstitutionCipher.encode(message, cipherSmall));

    // Test with multiple-letter strings
    message = "hello";
    assertEquals("ifmmp", SimpleSubstitutionCipher.encode(message, cipherSmall));

    message = "world";
    assertEquals("xbtoh", SimpleSubstitutionCipher.encode(message, cipherSmall));

    // Test with invalid input
    message = null;
    assertThrows(NullPointerException.class, () -> SimpleSubstitutionCipher.encode(message, cipherSmall));

    message = " ";
    assertThrows(IllegalArgumentException.class, () -> SimpleSubstitutionCipher.encode(message, cipherSmall));
}


No.8 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        String message = "Hello World!";
        String cipherSmall = "abcdefghijklmnopqrstuvwxyz";

        String encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);

        assertEquals("Ifmmp Xpsme!", encodedMessage);
    }
}


No.9 generated result --------------------------


package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        String message = "Hello World!";
        String cipherSmall = "abcdefghijklmnopqrstuvwxyz";
        String expectedEncodedMessage = "Ifmmp Xpsme!";

        SimpleSubstitutionCipher simpleSubstitutionCipher = new SimpleSubstitutionCipher();
        String actualEncodedMessage = simpleSubstitutionCipher.encode(message, cipherSmall);

        assertEquals(expectedEncodedMessage, actualEncodedMessage);
    }
}


No.10 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        String message = "Hello World!";
        String cipherSmall = "xyzabcdefghijklmnopqrstuvwxyz";
        assertEquals("hijqvwlpmnrcsozftydgxkue", SimpleSubstitutionCipher.encode(message, cipherSmall));
    }
}


