{
    "project_name": "Java",
    "file_name": "SimpleSubstitutionCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/SimpleSubstitutionCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Encrypt text by replacing each element with its opposite character.\n     *\n     * @return Encrypted message\n     */",
    "source_code": "\npublic static String encode(String message, String cipherSmall) {\n    StringBuilder encoded = new StringBuilder();\n\n    // This map is used to encode\n    Map<Character, Character> cipherMap = new HashMap<>();\n\n    char beginSmallLetter = 'a';\n    char beginCapitalLetter = 'A';\n\n    cipherSmall = cipherSmall.toLowerCase();\n    String cipherCapital = cipherSmall.toUpperCase();\n\n    // To handle Small and Capital letters\n    for (int i = 0; i < cipherSmall.length(); i++) {\n        cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));\n        cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));\n    }\n\n    for (int i = 0; i < message.length(); i++) {\n        if (Character.isAlphabetic(message.charAt(i))) {\n            encoded.append(cipherMap.get(message.charAt(i)));\n        } else {\n            encoded.append(message.charAt(i));\n        }\n    }\n\n    return encoded.toString();\n}\n",
    "class_name": "SimpleSubstitutionCipher",
    "method_name": "encode",
    "arguments": [
        "String message",
        "String cipherSmall"
    ],
    "generate_test": [
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String message = \"hello world\";\n        String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n        String expectedOutput = \"ifmmp xpsme\"; // The encoded string\n\n        assertEquals(expectedOutput, SimpleSubstitutionCipher.encode(message, cipherSmall));\n    }\n}",
        "\npackage com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String message = \"hello world\";\n        String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n        \n        assertEquals(SimpleSubstitutionCipher.encode(message, cipherSmall), \"ifmmp xpsme\");\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String message = \"hello world\";\n        String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n        String expectedResult = \"hfzlxvwlrqektmjdsbdfc\";\n\n        assertEquals(expectedResult, SimpleSubstitutionCipher.encode(message, cipherSmall));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String message = \"Hello World\";\n        String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n        String expected = \"Ifmmp Xpsme\";\n        assertEquals(expected, SimpleSubstitutionCipher.encode(message, cipherSmall));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String message = \"Hello World!\";\n        String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n        assertEquals(\"encode(message, cipherSmall)\", \"Ifmmp Xpsme!\");\n        \n        String cipherCapital = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        assertEquals(\"encode(message, cipherCapital)\", \"IFMMP XPSME!\");\n    }\n}",
        "@Test\npublic void encodeTest() {\n    String input = \"Hello World!\";\n    String expectedOutput = \"Jgnnq Yqtnf!\"; // This is the encoded output for \"Hello World!\" using the cipher \"abcdefghijklmnopqrstuvwxyz\"\n    assertEquals(expectedOutput, SimpleSubstitutionCipher.encode(input, \"abcdefghijklmnopqrstuvwxyz\"));\n}",
        "\npackage com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String message = \"Hello World\";\n        String cipherSmall = \"hello world\";\n        String expectedOutput = \"Hillo Wurld\";\n\n        assertEquals(expectedOutput, SimpleSubstitutionCipher.encode(message, cipherSmall));\n    }\n}",
        "\npackage com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        // Test that the input strings are not null and have the correct length\n        assertNotNull(encode(\"hello\", \"key\"));\n        assertEquals(5, encode(\"hello\", \"key\").length());\n        \n        // Test that the encoded string is correct for a simple substitution cipher\n        String expected = \"khoor\";\n        String actual = encode(\"hello\", \"key\");\n        assertEquals(expected, actual);\n    }\n}\n",
        "\npackage com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String message = \"Hello World!\";\n        String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n        assertEquals(\"Ifmmp Xpsme!\", SimpleSubstitutionCipher.encode(message, cipherSmall));\n    }\n}",
        "\nimport com.thealgorithms.ciphers.SimpleSubstitutionCipher;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String message = \"Hello World\";\n        String cipherSmall = \"abcdefghijklmnopqrstuvwxyz\";\n        String expectedOutput = \"ifmmp xpsme\";\n        \n        assertEquals(expectedOutput, SimpleSubstitutionCipher.encode(message, cipherSmall));\n    }\n}"
    ]
}