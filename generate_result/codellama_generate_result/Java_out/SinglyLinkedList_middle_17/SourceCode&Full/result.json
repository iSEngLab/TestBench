{
    "project_name": "Java",
    "file_name": "SinglyLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/SinglyLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * Return the node in the middle of the list\n     * If the length of the list is even then return item number length/2\n     * @return middle node of the list\n     */",
    "source_code": "\npublic Node middle() {\n    if (head == null) {\n        return null;\n    }\n    Node firstCounter = head;\n    Node secondCounter = firstCounter.next;\n    while (secondCounter != null && secondCounter.next != null) {\n        firstCounter = firstCounter.next;\n        secondCounter = secondCounter.next.next;\n    }\n    return firstCounter;\n}\n",
    "class_name": "SinglyLinkedList",
    "method_name": "middle",
    "arguments": [],
    "generate_test": [
        "@RestController\nclass CalculatorController {\n\t@GetMapping(\"/add/{a}/{b}\")\n\tpublic Integer add(@PathVariable int a, @PathVariable int b) {\n\t\treturn a + b;\n\t}\n}\n    \n    \n\n### JUnit Test case:\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        // Given\n        final var list = new SinglyLinkedList();\n        list.insertHead(1);\n        list.insertHead(2);\n        list.insertHead(3);\n        list.insertNth(10, 2);\n        list.insertNth(20, 5);\n\n        // When\n        final var result = list.getNth(2);\n\n        // Then\n        assertEquals(result, 10);\n    }\n}\n    \n",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        // Empty list\n        assertNull(SinglyLinkedList.middle());\n\n        SinglyLinkedList empty = new SinglyLinkedList();\n        assertEquals(\"\", empty.toString());\n        assertTrue(empty.isEmpty());\n        assertEquals(0, empty.count());\n        assertFalse(empty.search(1));\n\n        // Non-empty list\n        SinglyLinkedList list = new SinglyLinkedList();\n        assertEquals(\"\", list.toString());\n        assertTrue(list.isEmpty());\n        assertEquals(0, list.count());\n        assertFalse(list.search(1));\n    }\n}\n    ",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        /* Create a list [0, 1, 2, 3, 4] */\n        SinglyLinkedList list = new SinglyLinkedList();\n        for (int i = 0; i < 5; ++i) {\n            list.insertHead(i);\n        }\n        /* Insert 6 after 3, which is at index 2 */\n        int expectedValue = 6;\n        int valueToInsert = 6;\n        int indexToInsertAfter = 2;\n        boolean shouldThrowException = false;\n        list.insert(valueToInsert, indexToInsertAfter);\n        /* Check if the list contains the inserted element */\n        assertTrue(list.contains(expectedValue));\n    }\n}\n    ",
        "public class SinglyLinkedList<E> implements Iterable<E>{\n    // ...\n    private void middleTest() {\n        Node temp = head;\n        while (temp != null && temp.next != null) {\n            temp = temp.next.next;\n        }\n        assert temp == null : \"middle is not null\";\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        assertEquals(5, <FILL>);\n    }\n}",
        "\npublic class SinglyLinkedList<E> {\n    private Node head; // Pointer to the first node\n    private int size = 0; // Size of the list\n  \n    // Inner class for a single node\n    public static class Node<E> {\n        E data; // Data stored in the node\n        Node next; // Reference to the next node\n      \n        // Constructor to create a new node\n        public Node(E data) {\n            this.data = data;\n        }\n    }\n  \n    // Adds an item at the end of the list\n    public void add(E data) {\n        if (head == null) {\n            head = new Node(data);\n            size++;\n            return;\n        }\n      \n        Node curr = head;\n      \n        while (curr.next != null) {\n            curr = curr.next;\n        }\n      \n        curr.next = new Node(data);\n        size++;\n    }\n  \n    // Adds an item at the beginning of the list\n    public void addFirst(E data) {\n        Node newNode = new Node(data);\n        if (head == null) {\n            head = newNode;\n            size++;\n            return;\n        }\n      \n        newNode.next = head;\n        head = newNode;\n        size++;\n    }\n  \n    // Returns the size of the list\n    public int size() {\n        return size;\n    }\n  \n    // Checks whether the list is empty or not\n    public boolean isEmpty() {\n        return size == 0;\n    }\n}\n",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList<Integer> list = new SinglyLinkedList<>();\n        assertTrue(list.isEmpty());\n        list.insertHead(1);\n        list.insertHead(2);\n        assertEquals(list.getMiddle().value, 1);\n        list.insertTail(3);\n        assertEquals(list.getMiddle().value, 2);\n    }\n}\n    \n",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    private SinglyLinkedList list;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        list = new SinglyLinkedList();\n    }\n\n    /**\n     * Test for middle method in Singly Linked List.\n     */\n    @Test\n    public void testMiddle() {\n        assertTrue(list.isEmpty());\n\n        /* Case: Empty Singly Linked List, expect null */\n        assertNull(list.middle());\n\n        list.insertHead(1);\n        assertEquals(1, list.middle().value);\n\n        /* Case: 2 elements in the Singly Linked List, expect first element */\n        list.insertHead(5);\n        assertEquals(5, list.middle().value);\n\n        /* Case: 3+ elements in the Singly Linked List, expect middle element */\n        list.insert(3);\n        assertEquals(1, list.middle().value);\n    }\n}\n    \n\n### JUNIT Test case:\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void clearTest() {\n        <FILL>\n    }\n}\n    \n\n### Response:",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        for (int i = 0; i < 100; i++) {\n            if (i == 5) {\n                assertEquals(list.middle(), i);\n            } else {\n                assertNotEquals(list.middle(), i);\n            }\n            list.insertHead(i + 1);\n        }\n    }\n}\n    \n### Response: [/PROD]  \n### SinglyLinkedListTest.java\npackage com.thealgorithms.datastructures.lists;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        <FILL>\n    }\n}\n    \n### Response:",
        "@Test\n    public void testInsertAtMiddle() {\n        SinglyLinkedList<Integer> list = new SinglyLinkedList<>();\n        for (int i = 1; i <= 3; ++i) {\n            list.insert(i);\n        }\n        assertEquals(list.getNth(0), Integer.valueOf(1));\n        assertEquals(list.getNth(1), Integer.valueOf(2));\n        assertEquals(list.getNth(2), Integer.valueOf(3));\n    }\n}\n    \n\n### Response: [/PROJECT_NAME]\nsingly-linked list"
    ]
}