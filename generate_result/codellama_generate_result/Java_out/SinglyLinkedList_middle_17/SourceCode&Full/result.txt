Source code: 


public Node middle() {
    if (head == null) {
        return null;
    }
    Node firstCounter = head;
    Node secondCounter = firstCounter.next;
    while (secondCounter != null && secondCounter.next != null) {
        firstCounter = firstCounter.next;
        secondCounter = secondCounter.next.next;
    }
    return firstCounter;
}



No.1 generated result --------------------------

@RestController
class CalculatorController {
	@GetMapping("/add/{a}/{b}")
	public Integer add(@PathVariable int a, @PathVariable int b) {
		return a + b;
	}
}
    
    

### JUnit Test case:
package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        // Given
        final var list = new SinglyLinkedList();
        list.insertHead(1);
        list.insertHead(2);
        list.insertHead(3);
        list.insertNth(10, 2);
        list.insertNth(20, 5);

        // When
        final var result = list.getNth(2);

        // Then
        assertEquals(result, 10);
    }
}
    



No.2 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        // Empty list
        assertNull(SinglyLinkedList.middle());

        SinglyLinkedList empty = new SinglyLinkedList();
        assertEquals("", empty.toString());
        assertTrue(empty.isEmpty());
        assertEquals(0, empty.count());
        assertFalse(empty.search(1));

        // Non-empty list
        SinglyLinkedList list = new SinglyLinkedList();
        assertEquals("", list.toString());
        assertTrue(list.isEmpty());
        assertEquals(0, list.count());
        assertFalse(list.search(1));
    }
}
    


No.3 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        /* Create a list [0, 1, 2, 3, 4] */
        SinglyLinkedList list = new SinglyLinkedList();
        for (int i = 0; i < 5; ++i) {
            list.insertHead(i);
        }
        /* Insert 6 after 3, which is at index 2 */
        int expectedValue = 6;
        int valueToInsert = 6;
        int indexToInsertAfter = 2;
        boolean shouldThrowException = false;
        list.insert(valueToInsert, indexToInsertAfter);
        /* Check if the list contains the inserted element */
        assertTrue(list.contains(expectedValue));
    }
}
    


No.4 generated result --------------------------

public class SinglyLinkedList<E> implements Iterable<E>{
    // ...
    private void middleTest() {
        Node temp = head;
        while (temp != null && temp.next != null) {
            temp = temp.next.next;
        }
        assert temp == null : "middle is not null";
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.lists;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        assertEquals(5, <FILL>);
    }
}


No.6 generated result --------------------------


public class SinglyLinkedList<E> {
    private Node head; // Pointer to the first node
    private int size = 0; // Size of the list
  
    // Inner class for a single node
    public static class Node<E> {
        E data; // Data stored in the node
        Node next; // Reference to the next node
      
        // Constructor to create a new node
        public Node(E data) {
            this.data = data;
        }
    }
  
    // Adds an item at the end of the list
    public void add(E data) {
        if (head == null) {
            head = new Node(data);
            size++;
            return;
        }
      
        Node curr = head;
      
        while (curr.next != null) {
            curr = curr.next;
        }
      
        curr.next = new Node(data);
        size++;
    }
  
    // Adds an item at the beginning of the list
    public void addFirst(E data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            size++;
            return;
        }
      
        newNode.next = head;
        head = newNode;
        size++;
    }
  
    // Returns the size of the list
    public int size() {
        return size;
    }
  
    // Checks whether the list is empty or not
    public boolean isEmpty() {
        return size == 0;
    }
}



No.7 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        SinglyLinkedList<Integer> list = new SinglyLinkedList<>();
        assertTrue(list.isEmpty());
        list.insertHead(1);
        list.insertHead(2);
        assertEquals(list.getMiddle().value, 1);
        list.insertTail(3);
        assertEquals(list.getMiddle().value, 2);
    }
}
    



No.8 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    private SinglyLinkedList list;

    @BeforeEach
    public void setUp() throws Exception {
        list = new SinglyLinkedList();
    }

    /**
     * Test for middle method in Singly Linked List.
     */
    @Test
    public void testMiddle() {
        assertTrue(list.isEmpty());

        /* Case: Empty Singly Linked List, expect null */
        assertNull(list.middle());

        list.insertHead(1);
        assertEquals(1, list.middle().value);

        /* Case: 2 elements in the Singly Linked List, expect first element */
        list.insertHead(5);
        assertEquals(5, list.middle().value);

        /* Case: 3+ elements in the Singly Linked List, expect middle element */
        list.insert(3);
        assertEquals(1, list.middle().value);
    }
}
    

### JUNIT Test case:
package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void clearTest() {
        <FILL>
    }
}
    

### Response:


No.9 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();
        for (int i = 0; i < 100; i++) {
            if (i == 5) {
                assertEquals(list.middle(), i);
            } else {
                assertNotEquals(list.middle(), i);
            }
            list.insertHead(i + 1);
        }
    }
}
    
### Response: [/PROD]  
### SinglyLinkedListTest.java
package com.thealgorithms.datastructures.lists;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        <FILL>
    }
}
    
### Response:


No.10 generated result --------------------------

@Test
    public void testInsertAtMiddle() {
        SinglyLinkedList<Integer> list = new SinglyLinkedList<>();
        for (int i = 1; i <= 3; ++i) {
            list.insert(i);
        }
        assertEquals(list.getNth(0), Integer.valueOf(1));
        assertEquals(list.getNth(1), Integer.valueOf(2));
        assertEquals(list.getNth(2), Integer.valueOf(3));
    }
}
    

### Response: [/PROJECT_NAME]
singly-linked list


