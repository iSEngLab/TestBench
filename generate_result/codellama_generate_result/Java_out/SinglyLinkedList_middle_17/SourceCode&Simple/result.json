{
    "project_name": "Java",
    "file_name": "SinglyLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/SinglyLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * Return the node in the middle of the list\n     * If the length of the list is even then return item number length/2\n     * @return middle node of the list\n     */",
    "source_code": "\npublic Node middle() {\n    if (head == null) {\n        return null;\n    }\n    Node firstCounter = head;\n    Node secondCounter = firstCounter.next;\n    while (secondCounter != null && secondCounter.next != null) {\n        firstCounter = firstCounter.next;\n        secondCounter = secondCounter.next.next;\n    }\n    return firstCounter;\n}\n",
    "class_name": "SinglyLinkedList",
    "method_name": "middle",
    "arguments": [],
    "generate_test": [
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        // Create a singly linked list with 5 nodes\n        SinglyLinkedList list = new SinglyLinkedList();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        list.add(5);\n\n        // Test that the middle node is returned correctly\n        Node expectedMiddle = list.getNodeAtPosition(3);\n        assertEquals(expectedMiddle, list.middle());\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        // Test case 1: Empty list\n        SinglyLinkedList list = new SinglyLinkedList();\n        assertNull(list.middle());\n        \n        // Test case 2: Single node\n        list.insertHead(1);\n        assertEquals(list.head, list.middle());\n        \n        // Test case 3: Multiple nodes\n        list.insertNth(2, 1);\n        list.insertNth(3, 2);\n        list.insertNth(4, 3);\n        list.insertNth(5, 4);\n        assertEquals(list.getNth(2), list.middle());\n    }\n}",
        "\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        \n        // Test case 1: Empty list\n        assertNull(list.middle());\n        \n        // Test case 2: Single node\n        list.insertHead(5);\n        assertEquals(5, list.middle().value);\n        \n        // Test case 3: Odd number of nodes\n        list.insertNth(10, 2);\n        list.insertNth(15, 4);\n        assertEquals(10, list.middle().value);\n        \n        // Test case 4: Even number of nodes\n        list.insertHead(8);\n        list.insertHead(3);\n        assertEquals(3, list.middle().value);\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        // Empty list\n        SinglyLinkedList<Integer> list = new SinglyLinkedList<>();\n        assertNull(list.middle());\n\n        // Single node list\n        list.addFirst(1);\n        assertEquals(list.getHead(), list.middle());\n\n        // Even number of nodes\n        list.addLast(2);\n        list.addLast(3);\n        list.addLast(4);\n        assertEquals(2, list.middle().value);\n\n        // Odd number of nodes\n        list.addLast(5);\n        assertEquals(2, list.middle().value);\n    }\n}",
        "@Test\npublic void middleTest() {\n    // Create a singly linked list with 4 nodes\n    SinglyLinkedList<Integer> list = new SinglyLinkedList<>();\n    list.insert(1);\n    list.insert(2);\n    list.insert(3);\n    list.insert(4);\n    \n    // Get the middle node of the list\n    Node middleNode = list.middle();\n    \n    // Verify that the middle node is the third node in the list\n    assertEquals(list.getHead().next.value, 3);\n}",
        "\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        Node head = new Node(1);\n        head.next = new Node(2);\n        head.next.next = new Node(3);\n        head.next.next.next = new Node(4);\n        head.next.next.next.next = new Node(5);\n        list.setHead(head);\n        \n        Node result = list.middle();\n        \n        assertEquals(result.value, 3);\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        // Create a new instance of SinglyLinkedList\n        SinglyLinkedList list = new SinglyLinkedList();\n        \n        // Test the middle method with an empty list\n        assertNull(list.middle());\n        \n        // Add some nodes to the list\n        Node node1 = new Node(1);\n        Node node2 = new Node(2);\n        Node node3 = new Node(3);\n        Node node4 = new Node(4);\n        Node node5 = new Node(5);\n        \n        // Add nodes to the list\n        list.insertHead(node1);\n        list.insertHead(node2);\n        list.insertHead(node3);\n        list.insertHead(node4);\n        list.insertHead(node5);\n        \n        // Test the middle method with a non-empty list\n        assertEquals(list.middle(), node3);\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        Node head = new Node(1);\n        head.next = new Node(2);\n        head.next.next = new Node(3);\n        head.next.next.next = new Node(4);\n        head.next.next.next.next = new Node(5);\n        list.setHead(head);\n        \n        assertEquals(list.middle().value, 3);\n    }\n}",
        "\n@Test\npublic void middleTest() {\n    // Create a linked list with 5 nodes\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.insertHead(1);\n    list.insertNth(2, 0);\n    list.insertNth(3, 1);\n    list.insertNth(4, 2);\n    list.insertTail(5);\n    \n    // Check that the middle node is returned correctly\n    assertEquals(list.middle(), new Node(3));\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        // Test case 1: List is empty\n        SinglyLinkedList list = new SinglyLinkedList();\n        assertEquals(list.middle(), null);\n\n        // Test case 2: List has one element\n        list.insertHead(10);\n        assertEquals(list.middle().value, 10);\n\n        // Test case 3: List has multiple elements\n        list.insert(20);\n        list.insert(30);\n        list.insert(40);\n        assertEquals(list.middle().value, 20);\n    }\n}"
    ]
}