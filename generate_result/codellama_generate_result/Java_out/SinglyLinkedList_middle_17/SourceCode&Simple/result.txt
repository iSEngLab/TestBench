Source code: 


public Node middle() {
    if (head == null) {
        return null;
    }
    Node firstCounter = head;
    Node secondCounter = firstCounter.next;
    while (secondCounter != null && secondCounter.next != null) {
        firstCounter = firstCounter.next;
        secondCounter = secondCounter.next.next;
    }
    return firstCounter;
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        // Create a singly linked list with 5 nodes
        SinglyLinkedList list = new SinglyLinkedList();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);

        // Test that the middle node is returned correctly
        Node expectedMiddle = list.getNodeAtPosition(3);
        assertEquals(expectedMiddle, list.middle());
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        // Test case 1: Empty list
        SinglyLinkedList list = new SinglyLinkedList();
        assertNull(list.middle());
        
        // Test case 2: Single node
        list.insertHead(1);
        assertEquals(list.head, list.middle());
        
        // Test case 3: Multiple nodes
        list.insertNth(2, 1);
        list.insertNth(3, 2);
        list.insertNth(4, 3);
        list.insertNth(5, 4);
        assertEquals(list.getNth(2), list.middle());
    }
}


No.3 generated result --------------------------


package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();
        
        // Test case 1: Empty list
        assertNull(list.middle());
        
        // Test case 2: Single node
        list.insertHead(5);
        assertEquals(5, list.middle().value);
        
        // Test case 3: Odd number of nodes
        list.insertNth(10, 2);
        list.insertNth(15, 4);
        assertEquals(10, list.middle().value);
        
        // Test case 4: Even number of nodes
        list.insertHead(8);
        list.insertHead(3);
        assertEquals(3, list.middle().value);
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        // Empty list
        SinglyLinkedList<Integer> list = new SinglyLinkedList<>();
        assertNull(list.middle());

        // Single node list
        list.addFirst(1);
        assertEquals(list.getHead(), list.middle());

        // Even number of nodes
        list.addLast(2);
        list.addLast(3);
        list.addLast(4);
        assertEquals(2, list.middle().value);

        // Odd number of nodes
        list.addLast(5);
        assertEquals(2, list.middle().value);
    }
}


No.5 generated result --------------------------

@Test
public void middleTest() {
    // Create a singly linked list with 4 nodes
    SinglyLinkedList<Integer> list = new SinglyLinkedList<>();
    list.insert(1);
    list.insert(2);
    list.insert(3);
    list.insert(4);
    
    // Get the middle node of the list
    Node middleNode = list.middle();
    
    // Verify that the middle node is the third node in the list
    assertEquals(list.getHead().next.value, 3);
}


No.6 generated result --------------------------


package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);
        list.setHead(head);
        
        Node result = list.middle();
        
        assertEquals(result.value, 3);
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        // Create a new instance of SinglyLinkedList
        SinglyLinkedList list = new SinglyLinkedList();
        
        // Test the middle method with an empty list
        assertNull(list.middle());
        
        // Add some nodes to the list
        Node node1 = new Node(1);
        Node node2 = new Node(2);
        Node node3 = new Node(3);
        Node node4 = new Node(4);
        Node node5 = new Node(5);
        
        // Add nodes to the list
        list.insertHead(node1);
        list.insertHead(node2);
        list.insertHead(node3);
        list.insertHead(node4);
        list.insertHead(node5);
        
        // Test the middle method with a non-empty list
        assertEquals(list.middle(), node3);
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);
        list.setHead(head);
        
        assertEquals(list.middle().value, 3);
    }
}


No.9 generated result --------------------------


@Test
public void middleTest() {
    // Create a linked list with 5 nodes
    SinglyLinkedList list = new SinglyLinkedList();
    list.insertHead(1);
    list.insertNth(2, 0);
    list.insertNth(3, 1);
    list.insertNth(4, 2);
    list.insertTail(5);
    
    // Check that the middle node is returned correctly
    assertEquals(list.middle(), new Node(3));
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        // Test case 1: List is empty
        SinglyLinkedList list = new SinglyLinkedList();
        assertEquals(list.middle(), null);

        // Test case 2: List has one element
        list.insertHead(10);
        assertEquals(list.middle().value, 10);

        // Test case 3: List has multiple elements
        list.insert(20);
        list.insert(30);
        list.insert(40);
        assertEquals(list.middle().value, 20);
    }
}


