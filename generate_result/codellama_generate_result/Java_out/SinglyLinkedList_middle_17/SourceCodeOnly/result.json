{
    "project_name": "Java",
    "file_name": "SinglyLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/SinglyLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * Return the node in the middle of the list\n     * If the length of the list is even then return item number length/2\n     * @return middle node of the list\n     */",
    "source_code": "\npublic Node middle() {\n    if (head == null) {\n        return null;\n    }\n    Node firstCounter = head;\n    Node secondCounter = firstCounter.next;\n    while (secondCounter != null && secondCounter.next != null) {\n        firstCounter = firstCounter.next;\n        secondCounter = secondCounter.next.next;\n    }\n    return firstCounter;\n}\n",
    "class_name": "SinglyLinkedList",
    "method_name": "middle",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void middleTest() {\n    // Create a new list with three nodes\n    Node head = new Node(1);\n    head.next = new Node(2);\n    head.next.next = new Node(3);\n    \n    // Test the middle() method\n    Node result = middle(head);\n    assertEquals(result, head.next);\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        // Create a list with 3 elements: 1, 2, 3\n        Node head = new Node(1);\n        head.next = new Node(2);\n        head.next.next = new Node(3);\n\n        // Test that the middle element is returned correctly\n        assertEquals(head.next, SinglyLinkedList.middle());\n    }\n}",
        "\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        // create a list with 5 elements\n        Node head = new Node(1, null);\n        Node firstCounter = head;\n        Node secondCounter = firstCounter.next;\n        while (secondCounter != null && secondCounter.next != null) {\n            firstCounter = firstCounter.next;\n            secondCounter = secondCounter.next.next;\n        }\n        assertEquals(firstCounter, middle());\n    }\n}",
        "\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        // Set up the test data\n        Node head = new Node(1, null);\n        Node node2 = new Node(2, null);\n        Node node3 = new Node(3, null);\n        Node node4 = new Node(4, null);\n        Node node5 = new Node(5, null);\n\n        // Create a linked list with 5 nodes\n        head.next = node2;\n        node2.next = node3;\n        node3.next = node4;\n        node4.next = node5;\n\n        // Test the middle() method\n        assertEquals(head, middle());\n    }\n}",
        "\nimport com.thealgorithms.datastructures.lists.Node;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        // Create a linked list with 3 nodes: \"A\", \"B\", and \"C\"\n        Node head = new Node(\"A\");\n        head.next = new Node(\"B\");\n        head.next.next = new Node(\"C\");\n\n        // Test case 1: middle element should be \"B\"\n        assertEquals(head.middle().value, \"B\");\n\n        // Test case 2: middle element should be \"C\" when the list has an odd number of elements\n        head.next = new Node(\"D\");\n        assertEquals(head.middle().value, \"C\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        // Create a new linked list with three nodes: 1, 2, and 3\n        SinglyLinkedList<Integer> list = new SinglyLinkedList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n\n        // Verify that the middle node is returned correctly\n        assertEquals(list.middle(), 2);\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        // Create a linked list with 3 nodes\n        Node head = new Node(1, null);\n        head.next = new Node(2, null);\n        head.next.next = new Node(3, null);\n\n        // Set up the expected result\n        Node expectedMiddleNode = head.next;\n\n        // Call the middle() method on the linked list\n        Node actualMiddleNode = head.middle();\n\n        // Verify that the returned node is correct\n        assertEquals(expectedMiddleNode, actualMiddleNode);\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        // Create a new SinglyLinkedList object\n        SinglyLinkedList list = new SinglyLinkedList();\n        \n        // Add some elements to the list\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        \n        // Test that the middle element is returned correctly\n        assertEquals(list.middle(), 2);\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class SinglyLinkedListTest {\n    @Test public void middleTest() {\n        // Given\n        Node head = new Node(1, new Node(2, new Node(3, null)));\n        SinglyLinkedList list = new SinglyLinkedList();\n        list.head = head;\n        // When\n        Node result = list.middle();\n        // Then\n        assertEquals(new Node(2, null), result);\n    }\n}",
        "\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        Node firstCounter = null;\n        Node secondCounter = null;\n        // Test case 1: Empty list\n        assertNull(list.middle());\n        // Test case 2: List with only one element\n        list.addLast(new Node(1));\n        assertEquals(list.head, list.middle());\n        // Test case 3: List with more than one element\n        list.addLast(new Node(2));\n        firstCounter = list.head;\n        secondCounter = firstCounter.next;\n        while (secondCounter != null && secondCounter.next != null) {\n            firstCounter = firstCounter.next;\n            secondCounter = secondCounter.next.next;\n        }\n        assertEquals(firstCounter, list.middle());\n    }\n}\n"
    ]
}