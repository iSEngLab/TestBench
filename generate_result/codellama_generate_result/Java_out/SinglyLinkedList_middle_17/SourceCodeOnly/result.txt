Source code: 


public Node middle() {
    if (head == null) {
        return null;
    }
    Node firstCounter = head;
    Node secondCounter = firstCounter.next;
    while (secondCounter != null && secondCounter.next != null) {
        firstCounter = firstCounter.next;
        secondCounter = secondCounter.next.next;
    }
    return firstCounter;
}



No.1 generated result --------------------------

@Test
public void middleTest() {
    // Create a new list with three nodes
    Node head = new Node(1);
    head.next = new Node(2);
    head.next.next = new Node(3);
    
    // Test the middle() method
    Node result = middle(head);
    assertEquals(result, head.next);
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        // Create a list with 3 elements: 1, 2, 3
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);

        // Test that the middle element is returned correctly
        assertEquals(head.next, SinglyLinkedList.middle());
    }
}


No.3 generated result --------------------------


package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        // create a list with 5 elements
        Node head = new Node(1, null);
        Node firstCounter = head;
        Node secondCounter = firstCounter.next;
        while (secondCounter != null && secondCounter.next != null) {
            firstCounter = firstCounter.next;
            secondCounter = secondCounter.next.next;
        }
        assertEquals(firstCounter, middle());
    }
}


No.4 generated result --------------------------


package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        // Set up the test data
        Node head = new Node(1, null);
        Node node2 = new Node(2, null);
        Node node3 = new Node(3, null);
        Node node4 = new Node(4, null);
        Node node5 = new Node(5, null);

        // Create a linked list with 5 nodes
        head.next = node2;
        node2.next = node3;
        node3.next = node4;
        node4.next = node5;

        // Test the middle() method
        assertEquals(head, middle());
    }
}


No.5 generated result --------------------------


import com.thealgorithms.datastructures.lists.Node;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        // Create a linked list with 3 nodes: "A", "B", and "C"
        Node head = new Node("A");
        head.next = new Node("B");
        head.next.next = new Node("C");

        // Test case 1: middle element should be "B"
        assertEquals(head.middle().value, "B");

        // Test case 2: middle element should be "C" when the list has an odd number of elements
        head.next = new Node("D");
        assertEquals(head.middle().value, "C");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        // Create a new linked list with three nodes: 1, 2, and 3
        SinglyLinkedList<Integer> list = new SinglyLinkedList<>();
        list.add(1);
        list.add(2);
        list.add(3);

        // Verify that the middle node is returned correctly
        assertEquals(list.middle(), 2);
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        // Create a linked list with 3 nodes
        Node head = new Node(1, null);
        head.next = new Node(2, null);
        head.next.next = new Node(3, null);

        // Set up the expected result
        Node expectedMiddleNode = head.next;

        // Call the middle() method on the linked list
        Node actualMiddleNode = head.middle();

        // Verify that the returned node is correct
        assertEquals(expectedMiddleNode, actualMiddleNode);
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        // Create a new SinglyLinkedList object
        SinglyLinkedList list = new SinglyLinkedList();
        
        // Add some elements to the list
        list.add(1);
        list.add(2);
        list.add(3);
        
        // Test that the middle element is returned correctly
        assertEquals(list.middle(), 2);
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.lists;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
public class SinglyLinkedListTest {
    @Test public void middleTest() {
        // Given
        Node head = new Node(1, new Node(2, new Node(3, null)));
        SinglyLinkedList list = new SinglyLinkedList();
        list.head = head;
        // When
        Node result = list.middle();
        // Then
        assertEquals(new Node(2, null), result);
    }
}


No.10 generated result --------------------------


package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();
        Node firstCounter = null;
        Node secondCounter = null;
        // Test case 1: Empty list
        assertNull(list.middle());
        // Test case 2: List with only one element
        list.addLast(new Node(1));
        assertEquals(list.head, list.middle());
        // Test case 3: List with more than one element
        list.addLast(new Node(2));
        firstCounter = list.head;
        secondCounter = firstCounter.next;
        while (secondCounter != null && secondCounter.next != null) {
            firstCounter = firstCounter.next;
            secondCounter = secondCounter.next.next;
        }
        assertEquals(firstCounter, list.middle());
    }
}



