{
    "project_name": "Java",
    "file_name": "StackArrayList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/stacks/StackArrayList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.stacks",
    "docstring": "/**\n     * Return the element at the top of this stack without removing it from the\n     * stack.\n     *\n     * @return the element at the top of this stack.\n     */",
    "source_code": "\npublic int peek() {\n    if (isEmpty()) {\n        throw new EmptyStackException();\n    }\n    return stack.get(stack.size() - 1);\n}\n",
    "class_name": "StackArrayList",
    "method_name": "peek",
    "arguments": [],
    "generate_test": [
        "package com.thealgorithms.datastructures.stacks;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Create an instance of the stack\n        StackArrayList stack = new StackArrayList();\n        \n        // Check if the stack is empty before pushing any elements\n        assertTrue(stack.isEmpty());\n        \n        // Push some elements onto the stack\n        for (int i = 1; i <= 5; ++i) {\n            stack.push(i);\n            assertEquals(i, stack.size());\n        }\n        \n        // Check if the peek method is working correctly\n        assertEquals(5, stack.peek());\n        \n        // Pop an element from the stack and check if it's correct\n        assertEquals(5, stack.pop());\n        \n        // Check if the size of the stack is correct after popping an element\n        assertEquals(4, stack.size());\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Test Case 1: peek on empty stack\n        StackArrayList stack = new StackArrayList();\n        assertEquals(0, stack.size());\n        assertThrows(EmptyStackException.class, () -> stack.peek());\n\n        // Test Case 2: peek on non-empty stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        assertEquals(3, stack.size());\n        assertEquals(3, stack.peek());\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Create an empty stack\n        StackArrayList stack = new StackArrayList();\n\n        // Check that the stack is empty\n        assertTrue(stack.isEmpty());\n\n        // Push some elements onto the stack\n        for (int i = 1; i <= 5; ++i) {\n            stack.push(i);\n        }\n\n        // Check that the size of the stack is correct\n        assertEquals(5, stack.size());\n\n        // Peek at the element on the top of the stack\n        int peekedElement = stack.peek();\n\n        // Check that the element returned by peek() is the last element pushed onto the stack\n        assertEquals(5, peekedElement);\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Set up the stack with some values\n        StackArrayList stack = new StackArrayList();\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        \n        // Test whether peek throws an EmptyStackException when called on an empty stack\n        assertThrows(EmptyStackException.class, () -> {\n            StackArrayList emptyStack = new StackArrayList();\n            emptyStack.peek();\n        });\n        \n        // Test whether peek returns the correct value when called on a non-empty stack\n        int expectedValue = 3;\n        assertEquals(expectedValue, stack.peek());\n    }\n}",
        "@Test\npublic void peekTest() {\n    StackArrayList stack = new StackArrayList();\n    assertTrue(stack.isEmpty());\n\n    for (int i = 1; i <= 5; ++i) {\n        stack.push(i);\n        assertEquals(i, stack.size());\n    }\n\n    assertEquals(5, stack.size());\n    assertEquals(5, stack.peek(), \"Incorrect element returned by peek()\");\n    assertEquals(5, stack.pop(), \"Incorrect element returned by pop()\");\n    assertEquals(4, stack.peek(), \"Incorrect element returned by peek() after popping an element\");\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        StackArrayList stack = new StackArrayList();\n        \n        for (int i = 1; i <= 5; ++i) {\n            stack.push(i);\n        }\n        \n        assertEquals(5, stack.peek());\n    }\n}",
        "import static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Test that peek returns the element at the top of the stack without removing it from the stack\n        StackArrayList stack = new StackArrayList();\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        assertEquals(3, stack.peek());\n    }\n}",
        "@Test\npublic void peekTest() {\n    StackArrayList stack = new StackArrayList();\n    assertEquals(0, stack.size());\n    assertThrows(EmptyStackException.class, () -> stack.peek());\n}",
        "\nimport org.junit.jupiter.api.Test;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Create a new instance of the StackArrayList class\n        StackArrayList stack = new StackArrayList();\n        \n        // Add some elements to the stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        \n        // Check that peek() returns the expected value\n        assertEquals(3, stack.peek());\n    }\n}\n",
        "\npublic class StackArrayListTest {\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTest() {\n        assertEquals(0, stack.size());\n\n        for (int i = 1; i <= 5; ++i) {\n            stack.push(i);\n        }\n\n        assertEquals(5, stack.size());\n        assertEquals(5, stack.peek());\n    }\n}"
    ]
}