Source code: 


public int peek() {
    if (isEmpty()) {
        throw new EmptyStackException();
    }
    return stack.get(stack.size() - 1);
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.stacks;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        // Create an instance of the stack
        StackArrayList stack = new StackArrayList();
        
        // Check if the stack is empty before pushing any elements
        assertTrue(stack.isEmpty());
        
        // Push some elements onto the stack
        for (int i = 1; i <= 5; ++i) {
            stack.push(i);
            assertEquals(i, stack.size());
        }
        
        // Check if the peek method is working correctly
        assertEquals(5, stack.peek());
        
        // Pop an element from the stack and check if it's correct
        assertEquals(5, stack.pop());
        
        // Check if the size of the stack is correct after popping an element
        assertEquals(4, stack.size());
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        // Test Case 1: peek on empty stack
        StackArrayList stack = new StackArrayList();
        assertEquals(0, stack.size());
        assertThrows(EmptyStackException.class, () -> stack.peek());

        // Test Case 2: peek on non-empty stack
        stack.push(1);
        stack.push(2);
        stack.push(3);
        assertEquals(3, stack.size());
        assertEquals(3, stack.peek());
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        // Create an empty stack
        StackArrayList stack = new StackArrayList();

        // Check that the stack is empty
        assertTrue(stack.isEmpty());

        // Push some elements onto the stack
        for (int i = 1; i <= 5; ++i) {
            stack.push(i);
        }

        // Check that the size of the stack is correct
        assertEquals(5, stack.size());

        // Peek at the element on the top of the stack
        int peekedElement = stack.peek();

        // Check that the element returned by peek() is the last element pushed onto the stack
        assertEquals(5, peekedElement);
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        // Set up the stack with some values
        StackArrayList stack = new StackArrayList();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        
        // Test whether peek throws an EmptyStackException when called on an empty stack
        assertThrows(EmptyStackException.class, () -> {
            StackArrayList emptyStack = new StackArrayList();
            emptyStack.peek();
        });
        
        // Test whether peek returns the correct value when called on a non-empty stack
        int expectedValue = 3;
        assertEquals(expectedValue, stack.peek());
    }
}


No.5 generated result --------------------------

@Test
public void peekTest() {
    StackArrayList stack = new StackArrayList();
    assertTrue(stack.isEmpty());

    for (int i = 1; i <= 5; ++i) {
        stack.push(i);
        assertEquals(i, stack.size());
    }

    assertEquals(5, stack.size());
    assertEquals(5, stack.peek(), "Incorrect element returned by peek()");
    assertEquals(5, stack.pop(), "Incorrect element returned by pop()");
    assertEquals(4, stack.peek(), "Incorrect element returned by peek() after popping an element");
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        StackArrayList stack = new StackArrayList();
        
        for (int i = 1; i <= 5; ++i) {
            stack.push(i);
        }
        
        assertEquals(5, stack.peek());
    }
}


No.7 generated result --------------------------

import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        // Test that peek returns the element at the top of the stack without removing it from the stack
        StackArrayList stack = new StackArrayList();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        assertEquals(3, stack.peek());
    }
}


No.8 generated result --------------------------

@Test
public void peekTest() {
    StackArrayList stack = new StackArrayList();
    assertEquals(0, stack.size());
    assertThrows(EmptyStackException.class, () -> stack.peek());
}


No.9 generated result --------------------------


import org.junit.jupiter.api.Test;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        // Create a new instance of the StackArrayList class
        StackArrayList stack = new StackArrayList();
        
        // Add some elements to the stack
        stack.push(1);
        stack.push(2);
        stack.push(3);
        
        // Check that peek() returns the expected value
        assertEquals(3, stack.peek());
    }
}



No.10 generated result --------------------------


public class StackArrayListTest {
    private StackArrayList stack;

    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }

    @Test
    public void peekTest() {
        assertEquals(0, stack.size());

        for (int i = 1; i <= 5; ++i) {
            stack.push(i);
        }

        assertEquals(5, stack.size());
        assertEquals(5, stack.peek());
    }
}


