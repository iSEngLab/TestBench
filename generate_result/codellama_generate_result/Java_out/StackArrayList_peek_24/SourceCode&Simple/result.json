{
    "project_name": "Java",
    "file_name": "StackArrayList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/stacks/StackArrayList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.stacks",
    "docstring": "/**\n     * Return the element at the top of this stack without removing it from the\n     * stack.\n     *\n     * @return the element at the top of this stack.\n     */",
    "source_code": "\npublic int peek() {\n    if (isEmpty()) {\n        throw new EmptyStackException();\n    }\n    return stack.get(stack.size() - 1);\n}\n",
    "class_name": "StackArrayList",
    "method_name": "peek",
    "arguments": [],
    "generate_test": [
        "\n@Test\npublic void peekTest() {\n    // Arrange\n    StackArrayList stack = new StackArrayList();\n    int expectedValue = 10;\n\n    // Act\n    stack.push(expectedValue);\n    int actualValue = stack.peek();\n\n    // Assert\n    assertEquals(expectedValue, actualValue);\n}",
        "\npackage com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Arrange\n        StackArrayList stack = new StackArrayList();\n        \n        // Act\n        int result1 = stack.peek();\n        \n        // Assert\n        assertThrows(EmptyStackException.class, () -> stack.peek());\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        StackArrayList stack = new StackArrayList();\n        \n        // Test if peek returns the top value of the stack\n        assertEquals(1, stack.peek());\n        \n        // Test if peek throws an EmptyStackException when the stack is empty\n        try {\n            Stack<Integer> emptyStack = new Stack<>();\n            int topValue = emptyStack.peek();\n            fail(\"Expected exception not thrown\");\n        } catch (EmptyStackException e) {\n            assertTrue(true);\n        }\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Create a new instance of the StackArrayList class\n        StackArrayList stack = new StackArrayList();\n        \n        // Check that the peek method throws an EmptyStackException when the stack is empty\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        });\n    }\n}",
        "\nimport static org.junit.jupiter.api.Assertions.*;\nimport com.thealgorithms.datastructures.stacks.StackArrayList;\n\npublic class StackArrayListTest {\n    private StackArrayList stack;\n    \n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n    \n    @Test\n    public void peekTest() {\n        // Add some values to the stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        \n        // Peek at the top value\n        int expectedValue = 3;\n        assertEquals(expectedValue, stack.peek());\n    }\n}\n",
        "@Test\npublic void peekTest() {\n    StackArrayList stack = new StackArrayList();\n    assertEquals(0, stack.peek());\n    stack.push(1);\n    assertEquals(1, stack.peek());\n    stack.push(2);\n    assertEquals(2, stack.peek());\n    stack.pop();\n    assertEquals(1, stack.peek());\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        StackArrayList stack = new StackArrayList();\n        \n        // test that peek returns the last element in the stack\n        int value1 = 5;\n        stack.push(value1);\n        assertEquals(value1, stack.peek());\n        \n        // test that peek throws an EmptyStackException if the stack is empty\n        stack.pop();\n        assertThrows(EmptyStackException.class, () -> {\n            int value = stack.peek();\n        });\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Create a new instance of the stack\n        StackArrayList stack = new StackArrayList();\n        \n        // Add some elements to the stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        \n        // Peek at the top element of the stack and check that it is correct\n        assertEquals(stack.peek(), 3, \"Top element should be 3\");\n    }\n}",
        "\npackage com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Create a new instance of the StackArrayList class\n        StackArrayList stack = new StackArrayList();\n        \n        // Test that an EmptyStackException is thrown when trying to peek at an empty stack\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        });\n        \n        // Add some elements to the stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        \n        // Test that peek() returns the expected value\n        assertEquals(3, stack.peek());\n    }\n}",
        "\n@Test\npublic void peekTest() {\n    // Create a new StackArrayList object\n    StackArrayList stack = new StackArrayList();\n\n    // Push an element onto the stack\n    stack.push(1);\n\n    // Peek at the top of the stack\n    int peekedValue = stack.peek();\n\n    // Assert that the peeked value is equal to 1\n    assertEquals(1, peekedValue);\n}\n"
    ]
}