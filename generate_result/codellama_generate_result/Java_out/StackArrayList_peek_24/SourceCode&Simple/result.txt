Source code: 


public int peek() {
    if (isEmpty()) {
        throw new EmptyStackException();
    }
    return stack.get(stack.size() - 1);
}



No.1 generated result --------------------------


@Test
public void peekTest() {
    // Arrange
    StackArrayList stack = new StackArrayList();
    int expectedValue = 10;

    // Act
    stack.push(expectedValue);
    int actualValue = stack.peek();

    // Assert
    assertEquals(expectedValue, actualValue);
}


No.2 generated result --------------------------


package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        // Arrange
        StackArrayList stack = new StackArrayList();
        
        // Act
        int result1 = stack.peek();
        
        // Assert
        assertThrows(EmptyStackException.class, () -> stack.peek());
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        StackArrayList stack = new StackArrayList();
        
        // Test if peek returns the top value of the stack
        assertEquals(1, stack.peek());
        
        // Test if peek throws an EmptyStackException when the stack is empty
        try {
            Stack<Integer> emptyStack = new Stack<>();
            int topValue = emptyStack.peek();
            fail("Expected exception not thrown");
        } catch (EmptyStackException e) {
            assertTrue(true);
        }
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        // Create a new instance of the StackArrayList class
        StackArrayList stack = new StackArrayList();
        
        // Check that the peek method throws an EmptyStackException when the stack is empty
        assertThrows(EmptyStackException.class, () -> {
            stack.peek();
        });
    }
}


No.5 generated result --------------------------


import static org.junit.jupiter.api.Assertions.*;
import com.thealgorithms.datastructures.stacks.StackArrayList;

public class StackArrayListTest {
    private StackArrayList stack;
    
    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }
    
    @Test
    public void peekTest() {
        // Add some values to the stack
        stack.push(1);
        stack.push(2);
        stack.push(3);
        
        // Peek at the top value
        int expectedValue = 3;
        assertEquals(expectedValue, stack.peek());
    }
}



No.6 generated result --------------------------

@Test
public void peekTest() {
    StackArrayList stack = new StackArrayList();
    assertEquals(0, stack.peek());
    stack.push(1);
    assertEquals(1, stack.peek());
    stack.push(2);
    assertEquals(2, stack.peek());
    stack.pop();
    assertEquals(1, stack.peek());
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        StackArrayList stack = new StackArrayList();
        
        // test that peek returns the last element in the stack
        int value1 = 5;
        stack.push(value1);
        assertEquals(value1, stack.peek());
        
        // test that peek throws an EmptyStackException if the stack is empty
        stack.pop();
        assertThrows(EmptyStackException.class, () -> {
            int value = stack.peek();
        });
    }
}


No.8 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        // Create a new instance of the stack
        StackArrayList stack = new StackArrayList();
        
        // Add some elements to the stack
        stack.push(1);
        stack.push(2);
        stack.push(3);
        
        // Peek at the top element of the stack and check that it is correct
        assertEquals(stack.peek(), 3, "Top element should be 3");
    }
}


No.9 generated result --------------------------


package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        // Create a new instance of the StackArrayList class
        StackArrayList stack = new StackArrayList();
        
        // Test that an EmptyStackException is thrown when trying to peek at an empty stack
        assertThrows(EmptyStackException.class, () -> {
            stack.peek();
        });
        
        // Add some elements to the stack
        stack.push(1);
        stack.push(2);
        stack.push(3);
        
        // Test that peek() returns the expected value
        assertEquals(3, stack.peek());
    }
}


No.10 generated result --------------------------


@Test
public void peekTest() {
    // Create a new StackArrayList object
    StackArrayList stack = new StackArrayList();

    // Push an element onto the stack
    stack.push(1);

    // Peek at the top of the stack
    int peekedValue = stack.peek();

    // Assert that the peeked value is equal to 1
    assertEquals(1, peekedValue);
}



