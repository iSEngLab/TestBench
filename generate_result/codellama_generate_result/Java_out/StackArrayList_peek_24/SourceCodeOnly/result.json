{
    "project_name": "Java",
    "file_name": "StackArrayList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/stacks/StackArrayList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.stacks",
    "docstring": "/**\n     * Return the element at the top of this stack without removing it from the\n     * stack.\n     *\n     * @return the element at the top of this stack.\n     */",
    "source_code": "\npublic int peek() {\n    if (isEmpty()) {\n        throw new EmptyStackException();\n    }\n    return stack.get(stack.size() - 1);\n}\n",
    "class_name": "StackArrayList",
    "method_name": "peek",
    "arguments": [],
    "generate_test": [
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Test when the stack is empty\n        Stack<Integer> stack = new Stack<>();\n        assertThrows(EmptyStackException.class, () -> stack.peek());\n        \n        // Test when the stack is not empty\n        stack.push(1);\n        int value = stack.peek();\n        assertEquals(1, value);\n    }\n}",
        "\npackage com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        Stack<Integer> stack = new Stack<>();\n        assertThrows(EmptyStackException.class, () -> stack.peek());\n        \n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        assertEquals(3, stack.peek());\n    }\n}",
        "\npackage com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Initialize the stack with some elements\n        StackArrayList<Integer> stack = new StackArrayList<>();\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n\n        // Test that peek returns the top element of the stack without removing it\n        assertEquals(stack.peek(), 3);\n        assertEquals(stack.size(), 3);\n    }\n}",
        "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Create an empty stack\n        ArrayList<Integer> stack = new ArrayList<>();\n        \n        // Check that the peek method throws an EmptyStackException when the stack is empty\n        assertThrows(EmptyStackException.class, () -> stack.peek());\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        ArrayList<Integer> stack = new ArrayList<>();\n        assertThrows(EmptyStackException.class, () -> stack.peek());\n        \n        stack.push(1);\n        int expectedResult = 1;\n        assertEquals(expectedResult, stack.peek());\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Test that the method returns the last element of the stack\n        ArrayList<Integer> stack = new ArrayList<>();\n        stack.add(1);\n        stack.add(2);\n        assertEquals(2, stack.peek());\n\n        // Test that the method throws an EmptyStackException if the stack is empty\n        try {\n            StackArrayListTest.emptyStack().peek();\n            fail(\"Expected an EmptyStackException to be thrown\");\n        } catch (EmptyStackException e) {\n            assertTrue(true);\n        }\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Test that the method throws an EmptyStackException if the stack is empty\n        Stack<Integer> stack = new Stack<>();\n        assertThrows(EmptyStackException.class, () -> stack.peek());\n\n        // Test that the method returns the correct element from the stack otherwise\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        assertEquals(3, stack.peek());\n    }\n}",
        "@Test\npublic void peekTest() {\n    // Arrange\n    ArrayList<Integer> stack = new ArrayList<>();\n    int expectedValue = 10;\n    stack.add(expectedValue);\n\n    StackArrayList<Integer> sut = new StackArrayList<>(stack);\n\n    // Act\n    int actualValue = sut.peek();\n\n    // Assert\n    assertEquals(expectedValue, actualValue);\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Create a new stack object\n        ArrayListStack<Integer> stack = new ArrayListStack<>();\n        \n        // Add some elements to the stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        \n        // Peek at the top element of the stack without removing it\n        int peekedElement = stack.peek();\n        \n        // Check that the returned value is equal to 3, which is the top element of the stack\n        assertEquals(3, peekedElement);\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        // Set up a new stack with some values\n        Stack<Integer> stack = new Stack<>();\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        \n        // Peek at the top value and verify that it's correct\n        int peekedValue = stack.peek();\n        assertEquals(peekedValue, 3);\n    }\n}"
    ]
}