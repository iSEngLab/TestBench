{
    "project_name": "Java",
    "file_name": "TwinPrime.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/TwinPrime.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * This method returns twin prime of the integer value passed as argument\n     *\n     * @param input_number Integer value of which twin prime is to be found\n     * @return (number + 2) if number and (number + 2) are prime, -1 otherwise\n     */",
    "source_code": "\nstatic int getTwinPrime(int inputNumber) {\n\n    // if inputNumber and (inputNumber + 2) are both prime\n    // then return (inputNumber + 2) as a result\n    if (PrimeCheck.isPrime(inputNumber) && PrimeCheck.isPrime(inputNumber + 2)) {\n        return inputNumber + 2;\n    }\n    // if any one from inputNumber and (inputNumber + 2) or if both of them are not prime\n    // then return -1 as a result\n    return -1;\n}\n",
    "class_name": "TwinPrime",
    "method_name": "getTwinPrime",
    "arguments": [
        "int inputNumber"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // test case 1: input number is a prime\n        int inputNumber = 3;\n        assertEquals(inputNumber + 2, TwinPrime.getTwinPrime(inputNumber));\n\n        // test case 2: input number is not a prime\n        inputNumber = 4;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: inputNumber = 3, expectedOutput = 5 (since 3 and 5 are prime)\n        int output = TwinPrime.getTwinPrime(3);\n        assertEquals(output, 5);\n\n        // Test case 2: inputNumber = 7, expectedOutput = -1 (since 7 and 9 are not prime)\n        output = TwinPrime.getTwinPrime(7);\n        assertEquals(output, -1);\n    }\n}",
        "\n@Test\npublic void getTwinPrimeTest() {\n    assertEquals(3, TwinPrime.getTwinPrime(1));\n    assertEquals(5, TwinPrime.getTwinPrime(2));\n    assertEquals(-1, TwinPrime.getTwinPrime(3));\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: inputNumber = 3, expectedOutput = 5 (since 3 and 5 are prime)\n        assertEquals(5, TwinPrime.getTwinPrime(3));\n        \n        // Test case 2: inputNumber = 4, expectedOutput = -1 (since 4 is not prime)\n        assertEquals(-1, TwinPrime.getTwinPrime(4));\n        \n        // Test case 3: inputNumber = 5, expectedOutput = 7 (since 5 and 7 are prime)\n        assertEquals(7, TwinPrime.getTwinPrime(5));\n    }\n}",
        "\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // test cases for the twin prime of 1\n        assertEquals(3, TwinPrime.getTwinPrime(1));\n        // test cases for the twin prime of 2\n        assertEquals(-1, TwinPrime.getTwinPrime(2));\n        // test cases for the twin prime of 5\n        assertEquals(7, TwinPrime.getTwinPrime(5));\n        // test cases for the twin prime of 10\n        assertEquals(-1, TwinPrime.getTwinPrime(10));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: inputNumber = 3, output = 5 (since 3 and 5 are both prime)\n        int inputNumber = 3;\n        assertEquals(5, TwinPrime.getTwinPrime(inputNumber));\n        \n        // Test case 2: inputNumber = 4, output = -1 (since 4 is not a prime)\n        inputNumber = 4;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n        \n        // Test case 3: inputNumber = 5, output = 7 (since 5 and 7 are both prime)\n        inputNumber = 5;\n        assertEquals(7, TwinPrime.getTwinPrime(inputNumber));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: Both inputNumber and (inputNumber + 2) are prime\n        int inputNumber = 3;\n        assertEquals(5, TwinPrime.getTwinPrime(inputNumber));\n\n        // Test case 2: Either inputNumber or (inputNumber + 2) is not prime\n        inputNumber = 7;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n    }\n}",
        "\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        assertEquals(5, TwinPrime.getTwinPrime(3));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: inputNumber is prime and (inputNumber + 2) is also prime\n        int inputNumber = 5;\n        assertEquals(7, TwinPrime.getTwinPrime(inputNumber));\n\n        // Test case 2: inputNumber is not prime but (inputNumber + 2) is prime\n        inputNumber = 4;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n\n        // Test case 3: inputNumber and (inputNumber + 2) are both composite numbers\n        inputNumber = 6;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test Case 1: inputNumber = 3, expected output = -1 (because both 3 and 5 are not prime)\n        assertEquals(-1, TwinPrime.getTwinPrime(3));\n\n        // Test Case 2: inputNumber = 5, expected output = 7 (because both 5 and 7 are prime)\n        assertEquals(7, TwinPrime.getTwinPrime(5));\n\n        // Test Case 3: inputNumber = 11, expected output = -1 (because only 11 is prime, but not 13)\n        assertEquals(-1, TwinPrime.getTwinPrime(11));\n    }\n}"
    ]
}