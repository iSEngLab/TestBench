Source code: 


static int getTwinPrime(int inputNumber) {

    // if inputNumber and (inputNumber + 2) are both prime
    // then return (inputNumber + 2) as a result
    if (PrimeCheck.isPrime(inputNumber) && PrimeCheck.isPrime(inputNumber + 2)) {
        return inputNumber + 2;
    }
    // if any one from inputNumber and (inputNumber + 2) or if both of them are not prime
    // then return -1 as a result
    return -1;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // test case 1: input number is a prime
        int inputNumber = 3;
        assertEquals(inputNumber + 2, TwinPrime.getTwinPrime(inputNumber));

        // test case 2: input number is not a prime
        inputNumber = 4;
        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));
    }
}


No.2 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // Test case 1: inputNumber = 3, expectedOutput = 5 (since 3 and 5 are prime)
        int output = TwinPrime.getTwinPrime(3);
        assertEquals(output, 5);

        // Test case 2: inputNumber = 7, expectedOutput = -1 (since 7 and 9 are not prime)
        output = TwinPrime.getTwinPrime(7);
        assertEquals(output, -1);
    }
}


No.3 generated result --------------------------


@Test
public void getTwinPrimeTest() {
    assertEquals(3, TwinPrime.getTwinPrime(1));
    assertEquals(5, TwinPrime.getTwinPrime(2));
    assertEquals(-1, TwinPrime.getTwinPrime(3));
}


No.4 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // Test case 1: inputNumber = 3, expectedOutput = 5 (since 3 and 5 are prime)
        assertEquals(5, TwinPrime.getTwinPrime(3));
        
        // Test case 2: inputNumber = 4, expectedOutput = -1 (since 4 is not prime)
        assertEquals(-1, TwinPrime.getTwinPrime(4));
        
        // Test case 3: inputNumber = 5, expectedOutput = 7 (since 5 and 7 are prime)
        assertEquals(7, TwinPrime.getTwinPrime(5));
    }
}


No.5 generated result --------------------------


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // test cases for the twin prime of 1
        assertEquals(3, TwinPrime.getTwinPrime(1));
        // test cases for the twin prime of 2
        assertEquals(-1, TwinPrime.getTwinPrime(2));
        // test cases for the twin prime of 5
        assertEquals(7, TwinPrime.getTwinPrime(5));
        // test cases for the twin prime of 10
        assertEquals(-1, TwinPrime.getTwinPrime(10));
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // Test case 1: inputNumber = 3, output = 5 (since 3 and 5 are both prime)
        int inputNumber = 3;
        assertEquals(5, TwinPrime.getTwinPrime(inputNumber));
        
        // Test case 2: inputNumber = 4, output = -1 (since 4 is not a prime)
        inputNumber = 4;
        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));
        
        // Test case 3: inputNumber = 5, output = 7 (since 5 and 7 are both prime)
        inputNumber = 5;
        assertEquals(7, TwinPrime.getTwinPrime(inputNumber));
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // Test case 1: Both inputNumber and (inputNumber + 2) are prime
        int inputNumber = 3;
        assertEquals(5, TwinPrime.getTwinPrime(inputNumber));

        // Test case 2: Either inputNumber or (inputNumber + 2) is not prime
        inputNumber = 7;
        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));
    }
}


No.8 generated result --------------------------


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        assertEquals(5, TwinPrime.getTwinPrime(3));
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // Test case 1: inputNumber is prime and (inputNumber + 2) is also prime
        int inputNumber = 5;
        assertEquals(7, TwinPrime.getTwinPrime(inputNumber));

        // Test case 2: inputNumber is not prime but (inputNumber + 2) is prime
        inputNumber = 4;
        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));

        // Test case 3: inputNumber and (inputNumber + 2) are both composite numbers
        inputNumber = 6;
        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));
    }
}


No.10 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // Test Case 1: inputNumber = 3, expected output = -1 (because both 3 and 5 are not prime)
        assertEquals(-1, TwinPrime.getTwinPrime(3));

        // Test Case 2: inputNumber = 5, expected output = 7 (because both 5 and 7 are prime)
        assertEquals(7, TwinPrime.getTwinPrime(5));

        // Test Case 3: inputNumber = 11, expected output = -1 (because only 11 is prime, but not 13)
        assertEquals(-1, TwinPrime.getTwinPrime(11));
    }
}


