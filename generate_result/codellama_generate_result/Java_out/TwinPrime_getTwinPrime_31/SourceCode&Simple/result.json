{
    "project_name": "Java",
    "file_name": "TwinPrime.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/TwinPrime.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * This method returns twin prime of the integer value passed as argument\n     *\n     * @param input_number Integer value of which twin prime is to be found\n     * @return (number + 2) if number and (number + 2) are prime, -1 otherwise\n     */",
    "source_code": "\nstatic int getTwinPrime(int inputNumber) {\n\n    // if inputNumber and (inputNumber + 2) are both prime\n    // then return (inputNumber + 2) as a result\n    if (PrimeCheck.isPrime(inputNumber) && PrimeCheck.isPrime(inputNumber + 2)) {\n        return inputNumber + 2;\n    }\n    // if any one from inputNumber and (inputNumber + 2) or if both of them are not prime\n    // then return -1 as a result\n    return -1;\n}\n",
    "class_name": "TwinPrime",
    "method_name": "getTwinPrime",
    "arguments": [
        "int inputNumber"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: inputNumber is a prime number and the next number is also a prime number\n        int inputNumber = 7;\n        int expectedResult = 9;\n        assertEquals(expectedResult, TwinPrime.getTwinPrime(inputNumber));\n\n        // Test case 2: inputNumber is not a prime number but the next number is a prime number\n        inputNumber = 10;\n        expectedResult = -1;\n        assertEquals(expectedResult, TwinPrime.getTwinPrime(inputNumber));\n\n        // Test case 3: inputNumber and the next number are both not prime numbers\n        inputNumber = 25;\n        expectedResult = -1;\n        assertEquals(expectedResult, TwinPrime.getTwinPrime(inputNumber));\n    }\n}\n",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        int inputNumber = 10;\n        int expectedResult = 12;\n\n        assertEquals(expectedResult, TwinPrime.getTwinPrime(inputNumber));\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test 1: Both inputNumber and (inputNumber + 2) are prime\n        int inputNumber = 3;\n        assertEquals(5, TwinPrime.getTwinPrime(inputNumber));\n\n        // Test 2: Input number is not prime\n        inputNumber = 4;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n\n        // Test 3: (inputNumber + 2) is not prime\n        inputNumber = 5;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n    }\n}\n",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: inputNumber = 5, expected result = -1\n        assertEquals(-1, TwinPrime.getTwinPrime(5));\n        \n        // Test case 2: inputNumber = 3, expected result = 5\n        assertEquals(5, TwinPrime.getTwinPrime(3));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: both inputNumber and (inputNumber + 2) are prime numbers\n        int inputNumber = 3;\n        assertEquals(5, TwinPrime.getTwinPrime(inputNumber));\n        \n        // Test case 2: only one of the two inputNumbers is a prime number\n        inputNumber = 7;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n        \n        // Test case 3: both inputNumber and (inputNumber + 2) are not prime numbers\n        inputNumber = 4;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: inputNumber is a prime number, and (inputNumber + 2) is also a prime number\n        int result = TwinPrime.getTwinPrime(3); // 3 is a prime number, and 5 is also a prime number\n        assertEquals(result, 5);\n\n        // Test case 2: inputNumber is not a prime number, but (inputNumber + 2) is a prime number\n        result = TwinPrime.getTwinPrime(4); // 4 is not a prime number, but 6 is a prime number\n        assertEquals(result, -1);\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        int inputNumber = 1;\n        assertEquals(3, TwinPrime.getTwinPrime(inputNumber));\n\n        inputNumber = 2;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n\n        inputNumber = 3;\n        assertEquals(5, TwinPrime.getTwinPrime(inputNumber));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: inputNumber = 3, expected output = -1\n        int inputNumber = 3;\n        assertEquals(TwinPrime.getTwinPrime(inputNumber), -1);\n        \n        // Test case 2: inputNumber = 5, expected output = 7\n        inputNumber = 5;\n        assertEquals(TwinPrime.getTwinPrime(inputNumber), 7);\n    }\n}",
        "\nimport org.junit.jupiter.api.Assertions;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        assertEquals(5, TwinPrime.getTwinPrime(3));\n        assertEquals(-1, TwinPrime.getTwinPrime(4));\n        assertEquals(7, TwinPrime.getTwinPrime(5));\n        assertEquals(11, TwinPrime.getTwinPrime(7));\n        assertEquals(13, TwinPrime.getTwinPrime(9));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: inputNumber is prime and (inputNumber + 2) is also prime\n        int inputNumber = 3;\n        assertEquals(5, TwinPrime.getTwinPrime(inputNumber));\n\n        // Test case 2: inputNumber is not prime but (inputNumber + 2) is prime\n        inputNumber = 4;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n\n        // Test case 3: inputNumber and (inputNumber + 2) are both composite numbers\n        inputNumber = 5;\n        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));\n    }\n}"
    ]
}