Source code: 


static int getTwinPrime(int inputNumber) {

    // if inputNumber and (inputNumber + 2) are both prime
    // then return (inputNumber + 2) as a result
    if (PrimeCheck.isPrime(inputNumber) && PrimeCheck.isPrime(inputNumber + 2)) {
        return inputNumber + 2;
    }
    // if any one from inputNumber and (inputNumber + 2) or if both of them are not prime
    // then return -1 as a result
    return -1;
}



No.1 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // Test case 1: inputNumber is a prime number and the next number is also a prime number
        int inputNumber = 7;
        int expectedResult = 9;
        assertEquals(expectedResult, TwinPrime.getTwinPrime(inputNumber));

        // Test case 2: inputNumber is not a prime number but the next number is a prime number
        inputNumber = 10;
        expectedResult = -1;
        assertEquals(expectedResult, TwinPrime.getTwinPrime(inputNumber));

        // Test case 3: inputNumber and the next number are both not prime numbers
        inputNumber = 25;
        expectedResult = -1;
        assertEquals(expectedResult, TwinPrime.getTwinPrime(inputNumber));
    }
}



No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        int inputNumber = 10;
        int expectedResult = 12;

        assertEquals(expectedResult, TwinPrime.getTwinPrime(inputNumber));
    }
}


No.3 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // Test 1: Both inputNumber and (inputNumber + 2) are prime
        int inputNumber = 3;
        assertEquals(5, TwinPrime.getTwinPrime(inputNumber));

        // Test 2: Input number is not prime
        inputNumber = 4;
        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));

        // Test 3: (inputNumber + 2) is not prime
        inputNumber = 5;
        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));
    }
}



No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // Test case 1: inputNumber = 5, expected result = -1
        assertEquals(-1, TwinPrime.getTwinPrime(5));
        
        // Test case 2: inputNumber = 3, expected result = 5
        assertEquals(5, TwinPrime.getTwinPrime(3));
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // Test case 1: both inputNumber and (inputNumber + 2) are prime numbers
        int inputNumber = 3;
        assertEquals(5, TwinPrime.getTwinPrime(inputNumber));
        
        // Test case 2: only one of the two inputNumbers is a prime number
        inputNumber = 7;
        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));
        
        // Test case 3: both inputNumber and (inputNumber + 2) are not prime numbers
        inputNumber = 4;
        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // Test case 1: inputNumber is a prime number, and (inputNumber + 2) is also a prime number
        int result = TwinPrime.getTwinPrime(3); // 3 is a prime number, and 5 is also a prime number
        assertEquals(result, 5);

        // Test case 2: inputNumber is not a prime number, but (inputNumber + 2) is a prime number
        result = TwinPrime.getTwinPrime(4); // 4 is not a prime number, but 6 is a prime number
        assertEquals(result, -1);
    }
}


No.7 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        int inputNumber = 1;
        assertEquals(3, TwinPrime.getTwinPrime(inputNumber));

        inputNumber = 2;
        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));

        inputNumber = 3;
        assertEquals(5, TwinPrime.getTwinPrime(inputNumber));
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // Test case 1: inputNumber = 3, expected output = -1
        int inputNumber = 3;
        assertEquals(TwinPrime.getTwinPrime(inputNumber), -1);
        
        // Test case 2: inputNumber = 5, expected output = 7
        inputNumber = 5;
        assertEquals(TwinPrime.getTwinPrime(inputNumber), 7);
    }
}


No.9 generated result --------------------------


import org.junit.jupiter.api.Assertions;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        assertEquals(5, TwinPrime.getTwinPrime(3));
        assertEquals(-1, TwinPrime.getTwinPrime(4));
        assertEquals(7, TwinPrime.getTwinPrime(5));
        assertEquals(11, TwinPrime.getTwinPrime(7));
        assertEquals(13, TwinPrime.getTwinPrime(9));
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // Test case 1: inputNumber is prime and (inputNumber + 2) is also prime
        int inputNumber = 3;
        assertEquals(5, TwinPrime.getTwinPrime(inputNumber));

        // Test case 2: inputNumber is not prime but (inputNumber + 2) is prime
        inputNumber = 4;
        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));

        // Test case 3: inputNumber and (inputNumber + 2) are both composite numbers
        inputNumber = 5;
        assertEquals(-1, TwinPrime.getTwinPrime(inputNumber));
    }
}


