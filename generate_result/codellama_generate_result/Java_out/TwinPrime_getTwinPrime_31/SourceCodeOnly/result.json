{
    "project_name": "Java",
    "file_name": "TwinPrime.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/TwinPrime.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * This method returns twin prime of the integer value passed as argument\n     *\n     * @param input_number Integer value of which twin prime is to be found\n     * @return (number + 2) if number and (number + 2) are prime, -1 otherwise\n     */",
    "source_code": "\nstatic int getTwinPrime(int inputNumber) {\n\n    // if inputNumber and (inputNumber + 2) are both prime\n    // then return (inputNumber + 2) as a result\n    if (PrimeCheck.isPrime(inputNumber) && PrimeCheck.isPrime(inputNumber + 2)) {\n        return inputNumber + 2;\n    }\n    // if any one from inputNumber and (inputNumber + 2) or if both of them are not prime\n    // then return -1 as a result\n    return -1;\n}\n",
    "class_name": "TwinPrime",
    "method_name": "getTwinPrime",
    "arguments": [
        "int inputNumber"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: Both inputNumber and (inputNumber + 2) are prime\n        int result = TwinPrime.getTwinPrime(5);\n        assertEquals(7, result);\n\n        // Test case 2: One of the inputNumber or (inputNumber + 2) is not prime\n        result = TwinPrime.getTwinPrime(10);\n        assertEquals(-1, result);\n    }\n}",
        "\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        int inputNumber = 2; // is prime\n        assertEquals(4, getTwinPrime(inputNumber)); // (inputNumber + 2) should be returned as a result since both are prime\n\n        inputNumber = 3; // is not prime\n        assertEquals(-1, getTwinPrime(inputNumber)); // -1 should be returned as a result since only one of them is prime\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        assertEquals(5, TwinPrime.getTwinPrime(3));\n        assertEquals(-1, TwinPrime.getTwinPrime(4));\n        assertEquals(-1, TwinPrime.getTwinPrime(7));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        assertEquals(2, getTwinPrime(1)); // inputNumber is 1 and (inputNumber + 2) is 3 which are both prime\n        assertEquals(-1, getTwinPrime(4)); // inputNumber is 4 and (inputNumber + 2) is 6 which are not both prime\n    }\n}",
        "\n@Test\npublic void getTwinPrimeTest() {\n    int inputNumber = 1;\n    int expectedResult = -1;\n    assertEquals(expectedResult, TwinPrime.getTwinPrime(inputNumber));\n}\n\nThis test case verifies that the method returns -1 if both the input number and its successor are not prime.",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        int inputNumber = 17; // a prime number\n        assertEquals(inputNumber + 2, getTwinPrime(inputNumber)); // both inputNumber and (inputNumber + 2) are prime numbers\n\n        inputNumber = 3; // not a prime number\n        assertEquals(-1, getTwinPrime(inputNumber)); // one of the two numbers is not a prime number\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        int inputNumber = 3;\n        assertEquals(5, TwinPrime.getTwinPrime(inputNumber));\n    }\n}",
        "\npackage com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        int inputNumber = 5; // Prime number\n        int result = TwinPrime.getTwinPrime(inputNumber);\n        assertEquals(7, result);\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: Both inputNumber and (inputNumber + 2) are prime numbers\n        assertEquals(getTwinPrime(3), 5);\n        assertEquals(getTwinPrime(5), 7);\n\n        // Test case 2: Either inputNumber or (inputNumber + 2) is not a prime number\n        assertEquals(getTwinPrime(4), -1);\n        assertEquals(getTwinPrime(6), -1);\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: inputNumber is a prime number, and (inputNumber + 2) is also a prime number\n        assertEquals(getTwinPrime(3), 5);\n\n        // Test case 2: inputNumber is not a prime number, but (inputNumber + 2) is a prime number\n        assertEquals(getTwinPrime(4), -1);\n\n        // Test case 3: inputNumber and (inputNumber + 2) are both not prime numbers\n        assertEquals(getTwinPrime(5), -1);\n    }\n}"
    ]
}