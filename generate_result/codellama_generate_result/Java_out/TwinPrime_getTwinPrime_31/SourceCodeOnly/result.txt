Source code: 


static int getTwinPrime(int inputNumber) {

    // if inputNumber and (inputNumber + 2) are both prime
    // then return (inputNumber + 2) as a result
    if (PrimeCheck.isPrime(inputNumber) && PrimeCheck.isPrime(inputNumber + 2)) {
        return inputNumber + 2;
    }
    // if any one from inputNumber and (inputNumber + 2) or if both of them are not prime
    // then return -1 as a result
    return -1;
}



No.1 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // Test case 1: Both inputNumber and (inputNumber + 2) are prime
        int result = TwinPrime.getTwinPrime(5);
        assertEquals(7, result);

        // Test case 2: One of the inputNumber or (inputNumber + 2) is not prime
        result = TwinPrime.getTwinPrime(10);
        assertEquals(-1, result);
    }
}


No.2 generated result --------------------------


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        int inputNumber = 2; // is prime
        assertEquals(4, getTwinPrime(inputNumber)); // (inputNumber + 2) should be returned as a result since both are prime

        inputNumber = 3; // is not prime
        assertEquals(-1, getTwinPrime(inputNumber)); // -1 should be returned as a result since only one of them is prime
    }
}


No.3 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        assertEquals(5, TwinPrime.getTwinPrime(3));
        assertEquals(-1, TwinPrime.getTwinPrime(4));
        assertEquals(-1, TwinPrime.getTwinPrime(7));
    }
}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        assertEquals(2, getTwinPrime(1)); // inputNumber is 1 and (inputNumber + 2) is 3 which are both prime
        assertEquals(-1, getTwinPrime(4)); // inputNumber is 4 and (inputNumber + 2) is 6 which are not both prime
    }
}


No.5 generated result --------------------------


@Test
public void getTwinPrimeTest() {
    int inputNumber = 1;
    int expectedResult = -1;
    assertEquals(expectedResult, TwinPrime.getTwinPrime(inputNumber));
}

This test case verifies that the method returns -1 if both the input number and its successor are not prime.


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        int inputNumber = 17; // a prime number
        assertEquals(inputNumber + 2, getTwinPrime(inputNumber)); // both inputNumber and (inputNumber + 2) are prime numbers

        inputNumber = 3; // not a prime number
        assertEquals(-1, getTwinPrime(inputNumber)); // one of the two numbers is not a prime number
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        int inputNumber = 3;
        assertEquals(5, TwinPrime.getTwinPrime(inputNumber));
    }
}


No.8 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        int inputNumber = 5; // Prime number
        int result = TwinPrime.getTwinPrime(inputNumber);
        assertEquals(7, result);
    }
}


No.9 generated result --------------------------


import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // Test case 1: Both inputNumber and (inputNumber + 2) are prime numbers
        assertEquals(getTwinPrime(3), 5);
        assertEquals(getTwinPrime(5), 7);

        // Test case 2: Either inputNumber or (inputNumber + 2) is not a prime number
        assertEquals(getTwinPrime(4), -1);
        assertEquals(getTwinPrime(6), -1);
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // Test case 1: inputNumber is a prime number, and (inputNumber + 2) is also a prime number
        assertEquals(getTwinPrime(3), 5);

        // Test case 2: inputNumber is not a prime number, but (inputNumber + 2) is a prime number
        assertEquals(getTwinPrime(4), -1);

        // Test case 3: inputNumber and (inputNumber + 2) are both not prime numbers
        assertEquals(getTwinPrime(5), -1);
    }
}


