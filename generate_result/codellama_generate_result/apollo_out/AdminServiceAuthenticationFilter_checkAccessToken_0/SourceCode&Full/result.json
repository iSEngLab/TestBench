{
    "project_name": "apollo",
    "file_name": "AdminServiceAuthenticationFilter.java",
    "relative_path": "apollo/apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/filter/AdminServiceAuthenticationFilter.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.adminservice.filter",
    "docstring": null,
    "source_code": "private boolean checkAccessToken(String token) {\n  String accessTokens = bizConfig.getAdminServiceAccessTokens();\n\n  // if user forget to configure access tokens, then default to pass\n  if (Strings.isNullOrEmpty(accessTokens)) {\n    return true;\n  }\n\n  // no need to check\n  if (Strings.isNullOrEmpty(token)) {\n    return false;\n  }\n\n  // update cache\n  if (!accessTokens.equals(lastAccessTokens)) {\n    synchronized (this) {\n      accessTokenList = ACCESS_TOKEN_SPLITTER.splitToList(accessTokens);\n      lastAccessTokens = accessTokens;\n    }\n  }\n\n  return accessTokenList.contains(token);\n}\n",
    "class_name": "AdminServiceAuthenticationFilter",
    "method_name": "checkAccessToken",
    "arguments": [
        "String token"
    ],
    "generate_test": [
        "\n@Test\npublic void checkAccessTokenTest() {\n    // Arrange\n    String accessTokens = \"token1,token2\";\n    BizConfig bizConfig = new BizConfig();\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);\n\n    // Act\n    boolean actualResult = filter.checkAccessToken(\"token2\");\n\n    // Assert\n    assertTrue(actualResult);\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        // Arrange\n        String token = \"my-access-token\";\n        String accessTokens = \"my-access-tokens,other-token\";\n        BizConfig bizConfig = new BizConfig();\n        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);\n\n        // Act\n        boolean result = filter.checkAccessToken(token, accessTokens);\n\n        // Assert\n        assertTrue(result);\n    }\n}",
        "@Test\npublic void checkAccessTokenTest() {\n    String accessTokens = \"token1,token2,token3\";\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(null);\n    assertTrue(filter.checkAccessToken(\"token2\"));\n}",
        "@Test\npublic void checkAccessTokenTest() {\n    String accessTokens = \"token1,token2,token3\";\n    String token = \"token2\";\n\n    assertTrue(checkAccessToken(accessTokens, token));\n}",
        "@Test\npublic void checkAccessTokenTest() {\n    // Arrange\n    String accessTokens = \"token1,token2\";\n    String token = \"token3\";\n\n    // Act\n    boolean result = checkAccessToken(accessTokens, token);\n\n    // Assert\n    assertFalse(result);\n}",
        "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        String token = \"my-access-token\";\n        String accessTokens = \"my-access-token,another-access-token\";\n\n        // Set up the BizConfig mock\n        BizConfig bizConfig = Mockito.mock(BizConfig.class);\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);\n\n        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);\n\n        assertTrue(filter.checkAccessToken(token));\n    }\n}",
        "@Test\npublic void checkAccessTokenTest() {\n    // create a new instance of AdminServiceAuthenticationFilter\n    BizConfig bizConfig = mock(BizConfig.class);\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);\n    \n    // set up the test data\n    String accessTokens = \"token1,token2\";\n    when(bizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);\n    \n    // test the method with valid token\n    assertTrue(filter.checkAccessToken(\"token1\"));\n    \n    // test the method with invalid token\n    assertFalse(filter.checkAccessToken(\"invalid-token\"));\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        String accessTokens = \"token1,token2,token3\";\n        BizConfig bizConfig = new BizConfig();\n        bizConfig.setAdminServiceAccessTokens(accessTokens);\n        \n        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);\n        String token = \"token1\";\n        \n        assertTrue(filter.checkAccessToken(token));\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        // Set up test data\n        String accessTokens = \"token1,token2,token3\";\n        BizConfig bizConfig = mock(BizConfig.class);\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);\n        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);\n\n        // Test with valid access token\n        String token = \"token2\";\n        assertTrue(filter.checkAccessToken(token));\n\n        // Test with invalid access token\n        token = \"invalid-token\";\n        assertFalse(filter.checkAccessToken(token));\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        String accessTokens = \"token1, token2\";\n        String lastAccessTokens = \"\";\n        List<String> accessTokenList = new ArrayList<>();\n\n        assertTrue(checkAccessToken(accessTokens, lastAccessTokens, accessTokenList));\n    }\n}"
    ]
}