Source code: 

private boolean checkAccessToken(String token) {
  String accessTokens = bizConfig.getAdminServiceAccessTokens();

  // if user forget to configure access tokens, then default to pass
  if (Strings.isNullOrEmpty(accessTokens)) {
    return true;
  }

  // no need to check
  if (Strings.isNullOrEmpty(token)) {
    return false;
  }

  // update cache
  if (!accessTokens.equals(lastAccessTokens)) {
    synchronized (this) {
      accessTokenList = ACCESS_TOKEN_SPLITTER.splitToList(accessTokens);
      lastAccessTokens = accessTokens;
    }
  }

  return accessTokenList.contains(token);
}



No.1 generated result --------------------------


@Test
public void checkAccessTokenTest() {
    // Arrange
    String accessTokens = "token1,token2";
    BizConfig bizConfig = new BizConfig();
    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);

    // Act
    boolean actualResult = filter.checkAccessToken("token2");

    // Assert
    assertTrue(actualResult);
}


No.2 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdminServiceAuthenticationFilterTest {
    @Test
    public void checkAccessTokenTest() {
        // Arrange
        String token = "my-access-token";
        String accessTokens = "my-access-tokens,other-token";
        BizConfig bizConfig = new BizConfig();
        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);

        // Act
        boolean result = filter.checkAccessToken(token, accessTokens);

        // Assert
        assertTrue(result);
    }
}


No.3 generated result --------------------------

@Test
public void checkAccessTokenTest() {
    String accessTokens = "token1,token2,token3";
    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(null);
    assertTrue(filter.checkAccessToken("token2"));
}


No.4 generated result --------------------------

@Test
public void checkAccessTokenTest() {
    String accessTokens = "token1,token2,token3";
    String token = "token2";

    assertTrue(checkAccessToken(accessTokens, token));
}


No.5 generated result --------------------------

@Test
public void checkAccessTokenTest() {
    // Arrange
    String accessTokens = "token1,token2";
    String token = "token3";

    // Act
    boolean result = checkAccessToken(accessTokens, token);

    // Assert
    assertFalse(result);
}


No.6 generated result --------------------------

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AdminServiceAuthenticationFilterTest {
    @Test
    public void checkAccessTokenTest() {
        String token = "my-access-token";
        String accessTokens = "my-access-token,another-access-token";

        // Set up the BizConfig mock
        BizConfig bizConfig = Mockito.mock(BizConfig.class);
        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);

        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);

        assertTrue(filter.checkAccessToken(token));
    }
}


No.7 generated result --------------------------

@Test
public void checkAccessTokenTest() {
    // create a new instance of AdminServiceAuthenticationFilter
    BizConfig bizConfig = mock(BizConfig.class);
    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);
    
    // set up the test data
    String accessTokens = "token1,token2";
    when(bizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);
    
    // test the method with valid token
    assertTrue(filter.checkAccessToken("token1"));
    
    // test the method with invalid token
    assertFalse(filter.checkAccessToken("invalid-token"));
}


No.8 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdminServiceAuthenticationFilterTest {
    @Test
    public void checkAccessTokenTest() {
        String accessTokens = "token1,token2,token3";
        BizConfig bizConfig = new BizConfig();
        bizConfig.setAdminServiceAccessTokens(accessTokens);
        
        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);
        String token = "token1";
        
        assertTrue(filter.checkAccessToken(token));
    }
}


No.9 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdminServiceAuthenticationFilterTest {
    @Test
    public void checkAccessTokenTest() {
        // Set up test data
        String accessTokens = "token1,token2,token3";
        BizConfig bizConfig = mock(BizConfig.class);
        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);
        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);

        // Test with valid access token
        String token = "token2";
        assertTrue(filter.checkAccessToken(token));

        // Test with invalid access token
        token = "invalid-token";
        assertFalse(filter.checkAccessToken(token));
    }
}


No.10 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdminServiceAuthenticationFilterTest {
    @Test
    public void checkAccessTokenTest() {
        String accessTokens = "token1, token2";
        String lastAccessTokens = "";
        List<String> accessTokenList = new ArrayList<>();

        assertTrue(checkAccessToken(accessTokens, lastAccessTokens, accessTokenList));
    }
}


