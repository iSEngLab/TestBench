{
    "project_name": "apollo",
    "file_name": "AdminServiceAuthenticationFilter.java",
    "relative_path": "apollo/apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/filter/AdminServiceAuthenticationFilter.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.adminservice.filter",
    "docstring": null,
    "source_code": "private boolean checkAccessToken(String token) {\n  String accessTokens = bizConfig.getAdminServiceAccessTokens();\n\n  // if user forget to configure access tokens, then default to pass\n  if (Strings.isNullOrEmpty(accessTokens)) {\n    return true;\n  }\n\n  // no need to check\n  if (Strings.isNullOrEmpty(token)) {\n    return false;\n  }\n\n  // update cache\n  if (!accessTokens.equals(lastAccessTokens)) {\n    synchronized (this) {\n      accessTokenList = ACCESS_TOKEN_SPLITTER.splitToList(accessTokens);\n      lastAccessTokens = accessTokens;\n    }\n  }\n\n  return accessTokenList.contains(token);\n}\n",
    "class_name": "AdminServiceAuthenticationFilter",
    "method_name": "checkAccessToken",
    "arguments": [
        "String token"
    ],
    "generate_test": [
        "The response to the request is as follows:\n\npackage com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        String token = \"test-token\";\n        assertTrue(checkAccessToken(token));\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        // Set up test data\n        String accessTokens = \"token1,token2,token3\";\n        String token = \"token1\";\n\n        // Create instance of AdminServiceAuthenticationFilter\n        BizConfig bizConfig = new BizConfig();\n        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);\n\n        // Test checkAccessToken method\n        boolean result = filter.checkAccessToken(token);\n\n        // Assert that the result is true\n        assertTrue(result);\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        String accessTokens = \"token1,token2\";\n        String token = \"token1\";\n        \n        boolean result = checkAccessToken(accessTokens, token);\n        assertTrue(result);\n        \n        token = \"token3\";\n        result = checkAccessToken(accessTokens, token);\n        assertFalse(result);\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        // Create a new instance of the filter and set its configuration\n        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(new BizConfig());\n        \n        // Test that the method returns true when given a valid access token\n        String validAccessToken = \"abc123\";\n        assertTrue(filter.checkAccessToken(validAccessToken));\n        \n        // Test that the method returns false when given an invalid access token\n        String invalidAccessToken = \"xyz789\";\n        assertFalse(filter.checkAccessToken(invalidAccessToken));\n    }\n}",
        "The response to the given task is as follows:\n\npackage com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        // Arrange\n        String accessTokens = \"accessToken1,accessToken2\";\n        BizConfig bizConfig = new BizConfig();\n        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);\n        \n        // Act\n        boolean result = filter.checkAccessToken(\"accessToken1\");\n        \n        // Assert\n        assertTrue(result);\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        // arrange\n        String accessTokens = \"token1,token2\";\n        String token = \"token3\";\n        \n        // act\n        boolean result = checkAccessToken(accessTokens, token);\n        \n        // assert\n        assertFalse(result);\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        // Create an instance of the filter and provide a BizConfig object\n        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(new BizConfig());\n        \n        // Set up some test data for the access tokens\n        String token1 = \"token1\";\n        String token2 = \"token2\";\n        String token3 = \"token3\";\n        List<String> accessTokens = Arrays.asList(token1, token2, token3);\n        \n        // Set the access tokens in the BizConfig object\n        filter.bizConfig.setAdminServiceAccessTokens(accessTokens);\n        \n        // Call the checkAccessToken method with a valid token\n        boolean result = filter.checkAccessToken(\"token2\");\n        assertTrue(result);\n        \n        // Call the checkAccessToken method with an invalid token\n        result = filter.checkAccessToken(\"invalid-token\");\n        assertFalse(result);\n    }\n}",
        "The response to the given request is as follows:\n\npackage com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        String accessTokens = \"token1, token2\";\n        List<String> expectedAccessTokenList = Arrays.asList(\"token1\", \"token2\");\n\n        // Test case 1: Access tokens are configured and the token is present in the list\n        assertTrue(checkAccessToken(accessTokens, \"token1\"));\n\n        // Test case 2: Access tokens are not configured and the default behavior is to pass\n        assertTrue(checkAccessToken(\"\", \"token1\"));\n\n        // Test case 3: The token is not present in the list of access tokens\n        assertFalse(checkAccessToken(accessTokens, \"token3\"));\n    }\n}\n\nThis test case checks that the `checkAccessToken` method returns the correct result based on the input parameters. The first test case tests that the method returns true if the token is present in the list of access tokens and the list is not empty. The second test case tests that the method returns true if the access tokens are not configured and the default behavior is to pass. The third test case tests that the method returns false if the token is not present in the list of access tokens.",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        // Arrange\n        String token = \"sample_token\";\n        String accessTokens = \"access_tokens_1,access_tokens_2,access_tokens_3\";\n        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(new BizConfig());\n        \n        // Act\n        boolean result = filter.checkAccessToken(token);\n        \n        // Assert\n        assertTrue(result);\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        // Test case 1: Empty token\n        String emptyToken = \"\";\n        assertFalse(checkAccessToken(emptyToken));\n        \n        // Test case 2: Invalid token\n        String invalidToken = \"invalid-token\";\n        assertFalse(checkAccessToken(invalidToken));\n        \n        // Test case 3: Valid token\n        String validToken = \"valid-token\";\n        accessTokenList.add(validToken);\n        assertTrue(checkAccessToken(validToken));\n        \n        // Test case 4: Multiple tokens\n        List<String> multipleTokens = Arrays.asList(\"token1\", \"token2\", \"token3\");\n        accessTokenList.addAll(multipleTokens);\n        assertTrue(checkAccessToken(\"token2\"));\n    }\n}"
    ]
}