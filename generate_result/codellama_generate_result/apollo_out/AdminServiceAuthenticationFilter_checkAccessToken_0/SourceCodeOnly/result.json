{
    "project_name": "apollo",
    "file_name": "AdminServiceAuthenticationFilter.java",
    "relative_path": "apollo/apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/filter/AdminServiceAuthenticationFilter.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.adminservice.filter",
    "docstring": null,
    "source_code": "private boolean checkAccessToken(String token) {\n  String accessTokens = bizConfig.getAdminServiceAccessTokens();\n\n  // if user forget to configure access tokens, then default to pass\n  if (Strings.isNullOrEmpty(accessTokens)) {\n    return true;\n  }\n\n  // no need to check\n  if (Strings.isNullOrEmpty(token)) {\n    return false;\n  }\n\n  // update cache\n  if (!accessTokens.equals(lastAccessTokens)) {\n    synchronized (this) {\n      accessTokenList = ACCESS_TOKEN_SPLITTER.splitToList(accessTokens);\n      lastAccessTokens = accessTokens;\n    }\n  }\n\n  return accessTokenList.contains(token);\n}\n",
    "class_name": "AdminServiceAuthenticationFilter",
    "method_name": "checkAccessToken",
    "arguments": [
        "String token"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        String token = \"test-token\";\n        assertTrue(checkAccessToken(token));\n        \n        // test case 2: empty access tokens in configuration\n        token = null;\n        assertTrue(checkAccessToken(token));\n        \n        // test case 3: invalid access tokens in configuration\n        token = \"invalid-token\";\n        assertFalse(checkAccessToken(token));\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        // Arrange\n        String accessTokens = \"token1,token2\";\n        String token = \"token1\";\n        boolean expectedResult = true;\n        \n        // Act\n        boolean actualResult = checkAccessToken(accessTokens, token);\n        \n        // Assert\n        assertEquals(expectedResult, actualResult);\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        // Arrange\n        String token = \"my-token\";\n        String accessTokens = \"token1,token2,token3\";\n        boolean expectedResult = true;\n\n        // Act\n        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter();\n        boolean actualResult = filter.checkAccessToken(token);\n\n        // Assert\n        assertEquals(expectedResult, actualResult);\n    }\n}",
        "The response to this instruction is as follows:\n\npackage com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        String token = \"my_token\";\n        boolean result = AdminServiceAuthenticationFilter.checkAccessToken(token);\n        assertTrue(result);\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        String token = \"test-token\";\n        boolean result = AdminServiceAuthenticationFilter.checkAccessToken(token);\n        assertFalse(result);\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        // Arrange\n        String token = \"test-token\";\n        boolean expectedResult = true;\n        \n        // Act\n        boolean actualResult = checkAccessToken(token);\n        \n        // Assert\n        assertEquals(expectedResult, actualResult);\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        // Arrange\n        String accessTokens = \"token1,token2,token3\";\n        String token = \"token1\";\n\n        // Act\n        boolean result = checkAccessToken(accessTokens, token);\n\n        // Assert\n        assertTrue(result);\n    }\n}",
        "\npackage com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        // Arrange\n        String token = \"token\";\n        String accessTokens = \"token1,token2,token3\";\n        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter();\n        \n        // Act\n        boolean result = filter.checkAccessToken(token);\n        \n        // Assert\n        assertTrue(result);\n    }\n}\n",
        "@Test\npublic void checkAccessTokenTest() {\n  String accessTokens = \"token1,token2,token3\";\n  String token = \"token2\";\n  \n  // Set up test data\n  when(bizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);\n  AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter();\n  \n  // Perform the actual call\n  boolean result = filter.checkAccessToken(token);\n  \n  // Verify the result\n  assertTrue(result, \"The access token should be valid\");\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        // Test case 1: Token is empty and access tokens are configured\n        String token = \"\";\n        String accessTokens = \"token1,token2\";\n        assertFalse(checkAccessToken(token, accessTokens));\n\n        // Test case 2: Token is not empty and access tokens are configured\n        token = \"valid-token\";\n        assertTrue(checkAccessToken(token, accessTokens));\n\n        // Test case 3: Token is empty and access tokens are not configured\n        token = \"\";\n        accessTokens = \"\";\n        assertFalse(checkAccessToken(token, accessTokens));\n    }\n}"
    ]
}