Source code: 

private boolean checkAccessToken(String token) {
  String accessTokens = bizConfig.getAdminServiceAccessTokens();

  // if user forget to configure access tokens, then default to pass
  if (Strings.isNullOrEmpty(accessTokens)) {
    return true;
  }

  // no need to check
  if (Strings.isNullOrEmpty(token)) {
    return false;
  }

  // update cache
  if (!accessTokens.equals(lastAccessTokens)) {
    synchronized (this) {
      accessTokenList = ACCESS_TOKEN_SPLITTER.splitToList(accessTokens);
      lastAccessTokens = accessTokens;
    }
  }

  return accessTokenList.contains(token);
}



No.1 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdminServiceAuthenticationFilterTest {
    @Test
    public void checkAccessTokenTest() {
        String token = "test-token";
        assertTrue(checkAccessToken(token));
        
        // test case 2: empty access tokens in configuration
        token = null;
        assertTrue(checkAccessToken(token));
        
        // test case 3: invalid access tokens in configuration
        token = "invalid-token";
        assertFalse(checkAccessToken(token));
    }
}


No.2 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdminServiceAuthenticationFilterTest {
    @Test
    public void checkAccessTokenTest() {
        // Arrange
        String accessTokens = "token1,token2";
        String token = "token1";
        boolean expectedResult = true;
        
        // Act
        boolean actualResult = checkAccessToken(accessTokens, token);
        
        // Assert
        assertEquals(expectedResult, actualResult);
    }
}


No.3 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdminServiceAuthenticationFilterTest {
    @Test
    public void checkAccessTokenTest() {
        // Arrange
        String token = "my-token";
        String accessTokens = "token1,token2,token3";
        boolean expectedResult = true;

        // Act
        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter();
        boolean actualResult = filter.checkAccessToken(token);

        // Assert
        assertEquals(expectedResult, actualResult);
    }
}


No.4 generated result --------------------------

The response to this instruction is as follows:

package com.ctrip.framework.apollo.adminservice.filter;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdminServiceAuthenticationFilterTest {
    @Test
    public void checkAccessTokenTest() {
        String token = "my_token";
        boolean result = AdminServiceAuthenticationFilter.checkAccessToken(token);
        assertTrue(result);
    }
}


No.5 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdminServiceAuthenticationFilterTest {
    @Test
    public void checkAccessTokenTest() {
        String token = "test-token";
        boolean result = AdminServiceAuthenticationFilter.checkAccessToken(token);
        assertFalse(result);
    }
}


No.6 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdminServiceAuthenticationFilterTest {
    @Test
    public void checkAccessTokenTest() {
        // Arrange
        String token = "test-token";
        boolean expectedResult = true;
        
        // Act
        boolean actualResult = checkAccessToken(token);
        
        // Assert
        assertEquals(expectedResult, actualResult);
    }
}


No.7 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdminServiceAuthenticationFilterTest {
    @Test
    public void checkAccessTokenTest() {
        // Arrange
        String accessTokens = "token1,token2,token3";
        String token = "token1";

        // Act
        boolean result = checkAccessToken(accessTokens, token);

        // Assert
        assertTrue(result);
    }
}


No.8 generated result --------------------------


package com.ctrip.framework.apollo.adminservice.filter;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdminServiceAuthenticationFilterTest {
    @Test
    public void checkAccessTokenTest() {
        // Arrange
        String token = "token";
        String accessTokens = "token1,token2,token3";
        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter();
        
        // Act
        boolean result = filter.checkAccessToken(token);
        
        // Assert
        assertTrue(result);
    }
}



No.9 generated result --------------------------

@Test
public void checkAccessTokenTest() {
  String accessTokens = "token1,token2,token3";
  String token = "token2";
  
  // Set up test data
  when(bizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);
  AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter();
  
  // Perform the actual call
  boolean result = filter.checkAccessToken(token);
  
  // Verify the result
  assertTrue(result, "The access token should be valid");
}


No.10 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdminServiceAuthenticationFilterTest {
    @Test
    public void checkAccessTokenTest() {
        // Test case 1: Token is empty and access tokens are configured
        String token = "";
        String accessTokens = "token1,token2";
        assertFalse(checkAccessToken(token, accessTokens));

        // Test case 2: Token is not empty and access tokens are configured
        token = "valid-token";
        assertTrue(checkAccessToken(token, accessTokens));

        // Test case 3: Token is empty and access tokens are not configured
        token = "";
        accessTokens = "";
        assertFalse(checkAccessToken(token, accessTokens));
    }
}


