{
    "project_name": "apollo",
    "file_name": "AppController.java",
    "relative_path": "apollo/apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/AppController.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.openapi.v1.controller",
    "docstring": "/**\n   * @see com.ctrip.framework.apollo.portal.controller.AppController#create(AppModel)\n   */",
    "source_code": "\n@Transactional\n@PreAuthorize(value = \"@consumerPermissionValidator.hasCreateApplicationPermission(#request)\")\n@PostMapping(value = \"/apps\")\npublic void createApp(\n    @RequestBody OpenCreateAppDTO req,\n    HttpServletRequest request\n) {\n  if (null == req.getApp()) {\n    throw new BadRequestException(\"App is null\");\n  }\n  final OpenAppDTO app = req.getApp();\n  if (null == app.getAppId()) {\n    throw new BadRequestException(\"AppId is null\");\n  }\n  // create app\n  this.appOpenApiService.createApp(req);\n  if (req.isAssignAppRoleToSelf()) {\n    long consumerId = this.consumerAuthUtil.retrieveConsumerId(request);\n    consumerService.assignAppRoleToConsumer(consumerId, app.getAppId());\n  }\n}\n",
    "class_name": "AppController",
    "method_name": "createApp",
    "arguments": [
        "OpenCreateAppDTO req",
        "HttpServletRequest request"
    ],
    "generate_test": [
        "@Test\npublic void createAppTest() {\n    OpenCreateAppDTO req = new OpenCreateAppDTO();\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    when(request.getParameter(\"appId\")).thenReturn(\"test-app\");\n    when(request.getParameter(\"assignAppRoleToSelf\")).thenReturn(\"true\");\n    req.setAssignAppRoleToSelf(Boolean.valueOf(request.getParameter(\"assignAppRoleToSelf\")));\n    AppController appController = new AppController(null, null, null);\n    appController.createApp(req, request);\n    assertEquals(req.getApp().getAppId(), \"test-app\");\n    assertTrue(req.isAssignAppRoleToSelf());\n}",
        "@Test\npublic void createAppTest() {\n  OpenCreateAppDTO req = new OpenCreateAppDTO();\n  req.setApp(new OpenAppDTO());\n  HttpServletRequest request = mock(HttpServletRequest.class);\n  when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(\"1\");\n  consumerService.assignAppRoleToConsumer(1L, \"test-appid\");\n  appOpenApiService.createApp(req);\n  verify(consumerAuthUtil).hasCreateApplicationPermission(request);\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AppControllerTest {\n    @Test\n    public void createAppTest() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(new OpenAppDTO());\n        req.getApp().setAppId(\"app1\");\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        Mockito.when(request.getAttribute(ConsumerAuthUtil.CONSUMER_ID)).thenReturn(\"consumer1\");\n\n        AppController controller = new AppController();\n        controller.createApp(req, request);\n\n        assertEquals(req.getApp().getAppId(), \"app1\");\n    }\n}",
        "@Test\npublic void createAppTest() {\n    OpenCreateAppDTO req = new OpenCreateAppDTO();\n    req.setApp(new OpenAppDTO());\n    req.getApp().setAppId(\"test-app\");\n    req.setAssignAppRoleToSelf(true);\n    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n    Mockito.when(request.getAttribute(ConsumerAuthUtil.CTRIP_CONSUMER_ID)).thenReturn(\"test-consumer\");\n    AppController appController = new AppController(new ConsumerAuthUtil(), new ConsumerService(), new AppOpenApiService());\n    appController.createApp(req, request);\n    assertTrue(req.isAssignAppRoleToSelf());\n}",
        "@Test\npublic void createAppTest() {\n    // Set up test data\n    OpenCreateAppDTO req = new OpenCreateAppDTO();\n    HttpServletRequest request = mock(HttpServletRequest.class);\n\n    // Set up the behavior of the `appOpenApiService` service\n    AppOpenApiService appOpenApiService = mock(AppOpenApiService.class);\n    when(appOpenApiService.createApp(req)).thenReturn(mock(OpenAppDTO.class));\n\n    // Set up the behavior of the `consumerAuthUtil` utility class\n    ConsumerAuthUtil consumerAuthUtil = mock(ConsumerAuthUtil.class);\n    when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(\"test-consumer-id\");\n\n    // Set up the behavior of the `consumerService` service\n    ConsumerService consumerService = mock(ConsumerService.class);\n    when(consumerService.assignAppRoleToConsumer(anyString(), anyLong())).thenReturn(true);\n\n    // Invoke the method being tested\n    AppController appController = new AppController(appOpenApiService, consumerAuthUtil, consumerService);\n    appController.createApp(req, request);\n\n    // Verify that the appropriate methods were called on the mock services\n    verify(appOpenApiService).createApp(req);\n    verify(consumerAuthUtil).retrieveConsumerId(request);\n    verify(consumerService).assignAppRoleToConsumer(\"test-consumer-id\", anyLong());\n}",
        "The response to the request is as follows:\n\npackage com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AppControllerTest {\n    @Test\n    public void createAppTest() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        HttpServletRequest request = mock(HttpServletRequest.class);\n\n        assertThrows(BadRequestException.class, () -> appController.createApp(req, request));\n    }\n}",
        "@Test\npublic void createAppTest() {\n  OpenCreateAppDTO req = new OpenCreateAppDTO();\n  HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n  Mockito.when(request.getHeader(\"appId\")).thenReturn(\"test-app\");\n  Mockito.when(request.getHeader(\"appName\")).thenReturn(\"Test App\");\n  Mockito.when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(1L);\n  OpenAppDTO app = new OpenAppDTO();\n  app.setAppId(\"test-app\");\n  app.setAppName(\"Test App\");\n  req.setApp(app);\n  consumerService.assignAppRoleToConsumer(1L, \"test-app\");\n  Mockito.when(consumerPermissionValidator.hasCreateApplicationPermission(request)).thenReturn(true);\n  Mockito.when(appOpenApiService.createApp(req)).thenReturn(\"SUCCESS\");\n  Mockito.when(request.getHeader(\"assignAppRoleToSelf\")).thenReturn(\"true\");\n  assertEquals(\"SUCCESS\", appController.createApp(req, request));\n}",
        "@Test\npublic void createAppTest() {\n  // Arrange\n  OpenCreateAppDTO req = new OpenCreateAppDTO();\n  HttpServletRequest request = mock(HttpServletRequest.class);\n  \n  // Act\n  appController.createApp(req, request);\n  \n  // Assert\n  assertEquals(\"App is null\", \"AppId is null\");\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AppControllerTest {\n    @Test\n    public void createAppTest() {\n        // Arrange\n        OpenCreateAppDTO openCreateAppDTO = new OpenCreateAppDTO();\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        String appId = \"appId\";\n        openCreateAppDTO.setApp(new OpenAppDTO());\n        openCreateAppDTO.getApp().setAppId(appId);\n        \n        // Act\n        AppController appController = new AppController();\n        appController.createApp(openCreateAppDTO, request);\n        \n        // Assert\n        assertEquals(openCreateAppDTO.getApp().getAppId(), appId);\n    }\n}",
        "@Test\npublic void createAppTest() {\n    OpenCreateAppDTO req = Mockito.mock(OpenCreateAppDTO.class);\n    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n    \n    // Mock the behavior of the retrieveConsumerId method\n    Mockito.when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(1L);\n    \n    // Invoke the createApp method with the mocked request and DTO objects\n    appController.createApp(req, request);\n    \n    // Verify that the createApp method was called on the appOpenApiService object\n    Mockito.verify(appOpenApiService).createApp(req);\n    \n    // Verify that the retrieveConsumerId method was called with the correct argument\n    Mockito.verify(consumerAuthUtil).retrieveConsumerId(request);\n}"
    ]
}