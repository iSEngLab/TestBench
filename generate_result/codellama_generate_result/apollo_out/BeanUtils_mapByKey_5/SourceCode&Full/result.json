{
    "project_name": "apollo",
    "file_name": "BeanUtils.java",
    "relative_path": "apollo/apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/BeanUtils.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.common.utils",
    "docstring": "/**\n   * \u7528\u4e8e\u5c06\u4e00\u4e2a\u5217\u8868\u8f6c\u6362\u4e3a\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\u7684\u67d0\u4e2a\u5c5e\u6027\u6620\u5c04\u5230\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\n   *\n   * <pre>\n   *      List<UserDTO> userList = userService.queryUsers();\n   *      Map<Integer, userDTO> userIdToUser = BeanUtil.mapByKey(\"userId\", userList);\n   * </pre>\n   *\n   * @param key \u5c5e\u6027\u540d\n   */",
    "source_code": "\n@SuppressWarnings(\"unchecked\")\npublic static <K, V> Map<K, V> mapByKey(String key, List<?> list) {\n  Map<K, V> map = new HashMap<>();\n  if (CollectionUtils.isEmpty(list)) {\n    return map;\n  }\n  try {\n    Class<?> clazz = list.get(0).getClass();\n    Field field = deepFindField(clazz, key);\n    if (field == null) {\n        throw new IllegalArgumentException(\"Could not find the key\");\n    }\n    field.setAccessible(true);\n    for (Object o : list) {\n      map.put((K) field.get(o), (V) o);\n    }\n  } catch (Exception e) {\n    throw new BeanUtilsException(e);\n  }\n  return map;\n}\n",
    "class_name": "BeanUtils",
    "method_name": "mapByKey",
    "arguments": [
        "String key",
        "List<> list"
    ],
    "generate_test": [
        "java\npackage com.ctrip.framework.apollo.common.utils;\n\nimport java.lang.reflect.Field;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.springframework.beans.BeanWrapper;\nimport org.springframework.beans.BeanWrapperImpl;\nimport org.springframework.util.CollectionUtils;\n\npublic class BeanUtils {\n  /**\n   * \u5c06\u4e00\u4e2a\u5bf9\u8c61\u590d\u5236\u5230\u53e6\u4e00\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\u4e0a\uff0c\u5982\u679c\u6e90\u5bf9\u8c61\u4e2d\u67d0\u5c5e\u6027\u4e3anull\uff0c\u5219\u8df3\u8fc7\u8be5\u5c5e\u6027\u800c\u4e0d\u8fdb\u884ccopy\u64cd\u4f5c\u3002\n   */\n  public static <T> T copyPropertiesSkipNull(Object src, Class<T> clazz) {\n    BeanWrapperImpl beanWrapper = new BeanWrapperImpl(src);\n    Map<String, Object> nullPropertyValues = getNullPropertyValues(beanWrapper.getWrappedInstance());\n    return org.springframework.beans.BeanUtils.copyPropertiesExcept(nullPropertyValues, src, clazz);\n  }\n\n  private static Map<String, Object> getNullPropertyValues(Object source) {\n    final BeanWrapperImpl bean = new BeanWrapperImpl(source);\n    return bean.getWrappedInstance().getClass().getDeclaredFields()\n        .stream()\n        .filter(f -> bean.getPropertyValue(f.getName()) == null)\n        .collect(HashMap::new, (m, f) -> m.put(f.getName(), null), HashMap::putAll);\n  }\n}\n    \n\n### JUNIT Test case:",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n  private static final String[] COPY_IGNORED_PROPERTIES = {\"id\", \"dataChangeCreatedBy\", \"dataChangeCreatedTime\", \"dataChangeLastModifiedTime\"};\n\n  @Test\n  public void mapByKeyTest() {\n    List<UserDTO> userList = new ArrayList<>();\n    UserDTO dto1 = new UserDTO();\n    dto1.setId(1L);\n    dto1.setName(\"dto1\");\n    UserDTO dto2 = new UserDTO();\n    dto2.setId(2L);\n    dto2.setName(\"dto2\");\n    userList.add(dto1);\n    userList.add(dto2);\n\n    Map<FILL>\n  }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // \u586b\u5145\u6d4b\u8bd5\u7528\u4f8b\n        List<UserDTO> userList = new ArrayList<>();\n        UserDTO u1 = new UserDTO();\n        u1.setId(1L);\n        u1.setName(\"test1\");\n        UserDTO u2 = new UserDTO();\n        u2.setId(2L);\n        u2.setName(\"test2\");\n        userList.add(u1);\n        userList.add(u2);\n\n        Map<Long, UserDTO> userIdToUser = BeanUtil.mapByKey(\"id\", userList);\n        assertEquals(userIdToUser.size(), 2);\n        assertThat userIdToUser has id and name matched the u1 and u2 from userList\n    }\n}",
        "package com.ctrip.framework.apollo.common.dto;\n\nimport java.util.*;\n\npublic class ServerResponse<T> {\n  private boolean success;\n  private T data;\n  private String message;\n  private long duration;\n\n  public static <T> ServerResponse<T> buildSuccessResponse(T data) {\n    return new ServerResponse<>();\n  }\n}\n    \n\n### JUNIT Test case:\npackage com.ctrip.framework.apollo.common.dto;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ServerResponseTest {\n    @Test\n    public void buildSuccessResponseTest() {\n        <FILL>\n    }\n}\n    \n\n### Response:",
        "/**\n * \u7528\u4e8e\u5c06\u4e00\u4e2a\u5217\u8868\u8f6c\u6362\u4e3a\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\u7684\u67d0\u4e2a\u5c5e\u6027\u6620\u5c04\u5230\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\n *\n * <pre>\n *      List<UserDTO> userList = userService.queryUsers();\n *      Map<Integer, UserDTO> userIdToUser = BeanUtils.mapByKey(\"userId\", userList);\n * </pre>\n */\npublic static <Map, V> Map<Map, V> mapByKey(String key, List<?> list) {\n    return null;\n}\n",
        "package com.ctrip.framework.apollo.common.dto;\n\nimport lombok.*;\n\n@Data\npublic class BaseDTO {\n\n  private String dataChangeCreatedBy;\n\n  private Long dataChangeLastModifiedTime;\n}\n\n    \n\n### Response:",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        List<UserDTO> userList = new ArrayList<>();\n        Map<Integer, UserDTO> userIdToUser = BeanUtil.mapByKey(\"userId\", userList);\n        assertTrue(userIdToUser.isEmpty());\n\n        UserDTO dto1 = new UserDTO();\n        dto1.setUserId(1);\n        dto1.setUserName(\"dto1\");\n        userList.add(dto1);\n        Map<Integer, UserDTO> map1 = BeanUtil.mapByKey(\"userId\", userList);\n        assertEquals(1, map1.size());\n        assertTrue(map1.containsKey(1));\n        assertEquals(dto1, map1.get(1).getUserName());\n\n        UserDTO dto2 = new UserDTO();\n        dto2.setUserId(2);\n        dto2.setUserName(\"dto2\");\n        userList.add(dto2);\n        Map<Integer, UserDTO> map2 = BeanUtil.mapByKey(\"userId\", userList);\n        assertEquals(2, map2.size());\n        assertTrue(map2.containsKey(1));\n        assertTrue(map2.containsKey(2));\n        assertEquals(\"dto1\", map2.get(1).getUserName());\n        assertEquals(\"dto2\", map2.get(2).getUserName());\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport static org.junit.Assert.*;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.Test;\n\npublic class BeanUtilsTest {\n  @Test\n  public void testMapByKey() {\n    // write test for mapByKey here, remember to use deepFindField function\n  }\n}\n    \n\n### Response:",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport java.util.*;\n\n/**\n * \u5bf9\u8c61\u5de5\u5177\u7c7b\uff0c\u63d0\u4f9bcopy\u529f\u80fd\n */\npublic class BeanUtils {\n\n  /**\n   * \u6df1\u590d\u5236\u4e00\u4e2a\u5b9e\u4f53Bean,\u4f1a\u62f7\u8d1d\u7236\u7c7b\u7684\u5c5e\u6027\u3002\u6ce8\u610f\uff0c\u9700\u8981\u8be5bean\u7684\u6240\u6709\u5c5e\u6027\u90fd\u662f\u53ef\u8bbf\u95ee\u7684\u3002\n   */\n  public static <T> T copyEntityProperties(Object src, Class<T> clazz) {\n    if (src == null) {\n      return null;\n    }\n    try {\n      T target = clazz.newInstance();\n      org.springframework.beans.BeanUtils.copyProperties(src, target);\n      return target;\n    } catch (Exception e) {\n      throw new BeanUtilsException(e);\n    }\n  }\n}\n    \n\n### Response:",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport java.util.*;\n\npublic class BeanUtilsTest {\n  @Test\n  public void mapByKeyTest() {\n      List<UserDTO> userList = Arrays.<Fill>asList(new UserDTO(), new UserDTO());\n      Map<Integer, UserDTO> userIdToUser = BeanUtils.mapByKey(\"userId\", userList);\n  }\n}\n    \n\n### Response:"
    ]
}