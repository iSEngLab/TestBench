Source code: 


@SuppressWarnings("unchecked")
public static <K, V> Map<K, V> mapByKey(String key, List<?> list) {
  Map<K, V> map = new HashMap<>();
  if (CollectionUtils.isEmpty(list)) {
    return map;
  }
  try {
    Class<?> clazz = list.get(0).getClass();
    Field field = deepFindField(clazz, key);
    if (field == null) {
        throw new IllegalArgumentException("Could not find the key");
    }
    field.setAccessible(true);
    for (Object o : list) {
      map.put((K) field.get(o), (V) o);
    }
  } catch (Exception e) {
    throw new BeanUtilsException(e);
  }
  return map;
}



No.1 generated result --------------------------

java
package com.ctrip.framework.apollo.common.utils;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;
import org.springframework.beans.BeanWrapper;
import org.springframework.beans.BeanWrapperImpl;
import org.springframework.util.CollectionUtils;

public class BeanUtils {
  /**
   * 将一个对象复制到另一个相同类型的对象上，如果源对象中某属性为null，则跳过该属性而不进行copy操作。
   */
  public static <T> T copyPropertiesSkipNull(Object src, Class<T> clazz) {
    BeanWrapperImpl beanWrapper = new BeanWrapperImpl(src);
    Map<String, Object> nullPropertyValues = getNullPropertyValues(beanWrapper.getWrappedInstance());
    return org.springframework.beans.BeanUtils.copyPropertiesExcept(nullPropertyValues, src, clazz);
  }

  private static Map<String, Object> getNullPropertyValues(Object source) {
    final BeanWrapperImpl bean = new BeanWrapperImpl(source);
    return bean.getWrappedInstance().getClass().getDeclaredFields()
        .stream()
        .filter(f -> bean.getPropertyValue(f.getName()) == null)
        .collect(HashMap::new, (m, f) -> m.put(f.getName(), null), HashMap::putAll);
  }
}
    

### JUNIT Test case:


No.2 generated result --------------------------

package com.ctrip.framework.apollo.common.utils;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BeanUtilsTest {
  private static final String[] COPY_IGNORED_PROPERTIES = {"id", "dataChangeCreatedBy", "dataChangeCreatedTime", "dataChangeLastModifiedTime"};

  @Test
  public void mapByKeyTest() {
    List<UserDTO> userList = new ArrayList<>();
    UserDTO dto1 = new UserDTO();
    dto1.setId(1L);
    dto1.setName("dto1");
    UserDTO dto2 = new UserDTO();
    dto2.setId(2L);
    dto2.setName("dto2");
    userList.add(dto1);
    userList.add(dto2);

    Map<FILL>
  }
}


No.3 generated result --------------------------

package com.ctrip.framework.apollo.common.utils;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BeanUtilsTest {
    @Test
    public void mapByKeyTest() {
        // 填充测试用例
        List<UserDTO> userList = new ArrayList<>();
        UserDTO u1 = new UserDTO();
        u1.setId(1L);
        u1.setName("test1");
        UserDTO u2 = new UserDTO();
        u2.setId(2L);
        u2.setName("test2");
        userList.add(u1);
        userList.add(u2);

        Map<Long, UserDTO> userIdToUser = BeanUtil.mapByKey("id", userList);
        assertEquals(userIdToUser.size(), 2);
        assertThat userIdToUser has id and name matched the u1 and u2 from userList
    }
}


No.4 generated result --------------------------

package com.ctrip.framework.apollo.common.dto;

import java.util.*;

public class ServerResponse<T> {
  private boolean success;
  private T data;
  private String message;
  private long duration;

  public static <T> ServerResponse<T> buildSuccessResponse(T data) {
    return new ServerResponse<>();
  }
}
    

### JUNIT Test case:
package com.ctrip.framework.apollo.common.dto;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ServerResponseTest {
    @Test
    public void buildSuccessResponseTest() {
        <FILL>
    }
}
    

### Response:


No.5 generated result --------------------------

/**
 * 用于将一个列表转换为列表中的对象的某个属性映射到列表中的对象
 *
 * <pre>
 *      List<UserDTO> userList = userService.queryUsers();
 *      Map<Integer, UserDTO> userIdToUser = BeanUtils.mapByKey("userId", userList);
 * </pre>
 */
public static <Map, V> Map<Map, V> mapByKey(String key, List<?> list) {
    return null;
}



No.6 generated result --------------------------

package com.ctrip.framework.apollo.common.dto;

import lombok.*;

@Data
public class BaseDTO {

  private String dataChangeCreatedBy;

  private Long dataChangeLastModifiedTime;
}

    

### Response:


No.7 generated result --------------------------

package com.ctrip.framework.apollo.common.utils;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BeanUtilsTest {
    @Test
    public void mapByKeyTest() {
        List<UserDTO> userList = new ArrayList<>();
        Map<Integer, UserDTO> userIdToUser = BeanUtil.mapByKey("userId", userList);
        assertTrue(userIdToUser.isEmpty());

        UserDTO dto1 = new UserDTO();
        dto1.setUserId(1);
        dto1.setUserName("dto1");
        userList.add(dto1);
        Map<Integer, UserDTO> map1 = BeanUtil.mapByKey("userId", userList);
        assertEquals(1, map1.size());
        assertTrue(map1.containsKey(1));
        assertEquals(dto1, map1.get(1).getUserName());

        UserDTO dto2 = new UserDTO();
        dto2.setUserId(2);
        dto2.setUserName("dto2");
        userList.add(dto2);
        Map<Integer, UserDTO> map2 = BeanUtil.mapByKey("userId", userList);
        assertEquals(2, map2.size());
        assertTrue(map2.containsKey(1));
        assertTrue(map2.containsKey(2));
        assertEquals("dto1", map2.get(1).getUserName());
        assertEquals("dto2", map2.get(2).getUserName());
    }
}


No.8 generated result --------------------------

package com.ctrip.framework.apollo.common.utils;

import static org.junit.Assert.*;

import java.util.HashMap;
import java.util.Map;
import org.junit.Test;

public class BeanUtilsTest {
  @Test
  public void testMapByKey() {
    // write test for mapByKey here, remember to use deepFindField function
  }
}
    

### Response:


No.9 generated result --------------------------

package com.ctrip.framework.apollo.common.utils;

import java.util.*;

/**
 * 对象工具类，提供copy功能
 */
public class BeanUtils {

  /**
   * 深复制一个实体Bean,会拷贝父类的属性。注意，需要该bean的所有属性都是可访问的。
   */
  public static <T> T copyEntityProperties(Object src, Class<T> clazz) {
    if (src == null) {
      return null;
    }
    try {
      T target = clazz.newInstance();
      org.springframework.beans.BeanUtils.copyProperties(src, target);
      return target;
    } catch (Exception e) {
      throw new BeanUtilsException(e);
    }
  }
}
    

### Response:


No.10 generated result --------------------------

package com.ctrip.framework.apollo.common.utils;

import java.util.*;

public class BeanUtilsTest {
  @Test
  public void mapByKeyTest() {
      List<UserDTO> userList = Arrays.<Fill>asList(new UserDTO(), new UserDTO());
      Map<Integer, UserDTO> userIdToUser = BeanUtils.mapByKey("userId", userList);
  }
}
    

### Response:


