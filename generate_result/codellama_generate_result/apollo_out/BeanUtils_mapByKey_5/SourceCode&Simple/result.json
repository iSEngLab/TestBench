{
    "project_name": "apollo",
    "file_name": "BeanUtils.java",
    "relative_path": "apollo/apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/BeanUtils.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.common.utils",
    "docstring": "/**\n   * \u7528\u4e8e\u5c06\u4e00\u4e2a\u5217\u8868\u8f6c\u6362\u4e3a\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\u7684\u67d0\u4e2a\u5c5e\u6027\u6620\u5c04\u5230\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\n   *\n   * <pre>\n   *      List<UserDTO> userList = userService.queryUsers();\n   *      Map<Integer, userDTO> userIdToUser = BeanUtil.mapByKey(\"userId\", userList);\n   * </pre>\n   *\n   * @param key \u5c5e\u6027\u540d\n   */",
    "source_code": "\n@SuppressWarnings(\"unchecked\")\npublic static <K, V> Map<K, V> mapByKey(String key, List<?> list) {\n  Map<K, V> map = new HashMap<>();\n  if (CollectionUtils.isEmpty(list)) {\n    return map;\n  }\n  try {\n    Class<?> clazz = list.get(0).getClass();\n    Field field = deepFindField(clazz, key);\n    if (field == null) {\n        throw new IllegalArgumentException(\"Could not find the key\");\n    }\n    field.setAccessible(true);\n    for (Object o : list) {\n      map.put((K) field.get(o), (V) o);\n    }\n  } catch (Exception e) {\n    throw new BeanUtilsException(e);\n  }\n  return map;\n}\n",
    "class_name": "BeanUtils",
    "method_name": "mapByKey",
    "arguments": [
        "String key",
        "List<> list"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Test 1: Null list\n        assertThrows(IllegalArgumentException.class, () -> BeanUtils.mapByKey(\"key\", null));\n\n        // Test 2: Empty list\n        List<Object> emptyList = new ArrayList<>();\n        assertEquals(Collections.emptyMap(), BeanUtils.mapByKey(\"key\", emptyList));\n\n        // Test 3: List with objects that don't have the key field\n        List<String> stringList = new ArrayList<>();\n        stringList.add(\"string1\");\n        stringList.add(\"string2\");\n        assertEquals(Collections.emptyMap(), BeanUtils.mapByKey(\"key\", stringList));\n\n        // Test 4: List with objects that have the key field\n        List<Person> personList = new ArrayList<>();\n        Person p1 = new Person();\n        p1.setName(\"John\");\n        p1.setAge(25);\n        Person p2 = new Person();\n        p2.setName(\"Jane\");\n        p2.setAge(30);\n        personList.add(p1);\n        personList.add(p2);\n        Map<String, Person> expectedMap = new HashMap<>();\n        expectedMap.put(\"John\", p1);\n        expectedMap.put(\"Jane\", p2);\n        assertEquals(expectedMap, BeanUtils.mapByKey(\"name\", personList));\n    }\n}",
        "@Test\npublic void mapByKeyTest() {\n    String key = \"key\";\n    List<String> list = new ArrayList<>();\n    Map<String, Object> expectedMap = new HashMap<>();\n    expectedMap.put(key, \"value\");\n    assertEquals(expectedMap, BeanUtils.mapByKey(key, list));\n}",
        "@Test\npublic void mapByKeyTest() {\n  String key = \"key\";\n  List<Object> list = new ArrayList<>();\n  Map<String, Object> expectedMap = new HashMap<>();\n  expectedMap.put(key, \"value1\");\n  expectedMap.put(key, \"value2\");\n  Map<String, Object> actualMap = BeanUtils.mapByKey(key, list);\n  assertEquals(expectedMap, actualMap);\n}",
        "\npackage com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Create a sample list of objects\n        List<Person> personList = new ArrayList<>();\n        Person p1 = new Person(\"John\", \"Smith\");\n        Person p2 = new Person(\"Jane\", \"Doe\");\n        Person p3 = new Person(\"James\", \"Bond\");\n        personList.add(p1);\n        personList.add(p2);\n        personList.add(p3);\n\n        // Create a map with the key set to the first name of each person in the list\n        Map<String, Person> personMap = BeanUtils.mapByKey(\"firstName\", personList);\n\n        // Verify that the map contains 3 entries\n        assertEquals(personMap.size(), 3);\n\n        // Verify that each entry in the map has a key set to the first name of the corresponding person in the list\n        for (Person p : personList) {\n            assertTrue(personMap.containsKey(p.getFirstName()));\n        }\n    }\n}\n\nIn this test case, we create a sample list of Person objects and pass it to the BeanUtils.mapByKey() method with \"firstName\" as the key parameter. The method returns a map with the first name of each person in the list as the key, and the corresponding person object as the value.\n\nWe then verify that the map contains 3 entries, and that each entry has a key set to the first name of the corresponding person in the list.",
        "\npackage com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Sample input list\n        List<Person> personList = new ArrayList<>();\n        personList.add(new Person(\"John\", \"Doe\"));\n        personList.add(new Person(\"Jane\", \"Doe\"));\n        personList.add(new Person(\"Jack\", \"Smith\"));\n\n        // Expected output map\n        Map<String, Person> expectedMap = new HashMap<>();\n        expectedMap.put(\"John\", new Person(\"John\", \"Doe\"));\n        expectedMap.put(\"Jane\", new Person(\"Jane\", \"Doe\"));\n        expectedMap.put(\"Jack\", new Person(\"Jack\", \"Smith\"));\n\n        // Call the method under test\n        Map<String, Object> actualMap = BeanUtils.mapByKey(\"name\", personList);\n\n        // Verify that the output map has the expected structure\n        assertEquals(expectedMap, actualMap);\n    }\n}\n",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Create a sample list of objects with the specified key field\n        List<SampleObject> list = new ArrayList<>();\n        SampleObject obj1 = new SampleObject();\n        obj1.setId(1);\n        obj1.setName(\"obj1\");\n        list.add(obj1);\n        SampleObject obj2 = new SampleObject();\n        obj2.setId(2);\n        obj2.setName(\"obj2\");\n        list.add(obj2);\n        SampleObject obj3 = new SampleObject();\n        obj3.setId(3);\n        obj3.setName(\"obj3\");\n        list.add(obj3);\n\n        // Call the mapByKey method with the sample list and key field\n        Map<Integer, SampleObject> map = BeanUtils.mapByKey(\"id\", list);\n\n        // Check that the resulting map contains the correct values for each object\n        assertEquals(map.get(1), obj1);\n        assertEquals(map.get(2), obj2);\n        assertEquals(map.get(3), obj3);\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Empty list test case\n        List<String> emptyList = Collections.emptyList();\n        Map<String, String> actualMap = BeanUtils.mapByKey(\"key\", emptyList);\n        assertTrue(actualMap.isEmpty());\n\n        // Valid list test case\n        List<String> validList = Arrays.asList(\"A\", \"B\", \"C\");\n        Map<String, String> expectedMap = new HashMap<>();\n        expectedMap.put(\"key\", \"A\");\n        expectedMap.put(\"key\", \"B\");\n        expectedMap.put(\"key\", \"C\");\n        Map<String, String> actualMap = BeanUtils.mapByKey(\"key\", validList);\n        assertEquals(expectedMap, actualMap);\n    }\n}",
        "\n@Test\npublic void mapByKeyTest() {\n    String key = \"id\";\n    List<Object> list = new ArrayList<>();\n    Map<String, Object> expectedMap = new HashMap<>();\n\n    assertEquals(expectedMap, BeanUtils.mapByKey(key, list));\n\n    Object o1 = new Object();\n    Object o2 = new Object();\n    list.add(o1);\n    list.add(o2);\n\n    expectedMap.put(\"id\", o1);\n    expectedMap.put(\"id\", o2);\n\n    assertEquals(expectedMap, BeanUtils.mapByKey(key, list));\n}",
        "\n@Test\npublic void mapByKeyTest() {\n    String key = \"id\";\n    List<Integer> list = new ArrayList<>();\n    list.add(1);\n    list.add(2);\n    Map<Integer, Integer> expectedMap = new HashMap<>();\n    expectedMap.put(1, 1);\n    expectedMap.put(2, 2);\n    assertEquals(expectedMap, BeanUtils.mapByKey(key, list));\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Create a list of objects with the \"key\" property set to different values\n        List<Object> list = new ArrayList<>();\n        Object obj1 = new Object();\n        ((BeanWrapper)obj1).setPropertyValue(\"key\", \"value1\");\n        list.add(obj1);\n        Object obj2 = new Object();\n        ((BeanWrapper)obj2).setPropertyValue(\"key\", \"value2\");\n        list.add(obj2);\n\n        // Call the mapByKey method with the key and list parameters\n        Map<String, Object> result = BeanUtils.mapByKey(\"key\", list);\n\n        // Assert that the resulting map contains two entries, one for each object in the list\n        assertEquals(2, result.size());\n        assertTrue(result.containsKey(\"value1\"));\n        assertTrue(result.containsKey(\"value2\"));\n    }\n}"
    ]
}