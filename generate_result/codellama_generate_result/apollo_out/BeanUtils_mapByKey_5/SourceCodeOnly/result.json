{
    "project_name": "apollo",
    "file_name": "BeanUtils.java",
    "relative_path": "apollo/apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/BeanUtils.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.common.utils",
    "docstring": "/**\n   * \u7528\u4e8e\u5c06\u4e00\u4e2a\u5217\u8868\u8f6c\u6362\u4e3a\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\u7684\u67d0\u4e2a\u5c5e\u6027\u6620\u5c04\u5230\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\n   *\n   * <pre>\n   *      List<UserDTO> userList = userService.queryUsers();\n   *      Map<Integer, userDTO> userIdToUser = BeanUtil.mapByKey(\"userId\", userList);\n   * </pre>\n   *\n   * @param key \u5c5e\u6027\u540d\n   */",
    "source_code": "\n@SuppressWarnings(\"unchecked\")\npublic static <K, V> Map<K, V> mapByKey(String key, List<?> list) {\n  Map<K, V> map = new HashMap<>();\n  if (CollectionUtils.isEmpty(list)) {\n    return map;\n  }\n  try {\n    Class<?> clazz = list.get(0).getClass();\n    Field field = deepFindField(clazz, key);\n    if (field == null) {\n        throw new IllegalArgumentException(\"Could not find the key\");\n    }\n    field.setAccessible(true);\n    for (Object o : list) {\n      map.put((K) field.get(o), (V) o);\n    }\n  } catch (Exception e) {\n    throw new BeanUtilsException(e);\n  }\n  return map;\n}\n",
    "class_name": "BeanUtils",
    "method_name": "mapByKey",
    "arguments": [
        "String key",
        "List<> list"
    ],
    "generate_test": [
        "\npackage com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Arrange\n        String key = \"key\";\n        List<Object> list = new ArrayList<>();\n        Object obj1 = new Object();\n        Object obj2 = new Object();\n        list.add(obj1);\n        list.add(obj2);\n        \n        // Act\n        Map<Object, Object> result = BeanUtils.mapByKey(key, list);\n        \n        // Assert\n        assertEquals(2, result.size());\n        assertTrue(result.containsKey(key));\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() throws Exception {\n        List<Object> list = new ArrayList<>();\n        list.add(new Object()); // Add an example object to the list\n        Map<String, Object> resultMap = BeanUtils.mapByKey(\"key\", list);\n        assertEquals(1, resultMap.size()); // Verify that the map contains one entry\n        assertTrue(resultMap.containsKey(\"key\")); // Verify that the key is in the map\n    }\n}",
        "\npackage com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        List<String> list = new ArrayList<>();\n        list.add(\"hello\");\n        list.add(\"world\");\n\n        Map<String, Object> map = BeanUtils.mapByKey(list);\n\n        assertEquals(2, map.size());\n        assertTrue(map.containsKey(\"hello\"));\n        assertTrue(map.containsKey(\"world\"));\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        List<String> list = new ArrayList<>();\n        Map<String, String> map = BeanUtils.mapByKey(\"key\", list);\n        \n        assertEquals(0, map.size());\n        \n        list.add(\"value1\");\n        list.add(\"value2\");\n        map = BeanUtils.mapByKey(\"key\", list);\n        \n        assertEquals(2, map.size());\n        assertTrue(map.containsKey(\"value1\"));\n        assertTrue(map.containsKey(\"value2\"));\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        Map<String, Object> map = new HashMap<>();\n        \n        List<?> list = Arrays.asList(new Object(), new Object());\n        String key = \"key\";\n        \n        try {\n            Class<?> clazz = list.get(0).getClass();\n            Field field = deepFindField(clazz, key);\n            \n            if (field == null) {\n                throw new IllegalArgumentException(\"Could not find the key\");\n            }\n            \n            field.setAccessible(true);\n            \n            for (Object o : list) {\n                map.put((String) field.get(o), (Object) o);\n            }\n        } catch (Exception e) {\n            throw new BeanUtilsException(e);\n        }\n        \n        assertEquals(2, map.size());\n    }\n}",
        "I'm not sure I understand what you are saying with \"",
        "package com.ctrip.framework.apollo.common.utils;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // given\n        String key = \"name\";\n        List<String> list = new ArrayList<>();\n        list.add(\"John\");\n        list.add(\"Jane\");\n        \n        // when\n        Map<String, String> resultMap = BeanUtils.mapByKey(key, list);\n        \n        // then\n        assertEquals(2, resultMap.size());\n        assertTrue(resultMap.containsKey(\"John\"));\n        assertTrue(resultMap.containsKey(\"Jane\"));\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() throws Exception {\n        // Create a list of objects with a key field\n        List<Object> objects = new ArrayList<>();\n        Object object1 = new Object();\n        Field field1 = object1.getClass().getDeclaredField(\"key\");\n        field1.setAccessible(true);\n        field1.set(object1, \"value1\");\n        objects.add(object1);\n        Object object2 = new Object();\n        Field field2 = object2.getClass().getDeclaredField(\"key\");\n        field2.setAccessible(true);\n        field2.set(object2, \"value2\");\n        objects.add(object2);\n\n        // Create a map using the key field and the objects list\n        Map<String, Object> map = BeanUtils.mapByKey(\"key\", objects);\n\n        // Verify that the map contains the expected keys and values\n        assertEquals(map.size(), 2);\n        assertTrue(map.containsKey(\"value1\"));\n        assertTrue(map.containsValue(object1));\n        assertTrue(map.containsKey(\"value2\"));\n        assertTrue(map.containsValue(object2));\n    }\n}",
        "\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Test case 1: empty list\n        List<?> list = new ArrayList<>();\n        Map<K, V> result = BeanUtils.mapByKey(\"key\", list);\n        assertEquals(0, result.size());\n\n        // Test case 2: null key\n        list = Arrays.asList(new Object(), new Object());\n        try {\n            BeanUtils.mapByKey(null, list);\n            fail(\"Expected NullPointerException\");\n        } catch (NullPointerException e) {\n            // Expected\n        }\n\n        // Test case 3: empty key\n        try {\n            BeanUtils.mapByKey(\"\", list);\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // Expected\n        }\n\n        // Test case 4: single object with one field\n        Object obj1 = new Object();\n        ReflectionUtils.setFieldValue(obj1, \"key\", \"value1\");\n        list = Arrays.asList(obj1);\n        result = BeanUtils.mapByKey(\"key\", list);\n        assertEquals(1, result.size());\n        assertEquals(\"value1\", result.get(\"key\"));\n\n        // Test case 5: single object with multiple fields\n        Object obj2 = new Object();\n        ReflectionUtils.setFieldValue(obj2, \"key1\", \"value2\");\n        ReflectionUtils.setFieldValue(obj2, \"key2\", \"value3\");\n        list = Arrays.asList(obj2);\n        result = BeanUtils.mapByKey(\"key1\", list);\n        assertEquals(1, result.size());\n        assertEquals(\"value2\", result.get(\"key1\"));\n\n        // Test case 6: nested fields\n        Object obj3 = new Object();\n        ReflectionUtils.setFieldValue(obj3, \"key1\", new Object[]{\"nestedKey1\", \"nestedValue1\"});\n        ReflectionUtils.setFieldValue(obj3, \"key2\", new Object[]{\"nestedKey2\", \"nestedValue2\"});\n        list = Arrays.asList(obj3);\n        result = BeanUtils.mapByKey(\"key1[0]\", list);\n        assertEquals(1, result.size());\n        assertEquals(\"nestedValue1\", result.get(\"key1[0]\"));\n\n        // Test case 7: arrays of objects\n        Object obj4 = new Object();\n        ReflectionUtils.setFieldValue(obj4, \"key1\", new String[]{\"value4\"});\n        ReflectionUtils.setFieldValue(obj4, \"key2\", new String[]{\"value5\"});\n        list = Arrays.asList(obj4);\n        result = BeanUtils.mapByKey(\"key1[0]\", list);\n        assertEquals(1, result.size());\n        assertEquals(\"value4\", result.get(\"key1[0]\"));\n\n        // Test case 8: maps with complex keys\n        Object obj5 = new Object();\n        ReflectionUtils.setFieldValue(obj5, \"key1\", Collections.singletonMap(\"nestedKey1\", \"nestedValue1\"));\n        ReflectionUtils.setFieldValue(obj5, \"key2\", Collections.singletonMap(\"nestedKey2\", \"nestedValue2\"));\n        list = Arrays.asList(obj5);\n        result = BeanUtils.mapByKey(\"key1['nestedKey1']\", list);\n        assertEquals(1, result.size());\n        assertEquals(\"nestedValue1\", result.get(\"key1['nestedKey1']\"));\n\n        // Test case 9: null values in the list\n        Object obj6 = new Object();\n        ReflectionUtils.setFieldValue(obj6, \"key1\", \"value6\");\n        ReflectionUtils.setFieldValue(obj6, \"key2\", null);\n        list = Arrays.asList(obj6);\n        result = BeanUtils.mapByKey(\"key1\", list);\n        assertEquals(1, result.size());\n        assertEquals(\"value6\", result.get(\"key1\"));\n\n        // Test case 10: exceptions thrown by the deepFindField method\n        Object obj7 = new Object();\n        ReflectionUtils.setFieldValue(obj7, \"key1\", \"value7\");\n        list = Arrays.asList(obj7);\n        try {\n            BeanUtils.mapByKey(\"key2\", list);\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // Expected\n        }\n    }\n}\n",
        "\npackage com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        String key = \"key\";\n        List<Object> list = new ArrayList<>();\n        Object o1 = new Object();\n        Object o2 = new Object();\n        list.add(o1);\n        list.add(o2);\n        \n        Map<String, Object> map = BeanUtils.mapByKey(key, list);\n        assertEquals(2, map.size());\n        assertTrue(map.containsKey(key));\n    }\n}"
    ]
}