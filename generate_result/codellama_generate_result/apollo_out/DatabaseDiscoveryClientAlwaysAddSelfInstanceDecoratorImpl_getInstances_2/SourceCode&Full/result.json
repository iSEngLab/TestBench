{
    "project_name": "apollo",
    "file_name": "DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl.java",
    "relative_path": "apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/registry/DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.biz.registry",
    "docstring": "/**\n   * if the serviceName is same with self, always return self's instance\n   * @return never be empty list when serviceName is same with self\n   */",
    "source_code": "\n@Override\npublic List<ServiceInstance> getInstances(String serviceName) {\n  if (Objects.equals(serviceName, this.selfInstance.getServiceName())) {\n    List<ServiceInstance> serviceInstances = this.delegate.getInstances(serviceName);\n    if (containSelf(serviceInstances, this.selfInstance)) {\n      // contains self instance already\n      return serviceInstances;\n    }\n\n    // add self instance to result\n    List<ServiceInstance> result = new ArrayList<>(serviceInstances.size() + 1);\n    result.add(this.selfInstance);\n    result.addAll(serviceInstances);\n    return result;\n  } else {\n    return this.delegate.getInstances(serviceName);\n  }\n}\n",
    "class_name": "DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl",
    "method_name": "getInstances",
    "arguments": [
        "String serviceName"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    @Test\n    public void getInstancesTest() {\n        // Arrange\n        String serviceName = \"testService\";\n        ServiceInstance selfInstance = new ServiceInstance(serviceName, URI.create(\"http://localhost:8080\"));\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(null, selfInstance);\n\n        // Act\n        List<ServiceInstance> result = decorator.getInstances(serviceName);\n\n        // Assert\n        assertEquals(2, result.size());\n        assertTrue(result.contains(selfInstance));\n    }\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    @Test\n    public void getInstancesTest() {\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(\n            // provide a mock instance of the delegate class here\n            null,\n            // provide a mock instance of the self instance class here\n            null);\n        List<ServiceInstance> result = decorator.getInstances(\"test\");\n        assertFalse(result.isEmpty());\n    }\n}",
        "This is a decorator pattern implementation that adds the ability to always return the self instance when getting instances from a database. The class `DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl` wraps around an existing `DatabaseDiscoveryClient` and ensures that the result list of instances always contains the self instance, even if it is not in the original result.\n\nThe implementation contains a method called `getInstances(String serviceName)` which checks if the service name passed as parameter is the same with the self instance's service name. If it is, then it returns the result list of instances from the wrapped `DatabaseDiscoveryClient` and ensures that the self instance is present in the list by calling the static method `containSelf(List<ServiceInstance> serviceInstances, ServiceInstance selfInstance)`.\n\nIf the service name passed as parameter is not the same with the self instance's service name, then it simply returns the result of the wrapped `DatabaseDiscoveryClient`'s `getInstances(String serviceName)` method.\n\nThe class also has a constructor that takes in an existing `DatabaseDiscoveryClient` and a `ServiceInstance` as parameters to initialize its state.\n\nIt seems like this implementation is designed to be used as a decorator for the `DatabaseDiscoveryClient` interface, so it can be easily plugged into existing code that uses this interface without having to modify the existing code itself.",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    private final ServiceInstance selfInstance = new ServiceInstance(\"service-name\", \"http://localhost:8080/\", \"cluster\");\n    private final DatabaseDiscoveryClient delegate = mock(DatabaseDiscoveryClient.class);\n    private final DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = \n        new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n\n    @Test\n    public void getInstances_withSameServiceNameAsSelf_returnsListContainingSelf() {\n        // Arrange\n        String serviceName = \"service-name\";\n        List<ServiceInstance> expectedResult = new ArrayList<>();\n        expectedResult.add(selfInstance);\n\n        when(delegate.getInstances(serviceName)).thenReturn(expectedResult);\n\n        // Act\n        List<ServiceInstance> actualResult = decorator.getInstances(serviceName);\n\n        // Assert\n        assertEquals(1, actualResult.size());\n        assertEquals(selfInstance, actualResult.get(0));\n    }\n\n    @Test\n    public void getInstances_withDifferentServiceNameAsSelf_returnsListContainingDelegateResult() {\n        // Arrange\n        String serviceName = \"different-service-name\";\n        List<ServiceInstance> expectedResult = new ArrayList<>();\n        expectedResult.add(new ServiceInstance(\"different-service-name\", \"http://localhost:8081/\", \"cluster\"));\n\n        when(delegate.getInstances(serviceName)).thenReturn(expectedResult);\n\n        // Act\n        List<ServiceInstance> actualResult = decorator.getInstances(serviceName);\n\n        // Assert\n        assertEquals(1, actualResult.size());\n        assertNotEquals(selfInstance, actualResult.get(0));\n    }\n}",
        "@BeforeEach\nvoid setUp() {\n    DatabaseDiscoveryClient delegate = mock(DatabaseDiscoveryClient.class);\n    ServiceInstance selfInstance = new ServiceInstance();\n    selfInstance.setServiceName(\"self\");\n    selfInstance.setUri(URI.create(\"http://localhost:8080\"));\n    selfInstance.setCluster(\"default\");\n    \n    decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n}\n\n@Test\nvoid getInstances_sameServiceName_containsSelf() {\n    List<ServiceInstance> serviceInstances = Collections.singletonList(selfInstance);\n    \n    when(delegate.getInstances(\"test\")).thenReturn(serviceInstances);\n    \n    assertEquals(1, decorator.getInstances(\"test\").size());\n    assertTrue(decorator.getInstances(\"test\").contains(selfInstance));\n}\n\n@Test\nvoid getInstances_sameServiceName_doesNotContainSelf() {\n    List<ServiceInstance> serviceInstances = new ArrayList<>();\n    \n    when(delegate.getInstances(\"test\")).thenReturn(serviceInstances);\n    \n    assertEquals(1, decorator.getInstances(\"test\").size());\n    assertTrue(decorator.getInstances(\"test\").contains(selfInstance));\n}\n\n@Test\nvoid getInstances_differentServiceName() {\n    List<ServiceInstance> serviceInstances = Collections.singletonList(selfInstance);\n    \n    when(delegate.getInstances(\"test\")).thenReturn(serviceInstances);\n    \n    assertEquals(1, decorator.getInstances(\"test\").size());\n    assertTrue(decorator.getInstances(\"test\").contains(selfInstance));\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    @Test\n    public void getInstancesTest() {\n        // Arrange\n        DatabaseDiscoveryClient delegate = new <FILL IN>; // create an instance of the delegate client\n        ServiceInstance selfInstance = new ServiceInstance(<FILL IN>); // create a service instance for the current service\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n        \n        // Act\n        List<ServiceInstance> result = decorator.getInstances(\"serviceName\");\n        \n        // Assert\n        assertEquals(2, result.size()); // check that the result contains 2 instances (self instance and a different instance)\n        assertTrue(result.contains(selfInstance)); // check that self instance is present in the result\n    }\n}",
        "Here is the completed unit test for the JAVA Source Code provided, using JUNIT:\n\npackage com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    @Test\n    public void getInstancesTest() {\n        // Arrange\n        String serviceName = \"testService\";\n        ServiceInstance selfInstance = new ServiceInstance(serviceName, \"http://localhost:8080/\");\n        DatabaseDiscoveryClient delegate = new FakeDatabaseDiscoveryClient();\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n        \n        // Act\n        List<ServiceInstance> result = decorator.getInstances(serviceName);\n        \n        // Assert\n        assertEquals(2, result.size());\n        assertTrue(result.contains(selfInstance));\n    }\n}\n\nNote: The FakeDatabaseDiscoveryClient is a stub implementation of the DatabaseDiscoveryClient interface that returns empty list by default.",
        "@Override\npublic List<ServiceInstance> getInstances(String serviceName) {\n  if (Objects.equals(serviceName, this.selfInstance.getServiceName())) {\n    List<ServiceInstance> serviceInstances = this.delegate.getInstances(serviceName);\n    if (containSelf(serviceInstances, this.selfInstance)) {\n      // contains self instance already\n      return serviceInstances;\n    }\n\n    // add self instance to result\n    List<ServiceInstance> result = new ArrayList<>(serviceInstances.size() + 1);\n    result.add(this.selfInstance);\n    result.addAll(serviceInstances);\n    return result;\n  } else {\n    return this.delegate.getInstances(serviceName);\n  }\n}",
        "@Test\npublic void getInstancesTest() {\n    String serviceName = \"exampleService\";\n    ServiceInstance selfInstance = new ServiceInstance(serviceName, \"http://localhost/example\");\n    DatabaseDiscoveryClient delegate = Mockito.mock(DatabaseDiscoveryClient.class);\n    List<ServiceInstance> expectedInstances = Arrays.asList(new ServiceInstance(serviceName, \"http://localhost/example\"), new ServiceInstance(serviceName, \"http://localhost/example2\"));\n    when(delegate.getInstances(eq(serviceName))).thenReturn(expectedInstances);\n    \n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    List<ServiceInstance> actualInstances = decorator.getInstances(serviceName);\n    \n    assertEquals(expectedInstances.size() + 1, actualInstances.size());\n    assertTrue(actualInstances.contains(selfInstance));\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    @Test\n    public void getInstancesTest() {\n        // Create a new instance of the ServiceInstance class that represents the self-instance\n        ServiceInstance selfInstance = new ServiceInstance(\"my-service\", \"http://localhost:8080\");\n\n        // Create an instance of the DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl class and pass it the self-instance\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(selfInstance);\n\n        // Test the behavior of the getInstances method when the service name is not the same as the self-instance's service name\n        String otherServiceName = \"other-service\";\n        List<ServiceInstance> result = decorator.getInstances(otherServiceName);\n        assertTrue(result.isEmpty(), \"The result should be empty\");\n\n        // Test the behavior of the getInstances method when the service name is the same as the self-instance's service name\n        String sameServiceName = selfInstance.getServiceName();\n        List<ServiceInstance> result2 = decorator.getInstances(sameServiceName);\n        assertFalse(result2.isEmpty(), \"The result should not be empty\");\n        assertEquals(1, result2.size(), \"There should only be one instance in the result list\");\n        ServiceInstance instance = result2.get(0);\n        assertEquals(selfInstance.getServiceName(), instance.getServiceName(), \"The service name of the instance should match the self-instance's service name\");\n    }\n}"
    ]
}