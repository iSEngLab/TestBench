{
    "project_name": "apollo",
    "file_name": "Env.java",
    "relative_path": "apollo/apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/environment/Env.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.portal.environment",
    "docstring": "/**\n   * add some change to environment name trim and to upper\n   *\n   * @param envName\n   * @return\n   */",
    "source_code": "\nprivate static String getWellFormName(String envName) {\n  if (StringUtils.isBlank(envName)) {\n    return \"\";\n  }\n\n  String envWellFormName = envName.trim().toUpperCase();\n\n  // special case for production in case of typo\n  if (\"PROD\".equals(envWellFormName)) {\n    return Env.PRO.name;\n  }\n\n  // special case that FAT & FWS should map to FAT\n  if (\"FWS\".equals(envWellFormName)) {\n    return Env.FAT.name;\n  }\n\n  return envWellFormName;\n}\n",
    "class_name": "Env",
    "method_name": "getWellFormName",
    "arguments": [
        "String envName"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Assertions;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.fail;\nimport org.junit.jupiter.api.Test;\n/**\n * test case of {@link Env} class\n * @author wuzishu\n */\npublic class EnvTest {\n    /**\n     * test method of getWellFormName() in {@link Env} class\n     */\n    @Test\n    public void getWellFormNameTest() {\n        // test for null input\n        assertEquals(\"\", Env.getWellFormName(null));\n        // test for blank name\n        assertEquals(\"\", Env.getWellFormName(\"\"));\n        // test for empty space\n        assertEquals(\"\", Env.getWellFormName(\" \"));\n        // test for upper case string\n        assertEquals(\"FAT\", Env.getWellFormName(\"  FAT\"));\n        // test for lower case string\n        assertEquals(\"UAT\", Env.getWellFormName(\"uat\"));\n        // test for special name\n        assertEquals(\"PRO\", Env.getWellFormName(\"prod\"));\n    }\n}\n\n### Response:",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"PRO\", Env.getWellFormName(\"prod\"));\n        assertEquals(\"PRO\", Env.getWellFormName(\"ProD\"));\n        assertEquals(\"FAT\", Env.getWellFormName(\"fat\"));\n        assertEquals(\"UAT\", Env.getWellFormName(\"uat\"));\n        assertEquals(\"DEV\", Env.getWellFormName(\"dev\"));\n        assertEquals(\"LOCAL\", Env.getWellFormName(\"local\"));\n    }\n}\n    \n\n### Response:",
        "import java.util.HashMap;\nimport java.util.Map;\n\npublic class Env {\n    private final String name;\n    \n    // Map of well-form environment names to their corresponding environments\n    private static final Map<String, Env> STRING_ENV_MAP = new HashMap<>();\n\n    public Env(String name) {\n        this.name = getWellFormName(name);\n        \n        if (STRING_ENV_MAP.containsKey(this.name)) {\n            // has been existed\n            logger.debug(\"{} already exists.\", this.name);\n        } else {\n            STRING_ENV_MAP.put(this.name, new Env(this.name));\n        }\n    }\n    \n    public static Env addEnvironment(String name) {\n        // If the environment doesn't exist yet, create a new one and add it to the map\n        if (!STRING_ENV_MAP.containsKey(name)) {\n            STRING_ENV_MAP.put(name, new Env(name));\n        }\n        \n        return STRING_ENV_MAP.get(name);\n    }\n    \n    public static String getWellFormName(String envName) {\n        // Trim and convert to uppercase\n        if (envName == null) {\n            throw new IllegalArgumentException(\"Environment name must not be null\");\n        }\n        \n        return envName.trim().toUpperCase();\n    }\n    \n    @Override\n    public String toString() {\n        return name;\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\npublic class EnvTest {\n  @Test\n  public void testGetWellFormName() {\n    assertEquals(\"\", EnvUtils.getWellFormName(null));\n    assertEquals(\"\", EnvUtils.getWellFormName(\"\"));\n\n    // normal case, name should be converted to uppercase and trimed\n    assertEquals(\"FWS\", EnvUtils.getWellFormName(\"   fws \"));\n\n    // special case for production in case of typo\n    assertEquals(Env.PRO.name(), EnvUtils.getWellFormName(\"prod\"));\n  }\n}\n    \n\n### JUNIT Test case:\npackage com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void addEnvironmentTest() {\n        <FILL>\n    }\n}\n    \n\n### Response:",
        "package com.ctrip.framework.apollo.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        // case 1: null\n        assertEquals(\"\", Env.getWellFormName(null));\n\n        // case 2: blank string\n        assertEquals(\"\", Env.getWellFormName(\"\"));\n\n        // case 3: normal string\n        assertEquals(\"FAT\", Env.getWellFormName(\" fat \"));\n\n        // case 4: special case for production\n        assertEquals(\"PRO\", Env.getWellFormName(\"prod\"));\n\n        // case 5: special case that FAT & FWS should map to FAT\n        assertEquals(\"FAT\", Env.getWellFormName(\"fws\"));\n    }\n}\n    \n\n### Response:",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport static org.junit.Assert.*;\n\nimport java.util.Map;\n\nimport org.junit.Test;\n\n/**\n * @author Jason Song(song_s@ctrip.com)\n */\npublic class EnvTest {\n  /**\n   * getWellFormName will trim and change upper case of the given env name\n   */\n  @Test\n  public void getWellFormName() {\n    assertEquals(\"DEV\", Env.getWellFormName(\" dev\"));\n    assertEquals(\"FAT\", Env.getWellFormName(\"FAT\"));\n    assertEquals(\"UAT\", Env.getWellFormName(\"uat\"));\n    assertEquals(\"PRO\", Env.getWellFormName(\"prod\"));\n  }\n}\n",
        "package com.ctrip.framework.apollo.portal.environment;\nimport java.util.*;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nclass EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        String actual = Env.getWellFormName(\"\");\n        assertEquals(\"\", actual);\n    \n        actual = Env.getWellFormName(\"dev \");\n        assertEquals(\"DEV\", actual);\n    \n        actual = Env.getWellFormName(\"proD\");\n        assertEquals(\"PRO\", actual);\n    }\n}\n    \n\n### Response:",
        "[TEST] \n[TEST]  \n@Test\n  public void testTransformEnv(){\n    assertEquals(Env.FAT, EnvUtils.transformEnv(\"fat\"));\n    assertEquals(Env.UAT, EnvUtils.transformEnv(\"uat\"));\n    assertEquals(Env.PRO, EnvUtils.transformEnv(\"pro\"));\n    assertEquals(Env.DEV, EnvUtils.transformEnv(\"dev\"));\n    // special case for production in case of typo\n    assertEquals(Env.PRO, EnvUtils.transformEnv(\"prod\"));\n    // special case that FAT & FWS should map to FAT\n    assertEquals(Env.FAT, EnvUtils.transformEnv(\"fws\"));\n    assertEquals(Env.UNKNOWN, EnvUtils.transformEnv(\"random-env\"));\n  }\n[TEST]  \n@Test\n  public void testExists(){\n    // should exist\n    assertTrue(EnvUtils.exists(\"FAT\"));\n    assertTrue(EnvUtils.exists(\"UAT\"));\n    assertTrue(EnvUtils.exists(\"PRO\"));\n    assertTrue(EnvUtils.exists(\"DEV\"));\n    assertTrue(EnvUtils.exists(\"prod\")); // special case for production in case of typo\n    assertTrue(EnvUtils.exists(\"fws\")); // special case that FAT & FWS should map to FAT\n    \n    // shouldn't exist\n    assertFalse(EnvUtils.exists(\"random-env\"));\n  }\n[TEST]  \n@Test\n  public void testAddEnvironment(){\n    // adding new environment\n    Env env = EnvUtils.addEnvironment(\"newEnv\");\n    assertEquals(\"NEWENV\", env.name());\n    \n    // adding existed environment should not cause exception and return the same object\n    Env existedEnv = EnvUtils.addEnvironment(\"FAT\");\n    assertSame(existedEnv, Env.FAT);\n  }\n[TEST]  \n@Test\n  public void testValueOf(){\n    // valid name should work as expected\n    assertEquals(Env.UAT, EnvUtils.valueOf(\"UAT\"));\n    \n    // invalid name should throw IllegalArgumentException\n    assertThrows(IllegalArgumentException.class, () -> {\n      EnvUtils.valueOf(\"random-env\");\n    });\n  }\n}\n[TEST]\npackage com.ctrip.framework.apollo.portal;\nimport java.util.Map;\npublic class EnvTest {\n  @Test\n  public void testGetWellFormEnv() {\n    // Test case:\n    assertEquals(\"DEV\", EnvUtils.getWellFormedEnv());\n    \n    // Test case:\n    assertEquals(EnvUtils.getWellFormedEnv(), EnvUtils.getWellFormedEnv());\n  }\n}\n",
        "package com.ctrip.framework.apollo.core;\n\nimport java.util.concurrent.atomic.AtomicReference;\n\n/**\n * default value of some configuration\n */\npublic final class ConfigConsts {\n  private static String m_dataCenter = \"DataCenter\";\n  private static String m_clusterName = \"Cluster\";\n\n  /**\n   * set data center\n   *\n   * @param dataCenter the data center name to be set\n   */\n  public static void setDataCenter(String dataCenter) {\n    m_dataCenter = dataCenter;\n  }\n\n  /**\n   * set cluster name\n   *\n   * @param clusterName the cluster name to be set\n   */\n  public static void setClusterName(String clusterName) {\n    m_clusterName = clusterName;\n  }\n\n  /**\n   * get data center of this instance, if not be specified, use \"DataCenter\" as default value\n   *\n   * @return the string value of data center name\n   */\n  public static String dataCenter() {\n    return m_dataCenter;\n  }\n\n  /**\n   * get cluster name of this instance, if not be specified, use \"Cluster\" as default value\n   *\n   * @return the string value of cluster name\n   */\n  public static String clusterName() {\n    return m_clusterName;\n  }\n}\n    \n\n### JUNIT Test case:\npackage com.ctrip.framework.apollo.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ConfigConstsTest {\n    @BeforeEach\n    public void setup() {\n        <FILL>\n    }\n    \n    @AfterEach\n    public void tearDown() {\n        <FILL>\n    }\n    \n    @Test\n    public void dataCenterTest() {\n        assertEquals(ConfigConsts.dataCenter(), \"DataCenter\");\n    }\n    \n    @Test\n    public void clusterNameTest() {\n        assertEquals(ConfigConsts.clusterName(), \"Cluster\");\n    }\n}\n    \n\n### Response:",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\n\n/**\n * Tests for EnvUtil.\n */\npublic class EnvTest {\n  private static final String INVALID_NAME = \"InvalidName\";\n  private static final String VALID_NAME = \"ValidName\";\n  private static final String VALID_WELL_FORM_NAME = \"VALID_WELL_FORM_NAME\";\n\n  @Test\n  public void getWellFormNameTest() {\n    // Empty name\n    assertEquals(EnvUtil.getWellFormName(\"\"), \"\");\n    assertNotEquals(EnvUtil.getWellFormName(\"\"), INVALID_NAME);\n    // Normal case\n    assertEquals(EnvUtil.getWellFormName(VALID_WELL_FORM_NAME), VALID_WELL_FORM_NAME);\n  }\n\n  @Test\n  public void transformEnvTest() {\n    assertNull(EnvUtil.transformEnv(\"\"));\n    // Existed name\n    assertEquals(EnvUtil.transformEnv(VALID_WELL_FORM_NAME), Env.valueOf(VALID_WELL_FORM_NAME));\n    // Non-existent name\n    assertNotEquals(EnvUtil.transformEnv(INVALID_NAME).name(), INVALID_NAME);\n  }\n}\n\n    "
    ]
}