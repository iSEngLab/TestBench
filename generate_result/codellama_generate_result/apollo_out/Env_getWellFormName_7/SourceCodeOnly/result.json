{
    "project_name": "apollo",
    "file_name": "Env.java",
    "relative_path": "apollo/apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/environment/Env.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.portal.environment",
    "docstring": "/**\n   * add some change to environment name trim and to upper\n   *\n   * @param envName\n   * @return\n   */",
    "source_code": "\nprivate static String getWellFormName(String envName) {\n  if (StringUtils.isBlank(envName)) {\n    return \"\";\n  }\n\n  String envWellFormName = envName.trim().toUpperCase();\n\n  // special case for production in case of typo\n  if (\"PROD\".equals(envWellFormName)) {\n    return Env.PRO.name;\n  }\n\n  // special case that FAT & FWS should map to FAT\n  if (\"FWS\".equals(envWellFormName)) {\n    return Env.FAT.name;\n  }\n\n  return envWellFormName;\n}\n",
    "class_name": "Env",
    "method_name": "getWellFormName",
    "arguments": [
        "String envName"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(Env.DEV.name, EnvUtils.getWellFormName(\"dev\"));\n        assertEquals(Env.FAT.name, EnvUtils.getWellFormName(\"fat\"));\n        assertEquals(Env.UAT.name, EnvUtils.getWellFormName(\"uat\"));\n        assertEquals(Env.PRO.name, EnvUtils.getWellFormName(\"prod\"));\n        \n        // special case for production in case of typo\n        assertEquals(Env.PRO.name, EnvUtils.getWellFormName(\"pro\"));\n        \n        // special case that FAT & FWS should map to FAT\n        assertEquals(Env.FAT.name, EnvUtils.getWellFormName(\"fws\"));\n    }\n}",
        "@Test\npublic void getWellFormNameTest() {\n    assertEquals(\"\", Env.getWellFormName(null));\n    assertEquals(\"\", Env.getWellFormName(\"\"));\n    assertEquals(\"DEV\", Env.getWellFormName(\"dev\"));\n    assertEquals(\"FAT\", Env.getWellFormName(\"fat\"));\n    assertEquals(\"UAT\", Env.getWellFormName(\"uat\"));\n    assertEquals(\"PRO\", Env.getWellFormName(\"prod\"));\n    assertEquals(\"PRO\", Env.getWellFormName(\"PROD\"));\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        // Test cases for invalid input\n        assertEquals(\"\", Env.getWellFormName(null));\n        assertEquals(\"\", Env.getWellFormName(\"\"));\n        assertEquals(\"\", Env.getWellFormName(\"  \"));\n        \n        // Test cases for valid input\n        assertEquals(\"DEV\", Env.getWellFormName(\"dev\"));\n        assertEquals(\"DEV\", Env.getWellFormName(\"DeV\"));\n        assertEquals(\"PRO\", Env.getWellFormName(\"prod\"));\n        assertEquals(\"FAT\", Env.getWellFormName(\"fat\"));\n        assertEquals(\"UAT\", Env.getWellFormName(\"uat\"));\n    }\n}",
        "The given code is not complete, and the instruction does not provide a clear question or objective. Therefore, I can't provide an appropriate response. Please provide more context or clarify the question to get a better answer.",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        String actual = Env.getWellFormName(\"prod\");\n        assertEquals(\"PRO\", actual);\n\n        actual = Env.getWellFormName(\"PROD\");\n        assertEquals(\"PRO\", actual);\n\n        actual = Env.getWellFormName(\"dev\");\n        assertEquals(\"DEV\", actual);\n\n        actual = Env.getWellFormName(\"fat\");\n        assertEquals(\"FAT\", actual);\n\n        actual = Env.getWellFormName(\"fws\");\n        assertEquals(\"FAT\", actual);\n    }\n}",
        "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        // Test case 1: Empty string input\n        assertEquals(\"\", getWellFormName(\"\"));\n        \n        // Test case 2: Special case for \"PROD\"\n        assertEquals(Env.PRO.name, getWellFormName(\"PROD\"));\n        \n        // Test case 3: Special case for \"FAT\"\n        assertEquals(Env.FAT.name, getWellFormName(\"FWS\"));\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        // Test that null input returns empty string\n        assertEquals(\"\", getWellFormName(null));\n\n        // Test that blank input returns empty string\n        assertEquals(\"\", getWellFormName(\"\"));\n\n        // Test that uppercase and trimmed input returns the same result\n        String input = \"PROD\";\n        assertEquals(input.toUpperCase().trim(), getWellFormName(input));\n\n        // Test that special case for production in case of typo\n        assertEquals(\"PRO\", getWellFormName(\"PROD\"));\n\n        // Test that FAT and FWS should map to FAT\n        assertEquals(\"FAT\", getWellFormName(\"FWS\"));\n    }\n}",
        "\npackage com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        String envName = \"dev\";\n        String expectedResult = \"DEV\";\n\n        assertEquals(expectedResult, EnvUtils.getWellFormName(envName));\n\n        envName = \"prd\";\n        expectedResult = \"PRD\";\n\n        assertEquals(expectedResult, EnvUtils.getWellFormName(envName));\n\n        envName = \"fat\";\n        expectedResult = \"FAT\";\n\n        assertEquals(expectedResult, EnvUtils.getWellFormName(envName));\n\n        envName = \"fws\";\n        expectedResult = \"FWS\";\n\n        assertEquals(expectedResult, EnvUtils.getWellFormName(envName));\n    }\n}",
        "\n@Test\npublic void getWellFormNameTest() {\n    assertEquals(Env.PRO.name, EnvUtils.getWellFormName(\"PROD\"));\n    assertEquals(Env.FAT.name, EnvUtils.getWellFormName(\"FWS\"));\n    assertEquals(Env.DEV.name, EnvUtils.getWellFormName(\"dev\"));\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        String envName = \"TEST\";\n        String expectedResult = \"TEST\";\n        \n        // Call the method with the test input\n        String actualResult = Env.getWellFormName(envName);\n        \n        // Check if the result matches the expected output\n        assertEquals(expectedResult, actualResult);\n    }\n    \n    @Test\n    public void getWellFormNameTest_nullInput() {\n        String envName = null;\n        String expectedResult = \"\";\n        \n        // Call the method with the test input\n        String actualResult = Env.getWellFormName(envName);\n        \n        // Check if the result matches the expected output\n        assertEquals(expectedResult, actualResult);\n    }\n    \n    @Test\n    public void getWellFormNameTest_emptyInput() {\n        String envName = \"\";\n        String expectedResult = \"\";\n        \n        // Call the method with the test input\n        String actualResult = Env.getWellFormName(envName);\n        \n        // Check if the result matches the expected output\n        assertEquals(expectedResult, actualResult);\n    }\n    \n    @Test\n    public void getWellFormNameTest_specialCaseProd() {\n        String envName = \"PROD\";\n        String expectedResult = Env.PRO.name;\n        \n        // Call the method with the test input\n        String actualResult = Env.getWellFormName(envName);\n        \n        // Check if the result matches the expected output\n        assertEquals(expectedResult, actualResult);\n    }\n    \n    @Test\n    public void getWellFormNameTest_specialCaseFws() {\n        String envName = \"FWS\";\n        String expectedResult = Env.FAT.name;\n        \n        // Call the method with the test input\n        String actualResult = Env.getWellFormName(envName);\n        \n        // Check if the result matches the expected output\n        assertEquals(expectedResult, actualResult);\n    }\n}"
    ]
}