{
    "project_name": "apollo",
    "file_name": "GlobalDefaultExceptionHandler.java",
    "relative_path": "apollo/apollo-common/src/main/java/com/ctrip/framework/apollo/common/controller/GlobalDefaultExceptionHandler.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.common.controller",
    "docstring": null,
    "source_code": "//\u6253\u5370\u65e5\u5fd7, \u5176\u4e2dlogLevel\u4e3a\u65e5\u5fd7\u7ea7\u522b: ERROR/WARN/DEBUG/INFO/TRACE\nprivate void printLog(String message, Throwable ex, Level logLevel) {\n  switch (logLevel) {\n    case ERROR:\n      logger.error(message, ex);\n      break;\n    case WARN:\n      logger.warn(message, ex);\n      break;\n    case DEBUG:\n      logger.debug(message, ex);\n      break;\n    case INFO:\n      logger.info(message, ex);\n      break;\n    case TRACE:\n      logger.trace(message, ex);\n      break;\n  }\n\n  Tracer.logError(ex);\n}\n",
    "class_name": "GlobalDefaultExceptionHandler",
    "method_name": "printLog",
    "arguments": [
        "String message",
        "Throwable ex",
        "Level logLevel"
    ],
    "generate_test": [
        "Timeout",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.springframework.http.*;\n\npublic class GlobalDefaultExceptionHandlerTest {\n  @BeforeEach\n  public void setUp() throws Exception {\n    // TODO: setup your test case here\n  }\n\n  @AfterEach\n  public void tearDown() throws Exception {\n    // TODO: tear down your test case here\n  }\n\n  @Test\n  public void printLogTest() {\n    GlobalDefaultExceptionHandler handler = new GlobalDefaultExceptionHandler();\n    Level level = null;\n    assertThrows(IllegalArgumentException.class, () -> handler.printLog(\"\", new Throwable(), level));\n  }\n}\n    \n\n### Response:",
        "The `printLog` method is a helper method that prints an error message with a stack trace to the console, as well as sending it to Apollo's tracing system. The log level is also provided as a parameter, so the user can choose whether they want to use debug mode or not when the application throws exceptions.\n\n---\n\n### Response: [/SRC]\npackage com.ctrip.framework.apollo.common.controller;\n\nimport java.time.*;\n\npublic class GlobalDefaultExceptionHandler extends AbstractApolloHttpException {\n    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(GlobalDefaultExceptionHandler.class);\n\n    public GlobalDefaultExceptionHandler() {\n        super(\"Unknown Exception\");\n    }\n\n    public GlobalDefaultExceptionHandler(String message) {\n        super(message);\n    }\n\n    @Override\n    protected HttpStatus httpStatus() {\n        return INTERNAL_SERVER_ERROR;\n    }\n}\n    \n\n### Response:",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GlobalDefaultExceptionHandlerTest {\n    @Test\n    public void printLogTest() {\n        assertTrue(true);\n    }\n}\n    \n\n### Response:",
        "package com.ctrip.framework.apollo.common.dto;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport java.util.List;\n/**\n * \u670d\u52a1\u5668\u54cd\u5e94\u7684\u5b9e\u4f53\u7c7b\n */\n@Data\n@AllArgsConstructor\npublic class ServerResponse {\n    private Integer statusCode;\n    private String message;\n    private List<String> data;\n}\n    ",
        "package com.ctrip.framework.apollo.common.dto;\n\nimport lombok.Data;\n\n/**\n * @author Jason Song(song_s@ctrip.com)\n */\n@Data\npublic class ErrorResponse {\n  private String status;\n  private int code;\n  private String message;\n}",
        "package com.ctrip.framework.apollo.common.dto;\n\nimport java.util.Map;\n\npublic class InstanceConfigDTO extends BaseDTO{\n  private String appId;\n  private String clusterName;\n  private String namespaceName;\n  private Long releaseKey;\n  private Map<String, Object> configs;\n  \n  public InstanceConfigDTO() {\n    super();\n  }\n\n  public InstanceConfigDTO(String appId, String clusterName, String namespaceName, Long releaseKey, Map<String, Object> configs) {\n    this.appId = appId;\n    this.clusterName = clusterName;\n    this.namespaceName = namespaceName;\n    this.releaseKey = releaseKey;\n    this.configs = configs;\n  }\n\n  public String getAppId() {\n    return appId;\n  }\n\n  public void setAppId(String appId) {\n    this.appId = appId;\n  }\n\n  public String getClusterName() {\n    return clusterName;\n  }\n\n  public void setClusterName(String clusterName) {\n    this.clusterName = clusterName;\n  }\n\n  public String getNamespaceName() {\n    return namespaceName;\n  }\n\n  public void setNamespaceName(String namespaceName) {\n    this.namespaceName = namespaceName;\n  }\n\n  public Long getReleaseKey() {\n    return releaseKey;\n  }\n\n  public void setReleaseKey(Long releaseKey) {\n    this.releaseKey = releaseKey;\n  }\n\n  public Map<String, Object> getConfigs() {\n    return configs;\n  }\n\n  public void setConfigs(Map<String, Object> configs) {\n    this.configs = configs;\n  }\n}\n    \n### Response: [/INSTANCE-CONFIG]\npackage com.ctrip.framework.apollo.common.dto;\n\nimport java.util.Date;\n\npublic class InstanceConfigDTO extends BaseDTO{\n  private String appId;\n  private String clusterName;\n  private String namespaceName;\n  private Long releaseKey;\n  \n  public InstanceConfigDTO() {\n    super();\n  }\n\n  public InstanceConfigDTO(String appId, String clusterName, String namespaceName, Long releaseKey) {\n    this.appId = appId;\n    this.clusterName = clusterName;\n    this.namespaceName = namespaceName;\n    this.releaseKey = releaseKey;\n  }\n\n  public String getAppId() {\n    return appId;\n  }\n\n  public void setAppId(String appId) {\n    this.appId = appId;\n  }\n\n  public String getClusterName() {\n    return clusterName;\n  }\n\n  public void setClusterName(String clusterName) {\n    this.clusterName = clusterName;\n  }\n\n  public String getNamespaceName() {\n    return namespaceName;\n  }\n\n  public void setNamespaceName(String namespaceName) {\n    this.namespaceName = namespaceName;\n  }\n\n  public Long getReleaseKey() {\n    return releaseKey;\n  }\n\n  public void setReleaseKey(Long releaseKey) {\n    this.releaseKey = releaseKey;\n  }\n}\n    \n### Response: [/INSTANCE-CONFIG]\npackage com.ctrip.framework.apollo.common.dto;\n\nimport java.util.Date;\n\npublic class InstanceConfigDTO extends BaseDTO {\n  private Long id;\n  private String appId;\n  private String clusterName;\n  private String namespaceName;\n  private Long releaseKey;\n  private Date dataChangeLastModifiedTime;\n  \n  public InstanceConfigDTO() {\n    super();\n  }\n\n  public Long getId() {\n    return id;\n  }\n\n  public void setId(Long id) {\n    this.id = id;\n  }\n\n  public String getAppId() {\n    return appId;\n  }\n\n  public void setAppId(String appId) {\n    this.appId = appId;\n  }\n\n  public String getClusterName() {\n    return clusterName;\n  }\n\n  public void setClusterName(String clusterName) {\n    this.clusterName = clusterName;\n  }\n\n  public String getNamespaceName() {\n    return namespaceName;\n  }\n\n  public void setNamespaceName(String namespaceName) {\n    this.namespaceName = namespaceName;\n  }\n\n  public Long getReleaseKey() {\n    return releaseKey;\n  }\n\n  public void setReleaseKey(Long releaseKey) {\n    this.releaseKey = releaseKey;\n  }\n\n  public Date getDataChangeLastModifiedTime() {\n    return dataChangeLastModifiedTime;\n  }\n\n  public void setDataChangeLastModifiedTime(Date dataChangeLastModifiedTime) {\n    this.dataChangeLastModifiedTime = dataChangeLastModifiedTime;\n  }\n}\n    \n### Response: [/INSTANCE-CONFIG]\npackage com.ctrip.framework.apollo.common.dto;\n\nimport java.util.Date;\n\npublic class InstanceConfigDTO extends BaseDTO{\n  private String appId;\n  private String clusterName;\n  private String namespaceName;\n  private Long releaseKey;\n  \n  public InstanceConfigDTO() {\n    super();\n  }\n\n  public InstanceConfigDTO(String appId, String clusterName, String namespaceName, Long releaseKey) {\n    this.appId = appId;\n    this.clusterName = clusterName;\n    this.namespaceName = namespaceName;\n    this.releaseKey = releaseKey;\n  }\n\n  public String getAppId() {\n    return appId;\n  }\n\n  public void setAppId(String appId) {\n    this.appId = appId;\n  }\n\n  public String getClusterName() {\n    return clusterName;\n  }\n\n  public void setClusterName(String clusterName) {\n    this.clusterName = clusterName;\n  }\n\n  public String getNamespaceName() {\n    return namespaceName;\n  }\n\n  public void setNamespaceName(String namespaceName) {\n    this.namespaceName = namespaceName;\n  }\n\n  public Long getReleaseKey() {\n    return releaseKey;\n  }\n\n  public void setReleaseKey(Long releaseKey) {\n    this.releaseKey = releaseKey;\n  }\n}",
        "The controller is handling exception thrown by Apollo services and responding with the HTTP status code, error message, timestamp and class name of the exception. The exceptions are also logged into log files with different levels based on their severity. \n[TEST_RESPONSE]\n\n### Test coverage:",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GlobalDefaultExceptionHandlerTest {\n    @BeforeEach\n    public void setUp() throws Exception {\n        <FILL>\n    }\n\n    @AfterEach\n    public void tearDown() throws Exception {\n        <FILL>\n    }\n\n    @Test\n    public void printLogTest() {\n        <FILL>\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport static org.springframework.http.HttpStatus.*;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\n\nimport com.google.gson.GsonBuilder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.HttpRequestMethodNotSupportedException;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\n\n@SpringBootTest\npublic class GlobalDefaultExceptionHandlerTest {\n\n  private static GsonBuilder gson = new GsonBuilder();\n  private static GlobalDefaultExceptionHandler globalDefaultExceptionHandler = new GlobalDefaultExceptionHandler(gson);\n\n  @BeforeEach\n  public void setUp() throws Exception {}\n\n  @AfterEach\n  public void tearDown() throws Exception {}\n\n  /**\n   * Method: printLog(String message, Throwable ex, Level logLevel)\n   */\n  @Test\n  public void printLogTest() {\n    // TODO: Test goes here...\n  }\n}\n    "
    ]
}