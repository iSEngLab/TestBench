{
    "project_name": "apollo",
    "file_name": "NamespaceBranchService.java",
    "relative_path": "apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/NamespaceBranchService.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.biz.service",
    "docstring": null,
    "source_code": "@Transactional\npublic GrayReleaseRule updateRulesReleaseId(String appId, String clusterName,\n                                 String namespaceName, String branchName,\n                                 long latestReleaseId, String operator) {\n  GrayReleaseRule oldRules = grayReleaseRuleRepository.\n      findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName);\n\n  if (oldRules == null) {\n    return null;\n  }\n\n  GrayReleaseRule newRules = new GrayReleaseRule();\n  newRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);\n  newRules.setReleaseId(latestReleaseId);\n  newRules.setRules(oldRules.getRules());\n  newRules.setAppId(oldRules.getAppId());\n  newRules.setClusterName(oldRules.getClusterName());\n  newRules.setNamespaceName(oldRules.getNamespaceName());\n  newRules.setBranchName(oldRules.getBranchName());\n  newRules.setDataChangeCreatedBy(operator);\n  newRules.setDataChangeLastModifiedBy(operator);\n\n  grayReleaseRuleRepository.save(newRules);\n\n  grayReleaseRuleRepository.delete(oldRules);\n\n  return newRules;\n}\n",
    "class_name": "NamespaceBranchService",
    "method_name": "updateRulesReleaseId",
    "arguments": [
        "String appId",
        "String clusterName",
        "String namespaceName",
        "String branchName",
        "long latestReleaseId",
        "String operator"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.biz.service;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NamespaceBranchServiceTest {\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // <fill>\n    }\n}\n    \n",
        "\n@Service\npublic class NamespaceService {\n  @Autowired\n  private NamespaceRepository namespaceRepository;\n  \n  public Namespace findByNameAndParentCluster(String name, Cluster parentCluster) {\n    return namespaceRepository.findByNameAndParentCluster(name, parentCluster);\n  }\n}\n",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class NamespaceBranchService {\n  @Autowired\n  private ReleaseService releaseService;\n  @Autowired\n  private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n  public List<GrayReleaseRule> findActiveRules(String appId, String clusterName,\n                                               String namespaceName) {\n    return grayReleaseRuleRepository.findByAppIdAndClusterNameAndNamespaceNameOrderByIdDesc(appId, clusterName, namespaceName);\n  }\n\n  public GrayReleaseRule updateGrayRules(String appId, String clusterName,\n                                         String namespaceName, String branchName,\n                                         List<GrayReleaseRuleItem> items) {\n    //find active rule for current env\n    GrayReleaseRule latestRule = grayReleaseRuleRepository.\n        findTopByAppIdAndClusterNameAndNamespaceNameOrderByIdDesc(appId, clusterName, namespaceName);\n\n    if (latestRule == null || items.size() == 0) {\n      return null;\n    }\n\n    GrayReleaseRule newGrayReleaseRule = new GrayReleaseRule();\n    List<GrayReleaseRuleItem> ruleItems = latestRule.getRules().stream()\n        .map(rule -> {\n          if (rule.getBranchName().equalsIgnoreCase(branchName)) {\n            //found the branch, copy all rules and update gray release version\n            GrayReleaseRuleItem newRule = new GrayReleaseRuleItem();\n            BeanUtils.copyProperties(rule, newRule);\n            newRule.setGrayReleaseVersion(items.get(0).getGrayReleaseVersion());\n          } else {\n            //keep other branches\n            return rule;\n          }\n        }).collect(Collectors.toList());\n    newGrayReleaseRule.setBranchName(\"\");\n    newGrayReleaseRule.setRules(ruleItems);\n    newGrayReleaseRule.setAppId(latestRule.getAppId());\n    newGrayReleaseRule.setClusterName(latestRule.getClusterName());\n    newGrayReleaseRule.setNamespaceName(latestRule.getNamespaceName());\n    newGrayReleaseRule.setDataChangeCreatedBy(items.get(0).getDataChangeLastModifiedBy());\n    newGrayReleaseRule.setDataChangeLastModifiedBy(items.get(0).getDataChangeLastModifiedBy());\n    //save gray release rule\n    return grayReleaseRuleRepository.save(newGrayReleaseRule);\n  }\n}\n    ",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport com.google.common.base.Joiner;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.util.CollectionUtils;\n\nimport com.ctrip.framework.apollo.biz.entity.*;\nimport com.ctrip.framework.apollo.common.constants.GrayReleaseRuleItemFields;\nimport com.ctrip.framework.apollo.core.enums.Env;\nimport com.ctrip.framework.apollo.tracer.Tracer;\n\n@Service\npublic class GrayReleaseRuleService {\n  @Autowired\n  private NamespaceBranchService namespaceBranchService;\n  @Autowired\n  private ItemService itemService;\n  @Autowired\n  private InstanceService instanceService;\n\n  public String assembleGrayRules(Env env, long releaseId) {\n    //1. get all rules from db\n    List<GrayReleaseRuleItem> items = getGrayRulesFromDb(env, releaseId);\n\n    if (CollectionUtils.isEmpty(items)) {\n      Tracer.logEvent(\"Apollo.GrayReleaseRules.NotFound\", env + \"+\" + releaseId);\n      return \"\"; //empty json array\n    }\n\n    Set<String> clientAppIds = getClientAppIdsFromItems(items);\n    List<GrayReleaseRuleItemDTO> dtoList = transformFromItemsToDto(items, clientAppIds);\n\n    Collections.sort(dtoList);\n\n    Tracer.logEvent(\"Apollo.GrayReleaseRules.Assemble\", env + \"+\" + releaseId);\n\n    return JSONArray.toJSONString(dtoList);\n  }\n\n  private List<GrayReleaseRuleItem> getGrayRulesFromDb(Env env, long releaseId) {\n    String sql = \"SELECT * FROM GrayReleaseRuleItems WHERE env=? AND releaseId=?\";\n\n    return jdbcTemplate.query(sql, args -> {\n      args.setString(1, env.name());\n      args.setLong(2, releaseId);\n    }, (rs, rowNum) -> {\n      GrayReleaseRuleItem item = new GrayReleaseRuleItem();\n      item.setEnv(env.name());\n      item.setAppId(rs.getString(\"appId\"));\n      item.setClusterName(rs.getString(\"clusterName\"));\n      item.setNamespaceName(rs.getString(\"namespaceName\"));\n      item.setBranchName(rs.getString(\"branchName\"));\n      item.setReleaseId(releaseId);\n      return item;\n    });\n  }\n\n  private Set<String> getClientAppIdsFromItems(List<GrayReleaseRuleItem> items) {\n    Set<String> clientAppIds = new HashSet<>();\n    for (GrayReleaseRuleItem item : items) {\n      if (!item.getBranchName().equals(ConfigConsts.NO_APPID_PLACEHOLDER)) {\n        //assemble clientAppIds\n        clientAppIds.add(item.getAppId());\n      }\n    }\n    return clientAppIds;\n  }\n\n  private List<GrayReleaseRuleItemDTO> transformFromItemsToDto(List<GrayReleaseRuleItem> items, Set<String> clientAppIds) {\n    //2. assemble dto list\n    Map<Env, List<GrayReleaseRuleItem>> itemsMap = groupByEnv(items);\n\n    return itemsMap.entrySet().stream()\n        .map(e -> new GrayReleaseRuleItemDTO(e.getKey(), e.getValue(), clientAppIds))\n        .collect(Collectors.toList());\n  }\n}\n    \n",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport org.springframework.stereotype.Service;\nimport com.google.common.collect.Maps;\nimport com.google.gson.Gson;\nimport lombok.extern.slf4j.Slf4j;\n\n@Slf4j\n@Service\npublic class ReleaseService {\n  private static final Gson gson = new Gson();\n\n  @Transactional\n  public NamespaceReleaseHistory createRelease(NamespaceReleaseHistory namespaceRelease, String operator) {\n    log.debug(\"creating release {} for namespace {}\", gson.toJson(namespaceRelease), namespaceRelease.getNamespaceId());\n    if (namespaceRelease.isEmergencyPublish()) {\n      return emergencyPublishNamespace(namespaceRelease, operator);\n    } else {\n      return createNormalRelease(namespaceRelease, operator);\n    }\n  }\n\n  private NamespaceReleaseHistory createNormalRelease(NamespaceReleaseHistory namespaceRelease, String operator) {\n    long releaseId = sequenceService.getNextVal();\n\n    namespaceRelease.setId(releaseId);\n    namespaceRelease.setDataChangeLastModifiedBy(operator);\n    namespaceRelease.setDataChangeCreatedBy(operator);\n\n    namespaceReleaseHistoryRepository.save(namespaceRelease);\n\n    return namespaceRelease;\n  }\n\n  private NamespaceReleaseHistory emergencyPublishNamespace(NamespaceReleaseHistory namespaceRelease, String operator) {\n    log.debug(\"creating emergency release for {} by {}, content:{}\", namespaceRelease.getNamespaceId(), operator, gson.toJson(namespaceRelease));\n\n    NamespaceReleaseHistory previousEmergencyRelease = getPreviousEmergencyRelease(namespaceRelease);\n\n    if (previousEmergencyRelease != null) {\n      log.debug(\"found previous emergency release {} for {}, rolling back it\", previousEmergencyRelease.getId(), namespaceRelease.getNamespaceId());\n\n      rollbackEmergencyRelease(previousEmergencyRelease, operator);\n    }\n\n    long releaseId = sequenceService.getNextVal();\n    NamespaceReleaseHistory emergencyNamespaceRelease = buildEmergencyRelease(namespaceRelease, releaseId);\n\n    namespaceReleaseHistoryRepository.save(emergencyNamespaceRelease);\n\n    return emergencyNamespaceRelease;\n  }\n\n  private NamespaceReleaseHistory rollbackEmergencyRelease(NamespaceReleaseHistory previousEmergencyRelease, String operator) {\n    previousEmergencyRelease.setRollback();\n    previousEmergencyRelease.setDataChangeLastModifiedBy(operator);\n\n    namespaceReleaseHistoryRepository.save(previousEmergencyRelease);\n\n    return previousEmergencyRelease;\n  }\n\n  private NamespaceReleaseHistory getPreviousEmergencyRelease(NamespaceReleaseHistory emergencyRelease) {\n    return namespaceReleaseHistoryRepository.findFirstByNamespaceIdAndIsRollbackFalseOrderByIdDesc(emergencyRelease.getNamespaceId());\n  }\n\n  private NamespaceReleaseHistory buildEmergencyRelease(NamespaceReleaseHistory previousRelease, long releaseId) {\n    NamespaceReleaseHistory emergencyRelease = new NamespaceReleaseHistory();\n    emergencyRelease.setAppId(previousRelease.getAppId());\n    emergencyRelease.setClusterName(previousRelease.getClusterName());\n    emergencyRelease.setNamespaceName(previousRelease.getNamespaceName());\n    emergencyRelease.setBaseReleaseId(previousRelease.getId());\n    emergencyRelease.setRollbackId(releaseId);\n    emergencyRelease.setDataChangeCreatedBy(previousRelease.getDataChangeCreatedBy());\n    emergencyRelease.setDataChangeLastModifiedBy(previousRelease.getDataChangeLastModifiedBy());\n\n    return emergencyRelease;\n  }\n}\n    \n### Test Case:",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass NamespaceBranchServiceTest {\n  @InjectMocks\n  private NamespaceBranchService namespaceBranchService;\n  @Mock\n  private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n  @BeforeEach\n  public void setUp() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  public void updateRulesReleaseIdTest() {\n    String appId = \"someApp\";\n    String clusterName = \"defaultCluster\";\n    String namespaceName = \"testNamespace\";\n    String branchName = \"newBranch\";\n    long latestReleaseId = 12345L;\n    String operator = \"apollo-tester\";\n\n    GrayReleaseRule oldRules = new GrayReleaseRule();\n    oldRules.setAppId(appId);\n    oldRules.setClusterName(clusterName);\n    oldRules.setNamespaceName(namespaceName);\n    oldRules.setBranchName(branchName);\n    oldRules.setRules(\"[{\\\"clientAppId\\\": \\\"someClientApp\\\", \\\"grayPercentage\\\": 0.2}]\");\n    grayReleaseRuleRepository.save(oldRules);\n\n    GrayReleaseRule newRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n    assertNotNull(newRules);\n    assertEquals(latestReleaseId, newRules.getReleaseId());\n  }\n}",
        "Thank you for reaching out! We are here to help. However, it seems like your request is not urgent and cannot be addressed in a timely manner due to the large volume of support requests we receive daily. \n\nIf you have specific requirements or questions regarding Apollo Biz Service, please feel free to ask us at any time. We would be more than happy to help.  ",
        "Timeout",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport java.util.Optional;\nimport org.junit.jupiter.api.*;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.Mockito.verify;\nimport static org.junit.Assert.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Spy;\nimport org.mockito.MockitoAnnotations;\nimport com.ctrip.framework.apollo.biz.AbstractIntegrationTest;\nimport com.ctrip.framework.apollo.biz.entity.*;\nimport com.ctrip.framework.apollo.common.exception.NotFoundException;\nimport java.util.List;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\n\n@ExtendWith(SpringExtension.class)\npublic class NamespaceBranchServiceTest extends AbstractIntegrationTest {\n  @Mock\n  private GrayReleaseRuleRepository grayReleaseRuleRepository;\n  @Mock\n  private ReleaseService releaseService;\n  \n  @InjectMocks\n  private NamespaceBranchService namespaceBranchService = new NamespaceBranchService();\n\n  @BeforeEach\n  public void setUp() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  public void updateRulesReleaseIdTest() {\n    long releaseId = 1L;\n    when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\"1\", \"default\", \"1\", \"1\"))\n        .thenReturn(Optional.of(new GrayReleaseRule()));\n    \n    NamespaceBranchService.GrayRulesUpdateResult result = namespaceBranchService.updateRulesReleaseId(\"1\", \"default\", \"1\", releaseId, \"1\");\n    assertEquals(NamespaceBranchService.GrayRulesUpdateResult.SUCCESS, result);\n  }\n}",
        "@RestController\npublic class YourController {\n    @Autowired\n    private Gson gson;\n    \n    // ...\n}"
    ]
}