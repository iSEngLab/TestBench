{
    "project_name": "commons-lang",
    "file_name": "CompareToBuilder.java",
    "relative_path": "commons-lang/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java",
    "execute_path": "commons-lang",
    "package": "org.apache.commons.lang3.builder",
    "docstring": "/**\n     * Appends to the {@code builder} the deep comparison of\n     * two {@code boolean} arrays.\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using {@code ==}</li>\n     *  <li>Check if for {@code null}, {@code null} is less than non-{@code null}</li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(boolean, boolean)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand side array\n     * @param rhs  right-hand side array\n     * @return this\n     */",
    "source_code": "\npublic CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {\n    if (comparison != 0) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null) {\n        comparison = -1;\n        return this;\n    }\n    if (rhs == null) {\n        comparison = 1;\n        return this;\n    }\n    if (lhs.length != rhs.length) {\n        comparison = lhs.length < rhs.length ? -1 : 1;\n        return this;\n    }\n    for (int i = 0; i < lhs.length && comparison == 0; i++) {\n        append(lhs[i], rhs[i]);\n    }\n    return this;\n}\n",
    "class_name": "CompareToBuilder",
    "method_name": "append",
    "arguments": [
        "boolean[] lhs",
        "boolean[] rhs"
    ],
    "generate_test": [
        "package org.apache.commons.lang3.builder;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n/**\n * Tests the {@link CompareToBuilder} class.\n */\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() throws Exception {\n        Object obj1 = new Object();\n        Object obj2 = new Object();\n    \n        // test objects that are identical\n        assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\n        \n        // test objects that are different\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() != 0);\n    \n        // test with comparator\n        String s1 = \"abc\";\n        String s2 = \"def\";\n        assertEquals(-1, new CompareToBuilder().append(s1, s2, String.CASE_INSENSITIVE_ORDER).toComparison());\n    }\n}",
        "    @Test\n    public void appendTest() {\n        CompareToBuilder compareToBuilder = new CompareToBuilder();\n        \n        // Test comparison with null values\n        assertEquals(-1, compareToBuilder.append(null, \"\").toComparison());\n        assertEquals(1, compareToBuilder.append(\"\", null).toComparison());\n        \n        // Test comparison with same values\n        assertEquals(0, compareToBuilder.append(\"\", \"\").toComparison());\n        \n        // Test comparison with different values\n        assertTrue(compareToBuilder.append(\"\", \"a\").toComparison() < 0);\n        assertTrue(compareToBuilder.append(\"b\", \"a\").toComparison() > 0);\n    }",
        "Timeout",
        "Timeout",
        "\nCompareToBuilderTest.java - Test CompareToBuilder class\n\nimport org.apache.commons.lang3.builder.*;\nimport org.junit.jupiter.api.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        // Create two equals instances of Person\n        Person p1 = new Person(5);\n        Person p2 = new Person(5);\n\n        int result = new CompareToBuilder().append(p1.getAge(), p2.getAge()).toComparison();\n        assertEquals(0, result);\n    }\n\n    @Test\n    public void appendDifferentTest() {\n        // Create two not equals instances of Person\n        Person p1 = new Person(5);\n        Person p2 = new Person(6);\n\n        int result = new CompareToBuilder().append(p1.getAge(), p2.getAge()).toComparison();\n        assertNotEquals(0, result);\n    }\n}\n\nclass Person {\n    private int age;\n    \n    public Person(int age) {\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n}\n",
        "<FILL>\n    @Test\n    public void testCompareTo() {\n        CompareToBuilder builder = new CompareToBuilder();\n        int i = 1;\n        Integer one = Integer.valueOf(i++);\n        // appends the comparison of two values\n        builder.append(one, 2); // negative difference: 1 - 2 == -1\n        builder.append(two, 3);  // positive difference: 3 - 2 == +1\n        assertEquals(-2, builder.toComparison()); // comparison result is negative\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport java.util.Comparator;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // append(Comparable, Comparable)\n        assertEquals(-1, new CompareToBuilder().append(1, 2).toComparison());\n        assertEquals(0, new CompareToBuilder().append(1, 1).toComparison());\n        assertEquals(+1, new CompareToBuilder().append(2, 1).toComparison());\n        // appendSuper(int)\n        assertEquals(-1, new CompareToBuilder().appendSuper(-1).append(1, 2).toComparison());\n        assertEquals(0, new CompareToBuilder().appendSuper(0).append(1, 1).toComparison());\n        assertEquals(+1, new CompareToBuilder().appendSuper(1).append(2, 1).toComparison());\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Tests for comparing different types of arrays\n        final int[] int1 = new int[] { 0, 1 };\n        final long[] long1 = new long[] { 0, 1 };\n        final short[] short1 = new short[] { 0, 1 };\n        final char[] char1 = new char[] { 'a', 'b' };\n        final byte[] byte1 = new byte[] { 0, 1 };\n        final double[] double1 = new double[] { 1.23, 4.56 };\n        final float[] float1 = new float[] { 1.23f, 4.56f };\n        final boolean[] boolean1 = new boolean[] { true, false };\n        Assertions.assertEquals(-1, CompareToBuilder.reflectionCompare(int1, long1));\n        Assertions.assertEquals(-1, CompareToBuilder.reflectionCompare(long1, short1));\n        Assertions.assertEquals(-1, CompareToBuilder.reflectionCompare(short1, char1));\n        Assertions.assertEquals(-1, CompareToBuilder.reflectionCompare(char1, byte1));\n        Assertions.assertEquals(-1, CompareToBuilder.reflectionCompare(byte1, double1));\n        Assertions.assertEquals(-1, CompareToBuilder.reflectionCompare(double1, float1));\n        Assertions.assertEquals(-1, CompareToBuilder.reflectionCompare(float1, boolean1));\n    }\n}\n    \n\n### JUNIT 5:\npackage org.apache.commons.lang3.builder;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class CompareToBuilderTest {\n    private static final String STR1 = \"abc\";\n    private static final String STR2 = \"def\";\n    private static final Integer INT1 = 0;\n    private static final Integer INT2 = 1;\n    private static final Double DOUBLE_1 = 1.23d;\n    private static final Double DOUBLE_2 = 4.56d;\n    private static final Boolean BOOLEAN_1 = true;\n    private static final Boolean BOOLEAN_2 = false;\n    \n\n    @Test\n    public void testAppendSuper() {\n        <FILL>\n    }\n}\n",
        "public void appendTest() {\n    TestObject test1 = new TestObject(\"value\");\n    TestObject test2 = new TestObject(\"value\");\n    assertEquals(new CompareToBuilder().append(test1, test2).toComparison(), 0);\n    \n    test2.setValue(\"otherValue\");\n    assertTrue(new CompareToBuilder().append(test1, test2).toComparison() < 0);\n}",
        "    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        \n        assertEquals(0, builder.toComparison());\n        \n        // append test\n        builder.append(1, 2);\n        assertEquals(-1, builder.toComparison());\n        \n        builder.append(2, 3);\n        assertEquals(-1, builder.toComparison());\n    }"
    ]
}