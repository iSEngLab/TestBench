{
    "project_name": "commons-lang",
    "file_name": "CompareToBuilder.java",
    "relative_path": "commons-lang/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java",
    "execute_path": "commons-lang",
    "package": "org.apache.commons.lang3.builder",
    "docstring": "/**\n     * Appends to the {@code builder} the deep comparison of\n     * two {@code boolean} arrays.\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using {@code ==}</li>\n     *  <li>Check if for {@code null}, {@code null} is less than non-{@code null}</li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(boolean, boolean)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand side array\n     * @param rhs  right-hand side array\n     * @return this\n     */",
    "source_code": "\npublic CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {\n    if (comparison != 0) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null) {\n        comparison = -1;\n        return this;\n    }\n    if (rhs == null) {\n        comparison = 1;\n        return this;\n    }\n    if (lhs.length != rhs.length) {\n        comparison = lhs.length < rhs.length ? -1 : 1;\n        return this;\n    }\n    for (int i = 0; i < lhs.length && comparison == 0; i++) {\n        append(lhs[i], rhs[i]);\n    }\n    return this;\n}\n",
    "class_name": "CompareToBuilder",
    "method_name": "append",
    "arguments": [
        "boolean[] lhs",
        "boolean[] rhs"
    ],
    "generate_test": [
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Arrange\n        boolean[] lhs = new boolean[2];\n        boolean[] rhs = new boolean[3];\n        lhs[0] = true;\n        lhs[1] = false;\n        rhs[0] = true;\n        rhs[1] = false;\n        rhs[2] = true;\n\n        // Act\n        CompareToBuilder builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        int comparison = builder.toComparison();\n\n        // Assert\n        assertEquals(-1, comparison);\n    }\n}",
        "\npackage org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        boolean[] lhs = new boolean[3];\n        boolean[] rhs = new boolean[4];\n        \n        assertEquals(0, new CompareToBuilder().append(lhs, rhs).toComparison());\n    }\n}",
        "\npackage org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        boolean[] lhs = new boolean[]{true, false};\n        boolean[] rhs = new boolean[]{false, true};\n        CompareToBuilder builder = new CompareToBuilder();\n        assertEquals(1, builder.append(lhs, rhs).toComparison());\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Test case 1: Both arrays are null\n        boolean[] lhs = null;\n        boolean[] rhs = null;\n        assertEquals(0, new CompareToBuilder().append(lhs, rhs).build());\n\n        // Test case 2: One array is null and the other is not\n        lhs = new boolean[1];\n        rhs = null;\n        assertEquals(-1, new CompareToBuilder().append(lhs, rhs).build());\n\n        // Test case 3: Both arrays are of different lengths\n        lhs = new boolean[] { true, false };\n        rhs = new boolean[] { true, false, true };\n        assertEquals(-1, new CompareToBuilder().append(lhs, rhs).build());\n\n        // Test case 4: Both arrays are of the same length and contain the same elements\n        lhs = new boolean[] { true, false };\n        rhs = new boolean[] { true, false };\n        assertEquals(0, new CompareToBuilder().append(lhs, rhs).build());\n\n        // Test case 5: Both arrays are of the same length and contain different elements\n        lhs = new boolean[] { true, false };\n        rhs = new boolean[] { false, true };\n        assertEquals(-1, new CompareToBuilder().append(lhs, rhs).build());\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Set up test data\n        boolean[] lhs = new boolean[]{true, false};\n        boolean[] rhs = new boolean[]{false, true};\n\n        // Create a new instance of the builder\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Invoke the append method on the builder with test data\n        builder.append(lhs, rhs);\n\n        // Check that the comparison value has been set to 1 (greater than)\n        assertEquals(builder.getComparison(), 1);\n    }\n}",
        "\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Arrange\n        CompareToBuilder builder = new CompareToBuilder();\n        boolean[] lhs = new boolean[1];\n        boolean[] rhs = new boolean[2];\n\n        // Act\n        int comparison = builder.append(lhs, rhs).toComparison();\n\n        // Assert\n        assertEquals(-1, comparison);\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Test case 1: same length, different values\n        boolean[] lhs = new boolean[] { true, false };\n        boolean[] rhs = new boolean[] { false, true };\n        assertEquals(-1, new CompareToBuilder().append(lhs, rhs).toComparison());\n        \n        // Test case 2: different length, same values\n        lhs = new boolean[] { true, false, true };\n        rhs = new boolean[] { false, true };\n        assertEquals(1, new CompareToBuilder().append(lhs, rhs).toComparison());\n        \n        // Test case 3: different length, different values\n        lhs = new boolean[] { true, false, true };\n        rhs = new boolean[] { false, true, false };\n        assertEquals(-1, new CompareToBuilder().append(lhs, rhs).toComparison());\n        \n        // Test case 4: null arrays\n        lhs = null;\n        rhs = new boolean[] { false, true, false };\n        assertEquals(-1, new CompareToBuilder().append(lhs, rhs).toComparison());\n        \n        // Test case 5: empty arrays\n        lhs = new boolean[0];\n        rhs = new boolean[0];\n        assertEquals(0, new CompareToBuilder().append(lhs, rhs).toComparison());\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Test case 1: null arrays\n        boolean[] lhs = null;\n        boolean[] rhs = null;\n        assertEquals(0, new CompareToBuilder().append(lhs, rhs).toComparison());\n        \n        // Test case 2: same length arrays\n        lhs = new boolean[]{true, false};\n        rhs = new boolean[]{true, false};\n        assertEquals(0, new CompareToBuilder().append(lhs, rhs).toComparison());\n        \n        // Test case 3: different length arrays\n        lhs = new boolean[]{true, false, true};\n        rhs = new boolean[]{true, false};\n        assertEquals(-1, new CompareToBuilder().append(lhs, rhs).toComparison());\n    }\n}",
        "\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        boolean[] lhs = {true, false};\n        boolean[] rhs = {true, true};\n        int result = builder.append(lhs, rhs).toComparison();\n        assertEquals(-1, result);\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        boolean[] lhs = new boolean[] { true, false };\n        boolean[] rhs = new boolean[] { false, true };\n        CompareToBuilder builder = new CompareToBuilder();\n        assertEquals(builder.append(lhs, rhs).build(), -1);\n    }\n}"
    ]
}