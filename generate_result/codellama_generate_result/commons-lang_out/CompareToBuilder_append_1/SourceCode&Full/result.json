{
    "project_name": "commons-lang",
    "file_name": "CompareToBuilder.java",
    "relative_path": "commons-lang/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java",
    "execute_path": "commons-lang",
    "package": "org.apache.commons.lang3.builder",
    "docstring": "/**\n     * Appends to the {@code builder} the deep comparison of\n     * two {@code byte} arrays.\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using {@code ==}</li>\n     *  <li>Check if for {@code null}, {@code null} is less than non-{@code null}</li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(byte, byte)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand side array\n     * @param rhs  right-hand side array\n     * @return this\n     */",
    "source_code": "\npublic CompareToBuilder append(final byte[] lhs, final byte[] rhs) {\n    if (comparison != 0) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null) {\n        comparison = -1;\n        return this;\n    }\n    if (rhs == null) {\n        comparison = 1;\n        return this;\n    }\n    if (lhs.length != rhs.length) {\n        comparison = lhs.length < rhs.length ? -1 : 1;\n        return this;\n    }\n    for (int i = 0; i < lhs.length && comparison == 0; i++) {\n        append(lhs[i], rhs[i]);\n    }\n    return this;\n}\n",
    "class_name": "CompareToBuilder",
    "method_name": "append",
    "arguments": [
        "byte[] lhs",
        "byte[] rhs"
    ],
    "generate_test": [
        "package org.apache.commons.lang3.builder;\nimport java.util.*;\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        \n        // empty arrays are not equal\n        int[] a1 = {};\n        int[] a2 = {};\n        assertEquals(false, builder.append(a1, a2).isEquals());\n        \n        // compare arrays of different lengths\n        a1 = new int[]{1};\n        a2 = new int[]{1, 2};\n        assertEquals(-1, builder.append(a1, a2).toComparison());\n        assertEquals(1, builder.append(a2, a1).toComparison());\n        \n        // compare arrays of same length but different elements\n        a1 = new int[]{1};\n        a2 = new int[]{2};\n        assertEquals(-1, builder.append(a1, a2).toComparison());\n        assertEquals(1, builder.append(a2, a1).toComparison());\n        \n        // compare arrays of same elements and length\n        a1 = new int[]{1};\n        a2 = new int[]{1};\n        assertEquals(0, builder.append(a1, a2).toComparison());\n    }\n}",
        "package org.apache.commons.lang3;\n\nimport java.util.Arrays;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // test simple values\n        assertEquals(0, new CompareToBuilder().append(\"abc\", \"abc\").toComparison());\n        assertNotEquals(0, new CompareToBuilder().append(\"abc\", \"def\").toComparison());\n        \n        // test different types of value\n        assertEquals(-1, new CompareToBuilder().append(1).append(\"a\").toComparison());\n        assertEquals(1, new CompareToBuilder().append(\"b\").append(2).toComparison());\n        \n        // test null handling\n        assertEquals(0, new CompareToBuilder().append((Object)null).append((Object)null).toComparison());\n        assertNotEquals(0, new CompareToBuilder().append(\"a\").append((Object)null).toComparison());\n        \n        // test arrays\n        String[] a = {\"abc\"};\n        String[] b = {\"bcd\"};\n        assertEquals(-1, new CompareToBuilder().append(a, b).toComparison());\n    }\n}",
        "package org.apache.commons.lang3.builder;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class CompareToBuilderTest {\n    private int compare(Integer lhs, Integer rhs) {\n        return new CompareToBuilder().append(lhs, rhs).toComparison();\n    }\n    \n    @Test\n    public void testCompare_null() {\n        assertEquals(-1, compare(null, 1));\n        assertEquals(1, compare(2, null));\n        assertEquals(0, compare((Integer)null, (Integer)null));\n    }\n    \n    @Test\n    public void testCompare_simple() {\n        Integer integer = new Integer(1);\n        assertEquals(-1, compare(integer, 2));\n        assertEquals(1, compare(2, integer));\n        assertEquals(0, compare(integer, integer));\n        \n        int aByte = (byte) 5;\n        int anotherByte = (byte) 7;\n        assertEquals(-1, compare(aByte, anotherByte));\n    }\n    \n    @Test\n    public void testCompare_equal() {\n        // equal objects are not tested for reference equality\n        Integer integer = new Integer(1);\n        assertEquals(0, compare(integer, 1));\n        \n        int aByte = (byte) 5;\n        int anotherByte = (byte) 5;\n        assertEquals(0, compare(aByte, anotherByte));\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport java.util.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        \n        // Append superclass property - always call this first!\n        builder.appendSuper(1);\n        \n        // Append properties in the order they will be compared \n        // (this ensures that the comparison is consistent)\n        builder.append(\"abc\", \"cde\");\n        builder.append(1, 2);\n        \n        int result = builder.toComparison();\n        assertTrue(result < 0);\n    }\n}",
        "\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        Object lhs = new Object();\n        Object rhs = new Object();\n        assertEquals(-1, new CompareToBuilder().append(lhs, rhs).toComparison());\n        assertEquals(0, new CompareToBuilder().append(lhs, lhs).toComparison());\n        assertEquals(1, new CompareToBuilder().append(rhs, lhs).toComparison());\n    }\n}",
        "\npackage org.apache.commons.lang3.builder;\nimport java.util.*;\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // test append(Object, Object)\n        CompareToBuilder b = new CompareToBuilder();\n        b.append(\"1\", \"2\");\n        assertEquals(-1, b.toComparison());\n        \n        // test append(int, int)\n        b = new CompareToBuilder();\n        b.append(0, 1);\n        assertEquals(-1, b.toComparison());\n        \n        // test append(short, short)\n        b = new CompareToBuilder();\n        b.append((short) 0, (short) 1);\n        assertEquals(-1, b.toComparison());\n        \n        // test append(byte, byte)\n        b = new CompareToBuilder();\n        b.append((byte) 0, (byte) 1);\n        assertEquals(-1, b.toComparison());\n        \n        // test append(long, long)\n        b = new CompareToBuilder();\n        b.append(0L, 1L);\n        assertEquals(-1, b.toComparison());\n        \n        // test append(float, float, Comparator<Float>)\n        b = new CompareToBuilder();\n        b.append((float) 0, (float) 1, Float::compare);\n        assertEquals(-1, b.toComparison());\n        \n        // test append(double, double)\n        b = new CompareToBuilder();\n        b.append(0d, 1d);\n        assertEquals(-1, b.toComparison());\n    }\n    \n}",
        "    \n    @Test\n    public void appendTest() {\n        // Tests that append(Object, Object) works properly.\n        CompareToBuilder builder = new CompareToBuilder();\n        \n        Object obj1 = new Object();\n        Object obj2 = new Object();\n        builder.append(obj1, obj2);\n        assertEquals(-1, builder.toComparison());\n    }",
        "\npackage org.apache.commons.lang3.builder;\n\nimport java.util.Comparator;\n\npublic class CompareToBuilder {\n    private static final int EQUAL = 0;\n\n    @Test\n    public void append_ObjectArrays_Identical() {\n        Object[] a1 = new Object[5];\n        Object[] a2 = new Object[5];\n        for (int i = 0; i < 5; i++) {\n            a1[i] = i + \"a\";\n            a2[i] = i + \"b\";\n        }\n        CompareToBuilder builder = new CompareToBuilder();\n        builder.append(a1, a2);\n        assertEquals(EQUAL, builder.toComparison());\n    }\n}",
        "\npackage org.apache.commons.lang3;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        assertEquals(1, builder.append(0, 1).toComparison());\n        assertEquals(-1, builder.append(1, 0).toComparison());\n        assertEquals(0, builder.append(1, 1).toComparison());\n    }\n}\n\n    \n\n### JUNIT Test case:\npackage org.apache.commons.lang3.builder;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        <FILL>\n    }\n}\n    \n\n### Response:",
        "\npublic void appendTest() {\n    // given:\n    final Object left = null;\n    final Object right = null;\n    final Comparator comparator = null;\n    \n    // when:\n    CompareToBuilder compareToBuilder = new CompareToBuilder();\n    compareToBuilder.append(left, right, comparator);\n    \n    // then:\n    assertEquals(-1, compareToBuilder.toComparison());\n}\n"
    ]
}