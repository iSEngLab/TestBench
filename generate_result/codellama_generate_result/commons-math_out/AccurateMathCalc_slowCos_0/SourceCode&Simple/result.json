{
    "project_name": "commons-math",
    "file_name": "AccurateMathCalc.java",
    "relative_path": "commons-math/commons-math-core/src/main/java/org/apache/commons/math4/core/jdkmath/AccurateMathCalc.java",
    "execute_path": "commons-math/commons-math-core",
    "package": "org.apache.commons.math4.core.jdkmath",
    "docstring": "/**\n     *  For x between 0 and pi/4 compute cosine using Talor series\n     *  cos(x) = 1 - x^2/2! + x^4/4! ...\n     * @param x number from which cosine is requested\n     * @param result placeholder where to put the result in extended precision\n     * (may be null)\n     * @return cos(x)\n     */",
    "source_code": "\nstatic double slowCos(final double x, final double[] result) {\n\n    final double[] xs = new double[2];\n    final double[] ys = new double[2];\n    final double[] facts = new double[2];\n    final double[] as = new double[2];\n    split(x, xs);\n    ys[0] = ys[1] = 0.0;\n\n    for (int i = FACT.length - 1; i >= 0; i--) {\n        splitMult(xs, ys, as);\n        ys[0] = as[0];\n        ys[1] = as[1];\n\n        if ((i & 1) != 0) { // skip odd entries\n            continue;\n        }\n\n        split(FACT[i], as);\n        splitReciprocal(as, facts);\n\n        if ((i & 2) != 0) { // alternate terms are negative\n            facts[0] = -facts[0];\n            facts[1] = -facts[1];\n        }\n\n        splitAdd(ys, facts, as);\n        ys[0] = as[0]; ys[1] = as[1];\n    }\n\n    if (result != null) {\n        result[0] = ys[0];\n        result[1] = ys[1];\n    }\n\n    return ys[0] + ys[1];\n}\n",
    "class_name": "AccurateMathCalc",
    "method_name": "slowCos",
    "arguments": [
        "double x",
        "double[] result"
    ],
    "generate_test": [
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        double x = 0.5; // input value for the cosine function\n        double[] result = new double[2]; // output array for the cosine function\n\n        double expectedResult = Math.cos(x); // expected result from the standard cosine function\n        double actualResult = AccurateMathCalc.slowCos(x, result); // actual result from the slow cosine function\n\n        assertEquals(expectedResult, actualResult, 1e-10); // check if the results are equal within a precision of 1e-10\n    }\n}",
        "\n@Test\npublic void slowCosTest() {\n    double x = 0.5; // input value\n    double[] result = new double[2]; // output array\n\n    // call the method to be tested\n    double expectedResult = AccurateMathCalc.slowCos(x, result);\n\n    // assert that the result is correct\n    assertEquals(0.8775825618903728, expectedResult, 1e-10);\n}",
        "\n@Test\npublic void slowCosTest() {\n    double x = 1.0;\n    double[] result = new double[2];\n    AccurateMathCalc.slowCos(x, result);\n    assertEquals(result[0], -0.544, 1e-6);\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        // Test case 1: x = 0\n        double[] result = new double[2];\n        double actual = AccurateMathCalc.slowCos(0, result);\n        assertEquals(1.0, actual, 1e-15);\n        assertArrayEquals(new double[] { 0.0, 0.0 }, result, 1e-15);\n\n        // Test case 2: x = PI/4\n        double expected = Math.cos(Math.PI / 4);\n        actual = AccurateMathCalc.slowCos(Math.PI / 4, result);\n        assertEquals(expected, actual, 1e-15);\n        assertArrayEquals(new double[] { 0.7071067812, 0.7071067812 }, result, 1e-15);\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        // Test case 1: input is a multiple of pi/2\n        double x = Math.PI / 2;\n        double[] result = new double[2];\n        double expected = Math.cos(x);\n        AccurateMathCalc.slowCos(x, result);\n        assertEquals(expected, result[0], \"Expected cos(x) to be equal to the slow cosine approximation\");\n\n        // Test case 2: input is not a multiple of pi/2\n        x = Math.PI / 3;\n        expected = Math.cos(x);\n        AccurateMathCalc.slowCos(x, result);\n        assertEquals(expected, result[0], \"Expected cos(x) to be equal to the slow cosine approximation\");\n    }\n}",
        "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        double x = 0.5; // valid input value for the cosine function\n        double expectedResult = Math.cos(x); // expected result from the standard library\n        double tolerance = 1e-10; // tolerance for checking the results\n        \n        double[] result = new double[2];\n        AccurateMathCalc.slowCos(x, result);\n        assertEquals(expectedResult, result[0], tolerance); // check the first component of the result\n    }\n}",
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        double x = 3.14 / 2; // pi/2\n        double[] result = new double[2];\n        assertEquals(0.0, AccurateMathCalc.slowCos(x, result), 1e-6);\n    }\n}",
        "\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        double x = Math.PI / 2; // input value for the cosine function\n        double expectedResult = 0.0; // expected result of the cosine function at x\n        double[] result = new double[2];\n\n        double actualResult = AccurateMathCalc.slowCos(x, result);\n\n        assertEquals(expectedResult, actualResult, 1e-6); // check if the actual result is within a small tolerance of the expected result\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        // Test 1: input is a positive number less than PI/2\n        double x = Math.PI / 4;\n        double expectedResult = Math.cos(x);\n        double[] actualResult = new double[2];\n        AccurateMathCalc.slowCos(x, actualResult);\n        assertEquals(expectedResult, actualResult[0], 1E-10);\n        assertEquals(0.0, actualResult[1], 1E-10);\n\n        // Test 2: input is a negative number less than -PI/2\n        x = -Math.PI / 4;\n        expectedResult = Math.cos(x);\n        AccurateMathCalc.slowCos(x, actualResult);\n        assertEquals(expectedResult, actualResult[0], 1E-10);\n        assertEquals(0.0, actualResult[1], 1E-10);\n\n        // Test 3: input is a positive number greater than PI/2\n        x = Math.PI * 5 / 4;\n        expectedResult = Math.cos(x);\n        AccurateMathCalc.slowCos(x, actualResult);\n        assertEquals(expectedResult, actualResult[0], 1E-10);\n        assertEquals(0.0, actualResult[1], 1E-10);\n\n        // Test 4: input is a negative number greater than -PI/2\n        x = -Math.PI * 5 / 4;\n        expectedResult = Math.cos(x);\n        AccurateMathCalc.slowCos(x, actualResult);\n        assertEquals(expectedResult, actualResult[0], 1E-10);\n        assertEquals(0.0, actualResult[1], 1E-10);\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        double[] result = new double[2];\n        assertEquals(1.0, slowCos(0.0, result), 1e-6); // Test for cos(0)\n        assertEquals(-1.0, slowCos(Math.PI, result), 1e-6); // Test for cos(\u03c0)\n    }\n}"
    ]
}