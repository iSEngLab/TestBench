{
    "project_name": "commons-math",
    "file_name": "AccurateMathCalc.java",
    "relative_path": "commons-math/commons-math-core/src/main/java/org/apache/commons/math4/core/jdkmath/AccurateMathCalc.java",
    "execute_path": "commons-math/commons-math-core",
    "package": "org.apache.commons.math4.core.jdkmath",
    "docstring": "/**\n     *  For x between 0 and pi/4 compute cosine using Talor series\n     *  cos(x) = 1 - x^2/2! + x^4/4! ...\n     * @param x number from which cosine is requested\n     * @param result placeholder where to put the result in extended precision\n     * (may be null)\n     * @return cos(x)\n     */",
    "source_code": "\nstatic double slowCos(final double x, final double[] result) {\n\n    final double[] xs = new double[2];\n    final double[] ys = new double[2];\n    final double[] facts = new double[2];\n    final double[] as = new double[2];\n    split(x, xs);\n    ys[0] = ys[1] = 0.0;\n\n    for (int i = FACT.length - 1; i >= 0; i--) {\n        splitMult(xs, ys, as);\n        ys[0] = as[0];\n        ys[1] = as[1];\n\n        if ((i & 1) != 0) { // skip odd entries\n            continue;\n        }\n\n        split(FACT[i], as);\n        splitReciprocal(as, facts);\n\n        if ((i & 2) != 0) { // alternate terms are negative\n            facts[0] = -facts[0];\n            facts[1] = -facts[1];\n        }\n\n        splitAdd(ys, facts, as);\n        ys[0] = as[0]; ys[1] = as[1];\n    }\n\n    if (result != null) {\n        result[0] = ys[0];\n        result[1] = ys[1];\n    }\n\n    return ys[0] + ys[1];\n}\n",
    "class_name": "AccurateMathCalc",
    "method_name": "slowCos",
    "arguments": [
        "double x",
        "double[] result"
    ],
    "generate_test": [
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        final double x = 0.123456; // input value for the cos function\n        final double[] result = new double[2]; // array to store the result of the cos function\n        final double expectedResult = Math.cos(x); // expected result from Math.cos method\n        \n        slowCos(x, result);\n        \n        assertEquals(expectedResult, result[0] + result[1], 1E-15);\n    }\n}",
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        double[] result = new double[2];\n        slowCos(1.0, result);\n        assertEquals(result[0], 0.5403023058681397);\n        assertEquals(result[1], -0.8414709848078965);\n    }\n}",
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        double expectedResult = 0.5403023058681398;\n        double[] result = new double[2];\n        double x = Math.PI / 4; // x = pi/4\n        slowCos(x, result);\n        assertEquals(expectedResult, result[0], 1E-15);\n    }\n}",
        "\ndouble[] result = new double[2];\nAccurateMathCalc.slowCos(3.14, result);\nSystem.out.println(\"cos(3.14) = \" + result[0] + \" + i\" + result[1]);\n",
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        double[] result = new double[2];\n        double x = 10; // input value for the function\n        assertEquals(slowCos(x, result), Math.cos(x), 1e-6); // check that the result is equal to the expected result\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        double x = 0.5; // input value for cosine calculation\n        double expectedResult = Math.cos(x); // expected output of the cosine function\n        double[] result = new double[2];\n        double actualResult = AccurateMathCalc.slowCos(x, result);\n        assertEquals(expectedResult, actualResult, 1e-8, \"Incorrect cosine calculation for x=\" + x);\n    }\n}\n",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        double[] result = new double[2];\n        assertEquals(0.7390851332151607, slowCos(0.0, result), 0.00001); // Test the case when x is zero\n        assertArrayEquals(new double[] {0.0, -0.0}, result, 0.00001); // Verify that result[0] and result[1] are equal to zero\n\n        assertEquals(-1.6331239318537384, slowCos(Math.PI / 2.0, result), 0.00001); // Test the case when x is PI/2\n        assertArrayEquals(new double[] {0.0, -0.0}, result, 0.00001); // Verify that result[0] and result[1] are equal to zero\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        double x = 0.5;\n        double[] result = new double[2];\n        double expectedResult = Math.cos(x);\n\n        assertEquals(expectedResult, AccurateMathCalc.slowCos(x, result), 1e-10);\n    }\n}",
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        // Test case 1: x = 0.0\n        double[] result = new double[2];\n        double actual = AccurateMathCalc.slowCos(0.0, result);\n        assertEquals(1.0, actual, 1E-15);\n        assertEquals(0.0, result[0], 1E-15);\n        assertEquals(0.0, result[1], 1E-15);\n\n        // Test case 2: x = PI/4 (45 degrees)\n        actual = AccurateMathCalc.slowCos(Math.PI / 4, result);\n        assertEquals(Math.sqrt(2) / 2, actual, 1E-15);\n        assertEquals(-0.70710678118, result[0], 1E-15);\n        assertEquals(0.70710678118, result[1], 1E-15);\n\n        // Test case 3: x = PI/2 (90 degrees)\n        actual = AccurateMathCalc.slowCos(Math.PI / 2, result);\n        assertEquals(0.0, actual, 1E-15);\n        assertEquals(-1.0, result[0], 1E-15);\n        assertEquals(0.0, result[1], 1E-15);\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        double[] result = new double[2];\n        assertEquals(0.5403023058681, slowCos(0.5, result), 1e-15);\n        assertArrayEquals(result, new double[] {0.5403023058681, -0.84147098480796}, 1e-15);\n    }\n}"
    ]
}