{
    "project_name": "commons-math",
    "file_name": "AccurateMathCalc.java",
    "relative_path": "commons-math/commons-math-core/src/main/java/org/apache/commons/math4/core/jdkmath/AccurateMathCalc.java",
    "execute_path": "commons-math/commons-math-core",
    "package": "org.apache.commons.math4.core.jdkmath",
    "docstring": "/**\n     *  For x between 0 and 1, returns exp(x), uses extended precision.\n     *  @param x argument of exponential\n     *  @param result placeholder where to place exp(x) split in two terms\n     *  for extra precision (i.e. exp(x) = result[0] + result[1]\n     *  @return exp(x)\n     */",
    "source_code": "\nstatic double slowexp(final double x, final double[] result) {\n    final double[] xs = new double[2];\n    final double[] ys = new double[2];\n    final double[] facts = new double[2];\n    final double[] as = new double[2];\n    split(x, xs);\n    ys[0] = ys[1] = 0.0;\n\n    for (int i = FACT.length - 1; i >= 0; i--) {\n        splitMult(xs, ys, as);\n        ys[0] = as[0];\n        ys[1] = as[1];\n\n        split(FACT[i], as);\n        splitReciprocal(as, facts);\n\n        splitAdd(ys, facts, as);\n        ys[0] = as[0];\n        ys[1] = as[1];\n    }\n\n    if (result != null) {\n        result[0] = ys[0];\n        result[1] = ys[1];\n    }\n\n    return ys[0] + ys[1];\n}\n",
    "class_name": "AccurateMathCalc",
    "method_name": "slowexp",
    "arguments": [
        "double x",
        "double[] result"
    ],
    "generate_test": [
        "    package org.apache.commons.math4.core.jdkmath;\n    \n    import org.junit.jupiter.api.*;\n    import static org.junit.jupiter.api.Assertions.*;\n    \n    public class AccurateMathCalcTest {\n        @Test\n        public void slowexpTest() {\n            double[] x = new double[2];\n            for (double i = 0; i < 1e-15; i += 1e-30) {\n                split(i, x);\n                double[] y = slowExp(x[0]);\n                assertEquals(Math.exp(i), fastJoin(y));\n            }\n        }\n    }\n    \n    ",
        "@Test\n    public void slowexpTest() {\n        double[] x = new double[]{1.0, 2.0};\n        double[] y = AccurateMathCalc.slowExp(x);\n\n        assertEquals(1.0, y[0], 1e-15);\n        assertEquals(4.837628892101304, y[1], 1e-15);\n    }",
        "\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double[] x = new double[2];\n        double[] y = new double[2];\n        int n = 0;\n\n        for (int i = -512; i < 513; ++i) {\n            split((double) i / 16, x);\n            slowexp(x, y);\n            assertEquals(Math.exp((double) i / 16), resplit(y));\n        }\n    }\n}",
        "public class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double[] x = {1.0, 2.0, 3.0};\n        for (double d : x) {\n            double expected = Math.exp(d);\n            double actual = AccurateMathCalc.slowExp(d);\n            assertEquals(expected, actual, 0.01);\n        }\n    }\n}",
        "    \n\n// The JUnit tests for AccurateMathCalc.slowexp().\npackage org.apache.commons.math4.core.jdkmath;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double eps = 1e-16; // Error threshold for each test case\n\n        List<double[]> inputs = new ArrayList<>();\n        List<double[]> outputs = new ArrayList<>();\n        double[] xi;\n\n        // Test Case: 0.0\n        xi = new double[2];\n        xi[0] = 0.0;\n        xi[1] = 0.0;\n        inputs.add(xi);\n        outputs.add(new double[]{1.0, 0.0});\n\n        // Test Case: -0.0\n        xi = new double[2];\n        xi[0] = -0.0;\n        xi[1] = -0.0;\n        inputs.add(xi);\n        outputs.add(new double[]{1.0, 0.0});\n\n        // Test Case: 1.0\n        xi = new double[2];\n        xi[0] = 1.0;\n        xi[1] = 0.0;\n        inputs.add(xi);\n        outputs.add(new double[]{Math.E, 0.0});\n\n        // Test Case: -1.0\n        xi = new double[2];\n        xi[0] = -1.0;\n        xi[1] = 0.0;\n        inputs.add(xi);\n        outputs.add(new double[]{1.0/Math.E, 0.0});\n\n        // Test Case: 2.718281828459045\n        xi = new double[2];\n        xi[0] = 2.718281828459045;\n        xi[1] = 6.123233995736766E-17;\n        inputs.add(xi);\n        outputs.add(new double[]{Math.E, 0.0});\n\n        // Test Case: -2.718281828459045\n        xi = new double[2];\n        xi[0] = -2.718281828459045;\n        xi[1] = -6.12323399573676E-17;\n        inputs.add(xi);\n        outputs.add(new double[]{1.0/Math.E, 0.0});\n\n        for (int i=0; i<inputs.size(); ++i) {\n            AccurateMathCalc cm = new AccurateMathCalc();\n            double[] output = cm.slowexp(inputs.get(i));\n            assertEquals(output[0], outputs.get(i)[0]);\n        }\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\nimport java.io.BufferedWriter;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() throws Exception {\n        Path outputDir = Paths.get(\"src/main/java\");\n        DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        System.out.println(df.format(new Date()) + \" Start: slowexpTest\");\n        final int NUM_COEFFS = 10;\n        double[] coeffs = AccurateMathCalc.slowExpTable(NUM_COEFFS);\n        String tableName = \"EXP_SPLIT_COEF\";\n        Path path = outputDir.resolve(\"org/apache/commons/math4/core/jdkmath/\" + tableName + \".java\");\n        try (BufferedWriter writer = Files.newBufferedWriter(path, StandardCharsets.UTF_8)) {\n            writer.write(\"package org.apache.commons.math4.core.jdkmath;\\n\\n\");\n            writer.write(\"/**\\n *\\n * Licensed to the Apache Software Foundation (ASF) under one or more\\n * contributor license agreements.  See the NOTICE file distributed with\\n * this work for additional information regarding copyright ownership.\\n * The ASF licenses this file to You under the Apache License, Version 2.0\\n * (the \"License\"); you may not use this file except in compliance with\\n * the License.  You may obtain a copy of the License at\\n * <p>\\n * http://www.apache.org/licenses/LICENSE-2.0\\n * <p>\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\");\n            writer.write(\"public class \" + tableName + \" { // \" + NUM_COEFFS);\n            String[] values = new String[coeffs.length];\n            for (int i = 0; i < coeffs.length; ++i) {\n                if (Math.abs(values[i] - coeffs[i]) > 1e-7)\n                    fail(\"Difference in \" + tableName + \"[\\\" + i + \"\\\"]: \" + values[i] + \" != \" + coeffs[i]);\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        System.out.println(\"End of slowexpTest\");\n    }\n}",
        "\nimport org.apache.commons.math4.core.jdkmath.*;\npublic static void main(String[] args) {\n    double x = 0.5; // input value for the exponential function\n    double exp = AccurateMathCalc.slowExp(x);\n    System.out.println(\"Exponential of \" + x + \" is \" + exp);\n}\n",
        "<FILL>\n    \n    \n    @Test\n    public void slowexpTest() {\n        assertEquals(1.0, AccurateMathCalc.slowexp(0.0), 0);\n        assertEquals(2.718281828459045, AccurateMathCalc.slowexp(1.0), 0.0000001);\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport java.util.Arrays;\n\nclass AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double[] x = { 0, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 0.5, 1.0, 1.5, 2.0 };\n        double[][] expected = {\n                new double[x.length],\n                new double[x.length],\n                new double[x.length]\n            };\n        for (int i = 0; i < x.length; ++i) {\n            expected[1][i] = Math.exp(x[i]);\n            expected[2][i] = FastMathCalc.slowExp(x[i], 5);\n        }\n        assertTrue(Arrays.deepEquals(expected[0], expected[1]));\n        assertTrue(Arrays.deepEquals(expected[1], expected[2]));\n    }\n}",
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double x = 1e-5; // small argument\n        double expectedOutput = Math.E * x;\n        assertEquals(expectedOutput, AccurateMath.slowexp(x), 0.01);\n    }\n}\n"
    ]
}