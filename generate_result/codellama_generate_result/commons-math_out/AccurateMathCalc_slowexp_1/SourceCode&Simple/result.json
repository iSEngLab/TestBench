{
    "project_name": "commons-math",
    "file_name": "AccurateMathCalc.java",
    "relative_path": "commons-math/commons-math-core/src/main/java/org/apache/commons/math4/core/jdkmath/AccurateMathCalc.java",
    "execute_path": "commons-math/commons-math-core",
    "package": "org.apache.commons.math4.core.jdkmath",
    "docstring": "/**\n     *  For x between 0 and 1, returns exp(x), uses extended precision.\n     *  @param x argument of exponential\n     *  @param result placeholder where to place exp(x) split in two terms\n     *  for extra precision (i.e. exp(x) = result[0] + result[1]\n     *  @return exp(x)\n     */",
    "source_code": "\nstatic double slowexp(final double x, final double[] result) {\n    final double[] xs = new double[2];\n    final double[] ys = new double[2];\n    final double[] facts = new double[2];\n    final double[] as = new double[2];\n    split(x, xs);\n    ys[0] = ys[1] = 0.0;\n\n    for (int i = FACT.length - 1; i >= 0; i--) {\n        splitMult(xs, ys, as);\n        ys[0] = as[0];\n        ys[1] = as[1];\n\n        split(FACT[i], as);\n        splitReciprocal(as, facts);\n\n        splitAdd(ys, facts, as);\n        ys[0] = as[0];\n        ys[1] = as[1];\n    }\n\n    if (result != null) {\n        result[0] = ys[0];\n        result[1] = ys[1];\n    }\n\n    return ys[0] + ys[1];\n}\n",
    "class_name": "AccurateMathCalc",
    "method_name": "slowexp",
    "arguments": [
        "double x",
        "double[] result"
    ],
    "generate_test": [
        "@Test\npublic void slowexpTest() {\n    // Set up input parameters\n    final double x = 0.5;\n    final double[] result = new double[2];\n    \n    // Call the method being tested\n    AccurateMathCalc.slowexp(x, result);\n    \n    // Assert that the output is correct\n    assertEquals(1.0 + (x / 2), result[0], 1e-6);\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double[] result = new double[2];\n        assertEquals(0, AccurateMathCalc.slowexp(0.0, result)[0], 1E-6);\n        assertEquals(1, AccurateMathCalc.slowexp(1.0, result)[0], 1E-6);\n        assertEquals(2, AccurateMathCalc.slowexp(2.0, result)[0], 1E-6);\n    }\n}",
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double[] result = new double[2];\n        assertEquals(slowexp(10, result), 22026.465794806713, 0.0);\n        assertEquals(result[0], -1.4657948067136116E-7, 0.0);\n        assertEquals(result[1], 2.2026465794806713E+4, 0.0);\n    }\n}",
        "@Test\npublic void slowexpTest() {\n    double[] result = new double[2];\n    double x = 0.5; // input value for exp(x)\n    AccurateMathCalc.slowexp(x, result);\n    assertEquals(1.64872127070013e+00, result[0], 1e-9);\n    assertEquals(-5.75196241004098e-13, result[1], 1e-9);\n}",
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double[] result = new double[2];\n        double expectedResult = 123456789.0; // Replace with the expected result of the test\n        assertEquals(expectedResult, AccurateMathCalc.slowexp(result));\n    }\n}\n",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double[] result = new double[2];\n        assertEquals(1.0, AccurateMathCalc.slowexp(0.0, result), 1E-15);\n        assertEquals(Math.exp(1.0), AccurateMathCalc.slowexp(1.0, result), 1E-15);\n    }\n}",
        "\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double x = 10.0; // input value\n        double[] result = new double[2]; // output array\n        \n        assertEquals(slowexp(x, result), x + Math.log(result[0] + result[1])); // expected output\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double x = 2.0; // input value\n        double[] result = new double[2]; // array to store the result\n        double expectedResult = Math.exp(x); // expected result from Math.exp method\n        \n        AccurateMathCalc.slowexp(x, result);\n        assertEquals(expectedResult, result[0] + result[1], 0.001); // check that the result is close to the expected value\n    }\n}\n",
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double x = 10;\n        double[] result = new double[2];\n        assertEquals(slowexp(x, result)[0], Math.exp(x));\n        assertEquals(slowexp(x, result)[1], 0);\n    }\n}",
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double inputValue = 10.0; // You can change this value to test different inputs\n        double[] result = new double[2];\n        \n        double expectedResult = 22026.465794806717; // This is the expected result for inputValue = 10.0\n        \n        AccurateMathCalc.slowexp(inputValue, result);\n        \n        assertEquals(expectedResult, result[0] + result[1], 1e-9);\n    }\n}\n"
    ]
}