{
    "project_name": "commons-math",
    "file_name": "AccurateMathCalc.java",
    "relative_path": "commons-math/commons-math-core/src/main/java/org/apache/commons/math4/core/jdkmath/AccurateMathCalc.java",
    "execute_path": "commons-math/commons-math-core",
    "package": "org.apache.commons.math4.core.jdkmath",
    "docstring": "/**\n     *  For x between 0 and 1, returns exp(x), uses extended precision.\n     *  @param x argument of exponential\n     *  @param result placeholder where to place exp(x) split in two terms\n     *  for extra precision (i.e. exp(x) = result[0] + result[1]\n     *  @return exp(x)\n     */",
    "source_code": "\nstatic double slowexp(final double x, final double[] result) {\n    final double[] xs = new double[2];\n    final double[] ys = new double[2];\n    final double[] facts = new double[2];\n    final double[] as = new double[2];\n    split(x, xs);\n    ys[0] = ys[1] = 0.0;\n\n    for (int i = FACT.length - 1; i >= 0; i--) {\n        splitMult(xs, ys, as);\n        ys[0] = as[0];\n        ys[1] = as[1];\n\n        split(FACT[i], as);\n        splitReciprocal(as, facts);\n\n        splitAdd(ys, facts, as);\n        ys[0] = as[0];\n        ys[1] = as[1];\n    }\n\n    if (result != null) {\n        result[0] = ys[0];\n        result[1] = ys[1];\n    }\n\n    return ys[0] + ys[1];\n}\n",
    "class_name": "AccurateMathCalc",
    "method_name": "slowexp",
    "arguments": [
        "double x",
        "double[] result"
    ],
    "generate_test": [
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double x = 100.0;\n        double[] result = new double[2];\n        slowexp(x, result);\n        assertEquals(result[0], Math.exp(x), 1E-5);\n    }\n}",
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        // Test case 1: x = 0, result = [0, 0]\n        double[] result = new double[2];\n        slowexp(0.0, result);\n        assertArrayEquals(new double[] {0.0, 0.0}, result, 1E-6);\n\n        // Test case 2: x = 1, result = [0, 1]\n        result = new double[2];\n        slowexp(1.0, result);\n        assertArrayEquals(new double[] {0.0, 1.0}, result, 1E-6);\n\n        // Test case 3: x = -1, result = [-1, 0]\n        result = new double[2];\n        slowexp(-1.0, result);\n        assertArrayEquals(new double[] {-1.0, 0.0}, result, 1E-6);\n\n        // Test case 4: x = Math.PI / 2, result = [Math.sin(Math.PI/2), Math.cos(Math.PI/2)]\n        result = new double[2];\n        slowexp(Math.PI / 2, result);\n        assertArrayEquals(new double[] {0.939692621, -0.34202015}, result, 1E-6);\n    }\n}",
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double[] result = new double[2];\n        double x = 0.5; // Set the input value of x\n        double expectedResult = Math.exp(x); // Calculate the expected result using the Java Math class\n        assertEquals(expectedResult, slowexp(x, result), 1e-10); // Compare the actual result with the expected result using the accuracy of 1e-10\n    }\n}",
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double x = 2.5;\n        double[] result = new double[2];\n        assertEquals(slowexp(x, result), 7.389056098930649);\n        assertArrayEquals(result, new double[]{1.0, 6.389056098930649}, 0.000001);\n    }\n}",
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        // Test with x = 0\n        double[] result1 = new double[2];\n        assertEquals(slowexp(0, result1), 1.0);\n\n        // Test with x = -1\n        double[] result2 = new double[2];\n        assertEquals(slowexp(-1, result2), 0.367879441171442);\n    }\n}",
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double[] result = new double[2];\n        double x = 10;\n        double expectedResult = 22026.465794806718;\n        \n        AccurateMathCalc.slowexp(x, result);\n        \n        assertEquals(expectedResult, result[0], 0.00001);\n    }\n}",
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double x = 1.0, result = 2.0;\n        final double[] xs = new double[2];\n        final double[] ys = new double[2];\n        final double[] facts = new double[2];\n        final double[] as = new double[2];\n        \n        split(x, xs);\n        ys[0] = ys[1] = 0.0;\n\n        for (int i = FACT.length - 1; i >= 0; i--) {\n            splitMult(xs, ys, as);\n            ys[0] = as[0];\n            ys[1] = as[1];\n\n            split(FACT[i], as);\n            splitReciprocal(as, facts);\n\n            splitAdd(ys, facts, as);\n            ys[0] = as[0];\n            ys[1] = as[1];\n        }\n        \n        assertEquals(result, ys[0] + ys[1], 1e-6);\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double[] result = new double[2];\n        double[] expectedResult = new double[] {10.0, 5.0};\n        double inputX = 3;\n        double[] xs = new double[] {inputX, 0.0};\n\n        slowexp(xs, result);\n\n        assertArrayEquals(result, expectedResult);\n    }\n}",
        "\n@Test\npublic void slowexpTest() {\n    double[] result = new double[2];\n    assertEquals(1.0, AccurateMathCalc.slowexp(0.0, result));\n    assertEquals(result[0], 0.0);\n    assertEquals(result[1], 0.0);\n}",
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double[] result = new double[2];\n        double x = 1.0;\n        double expected = Math.E;\n\n        // Call the method with a valid input\n        double actual = AccurateMathCalc.slowexp(x, result);\n\n        // Check that the result is correct\n        assertEquals(expected, actual);\n    }\n}"
    ]
}