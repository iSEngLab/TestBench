{
    "project_name": "commons-math",
    "file_name": "Neuron.java",
    "relative_path": "commons-math/commons-math-neuralnet/src/main/java/org/apache/commons/math4/neuralnet/Neuron.java",
    "execute_path": "commons-math/commons-math-neuralnet",
    "package": "org.apache.commons.math4.neuralnet",
    "docstring": "/**\n     * Tries to atomically update the neuron's features.\n     * Update will be performed only if the expected values match the\n     * current values.<br>\n     * In effect, when concurrent threads call this method, the state\n     * could be modified by one, so that it does not correspond to the\n     * the state assumed by another.\n     * Typically, a caller {@link #getFeatures() retrieves the current state},\n     * and uses it to compute the new state.\n     * During this computation, another thread might have done the same\n     * thing, and updated the state: If the current thread were to proceed\n     * with its own update, it would overwrite the new state (which might\n     * already have been used by yet other threads).\n     * To prevent this, the method does not perform the update when a\n     * concurrent modification has been detected, and returns {@code false}.\n     * When this happens, the caller should fetch the new current state,\n     * redo its computation, and call this method again.\n     *\n     * @param expect Current values of the features, as assumed by the caller.\n     * Update will never succeed if the contents of this array does not match\n     * the values returned by {@link #getFeatures()}.\n     * @param update Features's new values.\n     * @return {@code true} if the update was successful, {@code false}\n     * otherwise.\n     * @throws IllegalArgumentException if the length of {@code update} is\n     * not the same as specified in the {@link #Neuron(long,double[])\n     * constructor}.\n     */",
    "source_code": "\npublic boolean compareAndSetFeatures(double[] expect,\n                                     double[] update) {\n    if (update.length != size) {\n        throw new NeuralNetException(NeuralNetException.SIZE_MISMATCH,\n                                     update.length, size);\n    }\n\n    // Get the internal reference. Note that this must not be a copy;\n    // otherwise the \"compareAndSet\" below will always fail.\n    final double[] current = features.get();\n    if (!containSameValues(current, expect)) {\n        // Some other thread already modified the state.\n        return false;\n    }\n\n    // Increment attempt counter.\n    numberOfAttemptedUpdates.incrementAndGet();\n\n    if (features.compareAndSet(current, update.clone())) {\n        // The current thread could atomically update the state (attempt succeeded).\n        numberOfSuccessfulUpdates.incrementAndGet();\n        return true;\n    } else {\n        // Some other thread came first (attempt failed).\n        return false;\n    }\n}\n",
    "class_name": "Neuron",
    "method_name": "compareAndSetFeatures",
    "arguments": [
        "double[] expect",
        "double[] update"
    ],
    "generate_test": [
        "\n@Test\npublic void compareAndSetFeaturesTest() {\n    // Create a new Neuron object with the specified identifier and features.\n    Neuron neuron = new Neuron(1, new double[] {1.0, 2.0});\n\n    // Set up the expected update values.\n    double[] expect = new double[] {3.0, 4.0};\n    double[] update = new double[] {5.0, 6.0};\n\n    // Test that the compareAndSetFeatures method returns true when the features are updated successfully.\n    assertTrue(neuron.compareAndSetFeatures(expect, update));\n\n    // Verify that the features were updated correctly.\n    assertArrayEquals(update, neuron.getFeatures());\n}",
        "\npackage org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        // Create a new neuron instance with the given features\n        Neuron neuron = new Neuron(123, new double[] {0.5, 0.6});\n        \n        // Check that the initial feature values are correct\n        assertArrayEquals(new double[] {0.5, 0.6}, neuron.getFeatures(), 1e-9);\n        \n        // Create a new update array with different values\n        double[] update = new double[] {0.3, 0.4};\n        \n        // Check that the update feature values are correct\n        assertArrayEquals(update, neuron.compareAndSetFeatures(new double[] {0.5, 0.6}, update), 1e-9);\n    }\n}",
        "\n@Test\npublic void compareAndSetFeaturesTest() {\n    // Create a new neuron with the given identifier and features.\n    Neuron neuron = new Neuron(1234, new double[] {0.5, 1.0, -0.5});\n\n    // Get the current state of the neuron.\n    double[] currentFeatures = neuron.getFeatures();\n\n    // Create a new set of features to compare with the current ones.\n    double[] expectedFeatures = new double[] {1.0, 2.0, -1.5};\n\n    // Set the number of attempted updates to zero.\n    neuron.numberOfAttemptedUpdates.set(0);\n\n    // Attempt to update the features of the neuron with the given expected values.\n    boolean result = neuron.compareAndSetFeatures(expectedFeatures, currentFeatures);\n\n    // Assert that the attempt was successful and that the number of attempted updates is now 1.\n    assertTrue(result);\n    assertEquals(neuron.numberOfAttemptedUpdates.get(), 1);\n\n    // Verify that the features of the neuron have been updated correctly.\n    double[] newFeatures = neuron.getFeatures();\n    assertArrayEquals(newFeatures, expectedFeatures);\n}",
        "\npackage org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        double[] expect = new double[3];\n        double[] update = new double[3];\n        Neuron neuron = new Neuron(1, expect);\n\n        assertTrue(neuron.compareAndSetFeatures(expect, update));\n    }\n}",
        "\npackage org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        // Create a new instance of the Neuron class with the specified parameters.\n        Neuron neuron = new Neuron(12345, new double[] { 0.5, -0.5 });\n        \n        // Call the compareAndSetFeatures method and check that it returns true when the expected array is updated correctly.\n        assertTrue(neuron.compareAndSetFeatures(new double[] { 0.5, -0.5 }, new double[] { 1.0, -2.0 }));\n        \n        // Call the compareAndSetFeatures method and check that it returns false when the expected array is not updated correctly.\n        assertFalse(neuron.compareAndSetFeatures(new double[] { 1.0, -2.0 }, new double[] { 2.0, -3.0 }));\n    }\n}",
        "@Test\npublic void compareAndSetFeaturesTest() {\n    Neuron neuron = new Neuron(1, new double[] { 0.5, 0.25 });\n    assertEquals(neuron.getFeatures().length, 2);\n    assertTrue(neuron.compareAndSetFeatures(new double[] { 0.5, 0.25 }, new double[] { 1.0, 0.75 }));\n    assertArrayEquals(neuron.getFeatures(), new double[] { 1.0, 0.75 });\n}",
        "\n@Test\npublic void compareAndSetFeaturesTest() {\n    // Arrange\n    double[] expect = new double[] {1.0, 2.0};\n    double[] update = new double[] {3.0, 4.0};\n    Neuron neuron = new Neuron(1L, expect);\n\n    // Act\n    boolean result = neuron.compareAndSetFeatures(expect, update);\n\n    // Assert\n    assertTrue(result);\n    assertArrayEquals(update, neuron.getFeatures());\n}",
        "\npackage org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        // Create two neurons with different sizes\n        Neuron neuron1 = new Neuron(0, 5);\n        Neuron neuron2 = new Neuron(1, 6);\n\n        // Test that the size is correctly set for both neurons\n        assertEquals(5, neuron1.getSize());\n        assertEquals(6, neuron2.getSize());\n\n        // Test that the identifier is correctly set for both neurons\n        assertEquals(0, neuron1.getIdentifier());\n        assertEquals(1, neuron2.getIdentifier());\n\n        // Create two arrays of doubles with different sizes\n        double[] array1 = new double[5];\n        double[] array2 = new double[6];\n\n        // Test that the size is correctly set for both arrays\n        assertEquals(5, array1.length);\n        assertEquals(6, array2.length);\n\n        // Test that the neurons can correctly compare and set features\n        assertTrue(neuron1.compareAndSetFeatures(array1, array2));\n        assertFalse(neuron2.compareAndSetFeatures(array1, array2));\n    }\n}",
        "@Test\npublic void compareAndSetFeaturesTest() {\n    // Arrange\n    Neuron neuron = new Neuron(123L, new double[] { 0.1, 0.2 });\n    double[] expect = new double[] { 0.1, 0.2 };\n    double[] update = new double[] { 0.3, 0.4 };\n\n    // Act\n    boolean result = neuron.compareAndSetFeatures(expect, update);\n\n    // Assert\n    assertTrue(result);\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        // Create a neuron with 2 features\n        Neuron neuron = new Neuron(1L, new double[] {0.5, -1.0});\n        \n        // Define expected values and update values\n        double[] expect = {0.5, -1.0};\n        double[] update = {-1.0, 0.5};\n        \n        // Compare features with expected values\n        assertTrue(neuron.compareAndSetFeatures(expect, update));\n        \n        // Check that the features were updated correctly\n        assertArrayEquals(update, neuron.getFeatures());\n    }\n}"
    ]
}