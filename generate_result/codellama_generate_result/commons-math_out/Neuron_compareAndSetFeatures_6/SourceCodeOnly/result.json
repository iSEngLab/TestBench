{
    "project_name": "commons-math",
    "file_name": "Neuron.java",
    "relative_path": "commons-math/commons-math-neuralnet/src/main/java/org/apache/commons/math4/neuralnet/Neuron.java",
    "execute_path": "commons-math/commons-math-neuralnet",
    "package": "org.apache.commons.math4.neuralnet",
    "docstring": "/**\n     * Tries to atomically update the neuron's features.\n     * Update will be performed only if the expected values match the\n     * current values.<br>\n     * In effect, when concurrent threads call this method, the state\n     * could be modified by one, so that it does not correspond to the\n     * the state assumed by another.\n     * Typically, a caller {@link #getFeatures() retrieves the current state},\n     * and uses it to compute the new state.\n     * During this computation, another thread might have done the same\n     * thing, and updated the state: If the current thread were to proceed\n     * with its own update, it would overwrite the new state (which might\n     * already have been used by yet other threads).\n     * To prevent this, the method does not perform the update when a\n     * concurrent modification has been detected, and returns {@code false}.\n     * When this happens, the caller should fetch the new current state,\n     * redo its computation, and call this method again.\n     *\n     * @param expect Current values of the features, as assumed by the caller.\n     * Update will never succeed if the contents of this array does not match\n     * the values returned by {@link #getFeatures()}.\n     * @param update Features's new values.\n     * @return {@code true} if the update was successful, {@code false}\n     * otherwise.\n     * @throws IllegalArgumentException if the length of {@code update} is\n     * not the same as specified in the {@link #Neuron(long,double[])\n     * constructor}.\n     */",
    "source_code": "\npublic boolean compareAndSetFeatures(double[] expect,\n                                     double[] update) {\n    if (update.length != size) {\n        throw new NeuralNetException(NeuralNetException.SIZE_MISMATCH,\n                                     update.length, size);\n    }\n\n    // Get the internal reference. Note that this must not be a copy;\n    // otherwise the \"compareAndSet\" below will always fail.\n    final double[] current = features.get();\n    if (!containSameValues(current, expect)) {\n        // Some other thread already modified the state.\n        return false;\n    }\n\n    // Increment attempt counter.\n    numberOfAttemptedUpdates.incrementAndGet();\n\n    if (features.compareAndSet(current, update.clone())) {\n        // The current thread could atomically update the state (attempt succeeded).\n        numberOfSuccessfulUpdates.incrementAndGet();\n        return true;\n    } else {\n        // Some other thread came first (attempt failed).\n        return false;\n    }\n}\n",
    "class_name": "Neuron",
    "method_name": "compareAndSetFeatures",
    "arguments": [
        "double[] expect",
        "double[] update"
    ],
    "generate_test": [
        "package org.apache.commons.math4.neuralnet;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        // Create a neuron with 3 features\n        final double[] expect = new double[]{1, 2, 3};\n        final double[] update = new double[]{4, 5, 6};\n        Neuron neuron = new Neuron(expect);\n        \n        // Test that the method returns true when the features are updated successfully\n        assertTrue(neuron.compareAndSetFeatures(expect, update));\n        \n        // Test that the method returns false when another thread modifies the state first\n        final double[] current = neuron.features.get();\n        if (!containSameValues(current, expect)) {\n            return;\n        }\n        \n        final double[] updated = new double[]{7, 8, 9};\n        assertFalse(neuron.compareAndSetFeatures(expect, updated));\n    }\n}",
        "\npackage org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        // Create a mock Neuron instance to test the compareAndSetFeatures method\n        Neuron neuron = new Neuron(2);\n        \n        // Set up input data\n        double[] expect = {1, 2};\n        double[] update = {3, 4};\n        \n        // Test that the method returns true when the features are updated successfully\n        assertTrue(neuron.compareAndSetFeatures(expect, update));\n        \n        // Verify that the state of the neuron has been updated correctly\n        assertArrayEquals(update, neuron.features.get());\n    }\n}",
        "\npackage org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        // Initialize the inputs and expected outputs.\n        double[] expect = new double[]{1.0, 2.0};\n        double[] update = new double[]{3.0, 4.0};\n        Neuron neuron = new Neuron();\n        \n        // Test that the method returns true if the attempt is successful.\n        boolean result = neuron.compareAndSetFeatures(expect, update);\n        assertTrue(result);\n        \n        // Test that the method returns false if another thread already modified the state.\n        expect[0] = 5.0;\n        result = neuron.compareAndSetFeatures(expect, update);\n        assertFalse(result);\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        final double[] current = new double[3];\n        final double[] expect = new double[3];\n        final double[] update = new double[3];\n        \n        // Test case 1: compareAndSetFeatures returns true when the state is updated successfully.\n        current[0] = 1;\n        expect[0] = 2;\n        update[0] = 3;\n        assertTrue(Neuron.compareAndSetFeatures(current, expect, update));\n        \n        // Test case 2: compareAndSetFeatures returns false when the state is not updated successfully.\n        current[1] = 4;\n        expect[1] = 5;\n        update[1] = 6;\n        assertFalse(Neuron.compareAndSetFeatures(current, expect, update));\n        \n        // Test case 3: compareAndSetFeatures throws a NeuralNetException when the input array sizes are different.\n        final double[] current2 = new double[4];\n        final double[] expect2 = new double[5];\n        final double[] update2 = new double[6];\n        assertThrows(NeuralNetException.class, () -> Neuron.compareAndSetFeatures(current2, expect2, update2));\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        double[] expect = new double[5];\n        for (int i = 0; i < expect.length; i++) {\n            expect[i] = Math.random();\n        }\n        \n        double[] update = new double[5];\n        for (int i = 0; i < update.length; i++) {\n            update[i] = Math.random();\n        }\n        \n        Neuron neuron = new Neuron(expect);\n        \n        assertTrue(neuron.compareAndSetFeatures(expect, update));\n    }\n}",
        "\npackage org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        // Arrange\n        double[] expect = new double[2];\n        double[] update = new double[2];\n        \n        // Act\n        boolean result = compareAndSetFeatures(expect, update);\n        \n        // Assert\n        assertFalse(result);\n    }\n}",
        "\npackage org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        // Set up input data\n        double[] expect = new double[] { 1.0, 2.0 };\n        double[] update = new double[] { 3.0, 4.0 };\n\n        // Create an instance of the Neuron class\n        Neuron neuron = new Neuron();\n\n        // Invoke the compareAndSetFeatures method and store the result in a variable\n        boolean result = neuron.compareAndSetFeatures(expect, update);\n\n        // Assert that the result is true\n        assertTrue(result);\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        // Initialize the expected and update arrays with test data.\n        double[] expect = {1, 2};\n        double[] update = {3, 4};\n        \n        // Create a Neuron object to test the compareAndSetFeatures method.\n        Neuron neuron = new Neuron();\n        \n        // Test that the method returns true if the current features are equal to the expected features and the update can be performed atomically.\n        assertTrue(neuron.compareAndSetFeatures(expect, update));\n    }\n}",
        "\npackage org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        // Create a new instance of the neuron with a size of 3\n        Neuron neuron = new Neuron(3);\n        \n        // Set the features to [1.0, 2.0, 3.0]\n        double[] expect = {1.0, 2.0, 3.0};\n        neuron.features = expect;\n        \n        // Create a new instance of the update array with a size of 3\n        double[] update = {1.0, 2.0, 3.0};\n        \n        // Call the compareAndSetFeatures method and check that it returns true\n        assertTrue(neuron.compareAndSetFeatures(expect, update));\n    }\n}",
        "\npackage org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        double[] expect = {1, 2};\n        double[] update = {3, 4};\n        boolean result = neuron.compareAndSetFeatures(expect, update);\n        assertTrue(result);\n    }\n}"
    ]
}