{
    "project_name": "commons-math",
    "file_name": "Neuron.java",
    "relative_path": "commons-math/commons-math-neuralnet/src/main/java/org/apache/commons/math4/neuralnet/Neuron.java",
    "execute_path": "commons-math/commons-math-neuralnet",
    "package": "org.apache.commons.math4.neuralnet",
    "docstring": "/**\n     * Checks whether the contents of both arrays is the same.\n     *\n     * @param current Current values.\n     * @param expect Expected values.\n     * @throws IllegalArgumentException if the length of {@code expect}\n     * is not the same as specified in the {@link #Neuron(long,double[])\n     * constructor}.\n     * @return {@code true} if the arrays contain the same values.\n     */",
    "source_code": "\nprivate boolean containSameValues(double[] current,\n                                  double[] expect) {\n    if (expect.length != size) {\n        throw new NeuralNetException(NeuralNetException.SIZE_MISMATCH,\n                                     expect.length, size);\n    }\n\n    for (int i = 0; i < size; i++) {\n        if (!Precision.equals(current[i], expect[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
    "class_name": "Neuron",
    "method_name": "containSameValues",
    "arguments": [
        "double[] current",
        "double[] expect"
    ],
    "generate_test": [
        "\npackage org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.Test;\n\npublic class NeuronTest {\n    @Test\n    public void containSameValuesTest() {\n        double[] expect = new double[3];\n        expect[0] = 12.456d;\n        expect[1] = -3.45e-2d;\n        expect[2] = 7e18d;\n        \n        Neuron neuron = new Neuron(0, expect);\n        \n        double[] current = neuron.getFeatures();\n    \n        assertTrue(neuron.containSameValues(current, expect));\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.Test;\n\npublic class NeuronTest {\n    @Test\n    public void containSameValuesTest() {\n        double[] expect = new double[3];\n        double[] current = new double[3];\n\n        // Test when the values are different.\n        expect[0] = 1;\n        expect[1] = 2;\n        expect[2] = 3;\n        current[0] = 4;\n        current[1] = 5;\n        current[2] = 6;\n        assertFalse(Neuron.containSameValues(current, expect));\n\n        // Test when the values are the same but in a different order.\n        expect[0] = 3;\n        expect[1] = 1;\n        expect[2] = 4;\n        current[0] = 4;\n        current[1] = 5;\n        current[2] = 6;\n        assertFalse(Neuron.containSameValues(current, expect));\n\n        // Test when the values are equal.\n        expect[0] = 3;\n        expect[1] = 4;\n        expect[2] = 5;\n        current[0] = 4;\n        current[1] = 5;\n        current[2] = 6;\n        assertTrue(Neuron.containSameValues(current, expect));\n    }\n}\n",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void containSameValuesTest() {\n        double[] current = new double[]{1, 2, 3};\n        double[] expect = new double[]{1, 2, 3};\n        assertTrue(Neuron.containSameValues(current, expect));\n\n        current[0] = -1;\n        expect[0] = 1;\n        assertFalse(Neuron.containSameValues(current, expect));\n    }\n}",
        "    @Test\n    public void containSameValuesTest() {\n        final int size = 3;\n        double[] current = new double[size];\n        current[0] = 1.0;\n        current[1] = 2.0;\n        current[2] = 3.0;\n\n        double[] expect = new double[size];\n        expect[0] = 1.0;\n        expect[1] = 2.0;\n        expect[2] = 3.0;\n\n        assertTrue(containSameValues(current, expect));\n    }\n}\n    \n",
        "public class NeuronTest {\n    @Test\n    public void containSameValuesTest() {\n        double[] current = { 1, 2 };\n        double[] expect = { 1, 2 };\n        assertTrue(Neuron.containSameValues(current, expect));\n    }\n}",
        "<FILL>\n\n    @Test\n    public void containSameValuesTest() {\n        double[] a = { 0.1, 0.2, 0.3 };\n        double[] b = { 0.4, 0.5, 0.6 };\n        assertFalse(containSameValues(a, b));\n    }\n}",
        "    package org.apache.commons.math4.neuralnet;\n\n    import java.util.Arrays;\n\n    public class NeuronTest {\n        @Test\n        public void containSameValuesTest() {\n            double[] current = new double[] {1.0, 2.0, 3.0};\n            double[] expect = new double[] {1.0, 2.0, 3.0};\n            assertTrue(containSameValues(current, expect));\n        }\n\n        @Test\n        public void containSameValuesTestNegative() {\n            double[] current = new double[] {1.0, 2.0, 4.0};\n            double[] expect = new double[] {1.0, 2.0, 3.0};\n            assertFalse(containSameValues(current, expect));\n        }\n    }",
        "\n    @Test\n    public void containSameValuesTest() {\n        double[] current = new double[]{1.0, 2.0, -3.0};\n        double[] expect = new double[]{1.0, 2.0, -3.0};\n        assertTrue(containSameValues(current, expect));\n    }\n\n    @Test\n    public void containDifferentValuesTest() {\n        double[] current = new double[]{1.0, 2.0, -3.0};\n        double[] expect = new double[]{1.0, 4.0, -5.0};\n        assertFalse(containSameValues(current, expect));\n    }\n}\n    \n",
        "package org.apache.commons.math4.neuralnet;\n\nimport java.util.Arrays;\n\npublic class NeuronTest {\n    @Test\n    public void containSameValuesTest() {\n        double[] current = new double[] { 1, 2 };\n        double[] expect = new double[] { 1, 2 };\n        assertTrue(Neuron.containSameValues(current, expect));\n\n        current[0] = 4; // modify the current array in-place!\n        expect = new double[] { 1, 2 };\n        assertFalse(Neuron.containSameValues(current, expect));\n    }\n}\n",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void containSameValuesTest() {\n        double[] current = new double[3];\n        double[] expect = new double[3];\n        for (int i = 0; i < current.length; i++) {\n            current[i] = Math.random();\n            expect[i] = current[i];\n        }\n        assertTrue(Neuron.containSameValues(current, expect));\n    }\n}\n"
    ]
}