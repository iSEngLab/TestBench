Source code: 


private boolean containSameValues(double[] current,
                                  double[] expect) {
    if (expect.length != size) {
        throw new NeuralNetException(NeuralNetException.SIZE_MISMATCH,
                                     expect.length, size);
    }

    for (int i = 0; i < size; i++) {
        if (!Precision.equals(current[i], expect[i])) {
            return false;
        }
    }
    return true;
}




No.1 generated result --------------------------


package org.apache.commons.math4.neuralnet;

import org.junit.jupiter.api.Test;

public class NeuronTest {
    @Test
    public void containSameValuesTest() {
        double[] expect = new double[3];
        expect[0] = 12.456d;
        expect[1] = -3.45e-2d;
        expect[2] = 7e18d;
        
        Neuron neuron = new Neuron(0, expect);
        
        double[] current = neuron.getFeatures();
    
        assertTrue(neuron.containSameValues(current, expect));
    }
}


No.2 generated result --------------------------

package org.apache.commons.math4.neuralnet;

import org.junit.jupiter.api.Test;

public class NeuronTest {
    @Test
    public void containSameValuesTest() {
        double[] expect = new double[3];
        double[] current = new double[3];

        // Test when the values are different.
        expect[0] = 1;
        expect[1] = 2;
        expect[2] = 3;
        current[0] = 4;
        current[1] = 5;
        current[2] = 6;
        assertFalse(Neuron.containSameValues(current, expect));

        // Test when the values are the same but in a different order.
        expect[0] = 3;
        expect[1] = 1;
        expect[2] = 4;
        current[0] = 4;
        current[1] = 5;
        current[2] = 6;
        assertFalse(Neuron.containSameValues(current, expect));

        // Test when the values are equal.
        expect[0] = 3;
        expect[1] = 4;
        expect[2] = 5;
        current[0] = 4;
        current[1] = 5;
        current[2] = 6;
        assertTrue(Neuron.containSameValues(current, expect));
    }
}



No.3 generated result --------------------------

package org.apache.commons.math4.neuralnet;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class NeuronTest {
    @Test
    public void containSameValuesTest() {
        double[] current = new double[]{1, 2, 3};
        double[] expect = new double[]{1, 2, 3};
        assertTrue(Neuron.containSameValues(current, expect));

        current[0] = -1;
        expect[0] = 1;
        assertFalse(Neuron.containSameValues(current, expect));
    }
}


No.4 generated result --------------------------

    @Test
    public void containSameValuesTest() {
        final int size = 3;
        double[] current = new double[size];
        current[0] = 1.0;
        current[1] = 2.0;
        current[2] = 3.0;

        double[] expect = new double[size];
        expect[0] = 1.0;
        expect[1] = 2.0;
        expect[2] = 3.0;

        assertTrue(containSameValues(current, expect));
    }
}
    



No.5 generated result --------------------------

public class NeuronTest {
    @Test
    public void containSameValuesTest() {
        double[] current = { 1, 2 };
        double[] expect = { 1, 2 };
        assertTrue(Neuron.containSameValues(current, expect));
    }
}


No.6 generated result --------------------------

<FILL>

    @Test
    public void containSameValuesTest() {
        double[] a = { 0.1, 0.2, 0.3 };
        double[] b = { 0.4, 0.5, 0.6 };
        assertFalse(containSameValues(a, b));
    }
}


No.7 generated result --------------------------

    package org.apache.commons.math4.neuralnet;

    import java.util.Arrays;

    public class NeuronTest {
        @Test
        public void containSameValuesTest() {
            double[] current = new double[] {1.0, 2.0, 3.0};
            double[] expect = new double[] {1.0, 2.0, 3.0};
            assertTrue(containSameValues(current, expect));
        }

        @Test
        public void containSameValuesTestNegative() {
            double[] current = new double[] {1.0, 2.0, 4.0};
            double[] expect = new double[] {1.0, 2.0, 3.0};
            assertFalse(containSameValues(current, expect));
        }
    }


No.8 generated result --------------------------


    @Test
    public void containSameValuesTest() {
        double[] current = new double[]{1.0, 2.0, -3.0};
        double[] expect = new double[]{1.0, 2.0, -3.0};
        assertTrue(containSameValues(current, expect));
    }

    @Test
    public void containDifferentValuesTest() {
        double[] current = new double[]{1.0, 2.0, -3.0};
        double[] expect = new double[]{1.0, 4.0, -5.0};
        assertFalse(containSameValues(current, expect));
    }
}
    



No.9 generated result --------------------------

package org.apache.commons.math4.neuralnet;

import java.util.Arrays;

public class NeuronTest {
    @Test
    public void containSameValuesTest() {
        double[] current = new double[] { 1, 2 };
        double[] expect = new double[] { 1, 2 };
        assertTrue(Neuron.containSameValues(current, expect));

        current[0] = 4; // modify the current array in-place!
        expect = new double[] { 1, 2 };
        assertFalse(Neuron.containSameValues(current, expect));
    }
}



No.10 generated result --------------------------

package org.apache.commons.math4.neuralnet;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class NeuronTest {
    @Test
    public void containSameValuesTest() {
        double[] current = new double[3];
        double[] expect = new double[3];
        for (int i = 0; i < current.length; i++) {
            current[i] = Math.random();
            expect[i] = current[i];
        }
        assertTrue(Neuron.containSameValues(current, expect));
    }
}



