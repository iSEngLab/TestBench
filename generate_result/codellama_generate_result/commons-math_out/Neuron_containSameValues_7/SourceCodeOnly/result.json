{
    "project_name": "commons-math",
    "file_name": "Neuron.java",
    "relative_path": "commons-math/commons-math-neuralnet/src/main/java/org/apache/commons/math4/neuralnet/Neuron.java",
    "execute_path": "commons-math/commons-math-neuralnet",
    "package": "org.apache.commons.math4.neuralnet",
    "docstring": "/**\n     * Checks whether the contents of both arrays is the same.\n     *\n     * @param current Current values.\n     * @param expect Expected values.\n     * @throws IllegalArgumentException if the length of {@code expect}\n     * is not the same as specified in the {@link #Neuron(long,double[])\n     * constructor}.\n     * @return {@code true} if the arrays contain the same values.\n     */",
    "source_code": "\nprivate boolean containSameValues(double[] current,\n                                  double[] expect) {\n    if (expect.length != size) {\n        throw new NeuralNetException(NeuralNetException.SIZE_MISMATCH,\n                                     expect.length, size);\n    }\n\n    for (int i = 0; i < size; i++) {\n        if (!Precision.equals(current[i], expect[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
    "class_name": "Neuron",
    "method_name": "containSameValues",
    "arguments": [
        "double[] current",
        "double[] expect"
    ],
    "generate_test": [
        "\npackage org.apache.commons.math4.neuralnet;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void containSameValuesTest() {\n        double[] current = new double[] {1, 2, 3};\n        double[] expect = new double[] {1, 2, 4};\n        assertFalse(containSameValues(current, expect));\n        \n        current = new double[] {1, 2, 3};\n        expect = new double[] {1, 2, 3};\n        assertTrue(containSameValues(current, expect));\n    }\n}",
        "\npackage org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void containSameValuesTest() {\n        double[] current = new double[]{1.0, 2.0, 3.0};\n        double[] expect = new double[]{1.0, 2.0, 3.0};\n        assertTrue(containSameValues(current, expect));\n    }\n}",
        "\npackage org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void containSameValuesTest() {\n        double[] current = new double[]{1, 2, 3};\n        double[] expect = new double[]{1, 2, 3};\n        \n        assertTrue(containSameValues(current, expect));\n    }\n    \n    @Test\n    public void containDifferentValuesTest() {\n        double[] current = new double[]{1, 2, 3};\n        double[] expect = new double[]{4, 5, 6};\n        \n        assertFalse(containSameValues(current, expect));\n    }\n}",
        "\npackage org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void containSameValuesTest() {\n        double[] current = new double[] { 1.0, 2.0 };\n        double[] expect = new double[] { 1.0, 2.0 };\n\n        assertTrue(containSameValues(current, expect));\n    }\n}",
        "\n@Test\npublic void containSameValuesTest() {\n    double[] current = new double[5];\n    double[] expect = new double[5];\n\n    for (int i = 0; i < 5; i++) {\n        current[i] = Math.random();\n        expect[i] = Math.random();\n    }\n\n    assertTrue(containSameValues(current, expect));\n}",
        "\npackage org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void containSameValuesTest() {\n        double[] current = new double[3];\n        double[] expect = new double[3];\n\n        for (int i = 0; i < 3; i++) {\n            current[i] = i + 1.0;\n            expect[i] = i + 2.0;\n        }\n\n        assertFalse(containSameValues(current, expect));\n    }\n}",
        "\n@Test\npublic void containSameValuesTest() {\n    double[] current = new double[] {1, 2, 3};\n    double[] expect = new double[] {1, 2, 3};\n    \n    assertTrue(containSameValues(current, expect));\n}",
        "\npackage org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void containSameValuesTest() {\n        double[] current = new double[] {1.0, 2.0};\n        double[] expect = new double[] {3.0, 4.0};\n        assertFalse(containSameValues(current, expect));\n        \n        current = new double[] {5.0, 6.0};\n        expect = new double[] {5.0, 6.0};\n        assertTrue(containSameValues(current, expect));\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void containSameValuesTest() {\n        double[] current = new double[] {1, 2, 3};\n        double[] expect = new double[] {4, 5, 6};\n\n        assertFalse(containSameValues(current, expect));\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void containSameValuesTest() {\n        // Test case 1: Both arrays have the same length and values\n        double[] current = new double[] {1, 2, 3};\n        double[] expect = new double[] {1, 2, 3};\n        assertTrue(containSameValues(current, expect));\n\n        // Test case 2: Both arrays have the same length but different values\n        current = new double[] {1, 2, 3};\n        expect = new double[] {4, 5, 6};\n        assertFalse(containSameValues(current, expect));\n\n        // Test case 3: Both arrays have different lengths\n        current = new double[] {1, 2, 3};\n        expect = new double[] {1, 2, 3, 4};\n        assertThrows(NeuralNetException.class, () -> containSameValues(current, expect));\n    }\n}"
    ]
}