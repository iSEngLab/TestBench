Source code: 


private boolean containSameValues(double[] current,
                                  double[] expect) {
    if (expect.length != size) {
        throw new NeuralNetException(NeuralNetException.SIZE_MISMATCH,
                                     expect.length, size);
    }

    for (int i = 0; i < size; i++) {
        if (!Precision.equals(current[i], expect[i])) {
            return false;
        }
    }
    return true;
}




No.1 generated result --------------------------


package org.apache.commons.math4.neuralnet;

import static org.junit.jupiter.api.Assertions.*;

public class NeuronTest {
    @Test
    public void containSameValuesTest() {
        double[] current = new double[] {1, 2, 3};
        double[] expect = new double[] {1, 2, 4};
        assertFalse(containSameValues(current, expect));
        
        current = new double[] {1, 2, 3};
        expect = new double[] {1, 2, 3};
        assertTrue(containSameValues(current, expect));
    }
}


No.2 generated result --------------------------


package org.apache.commons.math4.neuralnet;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NeuronTest {
    @Test
    public void containSameValuesTest() {
        double[] current = new double[]{1.0, 2.0, 3.0};
        double[] expect = new double[]{1.0, 2.0, 3.0};
        assertTrue(containSameValues(current, expect));
    }
}


No.3 generated result --------------------------


package org.apache.commons.math4.neuralnet;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NeuronTest {
    @Test
    public void containSameValuesTest() {
        double[] current = new double[]{1, 2, 3};
        double[] expect = new double[]{1, 2, 3};
        
        assertTrue(containSameValues(current, expect));
    }
    
    @Test
    public void containDifferentValuesTest() {
        double[] current = new double[]{1, 2, 3};
        double[] expect = new double[]{4, 5, 6};
        
        assertFalse(containSameValues(current, expect));
    }
}


No.4 generated result --------------------------


package org.apache.commons.math4.neuralnet;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NeuronTest {
    @Test
    public void containSameValuesTest() {
        double[] current = new double[] { 1.0, 2.0 };
        double[] expect = new double[] { 1.0, 2.0 };

        assertTrue(containSameValues(current, expect));
    }
}


No.5 generated result --------------------------


@Test
public void containSameValuesTest() {
    double[] current = new double[5];
    double[] expect = new double[5];

    for (int i = 0; i < 5; i++) {
        current[i] = Math.random();
        expect[i] = Math.random();
    }

    assertTrue(containSameValues(current, expect));
}


No.6 generated result --------------------------


package org.apache.commons.math4.neuralnet;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NeuronTest {
    @Test
    public void containSameValuesTest() {
        double[] current = new double[3];
        double[] expect = new double[3];

        for (int i = 0; i < 3; i++) {
            current[i] = i + 1.0;
            expect[i] = i + 2.0;
        }

        assertFalse(containSameValues(current, expect));
    }
}


No.7 generated result --------------------------


@Test
public void containSameValuesTest() {
    double[] current = new double[] {1, 2, 3};
    double[] expect = new double[] {1, 2, 3};
    
    assertTrue(containSameValues(current, expect));
}


No.8 generated result --------------------------


package org.apache.commons.math4.neuralnet;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NeuronTest {
    @Test
    public void containSameValuesTest() {
        double[] current = new double[] {1.0, 2.0};
        double[] expect = new double[] {3.0, 4.0};
        assertFalse(containSameValues(current, expect));
        
        current = new double[] {5.0, 6.0};
        expect = new double[] {5.0, 6.0};
        assertTrue(containSameValues(current, expect));
    }
}


No.9 generated result --------------------------

package org.apache.commons.math4.neuralnet;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NeuronTest {
    @Test
    public void containSameValuesTest() {
        double[] current = new double[] {1, 2, 3};
        double[] expect = new double[] {4, 5, 6};

        assertFalse(containSameValues(current, expect));
    }
}


No.10 generated result --------------------------

package org.apache.commons.math4.neuralnet;

import static org.junit.jupiter.api.Assertions.*;

public class NeuronTest {
    @Test
    public void containSameValuesTest() {
        // Test case 1: Both arrays have the same length and values
        double[] current = new double[] {1, 2, 3};
        double[] expect = new double[] {1, 2, 3};
        assertTrue(containSameValues(current, expect));

        // Test case 2: Both arrays have the same length but different values
        current = new double[] {1, 2, 3};
        expect = new double[] {4, 5, 6};
        assertFalse(containSameValues(current, expect));

        // Test case 3: Both arrays have different lengths
        current = new double[] {1, 2, 3};
        expect = new double[] {1, 2, 3, 4};
        assertThrows(NeuralNetException.class, () -> containSameValues(current, expect));
    }
}


