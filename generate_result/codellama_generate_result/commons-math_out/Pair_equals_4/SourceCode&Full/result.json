{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compare the specified object with this entry for equality.\n     *\n     * @param o Object.\n     * @return {@code true} if the given object is also a map entry and\n     * the two entries represent the same mapping.\n     */",
    "source_code": "\n@Override\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (!(o instanceof Pair)) {\n        return false;\n    } else {\n        Pair<?, ?> oP = (Pair<?, ?>) o;\n        return (key == null ?\n                oP.key == null :\n                key.equals(oP.key)) &&\n            (value == null ?\n             oP.value == null :\n             value.equals(oP.value));\n    }\n}\n",
    "class_name": "Pair",
    "method_name": "equals",
    "arguments": [
        "Object o"
    ],
    "generate_test": [
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test with null key and value\n        Pair<Integer, String> p1 = new Pair<>(null, null);\n        Pair<Integer, String> p2 = new Pair<>(null, null);\n        assertEquals(p1, p2);\n\n        // Test with same key and different values\n        Pair<Integer, String> p3 = new Pair<>(1, \"A\");\n        Pair<Integer, String> p4 = new Pair<>(1, \"B\");\n        assertNotEquals(p3, p4);\n\n        // Test with different keys and same values\n        Pair<Integer, String> p5 = new Pair<>(2, \"A\");\n        Pair<Integer, String> p6 = new Pair<>(1, \"A\");\n        assertNotEquals(p5, p6);\n\n        // Test with same keys and values\n        Pair<Integer, String> p7 = new Pair<>(3, \"C\");\n        Pair<Integer, String> p8 = new Pair<>(3, \"C\");\n        assertEquals(p7, p8);\n    }\n}",
        "@Override\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (!(o instanceof Pair)) {\n        return false;\n    } else {\n        Pair<?, ?> other = (Pair<?, ?>) o;\n        return Objects.equals(key, other.key) && Objects.equals(value, other.value);\n    }\n}",
        "\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test with null key and value\n        Pair<Integer, String> pair1 = new Pair<>(null, null);\n        assertTrue(pair1.equals(new Pair<>(null, null)));\n\n        // Test with non-null key and value\n        Pair<Integer, String> pair2 = new Pair<>(1, \"value\");\n        assertFalse(pair2.equals(new Pair<>(null, null)));\n        assertTrue(pair2.equals(new Pair<>(1, \"value\")));\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Create two pairs with the same key and value\n        Pair<Integer, Integer> pair1 = new Pair<>(1, 2);\n        Pair<Integer, Integer> pair2 = new Pair<>(1, 2);\n        \n        assertTrue(pair1.equals(pair2));\n    }\n    \n    @Test\n    public void notEqualsKey() {\n        // Create two pairs with different keys\n        Pair<Integer, Integer> pair1 = new Pair<>(1, 2);\n        Pair<Integer, Integer> pair2 = new Pair<>(2, 2);\n        \n        assertFalse(pair1.equals(pair2));\n    }\n    \n    @Test\n    public void notEqualsValue() {\n        // Create two pairs with different values\n        Pair<Integer, Integer> pair1 = new Pair<>(1, 2);\n        Pair<Integer, Integer> pair2 = new Pair<>(1, 3);\n        \n        assertFalse(pair1.equals(pair2));\n    }\n    \n    @Test\n    public void notEqualsNull() {\n        // Create a pair and compare it to null\n        Pair<Integer, Integer> pair = new Pair<>(1, 2);\n        \n        assertFalse(pair.equals(null));\n    }\n}",
        "@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof Pair)) return false;\n    Pair<?, ?> pair = (Pair<?, ?>) o;\n    return Objects.equals(key, pair.key) && Objects.equals(value, pair.value);\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Create two pairs with the same key and value\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"value\");\n        \n        // Check that the equals method returns true for both pairs\n        assertTrue(pair1.equals(pair2));\n        assertTrue(pair2.equals(pair1));\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test that null values are equal\n        assertTrue(Pair.create(null, null).equals(null));\n        \n        // Test that unequal keys return false\n        assertFalse(Pair.create(\"key\", \"value\").equals(Pair.create(\"otherKey\", \"value\")));\n        \n        // Test that unequal values return false\n        assertFalse(Pair.create(\"key\", \"value\").equals(Pair.create(\"key\", \"otherValue\")));\n        \n        // Test that equal keys and values return true\n        assertTrue(Pair.create(\"key\", \"value\").equals(Pair.create(\"key\", \"value\")));\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, Integer> p1 = new Pair<>(\"key\", 5);\n        Pair<String, Integer> p2 = new Pair<>(\"key\", 5);\n        assertTrue(p1.equals(p2));\n    }\n\n    @Test\n    public void hashCodeTest() {\n        Pair<String, Integer> p1 = new Pair<>(\"key\", 5);\n        Pair<String, Integer> p2 = new Pair<>(\"key\", 5);\n        assertEquals(p1.hashCode(), p2.hashCode());\n    }\n\n    @Test\n    public void createTest() {\n        String key = \"key\";\n        Integer value = 5;\n        Pair<String, Integer> pair = Pair.create(key, value);\n        assertEquals(pair.getKey(), key);\n        assertEquals(pair.getValue(), value);\n    }\n\n    @Test\n    public void getKeyTest() {\n        String key = \"key\";\n        Integer value = 5;\n        Pair<String, Integer> pair = new Pair<>(key, value);\n        assertEquals(pair.getKey(), key);\n        assertEquals(pair.getFirst(), key);\n    }\n\n    @Test\n    public void getValueTest() {\n        String key = \"key\";\n        Integer value = 5;\n        Pair<String, Integer> pair = new Pair<>(key, value);\n        assertEquals(pair.getValue(), value);\n        assertEquals(pair.getSecond(), value);\n    }\n\n    @Test\n    public void toStringTest() {\n        String key = \"key\";\n        Integer value = 5;\n        Pair<String, Integer> pair = new Pair<>(key, value);\n        assertEquals(pair.toString(), \"[key,5]\");\n    }\n}",
        "@Override\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (!(o instanceof Pair)) {\n        return false;\n    } else {\n        Pair<?, ?> oP = (Pair<?, ?>) o;\n        return key != null ? key.equals(oP.key) : oP.key == null &&\n            value != null ? value.equals(oP.value) : oP.value == null;\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"apple\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"banana\");\n        assertTrue(pair1.equals(pair2));\n    }\n}"
    ]
}