{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compare the specified object with this entry for equality.\n     *\n     * @param o Object.\n     * @return {@code true} if the given object is also a map entry and\n     * the two entries represent the same mapping.\n     */",
    "source_code": "\n@Override\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (!(o instanceof Pair)) {\n        return false;\n    } else {\n        Pair<?, ?> oP = (Pair<?, ?>) o;\n        return (key == null ?\n                oP.key == null :\n                key.equals(oP.key)) &&\n            (value == null ?\n             oP.value == null :\n             value.equals(oP.value));\n    }\n}\n",
    "class_name": "Pair",
    "method_name": "equals",
    "arguments": [
        "Object o"
    ],
    "generate_test": [
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test for equality between two pairs with null keys and values\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"value\");\n        assertEquals(pair1, pair2);\n        \n        // Test for equality between two pairs with the same keys and values\n        pair1 = new Pair<>(\"key\", \"value\");\n        pair2 = new Pair<>(\"key\", \"value\");\n        assertEquals(pair1, pair2);\n        \n        // Test for inequality between two pairs with different keys\n        pair1 = new Pair<>(\"key\", \"value\");\n        pair2 = new Pair<>(\"differentKey\", \"value\");\n        assertNotEquals(pair1, pair2);\n        \n        // Test for inequality between two pairs with different values\n        pair1 = new Pair<>(\"key\", \"value\");\n        pair2 = new Pair<>(\"key\", \"differentValue\");\n        assertNotEquals(pair1, pair2);\n    }\n}",
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n        assertEquals(pair1, pair2);\n\n        Pair<Integer, String> pair3 = new Pair<>(2, \"two\");\n        assertNotEquals(pair1, pair3);\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test that two pairs with the same key and value are equal\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 1);\n        assertEquals(pair1, pair2);\n\n        // Test that two pairs with different keys are not equal\n        Pair<String, Integer> pair3 = new Pair<>(\"key1\", 1);\n        Pair<String, Integer> pair4 = new Pair<>(\"key2\", 1);\n        assertNotEquals(pair3, pair4);\n\n        // Test that two pairs with different values are not equal\n        Pair<String, Integer> pair5 = new Pair<>(\"key\", 1);\n        Pair<String, Integer> pair6 = new Pair<>(\"key\", 2);\n        assertNotEquals(pair5, pair6);\n    }\n}",
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test that two null keys and values are equal\n        Pair<Integer, String> pair1 = new Pair<>(null, null);\n        Pair<Integer, String> pair2 = new Pair<>(null, null);\n        assertEquals(pair1, pair2);\n\n        // Test that two different keys and values are not equal\n        pair1 = new Pair<>(1, \"one\");\n        pair2 = new Pair<>(2, \"two\");\n        assertNotEquals(pair1, pair2);\n\n        // Test that a key and value are equal to itself\n        pair1 = new Pair<>(1, \"one\");\n        assertEquals(pair1, pair1);\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test that two pairs with the same key and value are considered equal\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 1);\n        assertTrue(pair1.equals(pair2));\n\n        // Test that two pairs with different keys are not considered equal\n        pair1 = new Pair<>(\"key\", 1);\n        pair2 = new Pair<>(\"key2\", 1);\n        assertFalse(pair1.equals(pair2));\n\n        // Test that two pairs with different values are not considered equal\n        pair1 = new Pair<>(\"key\", 1);\n        pair2 = new Pair<>(\"key\", 2);\n        assertFalse(pair1.equals(pair2));\n    }\n}",
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Create two instances of the Pair class with the same key and value\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 1);\n\n        // Check that they are equal\n        assertEquals(pair1, pair2);\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // create two Pair objects with the same values\n        Pair<Integer, String> pair1 = new Pair<>(1, \"apple\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"apple\");\n        \n        // check that both pairs are equal\n        assertEquals(pair1, pair2);\n    }\n}",
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"One\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"Two\");\n        assertFalse(pair1.equals(pair2));\n    }\n}",
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test for null key and value\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        assertFalse(pair1.equals(null));\n        assertFalse(pair1.equals(new Object()));\n\n        // Test for same key and different value\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"otherValue\");\n        assertFalse(pair1.equals(pair2));\n\n        // Test for different key and same value\n        Pair<String, String> pair3 = new Pair<>(\"otherKey\", \"value\");\n        assertFalse(pair1.equals(pair3));\n\n        // Test for same key and value\n        Pair<String, String> pair4 = new Pair<>(\"key\", \"value\");\n        assertTrue(pair1.equals(pair4));\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Create two pairs with the same key and value\n        Pair<Integer, String> pair1 = new Pair<>(1, \"test\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"test\");\n        \n        // Test that both pairs are equal\n        assertEquals(pair1, pair2);\n    }\n}"
    ]
}