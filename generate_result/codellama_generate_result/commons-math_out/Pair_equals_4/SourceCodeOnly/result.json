{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compare the specified object with this entry for equality.\n     *\n     * @param o Object.\n     * @return {@code true} if the given object is also a map entry and\n     * the two entries represent the same mapping.\n     */",
    "source_code": "\n@Override\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (!(o instanceof Pair)) {\n        return false;\n    } else {\n        Pair<?, ?> oP = (Pair<?, ?>) o;\n        return (key == null ?\n                oP.key == null :\n                key.equals(oP.key)) &&\n            (value == null ?\n             oP.value == null :\n             value.equals(oP.value));\n    }\n}\n",
    "class_name": "Pair",
    "method_name": "equals",
    "arguments": [
        "Object o"
    ],
    "generate_test": [
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test case 1: both key and value are null\n        Pair<Integer, String> pair1 = new Pair<>(null, null);\n        assertEquals(pair1.equals(new Pair<>(null, null)), true);\n\n        // Test case 2: both key and value are not null\n        Pair<Integer, String> pair2 = new Pair<>(1, \"apple\");\n        assertEquals(pair2.equals(new Pair<>(1, \"apple\")), true);\n\n        // Test case 3: only key is null\n        Pair<Integer, String> pair3 = new Pair<>(null, \"orange\");\n        assertEquals(pair3.equals(new Pair<>(null, \"orange\")), true);\n\n        // Test case 4: only value is null\n        Pair<Integer, String> pair4 = new Pair<>(1, null);\n        assertEquals(pair4.equals(new Pair<>(1, null)), true);\n    }\n}",
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Create two pairs with different keys and values\n        Pair<Integer, String> pair1 = new Pair<>(10, \"apple\");\n        Pair<Integer, String> pair2 = new Pair<>(20, \"banana\");\n\n        // Check that the equals method returns false when comparing two pairs with different keys\n        assertFalse(pair1.equals(pair2));\n\n        // Check that the equals method returns true when comparing two pairs with the same keys and values\n        Pair<Integer, String> pair3 = new Pair<>(10, \"apple\");\n        assertTrue(pair1.equals(pair3));\n\n        // Check that the equals method returns false when comparing a pair to an object of a different type\n        Object o = new Object();\n        assertFalse(pair1.equals(o));\n    }\n}",
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test that two pairs with the same key and value are equal\n        Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n        assertEquals(pair1, pair2);\n        \n        // Test that two pairs with different keys but same values are not equal\n        pair1 = new Pair<>(1, \"one\");\n        pair2 = new Pair<>(2, \"one\");\n        assertNotEquals(pair1, pair2);\n        \n        // Test that two pairs with same keys but different values are not equal\n        pair1 = new Pair<>(1, \"one\");\n        pair2 = new Pair<>(1, \"two\");\n        assertNotEquals(pair1, pair2);\n    }\n}",
        "\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair2 = new Pair<>(2, \"two\");\n        assertFalse(pair1.equals(pair2));\n    }\n}",
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test for null values\n        assertFalse(new Pair<>(null, \"value\").equals(null));\n        assertFalse(new Pair<>(\"key\", null).equals(null));\n        \n        // Test for equal keys and values\n        assertTrue(new Pair<>(\"key\", \"value\").equals(new Pair<>(\"key\", \"value\")));\n        \n        // Test for different keys and values\n        assertFalse(new Pair<>(\"key1\", \"value\").equals(new Pair<>(\"key2\", \"value\")));\n        assertFalse(new Pair<>(\"key\", \"value1\").equals(new Pair<>(\"key\", \"value2\")));\n        \n        // Test for null key and non-null value\n        assertFalse(new Pair<>(null, \"value\").equals(new Pair<>(\"key\", \"value\")));\n        \n        // Test for non-null key and null value\n        assertFalse(new Pair<>(\"key\", null).equals(new Pair<>(\"key\", \"value\")));\n    }\n}",
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, Integer> pair1 = new Pair<>(\"hello\", 5);\n        Pair<String, Integer> pair2 = new Pair<>(\"world\", 10);\n        \n        assertEquals(pair1.equals(pair2), true);\n    }\n}",
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test that the method returns true when both objects are equal\n        Object o1 = new Object();\n        Pair<?, ?> pair1 = new Pair<>(o1, o1);\n        assertEquals(pair1, pair1);\n        \n        // Test that the method returns false when only one object is null\n        Pair<?, ?> pair2 = new Pair<>(null, o1);\n        assertNotEquals(pair2, pair1);\n        \n        // Test that the method returns false when both objects are not equal\n        Object o3 = new Object();\n        Pair<?, ?> pair3 = new Pair<>(o3, o3);\n        assertNotEquals(pair3, pair1);\n    }\n}",
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 1);\n        assertTrue(pair1.equals(pair2));\n\n        Pair<String, Integer> pair3 = new Pair<>(\"key\", null);\n        Pair<String, Integer> pair4 = new Pair<>(\"key\", null);\n        assertTrue(pair3.equals(pair4));\n\n        Pair<String, Integer> pair5 = new Pair<>(\"key\", 2);\n        Pair<String, Integer> pair6 = new Pair<>(\"key\", 1);\n        assertFalse(pair5.equals(pair6));\n\n        Pair<String, Integer> pair7 = new Pair<>(\"key1\", 1);\n        Pair<String, Integer> pair8 = new Pair<>(\"key2\", 1);\n        assertFalse(pair7.equals(pair8));\n    }\n}\n",
        "\n@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"a\", 1);\n    Pair<String, Integer> pair2 = new Pair<>(\"a\", 1);\n    assertEquals(pair1, pair2);\n    \n    pair1 = new Pair<>(\"a\", null);\n    pair2 = new Pair<>(\"a\", null);\n    assertEquals(pair1, pair2);\n    \n    pair1 = new Pair<>(null, 1);\n    pair2 = new Pair<>(null, 1);\n    assertEquals(pair1, pair2);\n}",
        "\n@Test\npublic void equalsTest() {\n    // Test null values\n    Pair<Integer, String> pair1 = new Pair<>(null, null);\n    Pair<Integer, String> pair2 = new Pair<>(null, null);\n    assertTrue(pair1.equals(pair2));\n\n    // Test different types of keys and values\n    pair1 = new Pair<>(1, \"one\");\n    pair2 = new Pair<>(\"one\", 1);\n    assertFalse(pair1.equals(pair2));\n\n    // Test same key and value\n    pair1 = new Pair<>(1, \"one\");\n    pair2 = new Pair<>(1, \"one\");\n    assertTrue(pair1.equals(pair2));\n\n    // Test different keys and values\n    pair1 = new Pair<>(1, \"one\");\n    pair2 = new Pair<>(2, \"two\");\n    assertFalse(pair1.equals(pair2));\n}"
    ]
}