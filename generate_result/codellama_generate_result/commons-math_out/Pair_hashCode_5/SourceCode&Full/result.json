{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compute a hash code.\n     *\n     * @return the hash code value.\n     */",
    "source_code": "\n@Override\npublic int hashCode() {\n    int result = key == null ? 0 : key.hashCode();\n\n    final int h = value == null ? 0 : value.hashCode();\n    result = 37 * result + h ^ (h >>> 16);\n\n    return result;\n}\n",
    "class_name": "Pair",
    "method_name": "hashCode",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void hashCodeWithNullKeyAndValue() {\n    Pair<String, String> pair = new Pair<>(\"\", \"\");\n    assertEquals(0, pair.hashCode());\n}",
        "\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<Integer, String> pair = new Pair<>(1, \"test\");\n        int expectedHashCode = 37 * (1 ^ (1 >>> 16)) + (\"test\".hashCode()) ^ (\"test\".hashCode() >>> 16);\n        assertEquals(expectedHashCode, pair.hashCode());\n    }\n}",
        "@Override\npublic int hashCode() {\n    final int p = 16777619;\n    final int r = 24360541;\n    int result = (int) 2166136261L;\n\n    result = result * p + (key == null ? 0 : key.hashCode());\n    result = result * p + (value == null ? 0 : value.hashCode());\n    result ^= result >>> r;\n\n    return result;\n}",
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n        assertEquals(pair1.hashCode(), pair2.hashCode());\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create a new pair with a null key and a non-null value\n        Pair<String, Integer> pair1 = new Pair<>(null, 5);\n\n        // Check that the hash code is correct for this case\n        assertEquals(pair1.hashCode(), (37 * 0) + (5 ^ (5 >>> 16)));\n\n        // Create a new pair with a non-null key and a null value\n        Pair<String, Integer> pair2 = new Pair<>(\"test\", null);\n\n        // Check that the hash code is correct for this case\n        assertEquals(pair2.hashCode(), (37 * \"test\".hashCode()) + 0 ^ (0 >>> 16));\n\n        // Create a new pair with non-null keys and values\n        Pair<String, Integer> pair3 = new Pair<>(\"test\", 5);\n\n        // Check that the hash code is correct for this case\n        assertEquals(pair3.hashCode(), (37 * \"test\".hashCode()) + 5 ^ (5 >>> 16));\n    }\n}",
        "\nThe given Java source code is a class called `Pair` that implements the generic pair interface. The class has two fields: `key` and `value`, which are of types `K` and `V`, respectively, where these types are declared as generics.\n\nThe class also has several constructors, including one that takes in two parameters of type `K` and `V`, and another that takes in a single parameter of type `Pair<? extends K, ? extends V>`. The first constructor sets the `key` field to the value passed in as the first parameter, and the `value` field to the value passed in as the second parameter. The second constructor sets the `key` field and `value` field to the values of the `key` and `value` fields of the `Pair` object that is passed in.\n\nThe class also has several methods, including a `hashCode()` method that returns an integer representing the hash code of the pair. The `equals()` method compares two pairs for equality, and returns `true` if they represent the same mapping. Finally, the class has a `toString()` method that returns a string representation of the pair in the form \"[key, value]\".\n\nThe JUnit test case is designed to test the functionality of the `Pair` class. The first test, `hashCodeTest()`, checks the behavior of the `hashCode()` method by comparing the hash code returned by the method with the expected value.",
        "package org.apache.commons.math4.legacy.core;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Test case 1: both key and value are null\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", null);\n        int expectedHashCode1 = 0 ^ (0 >>> 16);\n        assertEquals(expectedHashCode1, pair1.hashCode());\n\n        // Test case 2: key is not null but value is null\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 1);\n        int expectedHashCode2 = \"key\".hashCode() ^ (0 >>> 16);\n        assertEquals(expectedHashCode2, pair2.hashCode());\n\n        // Test case 3: key and value are not null\n        Pair<String, Integer> pair3 = new Pair<>(\"key\", 1);\n        int expectedHashCode3 = \"key\".hashCode() ^ (1 >>> 16);\n        assertEquals(expectedHashCode3, pair3.hashCode());\n    }\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> p = new Pair<>(\"key\", 10);\n    assertEquals(p.hashCode(), 37 * \"key\".hashCode() + (10 ^ (10 >>> 16)));\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<Integer, Integer> pair1 = new Pair<>(1, 2);\n        assertEquals(pair1.hashCode(), 37 * 0 + (2 >>> 16));\n        \n        Pair<Integer, Integer> pair2 = new Pair<>(3, 4);\n        assertEquals(pair2.hashCode(), 37 * 0 + (4 >>> 16));\n    }\n}",
        "@Test\npublic void hashCodeTest() {\n    // create two pairs with the same key and value\n    Pair<Integer, Integer> pair1 = new Pair<>(1, 2);\n    Pair<Integer, Integer> pair2 = new Pair<>(3, 4);\n\n    // test that hashCode() returns the same value for both pairs\n    assertEquals(pair1.hashCode(), pair2.hashCode());\n}"
    ]
}