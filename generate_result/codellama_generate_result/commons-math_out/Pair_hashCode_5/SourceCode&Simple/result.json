{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compute a hash code.\n     *\n     * @return the hash code value.\n     */",
    "source_code": "\n@Override\npublic int hashCode() {\n    int result = key == null ? 0 : key.hashCode();\n\n    final int h = value == null ? 0 : value.hashCode();\n    result = 37 * result + h ^ (h >>> 16);\n\n    return result;\n}\n",
    "class_name": "Pair",
    "method_name": "hashCode",
    "arguments": [],
    "generate_test": [
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // create a pair object with null key and value\n        Pair<Integer, String> pair1 = new Pair<>(null, null);\n        assertEquals(0, pair1.hashCode());\n\n        // create a pair object with non-null key and value\n        Pair<Integer, String> pair2 = new Pair<>(1, \"value\");\n        assertEquals(37 * 1 + 0 ^ (0 >>> 16), pair2.hashCode());\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"apple\");\n        int expectedHashCode = 37 * (pair1.getKey().hashCode() + pair1.getValue().hashCode());\n        assertEquals(expectedHashCode, pair1.hashCode());\n\n        Pair<Integer, String> pair2 = new Pair<>(2, \"banana\");\n        expectedHashCode = 37 * (pair2.getKey().hashCode() + pair2.getValue().hashCode());\n        assertEquals(expectedHashCode, pair2.hashCode());\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 2);\n        Pair<String, Integer> pair3 = new Pair<>(\"key\", 3);\n        \n        assertEquals(pair1.hashCode(), pair2.hashCode());\n        assertNotEquals(pair1.hashCode(), pair3.hashCode());\n    }\n}",
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create a new Pair object with the key and value\n        Pair<String, Integer> pair = new Pair<>(\"test\", 1);\n        \n        // Get the expected hash code for the pair\n        int expectedHashCode = 37 * (\"test\".hashCode() ^ (Integer.valueOf(1).hashCode() >>> 16));\n        \n        // Assert that the actual hash code is equal to the expected hash code\n        assertEquals(expectedHashCode, pair.hashCode());\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<String, Integer> pair1 = new Pair<>(\"test\", 1);\n        assertEquals(pair1.hashCode(), 37 * 0 ^ (0 >>> 16));\n        \n        Pair<Integer, String> pair2 = new Pair<>(1, \"test\");\n        assertEquals(pair2.hashCode(), 37 * 0 ^ (0 >>> 16));\n    }\n}",
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<Integer, String> pair1 = new Pair(1, \"one\");\n        assertEquals(pair1.hashCode(), 37 * (1 ^ (1 >>> 16)) + 37 * (\"one\".hashCode()) ^ (\"one\".hashCode() >>> 16));\n        \n        Pair<Integer, String> pair2 = new Pair(2, \"two\");\n        assertEquals(pair2.hashCode(), 37 * (2 ^ (2 >>> 16)) + 37 * (\"two\".hashCode()) ^ (\"two\".hashCode() >>> 16));\n        \n        Pair<Integer, String> pair3 = new Pair(3, \"three\");\n        assertEquals(pair3.hashCode(), 37 * (3 ^ (3 >>> 16)) + 37 * (\"three\".hashCode()) ^ (\"three\".hashCode() >>> 16));\n    }\n}",
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<Integer, String> pair = new Pair<>(1, \"a\");\n        int expectedHashCode = 37 * (1 + \"a\".hashCode()) ^ ((1 + \"a\".hashCode()) >>> 16);\n        assertEquals(expectedHashCode, pair.hashCode());\n    }\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"key\", 1);\n    assertEquals(pair1.hashCode(), \"key\".hashCode() ^ (1).hashCode());\n\n    Pair<String, Integer> pair2 = new Pair<>(\"key2\", 2);\n    assertEquals(pair2.hashCode(), \"key2\".hashCode() ^ (2).hashCode());\n\n    Pair<String, Integer> pair3 = new Pair<>(\"key3\", null);\n    assertEquals(pair3.hashCode(), \"key3\".hashCode() ^ 0);\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<Integer, String> pair = new Pair(1, \"apple\");\n    assertEquals(pair.hashCode(), 37 * (1 + \"apple\".hashCode()) ^ ((1 + \"apple\".hashCode()) >>> 16));\n}",
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create a new pair object with null key and value\n        Pair<String, Integer> pair1 = new Pair<>(null, null);\n        assertEquals(0, pair1.hashCode());\n        \n        // Create a new pair object with non-null key and value\n        String k = \"key\";\n        Integer v = 5;\n        Pair<String, Integer> pair2 = new Pair<>(k, v);\n        assertEquals(37 * k.hashCode() + v.hashCode(), pair2.hashCode());\n    }\n}"
    ]
}