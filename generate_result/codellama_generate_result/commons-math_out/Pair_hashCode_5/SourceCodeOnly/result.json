{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compute a hash code.\n     *\n     * @return the hash code value.\n     */",
    "source_code": "\n@Override\npublic int hashCode() {\n    int result = key == null ? 0 : key.hashCode();\n\n    final int h = value == null ? 0 : value.hashCode();\n    result = 37 * result + h ^ (h >>> 16);\n\n    return result;\n}\n",
    "class_name": "Pair",
    "method_name": "hashCode",
    "arguments": [],
    "generate_test": [
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<Integer, String> pair1 = new Pair<>(10, \"apple\");\n        Pair<Integer, String> pair2 = new Pair<>(10, \"banana\");\n        assertEquals(pair1.hashCode(), pair2.hashCode());\n    }\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n    Pair<String, String> pair2 = new Pair<>(\"key2\", \"value2\");\n    assertNotEquals(pair1.hashCode(), pair2.hashCode());\n}",
        "\npackage org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Test with null key and value\n        Pair<String, Integer> pair1 = new Pair<>(null, null);\n        assertEquals(0, pair1.hashCode());\n        \n        // Test with non-null key and value\n        Pair<Integer, String> pair2 = new Pair<>(3, \"Hello\");\n        int expectedHashCode = 37 * (0 ^ (0 >>> 16)) + 3 ^ (3 >>> 16);\n        assertEquals(expectedHashCode, pair2.hashCode());\n    }\n}",
        "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create a pair with null key and value fields\n        Pair<String, Integer> pair = new Pair<>(null, null);\n        assertEquals(0, pair.hashCode());\n\n        // Create a pair with non-null key and value fields\n        pair = new Pair<>(\"key\", 123);\n        assertEquals(-1794105864, pair.hashCode());\n    }\n}",
        "\n@Test\npublic void hashCodeTest() {\n    Pair<Integer, Integer> pair1 = new Pair<>(1, 2);\n    Pair<String, String> pair2 = new Pair<>(\"hello\", \"world\");\n\n    assertEquals(pair1.hashCode(), 37 * (1 ^ (1 >>> 16)) + 37 * (2 ^ (2 >>> 16)));\n    assertEquals(pair2.hashCode(), 37 * (\"hello\".hashCode() ^ (\"hello\".hashCode() >>> 16)) + 37 * (\"world\".hashCode() ^ (\"world\".hashCode() >>> 16)));\n}",
        "\n@Test\npublic void hashCodeTest() {\n    Pair<Integer, String> pair1 = new Pair<>(123, \"abc\");\n    int expectedHashCode1 = (123 << 8) + \"abc\".hashCode();\n    assertEquals(expectedHashCode1, pair1.hashCode());\n    \n    Pair<Integer, String> pair2 = new Pair<>(456, \"def\");\n    int expectedHashCode2 = (456 << 8) + \"def\".hashCode();\n    assertEquals(expectedHashCode2, pair2.hashCode());\n    \n    Pair<Integer, String> pair3 = new Pair<>(789, \"ghi\");\n    int expectedHashCode3 = (789 << 8) + \"ghi\".hashCode();\n    assertEquals(expectedHashCode3, pair3.hashCode());\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create a pair with null key and value\n        Pair<String, String> pair1 = new Pair<>(null, null);\n        \n        // Create a pair with non-null key and value\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"value\");\n        \n        // Test hashCode() method for both pairs\n        assertEquals(pair1.hashCode(), 0);\n        assertEquals(pair2.hashCode(), 37 * ((\"key\".hashCode()) ^ ((\"value\".hashCode() >>> 16)));\n    }\n}",
        "\n@Test\npublic void hashCodeTest() {\n    Pair<Integer, String> pair1 = new Pair<>(10, \"Hello\");\n    Pair<Integer, String> pair2 = new Pair<>(10, \"World\");\n    assertNotEquals(pair1.hashCode(), pair2.hashCode());\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // create two pairs with the same key and value\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"value\");\n        \n        assertEquals(pair1.hashCode(), pair2.hashCode());\n    }\n}",
        "\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create a pair with null key and value\n        Pair<String, Integer> pair1 = new Pair<>(null, null);\n        assertEquals(0, pair1.hashCode());\n\n        // Create a pair with non-null key and null value\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", null);\n        assertEquals(37 * 0 + \"key\".hashCode(), pair2.hashCode());\n\n        // Create a pair with null key and non-null value\n        Pair<String, Integer> pair3 = new Pair<>(null, 10);\n        assertEquals(37 * 0 + 10.hashCode(), pair3.hashCode());\n\n        // Create a pair with non-null key and non-null value\n        Pair<String, Integer> pair4 = new Pair<>(\"key\", 10);\n        int h1 = \"key\".hashCode();\n        int h2 = 10.hashCode();\n        assertEquals(37 * (h1 ^ (h1 >>> 16)) + h2, pair4.hashCode());\n    }\n}"
    ]
}