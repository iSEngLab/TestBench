{
    "project_name": "javacv",
    "file_name": "Blobs.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/Blobs.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": null,
    "source_code": "// Determine the next (higher number) region that meets the desired conditions\npublic static int NextRegion(int Parent, int Color, double MinArea, double MaxArea, int Label)\n{\n    double DParent = (double) Parent; \n    double DColor = (double) Color; if(DColor > 0) DColor = 1;\n    \n    int i;\n    for(i = Label; i <= MaxLabel; i++)\n    {\n        double [] Region = RegionData[i];\n        double ThisParent = Region[BLOBPARENT];\n        double ThisColor = Region[BLOBCOLOR];\n        if(DParent >= 0 && DParent != ThisParent) continue;\n        if(DColor >= 0 && DColor != ThisColor) continue;\n        if(Region[BLOBAREA] < MinArea || Region[BLOBAREA] > MaxArea) continue;  \n        break;      // We have a match!\n    }\n    if(i > MaxLabel) i = -1;    // Use -1 to flag that there was no match\n    return i;\n}\n",
    "class_name": "Blobs",
    "method_name": "NextRegion",
    "arguments": [
        "int Parent",
        "int Color",
        "double MinArea",
        "double MaxArea",
        "int Label"
    ],
    "generate_test": [
        "\npackage org.bytedeco.javacv;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void NextRegionTest() {\n        int parent = 10;\n        int color = 255;\n        double minArea = 100;\n        double maxArea = 500;\n        int label = 1;\n\n        // Call the method with the parameters\n        int result = Blobs.NextRegion(parent, color, minArea, maxArea, label);\n\n        // Check that the result is correct\n        assertEquals(2, result);\n    }\n}",
        "\n@Test\npublic void NextRegionTest() {\n    int parent = 10;\n    int color = 255;\n    double minArea = 10.0;\n    double maxArea = 100.0;\n    int label = 5;\n    \n    assertEquals(7, NextRegion(parent, color, minArea, maxArea, label));\n}\n",
        "\npackage org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void NextRegionTest() {\n        double[][] regionData = new double[][] {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        int parent = 1;\n        int color = 0;\n        double minArea = 1.5;\n        double maxArea = 2.5;\n        int label = 0;\n\n        int result = Blobs.NextRegion(parent, color, minArea, maxArea, label);\n\n        assertEquals(result, 1);\n    }\n}\n",
        "\npublic class BlobsTest {\n    @Test\n    public void NextRegionTest() {\n        int parent = 1;\n        int color = 0;\n        double minArea = 10.5;\n        double maxArea = 20.5;\n        int label = 1;\n        \n        // Call the method with valid inputs and check if it returns the expected value\n        int result = NextRegion(parent, color, minArea, maxArea, label);\n        assertEquals(result, 1);\n        \n        // Call the method with invalid parent and check if it returns -1\n        parent = -1;\n        result = NextRegion(parent, color, minArea, maxArea, label);\n        assertEquals(result, -1);\n        \n        // Call the method with invalid color and check if it returns -1\n        parent = 1;\n        color = -1;\n        result = NextRegion(parent, color, minArea, maxArea, label);\n        assertEquals(result, -1);\n    }\n}",
        "\npackage org.bytedeco.javacv;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void NextRegionTest() {\n        int parent = 1234;\n        int color = 5678;\n        double minArea = 0.1;\n        double maxArea = 0.5;\n        int label = 9012;\n        \n        int nextRegion = Blobs.NextRegion(parent, color, minArea, maxArea, label);\n        \n        assertTrue(nextRegion >= 0);\n    }\n}",
        "\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void NextRegionTest() {\n        int parent = 12345; // Parent of the region to find\n        int color = 0; // Color of the region to find (if -1, any color is acceptable)\n        double minArea = 100.0; // Minimum area of the region to find\n        double maxArea = 200.0; // Maximum area of the region to find\n        int label = 0; // Initial label to start searching from (if -1, any label is acceptable)\n        \n        assertEquals(NextRegion(parent, color, minArea, maxArea, label), 5678); // Expected output: 5678\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void NextRegionTest() {\n        // Test case 1: Parent and Color are both -1, MinArea = 0, MaxArea = 10, Label = 5\n        int parent = -1;\n        int color = -1;\n        double minArea = 0.0;\n        double maxArea = 10.0;\n        int label = 5;\n        assertEquals(NextRegion(parent, color, minArea, maxArea, label), 5);\n        \n        // Test case 2: Parent and Color are both -1, MinArea = 5, MaxArea = 10, Label = 5\n        parent = -1;\n        color = -1;\n        minArea = 5.0;\n        maxArea = 10.0;\n        label = 5;\n        assertEquals(NextRegion(parent, color, minArea, maxArea, label), 5);\n        \n        // Test case 3: Parent and Color are both -1, MinArea = 0, MaxArea = 10, Label = 15\n        parent = -1;\n        color = -1;\n        minArea = 0.0;\n        maxArea = 10.0;\n        label = 15;\n        assertEquals(NextRegion(parent, color, minArea, maxArea, label), -1);\n        \n        // Test case 4: Parent and Color are both -1, MinArea = 0, MaxArea = 10, Label = 10\n        parent = -1;\n        color = -1;\n        minArea = 0.0;\n        maxArea = 10.0;\n        label = 10;\n        assertEquals(NextRegion(parent, color, minArea, maxArea, label), 10);\n        \n        // Test case 5: Parent and Color are both -1, MinArea = 0, MaxArea = 10, Label = 7\n        parent = -1;\n        color = -1;\n        minArea = 0.0;\n        maxArea = 10.0;\n        label = 7;\n        assertEquals(NextRegion(parent, color, minArea, maxArea, label), 7);\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void NextRegionTest() {\n        int parent = 1;\n        int color = 0;\n        double minArea = 100.0;\n        double maxArea = 200.0;\n        int label = 5;\n        \n        // Call the method with the given parameters\n        int nextRegion = Blobs.NextRegion(parent, color, minArea, maxArea, label);\n        \n        // Check that the returned value is correct\n        assertEquals(-1, nextRegion);\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void NextRegionTest() {\n        // Test case 1: Parent = -1, Color = -1, MinArea = 0, MaxArea = Double.MAX_VALUE, Label = 0\n        int parent = -1;\n        int color = -1;\n        double minArea = 0;\n        double maxArea = Double.MAX_VALUE;\n        int label = 0;\n        \n        assertEquals(label, Blobs.NextRegion(parent, color, minArea, maxArea, label));\n        \n        // Test case 2: Parent = 1, Color = -1, MinArea = 0, MaxArea = Double.MAX_VALUE, Label = 0\n        parent = 1;\n        assertEquals(-1, Blobs.NextRegion(parent, color, minArea, maxArea, label));\n        \n        // Test case 3: Parent = -1, Color = 2, MinArea = 0, MaxArea = Double.MAX_VALUE, Label = 0\n        parent = -1;\n        color = 2;\n        assertEquals(-1, Blobs.NextRegion(parent, color, minArea, maxArea, label));\n        \n        // Test case 4: Parent = -1, Color = -1, MinArea = 500, MaxArea = Double.MAX_VALUE, Label = 0\n        parent = -1;\n        color = -1;\n        minArea = 500;\n        assertEquals(-1, Blobs.NextRegion(parent, color, minArea, maxArea, label));\n        \n        // Test case 5: Parent = -1, Color = -1, MinArea = 0, MaxArea = 200, Label = 0\n        parent = -1;\n        color = -1;\n        minArea = 0;\n        maxArea = 200;\n        assertEquals(-1, Blobs.NextRegion(parent, color, minArea, maxArea, label));\n        \n        // Test case 6: Parent = -1, Color = -1, MinArea = 0, MaxArea = Double.MAX_VALUE, Label = 100\n        parent = -1;\n        color = -1;\n        minArea = 0;\n        maxArea = Double.MAX_VALUE;\n        label = 100;\n        \n        assertEquals(label, Blobs.NextRegion(parent, color, minArea, maxArea, label));\n    }\n}",
        "\npackage org.bytedeco.javacv;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void NextRegionTest() {\n        int parent = 100;\n        int color = 255;\n        double minArea = 30;\n        double maxArea = 50;\n        int label = 1;\n        \n        assertEquals(NextRegion(parent, color, minArea, maxArea, label), 2);\n    }\n}"
    ]
}