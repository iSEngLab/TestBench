{
    "project_name": "javacv",
    "file_name": "FFmpegFrameGrabber.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/FFmpegFrameGrabber.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**Estimation of audio frames per second.\n     *\n     * Care must be taken as this method may require unnecessary call of\n     * grabFrame(true, false, false, false, false) with frameGrabbed set to true.\n     *\n     * @return (double) getSampleRate()) / samples_frame.nb_samples()\n     * if samples_frame.nb_samples() is not zero, otherwise return 0\n     */",
    "source_code": "\npublic double getAudioFrameRate() {\n    if (audio_st == null) {\n        return 0.0;\n    } else {\n        if (samples_frame == null || samples_frame.nb_samples() == 0) {\n            try {\n                grabFrame(true, false, false, false, false);\n                frameGrabbed = true;\n            } catch (Exception e) {\n                return 0.0;\n            }\n        }\n        if (samples_frame != null && samples_frame.nb_samples() != 0)\n            return ((double) getSampleRate()) / samples_frame.nb_samples();\n        else return 0.0;\n\n    }\n}\n",
    "class_name": "FFmpegFrameGrabber",
    "method_name": "getAudioFrameRate",
    "arguments": [],
    "generate_test": [
        "package org.bytedeco.javacv;\n\nimport java.util.*;\n\npublic class FFmpegFrameGrabber {\n    /** The Constant TAG_FFMPEGFRAMEGRABBER. */\n    public static final String TAG_FFMPEGFRAMEGRABBER = \"FFMPEGFRAMEGRABBER\";\n    private long nativePtr;\n\n    private native FFmpegFrameGrabber(String paramString);\n\n    /**\n     * Allocate a FrameGrabber based on the specified URL. This version is useful for Android 2.3 and earlier, as well as other platforms without JNI. Note that you should never ever use this constructor from your own code, since it is meaningless and can lead to memory leaks and crashes.\n     * @param url the source URL. Any protocol supported by FFmpeg may be used: file, rtsp, mms, http, cdn, etc.\n     */\n    public FFmpegFrameGrabber(String url) {\n        nativePtr = allocate();\n        super(nativePtr);\n        return this;\n    }\n\n    private static native long allocate();\n}",
        "package org.bytedeco.javacv;\nimport org.junit.jupiter.api.*;\n\npublic class FFmpegFrameGrabberTest {\n    @BeforeEach\n    public void setup() {\n        <FILL>\n    }\n\n    @Test\n    public void getAudioFrameRateTest() throws Exception {\n        // Given\n        FFmpegFrameGrabber grabber = new FFmpegFrameGrabber();\n\n        // When\n        int frameRate = grabber.getAudioFrameRate();\n\n        // Then\n        assertEquals(1, frameRate);\n    }\n}",
        "\npackage org.bytedeco.javacv;\n\nimport java.io.IOException;\n\npublic class FFmpegFrameGrabberTest {\n    @Test\n    public void testGetAudioFrameRate() throws IOException {\n        FFmpegFrameGrabber grabber = new FFmpegFrameGrabber();\n        int frameRate = grabber.getAudioFrameRate();\n\n        assertEquals(10, frameRate);\n    }\n}\n",
        "@Test\npublic void getAudioFrameRateTest() throws Exception {\n    String inputFile = \"path/to/input.mp3\";\n    FFmpegFrameGrabber grabber = new FFmpegFrameGrabber(inputFile, 48000);\n    grabber.start();\n    \n    double expectedAudioFrameRate = 48000;\n    double actualAudioFrameRate = grabber.getAudioFrameRate();\n    \n    assertEquals(expectedAudioFrameRate, actualAudioFrameRate);\n}",
        "\npackage org.bytedeco.javacv;\n\nimport java.io.IOException;\n\npublic class FFmpegFrameGrabberTest {\n    <FILL>\n}",
        "package org.bytedeco.javacv;\nimport static org.bytedeco.javacpp.*;\nimport java.io.*;\npublic class FFmpegFrameGrabberTest {\n    @Test\n    public void getAudioFrameRateTest() {\n        <FILL>\n    }\n}\n    \n\n### Response:",
        "package org.bytedeco.javacv;\nimport org.junit.*;\npublic class FFmpegFrameGrabberTest {\n    @Test\n    public void getAudioFrameRateTest() throws Exception {\n        String inputFile = <FILL>;\n        FFmpegFrameGrabber grabber = new FFmpegFrameGrabber();\n        assertEquals(<FILL>, grabber.getAudioFrameRate());\n    }\n}\n\n\n### Response:",
        "\npackage org.bytedeco.javacv;\nimport java.util.*;\npublic class FFmpegFrameGrabberTest {\n    private FFmpegFrameGrabber grabber;\n\n    @BeforeEach\n    public void setup() {\n        grabber = new FFmpegFrameGrabber();\n    }\n\n    @Test\n    public void getAudioChannelsTest() {\n        assertTrue(grabber.getAudioChannels() > 0);\n    }\n\n    @Test\n    public void getSampleRateTest() {\n        assertTrue(grabber.getSampleRate() > 0);\n    }\n\n    @Test\n    public void getFrameNumberTest() {\n        assertTrue(grabber.getFrameNumber() >= 0);\n    }\n\n    @Test\n    public void getVideoCodecTypeTest() {\n        assertNotEquals(\"\", grabber.getVideoCodecType());\n    }\n\n    @Test\n    public void getAudioBitrateTest() {\n        assertTrue(grabber.getAudioBitrate() >= 0);\n    }\n\n    @Test\n    public void getBufferSizeTest() {\n        assertTrue(grabber.getBufferSize() > 0);\n    }\n\n    @Test\n    public void getDurationTest() {\n        assertNotEquals(\"\", grabber.getDuration());\n    }\n\n    @Test\n    public void setBufferCapacityTest() {\n        int capacity = 1234;\n        grabber.setBufferCapacity(capacity);\n        assertEquals(grabber.getBufferSize(), capacity);\n    }\n\n    @Test\n    public void getFrameRateTest() {\n        assertTrue(grabber.getFrameRate() > 0);\n    }\n}",
        "\nYou can use the `getSampleRate()` method to get the audio sample rate. If the input format is not set, this value will be 0.\n\nHere's an example code snippet to demonstrate how you could implement this:\n\n    import org.bytedeco.javacv.*;\n    \n    public class FFmpegFrameGrabberTest {\n        @Test\n        public void getAudioFrameRate() {\n            FFmpegFrameGrabber grabber = new FFmpegFrameGrabber();\n            \n            grabber.start();\n            assertEquals(grabber.getSampleRate(), 0);\n            grabber.stop();\n        }\n    }\n    \n\n### Response:",
        "package org.bytedeco.javacv;\nimport java.util.*;\npublic class FFmpegFrameGrabber extends AbstractFrameGrabber {\n    public void setAudioChannels(int channels) throws FrameGrabberException {\n        this.audioChannels = channels;\n    }\n    @Override\n    public int getAudioChannels() throws FrameGrabberException {\n        return audioChannels;\n    }\n    @Test\n    void testGetAudioFrameRate() throws Exception {\n        try (FFmpegFrameGrabber g = new FFmpegFrameGrabber(0);) {\n            assertEquals(0, g.getAudioFrameRate());\n        } catch (Throwable t) {\n            throw new AssertionError(\"Expected exception not thrown\", t);\n        }\n    }\n}"
    ]
}