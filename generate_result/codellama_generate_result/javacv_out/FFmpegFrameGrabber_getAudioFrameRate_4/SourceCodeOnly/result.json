{
    "project_name": "javacv",
    "file_name": "FFmpegFrameGrabber.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/FFmpegFrameGrabber.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**Estimation of audio frames per second.\n     *\n     * Care must be taken as this method may require unnecessary call of\n     * grabFrame(true, false, false, false, false) with frameGrabbed set to true.\n     *\n     * @return (double) getSampleRate()) / samples_frame.nb_samples()\n     * if samples_frame.nb_samples() is not zero, otherwise return 0\n     */",
    "source_code": "\npublic double getAudioFrameRate() {\n    if (audio_st == null) {\n        return 0.0;\n    } else {\n        if (samples_frame == null || samples_frame.nb_samples() == 0) {\n            try {\n                grabFrame(true, false, false, false, false);\n                frameGrabbed = true;\n            } catch (Exception e) {\n                return 0.0;\n            }\n        }\n        if (samples_frame != null && samples_frame.nb_samples() != 0)\n            return ((double) getSampleRate()) / samples_frame.nb_samples();\n        else return 0.0;\n\n    }\n}\n",
    "class_name": "FFmpegFrameGrabber",
    "method_name": "getAudioFrameRate",
    "arguments": [],
    "generate_test": [
        "\n@Test\npublic void getAudioFrameRateTest() {\n    FFmpegFrameGrabber grabber = new FFmpegFrameGrabber();\n    \n    // Set up the audio stream\n    AudioStream audio_st = mock(AudioStream.class);\n    when(audio_st.getSampleRate()).thenReturn(48000);\n    grabber.setAudioStream(audio_st);\n    \n    // Set up the samples frame\n    Frame samples_frame = new Frame();\n    samples_frame.nb_samples = 10;\n    when(samples_frame.nb_samples()).thenReturn(10);\n    grabber.setSamplesFrame(samples_frame);\n    \n    // Set up the frame grabbed flag\n    boolean frameGrabbed = true;\n    doReturn(true).when(grabber).grabFrame();\n    \n    // Call the method and check the result\n    double actualResult = grabber.getAudioFrameRate();\n    assertEquals(48000 / 10, actualResult);\n}",
        "\npublic class FFmpegFrameGrabberTest {\n    @Test\n    public void getAudioFrameRateTest() {\n        // Create an instance of the FFmpegFrameGrabber class\n        FFmpegFrameGrabber grabber = new FFmpegFrameGrabber();\n        \n        // Set up the audio stream and frame rate\n        grabber.audio_st = null;\n        grabber.samples_frame = null;\n        grabber.sample_rate = 0;\n        grabber.grabFrame(true, false, false, false, false);\n        \n        // Test the getAudioFrameRate method\n        double frameRate = grabber.getAudioFrameRate();\n        assertEquals(frameRate, 0.0);\n    }\n}",
        "\n@Test\npublic void getAudioFrameRateTest() {\n    FFmpegFrameGrabber grabber = new FFmpegFrameGrabber();\n    grabber.setSampleRate(48000);\n    grabber.grabFrame(true, false, false, false, false);\n    assertEquals(48000 / 1024, grabber.getAudioFrameRate(), 0.01);\n}",
        "\npackage org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FFmpegFrameGrabberTest {\n    @Test\n    public void getAudioFrameRateTest() {\n        FFmpegFrameGrabber grabber = new FFmpegFrameGrabber();\n        assertEquals(0.0, grabber.getAudioFrameRate(), 0.0);\n\n        // Test with audio_st set to null\n        grabber.audio_st = null;\n        assertEquals(0.0, grabber.getAudioFrameRate(), 0.0);\n\n        // Test with samples_frame set to null or empty\n        grabber.samples_frame = null;\n        assertEquals(0.0, grabber.getAudioFrameRate(), 0.0);\n        grabber.samples_frame = new AVFrame();\n        assertEquals(0.0, grabber.getAudioFrameRate(), 0.0);\n\n        // Test with valid samples_frame and sample rate\n        grabber.samples_frame = new AVFrame().nb_samples(10).sample_rate(48000);\n        assertEquals((double) 48000 / 10, grabber.getAudioFrameRate(), 0.0);\n    }\n}",
        "\n@Test\npublic void getAudioFrameRateTest() {\n    FFmpegFrameGrabber frameGrabber = new FFmpegFrameGrabber();\n    \n    // Test case 1: audio_st is null\n    frameGrabber.audio_st = null;\n    assertEquals(0.0, frameGrabber.getAudioFrameRate());\n    \n    // Test case 2: samples_frame is null or empty\n    frameGrabber.audio_st = new AudioStream();\n    frameGrabber.samples_frame = null;\n    assertEquals(0.0, frameGrabber.getAudioFrameRate());\n    \n    frameGrabber.samples_frame = new SamplesFrame();\n    frameGrabber.samples_frame.nb_samples = 0;\n    assertEquals(0.0, frameGrabber.getAudioFrameRate());\n    \n    // Test case 3: samples_frame is not null and not empty\n    frameGrabber.audio_st = new AudioStream();\n    frameGrabber.samples_frame = new SamplesFrame();\n    frameGrabber.samples_frame.nb_samples = 10;\n    assertEquals(50.0, frameGrabber.getAudioFrameRate());\n    \n    // Test case 4: grabFrame throws an exception\n    frameGrabber.audio_st = new AudioStream();\n    frameGrabber.samples_frame = null;\n    try {\n        frameGrabber.grabFrame(true, false, false, false, false);\n    } catch (Exception e) {\n        assertEquals(0.0, frameGrabber.getAudioFrameRate());\n    }\n}",
        "\npackage org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FFmpegFrameGrabberTest {\n    @Test\n    public void getAudioFrameRateTest() {\n        FFmpegFrameGrabber grabber = new FFmpegFrameGrabber();\n        grabber.setSampleRate(48000);\n        assertEquals(192.0, grabber.getAudioFrameRate());\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FFmpegFrameGrabberTest {\n    @Test\n    public void getAudioFrameRateTest() {\n        FFmpegFrameGrabber grabber = new FFmpegFrameGrabber();\n        grabber.setAudioStream(null); // set audio_st to null\n\n        double frameRate = grabber.getAudioFrameRate();\n        assertEquals(0.0, frameRate);\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FFmpegFrameGrabberTest {\n    @Test\n    public void getAudioFrameRateTest() {\n        // Test 1: Audio frame rate is 0 if audio_st is null\n        FFmpegFrameGrabber grabber = new FFmpegFrameGrabber();\n        assertEquals(0.0, grabber.getAudioFrameRate());\n        \n        // Test 2: Audio frame rate is calculated correctly with samples_frame and getSampleRate()\n        grabber.samples_frame = new int[] { 1, 2, 3 };\n        grabber.audio_st = new FFmpegStream();\n        grabber.grabFrame(true, false, false, false, false);\n        assertEquals((double) grabber.getSampleRate() / grabber.samples_frame.nb_samples(), grabber.getAudioFrameRate());\n        \n        // Test 3: Audio frame rate is 0 if samples_frame or getSampleRate() are null\n        grabber.samples_frame = null;\n        assertEquals(0.0, grabber.getAudioFrameRate());\n        grabber.samples_frame = new int[] { 1, 2, 3 };\n        grabber.audio_st = null;\n        assertEquals(0.0, grabber.getAudioFrameRate());\n    }\n}",
        "\npackage org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FFmpegFrameGrabberTest {\n    @Test\n    public void getAudioFrameRateTest() {\n        FFmpegFrameGrabber grabber = new FFmpegFrameGrabber();\n        \n        // test with audio_st != null and samples_frame == null or samples_frame.nb_samples() == 0\n        grabber.audio_st = mock(AVStream.class);\n        grabber.samples_frame = null;\n        assertEquals(grabber.getAudioFrameRate(), 0.0, 0.01); // expected result: 0.0\n        \n        // test with audio_st != null and samples_frame != null and samples_frame.nb_samples() != 0\n        grabber.samples_frame = mock(AVFrame.class);\n        when(grabber.getSampleRate()).thenReturn(16000);\n        when(grabber.samples_frame.nb_samples()).thenReturn(8000); // half of the sample rate\n        \n        assertEquals(grabber.getAudioFrameRate(), 2.0, 0.01); // expected result: 2.0 (sample rate / nb samples)\n    }\n}",
        "\npackage org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FFmpegFrameGrabberTest {\n    @Test\n    public void getAudioFrameRateTest() {\n        FFmpegFrameGrabber grabber = new FFmpegFrameGrabber(\"\");\n        double frameRate = grabber.getAudioFrameRate();\n        assertEquals(0.0, frameRate);\n        \n        grabber.grabFrame(true, false, false, false, false);\n        frameRate = grabber.getAudioFrameRate();\n        assertNotEquals(0.0, frameRate);\n    }\n}"
    ]
}