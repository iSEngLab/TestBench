{
    "project_name": "javacv",
    "file_name": "Frame.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/Frame.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**Care must be taken if this method is to be used in conjunction with movie recordings.\n     *  Cloning a frame containing a full HD picture (alpha channel included) would take 1920 x 1080 * 4 = 8.294.400 Bytes.\n     *  Expect a heap overflow exception when using this method without cleaning up.\n     *\n     * @return A deep copy of this frame.\n     * @see {@link #cloneBufferArray}\n     *\n     * @author Extension proposed by Dragos Dutu\n     * */",
    "source_code": "\n@Override\npublic Frame clone() {\n    Frame newFrame = new Frame();\n\n    // Video part\n    newFrame.imageWidth = imageWidth;\n    newFrame.imageHeight = imageHeight;\n    newFrame.imageDepth = imageDepth;\n    newFrame.imageChannels = imageChannels;\n    newFrame.imageStride = imageStride;\n    newFrame.keyFrame = keyFrame;\n    newFrame.pictType = pictType;\n    newFrame.streamIndex = streamIndex;\n    newFrame.type = type;\n    newFrame.opaque = new Pointer[3];\n    if (image != null) {\n        newFrame.image = new Buffer[image.length];\n        ((Pointer[])newFrame.opaque)[0] = cloneBufferArray(image, newFrame.image);\n    }\n\n    // Audio part\n    newFrame.audioChannels = audioChannels;\n    newFrame.sampleRate = sampleRate;\n    if (samples != null) {\n        newFrame.samples = new Buffer[samples.length];\n        ((Pointer[])newFrame.opaque)[1] = cloneBufferArray(samples, newFrame.samples);\n    }\n\n    // Other data streams\n    if (data != null) {\n        ByteBuffer[] dst = new ByteBuffer[1];\n        ((Pointer[])newFrame.opaque)[2] = cloneBufferArray(new ByteBuffer[]{data}, dst);\n        newFrame.data = dst[0];\n    }\n\n    // Add timestamp\n    newFrame.timestamp = timestamp;\n\n    return newFrame;\n}\n",
    "class_name": "Frame",
    "method_name": "clone",
    "arguments": [],
    "generate_test": [
        "package org.bytedeco.javacv;\n\nimport java.nio.*;\nimport java.util.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        Frame frame = new Frame();\n        // Add sample data to frame\n        byte[] sampleData = new byte[10];\n        for (int i = 0; i < sampleData.length; i++) {\n            sampleData[i] = (byte)i;\n        }\n        frame.samples = ByteBuffer.wrap(sampleData);\n        // Add video image data to frame\n        byte[] imageData = new byte[10];\n        for (int i = 0; i < imageData.length; i++) {\n            imageData[i] = (byte)i;\n        }\n        frame.image = ByteBuffer.wrap(imageData);\n        // Add metadata to frame\n        Map<String, Object> meta = new HashMap<>();\n        meta.put(\"key\", \"value\");\n        frame.metadata = meta;\n        \n        Frame cloneFrame = frame.clone();\n        assertEquals(frame.samples, cloneFrame.samples);\n        assertNotSame(frame.samples, cloneFrame.samples);\n        assertEquals(frame.image, cloneFrame.image);\n        assertNotSame(frame.image, cloneFrame.image);\n        assertEquals(frame.metadata, cloneFrame.metadata);\n        assertNotSame(frame.metadata, cloneFrame.metadata);\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport java.nio.*;\nimport org.junit.jupiter.api.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        // ByteBuffer\n        ByteBuffer byteBuffer = ByteBuffer.allocate(10);\n        byteBuffer.put((byte) 1).put((byte) 2).put((byte) 3).flip();\n        Frame frame = new Frame(byteBuffer);\n        assertEquals(frame.data[0], (byte) 1);\n        assertEquals(frame.data[1], (byte) 2);\n        assertEquals(frame.data[2], (byte) 3);\n\n        // ShortBuffer\n        ShortBuffer shortBuffer = ShortBuffer.allocate(10);\n        shortBuffer.put((short) 4).put((short) 5).flip();\n        frame = new Frame(shortBuffer);\n        assertEquals(frame.data[0], (short) 4);\n        assertEquals(frame.data[1], (short) 5);\n    }\n}",
        "    \n    package org.bytedeco.javacv;\n\nimport java.nio.*;\nimport java.util.EnumSet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.fail;\n\n/** Tests for the Frame class */\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        Frame frame = new Frame(640, 480);\n        frame.image = ByteBuffer.allocateDirect(123456).asShortBuffer();\n        frame.samples = ByteBuffer.allocateDirect(789).asIntBuffer();\n        frame.data = ByteBuffer.allocateDirect(91011);\n        Frame clonedFrame = new Frame(frame);\n\n        // Check that the cloned frame is equal to the original one\n        assertEquals(frame.image, clonedFrame.image);\n        assertEquals(frame.samples, clonedFrame.samples);\n        assertEquals(frame.data, clonedFrame.data);\n    }\n}\n\n    ",
        "\nFrame originalFrame = ...; // initialize with some data\nFrame clonedFrame = originalFrame.clone();\nclonedFrame.image = ...;   // modify only the cloned frame\nassertEquals(originalFrame.image, ...);  // check that the original frame was not modified\n",
        "public class FrameTest {\n    @Test\n    public void cloneTest() {\n        // 1. Create a frame with data and make sure the data is not null\n        Frame frame = new Frame(500, 500, 4);\n        assertNotNull(frame.image);\n        // 2. Clone the frame\n        Frame clonedFrame = frame.clone();\n        // 3. Check that both frames have the same data\n        assertEquals(clonedFrame.image[0], frame.image[0]);\n    }\n}\n    \n",
        "import org.junit.jupiter.api.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() throws Exception {\n        // Create a new Frame object\n        Frame frame = new Frame();\n        \n        // Set the image field of the Frame object to null\n        frame.image = null;\n        \n        // Clone the Frame object using the clone() method\n        Frame clonedFrame = (Frame)frame.clone();\n        \n        // Check if the opaque field is properly initialized\n        assertNotNull(clonedFrame.opaque);\n        \n        // Check if the image field of the original Frame object is copied correctly\n        assertEquals(null, frame.image);\n        assertEquals(null, clonedFrame.image);\n        \n        // Check that calling clone() again on the same Frame object will not cause problems\n        Frame secondClone = (Frame)frame.clone();\n        assertNotNull(secondClone.opaque);\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        // Test 1: create a new frame with an empty constructor\n        Frame f = new Frame();\n        assertTrue(f.image == null);\n        assertTrue(f.samples == null);\n        assertTrue(f.data == null);\n        \n        // Test 2: clone the frame and check if it's the same\n        Frame fClone = f.clone();\n        assertEquals(f, fClone);\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport java.nio.*;\n\npublic class FrameTest {\n    public void cloneTest() {\n        <FILL>\n    }\n}",
        "@Disabled\npublic class FrameTest {\n    <FILL>\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @ParameterizedTest\n    @ValueSource(strings = {\"VIDEO\", \"AUDIO\", \"DATA\"})\n    public void cloneTest(String type) {\n        // Set up your test fixture here, including any required objects like `Frame` or `ByteBuffer`.\n        Frame frame1 = new Frame();\n        if (type.equals(\"VIDEO\")) {\n            frame1.image = ...;  // Your video data goes here\n        } else if (type.equals(\"AUDIO\")) {\n            frame1.samples = ...;  // Your audio data goes here\n        } else if (type.equals(\"DATA\")) {\n            frame1.data = ...;  // Your data goes here\n        }\n        Frame frame2 = frame1.clone();\n\n        // Check that the cloned `Frame` is not null and has the same type as the original `Frame`.\n        assertNotNull(frame2);\n        assertEquals(type, frame2.getType());\n\n        if (type.equals(\"VIDEO\")) {\n            // Verify that the image data is correct\n            ...\n        } else if (type.equals(\"AUDIO\")) {\n            // Verify that the audio data is correct\n            ...\n        } else if (type.equals(\"DATA\")) {\n            // Verify that the data is correct\n            ...\n        }\n    }\n}"
    ]
}