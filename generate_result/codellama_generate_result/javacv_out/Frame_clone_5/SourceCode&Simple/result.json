{
    "project_name": "javacv",
    "file_name": "Frame.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/Frame.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**Care must be taken if this method is to be used in conjunction with movie recordings.\n     *  Cloning a frame containing a full HD picture (alpha channel included) would take 1920 x 1080 * 4 = 8.294.400 Bytes.\n     *  Expect a heap overflow exception when using this method without cleaning up.\n     *\n     * @return A deep copy of this frame.\n     * @see {@link #cloneBufferArray}\n     *\n     * @author Extension proposed by Dragos Dutu\n     * */",
    "source_code": "\n@Override\npublic Frame clone() {\n    Frame newFrame = new Frame();\n\n    // Video part\n    newFrame.imageWidth = imageWidth;\n    newFrame.imageHeight = imageHeight;\n    newFrame.imageDepth = imageDepth;\n    newFrame.imageChannels = imageChannels;\n    newFrame.imageStride = imageStride;\n    newFrame.keyFrame = keyFrame;\n    newFrame.pictType = pictType;\n    newFrame.streamIndex = streamIndex;\n    newFrame.type = type;\n    newFrame.opaque = new Pointer[3];\n    if (image != null) {\n        newFrame.image = new Buffer[image.length];\n        ((Pointer[])newFrame.opaque)[0] = cloneBufferArray(image, newFrame.image);\n    }\n\n    // Audio part\n    newFrame.audioChannels = audioChannels;\n    newFrame.sampleRate = sampleRate;\n    if (samples != null) {\n        newFrame.samples = new Buffer[samples.length];\n        ((Pointer[])newFrame.opaque)[1] = cloneBufferArray(samples, newFrame.samples);\n    }\n\n    // Other data streams\n    if (data != null) {\n        ByteBuffer[] dst = new ByteBuffer[1];\n        ((Pointer[])newFrame.opaque)[2] = cloneBufferArray(new ByteBuffer[]{data}, dst);\n        newFrame.data = dst[0];\n    }\n\n    // Add timestamp\n    newFrame.timestamp = timestamp;\n\n    return newFrame;\n}\n",
    "class_name": "Frame",
    "method_name": "clone",
    "arguments": [],
    "generate_test": [
        "package org.bytedeco.javacv;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        // Create a new instance of the Frame class\n        Frame frame = new Frame();\n\n        // Set some properties of the frame\n        frame.imageWidth = 100;\n        frame.imageHeight = 200;\n        frame.imageDepth = 300;\n        frame.keyFrame = true;\n        frame.pictType = 'a';\n\n        // Clone the frame and check that the properties are correct\n        Frame clonedFrame = frame.clone();\n        assertEquals(100, clonedFrame.imageWidth);\n        assertEquals(200, clonedFrame.imageHeight);\n        assertEquals(300, clonedFrame.imageDepth);\n        assertTrue(clonedFrame.keyFrame);\n        assertEquals('a', clonedFrame.pictType);\n    }\n}",
        "\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        // Create a new instance of the Frame class to be cloned\n        Frame frame = new Frame();\n\n        // Set some values on the original Frame object\n        frame.imageWidth = 10;\n        frame.imageHeight = 20;\n        frame.keyFrame = true;\n        frame.pictType = 'I';\n        frame.streamIndex = 3;\n        frame.type = Type.VIDEO;\n        frame.opaque = new Pointer[3];\n\n        // Clone the original Frame object and verify that the values were copied correctly\n        Frame cloneFrame = frame.clone();\n        assertEquals(frame.imageWidth, cloneFrame.imageWidth);\n        assertEquals(frame.imageHeight, cloneFrame.imageHeight);\n        assertTrue(cloneFrame.keyFrame);\n        assertEquals(frame.pictType, cloneFrame.pictType);\n        assertEquals(frame.streamIndex, cloneFrame.streamIndex);\n        assertEquals(frame.type, cloneFrame.type);\n        assertArrayEquals((Pointer[]) frame.opaque, (Pointer[]) cloneFrame.opaque);\n    }\n}",
        "@Test\npublic void cloneTest() {\n    Frame frame = new Frame(10, 20, Frame.DEPTH_BYTE, 3);\n    frame.keyFrame = true;\n    frame.pictType = 'A';\n    frame.imageWidth = 5;\n    frame.imageHeight = 8;\n    frame.imageDepth = Frame.DEPTH_SHORT;\n    frame.imageChannels = 2;\n    frame.imageStride = 10;\n    frame.sampleRate = 44100;\n    frame.audioChannels = 1;\n    frame.data = ByteBuffer.allocate(10);\n    frame.streamIndex = 1;\n    frame.type = Type.VIDEO;\n    frame.timestamp = System.currentTimeMillis();\n\n    Frame newFrame = frame.clone();\n\n    assertEquals(frame.keyFrame, newFrame.keyFrame);\n    assertEquals(frame.pictType, newFrame.pictType);\n    assertEquals(frame.imageWidth, newFrame.imageWidth);\n    assertEquals(frame.imageHeight, newFrame.imageHeight);\n    assertEquals(frame.imageDepth, newFrame.imageDepth);\n    assertEquals(frame.imageChannels, newFrame.imageChannels);\n    assertEquals(frame.imageStride, newFrame.imageStride);\n    assertEquals(frame.sampleRate, newFrame.sampleRate);\n    assertEquals(frame.audioChannels, newFrame.audioChannels);\n    assertArrayEquals((byte[]) frame.data.array(), (byte[]) newFrame.data.array());\n    assertEquals(frame.streamIndex, newFrame.streamIndex);\n    assertEquals(frame.type, newFrame.type);\n    assertEquals(frame.timestamp, newFrame.timestamp);\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        // Create a frame with some values\n        Frame frame = new Frame();\n        frame.imageWidth = 10;\n        frame.imageHeight = 20;\n        frame.imageDepth = 30;\n        frame.imageChannels = 40;\n        frame.imageStride = 50;\n        frame.keyFrame = true;\n        frame.pictType = 'A';\n        frame.streamIndex = 60;\n        frame.type = Type.VIDEO;\n        frame.opaque = new Pointer[3];\n        // Create a clone of the frame and check that it has the same values as the original\n        Frame cloneFrame = frame.clone();\n        assertEquals(frame.imageWidth, cloneFrame.imageWidth);\n        assertEquals(frame.imageHeight, cloneFrame.imageHeight);\n        assertEquals(frame.imageDepth, cloneFrame.imageDepth);\n        assertEquals(frame.imageChannels, cloneFrame.imageChannels);\n        assertEquals(frame.imageStride, cloneFrame.imageStride);\n        assertEquals(frame.keyFrame, cloneFrame.keyFrame);\n        assertEquals(frame.pictType, cloneFrame.pictType);\n        assertEquals(frame.streamIndex, cloneFrame.streamIndex);\n        assertEquals(frame.type, cloneFrame.type);\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        // Create a new Frame object\n        Frame frame = new Frame();\n\n        // Set some values for the fields of the Frame object\n        frame.imageWidth = 10;\n        frame.imageHeight = 20;\n        frame.imageDepth = 30;\n        frame.imageChannels = 40;\n        frame.imageStride = 50;\n        frame.keyFrame = true;\n        frame.pictType = 'V';\n        frame.streamIndex = 60;\n        frame.type = Type.VIDEO;\n        frame.opaque = new Object();\n        frame.timestamp = 70;\n\n        // Call the clone() method on the Frame object\n        Frame clonedFrame = frame.clone();\n\n        // Verify that the values of the fields in the newly created Frame object match the expected values\n        assertEquals(10, clonedFrame.imageWidth);\n        assertEquals(20, clonedFrame.imageHeight);\n        assertEquals(30, clonedFrame.imageDepth);\n        assertEquals(40, clonedFrame.imageChannels);\n        assertEquals(50, clonedFrame.imageStride);\n        assertTrue(clonedFrame.keyFrame);\n        assertEquals('V', clonedFrame.pictType);\n        assertEquals(60, clonedFrame.streamIndex);\n        assertEquals(Type.VIDEO, clonedFrame.type);\n        assertNotNull(clonedFrame.opaque);\n        assertEquals(70, clonedFrame.timestamp);\n    }\n}",
        "public Frame clone() {\n    Frame newFrame = new Frame();\n    \n    // Video part\n    newFrame.imageWidth = imageWidth;\n    newFrame.imageHeight = imageHeight;\n    newFrame.imageDepth = imageDepth;\n    newFrame.imageChannels = imageChannels;\n    newFrame.imageStride = imageStride;\n    newFrame.keyFrame = keyFrame;\n    newFrame.pictType = pictType;\n    newFrame.streamIndex = streamIndex;\n    newFrame.type = type;\n    newFrame.opaque = new Pointer[3];\n    \n    // Audio part\n    newFrame.audioChannels = audioChannels;\n    newFrame.sampleRate = sampleRate;\n    \n    // Other data streams\n    if (data != null) {\n        ByteBuffer[] dst = new ByteBuffer[1];\n        ((Pointer[])newFrame.opaque)[2] = cloneBufferArray(new ByteBuffer[]{data}, dst);\n        newFrame.data = dst[0];\n    }\n    \n    // Add timestamp\n    newFrame.timestamp = timestamp;\n    \n    return newFrame;\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        // Create a new Frame object with some sample data\n        Frame frame = new Frame(1920, 1080, Frame.DEPTH_BYTE, 3);\n        frame.imageWidth = 1920;\n        frame.imageHeight = 1080;\n        frame.imageDepth = Frame.DEPTH_BYTE;\n        frame.imageChannels = 3;\n        frame.keyFrame = true;\n        frame.pictType = 'I';\n        frame.streamIndex = 0;\n        frame.type = Type.VIDEO;\n        \n        // Create a copy of the original Frame object using the clone() method\n        Frame clonedFrame = frame.clone();\n        \n        // Check that the cloned Frame object has the same properties as the original one\n        assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n        assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n        assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n        assertEquals(frame.imageChannels, clonedFrame.imageChannels);\n        assertEquals(frame.keyFrame, clonedFrame.keyFrame);\n        assertEquals(frame.pictType, clonedFrame.pictType);\n        assertEquals(frame.streamIndex, clonedFrame.streamIndex);\n        assertEquals(frame.type, clonedFrame.type);\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        // Create a new Frame object to be cloned\n        Frame frame = new Frame();\n        \n        // Set some properties on the original Frame\n        frame.imageWidth = 10;\n        frame.imageHeight = 20;\n        frame.imageDepth = 30;\n        frame.imageChannels = 40;\n        frame.imageStride = 50;\n        \n        // Clone the original Frame and check that the properties are copied correctly\n        Frame clonedFrame = frame.clone();\n        assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n        assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n        assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n        assertEquals(frame.imageChannels, clonedFrame.imageChannels);\n        assertEquals(frame.imageStride, clonedFrame.imageStride);\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        // Create an instance of the Frame class with some valid parameters\n        int width = 10;\n        int height = 20;\n        int depth = 30;\n        int channels = 40;\n        Frame frame = new Frame(width, height, depth, channels);\n        \n        // Call the clone() method on this instance to create a new frame that is a copy of the original one\n        Frame clonedFrame = frame.clone();\n        \n        // Verify that the returned frame has the same properties as the original frame\n        assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n        assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n        assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n        assertEquals(frame.imageChannels, clonedFrame.imageChannels);\n        \n        // Optionally, you can also verify that the opaque property is set correctly in both frames\n        assertArrayEquals((int[]) frame.opaque, (int[]) clonedFrame.opaque);\n    }\n}",
        "\npackage org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        Frame frame = new Frame(1920, 1080, Frame.DEPTH_BYTE, 3);\n        assertEquals(frame.imageWidth, 1920);\n        assertEquals(frame.imageHeight, 1080);\n        assertEquals(frame.imageDepth, Frame.DEPTH_BYTE);\n        assertEquals(frame.imageChannels, 3);\n        assertNotNull(frame.image);\n        assertEquals(frame.imageStride, 0);\n        assertFalse(frame.keyFrame);\n        assertEquals(frame.pictType, '?');\n        assertEquals(frame.streamIndex, -1);\n        assertTrue(frame.type == Frame.Type.VIDEO);\n        assertNull(frame.opaque);\n        assertEquals(frame.timestamp, 0L);\n\n        Frame clonedFrame = frame.clone();\n        assertNotSame(clonedFrame, frame);\n        assertEquals(clonedFrame.imageWidth, 1920);\n        assertEquals(clonedFrame.imageHeight, 1080);\n        assertEquals(clonedFrame.imageDepth, Frame.DEPTH_BYTE);\n        assertEquals(clonedFrame.imageChannels, 3);\n        assertNotNull(clonedFrame.image);\n        assertEquals(clonedFrame.imageStride, 0);\n        assertFalse(clonedFrame.keyFrame);\n        assertEquals(clonedFrame.pictType, '?');\n        assertEquals(clonedFrame.streamIndex, -1);\n        assertTrue(clonedFrame.type == Frame.Type.VIDEO);\n        assertNull(clonedFrame.opaque);\n        assertEquals(clonedFrame.timestamp, 0L);\n    }\n}\n"
    ]
}