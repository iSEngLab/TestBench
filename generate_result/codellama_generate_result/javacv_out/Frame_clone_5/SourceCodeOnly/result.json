{
    "project_name": "javacv",
    "file_name": "Frame.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/Frame.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**Care must be taken if this method is to be used in conjunction with movie recordings.\n     *  Cloning a frame containing a full HD picture (alpha channel included) would take 1920 x 1080 * 4 = 8.294.400 Bytes.\n     *  Expect a heap overflow exception when using this method without cleaning up.\n     *\n     * @return A deep copy of this frame.\n     * @see {@link #cloneBufferArray}\n     *\n     * @author Extension proposed by Dragos Dutu\n     * */",
    "source_code": "\n@Override\npublic Frame clone() {\n    Frame newFrame = new Frame();\n\n    // Video part\n    newFrame.imageWidth = imageWidth;\n    newFrame.imageHeight = imageHeight;\n    newFrame.imageDepth = imageDepth;\n    newFrame.imageChannels = imageChannels;\n    newFrame.imageStride = imageStride;\n    newFrame.keyFrame = keyFrame;\n    newFrame.pictType = pictType;\n    newFrame.streamIndex = streamIndex;\n    newFrame.type = type;\n    newFrame.opaque = new Pointer[3];\n    if (image != null) {\n        newFrame.image = new Buffer[image.length];\n        ((Pointer[])newFrame.opaque)[0] = cloneBufferArray(image, newFrame.image);\n    }\n\n    // Audio part\n    newFrame.audioChannels = audioChannels;\n    newFrame.sampleRate = sampleRate;\n    if (samples != null) {\n        newFrame.samples = new Buffer[samples.length];\n        ((Pointer[])newFrame.opaque)[1] = cloneBufferArray(samples, newFrame.samples);\n    }\n\n    // Other data streams\n    if (data != null) {\n        ByteBuffer[] dst = new ByteBuffer[1];\n        ((Pointer[])newFrame.opaque)[2] = cloneBufferArray(new ByteBuffer[]{data}, dst);\n        newFrame.data = dst[0];\n    }\n\n    // Add timestamp\n    newFrame.timestamp = timestamp;\n\n    return newFrame;\n}\n",
    "class_name": "Frame",
    "method_name": "clone",
    "arguments": [],
    "generate_test": [
        "package org.bytedeco.javacv;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        // Create a new instance of the Frame class\n        Frame frame = new Frame();\n\n        // Set some values for the video and audio parts of the frame\n        frame.imageWidth = 640;\n        frame.imageHeight = 480;\n        frame.imageDepth = 24;\n        frame.imageChannels = 3;\n        frame.imageStride = 960;\n        frame.keyFrame = true;\n        frame.pictType = PictType.P_FRAME;\n        frame.streamIndex = 0;\n        frame.type = FrameType.VIDEO;\n        frame.opaque = new Pointer[3];\n        frame.image = new Buffer[] {\n            // Create a buffer with some data for the image part of the frame\n            new Buffer(new byte[] { 1, 2, 3, 4, 5, 6 })\n        };\n\n        // Set values for the audio part of the frame\n        frame.audioChannels = 2;\n        frame.sampleRate = 48000;\n        frame.samples = new Buffer[] {\n            // Create a buffer with some data for the samples part of the frame\n            new Buffer(new byte[] { 1, 2, 3, 4, 5, 6 })\n        };\n\n        // Set values for the other data streams part of the frame\n        frame.data = new ByteBuffer[1];\n        ((Pointer[])frame.opaque)[2] = cloneBufferArray(new ByteBuffer[] { data }, frame.data);\n\n        // Add a timestamp to the frame\n        frame.timestamp = 42;\n\n        // Clone the frame and check that it has the same values as the original frame\n        Frame clonedFrame = frame.clone();\n        assertEquals(clonedFrame.imageWidth, frame.imageWidth);\n        assertEquals(clonedFrame.imageHeight, frame.imageHeight);\n        assertEquals(clonedFrame.imageDepth, frame.imageDepth);\n        assertEquals(clonedFrame.imageChannels, frame.imageChannels);\n        assertEquals(clonedFrame.imageStride, frame.imageStride);\n        assertEquals(clonedFrame.keyFrame, frame.keyFrame);\n        assertEquals(clonedFrame.pictType, frame.pictType);\n        assertEquals(clonedFrame.streamIndex, frame.streamIndex);\n        assertEquals(clonedFrame.type, frame.type);\n        assertArrayEquals((ByteBuffer[]) clonedFrame.opaque[0], (ByteBuffer[]) frame.opaque[0]);\n        assertArrayEquals((ByteBuffer[]) clonedFrame.opaque[1], (ByteBuffer[]) frame.opaque[1]);\n        assertArrayEquals((ByteBuffer[]) clonedFrame.opaque[2], (ByteBuffer[]) frame.opaque[2]);\n        assertArrayEquals(clonedFrame.data, frame.data);\n        assertEquals(clonedFrame.timestamp, frame.timestamp);\n    }\n}",
        "\npackage org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        Frame frame1 = new Frame();\n        frame1.imageWidth = 640;\n        frame1.imageHeight = 480;\n        frame1.imageDepth = 24;\n        frame1.imageChannels = 3;\n        frame1.imageStride = 1920;\n        frame1.keyFrame = true;\n        frame1.pictType = \"I\";\n        frame1.streamIndex = 1;\n        frame1.type = \"video\";\n        frame1.opaque = new Pointer[3];\n        frame1.image = new Buffer[640 * 480 * 24 / 8]; // create a buffer for the image data\n        ((Pointer[])frame1.opaque)[0] = cloneBufferArray(frame1.image, new Frame().image);\n        \n        Frame frame2 = (Frame) frame1.clone();\n        assertEquals(frame1.imageWidth, frame2.imageWidth);\n        assertEquals(frame1.imageHeight, frame2.imageHeight);\n        assertEquals(frame1.imageDepth, frame2.imageDepth);\n        assertEquals(frame1.imageChannels, frame2.imageChannels);\n        assertEquals(frame1.imageStride, frame2.imageStride);\n        assertTrue(Arrays.equals((ByteBuffer[])frame1.opaque[0], (ByteBuffer[])frame2.opaque[0]));\n    }\n}\n",
        "\nI'm not sure what you're asking. Could you please provide more context or clarify your question? I'll do my best to assist you.",
        "\n@Test\npublic void cloneTest() {\n    // Arrange\n    Frame originalFrame = new Frame();\n    originalFrame.imageWidth = 10;\n    originalFrame.imageHeight = 10;\n    originalFrame.imageDepth = 10;\n    originalFrame.imageChannels = 10;\n    originalFrame.imageStride = 10;\n    originalFrame.keyFrame = true;\n    originalFrame.pictType = Frame.PictType.I_FRAME;\n    originalFrame.streamIndex = 10;\n    originalFrame.type = \"Test\";\n    originalFrame.opaque = new Pointer[3];\n    ((Pointer[])originalFrame.opaque)[0] = cloneBufferArray(new Buffer[2], new Buffer[2]);\n    ((Pointer[])originalFrame.opaque)[1] = cloneBufferArray(new Buffer[2], new Buffer[2]);\n    ((Pointer[])originalFrame.opaque)[2] = cloneBufferArray(new ByteBuffer[]{ByteBuffer.wrap(\"Test\".getBytes())}, new ByteBuffer[1]);\n\n    // Act\n    Frame clonedFrame = originalFrame.clone();\n\n    // Assert\n    assertEquals(clonedFrame.imageWidth, 10);\n    assertEquals(clonedFrame.imageHeight, 10);\n    assertEquals(clonedFrame.imageDepth, 10);\n    assertEquals(clonedFrame.imageChannels, 10);\n    assertEquals(clonedFrame.imageStride, 10);\n    assertTrue(clonedFrame.keyFrame);\n    assertEquals(clonedFrame.pictType, Frame.PictType.I_FRAME);\n    assertEquals(clonedFrame.streamIndex, 10);\n    assertEquals(clonedFrame.type, \"Test\");\n    assertArrayEquals(((Pointer[])originalFrame.opaque)[0], ((Pointer[])clonedFrame.opaque)[0]);\n    assertArrayEquals(((Pointer[])originalFrame.opaque)[1], ((Pointer[])clonedFrame.opaque)[1]);\n    assertArrayEquals(((ByteBuffer[])((Pointer[])originalFrame.opaque)[2]), ((ByteBuffer[])((Pointer[])clonedFrame.opaque)[2]));\n}",
        "\npackage org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        Frame frame = new Frame();\n        frame.imageWidth = 10;\n        frame.imageHeight = 10;\n        frame.imageDepth = 8;\n        frame.imageChannels = 3;\n        frame.imageStride = 24;\n        frame.keyFrame = true;\n        frame.pictType = \"B\";\n        frame.streamIndex = 10;\n        frame.type = \"I\";\n        frame.opaque = new Pointer[3];\n        if (frame.image != null) {\n            frame.image = new Buffer[10];\n            ((Pointer[])frame.opaque)[0] = cloneBufferArray(new Buffer[]{}, frame.image);\n        }\n\n        // Audio part\n        frame.audioChannels = 2;\n        frame.sampleRate = 48000;\n        if (frame.samples != null) {\n            frame.samples = new Buffer[10];\n            ((Pointer[])frame.opaque)[1] = cloneBufferArray(new Buffer[]{}, frame.samples);\n        }\n\n        // Other data streams\n        if (frame.data != null) {\n            ByteBuffer[] dst = new ByteBuffer[1];\n            ((Pointer[])frame.opaque)[2] = cloneBufferArray(new ByteBuffer[]{}, dst);\n            frame.data = dst[0];\n        }\n\n        // Add timestamp\n        frame.timestamp = 12345;\n\n        Frame newFrame = frame.clone();\n        assertEquals(frame.imageWidth, newFrame.imageWidth);\n        assertEquals(frame.imageHeight, newFrame.imageHeight);\n        assertEquals(frame.imageDepth, newFrame.imageDepth);\n        assertEquals(frame.imageChannels, newFrame.imageChannels);\n        assertEquals(frame.imageStride, newFrame.imageStride);\n        assertEquals(frame.keyFrame, newFrame.keyFrame);\n        assertEquals(frame.pictType, newFrame.pictType);\n        assertEquals(frame.streamIndex, newFrame.streamIndex);\n        assertEquals(frame.type, newFrame.type);\n        for (int i = 0; i < frame.opaque.length; i++) {\n            assertNotNull(((Pointer[])newFrame.opaque)[i]);\n            assertArrayEquals(((ByteBuffer[])((Pointer[])frame.opaque)[i]).array(), ((ByteBuffer[])((Pointer[])newFrame.opaque)[i]).array());\n        }\n        assertEquals(frame.audioChannels, newFrame.audioChannels);\n        assertEquals(frame.sampleRate, newFrame.sampleRate);\n        for (int i = 0; i < frame.samples.length; i++) {\n            assertNotNull(((Pointer[])newFrame.opaque)[i]);\n            assertArrayEquals(((ByteBuffer[])((Pointer[])frame.samples)[i]).array(), ((ByteBuffer[])((Pointer[])newFrame.samples)[i]).array());\n        }\n        if (frame.data != null) {\n            assertNotNull(((Pointer[])newFrame.opaque)[2]);\n            assertArrayEquals(((ByteBuffer[])((Pointer[])frame.data).array(), ((ByteBuffer[])((Pointer[])newFrame.data).array()));\n        }\n    }\n}",
        "\npackage org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        // Create a new instance of the Frame class\n        Frame frame = new Frame();\n\n        // Set some properties on the frame object\n        frame.setImageWidth(100);\n        frame.setImageHeight(100);\n        frame.setImageDepth(3);\n        frame.setImageChannels(4);\n        frame.setImageStride(100 * 4);\n        frame.setKeyFrame(true);\n        frame.setPictType(\"I\");\n        frame.setStreamIndex(0);\n        frame.setType(\"video\");\n\n        // Set the image data on the frame object\n        byte[] imageData = new byte[100 * 100 * 3];\n        frame.setImage(imageData, 100, 100, 3);\n\n        // Clone the frame object\n        Frame clonedFrame = frame.clone();\n\n        // Check that the properties are equal on both objects\n        assertEquals(frame.getImageWidth(), clonedFrame.getImageWidth());\n        assertEquals(frame.getImageHeight(), clonedFrame.getImageHeight());\n        assertEquals(frame.getImageDepth(), clonedFrame.getImageDepth());\n        assertEquals(frame.getImageChannels(), clonedFrame.getImageChannels());\n        assertEquals(frame.getImageStride(), clonedFrame.getImageStride());\n        assertEquals(frame.isKeyFrame(), clonedFrame.isKeyFrame());\n        assertEquals(frame.getPictType(), clonedFrame.getPictType());\n        assertEquals(frame.getStreamIndex(), clonedFrame.getStreamIndex());\n        assertEquals(frame.getType(), clonedFrame.getType());\n\n        // Check that the image data is equal on both objects\n        byte[] clonedImageData = new byte[100 * 100 * 3];\n        frame.getImage(clonedImageData, 100, 100, 3);\n        assertArrayEquals(imageData, clonedImageData);\n    }\n}",
        "\npackage org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        // Arrange\n        Frame frame = new Frame();\n        frame.imageWidth = 10;\n        frame.imageHeight = 20;\n        frame.imageDepth = 30;\n        frame.imageChannels = 40;\n        frame.imageStride = 50;\n        frame.keyFrame = true;\n        frame.pictType = \"P\";\n        frame.streamIndex = 1;\n        frame.type = \"frame\";\n        frame.opaque = new Pointer[3];\n        if (frame.image != null) {\n            frame.image = new Buffer[10];\n            ((Pointer[])frame.opaque)[0] = cloneBufferArray(frame.image, new Buffer[10]);\n        }\n\n        // Act\n        Frame clonedFrame = frame.clone();\n\n        // Assert\n        assertEquals(clonedFrame.imageWidth, 10);\n        assertEquals(clonedFrame.imageHeight, 20);\n        assertEquals(clonedFrame.imageDepth, 30);\n        assertEquals(clonedFrame.imageChannels, 40);\n        assertEquals(clonedFrame.imageStride, 50);\n        assertTrue(clonedFrame.keyFrame);\n        assertEquals(clonedFrame.pictType, \"P\");\n        assertEquals(clonedFrame.streamIndex, 1);\n        assertEquals(clonedFrame.type, \"frame\");\n        if (clonedFrame.opaque != null) {\n            assertEquals(((Pointer[])clonedFrame.opaque)[0], cloneBufferArray(frame.image, new Buffer[10]));\n        }\n    }\n}",
        "\npackage org.bytedeco.javacv;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        // Create a new frame object\n        Frame originalFrame = new Frame();\n\n        // Set some values for the video part\n        originalFrame.imageWidth = 1920;\n        originalFrame.imageHeight = 1080;\n        originalFrame.imageDepth = 3;\n        originalFrame.imageChannels = 4;\n        originalFrame.imageStride = 16 * 4;\n        originalFrame.keyFrame = true;\n        originalFrame.pictType = \"I\";\n        originalFrame.streamIndex = 0;\n        originalFrame.type = FrameType.KEYFRAME;\n\n        // Set some values for the audio part\n        originalFrame.audioChannels = 2;\n        originalFrame.sampleRate = 48000;\n        originalFrame.samples = new Buffer[] {new ByteBuffer(16 * 4)};\n\n        // Set some values for other data streams\n        originalFrame.data = new ByteBuffer(16);\n\n        // Set the timestamp\n        originalFrame.timestamp = System.currentTimeMillis();\n\n        // Clone the frame object\n        Frame clonedFrame = originalFrame.clone();\n\n        // Verify that the clone is a deep copy of the original object\n        assertNotSame(originalFrame, clonedFrame);\n        assertEquals(originalFrame.imageWidth, clonedFrame.imageWidth);\n        assertEquals(originalFrame.imageHeight, clonedFrame.imageHeight);\n        assertEquals(originalFrame.imageDepth, clonedFrame.imageDepth);\n        assertEquals(originalFrame.imageChannels, clonedFrame.imageChannels);\n        assertEquals(originalFrame.imageStride, clonedFrame.imageStride);\n        assertEquals(originalFrame.keyFrame, clonedFrame.keyFrame);\n        assertEquals(originalFrame.pictType, clonedFrame.pictType);\n        assertEquals(originalFrame.streamIndex, clonedFrame.streamIndex);\n        assertEquals(originalFrame.type, clonedFrame.type);\n        assertEquals(originalFrame.audioChannels, clonedFrame.audioChannels);\n        assertEquals(originalFrame.sampleRate, clonedFrame.sampleRate);\n        for (int i = 0; i < originalFrame.samples.length; i++) {\n            assertNotSame(originalFrame.samples[i], clonedFrame.samples[i]);\n            assertArrayEquals(originalFrame.samples[i].array(), clonedFrame.samples[i].array());\n        }\n        for (int i = 0; i < originalFrame.data.length; i++) {\n            assertNotSame(originalFrame.data[i], clonedFrame.data[i]);\n            assertArrayEquals(originalFrame.data[i].array(), clonedFrame.data[i].array());\n        }\n        assertEquals(originalFrame.timestamp, clonedFrame.timestamp);\n    }\n}\n",
        "\npackage org.bytedeco.javacv;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        // Create a new frame and set its properties\n        Frame originalFrame = new Frame();\n        originalFrame.imageWidth = 10;\n        originalFrame.imageHeight = 20;\n        originalFrame.imageDepth = 30;\n        originalFrame.imageChannels = 40;\n        originalFrame.imageStride = 50;\n        originalFrame.keyFrame = true;\n        originalFrame.pictType = 'A';\n        originalFrame.streamIndex = 60;\n        originalFrame.type = 'B';\n        originalFrame.opaque = new Pointer[3];\n        if (originalFrame.image != null) {\n            originalFrame.image = new Buffer[1];\n            ((Pointer[])originalFrame.opaque)[0] = cloneBufferArray(originalFrame.image, originalFrame.image);\n        }\n        \n        // Create a copy of the frame using the clone() method\n        Frame clonedFrame = originalFrame.clone();\n        \n        // Check that the properties are equal to the original values\n        assertEquals(clonedFrame.imageWidth, originalFrame.imageWidth);\n        assertEquals(clonedFrame.imageHeight, originalFrame.imageHeight);\n        assertEquals(clonedFrame.imageDepth, originalFrame.imageDepth);\n        assertEquals(clonedFrame.imageChannels, originalFrame.imageChannels);\n        assertEquals(clonedFrame.imageStride, originalFrame.imageStride);\n        assertEquals(clonedFrame.keyFrame, originalFrame.keyFrame);\n        assertEquals(clonedFrame.pictType, originalFrame.pictType);\n        assertEquals(clonedFrame.streamIndex, originalFrame.streamIndex);\n        assertEquals(clonedFrame.type, originalFrame.type);\n        \n        // Check that the opaque pointer is not null and points to the same array as in the original frame\n        assertNotNull(clonedFrame.opaque[0]);\n        assertSame(((Pointer[])originalFrame.opaque)[0], ((Pointer[])clonedFrame.opaque)[0]);\n        \n        // Check that the image is not null and points to the same array as in the original frame\n        assertNotNull(clonedFrame.image);\n        assertSame(originalFrame.image, clonedFrame.image);\n    }\n}",
        "\npackage org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        // Create a new frame to be cloned\n        Frame originalFrame = new Frame();\n        \n        // Set some properties of the original frame\n        originalFrame.imageWidth = 10;\n        originalFrame.imageHeight = 20;\n        originalFrame.imageDepth = 30;\n        originalFrame.imageChannels = 40;\n        originalFrame.imageStride = 50;\n        \n        // Clone the frame and check that all properties are copied correctly\n        Frame clonedFrame = (Frame) originalFrame.clone();\n        assertEquals(clonedFrame.imageWidth, originalFrame.imageWidth);\n        assertEquals(clonedFrame.imageHeight, originalFrame.imageHeight);\n        assertEquals(clonedFrame.imageDepth, originalFrame.imageDepth);\n        assertEquals(clonedFrame.imageChannels, originalFrame.imageChannels);\n        assertEquals(clonedFrame.imageStride, originalFrame.imageStride);\n        \n        // Check that the image buffer is also copied correctly\n        assertNotNull(originalFrame.image);\n        assertEquals(originalFrame.image[0], clonedFrame.image[0]);\n    }\n}"
    ]
}