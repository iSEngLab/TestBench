{
    "project_name": "javacv",
    "file_name": "IPCameraFrameGrabber.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/IPCameraFrameGrabber.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**\n     * Returns the value of the {@code long} argument;\n     * throwing an exception if the value overflows an {@code int}.\n     *\n     * @param value the long value\n     * @return the argument as an int\n     * @throws ArithmeticException if the {@code argument} overflows an int\n     * @see <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toIntExact-long-\">Java 8 Implementation</a>\n     */",
    "source_code": "\nprivate static int toIntExact(long value) {\n    if ((int) value != value) {\n        throw new ArithmeticException(\"integer overflow\");\n    }\n    return (int) value;\n}\n",
    "class_name": "IPCameraFrameGrabber",
    "method_name": "toIntExact",
    "arguments": [
        "long value"
    ],
    "generate_test": [
        "\npackage org.bytedeco.javacv;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n    @Test\n    public void toIntExactTest() {\n        long value = 123456L;\n        int expected = 123456;\n        assertEquals(expected, IPCameraFrameGrabber.toIntExact(value));\n        \n        value = Long.MAX_VALUE;\n        expected = Integer.MAX_VALUE;\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value));\n    }\n}\n",
        "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n    @Test\n    public void toIntExactTest() {\n        assertEquals(10, IPCameraFrameGrabber.toIntExact(10L));\n        assertEquals(-10, IPCameraFrameGrabber.toIntExact((long) -10));\n        assertThrows(ArithmeticException.class, () -> {\n            IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE);\n        });\n    }\n}",
        "\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n    @Test\n    public void toIntExactTest() {\n        assertEquals(12345678, IPCameraFrameGrabber.toIntExact(12345678L)); // no truncation\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE)); // overflow\n    }\n}\n",
        "\npublic class IPCameraFrameGrabberTest {\n    @Test\n    public void toIntExactTest() {\n        long value = 2147483647L; // maximum positive integer in Java\n        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact(value));\n        \n        long negativeValue = -2147483648L; // minimum negative integer in Java\n        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact(negativeValue));\n        \n        long outOfRangePositiveValue = 2147483648L; // value too large to fit in an int\n        assertThrows(ArithmeticException.class, () -> {\n            IPCameraFrameGrabber.toIntExact(outOfRangePositiveValue);\n        });\n        \n        long outOfRangeNegativeValue = -2147483649L; // value too small to fit in an int\n        assertThrows(ArithmeticException.class, () -> {\n            IPCameraFrameGrabber.toIntExact(outOfRangeNegativeValue);\n        });\n    }\n}",
        "\n@Test\npublic void toIntExactTest() {\n    long value = 10L;\n    assertEquals(10, IPCameraFrameGrabber.toIntExact(value));\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n    @Test\n    public void toIntExactTest() {\n        assertEquals(10, IPCameraFrameGrabber.toIntExact(10L));\n        assertThrows(ArithmeticException.class, () -> {\n            IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE);\n        });\n    }\n}",
        "\npublic class IPCameraFrameGrabberTest {\n    @Test\n    public void toIntExactTest() {\n        long value = 10L;\n        assertEquals(10, IPCameraFrameGrabber.toIntExact(value));\n        \n        value = -10L;\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value));\n    }\n}",
        "@Test\npublic void toIntExactTest() {\n    long value = 10;\n    int expected = 10;\n    \n    assertEquals(expected, IPCameraFrameGrabber.toIntExact(value));\n}",
        "\n@Test\npublic void toIntExactTest() {\n    long value = 10L;\n    assertEquals(toIntExact(value), 10);\n}\n\nThis test case verifies that the `toIntExact` method correctly converts a `long` value to an `int` value. It does this by creating a `long` variable called `value` and assigning it a value of 10. Then, it calls the `toIntExact` method with this value as an argument, and compares its return value to the expected result of 10 using the `assertEquals` method from JUnit.",
        "package org.bytedeco.javacv;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n    @Test\n    public void toIntExactTest() {\n        assertEquals(123, IPCameraFrameGrabber.toIntExact((long) 123));\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE));\n    }\n}"
    ]
}