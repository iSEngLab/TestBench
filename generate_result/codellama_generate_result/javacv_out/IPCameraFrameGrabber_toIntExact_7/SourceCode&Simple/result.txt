Source code: 


private static int toIntExact(long value) {
    if ((int) value != value) {
        throw new ArithmeticException("integer overflow");
    }
    return (int) value;
}



No.1 generated result --------------------------


package org.bytedeco.javacv;

import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    @Test
    public void toIntExactTest() {
        long value = 123456L;
        int expected = 123456;
        assertEquals(expected, IPCameraFrameGrabber.toIntExact(value));
        
        value = Long.MAX_VALUE;
        expected = Integer.MAX_VALUE;
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value));
    }
}



No.2 generated result --------------------------

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    @Test
    public void toIntExactTest() {
        assertEquals(10, IPCameraFrameGrabber.toIntExact(10L));
        assertEquals(-10, IPCameraFrameGrabber.toIntExact((long) -10));
        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE);
        });
    }
}


No.3 generated result --------------------------


import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    @Test
    public void toIntExactTest() {
        assertEquals(12345678, IPCameraFrameGrabber.toIntExact(12345678L)); // no truncation
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE)); // overflow
    }
}



No.4 generated result --------------------------


public class IPCameraFrameGrabberTest {
    @Test
    public void toIntExactTest() {
        long value = 2147483647L; // maximum positive integer in Java
        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact(value));
        
        long negativeValue = -2147483648L; // minimum negative integer in Java
        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact(negativeValue));
        
        long outOfRangePositiveValue = 2147483648L; // value too large to fit in an int
        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact(outOfRangePositiveValue);
        });
        
        long outOfRangeNegativeValue = -2147483649L; // value too small to fit in an int
        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact(outOfRangeNegativeValue);
        });
    }
}


No.5 generated result --------------------------


@Test
public void toIntExactTest() {
    long value = 10L;
    assertEquals(10, IPCameraFrameGrabber.toIntExact(value));
}


No.6 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    @Test
    public void toIntExactTest() {
        assertEquals(10, IPCameraFrameGrabber.toIntExact(10L));
        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE);
        });
    }
}


No.7 generated result --------------------------


public class IPCameraFrameGrabberTest {
    @Test
    public void toIntExactTest() {
        long value = 10L;
        assertEquals(10, IPCameraFrameGrabber.toIntExact(value));
        
        value = -10L;
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value));
    }
}


No.8 generated result --------------------------

@Test
public void toIntExactTest() {
    long value = 10;
    int expected = 10;
    
    assertEquals(expected, IPCameraFrameGrabber.toIntExact(value));
}


No.9 generated result --------------------------


@Test
public void toIntExactTest() {
    long value = 10L;
    assertEquals(toIntExact(value), 10);
}

This test case verifies that the `toIntExact` method correctly converts a `long` value to an `int` value. It does this by creating a `long` variable called `value` and assigning it a value of 10. Then, it calls the `toIntExact` method with this value as an argument, and compares its return value to the expected result of 10 using the `assertEquals` method from JUnit.


No.10 generated result --------------------------

package org.bytedeco.javacv;

import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    @Test
    public void toIntExactTest() {
        assertEquals(123, IPCameraFrameGrabber.toIntExact((long) 123));
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE));
    }
}


