{
    "project_name": "javacv",
    "file_name": "IPCameraFrameGrabber.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/IPCameraFrameGrabber.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**\n     * Returns the value of the {@code long} argument;\n     * throwing an exception if the value overflows an {@code int}.\n     *\n     * @param value the long value\n     * @return the argument as an int\n     * @throws ArithmeticException if the {@code argument} overflows an int\n     * @see <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toIntExact-long-\">Java 8 Implementation</a>\n     */",
    "source_code": "\nprivate static int toIntExact(long value) {\n    if ((int) value != value) {\n        throw new ArithmeticException(\"integer overflow\");\n    }\n    return (int) value;\n}\n",
    "class_name": "IPCameraFrameGrabber",
    "method_name": "toIntExact",
    "arguments": [
        "long value"
    ],
    "generate_test": [
        "\npackage org.bytedeco.javacv;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.*;\n\npublic class IPCameraFrameGrabberTest {\n    @Test\n    public void toIntExactTest() {\n        long value = 10;\n        assertEquals(toIntExact(value), 10);\n        \n        value = Long.MAX_VALUE;\n        assertThrows(ArithmeticException.class, () -> toIntExact(value));\n    }\n}",
        "\npublic class IPCameraFrameGrabberTest {\n    @Test\n    public void toIntExactTest() {\n        long value = 10L;\n        assertEquals(10, toIntExact(value));\n        \n        value = Long.MAX_VALUE;\n        assertThrows(ArithmeticException.class, () -> toIntExact(value));\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n    @Test\n    public void toIntExactTest() {\n        long value = 1234567890L; // a large positive number that will not fit in an int\n        assertThrows(ArithmeticException.class, () -> toIntExact(value)); // throws ArithmeticException because the result is too large for an int\n    }\n}",
        "\npackage org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n    @Test\n    public void toIntExactTest() {\n        long value = 0L;\n        int result = IPCameraFrameGrabber.toIntExact(value);\n        assertEquals(0, result);\n        \n        value = Integer.MAX_VALUE + 1L;\n        result = IPCameraFrameGrabber.toIntExact(value);\n        assertThrows(ArithmeticException.class, () -> {\n            throw new ArithmeticException(\"integer overflow\");\n        });\n    }\n}",
        "\npackage org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n    @Test\n    public void toIntExactTest() {\n        long value = 1234567890L;\n        int expectedResult = 1234567890;\n\n        assertEquals(expectedResult, IPCameraFrameGrabber.toIntExact(value));\n    }\n}",
        "@Test\npublic void toIntExactTest() {\n    assertEquals(toIntExact(1L), 1);\n    assertEquals(toIntExact(Integer.MAX_VALUE), Integer.MAX_VALUE);\n    assertThrows(ArithmeticException.class, () -> toIntExact(Long.MIN_VALUE));\n}",
        "\n@Test\npublic void toIntExactTest() {\n    // Test case 1: input value is within the range of int\n    long value = 10;\n    assertEquals(10, IPCameraFrameGrabber.toIntExact(value));\n    \n    // Test case 2: input value exceeds the maximum value that can be represented by int\n    value = Integer.MAX_VALUE + 1L;\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value));\n    \n    // Test case 3: input value is negative\n    value = -10L;\n    assertEquals(-10, IPCameraFrameGrabber.toIntExact(value));\n}\n",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n    @Test\n    public void toIntExactTest() {\n        long value = 100_000_000L; // this value is greater than the maximum value of an int\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value));\n    }\n}\n",
        "\n@Test\npublic void toIntExactTest() {\n    assertEquals(123, IPCameraFrameGrabber.toIntExact((long) 123));\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE + 1L));\n}",
        "@Test\npublic void toIntExactTest() {\n    long value = 2147483647L; // the maximum value that can be stored in an integer\n    int expectedValue = 2147483647;\n    assertEquals(expectedValue, IPCameraFrameGrabber.toIntExact(value));\n}"
    ]
}