Source code: 


private static int toIntExact(long value) {
    if ((int) value != value) {
        throw new ArithmeticException("integer overflow");
    }
    return (int) value;
}



No.1 generated result --------------------------


package org.bytedeco.javacv;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

public class IPCameraFrameGrabberTest {
    @Test
    public void toIntExactTest() {
        long value = 10;
        assertEquals(toIntExact(value), 10);
        
        value = Long.MAX_VALUE;
        assertThrows(ArithmeticException.class, () -> toIntExact(value));
    }
}


No.2 generated result --------------------------


public class IPCameraFrameGrabberTest {
    @Test
    public void toIntExactTest() {
        long value = 10L;
        assertEquals(10, toIntExact(value));
        
        value = Long.MAX_VALUE;
        assertThrows(ArithmeticException.class, () -> toIntExact(value));
    }
}


No.3 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    @Test
    public void toIntExactTest() {
        long value = 1234567890L; // a large positive number that will not fit in an int
        assertThrows(ArithmeticException.class, () -> toIntExact(value)); // throws ArithmeticException because the result is too large for an int
    }
}


No.4 generated result --------------------------


package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    @Test
    public void toIntExactTest() {
        long value = 0L;
        int result = IPCameraFrameGrabber.toIntExact(value);
        assertEquals(0, result);
        
        value = Integer.MAX_VALUE + 1L;
        result = IPCameraFrameGrabber.toIntExact(value);
        assertThrows(ArithmeticException.class, () -> {
            throw new ArithmeticException("integer overflow");
        });
    }
}


No.5 generated result --------------------------


package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    @Test
    public void toIntExactTest() {
        long value = 1234567890L;
        int expectedResult = 1234567890;

        assertEquals(expectedResult, IPCameraFrameGrabber.toIntExact(value));
    }
}


No.6 generated result --------------------------

@Test
public void toIntExactTest() {
    assertEquals(toIntExact(1L), 1);
    assertEquals(toIntExact(Integer.MAX_VALUE), Integer.MAX_VALUE);
    assertThrows(ArithmeticException.class, () -> toIntExact(Long.MIN_VALUE));
}


No.7 generated result --------------------------


@Test
public void toIntExactTest() {
    // Test case 1: input value is within the range of int
    long value = 10;
    assertEquals(10, IPCameraFrameGrabber.toIntExact(value));
    
    // Test case 2: input value exceeds the maximum value that can be represented by int
    value = Integer.MAX_VALUE + 1L;
    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value));
    
    // Test case 3: input value is negative
    value = -10L;
    assertEquals(-10, IPCameraFrameGrabber.toIntExact(value));
}



No.8 generated result --------------------------


import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    @Test
    public void toIntExactTest() {
        long value = 100_000_000L; // this value is greater than the maximum value of an int
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value));
    }
}



No.9 generated result --------------------------


@Test
public void toIntExactTest() {
    assertEquals(123, IPCameraFrameGrabber.toIntExact((long) 123));
    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE + 1L));
}


No.10 generated result --------------------------

@Test
public void toIntExactTest() {
    long value = 2147483647L; // the maximum value that can be stored in an integer
    int expectedValue = 2147483647;
    assertEquals(expectedValue, IPCameraFrameGrabber.toIntExact(value));
}


