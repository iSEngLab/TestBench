{
    "project_name": "javacv",
    "file_name": "PS3EyeFrameGrabber.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/PS3EyeFrameGrabber.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/** Grab one frame and return it as int[] (in the internal camera format RGBA).\n     *  Note: use makeImage() to create RGBA, 4-ch image\n     * @return frame as int[] without any processing or null if frame is not available \n     */",
    "source_code": "\npublic int[] grab_raw() {\n    if (camera.getCameraFrame(ps3_frame, timeout)) {\n        return ps3_frame;\n    }\n    else return null;\n}\n",
    "class_name": "PS3EyeFrameGrabber",
    "method_name": "grab_raw",
    "arguments": [],
    "generate_test": [
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PS3EyeFrameGrabberTest {\n    @Test\n    public void grab_rawTest() {\n        FrameGrabber grabber = new PS3EyeFrameGrabber(0);\n        \n        assertEquals(grabber.getImageMode(), ImageMode.COLOR, \"checking image mode\");\n        // ...\n    }\n}",
        "package org.bytedeco.javacv;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n * PS3EyeFrameGrabberTest class.\n */\n@DisplayName(\"PS3EyeFrameGrabber test\")\npublic class PS3EyeFrameGrabberTest {\n    @Nested\n    public class Grab_rawTest {\n        private PS3EyeFrameGrabber grabber;\n        \n        /**\n         * Initialization before running tests.\n         */\n        @BeforeEach\n        public void init() {\n            // <FILL>\n        }\n        \n        @AfterEach\n        public void release() {\n            if (grabber != null) grabber.release();\n        }\n        \n        /**\n         * Testing method that grabs frames and compares them to the expected values.\n         */\n        @Test\n        public void testGrab_raw() throws Exception {\n            // <FILL>\n        }\n    }\n}",
        "import org.bytedeco.javacv.*;\nimport static org.bytedeco.javacv.FrameGrabber.ImageMode.RGB;\n\npublic class PS3EyeFrameGrabberTest {\n    @Test\n    public void grab_rawTest() {\n        // Create a new PS3 Eye frame grabber instance\n        FrameGrabber grabber = new PS3EyeFrameGrabber();\n\n        // Set the image mode to RGB\n        grabber.setImageMode(RGB);\n\n        // Start the frame grabber\n        grabber.start();\n\n        // Read a frame from the camera\n        Frame frame = grabber.grab();\n\n        // Stop the frame grabber\n        grabber.stop();\n\n        // Release resources\n        grabber.release();\n    }\n}",
        "### PS3 Eye camera\n\n@Tony Liu - thank you for your comment! The PS3 Eye is not officially supported by OpenCV. However, there are some efforts to add support for it in the [OpenCV Extensions](https://docs.opencv.org/4.5.1/d0/d7c/classcv_1_1CLEyeCamera.html) library.\n\nYou can also try using the [PS3 Eye SDK](http://www.ps3eye.com/support/) or [CLEyeMulticam](https://code.google.com/archive/p/cleymulticam/). There are some tutorials on using these SDKs, such as [this one for CLEyeMulticam](https://github.com/tayebin/OpenCV-PS3Eye#using-opencv-with-ps3eye).\n\nIf you have any more questions or need help with this issue, feel free to ask!",
        "Sure, I can help you with that. Here's an example of a PS3 Eye frame grabber implementation in Java:\n\n#include <opencv2/core.hpp>\n#include <opencv2/highgui.hpp>\n#include <opencv2/imgproc.hpp>\n#include <iostream>\n\n// CLEye Multicamera header files\n#include \"CLEyeMulticam.h\"\n\nusing namespace std;\nusing namespace cv;\n\n/**\n * PS3 Eye frame grabber class.\n */\nclass PS3EyeFrameGrabber : public FrameGrabber {\npublic:\n    // Constructor\n    PS3EyeFrameGrabber(int cameraIndex);\n    \n    /** Start camera first (before grabbing).\n     * \n     * @return success/failure (true/false)\n     */\n    bool start();\n    \n    /** Stop camera. It can be re-started if needed.\n     * \n     * @return success/failure (true/false)\n     */\n    bool stop();\n    \n    /** Release resources:\n     *   - CL driver internal resources binded with camera HW\n     *   - internal IplImage\n     *  After calling this function, this mini-grabber object instance can not be used anymore.\n     */\n    void release();\n    \n    /** Returns the status of the grabber (running/stopped).\n     * \n     * @return true if grabber is running, false otherwise\n     */\n    bool isRunning() const;\n    \n    /** Grabs a frame and returns it as a OpenCV matrix.\n     *  \n     *  It will throw null pointer exception if not started before grabbing.\n     *  @return \"read-only\" RGB, 4-channel or GRAY/1-channel image, it throws exception if no image is available\n     */\n    Mat grab();\n    \nprotected:\n    // Internal variables\n    CLEyeCamera* camera;   ///< PS3 Eye camera object pointer\n    bool running;          ///< Indicates that the grabber is running\n    IplImage* ipl_frame;   ///< Frame buffer used for OpenCV operations\n    \n    // Internal methods\n    void processFrame();   ///< Processes a new frame\n};\n\n// Implementation of PS3 Eye frame grabber class\nPS3EyeFrameGrabber::PS3EyeFrameGrabber(int cameraIndex) :\ncamera(NULL), running(false), ipl_frame(NULL) {\n    // Create CLEyeCamera object using the given index and initialize it\n    camera = new CLEyeCamera;\n    if (!camera->createCamera(cameraIndex, 0, 0)) {\n        std::cerr << \"Failed to create PS3 Eye camera\" << std::endl;\n        return;\n    }\n    \n    // Initialize the camera properties\n    cameraProperties.nCameraMode = CLEYE_CAMERA_MODE_VIDEO;\n    cameraProperties.nFrameRate = 0;\n    cameraProperties.nColorMode = CLEYE_COLOR_PROCESSED;\n    cameraProperties.nResolution = CLEYE_VGA;\n    \n    // Set the frame grabber properties\n    setProperties(&cameraProperties);\n}\n\nbool PS3EyeFrameGrabber::start() {\n    if (running) return false;\n    \n    // Start grabbing frames from the camera\n    running = true;\n    processFrame();\n    return true;\n}\n\nbool PS3EyeFrameGrabber::stop() {\n    if (!running) return false;\n    \n    // Stop grabbing frames from the camera\n    running = false;\n    release();\n    return true;\n}\n\nvoid PS3EyeFrameGrabber::release() {\n    // Release all resources allocated by the grabber\n    if (ipl_frame != NULL) cvReleaseImage(&ipl_frame);\n    \n    // Delete CLEyeCamera object\n    delete camera;\n}\n\nbool PS3EyeFrameGrabber::isRunning() const {\n    return running;\n}\n\nMat PS3EyeFrameGrabber::grab() {\n    if (!running) return NULL;\n    \n    // Allocate a new frame buffer and convert it from RGB to BGR format\n    ipl_frame = cvCreateImage(CV_8UC4, 640, 480);\n    Mat frame(ipl_frame);\n    cvtColor(ipl_frame, ipl_frame, CV_RGB2BGR);\n    \n    // Get the current camera frame\n    processFrame();\n    return frame;\n}\n\nvoid PS3EyeFrameGrabber::processFrame() {\n    // Retrieve the latest frame from the camera and convert it to OpenCV format\n    if (!camera->getLatestFrame(ipl_frame)) {\n        std::cerr << \"Failed to get frame from PS3 Eye camera\" << std::endl;\n        return;\n    }\n}\n\n#endif // PS3EYE_FRAME_GRABBER_H\n    \n\n// Implementation of PS3 Eye frame grabber class\n#include \"PS3EyeFrameGrabber.h\"\n\n// Constructor\nPS3EyeFrameGrabber::PS3EyeFrameGrabber(int cameraIndex) :\ncamera(NULL), running(false), ipl_frame(NULL) {\n    // Create CLEyeCamera object using the given index and initialize it\n    camera = new CLEyeCamera;\n    if (!camera->createCamera(cameraIndex)) {\n        std::cerr << \"Failed to create PS3 Eye camera\" << std::endl;\n        return;\n    }\n    \n    // Initialize all properties of the grabber object\n    initProperties();\n}\n\n// Destructor\nPS3EyeFrameGrabber::~PS3EyeFrameGrabber() {\n    // Release all resources allocated by the grabber\n    release();\n}\n\n// Public methods\nbool PS3EyeFrameGrabber::start() {\n    if (running) return false;\n    \n    // Start grabbing frames from the camera\n    running = true;\n    processFrame();\n    return true;\n}\n\nbool PS3EyeFrameGrabber::stop() {\n    if (!running) return false;\n    \n    // Stop grabbing frames from the camera\n    running = false;\n    release();\n    return true;\n}\n\nvoid PS3EyeFrameGrabber::release() {\n    // Release all resources allocated by the grabber\n    if (ipl_frame != NULL) cvReleaseImage(&ipl_frame);\n    \n    // Delete CLEyeCamera object\n    delete camera;\n}\n\nbool PS3EyeFrameGrabber::isRunning() const {\n    return running;\n}\n\nMat PS3EyeFrameGrabber::grab() {\n    if (!running) return NULL;\n    \n    // Allocate a new frame buffer and convert it from RGB to BGR format\n    ipl_frame = cvCreateImage(CV_8UC4, 640, 480);\n    Mat frame(ipl_frame);\n    cvtColor(ipl_frame, ipl_frame, CV_RGB2BGR);\n    \n    // Get the current camera frame\n    processFrame();\n    return frame;\n}\n\nvoid PS3EyeFrameGrabber::processFrame() {\n    // Retrieve the latest frame from the camera and convert it to OpenCV format\n    if (!camera->getLatestFrame(ipl_frame)) {\n        std::cerr << \"Failed to get frame from PS3 Eye camera\" << std::endl;\n        return;\n    }\n}\n    \n#endif // PS3EYE_FRAME_GRABBER_CPP\n",
        "import org.bytedeco.javacv.*;\nimport static org.bytedeco.javacv.FrameGrabber.*;\nimport static org.bytedeco.javacpp.opencv_core.*;\nimport static org.bytedeco.javacpp.opencv_imgproc.*;\nimport static org.bytedeco.javacpp.leptonica.*;\n\npublic class PS3EyeFrameGrabberTest {\n    @Test\n    public void grab_rawTest() {\n        // Load camera driver (must be done only once)\n        if (!PS3EyeFrameGrabber.loadDriver()) {\n            System.out.println(\"Cannot load CLEye multicam driver\");\n            return;\n        }\n        \n        // Find PS3 Eye camera devices \n        String[] uuids = PS3EyeFrameGrabber.listPS3Cameras();\n        if (uuids == null || uuids.length < 1) {\n            System.out.println(\"No PS3 Eye camera detected\");\n            return;\n        }\n        \n        // Create grabber for first available camera and set timeout to 5 seconds\n        int cameraIndex = 0;\n        FrameGrabber grabber = new PS3EyeFrameGrabber(cameraIndex, CAMERA_FORMAT.RGB4);\n        grabber.setTimeout(5000);\n        \n        // Start the grabber\n        grabber.start();\n        System.out.println(\"Camera started\");\n        \n        // Grab 10 images and stop camera\n        for (int i = 0; i < 10; i++) {\n            Frame frame = grabber.grab();\n            if (frame == null) {\n                System.err.println(\"Grab timeout!\");\n                break;\n            }\n            \n            // Convert to IplImage and show with OpenCV\n            IplImage img = new IplImage(frame);\n            cvFlip(img, img, 1);\n            cvShowImage(\"PS3 Eye camera\", img);\n        }\n        \n        grabber.stop();\n    }\n}",
        "Sorry, I can't understand your request. Could you please rephrase or provide more context?\n",
        "import org.bytedeco.javacpp.*;\nimport org.bytedeco.javacpp.opencv_core.*;\nimport org.bytedeco.javacv.FrameGrabber;\nimport org.bytedeco.javacv.OpenCVFrameConverter;",
        "import org.bytedeco.javacv.*;\nimport static org.bytedeco.javacpp.opencv_core.*;\nimport static org.bytedeco.javacpp.opencv_imgproc.*;\nimport static org.bytedeco.javacpp.opencv_highgui.*;\n\npublic class PS3EyeFrameGrabberTest {\n    public static void main(String[] args) throws Exception {\n        // Grab raw images from the first PS3 Eye camera\n        FrameGrabber grabber = new PS3EyeFrameGrabber();\n        try {\n            grabber.start();\n            int width = (int) grabber.getImageWidth();\n            int height = (int) grabber.getImageHeight();\n            while (true) {\n                // Grab a frame from the camera and convert it to an IplImage object\n                IplImage frame = grabber.grab().getIplImage();\n                if (frame == null) {\n                    System.out.println(\"Error: unable to grab a frame\");\n                    return;\n                }\n                // Display the raw image\n                cvCvtColor(frame, frame, CV_RGB2BGR);\n                CvWindow window = new CvWindow(\"PS3 Eye Camera\");\n                window.showImage(frame);\n            }\n        } finally {\n            grabber.stop();\n        }\n    }\n}",
        "@Slf4j\npublic class PS3EyeFrameGrabberTest {\n    private static final int WIDTH = 1280;\n    private static final int HEIGHT = 720;\n    \n    // @BeforeEach\n    public void setup() {\n        // Set up the camera.\n        PS3EyeFrameGrabber grabber = new PS3EyeFrameGrabber();\n        try {\n            grabber.start();\n            \n            // Wait a bit for the camera to warm up.\n            Thread.sleep(500);\n            \n        } catch (Exception e) {\n            log.error(\"Could not start camera\", e);\n        }\n    }\n    \n    // @Test\n    public void grab_raw() throws Exception {\n        \n        PS3EyeFrameGrabber grabber = new PS3EyeFrameGrabber();\n        try {\n            for (int i = 0; i < 10; i++) {\n                Frame frame = grabber.grab();\n                \n                assertNotNull(frame);\n                log.info(\"{}\", frame);\n                \n                // TODO: Add some additional checks on the image data.\n            }\n        } finally {\n            grabber.release();\n        }\n    }\n}"
    ]
}