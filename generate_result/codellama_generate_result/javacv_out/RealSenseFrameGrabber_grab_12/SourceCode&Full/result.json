{
    "project_name": "javacv",
    "file_name": "RealSenseFrameGrabber.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/RealSenseFrameGrabber.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**\n     *\n     * @return null grabs all images, get them with grabColor, grabDepth, and\n     * grabIR instead.\n     * @throws org.bytedeco.javacv.FrameGrabber.Exception\n     */",
    "source_code": "\npublic Frame grab() throws Exception {\n    device.wait_for_frames();\n\n      frameNumber++; \n    // For Framegrabber\n    if (colorEnabled && behaveAsColorFrameGrabber) {\n        IplImage image = grabVideo();\n\n        if (returnImage == null) {\n            int deviceWidth = device.get_stream_width(RealSense.color);\n            int deviceHeight = device.get_stream_height(RealSense.color);\n              returnImage = IplImage.create(deviceWidth, deviceHeight, IPL_DEPTH_8U, 3);\n            returnImage = IplImage.create(deviceWidth, deviceHeight, IPL_DEPTH_8U, 1);\n        }\n        cvCvtColor(image, returnImage, CV_BGR2GRAY);\n        return converter.convert(returnImage);\n    } else {\n        if (IREnabled) {\n            return converter.convert(grabIR());\n        } else {\n            if (depthEnabled) {\n                \n                // Fake colors\n                IplImage image = grabDepth();\n                if (returnImage == null) {\n                    int deviceWidth = device.get_stream_width(RealSense.depth);\n                    int deviceHeight = device.get_stream_height(RealSense.depth);\n              returnImage = IplImage.create(deviceWidth, deviceHeight, IPL_DEPTH_8U, 3);\n                    returnImage = IplImage.create(deviceWidth, deviceHeight, IPL_DEPTH_8U, 1);\n                } \n                return converter.convert(returnImage);\n            }\n        }\n    }\n\n    return null;\n}\n",
    "class_name": "RealSenseFrameGrabber",
    "method_name": "grab",
    "arguments": [],
    "generate_test": [
        "\npackage org.bytedeco.javacv;\n\nimport java.io.IOException;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RealSenseFrameGrabberTest {\n    private static final String DEVICE_FILE = \"/dev/ttyACM0\";\n    \n    @BeforeAll\n    public static void setUpClass() throws IOException, InterruptedException {\n        // Set up the RealSense device connection.\n        DeviceList list = new DeviceList();\n        Device device = list.createDevice(DEVICE_FILE);\n        \n        // Configure the device for depth streaming.\n        Config config = device.getConfig();\n        config.enableStream(RealSense.RS_STREAM_DEPTH, 640, 480, RealSense.RS_FORMAT_Z16, 30);\n        \n        // Start the depth streaming pipeline.\n        Pipeline pipeline = new Pipeline();\n        pipeline.startWithConfig(config);\n    }\n    \n    @AfterAll\n    public static void tearDownClass() {\n        // Stop the device and release resources.\n        DeviceList list = new DeviceList();\n        Device device = list.createDevice(DEVICE_FILE);\n        device.stop();\n        device.close();\n    }\n    \n    @Test\n    public void grabTest() throws IOException, InterruptedException {\n        // Set up the frame grabber and start streaming.\n        RealSenseFrameGrabber grabber = new RealSenseFrameGrabber(DEVICE_FILE);\n        grabber.start();\n        \n        // Grab frames for 10 seconds and verify that they are valid.\n        long timeout = System.currentTimeMillis() + 10 * 1000;\n        while (System.currentTimeMillis() < timeout) {\n            Frame frame = grabber.grab();\n            \n            // Verify that the frame is valid and has the expected size.\n            assertNotNull(frame);\n            assertEquals(640, frame.imageWidth);\n            assertEquals(480, frame.imageHeight);\n        }\n        \n        // Stop streaming and release resources.\n        grabber.stop();\n    }\n}\n",
        "// Fill in the blanks.\npackage org.bytedeco.javacv;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.nio.ByteBuffer;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class RealSenseFrameGrabberTest {\n    private RealSenseFrameGrabber grabber = new RealSenseFrameGrabber();\n    @BeforeEach\n    public void setup() throws FrameGrabber.Exception {\n        // Open the camera, get the frame and close it.\n        grabber.setDeviceNumber(0);\n        grabber.start();\n        VideoFrame videoFrame = grabber.grabVideoFrame();\n        assertNotNull(videoFrame);\n        grabber.stop();\n    }\n    @Test\n    public void testGrabRgb() throws FrameGrabber.Exception {\n        // Check that RGB is enabled by default.\n        List<Integer> rgbModes = Arrays.asList(RealSense.RS_FORMAT_RGB8, RealSense.RS_FORMAT_RGBA8);\n        grabber.setDeviceNumber(0);\n        grabber.start();\n        VideoFrame videoFrame = grabber.grabVideoFrame();\n        assertNotNull(videoFrame);\n        ByteBuffer byteBuf = videoFrame.getByteBuffer();\n        assertEquals(rgbModes, byteBuf.getInt());\n        grabber.stop();\n    }\n    @Test\n    public void testGrabDepth() throws FrameGrabber.Exception {\n        // Check that depth is disabled by default.\n        List<Integer> depthModes = Arrays.asList(RealSense.RS_FORMAT_Z16);\n        grabber.setDeviceNumber(0);\n        grabber.start();\n        VideoFrame videoFrame = grabber.grabVideoFrame();\n        assertNotNull(videoFrame);\n        ByteBuffer byteBuf = videoFrame.getByteBuffer();\n        assertEquals(depthModes, byteBuf.getInt());\n        grabber.stop();\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport java.io.*;\n\n@Disabled(\"Need to be implemented\")\npublic class RealSenseFrameGrabberTest {\n    @Test\n    public void grabTest() throws IOException, InterruptedException {\n        // Load the native library.\n        try (RealSense r = new RealSense()) {}\n        \n        // Create a frame grabber for the depth stream\n        FrameGrabber<VideoFrame> grabber = null;\n        \n        // Grab 10 frames\n        int nFrames = 10;\n        VideoFrame[] frames = new VideoFrame[nFrames];\n        for (int i = 0; i < nFrames; i++) {\n            System.out.println(\"Grabbing frame \" + (i+1) + \"/\" + nFrames);\n            \n            // Grab a frame asynchronously with the grabber's thread\n            FrameGrabber.Frame[] grabbed = grabber.grab();\n            \n            // Wait for the grabbed frame to be ready\n            while (grabbed[0].status() != FrameGrabber.Status.SUCCESS) {\n                Thread.sleep(1);\n            }\n            \n            // Retrieve the grabbed frame\n            VideoFrame frame = (VideoFrame)grabbed[0].frame();\n            frames[i] = frame;\n        }\n        \n        // Display all frames\n        for (int i = 0; i < nFrames; i++) {\n            System.out.println(\"Displaying frame \" + (i+1) + \"/\" + nFrames);\n            \n            // Display the current frame\n            VideoFrame frame = frames[i];\n            \n            // Get the depth values for the current frame\n            double[] depth = grabber.getDepthMap();\n        }\n        \n        // Release all resources\n        grabber.stop();\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RealSenseFrameGrabberTest {\n    @Test\n    public void grabTest() {\n        <FILL>\n    }\n}",
        "\npackage org.bytedeco.javacv;\nimport java.util.*;\n\npublic class RealSenseFrameGrabberTest {\n    @Test\n    public void grabTest() {\n        // Instantiate a new RealSense device\n        RealSense rs = new RealSense();\n        \n        // Enable all streams (depth, color, fisheye)\n        String[] profiles = rs.getDeviceProfiles(0);\n        assertEquals(\"[default_f200, default_sr300]\", Arrays.toString(profiles));\n        \n        int deviceNumber = 0; // or other device number as needed\n        boolean isDepthSensorEnabled = true;\n        RealSenseFrameGrabber frameGrabber = new RealSenseFrameGrabber();\n        frameGrabber.setDevice(deviceNumber);\n        \n        // Set the color stream format\n        frameGrabber.setFormat(\"color\", \"bgr8\");\n        \n        // Set the depth stream format\n        frameGrabber.setFormat(\"depth\", \"z16\");\n                    \n        try {\n            assertTrue(frameGrabber.start());\n            \n            Frame color = new Frame();\n            Frame depth = new Frame();\n            \n            while (true) {\n                // Grab a frame from the default stream of the device\n                boolean grabbedDepth = frameGrabber.grab(depth);\n                \n                if (!grabbedDepth) {\n                    continue;\n                }\n                \n                boolean grabbedColor = frameGrabber.grab(color);\n                \n                if (grabbedColor && grabbedDepth) {\n                    // Process the frames as needed\n                    \n                    System.out.println(\"Depth data: \" + depth);\n                    System.out.println(\"Color data: \" + color);\n                    \n                    Thread.sleep(500); // Let's not hog all CPU resources...\n                } else {\n                    break; // We have stopped grabbing frames, probably because we have reached the end of the stream\n                }\n            }\n        } catch (Exception e) {\n            fail(\"An error occurred while grabbing and processing a frame.\");\n        } finally {\n            assertTrue(frameGrabber.stop());\n            \n            // Release all resources\n            rs.dispose();\n        }\n    }\n}\n    ",
        "### [LANG=java]\npackage org.bytedeco.javacv;\n\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.util.Map;\nimport javax.swing.JFrame;\n\nimport org.bytedeco.librealsense.*;\nimport org.junit.jupiter.api.Test;\n\n@Disabled(\"Not yet implemented\") public class RealSenseFrameGrabberTest {\n    @Test void grabTest() throws InterruptedException, IOException {\n        // Create a frame grabber for the connected Intel Realsense camera\n        RealSenseDevice device = new RealSenseDevice();\n        FrameListener listener = new FrameListener(device);\n        try (RealSenseFrameGrabber grabber = new RealSenseFrameGrabber(0, listener)) {\n            // Start the frame grabber and display each captured image in a separate window\n            grabber.start();\n            for (int i = 0; i < 10; i++) {\n                BufferedImage image = grabber.grab().clone();\n                JFrame f = new JFrame(String.format(\"Test Image %d\", i));\n                f.setSize(image.getWidth(), image.getHeight());\n                f.add(new CanvasFrame(\"Test Image\", image));\n                f.setVisible(true);\n            }\n        } finally {\n            device.close();\n        }\n    }\n}\n\nclass FrameListener implements RealSenseFrameGrabber.FrameListener {\n    private final RealSenseDevice device;\n    \n    public FrameListener(RealSenseDevice device) {\n        this.device = device;\n    }\n    \n    @Override public void onFrameset(@ByRef RealSenseFrameset frameset) throws IOException {\n        // Process each frame in the set of captured images\n        for (int i = 0; i < frameset.size(); i++) {\n            try (RealSenseFrame frame = new RealSenseFrame(frameset.get(i))) {\n                // TODO: do something with the individual frame\n            }\n        }\n    }\n}\n[/LANG]\n    \n\n### [LANG=python]\nimport pytest\nfrom jnius import autoclass, cast\nfrom pylibrs.pyrealsense2 import PyRealSense2\nfrom tests.conftest import device_test_wrapper\n\nclass TestRealSenseFrameGrabber(object):\n    \n    @device_test_wrapper\n    def test_start(self, ctx, dev):\n        \"\"\"Test that the grabber can start.\"\"\"\n        # Create a frame grabber for the connected Intel Realsense camera\n        rs = PyRealSense2()\n        listener = FrameListener(rs)\n        grabber = RealSenseFrameGrabber(0, listener)\n        try:\n            grabber.start()\n            \n            # TODO: Implement test\n        \n    @device_test_wrapper\n    def test_stop(self, ctx, dev):\n        \"\"\"Test that the grabber can stop.\"\"\"\n        rs = PyRealSense2()\n        listener = FrameListener(rs)\n        grabber = RealSenseFrameGrabber(0, listener)\n    \n        try:\n            grabber.start()\n        \n        except Exception as e:\n            print(e)\n    \n    @device_test_wrapper\n    def test_grab(self, ctx, dev):\n        \"\"\"Test that the grabber can grab a frame.\"\"\"\n        rs = PyRealSense2()\n        listener = FrameListener(rs)\n        grabber = RealSenseFrameGrabber(0, listener)\n    \n        try:\n            grabber.start()\n        \n        except Exception as e:\n            print(e)\n    \n    @device_test_wrapper\n    def test_grabMultiple(self, ctx, dev):\n        \"\"\"Test that the grabber can grab multiple frames.\"\"\"\n        rs = PyRealSense2()\n        listener = FrameListener(rs)\n        grabber = RealSenseFrameGrabber(0, listener)\n    \n        try:\n            grabber.start()\n        \n        except Exception as e:\n            print(e)\n    \n    @device_test_wrapper\n    def test_grabMultipleDifferentSize(self, ctx, dev):\n        \"\"\"Test that the grabber can grab multiple frames of different sizes.\"\"\"\n        rs = PyRealSense2()\n        listener = FrameListener(rs)\n        grabber = RealSenseFrameGrabber(0, listener)\n    \n        try:\n            grabber.start()\n        \n        except Exception as e:\n            print(e)\n    \n    @device_test_wrapper\n    def test_grabMultipleDifferentSizeWithDelay(self, ctx, dev):\n        \"\"\"Test that the grabber can grab multiple frames of different sizes with a delay.\"\"\"\n        rs = PyRealSense2()\n        listener = FrameListener(rs)\n        grabber = RealSenseFrameGrabber(0, listener)\n    \n        try:\n            grabber.start()\n        \n        except Exception as e:\n            print(e)\n",
        "RealSenseFrameGrabber grabber = new RealSenseFrameGrabber();\nif (grabber.start()) {\n    // Grab frames\n    while (true) {\n        RealSenseFrames frame = grabber.grab();\n        if (frame != null) {\n            // Process the color and depth images\n        } else {\n            break;\n        }\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport java.io.File;\nimport org.junit.jupiter.api.*;\n\npublic class RealSenseFrameGrabberTest {\n    private File file = new File(\"<FILL>\"); // Path to a video file (e.g., \"video/sample_720p.mp4\")\n    private RealSenseFrameGrabber grabber;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        grabber = new RealSenseFrameGrabber(file);\n    }\n\n    @AfterEach\n    public void tearDown() throws Exception {\n        if (grabber != null) {\n            grabber.release();\n        }\n    }\n\n    @Test\n    public void grabTest() throws Exception {\n        OpenCVFrameConverter.ToIplImage converter = new OpenCVFrameConverter.ToIplImage();\n        Frame frame = grabber.grab();\n        IplImage image = converter.convert(frame);\n\n        assertNotNull(image, \"Failed to retrieve a valid image frame\");\n    }\n}",
        "import org.bytedeco.javacpp.*;\nimport org.bytedeco.javacv.*;\nimport static org.bytedeco.javacv.RealSenseFrameGrabber.RS_FORMAT;\n\npublic class RealSenseFrameGrabberTest {\n    @Test\n    public void grabTest() {\n        // Create an instance of RealSenseFrameGrabber\n        RealSenseFrameGrabber grabber = new RealSenseFrameGrabber();\n        \n        // Set the device ID to connect to\n        grabber.setDeviceID(0);\n        \n        // Set the format of frames to RGB8\n        grabber.setFormat(RS_FORMAT.RGBA8);\n        \n        // Start capturing video input from the camera\n        grabber.start();\n        \n        // Wait for a frame to be captured\n        Frame frame = grabber.grab();\n        \n        // Check if the frame is not null\n        assertNotNull(frame);\n    }\n}",
        "\nRealSenseFrameGrabber grabber = new RealSenseFrameGrabber(width, height);\ntry {\n    Future<Frame> future = grabber.grab();\n    // do something else until the capture is ready\n    Frame frame = future.get();\n} catch (Exception e) {\n    e.printStackTrace();\n}\n"
    ]
}