{
    "project_name": "jeecg-boot",
    "file_name": "AutoLogAspect.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/aspect/AutoLogAspect.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.aspect",
    "docstring": "/**\n     * @Description: \u83b7\u53d6\u8bf7\u6c42\u53c2\u6570\n     * @author: scott\n     * @date: 2020/4/16 0:10\n     * @param request:  request\n     * @param joinPoint:  joinPoint\n     * @Return: java.lang.String\n     */",
    "source_code": "\nprivate String getReqestParams(HttpServletRequest request, JoinPoint joinPoint) {\n    String httpMethod = request.getMethod();\n    String params = \"\";\n    if (CommonConstant.HTTP_POST.equals(httpMethod) || CommonConstant.HTTP_PUT.equals(httpMethod) || CommonConstant.HTTP_PATCH.equals(httpMethod)) {\n        Object[] paramsArray = joinPoint.getArgs();\n        // java.lang.IllegalStateException: It is illegal to call this method if the current request is not in asynchronous mode (i.e. isAsyncStarted() returns false)\n        //  https://my.oschina.net/mengzhang6/blog/2395893\n        Object[] arguments  = new Object[paramsArray.length];\n        for (int i = 0; i < paramsArray.length; i++) {\n            if (paramsArray[i] instanceof BindingResult || paramsArray[i] instanceof ServletRequest || paramsArray[i] instanceof ServletResponse || paramsArray[i] instanceof MultipartFile) {\n                //ServletRequest\u4e0d\u80fd\u5e8f\u5217\u5316\uff0c\u4ece\u5165\u53c2\u91cc\u6392\u9664\uff0c\u5426\u5219\u62a5\u5f02\u5e38\uff1ajava.lang.IllegalStateException: It is illegal to call this method if the current request is not in asynchronous mode (i.e. isAsyncStarted() returns false)\n                //ServletResponse\u4e0d\u80fd\u5e8f\u5217\u5316 \u4ece\u5165\u53c2\u91cc\u6392\u9664\uff0c\u5426\u5219\u62a5\u5f02\u5e38\uff1ajava.lang.IllegalStateException: getOutputStream() has already been called for this response\n                continue;\n            }\n            arguments[i] = paramsArray[i];\n        }\n        //update-begin-author:taoyan date:20200724 for:\u65e5\u5fd7\u6570\u636e\u592a\u957f\u7684\u76f4\u63a5\u8fc7\u6ee4\u6389\n        PropertyFilter profilter = new PropertyFilter() {\n            @Override\n            public boolean apply(Object o, String name, Object value) {\n                int length = 500;\n                if(value!=null && value.toString().length()>length){\n                    return false;\n                }\n                return true;\n            }\n        };\n        params = JSONObject.toJSONString(arguments, profilter);\n        //update-end-author:taoyan date:20200724 for:\u65e5\u5fd7\u6570\u636e\u592a\u957f\u7684\u76f4\u63a5\u8fc7\u6ee4\u6389\n    } else {\n        MethodSignature signature = (MethodSignature) joinPoint.getSignature();\n        Method method = signature.getMethod();\n        // \u8bf7\u6c42\u7684\u65b9\u6cd5\u53c2\u6570\u503c\n        Object[] args = joinPoint.getArgs();\n        // \u8bf7\u6c42\u7684\u65b9\u6cd5\u53c2\u6570\u540d\u79f0\n        LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer();\n        String[] paramNames = u.getParameterNames(method);\n        if (args != null && paramNames != null) {\n            for (int i = 0; i < args.length; i++) {\n                params += \"  \" + paramNames[i] + \": \" + args[i];\n            }\n        }\n    }\n    return params;\n}\n",
    "class_name": "AutoLogAspect",
    "method_name": "getReqestParams",
    "arguments": [
        "HttpServletRequest request",
        "JoinPoint joinPoint"
    ],
    "generate_test": [
        "Timeout",
        "package io.swagger.annotations;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * Marker annotation to indicate that an element is deprecated and should no longer be used.\n */\n@Target({ElementType.ANNOTATION_TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface ApiOperation {\n    String value() default \"\"; // \u63a5\u53e3\u64cd\u4f5c\u4fe1\u606f\n}\n    \n\n### Response:",
        "package com.github.jeansantos38.stf.framework.selenium.enums;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic enum WebDriverType {\n    FIREFOX(\"firefox\", \"Firefox\"), CHROME(\"chrome\", \"Chrome\"), SAFARI(\"safari\", \"Safari\"), IE(\"ie\", \"Internet Explorer\"), EDGE(\"edge\", \"Edge\"), HTMLUNIT(\"htmlunit\", \"HtmlUnit\");\n    \n    private String type;\n    private String description;\n    \n    WebDriverType(String type, String description) {\n        this.type = type;\n        this.description = description;\n    }\n    \n    public static Map<String, String> getWebDriverTypes() {\n        Map<String, String> webDriverTypes = new HashMap<>();\n        \n        for (WebDriverType wdt : WebDriverType.values()) {\n            webDriverTypes.put(wdt.getType(), wdt.getDescription());\n        }\n        \n        return webDriverTypes;\n    }\n}",
        "@Data\npublic class SysLog implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * id\n     */\n    @TableId(type= IdType.ASSIGN_ID)\n    private String id;\n    /**\n     * \u65e5\u5fd7\u7c7b\u578b\n     */\n    private Integer logType;\n    /**\n     * \u64cd\u4f5c\u7c7b\u578b\uff081\u67e5\u8be2\uff0c2\u6dfb\u52a0\uff0c3\u4fee\u6539\uff0c4\u5220\u9664\uff09\n     */\n    private Integer operateType;\n    /**\n     * \u6a21\u5757\u7c7b\u540d\n     */\n    private String moduleType;\n    /**\n     * \u65e5\u5fd7\u5185\u5bb9\n     */\n    private String logContent;\n    /**\n     * \u64cd\u4f5c\u65b9\u6cd5\n     */\n    private String method;\n\n    /**\n     * \u8bf7\u6c42\u65b9\u5f0f\n     */\n    private String requestMethod;\n\n    /**\n     * \u64cd\u4f5c\u7c7b\u578b\uff081\u67e5\u8be2\uff0c2\u6dfb\u52a0\uff0c3\u4fee\u6539\uff0c4\u5220\u9664\uff09\n     */\n    private Integer operateType;\n\n    /**\n     * \u64cd\u4f5c\u4eba\u5458id\n     */\n    private String userId;\n\n    /**\n     * \u64cd\u4f5c\u4eba\u59d3\u540d\n     */\n    private String username;\n\n    /**\n     * \u64cd\u4f5c\u5730\u5740\n     */\n    private String operateAddress;\n\n    /**\n     * \u8bf7\u6c42\u53c2\u6570\n     */\n    @TableField(exist=false)\n    private String requestParam;\n}\n",
        "package org.jeecg.common.aspect;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.springframework.stereotype.Component;\n\n/**\n * \u5728\u7ebf\u7528\u6237\u7ba1\u7406\n */\n@Slf4j\n@Aspect\n@Component\npublic class OnlineAspect {\n\n    @Around(\"execution(* org.jeecg.modules.*Controller.*(..))\")\n    public Object aroundOnline(ProceedingJoinPoint proceedingJoinPoint) throws Throwable{\n        return null;\n    }\n}\n    \n\n### Response:",
        "package org.jeecg.common.aspect;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AutoLogAspectTest {\n    @Test\n    public void getReqestParamsTest() {\n        <FILL>\n    }\n}\n    \n\n### Response:",
        "package [PACKAGE NAME];\n\n/**\n * Author: [AUTHOR_NAME]\n */\npublic interface I[INTERFACE_NAME]Service extends BaseIService<[TABLE_ENTITY]> {\n  /**\n   * \u83b7\u53d6\u6570\u636e\u5217\u8868\n   * @param pageIndex \u5f53\u524d\u9875\n   * @param pageSize \u6bcf\u9875\u6761\u6570\n   * @return \u5206\u9875\u6570\u636e\n   */\n  public PageList<[TABLE_ENTITY]> getDataPage(int pageIndex, int pageSize);\n}\n",
        "package org.jeecg.common.aspect;\n\nimport java.lang.reflect.Method;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.shiro.SecurityUtils;\nimport org.apache.shiro.subject.Subject;\nimport org.springframework.stereotype.Component;\nimport com.alibaba.fastjson.JSONObject;\nimport io.swagger.annotations.ApiOperation;\n\n/**\n * \u64cd\u4f5c\u65e5\u5fd7\u8bb0\u5f55\u5904\u7406\n */\n@Aspect\n@Component\npublic class AutoLogAspect {\n    private static final Logger log = LoggerFactory.getLogger(AutoLogAspect.class);\n\n    @Pointcut(\"execution(* org.jeecg..controller.*Controller.*(..))\")\n    public void excuteLog(JoinPoint jp) {\n        try {\n            Object obj = ((MethodSignature)jp.getSignature()).getDeclaringType().newInstance();\n            Class c1 = obj.getClass();\n            Method method = c1.getMethod(\"getById\", String.class);\n            System.out.println(method.getName());\n            System.out.println(obj.getClass().getName() + \":\" + method.getName());\n        } catch (Exception e) {\n            // TODO  handle the exception\n        }\n    }\n}",
        "\n@RestController\n@RequestMapping(\"/test\")\n@Slf4j\npublic class TestController {\n\n\t// \u521b\u5efa\u7ebf\u7a0b\u6c60\n\tprivate static ExecutorService service = new ThreadPoolExecutor(5, 20, 10L, TimeUnit.SECONDS,\n                            new LinkedBlockingQueue<>(30), r -> new Thread(r));\n\n    @GetMapping(\"/test\")\n    public Result test(){\n        log.info(\"\u6d4b\u8bd5\u7ebf\u7a0b\u6c60\");\n\tservice.execute(() -> System.out.println(\"\u5b50\u7ebf\u7a0b\u6267\u884c\uff1a\" + Thread.currentThread().getName()));\n    return Result.ok();\n    }\n}\npackage org.jeecg.common.aspect;\n\nimport org.apache.ibatis.session.ResultHandler;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.Map;\n\n/**\n * @Description: \u7c7b\u7684\u529f\u80fd\u63cf\u8ff0\n * @Author: scott\n * @Date: 2021-01-08 16:47\n */\n@Service\npublic class AutoLogAspect {\n    /**\n     * @Description:  \u5faa\u73af\u5904\u7406\u65b9\u6cd5\n     * @Param: [joinPoint]\n     * @return: java.lang.Object\n     **/\n    @Around(\"execution( * org.jeecg..*.service..*.*(..))\")\n    public Object around(ProceedingJoinPoint joinPoint) throws Throwable {\n        // \u83b7\u53d6\u76ee\u6807\u7c7b\u578b\n        Class<?> targetClass = joinPoint.getTarget().getClass();\n        // \u83b7\u53d6\u65b9\u6cd5\n        Method method = ((MethodSignature) joinPoint.getSignature()).getMethod();\n        // \u83b7\u53d6\u7c7b\u4e0a\u7684AutoLog\u6ce8\u89e3\u4fe1\u606f\n        AutoLog autoLogAnnotationInfo = AnnotationUtils.findAnnotation(targetClass, AutoLog.class);\n        // TODO: \u5224\u65ad\u76ee\u6807\u7c7b\u53ca\u65b9\u6cd5\u662f\u5426\u9700\u8981\u88ab\u5904\u7406\n        \n        // \u83b7\u53d6\u8bf7\u6c42\u53c2\u6570\n        Map<String, String[]> parameterMap = ((HttpServletRequest) ServletActionContext.getRequest()).getParameterMap();\n        // \u5bf9\u53c2\u6570\u8fdb\u884c\u62e6\u6234\u64cd\u4f5c\uff0c\u6bd4\u5982\u52a0\u5bc6\u89e3\u5bc6\u7b49\u7b49\u7b49\n        \n        // \u8c03\u7528joinPoint.proceed()\u65b9\u6cd5\u8c03\u7528\u539f\u59cb\u65b9\u6cd5\n        Object proceed = joinPoint.proceed();\n        if (proceed instanceof Result) {\n            return new Result<>(Result)proceed).success();\n        } else {\n            return proceed;\n        }\n    }\n}\n### Response: \n@RestController\n@RequestMapping(\"/test\")\npublic class TestController {\n\n    @GetMapping(\"/test\")\n    public Result test(){\n        System.out.println(\"\u6d4b\u8bd5\u7ebf\u7a0b\u6c60\");\n\t\tservice.execute(() -> System.out.println(\"\u5b50\u7ebf\u7a0b\u6267\u884c\uff1a\" + Thread.currentThread().getName()));\n\n        return Result.ok();\n    }\n}\n### Response:",
        "[![](http://img.youtube.com/vi/H70l_gkK6Ds/0.jpg)](http://www.youtube.com/watch?v=H70l_gkK6Ds \"AutoLogAspect\")"
    ]
}