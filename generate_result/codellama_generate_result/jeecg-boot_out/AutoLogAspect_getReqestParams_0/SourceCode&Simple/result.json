{
    "project_name": "jeecg-boot",
    "file_name": "AutoLogAspect.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/aspect/AutoLogAspect.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.aspect",
    "docstring": "/**\n     * @Description: \u83b7\u53d6\u8bf7\u6c42\u53c2\u6570\n     * @author: scott\n     * @date: 2020/4/16 0:10\n     * @param request:  request\n     * @param joinPoint:  joinPoint\n     * @Return: java.lang.String\n     */",
    "source_code": "\nprivate String getReqestParams(HttpServletRequest request, JoinPoint joinPoint) {\n    String httpMethod = request.getMethod();\n    String params = \"\";\n    if (CommonConstant.HTTP_POST.equals(httpMethod) || CommonConstant.HTTP_PUT.equals(httpMethod) || CommonConstant.HTTP_PATCH.equals(httpMethod)) {\n        Object[] paramsArray = joinPoint.getArgs();\n        // java.lang.IllegalStateException: It is illegal to call this method if the current request is not in asynchronous mode (i.e. isAsyncStarted() returns false)\n        //  https://my.oschina.net/mengzhang6/blog/2395893\n        Object[] arguments  = new Object[paramsArray.length];\n        for (int i = 0; i < paramsArray.length; i++) {\n            if (paramsArray[i] instanceof BindingResult || paramsArray[i] instanceof ServletRequest || paramsArray[i] instanceof ServletResponse || paramsArray[i] instanceof MultipartFile) {\n                //ServletRequest\u4e0d\u80fd\u5e8f\u5217\u5316\uff0c\u4ece\u5165\u53c2\u91cc\u6392\u9664\uff0c\u5426\u5219\u62a5\u5f02\u5e38\uff1ajava.lang.IllegalStateException: It is illegal to call this method if the current request is not in asynchronous mode (i.e. isAsyncStarted() returns false)\n                //ServletResponse\u4e0d\u80fd\u5e8f\u5217\u5316 \u4ece\u5165\u53c2\u91cc\u6392\u9664\uff0c\u5426\u5219\u62a5\u5f02\u5e38\uff1ajava.lang.IllegalStateException: getOutputStream() has already been called for this response\n                continue;\n            }\n            arguments[i] = paramsArray[i];\n        }\n        //update-begin-author:taoyan date:20200724 for:\u65e5\u5fd7\u6570\u636e\u592a\u957f\u7684\u76f4\u63a5\u8fc7\u6ee4\u6389\n        PropertyFilter profilter = new PropertyFilter() {\n            @Override\n            public boolean apply(Object o, String name, Object value) {\n                int length = 500;\n                if(value!=null && value.toString().length()>length){\n                    return false;\n                }\n                return true;\n            }\n        };\n        params = JSONObject.toJSONString(arguments, profilter);\n        //update-end-author:taoyan date:20200724 for:\u65e5\u5fd7\u6570\u636e\u592a\u957f\u7684\u76f4\u63a5\u8fc7\u6ee4\u6389\n    } else {\n        MethodSignature signature = (MethodSignature) joinPoint.getSignature();\n        Method method = signature.getMethod();\n        // \u8bf7\u6c42\u7684\u65b9\u6cd5\u53c2\u6570\u503c\n        Object[] args = joinPoint.getArgs();\n        // \u8bf7\u6c42\u7684\u65b9\u6cd5\u53c2\u6570\u540d\u79f0\n        LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer();\n        String[] paramNames = u.getParameterNames(method);\n        if (args != null && paramNames != null) {\n            for (int i = 0; i < args.length; i++) {\n                params += \"  \" + paramNames[i] + \": \" + args[i];\n            }\n        }\n    }\n    return params;\n}\n",
    "class_name": "AutoLogAspect",
    "method_name": "getReqestParams",
    "arguments": [
        "HttpServletRequest request",
        "JoinPoint joinPoint"
    ],
    "generate_test": [
        "package org.jeecg.common.aspect;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.alibaba.fastjson.serializer.PropertyFilter;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AutoLogAspectTest {\n    @Test\n    public void getReqestParamsTest() {\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        when(request.getMethod()).thenReturn(\"POST\");\n        \n        JoinPoint joinPoint = mock(JoinPoint.class);\n        Object[] paramsArray = new Object[2];\n        paramsArray[0] = \"param1\";\n        paramsArray[1] = \"param2\";\n        when(joinPoint.getArgs()).thenReturn(paramsArray);\n        \n        PropertyFilter profilter = mock(PropertyFilter.class);\n        when(profilter.apply(any(), anyString(), any())).thenReturn(true);\n        \n        String result = AutoLogAspect.getRequestParams(request, joinPoint, profilter);\n        assertEquals(\"param1=param2\", result);\n    }\n}",
        "String httpMethod = request.getMethod();\nif (CommonConstant.HTTP_POST.equals(httpMethod) || CommonConstant.HTTP_PUT.equals(httpMethod) || CommonConstant.HTTP_PATCH.equals(httpMethod)) {\n    Object[] paramsArray = joinPoint.getArgs();\n    // Convert the request parameters to a JSON string\n    String paramsJson = JSONObject.toJSONString(paramsArray);\n    return paramsJson;\n} else {\n    MethodSignature signature = (MethodSignature) joinPoint.getSignature();\n    Method method = signature.getMethod();\n    // Get the names of the request parameters\n    String[] paramNames = signature.getParameterNames();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < paramNames.length; i++) {\n        sb.append(paramNames[i] + \": \" + paramsArray[i]);\n    }\n    return sb.toString();\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AutoLogAspectTest {\n    @Test\n    public void getReqestParamsTest() {\n        HttpServletRequest request = new MockHttpServletRequest();\n        JoinPoint joinPoint = new MethodJoinPoint(this, request);\n        \n        String actual = AutoLogAspect.getReqestParams(request, joinPoint);\n        \n        assertEquals(\"Expected parameters\", actual);\n    }\n}",
        "package org.jeecg.common.aspect;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.mock.web.MockHttpServletRequest;\n\npublic class AutoLogAspectTest {\n    @Test\n    public void testGetReqestParams() throws Exception {\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        request.setMethod(HttpMethod.GET);\n        request.addParameter(\"param1\", \"value1\");\n        request.addParameter(\"param2\", \"value2\");\n        \n        String params = AutoLogAspect.getReqestParams(request, null);\n        \n        assertEquals(\"param1=value1&param2=value2\", params);\n    }\n}",
        "package org.jeecg.common.aspect;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AutoLogAspectTest {\n    private AutoLogAspect autoLogAspect;\n    \n    @BeforeEach\n    public void setUp() {\n        autoLogAspect = new AutoLogAspect();\n    }\n    \n    @Test\n    public void getReqestParamsTest() {\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        JoinPoint joinPoint = mock(JoinPoint.class);\n        \n        when(request.getMethod()).thenReturn(\"POST\");\n        when(joinPoint.getArgs()).thenReturn(new Object[] {\"param1\", \"param2\"});\n        \n        String actualParams = autoLogAspect.getReqestParams(request, joinPoint);\n        \n        assertEquals(\"param1: param1\\nparam2: param2\\n\", actualParams);\n    }\n}",
        "package org.jeecg.common.aspect;\n\nimport com.alibaba.fastjson.JSONObject;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.lang.reflect.Method;\n\npublic class AutoLogAspectTest {\n    @Test\n    public void getReqestParamsTest() {\n        HttpServletRequest request = <FILL>;\n        JoinPoint joinPoint = <FILL>;\n        String httpMethod = request.getMethod();\n        Object[] paramsArray = joinPoint.getArgs();\n        \n        // When the method is POST, PUT or PATCH and the arguments are not empty\n        if (CommonConstant.HTTP_POST.equals(httpMethod) || CommonConstant.HTTP_PUT.equals(httpMethod) || CommonConstant.HTTP_PATCH.equals(httpMethod)) {\n            // Then create a new object array that excludes ServletRequest, ServletResponse and MultipartFile objects\n            Object[] arguments = new Object[paramsArray.length];\n            for (int i = 0; i < paramsArray.length; i++) {\n                if (!(paramsArray[i] instanceof BindingResult) && !(paramsArray[i] instanceof ServletRequest) && !(paramsArray[i] instanceof ServletResponse) && !(paramsArray[i] instanceof MultipartFile)) {\n                    arguments[i] = paramsArray[i];\n                }\n            }\n            \n            // And convert the new object array to a JSON string using the given PropertyFilter\n            String params = JSONObject.toJSONString(arguments, new PropertyFilter() {\n                @Override\n                public boolean apply(Object o, String name, Object value) {\n                    int length = 500;\n                    if (value != null && value.toString().length() > length) {\n                        return false;\n                    }\n                    return true;\n                }\n            });\n            \n            // And assert that the resulting JSON string is not empty\n            assertFalse(params.isEmpty());\n        \n        // When the method is GET, DELETE or OPTIONS and the arguments are not empty\n        } else if (CommonConstant.HTTP_GET.equals(httpMethod) || CommonConstant.HTTP_DELETE.equals(httpMethod) || CommonConstant.HTTP_OPTIONS.equals(httpMethod)) {\n            // Then assert that the resulting JSON string is not empty\n            String params = getReqestParams(request, joinPoint);\n            assertFalse(params.isEmpty());\n        \n        // Otherwise, assert that the resulting JSON string is empty\n        } else {\n            String params = getReqestParams(request, joinPoint);\n            assertTrue(params.isEmpty());\n        }\n    }\n}",
        "@Test\npublic void getReqestParamsTest() {\n    // Create a mock HttpServletRequest object\n    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n    \n    // Set up the expected parameters for the request\n    String[] parameterNames = new String[] {\"param1\", \"param2\"};\n    Object[] parameterValues = new Object[] {1, 2};\n    \n    // Set up the mock HttpServletRequest to return the expected parameters when called with getParameter() method\n    Mockito.when(request.getParameter(\"param1\")).thenReturn(parameterNames[0]);\n    Mockito.when(request.getParameter(\"param2\")).thenReturn(parameterValues[1]);\n    \n    // Invoke the getReqestParams method with the mock request and check that it returns the expected JSON string\n    String actual = AutoLogAspect.getReqestParams(request, new JoinPoint());\n    assertEquals(\"{\\\"param1\\\": 1, \\\"param2\\\": 2}\", actual);\n}",
        "import org.jeecg.common.aspect.AutoLogAspect;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AutoLogAspectTest {\n    @Test\n    public void getReqestParamsTest() {\n        HttpServletRequest request = new MockHttpServletRequest();\n        JoinPoint joinPoint = new JoinPointStub(request);\n        String result = AutoLogAspect.getReqestParams(request, joinPoint);\n        assertEquals(\"\", result);\n    }\n}",
        "import org.jeecg.common.aspect.AutoLogAspect;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AutoLogAspectTest {\n    @Test\n    public void getReqestParamsTest() {\n        // create a mock HttpServletRequest object\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        \n        // set up the expected behavior of the mock request\n        when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getParameterNames()).thenReturn(new String[] {\"param1\", \"param2\"});\n        when(request.getParameterValues(\"param1\")).thenReturn(new String[] {\"value1\", \"value2\"});\n        when(request.getParameterValues(\"param2\")).thenReturn(new String[] {\"value3\", \"value4\"});\n        \n        // create a mock JoinPoint object\n        JoinPoint joinPoint = Mockito.mock(JoinPoint.class);\n        \n        // set up the expected behavior of the mock join point\n        when(joinPoint.getArgs()).thenReturn(new Object[] {request});\n        \n        // call the getReqestParams method with the mock request and join point\n        String result = AutoLogAspect.getReqestParams(request, joinPoint);\n        \n        // assert that the result is correct\n        assertEquals(\"param1: value1, param2: value3\", result);\n    }\n}",
        "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AutoLogAspectTest {\n    @Test\n    public void getReqestParamsTest() {\n        // Test 1: Http method is GET\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        when(request.getMethod()).thenReturn(\"GET\");\n        JoinPoint joinPoint = mock(JoinPoint.class);\n        Object[] paramsArray = new Object[0];\n        when(joinPoint.getArgs()).thenReturn(paramsArray);\n        String expectedResult = \"\";\n        assertEquals(expectedResult, AutoLogAspect.getRequestParams(request, joinPoint));\n\n        // Test 2: Http method is POST and params array is empty\n        request = mock(HttpServletRequest.class);\n        when(request.getMethod()).thenReturn(\"POST\");\n        joinPoint = mock(JoinPoint.class);\n        paramsArray = new Object[0];\n        when(joinPoint.getArgs()).thenReturn(paramsArray);\n        expectedResult = \"\";\n        assertEquals(expectedResult, AutoLogAspect.getRequestParams(request, joinPoint));\n\n        // Test 3: Http method is POST and params array contains a single object\n        request = mock(HttpServletRequest.class);\n        when(request.getMethod()).thenReturn(\"POST\");\n        joinPoint = mock(JoinPoint.class);\n        paramsArray = new Object[1];\n        when(joinPoint.getArgs()).thenReturn(paramsArray);\n        expectedResult = \"{}\";\n        assertEquals(expectedResult, AutoLogAspect.getRequestParams(request, joinPoint));\n\n        // Test 4: Http method is POST and params array contains multiple objects\n        request = mock(HttpServletRequest.class);\n        when(request.getMethod()).thenReturn(\"POST\");\n        joinPoint = mock(JoinPoint.class);\n        paramsArray = new Object[2];\n        when(joinPoint.getArgs()).thenReturn(paramsArray);\n        expectedResult = \"{}\";\n        assertEquals(expectedResult, AutoLogAspect.getRequestParams(request, joinPoint));\n    }\n}"
    ]
}