{
    "project_name": "jeecg-boot",
    "file_name": "DictAspect.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/aspect/DictAspect.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.aspect",
    "docstring": "/**\n     * \u672c\u65b9\u6cd5\u9488\u5bf9\u8fd4\u56de\u5bf9\u8c61\u4e3aResult \u7684IPage\u7684\u5206\u9875\u5217\u8868\u6570\u636e\u8fdb\u884c\u52a8\u6001\u5b57\u5178\u6ce8\u5165\n     * \u5b57\u5178\u6ce8\u5165\u5b9e\u73b0 \u901a\u8fc7\u5bf9\u5b9e\u4f53\u7c7b\u6dfb\u52a0\u6ce8\u89e3@dict \u6765\u6807\u8bc6\u9700\u8981\u7684\u5b57\u5178\u5185\u5bb9,\u5b57\u5178\u5206\u4e3a\u5355\u5b57\u5178code\u5373\u53ef \uff0ctable\u5b57\u5178 code table text\u914d\u5408\u4f7f\u7528\u4e0e\u539f\u6765jeecg\u7684\u7528\u6cd5\u76f8\u540c\n     * \u793a\u4f8b\u4e3aSysUser   \u5b57\u6bb5\u4e3asex \u6dfb\u52a0\u4e86\u6ce8\u89e3@Dict(dicCode = \"sex\") \u4f1a\u5728\u5b57\u5178\u670d\u52a1\u7acb\u9a6c\u67e5\u51fa\u6765\u5bf9\u5e94\u7684text \u7136\u540e\u5728\u8bf7\u6c42list\u7684\u65f6\u5019\u5c06\u8fd9\u4e2a\u5b57\u5178text\uff0c\u5df2\u5b57\u6bb5\u540d\u79f0\u52a0_dictText\u5f62\u5f0f\u8fd4\u56de\u5230\u524d\u7aef\n     * \u4f8b\u8f93\u5165\u5f53\u524d\u8fd4\u56de\u503c\u7684\u5c31\u4f1a\u591a\u51fa\u4e00\u4e2asex_dictText\u5b57\u6bb5\n     * {\n     *      sex:1,\n     *      sex_dictText:\"\u7537\"\n     * }\n     * \u524d\u7aef\u76f4\u63a5\u53d6\u503csext_dictText\u5728table\u91cc\u9762\u65e0\u9700\u518d\u8fdb\u884c\u524d\u7aef\u7684\u5b57\u5178\u8f6c\u6362\u4e86\n     *  customRender:function (text) {\n     *               if(text==1){\n     *                 return \"\u7537\";\n     *               }else if(text==2){\n     *                 return \"\u5973\";\n     *               }else{\n     *                 return text;\n     *               }\n     *             }\n     *             \u76ee\u524dvue\u662f\u8fd9\u4e48\u8fdb\u884c\u5b57\u5178\u6e32\u67d3\u5230table\u4e0a\u7684\u591a\u4e86\u5c31\u5f88\u9ebb\u70e6\u4e86 \u8fd9\u4e2a\u76f4\u63a5\u5728\u670d\u52a1\u7aef\u6e32\u67d3\u5b8c\u6210\u524d\u7aef\u53ef\u4ee5\u76f4\u63a5\u7528\n     * @param result\n     */",
    "source_code": "\nprivate Object parseDictText(Object result) {\n    if (result instanceof Result) {\n        if (((Result) result).getResult() instanceof IPage) {\n            List<JSONObject> items = new ArrayList<>();\n\n            //step.1 \u7b5b\u9009\u51fa\u52a0\u4e86 Dict \u6ce8\u89e3\u7684\u5b57\u6bb5\u5217\u8868\n            List<Field> dictFieldList = new ArrayList<>();\n            // \u5b57\u5178\u6570\u636e\u5217\u8868\uff0c key = \u5b57\u5178code\uff0cvalue=\u6570\u636e\u5217\u8868\n            Map<String, List<String>> dataListMap = new HashMap<>(5);\n            //\u53d6\u51fa\u7ed3\u679c\u96c6\n            List<Object> records=((IPage) ((Result) result).getResult()).getRecords();\n            //update-begin--Author:zyf -- Date:20220606 ----for\uff1a\u3010VUEN-1230\u3011 \u5224\u65ad\u662f\u5426\u542b\u6709\u5b57\u5178\u6ce8\u89e3,\u6ca1\u6709\u6ce8\u89e3\u8fd4\u56de-----\n            Boolean hasDict= checkHasDict(records);\n            if(!hasDict){\n                return result;\n            }\n\n            log.debug(\" __ \u8fdb\u5165\u5b57\u5178\u7ffb\u8bd1\u5207\u9762 DictAspect \u2014\u2014 \" );\n            //update-end--Author:zyf -- Date:20220606 ----for\uff1a\u3010VUEN-1230\u3011 \u5224\u65ad\u662f\u5426\u542b\u6709\u5b57\u5178\u6ce8\u89e3,\u6ca1\u6709\u6ce8\u89e3\u8fd4\u56de-----\n            for (Object record : records) {\n                String json=\"{}\";\n                try {\n                    //update-begin--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                    //\u89e3\u51b3@JsonFormat\u6ce8\u89e3\u89e3\u6790\u4e0d\u4e86\u7684\u95ee\u9898\u8be6\u89c1SysAnnouncement\u7c7b\u7684@JsonFormat\n                     json = objectMapper.writeValueAsString(record);\n                    //update-end--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                } catch (JsonProcessingException e) {\n                    log.error(\"json\u89e3\u6790\u5931\u8d25\"+e.getMessage(),e);\n                }\n                //update-begin--Author:scott -- Date:20211223 ----for\uff1a\u3010issues/3303\u3011restcontroller\u8fd4\u56dejson\u6570\u636e\u540ekey\u987a\u5e8f\u9519\u4e71 -----\n                JSONObject item = JSONObject.parseObject(json, Feature.OrderedField);\n                //update-end--Author:scott -- Date:20211223 ----for\uff1a\u3010issues/3303\u3011restcontroller\u8fd4\u56dejson\u6570\u636e\u540ekey\u987a\u5e8f\u9519\u4e71 -----\n\n                //update-begin--Author:scott -- Date:20190603 ----for\uff1a\u89e3\u51b3\u7ee7\u627f\u5b9e\u4f53\u5b57\u6bb5\u65e0\u6cd5\u7ffb\u8bd1\u95ee\u9898------\n                //for (Field field : record.getClass().getDeclaredFields()) {\n                // \u904d\u5386\u6240\u6709\u5b57\u6bb5\uff0c\u628a\u5b57\u5178Code\u53d6\u51fa\u6765\uff0c\u653e\u5230 map \u91cc\n                for (Field field : oConvertUtils.getAllFields(record)) {\n                    String value = item.getString(field.getName());\n                    if (oConvertUtils.isEmpty(value)) {\n                        continue;\n                    }\n                //update-end--Author:scott  -- Date:20190603 ----for\uff1a\u89e3\u51b3\u7ee7\u627f\u5b9e\u4f53\u5b57\u6bb5\u65e0\u6cd5\u7ffb\u8bd1\u95ee\u9898------\n                    if (field.getAnnotation(Dict.class) != null) {\n                        if (!dictFieldList.contains(field)) {\n                            dictFieldList.add(field);\n                        }\n                        String code = field.getAnnotation(Dict.class).dicCode();\n                        String text = field.getAnnotation(Dict.class).dicText();\n                        String table = field.getAnnotation(Dict.class).dictTable();\n\n                        List<String> dataList;\n                        String dictCode = code;\n                        if (!StringUtils.isEmpty(table)) {\n                            dictCode = String.format(\"%s,%s,%s\", table, text, code);\n                        }\n                        dataList = dataListMap.computeIfAbsent(dictCode, k -> new ArrayList<>());\n                        this.listAddAllDeduplicate(dataList, Arrays.asList(value.split(\",\")));\n                    }\n                    //date\u7c7b\u578b\u9ed8\u8ba4\u8f6c\u6362string\u683c\u5f0f\u5316\u65e5\u671f\n                    //update-begin--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                    //if (JAVA_UTIL_DATE.equals(field.getType().getName())&&field.getAnnotation(JsonFormat.class)==null&&item.get(field.getName())!=null){\n                        //SimpleDateFormat aDate=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n                        // item.put(field.getName(), aDate.format(new Date((Long) item.get(field.getName()))));\n                    //}\n                    //update-end--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                }\n                items.add(item);\n            }\n\n            //step.2 \u8c03\u7528\u7ffb\u8bd1\u65b9\u6cd5\uff0c\u4e00\u6b21\u6027\u7ffb\u8bd1\n            Map<String, List<DictModel>> translText = this.translateAllDict(dataListMap);\n\n            //step.3 \u5c06\u7ffb\u8bd1\u7ed3\u679c\u586b\u5145\u5230\u8fd4\u56de\u7ed3\u679c\u91cc\n            for (JSONObject record : items) {\n                for (Field field : dictFieldList) {\n                    String code = field.getAnnotation(Dict.class).dicCode();\n                    String text = field.getAnnotation(Dict.class).dicText();\n                    String table = field.getAnnotation(Dict.class).dictTable();\n\n                    String fieldDictCode = code;\n                    if (!StringUtils.isEmpty(table)) {\n                        fieldDictCode = String.format(\"%s,%s,%s\", table, text, code);\n                    }\n\n                    String value = record.getString(field.getName());\n                    if (oConvertUtils.isNotEmpty(value)) {\n                        List<DictModel> dictModels = translText.get(fieldDictCode);\n                        if(dictModels==null || dictModels.size()==0){\n                            continue;\n                        }\n\n                        String textValue = this.translDictText(dictModels, value);\n                        log.debug(\" \u5b57\u5178Val : \" + textValue);\n                        log.debug(\" __\u7ffb\u8bd1\u5b57\u5178\u5b57\u6bb5__ \" + field.getName() + CommonConstant.DICT_TEXT_SUFFIX + \"\uff1a \" + textValue);\n\n                        // TODO-sun \u6d4b\u8bd5\u8f93\u51fa\uff0c\u5f85\u5220\n                        log.debug(\" ---- dictCode: \" + fieldDictCode);\n                        log.debug(\" ---- value: \" + value);\n                        log.debug(\" ----- text: \" + textValue);\n                        log.debug(\" ---- dictModels: \" + JSON.toJSONString(dictModels));\n\n                        record.put(field.getName() + CommonConstant.DICT_TEXT_SUFFIX, textValue);\n                    }\n                }\n            }\n\n            ((IPage) ((Result) result).getResult()).setRecords(items);\n        }\n\n    }\n    return result;\n}\n",
    "class_name": "DictAspect",
    "method_name": "parseDictText",
    "arguments": [
        "Object result"
    ],
    "generate_test": [
        "package org.jeecg.common.util;\n\nimport java.io.*;\nimport java.text.DecimalFormat;\n\n/**\n * \u5b57\u7b26\u4e32\u5de5\u5177\u7c7b\n */\npublic class StringUtil {\n    /**\n     * \u5c06\u5b9e\u4f53\u8f6c\u6362\u6210\u9a7c\u5cf0\u547d\u540d\n     * @param oldStr\n     * @return\n     */\n    public static String upperCaseToLowerCase(String oldStr){\n        if (oldStr.isEmpty() || null == oldStr) {\n            return \"\";\n        }\n        // \u9996\u5b57\u6bcd\u5c0f\u5199\n        oldStr = oldStr.substring(0,1).toUpperCase().concat(oldStr.substring(1));\n        StringBuffer sb = new StringBuffer();\n        // \u66ff\u6362 _\n        intIndexOfUnderline=0;\n        for (int i = 0; i < oldStr.length(); i++) {\n            char c = oldStr.charAt(i);\n            if (c == '_'){\n                sb.append(\" \");\n                continue;\n            }else if(c >= 'a' && c <= 'z'){\n                // \u5927\u5199\u8f6c\u5c0f\u5199\n                intIndexOfUppercase=getIndexOfUpperCase(oldStr,i);\n                char upperChar = oldStr.charAt(intIndexOfUppercase);\n                sb.append((upperChar+\"\").toLowerCase());\n                i=intIndexOfUppercase-1;\n            }else{\n                sb.append(c);\n            }\n        }\n\n        return sb.toString();\n    }\n\n    /**\n     * \u5c06\u9a7c\u5cf0\u547d\u540d\u8f6c\u6362\u6210\u5927\u5199\u547d\u540d\n     * @param oldStr\n     * @return\n     */\n    public static String lowerCaseToUpperCase(String oldStr){\n        if (oldStr.isEmpty() || null == oldStr) {\n            return \"\";\n        }\n        // \u9996\u5b57\u6bcd\u5927\u5199\n        oldStr = oldStr.substring(0,1).toLowerCase().concat(oldStr.substring(1));\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < oldStr.length(); i++) {\n            char c = oldStr.charAt(i);\n            if (c == ' ') {\n                // \u5927\u5199\u8f6c\u5c0f\u5199\n                intIndexOfUppercase=getIndexOfUpperCase(oldStr,i+1);\n                char upperChar = oldStr.charAt(intIndexOfUppercase);\n                sb.append((upperChar+\"\").toLowerCase());\n                i=intIndexOfUppercase-1;\n            }else{\n                sb.append(c);\n            }\n        }\n\n        return sb.toString();\n    }\n\n    /**\n     * \u83b7\u53d6\u5b57\u7b26\u4e32\u4e2d\u9996\u5b57\u6bcd\u5927\u5199\u7684\u4f4d\u7f6e\n     * @param oldStr\n     * @param i\n     * @return\n     */\n    private static int getIndexOfUpperCase(String oldStr,int i){\n        for (; i < oldStr.length(); i++) {\n            char c = oldStr.charAt(i);\n            if ((c >= 'A' && c <= 'Z')){\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * \u5c06\u9a7c\u5cf0\u547d\u540d\u8f6c\u6362\u6210\u5927\u5199\u547d\u540d\uff0c\u4ec5\u652f\u6301\u4e00\u7ea7\u9a7c\u5cf0\u547d\u540d\u7684\u8f6c\u6362\n     * @param oldStr\n     * @return\n     */\n    public static String firstCharToUpperCase(String oldStr){\n        if (oldStr.isEmpty() || null == oldStr) {\n            return \"\";\n        }\n        // \u9996\u5b57\u6bcd\u5927\u5199\n        oldStr = oldStr.substring(0,1).toUpperCase().concat(oldStr.substring(1));\n\n        return oldStr;\n    }\n}\n    \n\n### Response:",
        "public interface ICommonAPI {\n\t/**\n\t * \u7ffb\u8bd1\u8868\u5b57\u5178\n\t */\n\tpublic String translateTableDict(String table, String text, String code, String key) throws Exception;\n\n\t/**\n\t * \u7ffb\u8bd1\u666e\u901a\u5b57\u5178\n\t */\n\tpublic String translateDict(String code, String key) throws Exception;\n}\n    \n\n### Response:",
        "package com.jeecg.p3.core.page;\n\nimport java.io.Serializable;\nimport java.util.*;\n\n/**\n * @author Administrator\n */\n@SuppressWarnings(\"serial\")\npublic class PageQuery<T> implements Serializable {\n    /**\n     * \u5217\u8868\u6570\u636e\uff0c\u81ea\u52a8\u5206\u9875\u65f6\u4f7f\u7528\n     */\n    private List<T> result;\n    /**\n     * \u603b\u8bb0\u5f55\u6570\uff0c\u81ea\u52a8\u5206\u9875\u65f6\u4f7f\u7528\n     */\n    private Long totalCount = 0L;\n    /**\n     * \u5f53\u524d\u9875\u7801\n     */\n    public Integer pageNo = 1;\n    /**\n     * \u6bcf\u9875\u663e\u793a\u7684\u8bb0\u5f55\u6570\n     */\n\n\n\n### Response:",
        "package com.baomidou.mybatisplus.core.toolkit;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * \u96c6\u5408\u5de5\u5177\u7c7b\n *\n * @author hubin\n * @since 2016-01-27\n */\npublic class CollectionUtils {\n    /**\n     * \u65b0\u5efa\u4e00\u4e2a\u7a7a\u7684 ArrayList\n     */\n    public static <T> ArrayList<T> newArrayList() {\n        return new ArrayList<>();\n    }\n\n    /**\n     * \u65b0\u5efa\u4e00\u4e2a\u96c6\u5408\u5bf9\u8c61\uff0c\u63a8\u8350\u4f7f\u7528\n     *\n     * @param size \u521d\u59cb\u5316\u5927\u5c0f\n     */\n    public static <T> ArrayList<T> newArrayList(int size) {\n        return new ArrayList<>(size));\n    }\n\n    /**\n     * \u65b0\u5efa\u4e00\u4e2a\u53ea\u8bfb\u96c6\u5408\uff0c\u63d0\u5347\u6548\u7387\n     *\n     * @param set \u96c6\u5408\n     */\n\n    public static <T> ArrayList<T> newArrayList(Iterable<? extends T> set) {\n        return new ArrayList<>(set);\n    }\n\n    /**\n     * \u65b0\u5efa\u4e00\u4e2a\u53ea\u8bfb\u96c6\u5408\uff0c\u63d0\u5347\u6548\u7387\n     *\n     * @param ts \u6570\u7ec4\n     */\n\n    public static <T> ArrayList<T> newArrayList(T... ts) {\n        return new ArrayList<>(ts.length, 1, ts);\n    }\n\n    /**\n     * \u65b0\u5efa\u4e00\u4e2a\u53ea\u8bfb\u96c6\u5408\uff0c\u63d0\u5347\u6548\u7387\n     *\n     * @param set \u96c6\u5408\n     */\n\n    public static <T> ArrayList<T> newArrayListNoCopy(Iterable<? extends T> set) {\n        return new ArrayList<>(set);\n    }\n\n    /**\n     * \u65b0\u5efa\u4e00\u4e2a\u53ea\u8bfb\u96c6\u5408\uff0c\u63d0\u5347\u6548\u7387\n     *\n     * @param ts \u6570\u7ec4\n     */\n\n    public static <T> ArrayList<T> newArrayListNoCopy(T... ts) {\n        return new ArrayList<>(ts.length, 1, ts);\n    }\n\n    /**\n     * \u5224\u65ad\u5bf9\u8c61\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u96c6\u5408\u4e3a\u7a7a\uff0c\u8fd4\u56de true\n     */\n\n    public static boolean isEmpty(Collection<?> collection) {\n        return collection == null || collection.isEmpty();\n    }\n\n    /**\n     * \u5224\u65ad\u5bf9\u8c61\u662f\u5426\u975e\u7a7a\uff0c\u5982\u679c\u96c6\u5408\u975e\u7a7a\uff0c\u8fd4\u56de true\n     */\n\n    public static boolean isNotEmpty(Collection<?> collection) {\n        return !isEmpty(collection);\n    }\n\n    /**\n     * \u5c06\u591a\u4e2a\u6570\u7ec4\u8f6c\u6362\u4e3aArrayList\n     * \u7528\u4e8e\u53c2\u6570\u7ed1\u5b9a\u7684\u60c5\u51b5\uff0c\u4f8b\u5982\u65b9\u6cd5\u7684\u53c2\u6570\u5c31\u662f\u4e00\u4e2aArrayList\n     */\n\n    public static <T> ArrayList<T> asList(T... a) {\n        if (a == null) {\n            return new ArrayList<>();\n        } else {\n            int size = a.length;\n            List<T> list = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                list.add(a[i]);\n            }\n            return list;\n        }\n    }\n}\n    ",
        "package com.example.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport io.swagger.annotations.ApiOperation;\nimport lombok.extern.slf4j.Slf4j;\nimport org.jeecg.common.aspect.annotation.Dict;\nimport org.jeecg.modules.demo.test.entity.JeecgDemo;\nimport java.util.*;\nimport org.jeecg.common.api.vo.Result;\nimport com.example.controller.SysCommonController;\n\n@RestController\n@Slf4j\npublic class TestController {\n    @Autowired\n    private SysCommonController sysCommonController;\n    \n    @ApiOperation(\"\u6d4b\u8bd5\u5b57\u5178\")\n    @GetMapping(\"/testDict\")\n    public Result<JeecgDemo> testDict(@RequestParam JeecgDemo demo){\n        return Result.OK(demo);\n    }\n    \n    @ApiOperation(\"\u6d4b\u8bd5\u5b57\u51782\")\n    @PostMapping(\"/testDict2\")\n    public Result<JeecgDemo> testDict2(@RequestBody List<JeecgDemo> list){\n        // \u6ce8\u89e3\u65b9\u5f0f\u83b7\u53d6\u5b57\u5178\u503c\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6709\u4e9b\u4e0d\u4fbf\u6d4b\u8bd5\u3002\n    \t//return sysCommonController.getDataByType(list);\n        \n        // \u624b\u52a8\u8bbe\u7f6e\u5b57\u5178\u7801\u503c\u3002\n        for (JeecgDemo jeecgDemo : list) {\n            if (\"1\".equals(jeecgDemo.getName())){\n                jeecgDemo.setName(\"\u7537\");\n            }else if (\"0\".equals(jeecgDemo.getName())) {\n                jeecgDemo.setName(\"\u5973\");\n            }else{\n                log.error(\"\u6d4b\u8bd5\u5931\u8d25\uff0c\u8bf7\u5237\u65b0\u9875\u9762\u91cd\u8bd5\uff01\");\n            }\n        }\n        \n        return Result.OK(list);\n    }\n}",
        "package org.jeecg.common.aspect;\n\nimport java.lang.reflect.Field;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * @Description: \u5b57\u5178aop\u7c7b\n * @Author: scott\n * @Date:2020-10-26\n * @Version:V1.0\n */\npublic class DictAspect {\n    /**\n     * \u62e6\u622a\u7684\u65b9\u6cd5\n     *\n     * @param list\n     * @return\n     */\n    public <T> List<T> parseDictText(List<T> list) {\n        //update-begin--Author:scott  Date:20190805 for\uff1a\u6682\u672a\u4f7f\u7528\u5230\u7684\u5b57\u6bb5\u6dfb\u52a0\u5b57\u5178\u6ce8\u89e3\n        if (oConvertUtils.isEmpty(list)) {\n            return null;\n        }\n\n        List<T> newList = new ArrayList<>();\n        //update-begin--Author:szj  Date:20200312  for\uff1aTASK #2864 \u4ee3\u7801\u4f18\u5316\n        StringBuffer textValue = null;\n        //update-end--Author:szj  Date:20200312  for\uff1aTASK #2864 \u4ee3\u7801\u4f18\u5316\n        Map<String, DictModel> dictMap = null;\n\n        Class clazz = list.get(0).getClass();\n\n        //\u83b7\u53d6clazz\u7684\u6240\u6709\u5b57\u6bb5\n        Field[] fields = clazz.getDeclaredFields();\n\n        for (Field field : fields) {\n            if (oConvertUtils.isNotEmpty(field.getAnnotation(Dict.class))) {\n                Dict dict = field.getAnnotation(Dict.class);\n                //\u83b7\u53d6\u5b57\u5178\u7684type\n                String dictType = dict.dictType();\n                //\u83b7\u53d6\u5b57\u5178\u7684text\n                String dictText = dict.dictCode();\n\n                if (dictMap == null) {\n                    dictMap = new HashMap<>();\n                    dictMap.put(dictType + \":\" + dictText, new DictModel());\n                    for (T t : list) {\n                        //\u5c06\u5b57\u5178\u7684\u6570\u636e\u653e\u5230ThreadLocal\u4e2d\n                        DictUtils.setDictMap(dictMap);\n                        try {\n                            Field field1 = clazz.getDeclaredField(field.getName());\n                            if (oConvertUtils.isNotEmpty(field1)) {\n                                field1.setAccessible(true);\n                                field1.set(t, \"\");\n                            }\n                        } catch (Exception e) {\n                            //logger.error(\"\u5b57\u5178\u89e3\u6790\u51fa\u9519\",e);\n                            throw new RuntimeException(\"\u5b57\u5178\u89e3\u6790\u51fa\u9519!\");\n                        }\n                    }\n                } else {\n                    dictMap = DictUtils.getDictMap();\n                }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                 *\n\n\n\n\n            // Check.\n            <button>\n                </tr>\n                &nbsp;\n                &gt\n\\end{code}\n        &#\n\n\\begin{code}\n\n        \\item{}\\item{}}\n            &#4\n",
        "java\npackage org.jeecg.common.aspect;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.ibatis.javassist.*;\nimport org.apache.shiro.SecurityUtils;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.jeecg.common.api.CommonAPI;\nimport org.jeecg.common.api.vo.Result;\nimport org.jeecg.common.constant.CacheConstant;\nimport org.jeecg.common.system.base.JeecgMap;\nimport org.jeecg.common.util.SpringContextUtils;\nimport org.jeecg.common.util.MyBeanUtil;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport java.io.Serializable;\nimport java.lang.reflect.Method;\nimport java.util.*;\n\n/**\n * \u5b57\u5178\u5904\u7406\u7c7b\n */\n@Aspect\n@Slf4j\npublic class DictAspect {\n    @Autowired\n    private CommonAPI commonAPI;\n\n    /**\n     * \u62e6\u622a\u5207\u5165\u70b9\uff0c\u73af\u7ed5\u5207\u5165\u70b9\u524d\u6267\u884c\n     */\n    @Pointcut(\"execution(* org.jeecg.modules.*..controller.*Controller.*(..))\")\n    public void doBefore(){}\n\n    /**\n     * \u65b9\u6cd5\u6267\u884c\u540e\uff0c\u5207\u5165\u540e\u6267\u884c\n     *\n     * @param joinPoint\n     */\n    @After(\"doBefore()\")\n    public void doAfterReturning(JoinPoint joinPoint){\n        try {\n            // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237id\n            String userId = getUserId();\n            if (oConvertUtils.isEmpty(userId)) {\n                return;\n            }\n\n            Object[] args = joinPoint.getArgs();\n            for (Object arg : args) {\n                // \u83b7\u53d6\u76ee\u6807\u7c7b\u5bf9\u8c61\n                Method method = ((ProceedingJoinPoint) joinPoint).getSignature().getMethod();\n                Class targetClass = method.getDeclaringClass();\n\n                // \u904d\u5386\u6240\u6709\u53c2\u6570\n                for (Field field : targetClass.getDeclaredFields()) {\n                    Dict dictAnnotation = field.getAnnotation(Dict.class);\n                    if (dictAnnotation == null) {\n                        continue;\n                    }\n\n                    // \u83b7\u53d6\u5b9e\u4f53\u7c7b\u5bf9\u8c61\u6216Map\u5bf9\u8c61\n                    Object argValue = arg;\n                    if (!(arg instanceof JeecgMap)) {\n                        try {\n                            // \u5c06\u76ee\u6807\u7c7b\u8f6c\u6362\u4e3a\u5b57\u8282\u7801\uff0c\u56e0\u4e3a\u4f7f\u7528javassist\u751f\u6210\u4ee3\u7406\u7c7b\u5bf9\u8c61\n                            // https://blog.csdn.net/xiaoxiang19850/article/details/71649370\n                            Class<?> clazz = argValue.getClass();\n                            byte[] classByteCode = MyBeanUtil.toByteCode(clazz);\n                            CtClass pojoClass = CtClass.make(\"com.jeecg.pojo\", null, classByteCode);\n                            // \u751f\u6210\u4ee3\u7406\u7c7b\u5bf9\u8c61\n                            Object proxyObj = pojoClass.newInstance();\n                            proxyObj = CtField.set(proxyObj, field.getName(), argValue);\n\n                            // \u5c06\u5b57\u5178\u6570\u636e\u8f6c\u6362\u4e3aMap\u96c6\u5408\n                            String dictTable = dictAnnotation.dictTable();\n                            String dictText = dictAnnotation.dicText();\n                            String dictCode = dictAnnotation.dictCode();\n                            if (oConvertUtils.isNotEmpty(dictTable)) {\n                                Map<String, Serializable> dictMap = commonAPI.getSysAllDictByCodeAndName(userId, dictTable, dictText, dictCode);\n                                proxyObj = CtField.set(proxyObj, field.getName(), dictMap);\n                            } else {\n                                Map<String, Serializable> dictMap = commonAPI.getSysAllDictByCodeAndName(userId, dictTable, dictText, dictCode);\n                                proxyObj = CtField.set(proxyObj, field.getName(), dictMap);\n                            }\n\n                        } catch (Exception e) {\n                            log.error(\"\", e);\n                        }\n                    }\n                }\n            }\n        } catch (Throwable e) {\n            //log.error(e, \"\u5207\u5165\u540e\u6267\u884c\u5f02\u5e38\");\n        }\n    }\n\n    /**\n     * \u62e6\u622a\u5207\u5165\u70b9\uff0c\u73af\u7ed5\u5207\u5165\u70b9\u524d\u6267\u884c\n     */\n    @Pointcut(\"execution(* org.jeecg.modules.*..controller.*Controller.*(..))\")\n    public void doBefore(){}\n\n    /**\n     * \u65b9\u6cd5\u6267\u884c\u540e\uff0c\u5207\u5165\u540e\u6267\u884c\n     *\n     * @param joinPoint\n     */\n    @After(\"doBefore()\")\n    public void doAfterReturning(JoinPoint joinPoint){\n        try {\n            // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237id\n            String userId = getUserId();\n            if (oConvertUtils.isEmpty(userId)) {\n                return;\n            }\n\n            Object[] args = joinPoint.getArgs();\n            for (Object arg : args) {\n                // \u83b7\u53d6\u76ee\u6807\u7c7b\u5bf9\u8c61\n                Method method = ((ProceedingJoinPoint) joinPoint).getSignature().getMethod();\n                Class targetClass = method.getDeclaringClass();\n\n                // \u904d\u5386\u6240\u6709\u53c2\u6570\n                for (Field field : targetClass.getDeclaredFields()) {\n                    Dict dictAnnotation = field.getAnnotation(Dict.class);\n                    if (dictAnnotation == null) {\n                        continue;\n                    }\n\n                    // \u83b7\u53d6\u5b9e\u4f53\u7c7b\u5bf9\u8c61\u6216Map\u5bf9\u8c61\n                    Object argValue = arg;\n                    if (!(arg instanceof JeecgMap)) {\n                        try {\n                            // \u5c06\u76ee\u6807\u7c7b\u8f6c\u6362\u4e3a\u5b57\u8282\u7801\uff0c\u56e0\u4e3a\u4f7f\u7528javassist\u751f\u6210\u4ee3\u7406\u7c7b\u5bf9\u8c61\n                            // https://blog.csdn.net/xiaoxiang19850/article/details/71649370\n                            Class<?> clazz = argValue.getClass();\n                            byte[] classByteCode = MyBeanUtil.toByteCode(clazz);\n                            CtClass pojoClass = CtClass.make(\"com.jeecg.pojo\", null, classByteCode);\n                            // \u751f\u6210\u4ee3\u7406\u7c7b\u5bf9\u8c61\n                            Object proxyObj = pojoClass.newInstance();\n                            proxyObj = CtField.set(proxyObj, field.getName(), argValue);\n\n                            // \u5c06\u5b57\u5178\u6570\u636e\u8f6c\u6362\u4e3aMap\u96c6\u5408\n                            String dictTable = dictAnnotation.dictTable();\n                            String dictText = dictAnnotation.dicText();\n                            String dictCode = dictAnnotation.dictCode();\n                            if (oConvertUtils.isNotEmpty(dictTable)) {\n                                Map<String, Serializable> dictMap = commonAPI.getSysAllDictByCodeAndName(userId, dictTable, dictText, dictCode);\n                                proxyObj = CtField.set(proxyObj, field.getName(), dictMap);\n                            } else {\n                                Map<String, Serializable> dictMap = commonAPI.getSysAllDictByCodeAndName(userId, dictTable, dictText, dictCode);\n                                proxyObj = CtField.set(proxyObj, field.getName(), dictMap);\n                            }\n\n                        } catch (Exception e) {\n                            log.error(\"\", e);\n                        }\n                    }\n                }\n            }\n        } catch (Throwable e) {\n            //log.error(e, \"\u5207\u5165\u540e\u6267\u884c\u5f02\u5e38\");\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237id\n     */\n    private String getUserId() {\n        try {\n            HttpServletRequest request = MyServletUtil.getHttpServletRequest();\n            if (request != null) {\n                return MyServletUtil.getHeader(request, JwtConstant.USERID);\n            } else {\n                // \u672a\u767b\u5f55\u76f4\u63a5\u8fd4\u56de\u7a7a\u4e32\n                return \"\";\n            }\n        } catch (Exception e) {\n            log.error(\"\", e);\n        }\n        return null;\n    }\n}\n",
        "package com.jeecg.common;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Slf4j\npublic class CommonApi {\n    @Autowired\n    private RedisTemplate<String,Object> redisTemplate;\n    /**\n     * \u7ffb\u8bd1\u6570\u636e\u5b57\u5178\n     */\n    public String translateDict(String dictCode, String key) {\n        if (oConvertUtils.isEmpty(key)) {\n            return null;\n        }\n        log.debug(\"\u83b7\u53d6\u6570\u636e\u5b57\u5178\uff1a\"+dictCode+\" , \"+key);\n        try{\n            //update-begin--Author:scott Date:20210531 for\uff1a TASK #486 \u4f18\u5316\u5fae\u670d\u52a1\u5e94\u7528\u4e0b\u5b58\u5728\u8868\u5b57\u6bb5\u9700\u8981\u5b57\u5178\u7ffb\u8bd1\u7684\u95ee\u9898-----\n            String keyString = String.format(\"sys:cache:dict::SimpleKey [%s,%s]\", dictCode,key);\n            //update-begin--Author:scott Date:20210531 for\uff1a TASK #486 \u4f18\u5316\u5fae\u670d\u52a1\u5e94\u7528\u4e0b\u5b58\u5728\u8868\u5b57\u6bb5\u9700\u8981\u5b57\u5178\u7ffb\u8bd1\u7684\u95ee\u9898-----\n            if (redisTemplate.hasKey(keyString)){\n                return oConvertUtils.getString(redisTemplate.opsForValue().get(keyString));\n            }else{\n                String res = \"\u8c03\u7528\u5931\u8d25\uff0c\u672a\u80fd\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u6570\u636e\u5b57\u5178\";\n                log.error(res);\n                return res;\n            }\n        }catch (Exception e){\n            log.error(\"\u7ffb\u8bd1\u5b57\u5178\u6587\u4ef6\u65f6\u53d1\u751f\u5f02\u5e38\uff01\",e);\n            return null;\n        }\n    }\n    /**\n     * \u7ffb\u8bd1\u6570\u636e\u5b57\u5178(\u4ece\u8868\u4e2d\u83b7\u53d6)\n     */\n    public String translateDictFromTable(String table, String text, String code, String key){\n        if (oConvertUtils.isEmpty(key)) {\n            return null;\n        }\n        log.debug(\" \u7ffb\u8bd1\u6570\u636e\u5b57\u5178(\u4ece\u8868\u4e2d\u83b7\u53d6)\uff01table\uff1a\"+table+\" ,text\uff1a\"+text+\" ,code\uff1a\"+code+\" ,key\uff1a\"+key);\n        try{\n            String keyString = String.format(\"sys:cache:dictTable::SimpleKey [%s,%s,%s,%s]\",table,text,code,key);\n            if (redisTemplate.hasKey(keyString)){\n                return oConvertUtils.getString(redisTemplate.opsForValue().get(keyString));\n            }else{\n                String res = \"\u8c03\u7528\u5931\u8d25\uff0c\u672a\u80fd\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u6570\u636e\u5b57\u5178\";\n                log.error(res);\n                return res;\n            }\n        }catch (Exception e){\n            log.error(\"\u7ffb\u8bd1\u5b57\u5178\u6587\u4ef6\u65f6\u53d1\u751f\u5f02\u5e38\uff01\",e);\n            return null;\n        }\n    }\n}",
        "package com.example;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\npublic class Controller {\n    @GetMapping(\"/example\")\n    public ResponseEntity<Object> example() {\n        return new ResponseEntity<>(\"Example output\", HttpStatus.OK);\n    }\n}\n",
        "[\n    {\n        \"name\": \"DictAspect\",\n        \"baseName\": \"DictAspect\",\n        \"fields\": [\n            {\n                \"name\": \"parseDictText\",\n                \"wrapped\": true,\n                \"synthetic\": false,\n                \"enum\": false,\n                \"deprecated\": false,\n                \"annotations\": []\n            },\n            {\n                \"name\": \"translateManyDict\",\n                \"wrapped\": true,\n                \"synthetic\": false,\n                \"enum\": false,\n                \"deprecated\": false,\n                \"annotations\": [\n                    {\n                        \"name\": \"Deprecated\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"checkHasDict\",\n                \"wrapped\": true,\n                \"synthetic\": false,\n                \"enum\": false,\n                \"deprecated\": false,\n                \"annotations\": []\n            }\n        ],\n        \"methods\": [\n            {\n                \"name\": \"parseDictText\",\n                \"wrapped\": true,\n                \"synthetic\": false,\n                \"enum\": false,\n                \"deprecated\": false,\n                \"annotations\": []\n            },\n            {\n                \"name\": \"checkHasDict\",\n                \"wrapped\": true,\n                \"synthetic\": false,\n                \"enum\": false,\n                \"deprecated\": false,\n                \"annotations\": []\n            }\n        ],\n        \"constructors\": [\n            \n        ],\n        \"properties\": [],\n        \"classes\": [\n            {\n                \"name\": \"DictAspect\",\n                \"baseName\": \"DictAspect\",\n                \"fields\": [\n                    {\n                        \"name\": \"parseDictText\",\n                        \"wrapped\": true,\n                        \"synthetic\": false,\n                        \"enum\": false,\n                        \"deprecated\": false,\n                        \"annotations\": []\n                    },\n                    {\n                        \"name\": \"translateManyDict\",\n                        \"wrapped\": true,\n                        \"synthetic\": false,\n                        \"enum\": false,\n                        \"deprecated\": true,\n                        \"annotations\": [\n                            {\n                                \"name\": \"Deprecated\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"checkHasDict\",\n                        \"wrapped\": true,\n                        \"synthetic\": false,\n                        \"enum\": false,\n                        \"deprecated\": false,\n                        \"annotations\": []\n                    }\n                ],\n                \"methods\": [\n                    {\n                        \"name\": \"parseDictText\",\n                        \"wrapped\": true,\n                        \"synthetic\": false,\n                        \"enum\": false,\n                        \"deprecated\": false,\n                        \"annotations\": []\n                    },\n                    {\n                        \"name\": \"checkHasDict\",\n                        \"wrapped\": true,\n                        \"synthetic\": false,\n                        \"enum\": false,\n                        \"deprecated\": false,\n                        \"annotations\": []\n                    }\n                ],\n                \"constructors\": [\n                    \n                ],\n                \"properties\": [],\n                \"classes\": []\n            }\n        ]\n    }\n]"
    ]
}