{
    "project_name": "jeecg-boot",
    "file_name": "DictAspect.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/aspect/DictAspect.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.aspect",
    "docstring": "/**\n     * \u672c\u65b9\u6cd5\u9488\u5bf9\u8fd4\u56de\u5bf9\u8c61\u4e3aResult \u7684IPage\u7684\u5206\u9875\u5217\u8868\u6570\u636e\u8fdb\u884c\u52a8\u6001\u5b57\u5178\u6ce8\u5165\n     * \u5b57\u5178\u6ce8\u5165\u5b9e\u73b0 \u901a\u8fc7\u5bf9\u5b9e\u4f53\u7c7b\u6dfb\u52a0\u6ce8\u89e3@dict \u6765\u6807\u8bc6\u9700\u8981\u7684\u5b57\u5178\u5185\u5bb9,\u5b57\u5178\u5206\u4e3a\u5355\u5b57\u5178code\u5373\u53ef \uff0ctable\u5b57\u5178 code table text\u914d\u5408\u4f7f\u7528\u4e0e\u539f\u6765jeecg\u7684\u7528\u6cd5\u76f8\u540c\n     * \u793a\u4f8b\u4e3aSysUser   \u5b57\u6bb5\u4e3asex \u6dfb\u52a0\u4e86\u6ce8\u89e3@Dict(dicCode = \"sex\") \u4f1a\u5728\u5b57\u5178\u670d\u52a1\u7acb\u9a6c\u67e5\u51fa\u6765\u5bf9\u5e94\u7684text \u7136\u540e\u5728\u8bf7\u6c42list\u7684\u65f6\u5019\u5c06\u8fd9\u4e2a\u5b57\u5178text\uff0c\u5df2\u5b57\u6bb5\u540d\u79f0\u52a0_dictText\u5f62\u5f0f\u8fd4\u56de\u5230\u524d\u7aef\n     * \u4f8b\u8f93\u5165\u5f53\u524d\u8fd4\u56de\u503c\u7684\u5c31\u4f1a\u591a\u51fa\u4e00\u4e2asex_dictText\u5b57\u6bb5\n     * {\n     *      sex:1,\n     *      sex_dictText:\"\u7537\"\n     * }\n     * \u524d\u7aef\u76f4\u63a5\u53d6\u503csext_dictText\u5728table\u91cc\u9762\u65e0\u9700\u518d\u8fdb\u884c\u524d\u7aef\u7684\u5b57\u5178\u8f6c\u6362\u4e86\n     *  customRender:function (text) {\n     *               if(text==1){\n     *                 return \"\u7537\";\n     *               }else if(text==2){\n     *                 return \"\u5973\";\n     *               }else{\n     *                 return text;\n     *               }\n     *             }\n     *             \u76ee\u524dvue\u662f\u8fd9\u4e48\u8fdb\u884c\u5b57\u5178\u6e32\u67d3\u5230table\u4e0a\u7684\u591a\u4e86\u5c31\u5f88\u9ebb\u70e6\u4e86 \u8fd9\u4e2a\u76f4\u63a5\u5728\u670d\u52a1\u7aef\u6e32\u67d3\u5b8c\u6210\u524d\u7aef\u53ef\u4ee5\u76f4\u63a5\u7528\n     * @param result\n     */",
    "source_code": "\nprivate Object parseDictText(Object result) {\n    if (result instanceof Result) {\n        if (((Result) result).getResult() instanceof IPage) {\n            List<JSONObject> items = new ArrayList<>();\n\n            //step.1 \u7b5b\u9009\u51fa\u52a0\u4e86 Dict \u6ce8\u89e3\u7684\u5b57\u6bb5\u5217\u8868\n            List<Field> dictFieldList = new ArrayList<>();\n            // \u5b57\u5178\u6570\u636e\u5217\u8868\uff0c key = \u5b57\u5178code\uff0cvalue=\u6570\u636e\u5217\u8868\n            Map<String, List<String>> dataListMap = new HashMap<>(5);\n            //\u53d6\u51fa\u7ed3\u679c\u96c6\n            List<Object> records=((IPage) ((Result) result).getResult()).getRecords();\n            //update-begin--Author:zyf -- Date:20220606 ----for\uff1a\u3010VUEN-1230\u3011 \u5224\u65ad\u662f\u5426\u542b\u6709\u5b57\u5178\u6ce8\u89e3,\u6ca1\u6709\u6ce8\u89e3\u8fd4\u56de-----\n            Boolean hasDict= checkHasDict(records);\n            if(!hasDict){\n                return result;\n            }\n\n            log.debug(\" __ \u8fdb\u5165\u5b57\u5178\u7ffb\u8bd1\u5207\u9762 DictAspect \u2014\u2014 \" );\n            //update-end--Author:zyf -- Date:20220606 ----for\uff1a\u3010VUEN-1230\u3011 \u5224\u65ad\u662f\u5426\u542b\u6709\u5b57\u5178\u6ce8\u89e3,\u6ca1\u6709\u6ce8\u89e3\u8fd4\u56de-----\n            for (Object record : records) {\n                String json=\"{}\";\n                try {\n                    //update-begin--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                    //\u89e3\u51b3@JsonFormat\u6ce8\u89e3\u89e3\u6790\u4e0d\u4e86\u7684\u95ee\u9898\u8be6\u89c1SysAnnouncement\u7c7b\u7684@JsonFormat\n                     json = objectMapper.writeValueAsString(record);\n                    //update-end--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                } catch (JsonProcessingException e) {\n                    log.error(\"json\u89e3\u6790\u5931\u8d25\"+e.getMessage(),e);\n                }\n                //update-begin--Author:scott -- Date:20211223 ----for\uff1a\u3010issues/3303\u3011restcontroller\u8fd4\u56dejson\u6570\u636e\u540ekey\u987a\u5e8f\u9519\u4e71 -----\n                JSONObject item = JSONObject.parseObject(json, Feature.OrderedField);\n                //update-end--Author:scott -- Date:20211223 ----for\uff1a\u3010issues/3303\u3011restcontroller\u8fd4\u56dejson\u6570\u636e\u540ekey\u987a\u5e8f\u9519\u4e71 -----\n\n                //update-begin--Author:scott -- Date:20190603 ----for\uff1a\u89e3\u51b3\u7ee7\u627f\u5b9e\u4f53\u5b57\u6bb5\u65e0\u6cd5\u7ffb\u8bd1\u95ee\u9898------\n                //for (Field field : record.getClass().getDeclaredFields()) {\n                // \u904d\u5386\u6240\u6709\u5b57\u6bb5\uff0c\u628a\u5b57\u5178Code\u53d6\u51fa\u6765\uff0c\u653e\u5230 map \u91cc\n                for (Field field : oConvertUtils.getAllFields(record)) {\n                    String value = item.getString(field.getName());\n                    if (oConvertUtils.isEmpty(value)) {\n                        continue;\n                    }\n                //update-end--Author:scott  -- Date:20190603 ----for\uff1a\u89e3\u51b3\u7ee7\u627f\u5b9e\u4f53\u5b57\u6bb5\u65e0\u6cd5\u7ffb\u8bd1\u95ee\u9898------\n                    if (field.getAnnotation(Dict.class) != null) {\n                        if (!dictFieldList.contains(field)) {\n                            dictFieldList.add(field);\n                        }\n                        String code = field.getAnnotation(Dict.class).dicCode();\n                        String text = field.getAnnotation(Dict.class).dicText();\n                        String table = field.getAnnotation(Dict.class).dictTable();\n\n                        List<String> dataList;\n                        String dictCode = code;\n                        if (!StringUtils.isEmpty(table)) {\n                            dictCode = String.format(\"%s,%s,%s\", table, text, code);\n                        }\n                        dataList = dataListMap.computeIfAbsent(dictCode, k -> new ArrayList<>());\n                        this.listAddAllDeduplicate(dataList, Arrays.asList(value.split(\",\")));\n                    }\n                    //date\u7c7b\u578b\u9ed8\u8ba4\u8f6c\u6362string\u683c\u5f0f\u5316\u65e5\u671f\n                    //update-begin--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                    //if (JAVA_UTIL_DATE.equals(field.getType().getName())&&field.getAnnotation(JsonFormat.class)==null&&item.get(field.getName())!=null){\n                        //SimpleDateFormat aDate=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n                        // item.put(field.getName(), aDate.format(new Date((Long) item.get(field.getName()))));\n                    //}\n                    //update-end--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                }\n                items.add(item);\n            }\n\n            //step.2 \u8c03\u7528\u7ffb\u8bd1\u65b9\u6cd5\uff0c\u4e00\u6b21\u6027\u7ffb\u8bd1\n            Map<String, List<DictModel>> translText = this.translateAllDict(dataListMap);\n\n            //step.3 \u5c06\u7ffb\u8bd1\u7ed3\u679c\u586b\u5145\u5230\u8fd4\u56de\u7ed3\u679c\u91cc\n            for (JSONObject record : items) {\n                for (Field field : dictFieldList) {\n                    String code = field.getAnnotation(Dict.class).dicCode();\n                    String text = field.getAnnotation(Dict.class).dicText();\n                    String table = field.getAnnotation(Dict.class).dictTable();\n\n                    String fieldDictCode = code;\n                    if (!StringUtils.isEmpty(table)) {\n                        fieldDictCode = String.format(\"%s,%s,%s\", table, text, code);\n                    }\n\n                    String value = record.getString(field.getName());\n                    if (oConvertUtils.isNotEmpty(value)) {\n                        List<DictModel> dictModels = translText.get(fieldDictCode);\n                        if(dictModels==null || dictModels.size()==0){\n                            continue;\n                        }\n\n                        String textValue = this.translDictText(dictModels, value);\n                        log.debug(\" \u5b57\u5178Val : \" + textValue);\n                        log.debug(\" __\u7ffb\u8bd1\u5b57\u5178\u5b57\u6bb5__ \" + field.getName() + CommonConstant.DICT_TEXT_SUFFIX + \"\uff1a \" + textValue);\n\n                        // TODO-sun \u6d4b\u8bd5\u8f93\u51fa\uff0c\u5f85\u5220\n                        log.debug(\" ---- dictCode: \" + fieldDictCode);\n                        log.debug(\" ---- value: \" + value);\n                        log.debug(\" ----- text: \" + textValue);\n                        log.debug(\" ---- dictModels: \" + JSON.toJSONString(dictModels));\n\n                        record.put(field.getName() + CommonConstant.DICT_TEXT_SUFFIX, textValue);\n                    }\n                }\n            }\n\n            ((IPage) ((Result) result).getResult()).setRecords(items);\n        }\n\n    }\n    return result;\n}\n",
    "class_name": "DictAspect",
    "method_name": "parseDictText",
    "arguments": [
        "Object result"
    ],
    "generate_test": [
        "@Around(\"pointcut()\")\npublic Object doAround(ProceedingJoinPoint pjp) throws Throwable {\n    // \u6267\u884c\u65b9\u6cd5\n    Object result = pjp.proceed();\n\n    // step.1 \u9488\u5bf9\u8fd4\u56de\u7ed3\u679c\u8fdb\u884c\u8f6c\u6362\uff0c\u53ea\u652f\u6301 List<Map> \u683c\u5f0f\u6570\u636e\u7684\u8f6c\u6362\n    if (result instanceof Result) {\n        // \u5c01\u88c5\u8fd4\u56de\u503c\n        result = parseDictText(result);\n    }\n    return result;\n}\nprivate Object parseDictText(Object result) {\n    if (result instanceof Result && ((Result) result).getResult() instanceof IPage) {\n        <FILL>\n    }\n    return null;\n}\n    \n\n### Context:\npackage org.jeecg.common.aspect;\n\nimport com.alibaba.fastjson.JSON;\n\nimport com.alibaba.fastjson.JSONObject;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.aspectj.lang.ProceedingJoinPoint;\n\nimport org.aspectj.lang.annotation.Around;\n\nimport org.aspectj.lang.annotation.Aspect;\n\nimport org.aspectj.lang.annotation.Pointcut;\n\nimport org.jeecg.common.api.CommonAPI;\n\nimport org.jeecg.common.api.vo.Result;\n\nimport org.jeecg.common.aspect.annotation.Dict;\n\nimport org.jeecg.common.constant.CommonConstant;\n\nimport org.jeecg.common.util.oConvertUtils;\n\nimport java.lang.reflect.Field;\n\nimport java.util.*;\n\n@Slf4j\n@Aspect\npublic class DictAspect {\n    @Pointcut(\"execution(* com.jeecg.p3.controller.*.*(..))\")\n    public void before() {}\n}\n",
        "package org.jeecg.common.util;\n\nimport java.io.*;\n\n@Slf4j(topic = \"JeeCG\")\npublic class oConvertUtils {\n    public static String getCatalog(String url) {\n        return \"\";\n    }\n}\n    \n",
        "package io.kyligence.notebook.console.bean.dto;\n\nimport lombok.Data;\n\nimport java.util.List;\n\n@Data\npublic class DictInfo {\n    private String code;\n    private String text;\n    private String table;\n}\n    \n\n### Response:",
        "package org.jeecg.common.aspect;\n\nimport com.alibaba.fastjson.JSONObject;\n\nimport com.baomidou.mybatisplus.core.metadata.IPage;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.aspectj.lang.ProceedingJoinPoint;\n\nimport org.jeecg.common.api.CommonAPI;\n\nimport org.jeecg.common.api.vo.Result;\n\nimport org.jeecg.common.aspect.annotation.Dict;\n\nimport org.jeecg.common.constant.CommonConstant;\n\nimport org.jeecg.common.system.vo.DictModel;\n\nimport org.jeecg.common.util.oConvertUtils;\n\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport org.springframework.context.annotation.Lazy;\n\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport org.springframework.stereotype.Component;\n\n@Slf4j\npublic class DictAspect {\n    private CommonAPI commonApi;\n    public RedisTemplate redisTemplate;\n    private ObjectMapper objectMapper;\n    private final static String JAVA_UTIL_DATE;\n    public  excudeService();\n    public Object doAround(ProceedingJoinPoint pjp)throws Throwable {\n        <FILL>\n    }\n    private Object parseDictText(Object result);\n    private List<String> listAddAllDeduplicate(List<String> dataList, List<String> addList);\n    private Map<String, List<DictModel>> translateAllDict(Map<String, List<String>> dataListMap);\n    private String translDictValue(String code, String text, String table, String key);\n    private Boolean checkHasDict(List<Object> records);\n}\n    \n\n### Response:",
        "package $package;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RestController;\nimport java.util.*;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport $servicePackage.$entityServiceName;\nimport $mapperPackage.$entityMapperName;\n@RestController\n@RequestMapping(\"/\")\npublic class $controllerClassName {\n  @Autowired\n  private $entityServiceName $fieldName;\n  @GetMapping(\"\")\n  public List list(){\n    return this.$fieldName.list(new QueryWrapper<>());\n  }\n}\n    ",
        "package org.jeecg.common.aspect;\n\nimport com.alibaba.fastjson.JSONObject;\n\nimport com.baomidou.mybatisplus.core.metadata.IPage;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.lang.reflect.Field;\n\nimport java.util.*;\n\n/**\n * \u5b57\u5178aop\u6d4b\u8bd5\u7528\u4f8b\n */\n@Slf4j\npublic class DictAspectTest {\n    @Test\n    public void parseDictTextTest() {\n        //\u521d\u59cb\u5316\u6d4b\u8bd5\u6570\u636e\n        List<DictModel> dictModels = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            DictModel dictModel = new DictModel();\n            dictModel.setCode(i + \"\");\n            dictModel.setText(\"\u5b57\u5178\" + i);\n            dictModel.setValue(i * 2 + \"\");\n            dictModels.add(dictModel);\n        }\n\n        //\u521d\u59cb\u5316\u6d4b\u8bd5\u6570\u636e\n        List<Object> records = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            JSONObject jsonObject = new JSONObject();\n            jsonObject.put(\"status\", 1);\n            jsonObject.put(\"code\", i + \"\");\n            //\u6d4b\u8bd5\u6570\u636e\u5b57\u5178\u7801\u4e3a\"dictCode1\"\n            String dictCode1 = \"dictCode1\";\n            if (i < 3) {\n                jsonObject.put(dictCode1, i + \"\");\n            } else {\n                jsonObject.put(dictCode1, -1);\n            }\n            //\u6d4b\u8bd5\u6570\u636e\u5b57\u5178\u7801\u4e3a\"dictCode2\"\n            String dictCode2 = \"dictCode2\";\n            if (i < 3) {\n                jsonObject.put(dictCode2, i * 2 + \"\");\n            } else {\n                jsonObject.put(dictCode2, -1);\n            }\n            records.add(jsonObject);\n        }\n        //\u8c03\u7528\u65b9\u6cd5\n        DictAspect dictAspect = new DictAspect();\n        Object result = dictAspect.parseDictText(records);\n\n        assertNotNull(result);\n    }\n}",
        "package org.jeecg.common.system.vo;\n\nimport lombok.Data;\n\n/**\n * \u5b57\u5178\u6a21\u578b\n */\n@Data\npublic class DictModel {\n    /**\n     * \u5b57\u5178value\n     */\n    private String value;\n\n    /**\n     * \u5b57\u5178\u6587\u672c\n     */\n    private String text;\n}",
        "Timeout",
        "@Around(\"@annotation(com.demo.common.aop.annotation.DataScope)\")\npublic Object around(ProceedingJoinPoint pjp) throws Throwable {\n    // \u62e6\u622a\u7684\u65b9\u6cd5\u540d\u79f0\n    String methodName = pjp.getSignature().getName();\n    if (\"queryPageList\".equals(methodName)) {\n        return parseDictText(pjp.proceed());\n    }\n    return pjp.proceed();\n}\n\nprivate Object parseDictText(Object result) throws JsonProcessingException {\n    if (result instanceof Result && ((Result<?>) result).getResult() != null) {\n        Object page = ((Result<?>) result).getResult();\n        List<JSONObject> items = new ArrayList<>();\n        if (page instanceof IPage) {\n            List<Object> records = ((IPage) page).getRecords();\n            // \u83b7\u53d6\u5b57\u5178\u5b57\u6bb5\u4fe1\u606f\n            Field[] fields = records.get(0).getClass().getDeclaredFields();\n            Map<String, List<String>> dataListMap = new HashMap<>();\n            List<Field> dictFieldList = new ArrayList<>();\n            for (Field field : fields) {\n                // \u5224\u65ad\u662f\u5426\u5305\u542b Dict \u6ce8\u89e3\uff0c\u5982\u679c\u5305\u542b\u5219\u4e3a\u9700\u8981\u8fdb\u884c\u5b57\u5178\u7ffb\u8bd1\u7684\u5b57\u6bb5\n                if (field.getAnnotation(Dict.class) != null) {\n                    dictFieldList.add(field);\n                    String code = field.getAnnotation(Dict.class).dicCode();\n                    String text = field.getAnnotation(Dict.class).dicText();\n                    String table = field.getAnnotation(Dict.class).dictTable();\n                    String key = translateDictValue(code, text, table, dictKey);\n                    List<String> list = redisTemplate.opsForList(key);\n                    if (list != null && !list.isEmpty()) {\n                        dataListMap.put(field.getName(), list);\n                    } else {\n                        String dictDataJsonStr = redisTemplate.opsForValue(CommonConstant.DICT_DATA_JSON_KEY);\n                        // \u5b57\u5178\u6570\u636e\u4e3a\u7a7a\uff0c\u5219\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u5b57\u5178\u6570\u636e\u5e76\u5199\u5165\u5230\u7f13\u5b58\u4e2d\n                        if (dictDataJsonStr == null) {\n                            List<DictModel> dictList = commonApi.queryAllDict();\n                            for (DictModel dict : dictList) {\n                                redisTemplate.opsForValue(CommonConstant.DICT_DATA_JSON_KEY, objectMapper.writeValueAsString(dict));\n                                if (!org.apache.commons.lang3.StringUtils.equals(dict.getParentCode(), \"\")) {\n                                    // \u5982\u679c\u5f53\u524d\u5b57\u5178\u6709\u7236\u7ea7\uff0c\u5219\u9700\u8981\u9012\u5f52\u89e3\u6790\u7236\u7ea7\u7684code\u503c\n                                    String parentDictKey = translateDictValue(dict.getParentCode(), null, null);\n                                    // \u67e5\u8be2\u7236\u5b57\u5178\u7684\u6570\u636e\n                                    List<DictModel> parentDictList = redisTemplate.opsForList(parentDictKey);\n                                    for (DictModel parentDict : parentDictList) {\n                                        redisTemplate.opsForValue(parentDict.getCode(), objectMapper.writeValueAsString(parentDict));\n                                        // \u9012\u5f52\u89e3\u6790\u7236\u7ea7\u7684\u6570\u636e\n                                        List<DictModel> childrenDictList = commonApi.queryAllDictByParentCode(dict.getParentCode());\n                                        for (DictModel childrenDict : childrenDictList) {\n                                            redisTemplate.opsForValue(childrenDict.getCode(), objectMapper.writeValueAsString(childrenDict));\n                                        }\n                                    } else {\n                                        List<DictModel> childrenDictList = commonApi.queryAllDictByParentCode(dict.getCode());\n                                        for (DictModel childrenDict : childrenDictList) {\n                                            redisTemplate.opsForValue(childrenDict.getCode(), objectMapper.writeValueAsString(childrenDict));\n                                        }\n                                    }\n                                } else {\n                                    // \u5f53\u524d\u5b57\u5178\u6ca1\u6709\u7236\u7ea7\uff0c\u5219\u9700\u8981\u67e5\u8be2\u6240\u6709\u7684\u5b57\u5178\u6570\u636e\n                                    List<DictModel> allDictList = commonApi.queryAllDict();\n                                    for (DictModel dict : allDictList) {\n                                        redisTemplate.opsForValue(dict.getCode(), objectMapper.writeValueAsString(dict));\n                                    }\n                                }\n                            } else {\n                                List<JSONObject> jsonObj = JSONUtil.parseArray((String) dictDataJsonStr);\n                                for (JSONObject json : jsonObj) {\n                                    redisTemplate.opsForValue(json.getStr(\"code\"), objectMapper.writeValueAsString(json));\n                                }\n                            }\n                        }\n                    } else {\n                        // \u67e5\u8be2\u5f53\u524d\u5b57\u5178\u7684\u6570\u636e\n                        String dictDataKey = translateDictValue(code, text, table, dictKey);\n                        List<DictModel> dictList = redisTemplate.opsForList(dictDataKey);\n                        if (dictList != null && !dictList.isEmpty()) {\n                            for (DictModel dict : dictList) {\n                                redisTemplate.opsForValue(dict.getCode(), objectMapper.writeValueAsString(dict));\n                            }\n                        }\n                    }\n                } else if (field.getName().equals(\"parentIds\")) {\n                    // \u5c06parentIds\u5b57\u6bb5\u7684\u503c\u8bbe\u7f6e\u4e3a\u7a7a\u6570\u7ec4\n                    dictFieldMap.put(\"parentIds\", new ArrayList());\n                }\n            }\n\n            List<String> addList = new ArrayList<>();\n            for (JSONObject json : jsonObj) {\n                if (!org.apache.commons.lang3.StringUtils.equals(json.getStr(\"pid\"), \"\")) {\n                    // \u5982\u679c\u5f53\u524d\u5b57\u5178\u7684\u7236\u7f16\u53f7\u4e0d\u4e3a\u7a7a\uff0c\u5219\u9700\u8981\u5c06\u5f53\u524d\u5b57\u5178\u7684\u7236\u7f16\u53f7\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d\n                    addList.add(json.getStr(\"pid\"));\n                }\n            }\n\n            if (!org.apache.commons.lang3.StringUtils.equals(parentId, \"\")) {\n                // \u5982\u679c\u5f53\u524d\u5b57\u5178\u7684\u7236\u7f16\u53f7\u4e0d\u4e3a\u7a7a\uff0c\u5219\u9700\u8981\u5c06\u5f53\u524d\u5b57\u5178\u7684\u7236\u7f16\u53f7\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d\n                addList.add(parentId);\n            }\n        } catch (Exception e) {\n            log.error(\"\u67e5\u8be2\u6240\u6709\u5b57\u5178\u4fe1\u606f\u5f02\u5e38\uff1a{}\", e);\n            throw new DictServerException(DictResponseCode.DICT_SERVER_ERROR, \"\u67e5\u8be2\u6240\u6709\u5b57\u5178\u4fe1\u606f\u5f02\u5e38\");\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u6307\u5b9a\u7236\u8282\u70b9\u4e0b\u7684\u5168\u90e8\u5b57\u5178\u6570\u636e\n     * @param parentId \u7236\u8282\u70b9\u7f16\u53f7\n     * @return java.util.List<com.ruoyi.system.dict.domain.DictModel>\n     */\n    public List<JSONObject> selectDictTree(String parentId) {\n        //  \u5224\u65ad\u5f53\u524d\u7236\u8282\u70b9\u4e0b\u662f\u5426\u8fd8\u6709\u5b50\u8282\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u96c6\u5408\n        String sql = \"SELECT * FROM sys_dict WHERE pid = '\" + parentId + \"' ORDER BY dict_order ASC\";\n        try {\n            List<DictModel> list = commonApi.selectListBySql(sql, new DictModel());\n            if (list != null && !list.isEmpty()) {\n                for (DictModel model : list) {\n                    jsonObj.add(JSONUtil.parse(model));\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"\u83b7\u53d6\u6307\u5b9a\u7236\u8282\u70b9\u4e0b\u7684\u5168\u90e8\u5b57\u5178\u6570\u636e\u5f02\u5e38\uff1a{}\", e);\n            throw new DictServerException(DictResponseCode.DICT_SERVER_ERROR, \"\u67e5\u8be2\u6240\u6709\u5b57\u5178\u4fe1\u606f\u5f02\u5e38\");\n        }\n        return jsonObj;\n    }\n\n    /**\n     * \u6839\u636e\u5b57\u5178\u7c7b\u578b\u83b7\u53d6\u5bf9\u5e94\u7684\u5b57\u5178\u6570\u636e\u5217\u8868\n     * @param dictType \u5b57\u5178\u7c7b\u578b\n     * @return java.util.List<com.ruoyi.system.dict.domain.DictModel>\n     */\n    public List<JSONObject> selectDictTreeByType(String dictType) {\n        JSONObject jsonObj = new JSONObject();\n        String sql = \"SELECT * FROM sys_dict WHERE dict_type = '\" + dictType + \"' ORDER BY dict_order ASC\";\n        try {\n            List<DictModel> list = commonApi.selectListBySql(sql, new DictModel());\n            if (list != null && !list.isEmpty()) {\n                for (DictModel model : list) {\n                    jsonObj.add(JSONUtil.parse(model));\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"\u6839\u636e\u5b57\u5178\u7c7b\u578b\u83b7\u53d6\u5bf9\u5e94\u7684\u5b57\u5178\u6570\u636e\u5217\u8868\u5f02\u5e38\uff1a{}\", e);\n            throw new DictServerException(DictResponseCode.DICT_SERVER_ERROR, \"\u67e5\u8be2\u6240\u6709\u5b57\u5178\u4fe1\u606f\u5f02\u5e38\");\n        }\n        return jsonObj;\n    }\n}",
        "package org.jeecg.common.aspect;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.stereotype.Component;\n\n/**\n * redis \u7f13\u5b58service\n */\n@Slf4j\n@Component\npublic class RedisService {\n    private RedisTemplate<String, Object> redisTemplate;\n\n    @Autowired\n    public void setRedisTemplate(RedisTemplate<String, Object> redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n}\n    \n\n### Context:\npackage org.jeecg.common.aspect;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.stereotype.Component;\n\n/**\n * redis \u7f13\u5b58service\n */\n@Slf4j\n@Component\npublic class RedisService {\n    private RedisTemplate<String, Object> redisTemplate;\n\n    @Autowired\n    public void setRedisTemplate(RedisTemplate<String, Object> redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n}\n    \n\n### JUNIT Test case:\npackage org.jeecg.common.aspect;\n\nimport org.junit.jupiter.api.*;\npublic class RedisServiceTest {\n    @BeforeAll\n    public static void setUp() {\n        <FILL>\n    }\n}"
    ]
}