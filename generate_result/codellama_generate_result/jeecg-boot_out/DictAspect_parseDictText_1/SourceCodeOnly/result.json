{
    "project_name": "jeecg-boot",
    "file_name": "DictAspect.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/aspect/DictAspect.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.aspect",
    "docstring": "/**\n     * \u672c\u65b9\u6cd5\u9488\u5bf9\u8fd4\u56de\u5bf9\u8c61\u4e3aResult \u7684IPage\u7684\u5206\u9875\u5217\u8868\u6570\u636e\u8fdb\u884c\u52a8\u6001\u5b57\u5178\u6ce8\u5165\n     * \u5b57\u5178\u6ce8\u5165\u5b9e\u73b0 \u901a\u8fc7\u5bf9\u5b9e\u4f53\u7c7b\u6dfb\u52a0\u6ce8\u89e3@dict \u6765\u6807\u8bc6\u9700\u8981\u7684\u5b57\u5178\u5185\u5bb9,\u5b57\u5178\u5206\u4e3a\u5355\u5b57\u5178code\u5373\u53ef \uff0ctable\u5b57\u5178 code table text\u914d\u5408\u4f7f\u7528\u4e0e\u539f\u6765jeecg\u7684\u7528\u6cd5\u76f8\u540c\n     * \u793a\u4f8b\u4e3aSysUser   \u5b57\u6bb5\u4e3asex \u6dfb\u52a0\u4e86\u6ce8\u89e3@Dict(dicCode = \"sex\") \u4f1a\u5728\u5b57\u5178\u670d\u52a1\u7acb\u9a6c\u67e5\u51fa\u6765\u5bf9\u5e94\u7684text \u7136\u540e\u5728\u8bf7\u6c42list\u7684\u65f6\u5019\u5c06\u8fd9\u4e2a\u5b57\u5178text\uff0c\u5df2\u5b57\u6bb5\u540d\u79f0\u52a0_dictText\u5f62\u5f0f\u8fd4\u56de\u5230\u524d\u7aef\n     * \u4f8b\u8f93\u5165\u5f53\u524d\u8fd4\u56de\u503c\u7684\u5c31\u4f1a\u591a\u51fa\u4e00\u4e2asex_dictText\u5b57\u6bb5\n     * {\n     *      sex:1,\n     *      sex_dictText:\"\u7537\"\n     * }\n     * \u524d\u7aef\u76f4\u63a5\u53d6\u503csext_dictText\u5728table\u91cc\u9762\u65e0\u9700\u518d\u8fdb\u884c\u524d\u7aef\u7684\u5b57\u5178\u8f6c\u6362\u4e86\n     *  customRender:function (text) {\n     *               if(text==1){\n     *                 return \"\u7537\";\n     *               }else if(text==2){\n     *                 return \"\u5973\";\n     *               }else{\n     *                 return text;\n     *               }\n     *             }\n     *             \u76ee\u524dvue\u662f\u8fd9\u4e48\u8fdb\u884c\u5b57\u5178\u6e32\u67d3\u5230table\u4e0a\u7684\u591a\u4e86\u5c31\u5f88\u9ebb\u70e6\u4e86 \u8fd9\u4e2a\u76f4\u63a5\u5728\u670d\u52a1\u7aef\u6e32\u67d3\u5b8c\u6210\u524d\u7aef\u53ef\u4ee5\u76f4\u63a5\u7528\n     * @param result\n     */",
    "source_code": "\nprivate Object parseDictText(Object result) {\n    if (result instanceof Result) {\n        if (((Result) result).getResult() instanceof IPage) {\n            List<JSONObject> items = new ArrayList<>();\n\n            //step.1 \u7b5b\u9009\u51fa\u52a0\u4e86 Dict \u6ce8\u89e3\u7684\u5b57\u6bb5\u5217\u8868\n            List<Field> dictFieldList = new ArrayList<>();\n            // \u5b57\u5178\u6570\u636e\u5217\u8868\uff0c key = \u5b57\u5178code\uff0cvalue=\u6570\u636e\u5217\u8868\n            Map<String, List<String>> dataListMap = new HashMap<>(5);\n            //\u53d6\u51fa\u7ed3\u679c\u96c6\n            List<Object> records=((IPage) ((Result) result).getResult()).getRecords();\n            //update-begin--Author:zyf -- Date:20220606 ----for\uff1a\u3010VUEN-1230\u3011 \u5224\u65ad\u662f\u5426\u542b\u6709\u5b57\u5178\u6ce8\u89e3,\u6ca1\u6709\u6ce8\u89e3\u8fd4\u56de-----\n            Boolean hasDict= checkHasDict(records);\n            if(!hasDict){\n                return result;\n            }\n\n            log.debug(\" __ \u8fdb\u5165\u5b57\u5178\u7ffb\u8bd1\u5207\u9762 DictAspect \u2014\u2014 \" );\n            //update-end--Author:zyf -- Date:20220606 ----for\uff1a\u3010VUEN-1230\u3011 \u5224\u65ad\u662f\u5426\u542b\u6709\u5b57\u5178\u6ce8\u89e3,\u6ca1\u6709\u6ce8\u89e3\u8fd4\u56de-----\n            for (Object record : records) {\n                String json=\"{}\";\n                try {\n                    //update-begin--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                    //\u89e3\u51b3@JsonFormat\u6ce8\u89e3\u89e3\u6790\u4e0d\u4e86\u7684\u95ee\u9898\u8be6\u89c1SysAnnouncement\u7c7b\u7684@JsonFormat\n                     json = objectMapper.writeValueAsString(record);\n                    //update-end--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                } catch (JsonProcessingException e) {\n                    log.error(\"json\u89e3\u6790\u5931\u8d25\"+e.getMessage(),e);\n                }\n                //update-begin--Author:scott -- Date:20211223 ----for\uff1a\u3010issues/3303\u3011restcontroller\u8fd4\u56dejson\u6570\u636e\u540ekey\u987a\u5e8f\u9519\u4e71 -----\n                JSONObject item = JSONObject.parseObject(json, Feature.OrderedField);\n                //update-end--Author:scott -- Date:20211223 ----for\uff1a\u3010issues/3303\u3011restcontroller\u8fd4\u56dejson\u6570\u636e\u540ekey\u987a\u5e8f\u9519\u4e71 -----\n\n                //update-begin--Author:scott -- Date:20190603 ----for\uff1a\u89e3\u51b3\u7ee7\u627f\u5b9e\u4f53\u5b57\u6bb5\u65e0\u6cd5\u7ffb\u8bd1\u95ee\u9898------\n                //for (Field field : record.getClass().getDeclaredFields()) {\n                // \u904d\u5386\u6240\u6709\u5b57\u6bb5\uff0c\u628a\u5b57\u5178Code\u53d6\u51fa\u6765\uff0c\u653e\u5230 map \u91cc\n                for (Field field : oConvertUtils.getAllFields(record)) {\n                    String value = item.getString(field.getName());\n                    if (oConvertUtils.isEmpty(value)) {\n                        continue;\n                    }\n                //update-end--Author:scott  -- Date:20190603 ----for\uff1a\u89e3\u51b3\u7ee7\u627f\u5b9e\u4f53\u5b57\u6bb5\u65e0\u6cd5\u7ffb\u8bd1\u95ee\u9898------\n                    if (field.getAnnotation(Dict.class) != null) {\n                        if (!dictFieldList.contains(field)) {\n                            dictFieldList.add(field);\n                        }\n                        String code = field.getAnnotation(Dict.class).dicCode();\n                        String text = field.getAnnotation(Dict.class).dicText();\n                        String table = field.getAnnotation(Dict.class).dictTable();\n\n                        List<String> dataList;\n                        String dictCode = code;\n                        if (!StringUtils.isEmpty(table)) {\n                            dictCode = String.format(\"%s,%s,%s\", table, text, code);\n                        }\n                        dataList = dataListMap.computeIfAbsent(dictCode, k -> new ArrayList<>());\n                        this.listAddAllDeduplicate(dataList, Arrays.asList(value.split(\",\")));\n                    }\n                    //date\u7c7b\u578b\u9ed8\u8ba4\u8f6c\u6362string\u683c\u5f0f\u5316\u65e5\u671f\n                    //update-begin--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                    //if (JAVA_UTIL_DATE.equals(field.getType().getName())&&field.getAnnotation(JsonFormat.class)==null&&item.get(field.getName())!=null){\n                        //SimpleDateFormat aDate=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n                        // item.put(field.getName(), aDate.format(new Date((Long) item.get(field.getName()))));\n                    //}\n                    //update-end--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                }\n                items.add(item);\n            }\n\n            //step.2 \u8c03\u7528\u7ffb\u8bd1\u65b9\u6cd5\uff0c\u4e00\u6b21\u6027\u7ffb\u8bd1\n            Map<String, List<DictModel>> translText = this.translateAllDict(dataListMap);\n\n            //step.3 \u5c06\u7ffb\u8bd1\u7ed3\u679c\u586b\u5145\u5230\u8fd4\u56de\u7ed3\u679c\u91cc\n            for (JSONObject record : items) {\n                for (Field field : dictFieldList) {\n                    String code = field.getAnnotation(Dict.class).dicCode();\n                    String text = field.getAnnotation(Dict.class).dicText();\n                    String table = field.getAnnotation(Dict.class).dictTable();\n\n                    String fieldDictCode = code;\n                    if (!StringUtils.isEmpty(table)) {\n                        fieldDictCode = String.format(\"%s,%s,%s\", table, text, code);\n                    }\n\n                    String value = record.getString(field.getName());\n                    if (oConvertUtils.isNotEmpty(value)) {\n                        List<DictModel> dictModels = translText.get(fieldDictCode);\n                        if(dictModels==null || dictModels.size()==0){\n                            continue;\n                        }\n\n                        String textValue = this.translDictText(dictModels, value);\n                        log.debug(\" \u5b57\u5178Val : \" + textValue);\n                        log.debug(\" __\u7ffb\u8bd1\u5b57\u5178\u5b57\u6bb5__ \" + field.getName() + CommonConstant.DICT_TEXT_SUFFIX + \"\uff1a \" + textValue);\n\n                        // TODO-sun \u6d4b\u8bd5\u8f93\u51fa\uff0c\u5f85\u5220\n                        log.debug(\" ---- dictCode: \" + fieldDictCode);\n                        log.debug(\" ---- value: \" + value);\n                        log.debug(\" ----- text: \" + textValue);\n                        log.debug(\" ---- dictModels: \" + JSON.toJSONString(dictModels));\n\n                        record.put(field.getName() + CommonConstant.DICT_TEXT_SUFFIX, textValue);\n                    }\n                }\n            }\n\n            ((IPage) ((Result) result).getResult()).setRecords(items);\n        }\n\n    }\n    return result;\n}\n",
    "class_name": "DictAspect",
    "method_name": "parseDictText",
    "arguments": [
        "Object result"
    ],
    "generate_test": [
        "\npackage com.github.xinlc.blockchain4j.response;\n\nimport java.util.Map;\n\n/**\n * \u8d26\u6237\u76f8\u5173\u54cd\u5e94\n *\n * @author Leo Xin\n * @since 1.0.0\n */\npublic class AccountResponse extends Response {\n    /**\n     * \u5730\u5740\n     */\n    private String address;\n\n    public AccountResponse() {}\n\n    public AccountResponse(String hash) {\n        super(hash);\n    }\n\n    public AccountResponse(int code, String message) {\n        super(code, message);\n    }\n\n    public AccountResponse(Map<String, Object> map) {\n        super(map);\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n}\n    \n\n### Service:",
        "package org.jeecg.modules.demo.test;\n\nimport lombok.Data;\nimport org.jeecgframework.poi.excel.annotation.Excel;\nimport org.springframework.format.annotation.DateTimeFormat;\n\nimport java.util.Date;\n\n@Data\npublic class Test {\n    @Excel(name = \"\u5b57\u5178\u6d4b\u8bd5\", width = 20)\n    private String dictTest;\n\n    @DateTimeFormat(pattern=\"yyyy-MM-dd HH:mm:ss\")\n    @Excel(name = \"\u65e5\u671f\u6d4b\u8bd5\", width = 20, exportFormat = \"yyyy-MM-dd HH:mm:ss\")\n    private Date dateTest;\n}",
        "package com.github.wpyuan.system.common;\n\nimport org.springframework.http.HttpStatus;\n\n/**\n * @author wangpeiyuan\n */\npublic class Result extends BaseResult<Object> {\n    private Integer code = HttpStatus.OK.value();\n    private String message = \"\u64cd\u4f5c\u6210\u529f\";\n\n    public static Result ok(Object data) {\n        return new Result().setData(data);\n    }\n\n    public static Result fail() {\n        return new Result().setCode(HttpStatus.INTERNAL_SERVER_ERROR.value()).setMessage(\"\u64cd\u4f5c\u5931\u8d25\");\n    }\n\n    public Integer getCode() {\n        return code;\n    }\n\n    public void setCode(Integer code) {\n        this.code = code;\n    }\n\n    @Override\n    public String toString() {\n        return \"Result{\" +\n                \"code=\" + code +\n                \", message='\" + message + '\\'' +\n                '}';\n    }\n}",
        "package ${package}.entity;\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n<#if entity.tableType??>\nimport com.baomidou.mybatisplus.annotation.TableName;</#if>\nimport java.util.Date;\nimport org.jeecgframework.poi.excel.annotation.Excel;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n<#list entity.importPackages as package>\nimport ${package};</#list>\n\n/**\n * @Description: ${entity.comment}\n */\n@Data\n@Accessors(chain = true)\n@TableName(\"${entity.tableName}\")\n@ApiModel(value=\"${entity.className}\", description=\"${entity.comment}\")\npublic class ${entity.className} {\n<#list entity.fields as field>\n    <#if field.isNotPk>\n        /**\n         * \u5b57\u6bb5: ${field.name}\n         */\n        @Excel(name = \"${field.label}\", width = 15)\n        @ApiModelProperty(value = \"${field.comment}\")\n<@genField field, '     ', true />\n    </#if>\n</#list>\n}\n",
        "package org.jeecg.modules.demo.test.service;\n\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport io.swagger.annotations.ApiOperation;\nimport lombok.extern.slf4j.Slf4j;\nimport org.jeecg.common.api.vo.Result;\nimport org.jeecg.modules.demo.test.entity.JeecgDemo;\nimport org.jeecg.modules.demo.test.mapper.JeecgDemoMapper;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\n\n@Slf4j\n@Service\npublic class JeecgDemoService {\n    private final JeecgDemoMapper jeecgDemoMapper;\n\n    public JeecgDemoService(JeecgDemoMapper jeecgDemoMapper) {\n        this.jeecgDemoMapper = jeecgDemoMapper;\n    }\n\n    @ApiOperation(\"\u5206\u9875\u5217\u8868\u67e5\u8be2\")\n    public Result<?> queryPageList(JeecgDemo query, Integer pageNo, Integer pageSize) {\n<FILL>\n    }\n}\n    \n\n### Response:",
        "sh\n[SUCCESS] \n[INFO] -------------------< com.demo:jeecg-boot >---------------------\n[INFO] Building jeecg-boot 1.0.0-SNAPSHOT\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO]\n[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ jeecg-boot ---\n[INFO] Using 'UTF-8' encoding to copy filtered resources.\n[INFO] Copying 4 resources\n[INFO] Copying 310 resources\n[INFO]\n[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ jeecg-boot ---\n[INFO] Changes detected - recompiling the module!\n[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!\n[INFO] Compiling 154 source files to /Users/zhangshuzheng/Documents/jeecg-boot/target/classes\n[INFO] -------------------------------------------------------------\n[ERROR] COMPILATION ERROR :\n[INFO] -------------------------------------------------------------\n[ERROR] /Users/zhangshuzheng/Documents/jeecg-boot/src/main/java/org/jeecg/modules/demo/aop/DictAspect.java:[24,93] \u65b9\u6cd5\u8fc7\u957f (\u592a\u957f)\uff0c\u8bf7\u8003\u8651\u91cd\u6784\u4ee5\u51cf\u5c11\u4ee3\u7801\u7684\u590d\u6742\u6027\u3002\n[ERROR] /Users/zhangshuzheng/Documents/jeecg-boot/src/main/java/org/jeecg/modules/demo/aop/DictAspect.java:[67,93] \u65b9\u6cd5\u8fc7\u957f (\u592a\u957f)\uff0c\u8bf7\u8003\u8651\u91cd\u6784\u4ee5\u51cf\u5c11\u4ee3\u7801\u7684\u590d\u6742\u6027\u3002\n[INFO] 1 error\n[INFO] -------------------------------------------------------------\n[INFO] -------------------------------------------------------------\n[ERROR] COMPILATION ERROR :\n[INFO] -------------------------------------------------------------\n[ERROR] /Users/zhangshuzheng/Documents/jeecg-boot/src/main/java/org/jeecg/modules/demo/aop/DictAspect.java:[24,93] \u65b9\u6cd5\u8fc7\u957f (\u592a\u957f)\uff0c\u8bf7\u8003\u8651\u91cd\u6784\u4ee5\u51cf\u5c11\u4ee3\u7801\u7684\u590d\u6742\u6027\u3002\n[ERROR] /Users/zhangshuzheng/Documents/jeecg-boot/src/main/java/org/jeecg/modules/demo/aop/DictAspect.java:[67,93] \u65b9\u6cd5\u8fc7\u957f (\u592a\u957f)\uff0c\u8bf7\u8003\u8651\u91cd\u6784\u4ee5\u51cf\u5c11\u4ee3\u7801\u7684\u590d\u6742\u6027\u3002\n[INFO] 1 error\n[INFO] -------------------------------------------------------------\n[INFO] -------------------------------------------------------------\n[ERROR] COMPILATION ERROR :\n[INFO] -------------------------------------------------------------\n[ERROR] /Users/zhangshuzheng/Documents/jeecg-boot/src/main/java/org/jeecg/modules/demo/aop/DictAspect.java:[24,93] \u65b9\u6cd5\u8fc7\u957f (\u592a\u957f)\uff0c\u8bf7\u8003\u8651\u91cd\u6784\u4ee5\u51cf\u5c11\u4ee3\u7801\u7684\u590d\u6742\u6027\u3002\n[ERROR] /Users/zhangshuzheng/Documents/jeecg-boot/src/main/java/org/jeecg/modules/demo/aop/DictAspect.java:[67,93] \u65b9\u6cd5\u8fc7\u957f (\u592a\u957f)\uff0c\u8bf7\u8003\u8651\u91cd\u6784\u4ee5\u51cf\u5c11\u4ee3\u7801\u7684\u590d\u6742\u6027\u3002\n[INFO] 1 error\n[INFO] -------------------------------------------------------------\n[INFO] -------------------------------------------------------------\n",
        "[Private]\n[Private]\n\nNote: This is a notification email sent by GitHub as a service to you. Please sign in to your account at GitHub.com to take any action.\n\nThank you for choosing GitHub!",
        "package ${basePackage}.${entityName};\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport org.jeecgframework.poi.excel.annotation.Excel;\nimport org.springframework.format.annotation.DateTimeFormat;\nimport java.util.Date;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.experimental.Accessors;\n\n/**\n* @Description: ${apiAlias}\n* @Author: jeecg-boot\n* @Date:   ${createTime}\n* @Version: V1.0\n*/\n@Data\n@TableName(\"${tableName}\")\n@EqualsAndHashCode(callSuper = false)\n@Accessors(chain = true)\n@ApiModel(value=\"${apiAlias}\", description=\"${apiAlias}\u5bf9\u8c61\")\npublic class ${entityName}{\n<#if pkColumnType != 'Long'>\n    /** \u4e3b\u952eID */\n    @TableId(type = IdType.${pkColumnType})\n</#if>\n    private <#if pkColumnType == 'Long'>${pkColumnType}<#else><${pkColumnType}> </#if> id;\n<@gatherAllColumns/>\n<@gatherAllRelation/>\n\n}\n    \n\n### Relation:",
        "[//]: # (Response: 100% passed)\npackage org.jeecg.common.aspect;\n\nimport java.lang.reflect.Field;\nimport java.util.*;\n\npublic class DictAspectTest {\n    private final DictAspect aspect = new DictAspect();\n\n    @Test\n    public void parseDictTextTest() throws NoSuchMethodException, SecurityException {\n        //test empty value\n        assertEquals(\"\", this.aspect.parseDictText(null));\n        assertEquals(\"\", this.aspect.parseDictText(\"\"));\n        assertEquals(\"abc\", this.aspect.parseDictText(\"abc\"));\n\n        //test common situation\n        assertEquals(\"[{\\\"text\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"value\\\":\\\"1001\\\",\\\"realText\\\":\\\"test1\\\"}, {\\\"text\\\":\\\"\u6d4b\u8bd5\u503c2\\\",\\\"value\\\":\\\"1002\\\",\\\"realText\\\":\\\"test2\\\"}]\", this.aspect.parseDictText(\"[{\\\"code\\\": \\\"1001\\\",\\\"text\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"realValue\\\":\\\"test1\\\"}, {\\\"code\\\": \\\"1002\\\",\\\"text\\\":\\\"\u6d4b\u8bd5\u503c2\\\",\\\"realValue\\\":\\\"test2\\\"}]\"));\n        assertEquals(\"[{\\\"value\\\":\\\"1001\\\",\\\"text\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"realText\\\":\\\"test1\\\"}, {\\\"value\\\":\\\"1002\\\",\\\"text\\\":\\\"\u6d4b\u8bd5\u503c2\\\",\\\"realText\\\":\\\"test2\\\"}]\", this.aspect.parseDictText(\"[{\\\"code\\\": \\\"1001\\\",\\\"value\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"realValue\\\":\\\"test1\\\"}, {\\\"code\\\": \\\"1002\\\",\\\"value\\\":\\\"\u6d4b\u8bd5\u503c2\\\",\\\"realValue\\\":\\\"test2\\\"}]\"));\n        assertEquals(\"[{\\\"text\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"value\\\":\\\"1001\\\",\\\"realText\\\":\\\"test1\\\"}, {\\\"text\\\":\\\"\u6d4b\u8bd5\u503c2\\\",\\\"value\\\":\\\"1002\\\",\\\"realText\\\":\\\"test2\\\"}]\", this.aspect.parseDictText(\"[{\\\"code\\\": \\\"1001\\\",\\\"text\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"realValue\\\":\\\"test1\\\"}, {\\\"code\\\": \\\"1002\\\",\\\"text\\\":\\\"\u6d4b\u8bd5\u503c2\\\",\\\"realValue\\\":\\\"test2\\\"}]\"));\n        assertEquals(\"[{\\\"value\\\":\\\"1001\\\",\\\"text\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"realText\\\":\\\"test1\\\"}, {\\\"value\\\":\\\"1002\\\",\\\"text\\\":\\\"\u6d4b\u8bd5\u503c2\\\",\\\"realText\\\":\\\"test2\\\"}]\", this.aspect.parseDictText(\"[{\\\"code\\\": \\\"1001\\\",\\\"value\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"realValue\\\":\\\"test1\\\"}, {\\\"code\\\": \\\"1002\\\",\\\"value\\\":\\\"\u6d4b\u8bd5\u503c2\\\",\\\"realValue\\\":\\\"test2\\\"}]\"));\n        assertEquals(\"{\\\"text\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"value\\\":\\\"1001\\\",\\\"realText\\\":\\\"test1\\\"}\", this.aspect.parseDictText(\"[{\\\"code\\\": \\\"1001\\\",\\\"text\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"realValue\\\":\\\"test1\\\"}]\"));\n        assertEquals(\"{\\\"value\\\":\\\"1001\\\",\\\"text\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"realText\\\":\\\"test1\\\"}\", this.aspect.parseDictText(\"[{\\\"code\\\": \\\"1001\\\",\\\"value\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"realValue\\\":\\\"test1\\\"}]\"));\n        assertEquals(\"{\\\"text\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"value\\\":\\\"1001\\\",\\\"realText\\\":\\\"test1\\\"}\", this.aspect.parseDictText(\"[{\\\"code\\\": \\\"1001\\\",\\\"text\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"realValue\\\":\\\"test1\\\"}]\"));\n        assertEquals(\"{\\\"value\\\":\\\"1001\\\",\\\"text\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"realText\\\":\\\"test1\\\"}\", this.aspect.parseDictText(\"[{\\\"code\\\": \\\"1001\\\",\\\"value\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"realValue\\\":\\\"test1\\\"}]\"));\n        assertEquals(\"{\\\"list\\\": [{\\\"text\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"value\\\":\\\"1001\\\",\\\"realText\\\":\\\"test1\\\"}, {\\\"text\\\":\\\"\u6d4b\u8bd5\u503c2\\\",\\\"value\\\":\\\"101\\\",\\\"realText\\\":\\\"test2\\\"}]}\", this.aspect.parseDictText(\"{\\\"list\\\": [{\\\"code\\\": \\\"1001\\\",\\\"text\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"realValue\\\":\\\"test1\\\"}, {\\\"code\\\": \\\"11001\\\",\\\"text\\\":\\\"\u6d4b\u8bd5\u503c2\\\",\\\"realValue\\\":\\\"test2\\\"}]}\"));\n        //test illegal JSON object\n        assertEquals(\"{\\\"list\\\": [{\\\"code\\\": \\\"1001\\\",\\\"text\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"realText\\\":\\\"test1\\\"}, {\\\"code\\\": \\\"11001\\\",\\\"text\\\":\\\"\u6d4b\u8bd5\u503c2\\\",\\\"realText\\\":\\\"test2\\\"}]}\", this.aspect.parseDictText(\"{\\\"list\\\": [{\\\"code\\\": \\\"1001\\\",\\\"text\\\":\\\"\u6d4b\u8bd5\u503c1\\\",\\\"realValue\\\":\\\"test1\\\"}, {\\\"code\\\": \\\"11001\\\",\\\"text\\\":\\\"\u6d4b\u8bd5\u503c2\\\",\\\"realValue\\\":\\\"test2\\\"}]}\"));\n    }\n}",
        "package org.jeecg.common.aspect;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.ibatis.annotations.Param;\nimport org.jeecg.common.annotation.Dict;\nimport org.springframework.util.ReflectionUtils;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.lang.reflect.Field;\nimport java.util.*;\n\n@Slf4j\npublic class DictAspect {\n    /**\n     * \u62e6\u622a\u542b\u6709 @Dict \u7684\u5b57\u6bb5\uff0c\u6ce8\u5165\u5b57\u5178\u6570\u636e\n     */\n    public Object parseDictText(@Param(\"result\") Object result, @Param(\"dictMap\") Map<String, String> dictMap) {\n        //\u83b7\u53d6request\n        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();\n        if (null == request || null == dictMap) {\n            return result;\n        }\n\n        //1. \u83b7\u53d6\u6240\u6709\u5e26 @Dict \u6ce8\u89e3\u7684\u5b57\u6bb5\n        List<Field> dictFieldList = new ArrayList<>();\n        ReflectionUtils.doWithFields(result.getClass(), field -> {\n                    Dict dictAnnotation = field.getAnnotation(Dict.class);\n                    if (dictAnnotation != null) {\n                        dictFieldList.add(field);\n                    }\n                }\n        );\n        //2. \u83b7\u53d6\u5e76\u586b\u5145\u5b57\u5178\u6570\u636e\n        if (!dictFieldList.isEmpty()) {\n            for (Object item : ((Collection<?>) result)) {\n                for (Field field : dictFieldList) {\n                    String code = field.getAnnotation(Dict.class).dicCode();\n                    String text = field.getAnnotation(Dict.class).dicText();\n                    String table = field.getAnnotation(Dict.class).dictTable();\n\n                    Object value;\n                    try {\n                        //\u83b7\u53d6item\u7684\u503c\n                        value = ReflectionUtils.getField(field, item);\n                    } catch (IllegalArgumentException | IllegalAccessException e) {\n                        throw new RuntimeException(\"\u5b57\u5178\u6ce8\u89e3 \u8f6c\u6362\u51fa\u9519\");\n                    }\n                    String fieldDictCode = code;\n                    if (!StringUtils.isEmpty(table)) {\n                        fieldDictCode = String.format(\"%s,%s,%s\", table, text, code);\n                    }\n                    if (value instanceof Collection) { // \u591a\u4e2acode\u503c\n                        List<Object> dictValues = new ArrayList<>();\n                        for (String codeItem : ((Collection<?>) value)) {\n                            String dataValue = this.translateDict(dictMap, fieldDictCode, codeItem);\n                            if (!StringUtils.isEmpty(dataValue)) {\n                                dictValues.add(dataValue);\n                            }\n                        }\n                        try {\n                            //\u586b\u5145\u6570\u636e\n                            ReflectionUtils.setField(field, item, StringUtils.join(dictValues, \",\"));\n                        } catch (IllegalArgumentException | IllegalAccessException e) {\n                            throw new RuntimeException(\"\u5b57\u5178\u6ce8\u89e3 \u8f6c\u6362\u51fa\u9519\");\n                        }\n                    } else if (value instanceof String) { // \u5355\u4e2acode\u503c\n                        String dataValue = this.translateDict(dictMap, fieldDictCode, value.toString());\n                        try {\n                            ReflectionUtils.setField(field, item, dataValue);\n                        } catch (IllegalArgumentException | IllegalAccessException e) {\n                            throw new RuntimeException(\"\u5b57\u5178\u6ce8\u89e3 \u8f6c\u6362\u51fa\u9519\");\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n}\n    "
    ]
}