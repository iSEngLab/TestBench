{
    "project_name": "jeecg-boot",
    "file_name": "JSqlParserAllTableManager.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/sqlparse/JSqlParserAllTableManager.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.util.sqlparse",
    "docstring": "/**\n     * \u5f00\u59cb\u89e3\u6790\n     *\n     * @return\n     * @throws JSQLParserException\n     */",
    "source_code": "\npublic Map<String, SelectSqlInfo> parse() throws JSQLParserException {\n    // 1. \u521b\u5efa\u89e3\u6790\u5668\n    CCJSqlParserManager mgr = new CCJSqlParserManager();\n    // 2. \u4f7f\u7528\u89e3\u6790\u5668\u89e3\u6790sql\u751f\u6210\u5177\u6709\u5c42\u6b21\u7ed3\u6784\u7684java\u7c7b\n    Statement stmt = mgr.parse(new StringReader(this.sql));\n    if (stmt instanceof Select) {\n        Select selectStatement = (Select) stmt;\n        SelectBody selectBody = selectStatement.getSelectBody();\n        this.parsedSql = selectBody.toString();\n        // 3. \u89e3\u6790select\u67e5\u8be2sql\u7684\u4fe1\u606f\n        if (selectBody instanceof PlainSelect) {\n            PlainSelect plainSelect = (PlainSelect) selectBody;\n            // 4. \u5408\u5e76 fromItems\n            List<FromItem> fromItems = new ArrayList<>();\n            fromItems.add(plainSelect.getFromItem());\n            // 4.1 \u5904\u7406join\u7684\u8868\n            List<Join> joins = plainSelect.getJoins();\n            if (joins != null) {\n                joins.forEach(join -> fromItems.add(join.getRightItem()));\n            }\n            // 5. \u5904\u7406 fromItems\n            for (FromItem fromItem : fromItems) {\n                // 5.1 \u901a\u8fc7\u8868\u540d\u7684\u65b9\u5f0ffrom\n                if (fromItem instanceof Table) {\n                    this.addSqlInfoByTable((Table) fromItem);\n                }\n                // 5.2 \u901a\u8fc7\u5b50\u67e5\u8be2\u7684\u65b9\u5f0ffrom\n                else if (fromItem instanceof SubSelect) {\n                    this.handleSubSelect((SubSelect) fromItem);\n                }\n            }\n            // 6. \u89e3\u6790 selectFields\n            List<SelectItem> selectItems = plainSelect.getSelectItems();\n            for (SelectItem selectItem : selectItems) {\n                // 6.1 \u67e5\u8be2\u7684\u662f\u5168\u90e8\u5b57\u6bb5\n                if (selectItem instanceof AllColumns) {\n                    // \u5f53 selectItem \u4e3a AllColumns \u65f6\uff0cfromItem \u5fc5\u5b9a\u4e3a Table\n                    String tableName = plainSelect.getFromItem(Table.class).getName();\n                    // \u6b64\u5904\u5fc5\u5b9a\u4e0d\u4e3a\u7a7a\uff0c\u56e0\u4e3a\u5728\u89e3\u6790 fromItem \u65f6\uff0c\u5df2\u7ecf\u5c06\u8868\u540d\u6dfb\u52a0\u5230 allTableMap \u4e2d\n                    SelectSqlInfo sqlInfo = this.allTableMap.get(tableName);\n                    assert sqlInfo != null;\n                    // \u8bbe\u7f6e\u4e3a\u67e5\u8be2\u5168\u90e8\u5b57\u6bb5\n                    sqlInfo.setSelectAll(true);\n                    sqlInfo.setSelectFields(null);\n                    sqlInfo.setRealSelectFields(null);\n                }\n                // 6.2 \u67e5\u8be2\u7684\u662f\u5e26\u8868\u522b\u540d\uff08 u.* )\u7684\u5168\u90e8\u5b57\u6bb5\n                else if (selectItem instanceof AllTableColumns) {\n                    AllTableColumns allTableColumns = (AllTableColumns) selectItem;\n                    String aliasName = allTableColumns.getTable().getName();\n                    // \u901a\u8fc7\u522b\u540d\u83b7\u53d6\u8868\u540d\n                    String tableName = this.tableAliasMap.get(aliasName);\n                    if (tableName == null) {\n                        tableName = aliasName;\n                    }\n                    SelectSqlInfo sqlInfo = this.allTableMap.get(tableName);\n                    // \u5982\u679c\u6b64\u5904\u4e3a\u7a7a\uff0c\u5219\u8bf4\u660e\u8be5\u5b57\u6bb5\u662f\u901a\u8fc7\u5b50\u67e5\u8be2\u83b7\u53d6\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u5904\u7406\uff0c\u53ea\u6709\u5b9e\u9645\u8868\u624d\u9700\u8981\u5904\u7406\n                    if (sqlInfo != null) {\n                        // \u8bbe\u7f6e\u4e3a\u67e5\u8be2\u5168\u90e8\u5b57\u6bb5\n                        sqlInfo.setSelectAll(true);\n                        sqlInfo.setSelectFields(null);\n                        sqlInfo.setRealSelectFields(null);\n                    }\n                }\n                // 6.3 \u5404\u79cd\u5b57\u6bb5\u8868\u8fbe\u5f0f\u5904\u7406\n                else if (selectItem instanceof SelectExpressionItem) {\n                    SelectExpressionItem selectExpressionItem = (SelectExpressionItem) selectItem;\n                    Expression expression = selectExpressionItem.getExpression();\n                    Alias alias = selectExpressionItem.getAlias();\n                    this.handleExpression(expression, alias, plainSelect.getFromItem());\n                }\n            }\n        } else {\n            log.warn(\"\u6682\u65f6\u5c1a\u672a\u5904\u7406\u8be5\u7c7b\u578b\u7684 SelectBody: {}\", selectBody.getClass().getName());\n            throw new JeecgBootException(\"\u6682\u65f6\u5c1a\u672a\u5904\u7406\u8be5\u7c7b\u578b\u7684 SelectBody\");\n        }\n    } else {\n        // \u975e select \u67e5\u8be2sql\uff0c\u4e0d\u505a\u5904\u7406\n        throw new JeecgBootException(\"\u975e select \u67e5\u8be2sql\uff0c\u4e0d\u505a\u5904\u7406\");\n    }\n    return this.allTableMap;\n}\n",
    "class_name": "JSqlParserAllTableManager",
    "method_name": "parse",
    "arguments": [],
    "generate_test": [
        "package org.jeecg.common.util.sqlparse;\n\nimport net.sf.jsqlparser.expression.*;\nimport net.sf.jsqlparser.schema.Column;\nimport net.sf.jsqlparser.statement.select.FromItem;\nimport net.sf.jsqlparser.statement.select.Join;\nimport net.sf.jsqlparser.statement.select.PlainSelect;\nimport net.sf.jsqlparser.statement.select.SelectBody;\nimport net.sf.jsqlparser.statement.select.SubJoin;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.*;\n\npublic class JSqlParserAllTableManagerTest {\n    @Test\n    public void parseTest() throws Exception {\n        String sql = \"SELECT 1 FROM (SELECT * FROM T WHERE ID > 0) AS A\";\n        SelectBody selectBody = JSqlParserUtils.parseSelectBody(sql);\n        if (!(selectBody instanceof PlainSelect)) {\n            throw new RuntimeException(\"Not supported SQL type\");\n        }\n        PlainSelect plainSelect = (PlainSelect) selectBody;\n        FromItem fromItem = plainSelect.getFromItem();\n        JSqlParserAllTableManager allTableManager = new JSqlParserAllTableManager(sql);\n        if (!(fromItem instanceof SubJoin)) {\n            throw new RuntimeException(\"Not supported SQL type\");\n        }\n        SubJoin subJoin = (SubJoin) fromItem;\n        FromItem left = subJoin.getLeft();\n        if (!(left instanceof Table)) {\n            throw new RuntimeException(\"Not supported SQL type\");\n        }\n        allTableManager.addSqlInfoByTable((Table) left);\n    }\n}",
        "\n",
        "@Slf4j(topic = \"easy_code\")\npublic class JSqlParserAllTableManager {\n\n    private static final String SELECT_TABLE_KEY = \"select\";\n    private static final String FROM_TABLE_KEY = \"from\";\n\n    /**\n     * \u89e3\u6790sql\uff0c\u83b7\u53d6\u9700\u8981\u7684\u8868\u540d\u4fe1\u606f\n     *\n     * @param sql\n     */\n    public JSqlParserAllTableManager(String sql) {\n        this.sql = sql;\n    }\n\n    private String sql;\n\n    /**\n     * \u6240\u6709\u8868\u4fe1\u606f\n     */\n    private Map<String, SelectSqlInfo> allTableMap = new HashMap<>();\n\n    /**\n     * \u89e3\u6790\n     */\n    public void parser() {\n        // \u89e3\u6790sql\n        CCJSqlParserManager parserManager = new CCJSqlParserManager();\n        Statement statement;\n        try {\n            statement = parserManager.parse(new StringReader(this.sql));\n        } catch (JSQLParserException e) {\n            log.error(\"easy code error:\", e);\n            return;\n        }\n        // \u5206\u6790statement\n        this.parserStatement(statement);\n    }\n\n    /**\n     * \u6839\u636esql\u8bed\u53e5\u89e3\u6790\u51fa\u9700\u8981\u7684\u8868\u4fe1\u606f\uff0c\u5e76\u5b58\u5165 allTableMap\u4e2d\n     */\n    private void parserStatement(Statement statement) {\n        // \u5904\u7406 select\n        this.parserSelectBody((SelectBody) ((PlainSelect) ((Select) statement).getSelectBody()).getFrom());\n    }\n\n    /**\n     * \u89e3\u6790select body\u4e2d\u7684\u8868\u4fe1\u606f\n     */\n    private void parserSelectBody(SelectBody selectBody) {\n        if (selectBody instanceof SetOperationList) {\n            SetOperationList setOperationList = (SetOperationList) selectBody;\n            List<SelectBody> selectBodys = setOperationList.getSelects();\n            for (SelectBody item : selectBodys) {\n                this.parserSelectBody(item);\n            }\n        } else if (selectBody instanceof PlainSelect) {\n            // \u5904\u7406 fromItem\n            List<Join> joins = ((PlainSelect) selectBody).getJoins();\n            this.handleFromItem(((PlainSelect) selectBody).getFromItem(), joins);\n        }\n    }\n\n    /**\n     * \u6839\u636e\u4eceItem\u548cjoins\u5904\u7406\u8868\u4fe1\u606f\uff0c\u5e76\u5b58\u5165 allTableMap\u4e2d\n     */\n    private void handleFromItem(FromItem fromItem, List<Join> joins) {\n        if (fromItem instanceof SubJoin) {\n            return;\n        } else if (fromItem instanceof SubSelect) {\n            this.handleSubSelect((SubSelect) fromItem);\n        } else if (fromItem instanceof ValuesList) {\n            return;\n        } else if (fromItem instanceof LateralSubSelect) {\n            return;\n        }\n        // \u83b7\u53d6\u8868\u540d\n        String tableName = this.getTableName(fromItem);\n        if (tableName == null || \"\".equals(tableName)) {\n            return;\n        }\n        SelectSqlInfo sqlInfo = new SelectSqlInfo();\n        sqlInfo.setFromTableName(tableName);\n        // \u5904\u7406 joins\n        this.handleJoinTable(joins, tableName);\n        // \u52a0\u5165 allTableMap\n        if (this.allTableMap == null) {\n            return;\n        }\n        this.allTableMap.put(sqlInfo.getFromTableName(), sqlInfo);\n    }\n\n    /**\n     * \u6839\u636ejoins\u5904\u7406\u5176\u4ed6\u8868\u4fe1\u606f\uff0c\u5e76\u5b58\u5165 allTableMap\u4e2d\n     */\n    private void handleJoinTable(List<Join> joins, String tableName) {\n        if (joins == null || joins.size() <= 0) {\n            return;\n        }\n        for (Join join : joins) {\n            // \u83b7\u53d6\u8868\u540d\n            String joinTableName = this.getTableName(join.getRightItem());\n            if (joinTableName != null && !\"\".equals(joinTableName)) {\n                SelectSqlInfo sqlInfo = new SelectSqlInfo();\n                sqlInfo.setSelectTableKey(tableName);\n                sqlInfo.setJoinTableKey(joinTableName);\n                // \u52a0\u5165 allTableMap\n            } else if (joinTableName == null || \"\".equals(joinTableName)) {\n                log.warn(\"easy code warn: get join table name is empty\");\n                return;\n            }\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u8868\u540d\n     */\n    private String getTableName(FromItem fromItem) {\n        if (fromItem instanceof Table) {\n            return ((Table) fromItem).getName();\n        } else if (fromItem instanceof SubSelect) {\n            return this.getTableName(((SubSelect) fromItem).getSelectBody());\n        } else {\n            log.warn(\"easy code warn: get table name fail, from item type is not support\");\n            return null;\n        }\n    }\n\n    /**\n     * \u5904\u7406\u5b50\u67e5\u8be2\u8bed\u53e5\n     */\n    private void handleSubSelect(SelectBody selectBody) {\n        if (selectBody instanceof PlainSelect) {\n            this.handleFromItem(((PlainSelect) selectBody).getFromItem(), ((PlainSelect) selectBody).getJoins());\n            return;\n        } else if (selectBody instanceof SetOperationList) {\n            List<SelectBody> selectBodys = ((SetOperationList) selectBody).getSelects();\n            for (SelectBody item : selectBodys) {\n                this.handleSubSelect(item);\n            }\n        } else if (selectBody instanceof WithItem) {\n            return;\n        } else if (selectBody instanceof ValuesList) {\n            //todo\n        }\n    }\n}\n    ",
        "package org.jeecg.common.util.sqlparse;\nimport java.util.*;\npublic class JSqlParserAllTableManager extends JSqlParserAbstract implements SqlInfoParser {\n    /**\n     * \u6240\u6709\u7684\u8868\u4fe1\u606f\n     */\n    private Map<String, SelectSqlInfo> allTableMap = new LinkedHashMap<>();\n\n    public JSqlParserAllTableManager() {}\n\n    @Override\n    public String getSqlType() {\n        return SqlTypeEnum.ALL_TABLE.getValue();\n    }\n\n    /**\n     * \u89e3\u6790sql\uff0c\u63d0\u53d6\u51fa select \u8bed\u53e5\u4e2d\u7684\u8868\u4fe1\u606f\n     */\n    public void parse() throws JSQLParserException {\n        // 1. \u89e3\u6790 SelectBody\n        PlainSelect plainSelect = (PlainSelect) this.parsedSql.getSelectBody();\n\n        // 2. \u5904\u7406 FromItem\n        List<FromItem> fromItems = plainSelect.getFromItem().getFromItems();\n        if (fromItems != null && !fromItems.isEmpty()) {\n            for (FromItem fromItem : fromItems) {\n                this.handleFromItem(fromItem);\n            }\n        }\n    }\n\n    /**\n     * \u5904\u7406 FromItem\uff0c\u5e76\u6dfb\u52a0\u5230 allTableMap \u4e2d\n     */\n    private void handleFromItem(FromItem fromItem) throws JSQLParserException {\n        // \u5904\u7406 Join\n        if (fromItem instanceof Table) {\n            this.addSqlInfoByTable((Table) fromItem);\n        } else if (fromItem instanceof SubJoin) {\n            SubJoin subJoin = (SubJoin) fromItem;\n            FromItem left = subJoin.getLeft();\n            this.handleFromItem(left);\n        } else if (fromItem instanceof LateralSubSelect) {\n            // todo \u5904\u7406LateralSubSelect\n        }\n    }\n\n    /**\n     * \u6839\u636e Table \u6dfb\u52a0 sqlInfo\n     */\n    private void addSqlInfoByTable(Table table) {\n        String tableName = table.getName();\n        SelectSqlInfo sqlInfo = new SelectSqlInfo(this.parsedSql);\n        sqlInfo.setFromTableName(table.getName());\n        this.allTableMap.put(sqlInfo.getFromTableName(), sqlInfo);\n    }\n}\n    \n\n### Response:",
        "package org.jeecg.common.util.sqlparse;\n\nimport net.sf.jsqlparser.expression.*;\nimport net.sf.jsqlparser.schema.Table;\nimport net.sf.jsqlparser.statement.select.*;\nimport net.sf.jsqlparser.util.deparser.SelectDeParser;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSqlParserAllTableManagerTest {\n    @Test\n    public void parseTest() {\n        String sql = \"<FILL>\";\n        PlainSelect plainSelect = (PlainSelect) SQLParserUtil.parseSqlStatement(sql);\n        \n        AllTableManager allTableManager = new AllTableManager();\n        Map<String, SelectSqlInfo> tableMap = allTableManager.getAllTableMap(plainSelect);\n        \n        // \u6253\u5370\u7ed3\u679c\n        System.out.println(\"\u6253\u5370\u5168\u8868\u540d\u53ca\u5b57\u6bb5\uff1a\");\n        for (Map.Entry<String, SelectSqlInfo> entry : tableMap.entrySet()) {\n            String key = entry.getKey();\n            System.out.print(key + \": \");\n            \n            List<SelectFieldItem> selectFields = entry.getValue().getSelectFields();\n            if (selectFields != null) {\n                for (SelectFieldItem field : selectFields) {\n                    System.out.print(field.getAliasName() + \",\");\n                }\n            }\n            System.out.println(\"\");\n        }\n        \n        // \u6253\u5370\u7b80\u5316\u5b57\u6bb5\u540d\n        System.out.println(\"\\n\u6253\u5370\u7b80\u5316\u540e\u7684\u5b57\u6bb5\uff1a\");\n        for (Map.Entry<String, SelectSqlInfo> entry : tableMap.entrySet()) {\n            String key = entry.getKey();\n            System.out.print(key + \": \");\n            \n            List<SelectFieldItem> selectFields = entry.getValue().getRealSelectFields();\n            if (selectFields != null) {\n                for (SelectFieldItem field : selectFields) {\n                    System.out.print(field.getAliasName() + \",\");\n                }\n            }\n            System.out.println(\"\");\n        }\n        \n        // \u6253\u5370 sqlInfo\uff0c\u4ec5\u4f9b\u53c2\u8003\uff0c\u5b9e\u9645\u60c5\u51b5\u590d\u6742\n        System.out.println(\"\\n\u6253\u5370 SqlInfo\uff1a\");\n        for (Map.Entry<String, SelectSqlInfo> entry : tableMap.entrySet()) {\n            String key = entry.getKey();\n            System.out.print(key + \": \");\n            \n            List<SelectFieldItem> selectFields = entry.getValue().getRealSelectFields();\n            if (selectFields != null) {\n                for (SelectFieldItem field : selectFields) {\n                    System.out.println(\"fieldName: \" + field.getFieldName() + \", aliasName: \" + field.getAliasName());\n                }\n            }\n        }\n    }\n}",
        "Timeout",
        "package org.jeecg.common.util;\nimport net.sf.jsqlparser.JSQLParserException;\nimport net.sf.jsqlparser.expression.*;\nimport net.sf.jsqlparser.schema.*;\nimport net.sf.jsqlparser.statement.select.*;\nimport org.jeecg.common.util.sqlparse.JSqlParserAllTableManager;\n\npublic class JSqlUtils {\n    /**\n     * \u901a\u8fc7SQL\u89e3\u6790\u51fa\u6240\u6709\u7684\u8868\u540d\n     */\n    public static Map<String, String> getTablesBySql(String sql) throws JSQLParserException {\n        return new JSqlParserAllTableManager().parse(sql);\n    }\n}\n\n    \n\n### JUNIT Test case:\npackage org.jeecg.common.util;\n\nimport java.util.*;\n\npublic class JSqlUtilsTest {\n    @Test\n    public void getTablesBySqlTest() throws Exception {\n        <FILL>\n    }\n}\n    \n\n### Response:",
        "package org.jeecg.common.util.sqlparse;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport lombok.Data;\n\n@Data\npublic class SelectSqlInfo implements Serializable {\n    private static final long serialVersionUID = 1L;\n    /**\n     * \u6765\u6e90\u8868\u540d\u79f0\n     */\n    private String fromTableName;\n    /**\n     * \u67e5\u8be2\u5b57\u6bb5\uff0c\u53ef\u80fd\u5305\u542b\u51fd\u6570\u548c\u5b50\u67e5\u8be2\u7b49\u590d\u6742\u60c5\u51b5\n     */\n    private List<String> selectFields;\n    /**\n     * \u771f\u5b9e\u67e5\u8be2\u5b57\u6bb5\u540d\u79f0\u5217\u8868\n     * <p>\n     * \u4f8b\u5982 select `name` as `aliasName`, `age` from table_a where id = ?\n     * <p>\n     * \u8fd9\u91cc\u7684 aliasName \u5c31\u662f\u771f\u6b63\u7684\u5b57\u6bb5\u540d\u79f0\n     */\n    private List<String> realSelectFields;\n\n    public SelectSqlInfo() {\n        this.selectFields = new ArrayList<>();\n        this.realSelectFields = new ArrayList<>();\n    }\n}\n\npackage org.jeecg.common.util.sqlparse;\n\nimport net.sf.jsqlparser.expression.Alias;\nimport net.sf.jsqlparser.schema.Column;\nimport net.sf.jsqlparser.statement.select.*;\nimport java.io.Serializable;\nimport java.util.*;\n\n/**\n * \u7528\u4e8e\u7ba1\u7406\u591a\u4e2a\u8868\u7684\u67e5\u8be2\u7ed3\u679c\n */\npublic class JSqlParserAllTableManager implements Serializable {\n    private static final long serialVersionUID = 1L;\n    /**\n     * \u89e3\u6790\u540e\u7684 sql \u8bed\u53e5\n     */\n    private String parsedSql;\n    /**\n     * \u67e5\u8be2\u7ed3\u679c\u4fe1\u606f\uff0c\u8868\u540d\u4e3a key\uff0cSelectSqlInfo \u4e3a value\n     */\n    private Map<String, SelectSqlInfo> allTableMap = new HashMap<>();\n    /**\n     * \u8868\u522b\u540d\u4e0e\u771f\u5b9e\u8868\u540d\u7684\u6620\u5c04\u5173\u7cfb\n     */\n    private Map<String, String> tableAliasMap = new HashMap<>();\n\n    public JSqlParserAllTableManager(String originalSql) {\n        this.parsedSql = parseSql(originalSql);\n    }\n\n    /**\n     * \u89e3\u6790SQL\uff0c\u83b7\u53d6\u6240\u6709\u7684\u8868\u540d\n     *\n     * @param originalSql\n     * @return\n     */\n    public String parseSql(String originalSql) {\n        PlainSelect plainSelect = getPlainSelectFromSql(originalSql);\n        // \u5904\u7406 fromItem\n        List<Table> tables = new ArrayList<>();\n        this.getAllTablesByFromItem(plainSelect.getFromItem(), tables);\n        String tableName;\n        for (Table table : tables) {\n            if (table != null) {\n                tableName = table.getName();\n                // \u89e3\u6790 aliasName\n                if (table.getAlias() != null) {\n                    this.tableAliasMap.put(table.getAlias().getName(), tableName);\n                }\n            } else {\n                log.warn(\"{} \u4e2d\u4e0d\u5305\u542b\u4efb\u4f55\u8868\uff0c\u65e0\u6cd5\u89e3\u6790\u3002\", originalSql);\n                return null;\n            }\n        }\n        return plainSelect.toString();\n    }\n\n    /**\n     * \u9012\u5f52\u5904\u7406 FromItem\n     *\n     * @param fromItem\n     * @return\n     */\n    private void getAllTablesByFromItem(net.sf.jsqlparser.schema.Table table) {\n        if (table == null) {\n            return;\n        }\n        this.addSqlInfoByTable((Table) table);\n        // \u5904\u7406 joins\n        if (table.getJoins() != null && !table.getJoins().isEmpty()) {\n            for (Join join : table.getJoins()) {\n                getAllTablesByFromItem(join.getRightItem());\n            }\n        }\n    }\n\n    /**\n     * \u89e3\u6790 SQL\uff0c\u83b7\u53d6 PlainSelect\n     *\n     * @param originalSql\n     */\n    public PlainSelect getPlainSelectFromSql(String originalSql) {\n        SelectBody selectBody = getSelectBodyFromSql(originalSql);\n        if (selectBody == null) {\n            return null;\n        }\n        try {\n            // \u8fd9\u91cc\u5077\u4e86\uff0cselectBody.getSelects() \u662f\u4e00\u4e2a List<net.sf.jsqlparser.schema.Table> \u7c7b\u578b\u7684\u5bf9\u8c61\n            // \u53ef\u4ee5\u76f4\u63a5\u5411 PlainSelect \u5bf9\u8c61\u8fdb\u884c\u8f6c\u6362\n            return (PlainSelect) selectBody;\n        } catch (Exception e) {\n            log.error(e);\n            return null;\n        }\n    }\n\n    /**\n     * \u89e3\u6790 SQL\uff0c\u83b7\u53d6 SelectBody\n     *\n     * @param originalSql\n     */\n    public SelectBody getSelectBodyFromSql(String originalSql) {\n        PlainSelect plainSelect = getPlainSelectFromSql(originalSql);\n        if (plainSelect == null) {\n            return null;\n        }\n        try {\n            // \u8fd9\u91cc\u5077\u4e86\uff0cplainSelect.getSelectBody() \u662f\u4e00\u4e2a SelectBody \u7c7b\u578b\u7684\u5bf9\u8c61\n            // \u53ef\u4ee5\u76f4\u63a5\u5411 PlainSelect \u5bf9\u8c61\u8fdb\u884c\u8f6c\u6362\n            return plainSelect.getSelectBody();\n        } catch (Exception e) {\n            log.error(e);\n            return null;\n        }\n    }\n\n    /**\n     * \u9012\ufffd <?php\n\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Support\\Facades\\DB;\nuse App\\Pasajero;\nuse App\\Reserva;\nuse App\\Habitacion;\nuse Illuminate\\Http\\Request;\n\nclass ReservasController extends Controller\n{\n    public function __construct()\n    {\n        $this->middleware('auth');//Verificar la autenticaci\u00f3n\n     }\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index()\n    {\n       // return DB::select('SELECT  FROM reserva');//Obtener todos los registros de la tabla\n        $reservas = Reserva::all();//Obtener todos los registros de la tabla\n        return view('/Reservas/index',compact(\"reservas\"));//Mostrar vista con la lista de reservas\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create()\n    {\n        $pasajeros = Pasajero::all();//Obtener todos los registros de la tabla\n        return view('/Reservas/create',compact(\"pasajeros\"));//Mostrar vista con formulario para crear una nueva reserva\n       // return \"Aqui se mostrara el formulario\";\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {//Se guarda en la base de datos el registro nuevo\n       // return DB::insert('INSERT INTO reservas (fecha_ingreso,fecha_salida,cantidad_habitacion,estado_reserva,fk_pasajero) VALUES ($request->input(\"input-1\"),$request->input(\"input-2\"),$request->input(\"input-3\"),$request->input(\"input-4\"),$request->input(\"select\"))');//Insertar en la tabla un nuevo registro\n        Reserva::create([//Crear un objeto de tipo reserva a partir de los datos ingresados en el formulario\n            'fecha_ingreso' => $request->input('input-1'),\n            'fecha_salida' => $request->input('input-2'),\n            'cantidad_habitacion' => $request->input('input-3'),\n            'estado_reserva' => \"0\",//Estado de la reserva por defecto es \"0\"\n            'fk_pasajero' => $request->input('select')\n        ]);\n        return redirect()->route('Reservas.index'); //Redirigir a la pagina de inicio donde se muestra la lista de los registros guardados anteriormente \n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show($id)//Obtener el objeto de la clase pasajero con id ingresado y mostrar sus datos en una vista\n    {\n        return DB::select('SELECT * FROM reserva WHERE fk_pasajero = ' . $id);//Mostrar vista con los datos del pasajero ingresado\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit($id)//Obtener el objeto de la clase pasajero con id ingresado y mostrar sus datos en un formulario para ser editados\n    {\n        //return \"Aqui se mostrara el formulario para editar el registro ingresado\";\n       $reservas = Reserva::find($id);//Obtener los datos del objeto de la clase reserva con id ingresado\n       return view('/Reservas/edit',compact('reservas')); //Mostrar vista con el formulario para editar el registro ingresado\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, $id)//Actualizar los datos del objeto de la clase reserva con id ingresado a partir de los datos obtenidos del formulario\n    {\n        //return DB::update('UPDATE reservas SET fecha_ingreso = ' .$request->input(\"fecha_ingreso\").', fecha_salida = '. $request->input(\"fecha_salida\") . ', cantidad_habitacion =' .  $request->input(\"cantidad_habitacion\") . ', estado_reserva =' .  $request->input(\"estado_reserva\") . ', fk_pasajero = ' .$request->input(\"fk_pasajero\").' WHERE id= '.$id);\n        Reserva::where('id',$id)->update([//Buscar el objeto de la clase reservas con el id ingresado y actualizar sus datos a partir de los datos ingresados en el formulario\n            'fecha_ingreso' => $request->input('input-1'),\n            'fecha_salida' => $request->input('input-2'),\n            'cantidad_habitacion' => $request->input('input-3'),\n            'estado_reserva' => \"0\",//Estado de la reserva por defecto es \"0\"\n            'fk_pasajero' => $request->input('select')\n        ]);\n       return redirect()->route('Reservas.index'); //Redirigir a la pagina de inicio donde se muestra la lista de los registros guardados anteriormente \n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy($id)//Eliminar el objeto de la clase reserva con id ingresado\n    {\n        //return DB::delete('DELETE FROM reservas WHERE id = '.$id);\n       $reservas = Reserva::find($id)->delete();//Buscar el objeto de la clase reservas con el id ingresado y eliminarlo\n        return redirect()->route('Reservas.index'); //Redirigir a la pagina de inicio donde se muestra la lista de los registros guardados anteriormente \n    }\n}\n",
        "package org.jeecg.common.util;\n\nimport java.util.*;\n\npublic class JSqlParserAllTableManager {\n    private final Map<String, SelectSqlInfo> allTableMap = new HashMap<>();\n    private final Map<String, String> tableAliasMap = new HashMap<>();\n    private StringBuilder parsedSql = new StringBuilder();\n    \n    /**\n     * \u89e3\u6790sql\uff0c\u8fd4\u56de\u8868\u540d\u4e0esqlInfo\u7684map\u5bf9\u8c61\n     */\n    public Map<String, SelectSqlInfo> parse(String sql) {\n        // \u751f\u6210parser\n        net.sf.jsqlparser.parser.CCJSqlParserManager parser = new CCJSqlParserUtil();\n        try {\n            // \u62bd\u53d6\u8bed\u53e5\n            Statement statement = parser.parse(new StringReader(sql));\n            \n            // \u904d\u5386\u6240\u6709\u7684selectItems\uff0c\u5904\u7406\u5b57\u6bb5\u540d\u548c\u8868\u540d\n            SelectBody selectBody = (statement instanceof Select) ? ((Select) statement).getSelectBody() : null;\n            if (!(statement instanceof Select)) {\n                return allTableMap;\n            }\n            \n            // \u89e3\u6790 selectItems\n            this.handleSelectItems((selectBody instanceof PlainSelect) ? (PlainSelect) selectBody : null);\n    \n            // \u5904\u7406\u8868\u540d\n            FromItem from = selectBody.getFromItem();\n            if (from == null || from instanceof Table) {\n                return allTableMap;\n            }\n            \n            // \u904d\u5386\u6240\u6709\u7684\u8868\uff0c\u67e5\u8be2\u5b57\u6bb5\u548c\u8868\u540d\n            this.handleTables(((SubJoin) from).getLeft(), true);\n    \n            // \u5904\u7406\u8fde\u63a5\u67e5\u8be2 join\n            List<Join> joins = ((SubJoin) from).getJoins();\n            for (Join join : joins) {\n                if (!join.isSimple()) {\n                    continue;\n                }\n                this.handleTables(((Table) join.getRightItem()), false);\n    \n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        \n        return allTableMap;\n    }\n    \n    /**\n     * \u89e3\u6790\u5b57\u6bb5\u540d\n     */\n    private void handleSelectItems(PlainSelect plainSelect) {\n        List<SelectItem> selectItems = plainSelect.getSelectItems();\n        for (int i = 0; i < selectItems.size(); ++i) {\n            SelectItem item = selectItems.get(i);\n            \n            // \u5904\u7406 * \u9009\u62e9\u5668\n            if (item instanceof AllColumns) {\n                this.handleAllColumnsSelectItem(plainSelect, ((AllColumns) item));\n            } else if (item instanceof AllTableColumns) {\n                this.handleAllTableColumns(((AllTableColumns) item).getTable());\n            } else if (item instanceof SelectExpressionItem) {\n                // \u5904\u7406\u51fd\u6570\u5f0f\u5b57\u6bb5  CONCAT(name,'(',age,')')\n                \n                // \u4e0d\u5904\u7406\u5b57\u9762\u91cf\n                \n                // \u5904\u7406\u5b50\u67e5\u8be2\n                \n                // \u5904\u7406\u5b57\u6bb5\n            } else {\n                log.warn(\"\u672a\u627e\u5230\u7c7b\u578b\u4e3a {} \u7684 SelectItem\", item.getClass());\n            }\n        }\n    }\n    \n    /**\n     * \u89e3\u6790\u5b50\u67e5\u8be2\n     */\n    private void handleSubSelect(SubSelect subSelect) {\n        \n    }\n    \n    /**\n     * \u5904\u7406\u8fde\u63a5\u8868\n     */\n    private void handleTables(net.sf.jsqlparser.schema.Table table, boolean isLeft) {\n        // \u5904\u7406\u5b50\u67e5\u8be2\n        if (table instanceof SubSelect) {\n            this.handleSubSelect((SubSelect) table);\n        } else {\n            \n            String tableName = table.getName();\n            SelectSqlInfo sqlInfo = new SelectSqlInfo(this.parsedSql);\n            sqlInfo.setFromTableName(tableName);\n            this.allTableMap.put(tableName, sqlInfo);\n    \n        }\n    }\n}\n",
        "package org.jeecg.common.util.sqlparse;\n\nimport java.util.*;\n\npublic class JSqlParserAllTableManager {\n    private Map<String, SelectSqlInfo> allTableMap = new HashMap<>();\n    private String parsedSql;\n\n    public void setParsedSql(String sql) {\n        this.parsedSql = sql;\n    }\n\n    public List<SelectSqlInfo> getSelectSqlInfos() {\n        return new ArrayList<>(this.allTableMap.values());\n    }\n    \n    @Test\n    void test() throws Exception{\n        String sql=\"select id as aid,name,sex from user where name='xxx'\";\n        SelectSqlInfoManager sqlInfoManager = new SelectSqlInfoManager();\n        List<SelectSqlInfo> selectSqlInfos = sqlInfoManager.parse(sql);\n        \n    }\n}\n    \n\n### Response:"
    ]
}