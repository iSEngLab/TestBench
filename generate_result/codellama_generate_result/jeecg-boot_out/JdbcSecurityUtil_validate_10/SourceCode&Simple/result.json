{
    "project_name": "jeecg-boot",
    "file_name": "JdbcSecurityUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/security/JdbcSecurityUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.util.security",
    "docstring": "/**\n     * \u6821\u9a8csql\u662f\u5426\u6709\u7279\u5b9a\u7684key\n     * @param jdbcUrl\n     * @return\n     */",
    "source_code": "\npublic static void validate(String jdbcUrl){\n    if(oConvertUtils.isEmpty(jdbcUrl)){\n        return;\n    }\n    String urlConcatChar = \"?\";\n    if(jdbcUrl.indexOf(urlConcatChar)<0){\n        return;\n    }\n    String argString = jdbcUrl.substring(jdbcUrl.indexOf(urlConcatChar)+1);\n    String[] keyAndValues = argString.split(\"&\");\n    for(String temp: keyAndValues){\n        String key = temp.split(\"=\")[0];\n        for(String prop: notAllowedProps){\n            if(prop.equalsIgnoreCase(key)){\n                throw new JeecgBootException(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010\"+key+\"\u3011\");\n            }\n        }\n    }\n}\n",
    "class_name": "JdbcSecurityUtil",
    "method_name": "validate",
    "arguments": [
        "String jdbcUrl"
    ],
    "generate_test": [
        "package org.jeecg.common.util.security;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class JdbcSecurityUtilTest {\n    @Test\n    public void validateTest() {\n        String jdbcUrl = \"jdbc:mysql://localhost/mydatabase?user=root&password=mypassword\";\n        JdbcSecurityUtil.validate(jdbcUrl);\n        assertTrue(JdbcSecurityUtil.notAllowedProps.isEmpty());\n    }\n}",
        "\n@Test\npublic void validateTest() {\n    // Given\n    String jdbcUrl = \"jdbc:mysql://localhost:3306/test?user=root&password=123456\";\n    String[] notAllowedProps = {\"user\", \"password\"};\n    \n    // When\n    JdbcSecurityUtil.validate(jdbcUrl);\n    \n    // Then\n    assertThrows(JeecgBootException.class, () -> {\n        for (String temp : keyAndValues) {\n            String key = temp.split(\"=\")[0];\n            for (String prop : notAllowedProps) {\n                if (prop.equalsIgnoreCase(key)) {\n                    throw new JeecgBootException(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010\" + key + \"\u3011\");\n                }\n            }\n        }\n    });\n}",
        "\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    @Test\n    public void validateTest() {\n        String jdbcUrl = \"jdbc://localhost/mydatabase\";\n        String notAllowedProps = \"property1, property2\";\n\n        // Test that the method throws an exception when a not allowed property is present in the URL\n        assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(jdbcUrl + \"?property1=value1\"));\n\n        // Test that the method does not throw an exception when a not allowed property is not present in the URL\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(jdbcUrl));\n    }\n}\n",
        "import org.jeecg.common.util.security.JdbcSecurityUtil;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    @Test\n    public void validateTest() {\n        // Test case 1: Valid URL without unsafe properties\n        String jdbcUrl = \"jdbc://localhost/mydatabase?user=root&password=mypassword\";\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(jdbcUrl));\n        \n        // Test case 2: Valid URL with unsafe property (not allowed)\n        jdbcUrl = \"jdbc://localhost/mydatabase?user=root&password=mypassword&driver=com.mysql.cj.jdbc.Driver\";\n        assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(jdbcUrl));\n        \n        // Test case 3: Valid URL with unsafe property (not allowed) and additional parameters\n        jdbcUrl = \"jdbc://localhost/mydatabase?user=root&password=mypassword&driver=com.mysql.cj.jdbc.Driver&someotherparam=somevalue\";\n        assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(jdbcUrl));\n        \n        // Test case 4: Invalid URL (null)\n        jdbcUrl = null;\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(jdbcUrl));\n        \n        // Test case 5: Invalid URL (empty string)\n        jdbcUrl = \"\";\n        assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(jdbcUrl));\n    }\n}",
        "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    private JdbcSecurityUtil util;\n    \n    @BeforeEach\n    public void setUp() {\n        util = new JdbcSecurityUtil();\n    }\n    \n    @Test\n    public void validate_jdbcUrlIsNull_expectReturnImmediately() {\n        String jdbcUrl = null;\n        \n        assertNull(util.validate(jdbcUrl));\n    }\n    \n    @Test\n    public void validate_jdbcUrlHasNoQueryString_expectReturnImmediately() {\n        String jdbcUrl = \"jdbc:oracle://localhost\";\n        \n        assertNull(util.validate(jdbcUrl));\n    }\n    \n    @Test\n    public void validate_queryStringContainsNotAllowedProps_expectThrowJeecgBootException() {\n        String jdbcUrl = \"jdbc:oracle://localhost?user=jeecg&password=123456\";\n        \n        assertThrows(JeecgBootException.class, () -> util.validate(jdbcUrl));\n    }\n    \n    @Test\n    public void validate_queryStringContainsAllowedProps_expectReturnNull() {\n        String jdbcUrl = \"jdbc:oracle://localhost?user=jeecg&password=123456&allowedProp=true\";\n        \n        assertNull(util.validate(jdbcUrl));\n    }\n}",
        "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    @Test\n    public void validateTest() {\n        // Given\n        String jdbcUrl = \"jdbc:mysql://localhost:3306/test?user=root&password=123456\";\n\n        // When\n        String result = JdbcSecurityUtil.validate(jdbcUrl);\n\n        // Then\n        assertEquals(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010\u7528\u6237\u540d\u3011\", result);\n    }\n}",
        "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    @Test\n    public void validateTest() {\n        // Test null jdbcUrl input\n        String jdbcUrl = null;\n        try {\n            JdbcSecurityUtil.validate(jdbcUrl);\n            fail(\"Expected JeecgBootException to be thrown\");\n        } catch (JeecgBootException e) {\n            assertEquals(\"JDBC URL is null or empty\", e.getMessage());\n        }\n\n        // Test invalid jdbcUrl input\n        jdbcUrl = \"invalid\";\n        try {\n            JdbcSecurityUtil.validate(jdbcUrl);\n            fail(\"Expected JeecgBootException to be thrown\");\n        } catch (JeecgBootException e) {\n            assertEquals(\"JDBC URL is invalid\", e.getMessage());\n        }\n\n        // Test jdbcUrl with no allowed props\n        jdbcUrl = \"jdbc:mysql://localhost/mydb\";\n        try {\n            JdbcSecurityUtil.validate(jdbcUrl);\n            fail(\"Expected JeecgBootException to be thrown\");\n        } catch (JeecgBootException e) {\n            assertEquals(\"JDBC URL has no allowed props\", e.getMessage());\n        }\n\n        // Test jdbcUrl with one allowed prop\n        jdbcUrl = \"jdbc:mysql://localhost/mydb?key1=value1\";\n        try {\n            JdbcSecurityUtil.validate(jdbcUrl);\n            fail(\"Expected JeecgBootException to be thrown\");\n        } catch (JeecgBootException e) {\n            assertEquals(\"JDBC URL has allowed prop key1\", e.getMessage());\n        }\n\n        // Test jdbcUrl with multiple allowed props\n        jdbcUrl = \"jdbc:mysql://localhost/mydb?key1=value1&key2=value2\";\n        try {\n            JdbcSecurityUtil.validate(jdbcUrl);\n            fail(\"Expected JeecgBootException to be thrown\");\n        } catch (JeecgBootException e) {\n            assertEquals(\"JDBC URL has allowed props key1 and key2\", e.getMessage());\n        }\n    }\n}",
        "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    @Test\n    public void validateTest() {\n        String jdbcUrl = \"jdbc:mysql://localhost/test?user=root&password=123456\";\n        JdbcSecurityUtil.validate(jdbcUrl);\n        \n        assertTrue(true); // replace with a meaningful assertion\n    }\n}",
        "package org.jeecg.common.util.security;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Test;\nimport org.jeecg.common.exception.JeecgBootException;\n\npublic class JdbcSecurityUtilTest {\n    @Test\n    public void validateTest() {\n        // Test case 1: Valid jdbcUrl with allowed properties\n        String jdbcUrl = \"jdbc:mysql://localhost/mydatabase?user=jeecgboot&password=jeecgboot\";\n        JdbcSecurityUtil.validate(jdbcUrl);\n        \n        // Test case 2: Valid jdbcUrl with disallowed property\n        jdbcUrl = \"jdbc:mysql://localhost/mydatabase?user=jeecgboot&password=jeecgboot&foo=bar\";\n        try {\n            JdbcSecurityUtil.validate(jdbcUrl);\n            fail(\"Expected JeecgBootException not thrown\");\n        } catch (JeecgBootException e) {\n            assertEquals(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010foo\u3011\", e.getMessage());\n        }\n        \n        // Test case 3: Invalid jdbcUrl with missing required property\n        jdbcUrl = \"jdbc:mysql://localhost/mydatabase?user=jeecgboot\";\n        try {\n            JdbcSecurityUtil.validate(jdbcUrl);\n            fail(\"Expected JeecgBootException not thrown\");\n        } catch (JeecgBootException e) {\n            assertEquals(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010password\u3011\", e.getMessage());\n        }\n    }\n}",
        "package org.jeecg.common.util.security;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    @Test\n    public void validateTest() {\n        String validJdbcUrl = \"jdbc:mysql://localhost/mydb\";\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(validJdbcUrl));\n\n        String invalidJdbcUrl = \"jdbc:mysql://localhost/mydb?param=value\";\n        assertThrowsExactly(JeecgBootException.class, () -> JdbcSecurityUtil.validate(invalidJdbcUrl));\n    }\n}"
    ]
}