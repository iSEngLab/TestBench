{
    "project_name": "jeecg-boot",
    "file_name": "JwtUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/util/JwtUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.system.util",
    "docstring": "/**\n\t * \u6839\u636erequest\u4e2d\u7684token\u83b7\u53d6\u7528\u6237\u8d26\u53f7\n\t * \n\t * @param request\n\t * @return\n\t * @throws JeecgBootException\n\t */",
    "source_code": "\npublic static String getUserNameByToken(HttpServletRequest request) throws JeecgBootException {\n\tString accessToken = request.getHeader(\"X-Access-Token\");\n\tString username = getUsername(accessToken);\n\tif (oConvertUtils.isEmpty(username)) {\n\t\tthrow new JeecgBootException(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\");\n\t}\n\treturn username;\n}\n",
    "class_name": "JwtUtil",
    "method_name": "getUserNameByToken",
    "arguments": [
        "HttpServletRequest request"
    ],
    "generate_test": [
        "package com.jeecg.p3.commonweixin.vo;\nimport java.io.Serializable;\n/**\n * \n * @author yzx\n *\n */\npublic class WeixinOAuth2TokenVO implements Serializable {\n\tprivate static final long serialVersionUID = -874901836513305022L;\n\tprivate String access_token; //\u7f51\u9875\u6388\u6743\u63a5\u53e3\u8c03\u7528\u51ed\u8bc1,\u6ce8\u610f\uff1a\u6b64access_token\u4e0e\u57fa\u7840\u652f\u6301\u7684access_token\u4e0d\u540c\n    private Integer expires_in;  //access_token\u63a5\u53e3\u8c03\u7528\u51ed\u8bc1\u8d85\u65f6\u5931\u6548\u65f6\u95f4\uff0c\u5355\u4f4d\uff08\u79d2\uff09\n    \n\tpublic String getAccess_token() {\n\t\treturn access_token;\n\t}\n\tpublic void setAccess_token(String access_token) {\n\t\tthis.access_token = access_token;\n\t}\n\tpublic Integer getExpires_in() {\n\t\treturn expires_in;\n\t}\n\tpublic void setExpires_in(Integer expires_in) {\n\t\tthis.expires_in = expires_in;\n\t}\n    \n}\n    \n\n### Request:",
        "package ${package}.service;\nimport java.util.List;\nimport org.jeecg.common.system.vo.DictModel;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\npublic interface SysBaseService {\n\t/**\n    * \u67e5\u8be2\u6570\u636e\u5b57\u5178\n    */\n    public List<DictModel> queryDictItemsByCode(String code);\n\t/**\n    * \u67e5\u8be2\u6240\u6709\u90e8\u95e8\u7684\u6811\u5f62\u7ed3\u6784\n    */\n    public List<SysDepartTreeModel> queryAllDeparts();\n}",
        "package org.jeecg.common.system.response;\n\nimport lombok.Data;\n\n@Data\npublic class SysUserCacheBean extends BaseMap {\n\tprivate String sysUserCode;\n\tprivate String sysUserName;\n\tprivate String sysOrgCode;\n\tprivate List<String> sysMultiOrgCode = new ArrayList<>();\n    /**\n     * \u662f\u5426\u4e3a\u4e00\u4e2a\u90e8\u95e8 true/false\n     */\n\tprivate boolean oneDepart;\n}\n",
        "package com.ruoyi.common.core.domain;\n\nimport lombok.Data;\nimport org.jeecg.common.system.api.ResultCode;\n\n/**\n * \u670d\u52a1\u7aef\u8fd4\u56de\u4fe1\u606f\uff08\u54cd\u5e94\u62a5\u6587\uff09\u4f53\n */\n@Data\npublic class Response<T> {\n    /**\n     * \u670d\u52a1\u7aef\u5904\u7406\u7ed3\u679c\u72b6\u6001\u7801\uff0c0\u8868\u793a\u6210\u529f\uff0c\u5176\u4ed6\u503c\u8868\u793a\u5931\u8d25\n     * <p>\n     * \u4e1a\u52a1\u903b\u8f91\u4e0a\u7684\u9519\u8bef\uff0c\u5728resultMessage\u4e2d\u63d0\u793a\u7ed9\u7528\u6237\n     */\n    private int resultCode;\n    /**\n     * \u670d\u52a1\u7aef\u5904\u7406\u7ed3\u679c\u4fe1\u606f\u63cf\u8ff0\uff0c\u4e3b\u8981\u7528\u4e8e\u63d0\u793a\u7ed9\u7528\u6237\n     */\n    private String resultMessage;\n\n    /**\n     * \u4e1a\u52a1\u6570\u636e\u54cd\u5e94\u6a21\u578b\uff0c\u4f9b\u524d\u7aef\u6d88\u8d39\n     */\n    private T data;\n\n    public Response() {\n        this.resultCode = ResultCode.SUCCESS;\n    }\n\n    public static <T> Response<T> buildSuccessResponse(T t) {\n        return new Response<>(ResultCode.SUCCESS, \"\", t);\n    }\n\n    public static <T> Response<T> buildFailedResponse() {\n        return new Response<>();\n    }\n\n}\n    \n\n### Response:",
        "    package org.jeecg.common.system.util;\n    \n    import lombok.extern.slf4j.Slf4j;\n    import org.apache.shiro.SecurityUtils;\n    import org.apache.shiro.authc.UsernamePasswordToken;\n    import org.apache.shiro.mgt.RealmSecurityManager;\n    import org.apache.shiro.subject.Subject;\n    \n    import java.util.Arrays;\n    \n    @Slf4j\n    public class JwtUtil {\n        /**\n         * \u751f\u6210\u4ee4\u724c\n         *\n         * @param userName \u7528\u6237\u540d\n         */\n        public static String createToken(String userName, String password) {\n            <FILL>\n        }\n    \n        /**\n         * \u4ece\u4ee4\u724c\u4e2d\u83b7\u53d6\u7528\u6237\u540d\n         *\n         * @return username\n         */\n        public static String getUserNameByToken(String token) {\n            if (StrUtil.isBlank(token)) {\n                return null;\n            } else {\n                <FILL>\n            }\n        }\n    \n        /**\n         * \u83b7\u53d6\u7528\u6237\u540d\n         *\n         * @return String\n         */\n        public static Subject getSubject() {\n            try {\n                RealmSecurityManager rsm = (RealmSecurityManager) SecurityUtils.getSecurityManager();\n    \n                //\u83b7\u53d6\u5f53\u524dRealm\n                JwtRealm realm = (JwtRealm) Arrays.asList(rmsm.getRealms()).get(0);\n    \n                // \u83b7\u53d6\u7528\u6237\u540d\n                String username = realm.doGetAuthenticationInfoFromToken(token).toString();\n    \n                return SecurityUtils.getSubject();\n            } catch (Exception e) {\n                log.error(\"getSubject\u5f02\u5e38\uff1a\", e);\n            }\n            return null;\n        }\n    }\n\n### JWTRealm:\npackage org.jeecg.common.system.util;\n\nimport cn.hutool.core.util.StrUtil;\nimport com.baomidou.kisso.annotation.Permission;\nimport com.baomidou.kisso.security.ISecurityManager;\nimport com.baomidou.kisso.web.RequestContext;\nimport org.apache.shiro.authc.AuthenticationException;\nimport org.apache.shiro.authc.AuthenticationInfo;\nimport org.apache.shiro.authc.AuthenticationToken;\nimport org.apache.shiro.authc.SimpleAccountBuilder;\nimport org.apache.shiro.mgt.SecurityManager;\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.springframework.http.HttpHeaders;\nimport java.util.Map;\n\n/**\n * JWT Realm\n */\npublic class JwtRealm implements ISecurityManager {\n    private static final String KEY_USERNAME = \"username\";\n\n    @Override\n    public AuthenticationInfo doGetAuthenticationInfo(String token) throws AuthenticationException {\n        if (StrUtil.isBlank(token)) {\n            throw new AuthenticationException(\"\u4ee4\u724c\u4e3a\u7a7a!\");\n        }\n        // \u83b7\u53d6\u7528\u6237\u540d\n        String username = getUsernameByToken(token);\n        if (username == null || \"\".equals(username)) {\n            throw new AuthenticationException(\"\u4ee4\u724c\u975e\u6cd5!\");\n        }\n\n        Map<String, Object> attributes = getUserInfoFromToken(token);\n        // \u83b7\u53d6\u6743\u9650\u96c6\u5408\n        String roleId = (String) attributes.get(\"roleId\");\n        if (StrUtil.isBlank(roleId)) {\n            throw new AuthenticationException(\"\u4ee4\u724c\u975e\u6cd5!\");\n        }\n\n        return new SimpleAccountBuilder()\n                .addRoles(Arrays.asList(roleId))\n                .setPrincipal(username)\n                // \u8bbe\u7f6e\u8bf7\u6c42\u4f53\n                .setRequestContext(new RequestContext())\n                .build();\n    }\n\n    @Override\n    public String doGetAuthenticationCacheKey(String token) throws AuthenticationException {\n        if (StrUtil.isBlank(token)) {\n            throw new AuthenticationException(\"\u4ee4\u724c\u4e3a\u7a7a!\");\n        }\n        // \u83b7\u53d6\u7528\u6237\u540d\n        String username = getUsernameByToken(token);\n        return username;\n    }\n\n    @Override\n    public void doClearCachedAuthenticationInfo(String token) throws AuthenticationException {\n        <FILL>\n    }\n\n    /**\n     * \u751f\u6210\u4ee4\u724c\n     *\n     * @param account\n     * @return\n     */\n    public String doGenerateToken(String username, String password) {\n        // \u751f\u6210token\n        return JwtUtil.createToken(username, password);\n    }\n\n    /**\n     * \u4ece\u4ee4\u724c\u4e2d\u83b7\u53d6\u7528\u6237\u540d\n     *\n     * @param token\n     * @return\n     */\n    public String getUsernameByToken(String token) {\n        if (StrUtil.isBlank(token)) {\n            throw new JeecgBootException(\"\u4ee4\u724c\u4e3a\u7a7a!\");\n        }\n        // \u83b7\u53d6\u7528\u6237\u540d\n        return JwtUtil.getUserNameByToken(token);\n    }\n\n    @Override\n    public AuthenticationInfo doGetAuthenticationInfoFromCache(String token) throws AuthenticationException {\n        if (StrUtil.isBlank(token)) {\n            throw new AuthenticationException(\"\u4ee4\u724c\u4e3a\u7a7a!\");\n        }\n        return null;\n    }\n\n    /**\n     * \u4ece\u4ee4\u724c\u4e2d\u83b7\u53d6\u7528\u6237\u4fe1\u606f\n     *\n     * @param token\n     * @return\n     */\n    public Map<String, Object> getUserInfoFromToken(String token) {\n        if (StrUtil.isBlank(token)) {\n            throw new JeecgBootException(\"\u4ee4\u724c\u4e3a\u7a7a!\");\n        }\n        // \u83b7\u53d6\u7528\u6237\u540d\n        return JwtUtil.getUserInfoByToken(token);\n    }\n\n    /**\n     * \u4ece\u4ee4\u724c\u4e2d\u83b7\u53d6\u6743\u9650\u4fe1\u606f\n     *\n     * @param token\n     * @return\n     */\n    public String getPermissionByToken(String token) {\n        if (StrUtil.isBlank(token)) {\n            throw new JeecgBootException(\"\u4ee4\u724c\u4e3a\u7a7a!\");\n        }\n        // \u83b7\u53d6\u7528\u6237\u540d\n        return JwtUtil.getPermissionsByToken(token);\n    }\n\n    /**\n     * \u83b7\u53d6SecurityManager\n     *\n     * @param token\n     * @return\n     */\n    public SecurityManager getSecurityManagerByToken(String token) {\n        if (StrUtil.isBlank(token)) {\n            throw new JeecgBootException(\"\u4ee4\u724c\u4e3a\u7a7a!\");\n        }\n        // \u83b7\u53d6\u7528\u6237\u540d\n        String username = JwtUtil.getUserNameByToken(token);\n\n        // \u83b7\u53d6\u6743\u9650\u96c6\u5408\n        String roleId = (String) JwtUtil.getUserInfoByToken(token).get(\"roleId\");\n        if (StrUtil.isBlank(username) || StrUtil.isBlank(roleId)) {\n            throw new JeecgBootException(\"\u4ee4\u724c\u975e\u6cd5!\");\n        }\n\n        // \u83b7\u53d6\u6743\u9650\n        Permission permission = JwtRealmAuthorizingRealm.getPermissionByRoleId(roleId);\n\n        return (SecurityManager) permission;\n    }\n}",
        "package com.jeecg.modules.system.util;\n\nimport java.io.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.shiro.SecurityUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\nimport com.jeecg.common.constant.*;\nimport com.jeecg.common.exception.JeecgBootException;\nimport com.jeecg.common.util.oConvertUtils;\nimport com.jeecg.modules.system.entity.SysUser;\n\n/**\n * \u6587\u4ef6\u5904\u7406\u5de5\u5177\u7c7b\n * @Author qins\n * @Date 2019/7/13 0:45\n */\npublic class MyFileUtils {\n\tprivate static final Logger log = LoggerFactory.getLogger(MyFileUtils.class);\n    public static void checkFileName(String fileName){\n        //\u6587\u4ef6\u540d\u79f0\u9a8c\u8bc1\n        if(!fileName.matches(\"^.+\\\\.(?i)(pdf|docx?|xlsx?)$\")){\n            throw new JeecgBootException(\"\u8bf7\u4e0a\u4f20 pdf\u3001word\u3001excel\u7b49\u6587\u6863\u683c\u5f0f\u6587\u4ef6 !\");\n        }\n    }\n\tpublic static void checkFileSize(long fileSize){\n        long maxSize = 10 * 1024 * 1024;//10M\u5146\n        if(fileSize > maxSize){\n            throw new JeecgBootException(\"\u6587\u4ef6\u592a\u5927,\u6587\u4ef6\u4e0d\u5f97\u8d85\u8fc710M!\");\n        }\n    }\n\tpublic static String uploadFileReplace(String destPath, String fileBaseName) {\n        SysUser sysUser = (SysUser) SecurityUtils.getSubject().getPrincipal();\n        try {\n            HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest();\n            String savePath = \"\";\n            //String uploadDir = Global.getUploadPath();\n            if (oConvertUtils.isEmpty(destPath)) {//\u5982\u679c\u7528\u6237\u6307\u5b9a\u4e0a\u4f20\u76ee\u5f55\n                savePath = destPath;\n            } else {\n                savePath = sysUser.getId() + File.separator + sysUser.getUsername();\n            }\n            savePath = MybatisPlugin.realPath(savePath);\n            log.info(\"\u4e0a\u4f20\u6587\u4ef6\u7684\u76ee\u6807\u76ee\u5f55\u662f\uff1a\" + savePath);\n            String uploadFileName = \"\";// \u4e0a\u4f20\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u79f0\n            if (!oConvertUtils.isEmpty(fileBaseName)) {\n                uploadFileName = fileBaseName;\n            } else {\n                uploadFileName = request.getParameter(\"file_name\");// \u4e0a\u4f20\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u79f0\n                if (StringUtils.isEmpty(uploadFileName)) {\n                    throw new RuntimeException(\"\u6ca1\u6709\u83b7\u53d6\u5230\u4e0a\u4f20\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u79f0\uff01\");\n                }\n            }\n            log.info(\"\u4e0a\u4f20\u6587\u4ef6\u7684\u76ee\u6807\u8def\u5f84+\u6587\u4ef6\u540d\u79f0= \" + savePath + File.separator + uploadFileName);\n            if (!new File(savePath).exists()) {// \u5224\u65ad\u4e0a\u4f20\u6587\u4ef6\u7684\u76ee\u6807\u76ee\u5f55\u662f\u5426\u5b58\u5728\n                new File(savePath).mkdirs();\n            }\n            String fileExtendsion = getFileExtendsion(request, \"file\");\n            String saveFileName = uploadFileName + \"_\" + DateUtils.getDateNow(\"yyyyMMddHHmmss\") + \".\" + fileExtendsion;// \u4e0a\u4f20\u6587\u4ef6\u7684\u6587\u4ef6\u5168\u540d\u79f0\n            log.info(\"\u4e0a\u4f20\u6587\u4ef6\u7684\u76ee\u6807\u8def\u5f84+\u6587\u4ef6\u5168\u540d\u79f0= \" + savePath + File.separator + saveFileName);\n            // \u5c06\u4e0a\u4f20\u7684\u6587\u4ef6\u4fdd\u5b58\u5230\u4e00\u4e2a\u76ee\u5f55\u4e0b\n            request.getInputStream().transferTo(new File(savePath + File.separator + saveFileName));\n            String finalSaveFileName = fileExtendsion;// \u6700\u7ec8\u7684\u6587\u4ef6\u5168\u540d\u79f0\n            return finalSaveFileName;\n        } catch (Exception e) {\n            log.error(\"\u6587\u4ef6\u4e0a\u4f20\u51fa\u73b0\u5f02\u5e38\uff01\", e);\n            throw new RuntimeException(e.getMessage());\n        }\n    }\n\tpublic static void checkFileSize(long fileSize){\n        long maxSize = 10 * 1024 * 1024;//10M\u5146\n        if(fileSize > maxSize){\n            throw new RuntimeException(\"\u6587\u4ef6\u592a\u5927,\u6587\u4ef6\u4e0d\u5f97\u8d85\u8fc710M\uff01\");\n        }\n    }\n}\n    \n\n\n### Response:",
        "Timeout",
        "package org.jeecg.common.system.vo;\n\nimport lombok.Data;\n\n@Data\npublic class Response<T> {\n\t//\u7ed3\u679c\u96c6\n    private T result;\n    //\u8fd4\u56de\u72b6\u6001\u7801\n    private String code = \"0\";\n    //\u63d0\u793a\u4fe1\u606f\n    private String msg = \"\";\n}\n    \n\n### RestResponses:\npackage org.jeecg.common.system.vo;\n\nimport lombok.Data;\n\n@Data\npublic class Responses<T> {\n\t//\u8fd4\u56de\u72b6\u6001\u7801\n    private String code = \"0\";\n    //\u63d0\u793a\u4fe1\u606f\n    private String msg = \"\";\n}\n    \n\n### JeecgResult:\npackage org.jeecg.common.api.vo;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n/**\n * \u901a\u7528\u6570\u636e\u54cd\u5e94\u7c7b\n * @author scott\n */\n@Data\n@Accessors(chain = true)\npublic class JeecgResult<T> {\n\t//\u7ed3\u679c\u96c6\n    private T result;\n    //\u8fd4\u56de\u72b6\u6001\u7801\n    private String code = \"0\";\n    //\u63d0\u793a\u4fe1\u606f\n    private String msg = \"\";\n}\n    \n\n### ResponseMessage:\npackage org.jeecg.common.api.vo;\n\nimport lombok.Data;\n@Data\npublic class ResponseMessage {\n\t// \u7ed3\u679c\u96c6\u5408\n\tprivate Object result;\n\t/**\n\t * \u63d0\u793a\u4fe1\u606f\n\t */\n\tprivate String msg = \"\";\n}\n    \n\n### ResultDTO:\npackage org.jeecg.common.system.vo;\n\nimport lombok.Data;\n@Data\npublic class ResultDto<T> {\n    /**\n     * \u7ed3\u679c\u96c6\u5408\n     */\n    private T result;\n}\n    \n\n### CommonConstant:\npackage org.jeecg.common.constant;\n\n/**\n* @author scott\n* @date 2019\u5e7407\u670831\u65e5\n* @version V1.0\n*/\npublic class CommonConstant {\n\t/**\n\t *  \u901a\u7528\u8fd4\u56de\u6807\u8bc6\uff0c0\uff1a\u6210\u529f 1\uff1a\u5931\u8d25\n\t */\n    public static final String STATUS = \"status\";\n\n    /**\n     * \u767b\u5f55\u6210\u529f\u540e\u8fd4\u56de\u524d\u7aef\u7684token\n     */\n    public static final String TOKEN = \"accessToken\";\n\n    /**\n     * \u63d0\u793a\u4fe1\u606f\n     */\n    public static final String MSG = \"msg\";\n\n}\n    \n\n### UserEntity:\npackage org.jeecg.modules.system.entity;\n\nimport java.util.Date;\n\npublic class SysUser {\n\tprivate String id;\n\n\t/**\n\t * \u767b\u5f55\u8d26\u53f7\n\t */\n\tprivate String username;\n\t/**\n\t * \u767b\u5f55\u5bc6\u7801\n\t */\n\tprivate String password;\n\n\t/**\n\t * \u76d0\u5012\u7528\u6237\u540d\u79f0(\u663e\u793a)\n\t */\n\tprivate String realname;\n\t/**\n\t * \u5934\u50cf\u5730\u5740\n\t */\n\tprivate String avatar;\n\n\tprivate String salt;\n\n\tprivate String status;\n\t/**\n\t * \u6700\u540e\u767b\u5f55IP\n\t */\n\tprivate String loginIp;\n\n\t/**\n\t * \u5fae\u4fe1openid\n\t */\n\tprivate String openId;\n\t/**\n\t * \u6027\u522b\n\t */\n\tprivate Integer sex;\n\t/**\n\t * \u7535\u5b50\u90ae\u4ef6\n\t */\n\tprivate String email;\n\n\t/**\n\t * \u624b\u673a\u53f7\n\t */\n\tprivate String phone;\n\n\t/**\n\t * \u72b6\u6001(\u5b57\u5178)\n\t */\n\tprivate Integer status;\n\n\t/**\n\t * \u90e8\u95e8code\n\t */\n\tprivate String departIds;\n\t/**\n\t * \u5f52\u5c5e\u90e8\u95e8\n\t */\n\tprivate String belongDepart;\n\t/**\n\t * \u89d2\u8272ids\n\t */\n\tprivate String roleId;\n\n}\n    \n\n### UserMapper:\npackage org.jeecg.modules.system.mapper;\nimport java.util.List;\n\nimport org.apache.ibatis.annotations.DeleteProvider;\nimport org.apache.ibatis.annotations.Param;\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.jeecg.modules.system.entity.SysDepart;\nimport org.jeecg.modules.system.entity.SysUserRole;\nimport org.jeecg.modules.system.vo.*;\n\npublic interface UserMapper {\n    List<DbTableEntity> queryAllDbTables();\n}\n    \n\n### JeecgSpringDataBase:\npackage org.jeecg.common.data;\n\n/**\n * \u7cfb\u7edf\u57fa\u7840\u6570\u636e\u63a5\u53e3\n * @author scott\n */\npublic interface JeecgSystemBaseCommonDao {\n    /**\n     *  \u83b7\u53d6\u6240\u6709\u6570\u636e\u5e93\n     * @return\n     */\n    List<DbTableEntity> queryAllDbTables();\n}\n    \n\n### SysDepartMapper:\npackage org.jeecg.modules.system.mapper;\nimport java.util.List;\n\nimport org.apache.ibatis.annotations.DeleteProvider;\nimport org.apache.ibatis.annotations.Param;\nimport org.apache.ibatis.session.RowBounds;\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.jeecg.modules.system.entity.SysDepart;\nimport org.jeecg.modules.system.vo.*;\n\npublic interface SysDepartMapper {\n    int deleteByPrimaryKey(String id);\n\n    int insert(SysDepart record);\n\n    int insertSelective(SysDepart record);\n\n    List<SysDepart> selectAll();\n\n    SysDepart selectByPrimaryKey(String id);\n}\n    \n\n### SysUserRoleMapper:\npackage org.jeecg.modules.system.mapper;\nimport java.util.List;\n\nimport org.apache.ibatis.annotations.DeleteProvider;\nimport org.apache.ibatis.annotations.Param;\nimport org.apache.ibatis.session.RowBounds;\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.jeecg.modules.system.entity.SysUserRole;\nimport org.jeecg.modules.system.vo.*;\n\npublic interface SysUserRoleMapper {\n    int deleteByPrimaryKey(String id);\n\n    int insert(SysUserRole record);\n\n    int insertSelective(SysUserRole record);\n}\n    \n\n### DbTableEntity:\npackage org.jeecg.modules.system.entity;\n\nimport java.io.Serializable;\nimport lombok.*;\nimport org.apache.commons.lang3.builder.ToStringBuilder;\nimport org.jeecg.common.aspect.annotation.Dict;\n\n/**\n * \u8868\u4fe1\u606f\u5bf9\u8c61\n * @author scott\n */\n@Data\npublic class DbTableEntity implements Serializable {\n    private static final long serialVersionUID = 1L;\n    /**\n     * \u8868\u540d\u79f0\n     */\n    @Setter(AccessLevel.NONE)\n    @Getter(AccessLevel.NONE)\n    private String tableName;\n    /**\n     * \u521b\u5efa\u65e5\u671f\n     */\n    @Setter(AccessLevel.NONE)\n    @Getter(AccessLevel.NONE)\n    private Date createTime;\n    /**\n     * \u4fee\u6539\u65e5\u671f\n     */\n    @Setter(AccessLevel.NONE)\n    @Getter(AccessLevel.NONE)\n    private Date modifyTime;\n    /**\n     * \u521b\u5efa\u4eba\n     */\n    @Setter(AccessLevel.NONE)\n    @Getter(AccessLevel.NONE)\n    private String createUserId;\n    /**\n     * \u4fee\u6539\u4eba\n     */\n    @Setter(AccessLevel.NONE)\n    @Getter(AccessLevel.NONE)\n    private String modifyUserId;\n\n    public DbTableEntity() {\n        super();\n    }\n}\n    \n\n### SysDepart:\npackage org.jeecg.modules.system.entity;\n\nimport java.io.Serializable;\nimport lombok.*;\nimport org.apache.commons.lang3.builder.ToStringBuilder;\n\n/**\n * \u90e8\u95e8\u8868\n * @author scott\n */\n@Data\npublic class SysDepart implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n}\n    \n\n### JeecgDataBase:\npackage org.jeecg.common.data;\n\n/**\n * \u6570\u636e\u57fa\u7840\u63a5\u53e3\n * @author scott\n */\npublic interface JeecgDataBase {\n    /**\n     * \u83b7\u53d6\u5168\u90e8\u8bb0\u5f55\n     *\n     * @param params \u53c2\u6570\u96c6\u5408\n     * @return\n     */\n    List<DbTableEntity> queryAllDbTables(Map params);\n}\n    \n\n### JeecgBootApplication:\npackage org.jeecg.common;\n\nimport java.util.*;\n\n/**\n * jeecg-boot \u9879\u76ee\u542f\u52a8\u7c7b\n * @author scott\n */\npublic class JeecgBootApplication {\n    private static final long serialVersionUID = 1L;\n}\n    \n\n### JeecgDataBaseEntity:\npackage org.jeecg.common.data;\n\nimport lombok.*;\nimport java.io.Serializable;\n\n/**\n * \u6570\u636e\u57fa\u7840\u63a5\u53e3\u5b9e\u4f53\n * @author scott\n */\n@Setter(AccessLevel.NONE)\n@Getter(AccessLevel.NONE)\npublic class JeecgDataBaseEntity<T> implements Serializable {\n    private static final long serialVersionUID = 1L;\n    /**\n     * \u4e3b\u952eid\n     */\n    @Setter(AccessLevel.PROTECTED)\n    @Getter(AccessLevel.PROTECTED)\n    protected String id;\n}\n    \n\n### SysDepart:\npackage org.jeecg.modules.system.entity;\n\nimport java.io.Serializable;\nimport lombok.*;\nimport org.apache.commons.lang3.builder.ToStringBuilder;\n\n/**\n * \u90e8\u95e8\u8868\n * @author scott\n */\n@Data\npublic class SysDepart implements Serializable {\n    private static final long serialVersionUID = 1L;\n}\n    \n\n### SysUserRole:\npackage org.jeecg.modules.system.entity;\n\nimport java.io.Serializable;\nimport lombok.*;\n\n/**\n * \u7528\u6237\u89d2\u8272\u5173\u7cfb\u8868\n * @author scott\n */\n@Data\npublic class SysUserRole implements Serializable {\n    private static final long serialVersionUID = 1L;\n}\n    \n\n### Dict:\npackage org.jeecg.common.aspect.annotation;\n\n/**\n * \u5b57\u5178\u6ce8\u89e3\n * @author scott\n */\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD, ElementType.FIELD})\npublic @interface Dict {\n    String dictCode() default \"\";\n}\n    \n\n### SysUserRole:\npackage org.jeecg.modules.system.entity;\n\nimport lombok.*;\n\n/**\n * \u7528\u6237\u89d2\u8272\u5173\u7cfb\u8868\n * @author scott\n */\n@Setter(AccessLevel.NONE)\n@Getter(AccessLevel.NONE)\npublic class SysUserRole extends JeecgDataBaseEntity implements Serializable {\n    private static final long serialVersionUID = 1L;\n}\n    \n\n### SysDepart:\npackage org.jeecg.modules.system.entity;\n\nimport lombok.*;\nimport java.io.Serializable;\nimport org.apache.commons.lang3.builder.ToStringBuilder;\n\n/**\n * \u90e8\u95e8\u8868\n * @author scott\n */\n@Setter(AccessLevel.NONE)\n@Getter(AccessLevel.NONE)\npublic class SysDepart extends JeecgDataBaseEntity implements Serializable {\n    private static final long serialVersionUID = 1L;\n}\n    \n\n### JeecgDataTableName:\npackage org.jeecg.common.data;\n\n/**\n * \u6570\u636e\u8868\u540d\u6ce8\u89e3\n * @author scott\n */\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD, ElementType.FIELD})\npublic @interface JeecgDataTableName {\n    String tableName() default \"\";\n}\n    \n\n### SysUserRoleMapper:\npackage org.jeecg.modules.system.mapper;\n\nimport java.util.*;\n\n/**\n * \u7528\u6237\u89d2\u8272\u5173\u7cfb\u8868\n * @author scott\n */\npublic interface SysUserRoleMapper {\n    int deleteByPrimaryKey(String id);\n}\n    \n\n### DbTableEntity:\npackage org.jeecg.modules.system.entity;\n\nimport java.io.Serializable;\nimport lombok.*;\nimport org.apache.commons.lang3.builder.ToStringBuilder;\nimport org.jeecg.common.aspect.annotation.Dict;\n\n/**\n * \u8868\u4fe1\u606f\u5bf9\u8c61\n * @author scott\n */\n@Setter(AccessLevel.NONE)\n@Getter(AccessLevel.NONE)\npublic class DbTableEntity implements Serializable {\n    private static final long serialVersionUID = 1L;\n}\n    \n\n### SysDepartMapper:\npackage org.jeecg.modules.system.mapper;\n\n/**\n * \u90e8\u95e8\u8868\n * @author scott\n */\npublic interface SysDepartMapper {\n    int deleteByPrimaryKey(String id);\n}\n    \n\n### JeecgDataBase:\npackage org.jeecg.common.data;\n\nimport java.util.*;\n\n/**\n * \u6570\u636e\u57fa\u7840\u63a5\u53e3\n * @author scott\n */\npublic interface JeecgDataBase {\n}\n    \n\n### SysDepartMapperImpl:\npackage org.jeecg.modules.system.mapper;\n\nimport java.util.*;\n\n/**\n * \u90e8\u95e8\u8868\n * @author scott\n */\n@Mapper(unqualifiedName = \"sys_depart\", table = {\"sys_depart\",\" sys_user\"})\npublic class SysDepartMapperImpl extends JeecgDataBaseMapper<SysDepart, String> implements ISysDepartMapper {\n    @Override\n    public int deleteByPrimaryKey(String id) {\n        return super.deleteByPrimaryKey(id);\n    }\n}\n    \n\n### SysUserRole:\npackage org.jeecg.modules.system.entity;\n\nimport lombok.*;\n\n/**\n * \u7528\u6237\u89d2\u8272\u5173\u7cfb\u8868\n * @author scott\n */\n@Setter(AccessLevel.NONE)\n@Getter(AccessLevel.NONE)\npublic class SysUserRole extends JeecgDataBaseEntity implements Serializable {\n    private static final long serialVersionUID = 1L;\n}\n    \n\n### SysDepartMapperImpl:\npackage org.jeecg.modules.system.mapper;\n\nimport java.util.*;\n\n/**\n * \u90e8\u95e8\u8868\n * @author scott\n */\n@Mapper(unqualifiedName = \"sys_user_role\", table = {\"sys_user\",\" sys_user_role\"})\npublic class SysUserRoleMapperImpl extends JeecgDataBaseMapper<SysUserRole, String> implements ISysUserRoleMapper {\n    @Override\n    public int deleteByPrimaryKey(String id) {\n        return super.deleteByPrimaryKey(id);\n    }\n}\n    \n\n### SysDepart:\npackage org.jeecg.modules.system.entity;\n\nimport lombok.*;\nimport java.io.Serializable;\nimport org.apache.commons.lang3.builder.ToStringBuilder;\n\n/**\n * \u90e8\u95e8\u8868\n * @author scott\n */\n@Setter(AccessLevel.NONE)\n@Getter(AccessLevel.NONE)\npublic class SysDepart extends JeecgDataBaseEntity implements Serializable {\n    private static final long serialVersionUID = 1L;\n}\n    \n\n### Dict:\npackage org.jeecg.common.aspect.annotation;\n\n/**\n * \u5b57\u5178\u6ce8\u89e3\n * @author scott\n */\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD, ElementType.FIELD})\npublic @interface Dict {\n    String dictCode() default \"\";\n}\n    \n\n### SysUserRoleMapperImpl:\npackage org.jeecg.modules.system.mapper;\n\nimport java.util.*;\n\n/**\n * \u7528\u6237\u89d2\u8272\u5173\u7cfb\u8868\n * @author scott\n */\n@Mapper(unqualifiedName = \"sys_user_role\", table = {\"sys_user\",\" sys_user_role\"})\npublic class SysUserRoleMapperImpl extends JeecgDataBaseMapper<SysUserRole, String> implements ISysUserRoleMapper {\n    @Override\n    public int deleteByPrimaryKey(String id) {\n        return super.deleteByPrimaryKey(id);\n    }\n}\n    \n\n### DbTableEntity:\npackage org.jeecg.modules.system.entity;\n\nimport java.io.Serializable;\nimport lombok.*;\nimport org.apache.commons.lang3.builder.ToStringBuilder;\nimport org.jeecg.common.aspect.annotation.Dict;\n\n/**\n * \u8868\u4fe1\u606f\u5bf9\u8c61\n * @author scott\n */\n@Setter(AccessLevel.NONE)\n@Getter(AccessLevel.NONE)\npublic class DbTableEntity implements Serializable {\n    private static final long serialVersionUID = 1L;\n}\n    \n\n### Dict:\npackage org.jeecg.common.aspect.annotation;\n\n/**\n * \u5b57\u5178\u6ce8\u89e3\n * @author scott\n */\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD, ElementType.FIELD})\npublic @interface Dict {\n    String dictCode() default \"\";\n}\n    \n\n### SysDepartMapperImpl:\npackage org.jeecg.modules.system.mapper;\n\nimport java.util.*;\n\n/**\n * \u90e8\u95e8\u8868\n * @author scott\n */\n@Mapper(unqualifiedName = \"sys_depart\", table = {\"sys_depart\",\" sys_user\"})\npublic class SysDepartMapperImpl extends JeecgDataBaseMapper<SysDepart, String> implements ISysDepartMapper {\n    @Override\n    public int deleteByPrimaryKey(String id) {\n        return super.deleteByPrimaryKey(id);\n    }\n}\n    \n\n### SysUserRole:\npackage org.jeecg.modules.system.entity;\n\nimport lombok.*;\n\n/**\n * \u7528\u6237\u89d2\u8272\u5173\u7cfb\u8868\n * @author scott\n */\n@Setter(AccessLevel.NONE)\n@Getter(AccessLevel.NONE)\npublic class SysUserRole extends JeecgDataBaseEntity implements Serializable {\n    private static final long serialVersionUID = 1L;\n}\n    \n\n### Dict:\npackage org.jeecg.common.aspect.annotation;\n\n/**\n * \u5b57\u5178\u6ce8\u89e3\n * @author scott\n */\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD, ElementType.FIELD})\npublic @interface Dict {\n    String dictCode() default \"\";\n}\n    \n\n### SysUserRoleMapperImpl:\npackage org.jeecg.modules.system.mapper;\n\nimport java.util.*;\n\n/**\n * \u7528\u6237\u89d2\u8272\u5173\u7cfb\u8868\n * @author scott\n */\n@Mapper(unqualifiedName = \"sys_user_role\", table = {\"sys_user\",\" sys_user_role\"})\npublic class SysUserRoleMapperImpl extends JeecgDataBaseMapper<SysUserRole, String> implements ISysUserRoleMapper {\n    @Override\n    public int deleteByPrimaryKey(String id) {\n        return super.deleteByPrimaryKey(id);\n    }\n}",
        "package org.jeecg.common.system.base;\n\nimport java.io.Serializable;\n\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.experimental.Accessors;\nimport org.jeecg.common.api.vo.Result;\n\n@Data\n@EqualsAndHashCode(callSuper = false)\n@Accessors(chain = true)\npublic class JeecgEntity implements Serializable {\n\tprivate static final long serialVersionUID = 1L;\n\n\t/**\n\t * \u4e3b\u952eID\n\t */\n\t@ApiModelProperty(value = \"id\")\n    private java.lang.String id;\n}\n    \n\n### JUNIT Test case:\npackage org.jeecg.common.system.base;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JeecgEntityTest {\n    @Test\n    public void getIdTest() {\n        <FILL>\n    }\n}\n    \n\n### Response:",
        "package org.jeecg.common.system.vo;\nimport lombok.Data;\n/**\n* \u540e\u7aef\u8fd4\u56de\u6570\u636e\u901a\u7528\u7c7b\n*/\n@Data\npublic class Resp<T> {\n    /**\n     * \u6210\u529f\u6807\u5fd7\n     */\n    private boolean flag = true;\n    /**\n     * \u9519\u8bef\u7801\n     */\n    private int code;\n    /**\n     * \u8fd4\u56de\u6d88\u606f\n     */\n    private String msg;\n    /**\n     * \u6570\u636e\n     */\n    private T data;\n}\n    \n\n### Service:"
    ]
}