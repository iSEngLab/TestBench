{
    "project_name": "jeecg-boot",
    "file_name": "JwtUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/util/JwtUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.system.util",
    "docstring": "/**\n\t * \u6839\u636erequest\u4e2d\u7684token\u83b7\u53d6\u7528\u6237\u8d26\u53f7\n\t * \n\t * @param request\n\t * @return\n\t * @throws JeecgBootException\n\t */",
    "source_code": "\npublic static String getUserNameByToken(HttpServletRequest request) throws JeecgBootException {\n\tString accessToken = request.getHeader(\"X-Access-Token\");\n\tString username = getUsername(accessToken);\n\tif (oConvertUtils.isEmpty(username)) {\n\t\tthrow new JeecgBootException(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\");\n\t}\n\treturn username;\n}\n",
    "class_name": "JwtUtil",
    "method_name": "getUserNameByToken",
    "arguments": [
        "HttpServletRequest request"
    ],
    "generate_test": [
        "package org.jeecg.common.system.util;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.time.Clock;\nimport java.time.Instant;\nimport java.util.Date;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.jeecg.common.system.vo.LoginUser;\nimport org.junit.jupiter.api.*;\n\npublic class JwtUtilTest {\n    private static final String USERNAME = \"test-user\";\n    private static final String SECRET = \"secret\";\n    private static final String TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\";\n\n    private JwtUtil jwtUtil;\n\n    @BeforeEach\n    public void setUp() {\n        jwtUtil = new JwtUtil();\n    }\n\n    @Test\n    public void getUserNameByTokenTest() {\n        // Given a valid JWT token\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        Mockito.when(request.getHeader(\"X-Access-Token\")).thenReturn(TOKEN);\n\n        // When the getUserNameByToken method is called with this token\n        String username = jwtUtil.getUsername(request);\n\n        // Then the correct username should be returned\n        assertEquals(USERNAME, username);\n    }\n}",
        "\npackage org.jeecg.common.system.util;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.JWTVerifier;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.exceptions.JWTDecodeException;\nimport com.auth0.jwt.interfaces.DecodedJWT;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.google.common.base.Joiner;\nimport java.io.IOException;\nimport java.util.Date;\nimport javax.servlet.http.HttpServletRequest;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.shiro.SecurityUtils;\nimport org.jeecg.common.api.vo.Result;\nimport org.jeecg.common.constant.CommonConstant;\nimport org.jeecg.common.constant.DataBaseConstant;\nimport org.jeecg.common.constant.SymbolConstant;\nimport org.jeecg.common.constant.TenantConstant;\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.jeecg.common.system.vo.LoginUser;\nimport org.jeecg.common.system.vo.SysUserCacheInfo;\nimport org.jeecg.common.util.DateUtils;\nimport org.jeecg.common.util.SpringContextUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() {\n        // arrange\n        String accessToken = \"test-access-token\";\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(accessToken);\n\n        // act\n        String username = JwtUtil.getUserNameByToken(request);\n\n        // assert\n        assertEquals(\"username\", username);\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() throws JeecgBootException {\n        String accessToken = \"X-Access-Token\";\n        String username = \"test_username\";\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(accessToken);\n        String actualUsername = JwtUtil.getUserNameByToken(request);\n        assertEquals(actualUsername, username);\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() throws JeecgBootException {\n        // Arrange\n        HttpServletRequest request = new MockHttpServletRequest();\n        String accessToken = \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\";\n        request.setHeader(\"X-Access-Token\", accessToken);\n        \n        // Act\n        String username = JwtUtil.getUserNameByToken(request);\n        \n        // Assert\n        assertEquals(\"user@example.com\", username);\n    }\n}",
        "@Test\npublic void getUserNameByTokenTest() {\n    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n    String accessToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\";\n    Mockito.when(request.getHeader(\"X-Access-Token\")).thenReturn(accessToken);\n    String username = JwtUtil.getUserNameByToken(request);\n    assertEquals(\"testuser\", username);\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() {\n        // Arrange\n        String accessToken = \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\";\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(accessToken);\n\n        // Act\n        String username = JwtUtil.getUserNameByToken(request);\n\n        // Assert\n        assertEquals(\"johndoe\", username);\n    }\n}",
        "@Test\npublic void getUserNameByTokenTest() {\n    // Arrange\n    String accessToken = \"some_token\";\n    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n    Mockito.when(request.getHeader(\"X-Access-Token\")).thenReturn(accessToken);\n\n    // Act\n    String username = JwtUtil.getUserNameByToken(request);\n\n    // Assert\n    assertEquals(\"some_username\", username);\n}",
        "@Test\npublic void getUserNameByTokenTest() {\n    // Create a fake HTTP request\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    \n    // Set the header to contain a valid JWT token\n    String accessToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\" +\n            \"eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.\" +\n            \"TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\";\n    when(request.getHeader(\"X-Access-Token\")).thenReturn(accessToken);\n    \n    // Call the getUserNameByToken() method with the fake request as input\n    String username = JwtUtil.getUserNameByToken(request);\n    \n    // Verify that the output matches the expected username\n    assertEquals(\"Alice\", username);\n}",
        "@Test\npublic void getUserNameByTokenTest() {\n    // Arrange\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    when(request.getHeader(\"X-Access-Token\")).thenReturn(\"access_token\");\n    JwtUtil jwtUtil = new JwtUtil();\n\n    // Act\n    String actualUsername = jwtUtil.getUserNameByToken(request);\n\n    // Assert\n    assertEquals(\"user1\", actualUsername);\n}",
        "package org.jeecg.common.system.util;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.JWTVerifier;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.exceptions.JWTDecodeException;\nimport com.auth0.jwt.interfaces.DecodedJWT;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.*;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() throws JeecgBootException {\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(\"123456\");\n        assertEquals(\"user\", JwtUtil.getUserNameByToken(request));\n    }\n}"
    ]
}