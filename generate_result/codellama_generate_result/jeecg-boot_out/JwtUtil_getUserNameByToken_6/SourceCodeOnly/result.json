{
    "project_name": "jeecg-boot",
    "file_name": "JwtUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/util/JwtUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.system.util",
    "docstring": "/**\n\t * \u6839\u636erequest\u4e2d\u7684token\u83b7\u53d6\u7528\u6237\u8d26\u53f7\n\t * \n\t * @param request\n\t * @return\n\t * @throws JeecgBootException\n\t */",
    "source_code": "\npublic static String getUserNameByToken(HttpServletRequest request) throws JeecgBootException {\n\tString accessToken = request.getHeader(\"X-Access-Token\");\n\tString username = getUsername(accessToken);\n\tif (oConvertUtils.isEmpty(username)) {\n\t\tthrow new JeecgBootException(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\");\n\t}\n\treturn username;\n}\n",
    "class_name": "JwtUtil",
    "method_name": "getUserNameByToken",
    "arguments": [
        "HttpServletRequest request"
    ],
    "generate_test": [
        "\npackage org.jeecg.common.system.util;\n\nimport javax.servlet.http.HttpServletRequest;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.*;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() {\n        HttpServletRequest request = null; // create a mock request object\n        String accessToken = \"test-token\"; // set the access token for the test\n        request.addHeader(\"X-Access-Token\", accessToken); // add the access token to the request header\n        \n        assertEquals(JwtUtil.getUserNameByToken(request), \"username\"); // use the JWT utility method to get the username from the token and check that it matches the expected value\n    }\n}",
        "\n@Test\npublic void getUserNameByTokenTest() {\n    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n    String accessToken = \"test-access-token\";\n    when(request.getHeader(\"X-Access-Token\")).thenReturn(accessToken);\n    \n    String username = JwtUtil.getUserNameByToken(request);\n    assertEquals(\"user1\", username);\n}",
        "\npackage org.jeecg.common.system.util;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.mockito.Mockito.*;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() throws JeecgBootException {\n        String accessToken = \"test_token\";\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(accessToken);\n\n        String username = JwtUtil.getUsername(accessToken);\n\n        assertEquals(\"username\", username);\n    }\n}",
        "\npackage org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() {\n        String accessToken = \"fake-access-token\";\n        String username = JwtUtil.getUsername(accessToken);\n        assertEquals(\"John Doe\", username);\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jeecg.common.system.util.*;",
        "@Test\npublic void getUserNameByTokenTest() {\n    // Arrange\n    String accessToken = \"123456\";\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    when(request.getHeader(\"X-Access-Token\")).thenReturn(accessToken);\n    \n    // Act\n    String username = JwtUtil.getUserNameByToken(request);\n    \n    // Assert\n    assertEquals(\"username\", username);\n}",
        "\n@Test\npublic void getUserNameByTokenTest() {\n    String accessToken = \"your-access-token\";\n    String username = JwtUtil.getUsername(accessToken);\n    assertEquals(\"username\", username);\n}",
        "@Test\npublic void getUserNameByTokenTest() {\n    // Create a mocked HttpServletRequest object\n    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n    \n    // Set the access token and username in the request headers\n    when(request.getHeader(\"X-Access-Token\")).thenReturn(\"access_token\");\n    when(request.getHeader(\"username\")).thenReturn(\"John Doe\");\n    \n    // Invoke the getUserNameByToken method with the mocked request object\n    String username = JwtUtil.getUserNameByToken(request);\n    \n    // Assert that the returned value is equal to the expected username\n    assertEquals(\"John Doe\", username);\n}",
        "@Test\npublic void getUserNameByTokenTest() {\n    // Arrange\n    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n    String accessToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\";\n    Mockito.when(request.getHeader(\"X-Access-Token\")).thenReturn(accessToken);\n    \n    // Act\n    String username = JwtUtil.getUserNameByToken(request);\n    \n    // Assert\n    assertEquals(\"alice\", username);\n}",
        "\npackage org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() {\n        String accessToken = \"fake-access-token\";\n        String username = JwtUtil.getUserNameByToken(accessToken);\n        \n        assertEquals(\"user1\", username); // expected user name is \"user1\"\n    }\n}\n"
    ]
}