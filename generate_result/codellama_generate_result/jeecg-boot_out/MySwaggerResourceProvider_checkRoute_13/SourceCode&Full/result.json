{
    "project_name": "jeecg-boot",
    "file_name": "MySwaggerResourceProvider.java",
    "relative_path": "jeecg-boot/jeecg-server-cloud/jeecg-cloud-gateway/src/main/java/org/jeecg/handler/swagger/MySwaggerResourceProvider.java",
    "execute_path": "jeecg-boot/jeecg-server-cloud",
    "package": "org.jeecg.handler.swagger",
    "docstring": "/**\n     * \u68c0\u6d4bnacos\u4e2d\u662f\u5426\u6709\u5065\u5eb7\u5b9e\u4f8b\n     * @param routeId\n     * @return\n     */",
    "source_code": "\nprivate Boolean checkRoute(String routeId) {\n    Boolean hasRoute = false;\n    try {\n        //\u4fee\u590d\u4f7f\u7528\u5e26\u547d\u540d\u7a7a\u95f4\u542f\u52a8\u7f51\u5173swagger\u770b\u4e0d\u5230\u63a5\u53e3\u6587\u6863\u7684\u95ee\u9898\n        Properties properties=new Properties();\n        properties.setProperty(\"serverAddr\",serverAddr);\n        if(namespace!=null && !\"\".equals(namespace)){\n            log.info(\"nacos.discovery.namespace = {}\", namespace);\n            properties.setProperty(\"namespace\",namespace);\n        }\n        if(username!=null && !\"\".equals(username)){\n            properties.setProperty(\"username\",username);\n        }\n        if(password!=null && !\"\".equals(password)){\n            properties.setProperty(\"password\",password);\n        }\n        //\u3010issues/5115\u3011\u56e0swagger\u6587\u6863\u5bfc\u81f4gateway\u5185\u5b58\u6ea2\u51fa\n        if (this.naming == null) {\n            this.naming = NamingFactory.createNamingService(properties);\n        }\n        log.info(\" config.group : {}\", group);\n        List<Instance> list = this.naming.selectInstances(routeId, group , true);\n        if (ObjectUtil.isNotEmpty(list)) {\n            hasRoute = true;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return hasRoute;\n}\n",
    "class_name": "MySwaggerResourceProvider",
    "method_name": "checkRoute",
    "arguments": [
        "String routeId"
    ],
    "generate_test": [
        "package org.jeecg.handler.swagger;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Component;\nimport springfox.documentation.swagger.web.*;\nimport java.util.*;\n\n/**\n * @author zyf\n * @date: 2021-11-15 23:46\n */\n@Slf4j\n@Primary\n@Component\npublic class MySwaggerResourceProvider implements SwaggerResourcesProvider {\n    private final RouteLocator routeLocator;\n    /**\n     * nacos serverAddr\n     */\n    @Value(\"${spring.cloud.nacos.discovery.server-addr:#{null}}\")\n    private String serverAddr;\n    /**\n     * nacos namespace\n     */\n    @Value(\"${spring.cloud.nacos.discovery.namespace:#{null}}\")\n    private String namespace;\n    /**\n     * nacos username\n     */\n    @Value(\"${spring.cloud.nacos.discovery.username:#{null}}\")\n    private String username;\n    /**\n     * nacos password\n     */\n    @Value(\"${spring.cloud.nacos.discovery.password:#{null}}\")\n    private String password;\n    \n    /**\n     * Swagger\u4e2d\u9700\u8981\u6392\u9664\u7684\u670d\u52a1\n     */\n    private String[] excludeServiceIds=new String[]{\"jeecg-cloud-monitor\"};\n\n\n    /**\n     * \u7f51\u5173\u5e94\u7528\u540d\u79f0\n     */\n    @Value(\"${spring.application.name}\")\n    private String self;\n\n    @Autowired\n    public MySwaggerResourceProvider(RouteLocator routeLocator) {\n        this.routeLocator = routeLocator;\n    }\n\n    @Override\n    public List<SwaggerResource> get() {\n        List<SwaggerResource> resources = new ArrayList<>();\n        List<String> routeHosts = new ArrayList<>();\n        // \u83b7\u53d6\u6240\u6709\u53ef\u7528\u7684host\uff1aserviceId\n        routeLocator.getRoutes().filter(route -> route.getUri().getHost() != null)\n                .filter(route -> !self.equals(route.getUri().getHost()))\n                .subscribe(route ->{\n                    //update-begin---author:zyf ---date:20220413 for\uff1a\u8fc7\u6ee4\u6389\u65e0\u6548\u8def\u7531,\u907f\u514d\u63a5\u53e3\u6587\u6863\u62a5\u9519\u65e0\u6cd5\u6253\u5f00\n                    boolean hasRoute=checkRoute(route.getId());\n                    if(hasRoute){\n                        routeHosts.add(route.getUri().getHost());\n                    }\n                    //update-end---author:zyf ---date:20220413 for\uff1a\u8fc7\u6ee4\u6389\u65e0\u6548\u8def\u7531,\u907f\u514d\u63a5\u53e3\u6587\u6863\u62a5\u9519\u65e0\u6cd5\u6253\u5f00\n                });\n\n        // \u8bb0\u5f55\u5df2\u7ecf\u6dfb\u52a0\u8fc7\u7684server\uff0c\u5b58\u5728\u540c\u4e00\u4e2a\u5e94\u7528\u6ce8\u518c\u4e86\u591a\u4e2a\u670d\u52a1\u5728nacos\u4e0a\n        Set<String> dealed = new HashSet<>();\n        routeHosts.forEach(instance -> {\n            // \u62fc\u63a5url\n            String url = \"/\" + instance.toLowerCase() + SWAGGER2URL;\n            if (!dealed.contains(url)) {\n                dealed.add(url);\n                log.info(\" Gateway add SwaggerResource: {}\",url);\n                SwaggerResource swaggerResource = new SwaggerResource();\nswaggeraggerResource.setUrl(url);\nresources.add(swaggeraggerResource);\n        });\n        \n        return resources;\n    }\n    \n    public boolean checkRoute(String routeId) {\n        try {\n            NacosDubbo nacosDubbo = nacosRegistry.get(routeId);\n            if (nacosDubbo == null){\n                log.error(\"NacosDubbo does not exist: \" + routeId);\n                 return false;\n            } else {\n                RouteDefinition routeDefination = nacosDubbo.getRoute();\n                URL url = new URL(routeDefination.getUri());\n                String host = url.getHost();\n                if (nacosDubbo.isValid() && \"localhost\".equalsIgnoreCase(host)) {\n                    return true;\n                } else {\n                    log.error(\"NacosDubbo is invalid: \" + routeId);\n                        return false;\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Could not find NacosDubbo: \" + routeId, e);\n            return false;\n        }\n    }\n    \n}",
        "package org.jeecg.handler.swagger;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Component;\nimport springfox.documentation.swagger.web.SwaggerResource;\nimport springfox.documentation.swagger.web.SwaggerResourcesProvider;\n\nimport java.util.*;\n\n@Slf4j\n@Primary //\u9700\u8981\u914d\u7f6e\u4e3a\u4e3b,\u5426\u5219\u62a5\u9519\uff0c\u539f\u56e0\u662f\u6709\u591a\u4e2aSwaggerResourcesProvider \u7c7b\u5b9e\u73b0\u4e86 SwaggerResourcesProvider\u63a5\u53e3\n@Component\npublic class MySwaggerResourceProvider implements SwaggerResourcesProvider {\n    @Autowired\n    private RouteLocator routeLocator;\n    \n    /**\n     * Swagger\u4e2d\u9700\u8981\u6392\u9664\u7684\u670d\u52a1\n     */\n    private String[] excludeServiceIds=new String[]{\"jeecg-cloud-monitor\"};\n\n    /**\n     * \u7f51\u5173\u5e94\u7528\u540d\u79f0\n     */\n    @Value(\"${spring.application.name}\")\n    private String self;\n\n    public MySwaggerResourceProvider(RouteLocator routeLocator) {\n        this.routeLocator = routeLocator;\n    }\n\n    @Override\n    public List<SwaggerResource> get() {\n        List<SwaggerResource> resources = new ArrayList<>();\n        List<String> routeHosts = new ArrayList<>();\n        // \u83b7\u53d6\u6240\u6709\u53ef\u7528\u7684host\uff1aserviceId\n        routeLocator.getRoutes().filter(route -> route.getUri().getHost() != null)\n                .filter(route -> !self.equals(route.getUri().getHost()))\n                .subscribe(route ->{\n                    //update-begin---author:zyf ---date:20220413 for\uff1a\u8fc7\u6ee4\u6389\u65e0\u6548\u8def\u7531,\u907f\u514d\u63a5\u53e3\u6587\u6863\u62a5\u9519\u65e0\u6cd5\u6253\u5f00\n                    boolean hasRoute=checkRoute(route.getId());\n                    if(hasRoute){\n                        routeHosts.add(route.getUri().getHost());\n                    }\n                    //update-end---author:zyf ---date:20220413 for\uff1a\u8fc7\u6ee4\u6389\u65e0\u6548\u8def\u7531,\u907f\u514d\u63a5\u53e3\u6587\u6863\u62a5\u9519\u65e0\u6cd5\u6253\u5f00\n                });\n        // \u8bb0\u5f55\u5df2\u7ecf\u6dfb\u52a0\u8fc7\u7684server\uff0c\u5b58\u5728\u540c\u4e00\u4e2a\u5e94\u7528\u6ce8\u518c\u4e86\u591a\u4e2a\u670d\u52a1\u5728nacos\u4e0a\n        Set<String> dealed = new HashSet<>();\n        routeHosts.forEach(instance -> {\n            // \u62fc\u63a5url\n            String url = \"/\" + instance.toLowerCase() + SWAGGER2URL;\n            if (!dealed.contains(url)) {\n                dealed.add(url);\n                log.info(\" Gateway add SwaggerResource: {}\",url);\n                SwaggerResource swaggerResource = new SwaggerResource();\n                swaggerResource.setUrl(url);\n                swaggerResource.setSwaggerVersion(\"2.0\");\n                swaggerResource.setName(instance);\n                //Swagger\u6392\u9664\u4e0d\u5c55\u793a\u7684\u670d\u52a1\n                if(!ArrayUtil.contains(excludeServiceIds,instance)){\n                    resources.add(swaggerResource);\n                }\n            }\n        });\n        return resources;\n    }\n    \n    /**\n     * \u68c0\u6d4bnacos\u4e2d\u662f\u5426\u6709\u5065\u5eb7\u5b9e\u4f8b\n     * @param routeId\n     * @return\n     */\n    private Boolean checkRoute(String routeId) {\n        <FILL>\n    }\n}\n    \n\n### Response:",
        "package org.jeecg.handler.swagger;\n\nimport io.swagger.annotations.*;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * \u6f14\u793a\u62a5\u8868-RESTFul\u63a5\u53e3\n */\n@Slf4j\n@RestController\n@Api(value = \"/swagger\", tags = \"swagger\")\npublic class SwaggerResource {\n    /**\n     * nacos\u670d\u52a1\u53d1\u73b0\u5730\u5740\n     */\n    @Value(\"${spring.cloud.nacos.discovery.server-addr}\")\n    private String serverAddr;\n    /**\n     * nacos namespace\n     */\n    @Value(\"${spring.cloud.nacos.discovery.namespace:#{null}}\")\n    private String namespace;\n    /**\n     * nacos username\n     */\n    @Value(\"${spring.cloud.nacos.discovery.username:#{null}}\")\n    private String username;\n    /**\n     * nacos password\n     */\n    @Value(\"${spring.cloud.nacos.discovery.password:#{null}}\")\n    private String password;\n    \n    /**\n     * Swagger\u4e2d\u9700\u8981\u6392\u9664\u7684\u670d\u52a1\n     */\n    private String[] excludeServiceIds=new String[]{\"jeecg-cloud-monitor\"};\n\n\n    @Autowired\n    public MySwaggerResourceProvider(RouteLocator routeLocator) {\n        this.routeLocator = routeLocator;\n    }\n\n    @Override\n    public List<SwaggerResource> get() {\n        List<SwaggerResource> resources = new ArrayList<>();\n        List<String> routeHosts = new ArrayList<>();\n        // \u83b7\u53d6\u6240\u6709\u53ef\u7528\u7684host\uff1aserviceId\n        routeLocator.getRoutes().filter(route -> route.getUri().getHost() != null)\n                .filter(route -> !self.equals(route.getUri().getHost()))\n                .subscribe(route ->{\n                    //update-begin---author:zyf ---date:20220413 for\uff1a\u8fc7\u6ee4\u6389\u65e0\u6548\u8def\u7531,\u907f\u514d\u63a5\u53e3\u6587\u6863\u62a5\u9519\u65e0\u6cd5\u6253\u5f00\n                    boolean hasRoute=checkRoute(route.getId());\n                    if(hasRoute){\n                        routeHosts.add(route.getUri().getHost());\n                    }\n                    //update-end---author:zyf ---date:20220413 for\uff1a\u8fc7\u6ee4\u6389\u65e0\u6548\u8def\u7531,\u907f\u514d\u63a5\u53e3\u6587\u6863\u62a5\u9519\u65e0\u6cd5\u6253\u5f00\n                });\n\n        // \u8bb0\u5f55\u5df2\u7ecf\u6dfb\u52a0\u8fc7\u7684server\uff0c\u5b58\u5728\u540c\u4e00\u4e2a\u5e94\u7528\u6ce8\u518c\u4e86\u591a\u4e2a\u670d\u52a1\u5728nacos\u4e0a\n        Set<String> dealed = new HashSet<>();\n        routeHosts.forEach(instance -> {\n            // \u62fc\u63a5url\n            String url = \"/\" + instance.toLowerCase() + SWAGGER2URL;\n            if (!dealed.contains(url)) {\n                dealed.add(url);\n                log.info(\" Gateway add SwaggerResource: {}\",url);\n                SwaggerResource swaggerResource = new SwaggerResource();\n                swaggerResource.setUrl(url);\n                swaggerResource.setSwaggerVersion(\"2.0\");\n                swaggerResource.setName(instance);\n                //Swagger\u6392\u9664\u4e0d\u5c55\u793a\u7684\u670d\u52a1\n                                                                  resources = new HashMap<>();\n                                                                                        resources.put(\"inst\", instance);\n                                                                                        return resources;\n            }\n            }\n            \n            /**\n             * \u83b7\u53d6\u5f53\u524d\u5e94\u7528\u4e0b\u9762\u7684\u6240\u6709Swagger\u8d44\u6e90\n             *\n             * @param request\n             * @return\n             */\n    @GetMapping(\"/instances\")\n    public Map<String, Object> instances(HttpServletRequest request) {\n        return getRouteResources(request);\n    }\n    \n    /**\n     * \u83b7\u53d6\u6240\u6709Swagger\u8d44\u6e90\n     *\n     * @param request\n     * @return\n     */\n    @GetMapping(\"/resources\")\n    public Map<String, Object> resources(HttpServletRequest request) {\n        return getRouteResources(request);\n    }\n    \n    /**\n     * \u83b7\u53d6Swagger\u8d44\u6e90\n     *\n     * @param name\n     * @return\n     */\n    @GetMapping(\"/resources/{name}\")\n    public Map<String, Object> resource(@PathVariable String name) {\n        return getRouteResources(name);\n    }\n    \n    /**\n     * \u83b7\u53d6\u6240\u6709\u5e94\u7528\u4e0b\u7684Swagger\u8d44\u6e90\n     *\n     * @param request\n     * @return\n     */\n    @GetMapping(\"/applications/{application}/resources\")\n    public Map<String, Object> applicationResources(HttpServletRequest request) {\n        return getRouteResources(request);\n    }\n    \n    /**\n     * \u83b7\u53d6\u5e94\u7528\u4e0b\u7684\u6240\u6709Swagger\u8d44\u6e90\n     *\n     * @param name\n     * @return\n     */\n    @GetMapping(\"/applications/{application}/instances\")\n    public Map<String, Object> applicationResources(HttpServletRequest request) {\n        return getRouteResources(request);\n    }\n    \n    /**\n     * \u83b7\u53d6Swagger\u8d44\u6e90\n     *\n     * @param name\n     * @return\n     */\n    @GetMapping(\"/applications/{application}/resources/{name}\")\n    public Map<String, Object> applicationResource(HttpServletRequest request) {\n        return getRouteResources(request);\n    }\n}",
        "package org.jeecg.handler.swagger;\n\nimport java.util.*;\n\nimport com.alibaba.cloud.nacos.NacosConfigManager;\nimport com.alibaba.nacos.api.naming.pojo.Instance;\nimport lombok.extern.slf4j.Slf4j;\nimport org.jeecg.common.util.oConvertUtils;\nimport org.junit.*;\nimport static org.mockito.Mockito.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport org.springframework.context.ApplicationContext;\nimport reactor.core.publisher.Mono;\n\n@Slf4j\npublic class MySwaggerResourceProviderTest {\n    private NacosConfigManager nacosConfigManager = mock(NacosConfigManager.class);\n    private ApplicationContext applicationContext = mock(ApplicationContext.class);\n    private RouteLocator routeLocator = mock(RouteLocator.class);\n    private MySwaggerResourceProvider mySwaggerResourceProvider;\n    \n    @BeforeEach\n    public void setUp() {\n        // \u51c6\u5907mock\u6570\u636e\n        when(nacosConfigManager.getConfigService()).thenReturn(null);\n        \n        // \u6784\u9020MySwaggerResourceProvider\u5bf9\u8c61\n        mySwaggerResourceProvider = new MySwaggerResourceProvider(routeLocator);\n    }\n    \n    @Test\n    public void testCheckRoute() {\n        assertEquals(\"",
        "package com.example;\n\nimport java.util.*;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jeecg.handler.swagger.MySwaggerResourceProvider;\n\npublic class MySwaggerResourceProviderTest {\n    @Test\n    public void checkRouteTest() {\n        Boolean hasRoute = new MySwaggerResourceProvider().checkRoute(<FILL>);\n        assertTrue(hasRoute, \"Nacos\u4e2d\u4e0d\u5b58\u5728\u8be5\u670d\u52a1\");\n    }\n}\n    \n",
        "package ${basePackage}.handler.swagger;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport com.alibaba.fastjson.JSONObject;\nimport lombok.extern.slf4j.Slf4j;\nimport org.jeecg.boot.starter.lock.client.api.DistributedLock;\nimport org.jeecg.handler.swagger.MySwaggerResourceProvider;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.annotation.Rollback;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Slf4j\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class MySwaggerResourceProviderTest {\n    @Autowired\n    private DistributedLock distributedLock;\n    \n    @Test\n    public void checkRouteTest() throws InterruptedException {\n        MySwaggerResourceProvider mySwaggerResourceProvider = new MySwaggerResourceProvider(null);\n        \n        //\u6b63\u5e38\n        JSONObject json = new JSONObject();\n        String routeId=\"test\";\n        json.put(\"routeId\",routeId);\n        Assert.assertTrue(mySwaggerResourceProvider.checkRoute(json));\n        //\u975e\u6cd5\u683c\u5f0f\n        json.put(\"routeId\",\"\");\n        Assert.assertFalse(mySwaggerResourceProvider.checkRoute(json));\n        //\u65e0\u5b9e\u4f8b\n        json.put(\"routeId\",\"error\");\n        Assert.assertFalse(mySwaggerResourceProvider.checkRoute(json));\n    }\n}\n    \n\n### Code for the Controller:",
        "package org.jeecg.handler.swagger;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Component;\nimport springfox.documentation.swagger.web.*;\nimport java.util.*;\n\n/**\n * Swagger\u8d44\u6e90\u914d\u7f6e\n */\n@Slf4j\n@Component\n@Primary\npublic class MySwaggerResourceProvider implements SwaggerResourcesProvider {\n    private final RouteLocator routeLocator;\n    \n    /**\n     * nacos\u5730\u5740\n     */\n    @Value(\"${spring.cloud.nacos.discovery.server-addr}\")\n    private String serverAddr;\n    /**\n     * nacos namespace\n     */\n    @Value(\"${spring.cloud.nacos.discovery.namespace:#{null}}\")\n    private String namespace;\n    /**\n     * nacos username\n     */\n    @Value(\"${spring.cloud.nacos.discovery.username:#{null}}\")\n    private String username;\n    /**\n     * nacos password\n     */\n    @Value(\"${spring.cloud.nacos.discovery.password:#{null}}\")\n    private String password;\n    \n    /**\n     * Swagger\u4e2d\u9700\u8981\u6392\u9664\u7684\u670d\u52a1\n     */\n    private String[] excludeServiceIds=new String[]{\"jeecg-cloud-monitor\"};\n\n\n    /**\n     * \u7f51\u5173\u5e94\u7528\u540d\u79f0\n     */\n    @Value(\"${spring.application.name}\")\n    private String self;\n\n    @Autowired\n    public MySwaggerResourceProvider(RouteLocator routeLocator) {\n        this.routeLocator = routeLocator;\n    }\n\n    @Override\n    public List<SwaggerResource> get() {\n        List<SwaggerResource> resources = new ArrayList<>();\n        List<String> routeHosts = new ArrayList<>();\n        // \u83b7\u53d6\u6240\u6709\u53ef\u7528\u7684host\uff1aserviceId\n        routeLocator.getRoutes().filter(route -> route.getUri().getHost() != null)\n                .filter(route -> !self.equals(route.getUri().getHost()))\n                .subscribe(route ->{\n                    //update-begin---author:zyf ---date:20220413 for\uff1a\u8fc7\u6ee4\u6389\u65e0\u6548\u8def\u7531,\u907f\u514d\u63a5\u53e3\u6587\u6863\u62a5\u9519\u65e0\u6cd5\u6253\u5f00\n                    boolean hasRoute=checkRoute(route.getId());\n                    if(hasRoute){\n                        routeHosts.add(route.getUri().getHost());\n                    }\n                    //update-end---author:zyf ---date:20220413 for\uff1a\u8fc7\u6ee4\u6389\u65e0\u6548\u8def\u7531,\u907f\u514d\u63a5\u53e3\u6587\u6863\u62a5\u9519\u65e0\u6cd5\u6253\u5f00\n                });\n\n        // \u8bb0\u5f55\u5df2\u7ecf\u6dfb\u52a0\u8fc7\u7684server\uff0c\u5b58\u5728\u540c\u4e00\u4e2a\u5e94\u7528\u6ce8\u518c\u4e86\u591a\u4e2a\u670d\u52a1\u5728nacos\u4e0a\n        Set<String> dealed = new HashSet<>();\n        routeHosts.forEach(instance -> {\n            // \u62fc\u63a5url\n            String url = \"/\" + instance.toLowerCase() + SWAGGER2URL;\n            if (!dealed.contains(url)) {\n                dealed.add(url);\n                log.info(\" Gateway add SwaggerResource: {}\",url);\n                SwaggerResource swaggerResource = new SwaggerResource();\n                swaggerResource.setUrl(url);\n                swaggerResourceProvider swaggerResources = this.swaggerResources();\n        for (SwaggerResource swaggerResource : swaggerResources) {\n            resources.add(swaggerResource);\n        }\n        return resources;\n    }\n    \n    private List<SwaggerResource> swaggerResources() {\n        List<SwaggerResource> resources = new ArrayList<>();\n        routeLocator.getRoutes().subscribe(route -> route.getPredicates().forEach(predicate -> {\n            Optional<String> optional = getHost(route);\n            if (!optional.isPresent()) {\n                return;\n            }\n    \n            // update-begin--author:scp --date:2019-10-15  description\uff1a\u6dfb\u52a0\u5bf9\u8c61\u7684\u68c0\u67e5\uff0c\u9632\u6b62\u7a7a\u6307\u9488\u5f02\u5e38\u8df3\u8fc7 public SwaggerResources instance = new SwaggerResources();\n            //update-end--author:scp --date:2019-10-15  for (int i = 0; i < resources.size(); i++) {\n                SwaggerResource swaggerResource = resources.get(i);\n                swaggerResource.setName(route.getId());\n                resources.add(swaggerResource);\n            }\n        }\n    \n        private Optional<String> getHost(Route route) {\n            try {\n                String host = this.determineHost(route);\n                return Optional.of(host);\n            } catch (Exception e) {\n                log.debug(\"Could not match route id \" + route.getId(), e);\n                return Optional.empty();\n            }\n        }\n    \n        private String determineHost(Route route) {\n            List<PredicateDefinition> definitions = route.getPredicates().stream()\n                    .filter(predicateDefinition -> predicateDefinition.getName().equals(\"Path\"))\n                    .collect(Collectors.toList());\n    \n            if (definitions.size() != 1) {\n                throw new RuntimeException(\"No path defined for route id \" + route.getId());\n            }\n    \n            PredicateDefinition path = definitions.get(0);\n            String regexp = (String) path.args().get(\"regexp\");\n            Pattern pattern = Pattern.compile(regexp);\n            Matcher matcher = pattern.matcher(route.getFullPath());\n            if (!matcher.matches()) {\n                throw new RuntimeException(\"Could not match path regex \" + regexp + \" for route id \" + route.getId()\n                        + \". Full path is \" + route.getFullPath());\n            }\n    \n            String host = matcher.group(1);\n            return host;\n        }\n    \n        private boolean checkRoute(String routeId) {\n            AtomicBoolean result = new AtomicBoolean();\n            routeLocator.getRoutes().subscribe(route -> result.set(route.getId().equalsIgnoreCase(routeId)));\n            return result.get();\n        }\n    \n        @Override public void afterPropertiesSet() {\n            log.info(\"Started SwaggerResources\");\n        }\n}\n    \n\n### Response:",
        "package org.jeecg.handler.swagger;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.cloud.gateway.config.GatewayAutoConfiguration;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Component;\nimport java.util.*;\nimport lombok.extern.slf4j.Slf4j;\nimport com.alibaba.cloud.nacos.NamingService;\nimport com.alibaba.cloud.nacos.NacosDiscoveryProperties;\nimport com.alibaba.nacos.api.exception.NacosException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.cloud.gateway.config.GatewayAutoConfiguration;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Component;\nimport com.alibaba.cloud.nacos.NamingService;\nimport com.alibaba.cloud.nacos.NacosDiscoveryProperties;\nimport com.alibaba.nacos.api.exception.NacosException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.cloud.gateway.config.GatewayAutoConfiguration;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Component;\n\n/**\n * \u7f51\u5173Swagger\u8d44\u6e90\u626b\u63cf\u81ea\u5b9a\u4e49\u5b9e\u73b0\n */\n@Slf4j\n@ConditionalOnClass(GatewayAutoConfiguration.class)\npublic class MySwaggerResourceProvider {\n    /**\n     * nacos namespace\n     */\n    @Value(\"${nacos.discovery.namespace:#{null}}\")\n    private String namespace;\n    /**\n     * nacos serverAddr\n     */\n    @Value(\"${spring.cloud.nacos.discovery.server-addr}\")\n    private String serverAddr;\n    /**\n     * nacos group\n     */\n    @Value(\"${spring.cloud.nacos.discovery.group:DEFAULT_GROUP}\")\n    private String group;\n    /**\n     * nacos username\n     */\n    @Value(\"${spring.cloud.nacos.discovery.username:#{null}}\")\n    private String username;\n    /**\n     * nacos password\n     */\n    @Value(\"${spring.cloud.nacos.discovery.password:#{null}}\")\n    private String password;\n    /**\n     * Swagger\u4e2d\u9700\u8981\u6392\u9664\u7684\u670d\u52a1\n     */\n    private String[] excludeServiceIds=new String[]{\"jeecg-cloud-monitor\"};\n    /**\n     * \u7f51\u5173\u5e94\u7528\u540d\u79f0\n     */\n    @Value(\"${spring.application.name}\")\n    private String self;\n    //@Autowired\n    private RouteLocator routeLocator;\n    @Autowired\n    public MySwaggerResourceProvider(RouteLocator routeLocator) {\n        this.routeLocator = routeLocator;\n    }\n    /**\n     * \u7f51\u5173\u6dfb\u52a0swagger\u8d44\u6e90\n     */\n    @Bean\n    public List<SwaggerResource> swaggerResources() {\n        List < SwaggerResource > resources = new ArrayList<>();\n        //gateway\n        RouteLocator routeLocator = routeLocator();\n        Optional.ofNullable(routeLocator);\n        if (routeLocator.isPresent()) {\n            log.info(\">>> Gateway Swagger\");\n            List < SwaggerResource > gatewayResources = routeLocator.getSwaggerResources();\n            resources.addAll(gatewayResources);\n        }\n        //sys\n        RouteLocator sysRouteLocator = sysRouteLocator();\n        Optional.ofNullable(sysRouteLocator);\n        if (sysRouteLocator.isPresent()) {\n            log.info(\">>> Sys Swagger\");\n            List < SwaggerResource > gatewayResources = sysRouteLocator.getSwaggerResources();\n            resources.addAll(gatewayResources);\n        }\n        //actuator\n        RouteLocator actuatorRouteLocator = actuatorRouteLocator();\n        Optional.ofNullable(actuatorRouteLocator);\n        if (actuatorRouteLocator.isPresent()) {\n            log.info(\">>> Actuator Swagger\");\n            List < SwaggerResource > gatewayResources = actuatorRouteLocator.getSwaggerResources();\n            resources.addAll(gatewayResources);\n        }\n        //system\n        RouteLocator systemRouteLocator = systemRouteLocator();\n        Optional.ofNullable(systemRouteLocator);\n        if (systemRouteLocator.isPresent()) {\n            log.info(\">>> System Swagger\");\n            List < SwaggerResource > gatewayResources = systemRouteLocator.getSwaggerResources();\n            resources.addAll(gatewayResources);\n        }\n        //module\n        RouteLocator moduleRouteLocator = moduleRouteLocator();\n        Optional.ofNullable(moduleRouteLocator);\n        if (moduleRouteLocator.isPresent()) {\n            log.info(\">>> Module Swagger\");\n            List < SwaggerResource > gatewayResources = moduleRouteLocator.getSwaggerResources();\n            resources.addAll(gatewayResources);\n        }\n        return resources;\n    }\n    /**\n     * \u7f51\u5173\u6dfb\u52a0swagger\u8d44\u6e90\n     */\n    private RouteLocator routeLocator() {\n        //\u5224\u65ad\u662f\u5426\u5f00\u542f\u7f51\u5173swagger\n        if (true) {\n            log.info(\">>> Gateway Swagger Start\");\n            return new MyRouteLocator();\n        }\n        return null;\n    }\n    /**\n     * \u7cfb\u7edf\u6a21\u5757\u6dfb\u52a0swagger\u8d44\u6e90\n     */\n    private RouteLocator sysRouteLocator() {\n        //\u5224\u65ad\u662f\u5426\u5f00\u542f\u7f51\u5173swagger\n        if (true) {\n            log.info(\">>> Sys Swagger Start\");\n            return new MyRouteLocator();\n        }\n        return null;\n    }\n    /**\n     * \u7cfb\u7edf\u6a21\u5757\u6dfb\u52a0swagger\u8d44\u6e90\n     */\n    private RouteLocator actuatorRouteLocator() {\n        //\u5224\u65ad\u662f\u5426\u5f00\u542f\u7f51\u5173swagger\n        if (true) {\n            log.info(\">>> Actuator Swagger Start\");\n            return new MyRouteLocator();\n        }\n        return null;\n    }\n    /**\n     * \u7cfb\u7edf\u6a21\u5757\u6dfb\u52a0swagger\u8d44\u6e90\n     */\n    private RouteLocator systemRouteLocator() {\n        //\u5224\u65ad\u662f\u5426\u5f00\u542f\u7f51\u5173swagger\n        if (true) {\n            log.info(\">>> System Swagger Start\");\n            return new MyRouteLocator();\n        }\n        return null;\n    }\n    /**\n     * \u7cfb\u7edf\u6a21\u5757\u6dfb\u52a0swagger\u8d44\u6e90\n     */\n    private RouteLocator moduleRouteLocator() {\n        //\u5224\u65ad\u662f\u5426\u5f00\u542f\u7f51\u5173swagger\n        if (true) {\n            log.info(\">>> Module Swagger Start\");\n            return new MyRouteLocator();\n        }\n        return null;\n    }\n    \n\n### Response:",
        "package com.test;\nimport org.junit.jupiter.api.*;\n\npublic class MySwaggerResourceProviderTest {\n    @Test\n    public void checkRouteTest() {\n        <FILL>\n    }\n}\n    \n\n### Assertion:",
        "package org.jeecg.modules.handler.swagger;\n\nimport java.util.*;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.cloud.gateway.config.GatewayProperties;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Component;\nimport springfox.documentation.swagger.web.*;\n\n/**\n * swagger\u8d44\u6e90\u914d\u7f6e\uff0c\u7528\u4e8e\u52a8\u6001\u5904\u7406swagger\u4e2d\u7684securitySchemes\u5c5e\u6027\n */\n@Slf4j\n@Primary\n@Component\npublic class MySwaggerResourceProvider implements SwaggerResourcesProvider {\n    /**\n     * nacos serverAddr\n     */\n    @Value(\"${spring.cloud.nacos.config.server-addr:#{null}}\")\n    private String serverAddr;\n    /**\n     * nacos namespace\n     */\n    @Value(\"${spring.cloud.nacos.config.namespace}\")\n    private String namespace;\n    /**\n     * nacos username\n     */\n    @Value(\"${spring.cloud.nacos.discovery.username:#{null}}\")\n    private String username;\n    /**\n     * nacos password\n     */\n    @Value(\"${spring.cloud.nacos.discovery.password:#{null}}\")\n    private String password;\n    \n    /**\n     * Swagger\u4e2d\u9700\u8981\u6392\u9664\u7684\u670d\u52a1\n     */\n    private String[] excludeServiceIds=new String[]{\"jeecg-cloud-monitor\"};\n\n\n    /**\n     * \u7f51\u5173\u5e94\u7528\u540d\u79f0\n     */\n    @Value(\"${spring.application.name}\")\n    private String self;\n\n    @Autowired\n    public MySwaggerResourceProvider(RouteLocator routeLocator) {\n        this.routeLocator = routeLocator;\n    }\n\n    @Override\n    public List<SwaggerResource> get() {\n        List<SwaggerResource> resources = new ArrayList<>();\n        List<String> routeHosts = new ArrayList<>();\n        // \u83b7\u53d6\u6240\u6709\u53ef\u7528\u7684host\uff1aserviceId\n        routeLocator.getRoutes().filter(route -> route.getUri().getHost() != null)\n                .filter(route -> !self.equals(route.getUri().getHost()))\n                .subscribe(route ->{\n                    //update-begin---author:zyf ---date:20220413 for\uff1a\u8fc7\u6ee4\u6389\u65e0\u6548\u8def\u7531,\u907f\u514d\u63a5\u53e3\u6587\u6863\u62a5\u9519\u65e0\u6cd5\u6253\u5f00\n                    boolean hasRoute=checkRoute(route.getId());\n                    if(hasRoute){\n                        routeHosts.add(route.getUri().getHost());\n                    }\n                    //update-end---author:zyf ---date:20220413 for\uff1a\u8fc7\u6ee4\u6389\u65e0\u6548\u8def\u7531,\u907f\u514d\u63a5\u53e3\u6587\u6863\u62a5\u9519\u65e0\u6cd5\u6253\u5f00\n                });\n\n        // \u8bb0\u5f55\u5df2\u7ecf\u6dfb\u52a0\u8fc7\u7684server\uff0c\u5b58\u5728\u540c\u4e00\u4e2a\u5e94\u7528\u6ce8\u518c\u4e86\u591a\u4e2a\u670d\u52a1\u5728nacos\u4e0a\n        Set<String> dealed = new HashSet<>();\n        routeHosts.forEach(instance -> {\n            // \u62fc\u63a5url\n            String url = \"/\" + instance.toLowerCase() + SWAGGER2URL;\n            if (!dealed.contains(url)) {\n                dealed.add(url);\n                log.info(\" Gateway add SwaggerResourceProviderSwaggerResources: [{}]\", url);\n                // \u8bbe\u7f6esecuritySchemes\n                List<SecurityScheme> securitySchemes = new ArrayList<>();\n                    ApiKey apiKey = new ApiKey(\"Authorization\", \"BearerToken\", Collections.emptyList());\n                    OAuth oAuth = new OAuthBuilder().name(\"oauth2\").grantTypes(GrantType.AUTHORIZATION_CODE).build();\n                    SecurityScheme securityScheme = new SecurityScheme(apiKey,oAuth);\n                    securitySchemes.add(securityScheme);\n                // \u8bbe\u7f6esecurityRequirement\n                    List<SecurityReference> securityReferences = new ArrayList<>();\n                    io.swagger.v3.oas.models.Paths paths = new io.swagger.v3.oas.models.Paths();\n                    Path path = paths.getGet().get(0);\n                    Map<String, List<SecurityReference>> securityDefinitions = path.getSecurity();\n                    if (securityReferences == null) {\n                        securityReferences = new ArrayList<>();\n                    }\n\n                <RESPONSE>\n\n            resources.set(url);\n        });\n        return resources;\n    }\n    \n    /**\n     * \u83b7\u53d6\u6240\u6709\u7684\u8d44\u6e90\u8def\u5f84\uff0c\u5982\u679c\u5f53\u524d\u670d\u52a1\u4e0b\u7ebf\u4e2d\uff0c\u5b58\u5728\u76f8\u540c\u7684routeId\u5219\uff0c\u53ea\u53d6\u7b2c\u4e00\u4e2a\n     */\n    private List<String> getRoutePaths(List<PredicateDefinition> routeDefinitions) {\n        Map<String, String> pathMap = new HashMap<>();\n        for (PredicateDefinition predicate : routeDefinitions) {\n            List<ServerWebExchange> filters = predicate.getFilters();\n            if (!filters.isEmpty()) {\n                ServerWebExchange exchange = filters.get(0);\n                String prefix = exchange.getPrefix();\n                pathMap.putIfAbsent(prefix, predicate.getId());\n            }\n        }\n    \n        List<String> routeIds = new ArrayList<>();\n        for (Map.Entry<String, String> entry : pathMap.entrySet()) {\n            routeIds.add(entry.getValue());\n        }\n    \n        return routeIds;\n    }\n}\n    \n\n### JUnit Test case:\npackage org.jeecg.handler.swagger;\n\nimport java.util.*;\n\npublic class MySwaggerResourceProviderTest {\n    \n    private static final String FILL = null;\n    \n    @Test\n    public void checkRouteTest() {\n        <FILL>\n    }\n}\n    \n\n### Response:"
    ]
}