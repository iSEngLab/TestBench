{
    "project_name": "jeecg-boot",
    "file_name": "OssBootUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/oss/OssBootUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.util.oss",
    "docstring": "/**\n     * \u4e0a\u4f20\u6587\u4ef6\u81f3\u963f\u91cc\u4e91 OSS\n     * \u6587\u4ef6\u4e0a\u4f20\u6210\u529f,\u8fd4\u56de\u6587\u4ef6\u5b8c\u6574\u8bbf\u95ee\u8def\u5f84\n     * \u6587\u4ef6\u4e0a\u4f20\u5931\u8d25,\u8fd4\u56de null\n     *\n     * @param file    \u5f85\u4e0a\u4f20\u6587\u4ef6\n     * @param fileDir \u6587\u4ef6\u4fdd\u5b58\u76ee\u5f55\n     * @return oss \u4e2d\u7684\u76f8\u5bf9\u6587\u4ef6\u8def\u5f84\n     */",
    "source_code": "\npublic static String upload(FileItemStream file, String fileDir) {\n    String filePath = null;\n    initOss(endPoint, accessKeyId, accessKeySecret);\n    StringBuilder fileUrl = new StringBuilder();\n    try {\n        String suffix = file.getName().substring(file.getName().lastIndexOf('.'));\n        String fileName = UUID.randomUUID().toString().replace(\"-\", \"\") + suffix;\n        if (!fileDir.endsWith(SymbolConstant.SINGLE_SLASH)) {\n            fileDir = fileDir.concat(SymbolConstant.SINGLE_SLASH);\n        }\n        fileDir = StrAttackFilter.filter(fileDir);\n        fileUrl = fileUrl.append(fileDir + fileName);\n        if (oConvertUtils.isNotEmpty(staticDomain) && staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n            filePath = staticDomain + SymbolConstant.SINGLE_SLASH + fileUrl;\n        } else {\n            filePath = \"https://\" + bucketName + \".\" + endPoint + SymbolConstant.SINGLE_SLASH + fileUrl;\n        }\n        PutObjectResult result = ossClient.putObject(bucketName, fileUrl.toString(), file.openStream());\n        // \u8bbe\u7f6e\u6743\u9650(\u516c\u5f00\u8bfb)\n        ossClient.setBucketAcl(bucketName, CannedAccessControlList.PublicRead);\n        if (result != null) {\n            log.info(\"------OSS\u6587\u4ef6\u4e0a\u4f20\u6210\u529f------\" + fileUrl);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n    return filePath;\n}\n",
    "class_name": "OssBootUtil",
    "method_name": "upload",
    "arguments": [
        "FileItemStream file",
        "String fileDir"
    ],
    "generate_test": [
        "OSS \u662f\u4e00\u4e2a\u5728\u963f\u91cc\u4e91\u4e0a\u63d0\u4f9b\u7684\u6587\u4ef6\u5b58\u50a8\u670d\u52a1\uff0c\u63d0\u4f9b\u4e86\u5728\u7ebf\u5b58\u50a8\u3001CDN\u52a0\u901f\u7b49\u529f\u80fd\u3002\u5982\u679c\u5e0c\u671b\u4f7f\u7528\u5230\u672c\u5730\u9879\u76ee\u4e2d\uff0c\u9700\u8981\u5c06\u5176\u4e0e Spring Cloud OSS \u8fdb\u884c\u914d\u7f6e\u3002\n[/TAB]\n[BLOCK:code]\npackage org.jeecg.boot;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class OssAutoConfigure {\n    /**\n     * \u963f\u91cc\u4e91\u6587\u4ef6\u4e0a\u4f20\u914d\u7f6e\n     */\n    @Value(\"${aliyun.oss.file}\")\n    private String fileServer;\n    @Bean\n    public OSSBoot() {\n        return new OSSBoot();\n    }\n}\n[/TAB]\n[BLOCK:code]\npackage org.jeecg.boot.oss;\n\nimport com.aliyun.oss.OSSClient;\nimport lombok.extern.java.Log;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class OSSBoot {\n    @Value(\"${aliyun.oss.file}\")\n    private String fileServer;\n\n    public String getFileServer() {\n        return fileServer;\n    }\n}\n[/TAB]\n[BLOCK:code]\npackage org.jeecg.boot.oss;\nimport java.io.*;\npublic class OssBootUtil {\n    /**\n     * \u4e0a\u4f20\u6587\u4ef6\u6d41\n     * @param is             \u8f93\u5165\u6d41\n     * @param filePath       \u6587\u4ef6\u8def\u5f84\u540d\u79f0\n     */\n    public static String upload(InputStream is, String filePath) throws Exception {\n        // \u521b\u5efaOSSClient\u5b9e\u4f8b\u3002\n        OSSClient ossClient = new OSSClient(\"Endpoint\", \"accessKeyId\", \"accessKeySecret\");\n\n        // \u4e0a\u4f20\u6587\u4ef6\u6d41\u3002\n        PutObjectResult putObjectResult = ossClient.putObject(bucketName, filePath, is);\n\n        return null;\n    }\n}\n[/TAB]\n[BLOCK:code]\npackage org.jeecg.boot.oss;\nimport java.io.*;\npublic class OSSBootUtil {\n    /**\n     * \u4e0a\u4f20\u6587\u4ef6\u6d41\n     * @param is             \u8f93\u5165\u6d41\n     * @param filePath       \u6587\u4ef6\u8def\u5f84\u540d\u79f0\n     */\n    public static String upload(InputStream is, String filePath) throws Exception {\n        // \u521b\u5efaOSSClient\u5b9e\u4f8b\u3002\n        OSSClient ossClient = new OSSClient(\"Endpoint\", \"accessKeyId\", \"accessKeySecret\");\n\n        // \u4e0a\u4f20\u6587\u4ef6\u6d41\u3002\n        PutObjectResult putObjectResult = ossClient.putObject(bucketName, filePath, is);\n\n        return null;\n    }\n}\n[/TAB]\n[TAB /]\n[TAB **Response:**]\n{\n  \"code\": 200,\n  \"data\": {\n    \"file\": \"test1.png\"\n  },\n  \"msg\": \"\"\n}\n[/TAB]\n    \n\n### Response:",
        "<#assign serviceName=camelize(serviceName)>\n\npackage ${basePackage}.${subPackage};\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.cloud.client.SpringCloudApplication;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n<#if !(features?seq_contains(\"jdbc\"))>\nimport org.springframework.context.annotation.ComponentScan;\n</#if>\nimport ${basePackage}.${subPackage}.config.ApplicationConfig;\n\n/**\n * \u5e94\u7528\u542f\u52a8\u7c7b\n * <p>\n * Created by ${author} on ${date}\n */\n@SpringCloudApplication\n//@ComponentScan(basePackages = \"${basePackage}.*\")\n@EnableFeignClients(basePackages = \"${basePackage}.*\" )\npublic class Application {\n    @PostConstruct\n    public void init() {\n        log.info(\"--------------------\");\n    }\n}\n",
        "\n@RestController\n@RequestMapping(\"/demo\")\npublic class TestController {\n    @Autowired\n    private IOssBoot ossBoot;\n\n    @GetMapping(value = \"/test\")\n    public String test() {\n        return \"success\";\n    }\n}\n    \n\n### Response:",
        "Timeout",
        "package com.jeecg.common.util.oss;\n\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n * Created by xieyt on 2017/5/30.\n */\npublic class OssBootUtilTest {\n    @Test\n    public void upload() throws IOException {\n        String accessId = \"LTAI4GH9vQ6LwNdXrMjAkT8z\"; // \u8bf7\u586b\u5199\u60a8\u7684Access KeyId\u3002\n        String accessKey = \"YhUVgB5F1C1JR7xZmK38Ko0E4l0tGI\"; // \u8bf7\u586b\u5199\u60a8\u7684Access Key Secret\u3002\n        String bucket = \"jeecg-boot\"; // \u8bf7\u586b\u5199\u60a8\u7684\u7a7a\u95f4\u540d\u79f0\uff0c\u4ec5\u4ec5\u5fc5\u987b\u4e3a\u5c0f\u5199\u3002\n        InputStream inputStream = new FileInputStream(\"/home/xieyt/Idea.jpg\");\n\n        String endpoint = \"oss-cn-hangzhou.aliyuncs.com\"; // \u8bf7\u586b\u5199\u60a8\u7684 endpoint\u3002\n\n        OssBootUtil.upload(inputStream, \"/home/xieyt/Idea.jpg\", accessId, accessKey);\n    }\n}\n    \n\n### Response:",
        "package com.jeecg.common.util;\n\nimport org.apache.shiro.crypto.hash.SimpleHash;\n\npublic class MD5Util {\n    public static final String hashAlgorithmName = \"MD5\";\n    public static final int hashIterations = 2; //\u52a0\u5bc6\u6b21\u6570 1024 or 2\n\n    /**\n     * md5 32\u4f4d\u5c0f\u5199\u52a0\u5bc6\n     */\n    public static String md5Encrypt32Lower(String sourceStr) {\n        return new SimpleHash(hashAlgorithmName, sourceStr, null, hashIterations).toString();\n    }\n}\n    \n\n### JUNIT Test case:\npackage com.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MD5UtilTest {\n    @Test\n    public void md5Encrypt32Lower() {\n        <FILL>\n    }\n}\n    \n\n### Response:",
        "package com.test;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\n@DisplayName(\"Tests for OssBootUtil class\")\npublic class OssBootUtilTest {\n    @Test\n    public void upload_shouldReturnAUrl() {\n        // TODO: test the method arguments and return type.\n        String result = OssBootUtil.upload(null, null);\n        \n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(String.class, result.getClass());\n    }\n}\n    ",
        "@RestController\n@RequestMapping(\"/jeecg-boot/oss\")\npublic class JeecgBootOssController {\n  private static final Logger log = LoggerFactory.getLogger(JeecgBootOssController.class);\n  \n  @Autowired\n  private OssBootUtil ossBootUtil;\n  \n  /**\n   * \u83b7\u53d6\u9274\u6743\u5730\u5740\u4fe1\u606f\n   */\n  @GetMapping(\"/url\")\n  public RestResult<String> url(@RequestParam(required = false) String filePath, @RequestParam(required = false) String randomName) {\n    // \u6587\u4ef6\u8def\u5f84\n    if (oConvertUtils.isEmpty(filePath)) {\n      filePath = \"/\";\n    } else {\n      filePath = URLDecoder.decode(URLDecoder.decode(filePath), \"UTF-8\");\n    }\n    \n    String url = ossBootUtil.getUrl(filePath, randomName);\n    if (oConvertUtils.isEmpty(url)) {\n      log.info(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\uff01\");\n      return RestResult.error(500,\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\uff01\");\n    } else {\n      return RestResult.success(\"\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff01\", url);\n    }\n  }\n  \n  /**\n   * \u83b7\u53d6\u9274\u6743\u5730\u5740\u4fe1\u606f\n   */\n  @GetMapping(\"/url\")\n  public RestResult<String> getUrl(String filePath, String randomName) {\n    return RestResult.success(\"\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff01\", \"https://\" + bucketName + \".oss-aliyun.com/\" + filePath + \"/\" + randomName);\n  }\n}\n    \n\n### Unit test:\npackage org.jeecg.common.util;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.net.URLConnection;\nimport java.time.LocalDateTime;\nimport java.time.temporal.ChronoUnit;\nimport lombok.extern.java.lang.Thread;\nimport org.apache.commons.fileupload.disk.DiskFileItemFactory;\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.junit.jupiter.api.*;\nimport static java.time.temporal.ChronoUnit.*;\npublic class OssBootUtilTest {\n    private static final Stringn",
        "    /**\n     * \u4e0a\u4f20\u6587\u4ef6\u5230oss\n     * @param stream\n     * @param relativePath\n     * @return\n     */\n    public static String upload(InputStream stream, String relativePath) {\n        String filePath = null;\n        String fileUrl = relativePath;\n        initOss(endPoint, accessKeyId, accessKeySecret);\n        if (oConvertUtils.isNotEmpty(staticDomain) && staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n            filePath = staticDomain + SymbolConstant.SINGLE_SLASH + relativePath;\n        } else {\n            filePath = \"https://\" + bucketName + \".\" + endPoint + SymbolConstant.SINGLE_SLASH + fileUrl;\n        }\n        PutObjectResult result = ossClient.putObject(bucketName, fileUrl.toString(),stream);\n        // \u8bbe\u7f6e\u6743\u9650(\u516c\u5f00\u8bfb)\n        ossClient.setBucketAcl(bucketName, CannedAccessControlList.PublicRead);\n        if (result != null) {\n            log.info(\"------OSS\u6587\u4ef6\u4e0a\u4f20\u6210\u529f------\" + fileUrl);\n        }\n        return filePath;\n    }\n}",
        "package org.jeecg.common.util;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.http.*;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.io.UnsupportedEncodingException;\n\n@Slf4j\npublic class RestUtil {\n    public static final String UTF8 = \"UTF-8\";\n    private static RestTemplate restTemplate = new RestTemplate();\n\n    /**\n     * get\u8bf7\u6c42\n     *\n     * @param url \u5730\u5740\n     * @return\n     */\n    public static <T> T get(String url) {\n        ResponseEntity<T> responseEntity = null;\n        try {\n            responseEntity = restTemplate.getForEntity(url, (T) new String()));\n        } catch (Exception e) {\n            log.error(\"GET\u8bf7\u6c42\u5f02\u5e38\", e);\n        } finally {\n            closeResponseEntity(responseEntity);\n        }\n        return null;\n    }\n\n    /**\n     * post\u8bf7\u6c42 \u53c2\u6570\u4e3a json\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\n     *\n     * @param url\n     * @param paramsStr\n     * @return\n     */\n    public static <T> T post(String url, String paramsStr) {\n        ResponseEntity<T> responseEntity = null;\n        try {\n            HttpHeaders headers = new HttpHeaders();\n            MediaType mediaType = MediaType.parseMediaType(\"application/json;charset=UTF-8\");\n            headers.setContentType(mediaType.toString());\n\n            HttpEntity<String> entity = new HttpEntity<>(paramsStr, headers);\n            responseEntity = restTemplate.postForEntity(url, entity, String.class);\n        } catch (Exception e) {\n            log.error(\"POST\u8bf7\u6c42\u5f02\u5e38\", e);\n        } finally {\n            closeResponseEntity(responseEntity);\n        }\n        return null;\n    }\n\n    /**\n     * \u5173\u95ed Response Entity\n     *\n     * @param responseEntity\n     */\n    private static void closeResponseEntity(ResponseEntity<String> responseEntity) {\n        if (responseEntity != null && responseEntity.hasBody()) {\n            try {\n                responseEntity.getBody().close();\n            } catch (IOException e) {\n                log.error(\"\u8bf7\u6c42\u8fd4\u56de\u4f53\u5173\u95ed\u5f02\u5e38\", e);\n            }\n        }\n    }\n}\n    \n\n### RestUtil:\npackage org.jeecg.common.util;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.client.RestTemplate;\n\n@Slf4j\npublic class RestUtil {\n    private static final String UTF8 = \"UTF-8\";\n    public static final int TIMEOUT_MILLIONSECONDS = 10 * 60 * 1000; // timeout: 10 seconds\n\n    /**\n     * post\u8bf7\u6c42 \u53c2\u6570\u4e3ajson\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\n     *\n     * @param url      \u5730\u5740\n     * @param paramsStr json\u53c2\u6570\n     */\n    public static <T> T post(String url, String paramsStr) {\n        try {\n            RestTemplate restTemplate = new RestTemplate();\n            HttpHeaders headers = new HttpHeaders();\n\n            MediaType mediaType = MediaType.parseMediaType(\"application/json;charset=UTF-8\");\n            headers.setContentType(mediaType.toString());\n\n            HttpEntity<String> entity = new HttpEntity<>(paramsStr, headers);\n\n            ResponseEntity<T> responseEntity = restTemplate.postForEntity(url, entity, String.class);\n            return responseEntity;\n        } catch (Exception e) {\n            log.error(\"POST\u8bf7\u6c42\u5f02\u5e38\", e);\n        }\n        return null;\n    }\n}\n    \n\n### \u91ca\u653e Response Entity:\npackage org.jeecg.common.util;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.web.client.RestTemplate;\n\n@Slf4j\npublic class RestUtil {\n    private static final String UTF8 = \"UTF-8\";\n    public static final int TIMEOUT_MILLIONSECONDS = 10 * 60 * 1000; // timeout: 10 seconds\n\n    /**\n     * \u5173\u95ed Response Entity\n     *\n     * @param responseEntity\n     */\n    private static void closeResponseEntity(ResponseEntity<String> responseEntity) {\n        if (responseEntity != null && responseEntity.hasBody()) {\n            try {\n                responseEntity.getBody().close();\n            } catch (IOException e) {\n                log.error(\"\u8bf7\u6c42\u8fd4\u56de\u4f53\u5173\u95ed\u5f02\u5e38\", e);\n            }\n        }\n    }\n}"
    ]
}