{
    "project_name": "jeecg-boot",
    "file_name": "OssBootUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/oss/OssBootUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.util.oss",
    "docstring": "/**\n     * \u4e0a\u4f20\u6587\u4ef6\u81f3\u963f\u91cc\u4e91 OSS\n     * \u6587\u4ef6\u4e0a\u4f20\u6210\u529f,\u8fd4\u56de\u6587\u4ef6\u5b8c\u6574\u8bbf\u95ee\u8def\u5f84\n     * \u6587\u4ef6\u4e0a\u4f20\u5931\u8d25,\u8fd4\u56de null\n     *\n     * @param file    \u5f85\u4e0a\u4f20\u6587\u4ef6\n     * @param fileDir \u6587\u4ef6\u4fdd\u5b58\u76ee\u5f55\n     * @return oss \u4e2d\u7684\u76f8\u5bf9\u6587\u4ef6\u8def\u5f84\n     */",
    "source_code": "\npublic static String upload(FileItemStream file, String fileDir) {\n    String filePath = null;\n    initOss(endPoint, accessKeyId, accessKeySecret);\n    StringBuilder fileUrl = new StringBuilder();\n    try {\n        String suffix = file.getName().substring(file.getName().lastIndexOf('.'));\n        String fileName = UUID.randomUUID().toString().replace(\"-\", \"\") + suffix;\n        if (!fileDir.endsWith(SymbolConstant.SINGLE_SLASH)) {\n            fileDir = fileDir.concat(SymbolConstant.SINGLE_SLASH);\n        }\n        fileDir = StrAttackFilter.filter(fileDir);\n        fileUrl = fileUrl.append(fileDir + fileName);\n        if (oConvertUtils.isNotEmpty(staticDomain) && staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n            filePath = staticDomain + SymbolConstant.SINGLE_SLASH + fileUrl;\n        } else {\n            filePath = \"https://\" + bucketName + \".\" + endPoint + SymbolConstant.SINGLE_SLASH + fileUrl;\n        }\n        PutObjectResult result = ossClient.putObject(bucketName, fileUrl.toString(), file.openStream());\n        // \u8bbe\u7f6e\u6743\u9650(\u516c\u5f00\u8bfb)\n        ossClient.setBucketAcl(bucketName, CannedAccessControlList.PublicRead);\n        if (result != null) {\n            log.info(\"------OSS\u6587\u4ef6\u4e0a\u4f20\u6210\u529f------\" + fileUrl);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n    return filePath;\n}\n",
    "class_name": "OssBootUtil",
    "method_name": "upload",
    "arguments": [
        "FileItemStream file",
        "String fileDir"
    ],
    "generate_test": [
        "@Test\npublic void uploadTest() {\n    String fileDir = \"/test/\";\n    FileItemStream file = new FileItemStream(); // create a mock file item stream object\n    String url = OssBootUtil.upload(file, fileDir);\n    assertNotNull(url);\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n    @Test\n    public void uploadTest() {\n        // Arrange\n        FileItemStream file = Mockito.mock(FileItemStream.class);\n        String fileDir = \"test-dir\";\n        OssBootUtil ossBootUtil = new OssBootUtil();\n        \n        // Act\n        String result = ossBootUtil.upload(file, fileDir);\n        \n        // Assert\n        assertNotNull(result);\n        assertTrue(result.matches(\"https://[a-z0-9]{16}\\\\.[a-z0-9]{8}\\\\.[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}\"));\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport com.aliyun.oss.ClientConfiguration;\nimport com.aliyun.oss.OSSClient;\nimport com.aliyun.oss.model.CannedAccessControlList;\nimport com.aliyun.oss.model.PutObjectResult;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.jeecg.common.constant.CommonConstant;\nimport org.jeecg.common.constant.SymbolConstant;\nimport org.junit.jupiter.api.*;\n\nimport java.io.IOException;\nimport java.util.UUID;\n\n@Slf4j\npublic class OssBootUtilTest {\n    private static String endPoint = \"http://oss-cn-hangzhou.aliyuncs.com\";\n    private static String accessKeyId = \"your_access_key_id\";\n    private static String accessKeySecret = \"your_access_key_secret\";\n    private static String bucketName = \"your_bucket_name\";\n    private static String staticDomain = \"your_static_domain\";\n\n    @Test\n    public void uploadTest() {\n        // Initialize OSS client\n        OssBootUtil.initOss(endPoint, accessKeyId, accessKeySecret);\n\n        // Create a file item stream with random content and a size of 1024 bytes\n        FileItemStream file = new FileItemStream();\n        file.setSize(1024);\n        file.setInputStream(new BufferedInputStream(CommonUtils.randomString(1024).getBytes()));\n\n        // Upload the file to OSS and retrieve the URL\n        String filePath = OssBootUtil.upload(file, \"test/\");\n        assertNotNull(filePath);\n        log.info(\"File path: {}\", filePath);\n    }\n}",
        "@Test\npublic void uploadTest() {\n    String filePath = null;\n    initOss(endPoint, accessKeyId, accessKeySecret);\n    StringBuilder fileUrl = new StringBuilder();\n    try {\n        String suffix = \"test.txt\";\n        String fileName = UUID.randomUUID().toString().replace(\"-\", \"\") + suffix;\n        if (!fileDir.endsWith(SymbolConstant.SINGLE_SLASH)) {\n            fileDir = fileDir.concat(SymbolConstant.SINGLE_SLASH);\n        }\n        fileDir = StrAttackFilter.filter(fileDir);\n        fileUrl = fileUrl.append(fileDir + fileName);\n        if (oConvertUtils.isNotEmpty(staticDomain) && staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n            filePath = staticDomain + SymbolConstant.SINGLE_SLASH + fileUrl;\n        } else {\n            filePath = \"https://\" + bucketName + \".\" + endPoint + SymbolConstant.SINGLE_SLASH + fileUrl;\n        }\n        PutObjectResult result = ossClient.putObject(bucketName, fileUrl.toString(), new BufferedInputStream(\"test\".getBytes()));\n        // \u8bbe\u7f6e\u6743\u9650(\u516c\u5f00\u8bfb)\n        ossClient.setBucketAcl(bucketName, CannedAccessControlList.PublicRead);\n        if (result != null) {\n            log.info(\"------OSS\u6587\u4ef6\u4e0a\u4f20\u6210\u529f------\" + fileUrl);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n    return filePath;\n}",
        "package org.jeecg.common.util.oss;\n\nimport com.aliyun.oss.ClientConfiguration;\nimport com.aliyun.oss.OSSClient;\nimport com.aliyun.oss.model.CannedAccessControlList;\nimport com.aliyun.oss.model.PutObjectResult;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.jeecg.common.constant.CommonConstant;\nimport org.jeecg.common.constant.SymbolConstant;\nimport org.jeecg.common.util.CommonUtils;\nimport org.jeecg.common.util.filter.SsrfFileTypeFilter;\nimport org.jeecg.common.util.filter.StrAttackFilter;\nimport org.jeecg.common.util.oConvertUtils;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.BufferedInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.net.URLDecoder;\nimport java.util.Date;\nimport java.util.UUID;\n\n@Slf4j\npublic class OssBootUtil {\n    private static String endPoint;\n    private static String accessKeyId;\n    private static String accessKeySecret;\n    private static String bucketName;\n    private static String staticDomain;\n\n    public static void setEndPoint(String endPoint) {\n        OssBootUtil.endPoint = endPoint;\n    }\n\n    public static void setAccessKeyId(String accessKeyId) {\n        OssBootUtil.accessKeyId = accessKeyId;\n    }\n\n    public static void setAccessKeySecret(String accessKeySecret) {\n        OssBootUtil.accessKeySecret = accessKeySecret;\n    }\n\n    public static void setBucketName(String bucketName) {\n        OssBootUtil.bucketName = bucketName;\n    }\n\n    public static void setStaticDomain(String staticDomain) {\n        OssBootUtil.staticDomain = staticDomain;\n    }\n\n    public static String getStaticDomain() {\n        return staticDomain;\n    }\n\n    public static String getEndPoint() {\n        return endPoint;\n    }\n\n    public static String getAccessKeyId() {\n        return accessKeyId;\n    }\n\n    public static String getAccessKeySecret() {\n        return accessKeySecret;\n    }\n\n    public static String getBucketName() {\n        return bucketName;\n    }\n\n    private static OSSClient ossClient;\n\n    public static String upload(MultipartFile file, String fileDir, String customBucket) throws Exception {\n        <FILL>\n    }\n\n    public static String getOriginalUrl(String url) {\n        return null;\n    }\n\n    public static String upload(MultipartFile file, String fileDir) throws Exception {\n        <FILL>\n    }\n\n    public static String upload(FileItemStream file, String fileDir) {\n        return null;\n    }\n\n    public static void deleteUrl(String url) {\n        log.error(\"OSS delete error: {}\", url);\n    }\n\n    public static void deleteUrl(String url, String bucket) {\n        log.error(\"OSS delete error: {} in bucket: {}\", url, bucket);\n    }\n\n    public static void delete(String fileName) {\n        log.error(\"OSS delete error: {}\", fileName);\n    }\n\n    public static InputStream getOssFile(String objectName, String bucket) {\n        return null;\n    }\n\n    public static String getObjectUrl(String bucketName, String objectName, Date expires) {\n        return null;\n    }\n\n    private static OSSClient initOss(String endpoint, String accessKeyId, String accessKeySecret) {\n        if (ossClient == null) {\n            ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n        }\n        return ossClient;\n    }\n\n    public static String upload(InputStream stream, String relativePath) {\n        return null;\n    }\n\n    private static String replacePrefix(String objectName, String customBucket) {\n        return null;\n    }\n}\n\npackage org.jeecg.common.util.oss;\n\nimport com.aliyun.oss.ClientConfiguration;\nimport com.aliyun.oss.OSSClient;\nimport com.aliyun.oss.model.CannedAccessControlList;\nimport com.aliyun.oss.model.PutObjectResult;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.jeecg.common.constant.CommonConstant;\nimport org.jeecg.common.util.OSSClientUtil;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.text.SimpleDateFormat;\nimport java.util.*;\n\n@Slf4j\npublic class OssBootUtil {\n    private static String endPoint;\n    private static String accessKeyId;\n    private static String accessKeySecret;\n    private static String bucketName;\n    private static String staticDomain;\n\n    public static void setEndPoint(String endPoint) {\n        OssBootUtil.endPoint = endPoint;\n    }\n\n    public static void setAccessKeyId(String accessKeyId) {\n        OssBootUtil.accessKeyId = accessKeyId;\n    }\n\n    public static void setAccessKeySecret(String accessKeySecret) {\n        OssBootUtil.accessKeySecret = accessKeySecret;\n    }\n\n    public static void setBucketName(String bucketName) {\n        OssBootUtil.bucketName = bucketName;\n    }\n\n    public static void setStaticDomain(String staticDomain) {\n        OssBootUtil.staticDomain = staticDomain;\n    }\n\n    public static String getEndPoint() {\n        return endPoint;\n    }\n\n    public static String getAccessKeyId() {\n        return accessKeyId;\n    }\n\n    public static String getAccessKeySecret() {\n        return accessKeySecret;\n    }\n\n    public static String getBucketName() {\n        return bucketName;\n    }\n\n    private static OSSClient ossClient;\n\n    public static String upload(MultipartFile file, String fileDir) throws Exception {\n        <FILL>\n    }\n\n    public static String upload(FileItemStream file, String fileDir) {\n        return null;\n    }\n\n    public static void deleteUrl(String url) {\n        log.error(\"OSS delete error: {}\", url);\n    }\n\n    public static void deleteUrl(String url, String bucket) {\n        log.error(\"OSS delete error: {} in bucket: {}\", url, bucket);\n    }\n\n    public static void delete(String fileName) {\n        log.error(\"OSS delete error: {}\", fileName);\n    }\n\n    public static InputStream getOssFile(String objectName, String bucket) {\n        return null;\n    }\n\n    public static String getObjectUrl(String bucketName, String objectName, Date expires) {\n        return null;\n    }\n\n    private static OSSClient initOss(String endpoint, String accessKeyId, String accessKeySecret) {\n        if (ossClient == null) {\n            ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n        }\n        return ossClient;\n    }\n\n    public static String upload(InputStream stream, String relativePath) {\n        return null;\n    }\n}",
        "@Test\npublic void uploadTest() {\n    // Arrange\n    FileItemStream file = new MockFileItemStream();\n    String fileDir = \"test-dir\";\n    \n    // Act\n    String result = OssBootUtil.upload(file, fileDir);\n    \n    // Assert\n    assertNotNull(result);\n}",
        "\npackage org.jeecg.common.util.oss;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.IOException;\n\nimport com.aliyun.oss.model.PutObjectResult;\n\nimport org.jeecg.common.util.oss.OssBootUtil;\n\nimport org.junit.jupiter.api.Test;\n\npublic class OssBootUtilTest {\n    @Test\n    public void uploadTest() throws IOException {\n        // Set up the OSS client configuration\n        String endPoint = \"http://oss-cn-hangzhou.aliyuncs.com\";\n        String accessKeyId = \"your_access_key_id\";\n        String accessKeySecret = \"your_access_key_secret\";\n        String bucketName = \"your_bucket_name\";\n        OssBootUtil.setEndPoint(endPoint);\n        OssBootUtil.setAccessKeyId(accessKeyId);\n        OssBootUtil.setAccessKeySecret(accessKeySecret);\n        OssBootUtil.setBucketName(bucketName);\n\n        // Create a mock FileItemStream object\n        File file = new File(\"path/to/file\");\n        InputStream inputStream = new ByteArrayInputStream(file.getBytes());\n        PutObjectResult putObjectResult = new PutObjectResult();\n        putObjectResult.setBucketName(bucketName);\n        putObjectResult.setContentLength(file.length());\n        FileItemStream fileItemStream = new FileItemStream(inputStream, file.getName(), file.length(), null, putObjectResult);\n\n        // Call the upload method with the mock FileItemStream object and a file directory string\n        String fileDir = \"folder/\";\n        String result = OssBootUtil.upload(fileItemStream, fileDir);\n\n        // Verify that the returned URL is in the correct format\n        assertTrue(result.matches(\"https://\" + bucketName + \".oss-cn-hangzhou.aliyuncs.com/folder/\" + fileItemStream.getName()));\n    }\n}\n",
        "package org.jeecg.common.util.oss;\n\nimport com.aliyun.oss.OSSClient;\nimport com.aliyun.oss.model.CannedAccessControlList;\nimport org.junit.jupiter.api.*;\n\npublic class OssBootUtilTest {\n    private static final String ENDPOINT = \"your-end-point\";\n    private static final String ACCESS_KEY_ID = \"your-access-key-id\";\n    private static final String ACCESS_KEY_SECRET = \"your-access-key-secret\";\n    private static final String BUCKET_NAME = \"your-bucket-name\";\n    private static final String FILE_DIR = \"your-file-directory\";\n\n    @Test\n    public void uploadTest() {\n        OssBootUtil util = new OssBootUtil();\n        util.setEndPoint(ENDPOINT);\n        util.setAccessKeyId(ACCESS_KEY_ID);\n        util.setAccessKeySecret(ACCESS_KEY_SECRET);\n        util.setBucketName(BUCKET_NAME);\n\n        String url = util.upload(FileItemStream file, FILE_DIR);\n\n        assertNotNull(url);\n    }\n}",
        "The given code is for a static utility class that provides methods for working with the Aliyun Object Storage Service (OSS). It has several methods for uploading, deleting, and getting URLs for files stored in OSS.\n\nHere are some possible test cases that you could write for this class:\n\n1. Test case 1: Upload a file to OSS using the `upload` method and verify that it is successfully uploaded by retrieving the URL of the uploaded file using the `getObjectUrl` method.\n2. Test case 2: Delete a file from OSS using the `deleteUrl` method and verify that the file has been deleted by attempting to retrieve its URL using the `getObjectUrl` method.\n3. Test case 3: Upload a file to OSS using the `upload` method with a custom bucket name and verify that it is successfully uploaded by retrieving the URL of the uploaded file using the `getObjectUrl` method.\n4. Test case 4: Delete a file from OSS using the `delete` method and verify that the file has been deleted by attempting to retrieve its URL using the `getObjectUrl` method.\n5. Test case 5: Upload a file to OSS using the `upload` method with a custom bucket name and verify that it is successfully uploaded by retrieving the URL of the uploaded file using the `getObjectUrl` method.\n6. Test case 6: Delete a file from OSS using the `delete` method and verify that the file has been deleted by attempting to retrieve its URL using the `getObjectUrl` method.\n7. Test case 7: Upload a file to OSS using the `upload` method with a custom bucket name and verify that it is successfully uploaded by retrieving the URL of the uploaded file using the `getObjectUrl` method.\n8. Test case 8: Delete a file from OSS using the `deleteUrl` method and verify that the file has been deleted by attempting to retrieve its URL using the `getObjectUrl` method.\n9. Test case 9: Upload a file to OSS using the `upload` method with a custom bucket name and verify that it is successfully uploaded by retrieving the URL of the uploaded file using the `getObjectUrl` method.\n10. Test case 10: Delete a file from OSS using the `delete` method and verify that the file has been deleted by attempting to retrieve its URL using the `getObjectUrl` method.",
        "@Test\npublic void uploadTest() {\n    // Create a file item stream object with the contents of the file to be uploaded\n    FileItemStream fileItemStream = new MockFileItemStream(\"file.txt\", \"text/plain\", 1024);\n    \n    // Set up the OSS client and bucket name\n    String endPoint = \"<Your Endpoint>\";\n    String accessKeyId = \"<Your Access Key ID>\";\n    String accessKeySecret = \"<Your Access Key Secret>\";\n    String bucketName = \"<Your Bucket Name>\";\n    \n    // Call the upload method with the file item stream, file directory, and custom bucket name\n    String filePath = OssBootUtil.upload(fileItemStream, \"/\", bucketName);\n    \n    // Assert that the file path is not null\n    assertNotNull(filePath);\n}"
    ]
}