{
    "project_name": "jeecg-boot",
    "file_name": "OssBootUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/oss/OssBootUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.util.oss",
    "docstring": "/**\n     * \u4e0a\u4f20\u6587\u4ef6\u81f3\u963f\u91cc\u4e91 OSS\n     * \u6587\u4ef6\u4e0a\u4f20\u6210\u529f,\u8fd4\u56de\u6587\u4ef6\u5b8c\u6574\u8bbf\u95ee\u8def\u5f84\n     * \u6587\u4ef6\u4e0a\u4f20\u5931\u8d25,\u8fd4\u56de null\n     *\n     * @param file    \u5f85\u4e0a\u4f20\u6587\u4ef6\n     * @param fileDir \u6587\u4ef6\u4fdd\u5b58\u76ee\u5f55\n     * @return oss \u4e2d\u7684\u76f8\u5bf9\u6587\u4ef6\u8def\u5f84\n     */",
    "source_code": "\npublic static String upload(FileItemStream file, String fileDir) {\n    String filePath = null;\n    initOss(endPoint, accessKeyId, accessKeySecret);\n    StringBuilder fileUrl = new StringBuilder();\n    try {\n        String suffix = file.getName().substring(file.getName().lastIndexOf('.'));\n        String fileName = UUID.randomUUID().toString().replace(\"-\", \"\") + suffix;\n        if (!fileDir.endsWith(SymbolConstant.SINGLE_SLASH)) {\n            fileDir = fileDir.concat(SymbolConstant.SINGLE_SLASH);\n        }\n        fileDir = StrAttackFilter.filter(fileDir);\n        fileUrl = fileUrl.append(fileDir + fileName);\n        if (oConvertUtils.isNotEmpty(staticDomain) && staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n            filePath = staticDomain + SymbolConstant.SINGLE_SLASH + fileUrl;\n        } else {\n            filePath = \"https://\" + bucketName + \".\" + endPoint + SymbolConstant.SINGLE_SLASH + fileUrl;\n        }\n        PutObjectResult result = ossClient.putObject(bucketName, fileUrl.toString(), file.openStream());\n        // \u8bbe\u7f6e\u6743\u9650(\u516c\u5f00\u8bfb)\n        ossClient.setBucketAcl(bucketName, CannedAccessControlList.PublicRead);\n        if (result != null) {\n            log.info(\"------OSS\u6587\u4ef6\u4e0a\u4f20\u6210\u529f------\" + fileUrl);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n    return filePath;\n}\n",
    "class_name": "OssBootUtil",
    "method_name": "upload",
    "arguments": [
        "FileItemStream file",
        "String fileDir"
    ],
    "generate_test": [
        "\n@Test\npublic void uploadTest() {\n    // Arrange\n    FileItemStream file = new DummyFileItemStream();\n    String fileDir = \"upload/\";\n    OssBootUtil ossBootUtil = new OssBootUtil(endPoint, accessKeyId, accessKeySecret);\n\n    // Act\n    String filePath = ossBootUtil.upload(file, fileDir);\n\n    // Assert\n    assertNotNull(filePath);\n}\n",
        "package org.jeecg.common.util.oss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n    @Test\n    public void uploadTest() {\n        // Set up the test environment by creating a mock OSS bucket and a file to upload\n        String bucketName = \"my-test-bucket\";\n        String fileName = \"my-test-file.txt\";\n        File file = new File(fileName);\n\n        // Create a new instance of the OssBootUtil class with the test endpoint, access key ID, and access key secret\n        OssBootUtil ossBootUtil = new OssBootUtil(\"https://oss-cn-hangzhou.aliyuncs.com\", \"accessKeyId\", \"accessKeySecret\");\n\n        // Upload the file to the bucket using the upload method\n        String uploadedFileUrl = ossBootUtil.upload(file, bucketName);\n\n        // Check that the uploaded file URL is correct\n        assertEquals(\"https://oss-cn-hangzhou.aliyuncs.com/my-test-bucket/my-test-file.txt\", uploadedFileUrl);\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n    @Test\n    public void uploadTest() throws IOException {\n        // Create a temporary file for the test\n        File tempFile = File.createTempFile(\"test-file\", \".txt\");\n\n        // Set up the mock ossClient object\n        OSSClient ossClient = Mockito.mock(OSSClient.class);\n\n        // Test successful upload\n        PutObjectResult result = new PutObjectResult();\n        when(ossClient.putObject(anyString(), anyString(), any())).thenReturn(result);\n        String filePath = OssBootUtil.upload(tempFile, \"test-dir\");\n        assertEquals(\"https://test-bucket.\" + endPoint + \"/\" + tempFile.getName(), filePath);\n\n        // Test unsuccessful upload (no result)\n        when(ossClient.putObject(anyString(), anyString(), any())).thenReturn(null);\n        String errorMessage = assertThrows(IllegalArgumentException.class, () -> OssBootUtil.upload(tempFile, \"test-dir\"));\n        assertEquals(\"No result from ossClient\", errorMessage);\n\n        // Test unsuccessful upload (non-200 response)\n        when(ossClient.putObject(anyString(), anyString(), any())).thenThrow(new RuntimeException());\n        String errorMessage = assertThrows(RuntimeException.class, () -> OssBootUtil.upload(tempFile, \"test-dir\"));\n        assertEquals(\"Error occurred during file upload\", errorMessage);\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n    @Test\n    public void uploadTest() {\n        // Arrange\n        FileItemStream file = new MockFileItemStream();  // Replace with your own implementation\n        String fileDir = \"test-dir\";\n        String expectedPath = \"https://\" + bucketName + \".oss-cn-hangzhou.aliyuncs.com/test-dir/\" + UUID.randomUUID().toString() + \".txt\";  // Replace with your own expected value\n        \n        // Act\n        OssBootUtil util = new OssBootUtil();\n        String actualPath = util.upload(file, fileDir);\n        \n        // Assert\n        assertEquals(expectedPath, actualPath);\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n    private String fileDir = \"test-directory\";\n    private FileItemStream fileItemStream;\n    private OssBootUtil ossBootUtil;\n\n    @BeforeEach\n    public void setup() {\n        // create a temporary file to upload\n        try {\n            fileItemStream = new FileItemStream(new File(\"test-file.txt\"));\n        } catch (FileNotFoundException e) {\n            fail(\"Could not create test file: \" + e);\n        }\n    }\n\n    @Test\n    public void uploadTest() {\n        // mock the ossClient object to simulate a successful upload\n        OSSClient mockOSSClient = mock(OSSClient.class);\n        when(mockOSSClient.putObject(anyString(), anyString(), any()))\n                .thenReturn(new PutObjectResult());\n\n        // set up the ossBootUtil object with the mocked client\n        ossBootUtil = new OssBootUtil();\n        ossBootUtil.setOssClient(mockOSSClient);\n\n        // call the upload method and assert that it returns a non-null value\n        String filePath = ossBootUtil.upload(fileItemStream, fileDir);\n        assertNotNull(filePath);\n    }\n}",
        "\npackage org.jeecg.common.util.oss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n    @Test\n    public void uploadTest() {\n        String filePath = null;\n        initOss(endPoint, accessKeyId, accessKeySecret);\n        StringBuilder fileUrl = new StringBuilder();\n        try {\n            String suffix = file.getName().substring(file.getName().lastIndexOf('.'));\n            String fileName = UUID.randomUUID().toString().replace(\"-\", \"\") + suffix;\n            if (!fileDir.endsWith(SymbolConstant.SINGLE_SLASH)) {\n                fileDir = fileDir.concat(SymbolConstant.SINGLE_SLASH);\n            }\n            fileDir = StrAttackFilter.filter(fileDir);\n            fileUrl = fileUrl.append(fileDir + fileName);\n            if (oConvertUtils.isNotEmpty(staticDomain) && staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n                filePath = staticDomain + SymbolConstant.SINGLE_SLASH + fileUrl;\n            } else {\n                filePath = \"https://\" + bucketName + \".\" + endPoint + SymbolConstant.SINGLE_SLASH + fileUrl;\n            }\n            PutObjectResult result = ossClient.putObject(bucketName, fileUrl.toString(), file.openStream());\n            // \u8bbe\u7f6e\u6743\u9650(\u516c\u5f00\u8bfb)\n            ossClient.setBucketAcl(bucketName, CannedAccessControlList.PublicRead);\n            if (result != null) {\n                log.info(\"------OSS\u6587\u4ef6\u4e0a\u4f20\u6210\u529f------\" + fileUrl);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n        assertNotNull(filePath);\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n    @Test\n    public void uploadTest() {\n        // Arrange\n        FileItemStream file = new FileItemStream(); // Create a mock file item stream\n        String fileDir = \"fileDir\"; // Define the directory for the uploaded file\n        String accessKeyId = \"accessKeyId\"; // Define the access key ID for OSS\n        String accessKeySecret = \"accessKeySecret\"; // Define the access key secret for OSS\n\n        // Act\n        String result = upload(file, fileDir, accessKeyId, accessKeySecret);\n\n        // Assert\n        assertNotNull(result); // Ensure that the result is not null\n    }\n}",
        "@Test\npublic void uploadTest() {\n    // Arrange\n    FileItemStream file = new MockFileItemStream();\n    String fileDir = \"test\";\n    initOss(endPoint, accessKeyId, accessKeySecret);\n    \n    // Act\n    String filePath = upload(file, fileDir);\n    \n    // Assert\n    assertNotNull(filePath);\n    assertTrue(filePath.startsWith(\"https://\"));\n}",
        "package org.jeecg.common.util.oss;\n\nimport com.aliyun.oss.OSSClient;\nimport com.aliyun.oss.model.PutObjectResult;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n    private String bucketName = \"test-bucket\";\n    private String accessKeyId = \"test-access-key-id\";\n    private String accessKeySecret = \"test-access-key-secret\";\n    private String endPoint = \"https://oss.aliyuncs.com\";\n    private OSSClient ossClient;\n\n    @BeforeEach\n    public void setUp() {\n        ossClient = new OSSClient(endPoint, accessKeyId, accessKeySecret);\n    }\n\n    @AfterEach\n    public void tearDown() {\n        ossClient.shutdown();\n    }\n\n    @Test\n    public void uploadTest() {\n        String filePath = \"src/test/resources/example.txt\";\n        FileItemStream file = new DiskFileItem(filePath);\n        String fileDir = \"/test-directory\";\n\n        // Call the upload method and verify that it returns a non-null result\n        PutObjectResult result = OssBootUtil.upload(file, bucketName, accessKeyId, accessKeySecret, endPoint, fileDir);\n        assertNotNull(result);\n\n        // Verify that the uploaded file exists in the OSS bucket\n        ObjectMetadata metadata = ossClient.getObjectMetadata(bucketName, filePath);\n        assertTrue(metadata.exists());\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n    @Test\n    public void uploadTest() throws IOException {\n        // Create a file input stream for the file to be uploaded\n        FileInputStream fileInputStream = new FileInputStream(\"example.txt\");\n        \n        // Set up the parameters for the `upload` method\n        String fileDir = \"/path/to/directory\";\n        String staticDomain = \"https://www.example.com\";\n        String endPoint = \"oss-cn-beijing.aliyuncs.com\";\n        String accessKeyId = \"your_access_key_id\";\n        String accessKeySecret = \"your_access_key_secret\";\n        \n        // Call the `upload` method with the parameters we set up\n        String filePath = OssBootUtil.upload(fileInputStream, fileDir, staticDomain, endPoint, accessKeyId, accessKeySecret);\n        \n        // Assert that the file was uploaded successfully\n        assertNotNull(filePath);\n    }\n}"
    ]
}