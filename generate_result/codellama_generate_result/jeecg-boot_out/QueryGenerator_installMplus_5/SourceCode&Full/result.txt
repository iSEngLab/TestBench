Source code: 


private static void installMplus(QueryWrapper<?> queryWrapper,Object searchObj,Map<String, String[]> parameterMap) {
	
	/*
	 * 注意:权限查询由前端配置数据规则 当一个人有多个所属部门时候 可以在规则配置包含条件 orgCode 包含 #{sys_org_code}
	但是不支持在自定义SQL中写orgCode in #{sys_org_code} 
	当一个人只有一个部门 就直接配置等于条件: orgCode 等于 #{sys_org_code} 或者配置自定义SQL: orgCode = '#{sys_org_code}'
	*/
	
	//区间条件组装 模糊查询 高级查询组装 简单排序 权限查询
	PropertyDescriptor[] origDescriptors = PropertyUtils.getPropertyDescriptors(searchObj);
	Map<String,SysPermissionDataRuleModel> ruleMap = getRuleMap();
	
	//权限规则自定义SQL表达式
	for (String c : ruleMap.keySet()) {
		if(oConvertUtils.isNotEmpty(c) && c.startsWith(SQL_RULES_COLUMN)){
			queryWrapper.and(i ->i.apply(getSqlRuleValue(ruleMap.get(c).getRuleValue())));
		}
	}
	
	String name, type, column;
	// update-begin--Author:taoyan  Date:20200923 for：issues/1671 如果字段加注解了@TableField(exist = false),不走DB查询-------
	//定义实体字段和数据库字段名称的映射 高级查询中 只能获取实体字段 如果设置TableField注解 那么查询条件会出问题
	Map<String,String> fieldColumnMap = new HashMap<>(5);
	for (int i = 0; i < origDescriptors.length; i++) {
		//aliasName = origDescriptors[i].getName();  mybatis  不存在实体属性 不用处理别名的情况
		name = origDescriptors[i].getName();
		type = origDescriptors[i].getPropertyType().toString();
		try {
			if (judgedIsUselessField(name)|| !PropertyUtils.isReadable(searchObj, name)) {
				continue;
			}

			Object value = PropertyUtils.getSimpleProperty(searchObj, name);
			column = ReflectHelper.getTableFieldName(searchObj.getClass(), name);
			if(column==null){
				//column为null只有一种情况 那就是 添加了注解@TableField(exist = false) 后续都不用处理了
				continue;
			}
			fieldColumnMap.put(name,column);
			//数据权限查询
			if(ruleMap.containsKey(name)) {
				addRuleToQueryWrapper(ruleMap.get(name), column, origDescriptors[i].getPropertyType(), queryWrapper);
			}
			//区间查询
			doIntervalQuery(queryWrapper, parameterMap, type, name, column);
			//判断单值  参数带不同标识字符串 走不同的查询
			//TODO 这种前后带逗号的支持分割后模糊查询(多选字段查询生效) 示例：,1,3,
			if (null != value && value.toString().startsWith(COMMA) && value.toString().endsWith(COMMA)) {
				String multiLikeval = value.toString().replace(",,", COMMA);
				String[] vals = multiLikeval.substring(1, multiLikeval.length()).split(COMMA);
				final String field = oConvertUtils.camelToUnderline(column);
				if(vals.length>1) {
					queryWrapper.and(j -> {
                           log.info("---查询过滤器，Query规则---field:{}, rule:{}, value:{}", field, "like", vals[0]);
						j = j.like(field,vals[0]);
						for (int k=1;k<vals.length;k++) {
							j = j.or().like(field,vals[k]);
							log.info("---查询过滤器，Query规则 .or()---field:{}, rule:{}, value:{}", field, "like", vals[k]);
						}
						//return j;
					});
				}else {
					log.info("---查询过滤器，Query规则---field:{}, rule:{}, value:{}", field, "like", vals[0]);
					queryWrapper.and(j -> j.like(field,vals[0]));
				}
			}else {
				//根据参数值带什么关键字符串判断走什么类型的查询
				QueryRuleEnum rule = convert2Rule(value);
				value = replaceValue(rule,value);
				// add -begin 添加判断为字符串时设为全模糊查询
				//if( (rule==null || QueryRuleEnum.EQ.equals(rule)) && "class java.lang.String".equals(type)) {
					// 可以设置左右模糊或全模糊，因人而异
					//rule = QueryRuleEnum.LIKE;
				//}
				// add -end 添加判断为字符串时设为全模糊查询
				addEasyQuery(queryWrapper, column, rule, value);
			}
			
		} catch (Exception e) {
			log.error(e.getMessage(), e);
		}
	}
	// 排序逻辑 处理
	doMultiFieldsOrder(queryWrapper, parameterMap, fieldColumnMap);
			
	//高级查询
	doSuperQuery(queryWrapper, parameterMap, fieldColumnMap);
	// update-end--Author:taoyan  Date:20200923 for：issues/1671 如果字段加注解了@TableField(exist = false),不走DB查询-------
	
}



No.1 generated result --------------------------

package org.jeecg.common.system.query;

import java.util.*;

/**
 * QueryBuilder 生成器工具类
 */
public class QueryBuilder extends QueryWrapper<Object> {
    private static final String SQL_RULES_COLUMN = "column";
    
    /**
	 * 根据权限相关配置 组装mp需要的权限
	 * @param queryWrapper
	 * @param clazz
	 * @return
	 */
	public static QueryBuilder installAuthMplus(Class<?> clazz) {
		//权限查询
		Map<String,SysPermissionDataRuleModel> ruleMap = getRuleMap();
		PropertyDescriptor[] origDescriptors = PropertyUtils.getPropertyDescriptors(clazz);
		for (String c : ruleMap.keySet()) {
			if(oConvertUtils.isNotEmpty(c) && c.startsWith(SQL_RULES_COLUMN)){
				this.and(i ->i.apply(getSqlRuleValue(ruleMap.get(c).getRuleValue())));
			}
		}
		String name, column;
		for (int i = 0; i < origDescriptors.length; i++) {
			name = origDescriptors[i].getName();
			if (judgedIsUselessField(name)) {
				continue;
			}
			column = ReflectHelper.getTableFieldName(clazz, name);
			if(column==null){
				continue;
			}
			if(ruleMap.containsKey(name)) {
				addRuleToQueryWrapper(ruleMap.get(name), column, origDescriptors[i].getPropertyType(), this);
			}
		}
		return this;
	}

    private static String getSqlRuleValue(String ruleValue) {
        return QueryGenerator.convertSystemVariables(ruleValue);
    }
    
    /**
     * 根据权限相关配置 组装mp需要的权限
     * @param clazz
     * @return
     */
    public static String installAuthSql(Class<?> clazz) {
        //权限查询
        Map<String,SysPermissionDataRuleModel> ruleMap = getRuleMap();
        PropertyDescriptor[] origDescriptors = PropertyUtils.getPropertyDescriptors(clazz);
		String sqlAnd = " and ";
		for (String c : ruleMap.keySet()) {
			if(oConvertUtils.isNotEmpty(c) && c.startsWith(SQL_RULES_COLUMN)){
				sb.append(sqlAnd+getSqlRuleValue(ruleMap.get(c).getRuleValue()));
			}
		}
        for (int i = 0; i < origDescriptors.length; i++) {
            name = origDescriptors[i].getName();
            }
    }
    
}


No.2 generated result --------------------------

Timeout


No.3 generated result --------------------------

Timeout


No.4 generated result --------------------------

Timeout


No.5 generated result --------------------------

package org.jeecg.common.system.query;

import cn.hutool.json.JSONUtil;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import org.jeecg.common.util.CommonUtils;
import org.junit.jupiter.api.Test;

import java.beans.PropertyDescriptor;
import java.text.SimpleDateFormat;
import java.util.*;

@Slf4j
public class QueryGenerator {
    public static String getDbType(){
        return CommonUtils.getDatabaseType();
    }

    public static void main(String[] args) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        System.out.println(sdf.format(new Date()));
    }
}
    


No.6 generated result --------------------------

package com.xiaojukeji.kafka.manager.common.utils;

import java.util.regex.Pattern;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author zengqiao
 * @date 19/4/20
 */
public class ValidationUtils {
    private static final Logger LOGGER = LoggerFactory.getLogger(ValidationUtils.class);

    /**
     * 字符串是否合法, 非空且不包含空白符
     */
    public static boolean legalString(String str) {
        return StringUtils.isNotBlank(str) && !containsWhitespace(str);
    }

    /**
     * 是否包含空格
     */
    private static boolean containsWhitespace(CharSequence str) {
        if (StringUtils.isEmpty(str)) {
            return false;
        }
        int strLen = str.length();
        for (int i = 0; i < strLen; ++i) {
            if (Character.isWhitespace(str.charAt(i))) {
                return true;
            }
        }
        return false;
    }

    public static void illegalStringException(String str, String paramName) {
        if (!legalString(str)) {
            throw new IllegalArgumentException(paramName + " is illegal!");
        }
    }
}
    



No.7 generated result --------------------------

package org.jeecg.modules.system.rules;

import lombok.Data;

/**
 * 数据权限规则表
 */
@Data
public class SysPermissionDataRuleModel {
    private String id;//id
    
    private Integer ruleConditions; //规则条件：1、2、3、4，如果等于1代表单选框，2代表范围输入框的开始时间，3代表范围输入框的结束时间
    
    private String ruleValue;//规则值： 多个用逗号隔开（ruleConditions等于1时为单选框的值）
}
    

### Response:


No.8 generated result --------------------------

package org.jeecg.common.system.query;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QueryGeneratorTest {
    @Test
    public void installMplusTest() {
        SysPermissionDataRuleModel model = new SysPermissionDataRuleModel();
        model.setId("1");
        model.setPerms("query_test");
        model.setRuleValue("'jeecg-boot'");
        model.setTableName("sys_user");
        model.setSqlRulesColumn("sql_rules_column");
        QueryWrapper<SysUser> wrapper = new QueryWrapper<>();
        QueryGenerator.installAuthMplus(wrapper, SysUser.class);
        assertTrue(!wrapper.getSqlSegment().isEmpty());
    }
}


No.9 generated result --------------------------

package org.jeecg.common.system.query;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import lombok.Data;
import org.jeecg.common.util.oConvertUtils;

import java.io.Serializable;
@Data
public class QueryParam implements Serializable {
    private Integer pageNo = 1;
    private Integer pageSize= 30;
    /**
     * 排序字段，多个用逗号分隔：name,age,...
     */
    private String orderByClause;
    /**
     * desc/asc
     */
    private String isAsc="desc";

    public QueryParam() {
        this.pageSize = oConvertUtils.getPageSize();
        this.pageNo = oConvertUtils.getPageNo();
    }
    public Page<T> getPage() {
        return new Page<T>(this);
    }
}
    

### Response:


No.10 generated result --------------------------

@Slf4j
@RestController
@RequestMapping("/sys/dict")
@Api(tags="系统管理")
public class SysDictController extends JeecgController<SysDict, ISysDictService> {
	
	/**
	 * 分页列表查询
	 * @param pageListPara
	 * @return
	 */
	@AutoLog(value = "字典数据", type = AutoLog.OPERATE_TYPE_SEARCH)
	@ApiOperation(value="字典数据", notes="字典数据查询")
	@GetMapping(value = "/list")
	public Result<?> queryPageList(@RequestBody PageListPara pageListPara){
		return super.queryPageList(pageListPara);
	}
    
	/**
	 * 根据字典类型查询数据值
	 */
	@GetMapping("/type/{dictType}")
	public Result<List<DictModel>> queryDictItemsByCode(@PathVariable String dictType) {
		log.info("queryDictItemsByCode: "+dictType);
        List<DictModel> list = sysBaseAPI.queryDictItemsByCode(dictType);
		return new Result<>(list);
	}
    
    /**
      * 根据字典类型查询数据值（树形结构）
      */
    @GetMapping("/treeTableType/{dictType}")
    public Result<List<TreeModel>> queryTreeTableDictItemsByCode(@PathVariable String dictType) {
        List<TreeModel> list = sysBaseAPI.queryTreeTableDictItemsByCode(dictType);
		return new Result<>(list);
	}
    
    /**
      * 根据字典类型查询数据值（树形结构）
      */
    @GetMapping("/tree/{dictType}")
    public Result<List<TreeModel>> queryTreeDictItemsByCode(@PathVariable String dictType) {
        List<TreeModel> list = sysBaseAPI.queryTreeDictItemsByCode(dictType);
		return new Result<>(list);
	}
    
    
	/**
	 * 根据字典类型查询数据值
	 */
	@GetMapping("/type/{dictType}/{key}")
	public Result<?> queryDictItemsByCodeAndKey(@PathVariable String dictType, @PathVariable String key) {
        List<DictModel> list = sysBaseAPI.queryDictItemsByCodeAndKey(dictType,key);
		return new Result<>(list);
	}
    
    /**
      * 根据字典类型查询数据值（带有父子结构）
      */
    @GetMapping("/treeTable/{dictType}")
    public Result<List<TreeModel>> queryTreeTableDictItemsByCode(@PathVariable String dictType, @RequestParam(name="pid",required=false)String pid) {
        List<TreeModel> list = sysBaseAPI.queryTreeTableDictItemsByCode(dictType,pid);
		return new Result<>(list));
    }
    
}
    

### Request:


