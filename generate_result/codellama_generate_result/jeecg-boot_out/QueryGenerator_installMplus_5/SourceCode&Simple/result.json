{
    "project_name": "jeecg-boot",
    "file_name": "QueryGenerator.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/query/QueryGenerator.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.system.query",
    "docstring": "/**\n\t * \u7ec4\u88c5Mybatis Plus \u67e5\u8be2\u6761\u4ef6\n\t * <p>\u4f7f\u7528\u6b64\u65b9\u6cd5 \u9700\u8981\u6709\u5982\u4e0b\u51e0\u70b9\u6ce8\u610f:   \n\t * <br>1.\u4f7f\u7528QueryWrapper \u800c\u975eLambdaQueryWrapper;\n\t * <br>2.\u5b9e\u4f8b\u5316QueryWrapper\u65f6\u4e0d\u53ef\u5c06\u5b9e\u4f53\u4f20\u5165\u53c2\u6570   \n\t * <br>\u9519\u8bef\u793a\u4f8b:\u5982QueryWrapper<JeecgDemo> queryWrapper = new QueryWrapper<JeecgDemo>(jeecgDemo);\n\t * <br>\u6b63\u786e\u793a\u4f8b:QueryWrapper<JeecgDemo> queryWrapper = new QueryWrapper<JeecgDemo>();\n\t * <br>3.\u4e5f\u53ef\u4ee5\u4e0d\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u76f4\u63a5\u8c03\u7528 {@link #initQueryWrapper}\u76f4\u63a5\u83b7\u53d6\u5b9e\u4f8b\n\t */",
    "source_code": "\nprivate static void installMplus(QueryWrapper<?> queryWrapper,Object searchObj,Map<String, String[]> parameterMap) {\n\t\n\t/*\n\t * \u6ce8\u610f:\u6743\u9650\u67e5\u8be2\u7531\u524d\u7aef\u914d\u7f6e\u6570\u636e\u89c4\u5219 \u5f53\u4e00\u4e2a\u4eba\u6709\u591a\u4e2a\u6240\u5c5e\u90e8\u95e8\u65f6\u5019 \u53ef\u4ee5\u5728\u89c4\u5219\u914d\u7f6e\u5305\u542b\u6761\u4ef6 orgCode \u5305\u542b #{sys_org_code}\n\t\u4f46\u662f\u4e0d\u652f\u6301\u5728\u81ea\u5b9a\u4e49SQL\u4e2d\u5199orgCode in #{sys_org_code} \n\t\u5f53\u4e00\u4e2a\u4eba\u53ea\u6709\u4e00\u4e2a\u90e8\u95e8 \u5c31\u76f4\u63a5\u914d\u7f6e\u7b49\u4e8e\u6761\u4ef6: orgCode \u7b49\u4e8e #{sys_org_code} \u6216\u8005\u914d\u7f6e\u81ea\u5b9a\u4e49SQL: orgCode = '#{sys_org_code}'\n\t*/\n\t\n\t//\u533a\u95f4\u6761\u4ef6\u7ec4\u88c5 \u6a21\u7cca\u67e5\u8be2 \u9ad8\u7ea7\u67e5\u8be2\u7ec4\u88c5 \u7b80\u5355\u6392\u5e8f \u6743\u9650\u67e5\u8be2\n\tPropertyDescriptor[] origDescriptors = PropertyUtils.getPropertyDescriptors(searchObj);\n\tMap<String,SysPermissionDataRuleModel> ruleMap = getRuleMap();\n\t\n\t//\u6743\u9650\u89c4\u5219\u81ea\u5b9a\u4e49SQL\u8868\u8fbe\u5f0f\n\tfor (String c : ruleMap.keySet()) {\n\t\tif(oConvertUtils.isNotEmpty(c) && c.startsWith(SQL_RULES_COLUMN)){\n\t\t\tqueryWrapper.and(i ->i.apply(getSqlRuleValue(ruleMap.get(c).getRuleValue())));\n\t\t}\n\t}\n\t\n\tString name, type, column;\n\t// update-begin--Author:taoyan  Date:20200923 for\uff1aissues/1671 \u5982\u679c\u5b57\u6bb5\u52a0\u6ce8\u89e3\u4e86@TableField(exist = false),\u4e0d\u8d70DB\u67e5\u8be2-------\n\t//\u5b9a\u4e49\u5b9e\u4f53\u5b57\u6bb5\u548c\u6570\u636e\u5e93\u5b57\u6bb5\u540d\u79f0\u7684\u6620\u5c04 \u9ad8\u7ea7\u67e5\u8be2\u4e2d \u53ea\u80fd\u83b7\u53d6\u5b9e\u4f53\u5b57\u6bb5 \u5982\u679c\u8bbe\u7f6eTableField\u6ce8\u89e3 \u90a3\u4e48\u67e5\u8be2\u6761\u4ef6\u4f1a\u51fa\u95ee\u9898\n\tMap<String,String> fieldColumnMap = new HashMap<>(5);\n\tfor (int i = 0; i < origDescriptors.length; i++) {\n\t\t//aliasName = origDescriptors[i].getName();  mybatis  \u4e0d\u5b58\u5728\u5b9e\u4f53\u5c5e\u6027 \u4e0d\u7528\u5904\u7406\u522b\u540d\u7684\u60c5\u51b5\n\t\tname = origDescriptors[i].getName();\n\t\ttype = origDescriptors[i].getPropertyType().toString();\n\t\ttry {\n\t\t\tif (judgedIsUselessField(name)|| !PropertyUtils.isReadable(searchObj, name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tObject value = PropertyUtils.getSimpleProperty(searchObj, name);\n\t\t\tcolumn = ReflectHelper.getTableFieldName(searchObj.getClass(), name);\n\t\t\tif(column==null){\n\t\t\t\t//column\u4e3anull\u53ea\u6709\u4e00\u79cd\u60c5\u51b5 \u90a3\u5c31\u662f \u6dfb\u52a0\u4e86\u6ce8\u89e3@TableField(exist = false) \u540e\u7eed\u90fd\u4e0d\u7528\u5904\u7406\u4e86\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfieldColumnMap.put(name,column);\n\t\t\t//\u6570\u636e\u6743\u9650\u67e5\u8be2\n\t\t\tif(ruleMap.containsKey(name)) {\n\t\t\t\taddRuleToQueryWrapper(ruleMap.get(name), column, origDescriptors[i].getPropertyType(), queryWrapper);\n\t\t\t}\n\t\t\t//\u533a\u95f4\u67e5\u8be2\n\t\t\tdoIntervalQuery(queryWrapper, parameterMap, type, name, column);\n\t\t\t//\u5224\u65ad\u5355\u503c  \u53c2\u6570\u5e26\u4e0d\u540c\u6807\u8bc6\u5b57\u7b26\u4e32 \u8d70\u4e0d\u540c\u7684\u67e5\u8be2\n\t\t\t//TODO \u8fd9\u79cd\u524d\u540e\u5e26\u9017\u53f7\u7684\u652f\u6301\u5206\u5272\u540e\u6a21\u7cca\u67e5\u8be2(\u591a\u9009\u5b57\u6bb5\u67e5\u8be2\u751f\u6548) \u793a\u4f8b\uff1a,1,3,\n\t\t\tif (null != value && value.toString().startsWith(COMMA) && value.toString().endsWith(COMMA)) {\n\t\t\t\tString multiLikeval = value.toString().replace(\",,\", COMMA);\n\t\t\t\tString[] vals = multiLikeval.substring(1, multiLikeval.length()).split(COMMA);\n\t\t\t\tfinal String field = oConvertUtils.camelToUnderline(column);\n\t\t\t\tif(vals.length>1) {\n\t\t\t\t\tqueryWrapper.and(j -> {\n                           log.info(\"---\u67e5\u8be2\u8fc7\u6ee4\u5668\uff0cQuery\u89c4\u5219---field:{}, rule:{}, value:{}\", field, \"like\", vals[0]);\n\t\t\t\t\t\tj = j.like(field,vals[0]);\n\t\t\t\t\t\tfor (int k=1;k<vals.length;k++) {\n\t\t\t\t\t\t\tj = j.or().like(field,vals[k]);\n\t\t\t\t\t\t\tlog.info(\"---\u67e5\u8be2\u8fc7\u6ee4\u5668\uff0cQuery\u89c4\u5219 .or()---field:{}, rule:{}, value:{}\", field, \"like\", vals[k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//return j;\n\t\t\t\t\t});\n\t\t\t\t}else {\n\t\t\t\t\tlog.info(\"---\u67e5\u8be2\u8fc7\u6ee4\u5668\uff0cQuery\u89c4\u5219---field:{}, rule:{}, value:{}\", field, \"like\", vals[0]);\n\t\t\t\t\tqueryWrapper.and(j -> j.like(field,vals[0]));\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\t//\u6839\u636e\u53c2\u6570\u503c\u5e26\u4ec0\u4e48\u5173\u952e\u5b57\u7b26\u4e32\u5224\u65ad\u8d70\u4ec0\u4e48\u7c7b\u578b\u7684\u67e5\u8be2\n\t\t\t\tQueryRuleEnum rule = convert2Rule(value);\n\t\t\t\tvalue = replaceValue(rule,value);\n\t\t\t\t// add -begin \u6dfb\u52a0\u5224\u65ad\u4e3a\u5b57\u7b26\u4e32\u65f6\u8bbe\u4e3a\u5168\u6a21\u7cca\u67e5\u8be2\n\t\t\t\t//if( (rule==null || QueryRuleEnum.EQ.equals(rule)) && \"class java.lang.String\".equals(type)) {\n\t\t\t\t\t// \u53ef\u4ee5\u8bbe\u7f6e\u5de6\u53f3\u6a21\u7cca\u6216\u5168\u6a21\u7cca\uff0c\u56e0\u4eba\u800c\u5f02\n\t\t\t\t\t//rule = QueryRuleEnum.LIKE;\n\t\t\t\t//}\n\t\t\t\t// add -end \u6dfb\u52a0\u5224\u65ad\u4e3a\u5b57\u7b26\u4e32\u65f6\u8bbe\u4e3a\u5168\u6a21\u7cca\u67e5\u8be2\n\t\t\t\taddEasyQuery(queryWrapper, column, rule, value);\n\t\t\t}\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\t}\n\t// \u6392\u5e8f\u903b\u8f91 \u5904\u7406\n\tdoMultiFieldsOrder(queryWrapper, parameterMap, fieldColumnMap);\n\t\t\t\n\t//\u9ad8\u7ea7\u67e5\u8be2\n\tdoSuperQuery(queryWrapper, parameterMap, fieldColumnMap);\n\t// update-end--Author:taoyan  Date:20200923 for\uff1aissues/1671 \u5982\u679c\u5b57\u6bb5\u52a0\u6ce8\u89e3\u4e86@TableField(exist = false),\u4e0d\u8d70DB\u67e5\u8be2-------\n\t\n}\n",
    "class_name": "QueryGenerator",
    "method_name": "installMplus",
    "arguments": [
        "QueryWrapper<> queryWrapper",
        "Object searchObj",
        "Map<String, String> parameterMap"
    ],
    "generate_test": [
        "package org.jeecg.common.system.query;\n\nimport com.baomidou.mybatisplus.core.conditions.Wrapper;\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport org.jeecg.common.api.vo.Result;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.Map;\n\n@RestController\npublic class QueryGeneratorApi {\n    @GetMapping(\"/installMplus\")\n    public ResponseEntity<Result> installMplus(@RequestParam(required = false) Map<String, Object> map) {\n        Wrapper wrapper = QueryGenerator.installMplus((BaseMapper<?>) null, (Object) null, (Map<String, String>) null);\n        Page page = wrapper.toPage();\n        return ResponseEntity.ok().body(Result.OK());\n    }\n}\n    \n\n### File:",
        "package org.jeecg.common.system.query;\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport java.util.Map;\n\npublic class QueryGenerator {\n    public static  installMplus(QueryWrapper<T> queryWrapper, T searchObj, Map<String, String> parameterMap) {\n        if (searchObj != null && parameterMap != null) {\n            Map<String, SysPermissionDataRuleModel> rules = getRuleMap();\n            for (Map.Entry<String, String> entry : parameterMap.entrySet()) {\n                // \u5c5e\u6027\u540d\u79f0\uff0c\u5982:name|createTime\n                String propertyNameStr = entry.getKey().trim();\n                // \u6570\u636e\u89c4\u5219\u5b57\u7b26\u4e32\n                SysPermissionDataRuleModel rule = rules.get(propertyNameStr);\n                if (rule != null) {\n                    // \u6839\u636e\u5c5e\u6027\u540d\u79f0\uff0c\u89e3\u6790\u51fa\u5bf9\u5e94\u7684\u5c5e\u6027\u7c7b\u578b\u548c\u5c5e\u6027\u503c\n                    String[] propertyNameArray = propertyNameStr.split(\"\\\\|\");\n                    // \u9488\u5bf9\u591a\u5c5e\u6027\u6761\u4ef6\uff08\u5982\uff1acreateTime|updateTime\uff09\u8fdb\u884c\u7279\u6b8a\u5904\u7406\n                    if (propertyNameArray.length == 2) {\n                        String[] values = entry.getValue().split(QUERY_COMMA_ESCAPE);\n                        // \u5047\u8bbevalues\u7684\u503c\u4e3a\uff1a[2018-07-04,2019-07-04]\uff0c\u5219\u8fdb\u884c\u89e3\u6790\u540e\uff0c\u5e94\u8be5\u751f\u6210\u5982\u4e0bsql\u6761\u4ef6\uff1a(createTime >= '2018-07-04 00:00:00' AND createTime < '2019-07-05 00:00:00') OR (updateTime >= '2018-07-04 00:00:00' AND updateTime < '2019-07-05 00:00:00')\n                        String columnName = propertyNameArray[0];\n                        String beginStr = values[0].trim();\n                        String endStr = values[1].trim();\n                        if (beginStr.length() > 0 && endStr.length() > 0) {\n                            try {\n                                // \u751f\u6210\u6570\u636e\u8303\u56f4\u67e5\u8be2\u7684sql\u6761\u4ef6\n                                doIntervalQuery(queryWrapper, beginStr, columnName, rule);\n                                doIntervalQuery(queryWrapper, endStr, columnName, rule);\n                            } catch (ParseException e) {\n                                log.error(\"\u89e3\u6790\" + propertyNameStr + \"\u5f02\u5e38\uff0c\" + e.getMessage(), e);\n                            }\n                        }\n                    } else if (propertyNameArray.length == 1) {\n                        // \u5355\u5c5e\u6027\u6761\u4ef6\uff08\u5982\uff1aname\uff09\u7684\u5904\u7406\n                        String propertyName = propertyNameStr;\n                        Object valueObj = PropertyUtils.getProperty(searchObj, propertyName);\n                        if (valueObj != null) {\n                            addEasyQuery(queryWrapper, propertyName, rule, valueObj);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    /**\n     * \u6839\u636e\u89c4\u5219\uff0c\u5c06\u6570\u636e\u8303\u56f4\u7684\u67e5\u8be2\u6dfb\u52a0\u5230 QueryWrapper \u5bf9\u8c61\u4e2d\n     */\n    private static  doIntervalQuery(QueryWrapper<T> queryWrapper, String value, String columnName, SysPermissionDataRuleModel rule) throws ParseException {\n        // \u62fc\u5408\u7231\ufffd \u662f\u6570\u636e\u8303\u56f4\u67e5\u8be2\u6761\u4ef6\uff0c\u5219\u751f\u6210\u5bf9\u5e94\u7684sql\u6761\u4ef6\uff08\u5982\uff1abetween\uff09\n        if (rule.getCondition().equals(SysPermissionDataRuleModel.CONDITION_BETWEEN)) {\n            // \u6dfb\u52a0\u67e5\u8be2\u6761\u4ef6\u5230 QueryWrapper \u5bf9\u8c61\u4e2d\n            queryWrapper.ge(columnName, beginStr).le(columnName, endStr);\n        } else if (rule.getCondition().equals(SysPermissionDataRuleModel.CONDITION_IN)) {\n            // \u5047\u5982\u679c\u662f IN\u67e5\u8be2\u6761\u4ef6\uff0c\u5219\u751f\u6210\u5bf9\u5e94\u7684sql\u6761\u4ef6\uff08\u5982\uff1ain\uff09\n            \n                List<T> list = new ArrayList<>();\n                for (String val : value.split(\",\")) {\n                    if (val.trim().length() > 0) {\n                        T entity = clazz.newInstance();\n                        PropertyUtils.setProperty(entity, columnName, val);\n                        list.add(entity);\n                    }\n                }\n            queryWrapper.in(columnName, list);\n        } else if (rule.getCondition().equals(SysPermissionDataRuleModel.CONDITION_LIKE)) {\n            // \u5047\u5982\u679c\u662f LIKE\u67e5\u8be2\u6761\u4ef6\uff0c\u5219\u751f\u6210\u5bf9\u5e94\u7684sql\u6761\u4ef6\uff08\u5982\uff1alike\uff09\n            \n                queryWrapper.like(columnName, value);\n        } else if (rule.getCondition().equals(SysPermissionDataRuleModel.CONDITION_GT)) {\n            // \u5047\u5982\u679c\u662f\u5927\u4e8e\u67e5\u8be2\u6761\u4ef6\uff0c\u5219\u751f\u6210\u5bf9\u5e94\u7684sql\u6761\u4ef6\uff08\u5982\uff1a>\uff09\n            \n                queryWrapper.gt(columnName, value);\n        } else if (rule.getCondition().equals(SysPermissionDataRuleModel.CONDITION_LT)) {\n            // \u5047\u5982\u679c\u662f\u5c0f\u4e8e\u67e5\u8be2\u6761\u4ef6\uff0c\u5219\u751f\u6210\u5bf9\u5e94\u7684sql\u6761\u4ef6\uff08\u5982\uff1a<\uff09\n            \n                queryWrapper.lt(columnName, value);\n        } else if (rule.getCondition().equals(SysPermissionDataRuleModel.CONDITION_EQUAL)) {\n            // \u5047\u5982\u679c\u662f\u7b49\u4e8e\u67e5\u8be2\u6761\u4ef6\uff0c\u5219\u751f\u6210\u5bf9\u5e94\u7684sql\u6761\u4ef6\uff08\u5982\uff1a=\uff09\n            \n                queryWrapper.eq(columnName, value);\n        } else if (rule.getCondition().equals(SysPermissionDataRuleModel.CONDITION_NOTEQUAL)) {\n            // \u5047\u5982\u679c\u662f\u4e0d\u7b49\u4e8e\u67e5\u8be2\u6761\u4ef6\uff0c\u5219\u751f\u6210\u5bf9\u5e94\u7684sql\u6761\u4ef6\uff08\u5982\uff1a<>\uff09\n            \n                queryWrapper.ne(columnName, value);\n        } else if (rule.getCondition().equals(SysPermissionDataRuleModel.CONDITION_NOTLIKE)) {\n            // \u5047\u5982\u679c\u662f\u4e0d\u5305\u542b\u67e5\u8be2\u6761\u4ef6\uff0c\u5219\u751f\u6210\u5bf9\u5e94\u7684sql\u6761\u4ef6\uff08\u5982\uff1anot like\uff09\n            \n                queryWrapper.notLike(columnName, value);\n        } else if (rule.getCondition().equals(SysPermissionDataRuleModel.CONDITION_ISNULL)) {\n            // \u5047\u5982\u679c\u662f\u7a7a\u503c\u67e5\u8be2\u6761\u4ef6\uff0c\u5219\u751f\u6210\u5bf9\u5e94\u7684sql\u6761\u4ef6\uff08\u5982\uff1ais null\uff09\n            \n                queryWrapper.isNull(columnName);\n        } else if (rule.getCondition().equals(SysPermissionDataRuleModel.CONDITION_ISNOTNULL)) {\n            // \u5047\u5982\u679c\u662f\u975e\u7a7a\u503c\u67e5\u8be2\u6761\u4ef6\uff0c\u5219\u751f\u6210\u5bf9\u5e94\u7684sql\u6761\u4ef6\uff08\u5982\uff1ais not null\uff09\n            \n                queryWrapper.isNotNull(columnName);\n        } else if (rule.getCondition().equals(SysPermissionDataRuleModel.CONDITION_INLIST)) {\n            // \u5047\u5982\u679c\u662f\u5217\u8868\u503c\u67e5\u8be2\u6761\u4ef6\uff0c\u5219\u751f\u6210\u5bf9\u5e94\u7684sql\u6761\u4ef6\uff08\u5982\uff1ain list\uff09\n            \n                queryWrapper.in(columnName, value);\n        } else if (rule.getCondition().equals(SysPermissionDataRuleModel.CONDITION_NOTINLIST)) {\n            // \u5047\u5982\u679c\u662f\u975e\u5217\u8868\u503c\u67e5\u8be2\u6761\u4ef6\uff0c\u5219\u751f\u6210\u5bf9\u5e94\u7684sql\u6761\u4ef6\uff08\u5982\uff1anot in list\uff09\n            \n                queryWrapper.notIn(columnName, value);\n        } else if (rule.getCondition().equals(SysPermissionDataRuleModel.CONDITION_NOTEMPTY)) {\n            // \u5047\u5982\u679c\u662f\u975e\u7a7a\u503c\u67e5\u8be2\u6761\u4ef6\uff0c\u5219\u751f\u6210\u5bf9\u5e94\u7684sql\u6761\u4ef6\uff08\u5982\uff1ais not empty\uff09\n            \n                queryWrapper.isEmpty(columnName);\n        } else if (rule.getCondition().equals(SysPermissionDataRuleModel.CONDITION_NOTEMPTY)) {\n            // \u5047\u5982\u679c\u662f\u975e\u7a7a\u503c\u67e5\u8be2\u6761\u4ef6\uff0c\u5219\u751f\u6210\u5bf9\u5e94\u7684sql\u6761\u4ef6\uff08\u5982\uff1ais not empty\uff09\n            \n                queryWrapper.notEmpty(columnName);\n        } else if (rule.getCondition().equals(SysPermissionDataRuleModel.CONDITION_NOTNULL)) {\n            // \u5047\u5982\u679c\u662f\u975e\u7a7a\u503c\u67e5\u8be2\u6761\u4ef6\uff0c\u5219\u751f\u6210\u5bf9\u5e94\u7684sql\u6761\u4ef6\uff08\u5982\uff1ais not null\uff09\n            \n                queryWrapper.notNull(columnName);\n        } else if (rule.getCondition().equals(SysPermissionDataRuleModel.CONDITION_NOTNULL)) {\n            // \u5047\u5982\u679c\u662f\u975e\u7a7a\u503c\u67e5\u8be2\u6761\u4ef6\uff0c\u5219\u751f\u6210\u5bf9\u5e94\u7684sql\u6761\u4ef6\uff08\u5982\uff1ais not null\uff09\n            \n                queryWrapper.notNull(columnName);\n        } else if (rule.getCondition().equals(SysPermissionDataRuleModel.CONDITION_BETWEEN)) {\n            // \u5047\u5982\u679c\u662fbetween\u67e5\u8be2\u6761\u4ef6\uff0c\u5219\u751f\u6210\u5bf9\u5e94\u7684sql\u6761\u4ef6\uff08\u5982\uff1abetween\uff09\n            \n                String[] split = value.split(\",\");\n            queryWrapper.ge(columnName, split[0]).le(columnName, split[1]);\n        } else {\n                \n            throw new UnsupportedOperationException(\"\u4e0d\u652f\u6301\u8be5\u67e5\u8be2\u6761\u4ef6\uff01\");\n        }\n    }\n}\n",
        "package org.jeecg.common.system.query;\n\nimport java.util.Map;\n\npublic class QueryWrapper<T> extends com.baomidou.mybatisplus.core.conditions.query.QueryWrapper<T> {\n    private static final long serialVersionUID = 1L;\n\n    public void installMPlus(Object searchObj, Map<String, String> parameterMap) {}\n}\n",
        "package org.jeecg.common.system.query;\n\nimport com.baomidou.mybatisplus.core.conditions.Wrapper;\nimport com.baomidou.mybatisplus.core.toolkit.ReflectionKit;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.jeecg.common.util.oConvertUtils;\nimport org.springframework.lang.NonNull;\n\n@Slf4j\npublic class QueryWrapper<T> extends com.baomidou.mybatisplus.core.conditions.query.QueryWrapper<T>{\n\n    public static final String ORDER_BY = \"orderByClause\";\n\n    private Class<T> entityClass;\n\n    public QueryWrapper(@NonNull Class<T> entityClass) {\n        super(entityClass);\n        this.entityClass = entityClass;\n    }\n\n    /**\n     * \u5b57\u6bb5\u540d\u8f6c\u6362\u4e3a\u5c0f\u5199\uff0c\u6682\u65f6\u4e0d\u505a\u9a7c\u5cf0\u4e0e\u4e0b\u5212\u7ebf\u7684\u8f6c\u6362\n     */\n    public QueryWrapper<T> fieldAsLowerCase() {\n        // \u83b7\u53d6\u6240\u6709\u7684\u67e5\u8be2\u6761\u4ef6\n        String sqlSegment = getSqlSegment();\n\n        // \u5b57\u6bb5\u540d\u8f6c\u6362\u4e3a\u5c0f\u5199\n        Matcher m = Pattern.compile(\"([A-Z]+[^_])\").matcher(sqlSegment);\n        if (m.find()) {\n            return null;\n        }\n    }\n}\n    \n### Response:",
        "package org.jeecg.common.system.query;\n\nimport java.util.*;\n\n@Slf4j\npublic class QueryGenerator {\n    public final static String SQL_RULES_COLUMN = SymbolConstant.DOT + \"rules\";\n    private final static String BEGIN = SymbolConstant.LEFT_SQUARE_BRACKET;\n    private final static String END = SymbolConstant.RIGHT_SQUARE_BRACKET;\n    private final static String MULTI = SymbolConstant.MULTIPLICATION;\n    private final static String STAR = SymbolConstant.STAR;\n    private final static String COMMA = SymbolConstant.COMMA;\n    public final static String QUERY_COMMA_ESCAPE = \"\\\\,\";\n    private final static String NOT_EQUAL = SymbolConstant.NOT_EQUAL;\n    private final static String QUERY_SEPARATE_KEYWORD = BEGIN + \"query\" + END;\n    private final static String SUPER_QUERY_PARAMS = BEGIN + \"params\" + END;\n    private final static String SUPER_QUERY_MATCH_TYPE = BEGIN + \"matchType\" + END;\n    public final static String SQL_SQ = SymbolConstant.BACKSLASH + \"(\";\n    private final static String ORDER_COLUMN = SymbolConstant.DOT + \"orderColumn\";\n    private final static String ORDER_TYPE = SymbolConstant.DOT + \"orderType\";\n    private final static String ORDER_TYPE_ASC = OrderByEntity.ORDER_TYPE_ASC;\n    public final static String LIKE_MYSQL_SPECIAL_STRS = \"'%'|'^'|'&'|'\\\\+|'*'|'-'\";\n    public final static String YYYY_MM_DD = \"yyyy-MM-dd\";\n    public final static String TO_DATE = \"toDate\";\n    private final static ThreadLocal<SimpleDateFormat> LOCAL = new ThreadLocal<>();\n\n    /**\n     * \u521d\u59cb\u5316\u67e5\u8be2\u6761\u4ef6\n     */\n    public static <T extends QueryParam> QueryWrapper<T> installMplus(QueryWrapper<T> queryWrapper, T searchObj, Map<String, String> parameterMap) {\n        if (searchObj == null || !searchObj.isSearch() || CollectionUtil.isEmpty(parameterMap)) return queryWrapper;\n        try {\n            //\u6570\u636e\u6743\u9650\u5904\u7406\n            JeecgDataAutorUtils.installAuthority(queryWrapper);\n            //\u517c\u5bb9sql\u67e5\u8be2\u53c2\u6570\n            if (CollectionUtil.isNotEmpty(parameterMap) && parameterMap.containsKey(SUPER_QUERY_PARAMS)) {\n                superQueryParse(searchObj, queryWrapper, parameterMap);\n            }\n        } catch (Exception e) {\n            throw new JeecgBootException(\"\u6570\u636e\u6743\u9650\u5904\u7406\u5931\u8d25!\", e);\n        }\n        return queryWrapper;\n    }\n\n    /**\n     * \u517c\u5bb9SQL\u67e5\u8be2\u53c2\u6570\uff0c\u5c06\u53c2\u6570\u4e2dSQL\u5185\u6761\u4ef6\u89e3\u6790\u5e76\u7ec4\u88c5\u6210QueryWrapper\n     */\n    private static <T extends QueryParam> void superQueryParse(T searchObj, QueryWrapper<T> queryWrapper, Map<String, String> parameterMap) throws Exception {\n        //\u5982\u679c\u5b58\u5728\u53c2\u6570\u5219\u8986\u76d6\u5168\u5c40\u67e5\u8be2\u6761\u4ef6\n        String matchType = parameterMap.getOrDefault(SUPER_QUERY_MATCH_TYPE, MatchTypeEnum.AND.matchType());\n        Map<String, SysPermissionDataRuleModel> ruleMap = getRuleModelMap();\n        //\u83b7\u53d6\u6240\u6709\u7684\u53c2\u6570\n        Set<String> paramsKeySet = parameterMap.keySet();\n        for (String key : paramsKeySet) {\n            String value = parameterMap.get(key);\n            if (value == null || \"\".equals(value)) {\n                continue;\n            }\n            //\u9a8c\u8bc1\u662f\u5426\u4e3a\u89c4\u5219\u53c2\u6570\n            if (!key.startsWith(\"$\")) {\n                continue;\n            }\n            String filed = key.substring(1);\n            SysPermissionDataRuleModel ruleModel = new SysPermissionDataRuleModel();\n            ruleModel.setField(filed);\n            //\u5982\u679c\u662fLIKE\u6761\u4ef6\uff0c\u5219\u62fc\u89c4\u76d8\u8f6c\u6362\u4e3a\u6a21\u7cca\u5339\n            if (value.indexOf(\"%\") != -1) {\n                value = value.replaceAll(\"\\\\%\", \"\");\n            } else {\n                continue;\n            }\n            //\u5982\u679c\u662fbetween\u7c7b\u578b\uff0c\u5219\u5904\u7406\u6210between\u6761\u4ef6\n            String[] betweenArray = value.split(\"_between_\");\n            if (betweenArray != null && betweenArray.length == 2) {\n                ruleModel.setBetweenValueStart(Float.parseFloat(betweenArray[0]));\n                ruleModel.setBetweenValueEnd(Float.parseFloat(betweenArray[1]));\n            } else {\n                continue;\n            }\n            //\u5982\u679c\u662f\u65f6\u95f4\u7c7b\u578b\uff0c\u5219\u5904\u7406\u6210\u65e5\u671f\u65f6\u95f4\u6761\u4ef6\n            String[] dateArray = value.split(\"_date_\");\n            if (dateArray != null && dateArray.length == 2) {\n                ruleModel.setDateValueStart(dateArray[0]);\n                ruleModel.setDateValueEnd(dateArray[1]);\n            } else {\n                continue;\n            }\n        }\n    }\n}",
        "package org.jeecg.common.system.query;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.util.CollectionUtils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.sql.SQLIntegrityConstraintViolationException;\nimport java.text.MessageFormat;\nimport java.time.LocalDateTime;\nimport java.util.*;\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\n\nimport org.jeecg.common.api.vo.Result;\n\nimport org.jeecg.common.constant.CommonConstant;\n\nimport org.jeecg.common.system.base.service.JeecgService;\n\nimport org.jeecg.common.util.oConvertUtils;\n\n@Slf4j\npublic class QueryGenerator {\n    public final static String SQL_RULES_COLUMN;\n    private final static String BEGIN;\n    private final static String END;\n    private final static String MULTI;\n    private final static String STAR;\n    private final static String COMMA;\n    public final static String QUERY_COMMA_ESCAPE;\n    private final static String NOT_EQUAL;\n    private final static String QUERY_SEPARATE_KEYWORD;\n    private final static String SUPER_QUERY_PARAMS;\n    private final static String SUPER_QUERY_MATCH_TYPE;\n    public final static String SQL_SQ;\n    private final static String ORDER_COLUMN;\n    private final static String ORDER_TYPE;\n    private final static String ORDER_TYPE_ASC;\n    public final static String LIKE_MYSQL_SPECIAL_STRS;\n    public final static String YYYY_MM_DD;\n    public final static String TO_DATE;\n    private final static ThreadLocal<SimpleDateFormat> LOCAL;\n    private static SimpleDateFormat getTime();\n    public static QueryWrapper<T> initQueryWrapper(T searchObj, Map<String, String> parameterMap);\n    private static  installMplus(QueryWrapper<> queryWrapper, Object searchObj, Map<String, String> parameterMap);\n    private static  doIntervalQuery(QueryWrapper<> queryWrapper, Map<String, String> parameterMap, String type, String filedName, String columnName)throws ParseException;\n    private static  doMultiFieldsOrder(QueryWrapper<> queryWrapper, Map<String, String> parameterMap, Map<String, String> fieldColumnMap);\n    private static boolean allColumnExist(String columnStr, Set<String> allFields);\n    private static  doSuperQuery(QueryWrapper<> queryWrapper, Map<String, String> parameterMap, Map<String, String> fieldColumnMap);\n    public static QueryRuleEnum convert2Rule(Object value);\n    private static Object replaceValue(QueryRuleEnum rule, Object value);\n    private static  addQueryByRule(QueryWrapper<> queryWrapper, String name, String type, String value, QueryRuleEnum rule)throws ParseException;\n    private static Object parseByType(String value, String type, QueryRuleEnum rule)throws ParseException;\n    private static Date getDateQueryByRule(String value, QueryRuleEnum rule)throws ParseException;\n    public static  addEasyQuery(QueryWrapper<> queryWrapper, String name, QueryRuleEnum rule, Object value);\n    private static boolean judgedIsUselessField(String name);\n    public static Map<String, SysPermissionDataRuleModel> getRuleMap();\n    private static  addRuleToQueryWrapper(SysPermissionDataRuleModel dataRule, String name, Class, queryWrapper);\n    private void judgeEmptyAndAddNeedQuotes(Map<String, Object> ruleMap, Set<String> ruleSet) {\n        if (CollectionUtils.isEmpty(ruleMap)) return;\n\n        for (Map.Entry<String, Object> entry : ruleMap.entrySet()) {\n            String key = entry.getKey();\n\n            if (judgedIsUselessField(key))) continue;\n\n            addNeedQuotes(queryWrapper, key);\n\n        }\n\n    }\n\n}\n",
        "\n@Slf4j\n@Component\npublic class JeecgBootApplication extends SpringBootServletInitializer implements ApplicationContextAware, CommandLineRunner{\n\n    private static ApplicationContext applicationContext;\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\n        return builder.sources(JeecgBootApplication.class);\n    }\n    public static void main(String[] args) throws Exception {\n    \tSpringApplication app = new SpringApplication(JeecgBootApplication.class);\n    \tapp.addListeners(new ApplicationPidFileWriter());\n        ConfigurableApplicationContext context=app.run(args);\n        \n    }\n  public void run(String... args) {\n      // do something here\n      \n   }\n}",
        "package org.jeecg.common.system.query;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QueryGeneratorTest {\n    @Test\n    public void installMplusTest() {\n        try {\n            Class<?> clazz = <INSTALL_CLASS>;\n            Map<String, String> parameterMap = new HashMap<>();\n            parameterMap.put(\"test\", \"1\");\n            QueryWrapper<> queryWrapper = new QueryWrapper();\n            boolean result = QueryGenerator.installMplus(queryWrapper, clazz, parameterMap);\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n}\n    \n\n### Response: [/INSTALL_CLASS]\n    <FILL>\n",
        "package org.jeecg.common.system.query;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QueryGeneratorTest {\n    @Test\n    public void installMplusTest() {\n        assertEquals(<FILL>, installMplus(new QueryWrapper<>(), new SysPermissionDataRuleModel()));\n    }\n}\n    \n\n### Test Case: [/TITLE]  InstallAuthJdbc\n-----\npackage org.jeecg.common.system.query;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.*;\npublic class QueryGeneratorTest {\n    @Test\n    public void installAuthJdbcTest() {\n        <FILL>\n    }\n}\n    \n\n### Response:",
        "package org.jeecg.common.system.query;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport lombok.extern.slf4j.Slf4j;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport org.jeecg.common.system.vo.SysPermissionDataRuleModel;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.stereotype.Component;\n\n@Slf4j\n@Component\npublic class QueryGenerator {\n    public static final String SQL_RULES_COLUMN = \"rule_column\";\n    private static final String BEGIN = \"begin\";\n    private static final String END = \"end\";\n    private static final String MULTI = \"multi\";\n    private static final String STAR = \"*\";\n    private static final String COMMA = \",\";\n    public static final String QUERY_COMMA_ESCAPE = \"'\";\n    private static final String NOT_EQUAL = \"<>\";\n    private static final String QUERY_SEPARATE_KEYWORD = \"_\";\n    private static final String SUPER_QUERY_PARAMS = \"super_query_params_\";\n    private static final String SUPER_QUERY_MATCH_TYPE = \"super_query_match_type_\";\n    public static final String SQL_SQ = \"SQL_SQ\";\n    private static final String ORDER_COLUMN = \"orderByColumn\";\n    private static final String ORDER_TYPE = \"isAsc\";\n    private static final String ORDER_TYPE_ASC = \"ascend\";\n    public static final String LIKE_MYSQL_SPECIAL_STRS = \"`~!@#$%^&*()_+-=[]{}|;:',<>/?.\";\n    public static final String YYYY_MM_DD = \"%yyyy-mm-dd%\";\n    public static final String TO_DATE = \"to_date('%s','%yyyy-mm-dd hh24:mi:ss')\";\n    private static final ThreadLocal<SimpleDateFormat> LOCAL;\n    private static SimpleDateFormat getTime() {\n        if (LOCAL == null) {\n            LOCAL = new ThreadLocal();\n        }\n        return LOCAL.get();\n    }\n\n    public QueryWrapper installMplus(QueryWrapper queryWrapper, Object searchObj, Map<String, String> parameterMap) {\n        <FILL>\n    }\n}\n    \n\n### Response:"
    ]
}