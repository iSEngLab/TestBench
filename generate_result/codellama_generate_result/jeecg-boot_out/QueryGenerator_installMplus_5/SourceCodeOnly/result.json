{
    "project_name": "jeecg-boot",
    "file_name": "QueryGenerator.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/query/QueryGenerator.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.system.query",
    "docstring": "/**\n\t * \u7ec4\u88c5Mybatis Plus \u67e5\u8be2\u6761\u4ef6\n\t * <p>\u4f7f\u7528\u6b64\u65b9\u6cd5 \u9700\u8981\u6709\u5982\u4e0b\u51e0\u70b9\u6ce8\u610f:   \n\t * <br>1.\u4f7f\u7528QueryWrapper \u800c\u975eLambdaQueryWrapper;\n\t * <br>2.\u5b9e\u4f8b\u5316QueryWrapper\u65f6\u4e0d\u53ef\u5c06\u5b9e\u4f53\u4f20\u5165\u53c2\u6570   \n\t * <br>\u9519\u8bef\u793a\u4f8b:\u5982QueryWrapper<JeecgDemo> queryWrapper = new QueryWrapper<JeecgDemo>(jeecgDemo);\n\t * <br>\u6b63\u786e\u793a\u4f8b:QueryWrapper<JeecgDemo> queryWrapper = new QueryWrapper<JeecgDemo>();\n\t * <br>3.\u4e5f\u53ef\u4ee5\u4e0d\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u76f4\u63a5\u8c03\u7528 {@link #initQueryWrapper}\u76f4\u63a5\u83b7\u53d6\u5b9e\u4f8b\n\t */",
    "source_code": "\nprivate static void installMplus(QueryWrapper<?> queryWrapper,Object searchObj,Map<String, String[]> parameterMap) {\n\t\n\t/*\n\t * \u6ce8\u610f:\u6743\u9650\u67e5\u8be2\u7531\u524d\u7aef\u914d\u7f6e\u6570\u636e\u89c4\u5219 \u5f53\u4e00\u4e2a\u4eba\u6709\u591a\u4e2a\u6240\u5c5e\u90e8\u95e8\u65f6\u5019 \u53ef\u4ee5\u5728\u89c4\u5219\u914d\u7f6e\u5305\u542b\u6761\u4ef6 orgCode \u5305\u542b #{sys_org_code}\n\t\u4f46\u662f\u4e0d\u652f\u6301\u5728\u81ea\u5b9a\u4e49SQL\u4e2d\u5199orgCode in #{sys_org_code} \n\t\u5f53\u4e00\u4e2a\u4eba\u53ea\u6709\u4e00\u4e2a\u90e8\u95e8 \u5c31\u76f4\u63a5\u914d\u7f6e\u7b49\u4e8e\u6761\u4ef6: orgCode \u7b49\u4e8e #{sys_org_code} \u6216\u8005\u914d\u7f6e\u81ea\u5b9a\u4e49SQL: orgCode = '#{sys_org_code}'\n\t*/\n\t\n\t//\u533a\u95f4\u6761\u4ef6\u7ec4\u88c5 \u6a21\u7cca\u67e5\u8be2 \u9ad8\u7ea7\u67e5\u8be2\u7ec4\u88c5 \u7b80\u5355\u6392\u5e8f \u6743\u9650\u67e5\u8be2\n\tPropertyDescriptor[] origDescriptors = PropertyUtils.getPropertyDescriptors(searchObj);\n\tMap<String,SysPermissionDataRuleModel> ruleMap = getRuleMap();\n\t\n\t//\u6743\u9650\u89c4\u5219\u81ea\u5b9a\u4e49SQL\u8868\u8fbe\u5f0f\n\tfor (String c : ruleMap.keySet()) {\n\t\tif(oConvertUtils.isNotEmpty(c) && c.startsWith(SQL_RULES_COLUMN)){\n\t\t\tqueryWrapper.and(i ->i.apply(getSqlRuleValue(ruleMap.get(c).getRuleValue())));\n\t\t}\n\t}\n\t\n\tString name, type, column;\n\t// update-begin--Author:taoyan  Date:20200923 for\uff1aissues/1671 \u5982\u679c\u5b57\u6bb5\u52a0\u6ce8\u89e3\u4e86@TableField(exist = false),\u4e0d\u8d70DB\u67e5\u8be2-------\n\t//\u5b9a\u4e49\u5b9e\u4f53\u5b57\u6bb5\u548c\u6570\u636e\u5e93\u5b57\u6bb5\u540d\u79f0\u7684\u6620\u5c04 \u9ad8\u7ea7\u67e5\u8be2\u4e2d \u53ea\u80fd\u83b7\u53d6\u5b9e\u4f53\u5b57\u6bb5 \u5982\u679c\u8bbe\u7f6eTableField\u6ce8\u89e3 \u90a3\u4e48\u67e5\u8be2\u6761\u4ef6\u4f1a\u51fa\u95ee\u9898\n\tMap<String,String> fieldColumnMap = new HashMap<>(5);\n\tfor (int i = 0; i < origDescriptors.length; i++) {\n\t\t//aliasName = origDescriptors[i].getName();  mybatis  \u4e0d\u5b58\u5728\u5b9e\u4f53\u5c5e\u6027 \u4e0d\u7528\u5904\u7406\u522b\u540d\u7684\u60c5\u51b5\n\t\tname = origDescriptors[i].getName();\n\t\ttype = origDescriptors[i].getPropertyType().toString();\n\t\ttry {\n\t\t\tif (judgedIsUselessField(name)|| !PropertyUtils.isReadable(searchObj, name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tObject value = PropertyUtils.getSimpleProperty(searchObj, name);\n\t\t\tcolumn = ReflectHelper.getTableFieldName(searchObj.getClass(), name);\n\t\t\tif(column==null){\n\t\t\t\t//column\u4e3anull\u53ea\u6709\u4e00\u79cd\u60c5\u51b5 \u90a3\u5c31\u662f \u6dfb\u52a0\u4e86\u6ce8\u89e3@TableField(exist = false) \u540e\u7eed\u90fd\u4e0d\u7528\u5904\u7406\u4e86\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfieldColumnMap.put(name,column);\n\t\t\t//\u6570\u636e\u6743\u9650\u67e5\u8be2\n\t\t\tif(ruleMap.containsKey(name)) {\n\t\t\t\taddRuleToQueryWrapper(ruleMap.get(name), column, origDescriptors[i].getPropertyType(), queryWrapper);\n\t\t\t}\n\t\t\t//\u533a\u95f4\u67e5\u8be2\n\t\t\tdoIntervalQuery(queryWrapper, parameterMap, type, name, column);\n\t\t\t//\u5224\u65ad\u5355\u503c  \u53c2\u6570\u5e26\u4e0d\u540c\u6807\u8bc6\u5b57\u7b26\u4e32 \u8d70\u4e0d\u540c\u7684\u67e5\u8be2\n\t\t\t//TODO \u8fd9\u79cd\u524d\u540e\u5e26\u9017\u53f7\u7684\u652f\u6301\u5206\u5272\u540e\u6a21\u7cca\u67e5\u8be2(\u591a\u9009\u5b57\u6bb5\u67e5\u8be2\u751f\u6548) \u793a\u4f8b\uff1a,1,3,\n\t\t\tif (null != value && value.toString().startsWith(COMMA) && value.toString().endsWith(COMMA)) {\n\t\t\t\tString multiLikeval = value.toString().replace(\",,\", COMMA);\n\t\t\t\tString[] vals = multiLikeval.substring(1, multiLikeval.length()).split(COMMA);\n\t\t\t\tfinal String field = oConvertUtils.camelToUnderline(column);\n\t\t\t\tif(vals.length>1) {\n\t\t\t\t\tqueryWrapper.and(j -> {\n                           log.info(\"---\u67e5\u8be2\u8fc7\u6ee4\u5668\uff0cQuery\u89c4\u5219---field:{}, rule:{}, value:{}\", field, \"like\", vals[0]);\n\t\t\t\t\t\tj = j.like(field,vals[0]);\n\t\t\t\t\t\tfor (int k=1;k<vals.length;k++) {\n\t\t\t\t\t\t\tj = j.or().like(field,vals[k]);\n\t\t\t\t\t\t\tlog.info(\"---\u67e5\u8be2\u8fc7\u6ee4\u5668\uff0cQuery\u89c4\u5219 .or()---field:{}, rule:{}, value:{}\", field, \"like\", vals[k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//return j;\n\t\t\t\t\t});\n\t\t\t\t}else {\n\t\t\t\t\tlog.info(\"---\u67e5\u8be2\u8fc7\u6ee4\u5668\uff0cQuery\u89c4\u5219---field:{}, rule:{}, value:{}\", field, \"like\", vals[0]);\n\t\t\t\t\tqueryWrapper.and(j -> j.like(field,vals[0]));\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\t//\u6839\u636e\u53c2\u6570\u503c\u5e26\u4ec0\u4e48\u5173\u952e\u5b57\u7b26\u4e32\u5224\u65ad\u8d70\u4ec0\u4e48\u7c7b\u578b\u7684\u67e5\u8be2\n\t\t\t\tQueryRuleEnum rule = convert2Rule(value);\n\t\t\t\tvalue = replaceValue(rule,value);\n\t\t\t\t// add -begin \u6dfb\u52a0\u5224\u65ad\u4e3a\u5b57\u7b26\u4e32\u65f6\u8bbe\u4e3a\u5168\u6a21\u7cca\u67e5\u8be2\n\t\t\t\t//if( (rule==null || QueryRuleEnum.EQ.equals(rule)) && \"class java.lang.String\".equals(type)) {\n\t\t\t\t\t// \u53ef\u4ee5\u8bbe\u7f6e\u5de6\u53f3\u6a21\u7cca\u6216\u5168\u6a21\u7cca\uff0c\u56e0\u4eba\u800c\u5f02\n\t\t\t\t\t//rule = QueryRuleEnum.LIKE;\n\t\t\t\t//}\n\t\t\t\t// add -end \u6dfb\u52a0\u5224\u65ad\u4e3a\u5b57\u7b26\u4e32\u65f6\u8bbe\u4e3a\u5168\u6a21\u7cca\u67e5\u8be2\n\t\t\t\taddEasyQuery(queryWrapper, column, rule, value);\n\t\t\t}\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\t}\n\t// \u6392\u5e8f\u903b\u8f91 \u5904\u7406\n\tdoMultiFieldsOrder(queryWrapper, parameterMap, fieldColumnMap);\n\t\t\t\n\t//\u9ad8\u7ea7\u67e5\u8be2\n\tdoSuperQuery(queryWrapper, parameterMap, fieldColumnMap);\n\t// update-end--Author:taoyan  Date:20200923 for\uff1aissues/1671 \u5982\u679c\u5b57\u6bb5\u52a0\u6ce8\u89e3\u4e86@TableField(exist = false),\u4e0d\u8d70DB\u67e5\u8be2-------\n\t\n}\n",
    "class_name": "QueryGenerator",
    "method_name": "installMplus",
    "arguments": [
        "QueryWrapper<> queryWrapper",
        "Object searchObj",
        "Map<String, String> parameterMap"
    ],
    "generate_test": [
        "package org.jeecg.common.system.query;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class QueryGeneratorTest {\n    @Test\n    public void installMplusTest() {\n        String[] input = {\"1\",\"2\"};\n        String output = \"1,2\";\n        \n        assertEquals(output, QueryGenerator.installMplus(input));\n    }\n}",
        "@Test\npublic void installMplusTest() {\n\t// Arrange\n\tQueryWrapper<?> queryWrapper = new QueryWrapper<>();\n\tMap<String, String> parameterMap = new HashMap<>();\n\tparameterMap.put(\"field1\", \"value1\");\n\tparameterMap.put(\"field2\", \"value2\");\n\t\n\t// Act\n\tinstallMplus(queryWrapper, parameterMap);\n\t\n\t// Assert\n\tassertEquals(\"SELECT * FROM table_name WHERE field1 = 'value1' AND field2 = 'value2'\", queryWrapper.getSqlSegment());\n}",
        "package org.jeecg.common.system.query;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QueryGeneratorTest {\n    @Test\n    public void installMplusTest() {\n        // Arrange\n        QueryGenerator queryGenerator = new QueryGenerator();\n        \n        // Act\n        queryGenerator.installMplus();\n        \n        // Assert\n        assertTrue(queryGenerator.isInstalled());\n    }\n}",
        "@Test\npublic void installMplusTest() {\n\t// Arrange\n\tQueryWrapper<?> queryWrapper = new QueryWrapper<>();\n\tString parameterMap = \"{}\";\n\n\t// Act\n\tinstallMplus(queryWrapper, parameterMap);\n\n\t// Assert\n\tassertEquals(\"SELECT * FROM table\", queryWrapper.getSql());\n}",
        "The given code is a method named `installMplus` that takes in four parameters:\n\n* `queryWrapper`: A `QueryWrapper` object, which appears to be used to build and execute SQL queries.\n* `parameterMap`: A map of parameter names to values, which appears to be used as input for the query.\n* `fieldColumnMap`: A map of field names to column names, which appears to be used to specify the mapping between fields in the data model and columns in the database table.\n* `defaultOrderByField`: The name of a default order-by field, which appears to be used as a fallback if no explicit ordering is specified in the query.\n\nThe method starts by initializing two local variables: `sql` (which will contain the generated SQL query) and `fields` (which will contain a list of fields that are referenced in the query). It then iterates over each field in the `parameterMap`, and for each one, it extracts its corresponding value from the map.\n\nNext, the method calls a private helper method named `buildSql` to construct the SQL query. This method takes in several parameters, including the name of the table that the query is being executed against, the list of fields that are being queried, and the name of a default order-by field. It appears to use these parameters to generate a SQL statement that selects all rows from the specified table where the values of the fields in the `parameterMap` match the corresponding column values in the database.\n\nFinally, the method returns the generated SQL query as a string.\n\nOverall, this code appears to be used to build and execute a SQL query based on input parameters provided by the user. It uses a variety of helper methods to generate the query, but ultimately returns the result as a string that can be executed using a database API such as JDBC or Hibernate.",
        "package org.jeecg.common.system.query;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QueryGeneratorTest {\n    @Test\n    public void installMplusTest() {\n        QueryWrapper<Object> queryWrapper = new QueryWrapper<>();\n        Map<String, Object> parameterMap = new HashMap<>();\n        List<String> orderByFields = new ArrayList<>();\n        \n        // Set up some mock data\n        parameterMap.put(\"name\", \"John\");\n        parameterMap.put(\"age\", 25);\n        orderByFields.add(\"name\");\n        \n        // Call the method with our mock data\n        List<Object> result = QueryGenerator.installMplus(queryWrapper, parameterMap, orderByFields);\n        \n        // Verify that we got the expected output\n        assertEquals(1, result.size());\n        Object obj = result.get(0);\n        assertTrue(obj instanceof Map);\n        Map<String, Object> map = (Map<String, Object>) obj;\n        assertEquals(\"John\", map.get(\"name\"));\n        assertEquals(25, map.get(\"age\"));\n    }\n}",
        "package org.jeecg.common.system.query;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QueryGeneratorTest {\n    @Test\n    public void installMplusTest() {\n        // Test with null parameter\n        assertThrows(NullPointerException.class, () -> installMplus(null));\n        \n        // Test with valid parameters\n        String[] fields = {\"field1\", \"field2\"};\n        QueryRuleEnum rule = QueryRuleEnum.EQ;\n        String value = \"value\";\n        assertDoesNotThrow(() -> installMplus(fields, rule, value));\n    }\n}",
        "// Create a new instance of the QueryWrapper<String> class\nQueryWrapper<String> query = new QueryWrapper<>();\n\n// Set the target entity for the query\nquery.setEntity(Employee.class);\n\n// Define the query parameter and its corresponding value\nMap<String, Object> parameters = new HashMap<>();\nparameters.put(\"name\", \"John Doe\");\n\n// Call the installMplus method to generate a new JPA query based on the provided parameter\nQueryGenerator.installMplus(query, \"SELECT * FROM Employee WHERE name = :name\", parameters);",
        "@Test\npublic void installMplusTest() {\n    // Arrange\n    QueryWrapper queryWrapper = new QueryWrapper();\n    String parameterMapString = \"{\\\"order\\\":\\\"create_time\\\", \\\"pageNo\\\":1, \\\"pageSize\\\":20}\";\n    Map<String, Object> parameterMap = (new ObjectMapper()).readValue(parameterMapString, new TypeReference<HashMap<String, Object>>(){});\n    \n    // Act\n    QueryGenerator.installMplus(queryWrapper, parameterMap);\n    \n    // Assert\n    assertEquals(\"order_by\", queryWrapper.getOrderBy());\n    assertEquals(\"create_time\", queryWrapper.getOrderColumn());\n    assertEquals(1, queryWrapper.getPageNo());\n    assertEquals(20, queryWrapper.getPageSize());\n}",
        "\npackage org.jeecg.common.system.query;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QueryGeneratorTest {\n    @Test\n    public void installMplusTest() {\n        QueryWrapper<Object> queryWrapper = new QueryWrapper<>();\n        queryWrapper.eq(\"name\", \"\u5f20\u4e09\");\n        assertEquals(queryWrapper.getSqlSegment(), \"SELECT * FROM table WHERE name=?\");\n    }\n}"
    ]
}