{
    "project_name": "jeecg-boot",
    "file_name": "SensitiveInfoUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/desensitization/util/SensitiveInfoUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.desensitization.util",
    "docstring": "/**\n     * \u5904\u7406\u6570\u636e \u83b7\u53d6\u52a0\u5bc6\u540e\u7684\u6570\u636e \u6216\u662f\u683c\u5f0f\u5316\u540e\u7684\u6570\u636e\n     * @param data \u5b57\u7b26\u4e32\n     * @param sensitiveEnum \u7c7b\u578b\n     * @return \u5904\u7406\u540e\u7684\u5b57\u7b26\u4e32\n     */",
    "source_code": "\npublic static String getEncodeData(String data, SensitiveEnum sensitiveEnum){\n    String result;\n    switch (sensitiveEnum){\n        case ENCODE:\n            try {\n                result = AesEncryptUtil.encrypt(data);\n            } catch (Exception exception) {\n                log.error(\"\u6570\u636e\u52a0\u5bc6\u9519\u8bef\", exception.getMessage());\n                result = data;\n            }\n            break;\n        case CHINESE_NAME:\n            result = chineseName(data);\n            break;\n        case ID_CARD:\n            result = idCardNum(data);\n            break;\n        case FIXED_PHONE:\n            result = fixedPhone(data);\n            break;\n        case MOBILE_PHONE:\n            result = mobilePhone(data);\n            break;\n        case ADDRESS:\n            result = address(data, 3);\n            break;\n        case EMAIL:\n            result = email(data);\n            break;\n        case BANK_CARD:\n            result = bankCard(data);\n            break;\n        case CNAPS_CODE:\n            result = cnapsCode(data);\n            break;\n        default:\n            result = data;\n    }\n    return result;\n}\n",
    "class_name": "SensitiveInfoUtil",
    "method_name": "getEncodeData",
    "arguments": [
        "String data",
        "SensitiveEnum sensitiveEnum"
    ],
    "generate_test": [
        "\n@Test\npublic void getEncodeDataTest() {\n    String data = \"Hello World\";\n    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n    String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n    assertEquals(\"U2FsdGVkX18zfA==\", result);\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        String data = \"123456\";\n        SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n        String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n        assertEquals(\"The encoded data does not match the expected value\", \"d0c31f8425\", result);\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        String data = \"hello world\";\n        SensitiveEnum sensitiveEnum = SensitiveEnum.CHINESE_NAME;\n        \n        // Call the method under test\n        String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n        \n        // Verify that the result is correct\n        assertEquals(\"*******\", result);\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        String data = \"123456\";\n        SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n        String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n        assertEquals(\"123456\", result);\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.Test;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        // Arrange\n        String data = \"testdata\";\n        SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n\n        // Act\n        String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n\n        // Assert\n        assertEquals(\"Encrypted data should be returned\", \"encrypted_testdata\", result);\n    }\n}",
        "@Test\npublic void getEncodeDataTest() {\n    String data = \"test\";\n    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n    String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n    assertEquals(\"AesEncryptUtil.encrypt(data)\", result);\n}",
        "\npackage org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        // Test case 1: Verify that the method returns null if the input data is null\n        String result = SensitiveInfoUtil.getEncodeData(null, SensitiveEnum.ENCODE);\n        assertNull(result);\n\n        // Test case 2: Verify that the method returns an encrypted string if the input data is not null and the sensitive enum is ENCODE\n        String testString = \"test\";\n        result = SensitiveInfoUtil.getEncodeData(testString, SensitiveEnum.ENCODE);\n        assertNotNull(result);\n        assertEquals(\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\", result);\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        // Test for different sensitive enums\n        assertEquals(SensitiveEnum.CHINESE_NAME, getEncodeData(\"\u5f20\u4e09\", SensitiveEnum.CHINESE_NAME));\n        assertEquals(SensitiveEnum.ID_CARD, getEncodeData(\"123456789012345678\", SensitiveEnum.ID_CARD));\n        assertEquals(SensitiveEnum.FIXED_PHONE, getEncodeData(\"0571-8888888\", SensitiveEnum.FIXED_PHONE));\n        assertEquals(SensitiveEnum.MOBILE_PHONE, getEncodeData(\"13800000000\", SensitiveEnum.MOBILE_PHONE));\n        assertEquals(SensitiveEnum.ADDRESS, getEncodeData(\"\u4e2d\u56fd\u4e0a\u6d77\u6d66\u4e1c\u65b0\u533a\u9646\u5bb6\u5634\u8def12\u53f7506\", SensitiveEnum.ADDRESS));\n        assertEquals(SensitiveEnum.EMAIL, getEncodeData(\"abc@example.com\", SensitiveEnum.EMAIL));\n        assertEquals(SensitiveEnum.BANK_CARD, getEncodeData(\"123456789012345678\", SensitiveEnum.BANK_CARD));\n        assertEquals(SensitiveEnum.CNAPS_CODE, getEncodeData(\"123456789012345678\", SensitiveEnum.CNAPS_CODE));\n    }\n}",
        "The provided Java code is for a utility class that provides methods to handle sensitive data, such as personal information, in a specified way. The `getEncodeData` method takes two arguments: a string representing the data and an enum value indicating which type of sensitive data it is. The method returns a string with the encoded data.\n\nThe JUnit test case provided is for testing the `getEncodeData` method. To complete the test, you will need to provide values for the input parameters that trigger the different branches of the switch statement in the `getEncodeData` method.\n\nHere are some examples of input values that could be used:\n\n* A string representing a person's name, with the appropriate value for the `sensitiveEnum` parameter (e.g., `SensitiveEnum.CHINESE_NAME`).\n* An ID number, with the appropriate value for the `sensitiveEnum` parameter (e.g., `SensitiveEnum.ID_CARD`).\n* A phone number, with the appropriate value for the `sensitiveEnum` parameter (e.g., `SensitiveEnum.FIXED_PHONE`).\n* An email address, with the appropriate value for the `sensitiveEnum` parameter (e.g., `SensitiveEnum.EMAIL`).\n\nYou could also provide your own examples of input values to test different scenarios and edge cases in the `getEncodeData` method.",
        "@Test\npublic void getEncodeDataTest() {\n    // Arrange\n    String data = \"123456\";\n    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n\n    // Act\n    String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n\n    // Assert\n    assertEquals(\"123456\", result);\n}"
    ]
}