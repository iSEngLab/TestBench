{
    "project_name": "jeecg-boot",
    "file_name": "SensitiveInfoUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/desensitization/util/SensitiveInfoUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.desensitization.util",
    "docstring": "/**\n     * \u5904\u7406\u6570\u636e \u83b7\u53d6\u52a0\u5bc6\u540e\u7684\u6570\u636e \u6216\u662f\u683c\u5f0f\u5316\u540e\u7684\u6570\u636e\n     * @param data \u5b57\u7b26\u4e32\n     * @param sensitiveEnum \u7c7b\u578b\n     * @return \u5904\u7406\u540e\u7684\u5b57\u7b26\u4e32\n     */",
    "source_code": "\npublic static String getEncodeData(String data, SensitiveEnum sensitiveEnum){\n    String result;\n    switch (sensitiveEnum){\n        case ENCODE:\n            try {\n                result = AesEncryptUtil.encrypt(data);\n            } catch (Exception exception) {\n                log.error(\"\u6570\u636e\u52a0\u5bc6\u9519\u8bef\", exception.getMessage());\n                result = data;\n            }\n            break;\n        case CHINESE_NAME:\n            result = chineseName(data);\n            break;\n        case ID_CARD:\n            result = idCardNum(data);\n            break;\n        case FIXED_PHONE:\n            result = fixedPhone(data);\n            break;\n        case MOBILE_PHONE:\n            result = mobilePhone(data);\n            break;\n        case ADDRESS:\n            result = address(data, 3);\n            break;\n        case EMAIL:\n            result = email(data);\n            break;\n        case BANK_CARD:\n            result = bankCard(data);\n            break;\n        case CNAPS_CODE:\n            result = cnapsCode(data);\n            break;\n        default:\n            result = data;\n    }\n    return result;\n}\n",
    "class_name": "SensitiveInfoUtil",
    "method_name": "getEncodeData",
    "arguments": [
        "String data",
        "SensitiveEnum sensitiveEnum"
    ],
    "generate_test": [
        "package org.jeecg.common.desensitization.util;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        String data = \"test_data\";\n        SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n        \n        try {\n            AesEncryptUtil.encrypt(data);\n        } catch (Exception exception) {\n            fail(\"\u6570\u636e\u52a0\u5bc6\u9519\u8bef\uff1a\" + exception.getMessage());\n        }\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        // Test case 1: \"ENCODE\" enum value\n        String data = \"Hello World\";\n        SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n        String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n        assertNotNull(result);\n        // Check that the result is not equal to the original data\n        assertNotEquals(data, result);\n        \n        // Test case 2: \"CHINESE_NAME\" enum value\n        data = \"\u5f20\u4e09\";\n        sensitiveEnum = SensitiveEnum.CHINESE_NAME;\n        result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n        assertNotNull(result);\n        // Check that the result is not equal to the original data\n        assertNotEquals(data, result);\n        \n        // Test case 3: \"ID_CARD\" enum value\n        data = \"1234567890\";\n        sensitiveEnum = SensitiveEnum.ID_CARD;\n        result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n        assertNotNull(result);\n        // Check that the result is not equal to the original data\n        assertNotEquals(data, result);\n        \n        // Test case 4: \"FIXED_PHONE\" enum value\n        data = \"13800138000\";\n        sensitiveEnum = SensitiveEnum.FIXED_PHONE;\n        result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n        assertNotNull(result);\n        // Check that the result is not equal to the original data\n        assertNotEquals(data, result);\n        \n        // Test case 5: \"MOBILE_PHONE\" enum value\n        data = \"13800138000\";\n        sensitiveEnum = SensitiveEnum.MOBILE_PHONE;\n        result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n        assertNotNull(result);\n        // Check that the result is not equal to the original data\n        assertNotEquals(data, result);\n        \n        // Test case 6: \"ADDRESS\" enum value\n        data = \"\u5317\u4eac\u5e02\u671d\u9633\u533a\u961c\u901a\u4e1c\u5927\u8857\";\n        sensitiveEnum = SensitiveEnum.ADDRESS;\n        result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n        assertNotNull(result);\n        // Check that the result is not equal to the original data\n        assertNotEquals(data, result);\n        \n        // Test case 7: \"EMAIL\" enum value\n        data = \"example@email.com\";\n        sensitiveEnum = SensitiveEnum.EMAIL;\n        result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n        assertNotNull(result);\n        // Check that the result is not equal to the original data\n        assertNotEquals(data, result);\n        \n        // Test case 8: \"BANK_CARD\" enum value\n        data = \"1234567890\";\n        sensitiveEnum = SensitiveEnum.BANK_CARD;\n        result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n        assertNotNull(result);\n        // Check that the result is not equal to the original data\n        assertNotEquals(data, result);\n        \n        // Test case 9: \"CNAPS_CODE\" enum value\n        data = \"1234567890\";\n        sensitiveEnum = SensitiveEnum.CNAPS_CODE;\n        result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n        assertNotNull(result);\n        // Check that the result is not equal to the original data\n        assertNotEquals(data, result);\n    }\n}",
        "\npackage org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        String data = \"testdata\";\n        SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n        \n        String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n        assertEquals(\"The encoded data is not correct\", \"encoded_data\", result);\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        // Test case 1: Normal input\n        String data = \"test\";\n        SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n        String expectedResult = \"J4DH0nXuMN9QVZK8e2v73A==\";\n        assertEquals(expectedResult, SensitiveInfoUtil.getEncodeData(data, sensitiveEnum));\n\n        // Test case 2: Empty input\n        data = \"\";\n        sensitiveEnum = SensitiveEnum.ENCODE;\n        expectedResult = \"\";\n        assertEquals(expectedResult, SensitiveInfoUtil.getEncodeData(data, sensitiveEnum));\n\n        // Test case 3: Null input\n        data = null;\n        sensitiveEnum = SensitiveEnum.ENCODE;\n        expectedResult = null;\n        assertEquals(expectedResult, SensitiveInfoUtil.getEncodeData(data, sensitiveEnum));\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        String data = \"1234567890\";\n        assertEquals(\"1234567890\", SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.NONE));\n        \n        data = \"abcdefghijklmnopqrstuvwxyz\";\n        assertEquals(\"abcdefghijklmnopqrstuvwxyz\", SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.NONE));\n        \n        data = \"1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        assertEquals(\"1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\", SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.NONE));\n        \n        data = \"!@#$%^&*()_+-=[]{}|;':\\\"<>,./?\";\n        assertEquals(\"!@#$%^&*()_+-=[]{}|;':\\\"<>,./?\", SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.NONE));\n        \n        data = \"\u4e2d\u6587\u6570\u636e\";\n        assertEquals(\"\u4e2d\u6587\u6570\u636e\", SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.CHINESE_NAME));\n        \n        data = \"\u4e2d\u56fd\u4eba\u7684\u59d3\u540d\uff1a\u674e\u5c0f\u9f99\";\n        assertEquals(\"\u4e2d\u56fd\u4eba\u7684\u59d3\u540d\uff1a***\", SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.ID_CARD));\n        \n        data = \"13800138000\";\n        assertEquals(\"138*****000\", SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.FIXED_PHONE));\n        \n        data = \"13800138000\";\n        assertEquals(\"138*****000\", SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.MOBILE_PHONE));\n        \n        data = \"\u4e2d\u56fd\u4eba\u7684\u4f4f\u5740\uff1a\u5317\u4eac\u5e02\u6d77\u6dc0\u533a\u4e2d\u5173\u675128\u53f7\u9662\";\n        assertEquals(\"\u4e2d\u56fd\u4eba\u7684\u4f4f\u5740\uff1a***\", SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.ADDRESS));\n        \n        data = \"\u4e2d\u56fd\u4eba\u7684\u90ae\u7bb1\u5730\u5740\uff1aexample@163.com\";\n        assertEquals(\"\u4e2d\u56fd\u4eba\u7684\u90ae\u7bb1\u5730\u5740\uff1a***\", SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.EMAIL));\n        \n        data = \"\u4e2d\u56fd\u4eba\u7684\u94f6\u884c\u5361\u53f7\uff1a622202************1234\";\n        assertEquals(\"\u4e2d\u56fd\u4eba\u7684\u94f6\u884c\u5361\u53f7\uff1a***\", SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.BANK_CARD));\n        \n        data = \"\u4e2d\u56fd\u4eba\u7684\u793e\u4f1a\u4fdd\u9669\u53f7\u7801\uff1a1234567890**********\";\n        assertEquals(\"\u4e2d\u56fd\u4eba\u7684\u793e\u4f1a\u4fdd\u9669\u53f7\u7801\uff1a***\", SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.CNAPS_CODE));\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        assertEquals(\"123456\", SensitiveInfoUtil.getEncodeData(\"123456\", SensitiveEnum.ENCODE));\n        assertEquals(\"test@example.com\", SensitiveInfoUtil.getEncodeData(\"test@example.com\", SensitiveEnum.EMAIL));\n        assertEquals(\"(555) 123-4567\", SensitiveInfoUtil.getEncodeData(\"(555) 123-4567\", SensitiveEnum.FIXED_PHONE));\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        // Test for encoding data\n        String data = \"This is a sensitive piece of information\";\n        String result = SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.ENCODE);\n        assertEquals(\"Expected encoded data\", \"Encoded data\", result);\n        \n        // Test for Chinese name\n        data = \"\u4e2d\u56fd\u4eba\";\n        result = SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.CHINESE_NAME);\n        assertEquals(\"Expected Chinese name\", \"Zh\u014dng Gu\u00f3 R\u00e9n\", result);\n        \n        // Test for ID card number\n        data = \"1234567890\";\n        result = SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.ID_CARD);\n        assertEquals(\"Expected ID card number\", \"123456******\", result);\n        \n        // Test for fixed phone number\n        data = \"010-12345678\";\n        result = SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.FIXED_PHONE);\n        assertEquals(\"Expected fixed phone number\", \"010-123******\", result);\n        \n        // Test for mobile phone number\n        data = \"18612345678\";\n        result = SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.MOBILE_PHONE);\n        assertEquals(\"Expected mobile phone number\", \"186******\", result);\n        \n        // Test for address\n        data = \"\u5317\u4eac\u5e02\u671d\u9633\u533a\u5efa\u56fd\u8def\";\n        result = SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.ADDRESS);\n        assertEquals(\"Expected address\", \"\u5317\u4eac\u5e02*************\", result);\n        \n        // Test for email\n        data = \"example@email.com\";\n        result = SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.EMAIL);\n        assertEquals(\"Expected email\", \"e************m\", result);\n        \n        // Test for bank card number\n        data = \"1234567890\";\n        result = SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.BANK_CARD);\n        assertEquals(\"Expected bank card number\", \"******7890\", result);\n        \n        // Test for CNAPS code\n        data = \"123456\";\n        result = SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.CNAPS_CODE);\n        assertEquals(\"Expected CNAPS code\", \"******\", result);\n    }\n}",
        "@Test\npublic void getEncodeDataTest() {\n    String data = \"Hello World!\";\n    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n    String expectedResult = AesEncryptUtil.encrypt(data);\n    assertEquals(expectedResult, SensitiveInfoUtil.getEncodeData(data, sensitiveEnum));\n}",
        "package org.jeecg.common.desensitization.util;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        String data = \"test\";\n        SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n        String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n        assertEquals(\"result should be equal to encrypted data\", result, AesEncryptUtil.encrypt(data));\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        assertEquals(SensitiveInfoUtil.getEncodeData(\"test\", SensitiveEnum.ENCODE), \"encrypted data\");\n    }\n}\n\nIn the above test case, we have tested the `getEncodeData` method of the `SensitiveInfoUtil` class with a few different inputs and expected outputs. We have also used the `@Test` annotation to specify that this is an actual test case. The `@Assertions` class provides various methods for testing the results of a test, such as `assertEquals`, which checks whether two values are equal.\n\nIn the above test case, we have tested the `getEncodeData` method with input \"test\" and expected output \"encrypted data\". We have used the `assertEquals` method to check whether the actual output is equal to the expected output. If the actual output does not match the expected output, the test will fail and an error message will be displayed indicating that the test has failed."
    ]
}