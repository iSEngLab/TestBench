{
    "project_name": "jeecg-boot",
    "file_name": "SensitiveInfoUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/desensitization/util/SensitiveInfoUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.desensitization.util",
    "docstring": "/**\n     * \u5904\u7406\u5d4c\u5957\u5bf9\u8c61\n     * @param obj \u65b9\u6cd5\u8fd4\u56de\u503c\n     * @param entity \u5b9e\u4f53class\n     * @param isEncode \u662f\u5426\u52a0\u5bc6\uff08true: \u52a0\u5bc6\u64cd\u4f5c / false:\u89e3\u5bc6\u64cd\u4f5c\uff09\n     * @throws IllegalAccessException\n     */",
    "source_code": "\npublic static void handleNestedObject(Object obj, Class entity, boolean isEncode) throws IllegalAccessException {\n    Field[] fields = obj.getClass().getDeclaredFields();\n    for (Field field : fields) {\n        if(field.getType().isPrimitive()){\n            continue;\n        }\n        if(field.getType().equals(entity)){\n            // \u5bf9\u8c61\u91cc\u9762\u662f\u5b9e\u4f53\n            field.setAccessible(true);\n            Object nestedObject = field.get(obj);\n            handlerObject(nestedObject, isEncode);\n            break;\n        }else{\n            // \u5bf9\u8c61\u91cc\u9762\u662fList<\u5b9e\u4f53>\n            if(field.getGenericType() instanceof ParameterizedType){\n                ParameterizedType pt = (ParameterizedType)field.getGenericType();\n                if(pt.getRawType().equals(List.class)){\n                    if(pt.getActualTypeArguments()[0].equals(entity)){\n                        field.setAccessible(true);\n                        Object nestedObject = field.get(obj);\n                        handleList(nestedObject, entity, isEncode);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "class_name": "SensitiveInfoUtil",
    "method_name": "handleNestedObject",
    "arguments": [
        "Object obj",
        "Class entity",
        "boolean isEncode"
    ],
    "generate_test": [
        "package com.alibaba.fastjson.serializer;\n\nimport java.lang.reflect.Type;\n\n/**\n * @Description \u654f\u611f\u4fe1\u606f\u63a9\u7801\u5904\u7406\u7c7b\n */\npublic class SensitiveInfoSerializer extends JSONSerializable {\n    private static final String regex = \"<REGEX>\";\n    private Type fieldType;\n    private Object object;\n    \n    public SensitiveInfoSerializer(String string) {\n        this.fieldType = fieldType;\n        this.object = object;\n    }\n\n    @Override\n    public void write(JSONSerializer serializer, Object object, Type fieldType, int features) {\n        String valueStr = JSONUtil.toJson(object).toString();\n        // \u5c06value\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u654f\u611f\u4fe1\u606f\u7c7b\u578b\n        if (fieldType == <TYPE>) {\n            // \u5904\u7406<TYPE>\u7684\u503c\uff0c\u53ef\u4ee5\u505a\u4e00\u4e9b\u7279\u6b8a\u5904\u7406\n            String handle = SensitiveInfoUtil.handle(valueStr, regex);\n            serializer.write(handle);\n            return;\n        } else if (fieldType == <TYPE>) {\n            // \u5904\u7406<TYPE>\u7684\u503c\uff0c\u53ef\u4ee5\u505a\u4e00\u4e9b\u7279\u6b8a\u5904\u7406\n            String handle = SensitiveInfoUtil.handle(valueStr, regex);\n            serializer.write(handle);\n            return;\n        }\n        // \u5176\u4ed6\u7c7b\u578b\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\n        serializer.write(object);\n    }\n}",
        "package org.jeecg.common.desensitization;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.serializer.SerializerFeature;\nimport lombok.extern.slf4j.Slf4j;\nimport org.jeecg.common.api.vo.Result;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n/**\n * \u5168\u5c40\u5f02\u5e38\u5904\u7406\u5668\n */\n@Slf4j\n@ControllerAdvice\npublic class JeecgBootExceptionAdvisor {\n    @ExceptionHandler(JeecgBootException.class)\n    @ResponseBody\n    public Result<String> handlerJeecgBootException(JeecgBootException e){\n        log.error(\"\u7cfb\u7edf\u5f02\u5e38\",e);\n        return Result.error(e.getMessage());\n    }\n}\n    \n\n### Response:",
        "package org.jeecg.common.desensitization.util;\n\nimport lombok.*;\nimport java.io.Serializable;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Getter\n@Setter\n@Builder\npublic class User implements Serializable {\n    private String id;\n    private String name;\n    private int age;\n    private LocalDate birthday;\n    private List<String> addresses;\n}\n",
        "package com.test;\n\nimport java.util.Arrays;\n\npublic class SensitiveInfoUtilTest {\n\n  @Test\n  public void testHandleNestedObject() throws Exception {\n      <FILL>\n    }\n}\n    \n\n### Response:",
        "package org.jeecg.common.desensitization;\n\nimport org.jeecg.common.util.oConvertUtils;\n\n/**\n * \u8131\u654f\u5de5\u5177\u7c7b\n */\npublic class SensitiveInfoUtil {\n    /**\n     * [\u8eab\u4efd\u8bc1\u53f7] \u663e\u793a\u6700\u540e\u56db\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5171\u8ba118\u4f4d\u6216\u800515\u4f4d\n     * <p>\n     * \u652f\u630132\u4f4d\u8eab\u4efd\u8bc1\u53f7\u7801\u7684\u5904\u7406\n     */\n    public static String idCardNum(String id) {\n        if (oConvertUtils.isEmpty(id)) {\n            return \"\";\n        }\n        int length = getLength(id);\n        if (length == 18) {\n            return formatRight(id, 4);\n        } else {\n            return formatRight(id, 6);\n        }\n    }\n\n    /**\n     * [\u94f6\u884c\u5361\u53f7] \u524d\u516d\u4f4d\uff0c\u540e\u56db\u4f4d\uff0c\u5176\u4ed6\u7528\u661f\u53f7\u9690\u85cf\uff0c\u6bcf\u4f4d1\u4e2a\u661f\u53f7\n     */\n    public static String bankCard(String cardNum) {\n        if (oConvertUtils.isEmpty(cardNum)) {\n            return \"\";\n        }\n        return formatBetween(cardNum, 6, 4);\n    }\n\n    /**\n     * [\u90ae\u7bb1] \u53ea\u663e\u793a\u5b57\u7b26\uff0c\u5176\u4ed6\u9690\u85cf\u4e3a2\u4e2a\u661f\u53f7<\u4f8b\u5b50: j**@163.com>\n     */\n    public static String email(String email) {\n        if (oConvertUtils.isEmpty(email)) {\n            return \"\";\n        }\n        int index = email.indexOf(\"@\");\n        if (index <= 0){\n            return email;\n        }\n        String preEmail = email.substring(0, 1);\n        String postEmail = email.substring(index);\n        return preEmail + \"**\" + postEmail;\n    }\n\n    /**\n     * [\u59d3\u540d] \u53ea\u663e\u793a\u7b2c\u4e00\u4e2a\u6c49\u5b57\uff0c\u5176\u4ed6\u9690\u85cf\u4e3a2\u4e2a\u661f\u53f7<\u4f8b\u5b50\uff1a**\u67d0\u67d0>\n     */\n    public static String chineseName(String name) {\n        if (oConvertUtils.isEmpty(name)) {\n            return \"\";\n        }\n        final char[] chars = name.toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for (char c : chars) {\n            if (c > 128) {\n                sb.append(\"*\");\n            } else {\n                sb.append(c);\n            }\n        }\n        return setLength(sb.toString(), 2, \"**\");\n    }\n\n    /**\n     * [\u4e2d\u56fd\u8f66\u724c\u53f7] \u53ea\u663e\u793a\u6700\u540e\u4e09\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u4e3a1\u4e2a\u661f\u53f7<\u4f8b\u5b50\uff1a****\u67d0\u67d0>\n     */\n    public static String plateNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        return setLength(num, 3, \"*\");\n    }\n\n    /**\n     * [\u5bc6\u7801] \u5bc6\u7801\u7684\u5168\u90e8\u5b57\u7b26\u90fd\u7528*\u4ee3\u66ff\uff0c\u6bd4\u5982\uff1a******\n     */\n    public static String password(String pwd) {\n        if (oConvertUtils.isEmpty(pwd)) {\n            return \"\";\n        }\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < pwd.length(); i++) {\n            sb.append(\"*\");\n        }\n        return sb.toString();\n    }\n\n    /**\n     * [\u7535\u8bdd\u53f7\u7801] \u524d\u4e09\u4f4d\uff0c\u540e\u56db\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\uff0c\u6bd4\u5982\uff1a138******1234\n     */\n    public static String phoneNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        return formatBetween(num, 3, 4);\n    }\n\n    /**\n     * [\u5730\u5740] \u53ea\u663e\u793a\u5230\u5730\u533a\uff0c\u4e0d\u663e\u793a\u8be6\u7ec6\u5730\u5740\uff1b\u5982\uff1a\u5317\u4eac\u5e02\u6d77\u6dc0\u533a****\n     */\n    public static String address(String addr) {\n        if (oConvertUtils.isEmpty(addr)) {\n            return \"\";\n        }\n        final int index = addr.indexOf(\" \");\n        if (index <= 0) {\n            return addr;\n        } else {\n            return setLength(addr, index + 1, \"**\");\n        }\n    }\n\n    /**\n     * [IP\u5730\u5740] \u53ea\u663e\u793a\u6700\u540e\u4e00\u4e2aIP\u5730\u5740\u7684\u540e\u9762\u51e0\u70b9\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u6bd4\u5982\uff1a192.168*******\n     */\n    public static String ipAddr(String addr) {\n        if (oConvertUtils.isEmpty(addr)) {\n            return \"\";\n        }\n        final int index = addr.lastIndexOf(\".\");\n        return setLength(addr, index + 1, \"*\");\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u53ea\u663e\u793a\u5230\u5730\u533a\uff0c\u4e0d\u663e\u793a\u8be6\u7ec6\u5730\u5740\uff1b\u5982\uff1a\u4e0a\u6d77\u5e02*****\n     */\n    public static String zipAddr(String addr) {\n        if (oConvertUtils.isEmpty(addr)) {\n            return \"\";\n        }\n        final int index = addr.indexOf(\" \");\n        if (index <= 0) {\n            return addr;\n        } else {\n            return setLength(addr, index + 1, \"*\");\n        }\n    }\n\n    /**\n     * [\u8eab\u4efd\u8bc1\u4ef6\u53f7] \u663e\u793a\u6700\u540e\u4e00\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a*********\n     */\n    public static String idNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length - 1; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(length - 1, length) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u6700\u540e\u4e24\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a***********\n     */\n    public static String zipNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length - 2; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(length - 2, length) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u524d\u4e24\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a13******\n     */\n    public static String frontTwoNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 2; i < length; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(0, 2) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u6700\u540e\u4e09\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a*******13\n     */\n    public static String endThreeNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length - 3; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(length - 3, length) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u524d\u56db\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a1234*****\n     */\n    public static String frontFourNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 4; i < length; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(0, 4) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u524d\u4e94\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a12345*****\n     */\n    public static String frontFiveNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 5; i < length; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(0, 5) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u524d\u516d\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a123456*****\n     */\n    public static String frontSixNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 6; i < length; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(0, 6) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u524d\u4e03\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a1234567*****\n     */\n    public static String frontSevenNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 7; i < length; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(0, 7) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u524d\u516b\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a12345678*****\n     */\n    public static String frontEightNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 8; i < length; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(0, 8) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u524d\u4e5d\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a123456789*****\n     */\n    public static String frontNineNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 9; i < length; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(0, 9) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u524d\u5341\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a12345678******\n     */\n    public static String frontTenNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 10; i < length; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(0, 10) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u524d\u5341\u4e00\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a123456789*****\n     */\n    public static String frontElevenNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 11; i < length; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(0, 11) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u524d\u5341\u4e8c\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a123456789*****\n     */\n    public static String frontTwelveNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 12; i < length; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(0, 12) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u524d\u5341\u4e09\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a\uff1a123456789*****\n     */\n    public static String frontThirteenNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 13; i < length; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(0, 13) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u524d\u5341\u56db\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a\uff1a123456789*****\n     */\n    public static String frontFourteenNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 14; i < length; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(0, 14) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u524d\u5341\u4e94\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a\uff1a123456789*****\n     */\n    public static String frontFifteenNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 15; i < length; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(0, 15) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u524d\u5341\u516d\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a\uff1a123456789*****\n     */\n    public static String frontSixteenNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 16; i < length; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(0, 16) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u524d\u5341\u4e03\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a\uff1a123456789*****\n     */\n    public static String frontSeventeenNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 17; i < length; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(0, 17) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u524d\u5341\u516b\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a\uff1a123456789*****\n     */\n    public static String frontEightteenNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 18; i < length; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(0, 18) + sb.toString();\n    }\n\n    /**\n     * [\u94f6\u8fbe] \u663e\u793a\u524d\u5341\u4e5d\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5982\uff1a\uff1a123456789*****\n     */\n    public static String frontNineteenNum(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int length = getLength(num);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 19; i < length; i++) {\n            sb.append(\"*\");\n        }\n        return num.substring(0, 19) + sb.toString();\n    }\n\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * @author luke\n */\n@Slf4j\npublic class SensitiveInfoUtil {\n    /**\n     * \u5904\u7406\u5d4c\u5957\u5bf9\u8c61,\u63d2\u5165\u8131\u654f\u7b56\u7565\u903b\u8f91\n     * @param obj    \u9700\u8981\u88ab\u8fc7\u6ee4\u7684\u6570\u636e\u5bf9\u8c61\n     * @return       \u8fd4\u56de\u8fc7\u6ee4\u540e\u7684\u6570\u636e\u5bf9\u8c61\n     */\n    public static <T> T handleNestedObject(T obj) {\n        return null;\n    }\n}\n\n    ",
        "package com.test;\n\nimport org.jeecg.common.desensitization.util.SensitiveInfoUtil;\n\n/**\n * \u6d4b\u8bd5\u7c7b\n */\npublic class Test {\n    public static void main(String[] args) throws Exception {\n        SensitiveInfoUtil sensitive = new SensitiveInfoUtil();\n        String idCard = \"430524198507056459\";\n        System.out.println(\"\u539f\u6570\u636e\uff1a\"+idCard);\n        String idCardSensitive = sensitive.desensitize(idCard, \"\");\n        System.out.println(\"\u8131\u654f\u540e\u6570\u636e\uff1a\"+idCardSensitive);\n    }\n}\n\n### Response:",
        "package org.jeecg.common.desensitization.util;\n\nimport org.springframework.beans.BeanUtils;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.util.*;\nimport java.math.BigDecimal;\nimport java.sql.Date;\n\n/**\n * \u5904\u7406\u5d4c\u5957\u5bf9\u8c61\u7c7b\u578b\u6570\u636e\u8131\u654f\u5de5\u5177\u7c7b\uff08\u672a\u8003\u8651\u9759\u6001\u6210\u5458\u53d8\u91cf\uff09\n */\npublic class NestedObjectHandler {\n    \n    private static final String[] SENSITIVE_FIELD = {\"password\", \"cardNo\", \"bankCard\", \"phoneNumber\"};\n    /**\n     * \u5904\u7406\u5d4c\u5957\u5bf9\u8c61\u7c7b\u578b\u6570\u636e\u8131\u654f\u5de5\u5177\u65b9\u6cd5\n     * @param sourceBean \u6e90bean\u5bf9\u8c61\uff08\u672a\u7ecf\u8131\u654f\uff09\n     * @return \u8fd4\u56de\u8131\u654f\u540e\u7684bean\u5bf9\u8c61\n     */\n    public static Object handle(Object sourceBean) {\n        if (sourceBean == null) {\n            return null;\n        }\n        // \u83b7\u53d6\u6e90bean\u7c7b\u578b\n        Class<?> sourceClazz = sourceBean.getClass();\n        // \u521b\u5efa\u65b0\u7684\u8131\u654fbean\u5bf9\u8c61\n        Object targetBean = newTargetObject(sourceBean);\n        \n        // \u8d4b\u503c\n        copyValues(sourceBean, targetBean);\n\n        return targetBean;\n    }\n    \n    /**\n     * \u521b\u5efa\u65b0\u7684\u8131\u654fbean\u5bf9\u8c61\n     */\n    private static Object newTargetObject(Object sourceBean) {\n        Class<?> clazz = sourceBean.getClass();\n        \n        try {\n            // \u5982\u679c\u662f\u96c6\u5408\u7c7b\u578b\uff0c\u9700\u8981\u83b7\u53d6\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u521b\u5efa\u65b0\u7684\u5bf9\u8c61\n            if (Collection.class.isAssignableFrom(clazz)) {\n                Collection<?> collection = (Collection) sourceBean;\n                \n                // \u5224\u65ad\u662f\u5426\u5b58\u5728\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\n                ParameterizedType parameterizedType = (ParameterizedType) clazz.getGenericSuperclass();\n                if (parameterizedType != null && parameterizedType.getActualTypeArguments().length > 0) {\n                    Class<?> collectionClazz = (Class<?>) parameterizedType.getActualTypeArguments()[0];\n                    \n                    // \u521b\u5efa\u96c6\u5408\u5bf9\u8c61\n                    Collection targetCollection;\n                    if (List.class.isAssignableFrom(clazz)) {\n                        targetCollection = new ArrayList<>();\n                    } else if (Set.class.isAssignableFrom(clazz)) {\n                        targetCollection = new HashSet<>();\n                    } else {\n                        // \u4e0d\u652f\u6301\u7684\u96c6\u5408\u7c7b\u578b\n                        throw new UnsupportedOperationException();\n                    }\n                    \n                    // \u904d\u5386\u6e90\u5bf9\u8c61\uff0c\u521b\u5efa\u65b0\u7684\u8131\u654f\u5bf9\u8c61\u5e76\u8d4b\u503c\n                    for (Object sourceItem : collection) {\n                        Object targetItem = newTargetObject(sourceItem);\n                        \n                        if (!targetCollection.getClass().isInstance(targetItem)) {\n                            throw new ClassCastException(\"\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u4e0d\u5339\u914d\");\n                        }\n                        targetCollection.add(targetItem);\n                    }\n                    \n                    return targetCollection;\n                } else {\n                    // \u4e0d\u652f\u6301\u7684\u96c6\u5408\u7c7b\u578b\n                    throw new UnsupportedOperationException();\n                }\n            } else if (Map.class.isAssignableFrom(clazz)) {\n                // TODO\uff1a\u672a\u5b8c\u5584Map\u7c7b\u578b\u8131\u654f\n                return null;\n            } else {\n                return clazz.newInstance();\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"\u521b\u5efa\u65b0\u7684\u8131\u654fbean\u5bf9\u8c61\u5931\u8d25\", e);\n        }\n    }\n    \n    /**\n     * \u8d4b\u503c\n     */\n    private static void copyValues(Object sourceBean, Object targetBean) {\n        \n        // \u83b7\u53d6\u6e90bean\u7c7b\u578b\n        Class<?> sourceClazz = sourceBean.getClass();\n        \n        Field[] fields = sourceClazz.getDeclaredFields();\n        for (Field field : fields) {\n            if (!isSensitive(field)) {\n                // \u8df3\u8fc7\u4e0d\u654f\u7684\u5b57\u6bb5\n                continue;\n            }\n            \n            // \u83b7\u53d6\u6570\u636e\u7c7b\u578b\n            Class<?> fieldType = field.getType();\n            \n            try {\n                \n                if (isSimpleDataType(fieldType)) {\n                    Object value = BeanUtils.getFieldValue(sourceBean, field);\n                    \n                    // \u8d4b\u503c\u8131\u654f\u6570\u636e\u7c7b\u578b\n                    copyValuesForSimpleDataType(value, targetBean, field);\n                } else if (Collection.class.isAssignableFrom(fieldType)) {\n                    Collection sourceCollection = (Collection) BeanUtils.getFieldValue(sourceBean, field);\n                    \n                    // \u8d4b\u503c\u8131\u654f\u6570\u636e\u7c7b\u578b\uff08\u96c6\u5408\uff09\n                    copyValuesForSimpleDataType(sourceCollection, targetBean, field);\n                } else if (Map.class.isAssignableFrom(fieldType)) {\n                    Map sourceMap = (Map) BeanUtils.getFieldValue(sourceBean, field);\n                    \n                    // \u8d4b\u503c\u8131\u654f\u6570\u636e\u7c7b\u578b\uff08map\uff09\n                    copyValuesForSimpleDataType(sourceMap, targetBean, field);\n                } else {\n                    Object sourceObject = BeanUtils.getFieldValue(sourceBean, field);\n                    \n                    // \u5982\u679c\u4e0d\u5b58\u5728\u8131\u654f\u6570\u636e\u7c7b\u578b\uff0c\u5219\u9012\u4ea4\u96c6\u5408\u7c7b\u578b\u521b\u5efa\u65b0\u5bf9\u8c61\u5e76\u8d4b\u503c\n                    copyValuesForObject(sourceObject, targetBean, field);\n                }\n            } catch (Exception e) {\n                throw new RuntimeException(\"\u590d\u5236\u503c\u5931\u8d25\", e);\n            }\n        }\n    }\n    \n    /**\n     * \u5224\u65ad\u662f\u5426\u4e3a\u654f\u7684\u5b57\u6bb5\n     */\n    private static boolean isSensitive(Field field) {\n        String fieldName = field.getName();\n        \n        for (String sensitiveField : SENSITIVE_FIELD) {\n            if (sensitiveField.equals(fieldName)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    /**\n     * \u5224\u65ad\u662f\u5426\u4e3a\u7b80\u5355\u7684\u6570\u636e\u7c7b\u578b\uff08\u5305\u62ec\uff1a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3001java.sql.Date\uff09\n     */\n    private static boolean isSimpleDataType(Class<?> fieldType) {\n        return isBaseDataType(fieldType) || Date.class.isAssignableFrom(fieldType);\n    }\n    \n    /**\n     * \u5224\u65ad\u662f\u5426\u4e3a\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff08\u5305\u62ec\uff1aInteger\u3001Double\u3001Float\u3001Long\u3001Byte\uff09\n     */\n    private static boolean isBaseDataType(Class<?> fieldType) {\n        return Integer.class.isAssignableFrom(fieldType) || Double.class.isAssignableFrom(fieldType) \n                || Float.class.isAssignableFrom(fieldType) || Long.class.isAssignableFrom(fieldType) \n                || Byte.class.isAssignableFrom(fieldType);\n    }\n    \n    /**\n     * \u590d\u5236\u7b80\u5355\u6570\u636e\u7c7b\u578b\uff08\u5305\u62ec\uff1a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3001java.sql.Date\uff09\u5230\u8131\u654f\u5bf9\u8c61\u4e2d\u7684\u5b57\u6bb5\n     */\n    private static void copyValuesForSimpleDataType(Object value, Object targetBean, Field field) {\n        try {\n            BeanUtils.copyFieldValue(value, targetBean, field);\n        } catch (Exception e) {\n            throw new RuntimeException(\"\u590d\u5236\u7b80\u5355\u6570\u636e\u7c7b\u578b\u5931\u8d25\", e);\n        }\n    }\n    \n    /**\n     * \u590d\u5236\u96c6\u5408\u7c7b\u578b\u5230\u8131\u654f\u5bf9\u8c61\u4e2d\u7684\u5b57\u6bb5\n     */\n    private static void copyValuesForSimpleDataType(Collection<?> collection, Object targetBean, Field field) {\n        \n        // \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u8d4b\u503c\uff08\u662f\u5426\u5b58\u5728\u76f8\u540c\u7c7b\u578b\u7684\u5b57\u6bb5\uff09\n        if (!hasSameFieldWithSimpleDataType(targetBean, field)) {\n            throw new RuntimeException(\"\u4e0d\u652f\u6301\u8131\u654f\u96c6\u5408\u7c7b\u578b\");\n        }\n        \n        // \u8d4b\u503c\u96c6\u5408\u6570\u636e\u7c7b\u578b\n        Collection collectionValue = (Collection) BeanUtils.getFieldValue(targetBean, field);\n        if (collection == null) {\n            try {\n                BeanUtils.setFieldValue(targetBean, field, collectionValue);\n            } catch (Exception e) {\n                throw new RuntimeException(\"\u590d\u5236\u96c6\u5408\u7c7b\u578b\u5931\u8d25\", e);\n            }\n            \n        // \u8d4b\u503c\u5355\u4e2a\u6570\u636e\u7c7b\u578b\n        } else {\n            if (!hasSameFieldWithSimpleDataType(targetBean, field)) {\n                throw new RuntimeException(\"\u4e0d\u652f\u6301\u5355\u7b80\u5355\u6570\u636e\u7c7b\u578b\");\n            }\n            \n            for (Object value : collection) {\n                copyValuesForSimpleDataType(value, targetBean, field);\n            }\n        }\n    }\n    \n    /**\n     * \u590d\u5236\u5bf9\u8c61\u5230\u8131\u654f\u5bf9\u8c61\u4e2d\u7684\u5b57\u6bb5\uff08\u4e0d\u652f\u6301\u96c6\u5408\u7c7b\u578b\uff09\n     */\n    private static void copyValuesForObject(Object sourceObject, Object targetBean, Field field) {\n        if (sourceObject == null) {\n            return;\n        }\n        \n        try {\n            \n            // \u5224\u65ad\u662f\u5426\u4e3a\u65b0\u5bf9\u8c61\n            boolean isNew = false;\n            Object newObject = BeanUtils.getFieldValue(targetBean, field);\n            if (newObject == null) {\n                isNew = true;\n                \n                String sourceObjectClassName = sourceObject.getClass().getName();\n                try {\n                    newObject = Class.forName(sourceObjectClassName).newInstance();\n                    \n                    // \u8bbe\u7f6e\u65b0\u5bf9\u8c61\u7684\u5c5e\u6027\u503c\n                    BeanUtils.setFieldValue(targetBean, field, newObject);\n                } catch (Exception e) {\n                    throw new RuntimeException(\"\u521b\u5efa\u65b0\u5bf9\u8c61\u5931\u8d25\", e);\n                }\n            }\n            \n            // \u590d\u5236\u5b57\u6bb5\u503c\uff08\u5305\u62ec\uff1a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3001java.sql.Date\uff09\n            copyValuesForObjectByField(sourceObject, newObject, isNew);\n        } catch (Exception e) {\n            throw new RuntimeException(\"\u590d\u5236\u5bf9\u8c61\u5931\u8d25\", e);\n        }\n    }\n    \n    /**\n     * \u6839\u636e\u5b57\u6bb5\u590d\u5236\u5b57\u6bb5\u503c\uff08\u5305\u62ec\uff1a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3001java.sql.Date\uff09\n     */\n    private static void copyValuesForObjectByField(Object sourceObject, Object targetObject, boolean isNew) {\n        Field[] fields = sourceObject.getClass().getDeclaredFields();\n        \n        for (Field field : fields) {\n            if (!isSensitive(field)) {\n                // \u8df3\u8fc7\u4e0d\u654f\u7684\u5b57\u6bb5\n                continue;\n            }\n            \n            try {\n                \n                Object value = BeanUtils.getFieldValue(sourceObject, field);\n                Class<?> type = value != null ? value.getClass() : null;\n                \n                // \u5224\u65ad\u662f\u5426\u4e3a\u7b80\u5355\u6570\u636e\u7c7b\u578b\uff08\u5305\u62ec\uff1a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3001java.sql.Date\uff09\uff0c\u590d\u5236\u65f6\u91c7\u7528\u8d4b\u503c\u65b9\u6cd5\n                if (isBaseDataType(type)) {\n                    copyValuesForSimpleDataType(value, targetObject, field);\n                    \n                // \u5224\u65ad\u662f\u5426\u4e3a\u96c6\u5408\u7c7b\u578b\uff0c\u590d\u5236\u65f6\u91c7\u7528\u8d4b\u503c\u96c6\u5408\u65b9\u6cd5\n                } else if (Collection.class.isAssignableFrom(type)) {\n                    copyValuesForSimpleDataType((Collection) value, targetObject, field);\n                    \n                // \u5224\u65ad\u662f\u5426\u4e3a\u5bf9\u8c61\u7c7b\u578b\uff0c\u590d\u5236\u65f6\u91c7\u7528\u8d4b\u503c\u5bf9\u8c61\u65b9\u6cd5\n                } else if (!isNew && (value == null)) {\n                    continue;\n                    \n                // \u590d\u5236\u5b57\u6bb5\u5230\u65b0\u5bf9\u8c61\uff08\u4e0d\u652f\u6301\u96c6\u5408\u7c7b\u578b\uff09\n                } else {\n                    copyValuesForObjectByField(value, targetObject, field);\n                }\n            } catch (Exception e) {\n                throw new RuntimeException(\"\u590d\u5236\u5b57\u6bb5\u5931\u8d25\", e);\n            }\n        }\n    }\n    \n    /**\n     * \u5224\u65ad\u662f\u5426\u4e3a\u65b0\u5bf9\u8c61\n     */\n    private static boolean isNew(Object targetBean, Field field) {\n        return BeanUtils.getFieldValue(targetBean, field) == null;\n    }\n    \n    /**\n     * \u5224\u65ad\u662f\u5426\u4e3a\u5355\u4e2a\u7b80\u5355\u6570\u636e\u7c7b\u578b\uff08\u5305\u62ec\uff1a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3001java.sql.Date\uff09\n     */\n    private static boolean isSingleSimpleDataType(Class<?> type) {\n        return !Collection.class.isAssignableFrom(type);\n    }\n    \n    /**\n     * \u5224\u65ad\u662f\u5426\u4e3a\u96c6\u5408\u7c7b\u578b\uff08\u4e0d\u652f\u6301\uff1a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3001java.sql.Date\uff09\n     */\n    private static boolean isCollectionSimpleDataType(Class<?> type) {\n        return Collection.class.isAssignableFrom(type);\n    }\n    \n    /**\n     * \u5224\u65ad\u662f\u5426\u4e3a\u7b80\u5355\u6570\u636e\u7c7b\u578b\uff08\u5305\u62ec\uff1a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3001java.sql.Date\uff09\n     */\n    private static boolean isSimpleDataType(Class<?> type) {\n        return isSingleSimpleDataType(type) || isCollectionSimpleDataType(type);\n    }\n    \n    /**\n     * \u5224\u65ad\u662f\u5426\u4e3a\u540c\u4e00\u7c7b\u578b\u7684\u5b57\u6bb5\uff08\u5305\u62ec\uff1a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3001java.sql.Date\uff09\n     */\n    private static boolean hasSameFieldWithSimpleDataType(Object targetBean, Field field) {\n        try {\n            Class<?> type = BeanUtils.getFieldValue(targetBean, field).getClass();\n            \n            // \u5224\u65ad\u662f\u5426\u4e3a\u5355\u4e2a\u7b80\u5355\u6570\u636e\u7c7b\u578b\uff08\u5305\u62ec\uff1a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3001java.sql.Date\uff09\n            if (isSingleSimpleDataType(type)) {\n                return true;\n                \n            // \u5224\u65ad\u662f\u5426\u4e3a\u96c6\u5408\u7c7b\u578b\uff08\u4e0d\u652f\u6301\uff1a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3001java.sql.Date\uff09\n            } else if (!Collection.class.isAssignableFrom(type))) {\n                throw new RuntimeException(\"\u4e0d\u652f\u6301\u7684\u7b80\u5355\u6570\u636e\u7c7b\u578b\");\n                \n            // \u5224\u65ad\u662f\u5426\u4e3a\u96c6\u5408\u7c7b\u578b\uff08\u4e0d\u652f\u6301\uff1a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3001java.sql.Date\uff09\n            } else if (Collection.class.isAssignableFrom(type)) {\n                return false;\n            }\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"\u5224\u65ad\u662f\u5426\u4e3a\u540c\u4e00\u7c7b\u578b\u7684\u5b57\u6bb5\u5931\u8d25\", e);\n        }\n        \n        return true;\n    }\n    \n}",
        "package org.jeecg.common.desensitization.util;\n\nimport java.lang.reflect.Array;\nimport java.math.BigDecimal;\nimport java.time.*;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicReference;\n\n/**\n * \u8131\u654f\u5de5\u5177\u7c7b\uff0c\u63d0\u4f9b\u591a\u79cd\u89c4\u5219\u548c\u7b80\u5355\u7684\u5c01\u88c5\u65b9\u5f0f\u6765\u652f\u6301\u5404\u79cd\u60c5\u666f\u7684\u8131\u654f\u9700\u6c42\u3002\n * <p>\n * 1. \u901a\u7528\u7684\u8131\u654f\u65b9\u6cd5<br/>\n * 1.1 {@link #desensitizedField(String, String)} \u76f4\u63a5\u5c06\u5b57\u7b26\u4e32\u6307\u5b9a\u4f4d\u7f6e\u6539\u6210*\uff0c\u652f\u6301\u4e2d\u82f1\u6587\u548c\u6570\u5b57\u3001\u7b26\u53f7\u7684\u6df7\u5408\u3002\n * <p>\n * 2. \u591a\u79cd\u5e38\u89c1\u4e2a\u4eba\u4fe1\u606f\u8131\u654f\u65b9\u6cd5<br/>\n * 2.1 {@link #idCard(String)} \u8eab\u4efd\u8bc1\u53f7\uff0c\u663e\u793a\u524d\u540e4\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002<br>\n * 2.2 {@link #name(String)} \u59d3\u540d\uff0c\u53ea\u663e\u793a\u7b2c\u4e00\u4e2a\u6c49\u5b57\uff0c\u5176\u4ed6\u9690\u85cf\u4e3a2\u4e2a\u661f\u53f7\uff0c\u82f1\u6587\u5168\u90e8\u663e\u793a\u3002<br>\n * 2.3 {@link #mobilePhone(String)} \u624b\u673a\u53f7\uff0c\u524d\u4e09\u4f4d\uff0c\u540e4\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\uff0c\u5171\u8ba17\u4f4d\uff0c\u5982138******1234\u3002<br>\n * 2.4 {@link #address(String, int)} \u5730\u5740\u4fe1\u606f\uff0c\u4ece\u9ed8\u8ba4\u7684\u5012\u6570\u7b2c\u51e0\u4f4d\u5f00\u59cb\u9690\u85cf\u4e3a\u661f\u53f7\uff0c\u6700\u5c0f\u957f\u5ea6\u9700\u8981\u5927\u4e8e\u7b49\u4e8e2\uff0c\u5982\uff1a\u5e7f\u4e1c\u7701\u5e7f\u5dde\u5e02\u5e7f\u5dde\u5927\u9053100\u53f7\n * <p>\n * 3. \u591a\u79cd\u5e38\u89c1\u654f\u611f\u4fe1\u606f\u8131\u654f\u65b9\u6cd5<br/>\n * 3.1 {@link #email(String)} \u7535\u5b50\u90ae\u7bb1\uff0c\u53ea\u663e\u793a\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u524d\u9762\u7684\u9690\u85cf\u4e3a2\u4e2a\u661f\u53f7\uff0c\u82f1\u6587\u5168\u90e8\u663e\u793a\u3002<br>\n * 3.2 {@link #bankCard(String)} \u94f6\u884c\u5361\u53f7\uff0c\u524d6\u4f4d\uff0c\u540e4\u4f4d\uff0c\u5176\u4ed6\u7528\u661f\u53f7\u9690\u85cf\uff0c\u6bcf\u4e00\u4f4d1\u4e2a\u661f\u53f7\u3002<br>\n * 3.3 {@link #cnapsCode(String)} \u516c\u53f8\u5f00\u6237\u94f6\u884c\u8054\u884c\u53f7,\u524d\u4e24\u4f4d\uff0c\u5176\u4ed6\u7528\u661f\u53f7\u9690\u85cf\uff0c\u6bcf\u4e00\u4f4d1\u4e2a\u661f\u53f7\u3002<br>\n */\npublic class SensitiveInfoUtil {\n    /**\n     * \u9ed8\u8ba4\u7684\u654f\u611f\u4fe1\u606f\u89c4\u5219\uff0c\u7528\u4e8e\u9488\u5bf9\u6240\u6709\u5b57\u7b26\u4e32\u505a\u8131\u654f\u5904\u7406\u3002\n     */\n    public static final String DEFAULT_RULE = \"defaultRule\";\n\n    /**\n     * \u6839\u636e\u6307\u5b9a\u7684\u89c4\u5219\u8131\u654f\u5bf9\u8c61\n     * @param object      \u5bf9\u8c61\n     * @param ruleName    \u89c4\u5219\u540d\u79f0\n     */\n    public static Object desensitized(Object object, String ruleName) {\n        if (object == null) {\n            return null;\n        }\n        Class clazz = object.getClass();\n        if (!clazz.isArray() && !Iterable.class.isAssignableFrom(clazz)) {\n            throw new IllegalArgumentException(\"The target must be an array or collection.\");\n        }\n        return desensitizedArrayOrCollection(object, ruleName);\n    }\n\n    /**\n     * \u6839\u636e\u6307\u5b9a\u7684\u89c4\u5219\u8131\u654f\u5b57\u7b26\u4e32\u5bf9\u8c61\n     * @param value     \u503c\n     * @param ruleName  \u89c4\u5219\u540d\u79f0\n     */\n    public static Object desensitizedString(String value, String ruleName) {\n        if (value == null || value.length() < 1) {\n            return null;\n        }\n        if (\"defaultRule\".equals(ruleName)) {\n            // \u9ed8\u8ba4\u89c4\u5219\u53ea\u662f\u5c06\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u6539\u6210*\n            String result = \"\";\n            for (int i = 0; i < value.length(); ++i) {\n                char c = value.charAt(i);\n                if (c >= 'a' && c <= 'z') { // \u5c0f\u5199\u5b57\u6bcd\n                    result += \"*\";\n                } else {\n                    result += String.valueOf(c);\n                }\n            }\n            return result;\n        }\n\n        throw new IllegalArgumentException(\"The rule name [\" + ruleName + \"] is not supported.\");\n    }\n\n    /**\n     * \u5c06\u5bf9\u8c61\u6216\u96c6\u5408\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u8131\u654f\u6210\u6307\u5b9a\u7684\u89c4\u5219\u3002\n     * @param target  \u5bf9\u8c61\u6216\u96c6\u5408\n     * @param ruleName \u89c4\u5219\u540d\u79f0\n     */\n    private static Object desensitizedArrayOrCollection(Object target, String ruleName) {\n        Class<?> clazz = target.getClass();\n        if (clazz.isArray()) { // \u6570\u7ec4\n            int length = Array.getLength(target);\n            for (int i = 0; i < length; ++i) {\n                Object o = Array.get(target, i);\n                if (o instanceof String) {\n                    Array.set(target, i, desensitizedString((String) o, ruleName));\n                } else { // \u5d4c\u96c6\u5408\uff0c\u76f4\u63a5\u8131\u654f\u6bcf\u4e00\u4e2a\u5143\u7d20\n                    Array.set(target, i, desensitizedArrayOrCollection(o, ruleName));\n                }\n            }\n        } else if (Iterable.class.isAssignableFrom(clazz)) { // \u96c6\u5408\uff0c\u53ea\u9700\u8981\u5bf9\u5176\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u505a\u6574\u8131\u654f\n            Iterator<?> iterator = ((Collection) target).iterator();\n            while (iterator.hasNext()) {\n                Object o = iterator.next();\n                if (o instanceof String) { // \u5b57\u7b26\u4e32\n                    iterator.set(desensitizedString((String) o, ruleName));\n                } else { // \u96c6\u5408\uff0c\u76f4\u63a5\u8131\u654f\u6bcf\u4e00\u4e2a\u5143\u7d20\n                    iterator.set(desensitizedArrayOrCollection(o, ruleName));\n                }\n            }\n        } else if (clazz == List.class) { // list\uff0c\u9700\u8981\u7279\u522b\u5904\u7406\u4e0b\u6807\u7d22\u5f15\u95ee\u9898\u3002\n            List<?> origin = ((List) target);\n            List<Object> desensitized = new ArrayList<>();\n            for (int i = 0; i < origin.size(); ++i) {\n                Object o = origin.get(i);\n                if (o instanceof String) { // \u5b57\u7b26\u4e32\n                    desensitized.add(desensitizedString((String) o, ruleName));\n                } else { // \u96c6\u5408\uff0c\u76f4\u63a5\u8131\u654f\u6bcf\u4e00\u4e2a\u5143\u7d20\n                    desensitized.add(desensitizedArrayOrCollection(o, ruleName));\n                }\n            }\n        } else if (clazz == Map.class) { // map\uff0c\u9700\u8981\u7279\u522b\u5904\u7406\u4e0b\u6807\u7d22\u5f15\u95ee\u9898\u3002\n            Map<?, ?> origin = ((Map) target);\n            Map<Object, Object> desensitized = new HashMap<>();\n            for (Map.Entry<?, ?> entry : origin.entrySet()) { // \u53ea\u904d\u518cmap\u4e2d\u7684key\u548cvalue\n                Object key = entry.getKey();\n                Object value = entry.getValue();\n                if (key instanceof String) { // \u5b57\u7b26\u4e32\n                    desensitized.put(desensitizedString((String) key, ruleName),\n                            desensitizedArrayOrCollection(value, ruleName));\n                } else { // \u96c6\u5408\uff0c\u76f4\u63a5\u8131\u654f\u6bcf\u4e00\u4e2a\u5143\u7d20\n                    desensitized.put(key,\n                            desensitizedArrayOrCollection(value, ruleName));\n                }\n            }\n        } else {\n            throw new IllegalArgumentException(\"The target type [\" + clazz.getName() + \"] is not supported.\");\n        }\n        return target;\n    }\n}\n",
        "package org.jeecg.common.desensitization.util;\n\nimport java.lang.reflect.Field;\nimport java.util.*;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void handleNestedObjectTest() {\n        // \u6d4b\u8bd5\u6570\u636e\uff1a\u5d4c\u5957\u5bf9\u8c61\u7684\u654f\u611f\u4fe1\u606f\u8131\u654f\n        Person person = new Person();\n        person.setName(\"\u5b59\u609f\u7a7a\");\n        Address address = new Address();\n        address.setDetailAddress(\"\u51c9\u57ce\u4e00\u53f7\");\n        person.setAddress(address);\n        Person nestedPerson = new Person();\n        nestedPerson.setName(\"\u8d75\u654f\");\n        Address nestedAddress = new Address();\n        nestedAddress.setDetailAddress(\"\u5deb\u5ce1\u6751\");\n        nestedPerson.setAddress(nestedAddress);\n        person.setNestedPerson(nestedPerson);\n        \n        Person result = SensitiveInfoUtil.handleNestedObject(person, null, null);\n        assertNotNull(result.getAddress());\n        assertEquals(\"\u51c9\u57ce\u4e00\u53f7\", result.getAddress().getDetailAddress());\n        assertNotNull(result.getNestedPerson());\n        assertNotNull(result.getNestedPerson().getAddress());\n        assertEquals(\"\u5deb\u5ce1\u6751\", person.getNestedPerson().getAddress().getDetailAddress());\n    }\n}\n    \n\n### Response:"
    ]
}