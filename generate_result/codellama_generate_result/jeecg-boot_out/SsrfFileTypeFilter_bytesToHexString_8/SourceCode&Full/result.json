{
    "project_name": "jeecg-boot",
    "file_name": "SsrfFileTypeFilter.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/filter/SsrfFileTypeFilter.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.util.filter",
    "docstring": "/**\n     * \u83b7\u5f97\u6587\u4ef6\u5934\u90e8\u5b57\u7b26\u4e32\n     *\n     * @param src\n     * @return\n     */",
    "source_code": "\nprivate static String bytesToHexString(byte[] src) {\n    StringBuilder stringBuilder = new StringBuilder();\n    if (src == null || src.length <= 0) {\n        return null;\n    }\n    for (int i = 0; i < src.length; i++) {\n        int v = src[i] & 0xFF;\n        String hv = Integer.toHexString(v);\n        if (hv.length() < 2) {\n            stringBuilder.append(0);\n        }\n        stringBuilder.append(hv);\n    }\n    return stringBuilder.toString();\n}\n",
    "class_name": "SsrfFileTypeFilter",
    "method_name": "bytesToHexString",
    "arguments": [
        "byte[] src"
    ],
    "generate_test": [
        "\n[FUNCTION_NAME]\n-----------------------------------\n\nfunction getFileName(file, suffix) {\n  // Get file name and replace spaces with dashes\n  var fileName = file.name.replace(/ /g, \"-\");\n\n  // Append a unique identifier to the file name (useful for multiple files with the same name)\n  fileName += \".\" + Date.now();\n  \n  // Return an object containing the file name and its original extension\n  return {\n    \"name\": fileName,\n    \"ext\": suffix\n  };\n}\n",
        "import org.springframework.web.multipart.MultipartFile;\nimport java.util.*;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * @author yuqiyu\n * @date 2021/8/31\n */\npublic class SsrfFileTypeFilter implements Filter {\n    private static final Logger log = LoggerFactory.getLogger(SsrfFileTypeFilter.class);\n    /**\n     * \u62e6\u622a\u6587\u4ef6\u4e0a\u4f20\u8bf7\u6c42\uff0c\u907f\u514dssrf\u6f0f\u6d1e\n     */\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        HttpServletRequest request = (HttpServletRequest) servletRequest;\n        String uri = request.getRequestURI();\n        log.info(\"\u5f53\u524d\u8bf7\u6c42\u7684URI\uff1a{}\", uri);\n        if (!uri.contains(\"/sys/common/upload\")) {\n            filterChain.doFilter(servletRequest, servletResponse);\n            return;\n        }\n        HttpServletResponse response = (HttpServletResponse) servletResponse;\n        // \u5982\u679c\u662f\u6587\u4ef6\u4e0a\u4f20\uff0c\u62e6\u622a\u5e76\u9a8c\u8bc1\u6587\u4ef6\u7c7b\u578b\n        if (\"POST\".equalsIgnoreCase(request.getMethod()) && request instanceof MultipartHttpServletRequest) {\n            MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n            Iterator<String> it = multipartRequest.getFileNames();\n            while (it.hasNext()) {\n                String name = it.next();\n                MultipartFile file = multipartRequest.getFile(name);\n                // \u9a8c\u8bc1\u4e0a\u4f20\u6587\u4ef6\u7c7b\u578b\n                if (file != null) {\n                    try {\n                        this.validateUploadFileType(file);\n                    } catch (Exception e) {\n                        log.error(\"\u6587\u4ef6\u7c7b\u578b\u62e6\u622a\u6821\u9a8c\u5931\u8d25:{}\", e.getMessage());\n                        response.sendError(HttpServletResponse.SC_FORBIDDEN, \"\u975e\u6cd5\u4e0a\u4f20\u8bf7\u6c42\");\n                        return;\n                    }\n                }\n            }\n        }\n        // \u5982\u679c\u4e0d\u662f\u6587\u4ef6\u4e0a\u4f20\uff0c\u76f4\u63a5\u653e\u884c\n        filterChain.doFilter(servletRequest, servletResponse);\n    }\n\n    /**\n     * \u9a8c\u8bc1\u6587\u4ef6\u7c7b\u578b\n     */\n    private void validateUploadFileType(MultipartFile file) throws Exception {\n        // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u540d\u79f0\uff0c\u5e76\u53d6\u5f97\u5176\u540e\u7f00\u4fe1\u606f\n        String fileName = file.getOriginalFilename();\n        log.info(\"\u539f\u59cb\u6587\u4ef6\u540d\uff1a{}\", fileName);\n        if (StringUtils.isBlank(fileName)) {\n            throw new Exception(\"\u4e0a\u4f20\u5931\u8d25\uff0c\u6587\u4ef6\u540d\u4e0d\u80fd\u4e3a\u7a7a\");\n        }\n        // \u83b7\u53d6\u6587\u4ef6\u540e\u7f00\u4fe1\u606f\n        String suffix = this.getFileSuffix(fileName);\n        log.info(\"\u6587\u4ef6\u540e\u7f00\uff1a{}\", suffix);\n        boolean isAllowExtension = FILE_TYPE_WHITE_LIST.contains(suffix.toLowerCase());\n        // \u662f\u5426\u5141\u8bb8\u4e0a\u4f20\u7684\u6587\u4ef6\u7c7b\u578b\n        if (!isAllowExtension) {\n            throw new Exception(\"\u4e0a\u4f20\u5931\u8d25\uff0c\u5b58\u5728\u975e\u6cd5\u6587\u4ef6\u7c7b\u578b\uff1a\" + suffix);\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u6587\u4ef6\u540e\u7f00\u4fe1\u606f\n     */\n    private String getFileSuffix(String filename) {\n        return this.getFilenameExtension(filename).toLowerCase();\n    }\n\n    /**\n     * \u83b7\u5f97\u4e0a\u4f20\u6587\u4ef6\u7684\u6269\u5c55\u540d\n     * @param fileName \u6587\u4ef6\u540d\n     * @return \u8fd4\u56de\u6587\u4ef6\u7684\u6269\u5c55\u540d, \u5982\u679c\u6ca1\u6709\u6269\u5c55\u540d, \u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n     */\n    private String getFilenameExtension(String filename) {\n        if ((filename != null) && (filename.length() > 0)) {\n            int dotIndex = filename.lastIndexOf('.');\n            if ((dotIndex > -1) && (dotIndex < (filename.length() - 1))) {\n                return filename.substring(dotIndex + 1);\n            }\n        }\n        return \"\";\n    }\n}\n\n\n### Response:",
        "@ResponseBody\n@PostMapping(\"/bytesToHexStringTest\")\npublic String bytesToHexStringTest(@RequestParam(value = \"file\", required = false) MultipartFile file, HttpServletRequest request, HttpServletResponse response) throws Exception {\n    if (file != null && !file.isEmpty()) {\n        try {\n            String suffix = FileUtil.getFileType(file);\n            String fileExtendName = FileUtil.getFileTypeBySuffix(file.getOriginalFilename());\n            if (!StringUtils.isBlank(suffix) && !StringUtils.equalsIgnoreCase(suffix, fileExtendName)) {\n                return \"\u6587\u4ef6\u7c7b\u578b\u4e0d\u5339\u914d\";\n            }\n        } catch (Exception e) {\n            log.error(\"\u6587\u4ef6\u7c7b\u578b\u6821\u9a8c\u5931\u8d25: {}\", e);\n            return \"\u6587\u4ef6\u7c7b\u578b\u6821\u9a8c\u5931\u8d25\";\n        }\n    }\n    return \"success\";\n}",
        "@Slf4j(topic = \"ssrf\")\npublic class SsrfFileTypeFilter extends FileUploadBase.FileItemFilter implements Configurable {\n  private static final long serialVersionUID = -263194780915819639L;\n  \n  public static final String ALLOW_EXTENSIONS = \"allowExtensions\";\n  private static final List<String> FILE_TYPE_WHITE_LIST = new ArrayList<>();\n  private static final Map<String, String> FILE_TYPE_MAP = new HashMap<>();\n  private String[] allowExtension;\n  \n  public SsrfFileTypeFilter() {\n    try {\n      init();\n    } catch (ServletException e) {\n      log.error(e.getMessage(), e);\n    }\n  }\n  \n  @Override\n  protected boolean isAccepted(FileItem item) throws Exception {\n    if (!item.isFormField()) {\n      //\u83b7\u5f97\u6587\u4ef6\u540d\u79f0\u540e\u7f00\n      String suffix = getFileType(item);\n      \n      log.info(\"suffix:{}\", suffix);\n      boolean isAllowExtension = FILE_TYPE_WHITE_LIST.contains(suffix.toLowerCase());\n      //\u662f\u5426\u5141\u8bb8\u4e0b\u8f7d\u7684\u6587\u4ef6\n      if (!isAllowExtension) {\n        throw new Exception(\"\u4e0a\u4f20\u5931\u8d25\uff0c\u5b58\u5728\u975e\u6cd5\u6587\u4ef6\u7c7b\u578b\uff1a\" + suffix);\n      }\n    }\n    \n    return true;\n  }\n  \n  /**\n   * \u901a\u8fc7\u8bfb\u53d6\u6587\u4ef6\u5934\u90e8\u83b7\u5f97\u6587\u4ef6\u7c7b\u578b\n   *\n   * @param item\n   * @return \u6587\u4ef6\u7c7b\u578b\n   * @throws Exception\n   */\n  private static String getFileType(FileItem item) throws Exception {\n    //update-begin-author:liusq date:20230404 for: [issue/4672]\u65b9\u6cd5\u9020\u6210\u7684\u6587\u4ef6\u88ab\u5360\u7528\uff0c\u6ce8\u91ca\u6389\u6b64\u65b9\u6cd5tomcat\u5c31\u80fd\u81ea\u52a8\u6e05\u7406\u6389\u4e34\u65f6\u6587\u4ef6\n    String fileExtendName = null;\n    InputStream is = null;\n    try {\n      //is = new FileInputStream(item.getStoreLocation());\n      is = item.getInputStream();\n      byte[] b = new byte[10];\n      is.read(b, 0, b.length);\n      String fileTypeHex = String.valueOf(bytesToHexString(b));\n      Iterator<String> keyIter = FILE_TYPE_MAP.keySet().iterator();\n      while (keyIter.hasNext()) {\n        String key = keyIter.next();\n        // \u9a8c\u8bc1\u524d5\u4e2a\u5b57\u7b26\u6bd4\u8f83\n        if (key.toLowerCase().startsWith(fileTypeHex.toLowerCase().substring(0, 5))\n            || fileTypeHex.toLowerCase().substring(0, 5).startsWith(key.toLowerCase())) {\n          fileExtendName = FILE_TYPE_MAP.get(key);\n          break;\n        }\n      }\n      \n      // \u5982\u679c\u4e0d\u662f\u4e0a\u8ff0\u7c7b\u578b\uff0c\u5219\u5224\u65ad\u6269\u5c55\u540d\n      if (StringUtils.isBlank(fileExtendName)) {\n        String fileName = item.getName();\n        // \u5982\u679c\u65e0\u6269\u5c55\u540d\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u4e32\n        if (-1 == fileName.indexOf(\".\")) {\n          return \"\";\n        }\n        // \u5982\u679c\u6709\u6269\u5c55\u540d\uff0c\u5219\u8fd4\u56de\u6269\u5c55\u540d\n        return getFileTypeBySuffix(fileName);\n      }\n      \n      is.close();\n      return fileExtendName;\n    } catch (Exception e) {\n      log.error(e.getMessage(), e);\n      return \"\";\n    }finally {\n      if (is != null) {\n        is.close();\n      }\n    }\n    //update-end-author:liusq date:20230404 for: [issue/4672]\u65b9\u6cd5\u9020\u6210\u7684\u6587\u4ef6\u88ab\u5360\u7528\uff0ctomcat\u81ea\u52a8\u6e05\u7406\n  }\n  \n  @Override\n  public void init(FilterConfig filterConfig) throws ServletException {\n    this.allowExtension = StringUtils.split((String) filterConfig.get(\"allowExtensions\"));\n    \n    if (this.allowExtension == null || this.allowExtension.length < 1) {\n      return;\n    }\n    \n    for (int i = 0; i < this.allowExtension.length; i++) {\n      FILE_TYPE_WHITE_LIST.add(StringUtils.lowerCase((this.allowExtension[i])));\n      \n      String type = this.allowExtension[i];\n      //\u83b7\u53d6\u6587\u4ef6\u7c7b\u578b\u767d\u540d\u5355\n      InputStream inputStream = Thread.currentThread().getContextClassLoader()\n          .getResourceAsStream(\"META-INF/file-type-white-list.xml\");\n      \n      if (inputStream == null) {\n        throw new RuntimeException(String.format(\"\u6587\u4ef6\u7c7b\u578b\u767d\u540d\u5355%s\u4e0d\u5b58\u5728\", type));\n      }\n      \n      DocumentBuilder builder = DocumentBuilderFactory.newInstance();\n      \n      try {\n        Document document = builder.parse(inputStream);\n        \n        NodeList nodeList = document.getElementsByTagName(\"type\");\n        \n        for (int i = 0; i < nodeList.getLength(); i++) {\n          Element element = (Element) nodeList.item(i);\n          \n          if (\"file\".equalsIgnoreCase(element.getAttribute(\"name\"))) {\n            NodeList typeNodeList = element.getElementsByTagName(\"type\");\n            \n            for (int j = 0; j < typeNodeList.getLength(); j++) {\n              Element typeElement = (Element) typeNodeList.item(j);\n              \n              if (\"file\".equalsIgnoreCase(typeElement.getAttribute(\"name\"))) {\n                String[] types = StringUtils.split((String) typeElement.getTextContent(), \",\");\n                \n                for (int j = 0; j < types.length; j++) {\n                  FILE_TYPE_MAP.put(types[j], type);\n                }\n              }\n            }\n          }\n        }\n      } catch (ParserConfigurationException | SAXException e) {\n        throw new RuntimeException(\"\u83b7\u53d6\u6587\u4ef6\u7c7b\u578b\u767d\u540d\u5355\u51fa\u9519\", e);\n      }\n    }\n  }\n  \n  private void init() throws ServletException {\n    if (!FILE_TYPE_WHITE_LIST.isEmpty()) {\n      return;\n    }\n    \n    InputStream inputStream = Thread.currentThread().getContextClassLoader()\n        .getResourceAsStream(\"META-INF/file-type-white-list.xml\");\n    \n    if (inputStream == null) {\n      throw new ServletException(\"\u6587\u4ef6\u7c7b\u578b\u767d\u540d\u5355\u4e0d\u5b58\u5728\");\n    }\n    \n    DocumentBuilder builder = DocumentBuilderFactory.newInstance();\n    \n    try {\n      Document document = builder.parse(inputStream);\n      \n      NodeList nodeList = document.getElementsByTagName(\"type\");\n      \n      for (int i = 0; i < nodeList.getLength(); i++) {\n        Element element = (Element) nodeList.item(i);\n        \n        if (\"file\".equalsIgnoreCase(element.getAttribute(\"name\"))) {\n          NodeList typeNodeList = element.getElementsByTagName(\"type\");\n          \n          for (int j = 0; j < typeNodeList.getLength(); j++) {\n            Element typeElement = (Element) typeNodeList.item(j);\n            \n            if (\"file\".equalsIgnoreCase(typeElement.getAttribute(\"name\"))) {\n              String[] types = StringUtils.split((String) typeElement.getTextContent(), \",\");\n              \n              for (int j = 0; j < types.length; j++) {\n                FILE_TYPE_MAP.put(types[j], element.getAttribute(\"value\"));\n              }\n            }\n          }\n        }\n      }\n    } catch (ParserConfigurationException | SAXException e) {\n      throw new ServletException(\"\u83b7\u53d6\u6587\u4ef6\u7c7b\u578b\u767d\u540d\u5355\u51fa\u9519\", e);\n    }\n  }\n  \n  @Override\n  public void destroy() {\n    \n  }\n}",
        "import org.jeecg.common.util.filter.SsrfFileTypeFilter;\n\npublic class SsrfFileTypeFilterTest {\n    @Test\n    public void bytesToHexStringTest() {\n        // \u6a21\u62df\u4e00\u4e2a\u6587\u4ef6\uff0c\u6587\u4ef6\u540d\u4e3a12345678901234567890.java\uff0c\u6ce8\u610f\uff1a\u8fd9\u53ea\u662f\u4e00\u4e2a\u968f\u673a\u7684\u6587\u4ef6\u540d\n        MultipartFile file = new MockMultipartFile(\"file\", \"12345678901234567890.java\", null, \"Hello World!\".getBytes());\n        // \u9a8c\u8bc1\u662f\u5426\u80fd\u6b63\u5e38\u7684\u83b7\u53d6\u5230\u6587\u4ef6\u7c7b\u578b\n        try {\n            String suffix = SsrfFileTypeFilter.getFileType(file);\n            assertEquals(\"txt\", suffix);\n        } catch (Exception e) {\n            fail(e.getMessage());\n        }\n    }\n}\n",
        "import org.apache.commons.lang3.StringUtils;\nimport org.jeecg.common.util.filter.SsrfFileTypeFilter;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class SsrfFileTypeFilter {\n    @Test\n    public void bytesToHexString() throws Exception {\n        String fileExtendName = \"\";\n        InputStream is = null;\n        try {\n            //is = new FileInputStream(file);\n            byte[] b = new byte[10];\n            is.read(b, 0, b.length);\n            String fileTypeHex = String.valueOf(bytesToHexString(b));\n            Iterator<String> keyIter = FILE_TYPE_MAP.keySet().iterator();\n            while (keyIter.hasNext()) {\n                String key = keyIter.next();\n                // \u9a8c\u8bc1\u524d5\u4e2a\u5b57\u7b26\u6bd4\u8f83\n                if (key.toLowerCase().startsWith(fileTypeHex.toLowerCase().substring(0, 5))\n                        || fileTypeHex.toLowerCase().substring(0, 5).startsWith(key.toLowerCase())) {\n                    fileExtendName = FILE_TYPE_MAP.get(key);\n                    break;\n                }\n            }\n            // \u5982\u679c\u4e0d\u662f\u4e0a\u8ff0\u7c7b\u578b\uff0c\u5219\u5224\u65ad\u6269\u5c55\u540d\n            if (StringUtils.isBlank(fileExtendName)) {\n                String fileName = file.getOriginalFilename();\n                // \u5982\u679c\u65e0\u6269\u5c55\u540d\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u4e32\n                if (-1 == fileName.indexOf(\".\")) {\n                    return \"\";\n                }\n                // \u5982\u679c\u6709\u6269\u5c55\u540d\uff0c\u5219\u8fd4\u56de\u6269\u5c55\u540d\n                return getFileTypeBySuffix(fileName);\n            }\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n            return \"\";\n        } finally {\n            if (is != null) {\n                is.close();\n            }\n        }\n    }\n}",
        "package org.jeecg.common.util.filter;\n\nimport java.io.IOException;\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.multipart.MultipartHttpServletRequest;\n\npublic class SsrfFileTypeFilter extends AbstractFileTypeFilter {\n    public static final String FILTER_NAME = \"ssrfFileType\";\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        // \u5224\u65ad\u662f\u5426\u4e3aMultipart\u7c7b\u578b\u7684\u8868\u5355\n        if (!(request instanceof MultipartHttpServletRequest)) {\n            filterChain.doFilter(request, response);\n            return;\n        }\n        try {\n            // \u83b7\u53d6\u6587\u4ef6\u7c7b\u578b\n            String fileType = getFileType((MultipartHttpServletRequest) request);\n            log.info(\"-----\u83b7\u53d6\u5230\u7684\u6307\u5b9a\u6587\u4ef6\u7c7b\u578b------\"+fileType);\n            // \u662f\u5426\u5141\u8bb8\u4e0b\u8f7d\u7684\u6587\u4ef6\n            if (!FILE_TYPE_WHITE_LIST.contains(fileType)) {\n                response.setContentType(\"application/json;charset=UTF-8\");\n                response.getWriter().write(objectMapper.writeValueAsString(Result.error(\"\u60a8\u4e0a\u4f20\u7684\u6587\u4ef6\u7c7b\u578b\u4e0d\u5141\u8bb8\uff0c\u53ef\u4ee5\u4e0b\u8f7d \" + StringUtils.join(FILE_TYPE_WHITE_LIST, \",\"))));\n            } else {\n                filterChain.doFilter(request, response);\n            }\n        } catch (Exception e) {\n            log.error(\"SSRF\u653b\u51fb\u9632\u8303\u8fc7\u6ee4\u5668\u51fa\u73b0\u5f02\u5e38\", e);\n            throw new ServletException();\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u6587\u4ef6\u7c7b\u578b\n     *\n     * @param request\n     * @return \u6587\u4ef6\u7c7b\u578b\n     */\n    private String getFileType(MultipartHttpServletRequest request) {\n        Iterator<String> it = request.getFileNames();\n        MultipartFile file = null;\n        //\u83b7\u53d6\u7b2c\u4e00\u4e2a\u6587\u4ef6\uff0c\u540e\u7eed\u7684\u6f0f\u6d1e\u4e5f\u968f\u4e4b\u51fa\u73b0\u3002\n        while (it.hasNext()) {\n            String key = it.next();\n            file = request.getFile(key);\n        }\n        return fileType(file);\n    }\n}",
        "public static String bytesToHexString(byte[] src) {\n        StringBuilder stringBuilder = new StringBuilder();\n        if (src == null || src.length <= 0) {\n            return null;\n        }\n        for (int i = 0; i < src.length; i++) {\n            int v = src[i] & 0xFF;\n            String hv = Integer.toHexString(v);\n            if (hv.length() < 2) {\n                stringBuilder.append(0);\n            }\n            stringBuilder.append(hv);\n        }\n        return stringBuilder.toString();\n    }\n\n### Response:",
        "\n@RestControllerAdvice(basePackages = \"com.jeecg\")\npublic class GlobalExceptionHandler extends BaseExceptionHandler{\n    \n    @ExceptionHandler(value= Exception.class)\n    public Result<String> exceptionHandle(Exception e){\n        return new Result<>(HttpCodeEnum.SERVER_ERROR,e.getMessage());\n    }\n}\n\n\n### Controller:",
        "package org.jeecg.common.util.filter;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class SsrfFileTypeFilterTest {\n    @Test\n    public void bytesToHexStringTest() {\n        // Arrange\n        byte[] src = new byte[2];\n        String expected = \"0x4854\";\n        \n        // Act\n        String actual = SsrfFileTypeFilter.bytesToHexString(src);\n        \n        // Assert\n        assertEquals(expected, actual);\n    }\n}\n\n    "
    ]
}