{
    "project_name": "jfreechart",
    "file_name": "DatasetUtils.java",
    "relative_path": "jfreechart/src/main/java/org/jfree/data/general/DatasetUtils.java",
    "execute_path": "jfreechart",
    "package": "org.jfree.data.general",
    "docstring": "/**\n     * Calculates the total of all the values in a {@link PieDataset}.  If\n     * the dataset contains negative or {@code null} values, they are\n     * ignored.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The total.\n     */",
    "source_code": "\npublic static double calculatePieDatasetTotal(PieDataset dataset) {\n    Args.nullNotPermitted(dataset, \"dataset\");\n    List keys = dataset.getKeys();\n    double totalValue = 0;\n    Iterator iterator = keys.iterator();\n    while (iterator.hasNext()) {\n        Comparable current = (Comparable) iterator.next();\n        if (current != null) {\n            Number value = dataset.getValue(current);\n            double v = 0.0;\n            if (value != null) {\n                v = value.doubleValue();\n            }\n            if (v > 0) {\n                totalValue = totalValue + v;\n            }\n        }\n    }\n    return totalValue;\n}\n",
    "class_name": "DatasetUtils",
    "method_name": "calculatePieDatasetTotal",
    "arguments": [
        "PieDataset dataset"
    ],
    "generate_test": [
        "package org.jfree.data.general;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotal() {\n        PieDataset dataset = new DefaultPieDataset();\n        // Empty dataset should return 0\n        assertEquals(DatasetUtils.calculatePieDatasetTotal(dataset), 0);\n        \n        String item1 = \"Item1\";\n        double value1 = 50;\n        String item2 = \"Item2\";\n        double value2 = 75;\n        // Dataset with one item should return the same number\n        dataset.setValue(item1, value1);\n        assertEquals(DatasetUtils.calculatePieDatasetTotal(dataset), value1);\n        \n        // Dataset with two items should add them up\n        dataset.setValue(item2, value2);\n        double expected = value1 + value2;\n        assertEquals(DatasetUtils.calculatePieDatasetTotal(dataset), expected);\n    }\n}",
        "<FILL>\n\n    @Test\n    public void calculatePieDatasetTotal() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        assertEquals(0.0, DatasetUtils.calculatePieDatasetTotal(dataset));\n        dataset.setValue(\"Item 1\", 1.0);\n        assertEquals(1.0, DatasetUtils.calculatePieDatasetTotal(dataset));\n        dataset.setValue(\"Item 2\", 2.0);\n        assertEquals(3.0, DatasetUtils.calculatePieDatasetTotal(dataset));\n    }\n\n}",
        "package org.jfree.data.general;\nimport java.util.*;\npublic class DatasetUtils {\n    /**\n     * Calculates the total value for a PieDataset.\n     * @param dataset  the dataset ({@code null} not permitted).\n     * \n     * @return The total.\n     */\n    public static double calculatePieDatasetTotal(PieDataset dataset) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        List<String> keys = new ArrayList<>();\n        for (int s = 0; s < dataset.getItemCount(); s++) {\n            String key = dataset.getKey(s);\n            if (!keys.contains(key)) {\n                keys.add(key);\n            }\n        }\n        double total = 0.0;\n        for (String k : keys) {\n            total += dataset.getValue(k);\n        }\n        return total;\n    }\n}",
        "public class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        assertEquals(0.0, DatasetUtils.calculatePieDatasetTotal(dataset), 0.0);\n    \n        dataset.setValue(\"First\", 1.23);\n        assertEquals(1.23, DatasetUtils.calculatePieDatasetTotal(dataset), 0.0);\n    \n        dataset.setValue(\"Second\", -2.46);\n        assertEquals(-1.23, DatasetUtils.calculatePieDatasetTotal(dataset), 0.0);\n    }\n}",
        "package org.jfree.data.general;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // CASE 1: test a normal dataset with no missing values\n        PieDataset dataset = createNormalPieDataset();\n        double expectedValue = 25.0 + 43.0 + 76.5 + 82.8;\n        assertEquals(expectedValue, DatasetUtils.calculatePieDatasetTotal(dataset),\n                0.001);\n        \n        // CASE 2: test a dataset with missing values\n        PieDataset datasetWithMissingValues = createPieDatasetWithMissingValues();\n        expectedValue = 25.0 + 43.0 + 76.5;\n        assertEquals(expectedValue, DatasetUtils.calculatePieDatasetTotal(datasetWithMissingValues),\n                0.001);\n    }\n    \n    private PieDataset createNormalPieDataset() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Section 1\", 25.0);\n        dataset.setValue(\"Section 2\", 43.0);\n        dataset.setValue(\"Section 3\", 76.5);\n        dataset.setValue(\"Section 4\", 82.8);\n        return dataset;\n    }\n    \n    private PieDataset createPieDatasetWithMissingValues() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Section 1\", 25.0);\n        dataset.setValue(\"Section 2\", null); // missing value\n        dataset.setValue(\"Section 3\", 76.5);\n        dataset.setValue(\"Section 4\", Double.NaN); // NaN is considered a missing value\n        return dataset;\n    }\n}",
        "package org.jfree.data.general;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ValueSource;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotal_nullArgument() {\n        // given\n        PieDataset dataset = null;\n        \n        // when\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1.0, total);\n    }\n    \n    @Test\n    public void calculatePieDatasetTotal_emptyArgument() {\n        // given\n        PieDataset dataset = new DefaultPieDataset();\n        \n        // when\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        \n        // then\n        assertEquals(0.0, total);\n    }\n    \n    @Test\n    public void calculatePieDatasetTotal_oneItem() {\n        // given\n        PieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"A\", 1.23456789d);\n        \n        // when\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        \n        // then\n        assertEquals(1.23456789, total);\n    }\n    \n    @Test\n    public void calculatePieDatasetTotal_multipleItems() {\n        // given\n        PieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"A\", 1.23456789d);\n        dataset.setValue(\"B\", 2.34567890123d);\n        dataset.setValue(\"C\", -100d);\n        \n        // when\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        \n        // then\n        assertEquals(2.10507689, total);\n    }\n    \n    @Test\n    public void calculateStackedBarDatasetTotal_nullArgument() {\n        // given\n        StackedBarDataset dataset = null;\n        \n        // when\n        double[] totals = DatasetUtils.calculateStackedBarDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateStackedBarDatasetTotal_emptyArgument() {\n        // given\n        StackedBarDataset dataset = new DefaultStackedBarDataset();\n        \n        // when\n        double[] totals = DatasetUtils.calculateStackedBarDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateStackedBarDatasetTotal_oneItem() {\n        // given\n        StackedBarDataset dataset = new DefaultStackedBarDataset();\n        dataset.setValue(\"A\", 1d);\n        \n        // when\n        double[] totals = DatasetUtils.calculateStackedBarDatasetTotal(dataset);\n        \n        // then\n        assertEquals(1, totals[0]);\n    }\n    \n    @Test\n    public void calculateStackedBarDatasetTotal_multipleItems() {\n        // given\n        StackedBarDataset dataset = new DefaultStackedBarDataset();\n        dataset.setValue(\"A\", 1d);\n        dataset.setValue(\"B\", -234567890123d);\n        \n        // when\n        double[] totals = DatasetUtils.calculateStackedBarDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-2.3456789E11, totals[0]);\n    }\n    \n    @Test\n    public void calculateStackedBarDatasetTotal_multipleItemsAndSeries() {\n        // given\n        StackedBarDataset dataset = new DefaultStackedBarDataset();\n        dataset.setValue(\"A\", 1d);\n        dataset.addChangeListener(null);\n        \n        // when\n        double[] totals = DatasetUtils.calculateStackedBarDatasetTotal(dataset);\n        \n        // then\n        assertEquals(1, totals[0]);\n    }\n    \n    @ParameterizedTest\n    @ValueSource(ints = {-1, 0, 1})\n    public void calculateStackedBarDatasetTotal_invalidSeriesIndex(int series) {\n        // given\n        StackedBarDataset dataset = new DefaultStackedBarDataset();\n        \n        // when\n        double[] totals = DatasetUtils.calculateStackedBarDatasetTotal(dataset, series);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateStackedBarDatasetTotal_oneItemAndSeriesIndex() {\n        // given\n        StackedBarDataset dataset = new DefaultStackedBarDataset();\n        dataset.setValue(\"A\", 1d);\n        \n        // when\n        double[] totals = DatasetUtils.calculateStackedBarDatasetTotal(dataset, 0);\n        \n        // then\n        assertEquals(1, totals[0]);\n    }\n    \n    @Test\n    public void calculateStackedBarDatasetTotal_multipleItemsAndSeriesIndex() {\n        // given\n        StackedBarDataset dataset = new DefaultStackedBarDataset();\n        dataset.setValue(\"A\", 1d);\n        dataset.addChangeListener(null);\n        \n        // when\n        double[] totals = DatasetUtils.calculateStackedBarDatasetTotal(dataset, 0);\n        \n        // then\n        assertEquals(1, totals[0]);\n    }\n    \n    @Test\n    public void calculateCategoryDatasetTotal_nullArgument() {\n        // given\n        CategoryDataset dataset = null;\n        \n        // when\n        double total = DatasetUtils.calculateCategoryDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1, total);\n    }\n    \n    @Test\n    public void calculateCategoryDatasetTotal_emptyArgument() {\n        // given\n        CategoryDataset dataset = new DefaultCategoryDataset();\n        \n        // when\n        double total = DatasetUtils.calculateCategoryDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1, total);\n    }\n    \n    @Test\n    public void calculateCategoryDatasetTotal_oneItem() {\n        // given\n        CategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.setValue(\"A\", \"B\", 1d);\n        \n        // when\n        double total = DatasetUtils.calculateCategoryDatasetTotal(dataset);\n        \n        // then\n        assertEquals(1, total);\n    }\n    \n    @Test\n    public void calculateCategoryDatasetTotal_multipleItems() {\n        // given\n        CategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.setValue(\"A\", \"B\", 1d);\n        dataset.addChangeListener(null);\n        \n        // when\n        double total = DatasetUtils.calculateCategoryDatasetTotal(dataset);\n        \n        // then\n        assertEquals(1, total);\n    }\n    \n    @Test\n    public void calculateTableXYDataset_nullArgument() {\n        // given\n        TableXYDataset dataset = null;\n        \n        // when\n        double[] totals = DatasetUtils.calculateTableXYDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateTableXYDataset_emptyArgument() {\n        // given\n        TableXYDataset dataset = new DefaultTableXYDataset();\n        \n        // when\n        double[] totals = DatasetUtils.calculateTableXYDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateTableXYDataset_oneItem() {\n        // given\n        TableXYDataset dataset = new DefaultTableXYDataset();\n        dataset.addValue(1d, \"A\", \"B\");\n        \n        // when\n        double[] totals = DatasetUtils.calculateTableXYDatasetTotal(dataset);\n        \n        // then\n        assertEquals(1, totals[0]);\n    }\n    \n    @Test\n    public void calculateTableXYDataset_multipleItems() {\n        // given\n        TableXYDataset dataset = new DefaultTableXYDataset();\n        dataset.addValue(1d, \"A\", \"B\");\n        dataset.addChangeListener(null);\n        \n        // when\n        double[] totals = DatasetUtils.calculateTableXYDatasetTotal(dataset);\n        \n        // then\n        assertEquals(1, totals[0]);\n    }\n    \n    @Test\n    public void calculateXYSeriesDataset_nullArgument() {\n        // given\n        XYSeriesCollection dataset = null;\n        \n        // when\n        double[] totals = DatasetUtils.calculateXYSeriesDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateXYSeriesDataset_emptyArgument() {\n        // given\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        \n        // when\n        double[] totals = DatasetUtils.calculateXYSeriesDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateXYSeriesDataset_oneItem() {\n        // given\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.add(new XYSeries(\"A\"));\n        \n        // when\n        double[] totals = DatasetUtils.calculateXYSeriesDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateXYSeriesDataset_multipleItems() {\n        // given\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.add(new XYSeries(\"A\"));\n        \n        // when\n        double[] totals = DatasetUtils.calculateXYSeriesDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateXYSeriesDataset_oneItemAndSeriesIndex() {\n        // given\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.add(new XYSeries(\"A\"));\n        \n        // when\n        double[] totals = DatasetUtils.calculateXYSeriesDatasetTotal(dataset, 0);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateXYSeriesDataset_multipleItemsAndSeriesIndex() {\n        // given\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.add(new XYSeries(\"A\"));\n        \n        // when\n        double[] totals = DatasetUtils.calculateXYSeriesDatasetTotal(dataset, 0);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateIntervalXYDataSet_nullArgument() {\n        // given\n        IntervalXYDataset dataset = null;\n        \n        // when\n        double[] totals = DatasetUtils.calculateIntervalXYDataSetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateIntervalXYDataSet_emptyArgument() {\n        // given\n        IntervalXYDataset dataset = new DefaultIntervalXYDataset();\n        \n        // when\n        double[] totals = DatasetUtils.calculateIntervalXYDataSetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateIntervalXYDataSet_oneItem() {\n        // given\n        IntervalXYDataset dataset = new DefaultIntervalXYDataset();\n        dataset.add(1d, 2d);\n        \n        // when\n        double[] totals = DatasetUtils.calculateIntervalXYDataSetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateIntervalXYDataSet_multipleItems() {\n        // given\n        IntervalXYDataset dataset = new DefaultIntervalXYDataset();\n        dataset.add(1d, 2d);\n        \n        // when\n        double[] totals = DatasetUtils.calculateIntervalXYDataSetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateCategoryTableXYDataset_nullArgument() {\n        // given\n        CategoryTableXYDataset dataset = null;\n        \n        // when\n        double[] totals = DatasetUtils.calculateCategoryTableXYDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateCategoryTableXYDataset_emptyArgument() {\n        // given\n        CategoryTableXYDataset dataset = new DefaultCategoryTableXYDataset();\n        \n        // when\n        double[] totals = DatasetUtils.calculateCategoryTableXYDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateCategoryTableXYDataset_oneItem() {\n        // given\n        CategoryTableXYDataset dataset = new DefaultCategoryTableXYDataset();\n        dataset.addValue(1d, \"A\", \"B\");\n        \n        // when\n        double[] totals = DatasetUtils.calculateCategoryTableXYDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateCategoryTableXYDataset_multipleItems() {\n        // given\n        CategoryTableXYDataset dataset = new DefaultCategoryTableXYDataset();\n        dataset.addValue(1d, \"A\", \"B\");\n        \n        // when\n        double[] totals = DatasetUtils.calculateCategoryTableXYDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateIntervalCategoryDataset_nullArgument() {\n        // given\n        IntervalCategoryDataset dataset = null;\n        \n        // when\n        double[] totals = DatasetUtils.calculateIntervalCategoryDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateIntervalCategoryDataset_emptyArgument() {\n        // given\n        IntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n        \n        // when\n        double[] totals = DatasetUtils.calculateIntervalCategoryDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateIntervalCategoryDataset_oneItem() {\n        // given\n        IntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n        dataset.addValue(1d, \"A\", \"B\");\n        \n        // when\n        double[] totals = DatasetUtils.calculateIntervalCategoryDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n    @Test\n    public void calculateIntervalCategoryDataset_multipleItems() {\n        // given\n        IntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n        dataset.addValue(1d, \"A\", \"B\");\n        \n        // when\n        double[] totals = DatasetUtils.calculateIntervalCategoryDatasetTotal(dataset);\n        \n        // then\n        assertEquals(-1, totals[0]);\n    }\n    \n}",
        "package org.jfree.data.general;\n\nimport java.util.Arrays;\nimport static org.junit.Assert.*;\nimport org.junit.Test;\n\npublic class DatasetUtilsTest {\n    \n    @Test\n    public void calculatePieDatasetTotalTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        assertEquals(0, DatasetUtils.calculatePieDatasetTotal(dataset), 0);\n        \n        dataset.setValue(\"Key 1\", 5.0);\n        dataset.setValue(\"Key 2\", -4.9);\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(5.0, total, 0);\n    }\n}",
        "\n@Test\n    public void calculatePieDatasetTotalTest() {\n        PieDataset dataset = new DefaultPieDataset();\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(0, total);\n        \n        dataset.setValue(\"A\", 1.23456789);\n        total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(1.23456789, total);\n    }\n}",
        "package org.jfree.data.general;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        PieDataset dataset = new DefaultPieDataset();\n        assertEquals(0, DatasetUtils.calculatePieDatasetTotal(dataset), 1e-6);\n        dataset.setValue(\"A\", 23.4);\n        dataset.setValue(\"B\", -56.78);\n        assertEquals(17.38, DatasetUtils.calculatePieDatasetTotal(dataset), 1e-6);\n    }\n}",
        "package org.jfree.data;\n\nimport org.junit.jupiter.api.*;\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotal() {\n        PieDataset dataset = new DefaultPieDataset();\n        assertEquals(0, DatasetUtils.calculatePieDatasetTotal(dataset), 0.1);\n        \n        dataset.setValue(\"Series 1\", \"Category 1\", 25.0);\n        assertEquals(25, DatasetUtils.calculatePieDatasetTotal(dataset), 0.1);\n    }\n}\n"
    ]
}