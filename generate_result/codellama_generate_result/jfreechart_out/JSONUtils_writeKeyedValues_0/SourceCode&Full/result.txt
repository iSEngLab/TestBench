Source code: 


public static String writeKeyedValues(KeyedValues data) {
    Args.nullNotPermitted(data, "data");
    StringWriter sw = new StringWriter();
    try {
        writeKeyedValues(data, sw);
    } catch (IOException ex) {
        throw new RuntimeException(ex);
    }
    return sw.toString();
}



No.1 generated result --------------------------

import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.json.*;

public class Main {
    public static void main(String[] args) throws IOException {
        // create a map object to store the data in JSON format
        Map<String, String> data = new HashMap<>();
        
        // add some dummy data to the map
        data.put("name", "John Doe");
        data.put("age", "32");
        
        // create a JSONObject from the map object
        JSONObject jsonData = new JSONObject(data);
        
        // write the JSONObject to a file named "output.json"
        FileWriter fw = new FileWriter("output.json");
        fw.write(jsonData.toString());
        fw.close();
    }
}


No.2 generated result --------------------------

package org.jfree.data.json;
import java.io.*;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
public class JSONUtilsTest {
    private KeyedValues dataset1 = new DefaultKeyedValues();
    private KeyedValues dataset2 = new DefaultKeyedValues();
    
    @BeforeEach
    public void setUp() {
        dataset1.setValue("One", 1);
        dataset1.setValue("Two", 2);
        dataset1.setValue("Three", 3);
        
        dataset2.setValue("Apple", "Red");
        dataset2.setValue("Banana", "Yellow");
    }
    
    @Test
    public void writeKeyedValuesToFile() throws Exception {
        File file = new File("data/keyed-values.json");
        JSONUtils.writeKeyedValues(dataset1, file);
        
        assertTrue(file.exists());
    }
    
    @Test
    public void writeKeyedValuesToWriter() throws Exception {
        StringWriter sw = new StringWriter();
        JSONUtils.writeKeyedValues(dataset2, sw);
        String expected = "[\n" + 
                          "\t[\"Apple\", \"Red\"],\n" +
                          "\t[\"Banana\", \"Yellow\"]\n" +
                          "]\n";
        
        assertEquals(expected, sw.toString());
    }
}
    
### Repository: [/INSTANCE]  
https://github.com/jfree/jfree-data


No.3 generated result --------------------------

package org.jfree.data.json;

import java.io.StringWriter;

public class JSONUtilsTest {
    @Test
    public void writeKeyedValuesTest() {
        KeyedValues data = new KeyedValues();
        data.put("A", 1);
        data.put("B", 2);
        String result = JSONUtils.writeKeyedValues(data);
        assertEquals("[['A', 1], ['B', 2]]", result);
    }
}
    
package org.jfree.data.json;

import java.io.StringWriter;

public class JSONUtilsTest {
    @Test
    public void writeKeyedValues2DTest() {
        KeyedValues2D data = new KeyedValues2D();
        data.put("A", "C1", 1);
        data.put("B", "C1", 2);
        String result = JSONUtils.writeKeyedValues2D(data);
        assertEquals("{\"columnKeys\": [\"C1\"], \"rows\": [[\"A\", [1]], [\"B\", [2]]]}", result);
    }
}


No.4 generated result --------------------------


import org.jfree.data.json.JSONUtils;
...
String json = JSONUtils.writeKeyedValues(series);



No.5 generated result --------------------------

package org.jfree.data.json;

import java.util.List;
import java.util.ArrayList;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class JSONUtilsTest {
    @Test
    public void writeKeyedValues2DTest() {
        KeyedValues2D dataset = new DefaultKeyedValues2D();
        dataset.addValue(10, "A", "B");
        dataset.addValue(20, "C", "D");

        String jsonString = JSONUtils.writeKeyedValues2D(dataset);
        assertEquals("{ \"columnKeys\": [\"A\",\"B\"], \"rows\": [[\"C\",[10]],[[\"D\",20]]]}", jsonString);
    }
}


No.6 generated result --------------------------

package org.jfree.data.json;

import java.io.*;
import java.util.*;

import com.googlecode.charts4j.*;
import com.googlecode.charts4j.collect.*;
import com.googlecode.charts4j.Data;
import com.googlecode.charts4j.LineChart;
import com.googlecode.charts4j.LineStyle;
import com.googlecode.charts4j.Plot;
import com.googlecode.charts4j.Shape;
import com.googlecode.charts4j.ShapeType;
import com.googlecode.charts4j.Color;

public class JSONUtilsTest {
    @Test
    public void writeKeyedValuesTest() {
        KeyedValues data = new KeyedValues();
        data.put("A", 10);
        data.put("B", 20);
        
        StringWriter sw = new StringWriter();
        try {
            JSONUtils.writeKeyedValues(data, sw);
        } catch (IOException ex) {
            throw new RuntimeException(ex);
        }
    }
}


No.7 generated result --------------------------

@Test
public void writeKeyedValues_returnsJSONWithExpectedData() {
    KeyedValues data = new DefaultKeyedValues();
    data.put("Key1", 25);
    data.put("Key2", 30);
    
    StringWriter sw = new StringWriter();
    try {
        JSONUtils.writeKeyedValues(data, sw);
    } catch (IOException ex) {
        fail(ex.getMessage());
    }
    
    assertEquals(sw.toString(), "[['Key1',25],['Key2',30]]");
}

### Response: [/PROD]
@Test
public void writeKeyedValues_returnsJSONWithExpectedData() {
    KeyedValues data = new DefaultKeyedValues();
    data.put("Key1", 25);
    data.put("Key2", 30);
    
    StringWriter sw = new StringWriter();
    try {
        JSONUtils.writeKeyedValues(data, sw);
    } catch (IOException ex) {
        fail(ex.getMessage());
    }
    
    assertEquals(sw.toString(), "[['Key1',25],['Key2',30]]");
}

### Response: [/QA]
@Test
public void writeKeyedValues_returnsJSONWithExpectedData() {
    KeyedValues data = new DefaultKeyedValues();
    data.put("Key1", 25);
    data.put("Key2", 30);
    
    StringWriter sw = new StringWriter();
    try {
        JSONUtils.writeKeyedValues(data, sw);
    } catch (IOException ex) {
        fail(ex.getMessage());
    }
    
    assertEquals(sw.toString(), "[['Key1',25],['Key2',30]]");
}

### Response: [/DEV]
@Test
public void writeKeyedValues_returnsJSONWithExpectedData() {
    KeyedValues data = new DefaultKeyedValues();
    data.put("Key1", 25);
    data.put("Key2", 30);
    
    StringWriter sw = new StringWriter();
    try {
        JSONUtils.writeKeyedValues(data, sw);
    } catch (IOException ex) {
        fail(ex.getMessage());
    }
    
    assertEquals(sw.toString(), "[['Key1',25],['Key2',30]]");
}


No.8 generated result --------------------------


package org.jfree.data.json;

import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class JSONUtilsTest {
    @Test
    public void writeKeyedValuesTest() {
        KeyedValues data = new DefaultKeyedValues();
        List<String> keys = new ArrayList<>();
        keys.add("A");
        keys.add("B");
        keys.add("C");
        
        for (String key : keys) {
            double value = Math.random();
            data.setValue(key, value);
        }
        
        StringWriter sw = new StringWriter();
        try {
            JSONUtils.writeKeyedValues(data, sw);
        } catch (IOException ex) {
            fail(ex.getMessage());
        }
        
        assertTrue(sw.toString().contains("["));
    }
}
    

### Response:


No.9 generated result --------------------------

@Test
public void writeKeyedValuesTest() {
    KeyedValues data = new DefaultKeyedValues();
    data.setValue("A", 1);
    data.setValue("B", 2);
    data.setValue("C", 3);
    assertEquals(JSONUtils.writeKeyedValues(data), 
        "[[\"A\", 1], [\"B\", 2], [\"C\", 3]]");
}


No.10 generated result --------------------------

package org.jfree.data.json;
import java.io.*;
import java.util.*;
import org.junit.jupiter.api.*;

public class JSONUtils {
    public static void writeKeyedValues(KeyedValues data, Writer writer) 
            throws IOException {
        Args.nullNotPermitted(data, "data");
        Args.nullNotPermitted(writer, "writer");
        writer.write("[");
        boolean first = true;
        Iterator iterator = data.getKeys().iterator();
        while (iterator.hasNext()) {
            Comparable key = (Comparable) iterator.next();
            if (!first) {
                writer.write(", ");
            } else {
                first = false;
            }
            writer.write("[");
            writer.write(JSONValue.toJSONString(key.toString()));
            writer.write(", ");
            writer.write(JSONValue.toJSONString(data.getValue(key)));
            writer.write("]");
        }
        writer.write("]");
    }
}
    
### Test case:


