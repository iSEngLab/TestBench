{
    "project_name": "jfreechart",
    "file_name": "JSONUtils.java",
    "relative_path": "jfreechart/src/main/java/org/jfree/data/json/JSONUtils.java",
    "execute_path": "jfreechart",
    "package": "org.jfree.data.json",
    "docstring": "/**\n     * Returns a string containing the data in JSON format.  The format is\n     * an array of arrays, where each sub-array represents one data value.\n     * The sub-array should contain two items, first the item key as a string\n     * and second the item value as a number.  For example:\n     * {@code [[\"Key A\", 1.0], [\"Key B\", 2.0]]}\n     * <br><br>\n     * Note that this method can be used with instances of {@link PieDataset}.\n     * \n     * @param data  the data ({@code null} not permitted).\n     * \n     * @return A string in JSON format. \n     */",
    "source_code": "\npublic static String writeKeyedValues(KeyedValues data) {\n    Args.nullNotPermitted(data, \"data\");\n    StringWriter sw = new StringWriter();\n    try {\n        writeKeyedValues(data, sw);\n    } catch (IOException ex) {\n        throw new RuntimeException(ex);\n    }\n    return sw.toString();\n}\n",
    "class_name": "JSONUtils",
    "method_name": "writeKeyedValues",
    "arguments": [
        "KeyedValues data"
    ],
    "generate_test": [
        "\npackage org.jfree.data.json;\n\nimport java.io.IOException;\nimport java.io.StringWriter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() throws IOException {\n        KeyedValues data = new KeyedValues();\n        StringWriter sw = new StringWriter();\n        \n        // Add some key-value pairs to the data object\n        data.addValue(\"key1\", \"value1\");\n        data.addValue(\"key2\", \"value2\");\n        data.addValue(\"key3\", \"value3\");\n        \n        // Write the data object to the string writer using the writeKeyedValues method\n        JSONUtils.writeKeyedValues(data, sw);\n        \n        // Check that the expected output is produced by the writeKeyedValues method\n        assertEquals(\"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":\\\"value2\\\",\\\"key3\\\":\\\"value3\\\"}\", sw.toString());\n    }\n}",
        "\npackage org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues data = new KeyedValues();\n        data.addValue(\"key1\", 1);\n        data.addValue(\"key2\", 2);\n        data.addValue(\"key3\", 3);\n\n        StringWriter sw = new StringWriter();\n        JSONUtils.writeKeyedValues(data, sw);\n        assertEquals(\"{\\\"key1\\\":1,\\\"key2\\\":2,\\\"key3\\\":3}\", sw.toString());\n    }\n}",
        "\n@Test\npublic void writeKeyedValuesTest() {\n    KeyedValues data = new KeyedValues();\n    StringWriter sw = new StringWriter();\n    JSONUtils.writeKeyedValues(data, sw);\n    assertEquals(\"{\\\"values\\\":[]}\", sw.toString());\n}",
        "\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a KeyedValues instance to test the method with\n        KeyedValues data = new KeyedValues();\n        \n        // Add some key-value pairs to the KeyedValues instance\n        data.addValue(\"key1\", \"value1\");\n        data.addValue(\"key2\", \"value2\");\n        data.addValue(\"key3\", \"value3\");\n        \n        // Call the writeKeyedValues method with the created KeyedValues instance and a StringWriter as arguments\n        StringWriter sw = new StringWriter();\n        JSONUtils.writeKeyedValues(data, sw);\n        \n        // Convert the written data to a String\n        String writtenData = sw.toString();\n        \n        // Verify that the written data is in the expected format\n        assertEquals(\"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":\\\"value2\\\",\\\"key3\\\":\\\"value3\\\"}\", writtenData);\n    }\n}",
        "import org.jfree.data.json.JSONUtils;\nimport java.io.StringWriter;\n\npublic class Example {\n    public static void main(String[] args) {\n        KeyedValues keyedValues = new KeyedValues();\n        keyedValues.put(\"key1\", \"value1\");\n        keyedValues.put(\"key2\", \"value2\");\n        \n        StringWriter sw = new StringWriter();\n        JSONUtils.writeKeyedValues(keyedValues, sw);\n        System.out.println(sw.toString()); // {\"key1\":\"value1\",\"key2\":\"value2\"}\n    }\n}",
        "\npackage org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues data = new KeyedValues();\n        data.addValue(\"A\", 1);\n        data.addValue(\"B\", 2);\n        data.addValue(\"C\", 3);\n        \n        StringWriter sw = new StringWriter();\n        JSONUtils.writeKeyedValues(data, sw);\n        assertEquals(\"{\\\"A\\\":1,\\\"B\\\":2,\\\"C\\\":3}\", sw.toString());\n    }\n}",
        "package org.jfree.data.json;\n\nimport static org.junit.Assert.*;\nimport org.junit.Test;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport org.jfree.chart.util.Args;\nimport org.jfree.data.KeyedValues;\nimport org.jfree.data.json.impl.JSONValue;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() throws IOException {\n        // Test null data parameter\n        KeyedValues data = null;\n        StringWriter sw = new StringWriter();\n        assertThrows(NullPointerException.class, () -> {\n            JSONUtils.writeKeyedValues(data);\n        });\n        \n        // Test non-null data parameter with empty key/value pairs\n        data = new KeyedValues();\n        assertEquals(\"{}\", JSONUtils.writeKeyedValues(data));\n        \n        // Test non-null data parameter with one or more key/value pairs\n        data = new KeyedValues();\n        data.put(\"key1\", \"value1\");\n        data.put(\"key2\", \"value2\");\n        assertEquals(\"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":\\\"value2\\\"}\", JSONUtils.writeKeyedValues(data));\n        \n        // Test IOException thrown during writing process\n        StringWriter sw = new StringWriter();\n        sw.close();\n        data = new KeyedValues();\n        assertThrows(IOException.class, () -> {\n            JSONUtils.writeKeyedValues(data, sw);\n        });\n    }\n}",
        "package org.jfree.data.json;\n\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues data = new KeyedValues();\n        StringWriter sw = new StringWriter();\n        try {\n            JSONUtils.writeKeyedValues(data, sw);\n        } catch (IOException ex) {\n            fail(\"Exception thrown while writing to StringWriter: \" + ex.getMessage());\n        }\n        \n        assertEquals(\"{\", sw.toString(), \"Incorrect output for KeyedValues\");\n    }\n}",
        "\n@Test\npublic void writeKeyedValuesTest() {\n    KeyedValues data = new KeyedValues();\n    data.addValue(\"key1\", 1);\n    data.addValue(\"key2\", 2);\n    StringWriter sw = new StringWriter();\n    JSONUtils.writeKeyedValues(data, sw);\n    assertEquals(\"{\\\"key1\\\":1,\\\"key2\\\":2}\", sw.toString());\n}",
        "package org.jfree.data.json;\n\nimport java.io.IOException;\nimport java.io.StringWriter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() throws IOException {\n        KeyedValues data = new KeyedValues();\n        data.addValue(\"Key1\", \"Value1\");\n        data.addValue(\"Key2\", \"Value2\");\n        StringWriter sw = new StringWriter();\n        JSONUtils.writeKeyedValues(data, sw);\n        assertEquals(\"{\\\"values\\\":[\\\"Value1\\\",\\\"Value2\\\"]}\", sw.toString());\n    }\n}"
    ]
}