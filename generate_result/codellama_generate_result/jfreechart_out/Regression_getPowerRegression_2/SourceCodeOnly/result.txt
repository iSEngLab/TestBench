Source code: 


public static double[] getPowerRegression(double[][] data) {

    int n = data.length;
    if (n < 2) {
        throw new IllegalArgumentException("Not enough data.");
    }

    double sumX = 0;
    double sumY = 0;
    double sumXX = 0;
    double sumXY = 0;
    for (int i = 0; i < n; i++) {
        double x = Math.log(data[i][0]);
        double y = Math.log(data[i][1]);
        sumX += x;
        sumY += y;
        double xx = x * x;
        sumXX += xx;
        double xy = x * y;
        sumXY += xy;
    }
    double sxx = sumXX - (sumX * sumX) / n;
    double sxy = sumXY - (sumX * sumY) / n;
    double xbar = sumX / n;
    double ybar = sumY / n;

    double[] result = new double[2];
    result[1] = sxy / sxx;
    result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);

    return result;

}



No.1 generated result --------------------------


package org.jfree.data.statistics;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void getPowerRegressionTest() {
        double[][] data = new double[5][2];
        data[0] = new double[]{1, 1};
        data[1] = new double[]{2, 4};
        data[2] = new double[]{3, 9};
        data[3] = new double[]{4, 16};
        data[4] = new double[]{5, 25};
        
        double[] result = Regression.getPowerRegression(data);
        assertEquals(result[0], 1.0, 0.01);
        assertEquals(result[1], 3.0, 0.01);
    }
}


No.2 generated result --------------------------


package org.jfree.data.statistics;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void getPowerRegressionTest() {
        double[][] data = {{1, 2}, {3, 4}, {5, 6}};
        double[] result = Regression.getPowerRegression(data);
        assertArrayEquals(new double[]{Math.log(2), Math.log(3)}, result, 0.0001);
    }
}


No.3 generated result --------------------------


public class RegressionTest {
    @Test
    public void getPowerRegressionTest() {
        double[][] data = new double[2][];
        data[0] = new double[] { 1, 4 };
        data[1] = new double[] { 2, 8 };
        double[] result = Regression.getPowerRegression(data);
        assertEquals(result[0], Math.pow(Math.exp(1.0), 3));
        assertEquals(result[1], 4);
    }
}


No.4 generated result --------------------------

package org.jfree.data.statistics;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void getPowerRegressionTest() {
        // Create test data
        double[][] data = new double[4][2];
        data[0] = new double[]{1, 1};
        data[1] = new double[]{2, 2};
        data[2] = new double[]{3, 3};
        data[3] = new double[]{4, 4};

        // Call the method under test
        double[] result = Regression.getPowerRegression(data);

        // Verify that the expected result is returned
        assertEquals(result[0], Math.pow(Math.exp(1.0), data[2][1] - result[1] * data[2][0]));
    }
}


No.5 generated result --------------------------


import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void getPowerRegressionTest() {
        double[][] data = {{1, 2}, {2, 4}, {3, 6}};
        double[] result = getPowerRegression(data);
        assertArrayEquals(result, new double[]{Math.pow(Math.exp(1), 0.5), Math.pow(Math.exp(1), 1)}, 0.001);
    }
}


No.6 generated result --------------------------


package org.jfree.data.statistics;

import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void getPowerRegressionTest() {
        // Create data to test the method with
        double[][] data = new double[][] {{1, 2}, {2, 4}, {3, 6}};

        // Call the method and store the result in a variable
        double[] result = Regression.getPowerRegression(data);

        // Check that the result is not null
        assertNotNull(result);

        // Check that the result has two elements
        assertEquals(2, result.length);

        // Check that the first element of the result is within a certain range
        double expectedX = Math.log(data[0][0]);
        double actualX = result[1];
        double deltaX = Math.abs(expectedX - actualX);
        assertTrue(deltaX <= 0.01);

        // Check that the second element of the result is within a certain range
        double expectedY = Math.log(data[0][1]);
        double actualY = result[0];
        double deltaY = Math.abs(expectedY - actualY);
        assertTrue(deltaY <= 0.01);
    }
}



No.7 generated result --------------------------

import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void getPowerRegressionTest() {
        double[][] data = new double[][]{{1, 2}, {2, 4}, {3, 6}};
        double[] result = Regression.getPowerRegression(data);
        
        // Check if the slope is correct
        assertEquals(result[0], 2.0, 0.001);
        
        // Check if the y-intercept is correct
        assertEquals(result[1], 1.0, 0.001);
    }
}


No.8 generated result --------------------------


@Test
public void getPowerRegressionTest() {
    double[][] data = {{1.0, 2.0}, {2.0, 4.0}, {3.0, 6.0}};
    double[] result = Regression.getPowerRegression(data);
    assertEquals(result[0], Math.pow(Math.exp(1.0), 3.0 - result[1] * 2.5));
}


No.9 generated result --------------------------

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void getPowerRegressionTest() {
        double[][] data = new double[2][2];
        data[0][0] = 1; // X1
        data[0][1] = 4; // Y1
        data[1][0] = 2; // X2
        data[1][1] = 9; // Y2

        double[] expectedResult = new double[2];
        expectedResult[0] = Math.pow(Math.exp(1), -1); // intercept
        expectedResult[1] = 1 / Math.log(4); // slope

        double[] actualResult = Regression.getPowerRegression(data);

        assertArrayEquals(expectedResult, actualResult, 0.0001);
    }
}


No.10 generated result --------------------------


package org.jfree.data.statistics;

import static org.junit.Assert.*;
import org.junit.Test;

public class RegressionTest {
    @Test
    public void getPowerRegressionTest() {
        double[][] data = new double[][] {{1, 2}, {3, 4}, {5, 6}};
        double[] result = Regression.getPowerRegression(data);
        assertEquals(0.8660254, result[0], 0.000001); // intercept
        assertEquals(-0.7320508, result[1], 0.000001); // slope
    }
}



