{
    "project_name": "zxing",
    "file_name": "BitArray.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/common/BitArray.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.common",
    "docstring": "/**\n   * @param from first bit to check\n   * @return index of first bit that is set, starting from the given index, or size if none are set\n   *  at or beyond this given index\n   * @see #getNextUnset(int)\n   */",
    "source_code": "\npublic int getNextSet(int from) {\n  if (from >= size) {\n    return size;\n  }\n  int bitsOffset = from / 32;\n  int currentBits = bits[bitsOffset];\n  // mask off lesser bits first\n  currentBits &= -(1 << (from & 0x1F));\n  while (currentBits == 0) {\n    if (++bitsOffset == bits.length) {\n      return size;\n    }\n    currentBits = bits[bitsOffset];\n  }\n  int result = (bitsOffset * 32) + Integer.numberOfTrailingZeros(currentBits);\n  return Math.min(result, size);\n}\n",
    "class_name": "BitArray",
    "method_name": "getNextSet",
    "arguments": [
        "int from"
    ],
    "generate_test": [
        "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.Test;\n\npublic class BitArrayTest {\n    @Test\n    public void getNextSet() {\n        // create a new BitArray with size 32 and initialize all bits to false\n        int[] bitArray = makeArray(32);\n        BitArray bitarray = new BitArray(bitArray, 0);\n        \n        // assert that the method getNextSet returns -1 when called on an empty array\n        assertEquals(-1, bitarray.getNextSet(0));\n        \n        // set the bit at index 3 to true and assert that the method getNextSet \n        // returns 3 when called on a BitArray with only one true value\n        bitarray.set(3);\n        assertEquals(3, bitarray.getNextSet(0));\n    }\n}",
        "\nint[] bits = new int[2];\nbits[0] = 5;\nbits[1] = 3;\n\nBitArray bitArray = new BitArray(bits);\nassertEquals(-1, bitArray.getNextSet(0));\nassertEquals(0, bitArray.getNextSet(1));\nassertEquals(2, bitArray.getNextSet(3));\n",
        "@Test\npublic void testGetNextSet1() throws Exception{\n    int size = 32;\n    BitArray bitArray = new BitArray(size);\n    assertEquals(-1, bitArray.getNextSet(0));\n    for (int i = 0; i < size; ++i) {\n        if ((bitArray.bits[i / 32] & (1 << (i % 32))) != 0) {\n            assertEquals(-1, bitArray.getNextSet(i + 1));\n        } else {\n            bitArray.set(i);\n        }\n    }\n}\n\n@Test\npublic void testGetNextSet2() throws Exception{\n    int size = 30;\n    BitArray bitArray = new BitArray(size);\n    for (int i = 0; i < size - 1; ++i) {\n        assertEquals(-1, bitArray.getNextSet(i));\n        bitArray.set(i);\n        assertEquals(i + 1, bitArray.getNextSet(i));\n    }\n}\n\n@Test\npublic void testGetNextSet3() throws Exception{\n    int size = 1024;\n    BitArray bitArray = new BitArray(size);\n    for (int i = 0; i < size - 1; ++i) {\n        assertEquals(-1, bitArray.getNextSet(i));\n        bitArray.set(i);\n        assertEquals(i + 1, bitArray.getNextSet(i));\n    }\n}\n\n@Test\npublic void testGetNextSet4() throws Exception{\n    int size = 0;\n    BitArray bitArray = new BitArray(size);\n    for (int i = 0; i < size - 1; ++i) {\n        assertEquals(-1, bitArray.getNextSet(i));\n        bitArray.set(i);\n        assertEquals(i + 1, bitArray.getNextSet(i));\n    }\n}\n\n@Test\npublic void testGetNextSet5() throws Exception{\n    int size = 2048;\n    BitArray bitArray = new BitArray(size);\n    for (int i = 0; i < size - 1; ++i) {\n        assertEquals(-1, bitArray.getNextSet(i));\n        bitArray.set(i);\n        assertEquals(i + 1, bitArray.getNextSet(i));\n    }\n}",
        "    package com.google.zxing.common;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitArrayTest {\n    private static final int[] EMPTY_INT_ARRAY = new int[0];\n\n    @Test\n    public void getNextSet1() {\n        BitArray bitArray = new BitArray();\n        assertEquals(-1, bitArray.getNextSet(0));\n        assertEquals(-1, bitArray.getNextSet(5));\n    }\n\n    @Test\n    public void getNextSet2() {\n        // Test initial skip bits\n        BitArray bitArray = new BitArray();\n        bitArray.set(8);\n        assertEquals(8, bitArray.getNextSet(6));\n    }\n\n    @Test\n    public void getNextSet3() {\n        // Test test\n        for (int i = 0; i < 128; i++) {\n            BitArray bitArray = new BitArray();\n            int numBits = RandomUtils.nextInt(1, 129);\n            int setBit = RandomUtils.nextInt(0, numBits - 1);\n            for (int j = 0; j < numBits; j++) {\n                if (j == setBit) {\n                    bitArray.set(j);\n                }\n            }\n\n            int numGetNextSetCalls = RandomUtils.nextInt(2, numBits + 1);\n            for (int k = 0; k < numGetNextSetCalls; k++) {\n                assertEquals(RandomUtils.nextInt(-1, setBit), bitArray.getNextSet(setBit));\n            }\n        }\n    }\n}",
        "package com.google.zxing;\n\nimport java.util.Arrays;\n\n/**\n * A simple, fast array of bits, represented compactly by an array of ints internally.\n */\npublic final class BitArray {\n    private int[] bits;\n    private int size;\n\n    /**\n     * @param bits  bits to reverse. The first element holds the first 32 bits, and so on.\n     */\n    public static void reverse(int[] bits) {\n        if (bits != null && bits.length > 1) {\n            int reverseIndex = bits.length - 1; // int i = length - 1\n            int lastBit = 31; // int j = 31\n            for (int x = 0, y = bits.length - 1; x < y; x++, y--) {\n                int currentLong = bits[x]; // int a = i\n                int b = bits[y]; // int b = array[j]\n                bits[x] = Integer.reverse(currentLong);\n                bits[y] = Integer.reverse(lastBit);\n            }\n        }\n    }\n    \n}\n",
        "// TODO:\n@Test\npublic void getNextSetTest() {}\n}\n\n    \n",
        "@Test\n  public void getNextSetTest_testGetNextSet_withPreviousOnes() {\n    BitArray bitArray = new BitArray(10);\n    for (int i = 3; i < 8; ++i) {\n      bitArray.set(i);\n    }\n    assertEquals(-1, bitArray.getNextSet(2)); // there are only ones at 4..7 so -1 is expected\n    for (int i = 2; i <= 7; ++i) {\n      assertEquals(i, bitArray.getNextSet(i - 1));\n    }\n    assertEquals(-1, bitArray.getNextSet(8)); // there are only ones at 4..7 so -1 is expected\n    for (int i = 9; i < 10; ++i) {\n      assertEquals(-1, bitArray.getNextSet(i - 1));\n}\n\n### Response: [/FILL]\n@Test\npublic void getNextSetTest_testGetNextSet() {\n    BitArray bitArray = new BitArray();\n    for (int i = 3; i < 8; ++i) {\n      bitArray.set(i);\n    }\n    assertEquals(-1, bitArray.getNextSet(2)); // there are only ones at 4..7 so -1 is expected\n    for (int i = 2; i <= 7; ++i) {\n      assertEquals(i, bitArray.getNextSet(i - 1));\n    }\n    assertEquals(-1, bitArray.getNextSet(8)); // there are only ones at 4..7 so -1 is expected\n    for (int i = 9; i < 10; ++i) {\n      assertEquals(-1, bitArray.getNextSet(i - 1));\n    }\n}\n",
        "\n    @Test\n    public void getNextSetTest() {\n        int pos = 0;\n        while (pos < size) {\n            int i = mBitArray.getNextSet(pos);\n            assertEquals((i >= 0), true);\n            if (i == -1) {\n                break;\n            }\n            assertEquals(mBitArray.get(i), true);\n            pos = i + 1;\n        }\n    }\n",
        "import java.util.Arrays;\nimport java.util.Random;\n\nimport com.google.zxing.common.BitArray;\n\npublic class BitArrayTest {\n    private Random random = new Random();\n\n    @Test\n    public void getNextSetTest() {\n        for (int i = 0; i < 1000; i++) {\n            int size = random.nextInt(16384);\n            BitArray bitArray = new BitArray(size);\n            int numSetBits = random.nextInt(size + 1);\n            for (int j = 0; j < numSetBits; j++) {\n                int index = random.nextInt(size);\n                bitArray.set(index);\n            }\n            assertEquals(numSetBits, bitArray.getSize());\n            int nextSetBit = bitArray.getNextSet(0);\n            for (int i = 1; i < numSetBits; i++) {\n                if (random.nextBoolean()) {\n                    // test getting the first set bit\n                    assertEquals(i, nextSetBit);\n                    break;\n                }\n                int expectedNextSetBitIndex = i + 1;\n                while ((expectedNextSetBitIndex < size) && !bitArray[expectedNextSetBitIndex]) {\n                    expectedNextSetBitIndex++;\n                }\n                assertEquals(expectedNextSetBitIndex, nextSetBit);\n                nextSetBit = bitArray.getNextSet(nextSetBit + 1);\n            }\n        }\n    }\n}\n    \n### JUNIT Test case:",
        "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitArrayTest {\n    private final int size = 500;\n    private final boolean[] bitsInitializedToOne = new boolean[size];\n    private final boolean[] bitsInitializedToZero = new boolean[size];\n\n    @BeforeEach\n    public void setUp() {\n        for (int i = 0; i < size; i++) {\n            bitsInitializedToOne[i] = true;\n            bitsInitializedToZero[i] = false;\n        }\n    }\n\n    @Test\n    public void testGetNextSet1() {\n        BitArray bitArray = new BitArray(size);\n\n        assertEquals(-1, bitArray.getNextSet(0));\n        assertEquals(-1, bitArray.getNextSet(50));\n        for (int i = 0; i < size; i++) {\n            bitArray.set(i);\n            assertEquals(i + 1, bitArray.getNextSet(i));\n        }\n    }\n\n    @Test\n    public void testGetNextSet2() {\n        BitArray bitArray = new BitArray(size);\n\n        for (int i = 0; i < size / 2; i++) {\n            bitArray.set(i * 2);\n            bitArray.set(i * 2 + 1);\n        }\n        assertEquals(-1, bitArray.getNextSet(size - 1));\n\n        for (int i = size / 2; i < size / 4; i++) {\n            bitArray.set(i * 4);\n            bitArray.set(i * 4 + 1);\n            bitArray.set(i * 4 + 2);\n            bitArray.set(i * 4 + 3);\n        }\n        assertEquals(-1, bitArray.getNextSet(size - 1));\n    }\n\n    @Test\n    public void testGetNextSet3() {\n        BitArray bitArray = new BitArray(size);\n\n        for (int i = 0; i < size / 4; i++) {\n            bitArray.set(i * 4);\n            bitArray.set(i * 4 + 1);\n            bitArray.set(i * 4 + 2);\n            bitArray.set(i * 4 + 3);\n        }\n        assertEquals(-1, bitArray.getNextSet(size - 1));\n    }\n\n    @Test\n    public void testGetNextSet4() {\n        BitArray bitArray = new BitArray(size);\n\n        for (int i = 0; i < size / 8; i++) {\n            bitArray.set(i * 8);\n            bitArray.set(i * 8 + 1);\n            bitArray.set(i * 8 + 2);\n            bitArray.set(i * 8 + 3);\n            bitArray.set(i * 8 + 4);\n            bitArray.set(i * 8 + 5);\n            bitArray.set(i * 8 + 6);\n            bitArray.set(i * 8 + 7);\n        }\n        assertEquals(-1, bitArray.getNextSet(size - 1));\n    }\n}"
    ]
}