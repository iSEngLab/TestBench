{
    "project_name": "zxing",
    "file_name": "Decoder.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/decoder/Decoder.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.decoder",
    "docstring": "/**\n   * Gets the character (or string) corresponding to the passed code in the given table\n   *\n   * @param table the table used\n   * @param code the code of the character\n   */",
    "source_code": "\nprivate static String getCharacter(Table table, int code) {\n  switch (table) {\n    case UPPER:\n      return UPPER_TABLE[code];\n    case LOWER:\n      return LOWER_TABLE[code];\n    case MIXED:\n      return MIXED_TABLE[code];\n    case PUNCT:\n      return PUNCT_TABLE[code];\n    case DIGIT:\n      return DIGIT_TABLE[code];\n    default:\n      // Should not reach here.\n      throw new IllegalStateException(\"Bad table\");\n  }\n}\n",
    "class_name": "Decoder",
    "method_name": "getCharacter",
    "arguments": [
        "Table table",
        "int code"
    ],
    "generate_test": [
        "@Test\npublic void getCharacterTest() {\n    // Test UPPER table\n    Table table = Table.UPPER;\n    int code = 0;\n    String expected = \"A\";\n    assertEquals(expected, Decoder.getCharacter(table, code));\n\n    // Test LOWER table\n    table = Table.LOWER;\n    code = 127;\n    expected = \"~\";\n    assertEquals(expected, Decoder.getCharacter(table, code));\n\n    // Test MIXED table\n    table = Table.MIXED;\n    code = 0;\n    expected = \"A\";\n    assertEquals(expected, Decoder.getCharacter(table, code));\n\n    // Test PUNCT table\n    table = Table.PUNCT;\n    code = 127;\n    expected = \"-\";\n    assertEquals(expected, Decoder.getCharacter(table, code));\n\n    // Test DIGIT table\n    table = Table.DIGIT;\n    code = 0;\n    expected = \"0\";\n    assertEquals(expected, Decoder.getCharacter(table, code));\n}",
        "@Test\npublic void getCharacterTest() {\n    // Test with UPPER table\n    Table upperTable = Decoder.Table.UPPER;\n    int code = 0;\n    String expected = \"A\";\n    assertEquals(expected, Decoder.getCharacter(upperTable, code));\n\n    code = 1;\n    expected = \"B\";\n    assertEquals(expected, Decoder.getCharacter(upperTable, code));\n\n    // Test with LOWER table\n    Table lowerTable = Decoder.Table.LOWER;\n    code = 0;\n    expected = \"a\";\n    assertEquals(expected, Decoder.getCharacter(lowerTable, code));\n\n    code = 1;\n    expected = \"b\";\n    assertEquals(expected, Decoder.getCharacter(lowerTable, code));\n}",
        "\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport com.google.zxing.aztec.decoder.Decoder;\nimport com.google.zxing.aztec.decoder.DecoderResult;\n\npublic class DecoderTest {\n    @Test\n    public void getCharacterTest() {\n        // Set up the test parameters\n        int code = 10;\n        Table table = Table.UPPER;\n        String expectedCharacter = \"A\";\n        \n        // Call the method and assert that it returns the correct character\n        String actualCharacter = Decoder.getCharacter(table, code);\n        assertEquals(expectedCharacter, actualCharacter);\n    }\n}\n",
        "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class DecoderTest {\n    @Test\n    public void getCharacterTest() {\n        Table table = Table.UPPER;\n        int code = 10;\n        String expectedResult = \"A\";\n        \n        assertEquals(expectedResult, Decoder.getCharacter(table, code));\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n    @Test\n    public void getCharacterTest() {\n        Table table = Table.UPPER;\n        int code = 0;\n        String expectedResult = \"A\";\n        \n        assertEquals(expectedResult, Decoder.getCharacter(table, code));\n    }\n}",
        "private static String getCharacter(Table table, int code) {\n    switch (table) {\n        case UPPER:\n            return CharacterSetECI.UPPER_TABLE[code];\n        case LOWER:\n            return CharacterSetECI.LOWER_TABLE[code];\n        case MIXED:\n            return CharacterSetECI.MIXED_TABLE[code];\n        case PUNCT:\n            return CharacterSetECI.PUNCT_TABLE[code];\n        case DIGIT:\n            return CharacterSetECI.DIGIT_TABLE[code];\n        default:\n            // Should not reach here.\n            throw new IllegalStateException(\"Bad table\");\n    }\n}",
        "import org.junit.jupiter.api.Test;\n\npublic class DecoderTest {\n    @Test\n    public void getCharacterTest() {\n        // Test UPPER table\n        String actual = Decoder.getCharacter(Decoder.Table.UPPER, 0);\n        assertEquals(\"A\", actual);\n\n        // Test LOWER table\n        actual = Decoder.getCharacter(Decoder.Table.LOWER, 1);\n        assertEquals(\"B\", actual);\n\n        // Test MIXED table\n        actual = Decoder.getCharacter(Decoder.Table.MIXED, 2);\n        assertEquals(\"C\", actual);\n\n        // Test PUNCT table\n        actual = Decoder.getCharacter(Decoder.Table.PUNCT, 3);\n        assertEquals(\".\", actual);\n\n        // Test DIGIT table\n        actual = Decoder.getCharacter(Decoder.Table.DIGIT, 4);\n        assertEquals(\"5\", actual);\n    }\n}",
        "\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n    @Test\n    public void getCharacterTest() {\n        // Test UPPER table\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 0));\n        assertEquals(\"B\", Decoder.getCharacter(Decoder.Table.UPPER, 1));\n        assertEquals(\"C\", Decoder.getCharacter(Decoder.Table.UPPER, 2));\n        \n        // Test LOWER table\n        assertEquals(\"a\", Decoder.getCharacter(Decoder.Table.LOWER, 0));\n        assertEquals(\"b\", Decoder.getCharacter(Decoder.Table.LOWER, 1));\n        assertEquals(\"c\", Decoder.getCharacter(Decoder.Table.LOWER, 2));\n        \n        // Test MIXED table\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.MIXED, 0));\n        assertEquals(\"B\", Decoder.getCharacter(Decoder.Table.MIXED, 1));\n        assertEquals(\"C\", Decoder.getCharacter(Decoder.Table.MIXED, 2));\n        \n        // Test PUNCT table\n        assertEquals(\"!\", Decoder.getCharacter(Decoder.Table.PUNCT, 0));\n        assertEquals(\"@\", Decoder.getCharacter(Decoder.Table.PUNCT, 1));\n        assertEquals(\"#\", Decoder.getCharacter(Decoder.Table.PUNCT, 2));\n        \n        // Test DIGIT table\n        assertEquals(\"0\", Decoder.getCharacter(Decoder.Table.DIGIT, 0));\n        assertEquals(\"1\", Decoder.getCharacter(Decoder.Table.DIGIT, 1));\n        assertEquals(\"2\", Decoder.getCharacter(Decoder.Table.DIGIT, 2));\n    }\n}\n",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n    @Test\n    public void getCharacterTest() {\n        // Test that UPPER table returns uppercase letter when code is 0-25\n        for (int i = 0; i < 26; i++) {\n            assertEquals(Decoder.UPPER_TABLE[i], Decoder.getCharacter(Table.UPPER, i));\n        }\n\n        // Test that LOWER table returns lowercase letter when code is 0-25\n        for (int i = 0; i < 26; i++) {\n            assertEquals(Decoder.LOWER_TABLE[i], Decoder.getCharacter(Table.LOWER, i));\n        }\n\n        // Test that MIXED table returns mixed case letter when code is 0-25\n        for (int i = 0; i < 26; i++) {\n            assertEquals(Decoder.MIXED_TABLE[i], Decoder.getCharacter(Table.MIXED, i));\n        }\n\n        // Test that PUNCT table returns punctuation character when code is 0-31\n        for (int i = 0; i < 32; i++) {\n            assertEquals(Decoder.PUNCT_TABLE[i], Decoder.getCharacter(Table.PUNCT, i));\n        }\n    }\n}",
        "import static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n    @Test\n    public void getCharacterTest() {\n        // Test UPPER table\n        assertEquals(Decoder.UPPER_TABLE[0], Decoder.getCharacter(Table.UPPER, 0));\n        assertEquals(Decoder.UPPER_TABLE[1], Decoder.getCharacter(Table.UPPER, 1));\n        // Test LOWER table\n        assertEquals(Decoder.LOWER_TABLE[0], Decoder.getCharacter(Table.LOWER, 0));\n        assertEquals(Decoder.LOWER_TABLE[1], Decoder.getCharacter(Table.LOWER, 1));\n        // Test MIXED table\n        assertEquals(Decoder.MIXED_TABLE[0], Decoder.getCharacter(Table.MIXED, 0));\n        assertEquals(Decoder.MIXED_TABLE[1], Decoder.getCharacter(Table.MIXED, 1));\n        // Test PUNCT table\n        assertEquals(Decoder.PUNCT_TABLE[0], Decoder.getCharacter(Table.PUNCT, 0));\n        assertEquals(Decoder.PUNCT_TABLE[1], Decoder.getCharacter(Table.PUNCT, 1));\n        // Test DIGIT table\n        assertEquals(Decoder.DIGIT_TABLE[0], Decoder.getCharacter(Table.DIGIT, 0));\n        assertEquals(Decoder.DIGIT_TABLE[1], Decoder.getCharacter(Table.DIGIT, 1));\n    }\n}"
    ]
}