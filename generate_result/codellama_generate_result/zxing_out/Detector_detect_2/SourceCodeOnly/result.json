{
    "project_name": "zxing",
    "file_name": "Detector.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/detector/Detector.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.detector",
    "docstring": "/**\n   * Detects an Aztec Code in an image.\n   *\n   * @param isMirror if true, image is a mirror-image of original\n   * @return {@link AztecDetectorResult} encapsulating results of detecting an Aztec Code\n   * @throws NotFoundException if no Aztec Code can be found\n   */",
    "source_code": "\npublic AztecDetectorResult detect(boolean isMirror) throws NotFoundException {\n\n  // 1. Get the center of the aztec matrix\n  Point pCenter = getMatrixCenter();\n\n  // 2. Get the center points of the four diagonal points just outside the bull's eye\n  //  [topRight, bottomRight, bottomLeft, topLeft]\n  ResultPoint[] bullsEyeCorners = getBullsEyeCorners(pCenter);\n\n  if (isMirror) {\n    ResultPoint temp = bullsEyeCorners[0];\n    bullsEyeCorners[0] = bullsEyeCorners[2];\n    bullsEyeCorners[2] = temp;\n  }\n\n  // 3. Get the size of the matrix and other parameters from the bull's eye\n  int errorsCorrected = extractParameters(bullsEyeCorners);\n\n  // 4. Sample the grid\n  BitMatrix bits = sampleGrid(image,\n                              bullsEyeCorners[shift % 4],\n                              bullsEyeCorners[(shift + 1) % 4],\n                              bullsEyeCorners[(shift + 2) % 4],\n                              bullsEyeCorners[(shift + 3) % 4]);\n\n  // 5. Get the corners of the matrix.\n  ResultPoint[] corners = getMatrixCornerPoints(bullsEyeCorners);\n\n  return new AztecDetectorResult(bits, corners, compact, nbDataBlocks, nbLayers, errorsCorrected);\n}\n",
    "class_name": "Detector",
    "method_name": "detect",
    "arguments": [
        "boolean isMirror"
    ],
    "generate_test": [
        "\npackage com.google.zxing.aztec.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DetectorTest {\n    private AztecDetector detector = new AztecDetector();\n\n    @Test\n    public void detectTest() {\n        // Test case 1: isMirror=false, compact=true, nbDataBlocks=20, nbLayers=3\n        boolean isMirror = false;\n        boolean compact = true;\n        int nbDataBlocks = 20;\n        int nbLayers = 3;\n        AztecDetectorResult result = detector.detect(isMirror, compact, nbDataBlocks, nbLayers);\n        assertEquals(result.getErrorsCorrected(), 1); // Expected value for errorsCorrected\n        assertTrue(result.isCompact()); // Expected value for isCompact\n        assertEquals(result.getNbDataBlocks(), nbDataBlocks); // Expected value for nbDataBlocks\n        assertEquals(result.getNbLayers(), nbLayers); // Expected value for nbLayers\n\n        // Test case 2: isMirror=true, compact=false, nbDataBlocks=10, nbLayers=5\n        isMirror = true;\n        compact = false;\n        nbDataBlocks = 10;\n        nbLayers = 5;\n        result = detector.detect(isMirror, compact, nbDataBlocks, nbLayers);\n        assertEquals(result.getErrorsCorrected(), 2); // Expected value for errorsCorrected\n        assertFalse(result.isCompact()); // Expected value for isCompact\n        assertEquals(result.getNbDataBlocks(), nbDataBlocks); // Expected value for nbDataBlocks\n        assertEquals(result.getNbLayers(), nbLayers); // Expected value for nbLayers\n    }\n}\n",
        "\n@Test\npublic void detectTest() {\n    // Arrange\n    AztecDetector detector = new AztecDetector();\n    boolean isMirror = false;\n    int errorsCorrected = 0;\n    Point pCenter = new Point(1, 2);\n    ResultPoint[] bullsEyeCorners = {new ResultPoint(3, 4), new ResultPoint(5, 6), new ResultPoint(7, 8), new ResultPoint(9, 10)};\n    int shift = 0;\n    BitMatrix bits = new BitMatrix(11, 12);\n    ResultPoint[] corners = {new ResultPoint(13, 14), new ResultPoint(15, 16), new ResultPoint(17, 18), new ResultPoint(19, 20)};\n    int nbDataBlocks = 5;\n    int nbLayers = 3;\n    \n    // Act\n    AztecDetectorResult result = detector.detect(isMirror);\n    \n    // Assert\n    assertEquals(pCenter, result.getMatrixCenter());\n    assertArrayEquals(bullsEyeCorners, result.getBullsEyeCorners());\n    assertEquals(errorsCorrected, result.getErrorsCorrected());\n    assertEquals(shift, result.getShift());\n    assertEquals(bits, result.getBits());\n    assertArrayEquals(corners, result.getMatrixCornerPoints());\n    assertEquals(nbDataBlocks, result.getNbDataBlocks());\n    assertEquals(nbLayers, result.getNbLayers());\n}",
        "\npackage com.google.zxing.aztec.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DetectorTest {\n    @Test\n    public void detectTest() {\n        // 1. Test for a valid Aztec matrix with the center point in the image\n        Point pCenter = new Point(10, 10);\n        ResultPoint[] bullsEyeCorners = getBullsEyeCorners(pCenter);\n        int errorsCorrected = extractParameters(bullsEyeCorners);\n        assertTrue(errorsCorrected > 0);\n        \n        // 2. Test for a valid Aztec matrix with the center point outside of the image\n        pCenter = new Point(-1, -1);\n        bullsEyeCorners = getBullsEyeCorners(pCenter);\n        errorsCorrected = extractParameters(bullsEyeCorners);\n        assertTrue(errorsCorrected > 0);\n        \n        // 3. Test for an Aztec matrix with a mirrored layout (rotated 180 degrees)\n        pCenter = new Point(10, 10);\n        bullsEyeCorners = getBullsEyeCorners(pCenter);\n        errorsCorrected = extractParameters(bullsEyeCorners);\n        assertTrue(errorsCorrected > 0);\n        \n        // 4. Test for an Aztec matrix with a skewed layout (not straight lines)\n        pCenter = new Point(10, 10);\n        bullsEyeCorners = getBullsEyeCorners(pCenter);\n        errorsCorrected = extractParameters(bullsEyeCorners);\n        assertTrue(errorsCorrected > 0);\n    }\n}",
        "\n@Test\npublic void detectTest() {\n    // Arrange\n    AztecDetector detector = new AztecDetector();\n    boolean isMirror = false;\n    int errorsCorrected = 0;\n    int compact = 1;\n    int nbDataBlocks = 2;\n    int nbLayers = 3;\n    BitMatrix image = new BitMatrix(25, 25);\n    ResultPoint[] bullsEyeCorners = new ResultPoint[4];\n    for (int i = 0; i < 4; i++) {\n        bullsEyeCorners[i] = new ResultPoint(i * 10, i * 10);\n    }\n\n    // Act\n    AztecDetectorResult result = detector.detect(isMirror, errorsCorrected, compact, nbDataBlocks, nbLayers, image, bullsEyeCorners);\n\n    // Assert\n    assertEquals(result.getBits(), new BitMatrix(25, 25));\n    assertArrayEquals(result.getCornerPoints(), new ResultPoint[] {new ResultPoint(0 * 10, 0 * 10), new ResultPoint(1 * 10, 1 * 10), new ResultPoint(2 * 10, 2 * 10), new ResultPoint(3 * 10, 3 * 10)});\n    assertEquals(result.getCompact(), 1);\n    assertEquals(result.getNbDataBlocks(), 2);\n    assertEquals(result.getNbLayers(), 3);\n    assertEquals(result.getErrorsCorrected(), errorsCorrected);\n}",
        "\n@Test\npublic void detectTest() {\n    // Arrange\n    boolean isMirror = false;\n    Point pCenter = new Point(10, 10);\n    ResultPoint[] bullsEyeCorners = getBullsEyeCorners(pCenter);\n    int errorsCorrected = extractParameters(bullsEyeCorners);\n    BitMatrix bits = sampleGrid(image,\n                              bullsEyeCorners[shift % 4],\n                              bullsEyeCorners[(shift + 1) % 4],\n                              bullsEyeCorners[(shift + 2) % 4],\n                              bullsEyeCorners[(shift + 3) % 4]);\n    ResultPoint[] corners = getMatrixCornerPoints(bullsEyeCorners);\n\n    // Act\n    AztecDetectorResult result = detect(isMirror);\n\n    // Assert\n    assertEquals(bits, result.getBits());\n    assertArrayEquals(corners, result.getCorners());\n    assertEquals(compact, result.isCompact());\n    assertEquals(nbDataBlocks, result.getNbDataBlocks());\n    assertEquals(nbLayers, result.getNbLayers());\n    assertEquals(errorsCorrected, result.getErrorsCorrected());\n}",
        "\n@Test\npublic void detectTest() throws NotFoundException {\n    AztecDetector detector = new AztecDetector();\n    boolean isMirror = false;\n    Point pCenter = getMatrixCenter();\n    ResultPoint[] bullsEyeCorners = getBullsEyeCorners(pCenter);\n    if (isMirror) {\n        ResultPoint temp = bullsEyeCorners[0];\n        bullsEyeCorners[0] = bullsEyeCorners[2];\n        bullsEyeCorners[2] = temp;\n    }\n    int errorsCorrected = extractParameters(bullsEyeCorners);\n    BitMatrix bits = sampleGrid(image, bullsEyeCorners[shift % 4], bullsEyeCorners[(shift + 1) % 4], bullsEyeCorners[(shift + 2) % 4], bullsEyeCorners[(shift + 3) % 4]);\n    ResultPoint[] corners = getMatrixCornerPoints(bullsEyeCorners);\n    AztecDetectorResult result = detector.detect(isMirror);\n    assertEquals(result.getErrorsCorrected(), errorsCorrected);\n    assertArrayEquals(result.getBullsEyeCorners(), bullsEyeCorners);\n    assertEquals(result.getBitMatrix(), bits);\n    assertArrayEquals(result.getCorners(), corners);\n}",
        "\n@Test\npublic void detectTest() {\n    // Arrange\n    AztecDetector detector = new AztecDetector();\n    boolean isMirror = true;\n    Point pCenter = new Point(10, 15);\n    ResultPoint[] bullsEyeCorners = new ResultPoint[4];\n    int shift = 3;\n\n    // Act\n    AztecDetectorResult result = detector.detect(isMirror);\n\n    // Assert\n    assertEquals(result.getBits(), null, \"The bits of the aztec matrix should be null\");\n    assertEquals(result.getCorners(), new ResultPoint[0], \"The corners of the aztec matrix should be an empty array\");\n    assertEquals(result.getCompact(), false, \"The compact property of the aztec matrix should be false\");\n    assertEquals(result.getDataBlocks(), 0, \"The number of data blocks in the aztec matrix should be zero\");\n    assertEquals(result.getLayers(), 0, \"The number of layers in the aztec matrix should be zero\");\n    assertEquals(result.getErrorsCorrected(), -1, \"The number of errors corrected in the aztec matrix should be -1\");\n}",
        "@Test\npublic void detectTest() throws NotFoundException {\n    // Arrange\n    AztecDetector detector = new AztecDetector();\n    boolean isMirror = false;\n\n    // Act\n    AztecDetectorResult result = detector.detect(isMirror);\n\n    // Assert\n    assertNotNull(result);\n    assertEquals(12, result.getNbDataBlocks());\n    assertEquals(4, result.getNbLayers());\n    assertEquals(3, result.getErrorsCorrected());\n}",
        "\npackage com.google.zxing.aztec.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DetectorTest {\n    @Test\n    public void detectTest() {\n        AztecDetector detector = new AztecDetector();\n        boolean isMirror = false;\n\n        // 1. Get the center of the aztec matrix\n        Point pCenter = detector.getMatrixCenter();\n\n        // 2. Get the center points of the four diagonal points just outside the bull's eye\n        // [topRight, bottomRight, bottomLeft, topLeft]\n        ResultPoint[] bullsEyeCorners = detector.getBullsEyeCorners(pCenter);\n\n        if (isMirror) {\n            ResultPoint temp = bullsEyeCorners[0];\n            bullsEyeCorners[0] = bullsEyeCorners[2];\n            bullsEyeCorners[2] = temp;\n        }\n\n        // 3. Get the size of the matrix and other parameters from the bull's eye\n        int errorsCorrected = detector.extractParameters(bullsEyeCorners);\n\n        // 4. Sample the grid\n        BitMatrix bits = detector.sampleGrid(null, // image\n                              bullsEyeCorners[0],\n                              bullsEyeCorners[1],\n                              bullsEyeCorners[2],\n                              bullsEyeCorners[3]);\n\n        // 5. Get the corners of the matrix.\n        ResultPoint[] corners = detector.getMatrixCornerPoints(bullsEyeCorners);\n\n        assertNotNull(corners);\n        assertEquals(8, corners.length);\n\n        for (int i = 0; i < 4; i++) {\n            ResultPoint corner = corners[i];\n            assertNotNull(corner);\n            assertTrue(corner.getX() > 0 && corner.getY() > 0);\n        }\n    }\n}\n",
        "public AztecDetectorResult detect(boolean isMirror) throws NotFoundException {\n  // Get the center of the aztec matrix\n  Point pCenter = getMatrixCenter();\n  \n  // Get the center points of the four diagonal points just outside the bull's eye\n  // [topRight, bottomRight, bottomLeft, topLeft]\n  ResultPoint[] bullsEyeCorners = getBullsEyeCorners(pCenter);\n  \n  if (isMirror) {\n    ResultPoint temp = bullsEyeCorners[0];\n    bullsEyeCorners[0] = bullsEyeCorners[2];\n    bullsEyeCorners[2] = temp;\n  }\n  \n  // Get the size of the matrix and other parameters from the bull's eye\n  int errorsCorrected = extractParameters(bullsEyeCorners);\n  \n  // Sample the grid\n  BitMatrix bits = sampleGrid(image,\n                              bullsEyeCorners[shift % 4],\n                              bullsEyeCorners[(shift + 1) % 4],\n                              bullsEyeCorners[(shift + 2) % 4],\n                              bullsEyeCorners[(shift + 3) % 4]);\n  \n  // Get the corners of the matrix.\n  ResultPoint[] corners = getMatrixCornerPoints(bullsEyeCorners);\n  \n  return new AztecDetectorResult(bits, corners, compact, nbDataBlocks, nbLayers, errorsCorrected);\n}"
    ]
}