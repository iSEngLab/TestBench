{
    "project_name": "zxing",
    "file_name": "Encoder.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/encoder/Encoder.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.encoder",
    "docstring": "/**\n   * Encodes the given string content as an Aztec symbol\n   *\n   * @param data input data string\n   * @param minECCPercent minimal percentage of error check words (According to ISO/IEC 24778:2008,\n   *                      a minimum of 23% + 3 words is recommended)\n   * @param userSpecifiedLayers if non-zero, a user-specified value for the number of layers\n   * @param charset character set in which to encode string using ECI; if null, no ECI code\n   *                will be inserted, and the string must be encodable as ISO/IEC 8859-1\n   *                (Latin-1), the default encoding of the symbol.\n   * @return Aztec symbol matrix with metadata\n   */",
    "source_code": "\npublic static AztecCode encode(String data, int minECCPercent, int userSpecifiedLayers, Charset charset) {\n  byte[] bytes = data.getBytes(null != charset ? charset : StandardCharsets.ISO_8859_1);\n  return encode(bytes, minECCPercent, userSpecifiedLayers, charset);\n}\n",
    "class_name": "Encoder",
    "method_name": "encode",
    "arguments": [
        "String data",
        "int minECCPercent",
        "int userSpecifiedLayers",
        "Charset charset"
    ],
    "generate_test": [
        "@Test\npublic void encodeTest() {\n    String data = \"Hello World\";\n    int minECCPercent = 20;\n    int userSpecifiedLayers = 3;\n    Charset charset = StandardCharsets.UTF_8;\n    AztecCode aztecCode = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n    assertNotNull(aztecCode);\n    assertEquals(10, aztecCode.getBits().length());\n}",
        "\n@Test\npublic void encodeTest() {\n  String data = \"Hello World!\";\n  int minECCPercent = 20;\n  int userSpecifiedLayers = 3;\n  Charset charset = StandardCharsets.UTF_8;\n  AztecCode actualAztecCode = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n  BitArray expectedBitArray = new BitArray();\n  expectedBitArray.appendBits(0b110100010000, 12); // Header\n  expectedBitArray.appendBits(0b000000000010, 6); // Layers\n  expectedBitArray.appendBits(0b000000000010, 6); // Min ECC Percent\n  expectedBitArray.appendBits(0b000000000010, 6); // Charset\n  for (int i = 0; i < data.length(); i++) {\n    int charCode = (int) data.charAt(i);\n    expectedBitArray.appendBits(charCode, 8);\n  }\n  expectedBitArray.appendBits(0b110100010000, 12); // Footer\n  assertEquals(expectedBitArray, actualAztecCode.getBits());\n}",
        "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String input = \"Hello World\";\n        AztecCode code = Encoder.encode(input);\n        assertNotNull(code);\n        BitMatrix matrix = code.getMatrix();\n        int expectedSize = 14; // this is the default size of an Aztec code, you may need to adjust this based on your input string and other parameters\n        assertEquals(expectedSize, matrix.size());\n    }\n}",
        "package com.google.zxing.aztec.encoder;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String data = \"Hello World\";\n        int minECCPercent = 20;\n        int userSpecifiedLayers = 5;\n        Charset charset = StandardCharsets.UTF_8;\n        \n        AztecCode code = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n        assertEquals(code.getSize(), userSpecifiedLayers * 40 + (2 * minECCPercent / 100));\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        // Test case 1: null data, minECCPercent=0, userSpecifiedLayers=0, charset=null\n        assertNull(Encoder.encode(null, 0, 0, null));\n\n        // Test case 2: empty data, minECCPercent=0, userSpecifiedLayers=0, charset=null\n        assertEquals(\"\", Encoder.encode(\"\", 0, 0, null).getData());\n\n        // Test case 3: non-empty data, minECCPercent=50, userSpecifiedLayers=1, charset=StandardCharsets.ISO_8859_1\n        String data = \"Hello World!\";\n        int minECCPercent = 50;\n        int userSpecifiedLayers = 1;\n        Charset charset = StandardCharsets.ISO_8859_1;\n        AztecCode code = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n        assertNotNull(code);\n        assertEquals(minECCPercent, code.getMinimumECCPercent());\n        assertEquals(userSpecifiedLayers, code.getUserSpecifiedLayers());\n    }\n}",
        "\n@Test\npublic void encodeTest() {\n    String data = \"Hello World!\";\n    int minECCPercent = 30;\n    int userSpecifiedLayers = 2;\n    Charset charset = StandardCharsets.UTF_8;\n    \n    AztecCode code = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n    assertNotNull(code);\n    assertEquals(Encoder.DEFAULT_EC_PERCENT, code.getErrorCorrectionLevel());\n    assertEquals(userSpecifiedLayers, code.getLayers());\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        // Test 1: Check the encoding of a string with default values for minECCPercent and userSpecifiedLayers\n        String data = \"This is a test\";\n        int minECCPercent = 33;\n        int userSpecifiedLayers = 20;\n        AztecCode code1 = Encoder.encode(data, minECCPercent, userSpecifiedLayers);\n        \n        // Check the length of the encoded data\n        assertEquals(code1.getEncodedData().length(), 3426);\n        \n        // Test 2: Check the encoding of a string with a different charset\n        Charset charset = StandardCharsets.UTF_8;\n        AztecCode code2 = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n        \n        // Check the length of the encoded data\n        assertEquals(code2.getEncodedData().length(), 3426);\n    }\n}",
        "@Test\npublic void encodeTest() {\n  // Arrange\n  String data = \"Hello World!\";\n  int minECCPercent = 25;\n  int userSpecifiedLayers = 10;\n  Charset charset = StandardCharsets.ISO_8859_1;\n  \n  // Act\n  AztecCode actualResult = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n  \n  // Assert\n  assertEquals(\"Aztec code\", actualResult);\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String data = \"hello world\";\n        int minECCPercent = 20;\n        int userSpecifiedLayers = 3;\n        Charset charset = StandardCharsets.ISO_8859_1;\n        \n        AztecCode code = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n        \n        assertNotNull(code);\n        assertEquals(code.getEncodedData(), data);\n        assertEquals(code.getMinimumErrorCorrectionPercentage(), minECCPercent);\n        assertEquals(code.getUserSpecifiedNumberOfLayers(), userSpecifiedLayers);\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.Test;\n\nclass EncoderTest {\n\n  @Test\n  void encodeTest() {\n    // Arrange\n    String data = \"hello world\";\n    int minECCPercent = 20;\n    int userSpecifiedLayers = 3;\n    Charset charset = StandardCharsets.UTF_8;\n\n    // Act\n    AztecCode result = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n\n    // Assert\n    assertNotNull(result);\n  }\n}"
    ]
}