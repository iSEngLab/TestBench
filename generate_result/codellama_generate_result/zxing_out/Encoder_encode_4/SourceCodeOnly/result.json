{
    "project_name": "zxing",
    "file_name": "Encoder.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/encoder/Encoder.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.encoder",
    "docstring": "/**\n   * Encodes the given string content as an Aztec symbol\n   *\n   * @param data input data string\n   * @param minECCPercent minimal percentage of error check words (According to ISO/IEC 24778:2008,\n   *                      a minimum of 23% + 3 words is recommended)\n   * @param userSpecifiedLayers if non-zero, a user-specified value for the number of layers\n   * @param charset character set in which to encode string using ECI; if null, no ECI code\n   *                will be inserted, and the string must be encodable as ISO/IEC 8859-1\n   *                (Latin-1), the default encoding of the symbol.\n   * @return Aztec symbol matrix with metadata\n   */",
    "source_code": "\npublic static AztecCode encode(String data, int minECCPercent, int userSpecifiedLayers, Charset charset) {\n  byte[] bytes = data.getBytes(null != charset ? charset : StandardCharsets.ISO_8859_1);\n  return encode(bytes, minECCPercent, userSpecifiedLayers, charset);\n}\n",
    "class_name": "Encoder",
    "method_name": "encode",
    "arguments": [
        "String data",
        "int minECCPercent",
        "int userSpecifiedLayers",
        "Charset charset"
    ],
    "generate_test": [
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String data = \"Hello, World!\";\n        int minECCPercent = 30;\n        int userSpecifiedLayers = 2;\n        Charset charset = StandardCharsets.UTF_8;\n        AztecCode code = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n        assertNotNull(code);\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String data = \"Hello, World!\";\n        int minECCPercent = 20;\n        int userSpecifiedLayers = 3;\n        Charset charset = StandardCharsets.UTF_8;\n        \n        AztecCode code = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n        assertNotNull(code);\n    }\n}",
        "\npackage com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String data = \"Hello World\";\n        int minECCPercent = 30;\n        int userSpecifiedLayers = 2;\n        Charset charset = StandardCharsets.ISO_8859_1;\n        \n        AztecCode actual = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n        assertNotNull(actual);\n    }\n}",
        "@Test\npublic void encodeTest() {\n    String data = \"Hello, World!\";\n    int minECCPercent = 15;\n    int userSpecifiedLayers = 3;\n    Charset charset = StandardCharsets.UTF_8;\n    \n    AztecCode code = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n    \n    assertEquals(\"Hello, World!\", new String(code.getBytes(), charset));\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        // Sample input values:\n        String data = \"Hello, world!\";\n        int minECCPercent = 30;\n        int userSpecifiedLayers = 1;\n        Charset charset = StandardCharsets.UTF_8;\n        \n        AztecCode result = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n        \n        // Assert that the returned value is not null:\n        assertNotNull(result);\n        \n        // Verify that the expected output values match the actual output values for different parameters:\n        int[] expectedLayers = {1};\n        assertEquals(expectedLayers, result.getLayers());\n        \n        double[] expectedECCPercentages = {30};\n        assertEquals(expectedECCPercentages, result.getEccPercentages());\n        \n        // Add any additional test cases as needed:\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String data = \"Hello World\";\n        int minECCPercent = 20;\n        int userSpecifiedLayers = 3;\n        Charset charset = StandardCharsets.ISO_8859_1;\n        \n        AztecCode code = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n        \n        assertNotNull(code);\n        assertEquals(data, code.getText());\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String data = \"Hello World\";\n        int minECCPercent = 30;\n        int userSpecifiedLayers = 2;\n        Charset charset = StandardCharsets.UTF_8;\n        byte[] bytes = data.getBytes(charset);\n        \n        AztecCode aztecCode = Encoder.encode(bytes, minECCPercent, userSpecifiedLayers, charset);\n        \n        assertNotNull(aztecCode);\n        assertEquals(data, new String(aztecCode.getData(), charset));\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String data = \"Hello, World!\";\n        int minECCPercent = 30;\n        int userSpecifiedLayers = 10;\n        Charset charset = StandardCharsets.UTF_8;\n        \n        AztecCode aztecCode = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n        assertNotNull(aztecCode);\n    }\n}",
        "\npackage com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String data = \"Hello World!\";\n        int minECCPercent = 30;\n        int userSpecifiedLayers = 10;\n        Charset charset = StandardCharsets.UTF_8;\n        \n        AztecCode aztecCode = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n        \n        assertNotNull(aztecCode);\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String data = \"hello world\";\n        int minECCPercent = 50;\n        int userSpecifiedLayers = 2;\n        Charset charset = StandardCharsets.UTF_8;\n        \n        AztecCode code = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n        assertEquals(\"hello world\", new String(code.getData(), StandardCharsets.UTF_8));\n    }\n}"
    ]
}