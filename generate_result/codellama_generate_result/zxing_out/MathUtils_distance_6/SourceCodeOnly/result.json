{
    "project_name": "zxing",
    "file_name": "MathUtils.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/common/detector/MathUtils.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.common.detector",
    "docstring": "/**\n   * @param aX point A x coordinate\n   * @param aY point A y coordinate\n   * @param bX point B x coordinate\n   * @param bY point B y coordinate\n   * @return Euclidean distance between points A and B\n   */",
    "source_code": "\npublic static float distance(int aX, int aY, int bX, int bY) {\n  double xDiff = aX - bX;\n  double yDiff = aY - bY;\n  return (float) Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n}\n",
    "class_name": "MathUtils",
    "method_name": "distance",
    "arguments": [
        "int aX",
        "int aY",
        "int bX",
        "int bY"
    ],
    "generate_test": [
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        float result = MathUtils.distance(0, 0, 3, 4);\n        assertEquals(5.0f, result, 0.1);\n        \n        result = MathUtils.distance(1, 2, 3, 4);\n        assertEquals(2.83f, result, 0.1);\n    }\n}",
        "@Test\npublic void distanceTest() {\n    int aX = 10;\n    int aY = 20;\n    int bX = 30;\n    int bY = 40;\n    float expectedDistance = (float) Math.sqrt(Math.pow((double)(aX - bX), 2) + Math.pow((double)(aY - bY), 2));\n    \n    assertEquals(expectedDistance, distance(aX, aY, bX, bY));\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Test case 1: aX = bX, aY = bY\n        int aX = 0;\n        int aY = 0;\n        int bX = 0;\n        int bY = 0;\n        float expectedDistance = 0.0f;\n        \n        assertEquals(expectedDistance, MathUtils.distance(aX, aY, bX, bY), 0.0);\n    }\n    \n    @Test\n    public void distanceTest2() {\n        // Test case 2: aX = bX, aY != bY\n        int aX = 1;\n        int aY = 3;\n        int bX = 1;\n        int bY = -3;\n        float expectedDistance = 6.0f;\n        \n        assertEquals(expectedDistance, MathUtils.distance(aX, aY, bX, bY), 0.0);\n    }\n    \n    @Test\n    public void distanceTest3() {\n        // Test case 3: aX != bX, aY = bY\n        int aX = -4;\n        int aY = 2;\n        int bX = 6;\n        int bY = 2;\n        float expectedDistance = 8.0f;\n        \n        assertEquals(expectedDistance, MathUtils.distance(aX, aY, bX, bY), 0.0);\n    }\n    \n    @Test\n    public void distanceTest4() {\n        // Test case 4: aX != bX, aY != bY\n        int aX = -1;\n        int aY = -3;\n        int bX = 5;\n        int bY = 2;\n        float expectedDistance = 7.0f;\n        \n        assertEquals(expectedDistance, MathUtils.distance(aX, aY, bX, bY), 0.0);\n    }\n}",
        "\npackage com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        assertEquals(0, MathUtils.distance(0, 0, 0, 0), 0);\n        assertEquals(1, MathUtils.distance(1, 0, 0, 0), 0);\n        assertEquals(Math.sqrt(2), MathUtils.distance(1, 1, 0, 0), 0.01);\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        int aX = 10;\n        int aY = 20;\n        int bX = 30;\n        int bY = 40;\n        \n        float expectedDistance = (float) Math.sqrt((aX - bX) * (aX - bX) + (aY - bY) * (aY - bY));\n        float actualDistance = MathUtils.distance(aX, aY, bX, bY);\n        \n        assertEquals(expectedDistance, actualDistance, 0.01f);\n    }\n}",
        "\npackage com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        assertEquals(5.0, MathUtils.distance(2, 3, 7, 11), 0.0001);\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Test Case 1: (0,0) and (0,0) should be equal\n        assertEquals(0f, MathUtils.distance(0, 0, 0, 0), 0);\n\n        // Test Case 2: (0,0) and (1,1) should not be equal\n        assertNotEquals(MathUtils.distance(0, 0, 1, 1), 0f);\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Given:\n        int aX = 10, aY = 20;\n        int bX = 30, bY = 40;\n        \n        // When:\n        float actualDistance = MathUtils.distance(aX, aY, bX, bY);\n        \n        // Then:\n        assertEquals((float) Math.sqrt(625), actualDistance);\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        assertEquals(0, MathUtils.distance(0, 0, 0, 0));\n        assertEquals(1, MathUtils.distance(0, 0, 1, 0));\n        assertEquals(2, MathUtils.distance(0, 0, 2, 0));\n        assertEquals(3, MathUtils.distance(0, 0, 3, 0));\n        assertEquals(4, MathUtils.distance(0, 0, 4, 0));\n    }\n}",
        "\npackage com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        int aX = 10, aY = 5;\n        int bX = 20, bY = 15;\n        float expectedDistance = (float) Math.sqrt(Math.pow(aX - bX, 2) + Math.pow(aY - bY, 2));\n        \n        assertEquals(expectedDistance, distance(aX, aY, bX, bY), 0.1);\n    }\n}\n"
    ]
}