{
    "project_name": "zxing",
    "file_name": "ReedSolomonDecoder.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/common/reedsolomon/ReedSolomonDecoder.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.common.reedsolomon",
    "docstring": "/**\n   * <p>Decodes given set of received codewords, which include both data and error-correction\n   * codewords. Really, this means it uses Reed-Solomon to detect and correct errors, in-place,\n   * in the input.</p>\n   *\n   * @param received data and error-correction codewords\n   * @param twoS number of error-correction codewords available\n   * @return the number of errors corrected\n   * @throws ReedSolomonException if decoding fails for any reason\n   */",
    "source_code": "\npublic int decodeWithECCount(int[] received, int twoS) throws ReedSolomonException {\n  GenericGFPoly poly = new GenericGFPoly(field, received);\n  int[] syndromeCoefficients = new int[twoS];\n  boolean noError = true;\n  for (int i = 0; i < twoS; i++) {\n    int eval = poly.evaluateAt(field.exp(i + field.getGeneratorBase()));\n    syndromeCoefficients[syndromeCoefficients.length - 1 - i] = eval;\n    if (eval != 0) {\n      noError = false;\n    }\n  }\n  if (noError) {\n    return 0;\n  }\n  GenericGFPoly syndrome = new GenericGFPoly(field, syndromeCoefficients);\n  GenericGFPoly[] sigmaOmega =\n      runEuclideanAlgorithm(field.buildMonomial(twoS, 1), syndrome, twoS);\n  GenericGFPoly sigma = sigmaOmega[0];\n  GenericGFPoly omega = sigmaOmega[1];\n  int[] errorLocations = findErrorLocations(sigma);\n  int[] errorMagnitudes = findErrorMagnitudes(omega, errorLocations);\n  for (int i = 0; i < errorLocations.length; i++) {\n    int position = received.length - 1 - field.log(errorLocations[i]);\n    if (position < 0) {\n      throw new ReedSolomonException(\"Bad error location\");\n    }\n    received[position] = GenericGF.addOrSubtract(received[position], errorMagnitudes[i]);\n  }\n  return errorLocations.length;\n}\n",
    "class_name": "ReedSolomonDecoder",
    "method_name": "decodeWithECCount",
    "arguments": [
        "int[] received",
        "int twoS"
    ],
    "generate_test": [
        "import com.google.zxing.common.reedsolomon.*;\n\npublic class ReedSolomonDecoderTest {\n    private static final int[] QR_CODE = new int[]{ 0, 1, 0, 1 };\n    private static final int ERROR_CORRECTION_COUNT = 2;\n\n    @Test\n    public void decodeWithECCountTest() throws ReedSolomonException {\n        GenericGF genericGF = GenericGF.qrCode();\n        GenericGFPoly errorLocator = genericGF.getZero();\n        int[] dataWords = new int[QR_CODE.length];\n        for (int i = 0; i < QR_CODE.length; ++i) {\n            dataWords[i] = Integer.parseInt(String.valueOf(QR_CODE[i]));\n        }\n        ReedSolomonDecoder decoder = new ReedSolomonDecoder(genericGF, errorLocator, ERROR_CORRECTION_COUNT);\n        int[] correctedDataWords = decoder.decode(dataWords);\n        assertArrayEquals(new int[]{ 0, 1, 0, 1 }, correctedDataWords);\n    }\n}",
        "    package com.google.zxing.common.reedsolomon;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class ReedSolomonDecoderTest {\n    @Test\n    public void decodeWithECCountTest() {\n        // Test 1:\n        GenericGF genericGf = new GenericGF(7, 0);\n        int[] dataBytes = new int[]{6, 5, 3};\n        ReedSolomonEncoder encoder = new ReedSolomonEncoder(genericGf);\n        try {\n            // Test encode:\n            encoder.encode(dataBytes, 10);\n            fail(\"Expected IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException expected) {}\n        \n        // Test decode:\n        dataBytes = new int[]{6, 5, 3};\n        ReedSolomonDecoder decoder = new ReedSolomonDecoder(genericGf);\n        try {\n            decoder.decode(dataBytes, 10);\n            fail(\"Expected IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException expected) {}\n    }\n}",
        "public ReedSolomon(GenericGFPoly field) {\n    this.field = field;\n}\n\n/**\n * <p>Constructs a Reed-Solomon decoder. The constructor takes in an\n * error-correcting code represented by its generator polynomial.</p>\n *\n * @param field the {@link GenericGF} that defines the code's field\n */\npublic ReedSolomon(GenericGFPoly field) {\n    this.field = field;\n}\n\n/**\n * <p>Performs Reed-Solomon decoding on a single data segment. If there are any errors, it\n * will correct up to the number of errors specified in the constructor.</p>\n *\n * @param codeword The data segment to correct. It is assumed that this segment has not been\n *          encoded yet and contains error-correction codes that need to be processed.\n * @return The decoded data segment, with any error-correction codes processed.\n */\npublic byte[] decodeWithECCount(byte[] codeword) {\n    int numDataCodewords = ReedSolomonCodes.getNumDataCodeWords(codeword);\n    if (numDataCodewords < 0) {\n        throw new IllegalArgumentException(\"bad data segment\");\n    }\n    \n    int eccCount = codeword.length - numDataCodewords;\n    GenericGFPoly poly = this.field.getZero();\n    for (int i = 0; i < eccCount; ++i) {\n        // The ECC words are in the higher positions of each byte. To create a single \n        // polynomial, we need to put them into the lower positions instead.\n        int y = codeword[eccCount - i] & 0xFF;\n        poly = this.field.add(poly, new GenericGFPoly(new int[] { (int)Math.pow(2, i) }, y));\n    }\n    \n    // The top bit of each byte is the signed-ness of that word. \n    for (int i = numDataCodewords - 1; i >= 0; --i) {\n        int x = codeword[numDataCodewords + eccCount + i] & 0xFF;\n        int y = x >> 7; // Signedness\n        poly = this.field.add(poly, new GenericGFPoly(new int[] { (int)Math.pow(2, i) }, y));\n    }\n    \n    return ReedSolomonCodes.extractDataRegion(codeword);\n}",
        "package com.google.zxing.common.reedsolomon;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ReedSolomonDecoderTest {\n    private final GenericGF genericGF = new GenericGF(256, 0x11d);\n    private final int[] ecCodewords = new int[32]; // The number of error correction codewords is 32.\n\n    @BeforeEach\n    public void setUp() {\n        ReedSolomonDecoder decoder = new ReedSolomonDecoder(genericGF);\n        try {\n            decoder.decodeWithECCount(ecCodewords, 0);\n            fail(); // Should not reach this line, since the number of error correction codewords is zero.\n        } catch (ReedSolomonException e) {\n            assertEquals(\"No EC Codewords to decode\", e.getMessage());\n        }\n    }\n}",
        "package com.google.zxing.common.reedsolomon;\n\nimport java.util.Arrays;\n\npublic class ReedSolomonDecoderTest {\n    @Test\n    public void decodeWithECCountTest() {\n        int[] ecCount = new int[]{1, 2, 3, 4};\n        for (int i : ecCount) {\n            GenericGF field = GenericGF.AZTEC_DATA_12;\n            ReedSolomonDecoder rsDecoder = new ReedSolomonDecoder(field);\n            int messageSize = 30;\n            int ecSize = i * 6;\n            byte[] message = Arrays.copyOfRange(rsTestData, 0, messageSize);\n            byte[] encoded = encode(message, field, messageSize + ecSize);\n            assertTrue(rsDecoder.decode(encoded, messageSize));\n            int[] decodedInts = rsDecoder.getDecodedInts();\n            for (int j = 0; j < message.length; ++j) {\n                assertEquals(message[j], decodedInts[j]);\n            }\n        }\n    }\n    \n    private static byte[] encode(byte[] data, GenericGF field, int length) {\n        ReedSolomonEncoder rsEncoder = new ReedSolomonEncoder(field);\n        byte[] block = new byte[rsEncoder.getDataShardCount()];\n        System.arraycopy(data, 0, block, 0, data.length);\n        return Arrays.copyOfRange(rsEncoder.encodeBlock(block), 0, length);\n    }\n}\n    ",
        "\nP(x) = 3x^2 + 5x - 7\n",
        "@Test\npublic void decodeWithECCountTest() {\n    // Test case 1:\n    GenericGF genericGF = new GenericGF(256, 0x11d);\n    int[] array = new int[]{384, 720, 720};\n    ReedSolomonDecoder reedSolomonDecoder = new ReedSolomonDecoder(genericGF);\n    assertEquals(array.length - 1, reedSolomonDecoder.decodeWithECCount(array, 4));\n}",
        "package com.google.zxing.common.reedsolomon;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\n/**\n * @author Sean Owen\n */\npublic final class ReedSolomonDecoderTest {\n\n    private static final int[] EC_CODEWORD = new int[]{1, 2, 3};\n    private static final int[] NO_ERRORS = new int[0];\n\n    private ReedSolomonDecoder decoder;\n\n    @BeforeEach\n    public void setUp() {\n        decoder = new ReedSolomonDecoder(GenericGF.AZTEC_PARAMETERS);\n    }\n\n    @Test\n    public void testNoEC() {\n        int[] result = decoder.decode(NO_ERRORS, 0);\n        Assertions.assertArrayEquals(new int[0], result);\n    }\n\n    @Test\n    public void testNoErrors() {\n        int[] result = decoder.decode(EC_CODEWORD, 3);\n        Assertions.assertArrayEquals(EC_CODEWORD, result);\n    }\n}\n\n    \n\n### JUNIT Test case:\npackage com.google.zxing.common.reedsolomon;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ReedSolomonDecoderTest {\n    @Test\n    public void decodeWithECCountTest() {\n        <FILL>\n    }\n}\n    \n\n### Response:",
        "GenericGF gf = GenericGF.AZTEC_DATA_12;\nReedSolomonDecoder rsDecoder = new ReedSolomonDecoder(gf);\nint[] codewords = { 0x74, 0x86, 0x42, 0x35 }; // some encoded data\nint[] decodedBytes = rsDecoder.decode(codewords);",
        "\n// Import statements\nimport com.google.zxing.common.reedsolomon.*;\nimport java.util.*;\n\npublic class ReedSolomonDecoderExample {\n    public static void main(String[] args) {\n        // Create a GenericGFPoly object representing the received message\n        int[] receivedMessage = {1, 0, 1, 1, 0};\n        GenericGFPoly errorCorrectedMessage = new GenericGFPoly(receivedMessage);\n        \n        // Create a ReedSolomonDecoder object and call the decodeWithECCount method on it\n        int numberOfErrorCorrections = 2;\n        ReedSolomonDecoder rsDecoder = new ReedSolomonDecoder();\n        GenericGFPoly correctedMessage = rsDecoder.decodeWithECCount(errorCorrectedMessage, numberOfErrorCorrections);\n        \n        // Print the corrected message to the console\n        System.out.println(\"The received message: \" + Arrays.toString(receivedMessage));\n        System.out.println(\"The error-corrected message: \" + correctedMessage);\n    }\n}\n"
    ]
}