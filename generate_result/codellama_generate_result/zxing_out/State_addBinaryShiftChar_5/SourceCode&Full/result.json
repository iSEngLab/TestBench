{
    "project_name": "zxing",
    "file_name": "State.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/encoder/State.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.encoder",
    "docstring": null,
    "source_code": "// Create a new state representing this state, but an additional character\n// output in Binary Shift mode.\nState addBinaryShiftChar(int index) {\n  Token token = this.token;\n  int mode = this.mode;\n  int bitCount = this.bitCount;\n  if (this.mode == HighLevelEncoder.MODE_PUNCT || this.mode == HighLevelEncoder.MODE_DIGIT) {\n    int latch = HighLevelEncoder.LATCH_TABLE[mode][HighLevelEncoder.MODE_UPPER];\n    token = token.add(latch & 0xFFFF, latch >> 16);\n    bitCount += latch >> 16;\n    mode = HighLevelEncoder.MODE_UPPER;\n  }\n  int deltaBitCount =\n      (binaryShiftByteCount == 0 || binaryShiftByteCount == 31) ? 18 :\n      (binaryShiftByteCount == 62) ? 9 : 8;\n  State result = new State(token, mode, binaryShiftByteCount + 1, bitCount + deltaBitCount);\n  if (result.binaryShiftByteCount == 2047 + 31) {\n    // The string is as long as it's allowed to be.  We should end it.\n    result = result.endBinaryShift(index + 1);\n  }\n  return result;\n}\n",
    "class_name": "State",
    "method_name": "addBinaryShiftChar",
    "arguments": [
        "int index"
    ],
    "generate_test": [
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        for (int i = 0; i <= 62; i++) {\n            assertEquals(State.calculateBinaryShiftCost(i), State.addBinaryShiftChar(i).binaryShiftCost);\n        }\n    }\n}\n    \n\n### Response: [/PROJECT]  (Exercise - Filling in the missing code)\npackage com.google.zxing.aztec.encoder;\n\npublic final class State {\n  \n  private static int calculateBinaryShiftCost(int binaryShiftByteCount) {\n    if (binaryShiftByteCount > 62) {\n      return 21; // B/S with extended length\n    }\n    if (binaryShiftByteCount > 31) {\n      return 20; // two B/S\n    }\n    if (binaryShiftByteCount > 0) {\n      return 10; // one B/S\n    }\n    return 0;\n  }\n  \n}",
        "State state = new State(null, 0, 13);\nint expectedCost = calculateBinaryShiftCost(state.binaryShiftByteCount + 1) - calculateBinaryShiftCost(state.binaryShiftByteCount);\nassertEquals(expectedCost, state.addBinaryShiftChar().bitCount - state.bitCount);",
        "  State state = new State(null, HighLevelEncoder.MODE_DIGIT, 0, 4);\n  for (int i = 0; i < 31; ++i) {\n    state = state.addBinaryShiftChar(i);\n  }\n  assertEquals(\"State{bitCount=288}\", state.toString());\n  \n### Response:",
        "State state = new State(new Token(), HighLevelEncoder.MODE_DIGIT, 0);\nassertEquals(state.addBinaryShiftChar(2), new State(new Token().add(\"2\", 4).addBinaryShift(31),\n                                       HighLevelEncoder.MODE_UPPER, 1));\n\nstate = new State(new Token(), HighLevelEncoder.MODE_DIGIT, 0);\nassertEquals(state.addBinaryShiftChar(31), new State(new Token().add(\"3\", 4).addBinaryShift(62),\n                                       HighLevelEncoder.MODE_UPPER, 1));\n\nstate = new State(new Token(), HighLevelEncoder.MODE_DIGIT, 0);\nassertEquals(state.addBinaryShiftChar(127), new State(new Token().add(\"1\", 4).addBinaryShift(135),\n                                       HighLevelEncoder.MODE_UPPER, 1));\n\nstate = new State(new Token(), HighLevelEncoder.MODE_DIGIT, 0);\nassertEquals(state.addBinaryShiftChar(128), new State(new Token().add(\"1\", 4).addBinaryShift(135),\n                                       HighLevelEncoder.MODE_UPPER, 1));\n    \n### JUNIT Test case:\npackage com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void testAddBinaryShiftChar() {\n        <FILL>\n    }\n}\n    \n\n### Response:",
        "State state = new State(new Token(HighLevelEncoder.MODE_UPPER, 0), HighLevelEncoder.MODE_UPPER, 0, 0);\nstate = state.addBinaryShiftChar(127); // binary shift characters are added first\nassertEquals(\"[Upper: 127]\", state.toString());\nstate = state.addBinaryShiftChar(126);\nassertEquals(\"[Upper: 126, Upper: 127]\", state.toString());\nstate = state.addBinaryShiftChar(0); // B/S with extended length\nassertEquals(\"[Upper: 0, Upper: 126, Upper: 127, Extended_BINARY_SHIFT: 0]\", state.toString());\n    \n",
        "    import com.google.zxing.aztec.encoder.HighLevelEncoder;\n    import java.util.*;\n    import org.junit.jupiter.api.*;\n    import static org.junit.jupiter.api.Assertions.*;\n    \n    public class StateTest {\n        @Test\n        public void addBinaryShiftCharTest() {\n            // Test case 1:\n            State state = new State(new Token(\"\"), HighLevelEncoder.MODE_DIGIT, 0, 0);\n            int binaryShiftByteCount = 0;\n            assertEquals(state, state.addBinaryShiftChar(binaryShiftByteCount));\n    \n            // Test case 2:\n            state = new State(new Token(\"\"), HighLevelEncoder.MODE_PUNCT, 0, 0);\n            binaryShiftByteCount = 3;\n            State expected = new State(\n                    new Token(\"\").add(HighLevelEncoder.LATCH_TABLE[state.mode][HighLevelEncoder.MODE_UPPER], 15).add(\n                            0x1f, 8), HighLevelEncoder.MODE_PUNCT, state.binaryShiftByteCount + 2);\n            assertEquals(expected, state.addBinaryShiftChar(binaryShiftByteCount));\n    \n            // Test case 3:\n            state = new State(new Token(\"\"), HighLevelEncoder.MODE_ALPHA, 0, 0);\n            binaryShiftByteCount = 1;\n            expected = new State(\n                    new Token().add(HighLevelEncoder.LATCH_TABLE[state.mode][HighLevelEncoder.MODE_UPPER], 16).add(0xff, 8),\n                    HighLevelEncoder.MODE_ALPHA, state.binaryShiftByteCount + 2);\n            assertEquals(expected, state.addBinaryShiftChar(binaryShiftByteCount));\n    \n            // Test case 4:\n            state = new State(new Token(\"\"), HighLevelEncoder.MODE_DIGIT, 0, 0);\n            binaryShiftByteCount = 2;\n            expected = new State(\n                    new Token().add(HighLevelEncoder.LATCH_TABLE[state.mode][HighLevelEncoder.MODE_UPPER], 16).add(0xff, 8),\n                    HighLevelEncoder.MODE_DIGIT, state.binaryShiftByteCount + 2);\n            assertEquals(expected, state.addBinaryShiftChar(binaryShiftByteCount));\n        }\n    \n        @Test\n        public void toBitArray() {\n            // Test case 1:\n            State state = new State(new Token(\"\"), HighLevelEncoder.MODE_DIGIT, 0, 0);\n            assertThrows(IllegalStateException.class, () -> {\n                state.toBitArray(null);\n            });\n    \n            // Test case 2:\n            String text = \"abc\";\n            int bitCount = 9;\n            int byteCount = 3;\n            Token[] tokens = new Token[byteCount];\n            for (int i = 0; i < byteCount - 1; i++) {\n                tokens[i] = new Token().add(HighLevelEncoder.LATCH_TABLE[state.mode][HighLevelEncoder.MODE_DIGIT], 16);\n            }\n            tokens[byteCount - 1] = new Token()\n                    .add((0xfffe & (bitCount << 1)) | (text.charAt(i) - ' ') + 1), 8);\n    \n            assertThrows(IllegalStateException.class, () -> {\n                state.toBitArray(null);\n            });\n        }\n    }\n        ",
        "Timeout",
        "public State addBinaryShiftChar(int index) {\n    Token token = this.token;\n    int mode = this.mode;\n    int bitCount = this.bitCount;\n    if (this.mode == HighLevelEncoder.MODE_PUNCT || this.mode == HighLevelEncoder.MODE_DIGIT) {\n      int latch = HighLevelEncoder.LATCH_TABLE[mode][HighLevelEncoder.MODE_UPPER];\n      token = token.add(latch & 0xFFFF, latch >> 16);\n      bitCount += latch >> 16;\n      mode = HighLevelEncoder.MODE_UPPER;\n    }\n    int deltaBitCount =\n        (binaryShiftByteCount == 0 || binaryShiftByteCount == 31) ? 18 :\n        (binaryShiftByteCount == 62) ? 9 : 8;\n    State result = new State(token, mode, binaryShiftByteCount + 1, this.bitCount);\n    if (this.binaryShiftByteCount < other.binaryShiftByteCount) {\n      // add additional B/S encoding cost of other, if any\n      result.bitCount += other.binaryShiftCost - this.binaryShiftCost;\n    } else if (this.binaryShiftByteCount > other.binaryShiftByteCount && other.binaryShiftByteCount > 0) {\n      // maximum possible additional cost (we end up exceeding the 31 byte boundary and other state can stay beneath it)\n      result.bitCount += 10;\n    }\n    return result;\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        // Test that we can go from 0 to 254, and back\n        State state = new State(new Token(), HighLevelEncoder.MODE_PUNCT, 0);\n        for (int i = 0; i < 255; i++) {\n            assertEquals(i + 1, state.addBinaryShiftChar(i).binaryShiftByteCount);\n        }\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        // Empty string\n        testBinaryShiftCost(0, 0);\n        // Single character\n        testBinaryShiftCost(1, 10);\n        // Two characters\n        testBinaryShiftCost(2, 18);\n        // Thirty characters\n        testBinaryShiftCost(30, 286);\n    }\n\n    private static void testBinaryShiftCost(int binaryShiftByteCount, int expectedBinaryShiftCost) {\n        State state = new State(null, 0, 0, 0);\n        assertEquals(expectedBinaryShiftCost, state.calculateBinaryShiftCost(binaryShiftByteCount));\n    }\n}"
    ]
}