{
    "project_name": "zxing",
    "file_name": "State.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/encoder/State.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.encoder",
    "docstring": null,
    "source_code": "// Create a new state representing this state, but an additional character\n// output in Binary Shift mode.\nState addBinaryShiftChar(int index) {\n  Token token = this.token;\n  int mode = this.mode;\n  int bitCount = this.bitCount;\n  if (this.mode == HighLevelEncoder.MODE_PUNCT || this.mode == HighLevelEncoder.MODE_DIGIT) {\n    int latch = HighLevelEncoder.LATCH_TABLE[mode][HighLevelEncoder.MODE_UPPER];\n    token = token.add(latch & 0xFFFF, latch >> 16);\n    bitCount += latch >> 16;\n    mode = HighLevelEncoder.MODE_UPPER;\n  }\n  int deltaBitCount =\n      (binaryShiftByteCount == 0 || binaryShiftByteCount == 31) ? 18 :\n      (binaryShiftByteCount == 62) ? 9 : 8;\n  State result = new State(token, mode, binaryShiftByteCount + 1, bitCount + deltaBitCount);\n  if (result.binaryShiftByteCount == 2047 + 31) {\n    // The string is as long as it's allowed to be.  We should end it.\n    result = result.endBinaryShift(index + 1);\n  }\n  return result;\n}\n",
    "class_name": "State",
    "method_name": "addBinaryShiftChar",
    "arguments": [
        "int index"
    ],
    "generate_test": [
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        State state = new State(Token.EMPTY, HighLevelEncoder.MODE_DIGIT, 0, 0);\n        int index = 1;\n        \n        // Test case 1: mode is MODE_PUNCT or MODE_DIGIT and binaryShiftByteCount is not 2047 + 31\n        state.mode = HighLevelEncoder.MODE_PUNCT;\n        state.binaryShiftByteCount = 100;\n        State result = state.addBinaryShiftChar(index);\n        assertEquals(HighLevelEncoder.LATCH_TABLE[state.mode][HighLevelEncoder.MODE_UPPER], result.token.get(result.token.size() - 2));\n        assertEquals(1, result.binaryShiftByteCount);\n        \n        // Test case 2: mode is MODE_PUNCT or MODE_DIGIT and binaryShiftByteCount is 2047 + 31\n        state.mode = HighLevelEncoder.MODE_DIGIT;\n        state.binaryShiftByteCount = 2047 + 31;\n        result = state.addBinaryShiftChar(index);\n        assertEquals(HighLevelEncoder.LATCH_TABLE[state.mode][HighLevelEncoder.MODE_UPPER], result.token.get(result.token.size() - 2));\n        assertEquals(1, result.binaryShiftByteCount);\n        \n        // Test case 3: mode is not MODE_PUNCT or MODE_DIGIT and binaryShiftByteCount is less than 62\n        state.mode = HighLevelEncoder.MODE_UPPER;\n        state.binaryShiftByteCount = 10;\n        result = state.addBinaryShiftChar(index);\n        assertEquals(HighLevelEncoder.LATCH_TABLE[state.mode][HighLevelEncoder.MODE_UPPER], result.token.get(result.token.size() - 2));\n        assertEquals(1, result.binaryShiftByteCount);\n        \n        // Test case 4: mode is not MODE_PUNCT or MODE_DIGIT and binaryShiftByteCount is greater than or equal to 62\n        state.mode = HighLevelEncoder.MODE_LOWER;\n        state.binaryShiftByteCount = 63;\n        result = state.addBinaryShiftChar(index);\n        assertEquals(HighLevelEncoder.LATCH_TABLE[state.mode][HighLevelEncoder.MODE_UPPER], result.token.get(result.token.size() - 2));\n        assertEquals(1, result.binaryShiftByteCount);\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        // Create a new state with initial values\n        int mode = HighLevelEncoder.MODE_PUNCT;\n        Token token = new Token(HighLevelEncoder.LATCH_TABLE[mode][HighLevelEncoder.MODE_UPPER], 0);\n        int binaryShiftByteCount = 31;\n        int bitCount = 2894;\n        State state = new State(token, mode, binaryShiftByteCount, bitCount);\n\n        // Add a character to the current state in Binary Shift mode\n        state = state.addBinaryShiftChar(0);\n\n        // Check the updated values\n        assertEquals(state.getMode(), HighLevelEncoder.MODE_UPPER);\n        assertNotNull(state.getToken());\n        assertEquals(state.getToken().getValue(), \"ABC\");\n        assertEquals(state.getBinaryShiftByteCount(), 32);\n        assertEquals(state.getBitCount(), 1047);\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        Token token = new Token(0, 0);\n        int mode = HighLevelEncoder.MODE_DIGIT;\n        int binaryShiftByteCount = 0;\n        int bitCount = 0;\n        State state = new State(token, mode, binaryShiftByteCount, bitCount);\n\n        int index = 1;\n        Token updatedToken = token.add(HighLevelEncoder.LATCH_TABLE[mode][HighLevelEncoder.MODE_UPPER], HighLevelEncoder.LATCH_TABLE[mode][HighLevelEncoder.MODE_UPPER] >> 16);\n        bitCount += (HighLevelEncoder.LATCH_TABLE[mode][HighLevelEncoder.MODE_UPPER] >> 16);\n        mode = HighLevelEncoder.MODE_UPPER;\n\n        State updatedState = new State(updatedToken, mode, binaryShiftByteCount + 1, bitCount);\n        assertEquals(updatedState, state.addBinaryShiftChar(index));\n    }\n}",
        "@Test\npublic void addBinaryShiftCharTest() {\n    // Test with no previous shift\n    State state = new State(new Token(), HighLevelEncoder.MODE_PUNCT, 0, 0);\n    assertEquals(state.addBinaryShiftChar(2).getMode(), HighLevelEncoder.MODE_UPPER);\n    \n    // Test with a previous shift\n    state = new State(new Token(), HighLevelEncoder.MODE_DIGIT, 31, 0);\n    assertEquals(state.addBinaryShiftChar(2).getMode(), HighLevelEncoder.MODE_UPPER);\n    \n    // Test with a previous shift and no token\n    state = new State(null, HighLevelEncoder.MODE_PUNCT, 0, 0);\n    assertEquals(state.addBinaryShiftChar(2).getMode(), HighLevelEncoder.MODE_UPPER);\n    \n    // Test with a previous shift and a non-zero binary shift byte count\n    state = new State(new Token(), HighLevelEncoder.MODE_DIGIT, 31, 0);\n    assertEquals(state.addBinaryShiftChar(2).getMode(), HighLevelEncoder.MODE_UPPER);\n    \n    // Test with a previous shift and a non-zero bit count\n    state = new State(new Token(), HighLevelEncoder.MODE_PUNCT, 0, 1);\n    assertEquals(state.addBinaryShiftChar(2).getMode(), HighLevelEncoder.MODE_UPPER);\n    \n    // Test with a previous shift and a non-zero bit count and no token\n    state = new State(null, HighLevelEncoder.MODE_DIGIT, 31, 0);\n    assertEquals(state.addBinaryShiftChar(2).getMode(), HighLevelEncoder.MODE_UPPER);\n    \n    // Test with a previous shift and a non-zero bit count and a non-zero binary shift byte count\n    state = new State(new Token(), HighLevelEncoder.MODE_PUNCT, 0, 1);\n    assertEquals(state.addBinaryShiftChar(2).getMode(), HighLevelEncoder.MODE_UPPER);\n}",
        "@Test\npublic void addBinaryShiftCharTest() {\n    // Set up input data\n    String input = \"Hello World!\";\n    int index = 5; // Index of the current character being encoded\n\n    // Create a new state representing this state, but with an additional character output in Binary Shift mode.\n    State state = new State(Token.EMPTY, HighLevelEncoder.MODE_PUNCT, 0, 0);\n    State result = state.addBinaryShiftChar(index);\n\n    // Verify that the resulting state is correct\n    assertEquals(HighLevelEncoder.MODE_UPPER, result.getMode());\n    assertEquals(\"HW\", result.getToken().getText());\n    assertEquals(1, result.getBinaryShiftByteCount());\n    assertEquals(18, result.getBitCount());\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        // Create a new state object with some initial values\n        int mode = HighLevelEncoder.MODE_DIGIT;\n        Token token = new Token(0, 0);\n        int binaryShiftByteCount = 10;\n        int bitCount = 50;\n        State state = new State(token, mode, binaryShiftByteCount, bitCount);\n\n        // Add a character to the binary shift string and check that it was added correctly\n        int index = 3;\n        State result = state.addBinaryShiftChar(index);\n        assertEquals(result.binaryShiftByteCount, binaryShiftByteCount + 1);\n        assertEquals(result.bitCount, bitCount + HighLevelEncoder.LATCH_TABLE[mode][HighLevelEncoder.MODE_UPPER]);\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        // Test when binary shift byte count is 0 and the string length is less than or equal to 2047 + 31\n        State state = new State(new Token(\"\"), HighLevelEncoder.MODE_UPPER, 0, 0);\n        int index = 0;\n        int character = 'a';\n        state = state.addBinaryShiftChar(index, character);\n        assertEquals(state.getToken().toString(), \"a\");\n        assertEquals(state.getMode(), HighLevelEncoder.MODE_UPPER);\n        assertEquals(state.getBinaryShiftByteCount(), 1);\n        assertEquals(state.getBitCount(), 8);\n\n        // Test when binary shift byte count is 31 and the string length is less than or equal to 2047 + 31\n        state = new State(new Token(\"\"), HighLevelEncoder.MODE_UPPER, 31, 0);\n        index = 0;\n        character = 'a';\n        state = state.addBinaryShiftChar(index, character);\n        assertEquals(state.getToken().toString(), \"aa\");\n        assertEquals(state.getMode(), HighLevelEncoder.MODE_UPPER);\n        assertEquals(state.getBinaryShiftByteCount(), 32);\n        assertEquals(state.getBitCount(), 16);\n\n        // Test when binary shift byte count is 0 and the string length exceeds 2047 + 31\n        state = new State(new Token(\"\"), HighLevelEncoder.MODE_UPPER, 0, 0);\n        index = 0;\n        character = 'a';\n        for (int i = 0; i < 1000; i++) {\n            state = state.addBinaryShiftChar(index++, character);\n        }\n        assertEquals(state.getToken().toString(), \"aaaaaa\");\n        assertEquals(state.getMode(), HighLevelEncoder.MODE_UPPER);\n        assertEquals(state.getBinaryShiftByteCount(), 1000);\n        assertEquals(state.getBitCount(), 8000);\n    }\n}",
        "\n@Test\npublic void addBinaryShiftCharTest() {\n    // Arrange\n    State state = new State(new Token(), 0, 0, 0);\n    int index = 1;\n\n    // Act\n    State result = state.addBinaryShiftChar(index);\n\n    // Assert\n    assertEquals(result.getMode(), HighLevelEncoder.MODE_UPPER);\n    assertEquals(result.getToken().getValue(), (HighLevelEncoder.LATCH_TABLE[0][HighLevelEncoder.MODE_UPPER] & 0xFFFF));\n    assertEquals(result.getBinaryShiftByteCount(), 1);\n}",
        "import static org.junit.jupiter.api.Assertions.*;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.google.zxing.aztec.encoder.State;\n\nclass StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        // Create a new state with an initial token and mode\n        Token initialToken = new Token(new int[] { 0, 1 }, StandardCharsets.UTF_8);\n        int initialMode = HighLevelEncoder.MODE_UPPER;\n        State state = new State(initialToken, initialMode, 0, 0);\n        \n        // Add a binary shift character to the state\n        state = state.addBinaryShiftChar(0);\n        \n        // Verify that the mode is now MODE_PUNCT or MODE_DIGIT\n        assertTrue(state.getMode() == HighLevelEncoder.MODE_PUNCT || state.getMode() == HighLevelEncoder.MODE_DIGIT);\n        \n        // Verify that the token has been updated correctly\n        Token expectedToken = new Token(new int[] { 0, 1 }, StandardCharsets.UTF_8).add(HighLevelEncoder.LATCH_TABLE[initialMode][HighLevelEncoder.MODE_PUNCT], HighLevelEncoder.LATCH_TABLE[initialMode][HighLevelEncoder.MODE_PUNCT] >> 16);\n        assertEquals(state.getToken(), expectedToken);\n        \n        // Verify that the binary shift byte count has been updated correctly\n        int expectedBinaryShiftByteCount = state.binaryShiftByteCount + 1;\n        assertEquals(expectedBinaryShiftByteCount, state.binaryShiftByteCount);\n        \n        // Verify that the bit count has been updated correctly\n        int expectedBitCount = state.bitCount + HighLevelEncoder.LATCH_TABLE[initialMode][HighLevelEncoder.MODE_PUNCT] >> 16;\n        assertEquals(expectedBitCount, state.bitCount);\n    }\n}",
        "@Test\npublic void addBinaryShiftCharTest() {\n    // Set up the current state with a token and bit count\n    Token token = new Token(\"12345\", 0);\n    int mode = HighLevelEncoder.MODE_DIGIT;\n    int bitCount = 10;\n    int binaryShiftByteCount = 0;\n    State state = new State(token, mode, binaryShiftByteCount, bitCount);\n    \n    // Add a character to the Binary Shift mode\n    int index = 5;\n    State updatedState = state.addBinaryShiftChar(index);\n    \n    // Check that the updated state has the correct token and bit count\n    assertEquals(\"123451\", updatedState.token.value());\n    assertEquals(HighLevelEncoder.MODE_UPPER, updatedState.mode);\n    assertEquals(11, updatedState.bitCount);\n    \n    // Check that the updated state has the correct binary shift byte count\n    assertEquals(1, updatedState.binaryShiftByteCount);\n}"
    ]
}