{
    "project_name": "zxing",
    "file_name": "State.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/encoder/State.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.encoder",
    "docstring": null,
    "source_code": "// Create a new state representing this state, but an additional character\n// output in Binary Shift mode.\nState addBinaryShiftChar(int index) {\n  Token token = this.token;\n  int mode = this.mode;\n  int bitCount = this.bitCount;\n  if (this.mode == HighLevelEncoder.MODE_PUNCT || this.mode == HighLevelEncoder.MODE_DIGIT) {\n    int latch = HighLevelEncoder.LATCH_TABLE[mode][HighLevelEncoder.MODE_UPPER];\n    token = token.add(latch & 0xFFFF, latch >> 16);\n    bitCount += latch >> 16;\n    mode = HighLevelEncoder.MODE_UPPER;\n  }\n  int deltaBitCount =\n      (binaryShiftByteCount == 0 || binaryShiftByteCount == 31) ? 18 :\n      (binaryShiftByteCount == 62) ? 9 : 8;\n  State result = new State(token, mode, binaryShiftByteCount + 1, bitCount + deltaBitCount);\n  if (result.binaryShiftByteCount == 2047 + 31) {\n    // The string is as long as it's allowed to be.  We should end it.\n    result = result.endBinaryShift(index + 1);\n  }\n  return result;\n}\n",
    "class_name": "State",
    "method_name": "addBinaryShiftChar",
    "arguments": [
        "int index"
    ],
    "generate_test": [
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        int index = 10;\n        State state = new State(new Token(), HighLevelEncoder.MODE_DIGIT, 1, 2);\n        State result = state.addBinaryShiftChar(index);\n        assertEquals(result.binaryShiftByteCount, 2);\n        assertEquals(result.mode, HighLevelEncoder.MODE_UPPER);\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        // Create a new state representing this state, but an additional character output in Binary Shift mode.\n        int index = 10;\n        State state = new State(Token.EMPTY, HighLevelEncoder.MODE_UPPER, 31, 62);\n        state = state.addBinaryShiftChar(index);\n        \n        // Check that the result is correct\n        assertEquals(state.token, Token.EMPTY.add(HighLevelEncoder.LATCH_TABLE[HighLevelEncoder.MODE_UPPER][HighLevelEncoder.MODE_UPPER] & 0xFFFF, HighLevelEncoder.LATCH_TABLE[HighLevelEncoder.MODE_UPPER][HighLevelEncoder.MODE_UPPER] >> 16).add(index, 8));\n        assertEquals(state.mode, HighLevelEncoder.MODE_UPPER);\n        assertEquals(state.binaryShiftByteCount, 32);\n        assertEquals(state.bitCount, 70);\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        // Test that the method correctly adds a new state with an additional character in Binary Shift mode\n        State state = new State(new Token(), HighLevelEncoder.MODE_UPPER, 0, 0);\n        int index = 0;\n        int bitCount = state.bitCount;\n        \n        State result = state.addBinaryShiftChar(index);\n        \n        assertEquals(result.token.getSize(), 1 + state.token.getSize());\n        assertEquals(result.mode, HighLevelEncoder.MODE_UPPER);\n        assertEquals(result.binaryShiftByteCount, state.binaryShiftByteCount + 1);\n        assertEquals(result.bitCount, bitCount + 8); // check that the bit count has been incremented by 8\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        Token token = new Token(\"Hello\");\n        int mode = HighLevelEncoder.MODE_PUNCT;\n        int bitCount = 0;\n        int binaryShiftByteCount = 0;\n\n        // Create a new state representing this state, but with an additional character output in Binary Shift mode\n        State result = new State(token, mode, binaryShiftByteCount + 1);\n\n        assertEquals(\"Hello\", result.getToken().getValue());\n        assertEquals(HighLevelEncoder.MODE_UPPER, result.getMode());\n        assertEquals(0, result.getBinaryShiftByteCount());\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        // Create a new instance of the State class\n        State state = new State();\n        \n        // Set the mode, token, and binaryShiftByteCount fields to valid values\n        state.mode = HighLevelEncoder.MODE_PUNCT;\n        state.token = Token.fromString(\"Hello\");\n        state.binaryShiftByteCount = 10;\n        \n        // Call the addBinaryShiftChar method with an appropriate index\n        int index = 5;\n        State result = state.addBinaryShiftChar(index);\n        \n        // Verify that the returned State object has the expected properties set\n        assertEquals(HighLevelEncoder.MODE_UPPER, result.mode);\n        assertEquals(\"Hello\", result.token.getContent());\n        assertEquals(11, result.binaryShiftByteCount);\n    }\n}\n",
        "\npackage com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        // Set up the test data\n        int index = 0;\n        Token token = new Token(0, 0);\n        int mode = HighLevelEncoder.MODE_PUNCT;\n        int bitCount = 0;\n\n        // Call the method under test\n        State result = addBinaryShiftChar(index);\n\n        // Assert that the returned state is correct\n        assertEquals(result.binaryShiftByteCount, 18);\n        assertEquals(result.token.getBitArray().size(), 2047 + 31);\n    }\n}\n",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        // Create a new state with the given mode and character count\n        State state = new State(HighLevelEncoder.MODE_PUNCT, 0);\n        \n        // Call the method under test\n        State result = state.addBinaryShiftChar();\n        \n        // Verify that the result is as expected\n        assertEquals(result.mode, HighLevelEncoder.MODE_UPPER);\n        assertEquals(result.binaryShiftByteCount, 1);\n    }\n}",
        "@Test\npublic void addBinaryShiftCharTest() {\n    // Test 1: Verify that the new state has a token with an additional character\n    State state = new State(new Token(), HighLevelEncoder.MODE_PUNCT, 0, 0);\n    int index = 5;\n    State result = state.addBinaryShiftChar(index);\n    assertEquals(\"Verify that the new token has an additional character\", result.token.getBytes().length - 1, index);\n    \n    // Test 2: Verify that the mode of the new state is MODE_UPPER\n    assertEquals(\"Verify that the new state has a mode of MODE_UPPER\", HighLevelEncoder.MODE_UPPER, result.mode);\n    \n    // Test 3: Verify that the bitCount of the new state is correct\n    int expectedBitCount = (binaryShiftByteCount == 0 || binaryShiftByteCount == 31) ? 18 :\n            (binaryShiftByteCount == 62) ? 9 : 8;\n    assertEquals(\"Verify that the bitCount of the new state is correct\", result.bitCount, expectedBitCount);\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        State state = new State(new Token(\"\"), HighLevelEncoder.MODE_UPPER, 0, 1);\n        assertEquals(state.token, new Token(\"\"));\n        assertEquals(state.mode, HighLevelEncoder.MODE_UPPER);\n        assertEquals(state.bitCount, 1);\n\n        state = state.addBinaryShiftChar('A');\n        assertEquals(state.token, new Token(\"A\"));\n        assertEquals(state.mode, HighLevelEncoder.MODE_UPPER);\n        assertEquals(state.bitCount, 9);\n\n        state = state.addBinaryShiftChar('B');\n        assertEquals(state.token, new Token(\"AB\"));\n        assertEquals(state.mode, HighLevelEncoder.MODE_UPPER);\n        assertEquals(state.bitCount, 18);\n\n        // Check that the number of characters in the binary shift string reaches 2047\n        state = state.addBinaryShiftChar('C');\n        assertEquals(state.token, new Token(\"ABC\"));\n        assertEquals(state.mode, HighLevelEncoder.MODE_UPPER);\n        assertEquals(state.bitCount, 28);\n\n        // Check that the method returns a new state with binaryShiftByteCount set to 0 and endBinaryShift called on it\n        State result = state.addBinaryShiftChar('D');\n        assertEquals(result.token, new Token(\"ABCD\"));\n        assertEquals(result.mode, HighLevelEncoder.MODE_UPPER);\n        assertEquals(result.bitCount, 38);\n    }\n}\n",
        "@Test\npublic void addBinaryShiftCharTest() {\n    // Create a new state representing this state, but an additional character output in Binary Shift mode.\n    State state = new State();\n    int index = 0;\n    assertEquals(state.addBinaryShiftChar(index), new State());\n}"
    ]
}