{
    "project_name": "Java",
    "file_name": "AbsoluteMax.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/AbsoluteMax.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Finds the absolute maximum value among the given numbers.\n     *\n     * @param numbers The numbers to compare.\n     * @return The absolute maximum value.\n     * @throws IllegalArgumentException If the input array is empty or null.\n     */",
    "source_code": "\npublic static int getMaxValue(int... numbers) {\n    if (numbers == null || numbers.length == 0) {\n        throw new IllegalArgumentException(\"Numbers array cannot be empty or null\");\n    }\n    int absMax = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (Math.abs(numbers[i]) > Math.abs(absMax)) {\n            absMax = numbers[i];\n        }\n    }\n    return absMax;\n}\n",
    "class_name": "AbsoluteMax",
    "method_name": "getMaxValue",
    "arguments": [
        "int numbers"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n   \n    @Test\n    public void getMaxValueTest() {\n        // Test with both positive and negative numbers, expecting positive max\n        assertEquals(5, AbsoluteMax.getMaxValue(1, -4, 5, 3));\n        \n        // Test with both positive and negative numbers, expecting negative max\n        assertEquals(-6, AbsoluteMax.getMaxValue(-1, -6, 4, 2));\n        \n        // Test with single number\n        assertEquals(7, AbsoluteMax.getMaxValue(7));\n        \n        // Test with all negative numbers\n        assertEquals(-1, AbsoluteMax.getMaxValue(-3, -1, -4, -2));\n        \n        // Test with all positive numbers\n        assertEquals(9, AbsoluteMax.getMaxValue(2, 3, 9 , 5));\n\n        // Test with zero included\n        assertEquals(0, AbsoluteMax.getMaxValue(0));\n\n        // Testing exception for empty input\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n\n        // Testing exception for null input\n        exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers only\n        assertEquals(4, AbsoluteMax.getMaxValue(1, 2, 3, 4));\n        // Test with negative numbers only\n        assertEquals(-8, AbsoluteMax.getMaxValue(-1, -2, -8, -4));\n        // Test with a mix of positive and negative numbers\n        assertEquals(-5, AbsoluteMax.getMaxValue(-5, 3, 0, 2));\n        // Test with all zeros (which should return zero)\n        assertEquals(0, AbsoluteMax.getMaxValue(0, 0, 0, 0));\n        // Test with one number, which also tests with a positive and negative\n        assertEquals(10, AbsoluteMax.getMaxValue(10));\n        assertEquals(-1, AbsoluteMax.getMaxValue(-1));\n        \n        // Test throwing exception for empty array\n        Exception emptyArrayException = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        assertTrue(emptyArrayException.getMessage().contains(\"Numbers array cannot be empty or null\"));\n\n        // Test throwing exception for null array\n        Exception nullArrayException = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertTrue(nullArrayException.getMessage().contains(\"Numbers array cannot be empty or null\"));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null));\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue());\n        assertEquals(5, AbsoluteMax.getMaxValue(1, -2, 5, 3, 4));\n        assertEquals(-5, AbsoluteMax.getMaxValue(1, -2, -5, 3, 4));\n        assertEquals(0, AbsoluteMax.getMaxValue(0, -0));\n        assertEquals(1, AbsoluteMax.getMaxValue(-1, 1));\n        assertEquals(Integer.MAX_VALUE, AbsoluteMax.getMaxValue(Integer.MIN_VALUE, Integer.MAX_VALUE));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    \n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(5, AbsoluteMax.getMaxValue(1, 2, 3, 4, 5));\n        \n        // Test with negative numbers\n        assertEquals(-5, AbsoluteMax.getMaxValue(-1, -2, -3, -4, -5));\n        \n        // Test with a mix of negative and positive numbers where a negative is largest by abs value\n        assertEquals(-5, AbsoluteMax.getMaxValue(1, -2, 3, -5, 4));\n        \n        // Test with a mix of negative and positive numbers where a positive is largest by abs value\n        assertEquals(5, AbsoluteMax.getMaxValue(-1, 2, -3, 5, -4));\n        \n        // Test with zeros and positives\n        assertEquals(5, AbsoluteMax.getMaxValue(0, 2, 3, 5, 0));\n        \n        // Test with zeros and negatives\n        assertEquals(-5, AbsoluteMax.getMaxValue(0, -2, -3, -5, 0));\n        \n        // Test with a single value\n        assertEquals(1, AbsoluteMax.getMaxValue(1));\n        \n        // Test with a single negative value\n        assertEquals(-1, AbsoluteMax.getMaxValue(-1));\n        \n        // Test throwing of IllegalArgumentException for empty array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n        \n        // Test throwing of IllegalArgumentException for null input\n        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", nullException.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    \n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(5, AbsoluteMax.getMaxValue(1, 2, 3, 4, 5));\n        // Test with negative numbers\n        assertEquals(-6, AbsoluteMax.getMaxValue(-1, -2, -3, -6, -4));\n        // Test with mixed numbers\n        assertEquals(-10, AbsoluteMax.getMaxValue(7, -8, 9, -10, 2));\n        // Test with single value\n        assertEquals(42, AbsoluteMax.getMaxValue(42));\n        // Test with single negative value\n        assertEquals(-99, AbsoluteMax.getMaxValue(-99));\n    }\n    \n    @Test\n    public void getMaxValueWithEmptyArrayTest() {\n        // Test with empty array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        // Check if the message is the same as expected\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n\n    @Test\n    public void getMaxValueWithNullArrayTest() {\n        // Test with null array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        // Check if the message is the same as expected\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null), \"Numbers array cannot be empty or null\");\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(), \"Numbers array cannot be empty or null\");\n        \n        assertEquals(5, AbsoluteMax.getMaxValue(5, -4, 3, 2, 1));\n        assertEquals(-5, AbsoluteMax.getMaxValue(-5, -4, 3, 2, 1));\n        assertEquals(5, AbsoluteMax.getMaxValue(-5, -4, -3, -2, -1, 5));\n        \n        assertEquals(0, AbsoluteMax.getMaxValue(0));\n        assertEquals(-1, AbsoluteMax.getMaxValue(-1));\n        assertEquals(1, AbsoluteMax.getMaxValue(1));\n        \n        assertEquals(3, AbsoluteMax.getMaxValue(-2, -2, 3, 2));\n        assertEquals(-3, AbsoluteMax.getMaxValue(-3, -2, 2, 2));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with a mix of positive and negative numbers\n        assertEquals(5, AbsoluteMax.getMaxValue(1, -2, 5, -3, 4));\n\n        // Test with all negative numbers\n        assertEquals(-1, AbsoluteMax.getMaxValue(-1, -2, -3, -4));\n\n        // Test with all positive numbers\n        assertEquals(10, AbsoluteMax.getMaxValue(1, 2, 3, 10));\n\n        // Test with a single number\n        assertEquals(7, AbsoluteMax.getMaxValue(7));\n\n        // Test with zeros\n        assertEquals(0, AbsoluteMax.getMaxValue(0, 0, 0));\n\n        // Test with positive and negative zeros\n        assertEquals(0, AbsoluteMax.getMaxValue(0, -0)); \n\n        // Test to confirm it finds absolute maximum (not relative max)\n        assertEquals(-7, AbsoluteMax.getMaxValue(1, 4, -7, 6));\n\n        // Test with a full range of integer inputs\n        assertEquals(Integer.MAX_VALUE, AbsoluteMax.getMaxValue(Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE));\n    }\n\n    @Test\n    public void getMaxValueExceptionTest() {\n        // Test with empty array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n\n        // Test with null input\n        exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(10, AbsoluteMax.getMaxValue(1, 3, 10, 2));\n\n        // Test with negative numbers\n        assertEquals(-20, AbsoluteMax.getMaxValue(-3, -1, -20, -5));\n\n        // Test with a mix of negative and positive numbers\n        assertEquals(-30, AbsoluteMax.getMaxValue(5, -30, 20, -10));\n\n        // Test with a single number\n        assertEquals(7, AbsoluteMax.getMaxValue(7));\n\n        // Test with zeros and positives\n        assertEquals(0, AbsoluteMax.getMaxValue(0, 0, 0));\n\n        // Test with zeros and negatives\n        assertEquals(-1, AbsoluteMax.getMaxValue(0, -1, 0));\n\n        // Exception for null input\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null));\n\n        // Exception for empty input\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null), \"Numbers array cannot be empty or null\");\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(), \"Numbers array cannot be empty or null\");\n\n        assertEquals(3, AbsoluteMax.getMaxValue(1, -2, 3), \"The absolute max of 1, -2, 3 should be 3\");\n        assertEquals(-4, AbsoluteMax.getMaxValue(-1, -4, 2), \"The absolute max of -1, -4, 2 should be -4\");\n        assertEquals(5, AbsoluteMax.getMaxValue(-5, 5), \"The absolute max of -5, 5 should be 5, since it appears last\");\n        assertEquals(0, AbsoluteMax.getMaxValue(0), \"The absolute max of single element 0 should be 0\");\n        assertEquals(-10, AbsoluteMax.getMaxValue(-10), \"The absolute max of single element -10 should be -10\");\n        assertEquals(10, AbsoluteMax.getMaxValue(10, -10), \"The absolute max when both values are the same in absolute terms should be 10, since it appears first\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(9, AbsoluteMax.getMaxValue(1, 2, 9, 3));\n        // Test with negative numbers\n        assertEquals(-10, AbsoluteMax.getMaxValue(-1, -2, -10, -3));\n        // Test with a mix of negative and positive numbers\n        assertEquals(-50, AbsoluteMax.getMaxValue(-50, 30, 20, 10));\n        // Test with a single number\n        assertEquals(5, AbsoluteMax.getMaxValue(5));\n    }\n\n    @Test\n    public void getMaxValueWithEmptyArrayTest() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n\n    @Test\n    public void getMaxValueWithNullInputTest() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n\n    @Test\n    public void getMaxValueWithAllZeroesTest() {\n        // Assuming all zeros should return zero rather than throw an exception.\n        assertEquals(0, AbsoluteMax.getMaxValue(0, 0, 0, 0));\n    }\n}"
    ]
}