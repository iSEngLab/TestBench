Source code: 


public static int getMaxValue(int... numbers) {
    if (numbers == null || numbers.length == 0) {
        throw new IllegalArgumentException("Numbers array cannot be empty or null");
    }
    int absMax = numbers[0];
    for (int i = 1; i < numbers.length; i++) {
        if (Math.abs(numbers[i]) > Math.abs(absMax)) {
            absMax = numbers[i];
        }
    }
    return absMax;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
   
    @Test
    public void getMaxValueTest() {
        // Test with both positive and negative numbers, expecting positive max
        assertEquals(5, AbsoluteMax.getMaxValue(1, -4, 5, 3));
        
        // Test with both positive and negative numbers, expecting negative max
        assertEquals(-6, AbsoluteMax.getMaxValue(-1, -6, 4, 2));
        
        // Test with single number
        assertEquals(7, AbsoluteMax.getMaxValue(7));
        
        // Test with all negative numbers
        assertEquals(-1, AbsoluteMax.getMaxValue(-3, -1, -4, -2));
        
        // Test with all positive numbers
        assertEquals(9, AbsoluteMax.getMaxValue(2, 3, 9 , 5));

        // Test with zero included
        assertEquals(0, AbsoluteMax.getMaxValue(0));

        // Testing exception for empty input
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue();
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());

        // Testing exception for null input
        exception = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(null);
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
    }
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {

    @Test
    public void getMaxValueTest() {
        // Test with positive numbers only
        assertEquals(4, AbsoluteMax.getMaxValue(1, 2, 3, 4));
        // Test with negative numbers only
        assertEquals(-8, AbsoluteMax.getMaxValue(-1, -2, -8, -4));
        // Test with a mix of positive and negative numbers
        assertEquals(-5, AbsoluteMax.getMaxValue(-5, 3, 0, 2));
        // Test with all zeros (which should return zero)
        assertEquals(0, AbsoluteMax.getMaxValue(0, 0, 0, 0));
        // Test with one number, which also tests with a positive and negative
        assertEquals(10, AbsoluteMax.getMaxValue(10));
        assertEquals(-1, AbsoluteMax.getMaxValue(-1));
        
        // Test throwing exception for empty array
        Exception emptyArrayException = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue();
        });
        assertTrue(emptyArrayException.getMessage().contains("Numbers array cannot be empty or null"));

        // Test throwing exception for null array
        Exception nullArrayException = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(null);
        });
        assertTrue(nullArrayException.getMessage().contains("Numbers array cannot be empty or null"));
    }
}


No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {

    @Test
    public void getMaxValueTest() {
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null));
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue());
        assertEquals(5, AbsoluteMax.getMaxValue(1, -2, 5, 3, 4));
        assertEquals(-5, AbsoluteMax.getMaxValue(1, -2, -5, 3, 4));
        assertEquals(0, AbsoluteMax.getMaxValue(0, -0));
        assertEquals(1, AbsoluteMax.getMaxValue(-1, 1));
        assertEquals(Integer.MAX_VALUE, AbsoluteMax.getMaxValue(Integer.MIN_VALUE, Integer.MAX_VALUE));
    }
}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    
    @Test
    public void getMaxValueTest() {
        // Test with positive numbers
        assertEquals(5, AbsoluteMax.getMaxValue(1, 2, 3, 4, 5));
        
        // Test with negative numbers
        assertEquals(-5, AbsoluteMax.getMaxValue(-1, -2, -3, -4, -5));
        
        // Test with a mix of negative and positive numbers where a negative is largest by abs value
        assertEquals(-5, AbsoluteMax.getMaxValue(1, -2, 3, -5, 4));
        
        // Test with a mix of negative and positive numbers where a positive is largest by abs value
        assertEquals(5, AbsoluteMax.getMaxValue(-1, 2, -3, 5, -4));
        
        // Test with zeros and positives
        assertEquals(5, AbsoluteMax.getMaxValue(0, 2, 3, 5, 0));
        
        // Test with zeros and negatives
        assertEquals(-5, AbsoluteMax.getMaxValue(0, -2, -3, -5, 0));
        
        // Test with a single value
        assertEquals(1, AbsoluteMax.getMaxValue(1));
        
        // Test with a single negative value
        assertEquals(-1, AbsoluteMax.getMaxValue(-1));
        
        // Test throwing of IllegalArgumentException for empty array
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue();
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
        
        // Test throwing of IllegalArgumentException for null input
        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(null);
        });
        assertEquals("Numbers array cannot be empty or null", nullException.getMessage());
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    
    @Test
    public void getMaxValueTest() {
        // Test with positive numbers
        assertEquals(5, AbsoluteMax.getMaxValue(1, 2, 3, 4, 5));
        // Test with negative numbers
        assertEquals(-6, AbsoluteMax.getMaxValue(-1, -2, -3, -6, -4));
        // Test with mixed numbers
        assertEquals(-10, AbsoluteMax.getMaxValue(7, -8, 9, -10, 2));
        // Test with single value
        assertEquals(42, AbsoluteMax.getMaxValue(42));
        // Test with single negative value
        assertEquals(-99, AbsoluteMax.getMaxValue(-99));
    }
    
    @Test
    public void getMaxValueWithEmptyArrayTest() {
        // Test with empty array
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue();
        });
        // Check if the message is the same as expected
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
    }

    @Test
    public void getMaxValueWithNullArrayTest() {
        // Test with null array
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(null);
        });
        // Check if the message is the same as expected
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {

    @Test
    public void getMaxValueTest() {
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null), "Numbers array cannot be empty or null");
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(), "Numbers array cannot be empty or null");
        
        assertEquals(5, AbsoluteMax.getMaxValue(5, -4, 3, 2, 1));
        assertEquals(-5, AbsoluteMax.getMaxValue(-5, -4, 3, 2, 1));
        assertEquals(5, AbsoluteMax.getMaxValue(-5, -4, -3, -2, -1, 5));
        
        assertEquals(0, AbsoluteMax.getMaxValue(0));
        assertEquals(-1, AbsoluteMax.getMaxValue(-1));
        assertEquals(1, AbsoluteMax.getMaxValue(1));
        
        assertEquals(3, AbsoluteMax.getMaxValue(-2, -2, 3, 2));
        assertEquals(-3, AbsoluteMax.getMaxValue(-3, -2, 2, 2));
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {

    @Test
    public void getMaxValueTest() {
        // Test with a mix of positive and negative numbers
        assertEquals(5, AbsoluteMax.getMaxValue(1, -2, 5, -3, 4));

        // Test with all negative numbers
        assertEquals(-1, AbsoluteMax.getMaxValue(-1, -2, -3, -4));

        // Test with all positive numbers
        assertEquals(10, AbsoluteMax.getMaxValue(1, 2, 3, 10));

        // Test with a single number
        assertEquals(7, AbsoluteMax.getMaxValue(7));

        // Test with zeros
        assertEquals(0, AbsoluteMax.getMaxValue(0, 0, 0));

        // Test with positive and negative zeros
        assertEquals(0, AbsoluteMax.getMaxValue(0, -0)); 

        // Test to confirm it finds absolute maximum (not relative max)
        assertEquals(-7, AbsoluteMax.getMaxValue(1, 4, -7, 6));

        // Test with a full range of integer inputs
        assertEquals(Integer.MAX_VALUE, AbsoluteMax.getMaxValue(Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE));
    }

    @Test
    public void getMaxValueExceptionTest() {
        // Test with empty array
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue();
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());

        // Test with null input
        exception = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(null);
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        // Test with positive numbers
        assertEquals(10, AbsoluteMax.getMaxValue(1, 3, 10, 2));

        // Test with negative numbers
        assertEquals(-20, AbsoluteMax.getMaxValue(-3, -1, -20, -5));

        // Test with a mix of negative and positive numbers
        assertEquals(-30, AbsoluteMax.getMaxValue(5, -30, 20, -10));

        // Test with a single number
        assertEquals(7, AbsoluteMax.getMaxValue(7));

        // Test with zeros and positives
        assertEquals(0, AbsoluteMax.getMaxValue(0, 0, 0));

        // Test with zeros and negatives
        assertEquals(-1, AbsoluteMax.getMaxValue(0, -1, 0));

        // Exception for null input
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null));

        // Exception for empty input
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue());
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null), "Numbers array cannot be empty or null");
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(), "Numbers array cannot be empty or null");

        assertEquals(3, AbsoluteMax.getMaxValue(1, -2, 3), "The absolute max of 1, -2, 3 should be 3");
        assertEquals(-4, AbsoluteMax.getMaxValue(-1, -4, 2), "The absolute max of -1, -4, 2 should be -4");
        assertEquals(5, AbsoluteMax.getMaxValue(-5, 5), "The absolute max of -5, 5 should be 5, since it appears last");
        assertEquals(0, AbsoluteMax.getMaxValue(0), "The absolute max of single element 0 should be 0");
        assertEquals(-10, AbsoluteMax.getMaxValue(-10), "The absolute max of single element -10 should be -10");
        assertEquals(10, AbsoluteMax.getMaxValue(10, -10), "The absolute max when both values are the same in absolute terms should be 10, since it appears first");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {

    @Test
    public void getMaxValueTest() {
        // Test with positive numbers
        assertEquals(9, AbsoluteMax.getMaxValue(1, 2, 9, 3));
        // Test with negative numbers
        assertEquals(-10, AbsoluteMax.getMaxValue(-1, -2, -10, -3));
        // Test with a mix of negative and positive numbers
        assertEquals(-50, AbsoluteMax.getMaxValue(-50, 30, 20, 10));
        // Test with a single number
        assertEquals(5, AbsoluteMax.getMaxValue(5));
    }

    @Test
    public void getMaxValueWithEmptyArrayTest() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue();
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
    }

    @Test
    public void getMaxValueWithNullInputTest() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(null);
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
    }

    @Test
    public void getMaxValueWithAllZeroesTest() {
        // Assuming all zeros should return zero rather than throw an exception.
        assertEquals(0, AbsoluteMax.getMaxValue(0, 0, 0, 0));
    }
}


