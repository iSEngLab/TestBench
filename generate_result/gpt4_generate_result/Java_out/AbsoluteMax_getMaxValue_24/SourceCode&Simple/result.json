{
    "project_name": "Java",
    "file_name": "AbsoluteMax.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/AbsoluteMax.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Finds the absolute maximum value among the given numbers.\n     *\n     * @param numbers The numbers to compare.\n     * @return The absolute maximum value.\n     * @throws IllegalArgumentException If the input array is empty or null.\n     */",
    "source_code": "\npublic static int getMaxValue(int... numbers) {\n    if (numbers == null || numbers.length == 0) {\n        throw new IllegalArgumentException(\"Numbers array cannot be empty or null\");\n    }\n    int absMax = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (Math.abs(numbers[i]) > Math.abs(absMax)) {\n            absMax = numbers[i];\n        }\n    }\n    return absMax;\n}\n",
    "class_name": "AbsoluteMax",
    "method_name": "getMaxValue",
    "arguments": [
        "int numbers"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with an array of positive numbers\n        assertEquals(3, AbsoluteMax.getMaxValue(1,2,3), \"Max of 1,2,3 should be 3\");\n        \n        // Test with an array of negative numbers\n        assertEquals(-4, AbsoluteMax.getMaxValue(-1,-2,-4), \"Max of -1,-2,-4 should be -4\");\n        \n        // Test with a mixed array of negative and positive numbers\n        assertEquals(-5, AbsoluteMax.getMaxValue(-5,4,3,2,1), \"Max of -5,4,3,2,1 should be -5\");\n        \n        // Test with a single element\n        assertEquals(42, AbsoluteMax.getMaxValue(42), \"Max of a single element 42 should be 42\");\n        \n        // Test with a zero in the array\n        assertEquals(0, AbsoluteMax.getMaxValue(0), \"Max of a single element 0 should be 0\");\n        \n        // Test with zeros and negative numbers\n        assertEquals(-1, AbsoluteMax.getMaxValue(0, -1), \"Max of 0, -1 should be -1\");\n    }\n    \n    @Test\n    public void getMaxValueTestWithNull() {\n        Exception exception = assertThrows(\n            IllegalArgumentException.class,\n            () -> AbsoluteMax.getMaxValue(null)\n        );\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n\n    @Test\n    public void getMaxValueTestWithEmpty() {\n        Exception exception = assertThrows(\n            IllegalArgumentException.class,\n            () -> AbsoluteMax.getMaxValue()\n        );\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null));\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue());\n        assertEquals(5, AbsoluteMax.getMaxValue(3, -5, 2, 5));\n        assertEquals(-10, AbsoluteMax.getMaxValue(-7, -10, -3));\n        assertEquals(0, AbsoluteMax.getMaxValue(0, -2, 0));\n        assertEquals(42, AbsoluteMax.getMaxValue(42));\n        assertEquals(-1, AbsoluteMax.getMaxValue(-1, -1, -1));\n        assertEquals(1, AbsoluteMax.getMaxValue(-1, 0, 1));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    \n    @Test\n    public void getMaxValueTest() {\n        // Test with a normal array of integers\n        assertEquals(5, AbsoluteMax.getMaxValue(-4, 5, 0, 3, -1));\n        \n        // Test with an array of integers where a negative has the largest absolute value\n        assertEquals(-10, AbsoluteMax.getMaxValue(-10, 5, 7, 9));\n\n        // Test with an array that contains one element\n        assertEquals(42, AbsoluteMax.getMaxValue(42));\n        \n        // Test with an array that contains multiple elements with the same absolute max value but different signs\n        assertEquals(-15, AbsoluteMax.getMaxValue(-15, 15, 10));\n\n        // Test with an array that contains zeros and non-zero numbers\n        assertEquals(4, AbsoluteMax.getMaxValue(0, 3, 4, 2, 0));\n    }\n    \n    @Test\n    public void getMaxValueTest_exception() {\n        // Test with an empty array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(new int[]{});\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n\n        // Test with null input\n        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", nullException.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    \n    @Test\n    public void getMaxValueTest() {\n        // Test for normal input\n        assertEquals(5, AbsoluteMax.getMaxValue(1, -2, 5, -4));\n        assertEquals(-4, AbsoluteMax.getMaxValue(-1, -2, -3, -4));\n        assertEquals(0, AbsoluteMax.getMaxValue(0, 0, 0));\n        \n        // Test for input with the same absolute values\n        assertEquals(-3, AbsoluteMax.getMaxValue(3, -3, 2, 2, -1));\n        \n        // Test for single element\n        assertEquals(1, AbsoluteMax.getMaxValue(1));\n        assertEquals(-1, AbsoluteMax.getMaxValue(-1));\n        \n        // Test for all negatives\n        assertEquals(-1, AbsoluteMax.getMaxValue(-1, -2, -3));\n        \n        // Test for exceptional cases\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with a range of numbers\n        assertEquals(5, AbsoluteMax.getMaxValue(-4, -1, 0, 2, 5));\n\n        // Test with all negative numbers\n        assertEquals(-10, AbsoluteMax.getMaxValue(-10, -20, -30));\n\n        // Test with a single number\n        assertEquals(42, AbsoluteMax.getMaxValue(42));\n\n        // Test with mixed positive and negative numbers, with negative max by absolute value\n        assertEquals(-15, AbsoluteMax.getMaxValue(-15, 8, 12, 4));\n\n        // Test with all positive numbers\n        assertEquals(100, AbsoluteMax.getMaxValue(9, 60, 100, 50));\n\n        // Test with negative and positive numbers having same absolute value\n        assertEquals(-30, AbsoluteMax.getMaxValue(30, -30, 0, 29));\n\n        // Testing with exception for an empty array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        assertTrue(exception.getMessage().contains(\"Numbers array cannot be empty or null\"));\n\n        // Testing with exception for null input\n        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertTrue(nullException.getMessage().contains(\"Numbers array cannot be empty or null\"));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with an array of positive numbers\n        assertEquals(5, AbsoluteMax.getMaxValue(1, 2, 3, 4, 5));\n\n        // Test with an array of negative numbers\n        assertEquals(-6, AbsoluteMax.getMaxValue(-1, -2, -3, -6, -4));\n\n        // Test with an array of mixed positive and negative numbers\n        assertEquals(-7, AbsoluteMax.getMaxValue(1, -7, 3, 7, 5));\n\n        // Test with only one number\n        assertEquals(42, AbsoluteMax.getMaxValue(42));\n\n        // Test with an array containing zero\n        assertEquals(0, AbsoluteMax.getMaxValue(0));\n\n        // Test throwing exception with empty array\n        Exception emptyArrayException = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", emptyArrayException.getMessage());\n\n        // Test throwing exception with null input\n        Exception nullPointerException = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", nullPointerException.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null));\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue());\n\n        assertEquals(3, AbsoluteMax.getMaxValue(1, -2, 3, -4));\n        assertEquals(-4, AbsoluteMax.getMaxValue(-1, -2, -3, -4));\n        assertEquals(0, AbsoluteMax.getMaxValue(-3, 0, 3));\n        assertEquals(42, AbsoluteMax.getMaxValue(-5, 42, 17, 0));\n        assertEquals(1, AbsoluteMax.getMaxValue(1));  // Test with a single element\n        assertEquals(-1, AbsoluteMax.getMaxValue(-1));  // Test with a single negative element\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(3, AbsoluteMax.getMaxValue(1, 2, 3));\n        // Test with negative numbers\n        assertEquals(-4, AbsoluteMax.getMaxValue(-1, -2, -3, -4));\n        // Test with a mix of positive and negative numbers\n        assertEquals(-5, AbsoluteMax.getMaxValue(-1, 2, -3, 4, -5));\n        // Test with a single number\n        assertEquals(10, AbsoluteMax.getMaxValue(10));\n        // Test with all numbers having the same absolute value\n        assertEquals(-1, AbsoluteMax.getMaxValue(-1, 1));\n    }\n\n    @Test\n    public void getMaxValueTestWithException() {\n        // Test with null input\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n\n        // Test with empty array\n        Exception emptyException = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(new int[]{});\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", emptyException.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(10, AbsoluteMax.getMaxValue(1, 10, 3, 4, 5));\n\n        // Test with negative numbers\n        assertEquals(-15, AbsoluteMax.getMaxValue(-1, -2, -15, -3));\n\n        // Test with a mix of negative and positive numbers\n        assertEquals(-20, AbsoluteMax.getMaxValue(-20, 19, 1, 5));\n\n        // Test with a single value\n        assertEquals(7, AbsoluteMax.getMaxValue(7));\n\n        // Test with first absolute maximum at the beginning\n        assertEquals(-30, AbsoluteMax.getMaxValue(-30, 10, 20, 2));\n\n        // Test with first absolute maximum in the middle\n        assertEquals(50, AbsoluteMax.getMaxValue(1, 50, -50, 20, 5));\n        \n        // Test if IllegalArgumentException is thrown for null input\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null));\n\n        // Test if IllegalArgumentException is thrown for empty array\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null),\n                \"Expected IllegalArgumentException for null input\");\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(),\n                \"Expected IllegalArgumentException for empty input\");\n        assertEquals(5, AbsoluteMax.getMaxValue(1, -2, 3, 4, 5),\n                \"The max absolute value of 1, -2, 3, 4, 5 should be 5\");\n        assertEquals(-5, AbsoluteMax.getMaxValue(-1, -2, -3, -4, -5),\n                \"The max absolute value of -1, -2, -3, -4, -5 should be -5\");\n        assertEquals(5, AbsoluteMax.getMaxValue(-5, 3, -2, 1),\n                \"The max absolute value of -5, 3, -2, 1 should be 5\");\n        assertEquals(0, AbsoluteMax.getMaxValue(0),\n                \"The max absolute value of single value 0 should be 0\");\n        assertEquals(10, AbsoluteMax.getMaxValue(-10, 10),\n                \"The max absolute value when both -10 and 10 are present should be 10\");\n    }\n}"
    ]
}