Source code: 


public static int getMaxValue(int... numbers) {
    if (numbers == null || numbers.length == 0) {
        throw new IllegalArgumentException("Numbers array cannot be empty or null");
    }
    int absMax = numbers[0];
    for (int i = 1; i < numbers.length; i++) {
        if (Math.abs(numbers[i]) > Math.abs(absMax)) {
            absMax = numbers[i];
        }
    }
    return absMax;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {

    @Test
    public void getMaxValueTest() {
        // Test with an array of positive numbers
        assertEquals(3, AbsoluteMax.getMaxValue(1,2,3), "Max of 1,2,3 should be 3");
        
        // Test with an array of negative numbers
        assertEquals(-4, AbsoluteMax.getMaxValue(-1,-2,-4), "Max of -1,-2,-4 should be -4");
        
        // Test with a mixed array of negative and positive numbers
        assertEquals(-5, AbsoluteMax.getMaxValue(-5,4,3,2,1), "Max of -5,4,3,2,1 should be -5");
        
        // Test with a single element
        assertEquals(42, AbsoluteMax.getMaxValue(42), "Max of a single element 42 should be 42");
        
        // Test with a zero in the array
        assertEquals(0, AbsoluteMax.getMaxValue(0), "Max of a single element 0 should be 0");
        
        // Test with zeros and negative numbers
        assertEquals(-1, AbsoluteMax.getMaxValue(0, -1), "Max of 0, -1 should be -1");
    }
    
    @Test
    public void getMaxValueTestWithNull() {
        Exception exception = assertThrows(
            IllegalArgumentException.class,
            () -> AbsoluteMax.getMaxValue(null)
        );
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
    }

    @Test
    public void getMaxValueTestWithEmpty() {
        Exception exception = assertThrows(
            IllegalArgumentException.class,
            () -> AbsoluteMax.getMaxValue()
        );
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
    }

}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {

    @Test
    public void getMaxValueTest() {
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null));
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue());
        assertEquals(5, AbsoluteMax.getMaxValue(3, -5, 2, 5));
        assertEquals(-10, AbsoluteMax.getMaxValue(-7, -10, -3));
        assertEquals(0, AbsoluteMax.getMaxValue(0, -2, 0));
        assertEquals(42, AbsoluteMax.getMaxValue(42));
        assertEquals(-1, AbsoluteMax.getMaxValue(-1, -1, -1));
        assertEquals(1, AbsoluteMax.getMaxValue(-1, 0, 1));
    }
}


No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    
    @Test
    public void getMaxValueTest() {
        // Test with a normal array of integers
        assertEquals(5, AbsoluteMax.getMaxValue(-4, 5, 0, 3, -1));
        
        // Test with an array of integers where a negative has the largest absolute value
        assertEquals(-10, AbsoluteMax.getMaxValue(-10, 5, 7, 9));

        // Test with an array that contains one element
        assertEquals(42, AbsoluteMax.getMaxValue(42));
        
        // Test with an array that contains multiple elements with the same absolute max value but different signs
        assertEquals(-15, AbsoluteMax.getMaxValue(-15, 15, 10));

        // Test with an array that contains zeros and non-zero numbers
        assertEquals(4, AbsoluteMax.getMaxValue(0, 3, 4, 2, 0));
    }
    
    @Test
    public void getMaxValueTest_exception() {
        // Test with an empty array
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(new int[]{});
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());

        // Test with null input
        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(null);
        });
        assertEquals("Numbers array cannot be empty or null", nullException.getMessage());
    }
}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    
    @Test
    public void getMaxValueTest() {
        // Test for normal input
        assertEquals(5, AbsoluteMax.getMaxValue(1, -2, 5, -4));
        assertEquals(-4, AbsoluteMax.getMaxValue(-1, -2, -3, -4));
        assertEquals(0, AbsoluteMax.getMaxValue(0, 0, 0));
        
        // Test for input with the same absolute values
        assertEquals(-3, AbsoluteMax.getMaxValue(3, -3, 2, 2, -1));
        
        // Test for single element
        assertEquals(1, AbsoluteMax.getMaxValue(1));
        assertEquals(-1, AbsoluteMax.getMaxValue(-1));
        
        // Test for all negatives
        assertEquals(-1, AbsoluteMax.getMaxValue(-1, -2, -3));
        
        // Test for exceptional cases
        assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue();
        });
        assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(null);
        });
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {

    @Test
    public void getMaxValueTest() {
        // Test with a range of numbers
        assertEquals(5, AbsoluteMax.getMaxValue(-4, -1, 0, 2, 5));

        // Test with all negative numbers
        assertEquals(-10, AbsoluteMax.getMaxValue(-10, -20, -30));

        // Test with a single number
        assertEquals(42, AbsoluteMax.getMaxValue(42));

        // Test with mixed positive and negative numbers, with negative max by absolute value
        assertEquals(-15, AbsoluteMax.getMaxValue(-15, 8, 12, 4));

        // Test with all positive numbers
        assertEquals(100, AbsoluteMax.getMaxValue(9, 60, 100, 50));

        // Test with negative and positive numbers having same absolute value
        assertEquals(-30, AbsoluteMax.getMaxValue(30, -30, 0, 29));

        // Testing with exception for an empty array
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue();
        });
        assertTrue(exception.getMessage().contains("Numbers array cannot be empty or null"));

        // Testing with exception for null input
        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(null);
        });
        assertTrue(nullException.getMessage().contains("Numbers array cannot be empty or null"));
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {

    @Test
    public void getMaxValueTest() {
        // Test with an array of positive numbers
        assertEquals(5, AbsoluteMax.getMaxValue(1, 2, 3, 4, 5));

        // Test with an array of negative numbers
        assertEquals(-6, AbsoluteMax.getMaxValue(-1, -2, -3, -6, -4));

        // Test with an array of mixed positive and negative numbers
        assertEquals(-7, AbsoluteMax.getMaxValue(1, -7, 3, 7, 5));

        // Test with only one number
        assertEquals(42, AbsoluteMax.getMaxValue(42));

        // Test with an array containing zero
        assertEquals(0, AbsoluteMax.getMaxValue(0));

        // Test throwing exception with empty array
        Exception emptyArrayException = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue();
        });
        assertEquals("Numbers array cannot be empty or null", emptyArrayException.getMessage());

        // Test throwing exception with null input
        Exception nullPointerException = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(null);
        });
        assertEquals("Numbers array cannot be empty or null", nullPointerException.getMessage());
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {

    @Test
    public void getMaxValueTest() {
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null));
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue());

        assertEquals(3, AbsoluteMax.getMaxValue(1, -2, 3, -4));
        assertEquals(-4, AbsoluteMax.getMaxValue(-1, -2, -3, -4));
        assertEquals(0, AbsoluteMax.getMaxValue(-3, 0, 3));
        assertEquals(42, AbsoluteMax.getMaxValue(-5, 42, 17, 0));
        assertEquals(1, AbsoluteMax.getMaxValue(1));  // Test with a single element
        assertEquals(-1, AbsoluteMax.getMaxValue(-1));  // Test with a single negative element
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {

    @Test
    public void getMaxValueTest() {
        // Test with positive numbers
        assertEquals(3, AbsoluteMax.getMaxValue(1, 2, 3));
        // Test with negative numbers
        assertEquals(-4, AbsoluteMax.getMaxValue(-1, -2, -3, -4));
        // Test with a mix of positive and negative numbers
        assertEquals(-5, AbsoluteMax.getMaxValue(-1, 2, -3, 4, -5));
        // Test with a single number
        assertEquals(10, AbsoluteMax.getMaxValue(10));
        // Test with all numbers having the same absolute value
        assertEquals(-1, AbsoluteMax.getMaxValue(-1, 1));
    }

    @Test
    public void getMaxValueTestWithException() {
        // Test with null input
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(null);
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());

        // Test with empty array
        Exception emptyException = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(new int[]{});
        });
        assertEquals("Numbers array cannot be empty or null", emptyException.getMessage());
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {

    @Test
    public void getMaxValueTest() {
        // Test with positive numbers
        assertEquals(10, AbsoluteMax.getMaxValue(1, 10, 3, 4, 5));

        // Test with negative numbers
        assertEquals(-15, AbsoluteMax.getMaxValue(-1, -2, -15, -3));

        // Test with a mix of negative and positive numbers
        assertEquals(-20, AbsoluteMax.getMaxValue(-20, 19, 1, 5));

        // Test with a single value
        assertEquals(7, AbsoluteMax.getMaxValue(7));

        // Test with first absolute maximum at the beginning
        assertEquals(-30, AbsoluteMax.getMaxValue(-30, 10, 20, 2));

        // Test with first absolute maximum in the middle
        assertEquals(50, AbsoluteMax.getMaxValue(1, 50, -50, 20, 5));
        
        // Test if IllegalArgumentException is thrown for null input
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null));

        // Test if IllegalArgumentException is thrown for empty array
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue());
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null),
                "Expected IllegalArgumentException for null input");
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(),
                "Expected IllegalArgumentException for empty input");
        assertEquals(5, AbsoluteMax.getMaxValue(1, -2, 3, 4, 5),
                "The max absolute value of 1, -2, 3, 4, 5 should be 5");
        assertEquals(-5, AbsoluteMax.getMaxValue(-1, -2, -3, -4, -5),
                "The max absolute value of -1, -2, -3, -4, -5 should be -5");
        assertEquals(5, AbsoluteMax.getMaxValue(-5, 3, -2, 1),
                "The max absolute value of -5, 3, -2, 1 should be 5");
        assertEquals(0, AbsoluteMax.getMaxValue(0),
                "The max absolute value of single value 0 should be 0");
        assertEquals(10, AbsoluteMax.getMaxValue(-10, 10),
                "The max absolute value when both -10 and 10 are present should be 10");
    }
}


