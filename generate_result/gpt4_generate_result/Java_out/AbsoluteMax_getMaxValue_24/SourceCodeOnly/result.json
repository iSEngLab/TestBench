{
    "project_name": "Java",
    "file_name": "AbsoluteMax.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/AbsoluteMax.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Finds the absolute maximum value among the given numbers.\n     *\n     * @param numbers The numbers to compare.\n     * @return The absolute maximum value.\n     * @throws IllegalArgumentException If the input array is empty or null.\n     */",
    "source_code": "\npublic static int getMaxValue(int... numbers) {\n    if (numbers == null || numbers.length == 0) {\n        throw new IllegalArgumentException(\"Numbers array cannot be empty or null\");\n    }\n    int absMax = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (Math.abs(numbers[i]) > Math.abs(absMax)) {\n            absMax = numbers[i];\n        }\n    }\n    return absMax;\n}\n",
    "class_name": "AbsoluteMax",
    "method_name": "getMaxValue",
    "arguments": [
        "int numbers"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Test with multiple numbers including negative values\n        assertEquals(5, AbsoluteMax.getMaxValue(-1, -2, 3, 4, 5)); \n        \n        // Test with all negative numbers\n        assertEquals(-1, AbsoluteMax.getMaxValue(-1, -2, -3, -4, -5));\n        \n        // Test with a single number\n        assertEquals(7, AbsoluteMax.getMaxValue(7));\n        \n        // Test where the max absolute value is a negative number\n        assertEquals(-10, AbsoluteMax.getMaxValue(-10, 3, 2, 8));\n\n        // Test with positive and negative numbers having the same absolute value\n        assertEquals(-8, AbsoluteMax.getMaxValue(5, 6, -8, 8));\n\n        // Test expecting an IllegalArgumentException for an empty array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n        \n        // Test expecting an IllegalArgumentException for a null argument\n        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", nullException.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        }, \"Numbers array cannot be empty or null\");\n\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        }, \"Numbers array cannot be empty or null\");\n\n        assertEquals(5, AbsoluteMax.getMaxValue(1, -2, 5, -5, 3), \"Max absolute value in the array is 5\");\n\n        assertEquals(-5, AbsoluteMax.getMaxValue(-1, -2, -3, -4, -5), \"Max absolute value in the array is -5\");\n\n        assertEquals(5, AbsoluteMax.getMaxValue(5), \"Max absolute value when there is only one element is the element itself\");\n\n        assertEquals(0, AbsoluteMax.getMaxValue(0), \"Max absolute value of zero is zero\");\n\n        assertEquals(10, AbsoluteMax.getMaxValue(-10, 10), \"Max absolute value is 10 when both negative and positive are present\");\n\n        assertEquals(3, AbsoluteMax.getMaxValue(-3, 2, 3), \"Max absolute value with multiple occurrences should return the last occurrence in array\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        assertThrows(IllegalArgumentException.class, () -> MathUtils.getMaxValue(null), \"Numbers array cannot be empty or null\");\n        assertThrows(IllegalArgumentException.class, () -> MathUtils.getMaxValue(), \"Numbers array cannot be empty or null\");\n\n        assertEquals(5, MathUtils.getMaxValue(1, -2, 3, 5));\n        assertEquals(-5, MathUtils.getMaxValue(-1, -3, -5, 0));\n        assertEquals(0, MathUtils.getMaxValue(0));\n        assertEquals(Integer.MAX_VALUE, MathUtils.getMaxValue(Integer.MIN_VALUE, Integer.MAX_VALUE));\n        assertEquals(-1, MathUtils.getMaxValue(-1));\n    }\n\n    // Assuming we have a class named MathUtils where the getMaxValue method resides\n    public static class MathUtils {\n        public static int getMaxValue(int... numbers) {\n            if (numbers == null || numbers.length == 0) {\n                throw new IllegalArgumentException(\"Numbers array cannot be empty or null\");\n            }\n            int absMax = numbers[0];\n            for (int i = 1; i < numbers.length; i++) {\n                if (Math.abs(numbers[i]) > Math.abs(absMax)) {\n                    absMax = numbers[i];\n                }\n            }\n            return absMax;\n        }\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with normal positive numbers\n        assertEquals(5, AbsoluteMax.getMaxValue(1, 2, 3, 5, 4));\n        \n        // Test with a mix of positive and negative numbers\n        assertEquals(-6, AbsoluteMax.getMaxValue(-1, -2, -3, -6, 5, 4));\n        \n        // Test with all negative numbers\n        assertEquals(-1, AbsoluteMax.getMaxValue(-1, -3, -5));\n        \n        // Test with a single number\n        assertEquals(10, AbsoluteMax.getMaxValue(10));\n\n        // Test with a mix of positive, negative and zero\n        assertEquals(-10, AbsoluteMax.getMaxValue(0, -7, 3, -10, 8));\n    }\n    \n    @Test\n    public void getMaxValueTestWithException() {\n        // Test with empty array\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n\n        // Test with null input\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(5, AbsoluteMax.getMaxValue(1, 2, 5, 4));\n        \n        // Test with negative numbers\n        assertEquals(-5, AbsoluteMax.getMaxValue(-1, -2, -5, -4));\n        \n        // Test with a mix of negative and positive numbers\n        assertEquals(-5, AbsoluteMax.getMaxValue(-1, -5, 3, 4));\n        \n        // Test with a single value\n        assertEquals(0, AbsoluteMax.getMaxValue(0));\n        \n        // Test with leading negative value having the maximum absolute value\n        assertEquals(-10, AbsoluteMax.getMaxValue(-10, 5, 7, 2));\n\n        // Test with leading positive value having the maximum absolute value\n        assertEquals(10, AbsoluteMax.getMaxValue(10, -5, -7, 2));\n    }\n\n    @Test\n    public void getMaxValueWithEmptyArrayTest() {\n        // Test with an empty array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n\n    @Test\n    public void getMaxValueWithNullArrayTest() {\n        // Test with null as an argument\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    \n    @Test\n    public void getMaxValueTest() {\n        assertEquals(5, MathUtils.getMaxValue(1, -2, 3, 5));\n        assertEquals(-7, MathUtils.getMaxValue(-1, -7, 3, 5));\n        assertEquals(0, MathUtils.getMaxValue(-1, 0, 1));\n        assertEquals(15, MathUtils.getMaxValue(-10, 15, 7, 8, 9));\n        assertEquals(10, MathUtils.getMaxValue(10));\n        assertEquals(-2, MathUtils.getMaxValue(-2, -2, -2));\n        \n        // Testing with IllegalArgumentException for empty array or null\n        Exception exception1 = assertThrows(IllegalArgumentException.class, () -> MathUtils.getMaxValue());\n        assertEquals(\"Numbers array cannot be empty or null\", exception1.getMessage());\n        \n        Exception exception2 = assertThrows(IllegalArgumentException.class, () -> MathUtils.getMaxValue(null));\n        assertEquals(\"Numbers array cannot be empty or null\", exception2.getMessage());\n    }\n}\n\nclass MathUtils {\n    public static int getMaxValue(int... numbers) {\n        if (numbers == null || numbers.length == 0) {\n            throw new IllegalArgumentException(\"Numbers array cannot be empty or null\");\n        }\n        int absMax = numbers[0];\n        for (int i = 1; i < numbers.length; i++) {\n            if (Math.abs(numbers[i]) > Math.abs(absMax)) {\n                absMax = numbers[i];\n            }\n        }\n        return absMax;\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(5, MathUtils.getMaxValue(1, 2, 3, 5));\n\n        // Test with negative and positive numbers\n        assertEquals(-10, MathUtils.getMaxValue(-4, -10, 3, 2));\n\n        // Test with all negative numbers\n        assertEquals(-1, MathUtils.getMaxValue(-1, -2, -3, -4));\n        \n        // Test with a single number\n        assertEquals(42, MathUtils.getMaxValue(42));\n        \n        // Check if exception is thrown for null input\n        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {\n            MathUtils.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", nullException.getMessage());\n        \n        // Check if exception is thrown for empty input\n        Exception emptyException = assertThrows(IllegalArgumentException.class, () -> {\n            MathUtils.getMaxValue(new int[]{});\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", emptyException.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(5, YourClassName.getMaxValue(1, 2, 3, 4, 5));\n\n        // Test with negative numbers\n        assertEquals(-6, YourClassName.getMaxValue(-1, -2, -3, -4, -5, -6));\n\n        // Test with a mix of negative and positive numbers\n        assertEquals(-7, YourClassName.getMaxValue(-7, 1, 2, 3, 4, 5));\n\n        // Test with zero and positive/negative number\n        assertEquals(0, YourClassName.getMaxValue(0, -1, 1));\n\n        // Test with a single number\n        assertEquals(10, YourClassName.getMaxValue(10));\n\n        // Test exception for empty array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            YourClassName.getMaxValue();\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n\n        // Test exception for null input\n        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {\n            YourClassName.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", nullException.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null),\n                \"Numbers array cannot be empty or null\");\n\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(),\n                \"Numbers array cannot be empty or null\");\n\n        assertEquals(5, AbsoluteMax.getMaxValue(1, -4, 5, 3),\n                \"Max absolute value of 1, -4, 5, 3 should be 5\");\n\n        assertEquals(-5, AbsoluteMax.getMaxValue(-1, -4, -5, -3),\n                \"Max absolute value of -1, -4, -5, -3 should be -5\");\n\n        assertEquals(0, AbsoluteMax.getMaxValue(0),\n                \"Max absolute value of singleton array 0 should be 0\");\n\n        assertEquals(3, AbsoluteMax.getMaxValue(-3, 2, 1),\n                \"Max absolute value of -3, 2, 1 should be 3\");\n\n        assertEquals(-10, AbsoluteMax.getMaxValue(-10, 5, 7),\n                \"Max absolute value of -10, 5, 7 should be -10\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    \n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(5, AbsoluteMax.getMaxValue(1, 2, 3, 4, 5));\n        \n        // Test with negative numbers\n        assertEquals(-6, AbsoluteMax.getMaxValue(-3, -6, -1));\n        \n        // Test with a mix of positive and negative numbers\n        assertEquals(-7, AbsoluteMax.getMaxValue(-7, 2, 3, 4));\n        \n        // Test with a single number\n        assertEquals(10, AbsoluteMax.getMaxValue(10));\n        \n        // Test with a mix of positive, negative and zero\n        assertEquals(-100, AbsoluteMax.getMaxValue(50, -100, 0, 25, 75));\n        \n        // Test with all numbers being the same\n        assertEquals(2, AbsoluteMax.getMaxValue(2, 2, 2, 2));\n        \n        // Test for exception when array is null\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n        \n        // Test for exception when array is empty\n        IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        }, \"Expected getMaxValue() to throw, but it didn't\");\n        assertTrue(thrown.getMessage().contains(\"Numbers array cannot be empty or null\"));\n    }\n}\n\nclass AbsoluteMax {\n    public static int getMaxValue(int... numbers) {\n        if (numbers == null || numbers.length == 0) {\n            throw new IllegalArgumentException(\"Numbers array cannot be empty or null\");\n        }\n        int absMax = numbers[0];\n        for (int i = 1; i < numbers.length; i++) {\n            if (Math.abs(numbers[i]) > Math.abs(absMax)) {\n                absMax = numbers[i];\n            }\n        }\n        return absMax;\n    }\n}"
    ]
}