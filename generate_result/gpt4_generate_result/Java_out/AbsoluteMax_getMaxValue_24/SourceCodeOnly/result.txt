Source code: 


public static int getMaxValue(int... numbers) {
    if (numbers == null || numbers.length == 0) {
        throw new IllegalArgumentException("Numbers array cannot be empty or null");
    }
    int absMax = numbers[0];
    for (int i = 1; i < numbers.length; i++) {
        if (Math.abs(numbers[i]) > Math.abs(absMax)) {
            absMax = numbers[i];
        }
    }
    return absMax;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        // Test with multiple numbers including negative values
        assertEquals(5, AbsoluteMax.getMaxValue(-1, -2, 3, 4, 5)); 
        
        // Test with all negative numbers
        assertEquals(-1, AbsoluteMax.getMaxValue(-1, -2, -3, -4, -5));
        
        // Test with a single number
        assertEquals(7, AbsoluteMax.getMaxValue(7));
        
        // Test where the max absolute value is a negative number
        assertEquals(-10, AbsoluteMax.getMaxValue(-10, 3, 2, 8));

        // Test with positive and negative numbers having the same absolute value
        assertEquals(-8, AbsoluteMax.getMaxValue(5, 6, -8, 8));

        // Test expecting an IllegalArgumentException for an empty array
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue();
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
        
        // Test expecting an IllegalArgumentException for a null argument
        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(null);
        });
        assertEquals("Numbers array cannot be empty or null", nullException.getMessage());
    }
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {

    @Test
    public void getMaxValueTest() {
        assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(null);
        }, "Numbers array cannot be empty or null");

        assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue();
        }, "Numbers array cannot be empty or null");

        assertEquals(5, AbsoluteMax.getMaxValue(1, -2, 5, -5, 3), "Max absolute value in the array is 5");

        assertEquals(-5, AbsoluteMax.getMaxValue(-1, -2, -3, -4, -5), "Max absolute value in the array is -5");

        assertEquals(5, AbsoluteMax.getMaxValue(5), "Max absolute value when there is only one element is the element itself");

        assertEquals(0, AbsoluteMax.getMaxValue(0), "Max absolute value of zero is zero");

        assertEquals(10, AbsoluteMax.getMaxValue(-10, 10), "Max absolute value is 10 when both negative and positive are present");

        assertEquals(3, AbsoluteMax.getMaxValue(-3, 2, 3), "Max absolute value with multiple occurrences should return the last occurrence in array");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        assertThrows(IllegalArgumentException.class, () -> MathUtils.getMaxValue(null), "Numbers array cannot be empty or null");
        assertThrows(IllegalArgumentException.class, () -> MathUtils.getMaxValue(), "Numbers array cannot be empty or null");

        assertEquals(5, MathUtils.getMaxValue(1, -2, 3, 5));
        assertEquals(-5, MathUtils.getMaxValue(-1, -3, -5, 0));
        assertEquals(0, MathUtils.getMaxValue(0));
        assertEquals(Integer.MAX_VALUE, MathUtils.getMaxValue(Integer.MIN_VALUE, Integer.MAX_VALUE));
        assertEquals(-1, MathUtils.getMaxValue(-1));
    }

    // Assuming we have a class named MathUtils where the getMaxValue method resides
    public static class MathUtils {
        public static int getMaxValue(int... numbers) {
            if (numbers == null || numbers.length == 0) {
                throw new IllegalArgumentException("Numbers array cannot be empty or null");
            }
            int absMax = numbers[0];
            for (int i = 1; i < numbers.length; i++) {
                if (Math.abs(numbers[i]) > Math.abs(absMax)) {
                    absMax = numbers[i];
                }
            }
            return absMax;
        }
    }
}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {

    @Test
    public void getMaxValueTest() {
        // Test with normal positive numbers
        assertEquals(5, AbsoluteMax.getMaxValue(1, 2, 3, 5, 4));
        
        // Test with a mix of positive and negative numbers
        assertEquals(-6, AbsoluteMax.getMaxValue(-1, -2, -3, -6, 5, 4));
        
        // Test with all negative numbers
        assertEquals(-1, AbsoluteMax.getMaxValue(-1, -3, -5));
        
        // Test with a single number
        assertEquals(10, AbsoluteMax.getMaxValue(10));

        // Test with a mix of positive, negative and zero
        assertEquals(-10, AbsoluteMax.getMaxValue(0, -7, 3, -10, 8));
    }
    
    @Test
    public void getMaxValueTestWithException() {
        // Test with empty array
        assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue();
        });

        // Test with null input
        assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(null);
        });
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {

    @Test
    public void getMaxValueTest() {
        // Test with positive numbers
        assertEquals(5, AbsoluteMax.getMaxValue(1, 2, 5, 4));
        
        // Test with negative numbers
        assertEquals(-5, AbsoluteMax.getMaxValue(-1, -2, -5, -4));
        
        // Test with a mix of negative and positive numbers
        assertEquals(-5, AbsoluteMax.getMaxValue(-1, -5, 3, 4));
        
        // Test with a single value
        assertEquals(0, AbsoluteMax.getMaxValue(0));
        
        // Test with leading negative value having the maximum absolute value
        assertEquals(-10, AbsoluteMax.getMaxValue(-10, 5, 7, 2));

        // Test with leading positive value having the maximum absolute value
        assertEquals(10, AbsoluteMax.getMaxValue(10, -5, -7, 2));
    }

    @Test
    public void getMaxValueWithEmptyArrayTest() {
        // Test with an empty array
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue();
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
    }

    @Test
    public void getMaxValueWithNullArrayTest() {
        // Test with null as an argument
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(null);
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    
    @Test
    public void getMaxValueTest() {
        assertEquals(5, MathUtils.getMaxValue(1, -2, 3, 5));
        assertEquals(-7, MathUtils.getMaxValue(-1, -7, 3, 5));
        assertEquals(0, MathUtils.getMaxValue(-1, 0, 1));
        assertEquals(15, MathUtils.getMaxValue(-10, 15, 7, 8, 9));
        assertEquals(10, MathUtils.getMaxValue(10));
        assertEquals(-2, MathUtils.getMaxValue(-2, -2, -2));
        
        // Testing with IllegalArgumentException for empty array or null
        Exception exception1 = assertThrows(IllegalArgumentException.class, () -> MathUtils.getMaxValue());
        assertEquals("Numbers array cannot be empty or null", exception1.getMessage());
        
        Exception exception2 = assertThrows(IllegalArgumentException.class, () -> MathUtils.getMaxValue(null));
        assertEquals("Numbers array cannot be empty or null", exception2.getMessage());
    }
}

class MathUtils {
    public static int getMaxValue(int... numbers) {
        if (numbers == null || numbers.length == 0) {
            throw new IllegalArgumentException("Numbers array cannot be empty or null");
        }
        int absMax = numbers[0];
        for (int i = 1; i < numbers.length; i++) {
            if (Math.abs(numbers[i]) > Math.abs(absMax)) {
                absMax = numbers[i];
            }
        }
        return absMax;
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {

    @Test
    public void getMaxValueTest() {
        // Test with positive numbers
        assertEquals(5, MathUtils.getMaxValue(1, 2, 3, 5));

        // Test with negative and positive numbers
        assertEquals(-10, MathUtils.getMaxValue(-4, -10, 3, 2));

        // Test with all negative numbers
        assertEquals(-1, MathUtils.getMaxValue(-1, -2, -3, -4));
        
        // Test with a single number
        assertEquals(42, MathUtils.getMaxValue(42));
        
        // Check if exception is thrown for null input
        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {
            MathUtils.getMaxValue(null);
        });
        assertEquals("Numbers array cannot be empty or null", nullException.getMessage());
        
        // Check if exception is thrown for empty input
        Exception emptyException = assertThrows(IllegalArgumentException.class, () -> {
            MathUtils.getMaxValue(new int[]{});
        });
        assertEquals("Numbers array cannot be empty or null", emptyException.getMessage());
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {

    @Test
    public void getMaxValueTest() {
        // Test with positive numbers
        assertEquals(5, YourClassName.getMaxValue(1, 2, 3, 4, 5));

        // Test with negative numbers
        assertEquals(-6, YourClassName.getMaxValue(-1, -2, -3, -4, -5, -6));

        // Test with a mix of negative and positive numbers
        assertEquals(-7, YourClassName.getMaxValue(-7, 1, 2, 3, 4, 5));

        // Test with zero and positive/negative number
        assertEquals(0, YourClassName.getMaxValue(0, -1, 1));

        // Test with a single number
        assertEquals(10, YourClassName.getMaxValue(10));

        // Test exception for empty array
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            YourClassName.getMaxValue();
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());

        // Test exception for null input
        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {
            YourClassName.getMaxValue(null);
        });
        assertEquals("Numbers array cannot be empty or null", nullException.getMessage());
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {

    @Test
    public void getMaxValueTest() {
        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null),
                "Numbers array cannot be empty or null");

        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(),
                "Numbers array cannot be empty or null");

        assertEquals(5, AbsoluteMax.getMaxValue(1, -4, 5, 3),
                "Max absolute value of 1, -4, 5, 3 should be 5");

        assertEquals(-5, AbsoluteMax.getMaxValue(-1, -4, -5, -3),
                "Max absolute value of -1, -4, -5, -3 should be -5");

        assertEquals(0, AbsoluteMax.getMaxValue(0),
                "Max absolute value of singleton array 0 should be 0");

        assertEquals(3, AbsoluteMax.getMaxValue(-3, 2, 1),
                "Max absolute value of -3, 2, 1 should be 3");

        assertEquals(-10, AbsoluteMax.getMaxValue(-10, 5, 7),
                "Max absolute value of -10, 5, 7 should be -10");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    
    @Test
    public void getMaxValueTest() {
        // Test with positive numbers
        assertEquals(5, AbsoluteMax.getMaxValue(1, 2, 3, 4, 5));
        
        // Test with negative numbers
        assertEquals(-6, AbsoluteMax.getMaxValue(-3, -6, -1));
        
        // Test with a mix of positive and negative numbers
        assertEquals(-7, AbsoluteMax.getMaxValue(-7, 2, 3, 4));
        
        // Test with a single number
        assertEquals(10, AbsoluteMax.getMaxValue(10));
        
        // Test with a mix of positive, negative and zero
        assertEquals(-100, AbsoluteMax.getMaxValue(50, -100, 0, 25, 75));
        
        // Test with all numbers being the same
        assertEquals(2, AbsoluteMax.getMaxValue(2, 2, 2, 2));
        
        // Test for exception when array is null
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(null);
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
        
        // Test for exception when array is empty
        IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue();
        }, "Expected getMaxValue() to throw, but it didn't");
        assertTrue(thrown.getMessage().contains("Numbers array cannot be empty or null"));
    }
}

class AbsoluteMax {
    public static int getMaxValue(int... numbers) {
        if (numbers == null || numbers.length == 0) {
            throw new IllegalArgumentException("Numbers array cannot be empty or null");
        }
        int absMax = numbers[0];
        for (int i = 1; i < numbers.length; i++) {
            if (Math.abs(numbers[i]) > Math.abs(absMax)) {
                absMax = numbers[i];
            }
        }
        return absMax;
    }
}


