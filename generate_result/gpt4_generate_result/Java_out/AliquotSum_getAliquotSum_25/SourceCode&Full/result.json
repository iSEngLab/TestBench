{
    "project_name": "Java",
    "file_name": "AliquotSum.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/AliquotSum.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Function to calculate the aliquot sum of an integer number\n     *\n     * @param n a positive integer\n     * @return aliquot sum of given {@code number}\n     */",
    "source_code": "\npublic static int getAliquotSum(int n) {\n    if (n <= 0) return -1;\n    int sum = 1;\n    double root = Math.sqrt(n);\n    /*\n     * We can get the factors after the root by dividing number by its factors\n     * before the root.\n     * Ex- Factors of 100 are 1, 2, 4, 5, 10, 20, 25, 50 and 100.\n     * Root of 100 is 10. So factors before 10 are 1, 2, 4 and 5.\n     * Now by dividing 100 by each factor before 10 we get:\n     * 100/1 = 100, 100/2 = 50, 100/4 = 25 and 100/5 = 20\n     * So we get 100, 50, 25 and 20 which are factors of 100 after 10\n     */\n    for (int i = 2; i <= root; i++) {\n        if (n % i == 0) {\n            sum += i + n / i;\n        }\n    }\n    // if n is a perfect square then its root was added twice in above loop, so subtracting root\n    // from sum\n    if (root == (int) root) sum -= root;\n    return sum;\n}\n",
    "class_name": "AliquotSum",
    "method_name": "getAliquotSum",
    "arguments": [
        "int n"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"Aliquot sum of 0 should return -1\");\n        assertEquals(-1, AliquotSum.getAliquotSum(-5), \"Aliquot sum of negative number should return -1\");\n        assertEquals(1, AliquotSum.getAliquotSum(1), \"Aliquot sum of 1 should return 1, since it has no proper divisors\");\n        assertEquals(1, AliquotSum.getAliquotSum(2), \"Aliquot sum of 2 should return 1\");\n        assertEquals(3, AliquotSum.getAliquotSum(4), \"Aliquot sum of 4 should return 3 (1+2)\");\n        assertEquals(1 + 2 + 3, AliquotSum.getAliquotSum(6), \"Aliquot sum of 6 should return sum of 1, 2, and 3\");\n        assertEquals(9, AliquotSum.getAliquotSum(15), \"Aliquot sum of 15 should return 9 (1+3+5)\");\n        assertEquals(1 + 2 + 4 + 7 + 14, AliquotSum.getAliquotSum(28), \"Aliquot sum of 28 should return sum of 1, 2, 4, 7, and 14\");\n        assertEquals(0, AliquotSum.getAliquotSum(29), \"Aliquot sum of prime number 29 should be 0 (no proper divisors)\");\n        assertEquals(1, AliquotSum.getAliquotSum(3), \"Aliquot sum of 3 should return 1\");\n        assertEquals(12, AliquotSum.getAliquotSum(16), \"Aliquot sum of 16 should return 12 (1+2+4+8)\");\n        assertEquals(1170, AliquotSum.getAliquotSum(220), \"Aliquot sum of 220 should return 1170\");\n        assertEquals(284, AliquotSum.getAliquotSum(284), \"Aliquot sum of 284 should equal to the number itself\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        // Test for a negative number, should return -1\n        assertEquals(-1, AliquotSum.getAliquotSum(-10), \"Aliquot sum of negative number should be -1.\");\n\n        // Test for zero, should return -1\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"Aliquot sum of 0 should be -1.\");\n\n        // Test for a prime number, should return 1 since the only proper divisor of a prime number is 1\n        assertEquals(1, AliquotSum.getAliquotSum(13), \"Aliquot sum of a prime number should be 1.\");\n\n        // Test for a composite number, should return the sum of its proper divisors\n        assertEquals(1 + 2 + 3 + 4 + 6, AliquotSum.getAliquotSum(12), \"Aliquot sum of 12 should be 16.\");\n\n        // Test for a perfect square, should return the sum of its proper divisors minus its square root\n        assertEquals(1 + 2 + 4 + 7 + 14, AliquotSum.getAliquotSum(28), \"Aliquot sum of 28 should be 28.\");\n\n        // Test for another composite number\n        assertEquals(1 + 3 + 5, AliquotSum.getAliquotSum(15), \"Aliquot sum of 15 should be 9.\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(-1, AliquotSum.getAliquotSum(-10), \"The aliquot sum of a negative number should be -1\");\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"The aliquot sum of zero should be -1\");\n        assertEquals(1, AliquotSum.getAliquotSum(1), \"The aliquot sum of 1 should be 1 (Only one factor: 1)\");\n        assertEquals(1, AliquotSum.getAliquotSum(2), \"The aliquot sum of 2 should be 1 (Only one proper divisor: 1)\");\n        assertEquals(1 + 2, AliquotSum.getAliquotSum(4), \"The aliquot sum of 4 should be 3 (Proper divisors: 1, 2)\");\n        assertEquals(1 + 3, AliquotSum.getAliquotSum(6), \"The aliquot sum of 6 should be 4 (Proper divisors: 1, 2, 3)\");\n        assertEquals(1 + 2 + 3 + 6 + 9, AliquotSum.getAliquotSum(18), \"The aliquot sum of 18 should be 21 (Proper divisors: 1, 2, 3, 6, 9)\");\n        assertEquals(1 + 3 + 5, AliquotSum.getAliquotSum(15), \"The aliquot sum of 15 should be 9 (Proper divisors: 1, 3, 5)\");\n        assertEquals(1 + 2 + 4 + 7 + 14, AliquotSum.getAliquotSum(28), \"The aliquot sum of 28 should be 28 (Proper divisors: 1, 2, 4, 7, 14)\");\n        assertFalse(AliquotSum.getAliquotSum(10) == 10, \"The aliquot sum of 10 should not be 10 (Proper divisors are 1, 2, 5)\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(-1, AliquotSum.getAliquotSum(-10), \"Aliquot sum of negative number should be -1\");\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"Aliquot sum of zero should be -1\");\n        assertEquals(0, AliquotSum.getAliquotSum(1), \"Aliquot sum of 1 should be 0 as it has no proper divisors\");\n        assertEquals(1, AliquotSum.getAliquotSum(2), \"Aliquot sum of 2 should be 1\");\n        assertEquals(1, AliquotSum.getAliquotSum(3), \"Aliquot sum of 3 should be 1\");\n        assertEquals(3, AliquotSum.getAliquotSum(4), \"Aliquot sum of 4 should be 3\");\n        assertEquals(6, AliquotSum.getAliquotSum(6), \"Aliquot sum of 6 should be 1 + 2 + 3 = 6\");\n        assertEquals(1 + 3 + 5, AliquotSum.getAliquotSum(15), \"Aliquot sum of 15 should be 1 + 3 + 5\");\n        assertEquals(1 + 2 + 4 + 7 + 14, AliquotSum.getAliquotSum(28), \"Aliquot sum of 28 should be 1 + 2 + 4 + 7 + 14\");\n        assertEquals(1 + 4 + 10 + 20 + 22 + 44 + 55 + 110, AliquotSum.getAliquotSum(220), \"Aliquot sum of 220 should match the sum of its proper divisors\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(-1, AliquotSum.getAliquotSum(-5), \"Aliquot sum should be -1 for negative input\");\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"Aliquot sum should be -1 for zero input\");\n        assertEquals(1, AliquotSum.getAliquotSum(1), \"Aliquot sum should be 1 for input 1\");\n        assertEquals(1, AliquotSum.getAliquotSum(2), \"Aliquot sum should be 1 for prime numbers like 2\");\n        assertEquals(3, AliquotSum.getAliquotSum(4), \"Aliquot sum should be 3 for input 4\");\n        assertEquals(1 + 2 + 3, AliquotSum.getAliquotSum(6), \"Aliquot sum should be 6 for input 6\");\n        assertEquals(1 + 3 + 5, AliquotSum.getAliquotSum(15), \"Aliquot sum should be 9 for input 15\");\n        assertEquals(1 + 2 + 4 + 7 + 14, AliquotSum.getAliquotSum(28), \"Aliquot sum should be 28 for input 28\");\n        assertEquals(1 + 3 + 9 + 27 + 81 + 243, AliquotSum.getAliquotSum(729), \"Aliquot sum should be 364 for input 729\");\n        assertEquals(1 + 2 + 4 + 8 + 16 + 31 + 62 + 124, AliquotSum.getAliquotSum(248), \"Aliquot sum should be 248 for input 248\");\n        // Testing perfect square\n        assertEquals(1 + 3, AliquotSum.getAliquotSum(9), \"Aliquot sum should be 4 for perfect squares like 9\");\n        // Ensure that the method correctly subtracts the square root for perfect squares\n        assertEquals(1 + 2 + 4 + 5 + 10 + 11 + 20 + 22 + 44 + 55 + 110, AliquotSum.getAliquotSum(121), \"Aliquot sum should exclude double counting of the square root for perfect squares\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    \n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(-1, AliquotSum.getAliquotSum(-5), \"Aliquot sum of negative number should be -1\");\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"Aliquot sum of 0 should be -1\");\n        assertEquals(1, AliquotSum.getAliquotSum(1), \"Aliquot sum of 1 should be 1 (no proper divisors)\");\n        assertEquals(1, AliquotSum.getAliquotSum(2), \"Aliquot sum of 2 should be 1\");\n        assertEquals(1, AliquotSum.getAliquotSum(3), \"Aliquot sum of 3 should be 1\");\n        assertEquals(3, AliquotSum.getAliquotSum(4), \"Aliquot sum of 4 should be 3 (1+2)\");\n        assertEquals(1, AliquotSum.getAliquotSum(5), \"Aliquot sum of 5 should be 1\");\n        assertEquals(6, AliquotSum.getAliquotSum(6), \"Aliquot sum of 6 should be 6 (1+2+3)\");\n        assertEquals(1, AliquotSum.getAliquotSum(7), \"Aliquot sum of 7 should be 1\");\n        assertEquals(15, AliquotSum.getAliquotSum(16), \"Aliquot sum of 16 should be 15 (1+2+4+8)\");\n        assertEquals(7, AliquotSum.getAliquotSum(9), \"Aliquot sum of 9 should be 7 (1+3+3, but 3 is counted once)\");\n        assertEquals(8, AliquotSum.getAliquotSum(15), \"Aliquot sum of 15 should be 8 (1+3+5)\");\n        assertEquals(28, AliquotSum.getAliquotSum(28), \"Aliquot sum of 28 should be 28 (1+2+4+7+14)\");\n        \n        // Testing perfect square to check if the root is counted once\n        assertEquals(1, AliquotSum.getAliquotSum(4), \"Aliquot sum of 4 (perfect square) should be 1 (counting '2' only once)\");\n        \n        // Testing a larger number\n        assertEquals(117, AliquotSum.getAliquotSum(100), \"Aliquot sum of 100 should be 117 (1+2+4+5+10+20+25+50)\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(-1, AliquotSum.getAliquotSum(-1), \"Aliquot sum of negative number should be -1\");\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"Aliquot sum of zero should be -1\");\n        assertEquals(1, AliquotSum.getAliquotSum(1), \"Aliquot sum of 1 should be 1\");\n        assertEquals(1, AliquotSum.getAliquotSum(2), \"Aliquot sum of 2 should be 1\");\n        assertEquals(3, AliquotSum.getAliquotSum(4), \"Aliquot sum of 4 should be 3\");\n        assertEquals(1 + 2 + 3, AliquotSum.getAliquotSum(6), \"Aliquot sum of 6 should be 1+2+3\");\n        assertEquals(1 + 3 + 5, AliquotSum.getAliquotSum(15), \"Aliquot sum of 15 should be 1+3+5\");\n        assertEquals(1 + 2 + 4 + 7 + 14, AliquotSum.getAliquotSum(28), \"Aliquot sum of 28 should be 1+2+4+7+14\");\n        assertEquals(1 + 71, AliquotSum.getAliquotSum(72), \"Aliquot sum of 72 should be 1+71\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(-1, AliquotSum.getAliquotSum(-5), \"Aliquot sum of negative should be -1\");\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"Aliquot sum of 0 should be -1\");\n        assertEquals(1, AliquotSum.getAliquotSum(1), \"Aliquot sum of 1 should be 1\");\n        assertEquals(1, AliquotSum.getAliquotSum(2), \"Aliquot sum of 2 should be 1\");\n        assertEquals(3, AliquotSum.getAliquotSum(4), \"Aliquot sum of 4 should be 3\");\n        assertEquals(1+2+3, AliquotSum.getAliquotSum(6), \"Aliquot sum of 6 should be the sum of its proper divisors 1, 2 and 3\");\n        assertEquals(1+2+4+5+10, AliquotSum.getAliquotSum(16), \"Aliquot sum of 16 should be the sum of its proper divisors 1, 2, 4, 5, and 10\");\n        assertEquals(1+3+5, AliquotSum.getAliquotSum(15), \"Aliquot sum of 15 should be the sum of its proper divisors 1, 3, and 5\");\n        assertEquals(1+2+4+5+10+20+25+50, AliquotSum.getAliquotSum(100), \"Aliquot sum of 100 should be the sum of its proper divisors 1, 2, 4, 5, 10, 20, 25, and 50\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(-1, AliquotSum.getAliquotSum(-10), \"Test failed for negative number\");\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"Test failed for zero\");\n        assertEquals(0, AliquotSum.getAliquotSum(1), \"Test failed for one which has no proper divisors\");\n        assertEquals(1, AliquotSum.getAliquotSum(2), \"'2' should have an aliquot sum of 1 (only proper divisor is 1)\");\n        assertEquals(3, AliquotSum.getAliquotSum(4), \"'4' should have an aliquot sum of 3 (proper divisors are 1 and 2)\");\n        assertEquals(1 + 2 + 3, AliquotSum.getAliquotSum(6), \"'6' should have an aliquot sum of 6 (proper divisors are 1, 2, 3)\");\n        assertEquals(1 + 3 + 5, AliquotSum.getAliquotSum(15), \"'15' should have an aliquot sum of 9 (proper divisors are 1, 3, 5)\");\n        assertEquals(1 + 2 + 4 + 7 + 14, AliquotSum.getAliquotSum(28), \"'28' should have an aliquot sum of 28 (proper divisors are 1, 2, 4, 7, 14)\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    \n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(-1, AliquotSum.getAliquotSum(-10), \"The aliquot sum of a negative number should be -1\");\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"The aliquot sum of zero should be -1\");\n        assertEquals(0, AliquotSum.getAliquotSum(1), \"The aliquot sum of 1 should be 0, as it has no proper divisors\");\n        assertEquals(1, AliquotSum.getAliquotSum(2), \"The aliquot sum of 2 should be 1\");\n        assertEquals(1, AliquotSum.getAliquotSum(3), \"The aliquot sum of 3 should be 1\");\n        assertEquals(3, AliquotSum.getAliquotSum(4), \"The aliquot sum of 4 should be 3 (1+2)\");\n        assertEquals(3,  AliquotSum.getAliquotSum(5), \"The aliquot sum of 5 should be 1\");\n        assertEquals(6, AliquotSum.getAliquotSum(6), \"The aliquot sum of 6 should be 6 (1+2+3)\");\n        assertEquals(9, AliquotSum.getAliquotSum(15), \"The aliquot sum of 15 should be 9 (1+3+5)\");\n        assertEquals(1, AliquotSum.getAliquotSum(Integer.MAX_VALUE), \"The aliquot sum of the largest prime should be 1\");\n    }\n}"
    ]
}