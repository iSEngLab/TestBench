{
    "project_name": "Java",
    "file_name": "AliquotSum.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/AliquotSum.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Function to calculate the aliquot sum of an integer number\n     *\n     * @param n a positive integer\n     * @return aliquot sum of given {@code number}\n     */",
    "source_code": "\npublic static int getAliquotSum(int n) {\n    if (n <= 0) return -1;\n    int sum = 1;\n    double root = Math.sqrt(n);\n    /*\n     * We can get the factors after the root by dividing number by its factors\n     * before the root.\n     * Ex- Factors of 100 are 1, 2, 4, 5, 10, 20, 25, 50 and 100.\n     * Root of 100 is 10. So factors before 10 are 1, 2, 4 and 5.\n     * Now by dividing 100 by each factor before 10 we get:\n     * 100/1 = 100, 100/2 = 50, 100/4 = 25 and 100/5 = 20\n     * So we get 100, 50, 25 and 20 which are factors of 100 after 10\n     */\n    for (int i = 2; i <= root; i++) {\n        if (n % i == 0) {\n            sum += i + n / i;\n        }\n    }\n    // if n is a perfect square then its root was added twice in above loop, so subtracting root\n    // from sum\n    if (root == (int) root) sum -= root;\n    return sum;\n}\n",
    "class_name": "AliquotSum",
    "method_name": "getAliquotSum",
    "arguments": [
        "int n"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(-1, AliquotSum.getAliquotSum(-5), \"Negative input should return -1\");\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"Zero as input should return -1\");\n        assertEquals(1, AliquotSum.getAliquotSum(1), \"Aliquot sum of 1 should be 1 as it only has itself as a factor\");\n        assertEquals(1, AliquotSum.getAliquotSum(2), \"Aliquot sum of 2 should be 1 because it is a prime number\");\n        assertEquals(3, AliquotSum.getAliquotSum(4), \"Aliquot sum of 4 should be 3 (1+2)\");\n        assertEquals(6, AliquotSum.getAliquotSum(12), \"Aliquot sum of 12 should be 16 (1+2+3+4+6)\");\n        assertEquals(28, AliquotSum.getAliquotSum(28), \"Aliquot sum of 28 should be 28 (1+2+4+7+14)\");\n        assertEquals(1170, AliquotSum.getAliquotSum(1000), \"Aliquot sum of 1000 should be 1170 (1+2+4+5+8+10+20+25+40+50+100+125+200+250+500)\");\n        assertEquals(1, AliquotSum.getAliquotSum(3), \"Aliquot sum of 3 should be 1 because it is a prime number\");\n        assertEquals(15, AliquotSum.getAliquotSum(16), \"Aliquot sum of 16 should be 15 (1+2+4+8)\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"The aliquot sum of 0 should be -1\");\n        assertEquals(-1, AliquotSum.getAliquotSum(-5), \"The aliquot sum of negative numbers should be -1\");\n        assertEquals(1, AliquotSum.getAliquotSum(1), \"The aliquot sum of 1 should be 1\");\n        assertEquals(1, AliquotSum.getAliquotSum(2), \"The aliquot sum of 2 should be 1\");\n        assertEquals(3, AliquotSum.getAliquotSum(4), \"The aliquot sum of 4 should be 3\");\n        assertEquals(6, AliquotSum.getAliquotSum(12), \"The aliquot sum of 12 should be 16\");\n        assertEquals(1+2+3+6+9+18+36+72, AliquotSum.getAliquotSum(144), \"The aliquot sum of 144 should be the sum of its divisors excluding itself\");\n        assertEquals(1+2+3+6, AliquotSum.getAliquotSum(14), \"The aliquot sum of 14 should be the sum of its divisors excluding itself\");\n        assertEquals(1+2+4, AliquotSum.getAliquotSum(9), \"The aliquot sum of 9 should be the sum of its divisors excluding itself\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n\n    @Test\n    public void getAliquotSumTest() {\n        // Test with a positive number that is not a perfect square\n        assertEquals(1, AliquotSum.getAliquotSum(2)); // 2's proper divisors are just 1\n        assertEquals(3, AliquotSum.getAliquotSum(4)); // 4's proper divisors are 1 and 2\n        \n        // Test with positive perfect square numbers\n        assertEquals(1, AliquotSum.getAliquotSum(1)); // 1's proper divisors are none, represented by 1 itself\n        assertEquals(28, AliquotSum.getAliquotSum(28)); // 28's proper divisors are 1, 2, 4, 7, 14\n        \n        // Test with a large number\n        assertEquals(1170, AliquotSum.getAliquotSum(1000)); // 1000's proper divisors\n        \n        // Test the case for n is a perfect square\n        assertEquals(1, AliquotSum.getAliquotSum(16)); // Subtract the root for perfect square\n        \n        // Test with zero and negative numbers\n        assertEquals(-1, AliquotSum.getAliquotSum(0)); // Zero should return -1\n        assertEquals(-1, AliquotSum.getAliquotSum(-10)); // Negative should return -1\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(-1, AliquotSum.getAliquotSum(-10), \"The aliquot sum of a negative number should be -1\");\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"The aliquot sum of zero should be -1\");\n        assertEquals(1, AliquotSum.getAliquotSum(1), \"The aliquot sum of 1 should be 1 since it does not have proper divisors other than itself\");\n        assertEquals(1, AliquotSum.getAliquotSum(2), \"The aliquot sum of 2 should be 1\");\n        assertEquals(1 + 2, AliquotSum.getAliquotSum(4), \"The aliquot sum of 4 should be 3 (1 + 2)\");\n        assertEquals(1 + 2 + 3, AliquotSum.getAliquotSum(6), \"The aliquot sum of 6 should be 6 (1 + 2 + 3)\");\n        assertEquals(1 + 3, AliquotSum.getAliquotSum(9), \"The aliquot sum of 9 should be 4 (1 + 3)\");\n        assertEquals(1 + 2 + 4 + 7 + 14, AliquotSum.getAliquotSum(28), \"The aliquot sum of 28 should be 28 (1 + 2 + 4 + 7 + 14)\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"Aliquot sum of 0 should be -1\");\n        assertEquals(-1, AliquotSum.getAliquotSum(-5), \"Aliquot sum of negative numbers should be -1\");\n        assertEquals(1, AliquotSum.getAliquotSum(1), \"Aliquot sum of 1 should be 1\");\n        assertEquals(3, AliquotSum.getAliquotSum(2), \"Aliquot sum of 2 should be 1 (only one divisor)\");\n        assertEquals(1 + 2, AliquotSum.getAliquotSum(4), \"Aliquot sum of 4 should be 1 + 2\");\n        assertEquals(1 + 2 + 3, AliquotSum.getAliquotSum(6), \"Aliquot sum of 6 should be 1 + 2 + 3\");\n        assertEquals(1 + 2 + 3 + 4 + 6, AliquotSum.getAliquotSum(12), \"Aliquot sum of 12 should be 1 + 2 + 3 + 4 + 6\");\n        assertEquals(1 + 3 + 5, AliquotSum.getAliquotSum(9), \"Aliquot sum of 9 should be 1 + 3 + 5 because 3 is added twice as it is a perfect square\");\n        assertEquals(1 + 71, AliquotSum.getAliquotSum(72), \"Aliquot sum of 72 should be 1 + 2 + 3 + 4 + 6 + 8 + 9 + 12 + 18 + 24 + 36\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        assertEquals(-1, AliquotSum.getAliquotSum(-10), \"Aliquot sum must be -1 for negative input\");\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"Aliquot sum must be -1 for zero\");\n        assertEquals(1, AliquotSum.getAliquotSum(1), \"Aliquot sum of 1 should be 1\");\n        assertEquals(1, AliquotSum.getAliquotSum(2), \"Aliquot sum of 2 should be 1\");\n        assertEquals(1, AliquotSum.getAliquotSum(3), \"Aliquot sum of 3 should be 1\");\n        assertEquals(3, AliquotSum.getAliquotSum(4), \"Aliquot sum of 4 should be 3\");\n        assertEquals(6, AliquotSum.getAliquotSum(6), \"Aliquot sum of 6 should be 6\");\n        assertEquals(1 + 2 + 3 + 4 + 6, AliquotSum.getAliquotSum(12), \"Aliquot sum of 12 should be 16\");\n        assertEquals(1 + 3 + 5 + 15, AliquotSum.getAliquotSum(15), \"Aliquot sum of 15 should be 24\");\n        assertEquals(1 + 7, AliquotSum.getAliquotSum(8), \"Aliquot sum of 8 should be 8\");\n        assertEquals(1 + 2 + 4 + 7 + 14, AliquotSum.getAliquotSum(28), \"Aliquot sum of 28 should be 28\");\n        assertEquals(1, AliquotSum.getAliquotSum(Integer.MAX_VALUE), \"Aliquot sum of MAX_VALUE should be 1\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n\n    @Test\n    public void getAliquotSumTest() {\n        // Test for a negative input\n        assertEquals(-1, AliquotSum.getAliquotSum(-10), \"The aliquot sum of a negative number should be -1\");\n\n        // Test for zero input\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"The aliquot sum of 0 should be -1\");\n        \n        // Test for aliquot sum of a prime number (should be 1)\n        assertEquals(1, AliquotSum.getAliquotSum(13), \"The aliquot sum of a prime number should be 1\");\n        \n        // Test for aliquot sum of a non-prime number\n        assertEquals(1 + 2 + 4, AliquotSum.getAliquotSum(8), \"The aliquot sum of 8 should include its proper divisors 1, 2, and 4\");\n        \n        // Test for aliquot sum of a perfect square (should not include square root twice)\n        assertEquals(1 + 3, AliquotSum.getAliquotSum(9), \"The aliquot sum of a perfect square (9) should be 1 + 3, not including the square root twice\");\n\n        // Test for aliquot sum of a larger number\n        assertEquals(1 + 2 + 4 + 7 + 14 + 28, AliquotSum.getAliquotSum(56), \"The aliquot sum of 56 should include its proper divisors\");\n\n        // Test for aliquot sum where n is a perfect square\n        assertEquals(1 + 2 + 4 + 5 + 10 + 20, AliquotSum.getAliquotSum(100), \"The aliquot sum of 100, a perfect square, should not include its square root twice\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        // Test for negative input\n        assertEquals(-1, AliquotSum.getAliquotSum(-5), \"Aliquot sum of negative number should be -1\");\n\n        // Test for zero input\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"Aliquot sum of 0 should be -1\");\n\n        // Test for positive input where the number is not a perfect square\n        assertEquals(1, AliquotSum.getAliquotSum(2), \"Aliquot sum of 2 should be 1\");\n\n        // Test for perfect square input\n        assertEquals(28, AliquotSum.getAliquotSum(16), \"Aliquot sum of 16 should be 28 (1+2+4+8)\");\n\n        // Test for a larger number\n        assertEquals(117, AliquotSum.getAliquotSum(100), \"Aliquot sum of 100 should be 117 (1+2+4+5+10+20+25+50)\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    @Test\n    public void getAliquotSumTest() {\n        // Test for negative input\n        assertEquals(-1, AliquotSum.getAliquotSum(-5), \"The aliquot sum of a negative number should be -1\");\n\n        // Test for zero input\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"The aliquot sum of zero should be -1\");\n\n        // Test for perfect square (16 -> factors are 1, 2, 4, 8, but 4 is counted once)\n        assertEquals(1 + 2 + 4 + 8, AliquotSum.getAliquotSum(16), \"The aliquot sum of 16 should be 1 + 2 + 4 + 8\");\n\n        // Test for a prime number (7 -> only has factors 1 and 7, but aliquot sum excludes 7)\n        assertEquals(1, AliquotSum.getAliquotSum(7), \"The aliquot sum of a prime number (7) should be 1\");\n\n        // Test for a typical case (28 -> factors are 1, 2, 4, 7, 14 excluding the number itself)\n        assertEquals(1 + 2 + 4 + 7 + 14, AliquotSum.getAliquotSum(28), \"The aliquot sum of 28 should be 1 + 2 + 4 + 7 + 14\");\n\n        // Test for a large number\n        assertEquals(1 + 3 + 5 + 15, AliquotSum.getAliquotSum(30), \"The aliquot sum of 30 should be 1 + 3 + 5 + 15\");\n        \n        // Test for another perfect square (49 -> factors are 1, 7 but 7 is counted once)\n        assertEquals(1 + 7, AliquotSum.getAliquotSum(49), \"The aliquot sum of 49 should be 1 + 7\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AliquotSumTest {\n    \n    @Test\n    public void getAliquotSumTest() {\n        // Test for a positive number\n        assertEquals(28, AliquotSum.getAliquotSum(28), \"The aliquot sum of 28 should be 28.\");\n        \n        // Test for a perfect square number\n        assertEquals(3, AliquotSum.getAliquotSum(4), \"The aliquot sum of a perfect square (4) should account for the square root only once.\");\n\n        // Test for a non-positive number\n        assertEquals(-1, AliquotSum.getAliquotSum(-5), \"The aliquot sum should be -1 for a non-positive input.\");\n        \n        // Test for 0 which also is non-positive\n        assertEquals(-1, AliquotSum.getAliquotSum(0), \"The aliquot sum should be -1 for zero as input.\");\n        \n        // Test for 1, which is a special case\n        assertEquals(1, AliquotSum.getAliquotSum(1), \"The aliquot sum of 1 should be 1.\");\n    }\n}"
    ]
}