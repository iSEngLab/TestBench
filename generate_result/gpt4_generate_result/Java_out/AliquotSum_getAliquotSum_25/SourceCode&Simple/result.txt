Source code: 


public static int getAliquotSum(int n) {
    if (n <= 0) return -1;
    int sum = 1;
    double root = Math.sqrt(n);
    /*
     * We can get the factors after the root by dividing number by its factors
     * before the root.
     * Ex- Factors of 100 are 1, 2, 4, 5, 10, 20, 25, 50 and 100.
     * Root of 100 is 10. So factors before 10 are 1, 2, 4 and 5.
     * Now by dividing 100 by each factor before 10 we get:
     * 100/1 = 100, 100/2 = 50, 100/4 = 25 and 100/5 = 20
     * So we get 100, 50, 25 and 20 which are factors of 100 after 10
     */
    for (int i = 2; i <= root; i++) {
        if (n % i == 0) {
            sum += i + n / i;
        }
    }
    // if n is a perfect square then its root was added twice in above loop, so subtracting root
    // from sum
    if (root == (int) root) sum -= root;
    return sum;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {

    @Test
    public void getAliquotSumTest() {
        assertEquals(-1, AliquotSum.getAliquotSum(-5), "Negative input should return -1");
        assertEquals(-1, AliquotSum.getAliquotSum(0), "Zero as input should return -1");
        assertEquals(1, AliquotSum.getAliquotSum(1), "Aliquot sum of 1 should be 1 as it only has itself as a factor");
        assertEquals(1, AliquotSum.getAliquotSum(2), "Aliquot sum of 2 should be 1 because it is a prime number");
        assertEquals(3, AliquotSum.getAliquotSum(4), "Aliquot sum of 4 should be 3 (1+2)");
        assertEquals(6, AliquotSum.getAliquotSum(12), "Aliquot sum of 12 should be 16 (1+2+3+4+6)");
        assertEquals(28, AliquotSum.getAliquotSum(28), "Aliquot sum of 28 should be 28 (1+2+4+7+14)");
        assertEquals(1170, AliquotSum.getAliquotSum(1000), "Aliquot sum of 1000 should be 1170 (1+2+4+5+8+10+20+25+40+50+100+125+200+250+500)");
        assertEquals(1, AliquotSum.getAliquotSum(3), "Aliquot sum of 3 should be 1 because it is a prime number");
        assertEquals(15, AliquotSum.getAliquotSum(16), "Aliquot sum of 16 should be 15 (1+2+4+8)");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {

    @Test
    public void getAliquotSumTest() {
        assertEquals(-1, AliquotSum.getAliquotSum(0), "The aliquot sum of 0 should be -1");
        assertEquals(-1, AliquotSum.getAliquotSum(-5), "The aliquot sum of negative numbers should be -1");
        assertEquals(1, AliquotSum.getAliquotSum(1), "The aliquot sum of 1 should be 1");
        assertEquals(1, AliquotSum.getAliquotSum(2), "The aliquot sum of 2 should be 1");
        assertEquals(3, AliquotSum.getAliquotSum(4), "The aliquot sum of 4 should be 3");
        assertEquals(6, AliquotSum.getAliquotSum(12), "The aliquot sum of 12 should be 16");
        assertEquals(1+2+3+6+9+18+36+72, AliquotSum.getAliquotSum(144), "The aliquot sum of 144 should be the sum of its divisors excluding itself");
        assertEquals(1+2+3+6, AliquotSum.getAliquotSum(14), "The aliquot sum of 14 should be the sum of its divisors excluding itself");
        assertEquals(1+2+4, AliquotSum.getAliquotSum(9), "The aliquot sum of 9 should be the sum of its divisors excluding itself");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {

    @Test
    public void getAliquotSumTest() {
        // Test with a positive number that is not a perfect square
        assertEquals(1, AliquotSum.getAliquotSum(2)); // 2's proper divisors are just 1
        assertEquals(3, AliquotSum.getAliquotSum(4)); // 4's proper divisors are 1 and 2
        
        // Test with positive perfect square numbers
        assertEquals(1, AliquotSum.getAliquotSum(1)); // 1's proper divisors are none, represented by 1 itself
        assertEquals(28, AliquotSum.getAliquotSum(28)); // 28's proper divisors are 1, 2, 4, 7, 14
        
        // Test with a large number
        assertEquals(1170, AliquotSum.getAliquotSum(1000)); // 1000's proper divisors
        
        // Test the case for n is a perfect square
        assertEquals(1, AliquotSum.getAliquotSum(16)); // Subtract the root for perfect square
        
        // Test with zero and negative numbers
        assertEquals(-1, AliquotSum.getAliquotSum(0)); // Zero should return -1
        assertEquals(-1, AliquotSum.getAliquotSum(-10)); // Negative should return -1
    }
}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        assertEquals(-1, AliquotSum.getAliquotSum(-10), "The aliquot sum of a negative number should be -1");
        assertEquals(-1, AliquotSum.getAliquotSum(0), "The aliquot sum of zero should be -1");
        assertEquals(1, AliquotSum.getAliquotSum(1), "The aliquot sum of 1 should be 1 since it does not have proper divisors other than itself");
        assertEquals(1, AliquotSum.getAliquotSum(2), "The aliquot sum of 2 should be 1");
        assertEquals(1 + 2, AliquotSum.getAliquotSum(4), "The aliquot sum of 4 should be 3 (1 + 2)");
        assertEquals(1 + 2 + 3, AliquotSum.getAliquotSum(6), "The aliquot sum of 6 should be 6 (1 + 2 + 3)");
        assertEquals(1 + 3, AliquotSum.getAliquotSum(9), "The aliquot sum of 9 should be 4 (1 + 3)");
        assertEquals(1 + 2 + 4 + 7 + 14, AliquotSum.getAliquotSum(28), "The aliquot sum of 28 should be 28 (1 + 2 + 4 + 7 + 14)");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {

    @Test
    public void getAliquotSumTest() {
        assertEquals(-1, AliquotSum.getAliquotSum(0), "Aliquot sum of 0 should be -1");
        assertEquals(-1, AliquotSum.getAliquotSum(-5), "Aliquot sum of negative numbers should be -1");
        assertEquals(1, AliquotSum.getAliquotSum(1), "Aliquot sum of 1 should be 1");
        assertEquals(3, AliquotSum.getAliquotSum(2), "Aliquot sum of 2 should be 1 (only one divisor)");
        assertEquals(1 + 2, AliquotSum.getAliquotSum(4), "Aliquot sum of 4 should be 1 + 2");
        assertEquals(1 + 2 + 3, AliquotSum.getAliquotSum(6), "Aliquot sum of 6 should be 1 + 2 + 3");
        assertEquals(1 + 2 + 3 + 4 + 6, AliquotSum.getAliquotSum(12), "Aliquot sum of 12 should be 1 + 2 + 3 + 4 + 6");
        assertEquals(1 + 3 + 5, AliquotSum.getAliquotSum(9), "Aliquot sum of 9 should be 1 + 3 + 5 because 3 is added twice as it is a perfect square");
        assertEquals(1 + 71, AliquotSum.getAliquotSum(72), "Aliquot sum of 72 should be 1 + 2 + 3 + 4 + 6 + 8 + 9 + 12 + 18 + 24 + 36");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        assertEquals(-1, AliquotSum.getAliquotSum(-10), "Aliquot sum must be -1 for negative input");
        assertEquals(-1, AliquotSum.getAliquotSum(0), "Aliquot sum must be -1 for zero");
        assertEquals(1, AliquotSum.getAliquotSum(1), "Aliquot sum of 1 should be 1");
        assertEquals(1, AliquotSum.getAliquotSum(2), "Aliquot sum of 2 should be 1");
        assertEquals(1, AliquotSum.getAliquotSum(3), "Aliquot sum of 3 should be 1");
        assertEquals(3, AliquotSum.getAliquotSum(4), "Aliquot sum of 4 should be 3");
        assertEquals(6, AliquotSum.getAliquotSum(6), "Aliquot sum of 6 should be 6");
        assertEquals(1 + 2 + 3 + 4 + 6, AliquotSum.getAliquotSum(12), "Aliquot sum of 12 should be 16");
        assertEquals(1 + 3 + 5 + 15, AliquotSum.getAliquotSum(15), "Aliquot sum of 15 should be 24");
        assertEquals(1 + 7, AliquotSum.getAliquotSum(8), "Aliquot sum of 8 should be 8");
        assertEquals(1 + 2 + 4 + 7 + 14, AliquotSum.getAliquotSum(28), "Aliquot sum of 28 should be 28");
        assertEquals(1, AliquotSum.getAliquotSum(Integer.MAX_VALUE), "Aliquot sum of MAX_VALUE should be 1");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {

    @Test
    public void getAliquotSumTest() {
        // Test for a negative input
        assertEquals(-1, AliquotSum.getAliquotSum(-10), "The aliquot sum of a negative number should be -1");

        // Test for zero input
        assertEquals(-1, AliquotSum.getAliquotSum(0), "The aliquot sum of 0 should be -1");
        
        // Test for aliquot sum of a prime number (should be 1)
        assertEquals(1, AliquotSum.getAliquotSum(13), "The aliquot sum of a prime number should be 1");
        
        // Test for aliquot sum of a non-prime number
        assertEquals(1 + 2 + 4, AliquotSum.getAliquotSum(8), "The aliquot sum of 8 should include its proper divisors 1, 2, and 4");
        
        // Test for aliquot sum of a perfect square (should not include square root twice)
        assertEquals(1 + 3, AliquotSum.getAliquotSum(9), "The aliquot sum of a perfect square (9) should be 1 + 3, not including the square root twice");

        // Test for aliquot sum of a larger number
        assertEquals(1 + 2 + 4 + 7 + 14 + 28, AliquotSum.getAliquotSum(56), "The aliquot sum of 56 should include its proper divisors");

        // Test for aliquot sum where n is a perfect square
        assertEquals(1 + 2 + 4 + 5 + 10 + 20, AliquotSum.getAliquotSum(100), "The aliquot sum of 100, a perfect square, should not include its square root twice");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        // Test for negative input
        assertEquals(-1, AliquotSum.getAliquotSum(-5), "Aliquot sum of negative number should be -1");

        // Test for zero input
        assertEquals(-1, AliquotSum.getAliquotSum(0), "Aliquot sum of 0 should be -1");

        // Test for positive input where the number is not a perfect square
        assertEquals(1, AliquotSum.getAliquotSum(2), "Aliquot sum of 2 should be 1");

        // Test for perfect square input
        assertEquals(28, AliquotSum.getAliquotSum(16), "Aliquot sum of 16 should be 28 (1+2+4+8)");

        // Test for a larger number
        assertEquals(117, AliquotSum.getAliquotSum(100), "Aliquot sum of 100 should be 117 (1+2+4+5+10+20+25+50)");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        // Test for negative input
        assertEquals(-1, AliquotSum.getAliquotSum(-5), "The aliquot sum of a negative number should be -1");

        // Test for zero input
        assertEquals(-1, AliquotSum.getAliquotSum(0), "The aliquot sum of zero should be -1");

        // Test for perfect square (16 -> factors are 1, 2, 4, 8, but 4 is counted once)
        assertEquals(1 + 2 + 4 + 8, AliquotSum.getAliquotSum(16), "The aliquot sum of 16 should be 1 + 2 + 4 + 8");

        // Test for a prime number (7 -> only has factors 1 and 7, but aliquot sum excludes 7)
        assertEquals(1, AliquotSum.getAliquotSum(7), "The aliquot sum of a prime number (7) should be 1");

        // Test for a typical case (28 -> factors are 1, 2, 4, 7, 14 excluding the number itself)
        assertEquals(1 + 2 + 4 + 7 + 14, AliquotSum.getAliquotSum(28), "The aliquot sum of 28 should be 1 + 2 + 4 + 7 + 14");

        // Test for a large number
        assertEquals(1 + 3 + 5 + 15, AliquotSum.getAliquotSum(30), "The aliquot sum of 30 should be 1 + 3 + 5 + 15");
        
        // Test for another perfect square (49 -> factors are 1, 7 but 7 is counted once)
        assertEquals(1 + 7, AliquotSum.getAliquotSum(49), "The aliquot sum of 49 should be 1 + 7");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    
    @Test
    public void getAliquotSumTest() {
        // Test for a positive number
        assertEquals(28, AliquotSum.getAliquotSum(28), "The aliquot sum of 28 should be 28.");
        
        // Test for a perfect square number
        assertEquals(3, AliquotSum.getAliquotSum(4), "The aliquot sum of a perfect square (4) should account for the square root only once.");

        // Test for a non-positive number
        assertEquals(-1, AliquotSum.getAliquotSum(-5), "The aliquot sum should be -1 for a non-positive input.");
        
        // Test for 0 which also is non-positive
        assertEquals(-1, AliquotSum.getAliquotSum(0), "The aliquot sum should be -1 for zero as input.");
        
        // Test for 1, which is a special case
        assertEquals(1, AliquotSum.getAliquotSum(1), "The aliquot sum of 1 should be 1.");
    }
}


