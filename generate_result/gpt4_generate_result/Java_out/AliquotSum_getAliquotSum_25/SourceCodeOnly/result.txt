Source code: 


public static int getAliquotSum(int n) {
    if (n <= 0) return -1;
    int sum = 1;
    double root = Math.sqrt(n);
    /*
     * We can get the factors after the root by dividing number by its factors
     * before the root.
     * Ex- Factors of 100 are 1, 2, 4, 5, 10, 20, 25, 50 and 100.
     * Root of 100 is 10. So factors before 10 are 1, 2, 4 and 5.
     * Now by dividing 100 by each factor before 10 we get:
     * 100/1 = 100, 100/2 = 50, 100/4 = 25 and 100/5 = 20
     * So we get 100, 50, 25 and 20 which are factors of 100 after 10
     */
    for (int i = 2; i <= root; i++) {
        if (n % i == 0) {
            sum += i + n / i;
        }
    }
    // if n is a perfect square then its root was added twice in above loop, so subtracting root
    // from sum
    if (root == (int) root) sum -= root;
    return sum;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {

    @Test
    public void getAliquotSumTest() {
        assertEquals(-1, AliquotSum.getAliquotSum(-10), "The aliquot sum of a negative number should be -1."); // Negative test case
        assertEquals(-1, AliquotSum.getAliquotSum(0), "The aliquot sum of zero should be -1."); // Zero test case

        assertEquals(1, AliquotSum.getAliquotSum(1), "The aliquot sum of 1 should be 1."); // Test case for 1
        assertEquals(1, AliquotSum.getAliquotSum(2), "The aliquot sum of 2 (prime) should be 1."); // Prime number test
        assertEquals(3, AliquotSum.getAliquotSum(4), "The aliquot sum of 4 should be 3."); // Perfect square test
        assertEquals(1+2+3+6, AliquotSum.getAliquotSum(12), "The aliquot sum of 12 should be 12."); // Composite number test
        assertEquals(1+2+3+4+6+11+22+33+44+66, AliquotSum.getAliquotSum(121), "The aliquot sum of 121 should be 292."); // Larger number test
    }
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {

    @Test
    public void getAliquotSumTest() {
        assertEquals(-1, AliquotSum.getAliquotSum(-10), "getAliquotSum should return -1 for negative input");
        assertEquals(-1, AliquotSum.getAliquotSum(0), "getAliquotSum should return -1 for zero");
        assertEquals(1, AliquotSum.getAliquotSum(1), "getAliquotSum of 1 should be 1");
        assertEquals(1, AliquotSum.getAliquotSum(2), "getAliquotSum of 2 should be 1");
        assertEquals(3, AliquotSum.getAliquotSum(4), "getAliquotSum of 4 should be 3");
        assertEquals(284, AliquotSum.getAliquotSum(220), "getAliquotSum of 220 should be 284");
        assertEquals(1, AliquotSum.getAliquotSum(3), "getAliquotSum of 3 should be 1");
        assertEquals(17, AliquotSum.getAliquotSum(16), "getAliquotSum of 16 should be 17 because 16 is a perfect square");
        
        // Testing with prime number.
        assertEquals(1, AliquotSum.getAliquotSum(13), "getAliquotSum should return 1 for prime numbers");

        // Testing with perfect square number where root is not counted twice.
        assertEquals(7, AliquotSum.getAliquotSum(9), "getAliquotSum of 9 should be 7 (factors 1 and 3)");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        assertEquals(-1, AliquotSum.getAliquotSum(-10), "The aliquot sum should be -1 for negative numbers");
        assertEquals(-1, AliquotSum.getAliquotSum(0), "The aliquot sum should be -1 for zero");
        assertEquals(1, AliquotSum.getAliquotSum(1), "The aliquot sum for 1 should be 1");
        assertEquals(1, AliquotSum.getAliquotSum(2), "The aliquot sum for 2 should be 1");
        assertEquals(1 + 2, AliquotSum.getAliquotSum(3), "The aliquot sum for 3 should be 1 + 2 = 3");
        assertEquals(1 + 2 + 3, AliquotSum.getAliquotSum(6), "The aliquot sum for 6 should be 1 + 2 + 3 = 6");
        assertEquals(1 + 2 + 4, AliquotSum.getAliquotSum(7), "The aliquot sum for 7 should be 1 + 2 + 4 = 7");
        assertEquals(1 + 3 + 9, AliquotSum.getAliquotSum(27), "The aliquot sum for 27 should be 1 + 3 + 9 = 13");
        assertEquals(1 + 3 + 5 + 15, AliquotSum.getAliquotSum(30), "The aliquot sum for 30 should be 1 + 3 + 5 + 15 = 24");
        int aliquotSum100 = 1 + 2 + 4 + 5 + 10 + 20 + 25 + 50; // 117
        assertEquals(aliquotSum100, AliquotSum.getAliquotSum(100), "The aliquot sum for 100 should be 1 + 2 + 4 + 5 + 10 + 20 + 25 + 50 = 117");
    }
    // Add more tests if necessary
}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {

    @Test
    public void getAliquotSumTest() {
        // Input numbers and their expected aliquot sums
        assertEquals(0, AliquotSum.getAliquotSum(1)); // Edge case: 1 has only itself as a factor, so its aliquot sum is 0
        assertEquals(1, AliquotSum.getAliquotSum(2)); // Prime number: only has 1 as its proper factor
        assertEquals(3, AliquotSum.getAliquotSum(4)); // 4 has factors 1 and 2, with an aliquot sum of 3
        assertEquals(15, AliquotSum.getAliquotSum(9)); // 9 has factors 1 and 3, with an aliquot sum of 1 + 3 = 4
        assertEquals(28, AliquotSum.getAliquotSum(28)); // Perfect number test case
        assertEquals(-1, AliquotSum.getAliquotSum(-5)); // Negative number test case
        assertEquals(-1, AliquotSum.getAliquotSum(0)); // Zero test case
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {

    @Test
    public void getAliquotSumTest() {
        // Test with a perfect square
        assertEquals(1, AliquotSum.getAliquotSum(1)); // 1 is both the number and its own aliquot sum, but in the definition, the proper divisors do not include the number itself so may return -1.
        assertEquals(114, AliquotSum.getAliquotSum(100)); // 1+2+4+5+10+20+25+50 = 114

        // Test with a non-perfect square
        assertEquals(28, AliquotSum.getAliquotSum(28)); // 1+2+4+7+14 = 28 (28 is a perfect number)

        // Test with negative and zero input
        assertEquals(-1, AliquotSum.getAliquotSum(-5)); // should return -1 since the input is non-positive
        assertEquals(-1, AliquotSum.getAliquotSum(0)); // should return -1 since the input is non-positive

        // Test with a prime number (prime numbers' aliquot sum equals 1, since the only proper divisor is 1)
        assertEquals(1, AliquotSum.getAliquotSum(13)); // prime numbers have only one proper divisor: 1
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    
    @Test
    public void getAliquotSumTest() {
        // Test for negative input
        assertEquals(-1, Main.getAliquotSum(-5), "The aliquot sum of a negative number should be -1");
        
        // Test for zero input
        assertEquals(-1, Main.getAliquotSum(0), "The aliquot sum of zero should be -1");

        // Test for a prime number input
        assertEquals(1, Main.getAliquotSum(13), "The aliquot sum of a prime number should be 1");

        // Test for a perfect square input
        assertEquals(1 + 2 + 4 + 5 + 10 + 20 , Main.getAliquotSum(25), "The aliquot sum of a perfect square should be the sum of its factors excluding itself");
        
        // Test for a non-perfect square composite number input
        assertEquals(1 + 2 + 4 , Main.getAliquotSum(8), "The aliquot sum of a non-perfect square composite number should be sum of its factors excluding itself");
       
        // Test for 1 input (edge case)
        assertEquals(0, Main.getAliquotSum(1), "The aliquot sum of 1 should be 0 as it has no proper divisors other than itself");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {

    @Test
    public void getAliquotSumTest() {
        assertEquals(-1, AliquotSum.getAliquotSum(-10), "The aliquot sum of a negative number should be -1.");
        assertEquals(-1, AliquotSum.getAliquotSum(0), "The aliquot sum of zero should be -1.");
        assertEquals(1, AliquotSum.getAliquotSum(1), "The aliquot sum of 1 should be 1.");
        assertEquals(1, AliquotSum.getAliquotSum(2), "The aliquot sum of 2 should be 1.");
        assertEquals(1, AliquotSum.getAliquotSum(3), "The aliquot sum of 3 should be 1.");
        assertEquals(3, AliquotSum.getAliquotSum(4), "The aliquot sum of 4 should be 3.");
        assertEquals(1, AliquotSum.getAliquotSum(5), "The aliquot sum of 5 should be 1.");
        assertEquals(6, AliquotSum.getAliquotSum(6), "The aliquot sum of 6 should be 6.");
        assertEquals(1, AliquotSum.getAliquotSum(7), "The aliquot sum of 7 should be 1.");
        assertEquals(7, AliquotSum.getAliquotSum(8), "The aliquot sum of 8 should be 7.");
        assertEquals(4, AliquotSum.getAliquotSum(9), "The aliquot sum of 9 should be 4.");
        assertEquals(18, AliquotSum.getAliquotSum(28), "The aliquot sum of 28 should be 18.");
        
        assertEquals(28, AliquotSum.getAliquotSum(100), "The aliquot sum of 100 should be 28.");
        assertEquals(1, AliquotSum.getAliquotSum(11), "The aliquot sum of 11 should be 1.");
        assertEquals(117, AliquotSum.getAliquotSum(220), "The aliquot sum of 220 should be 117.");
        
        // Testing a perfect square (since it requires a special case in the code logic)
        assertEquals(15, AliquotSum.getAliquotSum(16), "The aliquot sum of 16 (a perfect square) should be 15.");
        
        // Testing larger number
        assertEquals(64, AliquotSum.getAliquotSum(128), "The aliquot sum of 128 should be 64.");
        
        // Add more test cases if necessary
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        assertEquals(-1, MathUtil.getAliquotSum(-10), "Aliquot sum of negative number should be -1.");
        assertEquals(-1, MathUtil.getAliquotSum(0), "Aliquot sum of zero should be -1.");
        assertEquals(1, MathUtil.getAliquotSum(1), "Aliquot sum of 1 should be 1.");
        assertEquals(1, MathUtil.getAliquotSum(2), "Aliquot sum of 2 should be 1.");
        assertEquals(1, MathUtil.getAliquotSum(3), "Aliquot sum of 3 should be 1.");
        assertEquals(3, MathUtil.getAliquotSum(4), "Aliquot sum of 4 should be 3.");
        assertEquals(1, MathUtil.getAliquotSum(5), "Aliquot sum of 5 should be 1.");
        assertEquals(6, MathUtil.getAliquotSum(6), "Aliquot sum of 6 should be 6.");
        assertEquals(1, MathUtil.getAliquotSum(7), "Aliquot sum of 7 should be 1.");
        assertEquals(7, MathUtil.getAliquotSum(8), "Aliquot sum of 8 should be 7.");
        assertEquals(4, MathUtil.getAliquotSum(9), "Aliquot sum of 9 should be 4.");
        assertEquals(117, MathUtil.getAliquotSum(100), "Aliquot sum of 100 should be 117.");
        assertEquals(284, MathUtil.getAliquotSum(220), "Aliquot sum of 220 should be 284.");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {

    @Test
    public void getAliquotSumTest() {
        assertEquals(-1, MyClass.getAliquotSum(0)); // Test case for non-positive input
        assertEquals(-1, MyClass.getAliquotSum(-10)); // Test case for negative input
        assertEquals(1, MyClass.getAliquotSum(1)); // Test case where the only divisor is 1
        assertEquals(1, MyClass.getAliquotSum(2)); // Test case for a prime number
        assertEquals(3, MyClass.getAliquotSum(4)); // Test case for a power of prime (2^2)
        assertEquals(1 + 2 + 3, MyClass.getAliquotSum(6)); // Test case for a small number (perfect number)
        assertEquals(1 + 2 + 4 + 7 + 14, MyClass.getAliquotSum(28)); // Test case for another perfect number
        assertEquals(1 + 2 + 5 + 10, MyClass.getAliquotSum(16)); // Test case for number with non-trivial divisors
        assertEquals(1 + 3 + 5 + 15, MyClass.getAliquotSum(25)); // Test case for a square of a prime (5^2), expected sum is reduced by sqrt(n)
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {

    @Test
    public void getAliquotSumTest() {
        assertEquals(-1, AliquotSum.getAliquotSum(-5), "Aliquot sum of negative number should be -1");
        assertEquals(-1, AliquotSum.getAliquotSum(0), "Aliquot sum of zero should be -1");
        assertEquals(1, AliquotSum.getAliquotSum(1), "Aliquot sum of one should be 1");
        assertEquals(1, AliquotSum.getAliquotSum(2), "Aliquot sum of two should be 1");
        assertEquals(1, AliquotSum.getAliquotSum(3), "Aliquot sum of three should be 1");
        assertEquals(3, AliquotSum.getAliquotSum(4), "Aliquot sum of four should be 3");
        assertEquals(1, AliquotSum.getAliquotSum(5), "Aliquot sum of five should be 1");
        assertEquals(6, AliquotSum.getAliquotSum(6), "Aliquot sum of six should be 6");
        assertEquals(28, AliquotSum.getAliquotSum(28), "Aliquot sum of 28 should be 28");
        assertEquals(284, AliquotSum.getAliquotSum(220), "Aliquot sum of 220 should be 284");
        assertEquals(220, AliquotSum.getAliquotSum(284), "Aliquot sum of 284 should be 220");
        assertEquals(12, AliquotSum.getAliquotSum(14), "Aliquot sum of 14 should be 12");
    }
}


