{
    "project_name": "Java",
    "file_name": "Armstrong.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/Armstrong.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Checks whether a given number is an Armstrong number or not.\n     *\n     * @param number the number to check\n     * @return {@code true} if the given number is an Armstrong number, {@code false} otherwise\n     */",
    "source_code": "\npublic boolean isArmstrong(int number) {\n    long sum = 0;\n    String temp = Integer.toString(number); // Convert the given number to a string\n    int power = temp.length(); // Extract the length of the number (number of digits)\n    long originalNumber = number;\n\n    while (originalNumber > 0) {\n        long digit = originalNumber % 10;\n        sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.\n        originalNumber /= 10;\n    }\n\n    return sum == number;\n}\n",
    "class_name": "Armstrong",
    "method_name": "isArmstrong",
    "arguments": [
        "int number"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    \n    private Armstrong armstrong;\n\n    @BeforeEach\n    public void setup() {\n        armstrong = new Armstrong();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        // Test with an Armstrong number\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n\n        // Test with a non-Armstrong number\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n\n        // Test with a single digit, which should always be an Armstrong number\n        assertTrue(armstrong.isArmstrong(5), \"Single digits are Armstrong numbers\");\n\n        // Test with a known 4-digit Armstrong number\n        assertTrue(armstrong.isArmstrong(1634), \"1634 is an Armstrong number\");\n\n        // Test with zero, which by definition is considered an Armstrong number\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number\");\n\n        // Test with a negative number, which cannot be an Armstrong number\n        assertFalse(armstrong.isArmstrong(-371), \"-371 is not an Armstrong number since Armstrong numbers are positive\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n\n        // Test with an Armstrong number\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n\n        // Test with a non-Armstrong number\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n\n        // Test with a single digit, which is always an Armstrong number\n        assertTrue(armstrong.isArmstrong(5), \"Single digit numbers are considered Armstrong numbers\");\n\n        // Test with a zero, which is also considered an Armstrong number\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number\");\n\n        // Test with a negative number, which cannot be an Armstrong number by definition\n        assertFalse(armstrong.isArmstrong(-370), \"-370 is not an Armstrong number even if 370 is\");\n\n        // Test with another Armstrong number\n        assertTrue(armstrong.isArmstrong(9474), \"9474 is an Armstrong number\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private final Armstrong armstrong = new Armstrong();\n\n    @Test\n    public void isArmstrongTest() {\n        // Test positive cases\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(9474), \"9474 is an Armstrong number\");\n\n        // Test negative case\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(10), \"10 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(9475), \"9475 is not an Armstrong number\");\n\n        // Test edge cases\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(1), \"1 is an Armstrong number\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n  private final Armstrong armstrong = new Armstrong();\n\n  @Test\n  public void isArmstrongTest() {\n    // Test cases where the result should be true (for Armstrong numbers)\n    assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number.\");\n    assertTrue(armstrong.isArmstrong(1), \"1 is an Armstrong number.\");\n    assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number.\");\n    assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number.\");\n    assertTrue(armstrong.isArmstrong(371), \"371 is an Armstrong number.\");\n    assertTrue(armstrong.isArmstrong(407), \"407 is an Armstrong number.\");\n    assertTrue(armstrong.isArmstrong(1634), \"1634 is an Armstrong number.\");\n\n    // Test cases where the result should be false (not Armstrong numbers)\n    assertFalse(armstrong.isArmstrong(10), \"10 is not an Armstrong number.\");\n    assertFalse(armstrong.isArmstrong(100), \"100 is not an Armstrong number.\");\n    assertFalse(armstrong.isArmstrong(372), \"372 is not an Armstrong number.\");\n    assertFalse(armstrong.isArmstrong(9474), \"9474 is not an Armstrong number.\");\n  }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n\n        // Test for a known Armstrong number\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number.\");\n\n        // Test for a non-Armstrong number\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number.\");\n\n        // Test for a single digit Armstrong number, which should return true (as any single digit raised to the power of 1 is itself)\n        assertTrue(armstrong.isArmstrong(5), \"Single digit numbers are Armstrong numbers by definition.\");\n\n        // Test for zero, which is technically an Armstrong number\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number.\");\n\n        // Test for another known Armstrong number\n        assertTrue(armstrong.isArmstrong(1634), \"1634 is an Armstrong number.\");\n\n        // Test with negative input, which should not be an Armstrong number\n        assertFalse(armstrong.isArmstrong(-153), \"Negative numbers are not Armstrong numbers.\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private Armstrong armstrong;\n\n    @BeforeEach\n    public void setup() {\n        armstrong = new Armstrong();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        // Test with Armstrong numbers\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(1), \"1 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(9474), \"9474 is an Armstrong number\");\n\n        // Test with non-Armstrong numbers\n        assertFalse(armstrong.isArmstrong(10), \"10 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(100), \"100 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(9475), \"9475 is not an Armstrong number\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        \n        // Test for a known Armstrong number\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        \n        // Test for a non-Armstrong number\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n        \n        // Additional test cases\n        assertTrue(armstrong.isArmstrong(1634), \"1634 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number\");  // Edge case: single digit\n        assertFalse(armstrong.isArmstrong(100), \"100 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(-370), \"-370 is not an Armstrong number\");  // Edge case: negative number\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    private Armstrong armstrong;\n\n    @BeforeEach\n    public void setup() {\n        armstrong = new Armstrong();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(1), \"1 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(1634), \"1634 is an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(10), \"10 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private final Armstrong armstrong = new Armstrong();\n\n    @Test\n    public void isArmstrongTest() {\n        // Positive test cases: testing known Armstrong numbers.\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number.\");\n        assertTrue(armstrong.isArmstrong(1), \"1 is an Armstrong number.\");\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number.\");\n        assertTrue(armstrong.isArmstrong(407), \"407 is an Armstrong number.\");\n        assertTrue(armstrong.isArmstrong(1634), \"1634 is an Armstrong number.\");\n\n        // Negative test cases: testing numbers that are not Armstrong numbers.\n        assertFalse(armstrong.isArmstrong(10), \"10 is not an Armstrong number.\");\n        assertFalse(armstrong.isArmstrong(100), \"100 is not an Armstrong number.\");\n        assertFalse(armstrong.isArmstrong(372), \"372 is not an Armstrong number.\");\n        assertFalse(armstrong.isArmstrong(9474), \"9474 is not an Armstrong number.\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\npublic class ArmstrongTest {\n\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n\n        // Example of Armstrong number\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(9474), \"9474 is an Armstrong number\");\n\n        // Example of non-Armstrong number\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(10), \"10 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(9475), \"9475 is not an Armstrong number\");\n    }\n}"
    ]
}