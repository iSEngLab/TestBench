Source code: 


public boolean isArmstrong(int number) {
    long sum = 0;
    String temp = Integer.toString(number); // Convert the given number to a string
    int power = temp.length(); // Extract the length of the number (number of digits)
    long originalNumber = number;

    while (originalNumber > 0) {
        long digit = originalNumber % 10;
        sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.
        originalNumber /= 10;
    }

    return sum == number;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    
    private Armstrong armstrong;

    @BeforeEach
    public void setup() {
        armstrong = new Armstrong();
    }

    @Test
    public void isArmstrongTest() {
        // Test with an Armstrong number
        assertTrue(armstrong.isArmstrong(153), "153 is an Armstrong number");

        // Test with a non-Armstrong number
        assertFalse(armstrong.isArmstrong(123), "123 is not an Armstrong number");

        // Test with a single digit, which should always be an Armstrong number
        assertTrue(armstrong.isArmstrong(5), "Single digits are Armstrong numbers");

        // Test with a known 4-digit Armstrong number
        assertTrue(armstrong.isArmstrong(1634), "1634 is an Armstrong number");

        // Test with zero, which by definition is considered an Armstrong number
        assertTrue(armstrong.isArmstrong(0), "0 is an Armstrong number");

        // Test with a negative number, which cannot be an Armstrong number
        assertFalse(armstrong.isArmstrong(-371), "-371 is not an Armstrong number since Armstrong numbers are positive");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {

    @Test
    public void isArmstrongTest() {
        Armstrong armstrong = new Armstrong();

        // Test with an Armstrong number
        assertTrue(armstrong.isArmstrong(370), "370 is an Armstrong number");

        // Test with a non-Armstrong number
        assertFalse(armstrong.isArmstrong(123), "123 is not an Armstrong number");

        // Test with a single digit, which is always an Armstrong number
        assertTrue(armstrong.isArmstrong(5), "Single digit numbers are considered Armstrong numbers");

        // Test with a zero, which is also considered an Armstrong number
        assertTrue(armstrong.isArmstrong(0), "0 is an Armstrong number");

        // Test with a negative number, which cannot be an Armstrong number by definition
        assertFalse(armstrong.isArmstrong(-370), "-370 is not an Armstrong number even if 370 is");

        // Test with another Armstrong number
        assertTrue(armstrong.isArmstrong(9474), "9474 is an Armstrong number");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {

    private final Armstrong armstrong = new Armstrong();

    @Test
    public void isArmstrongTest() {
        // Test positive cases
        assertTrue(armstrong.isArmstrong(370), "370 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(153), "153 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(9474), "9474 is an Armstrong number");

        // Test negative case
        assertFalse(armstrong.isArmstrong(123), "123 is not an Armstrong number");
        assertFalse(armstrong.isArmstrong(10), "10 is not an Armstrong number");
        assertFalse(armstrong.isArmstrong(9475), "9475 is not an Armstrong number");

        // Test edge cases
        assertTrue(armstrong.isArmstrong(0), "0 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(1), "1 is an Armstrong number");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
  private final Armstrong armstrong = new Armstrong();

  @Test
  public void isArmstrongTest() {
    // Test cases where the result should be true (for Armstrong numbers)
    assertTrue(armstrong.isArmstrong(0), "0 is an Armstrong number.");
    assertTrue(armstrong.isArmstrong(1), "1 is an Armstrong number.");
    assertTrue(armstrong.isArmstrong(153), "153 is an Armstrong number.");
    assertTrue(armstrong.isArmstrong(370), "370 is an Armstrong number.");
    assertTrue(armstrong.isArmstrong(371), "371 is an Armstrong number.");
    assertTrue(armstrong.isArmstrong(407), "407 is an Armstrong number.");
    assertTrue(armstrong.isArmstrong(1634), "1634 is an Armstrong number.");

    // Test cases where the result should be false (not Armstrong numbers)
    assertFalse(armstrong.isArmstrong(10), "10 is not an Armstrong number.");
    assertFalse(armstrong.isArmstrong(100), "100 is not an Armstrong number.");
    assertFalse(armstrong.isArmstrong(372), "372 is not an Armstrong number.");
    assertFalse(armstrong.isArmstrong(9474), "9474 is not an Armstrong number.");
  }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        Armstrong armstrong = new Armstrong();

        // Test for a known Armstrong number
        assertTrue(armstrong.isArmstrong(370), "370 is an Armstrong number.");

        // Test for a non-Armstrong number
        assertFalse(armstrong.isArmstrong(123), "123 is not an Armstrong number.");

        // Test for a single digit Armstrong number, which should return true (as any single digit raised to the power of 1 is itself)
        assertTrue(armstrong.isArmstrong(5), "Single digit numbers are Armstrong numbers by definition.");

        // Test for zero, which is technically an Armstrong number
        assertTrue(armstrong.isArmstrong(0), "0 is an Armstrong number.");

        // Test for another known Armstrong number
        assertTrue(armstrong.isArmstrong(1634), "1634 is an Armstrong number.");

        // Test with negative input, which should not be an Armstrong number
        assertFalse(armstrong.isArmstrong(-153), "Negative numbers are not Armstrong numbers.");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {

    private Armstrong armstrong;

    @BeforeEach
    public void setup() {
        armstrong = new Armstrong();
    }

    @Test
    public void isArmstrongTest() {
        // Test with Armstrong numbers
        assertTrue(armstrong.isArmstrong(0), "0 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(1), "1 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(153), "153 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(370), "370 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(371), "371 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(9474), "9474 is an Armstrong number");

        // Test with non-Armstrong numbers
        assertFalse(armstrong.isArmstrong(10), "10 is not an Armstrong number");
        assertFalse(armstrong.isArmstrong(100), "100 is not an Armstrong number");
        assertFalse(armstrong.isArmstrong(9475), "9475 is not an Armstrong number");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        Armstrong armstrong = new Armstrong();
        
        // Test for a known Armstrong number
        assertTrue(armstrong.isArmstrong(370), "370 is an Armstrong number");
        
        // Test for a non-Armstrong number
        assertFalse(armstrong.isArmstrong(123), "123 is not an Armstrong number");
        
        // Additional test cases
        assertTrue(armstrong.isArmstrong(1634), "1634 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(0), "0 is an Armstrong number");  // Edge case: single digit
        assertFalse(armstrong.isArmstrong(100), "100 is not an Armstrong number");
        assertFalse(armstrong.isArmstrong(-370), "-370 is not an Armstrong number");  // Edge case: negative number
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    private Armstrong armstrong;

    @BeforeEach
    public void setup() {
        armstrong = new Armstrong();
    }

    @Test
    public void isArmstrongTest() {
        assertTrue(armstrong.isArmstrong(0), "0 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(1), "1 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(370), "370 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(1634), "1634 is an Armstrong number");
        assertFalse(armstrong.isArmstrong(10), "10 is not an Armstrong number");
        assertFalse(armstrong.isArmstrong(123), "123 is not an Armstrong number");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {

    private final Armstrong armstrong = new Armstrong();

    @Test
    public void isArmstrongTest() {
        // Positive test cases: testing known Armstrong numbers.
        assertTrue(armstrong.isArmstrong(0), "0 is an Armstrong number.");
        assertTrue(armstrong.isArmstrong(1), "1 is an Armstrong number.");
        assertTrue(armstrong.isArmstrong(370), "370 is an Armstrong number.");
        assertTrue(armstrong.isArmstrong(407), "407 is an Armstrong number.");
        assertTrue(armstrong.isArmstrong(1634), "1634 is an Armstrong number.");

        // Negative test cases: testing numbers that are not Armstrong numbers.
        assertFalse(armstrong.isArmstrong(10), "10 is not an Armstrong number.");
        assertFalse(armstrong.isArmstrong(100), "100 is not an Armstrong number.");
        assertFalse(armstrong.isArmstrong(372), "372 is not an Armstrong number.");
        assertFalse(armstrong.isArmstrong(9474), "9474 is not an Armstrong number.");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

public class ArmstrongTest {

    @Test
    public void isArmstrongTest() {
        Armstrong armstrong = new Armstrong();

        // Example of Armstrong number
        assertTrue(armstrong.isArmstrong(370), "370 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(153), "153 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(9474), "9474 is an Armstrong number");

        // Example of non-Armstrong number
        assertFalse(armstrong.isArmstrong(123), "123 is not an Armstrong number");
        assertFalse(armstrong.isArmstrong(10), "10 is not an Armstrong number");
        assertFalse(armstrong.isArmstrong(9475), "9475 is not an Armstrong number");
    }
}


