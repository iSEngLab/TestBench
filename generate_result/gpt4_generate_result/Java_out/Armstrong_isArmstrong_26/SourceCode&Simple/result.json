{
    "project_name": "Java",
    "file_name": "Armstrong.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/Armstrong.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Checks whether a given number is an Armstrong number or not.\n     *\n     * @param number the number to check\n     * @return {@code true} if the given number is an Armstrong number, {@code false} otherwise\n     */",
    "source_code": "\npublic boolean isArmstrong(int number) {\n    long sum = 0;\n    String temp = Integer.toString(number); // Convert the given number to a string\n    int power = temp.length(); // Extract the length of the number (number of digits)\n    long originalNumber = number;\n\n    while (originalNumber > 0) {\n        long digit = originalNumber % 10;\n        sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.\n        originalNumber /= 10;\n    }\n\n    return sum == number;\n}\n",
    "class_name": "Armstrong",
    "method_name": "isArmstrong",
    "arguments": [
        "int number"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\npublic class ArmstrongTest {\n    \n    private final Armstrong armstrong = new Armstrong();\n\n    @Test\n    public void isArmstrongTest() {\n        // Test for known Armstrong numbers\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(407), \"407 is an Armstrong number\");\n\n        // Test for numbers that are not Armstrong numbers\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(350), \"350 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(999), \"999 is not an Armstrong number\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        \n        // Test for Armstrong numbers\n        assertTrue(armstrong.isArmstrong(153));\n        assertTrue(armstrong.isArmstrong(370));\n        assertTrue(armstrong.isArmstrong(371));\n        assertTrue(armstrong.isArmstrong(407));\n        \n        // Test for non-Armstrong numbers\n        assertFalse(armstrong.isArmstrong(123));\n        assertFalse(armstrong.isArmstrong(350));\n        assertFalse(armstrong.isArmstrong(999));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private Armstrong armstrong;\n\n    @BeforeEach\n    public void setup() {\n        armstrong = new Armstrong();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        // Test for Armstrong numbers\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(407), \"407 is an Armstrong number\");\n\n        // Test for non-Armstrong numbers\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(350), \"350 is not an Armstrong number\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private Armstrong armstrong;\n\n    @BeforeEach\n    public void setup() {\n        armstrong = new Armstrong();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        // Test for Armstrong number\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n\n        // Test for non-Armstrong number\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n\n        // Test with zero (edge case)\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number\");\n\n        // Test for negative numbers (should always return false)\n        assertFalse(armstrong.isArmstrong(-153), \"-153 is not an Armstrong number\");\n\n        // Test with another Armstrong number\n        assertTrue(armstrong.isArmstrong(9474), \"9474 is an Armstrong number\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private Armstrong armstrong = new Armstrong();\n\n    @Test\n    public void isArmstrongTest() {\n        assertTrue(armstrong.isArmstrong(153)); // 153 is an Armstrong number since 1^3 + 5^3 + 3^3 = 153\n        assertTrue(armstrong.isArmstrong(370)); // 370 is an Armstrong number since 3^3 + 7^3 + 0^3 = 370\n        assertTrue(armstrong.isArmstrong(371)); // 371 is an Armstrong number since 3^3 + 7^3 + 1^3 = 371\n        assertTrue(armstrong.isArmstrong(407)); // 407 is an Armstrong number since 4^3 + 0^3 + 7^3 = 407\n        assertFalse(armstrong.isArmstrong(123)); // 123 is not an Armstrong number\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    private Armstrong armstrong = new Armstrong();\n\n    @Test\n    public void isArmstrongTest() {\n        // Positive test cases where the number is an Armstrong number\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(9474), \"9474 is an Armstrong number\");\n\n        // Negative test cases where the number is not an Armstrong number\n        assertFalse(armstrong.isArmstrong(154), \"154 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(375), \"375 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(372), \"372 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(9475), \"9475 is not an Armstrong number\");\n\n        // Test edge cases\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(1), \"1 is an Armstrong number\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private Armstrong armstrong;\n\n    @BeforeEach\n    public void setUp() {\n        armstrong = new Armstrong();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        // Armstrong numbers for testing\n        int armstrongNumber = 153; // 1^3 + 5^3 + 3^3 = 153\n        int nonArmstrongNumber = 123; // 1^3 + 2^3 + 3^3 != 123\n\n        // Test for a true case\n        assertTrue(armstrong.isArmstrong(armstrongNumber), \"153 should be identified as an Armstrong number\");\n\n        // Test for a false case\n        assertFalse(armstrong.isArmstrong(nonArmstrongNumber), \"123 should not be identified as an Armstrong number\");\n\n        // Edge cases\n        assertTrue(armstrong.isArmstrong(0), \"0 should be identified as an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(1), \"1 should be identified as an Armstrong number\");\n\n        // Test for a large Armstrong number\n        assertTrue(armstrong.isArmstrong(9474), \"9474 should be identified as an Armstrong number\");\n\n        // Test for a negative number, which cannot be an Armstrong number by definition\n        assertFalse(armstrong.isArmstrong(-153), \"-153 should not be identified as an Armstrong number\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        \n        // Test for a known Armstrong number\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n        \n        // Test for a number that is not an Armstrong number\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n        \n        // Additional test cases\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(407), \"407 is an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(0), \"0 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(-153), \"-153 is not an Armstrong number\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    \n    private Armstrong armstrong;\n\n    @BeforeEach\n    public void setUp() {\n        armstrong = new Armstrong();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        // Test for known Armstrong numbers\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(407), \"407 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(9474), \"9474 is an Armstrong number\");\n\n        // Test for a non-Armstrong number\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n\n        // Test for edge cases, like zero and single-digit numbers (which are Armstrong numbers)\n        assertTrue(armstrong.isArmstrong(0), \"0 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(5), \"5 is an Armstrong number\");\n\n        // Test negative input (should not be an Armstrong number)\n        assertFalse(armstrong.isArmstrong(-153), \"-153 is not an Armstrong number\");\n    }\n\n    @AfterEach\n    public void tearDown() {\n        armstrong = null;\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n\n        // Positive test cases\n        assertTrue(armstrong.isArmstrong(153)); // 1^3 + 5^3 + 3^3 = 153\n        assertTrue(armstrong.isArmstrong(370)); // 3^3 + 7^3 + 0^3 = 370\n        assertTrue(armstrong.isArmstrong(9474)); // 9^4 + 4^4 + 7^4 + 4^4 = 9474\n\n        // Negative test cases\n        assertFalse(armstrong.isArmstrong(123)); // Not an Armstrong number\n        assertFalse(armstrong.isArmstrong(-153)); // Negative numbers cannot be Armstrong numbers\n        assertFalse(armstrong.isArmstrong(0)); // While 0 = 0^1, it can be treated as not an Armstrong number for this context\n        \n        // Borderline test case\n        assertTrue(armstrong.isArmstrong(1)); // Single digit numbers are considered Armstrong numbers (1^1 = 1).\n    }\n}"
    ]
}