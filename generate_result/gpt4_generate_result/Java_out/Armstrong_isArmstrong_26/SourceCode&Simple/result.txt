Source code: 


public boolean isArmstrong(int number) {
    long sum = 0;
    String temp = Integer.toString(number); // Convert the given number to a string
    int power = temp.length(); // Extract the length of the number (number of digits)
    long originalNumber = number;

    while (originalNumber > 0) {
        long digit = originalNumber % 10;
        sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.
        originalNumber /= 10;
    }

    return sum == number;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

public class ArmstrongTest {
    
    private final Armstrong armstrong = new Armstrong();

    @Test
    public void isArmstrongTest() {
        // Test for known Armstrong numbers
        assertTrue(armstrong.isArmstrong(153), "153 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(370), "370 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(371), "371 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(407), "407 is an Armstrong number");

        // Test for numbers that are not Armstrong numbers
        assertFalse(armstrong.isArmstrong(123), "123 is not an Armstrong number");
        assertFalse(armstrong.isArmstrong(350), "350 is not an Armstrong number");
        assertFalse(armstrong.isArmstrong(999), "999 is not an Armstrong number");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {

    @Test
    public void isArmstrongTest() {
        Armstrong armstrong = new Armstrong();
        
        // Test for Armstrong numbers
        assertTrue(armstrong.isArmstrong(153));
        assertTrue(armstrong.isArmstrong(370));
        assertTrue(armstrong.isArmstrong(371));
        assertTrue(armstrong.isArmstrong(407));
        
        // Test for non-Armstrong numbers
        assertFalse(armstrong.isArmstrong(123));
        assertFalse(armstrong.isArmstrong(350));
        assertFalse(armstrong.isArmstrong(999));
    }
}


No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {

    private Armstrong armstrong;

    @BeforeEach
    public void setup() {
        armstrong = new Armstrong();
    }

    @Test
    public void isArmstrongTest() {
        // Test for Armstrong numbers
        assertTrue(armstrong.isArmstrong(153), "153 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(370), "370 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(371), "371 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(407), "407 is an Armstrong number");

        // Test for non-Armstrong numbers
        assertFalse(armstrong.isArmstrong(123), "123 is not an Armstrong number");
        assertFalse(armstrong.isArmstrong(350), "350 is not an Armstrong number");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {

    private Armstrong armstrong;

    @BeforeEach
    public void setup() {
        armstrong = new Armstrong();
    }

    @Test
    public void isArmstrongTest() {
        // Test for Armstrong number
        assertTrue(armstrong.isArmstrong(153), "153 is an Armstrong number");

        // Test for non-Armstrong number
        assertFalse(armstrong.isArmstrong(123), "123 is not an Armstrong number");

        // Test with zero (edge case)
        assertTrue(armstrong.isArmstrong(0), "0 is an Armstrong number");

        // Test for negative numbers (should always return false)
        assertFalse(armstrong.isArmstrong(-153), "-153 is not an Armstrong number");

        // Test with another Armstrong number
        assertTrue(armstrong.isArmstrong(9474), "9474 is an Armstrong number");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {

    private Armstrong armstrong = new Armstrong();

    @Test
    public void isArmstrongTest() {
        assertTrue(armstrong.isArmstrong(153)); // 153 is an Armstrong number since 1^3 + 5^3 + 3^3 = 153
        assertTrue(armstrong.isArmstrong(370)); // 370 is an Armstrong number since 3^3 + 7^3 + 0^3 = 370
        assertTrue(armstrong.isArmstrong(371)); // 371 is an Armstrong number since 3^3 + 7^3 + 1^3 = 371
        assertTrue(armstrong.isArmstrong(407)); // 407 is an Armstrong number since 4^3 + 0^3 + 7^3 = 407
        assertFalse(armstrong.isArmstrong(123)); // 123 is not an Armstrong number
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    private Armstrong armstrong = new Armstrong();

    @Test
    public void isArmstrongTest() {
        // Positive test cases where the number is an Armstrong number
        assertTrue(armstrong.isArmstrong(153), "153 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(370), "370 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(371), "371 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(9474), "9474 is an Armstrong number");

        // Negative test cases where the number is not an Armstrong number
        assertFalse(armstrong.isArmstrong(154), "154 is not an Armstrong number");
        assertFalse(armstrong.isArmstrong(375), "375 is not an Armstrong number");
        assertFalse(armstrong.isArmstrong(372), "372 is not an Armstrong number");
        assertFalse(armstrong.isArmstrong(9475), "9475 is not an Armstrong number");

        // Test edge cases
        assertTrue(armstrong.isArmstrong(0), "0 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(1), "1 is an Armstrong number");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {

    private Armstrong armstrong;

    @BeforeEach
    public void setUp() {
        armstrong = new Armstrong();
    }

    @Test
    public void isArmstrongTest() {
        // Armstrong numbers for testing
        int armstrongNumber = 153; // 1^3 + 5^3 + 3^3 = 153
        int nonArmstrongNumber = 123; // 1^3 + 2^3 + 3^3 != 123

        // Test for a true case
        assertTrue(armstrong.isArmstrong(armstrongNumber), "153 should be identified as an Armstrong number");

        // Test for a false case
        assertFalse(armstrong.isArmstrong(nonArmstrongNumber), "123 should not be identified as an Armstrong number");

        // Edge cases
        assertTrue(armstrong.isArmstrong(0), "0 should be identified as an Armstrong number");
        assertTrue(armstrong.isArmstrong(1), "1 should be identified as an Armstrong number");

        // Test for a large Armstrong number
        assertTrue(armstrong.isArmstrong(9474), "9474 should be identified as an Armstrong number");

        // Test for a negative number, which cannot be an Armstrong number by definition
        assertFalse(armstrong.isArmstrong(-153), "-153 should not be identified as an Armstrong number");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        Armstrong armstrong = new Armstrong();
        
        // Test for a known Armstrong number
        assertTrue(armstrong.isArmstrong(153), "153 is an Armstrong number");
        
        // Test for a number that is not an Armstrong number
        assertFalse(armstrong.isArmstrong(123), "123 is not an Armstrong number");
        
        // Additional test cases
        assertTrue(armstrong.isArmstrong(370), "370 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(371), "371 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(407), "407 is an Armstrong number");
        assertFalse(armstrong.isArmstrong(0), "0 is not an Armstrong number");
        assertFalse(armstrong.isArmstrong(-153), "-153 is not an Armstrong number");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    
    private Armstrong armstrong;

    @BeforeEach
    public void setUp() {
        armstrong = new Armstrong();
    }

    @Test
    public void isArmstrongTest() {
        // Test for known Armstrong numbers
        assertTrue(armstrong.isArmstrong(153), "153 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(370), "370 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(407), "407 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(371), "371 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(9474), "9474 is an Armstrong number");

        // Test for a non-Armstrong number
        assertFalse(armstrong.isArmstrong(123), "123 is not an Armstrong number");

        // Test for edge cases, like zero and single-digit numbers (which are Armstrong numbers)
        assertTrue(armstrong.isArmstrong(0), "0 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(5), "5 is an Armstrong number");

        // Test negative input (should not be an Armstrong number)
        assertFalse(armstrong.isArmstrong(-153), "-153 is not an Armstrong number");
    }

    @AfterEach
    public void tearDown() {
        armstrong = null;
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    @Test
    public void isArmstrongTest() {
        Armstrong armstrong = new Armstrong();

        // Positive test cases
        assertTrue(armstrong.isArmstrong(153)); // 1^3 + 5^3 + 3^3 = 153
        assertTrue(armstrong.isArmstrong(370)); // 3^3 + 7^3 + 0^3 = 370
        assertTrue(armstrong.isArmstrong(9474)); // 9^4 + 4^4 + 7^4 + 4^4 = 9474

        // Negative test cases
        assertFalse(armstrong.isArmstrong(123)); // Not an Armstrong number
        assertFalse(armstrong.isArmstrong(-153)); // Negative numbers cannot be Armstrong numbers
        assertFalse(armstrong.isArmstrong(0)); // While 0 = 0^1, it can be treated as not an Armstrong number for this context
        
        // Borderline test case
        assertTrue(armstrong.isArmstrong(1)); // Single digit numbers are considered Armstrong numbers (1^1 = 1).
    }
}


