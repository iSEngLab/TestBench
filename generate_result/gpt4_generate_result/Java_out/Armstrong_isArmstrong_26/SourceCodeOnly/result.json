{
    "project_name": "Java",
    "file_name": "Armstrong.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/Armstrong.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Checks whether a given number is an Armstrong number or not.\n     *\n     * @param number the number to check\n     * @return {@code true} if the given number is an Armstrong number, {@code false} otherwise\n     */",
    "source_code": "\npublic boolean isArmstrong(int number) {\n    long sum = 0;\n    String temp = Integer.toString(number); // Convert the given number to a string\n    int power = temp.length(); // Extract the length of the number (number of digits)\n    long originalNumber = number;\n\n    while (originalNumber > 0) {\n        long digit = originalNumber % 10;\n        sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.\n        originalNumber /= 10;\n    }\n\n    return sum == number;\n}\n",
    "class_name": "Armstrong",
    "method_name": "isArmstrong",
    "arguments": [
        "int number"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private static Armstrong armstrong;\n\n    @BeforeAll\n    public static void setup() {\n        armstrong = new Armstrong();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        // Test for Armstrong numbers\n        assertTrue(armstrong.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(armstrong.isArmstrong(9474), \"9474 is an Armstrong number\");\n\n        // Test for non-Armstrong numbers\n        assertFalse(armstrong.isArmstrong(123), \"123 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(10), \"10 is not an Armstrong number\");\n        assertFalse(armstrong.isArmstrong(9475), \"9475 is not an Armstrong number\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    // Instance of the class containing the isArmstrong method.\n    private final ArmstrongNumberValidator armstrongNumberValidator = new ArmstrongNumberValidator();\n\n    @Test\n    public void isArmstrongTest() {\n        // Test true cases for Armstrong numbers\n        assertTrue(armstrongNumberValidator.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(armstrongNumberValidator.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(armstrongNumberValidator.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(armstrongNumberValidator.isArmstrong(9474), \"9474 is an Armstrong number\");\n\n        // Test false cases for non-Armstrong numbers\n        assertFalse(armstrongNumberValidator.isArmstrong(123), \"123 is not an Armstrong number\");\n        assertFalse(armstrongNumberValidator.isArmstrong(400), \"400 is not an Armstrong number\");\n        assertFalse(armstrongNumberValidator.isArmstrong(500), \"500 is not an Armstrong number\");\n    }\n\n    public static class ArmstrongNumberValidator {\n        // ... include the isArmstrong function here or it could be in a separate class file.\n        public boolean isArmstrong(int number) {\n            long sum = 0;\n            String temp = Integer.toString(number); // Convert the given number to a string\n            int power = temp.length(); // Extract the length of the number (number of digits)\n            long originalNumber = number;\n\n            while (originalNumber > 0) {\n                long digit = originalNumber % 10;\n                sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.\n                originalNumber /= 10;\n            }\n\n            return sum == number;\n        }\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    \n    private Main main;\n    \n    @BeforeEach\n    public void setUp() {\n        main = new Main(); // Assuming that the isArmstrong method is inside a class called Main.\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        // Assert true for known Armstrong numbers\n        assertTrue(main.isArmstrong(0), \"0 is an Armstrong number\");\n        assertTrue(main.isArmstrong(1), \"1 is an Armstrong number\");\n        assertTrue(main.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(main.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(main.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(main.isArmstrong(9474), \"9474 is an Armstrong number\");\n\n        // Assert false for numbers that are not Armstrong numbers\n        assertFalse(main.isArmstrong(10), \"10 is not an Armstrong number\");\n        assertFalse(main.isArmstrong(123), \"123 is not an Armstrong number\");\n        assertFalse(main.isArmstrong(372), \"372 is not an Armstrong number\");\n        assertFalse(main.isArmstrong(9475), \"9475 is not an Armstrong number\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private Main main;\n\n    @BeforeEach\n    public void setUp() {\n        main = new Main();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        // Armstrong numbers cases\n        assertTrue(main.isArmstrong(153), \"153 should be an Armstrong number\");\n        assertTrue(main.isArmstrong(370), \"370 should be an Armstrong number\");\n        assertTrue(main.isArmstrong(371), \"371 should be an Armstrong number\");\n        assertTrue(main.isArmstrong(407), \"407 should be an Armstrong number\");\n\n        // Non-Armstrong numbers cases\n        assertFalse(main.isArmstrong(10), \"10 should not be an Armstrong number\");\n        assertFalse(main.isArmstrong(9474), \"9474 should not be an Armstrong number\");\n        assertFalse(main.isArmstrong(123), \"123 should not be an Armstrong number\");\n\n        // Boundary cases\n        assertTrue(main.isArmstrong(0), \"0 should be an Armstrong number\");\n        assertTrue(main.isArmstrong(1), \"1 should be an Armstrong number\");\n\n        // Negative case\n        assertFalse(main.isArmstrong(-153), \"-153 should not be considered an Armstrong number\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private static Armstrong armstrongTester; // Assuming there is a class named Armstrong where the isArmstrong method resides.\n\n    @BeforeAll\n    public static void setup() {\n        armstrongTester = new Armstrong();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        // Test with an Armstrong number\n        assertTrue(armstrongTester.isArmstrong(153), \"153 is an Armstrong number.\");\n\n        // Test with a non-Armstrong number\n        assertFalse(armstrongTester.isArmstrong(123), \"123 is not an Armstrong number.\");\n\n        // Edge cases\n        assertTrue(armstrongTester.isArmstrong(0), \"0 is an Armstrong number.\");\n        assertTrue(armstrongTester.isArmstrong(1), \"1 is an Armstrong number.\");\n\n        // Test with a larger Armstrong number\n        assertTrue(armstrongTester.isArmstrong(9474), \"9474 is an Armstrong number.\");\n\n        // Boundary condition: An Armstrong number that is exactly 10^x which is not an Armstrong number\n        assertFalse(armstrongTester.isArmstrong(1000), \"1000 is not an Armstrong number.\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    private static ArmstrongCalculator armstrongCalculator;\n\n    @BeforeAll\n    public static void setup() {\n        armstrongCalculator = new ArmstrongCalculator();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n         assertTrue(armstrongCalculator.isArmstrong(153)); // 1^3 + 5^3 + 3^3 = 153, thus it's an Armstrong number\n         assertTrue(armstrongCalculator.isArmstrong(370)); // 3^3 + 7^3 + 0^3 = 370, thus it's an Armstrong number\n         assertTrue(armstrongCalculator.isArmstrong(371)); // 3^3 + 7^3 + 1^3 = 371, thus it's an Armstrong number\n         assertFalse(armstrongCalculator.isArmstrong(123)); // Not an Armstrong number\n         assertFalse(armstrongCalculator.isArmstrong(10)); // Not an Armstrong number\n    }\n}\n\nclass ArmstrongCalculator {\n    public boolean isArmstrong(int number) {\n        long sum = 0;\n        String temp = Integer.toString(number); // Convert the given number to a string\n        int power = temp.length(); // Extract the length of the number (number of digits)\n        long originalNumber = number;\n\n        while (originalNumber > 0) {\n            long digit = originalNumber % 10;\n            sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.\n            originalNumber /= 10;\n        }\n\n        return sum == number;\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    private MathsUtil mathsUtil;\n    \n    @BeforeEach\n    public void setup() {\n        mathsUtil = new MathsUtil();\n    }\n\n    @Test\n    public void isArmstrongTest() {\n        assertTrue(mathsUtil.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(mathsUtil.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(mathsUtil.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(mathsUtil.isArmstrong(407), \"407 is an Armstrong number\");\n        \n        assertFalse(mathsUtil.isArmstrong(123), \"123 is not an Armstrong number\");\n        assertFalse(mathsUtil.isArmstrong(350), \"350 is not an Armstrong number\");\n        assertFalse(mathsUtil.isArmstrong(0), \"0 is an Armstrong number (edge case)\");\n        assertFalse(mathsUtil.isArmstrong(-153), \"-153 is not an Armstrong number because it's negative\");\n    }\n}\n\nclass MathsUtil {\n    public boolean isArmstrong(int number) {\n        long sum = 0;\n        String temp = Integer.toString(number);\n        int power = temp.length();\n        long originalNumber = number;\n    \n        while (originalNumber > 0) {\n            long digit = originalNumber % 10;\n            sum += (long) Math.pow(digit, power);\n            originalNumber /= 10;\n        }\n    \n        return sum == number;\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        \n        // Test for Armstrong numbers\n        assertTrue(armstrong.isArmstrong(153)); // 153 = 1^3 + 5^3 + 3^3\n        assertTrue(armstrong.isArmstrong(370)); // 370 = 3^3 + 7^3 + 0^3\n        assertTrue(armstrong.isArmstrong(9474)); // 9474 = 9^4 + 4^4 + 7^4 + 4^4\n\n        // Test for non-Armstrong numbers\n        assertFalse(armstrong.isArmstrong(123)); // Not an Armstrong number\n        assertFalse(armstrong.isArmstrong(372)); // Not an Armstrong number\n        assertFalse(armstrong.isArmstrong(9475)); // Not an Armstrong number\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    @Test\n    public void isArmstrongTest() {\n        ArithmeticFunctions arithmeticFunctions = new ArithmeticFunctions();\n\n        // Test with Armstrong number\n        assertTrue(arithmeticFunctions.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(arithmeticFunctions.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(arithmeticFunctions.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(arithmeticFunctions.isArmstrong(9474), \"9474 is an Armstrong number\");\n        \n        // Test with non-Armstrong number\n        assertFalse(arithmeticFunctions.isArmstrong(100), \"100 is not an Armstrong number\");\n        assertFalse(arithmeticFunctions.isArmstrong(123), \"123 is not an Armstrong number\");\n        assertFalse(arithmeticFunctions.isArmstrong(9475), \"9475 is not an Armstrong number\");\n        \n        // Edge cases\n        assertTrue(arithmeticFunctions.isArmstrong(0), \"0 is an Armstrong number\");\n        assertTrue(arithmeticFunctions.isArmstrong(1), \"1 is an Armstrong number\");\n        \n        // Negative number, assuming the Armstrong definition only applies to non-negative\n        assertFalse(arithmeticFunctions.isArmstrong(-153), \"-153 is not considered for Armstrong property\");\n    }\n}\n\nclass ArithmeticFunctions {\n    public boolean isArmstrong(int number) {\n        long sum = 0;\n        String temp = Integer.toString(number);\n        int power = temp.length();\n        long originalNumber = number;\n\n        while (originalNumber > 0) {\n            long digit = originalNumber % 10;\n            sum += (long) Math.pow(digit, power);\n            originalNumber /= 10;\n        }\n\n        return sum == number;\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n\n    // Instance of the class that contains the isArmstrong method\n    private static final MyClass myClass = new MyClass();\n\n    @Test\n    public void isArmstrongTest() {\n        assertTrue(myClass.isArmstrong(153), \"153 is an Armstrong number\");\n        assertTrue(myClass.isArmstrong(370), \"370 is an Armstrong number\");\n        assertTrue(myClass.isArmstrong(371), \"371 is an Armstrong number\");\n        assertTrue(myClass.isArmstrong(9474), \"9474 is an Armstrong number\");\n\n        assertFalse(myClass.isArmstrong(10), \"10 is not an Armstrong number\");\n        assertFalse(myClass.isArmstrong(123), \"123 is not an Armstrong number\");\n        assertFalse(myClass.isArmstrong(9475), \"9475 is not an Armstrong number\");\n    }\n    \n    // Assuming the class name that contains the isArmstrong method is MyClass\n    static class MyClass {\n        public boolean isArmstrong(int number) {\n            long sum = 0;\n            String temp = Integer.toString(number); // Convert the given number to a string\n            int power = temp.length(); // Extract the length of the number (number of digits)\n            long originalNumber = number;\n\n            while (originalNumber > 0) {\n                long digit = originalNumber % 10;\n                sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum\n                originalNumber /= 10;\n            }\n\n            return sum == number;\n        }\n    }\n}"
    ]
}