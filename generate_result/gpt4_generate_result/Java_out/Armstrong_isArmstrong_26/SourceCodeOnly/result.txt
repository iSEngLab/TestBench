Source code: 


public boolean isArmstrong(int number) {
    long sum = 0;
    String temp = Integer.toString(number); // Convert the given number to a string
    int power = temp.length(); // Extract the length of the number (number of digits)
    long originalNumber = number;

    while (originalNumber > 0) {
        long digit = originalNumber % 10;
        sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.
        originalNumber /= 10;
    }

    return sum == number;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {

    private static Armstrong armstrong;

    @BeforeAll
    public static void setup() {
        armstrong = new Armstrong();
    }

    @Test
    public void isArmstrongTest() {
        // Test for Armstrong numbers
        assertTrue(armstrong.isArmstrong(153), "153 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(370), "370 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(371), "371 is an Armstrong number");
        assertTrue(armstrong.isArmstrong(9474), "9474 is an Armstrong number");

        // Test for non-Armstrong numbers
        assertFalse(armstrong.isArmstrong(123), "123 is not an Armstrong number");
        assertFalse(armstrong.isArmstrong(10), "10 is not an Armstrong number");
        assertFalse(armstrong.isArmstrong(9475), "9475 is not an Armstrong number");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    // Instance of the class containing the isArmstrong method.
    private final ArmstrongNumberValidator armstrongNumberValidator = new ArmstrongNumberValidator();

    @Test
    public void isArmstrongTest() {
        // Test true cases for Armstrong numbers
        assertTrue(armstrongNumberValidator.isArmstrong(153), "153 is an Armstrong number");
        assertTrue(armstrongNumberValidator.isArmstrong(370), "370 is an Armstrong number");
        assertTrue(armstrongNumberValidator.isArmstrong(371), "371 is an Armstrong number");
        assertTrue(armstrongNumberValidator.isArmstrong(9474), "9474 is an Armstrong number");

        // Test false cases for non-Armstrong numbers
        assertFalse(armstrongNumberValidator.isArmstrong(123), "123 is not an Armstrong number");
        assertFalse(armstrongNumberValidator.isArmstrong(400), "400 is not an Armstrong number");
        assertFalse(armstrongNumberValidator.isArmstrong(500), "500 is not an Armstrong number");
    }

    public static class ArmstrongNumberValidator {
        // ... include the isArmstrong function here or it could be in a separate class file.
        public boolean isArmstrong(int number) {
            long sum = 0;
            String temp = Integer.toString(number); // Convert the given number to a string
            int power = temp.length(); // Extract the length of the number (number of digits)
            long originalNumber = number;

            while (originalNumber > 0) {
                long digit = originalNumber % 10;
                sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.
                originalNumber /= 10;
            }

            return sum == number;
        }
    }
}


No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    
    private Main main;
    
    @BeforeEach
    public void setUp() {
        main = new Main(); // Assuming that the isArmstrong method is inside a class called Main.
    }

    @Test
    public void isArmstrongTest() {
        // Assert true for known Armstrong numbers
        assertTrue(main.isArmstrong(0), "0 is an Armstrong number");
        assertTrue(main.isArmstrong(1), "1 is an Armstrong number");
        assertTrue(main.isArmstrong(153), "153 is an Armstrong number");
        assertTrue(main.isArmstrong(370), "370 is an Armstrong number");
        assertTrue(main.isArmstrong(371), "371 is an Armstrong number");
        assertTrue(main.isArmstrong(9474), "9474 is an Armstrong number");

        // Assert false for numbers that are not Armstrong numbers
        assertFalse(main.isArmstrong(10), "10 is not an Armstrong number");
        assertFalse(main.isArmstrong(123), "123 is not an Armstrong number");
        assertFalse(main.isArmstrong(372), "372 is not an Armstrong number");
        assertFalse(main.isArmstrong(9475), "9475 is not an Armstrong number");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {

    private Main main;

    @BeforeEach
    public void setUp() {
        main = new Main();
    }

    @Test
    public void isArmstrongTest() {
        // Armstrong numbers cases
        assertTrue(main.isArmstrong(153), "153 should be an Armstrong number");
        assertTrue(main.isArmstrong(370), "370 should be an Armstrong number");
        assertTrue(main.isArmstrong(371), "371 should be an Armstrong number");
        assertTrue(main.isArmstrong(407), "407 should be an Armstrong number");

        // Non-Armstrong numbers cases
        assertFalse(main.isArmstrong(10), "10 should not be an Armstrong number");
        assertFalse(main.isArmstrong(9474), "9474 should not be an Armstrong number");
        assertFalse(main.isArmstrong(123), "123 should not be an Armstrong number");

        // Boundary cases
        assertTrue(main.isArmstrong(0), "0 should be an Armstrong number");
        assertTrue(main.isArmstrong(1), "1 should be an Armstrong number");

        // Negative case
        assertFalse(main.isArmstrong(-153), "-153 should not be considered an Armstrong number");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {

    private static Armstrong armstrongTester; // Assuming there is a class named Armstrong where the isArmstrong method resides.

    @BeforeAll
    public static void setup() {
        armstrongTester = new Armstrong();
    }

    @Test
    public void isArmstrongTest() {
        // Test with an Armstrong number
        assertTrue(armstrongTester.isArmstrong(153), "153 is an Armstrong number.");

        // Test with a non-Armstrong number
        assertFalse(armstrongTester.isArmstrong(123), "123 is not an Armstrong number.");

        // Edge cases
        assertTrue(armstrongTester.isArmstrong(0), "0 is an Armstrong number.");
        assertTrue(armstrongTester.isArmstrong(1), "1 is an Armstrong number.");

        // Test with a larger Armstrong number
        assertTrue(armstrongTester.isArmstrong(9474), "9474 is an Armstrong number.");

        // Boundary condition: An Armstrong number that is exactly 10^x which is not an Armstrong number
        assertFalse(armstrongTester.isArmstrong(1000), "1000 is not an Armstrong number.");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {

    private static ArmstrongCalculator armstrongCalculator;

    @BeforeAll
    public static void setup() {
        armstrongCalculator = new ArmstrongCalculator();
    }

    @Test
    public void isArmstrongTest() {
         assertTrue(armstrongCalculator.isArmstrong(153)); // 1^3 + 5^3 + 3^3 = 153, thus it's an Armstrong number
         assertTrue(armstrongCalculator.isArmstrong(370)); // 3^3 + 7^3 + 0^3 = 370, thus it's an Armstrong number
         assertTrue(armstrongCalculator.isArmstrong(371)); // 3^3 + 7^3 + 1^3 = 371, thus it's an Armstrong number
         assertFalse(armstrongCalculator.isArmstrong(123)); // Not an Armstrong number
         assertFalse(armstrongCalculator.isArmstrong(10)); // Not an Armstrong number
    }
}

class ArmstrongCalculator {
    public boolean isArmstrong(int number) {
        long sum = 0;
        String temp = Integer.toString(number); // Convert the given number to a string
        int power = temp.length(); // Extract the length of the number (number of digits)
        long originalNumber = number;

        while (originalNumber > 0) {
            long digit = originalNumber % 10;
            sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.
            originalNumber /= 10;
        }

        return sum == number;
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {
    private MathsUtil mathsUtil;
    
    @BeforeEach
    public void setup() {
        mathsUtil = new MathsUtil();
    }

    @Test
    public void isArmstrongTest() {
        assertTrue(mathsUtil.isArmstrong(153), "153 is an Armstrong number");
        assertTrue(mathsUtil.isArmstrong(370), "370 is an Armstrong number");
        assertTrue(mathsUtil.isArmstrong(371), "371 is an Armstrong number");
        assertTrue(mathsUtil.isArmstrong(407), "407 is an Armstrong number");
        
        assertFalse(mathsUtil.isArmstrong(123), "123 is not an Armstrong number");
        assertFalse(mathsUtil.isArmstrong(350), "350 is not an Armstrong number");
        assertFalse(mathsUtil.isArmstrong(0), "0 is an Armstrong number (edge case)");
        assertFalse(mathsUtil.isArmstrong(-153), "-153 is not an Armstrong number because it's negative");
    }
}

class MathsUtil {
    public boolean isArmstrong(int number) {
        long sum = 0;
        String temp = Integer.toString(number);
        int power = temp.length();
        long originalNumber = number;
    
        while (originalNumber > 0) {
            long digit = originalNumber % 10;
            sum += (long) Math.pow(digit, power);
            originalNumber /= 10;
        }
    
        return sum == number;
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {

    @Test
    public void isArmstrongTest() {
        Armstrong armstrong = new Armstrong();
        
        // Test for Armstrong numbers
        assertTrue(armstrong.isArmstrong(153)); // 153 = 1^3 + 5^3 + 3^3
        assertTrue(armstrong.isArmstrong(370)); // 370 = 3^3 + 7^3 + 0^3
        assertTrue(armstrong.isArmstrong(9474)); // 9474 = 9^4 + 4^4 + 7^4 + 4^4

        // Test for non-Armstrong numbers
        assertFalse(armstrong.isArmstrong(123)); // Not an Armstrong number
        assertFalse(armstrong.isArmstrong(372)); // Not an Armstrong number
        assertFalse(armstrong.isArmstrong(9475)); // Not an Armstrong number
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {

    @Test
    public void isArmstrongTest() {
        ArithmeticFunctions arithmeticFunctions = new ArithmeticFunctions();

        // Test with Armstrong number
        assertTrue(arithmeticFunctions.isArmstrong(153), "153 is an Armstrong number");
        assertTrue(arithmeticFunctions.isArmstrong(370), "370 is an Armstrong number");
        assertTrue(arithmeticFunctions.isArmstrong(371), "371 is an Armstrong number");
        assertTrue(arithmeticFunctions.isArmstrong(9474), "9474 is an Armstrong number");
        
        // Test with non-Armstrong number
        assertFalse(arithmeticFunctions.isArmstrong(100), "100 is not an Armstrong number");
        assertFalse(arithmeticFunctions.isArmstrong(123), "123 is not an Armstrong number");
        assertFalse(arithmeticFunctions.isArmstrong(9475), "9475 is not an Armstrong number");
        
        // Edge cases
        assertTrue(arithmeticFunctions.isArmstrong(0), "0 is an Armstrong number");
        assertTrue(arithmeticFunctions.isArmstrong(1), "1 is an Armstrong number");
        
        // Negative number, assuming the Armstrong definition only applies to non-negative
        assertFalse(arithmeticFunctions.isArmstrong(-153), "-153 is not considered for Armstrong property");
    }
}

class ArithmeticFunctions {
    public boolean isArmstrong(int number) {
        long sum = 0;
        String temp = Integer.toString(number);
        int power = temp.length();
        long originalNumber = number;

        while (originalNumber > 0) {
            long digit = originalNumber % 10;
            sum += (long) Math.pow(digit, power);
            originalNumber /= 10;
        }

        return sum == number;
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArmstrongTest {

    // Instance of the class that contains the isArmstrong method
    private static final MyClass myClass = new MyClass();

    @Test
    public void isArmstrongTest() {
        assertTrue(myClass.isArmstrong(153), "153 is an Armstrong number");
        assertTrue(myClass.isArmstrong(370), "370 is an Armstrong number");
        assertTrue(myClass.isArmstrong(371), "371 is an Armstrong number");
        assertTrue(myClass.isArmstrong(9474), "9474 is an Armstrong number");

        assertFalse(myClass.isArmstrong(10), "10 is not an Armstrong number");
        assertFalse(myClass.isArmstrong(123), "123 is not an Armstrong number");
        assertFalse(myClass.isArmstrong(9475), "9475 is not an Armstrong number");
    }
    
    // Assuming the class name that contains the isArmstrong method is MyClass
    static class MyClass {
        public boolean isArmstrong(int number) {
            long sum = 0;
            String temp = Integer.toString(number); // Convert the given number to a string
            int power = temp.length(); // Extract the length of the number (number of digits)
            long originalNumber = number;

            while (originalNumber > 0) {
                long digit = originalNumber % 10;
                sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum
                originalNumber /= 10;
            }

            return sum == number;
        }
    }
}


