Source code: 


public static List<TreeSet<Integer>> combination(int n, int k) {
    if (n <= 0) {
        return null;
    }
    length = k;
    Integer[] arr = new Integer[n];
    for (int i = 1; i <= n; i++) {
        arr[i - 1] = i;
    }
    return Combination.combination(arr, length);
}



No.1 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import java.util.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationValidInputTest() {
        // Test for a valid input where n = 4 and k = 2
        List<TreeSet<Integer>> result = ArrayCombination.combination(4, 2);
        assertNotNull(result);
        assertTrue(result.size() > 0); // Ensure that combinations are found

        // Optional: Check if a specific combination exists if the output is predictable
        TreeSet<Integer> expectedCombination = new TreeSet<>(Arrays.asList(1, 2));
        assertTrue(result.contains(expectedCombination));
    }

    @Test
    public void combinationNLessThanOrEqualToZeroTest() {
        // Test for n <= 0 should return null
        assertNull(ArrayCombination.combination(0, 1));
        assertNull(ArrayCombination.combination(-1, 1));
    }

    @Test
    public void combinationKEqualsZeroTest() {
        // Test for k = 0, the expected result should be a list with empty sets
        List<TreeSet<Integer>> result = ArrayCombination.combination(3, 0);
        assertNotNull(result);
        assertEquals(0, result.get(0).size(), "Expected an empty set for k = 0");
    }

    @Test
    public void combinationKGreaterThanNTest() {
        // Test for k > n should return an empty list or a list with an empty set
        List<TreeSet<Integer>> result = ArrayCombination.combination(2, 3);
        assertNotNull(result);
        assertEquals(0, result.size(), "Expected no combinations when k > n");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import java.util.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {

    @Test
    public void combinationTest() {
        // Test for valid input
        List<TreeSet<Integer>> result = ArrayCombination.combination(4, 2);
        List<TreeSet<Integer>> expected = new ArrayList<>();
        expected.add(new TreeSet<>(Arrays.asList(1, 2)));
        expected.add(new TreeSet<>(Arrays.asList(1, 3)));
        expected.add(new TreeSet<>(Arrays.asList(1, 4)));
        expected.add(new TreeSet<>(Arrays.asList(2, 3)));
        expected.add(new TreeSet<>(Arrays.asList(2, 4)));
        expected.add(new TreeSet<>(Arrays.asList(3, 4)));
        
        // Assert that the result contains all expected combinations
        assertNotNull(result);
        assertEquals(expected.size(), result.size());
        assertTrue(result.containsAll(expected));

        // Test for n <= 0 should return null
        List<TreeSet<Integer>> resultNegative = ArrayCombination.combination(-1, 2);
        assertNull(resultNegative);

        // Test for k == 0 should also return null based on the context provided
        List<TreeSet<Integer>> resultKZero = ArrayCombination.combination(4, 0);
        assertNull(resultKZero);
        
        // Add more test cases if necessary
    }
}


No.3 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {

    @Test
    public void combinationTest() {
        // Test for correct combinations
        List<TreeSet<Integer>> result = ArrayCombination.combination(4, 2);
        List<TreeSet<Integer>> expected = Arrays.asList(
            new TreeSet<>(Arrays.asList(1, 2)),
            new TreeSet<>(Arrays.asList(1, 3)),
            new TreeSet<>(Arrays.asList(1, 4)),
            new TreeSet<>(Arrays.asList(2, 3)),
            new TreeSet<>(Arrays.asList(2, 4)),
            new TreeSet<>(Arrays.asList(3, 4))
        );
        assertNotNull(result);
        assertEquals(new HashSet<>(expected), new HashSet<>(result), "The combination function does not return the correct combinations.");

        // Test for n < k (should return empty list)
        List<TreeSet<Integer>> resultEmpty = ArrayCombination.combination(2, 3);
        assertNotNull(resultEmpty);
        assertTrue(resultEmpty.isEmpty(), "The combination function should return an empty list when n < k.");

        // Test for k = 0 (according to context should return null)
        List<TreeSet<Integer>> resultKzero = ArrayCombination.combination(4, 0);
        assertNull(resultKzero, "The combination function should return null if k is 0.");

        // Test for n = 0 (should return null due to invalid n)
        List<TreeSet<Integer>> resultNzero = ArrayCombination.combination(0, 2);
        assertNull(resultNzero, "The combination function should return null if n is 0 or less.");

        // Test for negative n (should return null due to invalid n)
        List<TreeSet<Integer>> resultNegative = ArrayCombination.combination(-1, 2);
        assertNull(resultNegative, "The combination function should return null if n is negative.");

        // Test for negative k (should return list with empty sets since no combination is possible)
        List<TreeSet<Integer>> resultNegativeK = ArrayCombination.combination(4, -1);
        assertNotNull(resultNegativeK);
        assertTrue(resultNegativeK.isEmpty(), "The combination function should return an empty list when k is negative.");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import java.util.List;
import java.util.TreeSet;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    
    @Test
    public void combinationTest() {
        // Test for valid inputs
        List<TreeSet<Integer>> result = ArrayCombination.combination(4, 2);
        assertNotNull(result, "The result should not be null for valid input");
        assertEquals(6, result.size(), "There should be 6 combinations of 4 choose 2");

        // Ensure each combination is of length 2
        for (TreeSet<Integer> combination : result) {
            assertEquals(2, combination.size(), "Each combination should be of length 2");
        }
        
        // Test for edge cases
        // n is zero should return null
        List<TreeSet<Integer>> zeroResult = ArrayCombination.combination(0, 2);
        assertNull(zeroResult, "The result should be null when n is zero");

        // n is negative should return null
        List<TreeSet<Integer>> negativeResult = ArrayCombination.combination(-1, 2);
        assertNull(negativeResult, "The result should be null when n is negative");

        // k is more than n should return empty list
        List<TreeSet<Integer>> tooLargeKResult = ArrayCombination.combination(2, 4);
        assertNotNull(tooLargeKResult, "The result should not be null when k is more than n");
        assertTrue(tooLargeKResult.isEmpty(), "The result should be an empty list when k is more than n");

        // Test for k equals 0, assuming it should return empty list
        List<TreeSet<Integer>> zeroLengthResult = ArrayCombination.combination(4, 0);
        assertNotNull(zeroLengthResult, "The result should not be null when k is zero");
        assertTrue(zeroLengthResult.isEmpty(), "The result should be an empty list when k is zero");
    }
}


No.5 generated result --------------------------


package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        // Test for invalid n
        assertNull(ArrayCombination.combination(-1, 2), "The method should return null for n <= 0.");
        assertNull(ArrayCombination.combination(0, 3), "The method should return null for n <= 0.");

        // Test for k == 0
        assertNull(ArrayCombination.combination(5, 0), "The method should return null for k == 0.");

        // Test for valid n and k
        List<TreeSet<Integer>> result = ArrayCombination.combination(4, 2);
        assertNotNull(result, "The method should not return null for valid n and k.");

        // In this case, combinations of 4 taken 2 at a time should be:
        // [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]
        List<TreeSet<Integer>> expectedCombinations = new ArrayList<>();
        expectedCombinations.add(new TreeSet<>(Arrays.asList(1, 2)));
        expectedCombinations.add(new TreeSet<>(Arrays.asList(1, 3)));
        expectedCombinations.add(new TreeSet<>(Arrays.asList(1, 4)));
        expectedCombinations.add(new TreeSet<>(Arrays.asList(2, 3)));
        expectedCombinations.add(new TreeSet<>(Arrays.asList(2, 4)));
        expectedCombinations.add(new TreeSet<>(Arrays.asList(3, 4)));

        assertEquals(expectedCombinations.size(), result.size(), "The method should return the correct number of combinations.");

        for (TreeSet<Integer> expectedSet : expectedCombinations) {
            assertTrue(result.contains(expectedSet), "The combination set should contain: " + expectedSet);
        }
    }
}



No.6 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import java.util.List;
import java.util.TreeSet;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        // Test for invalid n (n <= 0)
        assertNull(ArrayCombination.combination(-1, 3), "Expected null for n <= 0");
        
        // Test when k is greater than n, which should result in an empty list
        assertEquals(0, ArrayCombination.combination(3, 4).size(), "Expected an empty list when k > n");

        // Test when k is 0, which based on context should be null
        assertNull(ArrayCombination.combination(3, 0), "Expected null for k == 0");
        
        // Test for valid n and k (k <= n) to ensure correct output size
        int n = 4;
        int k = 2;
        List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);
        int expectedNumberOfCombinations = calculateBinomialCoefficient(n, k);
        assertEquals(expectedNumberOfCombinations, result.size(), "Expected list size differed from the number of combinations");

        // Check for uniqueness of the sets in the combination
        long uniqueSetsCount = result.stream().distinct().count();
        assertEquals(expectedNumberOfCombinations, uniqueSetsCount, "Combination sets should be unique");
    }

    // Helper method to calculate the number of combinations (binomial coefficient)
    private int calculateBinomialCoefficient(int n, int k) {
        long result = 1;
        for (int i = 1; i <= k; i++) {
            result *= (n - (k - i));
            result /= i;
        }
        return (int) result; // Safe downcast as result will always fit in an int for valid n and k
    }
}


No.7 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        // Test for n = 4, k = 2 (Valid Case)
        List<TreeSet<Integer>> result1 = ArrayCombination.combination(4, 2);
        assertNotNull(result1);
        assertEquals(6, result1.size()); // Because C(4,2) = 6
        assertTrue(result1.contains(new TreeSet<>(Arrays.asList(1, 2))));
        assertTrue(result1.contains(new TreeSet<>(Arrays.asList(1, 3))));
        assertTrue(result1.contains(new TreeSet<>(Arrays.asList(1, 4))));
        assertTrue(result1.contains(new TreeSet<>(Arrays.asList(2, 3))));
        assertTrue(result1.contains(new TreeSet<>(Arrays.asList(2, 4))));
        assertTrue(result1.contains(new TreeSet<>(Arrays.asList(3, 4))));

        // Test for n = 0, k = 2 (Should return null)
        List<TreeSet<Integer>> result2 = ArrayCombination.combination(0, 2);
        assertNull(result2);

        // Test for n = 4, k = 0 (Should return empty list)
        List<TreeSet<Integer>> result3 = ArrayCombination.combination(4, 0);
        assertNotNull(result3);
        assertTrue(result3.isEmpty());

        // Test for n = 3, k = 1 (Valid Case)
        List<TreeSet<Integer>> result4 = ArrayCombination.combination(3, 1);
        assertNotNull(result4);
        assertEquals(3, result4.size()); // Because C(3,1) = 3
        assertTrue(result4.contains(new TreeSet<>(Arrays.asList(1))));
        assertTrue(result4.contains(new TreeSet<>(Arrays.asList(2))));
        assertTrue(result4.contains(new TreeSet<>(Arrays.asList(3))));

        // Test for numbers larger than range [Check bounds]
        Exception exception = assertThrows(ArrayIndexOutOfBoundsException.class, () -> {
            ArrayCombination.combination(3, 4);
        });
        String expectedMessage = "Index 3 out of bounds for length 3"; // This may vary depending on Java version.
        String actualMessage = exception.getMessage();
        assertTrue(actualMessage.contains(expectedMessage));
    }
}


No.8 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;
import java.util.TreeSet;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

public class ArrayCombinationTest {

    @Test
    public void combinationTest() {
        // Test with n <= 0, expecting null
        assertNull(ArrayCombination.combination(-1, 3), "Expected null when n <= 0");
        assertNull(ArrayCombination.combination(0, 3), "Expected null when n <= 0");

        // Test with k == 0, expecting an empty list
        assertEquals(0, ArrayCombination.combination(3, 0).size(), "Expected an empty list when k == 0");

        // Test with valid n and k (n=4, k=2), expecting specific combinations
        List<TreeSet<Integer>> expectedCombinations = Arrays.asList(
                new TreeSet<>(Arrays.asList(1, 2)),
                new TreeSet<>(Arrays.asList(1, 3)),
                new TreeSet<>(Arrays.asList(1, 4)),
                new TreeSet<>(Arrays.asList(2, 3)),
                new TreeSet<>(Arrays.asList(2, 4)),
                new TreeSet<>(Arrays.asList(3, 4))
        );
        List<TreeSet<Integer>> actualCombinations = ArrayCombination.combination(4, 2);
        assertEquals(expectedCombinations.size(), actualCombinations.size(), "Expected list size to match the number of combinations");
        assertTrue(actualCombinations.containsAll(expectedCombinations), "Expected combinations list to match the actual combinations");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    
    @Test
    public void combinationTest() {
        // Test with valid n and k
        List<TreeSet<Integer>> result1 = ArrayCombination.combination(5, 3);
        assertNotNull(result1, "Result should not be null");
        assertFalse(result1.isEmpty(), "Result list should not be empty");
        // Assuming the Combination.combination() method works correctly,
        // you can check if a valid subset is in the result or the size matches the expected number of combinations
        
        // Test with n > k (expecting non-empty list of combinations)
        List<TreeSet<Integer>> result2 = ArrayCombination.combination(4, 2);
        assertNotNull(result2, "Result should not be null");
        assertEquals(6, result2.size(), "There should be 6 combinations for 4 choose 2");
        
        // Test with n == k (expecting single combination, with all elements)
        List<TreeSet<Integer>> result3 = ArrayCombination.combination(3, 3);
        assertNotNull(result3, "Result should not be null");
        assertEquals(1, result3.size(), "There should be 1 combination for 3 choose 3");
        assertEquals(new TreeSet<>(Arrays.asList(1, 2, 3)), result3.get(0), "Combination should contain elements [1, 2, 3]");
        
        // Test with n < k (expecting empty list as per combination definition)
        List<TreeSet<Integer>> result4 = ArrayCombination.combination(2, 3);
        assertNotNull(result4, "Result should not be null");
        assertTrue(result4.isEmpty(), "Result list should be empty for n < k");
        
        // Test with invalid n (expecting null)
        List<TreeSet<Integer>> result5 = ArrayCombination.combination(-1, 2);
        assertNull(result5, "Result should be null for negative n");
        
        // Test with k == 0 (expecting empty list as per combination definition)
        List<TreeSet<Integer>> result6 = ArrayCombination.combination(3, 0);
        assertNotNull(result6, "Result should not be null");
        assertTrue(result6.isEmpty(), "Result list should be empty for k == 0");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.Test;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        // Check for n <= 0 which should return null as per the source code
        assertNull(ArrayCombination.combination(-1, 3), "The combination method should return null for n <= 0");

        // Check for empty result when k is 0
        List<TreeSet<Integer>> resultWhenLengthZero = ArrayCombination.combination(3, 0);
        assertNotNull(resultWhenLengthZero, "The combination method should not return null when k is 0");
        assertTrue(resultWhenLengthZero.isEmpty(), "The result list should be empty when k is 0");

        // Check for n = 4, k = 2, which should produce the proper combinations
        List<TreeSet<Integer>> result = ArrayCombination.combination(4, 2);

        TreeSet<Integer> expectedCombination1 = new TreeSet<>(Arrays.asList(1, 2));
        TreeSet<Integer> expectedCombination2 = new TreeSet<>(Arrays.asList(1, 3));
        TreeSet<Integer> expectedCombination3 = new TreeSet<>(Arrays.asList(1, 4));
        TreeSet<Integer> expectedCombination4 = new TreeSet<>(Arrays.asList(2, 3));
        TreeSet<Integer> expectedCombination5 = new TreeSet<>(Arrays.asList(2, 4));
        TreeSet<Integer> expectedCombination6 = new TreeSet<>(Arrays.asList(3, 4));

        assertNotNull(result, "The combination method should not return null for valid n and k");
        assertEquals(6, result.size(), "The size of result list should be 6 for n = 4 and k = 2");
        assertTrue(result.contains(expectedCombination1), "Result should contain combination [1, 2]");
        assertTrue(result.contains(expectedCombination2), "Result should contain combination [1, 3]");
        assertTrue(result.contains(expectedCombination3), "Result should contain combination [1, 4]");
        assertTrue(result.contains(expectedCombination4), "Result should contain combination [2, 3]");
        assertTrue(result.contains(expectedCombination5), "Result should contain combination [2, 4]");
        assertTrue(result.contains(expectedCombination6), "Result should contain combination [3, 4]");
    }
}


