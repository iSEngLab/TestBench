Source code: 


public static List<TreeSet<Integer>> combination(int n, int k) {
    if (n <= 0) {
        return null;
    }
    length = k;
    Integer[] arr = new Integer[n];
    for (int i = 1; i <= n; i++) {
        arr[i - 1] = i;
    }
    return Combination.combination(arr, length);
}



No.1 generated result --------------------------

package com.thealgorithms.backtracking;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.TreeSet;

public class ArrayCombinationTest {

    @Test
    public void combinationTest() {
        // Test invalid input
        assertNull(ArrayCombination.combination(-1, 2), "Expected null for negative n");
        assertNull(ArrayCombination.combination(0, 2), "Expected null for zero n");

        // Test with valid inputs
        List<TreeSet<Integer>> result1 = ArrayCombination.combination(5, 3);
        assertEquals(10, result1.size(), "Expected 5 choose 3 to yield 10 combinations");

        List<TreeSet<Integer>> result2 = ArrayCombination.combination(4, 2);
        assertEquals(6, result2.size(), "Expected 4 choose 2 to yield 6 combinations");
        
        // Optionally, verify the actual combinations if the Combination.combination method is known
        // to be deterministic and the order of combinations is predictable.

        // Example verification (will depend on the actual results produced by Combination.combination method):
        // assertEquals(new TreeSet<>(Arrays.asList(1, 2)), result2.get(0), "Check first combination");
        // assertEquals(new TreeSet<>(Arrays.asList(1, 3)), result2.get(1), "Check second combination");
        // and so on for other combinations...
    }
}


No.2 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import java.util.List;
import java.util.TreeSet;

import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {

    @Test
    public void combinationTest() {
        // Test with invalid input (n)
        assertNull(ArrayCombination.combination(-1, 2), "Combination with n <= 0 should return null");
        
        // Test with valid input but length exceeding array size
        List<TreeSet<Integer>> combinationsExceed = ArrayCombination.combination(3, 4);
        assertTrue(combinationsExceed.isEmpty(), "Combination with k greater than n should return empty list");

        // Test with valid input (3,2)
        List<TreeSet<Integer>> combinations = ArrayCombination.combination(3, 2);
        assertNotNull(combinations, "Combination should not return null for valid input");

        // Expected number of combinations
        assertEquals(3, combinations.size(), "There should be 3 combinations for n = 3 and k = 2");

        // Verify the actual combinations
        TreeSet<Integer> expectedCombination1 = new TreeSet<>();
        expectedCombination1.add(1);
        expectedCombination1.add(2);

        TreeSet<Integer> expectedCombination2 = new TreeSet<>();
        expectedCombination2.add(1);
        expectedCombination2.add(3);

        TreeSet<Integer> expectedCombination3 = new TreeSet<>();
        expectedCombination3.add(2);
        expectedCombination3.add(3);

        assertTrue(combinations.contains(expectedCombination1), "Combinations list should contain [1, 2]");
        assertTrue(combinations.contains(expectedCombination2), "Combinations list should contain [1, 3]");
        assertTrue(combinations.contains(expectedCombination3), "Combinations list should contain [2, 3]");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import java.util.TreeSet;

public class ArrayCombinationTest {
    
    @Test
    public void combinationTest() {
        // Test with valid parameters (e.g., n = 5, k = 3)
        List<TreeSet<Integer>> result1 = Combination.combination(5, 3);
        assertNotNull(result1, "The result should not be null for valid n and k.");
        assertFalse(result1.isEmpty(), "The result list should not be empty.");
        assertEquals(10, result1.size(), "There should be 10 combinations.");
        
        // Check for correct first combination (for n = 5, k = 3, first combination should be {1, 2, 3})
        TreeSet<Integer> expectedFirstCombination = new TreeSet<>();
        expectedFirstCombination.add(1);
        expectedFirstCombination.add(2);
        expectedFirstCombination.add(3);
        assertEquals(expectedFirstCombination, result1.get(0), "The first combination is not as expected.");
        
        // Test with n = 0, expecting null (invalid input scenario)
        List<TreeSet<Integer>> result2 = Combination.combination(0, 3);
        assertNull(result2, "The result should be null when n is 0.");
        
        // Test with n < k (invalid input scenario)
        List<TreeSet<Integer>> result3 = Combination.combination(3, 5);
        // Assuming the implementation should handle when n < k, if it returns an empty list or similar
        assertNotNull(result3, "The result for n < k should be handled, not null.");
        assertTrue(result3.isEmpty(), "The result for n < k should be an empty list.");
        
        // Test to ensure the function doesn't return null for a valid scenario
        List<TreeSet<Integer>> result4 = Combination.combination(4, 2);
        assertNotNull(result4, "The result should not be null for valid n and k.");
        
        // Additional tests can be written for edge cases and to test the actual content of the combinations
    }
}


No.4 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import java.util.List;
import java.util.TreeSet;

import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {

    @Test
    public void testCombination() {
        // Test with invalid input
        assertNull(Combination.combination(-1, 3), "combination(-1, 3) should return null for invalid n");
        
        // Test with n = 0, which is invalid and should return null
        assertNull(Combination.combination(0, 3), "combination(0, 3) should return null for invalid n");
        
        // Test with valid n and k
        List<TreeSet<Integer>> result = Combination.combination(5, 3);
        assertNotNull(result, "The result should not be null for valid input");
        
        // Verify the size of the result set for n=5, k=3
        int expectedSize = 10; // This is the binomial coefficient C(5, 3)
        assertEquals(expectedSize, result.size(), "There should be " + expectedSize + " combinations");

        // Verify the content of the result, for example, one of the combinations should be [1, 2, 3]
        assertTrue(result.contains(new TreeSet<>(List.of(1, 2, 3))), "The combination [1, 2, 3] should exist");
        
        // Verify other combinations if necessary (omit for brevity)
        // ... add more assertions for other combinations as needed ...

        // Test with k > n, expect an empty list
        List<TreeSet<Integer>> resultEmpty = Combination.combination(3, 5);
        assertNotNull(resultEmpty, "The result should not be null for valid input where k > n");
        assertTrue(resultEmpty.isEmpty(), "The combination list should be empty when k > n");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import java.util.List;
import java.util.TreeSet;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {

    @Test
    public void combinationTest() {
        // Test when n is less than or equal to 0, should return null
        assertNull(ArrayCombination.combination(0, 3), "Combination with n <= 0 should return null");

        // Test with valid n and k
        List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);
        assertNotNull(result, "Combination should not return null for valid input");
        assertEquals(10, result.size(), "Combination of 5 choose 3 should return 10 results");

        // Each nested TreeSet should have exactly 'k' elements
        for (TreeSet<Integer> set : result) {
            assertEquals(3, set.size(), "Each combination set should contain exactly 3 elements");
        }

        // Exemplary check of the actual combinations for correctness
        assertTrue(result.contains(new TreeSet<>(List.of(1, 2, 3))), "Should contain combination [1, 2, 3]");
        assertTrue(result.contains(new TreeSet<>(List.of(1, 2, 4))), "Should contain combination [1, 2, 4]");
        assertTrue(result.contains(new TreeSet<>(List.of(1, 2, 5))), "Should contain combination [1, 2, 5]");
        assertTrue(result.contains(new TreeSet<>(List.of(1, 3, 4))), "Should contain combination [1, 3, 4]");
        // Add more checks as necessary to ensure the combinations are correct

        // Test with k > n, should return an empty list
        assertTrue(ArrayCombination.combination(3, 5).isEmpty(), "Combination of 3 choose 5 should return an empty list");

        // Ideally more exhaustive tests should be written to confirm correct results
        // for a variety of 'n' and 'k' values including edge cases
    }
}


No.6 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import java.util.List;
import java.util.TreeSet;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        // Test for invalid input, expect null
        assertNull(ArrayCombination.combination(0, 3), "Expected null for n <= 0");
        
        // Test for n < k, expect empty list
        List<TreeSet<Integer>> resultForInvalidInput = ArrayCombination.combination(3, 4);
        assertNotNull(resultForInvalidInput);
        assertTrue(resultForInvalidInput.isEmpty(), "Expected empty list for n < k");

        // Test for n == k, expect one combination containing all elements
        List<TreeSet<Integer>> resultForNEqualsK = ArrayCombination.combination(3, 3);
        assertNotNull(resultForNEqualsK);
        assertEquals(1, resultForNEqualsK.size(), "Expected one combination for n == k");
        assertArrayEquals(new Integer[]{1, 2, 3}, resultForNEqualsK.get(0).toArray(), "Expected combination [1, 2, 3]");

        // Test for regular input, expect non-empty list with correct combinations
        List<TreeSet<Integer>> result = ArrayCombination.combination(4, 2);
        assertNotNull(result);
        assertEquals(6, result.size(), "Expected 6 combinations for n=4 and k=2");
        // We could further check if all expected combinations are present,
        // but that might require specific logic depending on the order of the combinations.
        // This is left out for simplicity.
    }
}


No.7 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import java.util.TreeSet;

public class ArrayCombinationTest {

    @Test
    public void combinationTest() {
        // Test with valid parameters
        List<TreeSet<Integer>> result1 = Combination.combination(5, 3);
        assertNotNull(result1);
        assertEquals(10, result1.size()); // C(5, 3) should give 10 combinations

        // Check if one of the combinations is correct, e.g., {1, 2, 3}
        TreeSet<Integer> expectedCombination = new TreeSet<>();
        expectedCombination.add(1);
        expectedCombination.add(2);
        expectedCombination.add(3);
        assertTrue(result1.contains(expectedCombination));

        // Test with n < 0, should return null
        List<TreeSet<Integer>> result2 = Combination.combination(-1, 3);
        assertNull(result2);

        // Test with k > n, should return empty since no combination is possible
        List<TreeSet<Integer>> result3 = Combination.combination(3, 5);
        assertNotNull(result3);
        assertTrue(result3.isEmpty());
        
        // Test with n = 0, should return null per the source code condition
        List<TreeSet<Integer>> result4 = Combination.combination(0, 0);
        assertNull(result4);
    }
}


No.8 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.TreeSet;
import java.util.List;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        // Test for n = 4 and k = 2
        int n1 = 4;
        int k1 = 2;
        List<TreeSet<Integer>> result1 = ArrayCombination.combination(n1, k1);

        // Expected result for combination (4, 2)
        String expected1 = "[[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]";
        assertEquals(expected1, result1.toString());

        // Test for n = 5 and k = 3
        int n2 = 5;
        int k2 = 3;
        List<TreeSet<Integer>> result2 = ArrayCombination.combination(n2, k2);

        // Expected result for combination (5, 3)
        String expected2 = "[[1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 4], [1, 3, 5], [1, 4, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]";
        assertEquals(expected2, result2.toString());

        // Test with invalid input
        int n3 = -2;
        int k3 = 3;
        List<TreeSet<Integer>> result3 = ArrayCombination.combination(n3, k3);

        // Expected result for invalid input
        assertNull(result3);
    }
}


No.9 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.Test;
import java.util.TreeSet;
import java.util.List;
import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {

    @Test
    public void combinationTest() {
        // Test with a valid n and k
        List<TreeSet<Integer>> result = Combination.combination(5, 3);
        assertNotNull(result, "Result should not be null for valid input.");
        assertEquals(10, result.size(), "Combinations of 5 choose 3 should result in 10 sets.");
        assertTrue(result.contains(new TreeSet<>(Arrays.asList(1, 2, 3))));
        assertTrue(result.contains(new TreeSet<>(Arrays.asList(1, 2, 4))));
        assertTrue(result.contains(new TreeSet<>(Arrays.asList(1, 2, 5))));
        assertTrue(result.contains(new TreeSet<>(Arrays.asList(1, 3, 4))));
        assertTrue(result.contains(new TreeSet<>(Arrays.asList(1, 3, 5))));
        assertTrue(result.contains(new TreeSet<>(Arrays.asList(1, 4, 5))));
        assertTrue(result.contains(new TreeSet<>(Arrays.asList(2, 3, 4))));
        assertTrue(result.contains(new TreeSet<>(Arrays.asList(2, 3, 5))));
        assertTrue(result.contains(new TreeSet<>(Arrays.asList(2, 4, 5))));
        assertTrue(result.contains(new TreeSet<>(Arrays.asList(3, 4, 5))));
        
        // Test with n less than or equal to 0
        assertNull(Combination.combination(0, 3), "Result should be null for non-positive n.");
        assertNull(Combination.combination(-1, 3), "Result should be null for non-positive n.");
        
        // Test with k greater than n
        List<TreeSet<Integer>> emptyResult = Combination.combination(3, 5);
        assertNotNull(emptyResult, "Result should not be null even when k > n.");
        assertEquals(0, emptyResult.size(), "Combinations of 3 choose 5 should result in no sets.");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;

public class ArrayCombinationTest {

    @Test
    public void combinationTest() {
        List<TreeSet<Integer>> actual = Combination.combination(5, 3);
        List<TreeSet<Integer>> expected = Arrays.asList(
            new TreeSet<>(Arrays.asList(1, 2, 3)),
            new TreeSet<>(Arrays.asList(1, 2, 4)),
            new TreeSet<>(Arrays.asList(1, 2, 5)),
            new TreeSet<>(Arrays.asList(1, 3, 4)),
            new TreeSet<>(Arrays.asList(1, 3, 5)),
            new TreeSet<>(Arrays.asList(1, 4, 5)),
            new TreeSet<>(Arrays.asList(2, 3, 4)),
            new TreeSet<>(Arrays.asList(2, 3, 5)),
            new TreeSet<>(Arrays.asList(2, 4, 5)),
            new TreeSet<>(Arrays.asList(3, 4, 5))
        );
        
        assertNotNull(actual);
        assertEquals(expected.size(), actual.size());
        
        for (int i = 0; i < expected.size(); i++) {
            assertEquals(expected.get(i), actual.get(i));
        }
    }

    @Test
    public void combinationTestEdgeCase() {
        // Testing edge case where n is less than or equal to zero
        List<TreeSet<Integer>> combinationWithNonPositiveN = Combination.combinaton(-1, 3);
        assertNull(combinationWithNonPositiveN);

        // Testing another edge case where n is positive but no combination should be generated (k > n)
        List<TreeSet<Integer>> combinationWithKGreaterThanN = Combination.combination(3, 5);
        assertNotNull(combinationWithKGreaterThanN);
        assertTrue(combinationWithKGreaterThanN.isEmpty());
    }
}


