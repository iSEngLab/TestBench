{
    "project_name": "Java",
    "file_name": "Average.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/Average.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * find average value of an int array\n     *\n     * @param numbers the array contains element and the sum does not excess long\n     *                value limit\n     * @return average value\n     */",
    "source_code": "\npublic static int average(int[] numbers) {\n    if (numbers == null || numbers.length == 0) {\n        throw new IllegalArgumentException(\"Numbers array cannot be empty or null\");\n    }\n    long sum = 0;\n    for (int number : numbers) {\n        sum += number;\n    }\n    return (int) (sum / numbers.length);\n}\n",
    "class_name": "Average",
    "method_name": "average",
    "arguments": [
        "int[] numbers"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void averageTest() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average((int[])null);\n        }, \"Numbers array cannot be empty or null\");\n\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(new int[]{});\n        }, \"Numbers array cannot be empty or null\");\n\n        assertEquals(2, Average.average(new int[]{2, 2, 2, 2, 2}),\n                \"The average of [2, 2, 2, 2, 2] should be 2\");\n\n        assertEquals(3, Average.average(new int[]{1, 2, 3, 4, 5}),\n                \"The average of [1, 2, 3, 4, 5] should be 3\");\n\n        assertEquals(4, Average.average(new int[]{3, 4, 5}),\n                \"The average of [3, 4, 5] should be 4\");\n\n        assertEquals(0, Average.average(new int[]{-1, 1}),\n                \"The average of [-1, 1] should be 0\");\n\n        assertEquals(-2, Average.average(new int[]{-3, -2, -1}),\n                \"The average of [-3, -2, -1] should be -2\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void averageTest() {\n        // Test for a valid array of positive numbers\n        int[] positiveNumbers = {1, 2, 3, 4, 5};\n        assertEquals(3, Average.average(positiveNumbers), \"The average of positive numbers should be calculated correctly.\");\n\n        // Test for a valid array with a mix of positive and negative numbers\n        int[] mixedNumbers = {-1, 2, -3, 4, -5};\n        assertEquals(-0.6, Average.average(mixedNumbers), 0.0001, \"The average of mixed numbers should be calculated correctly.\");\n\n        // Test for a valid array with only one element\n        int[] singleElement = {42};\n        assertEquals(42, Average.average(singleElement), \"The average of a single element array should be the element itself.\");\n\n        // Test for a valid array with all elements being zero\n        int[] zeroNumbers = {0, 0, 0, 0};\n        assertEquals(0, Average.average(zeroNumbers), \"The average of an all-zero numbers array should be zero.\");\n\n        // Test for throwing IllegalArgumentException when the array is null\n        int[] nullNumbers = null;\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(nullNumbers);\n        }, \"An IllegalArgumentException should be thrown if the input array is null.\");\n\n        // Test for throwing IllegalArgumentException when the array is empty\n        int[] emptyNumbers = {};\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(emptyNumbers);\n        }, \"An IllegalArgumentException should be thrown if the input array is empty.\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void averageTestValidInput() {\n        // Test with valid positive numbers\n        int[] numbers1 = {1, 2, 3, 4, 5};\n        assertEquals(3, Average.average(numbers1));\n\n        // Test with valid negative numbers\n        int[] numbers2 = {-3, -2, -1, 0, 1, 2, 3};\n        assertEquals(0, Average.average(numbers2));\n\n        // Test with a single number\n        int[] numbers3 = {5};\n        assertEquals(5, Average.average(numbers3));\n    }\n\n    @Test\n    public void averageTestEmptyArray() {\n        // Test with an empty array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            int[] emptyArray = {};\n            Average.average(emptyArray);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n\n    @Test\n    public void averageTestNullInput() {\n        // Test with null input\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void testAverageWithIntegers() {\n        // Test with a simple case for integers\n        int[] integers = {1, 2, 3, 4, 5};\n        int expectedAverage = 3;\n        assertEquals(expectedAverage, Average.average(integers), \"The average should be correct\");\n\n        // Test with negative integers\n        int[] negativeIntegers = {-3, -2, -1, 0, 1, 2};\n        expectedAverage = -0; // -0.5 rounds to 0 when cast to int\n        assertEquals(expectedAverage, Average.average(negativeIntegers), \"The average with negative numbers should be correct\");\n    }\n\n    @Test\n    public void testAverageWithDoubles() {\n        // Test with a simple case for doubles\n        double[] doubles = {1.5, 2.5, 3.5, 4.5, 5.5};\n        double expectedAverage = 3.5;\n        assertEquals(expectedAverage, Average.average(doubles), 0.00001, \"The average should be correct for doubles\");\n\n        // Test with negative doubles\n        double[] negativeDoubles = {-5.0, -4.0, -3.0, -2.0, -1.0};\n        expectedAverage = -3.0;\n        assertEquals(expectedAverage, Average.average(negativeDoubles), \"The average with negative doubles should be correct\");\n    }\n\n    @Test\n    public void testAverageWithEmptyArray() {\n        // Test with an empty array\n        int[] emptyArray = {};\n        assertThrows(IllegalArgumentException.class, () -> Average.average(emptyArray), \"Empty array should throw an exception\");\n\n        double[] emptyDoubleArray = {};\n        assertThrows(IllegalArgumentException.class, () -> Average.average(emptyDoubleArray), \"Empty array of doubles should throw an exception\");\n    }\n\n    @Test\n    public void testAverageWithNullArray() {\n        // Test with a null array\n        assertThrows(IllegalArgumentException.class, () -> Average.average((int[]) null), \"Null array should throw an exception\");\n\n        assertThrows(IllegalArgumentException.class, () -> Average.average((double[]) null), \"Null array of doubles should throw an exception\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    \n    @Test\n    public void testAverageWithIntegers() {\n        // Case with simple integers\n        int[] intNumbers = {1, 2, 3, 4, 5};\n        assertEquals(3, Average.average(intNumbers));\n\n        // Case with larger range of integers\n        int[] largeIntNumbers = {-102, 0, 9, 7, 1024};\n        assertEquals(187, Average.average(largeIntNumbers));\n    }\n    \n    @Test\n    public void testAverageWithDoubles() {\n        // Case with simple doubles\n        double[] doubleNumbers = {1.0, 2.0, 3.0, 4.0, 5.0};\n        assertEquals(3.0, Average.average(doubleNumbers));\n\n        // Case with large range and non-integral values\n        double[] largeDoubleNumbers = {-1.5, 0.0, 9.25, 100.0, 500.1};\n        assertEquals(121.57, Average.average(largeDoubleNumbers), 0.01);\n    }\n    \n    @Test\n    public void testEmptyArray() {\n        // Expect exception for empty array of integers\n        int[] emptyIntArray = {};\n        Exception exception1 = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(emptyIntArray);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception1.getMessage());\n        \n        // Expect exception for empty array of doubles\n        double[] emptyDoubleArray = {};\n        Exception exception2 = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(emptyDoubleArray);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception2.getMessage());\n    }\n    \n    @Test\n    public void testNullArray() {\n        // Expect exception for null array of integers\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average((int[])null);\n        });\n        \n        // Expect exception for null array of doubles\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average((double[])null);\n        });\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void averageWithValidIntArray() {\n        // Test with a valid int array\n        int[] numbers = {1, 2, 3, 4, 5};\n        int expectedAverage = 3;\n        assertEquals(expectedAverage, Average.average(numbers), \"The average should be 3\");\n    }\n\n    @Test\n    public void averageWithValidDoubleArray() {\n        // Test with a valid double array\n        double[] numbers = {1.0, 2.0, 3.0, 4.0, 5.0};\n        double expectedAverage = 3.0;\n        assertEquals(expectedAverage, Average.average(numbers), 0.01, \"The average should be 3.0\");\n    }\n\n    @Test\n    public void averageWithEmptyArray() {\n        // Test with an empty int array\n        int[] numbers = {};\n        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers), \"Should throw an IllegalArgumentException for an empty array\");\n    }\n\n    @Test\n    public void averageWithNullIntArray() {\n        // Test with null as input for int array\n        int[] numbers = null;\n        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers), \"Should throw an IllegalArgumentException for null input\");\n    }\n\n    @Test\n    public void averageWithEmptyDoubleArray() {\n        // Test with an empty double array\n        double[] numbers = {};\n        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers), \"Should throw an IllegalArgumentException for an empty array\");\n    }\n\n    @Test\n    public void averageWithNullDoubleArray() {\n        // Test with null as input for double array\n        double[] numbers = null;\n        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers), \"Should throw an IllegalArgumentException for null input\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    \n    @Test\n    public void averageTest() {\n        assertEquals(3, Average.average(new int[]{2, 3, 4}));\n        assertEquals(2, Average.average(new int[]{1, 2, 3}));\n        assertEquals(-1, Average.average(new int[]{-2, 0, -1}));\n        assertThrows(IllegalArgumentException.class, () -> Average.average(null));\n        assertThrows(IllegalArgumentException.class, () -> Average.average(new int[]{}));\n        assertEquals(0, Average.average(new int[]{0, 0, 0}));\n        assertEquals(Integer.MAX_VALUE / 2, Average.average(new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE, 0}));\n        \n        // This test case would potentially overflow an int, but given the context,\n        // we assume the sum does not exceed the long value limit before the division.\n        // For real-world cases, you might want to add validation for overflow.\n        long bigValue = Integer.MAX_VALUE;\n        assertEquals((int)(bigValue / 2), Average.average(new int[]{Integer.MAX_VALUE, 0, 0, 0, 0}));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void averageTestValidInput() {\n        // Test with a valid int array\n        assertEquals(3, Average.average(new int[]{2, 3, 4}));\n        // Test with a valid double array\n        assertEquals(3.0, Average.average(new double[]{2.0, 3.0, 4.0}), 0.0001);\n        \n        // Assuming more tests may include boundary conditions, large sums, and precision checks for doubles.\n        // Note: 0.0001 is the delta precision for double comparisons.\n    }\n\n    @Test\n    public void averageTestWithEmptyArray() {\n        // Test with an empty int array\n        Exception exceptionInt = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(new int[]{});\n        });\n        assertTrue(exceptionInt.getMessage().contains(\"Numbers array cannot be empty or null\"));\n        \n        // Test with an empty double array\n        Exception exceptionDouble = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(new double[]{});\n        });\n        assertTrue(exceptionDouble.getMessage().contains(\"Numbers array cannot be empty or null\"));\n    }\n\n    @Test\n    public void averageTestWithNull() {\n        // Test with null as input for int array\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average((int[]) null);\n        });\n\n        // Test with null as input for double array\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average((double[]) null);\n        });\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void testAverageWithInts() {\n        int[] intNumbers = {1, 2, 3, 4, 5};\n        assertEquals(3, Average.average(intNumbers), \"The average of ints should be calculated correctly.\");\n        \n        int[] intNumbersWithNegative = {-5, 0, 5};\n        assertEquals(0, Average.average(intNumbersWithNegative), \"The average of negative and positive ints should be 0.\");\n        \n        int[] intNumbersSingleElement = {42};\n        assertEquals(42, Average.average(intNumbersSingleElement), \"The average of a single int element should be the element itself.\");\n        \n        assertThrows(IllegalArgumentException.class, () -> Average.average(null), \"Passing null should throw IllegalArgumentException.\");\n        \n        assertThrows(IllegalArgumentException.class, () -> Average.average(new int[0]), \"Passing an empty array should throw IllegalArgumentException.\");\n    }\n    \n    @Test\n    public void testAverageWithDoubles() {\n        double[] doubleNumbers = {1.0, 2.0, 3.0, 4.0, 5.0};\n        assertEquals(3.0, Average.average(doubleNumbers), 0.001, \"The average of doubles should be calculated correctly.\");\n        \n        double[] doubleNumbersWithNegative = {-5.0, 0.0, 5.0};\n        assertEquals(0.0, Average.average(doubleNumbersWithNegative), 0.001, \"The average of negative and positive doubles should be 0.\");\n        \n        double[] doubleNumbersSingleElement = {42.0};\n        assertEquals(42.0, Average.average(doubleNumbersSingleElement), 0.001, \"The average of a single double element should be the element itself.\");\n        \n        assertThrows(IllegalArgumentException.class, () -> Average.average(null), \"Passing null should throw IllegalArgumentException.\");\n        \n        assertThrows(IllegalArgumentException.class, () -> Average.average(new double[0]), \"Passing an empty array should throw IllegalArgumentException.\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void testAverageWithTypicalArray() {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int expectedAverage = 3;\n        assertEquals(expectedAverage, Average.average(numbers), \"The average of a typical array should be calculated correctly.\");\n    }\n\n    @Test\n    public void testAverageWithSingleElementArray() {\n        int[] numbers = {5};\n        int expectedAverage = 5;\n        assertEquals(expectedAverage, Average.average(numbers), \"The average of a single-element array should be the element itself.\");\n    }\n\n    @Test\n    public void testAverageWithNullArray() {\n        int[] numbers = null;\n        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers), \"Passing a null array should result in IllegalArgumentException.\");\n    }\n\n    @Test\n    public void testAverageWithEmptyArray() {\n        int[] numbers = {};\n        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers), \"Passing an empty array should result in IllegalArgumentException.\");\n    }\n}"
    ]
}