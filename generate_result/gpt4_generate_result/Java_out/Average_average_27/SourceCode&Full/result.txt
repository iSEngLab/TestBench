Source code: 


public static int average(int[] numbers) {
    if (numbers == null || numbers.length == 0) {
        throw new IllegalArgumentException("Numbers array cannot be empty or null");
    }
    long sum = 0;
    for (int number : numbers) {
        sum += number;
    }
    return (int) (sum / numbers.length);
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

    @Test
    public void averageTest() {
        assertThrows(IllegalArgumentException.class, () -> {
            Average.average((int[])null);
        }, "Numbers array cannot be empty or null");

        assertThrows(IllegalArgumentException.class, () -> {
            Average.average(new int[]{});
        }, "Numbers array cannot be empty or null");

        assertEquals(2, Average.average(new int[]{2, 2, 2, 2, 2}),
                "The average of [2, 2, 2, 2, 2] should be 2");

        assertEquals(3, Average.average(new int[]{1, 2, 3, 4, 5}),
                "The average of [1, 2, 3, 4, 5] should be 3");

        assertEquals(4, Average.average(new int[]{3, 4, 5}),
                "The average of [3, 4, 5] should be 4");

        assertEquals(0, Average.average(new int[]{-1, 1}),
                "The average of [-1, 1] should be 0");

        assertEquals(-2, Average.average(new int[]{-3, -2, -1}),
                "The average of [-3, -2, -1] should be -2");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

    @Test
    public void averageTest() {
        // Test for a valid array of positive numbers
        int[] positiveNumbers = {1, 2, 3, 4, 5};
        assertEquals(3, Average.average(positiveNumbers), "The average of positive numbers should be calculated correctly.");

        // Test for a valid array with a mix of positive and negative numbers
        int[] mixedNumbers = {-1, 2, -3, 4, -5};
        assertEquals(-0.6, Average.average(mixedNumbers), 0.0001, "The average of mixed numbers should be calculated correctly.");

        // Test for a valid array with only one element
        int[] singleElement = {42};
        assertEquals(42, Average.average(singleElement), "The average of a single element array should be the element itself.");

        // Test for a valid array with all elements being zero
        int[] zeroNumbers = {0, 0, 0, 0};
        assertEquals(0, Average.average(zeroNumbers), "The average of an all-zero numbers array should be zero.");

        // Test for throwing IllegalArgumentException when the array is null
        int[] nullNumbers = null;
        assertThrows(IllegalArgumentException.class, () -> {
            Average.average(nullNumbers);
        }, "An IllegalArgumentException should be thrown if the input array is null.");

        // Test for throwing IllegalArgumentException when the array is empty
        int[] emptyNumbers = {};
        assertThrows(IllegalArgumentException.class, () -> {
            Average.average(emptyNumbers);
        }, "An IllegalArgumentException should be thrown if the input array is empty.");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

    @Test
    public void averageTestValidInput() {
        // Test with valid positive numbers
        int[] numbers1 = {1, 2, 3, 4, 5};
        assertEquals(3, Average.average(numbers1));

        // Test with valid negative numbers
        int[] numbers2 = {-3, -2, -1, 0, 1, 2, 3};
        assertEquals(0, Average.average(numbers2));

        // Test with a single number
        int[] numbers3 = {5};
        assertEquals(5, Average.average(numbers3));
    }

    @Test
    public void averageTestEmptyArray() {
        // Test with an empty array
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            int[] emptyArray = {};
            Average.average(emptyArray);
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
    }

    @Test
    public void averageTestNullInput() {
        // Test with null input
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(null);
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
    }

}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

    @Test
    public void testAverageWithIntegers() {
        // Test with a simple case for integers
        int[] integers = {1, 2, 3, 4, 5};
        int expectedAverage = 3;
        assertEquals(expectedAverage, Average.average(integers), "The average should be correct");

        // Test with negative integers
        int[] negativeIntegers = {-3, -2, -1, 0, 1, 2};
        expectedAverage = -0; // -0.5 rounds to 0 when cast to int
        assertEquals(expectedAverage, Average.average(negativeIntegers), "The average with negative numbers should be correct");
    }

    @Test
    public void testAverageWithDoubles() {
        // Test with a simple case for doubles
        double[] doubles = {1.5, 2.5, 3.5, 4.5, 5.5};
        double expectedAverage = 3.5;
        assertEquals(expectedAverage, Average.average(doubles), 0.00001, "The average should be correct for doubles");

        // Test with negative doubles
        double[] negativeDoubles = {-5.0, -4.0, -3.0, -2.0, -1.0};
        expectedAverage = -3.0;
        assertEquals(expectedAverage, Average.average(negativeDoubles), "The average with negative doubles should be correct");
    }

    @Test
    public void testAverageWithEmptyArray() {
        // Test with an empty array
        int[] emptyArray = {};
        assertThrows(IllegalArgumentException.class, () -> Average.average(emptyArray), "Empty array should throw an exception");

        double[] emptyDoubleArray = {};
        assertThrows(IllegalArgumentException.class, () -> Average.average(emptyDoubleArray), "Empty array of doubles should throw an exception");
    }

    @Test
    public void testAverageWithNullArray() {
        // Test with a null array
        assertThrows(IllegalArgumentException.class, () -> Average.average((int[]) null), "Null array should throw an exception");

        assertThrows(IllegalArgumentException.class, () -> Average.average((double[]) null), "Null array of doubles should throw an exception");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {
    
    @Test
    public void testAverageWithIntegers() {
        // Case with simple integers
        int[] intNumbers = {1, 2, 3, 4, 5};
        assertEquals(3, Average.average(intNumbers));

        // Case with larger range of integers
        int[] largeIntNumbers = {-102, 0, 9, 7, 1024};
        assertEquals(187, Average.average(largeIntNumbers));
    }
    
    @Test
    public void testAverageWithDoubles() {
        // Case with simple doubles
        double[] doubleNumbers = {1.0, 2.0, 3.0, 4.0, 5.0};
        assertEquals(3.0, Average.average(doubleNumbers));

        // Case with large range and non-integral values
        double[] largeDoubleNumbers = {-1.5, 0.0, 9.25, 100.0, 500.1};
        assertEquals(121.57, Average.average(largeDoubleNumbers), 0.01);
    }
    
    @Test
    public void testEmptyArray() {
        // Expect exception for empty array of integers
        int[] emptyIntArray = {};
        Exception exception1 = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(emptyIntArray);
        });
        assertEquals("Numbers array cannot be empty or null", exception1.getMessage());
        
        // Expect exception for empty array of doubles
        double[] emptyDoubleArray = {};
        Exception exception2 = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(emptyDoubleArray);
        });
        assertEquals("Numbers array cannot be empty or null", exception2.getMessage());
    }
    
    @Test
    public void testNullArray() {
        // Expect exception for null array of integers
        assertThrows(IllegalArgumentException.class, () -> {
            Average.average((int[])null);
        });
        
        // Expect exception for null array of doubles
        assertThrows(IllegalArgumentException.class, () -> {
            Average.average((double[])null);
        });
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

    @Test
    public void averageWithValidIntArray() {
        // Test with a valid int array
        int[] numbers = {1, 2, 3, 4, 5};
        int expectedAverage = 3;
        assertEquals(expectedAverage, Average.average(numbers), "The average should be 3");
    }

    @Test
    public void averageWithValidDoubleArray() {
        // Test with a valid double array
        double[] numbers = {1.0, 2.0, 3.0, 4.0, 5.0};
        double expectedAverage = 3.0;
        assertEquals(expectedAverage, Average.average(numbers), 0.01, "The average should be 3.0");
    }

    @Test
    public void averageWithEmptyArray() {
        // Test with an empty int array
        int[] numbers = {};
        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers), "Should throw an IllegalArgumentException for an empty array");
    }

    @Test
    public void averageWithNullIntArray() {
        // Test with null as input for int array
        int[] numbers = null;
        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers), "Should throw an IllegalArgumentException for null input");
    }

    @Test
    public void averageWithEmptyDoubleArray() {
        // Test with an empty double array
        double[] numbers = {};
        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers), "Should throw an IllegalArgumentException for an empty array");
    }

    @Test
    public void averageWithNullDoubleArray() {
        // Test with null as input for double array
        double[] numbers = null;
        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers), "Should throw an IllegalArgumentException for null input");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {
    
    @Test
    public void averageTest() {
        assertEquals(3, Average.average(new int[]{2, 3, 4}));
        assertEquals(2, Average.average(new int[]{1, 2, 3}));
        assertEquals(-1, Average.average(new int[]{-2, 0, -1}));
        assertThrows(IllegalArgumentException.class, () -> Average.average(null));
        assertThrows(IllegalArgumentException.class, () -> Average.average(new int[]{}));
        assertEquals(0, Average.average(new int[]{0, 0, 0}));
        assertEquals(Integer.MAX_VALUE / 2, Average.average(new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE, 0}));
        
        // This test case would potentially overflow an int, but given the context,
        // we assume the sum does not exceed the long value limit before the division.
        // For real-world cases, you might want to add validation for overflow.
        long bigValue = Integer.MAX_VALUE;
        assertEquals((int)(bigValue / 2), Average.average(new int[]{Integer.MAX_VALUE, 0, 0, 0, 0}));
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

    @Test
    public void averageTestValidInput() {
        // Test with a valid int array
        assertEquals(3, Average.average(new int[]{2, 3, 4}));
        // Test with a valid double array
        assertEquals(3.0, Average.average(new double[]{2.0, 3.0, 4.0}), 0.0001);
        
        // Assuming more tests may include boundary conditions, large sums, and precision checks for doubles.
        // Note: 0.0001 is the delta precision for double comparisons.
    }

    @Test
    public void averageTestWithEmptyArray() {
        // Test with an empty int array
        Exception exceptionInt = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(new int[]{});
        });
        assertTrue(exceptionInt.getMessage().contains("Numbers array cannot be empty or null"));
        
        // Test with an empty double array
        Exception exceptionDouble = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(new double[]{});
        });
        assertTrue(exceptionDouble.getMessage().contains("Numbers array cannot be empty or null"));
    }

    @Test
    public void averageTestWithNull() {
        // Test with null as input for int array
        assertThrows(IllegalArgumentException.class, () -> {
            Average.average((int[]) null);
        });

        // Test with null as input for double array
        assertThrows(IllegalArgumentException.class, () -> {
            Average.average((double[]) null);
        });
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

    @Test
    public void testAverageWithInts() {
        int[] intNumbers = {1, 2, 3, 4, 5};
        assertEquals(3, Average.average(intNumbers), "The average of ints should be calculated correctly.");
        
        int[] intNumbersWithNegative = {-5, 0, 5};
        assertEquals(0, Average.average(intNumbersWithNegative), "The average of negative and positive ints should be 0.");
        
        int[] intNumbersSingleElement = {42};
        assertEquals(42, Average.average(intNumbersSingleElement), "The average of a single int element should be the element itself.");
        
        assertThrows(IllegalArgumentException.class, () -> Average.average(null), "Passing null should throw IllegalArgumentException.");
        
        assertThrows(IllegalArgumentException.class, () -> Average.average(new int[0]), "Passing an empty array should throw IllegalArgumentException.");
    }
    
    @Test
    public void testAverageWithDoubles() {
        double[] doubleNumbers = {1.0, 2.0, 3.0, 4.0, 5.0};
        assertEquals(3.0, Average.average(doubleNumbers), 0.001, "The average of doubles should be calculated correctly.");
        
        double[] doubleNumbersWithNegative = {-5.0, 0.0, 5.0};
        assertEquals(0.0, Average.average(doubleNumbersWithNegative), 0.001, "The average of negative and positive doubles should be 0.");
        
        double[] doubleNumbersSingleElement = {42.0};
        assertEquals(42.0, Average.average(doubleNumbersSingleElement), 0.001, "The average of a single double element should be the element itself.");
        
        assertThrows(IllegalArgumentException.class, () -> Average.average(null), "Passing null should throw IllegalArgumentException.");
        
        assertThrows(IllegalArgumentException.class, () -> Average.average(new double[0]), "Passing an empty array should throw IllegalArgumentException.");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

    @Test
    public void testAverageWithTypicalArray() {
        int[] numbers = {1, 2, 3, 4, 5};
        int expectedAverage = 3;
        assertEquals(expectedAverage, Average.average(numbers), "The average of a typical array should be calculated correctly.");
    }

    @Test
    public void testAverageWithSingleElementArray() {
        int[] numbers = {5};
        int expectedAverage = 5;
        assertEquals(expectedAverage, Average.average(numbers), "The average of a single-element array should be the element itself.");
    }

    @Test
    public void testAverageWithNullArray() {
        int[] numbers = null;
        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers), "Passing a null array should result in IllegalArgumentException.");
    }

    @Test
    public void testAverageWithEmptyArray() {
        int[] numbers = {};
        assertThrows(IllegalArgumentException.class, () -> Average.average(numbers), "Passing an empty array should result in IllegalArgumentException.");
    }
}


