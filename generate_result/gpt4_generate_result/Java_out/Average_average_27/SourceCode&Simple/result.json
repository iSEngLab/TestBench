{
    "project_name": "Java",
    "file_name": "Average.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/Average.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * find average value of an int array\n     *\n     * @param numbers the array contains element and the sum does not excess long\n     *                value limit\n     * @return average value\n     */",
    "source_code": "\npublic static int average(int[] numbers) {\n    if (numbers == null || numbers.length == 0) {\n        throw new IllegalArgumentException(\"Numbers array cannot be empty or null\");\n    }\n    long sum = 0;\n    for (int number : numbers) {\n        sum += number;\n    }\n    return (int) (sum / numbers.length);\n}\n",
    "class_name": "Average",
    "method_name": "average",
    "arguments": [
        "int[] numbers"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n  @Test\n  public void averageTest() {\n      // Test with a regular array of integers\n      assertEquals(3, Average.average(new int[]{2, 3, 4}));\n\n      // Test with an array containing a single element\n      assertEquals(10, Average.average(new int[]{10}));\n\n      // Test with an array with negative and positive numbers\n      assertEquals(0, Average.average(new int[]{-3, -2, 2, 3}));\n\n      // Test with an array containing multiple identical elements\n      assertEquals(5, Average.average(new int[]{5, 5, 5, 5}));\n  }\n\n  @Test\n  public void averageTestWithEmptyArray() {\n      // Test with an empty array, expecting an exception\n      assertThrows(IllegalArgumentException.class, () -> {\n          Average.average(new int[]{});\n      });\n  }\n\n  @Test\n  public void averageTestWithNullArray() {\n      // Test with a `null` array, expecting an exception\n      assertThrows(IllegalArgumentException.class, () -> {\n          Average.average(null);\n      });\n  }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void testValidAverage() {\n        // Test with a valid array of integers\n        assertEquals(3, Average.average(new int[]{2, 3, 4}));\n        assertEquals(2, Average.average(new int[]{1, 2, 3}));\n        assertEquals(5, Average.average(new int[]{5, 5, 5}));\n    }\n\n    @Test\n    public void testAverageWithSingleElement() {\n        // Test with a single-element array\n        assertEquals(4, Average.average(new int[]{4}));\n    }\n\n    @Test\n    public void testAverageEmptyOrNullArray() {\n        // Test with an empty array\n        Exception emptyException = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(new int[]{});\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", emptyException.getMessage());\n\n        // Test with a null array\n        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", nullException.getMessage());\n    }\n\n    @Test\n    public void testAverageWithLargeNumbers() {\n        // Test with large numbers\n        assertEquals(Integer.MAX_VALUE / 2, Average.average(new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE / 2, 0}));\n    }\n\n    // Additional test cases can be written below\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void averageTestValidArray() {\n        int[] numbers = {2, 3, 5, 7, 11};\n        assertEquals(5, Average.average(numbers), \"The average should be 5\");\n    }\n\n    @Test\n    public void averageTestEmptyArray() {\n        int[] numbers = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(numbers);\n        });\n\n        String expectedMessage = \"Numbers array cannot be empty or null\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage), \"Expected an IllegalArgumentException with the message: \" + expectedMessage);\n    }\n    \n    @Test\n    public void averageTestNullArray() {\n        int[] numbers = null;\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(numbers);\n        });\n\n        String expectedMessage = \"Numbers array cannot be empty or null\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage), \"Expected an IllegalArgumentException with the message: \" + expectedMessage);\n    }\n    \n    @Test\n    public void averageTestSingleElementArray() {\n        int[] numbers = {5};\n        assertEquals(5, Average.average(numbers), \"The average of a single element array should be the element itself\");\n    }\n\n    @Test\n    public void averageTestLargeNumbers() {\n        int[] numbers = {Integer.MAX_VALUE, Integer.MAX_VALUE};\n        assertEquals(Integer.MAX_VALUE, Average.average(numbers), \"The average of a max int value array should be the max int value\");\n    }\n\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void averageTest() {\n        // Test case where the numbers array is valid and has multiple integers\n        assertEquals(3, Average.average(new int[]{2, 3, 4}), \"The average of 2, 3, 4 should be 3\");\n\n        // Test case where the numbers array has only one integer\n        assertEquals(10, Average.average(new int[]{10}), \"The average of a single number 10 should be 10\");\n\n        // Test case where the numbers array is valid but contains a negative integer\n        assertEquals(1, Average.average(new int[]{4, -2, 2}), \"The average of 4, -2, 2 should be 1\");\n\n        // Test case for expected IllegalArgumentException when passing a null array\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(null);\n        }, \"Passing null should throw IllegalArgumentException\");\n\n        // Test case for expected IllegalArgumentException when passing an empty array\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(new int[]{});\n        }, \"Passing an empty array should throw IllegalArgumentException\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        // Test for normal case\n        assertEquals(3, Average.average(new int[]{2, 3, 4}));\n        assertEquals(4, Average.average(new int[]{4, 4, 4, 4}));\n        \n        // Test with negative numbers\n        assertEquals(-2, Average.average(new int[]{-2, -2, -2}));\n        \n        // Test for single element array\n        assertEquals(5, Average.average(new int[]{5}));\n\n        // Test for large numbers\n        assertEquals(Integer.MAX_VALUE / 2, Average.average(new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE}));\n\n        // Test for empty array (should throw an exception)\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(new int[]{});\n        });\n        assertTrue(exception.getMessage().contains(\"Numbers array cannot be empty or null\"));\n\n        // Test for null input (should throw exception)\n        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(null);\n        });\n        assertTrue(nullException.getMessage().contains(\"Numbers array cannot be empty or null\"));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void averageTest() {\n        // Test a normal array\n        assertEquals(3, Average.average(new int[]{2, 3, 4}));\n        \n        // Test a single element array\n        assertEquals(5, Average.average(new int[]{5}));\n        \n        // Test a negative values array\n        assertEquals(-2, Average.average(new int[]{-3, -1, -2}));\n        \n        // Test a large numbers array\n        assertEquals(1000, Average.average(new int[]{1000, 1000, 1000, 1000}));\n        \n        // Testing exception for null input\n        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", nullException.getMessage());\n\n        // Testing exception for empty array\n        Exception emptyException = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(new int[]{});\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", emptyException.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        // Test with valid int array\n        assertEquals(3, Average.average(new int[]{2, 3, 4}));\n        \n        // Test with a single element\n        assertEquals(7, Average.average(new int[]{7}));\n\n        // Test with negative numbers\n        assertEquals(-1, Average.average(new int[]{-2, 0, -2}));\n        \n        // Test the Average.average with double array should not interfere with int test\n        assertThrows(NoSuchMethodError.class, () -> Average.average(new double[]{2.5, 3.5}));\n        \n        // Test with empty array should throw IllegalArgumentException\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> Average.average(new int[]{}));\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n        \n        // Test with null array should also throw IllegalArgumentException\n        Exception nullException = assertThrows(IllegalArgumentException.class, () -> Average.average(null));\n        assertEquals(\"Numbers array cannot be empty or null\", nullException.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void testValidAverage() {\n        // Test case for a valid numbers array\n        int[] numbers = {2, 4, 6, 8};\n        assertEquals(5, Average.average(numbers), \"The average of the numbers must be 5\");\n    }\n    \n    @Test\n    public void testAverageWithSingleElement() {\n        // Test case for a single-element numbers array\n        int[] singleNumber = {10};\n        assertEquals(10, Average.average(singleNumber), \"The average of a single number must be the number itself\");\n    }\n    \n    @Test\n    public void testAverageWithNegativeNumbers() {\n        // Test case including negative numbers\n        int[] numbersWithNegatives = {-2, -4, 6, 8};\n        assertEquals(2, Average.average(numbersWithNegatives), \"The average should include negative numbers correctly\");\n    }\n\n    @Test\n    public void testEmptyArray() {\n        // Test case for empty array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(new int[]{});\n        });\n        \n        String expectedMessage = \"Numbers array cannot be empty or null\";\n        String actualMessage = exception.getMessage();\n        \n        assertTrue(actualMessage.contains(expectedMessage), \"Empty array should throw an IllegalArgumentException with correct message\");\n    }\n    \n    @Test\n    public void testNullArray() {\n        // Test case for null array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(null);\n        });\n        \n        String expectedMessage = \"Numbers array cannot be empty or null\";\n        String actualMessage = exception.getMessage();\n        \n        assertTrue(actualMessage.contains(expectedMessage), \"Null array should throw an IllegalArgumentException with correct message\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    \n    @Test\n    public void averageTest() {\n        // Test with a valid array of numbers\n        int[] validNumbers = {1, 2, 3, 4, 5};\n        assertEquals(3, Average.average(validNumbers), \"The average should be 3\");\n        \n        // Test with a single number\n        int[] singleNumber = {42};\n        assertEquals(42, Average.average(singleNumber), \"The average of a single number should be the number itself\");\n        \n        // Test to verify the behavior when passing an empty array\n        int[] emptyNumbers = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> Average.average(emptyNumbers));\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage(), \"Expected IllegalArgumentException for an empty array\");\n        \n        // Test to verify the behavior when passing a null array\n        int[] nullNumbers = null;\n        Exception nullException = assertThrows(IllegalArgumentException.class, () -> Average.average(nullNumbers));\n        assertEquals(\"Numbers array cannot be empty or null\", nullException.getMessage(), \"Expected IllegalArgumentException for null input\");\n        \n        // Test with large numbers to check for integer overflow\n        int[] largeNumbers = {Integer.MAX_VALUE, Integer.MAX_VALUE};\n        assertEquals(Integer.MAX_VALUE, Average.average(largeNumbers), \"The average should handle the overflow scenario correctly\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void testWithValidArray() {\n        int[] numbers = {10, 20, 30, 40, 50};\n        int expectedAverage = 30;\n        int actualAverage = Average.average(numbers);\n        assertEquals(expectedAverage, actualAverage, \"The average of a valid array should be calculated correctly.\");\n    }\n\n    @Test\n    public void testWithSingleElementArray() {\n        int[] numbers = {7};\n        int expectedAverage = 7;\n        int actualAverage = Average.average(numbers);\n        assertEquals(expectedAverage, actualAverage, \"The average of a single-element array should be the element itself.\");\n    }\n\n    @Test\n    public void testWithEmptyArray() {\n        int[] numbers = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> Average.average(numbers));\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage(), \"An empty array should throw an IllegalArgumentException.\");\n    }\n\n    @Test\n    public void testWithNullArray() {\n        int[] numbers = null;\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> Average.average(numbers));\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage(), \"A null array should throw an IllegalArgumentException.\");\n    }\n\n    // This test checks correct handling of potential integer overflow.\n    @Test\n    public void testWithLargeNumbers() {\n        // Assuming the overflow behavior is not part of the specification.\n        // This test would be a point of discussion for expected behavior with the development team.\n        int[] numbers = {Integer.MAX_VALUE, Integer.MAX_VALUE};\n        int expectedAverage = Integer.MAX_VALUE; // Averaging two maximum integers should normally cause overflow.\n        int actualAverage = Average.average(numbers);\n        assertEquals(expectedAverage, actualAverage, \"The average of large numbers should handle overflow correctly if it is within the method specification.\");\n    }\n}"
    ]
}