Source code: 


public static int average(int[] numbers) {
    if (numbers == null || numbers.length == 0) {
        throw new IllegalArgumentException("Numbers array cannot be empty or null");
    }
    long sum = 0;
    for (int number : numbers) {
        sum += number;
    }
    return (int) (sum / numbers.length);
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

  @Test
  public void averageTest() {
      // Test with a regular array of integers
      assertEquals(3, Average.average(new int[]{2, 3, 4}));

      // Test with an array containing a single element
      assertEquals(10, Average.average(new int[]{10}));

      // Test with an array with negative and positive numbers
      assertEquals(0, Average.average(new int[]{-3, -2, 2, 3}));

      // Test with an array containing multiple identical elements
      assertEquals(5, Average.average(new int[]{5, 5, 5, 5}));
  }

  @Test
  public void averageTestWithEmptyArray() {
      // Test with an empty array, expecting an exception
      assertThrows(IllegalArgumentException.class, () -> {
          Average.average(new int[]{});
      });
  }

  @Test
  public void averageTestWithNullArray() {
      // Test with a `null` array, expecting an exception
      assertThrows(IllegalArgumentException.class, () -> {
          Average.average(null);
      });
  }
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

    @Test
    public void testValidAverage() {
        // Test with a valid array of integers
        assertEquals(3, Average.average(new int[]{2, 3, 4}));
        assertEquals(2, Average.average(new int[]{1, 2, 3}));
        assertEquals(5, Average.average(new int[]{5, 5, 5}));
    }

    @Test
    public void testAverageWithSingleElement() {
        // Test with a single-element array
        assertEquals(4, Average.average(new int[]{4}));
    }

    @Test
    public void testAverageEmptyOrNullArray() {
        // Test with an empty array
        Exception emptyException = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(new int[]{});
        });
        assertEquals("Numbers array cannot be empty or null", emptyException.getMessage());

        // Test with a null array
        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(null);
        });
        assertEquals("Numbers array cannot be empty or null", nullException.getMessage());
    }

    @Test
    public void testAverageWithLargeNumbers() {
        // Test with large numbers
        assertEquals(Integer.MAX_VALUE / 2, Average.average(new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE / 2, 0}));
    }

    // Additional test cases can be written below
}


No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

    @Test
    public void averageTestValidArray() {
        int[] numbers = {2, 3, 5, 7, 11};
        assertEquals(5, Average.average(numbers), "The average should be 5");
    }

    @Test
    public void averageTestEmptyArray() {
        int[] numbers = {};
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(numbers);
        });

        String expectedMessage = "Numbers array cannot be empty or null";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage), "Expected an IllegalArgumentException with the message: " + expectedMessage);
    }
    
    @Test
    public void averageTestNullArray() {
        int[] numbers = null;
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(numbers);
        });

        String expectedMessage = "Numbers array cannot be empty or null";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage), "Expected an IllegalArgumentException with the message: " + expectedMessage);
    }
    
    @Test
    public void averageTestSingleElementArray() {
        int[] numbers = {5};
        assertEquals(5, Average.average(numbers), "The average of a single element array should be the element itself");
    }

    @Test
    public void averageTestLargeNumbers() {
        int[] numbers = {Integer.MAX_VALUE, Integer.MAX_VALUE};
        assertEquals(Integer.MAX_VALUE, Average.average(numbers), "The average of a max int value array should be the max int value");
    }

}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

    @Test
    public void averageTest() {
        // Test case where the numbers array is valid and has multiple integers
        assertEquals(3, Average.average(new int[]{2, 3, 4}), "The average of 2, 3, 4 should be 3");

        // Test case where the numbers array has only one integer
        assertEquals(10, Average.average(new int[]{10}), "The average of a single number 10 should be 10");

        // Test case where the numbers array is valid but contains a negative integer
        assertEquals(1, Average.average(new int[]{4, -2, 2}), "The average of 4, -2, 2 should be 1");

        // Test case for expected IllegalArgumentException when passing a null array
        assertThrows(IllegalArgumentException.class, () -> {
            Average.average(null);
        }, "Passing null should throw IllegalArgumentException");

        // Test case for expected IllegalArgumentException when passing an empty array
        assertThrows(IllegalArgumentException.class, () -> {
            Average.average(new int[]{});
        }, "Passing an empty array should throw IllegalArgumentException");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {
    @Test
    public void averageTest() {
        // Test for normal case
        assertEquals(3, Average.average(new int[]{2, 3, 4}));
        assertEquals(4, Average.average(new int[]{4, 4, 4, 4}));
        
        // Test with negative numbers
        assertEquals(-2, Average.average(new int[]{-2, -2, -2}));
        
        // Test for single element array
        assertEquals(5, Average.average(new int[]{5}));

        // Test for large numbers
        assertEquals(Integer.MAX_VALUE / 2, Average.average(new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE}));

        // Test for empty array (should throw an exception)
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(new int[]{});
        });
        assertTrue(exception.getMessage().contains("Numbers array cannot be empty or null"));

        // Test for null input (should throw exception)
        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(null);
        });
        assertTrue(nullException.getMessage().contains("Numbers array cannot be empty or null"));
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

    @Test
    public void averageTest() {
        // Test a normal array
        assertEquals(3, Average.average(new int[]{2, 3, 4}));
        
        // Test a single element array
        assertEquals(5, Average.average(new int[]{5}));
        
        // Test a negative values array
        assertEquals(-2, Average.average(new int[]{-3, -1, -2}));
        
        // Test a large numbers array
        assertEquals(1000, Average.average(new int[]{1000, 1000, 1000, 1000}));
        
        // Testing exception for null input
        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(null);
        });
        assertEquals("Numbers array cannot be empty or null", nullException.getMessage());

        // Testing exception for empty array
        Exception emptyException = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(new int[]{});
        });
        assertEquals("Numbers array cannot be empty or null", emptyException.getMessage());
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {
    @Test
    public void averageTest() {
        // Test with valid int array
        assertEquals(3, Average.average(new int[]{2, 3, 4}));
        
        // Test with a single element
        assertEquals(7, Average.average(new int[]{7}));

        // Test with negative numbers
        assertEquals(-1, Average.average(new int[]{-2, 0, -2}));
        
        // Test the Average.average with double array should not interfere with int test
        assertThrows(NoSuchMethodError.class, () -> Average.average(new double[]{2.5, 3.5}));
        
        // Test with empty array should throw IllegalArgumentException
        Exception exception = assertThrows(IllegalArgumentException.class, () -> Average.average(new int[]{}));
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
        
        // Test with null array should also throw IllegalArgumentException
        Exception nullException = assertThrows(IllegalArgumentException.class, () -> Average.average(null));
        assertEquals("Numbers array cannot be empty or null", nullException.getMessage());
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {
    @Test
    public void testValidAverage() {
        // Test case for a valid numbers array
        int[] numbers = {2, 4, 6, 8};
        assertEquals(5, Average.average(numbers), "The average of the numbers must be 5");
    }
    
    @Test
    public void testAverageWithSingleElement() {
        // Test case for a single-element numbers array
        int[] singleNumber = {10};
        assertEquals(10, Average.average(singleNumber), "The average of a single number must be the number itself");
    }
    
    @Test
    public void testAverageWithNegativeNumbers() {
        // Test case including negative numbers
        int[] numbersWithNegatives = {-2, -4, 6, 8};
        assertEquals(2, Average.average(numbersWithNegatives), "The average should include negative numbers correctly");
    }

    @Test
    public void testEmptyArray() {
        // Test case for empty array
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(new int[]{});
        });
        
        String expectedMessage = "Numbers array cannot be empty or null";
        String actualMessage = exception.getMessage();
        
        assertTrue(actualMessage.contains(expectedMessage), "Empty array should throw an IllegalArgumentException with correct message");
    }
    
    @Test
    public void testNullArray() {
        // Test case for null array
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(null);
        });
        
        String expectedMessage = "Numbers array cannot be empty or null";
        String actualMessage = exception.getMessage();
        
        assertTrue(actualMessage.contains(expectedMessage), "Null array should throw an IllegalArgumentException with correct message");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {
    
    @Test
    public void averageTest() {
        // Test with a valid array of numbers
        int[] validNumbers = {1, 2, 3, 4, 5};
        assertEquals(3, Average.average(validNumbers), "The average should be 3");
        
        // Test with a single number
        int[] singleNumber = {42};
        assertEquals(42, Average.average(singleNumber), "The average of a single number should be the number itself");
        
        // Test to verify the behavior when passing an empty array
        int[] emptyNumbers = {};
        Exception exception = assertThrows(IllegalArgumentException.class, () -> Average.average(emptyNumbers));
        assertEquals("Numbers array cannot be empty or null", exception.getMessage(), "Expected IllegalArgumentException for an empty array");
        
        // Test to verify the behavior when passing a null array
        int[] nullNumbers = null;
        Exception nullException = assertThrows(IllegalArgumentException.class, () -> Average.average(nullNumbers));
        assertEquals("Numbers array cannot be empty or null", nullException.getMessage(), "Expected IllegalArgumentException for null input");
        
        // Test with large numbers to check for integer overflow
        int[] largeNumbers = {Integer.MAX_VALUE, Integer.MAX_VALUE};
        assertEquals(Integer.MAX_VALUE, Average.average(largeNumbers), "The average should handle the overflow scenario correctly");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

    @Test
    public void testWithValidArray() {
        int[] numbers = {10, 20, 30, 40, 50};
        int expectedAverage = 30;
        int actualAverage = Average.average(numbers);
        assertEquals(expectedAverage, actualAverage, "The average of a valid array should be calculated correctly.");
    }

    @Test
    public void testWithSingleElementArray() {
        int[] numbers = {7};
        int expectedAverage = 7;
        int actualAverage = Average.average(numbers);
        assertEquals(expectedAverage, actualAverage, "The average of a single-element array should be the element itself.");
    }

    @Test
    public void testWithEmptyArray() {
        int[] numbers = {};
        Exception exception = assertThrows(IllegalArgumentException.class, () -> Average.average(numbers));
        assertEquals("Numbers array cannot be empty or null", exception.getMessage(), "An empty array should throw an IllegalArgumentException.");
    }

    @Test
    public void testWithNullArray() {
        int[] numbers = null;
        Exception exception = assertThrows(IllegalArgumentException.class, () -> Average.average(numbers));
        assertEquals("Numbers array cannot be empty or null", exception.getMessage(), "A null array should throw an IllegalArgumentException.");
    }

    // This test checks correct handling of potential integer overflow.
    @Test
    public void testWithLargeNumbers() {
        // Assuming the overflow behavior is not part of the specification.
        // This test would be a point of discussion for expected behavior with the development team.
        int[] numbers = {Integer.MAX_VALUE, Integer.MAX_VALUE};
        int expectedAverage = Integer.MAX_VALUE; // Averaging two maximum integers should normally cause overflow.
        int actualAverage = Average.average(numbers);
        assertEquals(expectedAverage, actualAverage, "The average of large numbers should handle overflow correctly if it is within the method specification.");
    }
}


