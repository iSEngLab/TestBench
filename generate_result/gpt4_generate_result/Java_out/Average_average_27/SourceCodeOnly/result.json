{
    "project_name": "Java",
    "file_name": "Average.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/Average.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * find average value of an int array\n     *\n     * @param numbers the array contains element and the sum does not excess long\n     *                value limit\n     * @return average value\n     */",
    "source_code": "\npublic static int average(int[] numbers) {\n    if (numbers == null || numbers.length == 0) {\n        throw new IllegalArgumentException(\"Numbers array cannot be empty or null\");\n    }\n    long sum = 0;\n    for (int number : numbers) {\n        sum += number;\n    }\n    return (int) (sum / numbers.length);\n}\n",
    "class_name": "Average",
    "method_name": "average",
    "arguments": [
        "int[] numbers"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    \n    @Test\n    public void testAverageWithValidArray() {\n        // Given\n        int[] numbers = {1, 2, 3, 4, 5};\n        \n        // When\n        int result = Average.average(numbers);\n        \n        // Then\n        assertEquals(3, result);\n    }\n    \n    @Test\n    public void testAverageWithOneElement() {\n        // Given\n        int[] numbers = {42};\n        \n        // When\n        int result = Average.average(numbers);\n        \n        // Then\n        assertEquals(42, result);\n    }\n    \n    @Test\n    public void testAverageWithLargeNumbers() {\n        // Given\n        int[] numbers = {Integer.MAX_VALUE, Integer.MAX_VALUE};\n        \n        // When\n        int result = Average.average(numbers);\n        \n        // Then\n        assertEquals(Integer.MAX_VALUE, result);\n    }\n\n    @Test\n    public void testAverageWithNegativeNumbers() {\n        // Given\n        int[] numbers = {-1, -2, -3, -4, -5};\n        \n        // When\n        int result = Average.average(numbers);\n        \n        // Then\n        assertEquals(-3, result);\n    }\n\n    @Test\n    public void testAverageWithMixedNumbers() {\n        // Given\n        int[] numbers = {-2, -1, 0, 1, 2};\n        \n        // When\n        int result = Average.average(numbers);\n        \n        // Then\n        assertEquals(0, result);\n    }\n    \n    @Test\n    public void testAverageThrowsExceptionForEmptyArray() {\n        // Given\n        int[] numbers = {};\n        \n        // When & Then\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(numbers);\n        });\n    }\n    \n    @Test\n    public void testAverageThrowsExceptionForNullInput() {\n        // Given\n        int[] numbers = null;\n        \n        // When & Then\n        assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(numbers);\n        });\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageValidArrayTest() {\n        assertEquals(3, Maths.average(new int[] { 2, 3, 4 }));\n        assertEquals(2, Maths.average(new int[] { 1, 2, 3 }));\n        assertEquals(0, Maths.average(new int[] { -1, 0, 1 }));\n    }\n\n    @Test\n    public void averageSingleElementArrayTest() {\n        assertEquals(10, Maths.average(new int[] { 10 }));\n    }\n\n    @Test\n    public void averageLargeValuesArrayTest() {\n        assertEquals(2147483647, Maths.average(new int[] { 2147483647, 2147483647 }));\n    }\n\n    @Test\n    public void averageNegativeNumbersArrayTest() {\n        assertEquals(-2, Maths.average(new int[] { -1, -2, -3 }));\n    }\n\n    @Test\n    public void averageEmptyArrayTest() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Maths.average(new int[] {});\n        });\n    }\n\n    @Test\n    public void averageNullArrayTest() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Maths.average(null);\n        });\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void averageTest() {\n        // Test with a standard array\n        assertEquals(3, Main.average(new int[] {2, 3, 4}));\n        \n        // Test with an array containing a single element\n        assertEquals(7, Main.average(new int[] {7}));\n        \n        // Test with an array containing negative and positive numbers\n        assertEquals(0, Main.average(new int[] {-3, -2, 2, 3}));\n\n        // Test with an array containing zeros\n        assertEquals(0, Main.average(new int[] {0, 0, 0, 0}));\n\n        // Test throwing an exception when passing a null array\n        Exception exceptionNull = assertThrows(IllegalArgumentException.class, () -> {\n            Main.average(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exceptionNull.getMessage());\n        \n        // Test throwing an exception when passing an empty array\n        Exception exceptionEmpty = assertThrows(IllegalArgumentException.class, () -> {\n            Main.average(new int[] {});\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exceptionEmpty.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageWithValidNumbers() {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int expected = 3;\n        int actual = Average.average(numbers);\n        assertEquals(expected, actual, \"The average of valid numbers should be calculated correctly.\");\n    }\n\n    @Test\n    public void averageWithSingleNumber() {\n        int[] numbers = {42};\n        int expected = 42;\n        int actual = Average.average(numbers);\n        assertEquals(expected, actual, \"The average of a single number should be the number itself.\");\n    }\n\n    @Test\n    public void averageWithNegativeNumbers() {\n        int[] numbers = {-1, -2, -3, -4, -5};\n        int expected = -3;\n        int actual = Average.average(numbers);\n        assertEquals(expected, actual, \"The average of negative numbers should be calculated correctly.\");\n    }\n\n    @Test\n    public void averageWithMixedNumbers() {\n        int[] numbers = {-1, 0, 1, 2, 3};\n        int expected = 1; // sum is 5 divided by 5\n        int actual = Average.average(numbers);\n        assertEquals(expected, actual, \"The average of a mix of positive, negative, and zero values should be calculated correctly.\");\n    }\n\n    @Test\n    public void averageThrowsIllegalArgumentExceptionForEmptyArray() {\n        int[] numbers = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(numbers);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage(), \"An IllegalArgumentException should be thrown for an empty array.\");\n    }\n\n    @Test\n    public void averageThrowsIllegalArgumentExceptionForNullArray() {\n        int[] numbers = null;\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(numbers);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage(), \"An IllegalArgumentException should be thrown for a null array.\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void averageTest() {\n        // Test with a normal array\n        assertEquals(3, Average.average(new int[]{2, 3, 4}), \"The average of 2, 3, 4 should be 3\");\n\n        // Test with an array that has a single element\n        assertEquals(5, Average.average(new int[]{5}), \"The average of a single number 5 should be 5\");\n        \n        // Test with an array that has negative numbers\n        assertEquals(-2, Average.average(new int[]{-1, -2, -3}), \"The average of -1, -2, -3 should be -2\");\n        \n        // Test with an array that has both positive and negative numbers\n        assertEquals(0, Average.average(new int[]{-2, 0, 2}), \"The average of -2, 0, 2 should be 0\");\n\n        // Test with an array that might cause an overflow\n        assertDoesNotThrow(() -> Average.average(new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE}), \"Calculation should handle overflow properly without throwing an exception\");\n\n        // Test with an empty array (should throw an exception)\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(new int[]{});\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage(), \"An empty array should throw an IllegalArgumentException with the message 'Numbers array cannot be empty or null'\");\n\n        // Test with a null array (should throw an exception)\n        IllegalArgumentException nullException = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", nullException.getMessage(), \"A null array should throw an IllegalArgumentException with the message 'Numbers array cannot be empty or null'\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTestValidInput() {\n        assertEquals(3, BasicMath.average(new int[] {2, 3, 4})); // Average of 2, 3, 4 should be 3\n        assertEquals(0, BasicMath.average(new int[] {-1, 0, 1})); // Average of -1, 0, 1 should be 0\n        assertEquals(-2, BasicMath.average(new int[] {-4, -2, 0, -2})); // Average of -4, -2, 0, -2 should be -2\n    }\n\n    @Test\n    public void averageTestEmptyArray() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            BasicMath.average(new int[] {});\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n\n    @Test\n    public void averageTestNullInput() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            BasicMath.average(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void averageTestValid() {\n        assertEquals(3, YourClassName.average(new int[]{2, 3, 4}), \"The average of 2, 3, 4 should be 3\");\n        assertEquals(5, YourClassName.average(new int[]{5, 5, 5, 5}), \"The average of 5, 5, 5, 5 should be 5\");\n        assertEquals(0, YourClassName.average(new int[]{0, 0, 0, 0}), \"The average of 0, 0, 0, 0 should be 0\");\n        assertEquals(-2, YourClassName.average(new int[]{-3, -1, -2, -2}), \"The average of -3, -1, -2, -2 should be -2\");\n    }\n\n    @Test\n    public void averageTestEmptyArray() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            YourClassName.average(new int[]{});\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage(), \"Exception message should be 'Numbers array cannot be empty or null'\");\n    }\n\n    @Test\n    public void averageTestNullInput() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            YourClassName.average(null);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage(), \"Exception message should be 'Numbers array cannot be empty or null'\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void testAverageWithPositiveNumbers() {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int result = Average.average(numbers);\n        assertEquals(3, result);\n    }\n\n    @Test\n    public void testAverageWithNegativeNumbers() {\n        int[] numbers = {-1, -2, -3, -4, -5};\n        int result = Average.average(numbers);\n        assertEquals(-3, result);\n    }\n\n    @Test\n    public void testAverageWithMixedNumbers() {\n        int[] numbers = {-1, 2, -3, 4, -5};\n        int result = Average.average(numbers);\n        assertEquals(-0.6, result, 0.1);\n    }\n\n    @Test\n    public void testAverageWithSingleNumber() {\n        int[] numbers = {100};\n        int result = Average.average(numbers);\n        assertEquals(100, result);\n    }\n\n    @Test\n    public void testAverageWithEmptyArray() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            int[] numbers = {};\n            Average.average(numbers);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n\n    @Test\n    public void testAverageWithNullArray() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            int[] numbers = null;\n            Average.average(numbers);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n\n    @Test\n    public void testAverageWithNonEmptyArray() {\n        // Given\n        int[] numbers = new int[]{2, 4, 6, 8};\n\n        // When\n        int actualAverage = Average.average(numbers);\n\n        // Then\n        assertEquals(5, actualAverage, \"The average should be 5\");\n    }\n\n    @Test\n    public void testAverageWithSingleElementArray() {\n        // Given\n        int[] numbers = new int[]{5};\n\n        // When\n        int actualAverage = Average.average(numbers);\n\n        // Then\n        assertEquals(5, actualAverage, \"The average of a single element array should be the element itself\");\n    }\n\n    @Test\n    public void testAverageWithNegativeNumbers() {\n        // Given\n        int[] numbers = new int[]{-3, -2, -1, 0, 1, 2, 3};\n\n        // When\n        int actualAverage = Average.average(numbers);\n\n        // Then\n        assertEquals(0, actualAverage, \"The average of this mixed numbers array should be 0\");\n    }\n\n    @Test\n    public void testAverageWithEmptyArray() {\n        // Given\n        int[] numbers = {};\n\n        // When / Then\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(numbers);\n        });\n\n        //Assert\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage(), \"An empty array should throw IllegalArgumentException with the correct message\");\n    }\n\n    @Test\n    public void testAverageWithNullArray() {\n        // Given\n        int[] numbers = null;\n\n        // When / Then\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Average.average(numbers);\n        });\n\n        //Assert\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage(), \"A null array should throw IllegalArgumentException with the correct message\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class AverageTest {\n\n    @Test\n    public void testAverageValidArray() {\n        int[] validNumbers = {1, 2, 3, 4, 5};\n        int expectedAverage = 3;\n        assertEquals(expectedAverage, Maths.average(validNumbers), \"The average of a valid numbers array should be calculated properly\");\n    }\n\n    @Test\n    public void testAverageEmptyArray() {\n        int[] emptyNumbers = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Maths.average(emptyNumbers);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n\n    @Test\n    public void testAverageNullArray() {\n        int[] nullNumbers = null;\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Maths.average(nullNumbers);\n        });\n        assertEquals(\"Numbers array cannot be empty or null\", exception.getMessage());\n    }\n}"
    ]
}