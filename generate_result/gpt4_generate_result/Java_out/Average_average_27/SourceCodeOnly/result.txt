Source code: 


public static int average(int[] numbers) {
    if (numbers == null || numbers.length == 0) {
        throw new IllegalArgumentException("Numbers array cannot be empty or null");
    }
    long sum = 0;
    for (int number : numbers) {
        sum += number;
    }
    return (int) (sum / numbers.length);
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {
    
    @Test
    public void testAverageWithValidArray() {
        // Given
        int[] numbers = {1, 2, 3, 4, 5};
        
        // When
        int result = Average.average(numbers);
        
        // Then
        assertEquals(3, result);
    }
    
    @Test
    public void testAverageWithOneElement() {
        // Given
        int[] numbers = {42};
        
        // When
        int result = Average.average(numbers);
        
        // Then
        assertEquals(42, result);
    }
    
    @Test
    public void testAverageWithLargeNumbers() {
        // Given
        int[] numbers = {Integer.MAX_VALUE, Integer.MAX_VALUE};
        
        // When
        int result = Average.average(numbers);
        
        // Then
        assertEquals(Integer.MAX_VALUE, result);
    }

    @Test
    public void testAverageWithNegativeNumbers() {
        // Given
        int[] numbers = {-1, -2, -3, -4, -5};
        
        // When
        int result = Average.average(numbers);
        
        // Then
        assertEquals(-3, result);
    }

    @Test
    public void testAverageWithMixedNumbers() {
        // Given
        int[] numbers = {-2, -1, 0, 1, 2};
        
        // When
        int result = Average.average(numbers);
        
        // Then
        assertEquals(0, result);
    }
    
    @Test
    public void testAverageThrowsExceptionForEmptyArray() {
        // Given
        int[] numbers = {};
        
        // When & Then
        assertThrows(IllegalArgumentException.class, () -> {
            Average.average(numbers);
        });
    }
    
    @Test
    public void testAverageThrowsExceptionForNullInput() {
        // Given
        int[] numbers = null;
        
        // When & Then
        assertThrows(IllegalArgumentException.class, () -> {
            Average.average(numbers);
        });
    }
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {
    @Test
    public void averageValidArrayTest() {
        assertEquals(3, Maths.average(new int[] { 2, 3, 4 }));
        assertEquals(2, Maths.average(new int[] { 1, 2, 3 }));
        assertEquals(0, Maths.average(new int[] { -1, 0, 1 }));
    }

    @Test
    public void averageSingleElementArrayTest() {
        assertEquals(10, Maths.average(new int[] { 10 }));
    }

    @Test
    public void averageLargeValuesArrayTest() {
        assertEquals(2147483647, Maths.average(new int[] { 2147483647, 2147483647 }));
    }

    @Test
    public void averageNegativeNumbersArrayTest() {
        assertEquals(-2, Maths.average(new int[] { -1, -2, -3 }));
    }

    @Test
    public void averageEmptyArrayTest() {
        assertThrows(IllegalArgumentException.class, () -> {
            Maths.average(new int[] {});
        });
    }

    @Test
    public void averageNullArrayTest() {
        assertThrows(IllegalArgumentException.class, () -> {
            Maths.average(null);
        });
    }
}


No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

    @Test
    public void averageTest() {
        // Test with a standard array
        assertEquals(3, Main.average(new int[] {2, 3, 4}));
        
        // Test with an array containing a single element
        assertEquals(7, Main.average(new int[] {7}));
        
        // Test with an array containing negative and positive numbers
        assertEquals(0, Main.average(new int[] {-3, -2, 2, 3}));

        // Test with an array containing zeros
        assertEquals(0, Main.average(new int[] {0, 0, 0, 0}));

        // Test throwing an exception when passing a null array
        Exception exceptionNull = assertThrows(IllegalArgumentException.class, () -> {
            Main.average(null);
        });
        assertEquals("Numbers array cannot be empty or null", exceptionNull.getMessage());
        
        // Test throwing an exception when passing an empty array
        Exception exceptionEmpty = assertThrows(IllegalArgumentException.class, () -> {
            Main.average(new int[] {});
        });
        assertEquals("Numbers array cannot be empty or null", exceptionEmpty.getMessage());
    }
}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {
    @Test
    public void averageWithValidNumbers() {
        int[] numbers = {1, 2, 3, 4, 5};
        int expected = 3;
        int actual = Average.average(numbers);
        assertEquals(expected, actual, "The average of valid numbers should be calculated correctly.");
    }

    @Test
    public void averageWithSingleNumber() {
        int[] numbers = {42};
        int expected = 42;
        int actual = Average.average(numbers);
        assertEquals(expected, actual, "The average of a single number should be the number itself.");
    }

    @Test
    public void averageWithNegativeNumbers() {
        int[] numbers = {-1, -2, -3, -4, -5};
        int expected = -3;
        int actual = Average.average(numbers);
        assertEquals(expected, actual, "The average of negative numbers should be calculated correctly.");
    }

    @Test
    public void averageWithMixedNumbers() {
        int[] numbers = {-1, 0, 1, 2, 3};
        int expected = 1; // sum is 5 divided by 5
        int actual = Average.average(numbers);
        assertEquals(expected, actual, "The average of a mix of positive, negative, and zero values should be calculated correctly.");
    }

    @Test
    public void averageThrowsIllegalArgumentExceptionForEmptyArray() {
        int[] numbers = {};
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(numbers);
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage(), "An IllegalArgumentException should be thrown for an empty array.");
    }

    @Test
    public void averageThrowsIllegalArgumentExceptionForNullArray() {
        int[] numbers = null;
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(numbers);
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage(), "An IllegalArgumentException should be thrown for a null array.");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

    @Test
    public void averageTest() {
        // Test with a normal array
        assertEquals(3, Average.average(new int[]{2, 3, 4}), "The average of 2, 3, 4 should be 3");

        // Test with an array that has a single element
        assertEquals(5, Average.average(new int[]{5}), "The average of a single number 5 should be 5");
        
        // Test with an array that has negative numbers
        assertEquals(-2, Average.average(new int[]{-1, -2, -3}), "The average of -1, -2, -3 should be -2");
        
        // Test with an array that has both positive and negative numbers
        assertEquals(0, Average.average(new int[]{-2, 0, 2}), "The average of -2, 0, 2 should be 0");

        // Test with an array that might cause an overflow
        assertDoesNotThrow(() -> Average.average(new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE}), "Calculation should handle overflow properly without throwing an exception");

        // Test with an empty array (should throw an exception)
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(new int[]{});
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage(), "An empty array should throw an IllegalArgumentException with the message 'Numbers array cannot be empty or null'");

        // Test with a null array (should throw an exception)
        IllegalArgumentException nullException = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(null);
        });
        assertEquals("Numbers array cannot be empty or null", nullException.getMessage(), "A null array should throw an IllegalArgumentException with the message 'Numbers array cannot be empty or null'");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {
    @Test
    public void averageTestValidInput() {
        assertEquals(3, BasicMath.average(new int[] {2, 3, 4})); // Average of 2, 3, 4 should be 3
        assertEquals(0, BasicMath.average(new int[] {-1, 0, 1})); // Average of -1, 0, 1 should be 0
        assertEquals(-2, BasicMath.average(new int[] {-4, -2, 0, -2})); // Average of -4, -2, 0, -2 should be -2
    }

    @Test
    public void averageTestEmptyArray() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            BasicMath.average(new int[] {});
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
    }

    @Test
    public void averageTestNullInput() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            BasicMath.average(null);
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

    @Test
    public void averageTestValid() {
        assertEquals(3, YourClassName.average(new int[]{2, 3, 4}), "The average of 2, 3, 4 should be 3");
        assertEquals(5, YourClassName.average(new int[]{5, 5, 5, 5}), "The average of 5, 5, 5, 5 should be 5");
        assertEquals(0, YourClassName.average(new int[]{0, 0, 0, 0}), "The average of 0, 0, 0, 0 should be 0");
        assertEquals(-2, YourClassName.average(new int[]{-3, -1, -2, -2}), "The average of -3, -1, -2, -2 should be -2");
    }

    @Test
    public void averageTestEmptyArray() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            YourClassName.average(new int[]{});
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage(), "Exception message should be 'Numbers array cannot be empty or null'");
    }

    @Test
    public void averageTestNullInput() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            YourClassName.average(null);
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage(), "Exception message should be 'Numbers array cannot be empty or null'");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

    @Test
    public void testAverageWithPositiveNumbers() {
        int[] numbers = {1, 2, 3, 4, 5};
        int result = Average.average(numbers);
        assertEquals(3, result);
    }

    @Test
    public void testAverageWithNegativeNumbers() {
        int[] numbers = {-1, -2, -3, -4, -5};
        int result = Average.average(numbers);
        assertEquals(-3, result);
    }

    @Test
    public void testAverageWithMixedNumbers() {
        int[] numbers = {-1, 2, -3, 4, -5};
        int result = Average.average(numbers);
        assertEquals(-0.6, result, 0.1);
    }

    @Test
    public void testAverageWithSingleNumber() {
        int[] numbers = {100};
        int result = Average.average(numbers);
        assertEquals(100, result);
    }

    @Test
    public void testAverageWithEmptyArray() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            int[] numbers = {};
            Average.average(numbers);
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
    }

    @Test
    public void testAverageWithNullArray() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            int[] numbers = null;
            Average.average(numbers);
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {

    @Test
    public void testAverageWithNonEmptyArray() {
        // Given
        int[] numbers = new int[]{2, 4, 6, 8};

        // When
        int actualAverage = Average.average(numbers);

        // Then
        assertEquals(5, actualAverage, "The average should be 5");
    }

    @Test
    public void testAverageWithSingleElementArray() {
        // Given
        int[] numbers = new int[]{5};

        // When
        int actualAverage = Average.average(numbers);

        // Then
        assertEquals(5, actualAverage, "The average of a single element array should be the element itself");
    }

    @Test
    public void testAverageWithNegativeNumbers() {
        // Given
        int[] numbers = new int[]{-3, -2, -1, 0, 1, 2, 3};

        // When
        int actualAverage = Average.average(numbers);

        // Then
        assertEquals(0, actualAverage, "The average of this mixed numbers array should be 0");
    }

    @Test
    public void testAverageWithEmptyArray() {
        // Given
        int[] numbers = {};

        // When / Then
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(numbers);
        });

        //Assert
        assertEquals("Numbers array cannot be empty or null", exception.getMessage(), "An empty array should throw IllegalArgumentException with the correct message");
    }

    @Test
    public void testAverageWithNullArray() {
        // Given
        int[] numbers = null;

        // When / Then
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Average.average(numbers);
        });

        //Assert
        assertEquals("Numbers array cannot be empty or null", exception.getMessage(), "A null array should throw IllegalArgumentException with the correct message");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class AverageTest {

    @Test
    public void testAverageValidArray() {
        int[] validNumbers = {1, 2, 3, 4, 5};
        int expectedAverage = 3;
        assertEquals(expectedAverage, Maths.average(validNumbers), "The average of a valid numbers array should be calculated properly");
    }

    @Test
    public void testAverageEmptyArray() {
        int[] emptyNumbers = {};
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Maths.average(emptyNumbers);
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
    }

    @Test
    public void testAverageNullArray() {
        int[] nullNumbers = null;
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Maths.average(nullNumbers);
        });
        assertEquals("Numbers array cannot be empty or null", exception.getMessage());
    }
}


