{
    "project_name": "Java",
    "file_name": "BinaryTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/BinaryTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": "/**\n     * Method to find a Node with a certain value\n     *\n     * @param key Value being looked for\n     * @return The node if it finds it, otherwise returns the parent\n     */",
    "source_code": "\npublic Node find(int key) {\n    Node current = root;\n    while (current != null) {\n        if (key < current.data) {\n            if (current.left == null) {\n                return current; // The key isn't exist, returns the parent\n            }\n            current = current.left;\n        } else if (key > current.data) {\n            if (current.right == null) {\n                return current;\n            }\n            current = current.right;\n        } else { // If you find the value return it\n            return current;\n        }\n    }\n    return null;\n}\n",
    "class_name": "BinaryTree",
    "method_name": "find",
    "arguments": [
        "int key"
    ],
    "generate_test": [
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n\n    @Test\n    public void findTest() {\n        BinaryTree binaryTree = new BinaryTree();\n        \n        // Insert nodes.\n        binaryTree.put(5);\n        binaryTree.put(3);\n        binaryTree.put(7);\n        binaryTree.put(2);\n        binaryTree.put(4);\n        binaryTree.put(6);\n        binaryTree.put(8);\n        \n        // Check if existing nodes are found.\n        assertNotNull(binaryTree.find(3), \"Node with key 3 should be found.\");\n        assertNotNull(binaryTree.find(7), \"Node with key 7 should be found.\");\n        \n        // Check if the correct node is found.\n        assertEquals(3, binaryTree.find(3).data, \"The found node should have the data 3.\");\n        assertEquals(7, binaryTree.find(7).data, \"The found node should have the data 7.\");\n        \n        // Check if non-existing node returns its parent if it was to be inserted.\n        assertEquals(3, binaryTree.find(1).data, \"The found node should have the data of its parent.\");\n        assertEquals(7, binaryTree.find(9).data, \"The found node should have the data of its parent.\");\n        \n        // Check if looking for a non-existing node outside the bounds returns null.\n        assertNull(binaryTree.find(0), \"Searching for a non-existing node less than all nodes should return null.\");\n        assertNull(binaryTree.find(10), \"Searching for a non-existing node greater than all nodes should return null.\");\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n\n    private BinaryTree binaryTree;\n\n    @BeforeEach\n    void setUp() {\n        binaryTree = new BinaryTree();\n        binaryTree.put(50);\n        binaryTree.put(30);\n        binaryTree.put(70);\n        binaryTree.put(10);\n        binaryTree.put(40);\n        binaryTree.put(60);\n        binaryTree.put(80);\n    }\n\n    @Test\n    public void findExistingKeyTest() {\n        // Try to find an existing key\n        BinaryTree.Node foundNode = binaryTree.find(30);\n        assertNotNull(foundNode);\n        assertEquals(30, foundNode.data);\n    }\n\n    @Test\n    public void findNonExistingKeyTest() {\n        // Try to find a non-existing key, should return the would-be parent\n        BinaryTree.Node foundNode = binaryTree.find(45);\n        assertNotNull(foundNode);\n        assertEquals(40, foundNode.data);\n    }\n\n    @Test\n    public void findRootTest() {\n        // Try to find the root\n        BinaryTree.Node foundNode = binaryTree.find(50);\n        assertNotNull(foundNode);\n        assertEquals(50, foundNode.data);\n    }\n\n    @Test\n    public void findOnEmptyTreeTest() {\n        // Creating an empty tree to find a value in it\n        BinaryTree emptyTree = new BinaryTree();\n        BinaryTree.Node foundNode = emptyTree.find(100);\n        assertNull(foundNode);\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    \n    private BinaryTree tree;\n    \n    @BeforeEach\n    public void setUp() {\n        tree = new BinaryTree();\n        tree.put(10);\n        tree.put(5);\n        tree.put(15);\n        tree.put(3);\n        tree.put(7);\n        tree.put(12);\n        tree.put(18);\n    }\n\n    @Test\n    public void findTest() {\n        // Existing node\n        assertNotNull(tree.find(10), \"Should find node with data 10\");\n        assertEquals(10, tree.find(10).data, \"Should return node with data 10\");\n        \n        // Left child\n        assertNotNull(tree.find(5), \"Should find node with data 5\");\n        assertEquals(5, tree.find(5).data, \"Should return node with data 5\");\n\n        // Right child\n        assertNotNull(tree.find(15), \"Should find node with data 15\");\n        assertEquals(15, tree.find(15).data, \"Should return node with data 15\");\n\n        // Non-existing node, smaller than root\n        assertNotNull(tree.find(1), \"Should find parent node for data 1\");\n        assertEquals(3, tree.find(1).data, \"Should return node with data 3 as parent of non-existent node 1\");\n\n        // Non-existing node, larger than root\n        assertNotNull(tree.find(20), \"Should find parent node for data 20\");\n        assertEquals(18, tree.find(20).data, \"Should return node with data 18 as parent of non-existent node 20\");\n\n        // Leaf node\n        assertNotNull(tree.find(7), \"Should find leaf node with data 7\");\n        assertEquals(7, tree.find(7).data, \"Should return leaf node with data 7\");\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        // Create a binary tree\n        BinaryTree binaryTree = new BinaryTree();\n\n        // Insert nodes into the binary tree\n        binaryTree.put(20);\n        binaryTree.put(10);\n        binaryTree.put(30);\n        binaryTree.put(5);\n        binaryTree.put(15);\n        binaryTree.put(25);\n        binaryTree.put(35);\n\n        // Test find for existing nodes\n        assertNotNull(binaryTree.find(20)); // the root\n        assertEquals(10, binaryTree.find(10).data);\n        assertEquals(30, binaryTree.find(30).data);\n        assertEquals(5, binaryTree.find(5).data);\n        assertEquals(15, binaryTree.find(15).data);\n        assertEquals(25, binaryTree.find(25).data);\n        assertEquals(35, binaryTree.find(35).data);\n\n        // Test find for non-existing node, should return parent (closest node)\n        assertEquals(15, binaryTree.find(12).data); // Non-existing smaller than 15 but greater than 10\n        assertEquals(35, binaryTree.find(40).data); // Non-existing larger than 35\n        assertEquals(5, binaryTree.find(3).data); // Non-existing smaller than any inserted node\n        assertEquals(20, binaryTree.find(18).data); // Non-existing smaller than 20 but larger than 15\n\n        // Test find for a value not in the tree and no close parent (empty tree case)\n        BinaryTree emptyTree = new BinaryTree();\n        assertNull(emptyTree.find(10)); // Non-existing in an empty tree\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    private BinaryTree binaryTree;\n    \n    @BeforeEach\n    public void setUp() {\n        binaryTree = new BinaryTree();\n        // Set up a simple binary tree with root, left and right children.\n        binaryTree.put(10); // root\n        binaryTree.put(5);  // left child of root\n        binaryTree.put(15); // right child of root\n    }\n    \n    @Test\n    public void findTest() {\n        // Test to find a node that exists (the root)\n        Node foundNode = binaryTree.find(10);\n        assertNotNull(foundNode, \"The node should not be null\");\n        assertEquals(10, foundNode.data, \"The data of the found node should be 10\");\n\n        // Test to find a node that exists (left child)\n        foundNode = binaryTree.find(5);\n        assertNotNull(foundNode, \"The node should not be null\");\n        assertEquals(5, foundNode.data, \"The data of the found node should be 5\");\n\n        // Test to find a node that exists (right child)\n        foundNode = binaryTree.find(15);\n        assertNotNull(foundNode, \"The node should not be null\");\n        assertEquals(15, foundNode.data, \"The data of the found node should be 15\");\n\n        // Test to find a node that does not exist; should return the parent\n        foundNode = binaryTree.find(13);\n        assertNotNull(foundNode, \"The node should not be null\");\n        assertEquals(15, foundNode.data, \"The data of the parent should be 15\");\n\n        // Test to find a node that does not exist and has no potential parent (i.e., would be root)\n        binaryTree = new BinaryTree(); // create an empty tree\n        foundNode = binaryTree.find(20);\n        assertNull(foundNode, \"The node should be null\");\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    private BinaryTree binaryTree;\n\n    @BeforeEach\n    public void setUp() {\n        binaryTree = new BinaryTree();\n        binaryTree.put(20);\n        binaryTree.put(10);\n        binaryTree.put(30);\n        binaryTree.put(5);\n        binaryTree.put(15);\n        binaryTree.put(25);\n        binaryTree.put(35);\n    }\n\n    @Test\n    public void findTest() {\n        // Test finding an existing node\n        BinaryTree.Node foundNode = binaryTree.find(15);\n        assertNotNull(foundNode);\n        assertEquals(15, foundNode.data);\n\n        // Test finding the root node\n        foundNode = binaryTree.find(20);\n        assertNotNull(foundNode);\n        assertEquals(20, foundNode.data);\n        assertNull(foundNode.parent); // root node's parent is null\n\n        // Test finding non-existent node, should return the would-be parent\n        foundNode = binaryTree.find(17);\n        assertNotNull(foundNode);\n        assertEquals(15, foundNode.data);  // 17 would be right child of 15\n\n        foundNode = binaryTree.find(40);\n        assertNotNull(foundNode);\n        assertEquals(35, foundNode.data); // 40 would be right child of 35\n\n        // Test when the tree is empty\n        binaryTree = new BinaryTree();\n        assertNull(binaryTree.find(100)); // Searching in an empty tree returns null\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n\n    private BinaryTree binaryTree;\n\n    @BeforeEach\n    public void setUp() {\n        binaryTree = new BinaryTree();\n        binaryTree.put(20);\n        binaryTree.put(10);\n        binaryTree.put(30);\n        binaryTree.put(5);\n        binaryTree.put(15);\n    }\n\n    @Test\n    public void findTest() {\n        // Test find existing node\n        BinaryTree.Node node = binaryTree.find(10);\n        assertNotNull(node, \"Node with key 10 should be found.\");\n        assertEquals(10, node.data, \"The data of the node should be 10.\");\n\n        // Test find non-existing node, should return the parent\n        node = binaryTree.find(13);\n        assertNotNull(node, \"Node 13 doesn't exist, should return its parent.\");\n        assertEquals(10, node.data, \"The data of the parent node should be 10.\");\n\n        // Test find non-existing node in empty tree\n        BinaryTree emptyTree = new BinaryTree();\n        node = emptyTree.find(100);\n        assertNull(node, \"Should not find any node in an empty tree.\");\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    private BinaryTree tree;\n\n    @BeforeEach\n    public void setUp() {\n        tree = new BinaryTree();\n    }\n\n    @Test\n    public void findTest() {\n        // Set up the binary tree with some nodes\n        tree.put(20);\n        tree.put(10);\n        tree.put(30);\n        tree.put(5);\n        tree.put(15);\n        tree.put(25);\n        tree.put(35);\n\n        // Test find with existing keys\n        assertEquals(20, tree.find(20).data);\n        assertEquals(10, tree.find(10).data);\n        assertEquals(30, tree.find(30).data);\n\n        // Test find with non-existing keys that would be on the left of a node\n        assertEquals(10, tree.find(8).data);\n        assertEquals(5, tree.find(2).data);\n\n        // Test find with non-existing keys that would be on the right of a node\n        assertEquals(15, tree.find(18).data);\n        assertEquals(35, tree.find(40).data);\n\n        // Test find with non-existing key with an empty tree\n        BinaryTree emptyTree = new BinaryTree();\n        assertNull(emptyTree.find(5));\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n\n    private BinaryTree binaryTree;\n\n    @BeforeEach\n    public void setUp() {\n        binaryTree = new BinaryTree();\n        // Populating the tree with some values\n        binaryTree.put(10);\n        binaryTree.put(5);\n        binaryTree.put(15);\n        binaryTree.put(3);\n        binaryTree.put(7);\n        binaryTree.put(12);\n    }\n\n    @Test\n    public void findTest() {\n        // Check for finding an existing key\n        assertEquals(10, binaryTree.find(10).data, \"Should find node with key 10.\");\n        \n        // Check for a non-existing key, should return the closest parent\n        assertEquals(5, binaryTree.find(6).data, \"Should return the parent node when key doesn't exist.\");\n        \n        // Check for finding the minimum key\n        assertEquals(3, binaryTree.find(3).data, \"Should find node with minimum key 3.\");\n\n        // Check for finding the maximum key\n        assertEquals(15, binaryTree.find(15).data, \"Should find node with maximum key 15.\");\n\n        // Check for finding a key that is smaller than any present in the tree\n        assertNull(binaryTree.find(1), \"Should return null when key is smaller than any node in the tree.\");\n        \n        // Check for finding a key that is larger than any present in the tree\n        assertEquals(15, binaryTree.find(20).data, \"Should return last node when key is larger than any in the tree.\");\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Clean up after each test method\n        binaryTree = null;\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        // Construct a binary tree for testing\n        BinaryTree bt = new BinaryTree();\n        bt.put(10); // root node\n        bt.put(5);  // left child of root\n        bt.put(15); // right child of root\n        bt.put(3);  // left child of node with value 5\n        bt.put(7);  // right child of node with value 5\n\n        // Test find existing nodes\n        assertEquals(10, bt.find(10).data, \"Should find the root node with value 10\");\n        assertEquals(5, bt.find(5).data, \"Should find the node with value 5\");\n        assertEquals(15, bt.find(15).data, \"Should find the node with value 15\");\n        assertEquals(3, bt.find(3).data, \"Should find the node with value 3\");\n        assertEquals(7, bt.find(7).data, \"Should find the node with value 7\");\n\n        // Test finding the correct parent nodes when searching for non-existing nodes\n        assertEquals(10, bt.find(13).data, \"Should return parent node with value 10 for non-existing node with key 13\");\n        assertEquals(5, bt.find(4).data, \"Should return parent node with value 5 for non-existing node with key 4\");\n        assertEquals(15, bt.find(20).data, \"Should return parent node with value 15 for non-existing node with key 20\");\n\n        // Test finding a non-existing node with no possible parent (empty tree or non-existing value lower than the smallest value)\n        BinaryTree emptyTree = new BinaryTree();\n        assertNull(emptyTree.find(10), \"Should return null for an empty tree\");\n        assertNull(bt.find(1), \"Should return null for key 1, which is less than any node in the tree\");\n    }\n}"
    ]
}