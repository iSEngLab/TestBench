Source code: 


public Node find(int key) {
    Node current = root;
    while (current != null) {
        if (key < current.data) {
            if (current.left == null) {
                return current; // The key isn't exist, returns the parent
            }
            current = current.left;
        } else if (key > current.data) {
            if (current.right == null) {
                return current;
            }
            current = current.right;
        } else { // If you find the value return it
            return current;
        }
    }
    return null;
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    @Test
    public void findTest() {
        BinaryTree binaryTree = new BinaryTree();
        
        // Insert nodes.
        binaryTree.put(5);
        binaryTree.put(3);
        binaryTree.put(7);
        binaryTree.put(2);
        binaryTree.put(4);
        binaryTree.put(6);
        binaryTree.put(8);
        
        // Check if existing nodes are found.
        assertNotNull(binaryTree.find(3), "Node with key 3 should be found.");
        assertNotNull(binaryTree.find(7), "Node with key 7 should be found.");
        
        // Check if the correct node is found.
        assertEquals(3, binaryTree.find(3).data, "The found node should have the data 3.");
        assertEquals(7, binaryTree.find(7).data, "The found node should have the data 7.");
        
        // Check if non-existing node returns its parent if it was to be inserted.
        assertEquals(3, binaryTree.find(1).data, "The found node should have the data of its parent.");
        assertEquals(7, binaryTree.find(9).data, "The found node should have the data of its parent.");
        
        // Check if looking for a non-existing node outside the bounds returns null.
        assertNull(binaryTree.find(0), "Searching for a non-existing node less than all nodes should return null.");
        assertNull(binaryTree.find(10), "Searching for a non-existing node greater than all nodes should return null.");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    private BinaryTree binaryTree;

    @BeforeEach
    void setUp() {
        binaryTree = new BinaryTree();
        binaryTree.put(50);
        binaryTree.put(30);
        binaryTree.put(70);
        binaryTree.put(10);
        binaryTree.put(40);
        binaryTree.put(60);
        binaryTree.put(80);
    }

    @Test
    public void findExistingKeyTest() {
        // Try to find an existing key
        BinaryTree.Node foundNode = binaryTree.find(30);
        assertNotNull(foundNode);
        assertEquals(30, foundNode.data);
    }

    @Test
    public void findNonExistingKeyTest() {
        // Try to find a non-existing key, should return the would-be parent
        BinaryTree.Node foundNode = binaryTree.find(45);
        assertNotNull(foundNode);
        assertEquals(40, foundNode.data);
    }

    @Test
    public void findRootTest() {
        // Try to find the root
        BinaryTree.Node foundNode = binaryTree.find(50);
        assertNotNull(foundNode);
        assertEquals(50, foundNode.data);
    }

    @Test
    public void findOnEmptyTreeTest() {
        // Creating an empty tree to find a value in it
        BinaryTree emptyTree = new BinaryTree();
        BinaryTree.Node foundNode = emptyTree.find(100);
        assertNull(foundNode);
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    
    private BinaryTree tree;
    
    @BeforeEach
    public void setUp() {
        tree = new BinaryTree();
        tree.put(10);
        tree.put(5);
        tree.put(15);
        tree.put(3);
        tree.put(7);
        tree.put(12);
        tree.put(18);
    }

    @Test
    public void findTest() {
        // Existing node
        assertNotNull(tree.find(10), "Should find node with data 10");
        assertEquals(10, tree.find(10).data, "Should return node with data 10");
        
        // Left child
        assertNotNull(tree.find(5), "Should find node with data 5");
        assertEquals(5, tree.find(5).data, "Should return node with data 5");

        // Right child
        assertNotNull(tree.find(15), "Should find node with data 15");
        assertEquals(15, tree.find(15).data, "Should return node with data 15");

        // Non-existing node, smaller than root
        assertNotNull(tree.find(1), "Should find parent node for data 1");
        assertEquals(3, tree.find(1).data, "Should return node with data 3 as parent of non-existent node 1");

        // Non-existing node, larger than root
        assertNotNull(tree.find(20), "Should find parent node for data 20");
        assertEquals(18, tree.find(20).data, "Should return node with data 18 as parent of non-existent node 20");

        // Leaf node
        assertNotNull(tree.find(7), "Should find leaf node with data 7");
        assertEquals(7, tree.find(7).data, "Should return leaf node with data 7");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    @Test
    public void findTest() {
        // Create a binary tree
        BinaryTree binaryTree = new BinaryTree();

        // Insert nodes into the binary tree
        binaryTree.put(20);
        binaryTree.put(10);
        binaryTree.put(30);
        binaryTree.put(5);
        binaryTree.put(15);
        binaryTree.put(25);
        binaryTree.put(35);

        // Test find for existing nodes
        assertNotNull(binaryTree.find(20)); // the root
        assertEquals(10, binaryTree.find(10).data);
        assertEquals(30, binaryTree.find(30).data);
        assertEquals(5, binaryTree.find(5).data);
        assertEquals(15, binaryTree.find(15).data);
        assertEquals(25, binaryTree.find(25).data);
        assertEquals(35, binaryTree.find(35).data);

        // Test find for non-existing node, should return parent (closest node)
        assertEquals(15, binaryTree.find(12).data); // Non-existing smaller than 15 but greater than 10
        assertEquals(35, binaryTree.find(40).data); // Non-existing larger than 35
        assertEquals(5, binaryTree.find(3).data); // Non-existing smaller than any inserted node
        assertEquals(20, binaryTree.find(18).data); // Non-existing smaller than 20 but larger than 15

        // Test find for a value not in the tree and no close parent (empty tree case)
        BinaryTree emptyTree = new BinaryTree();
        assertNull(emptyTree.find(10)); // Non-existing in an empty tree
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    private BinaryTree binaryTree;
    
    @BeforeEach
    public void setUp() {
        binaryTree = new BinaryTree();
        // Set up a simple binary tree with root, left and right children.
        binaryTree.put(10); // root
        binaryTree.put(5);  // left child of root
        binaryTree.put(15); // right child of root
    }
    
    @Test
    public void findTest() {
        // Test to find a node that exists (the root)
        Node foundNode = binaryTree.find(10);
        assertNotNull(foundNode, "The node should not be null");
        assertEquals(10, foundNode.data, "The data of the found node should be 10");

        // Test to find a node that exists (left child)
        foundNode = binaryTree.find(5);
        assertNotNull(foundNode, "The node should not be null");
        assertEquals(5, foundNode.data, "The data of the found node should be 5");

        // Test to find a node that exists (right child)
        foundNode = binaryTree.find(15);
        assertNotNull(foundNode, "The node should not be null");
        assertEquals(15, foundNode.data, "The data of the found node should be 15");

        // Test to find a node that does not exist; should return the parent
        foundNode = binaryTree.find(13);
        assertNotNull(foundNode, "The node should not be null");
        assertEquals(15, foundNode.data, "The data of the parent should be 15");

        // Test to find a node that does not exist and has no potential parent (i.e., would be root)
        binaryTree = new BinaryTree(); // create an empty tree
        foundNode = binaryTree.find(20);
        assertNull(foundNode, "The node should be null");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    private BinaryTree binaryTree;

    @BeforeEach
    public void setUp() {
        binaryTree = new BinaryTree();
        binaryTree.put(20);
        binaryTree.put(10);
        binaryTree.put(30);
        binaryTree.put(5);
        binaryTree.put(15);
        binaryTree.put(25);
        binaryTree.put(35);
    }

    @Test
    public void findTest() {
        // Test finding an existing node
        BinaryTree.Node foundNode = binaryTree.find(15);
        assertNotNull(foundNode);
        assertEquals(15, foundNode.data);

        // Test finding the root node
        foundNode = binaryTree.find(20);
        assertNotNull(foundNode);
        assertEquals(20, foundNode.data);
        assertNull(foundNode.parent); // root node's parent is null

        // Test finding non-existent node, should return the would-be parent
        foundNode = binaryTree.find(17);
        assertNotNull(foundNode);
        assertEquals(15, foundNode.data);  // 17 would be right child of 15

        foundNode = binaryTree.find(40);
        assertNotNull(foundNode);
        assertEquals(35, foundNode.data); // 40 would be right child of 35

        // Test when the tree is empty
        binaryTree = new BinaryTree();
        assertNull(binaryTree.find(100)); // Searching in an empty tree returns null
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    private BinaryTree binaryTree;

    @BeforeEach
    public void setUp() {
        binaryTree = new BinaryTree();
        binaryTree.put(20);
        binaryTree.put(10);
        binaryTree.put(30);
        binaryTree.put(5);
        binaryTree.put(15);
    }

    @Test
    public void findTest() {
        // Test find existing node
        BinaryTree.Node node = binaryTree.find(10);
        assertNotNull(node, "Node with key 10 should be found.");
        assertEquals(10, node.data, "The data of the node should be 10.");

        // Test find non-existing node, should return the parent
        node = binaryTree.find(13);
        assertNotNull(node, "Node 13 doesn't exist, should return its parent.");
        assertEquals(10, node.data, "The data of the parent node should be 10.");

        // Test find non-existing node in empty tree
        BinaryTree emptyTree = new BinaryTree();
        node = emptyTree.find(100);
        assertNull(node, "Should not find any node in an empty tree.");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    private BinaryTree tree;

    @BeforeEach
    public void setUp() {
        tree = new BinaryTree();
    }

    @Test
    public void findTest() {
        // Set up the binary tree with some nodes
        tree.put(20);
        tree.put(10);
        tree.put(30);
        tree.put(5);
        tree.put(15);
        tree.put(25);
        tree.put(35);

        // Test find with existing keys
        assertEquals(20, tree.find(20).data);
        assertEquals(10, tree.find(10).data);
        assertEquals(30, tree.find(30).data);

        // Test find with non-existing keys that would be on the left of a node
        assertEquals(10, tree.find(8).data);
        assertEquals(5, tree.find(2).data);

        // Test find with non-existing keys that would be on the right of a node
        assertEquals(15, tree.find(18).data);
        assertEquals(35, tree.find(40).data);

        // Test find with non-existing key with an empty tree
        BinaryTree emptyTree = new BinaryTree();
        assertNull(emptyTree.find(5));
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    private BinaryTree binaryTree;

    @BeforeEach
    public void setUp() {
        binaryTree = new BinaryTree();
        // Populating the tree with some values
        binaryTree.put(10);
        binaryTree.put(5);
        binaryTree.put(15);
        binaryTree.put(3);
        binaryTree.put(7);
        binaryTree.put(12);
    }

    @Test
    public void findTest() {
        // Check for finding an existing key
        assertEquals(10, binaryTree.find(10).data, "Should find node with key 10.");
        
        // Check for a non-existing key, should return the closest parent
        assertEquals(5, binaryTree.find(6).data, "Should return the parent node when key doesn't exist.");
        
        // Check for finding the minimum key
        assertEquals(3, binaryTree.find(3).data, "Should find node with minimum key 3.");

        // Check for finding the maximum key
        assertEquals(15, binaryTree.find(15).data, "Should find node with maximum key 15.");

        // Check for finding a key that is smaller than any present in the tree
        assertNull(binaryTree.find(1), "Should return null when key is smaller than any node in the tree.");
        
        // Check for finding a key that is larger than any present in the tree
        assertEquals(15, binaryTree.find(20).data, "Should return last node when key is larger than any in the tree.");
    }

    @AfterEach
    public void tearDown() {
        // Clean up after each test method
        binaryTree = null;
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    @Test
    public void findTest() {
        // Construct a binary tree for testing
        BinaryTree bt = new BinaryTree();
        bt.put(10); // root node
        bt.put(5);  // left child of root
        bt.put(15); // right child of root
        bt.put(3);  // left child of node with value 5
        bt.put(7);  // right child of node with value 5

        // Test find existing nodes
        assertEquals(10, bt.find(10).data, "Should find the root node with value 10");
        assertEquals(5, bt.find(5).data, "Should find the node with value 5");
        assertEquals(15, bt.find(15).data, "Should find the node with value 15");
        assertEquals(3, bt.find(3).data, "Should find the node with value 3");
        assertEquals(7, bt.find(7).data, "Should find the node with value 7");

        // Test finding the correct parent nodes when searching for non-existing nodes
        assertEquals(10, bt.find(13).data, "Should return parent node with value 10 for non-existing node with key 13");
        assertEquals(5, bt.find(4).data, "Should return parent node with value 5 for non-existing node with key 4");
        assertEquals(15, bt.find(20).data, "Should return parent node with value 15 for non-existing node with key 20");

        // Test finding a non-existing node with no possible parent (empty tree or non-existing value lower than the smallest value)
        BinaryTree emptyTree = new BinaryTree();
        assertNull(emptyTree.find(10), "Should return null for an empty tree");
        assertNull(bt.find(1), "Should return null for key 1, which is less than any node in the tree");
    }
}


