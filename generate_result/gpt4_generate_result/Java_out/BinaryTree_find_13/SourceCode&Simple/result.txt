Source code: 


public Node find(int key) {
    Node current = root;
    while (current != null) {
        if (key < current.data) {
            if (current.left == null) {
                return current; // The key isn't exist, returns the parent
            }
            current = current.left;
        } else if (key > current.data) {
            if (current.right == null) {
                return current;
            }
            current = current.right;
        } else { // If you find the value return it
            return current;
        }
    }
    return null;
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    @Test
    public void findTest() {
        // Create a binary tree and insert some nodes
        BinaryTree bt = new BinaryTree();
        bt.put(10);
        bt.put(5);
        bt.put(15);
        bt.put(3);
        bt.put(7);
        bt.put(12);
        bt.put(18);

        // Test finding existing nodes
        assertEquals(10, bt.find(10).data);
        assertEquals(5, bt.find(5).data);
        assertEquals(15, bt.find(15).data);

        // Test finding non-existing node that has a parent in the tree
        Node resultNode = bt.find(6);
        assertNotNull(resultNode); // Ensure a node is returned, not null
        assertEquals(5, resultNode.data); // Parent node of the non-existing node

        // Test finding a non-existing node with no possible parent (out of range)
        assertNull(bt.find(20)); // Key is greater than any present node

        // Test finding a node that would be a left child of the smallest node
        resultNode = bt.find(2);
        assertNotNull(resultNode); // Ensure a node is returned, not null
        assertEquals(3, resultNode.data); // Parent node of the non-existing node

        // Test finding a node in an empty tree
        BinaryTree emptyTree = new BinaryTree();
        assertNull(emptyTree.find(1)); // Should be null, as tree is empty
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    private BinaryTree binaryTree;
    
    @BeforeEach
    public void setUp() {
        binaryTree = new BinaryTree();
        binaryTree.put(10);
        binaryTree.put(5);
        binaryTree.put(15);
        binaryTree.put(3);
        binaryTree.put(7);
        binaryTree.put(12);
    }

    @Test
    public void findTest() {
        // Test finding an existing node
        BinaryTree.Node existingNode = binaryTree.find(5);
        assertNotNull(existingNode);
        assertEquals(5, existingNode.data);

        // Test finding a non-existing node and returning the would-be parent
        BinaryTree.Node parentNode = binaryTree.find(6);
        assertNotNull(parentNode);
        assertEquals(5, parentNode.data);

        // Test finding the root node
        BinaryTree.Node rootNode = binaryTree.find(10);
        assertNotNull(rootNode);
        assertEquals(10, rootNode.data);

        // Test searching for a value not in tree and getting null
        assertNull(binaryTree.find(20));
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    
    private BinaryTree binaryTree;
    
    @BeforeEach
    public void setUp() {
        binaryTree = new BinaryTree();
        binaryTree.put(50);
        binaryTree.put(30);
        binaryTree.put(20);
        binaryTree.put(40);
        binaryTree.put(70);
        binaryTree.put(60);
        binaryTree.put(80);
    }
    
    @Test
    public void findTest() {
        // Test to find an existing node
        BinaryTree.Node foundNode = binaryTree.find(30);
        assertNotNull(foundNode);
        assertEquals(30, foundNode.data);

        // Test to find a non-existing node, should return parent of where it would be
        BinaryTree.Node nonExistingNode = binaryTree.find(25);
        assertNotNull(nonExistingNode);
        assertEquals(30, nonExistingNode.data); // Assuming binary tree returns closest parent

        // Test to find a non-existing node that would have been the root
        nonExistingNode = binaryTree.find(1000);
        assertNull(nonExistingNode); // As there would be no parent if the node was at the root
        
        // Test to find the root
        BinaryTree.Node rootNode = binaryTree.find(50);
        assertNotNull(rootNode);
        assertEquals(50, rootNode.data);
        
        // Test to find a node that has both children
        BinaryTree.Node twoChildrenNode = binaryTree.find(70);
        assertNotNull(twoChildrenNode);
        assertEquals(70, twoChildrenNode.data);
    }
    
    // Optional clean up after tests
    @AfterEach
    public void tearDown() {
        binaryTree = null;
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

class BinaryTreeTest {
    private BinaryTree tree;

    @BeforeEach
    public void setUp() {
        tree = new BinaryTree();
        tree.put(50);
        tree.put(30);
        tree.put(70);
        tree.put(20);
        tree.put(40);
        tree.put(60);
        tree.put(80);
    }

    @Test
    public void findTest() {
        // Check for exact match
        assertNotNull(tree.find(50));
        assertEquals(50, tree.find(50).data);
        
        // Check for non-existing smaller value
        assertNotNull(tree.find(10));
        assertEquals(20, tree.find(10).data);  // Should return the parent (20)
        
        // Check for non-existing larger value
        assertNotNull(tree.find(75));
        assertEquals(70, tree.find(75).data);  // Should return the parent (70)
        
        // Check for non-existing value with no children
        assertNull(tree.find(100));

        // Check for finding left child 
        assertNotNull(tree.find(30));
        assertEquals(30, tree.find(30).data);

        // Check for finding right child
        assertNotNull(tree.find(70));
        assertEquals(70, tree.find(70).data);
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    private BinaryTree testTree;

    @BeforeEach
    public void setUp() {
        testTree = new BinaryTree();
        testTree.put(20);
        testTree.put(10);
        testTree.put(30);
        testTree.put(5);
        testTree.put(15);
        testTree.put(25);
        testTree.put(35);
    }

    @Test
    public void findTest() {
        // Attempt to find a node that does exist
        Node found = testTree.find(15);
        assertNotNull(found, "The node with value 15 should exist.");
        assertEquals(15, found.data, "The data of the found node should be 15.");

        // Attempt to find a node that does not exist, expect parent node
        Node notFound = testTree.find(17);
        assertNotNull(notFound, "The node with value 17 does not exist, expected parent node.");
        assertEquals(15, notFound.data, "Should return the parent node with closest lower value");

        // Attempt to find a node that does not exist and has no parent (key < root.data)
        Node notFoundAtRootLevel = testTree.find(2);
        assertNotNull(notFoundAtRootLevel, "The node with value 2 does not exist, expected root or child of root.");
        assertEquals(5, notFoundAtRootLevel.data, "Should return the child of root that would be the parent of the node.");

        // Attempt to find a node with a value greater than any value in the tree
        Node notFoundBeyondMax = testTree.find(40);
        assertNotNull(notFoundBeyondMax, "The node with value 40 does not exist, expected parent node.");
        assertEquals(35, notFoundBeyondMax.data, "Should return the node with the maximum value in the tree.");

        // Attempt to find a node in an empty tree
        testTree = new BinaryTree(); // Reset the tree to an empty tree
        Node emptyTreeFind = testTree.find(100);
        assertNull(emptyTreeFind, "Finding a node in an empty tree should return null.");

        // Check the root node
        Node rootNode = testTree.find(20);
        assertNotNull(rootNode, "Finding the root node should not return null.");
        assertEquals(20, rootNode.data, "The root node data should be 20.");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    
    @Test
    public void findTest() {
        // Initialize BinaryTree and nodes
        BinaryTree binaryTree = new BinaryTree();
        binaryTree.put(10);
        binaryTree.put(5);
        binaryTree.put(15);
        binaryTree.put(3);
        binaryTree.put(7);
        
        // Test the find method for an existing node
        Node foundNode = binaryTree.find(7);
        assertNotNull(foundNode, "The node should exist.");
        assertEquals(7, foundNode.data, "The found node data should be 7.");
        
        // Test the find method for a non-existent node which would end up on the left of node with data 5
        Node nonExistentLeft = binaryTree.find(4);
        assertNotNull(nonExistentLeft, "The parent node should be returned if the key does not exist.");
        assertEquals(5, nonExistentLeft.data, "The returned node when finding non-existing key should be its immediate parent if key is less.");
        
        // Test the find method for a non-existent node which would end up on right of node with data 15
        Node nonExistentRight = binaryTree.find(17);
        assertNotNull(nonExistentRight, "The parent node should be returned if the key does not exist.");
        assertEquals(15, nonExistentRight.data, "The returned node when finding non-existing key should be its immediate parent if key is greater.");
        
        // Test the find method for null return when tree is completely traversed without finding the key.
        binaryTree = new BinaryTree(); // Reset to an empty tree.
        Node shouldBeNull = binaryTree.find(100);
        assertNull(shouldBeNull, "The find method should return null when searching in an empty tree.");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    private BinaryTree binaryTree;
    
    @BeforeEach
    public void setUp() {
        binaryTree = new BinaryTree();
        // Below is an example. You might set up the tree as required for the test.
        // Let’s assume the tree is as follows:   10
        //                                        /    \
        //                                      5      15
        // If your BinaryTree implementation accepts values upon insertion directly then:
        binaryTree.put(10);
        binaryTree.put(5);
        binaryTree.put(15);
    }
    
    @Test
    public void findTest() {
        assertEquals(10, binaryTree.find(10).data, "Searching for existing root node should return the node itself.");
        assertEquals(5, binaryTree.find(5).data, "Searching for existing left node should return the node itself.");
        assertEquals(15, binaryTree.find(15).data, "Searching for existing right node should return the node itself.");
        
        assertNull(binaryTree.find(100), "Searching for non-existing node should return null.");
        assertEquals(5, binaryTree.find(3).data, "Searching for a value less than a left node should return that node.");
        assertEquals(15, binaryTree.find(20).data, "Searching for a value greater than a right node should return that node.");
    }

    // Other tests for the BinaryTree, such as put, remove, etc.
    // ...
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    @Test
    public void findTest() {
        BinaryTree binaryTree = new BinaryTree();
        binaryTree.put(10);
        binaryTree.put(5);
        binaryTree.put(15);
        binaryTree.put(3);
        binaryTree.put(7);
        binaryTree.put(12);
        binaryTree.put(17);
        
        // Test find existing nodes
        Node foundNode = binaryTree.find(3);
        assertNotNull(foundNode, "The find method should return a non-null node for existing keys");
        assertEquals(3, foundNode.data, "The find method should return the correct node data for the given key");
        
        // Test find non-existing nodes
        Node parentForNonExisting = binaryTree.find(16);
        assertNotNull(parentForNonExisting, "The find method should return the parent node for non-existing keys");
        assertEquals(15, parentForNonExisting.data, "The find method should return the parent node where non-existing key would be inserted");
        
        // Test find on an empty tree
        BinaryTree emptyTree = new BinaryTree();
        assertNull(emptyTree.find(100), "The find method should return null when called on an empty tree");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    private BinaryTree binaryTree;

    @BeforeEach
    public void setUp() {
        binaryTree = new BinaryTree();
        binaryTree.put(20); // assuming 'put' method adds the value to the tree
        binaryTree.put(10);
        binaryTree.put(30);
        binaryTree.put(5);
        binaryTree.put(15);
        binaryTree.put(25);
        binaryTree.put(35);
    }
  
    @Test
    public void findTestExistingNode() {
        Node foundNode = binaryTree.find(15);
        assertNotNull(foundNode);
        assertEquals(15, foundNode.data);
    }

    @Test
    public void findTestNonExistingNodeLessThan() {
        Node foundNode = binaryTree.find(8);
        assertNotNull(foundNode);
        assertEquals(10, foundNode.data); // 8 is less than 10, closest existing node in the tree
    }

    @Test
    public void findTestNonExistingNodeGreaterThan() {
        Node foundNode = binaryTree.find(40);
        assertNotNull(foundNode);
        assertEquals(35, foundNode.data); // 40 is greater than 35, closest existing node in the tree
    }

    @Test
    public void findTestRootNode() {
        Node foundNode = binaryTree.find(20);
        assertNotNull(foundNode);
        assertEquals(20, foundNode.data);
    }

    @Test
    public void findTestEmptyTree() {
        binaryTree = new BinaryTree(); // Reinitializing to an empty tree
        Node foundNode = binaryTree.find(10);
        assertNull(foundNode); // When the tree is empty, should return null
    }

    @AfterEach
    public void tearDown() {
        binaryTree = null;
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    @Test
    public void findTest() {
        BinaryTree tree = new BinaryTree();
        
        // Assume BinaryTree.put(int value) adds elements into the tree.
        // Let's construct the following tree as a test case:
        //      5
        //     / \
        //    3   7
        //   / \   \
        //  2   4   9
        
        tree.put(5);
        tree.put(3);
        tree.put(7);
        tree.put(2);
        tree.put(4);
        tree.put(9);
        
        // Test finding existing nodes
        assertNotNull(tree.find(5), "Node with key 5 should be found");
        assertNotNull(tree.find(3), "Node with key 3 should be found");
        assertNotNull(tree.find(9), "Node with key 9 should be found");

        // Test the case where node should be present and check if correct node is returned
        assertEquals(5, tree.find(5).data, "Incorrect node returned for key 5");
        assertEquals(3, tree.find(3).data, "Incorrect node returned for key 3");
        assertEquals(9, tree.find(9).data, "Incorrect node returned for key 9");

        // Test finding non-existing nodes
        assertNotNull(tree.find(6), "Should return parent of where a node with key 6 would be inserted");
        assertEquals(7, tree.find(6).data, "Parent node should have data 7");

        assertNotNull(tree.find(1), "Should return parent of where a node with key 1 would be inserted");
        assertEquals(2, tree.find(1).data, "Parent node should have data 2"); 

        // Test finding a node in an empty tree
        BinaryTree emptyTree = new BinaryTree();
        assertNull(emptyTree.find(5), "Finding in an empty tree should return null");
    }
}


