Source code: 


public Node find(int key) {
    Node current = root;
    while (current != null) {
        if (key < current.data) {
            if (current.left == null) {
                return current; // The key isn't exist, returns the parent
            }
            current = current.left;
        } else if (key > current.data) {
            if (current.right == null) {
                return current;
            }
            current = current.right;
        } else { // If you find the value return it
            return current;
        }
    }
    return null;
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    private BinaryTree binaryTree;

    @BeforeEach
    void setUp() {
        binaryTree = new BinaryTree();
        // Assumes insert method exists to build the tree
        binaryTree.insert(10); // root
        binaryTree.insert(5);  // left child of root
        binaryTree.insert(15); // right child of root
    }

    @Test
    public void findTest() {
        // Test where key is found in the tree
        Node foundNode = binaryTree.find(5);
        assertNotNull(foundNode);
        assertEquals(5, foundNode.data, "The found node should have the data 5");

        // Test where key is not found in the tree, should return closest parent
        Node notFoundNode = binaryTree.find(6);
        assertNotNull(notFoundNode);
        assertEquals(5, notFoundNode.data, "The closest parent node should have the data 5");

        // Test searching for a non-existing node beyond the leaf nodes
        Node nonExistentNode = binaryTree.find(20);
        assertNotNull(nonExistentNode);
        assertEquals(15, nonExistentNode.data, "The closest parent node of a non-existing node should have the data 15");
        
        // Test searching for a value that matches the root node
        Node rootNode = binaryTree.find(10);
        assertNotNull(rootNode);
        assertEquals(10, rootNode.data, "The found root node should have the data 10");

        // Test searching for a value that is not present in the tree at all
        Node nullNode = binaryTree.find(100);
        assertNull(nullNode, "Searching for a value that's not in the tree should return null");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

class Node {
    int data;
    Node left;
    Node right;
    // Assuming constructor and necessary methods are defined
}

class BinaryTree {
    Node root;
    // Assuming other methods and constructor as necessary
    public Node find(int key) {
        Node current = root;
        while (current != null) {
            if (key < current.data) {
                if (current.left == null) {
                    return current; // The key isn't exist, returns the parent
                }
                current = current.left;
            } else if (key > current.data) {
                if (current.right == null) {
                    return current;
                }
                current = current.right;
            } else { // If you find the value return it
                return current;
            }
        }
        return null; // The tree is empty or key doesn't exist in the tree
    }
}

public class BinaryTreeTest {
    private BinaryTree tree;

    @BeforeEach
    public void setUp() {
        tree = new BinaryTree();
        // Setting up a simple tree for testing
        tree.root = new Node(); tree.root.data = 10;
        tree.root.left = new Node(); tree.root.left.data = 5;
        tree.root.right = new Node(); tree.root.right.data = 15;
        // Optionally add more nodes to the tree for a comprehensive test
    }

    @Test
    public void findTestExistingNode() {
        assertEquals(tree.root, tree.find(10), "Should find the root node");
        assertEquals(tree.root.left, tree.find(5), "Should find the left child node");
        assertEquals(tree.root.right, tree.find(15), "Should find the right child node");
    }

    @Test
    public void findTestNonExistingNodeParent() {
        Node result = tree.find(13);
        assertEquals(tree.root.right, result, "Should return the right child node as the parent of the non-existing node.");
    }

    @Test
    public void findTestEmptyTree() {
        tree.root = null; // Empty the tree
        assertNull(tree.find(10), "Should return null for an empty tree");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    private BinaryTree binaryTree;
    private Node root;

    @BeforeEach
    public void setUp() {
        binaryTree = new BinaryTree();
        root = new Node(10);
        root.left = new Node(5);
        root.right = new Node(15);
        root.left.left = new Node(3);
        root.left.right = new Node(7);
        root.right.left = new Node(12);
        root.right.right = new Node(18);
        binaryTree.root = root;
    }

    @Test
    public void findTest() {
        // Check if an existing key is found
        assertEquals(root, binaryTree.find(10));
        assertEquals(root.left, binaryTree.find(5));
        assertEquals(root.right, binaryTree.find(15));

        // Check if it returns the correct parent for a non-existing lower key
        assertEquals(root.left, binaryTree.find(4));
        assertEquals(root.left.left, binaryTree.find(2));

        // Check if it returns the correct parent for a non-existing higher key
        assertEquals(root.right, binaryTree.find(17));
        assertEquals(root.right.right, binaryTree.find(20));

        // Check if it returns null for a non-existing key when the tree is empty
        binaryTree.root = null;
        assertNull(binaryTree.find(10));
    }
    
    // Helper classes and methods, assuming this is what these classes look like
    class BinaryTree {
        Node root;

        public Node find(int key) {
            Node current = root;
            while (current != null) {
                if (key < current.data) {
                    if (current.left == null) {
                        return current; // The key isn't exist, returns the parent
                    }
                    current = current.left;
                } else if (key > current.data) {
                    if (current.right == null) {
                        return current;
                    }
                    current = current.right;
                } else { // If you find the value return it
                    return current;
                }
            }
            return null;
        }
    }

    class Node {
        int data;
        Node left;
        Node right;

        Node(int data) {
            this.data = data;
            left = null;
            right = null;
        }
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    private BinaryTree binaryTree;

    // Inner class to emulate the Node structure
    // Assuming it's something like this
    private class Node {
        int data;
        Node left;
        Node right;

        public Node(int item) {
            this.data = item;
            this.left = this.right = null;
        }
    }

    // Inner class to emulate the BinaryTree structure with the root node
    private class BinaryTree {
        Node root;

        public Node find(int key) {
            Node current = root;
            while (current != null) {
                if (key < current.data) {
                    if (current.left == null) {
                        return current; // The key isn't exist, returns the parent
                    }
                    current = current.left;
                } else if (key > current.data) {
                    if (current.right == null) {
                        return current;
                    }
                    current = current.right;
                } else {
                    return current;
                }
            }
            return null;
        }

        // Method to insert nodes into the tree for setting up the test case
        public Node insert(Node current, int value) {
            if (current == null) {
                return new Node(value);
            }

            if (value < current.data) {
                current.left = insert(current.left, value);
            } else if (value > current.data) {
                current.right = insert(current.right, value);
            } else {
                // value already exists
                return current;
            }

            return current;
        }

        public void add(int value) {
            root = insert(root, value);
        }
    }

    @BeforeEach
    public void setUp() {
        binaryTree = new BinaryTree();
        binaryTree.add(10); // Root node
        binaryTree.add(5);  // Left child of root
        binaryTree.add(15); // Right child of root
        binaryTree.add(3);  // Left child of node with value 5
        binaryTree.add(7);  // Right child of node with value 5
    }

    @Test
    public void findTest() {
        // Test to find a node that exists
        Node foundNode = binaryTree.find(7);
        assertNotNull(foundNode, "The node should be found.");
        assertEquals(7, foundNode.data, "The data of the node should be 7.");

        // Test to find a node that doesn't exist, should return the parent node
        Node parentForNonExisting = binaryTree.find(6);
        assertNotNull(parentForNonExisting, "The parent node should be returned for non-existing node.");
        assertEquals(5, parentForNonExisting.data, "The parent's data should be 5.");

        // Test to find a node that doesn't exist, and there's no parent (outside the current tree scope)
        Node nonExistingAndNoParent = binaryTree.find(20);
        assertNotNull(nonExistingAndNoParent, "Should return the closest matching node when key does not exist.");
        assertEquals(15, nonExistingAndNoParent.data, "The closest matching node's data should be 15.");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

class Node {
    int data;
    Node left;
    Node right;

    public Node(int data) {
        this.data = data;
    }
}

public class BinaryTreeTest {
    private Node root;

    // Helper method to create a binary tree for testing
    private void createTestTree() {
        root = new Node(10);
        root.left = new Node(5);
        root.right = new Node(15);
        root.left.left = new Node(3);
        root.left.right = new Node(7);
        root.right.left = new Node(13);
        root.right.right = new Node(17);
    }

    // Implementation of find method (to be put into a BinaryTree class ideally)
    public Node find(int key) {
        Node current = root;
        while (current != null) {
            if (key < current.data) {
                if (current.left == null) {
                    return current; // The key isn't exist, returns the parent
                }
                current = current.left;
            } else if (key > current.data) {
                if (current.right == null) {
                    return current;
                }
                current = current.right;
            } else { // If you find the value return it
                return current;
            }
        }
        return null;
    }

    @BeforeEach
    void setUp() {
        createTestTree();
    }

    @Test
    public void findTest() {
        // Test finding an existing node
        Node found = find(5);
        assertNotNull(found, "Node with key 5 should be found");
        assertEquals(5, found.data, "The found node should have data 5");

        // Test finding a node that does not exist, which should return parent of where it would be
        Node notFound = find(6);
        assertNotNull(notFound, "Node with key 6 does not exist, should return parent");
        assertEquals(5, notFound.data, "The parent node of the non-existent key 6 should be the node with data 5");

        // Test finding a node that is the root
        Node rootFound = find(10);
        assertNotNull(rootFound, "Root node should be found");
        assertEquals(10, rootFound.data, "The found root node should have data 10");

        // Test finding a node in the right subtree
        Node rightSubtree = find(15);
        assertNotNull(rightSubtree, "Node with key 15 should be found");
        assertEquals(15, rightSubtree.data, "The found node in the right subtree should have data 15");

        // Test trying to find a node with a key larger than any in the tree
        Node beyondRight = find(20);
        assertNotNull(beyondRight, "Searching for key 20 should return leaf where it would be inserted");
        assertEquals(17, beyondRight.data, "The node where key 20 would be inserted is the rightmost node with data 17");

        // Test trying to find a node with a key smaller than any in the tree
        Node beyondLeft = find(1);
        assertNotNull(beyondLeft, "Searching for key 1 should return leaf where it would be inserted");
        assertEquals(3, beyondLeft.data, "The node where key 1 would be inserted is the leftmost node with data 3");

        // Test finding a null tree (empty tree)
        root = null;
        Node nullRoot = find(10);
        assertNull(nullRoot, "Searching in an empty tree should return null");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

class Node {
    int data;
    Node left;
    Node right;
    
    public Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

class BinaryTree {
    Node root;
    
    public BinaryTree(Node root) {
        this.root = root;
    }
    
    public Node find(int key) {
        Node current = root;
        while (current != null) {
            if (key < current.data) {
                if (current.left == null) {
                    return current; // The key isn't exist, returns the parent
                }
                current = current.left;
            } else if (key > current.data) {
                if (current.right == null) {
                    return current;
                }
                current = current.right;
            } else { // If you find the value return it
                return current;
            }
        }
        return null;
    }
}

public class BinaryTreeTest {

    private BinaryTree tree;

    @BeforeEach
    public void setUp() {
        // Create a simple binary tree
        Node root = new Node(10);
        root.left = new Node(5);
        root.right = new Node(15);
        
        // Add more nodes if needed
        root.left.left = new Node(2);
        root.right.right = new Node(20);
        
        tree = new BinaryTree(root);
    }

    @Test
    public void findTestExistingKey() {
        assertEquals(tree.root, tree.find(10), "Finding existing root key should return the root node");
        assertEquals(tree.root.left, tree.find(5), "Finding existing left key should return left node");
        assertEquals(tree.root.right, tree.find(15), "Finding existing right key should return right node");
    }
    
    @Test
    public void findTestNonExistingKey() {
        assertEquals(tree.root, tree.find(1), "If the key does not exist, should return its would-be parent node (left)");
        assertEquals(tree.root.right, tree.find(17), "If the key does not exist, should return its would-be parent node (right)");
        assertNull(tree.find(25), "Finding non-existing key outside of tree bounds should return null");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    // Assuming Node and BinaryTree classes are defined and BinaryTree has a method to add nodes
    public static class Node {
        int data;
        Node left, right;

        public Node(int data) {
            this.data = data;
            left = right = null;
        }
    }
    
    public static class BinaryTree {
        Node root;

        // Assuming there is a method to add nodes to the tree, necessary for our test
        public void add(int value) {
            root = addRecursive(root, value);
        }

        private Node addRecursive(Node current, int value) {
            if (current == null) {
                return new Node(value);
            }

            if (value < current.data) {
                current.left = addRecursive(current.left, value);
            } else if (value > current.data) {
                current.right = addRecursive(current.right, value);
            }

            return current;
        }
        
        // find method as provided in the original instruction
        public Node find(int key) {
            // ... (implementation as above)
        }
    }

    private BinaryTree binaryTree;

    @BeforeEach
    public void setUp() {
        binaryTree = new BinaryTree();
        binaryTree.add(5);
        binaryTree.add(3);
        binaryTree.add(7);
        binaryTree.add(2);
        binaryTree.add(4);
        binaryTree.add(6);
        binaryTree.add(8);
    }

    @Test
    public void findTest() {
        // Test finding a key that exists
        assertEquals(5, binaryTree.find(5).data);
        
        // Test finding a key that does not exist and is less than root, should return the parent
        assertEquals(3, binaryTree.find(1).data);

        // Test finding a key that does not exist and is greater than root, should return the parent
        assertEquals(7, binaryTree.find(9).data);

        // Test finding a key that does not exist and is between two nodes, should return the parent
        assertEquals(2, binaryTree.find(1).data);
        assertEquals(4, binaryTree.find(3).data);

        // Test finding the lowest value
        assertEquals(2, binaryTree.find(2).data);

        // Test finding the highest value
        assertEquals(8, binaryTree.find(8).data);

        // Test with an empty tree
        binaryTree = new BinaryTree();
        assertNull(binaryTree.find(10));
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

class Node {
    int data;
    Node left;
    Node right;

    public Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

class BinaryTree {
    Node root;

    public BinaryTree() {
        root = null;
    }

    public void add(int value) {
        root = addRecursive(root, value);
    }

    private Node addRecursive(Node current, int value) {
        if (current == null) {
            return new Node(value);
        }

        if (value < current.data) {
            current.left = addRecursive(current.left, value);
        } else if (value > current.data) {
            current.right = addRecursive(current.right, value);
        }

        return current;
    }

    // Assuming the find method is defined here within the BinaryTree class
    public Node find(int key) {
        // Source Code provided goes here
    }
}

public class BinaryTreeTest {
    private BinaryTree binaryTree;

    @BeforeEach
    public void setUp() {
        binaryTree = new BinaryTree();
        binaryTree.add(10);
        binaryTree.add(5);
        binaryTree.add(15);
        binaryTree.add(3);
        binaryTree.add(7);
        binaryTree.add(18);
    }

    @Test
    public void findExistingNodeTest() {
        assertEquals(5, binaryTree.find(5).data, "Node with key 5 should be found");
        assertEquals(15, binaryTree.find(15).data, "Node with key 15 should be found");
    }

    @Test
    public void findNonExistingNodeTest() {
        assertEquals(5, binaryTree.find(4).data, "Non-existing node with key 4 should return parent node with key 5");
        assertEquals(18, binaryTree.find(20).data, "Non-existing node with key 20 should return parent node with key 18");
    }

    @Test
    public void findRootNodeTest() {
        assertEquals(10, binaryTree.find(10).data, "Root node with key 10 should be found");
    }

    @Test
    public void findNullForEmptyTreeTest() {
        BinaryTree emptyTree = new BinaryTree();
        assertNull(emptyTree.find(10), "Searching in empty tree should return null");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

class Node {
    int data;
    Node left;
    Node right;

    Node(int value) {
        data = value;
        left = null;
        right = null;
    }
}

class BinaryTree {
    Node root;

    public Node find(int key) {
        Node current = root;
        while (current != null) {
            if (key < current.data) {
                if (current.left == null) {
                    return current; // The key isn't exist, returns the parent
                }
                current = current.left;
            } else if (key > current.data) {
                if (current.right == null) {
                    return current;
                }
                current = current.right;
            } else {
                return current;
            }
        }
        return null;
    }
}

public class BinaryTreeTest {
    private BinaryTree binaryTree;
    
    @BeforeEach
    public void setUp() {
        binaryTree = new BinaryTree();
        binaryTree.root = new Node(10);
        binaryTree.root.left = new Node(5);
        binaryTree.root.right = new Node(15);
    }
    
    @Test
    public void findTest() {
        // Test for finding a node that exists
        Node result = binaryTree.find(5);
        assertNotNull(result, "The find method should return a non-null node");
        assertEquals(5, result.data, "The node with data 5 should be found");
        
        // Test for trying to find a node that does not exist and should return its parent
        result = binaryTree.find(8);
        assertNotNull(result, "The find method should return the parent node when the key is not found");
        assertEquals(5, result.data, "The node returned when not finding 8 should have data 5 as it's the parent node");
        
        // Test for trying to find a node that is at the root
        result = binaryTree.find(10);
        assertNotNull(result, "The find method should return the root node when the root holds the key");
        assertEquals(10, result.data, "The root node should have the data 10");
        
        // Test for a key that has no node and no appropriate parent (in this case less than the root)
        result = binaryTree.find(3);
        assertNotNull(result, "The find method should return the parent node for key 3");
        assertEquals(5, result.data, "The node returned when not finding 3 should have data 5 as it's the parent node");
        
        // Testing for a completely absent key with no parent, expecting a null return
        binaryTree.root.left.left = new Node(2);
        result = binaryTree.find(1);
        assertNull(result, "The find method should return null for a key that doesn't exist without a proper parent in the tree");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

class Node {
    int data;
    Node left;
    Node right;
    
    // Assuming there is a constructor
    public Node(int data) {
        this.data = data;
        left = null; right = null;
    }
}

class BinaryTree {
    Node root;

    public Node find(int key) {
        Node current = root;
        while (current != null) {
            if (key < current.data) {
                if (current.left == null) {
                    return current; // The key isn't exist, returns the parent
                }
                current = current.left;
            } else if (key > current.data) {
                if (current.right == null) {
                    return current;
                }
                current = current.right;
            } else { // If you find the value return it
                return current;
            }
        }
        return null;
    }
    
    // A method for test setup convenience
    public void insert(int data){
        root = insertRecursive(root, data);
    }
    
    private Node insertRecursive(Node current, int data){
        if (current == null) {
            return new Node(data);
        }
        if (data < current.data) {
            current.left = insertRecursive(current.left, data);
        } else if (data > current.data) {
            current.right = insertRecursive(current.right, data);
        }
        return current;
    }
}

public class BinaryTreeTest {

    private BinaryTree tree;

    @BeforeEach
    public void setUp() {
        tree = new BinaryTree();
        tree.insert(50);
        tree.insert(30);
        tree.insert(20);
        tree.insert(40);
        tree.insert(70);
        tree.insert(60);
        tree.insert(80);
    }

    @Test
    public void findTest() {
        // Check for existing key
        assertNotNull(tree.find(30), "Should find node with existing key");
        assertEquals(30, tree.find(30).data, "The found node should have the correct data");
        
        // Check for non-existing key that has a potential parent
        Node result = tree.find(35);
        assertNotNull(result, "Should return the parent node of where a non-existing key would be inserted");
        assertEquals(40, result.data, "Parent node should have the value 40, the closest higher key to 35");
        
        // Check for non-existing key that would be inserted at the root
        tree = new BinaryTree(); // Reset the tree to be empty
        result = tree.find(50);
        assertNull(result, "Should return null for an empty tree when searching for any key");
    }
}


