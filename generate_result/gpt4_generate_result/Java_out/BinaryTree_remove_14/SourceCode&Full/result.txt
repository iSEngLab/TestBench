Source code: 


public boolean remove(int value) {
    // temp is the node to be deleted
    Node temp = find(value);

    // If the value doesn't exist
    if (temp.data != value) {
        return false;
    }

    // No children
    if (temp.right == null && temp.left == null) {
        if (temp == root) {
            root = null;
        } // This if/else assigns the new node to be either the left or right child of the
          // parent
        else if (temp.parent.data < temp.data) {
            temp.parent.right = null;
        } else {
            temp.parent.left = null;
        }
        return true;
    } // Two children
    else if (temp.left != null && temp.right != null) {
        Node successor = findSuccessor(temp);

        // The left tree of temp is made the left tree of the successor
        successor.left = temp.left;
        successor.left.parent = successor;

        // If the successor has a right child, the child's grandparent is it's new parent
        if (successor.parent != temp) {
            if (successor.right != null) {
                successor.right.parent = successor.parent;
                successor.parent.left = successor.right;
            } else {
                successor.parent.left = null;
            }
            successor.right = temp.right;
            successor.right.parent = successor;
        }

        if (temp == root) {
            successor.parent = null;
            root = successor;
        } // If you're not deleting the root
        else {
            successor.parent = temp.parent;

            // This if/else assigns the new node to be either the left or right child of the
            // parent
            if (temp.parent.data < temp.data) {
                temp.parent.right = successor;
            } else {
                temp.parent.left = successor;
            }
        }
        return true;
    } // One child
    else {
        // If it has a right child
        if (temp.right != null) {
            if (temp == root) {
                root = temp.right;
                return true;
            }

            temp.right.parent = temp.parent;

            // Assigns temp to left or right child
            if (temp.data < temp.parent.data) {
                temp.parent.left = temp.right;
            } else {
                temp.parent.right = temp.right;
            }
        } // If it has a left child
        else {
            if (temp == root) {
                root = temp.left;
                return true;
            }

            temp.left.parent = temp.parent;

            // Assigns temp to left or right side
            if (temp.data < temp.parent.data) {
                temp.parent.left = temp.left;
            } else {
                temp.parent.right = temp.left;
            }
        }
        return true;
    }
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    private BinaryTree tree;

    @BeforeEach
    public void setUp() {
        tree = new BinaryTree();
        tree.put(40);
        tree.put(20);
        tree.put(10);
        tree.put(30);
        tree.put(60);
        tree.put(50);
        tree.put(70);
    }

    // Test removal of a node with no children
    @Test
    public void testRemoveLeafNode() {
        assertTrue(tree.remove(10)); // 10 is a leaf node
        assertNull(tree.find(10).left);
        assertNull(tree.find(10).right);
        assertFalse(tree.remove(10)); // Try to remove again, should be false
    }

    // Test removal of a node with one child
    @Test
    public void testRemoveNodeWithOneChild() {
        assertTrue(tree.remove(30)); // 30 has no right child
        assertNull(tree.find(20).right); // 20's right should now be null
        tree.put(25);
        assertTrue(tree.remove(20)); // 20 has a left child only
        assertNotNull(tree.find(40).left); // 40's left should now be the child of 20
        assertEquals(tree.find(40).left.data, 25); // The child should be 25
    }

    // Test removal of a node with two children
    @Test
    public void testRemoveNodeWithTwoChildren() {
        assertTrue(tree.remove(40)); // 40 is the root with two children
        Node newRoot = tree.getRoot();
        assertNotNull(newRoot); // new root should not be null
        assertEquals(newRoot.data, 50); // new root should be successor of 40, which is 50
        assertNotNull(newRoot.left);
        assertNotNull(newRoot.right);
        assertEquals(newRoot.left.data, 20); // left child of root
        assertEquals(newRoot.right.data, 60); // right child of root
    }

    // Test removal of the root
    @Test
    public void testRemoveRootNode() {
        assertTrue(tree.remove(40)); // Remove the root
        Node newRoot = tree.getRoot();
        assertNotEquals(newRoot.data, 40); // new root should no longer be 40
    }

    // Test removal of non-existent node
    @Test
    public void testRemoveNonExistentNode() {
        assertFalse(tree.remove(100)); // Node doesn't exist, cannot be removed
    }

    @AfterEach
    public void tearDown() {
        tree = null;
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    private BinaryTree binaryTree;

    @BeforeEach
    public void setup() {
        binaryTree = new BinaryTree();
    }

    @Test
    public void removeLeafNodeTest() {
        // Insert nodes into the binary tree
        binaryTree.put(50);
        binaryTree.put(30);
        binaryTree.put(20);
        binaryTree.put(40);
        binaryTree.put(70);
        binaryTree.put(60);
        binaryTree.put(80);
        
        // Remove leaf node
        assertTrue(binaryTree.remove(20), "Leaf node was not removed.");
        
        // Assert the node is removed by checking its absence in the tree
        assertNull(binaryTree.find(20));
    }
    
    @Test
    public void removeNodeWithOneChildTest() {
        // Insert nodes into the binary tree with a specific structure
        // that ensures node 30 will have only one child
        binaryTree.put(50);
        binaryTree.put(30);
        binaryTree.put(40);
        
        // Remove node with one child
        assertTrue(binaryTree.remove(30), "Node with one child was not removed.");
        
        // Assert the node is removed and child is now in its place
        BinaryTree.Node rootChild = binaryTree.getRoot().left;
        assertEquals(40, rootChild.data, "The child node did not replace the removed node correctly.");
    }
    
    @Test
    public void removeNodeWithTwoChildrenTest() {
        // Insert nodes into the binary tree 
        binaryTree.put(50);
        binaryTree.put(30);
        binaryTree.put(20);
        binaryTree.put(40);
        binaryTree.put(70);
        binaryTree.put(60);
        binaryTree.put(80);
        
        // Remove node with two children
        assertTrue(binaryTree.remove(50), "Node with two children was not removed.");
        
        // Assert the root is replaced by the successor (60 in this case)
        assertEquals(60, binaryTree.getRoot().data, "The successor did not replace the removed node correctly.");
    }
    
    @Test
    public void removeRootNodeNoChildrenTest() {
        // Insert only a root node
        binaryTree.put(10);
        
        // Remove the root node, which has no children
        assertTrue(binaryTree.remove(10), "Root node was not removed.");
        
        // Assert the tree is empty after removing the root
        assertNull(binaryTree.getRoot(), "The root node was not removed correctly - tree should be empty.");
    }
    
    @Test
    public void removeNonExistingNodeTest() {
        // Insert nodes into the binary tree
        binaryTree.put(50);
        binaryTree.put(30);
        binaryTree.put(70);
        
        // Attempt to remove a non-existing node
        assertFalse(binaryTree.remove(20), "Removal should have failed for non-existing node.");
        
        // Assert the tree structure remains unchanged
        assertNotNull(binaryTree.find(50));
        assertNotNull(binaryTree.find(30));
        assertNotNull(binaryTree.find(70));
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    
    @Test
    public void removeTest() {
        BinaryTree tree = new BinaryTree();
        
        // Add elements
        tree.put(50);
        tree.put(30);
        tree.put(20);
        tree.put(40);
        tree.put(70);
        tree.put(60);
        tree.put(80);
        
        // Test removing leaf node
        assertTrue(tree.remove(20), "Should return true when removing existing leaf node");
        assertNull(tree.find(20), "Node with value 20 should be removed");
        
        // Test removing node with single child
        assertTrue(tree.remove(30), "Should return true when removing node with a single child");
        assertNull(tree.find(30), "Node with value 30 should be removed");
        assertEquals(40, tree.find(40).data, "Child node should replace removed node with value 40");
        
        // Test removing node with two children
        assertTrue(tree.remove(70), "Should return true when removing node with two children");
        assertNull(tree.find(70), "Node with value 70 should be removed");
        assertNotNull(tree.find(60), "Successor should be in place of removed node with value 60");
        assertNotNull(tree.find(80), "Subtree of removed node should be maintained with value 80");
        
        // Test removing root
        assertTrue(tree.remove(50), "Should return true when removing the root");
        assertNull(tree.find(50), "Root node with value 50 should be removed");
        assertNotNull(tree.find(60), "New root should be present with value 60");
        
        // Test removing non-existent node
        assertFalse(tree.remove(100), "Should return false when removing non-existent node");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    @Test
    public void removeTest() {
        BinaryTree binaryTree = new BinaryTree();

        // Let's create a tree
        /*
                  10
                /    \
               5     15
              / \    / \
             2   8  12  20
                           \
                           25
        */
        
        binaryTree.put(10);
        binaryTree.put(5);
        binaryTree.put(15);
        binaryTree.put(2);
        binaryTree.put(8);
        binaryTree.put(12);
        binaryTree.put(20);
        binaryTree.put(25);

        // Test removal of leaf node
        assertTrue(binaryTree.remove(2), "Leaf node should be removed");
        assertNull(binaryTree.find(2), "Node with value 2 should not be found after removal");

        // Test removal of node with single child
        assertTrue(binaryTree.remove(20), "Node with single child should be removed");
        assertNull(binaryTree.find(20), "Node with value 20 should not be found after removal");

        // Test removal of node with two children
        assertTrue(binaryTree.remove(15), "Node with two children should be removed");
        assertNull(binaryTree.find(15), "Node with value 15 should not be found after removal");

        // Confirm that successor node has taken the correct place
        BinaryTree.Node successor = binaryTree.find(12);
        assertNotNull(successor, "Successor Node should be found");
        assertEquals(10, successor.parent.data, "Successor should have correct parent");

        // Confirm that removal of root works
        assertTrue(binaryTree.remove(10), "Root node should be removed");
        assertNotEquals(10, binaryTree.getRoot().data, "New root should not have the value 10");
        
        // Test removal of non-existent node
        assertFalse(binaryTree.remove(50), "Removing non-existent node should return false");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    private BinaryTree binaryTree;

    @BeforeEach
    public void setUp() {
        binaryTree = new BinaryTree();

        // Setup a binary tree with a known structure
        binaryTree.put(10);
        binaryTree.put(5);
        binaryTree.put(15);
        binaryTree.put(3);
        binaryTree.put(7);
        binaryTree.put(18);
    }

    @Test
    public void removeLeafNodeTest() {
        assertTrue(binaryTree.remove(3), "Should return true when leaf node is removed");
        assertNull(binaryTree.find(3), "Node with data 3 should be removed and hence not found");
        assertNotNull(binaryTree.find(5), "Parent node with data 5 should not be removed");
    }

    @Test
    public void removeNodeWithOneChildTest() {
        assertTrue(binaryTree.remove(15), "Should return true when node with one child is removed");
        assertNull(binaryTree.find(15), "Node with data 15 should be removed and hence not found");
        assertNotNull(binaryTree.find(18), "Child node with data 18 should not be removed");
        assertEquals(binaryTree.getRoot().right.data, 18, "Child node with data 18 should become right child of root");
    }

    @Test
    public void removeNodeWithTwoChildrenTest() {
        assertTrue(binaryTree.remove(10), "Should return true when node with two children is removed");
        assertNull(binaryTree.find(10), "Node with data 10 should be removed and hence not found");
        assertNotNull(binaryTree.find(7), "Successor node with data 7 should not be removed");
        assertEquals(binaryTree.getRoot().data, 7, "Successor node with data 7 should become new root");
    }

    @Test
    public void removeRootNodeTest() {
        assertTrue(binaryTree.remove(10), "Should return true when root node is removed");
        assertEquals(binaryTree.find(7).data, 7, "Root should be replaced with next higher value node");
        assertEquals(binaryTree.getRoot().data, 7, "New root should be the successor of removed root");
    }

    @Test
    public void removeNonExistentNodeTest() {
        assertFalse(binaryTree.remove(100), "Should return false when trying to remove non-existent node");
    }

    @AfterEach
    public void tearDown() {
        binaryTree = null;
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    @Test
    public void removeTest() {
        BinaryTree bt = new BinaryTree();

        // Insert elements
        int[] elements = {50, 30, 20, 40, 70, 60, 80};
        for (int element : elements) {
            bt.put(element);
        }

        // Remove leaf node
        assertTrue(bt.remove(20), "Should return true when removing existing leaf node.");
        assertNull(bt.find(20).left, "The node with value 20 should no longer exist.");

        // Remove node with one child
        assertTrue(bt.remove(30), "Should return true when removing existing node with one child.");
        assertNull(bt.find(40).left, "The node with value 30 should have been replaced by its right child (40).");

        // Remove node with two children
        assertTrue(bt.remove(50), "Should return true when removing existing node with two children.");
        assertEquals(60, bt.getRoot().data, "The node with value 50 should have been replaced by its successor (60).");

        // Try to remove a non-existing node
        assertFalse(bt.remove(100), "Should return false when trying to remove non-existing node.");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    private BinaryTree binaryTree;

    @BeforeEach
    public void setUp() {
        binaryTree = new BinaryTree();
        binaryTree.put(50);
        binaryTree.put(30);
        binaryTree.put(70);
        binaryTree.put(20);
        binaryTree.put(40);
        binaryTree.put(60);
        binaryTree.put(80);
    }

    @Test
    public void removeLeafNodeTest() {
        // Remove leaf node
        assertTrue(binaryTree.remove(20));
        assertNull(binaryTree.find(20));

        // Confirm that removing a non-existent number returns false
        assertFalse(binaryTree.remove(99));
    }

    @Test
    public void removeNodeWithOneChildTest() {
        // Remove node with only one child
        assertTrue(binaryTree.remove(30));
        assertNull(binaryTree.find(30));
        
        // Check if the child node is now directly connected to the parent of the removed node
        assertEquals(40, binaryTree.find(50).left.data);
    }

    @Test
    public void removeNodeWithTwoChildrenTest() {
        // Remove node with two children
        assertTrue(binaryTree.remove(50));
        assertNull(binaryTree.find(50));

        // Check if the successor of the removed node is now the root
        assertEquals(60, binaryTree.getRoot().data);
    }

    @Test
    public void removeRootNodeTest() {
        // Remove root node when it is the only node
        binaryTree = new BinaryTree(new BinaryTree.Node(50));
        assertTrue(binaryTree.remove(50));
        assertNull(binaryTree.getRoot());
    }

    @AfterEach
    public void tearDown() {
        binaryTree = null;
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    
    private BinaryTree binaryTree;
    
    @BeforeEach
    public void setUp() {
        binaryTree = new BinaryTree();
    }

    @Test
    public void removeLeafTest() {
        // Add elements
        binaryTree.put(50);
        binaryTree.put(30);
        binaryTree.put(20);
        binaryTree.put(40);
        binaryTree.put(70);
        binaryTree.put(60);
        binaryTree.put(80);

        // Remove leaf
        assertTrue(binaryTree.remove(20), "Leaf node should be removed");

        // Attempt to remove non-existing leaf
        assertFalse(binaryTree.remove(100), "Non-existing node removal should return false");
    }

    @Test
    public void removeNodeWithOneChildTest() {
        // Add elements
        binaryTree.put(50);
        binaryTree.put(30);
        binaryTree.put(20);
        binaryTree.put(40);
        binaryTree.put(70);
        binaryTree.put(60);

        // Remove node with one child (right child)
        assertTrue(binaryTree.remove(60), "Node with one child should be removed");

        // Now remove node with one child (left child)
        assertTrue(binaryTree.remove(30), "Node with one child should be removed");
    }
    
    @Test
    public void removeNodeWithTwoChildrenTest() {
        // Add elements
        binaryTree.put(50);
        binaryTree.put(30);
        binaryTree.put(20);
        binaryTree.put(40);
        binaryTree.put(70);
        binaryTree.put(60);
        binaryTree.put(80);

        // Remove node with two children
        assertTrue(binaryTree.remove(70), "Node with two children should be removed");
    }

    @Test
    public void removeRootTest() {
        // Add elements
        binaryTree.put(50);
        binaryTree.put(30);
        binaryTree.put(70);

        // Remove root
        assertTrue(binaryTree.remove(50), "Root should be removed");

        // Confirm the new root is one of the children (in this case, it should be 70)
        assertEquals(70, binaryTree.getRoot().data, "New root should be 70 after removal");
    }

    @Test
    public void removeNonExistentValueTest() {
        // Add elements
        binaryTree.put(50);
        binaryTree.put(30);
        binaryTree.put(70);

        // Attempt to remove non-existing value
        assertFalse(binaryTree.remove(10), "Removing non-existent value should return false");
    }

    @AfterEach
    public void tearDown() {
        binaryTree = null;
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    private BinaryTree binaryTree;

    @BeforeEach
    public void setup() {
        binaryTree = new BinaryTree();
        binaryTree.put(50);
        binaryTree.put(30);
        binaryTree.put(70);
        binaryTree.put(20);
        binaryTree.put(40);
        binaryTree.put(60);
        binaryTree.put(80);
    }

    @Test
    public void removeLeafNodeTest() {
        // Initially node with value 20 as leaf node
        assertTrue(binaryTree.remove(20));
        assertNull(binaryTree.find(20));
    }

    @Test
    public void removeNodeWithSingleChildTest() {
        // Node with value 30 has one child (40)
        assertTrue(binaryTree.remove(30));
        assertNull(binaryTree.find(30));
        assertNotNull(binaryTree.find(40));
    }

    @Test
    public void removeNodeWithTwoChildrenTest() {
        // Node with value 50 has two children (30 and 70)
        assertTrue(binaryTree.remove(50));
        assertNull(binaryTree.find(50));
        
        BinaryTree.Node newRootNode = binaryTree.getRoot();
        assertNotNull(newRootNode);
        assertEquals(60, newRootNode.data); // Assuming 'findSuccessor' would give successor as 60
        assertNotNull(binaryTree.find(30));
        assertNotNull(binaryTree.find(70));
    }

    @Test
    public void removeNonExistentNodeTest() {
        // Node with value 100 does not exist
        assertFalse(binaryTree.remove(100));
    }

    @Test
    public void removeRootNodeTest() {
        // Root node with value 50
        assertTrue(binaryTree.remove(50));
        BinaryTree.Node newRootNode = binaryTree.getRoot();
        assertNotNull(newRootNode);
        assertEquals(60, newRootNode.data); // Assuming 'findSuccessor' would give successor as 60
    }

    @AfterEach
    public void tearDown() {
        binaryTree = null;
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    private BinaryTree binaryTree;

    @BeforeEach
    public void setUp() {
        binaryTree = new BinaryTree();
        binaryTree.put(50);
        binaryTree.put(30);
        binaryTree.put(70);
        binaryTree.put(20);
        binaryTree.put(40);
        binaryTree.put(60);
        binaryTree.put(80);
    }

    @Test
    public void removeTest() {
        // Test removing leaf node
        assertTrue(binaryTree.remove(20), "Should return true when removing a leaf node.");
        assertNull(binaryTree.find(20).left, "Leaf node should be removed from parent's left.");
        assertNull(binaryTree.find(20).right, "Leaf node should be removed from parent's right.");
        
        // Test removing node with one child
        assertTrue(binaryTree.remove(30), "Should return true when removing a node with one child.");
        assertEquals(40, binaryTree.find(50).left.data, "The child node should replace the removed node.");
        
        // Test removing node with two children
        assertTrue(binaryTree.remove(70), "Should return true when removing a node with two children.");
        assertNotNull(binaryTree.find(60), "Successor node should be in the place of removed node.");
        
        // Test removing root
        assertTrue(binaryTree.remove(50), "Should return true when removing the root node.");
        assertNotNull(binaryTree.getRoot(), "There should be a new root after old root is removed.");
        
        // Test removing non-existent node
        assertFalse(binaryTree.remove(100), "Should return false when removing a non-existent node.");
    }
}


