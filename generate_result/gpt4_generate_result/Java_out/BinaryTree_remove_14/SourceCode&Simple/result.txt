Source code: 


public boolean remove(int value) {
    // temp is the node to be deleted
    Node temp = find(value);

    // If the value doesn't exist
    if (temp.data != value) {
        return false;
    }

    // No children
    if (temp.right == null && temp.left == null) {
        if (temp == root) {
            root = null;
        } // This if/else assigns the new node to be either the left or right child of the
          // parent
        else if (temp.parent.data < temp.data) {
            temp.parent.right = null;
        } else {
            temp.parent.left = null;
        }
        return true;
    } // Two children
    else if (temp.left != null && temp.right != null) {
        Node successor = findSuccessor(temp);

        // The left tree of temp is made the left tree of the successor
        successor.left = temp.left;
        successor.left.parent = successor;

        // If the successor has a right child, the child's grandparent is it's new parent
        if (successor.parent != temp) {
            if (successor.right != null) {
                successor.right.parent = successor.parent;
                successor.parent.left = successor.right;
            } else {
                successor.parent.left = null;
            }
            successor.right = temp.right;
            successor.right.parent = successor;
        }

        if (temp == root) {
            successor.parent = null;
            root = successor;
        } // If you're not deleting the root
        else {
            successor.parent = temp.parent;

            // This if/else assigns the new node to be either the left or right child of the
            // parent
            if (temp.parent.data < temp.data) {
                temp.parent.right = successor;
            } else {
                temp.parent.left = successor;
            }
        }
        return true;
    } // One child
    else {
        // If it has a right child
        if (temp.right != null) {
            if (temp == root) {
                root = temp.right;
                return true;
            }

            temp.right.parent = temp.parent;

            // Assigns temp to left or right child
            if (temp.data < temp.parent.data) {
                temp.parent.left = temp.right;
            } else {
                temp.parent.right = temp.right;
            }
        } // If it has a left child
        else {
            if (temp == root) {
                root = temp.left;
                return true;
            }

            temp.left.parent = temp.parent;

            // Assigns temp to left or right side
            if (temp.data < temp.parent.data) {
                temp.parent.left = temp.left;
            } else {
                temp.parent.right = temp.left;
            }
        }
        return true;
    }
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    private BinaryTree tree;

    @BeforeEach
    public void setUp() {
        tree = new BinaryTree();
        // Populate the tree with some initial data
        tree.put(50);
        tree.put(30);
        tree.put(70);
        tree.put(20);
        tree.put(40);
        tree.put(60);
        tree.put(80);
    }

    @Test
    public void removeLeafNodeTest() {
        assertTrue(tree.remove(20), "Should return true when removing a leaf node.");
        assertNull(tree.find(20), "Node with value 20 should not be found after removal.");
    }

    @Test
    public void removeNodeWithOneChildTest() {
        assertTrue(tree.remove(30), "Should return true when removing a node with one child.");
        assertNull(tree.find(30), "Node with value 30 should not be found after removal.");
    }

    @Test
    public void removeNodeWithTwoChildrenTest() {
        assertTrue(tree.remove(50), "Should return true when removing a node with two children.");
        assertNull(tree.find(50), "Node with value 50 should not be found after removal.");
        assertEquals(60, tree.getRoot().data, "Root should be the successor of the removed node, which is 60.");
    }

    @Test
    public void removeNonExistentNodeTest() {
        assertFalse(tree.remove(100), "Should return false when trying to remove a non-existent node.");
    }

    @Test
    public void removeRootNodeTest() {
        assertTrue(tree.remove(50), "Should return true when removing the root node.");
        assertTrue(tree.getRoot().data != 50, "Root should no longer be 50 after removal.");
    }

    @AfterEach
    public void tearDown() {
        tree = null;
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    private BinaryTree binaryTree;

    @BeforeEach
    public void setup() {
        binaryTree = new BinaryTree();
        binaryTree.put(10); // Assuming BinaryTree has a method put() to add elements
        binaryTree.put(5);
        binaryTree.put(15);
        binaryTree.put(3);
        binaryTree.put(8);
        binaryTree.put(12);
        binaryTree.put(18);
    }

    @Test
    public void removeTest() {
        // Test removing leaf
        assertTrue(binaryTree.remove(3), "Should return true when removing a leaf node");
        assertNull(binaryTree.find(3), "Leaf node 3 should be removed and not found");

        // Test removing node with one child
        assertTrue(binaryTree.remove(15), "Should return true when removing a node with one child");
        assertNull(binaryTree.find(15), "Node with one child (15) should be removed and not found");

        // Test removing node with two children
        assertTrue(binaryTree.remove(5), "Should return true when removing a node with two children");
        assertNull(binaryTree.find(5), "Node with two children (5) should be removed and not found");
        assertNotNull(binaryTree.find(8), "Successor of removed node (8) should be found");

        // Test removing root
        assertTrue(binaryTree.remove(10), "Should return true when removing the root");
        assertNull(binaryTree.find(10), "Root should be removed and not found");
        assertNotNull(binaryTree.find(12), "New root (successor of old root) should be found");
        
        // Test removing non-existent node
        assertFalse(binaryTree.remove(100), "Should return false when removing a non-existent node");

        // Test removing from an empty tree
        setup(); // Reset tree to only root
        assertTrue(binaryTree.remove(10), "Should return true when removing the last element");
        assertFalse(binaryTree.remove(10), "Should return false when trying to remove from an empty tree");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    private BinaryTree tree;

    @BeforeEach
    public void setUp() {
        tree = new BinaryTree();
        tree.put(50);
        tree.put(30);
        tree.put(70);
        tree.put(20);
        tree.put(40);
        tree.put(60);
        tree.put(80);
    }

    @Test
    public void removeTest() {
        // Assert that removing a node with no children works
        assertTrue(tree.remove(20));
        assertNull(tree.find(20));
        
        // Assert that removing a node with one child works
        assertTrue(tree.remove(30));
        assertNull(tree.find(30));
        assertNotNull(tree.find(40));
        
        // Assert that removing a node with two children works
        assertTrue(tree.remove(50));
        assertNull(tree.find(50));
        assertNotNull(tree.find(60));
        assertNotNull(tree.find(70));
        
        // Assert that removing the root node works if it's the only node
        tree = new BinaryTree(new BinaryTree.Node(10));
        assertTrue(tree.remove(10));
        assertNull(tree.getRoot());
        
        // Assert that remove returns false if the element does not exist
        assertFalse(tree.remove(100));
    }

    @AfterEach
    public void tearDown() {
        tree = null;
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.AfterEach;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    private BinaryTree binaryTree;

    @BeforeEach
    public void setup() {
        binaryTree = new BinaryTree();
        binaryTree.put(50);
        binaryTree.put(30);
        binaryTree.put(70);
        binaryTree.put(20);
        binaryTree.put(40);
        binaryTree.put(60);
        binaryTree.put(80);
    }

    @AfterEach
    public void tearDown() {
        binaryTree = null;
    }

    @Test
    public void removeTest() {
        // Remove leaf node
        assertTrue(binaryTree.remove(20));
        assertNull(binaryTree.find(20));
        assertNotNull(binaryTree.find(30)); // Making sure the parent node is still intact

        // Remove node with one child
        assertTrue(binaryTree.remove(30));
        assertNull(binaryTree.find(30));
        assertNotNull(binaryTree.find(40)); // The child should still exist

        // Remove node with two children
        assertTrue(binaryTree.remove(50));
        assertNull(binaryTree.find(50));
        assertNotNull(binaryTree.find(60)); // Successor should be in the node's place now

        // Remove root node (left over from the previous removes) that should be 60 now
        assertTrue(binaryTree.remove(60));
        assertEquals(70, binaryTree.getRoot().data);
        assertNull(binaryTree.find(60)); // Now 60 should be gone

        // Remove non-existent node
        assertFalse(binaryTree.remove(999));
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    private BinaryTree tree;

    @BeforeEach
    public void setUp() {
        tree = new BinaryTree();
        tree.put(50);
        tree.put(30);
        tree.put(20);
        tree.put(40);
        tree.put(70);
        tree.put(60);
        tree.put(80);
    }

    @Test
    public void removeTest() {
        // Test removing non-existent value
        assertFalse(tree.remove(100), "Removing a non-existent value should return false");

        // Test removing leaf node
        assertTrue(tree.remove(20), "Removing a leaf node should return true");
        assertNull(tree.find(20), "Tree should not contain the removed leaf node");

        // Test removing node with one child
        assertTrue(tree.remove(30), "Removing a node with one child should return true");
        assertNull(tree.find(30), "Tree should not contain the removed node with one child");
        assertNotNull(tree.find(40), "Child of the removed node should still be present");

        // Test removing node with two children
        assertTrue(tree.remove(50), "Removing a node with two children should return true");
        assertNull(tree.find(50), "Tree should not contain the removed node with two children");
        assertNotNull(tree.find(60), "Successor of the removed node should still be present");
        assertEquals(60, tree.getRoot().data, "New root should be the successor of the removed node");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    private BinaryTree binaryTree;
    private BinaryTree.Node rootNode;

    @BeforeEach
    public void setUp() {
        rootNode = new BinaryTree.Node(10);
        binaryTree = new BinaryTree(rootNode);
        binaryTree.put(5);
        binaryTree.put(15);
        binaryTree.put(20);
        binaryTree.put(7);
        binaryTree.put(3);
    }

    @Test
    public void removeTest() {
        // Test removing leaf node
        assertTrue(binaryTree.remove(3), "Leaf node should be removed successfully.");
        assertNull(binaryTree.find(3), "Node with value 3 should not be found after removal.");

        // Test removing node with one child
        assertTrue(binaryTree.remove(15), "Node with one child should be removed successfully.");
        assertNull(binaryTree.find(15), "Node with value 15 should not be found after removal.");
        assertNotNull(binaryTree.find(20), "Child of removed node should still exist.");
        
        // Test removing node with two children
        assertTrue(binaryTree.remove(5), "Node with two children should be removed successfully.");
        assertNull(binaryTree.find(5), "Node with value 5 should not be found after removal.");
        assertNotNull(binaryTree.find(7), "Child of removed node should still exist.");

        // Test removing root node with no children
        binaryTree.remove(7);
        binaryTree.remove(20);
        assertTrue(binaryTree.remove(10), "Root node should be removed successfully.");
        assertNull(binaryTree.getRoot(), "Root should be null after removing the only remaining node.");
        
        // Test removing non-existing node
        assertFalse(binaryTree.remove(99), "Non-existing node removal should return false.");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {
    private BinaryTree bt;

    @BeforeEach
    public void setUp() {
        bt = new BinaryTree();
        bt.put(50);
        bt.put(30);
        bt.put(70);
        bt.put(20);
        bt.put(40);
        bt.put(60);
        bt.put(80);
    }

    @Test
    public void removeTest() {
        // Let's test removal of a leaf node
        assertTrue(bt.remove(20), "Should return true when removing a leaf node.");
        assertNull(bt.find(20), "The node with value 20 should no longer exist.");
        
        // Test removal of a node with one child
        assertTrue(bt.remove(30), "Should return true when removing a node with one child.");
        assertNull(bt.find(30), "The node with value 30 should no longer exist.");
        assertNotNull(bt.find(40), "Child node of removed node should still exist.");
        
        // Test removal of node with two children
        assertTrue(bt.remove(70), "Should return true when removing a node with two children.");
        assertNull(bt.find(70), "The node with value 70 should no longer exist.");
        assertNotNull(bt.find(60), "Child node of removed node should still exist.");
        assertNotNull(bt.find(80), "Child node of removed node should still exist.");

        // Test removing the root node
        assertTrue(bt.remove(50), "Should return true when removing the root.");
        assertNull(bt.find(50), "The root node should no longer exist.");
        assertNotNull(bt.find(60), "New root node should exist.");
        
        // Test removing a nonexistent value
        assertFalse(bt.remove(100), "Should return false when removing a value that doesn't exist.");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    private BinaryTree binaryTree;

    @BeforeEach
    public void setUp() {
        binaryTree = new BinaryTree();
        binaryTree.put(50);
        binaryTree.put(30);
        binaryTree.put(70);
        binaryTree.put(20);
        binaryTree.put(40);
        binaryTree.put(60);
        binaryTree.put(80);
    }

    @Test
    public void removeTest() {
        assertTrue(binaryTree.remove(20), "remove() should return true for removing existing leaf node (20)");
        assertNull(binaryTree.find(20), "find() should return null after node (20) is removed");

        assertTrue(binaryTree.remove(30), "remove() should return true for removing node with single child (30)");
        assertNull(binaryTree.find(30), "find() should return null after node (30) is removed");

        assertTrue(binaryTree.remove(70), "remove() should return true for removing node with two children (70)");
        assertNull(binaryTree.find(70), "find() should return null after node (70) is removed");
        assertNotNull(binaryTree.find(60), "find() should not return null for node (60) which is the new child of (70)'s parent after removal");
        assertNotNull(binaryTree.find(80), "find() should not return null for node (80) which is still in the tree after (70) is removed");

        assertFalse(binaryTree.remove(100), "remove() should return false for attempting to remove a non-existing node (100)");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    private BinaryTree testBinaryTree;

    @BeforeEach
    void setUp() {
        testBinaryTree = new BinaryTree();
        // Add sample nodes to tree
        testBinaryTree.put(5);
        testBinaryTree.put(3);
        testBinaryTree.put(7);
        testBinaryTree.put(2);
        testBinaryTree.put(4);
        testBinaryTree.put(6);
        testBinaryTree.put(8);
    }

    @Test
    public void removeTest() {
        // Remove leaf node
        assertTrue(testBinaryTree.remove(4));
        assertNull(testBinaryTree.find(4));
        
        // Remove node with one child
        assertTrue(testBinaryTree.remove(7));
        assertNull(testBinaryTree.find(7));
        assertNotNull(testBinaryTree.find(8));
        assertNull(testBinaryTree.find(8).right);
        
        // Remove node with two children
        assertTrue(testBinaryTree.remove(5));
        assertNull(testBinaryTree.find(5));
        assertNotNull(testBinaryTree.find(6));

        // Try removing node that doesn't exist
        assertFalse(testBinaryTree.remove(20));

        // Remove root node
        assertTrue(testBinaryTree.remove(6));
        assertNotEquals(6, testBinaryTree.getRoot().data);
        assertNull(testBinaryTree.find(6));
    }

    @AfterEach
    void tearDown() {
        testBinaryTree = null;
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.trees;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BinaryTreeTest {

    private BinaryTree tree;

    @BeforeEach
    public void setUp() {
        tree = new BinaryTree();
        // Assuming put method inserts a value into the tree
        tree.put(50);
        tree.put(30);
        tree.put(70);
        tree.put(20);
        tree.put(40);
        tree.put(60);
        tree.put(80);
    }

    @Test
    public void removeTest() {
        // Remove leaf
        assertTrue(tree.remove(20), "Should return true when remove existing leaf.");
        assertNull(tree.find(20), "20 should no longer exist in the tree.");
        
        // Remove node with one child
        assertTrue(tree.remove(30), "Should return true when removing node with single child.");
        assertNull(tree.find(30), "30 should no longer exist in the tree.");
        assertNotNull(tree.find(40), "40 should still exist in the tree as it was the child of 30.");

        // Remove node with two children
        assertTrue(tree.remove(70), "Should return true when removing node with two children.");
        assertNull(tree.find(70), "70 should no longer exist in the tree.");
        assertNotNull(tree.find(60), "60 should still exist in the tree.");
        assertNotNull(tree.find(80), "80 should still exist in the tree.");
        
        // Try to remove a node that doesn't exist
        assertFalse(tree.remove(100), "Should return false when removing non-existing node.");
        
        // Remove root
        assertTrue(tree.remove(50), "Should return true when removing root.");
        assertNull(tree.find(50), "50 should no longer exist in the tree.");
    }

    // Additional tests can be written here for each scenario
    // ...
}


