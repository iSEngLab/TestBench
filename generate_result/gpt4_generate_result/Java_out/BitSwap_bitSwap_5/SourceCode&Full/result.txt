Source code: 

/*
 * @brief Swaps the bits at the position posA and posB from data
 */
public static int bitSwap(int data, final int posA, final int posB) {
    if (SingleBitOperations.getBit(data, posA) != SingleBitOperations.getBit(data, posB)) {
        data ^= (1 << posA) ^ (1 << posB);
    }
    return data;
}



No.1 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        // Test with bits at same position not swapped
        int data = 0b101010; // 42 in binary
        int expected = 0b101010; // Should be the same as initial
        assertEquals(expected, BitSwap.bitSwap(data, 2, 2), "Bits at the same position should not be swapped.");

        // Test with swapping bits that are different
        data = 0b101010; // 42 in binary
        expected = 0b100110; // 38 in binary, bits 1 and 4 are swapped
        assertEquals(expected, BitSwap.bitSwap(data, 1, 4), "Bits at position 1 and 4 should be swapped.");

        // Test with swapping bits that are the same
        data = 0b101010; // 42 in binary
        expected = 0b101010; // Should be the same as initial
        assertEquals(expected, BitSwap.bitSwap(data, 1, 3), "Bits at position 1 and 3 are the same and should not be swapped.");

        // Test with bits at zero position swapped
        data = 0b101010; // 42 in binary
        expected = 0b101011; // 43 in binary, bits 0 and 1 are swapped
        assertEquals(expected, BitSwap.bitSwap(data, 0, 1), "Bits at position 0 and 1 should be swapped.");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {

    @Test
    public void bitSwapTest() {
        // Test swapping different bits
        int result = BitSwap.bitSwap(0b1011, 0, 1);
        assertEquals(0b1001, result, "Swapping bit 0 and bit 1 of 0b1011 should result in 0b1001.");

        // Test swapping the same bit (no change expected)
        result = BitSwap.bitSwap(0b1011, 2, 2);
        assertEquals(0b1011, result, "Swapping the same bit position should result in no changes.");

        // Test swapping bits that are already the same (no change expected)
        result = BitSwap.bitSwap(0b1100, 2, 3);
        assertEquals(0b1100, result, "Swapping bit 2 and bit 3 of 0b1100 should result in no changes.");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        // Test with same bit positions - no change expected
        assertEquals(0b10110, BitSwap.bitSwap(0b10110, 2, 2));

        // Test with different bit positions - swap expected
        assertEquals(0b00110, BitSwap.bitSwap(0b10100, 2, 4));

        // Test with leading and trailing bits - swap expected
        assertEquals(0b10001, BitSwap.bitSwap(0b00010, 0, 4));

        // Test with all bits different - full swap expected
        assertEquals(0b11110000, BitSwap.bitSwap(0b00001111, 0, 7));

        // Test with negative data value
        assertEquals(-0b10111, BitSwap.bitSwap(-0b10101, 0, 1));
    }
}


No.4 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    
    @Test
    public void bitSwapTest() {
        // Test case where bits differ and should be swapped
        assertEquals(0b101, BitSwap.bitSwap(0b001, 0, 2)); // swapping the least and most significant bit of 0b001

        // Test case where bits are the same and no swap should occur
        assertEquals(0b101, BitSwap.bitSwap(0b101, 0, 2)); // both bits at position 0 and 2 are 1
        
        // Test case with negative number
        int data = -0b101001; // negative binary number
        int expected = -0b100101; // expected after swap between positions 0 and 2
        assertEquals(expected, BitSwap.bitSwap(data, 0, 2));
        
        // Test swapping with itself should give the same number
        assertEquals(0b1101, BitSwap.bitSwap(0b1101, 2, 2));
        
        // Test swapping the most significant bit (MSB) with a bit at a different position
        assertEquals(0b0100, BitSwap.bitSwap(0b1000, 3, 2));
        
        // Test case to swap bit 1 and bit 3
        assertEquals(0b0110, BitSwap.bitSwap(0b1001, 1, 3));
    }
}


No.5 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        // Test case where bits are the same and therefore, no change should happen
        assertEquals(5, BitSwap.bitSwap(5, 0, 2)); // 5 in binary is 101, swapping the 0th and 2nd bits changes nothing

        // Test case where bits are different and should be swapped
        assertEquals(1, BitSwap.bitSwap(2, 0, 1)); // 2 in binary is 10, swapping the 0th and 1st bits should yield 01
        
        // Test case on a large number and distant bit positions
        assertEquals(0b1001000, BitSwap.bitSwap(0b1010000, 3, 6)); // Swap bit 3 and 6 of 0b1010000 -> should result in 0b1001000

        // Test case to ensure no change when swapping the same bit position
        assertEquals(0b1101, BitSwap.bitSwap(0b1101, 2, 2)); // Swapping the same bit position should result in no change
    }
}


No.6 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {

    @Test
    public void bitSwapTest() {
        // Case 1: Swapping different bits
        int result1 = BitSwap.bitSwap(0b1010, 1, 3); // Swap bits at positions 1 and 3
        assertEquals(0b0010, result1, "Bits at positions 1 and 3 should be swapped.");

        // Case 2: Swapping same bits, no change should happen
        int result2 = BitSwap.bitSwap(0b1010, 2, 3); // Swap bits at positions 2 and 3
        assertEquals(0b1010, result2, "Swapping identical bits should not change the data.");

        // Case 3: Edge Case - Swapping the least-significant and most-significant bit
        int result3 = BitSwap.bitSwap(0b1001, 0, 3); // Swap bits at positions 0 and 3
        assertEquals(0b0001, result3, "Bits at positions 0 and 3 should be swapped.");

        // Case 4: Swapping bits with negative position (invalid case)
        // Since the method doesn't handle negative positions, we assume this as an invalid case
        // We could either expect an exception or, no change in data if exception handling not done
        // Uncomment the following lines if exceptions are expected/handled
        // assertThrows(IndexOutOfBoundsException.class, () -> BitSwap.bitSwap(0b0101, -1, 2), "Negative index should throw an exception.");
        
        // Case 5: Swapping bits with position outside the integer range (invalid case)
        // Similarly, we assume this as an invalid scenario, expecting either no change or exception
        // Uncomment the following line if exceptions are expected/handled
        // assertThrows(IndexOutOfBoundsException.class, () -> BitSwap.bitSwap(0b0101, 32, 2), "Index out of bound should throw an exception.");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {

    @Test
    public void bitSwapTest() {
        // Swap bits 0 and 1 (0b01 --> 0b10 which is 2 in decimal)
        assertEquals(2, BitSwap.bitSwap(1, 0, 1));

        // Swap bits 0 and 2 (0b101 --> 0b001 which is 1 in decimal)
        assertEquals(1, BitSwap.bitSwap(5, 0, 2));
        
        // Swap bits that are the same should result in the same number
        assertEquals(10, BitSwap.bitSwap(10, 1, 1));
        
        // Test with bits at higher positions
        assertEquals(0b101000, BitSwap.bitSwap(0b100010, 1, 5));
        
        // Test with negative number
        int result = BitSwap.bitSwap(-3, 0, 1); // Swap LSBs: 0b...11111101 to 0b...11111110
        assertTrue(Integer.bitCount(result) == Integer.bitCount(-3)); // Sanity check (same number of bits)
        
        // Make sure that the method doesn't modify the bits if posA and posB are equal
        assertEquals(7, BitSwap.bitSwap(7, 2, 2));
    }
}


No.8 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {

    @Test
    public void bitSwapTest() {
       // Test cases for bitSwap method
       int testData = 0b101;
       int posA = 0; // bit position (starting from 0)
       int posB = 2; // bit position (starting from 0)
       int expected = 0b010; // Expecting to swap the bits: 101 -> 010
       assertEquals(expected, BitSwap.bitSwap(testData, posA, posB), "Bits were not swapped correctly");

       testData = 0b111000;
       posA = 2;
       posB = 5;
       expected = 0b101010; // Expecting to swap bits: 111000 -> 101010
       assertEquals(expected, BitSwap.bitSwap(testData, posA, posB), "Bits were not swapped correctly");

       // Test where bits at posA and posB are the same; no change expected
       testData = 0b111000;
       posA = 1;
       posB = 4;
       expected = testData; // As bits are the same, expect no change
       assertEquals(expected, BitSwap.bitSwap(testData, posA, posB), "Bits should not have been swapped");
       
       // Test swapping bits back to their original position
       testData = 0b010; // Starting with bits swapped
       posA = 0; // bit position (starting from 0)
       posB = 2; // bit position (starting from 0)
       expected = 0b101; // Expect to swap bits back: 010 -> 101
       assertEquals(expected, BitSwap.bitSwap(testData, posA, posB), "Bits were not swapped back correctly");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class BitSwapTest {

    @Test
    public void bitSwapTest() {
        // Test swapping different bits
        assertEquals(0b0110, BitSwap.bitSwap(0b1010, 1, 2));
        assertEquals(0b1001, BitSwap.bitSwap(0b0110, 0, 3));

        // Test swapping bits that are the same (no change expected)
        assertEquals(0b1010, BitSwap.bitSwap(0b1010, 1, 3));
        assertEquals(0b0101, BitSwap.bitSwap(0b0101, 1, 3));

        // Test swapping bits at edge positions
        assertEquals(0b1000_0000_0000_0000_0000_0000_0000_0011,
                     BitSwap.bitSwap(0b0000_0000_0000_0000_0000_0000_0000_1011, 0, 31));
        
        // Test swapping bits for maximum integer value
        assertEquals(Integer.MAX_VALUE - 1, BitSwap.bitSwap(Integer.MAX_VALUE, 0, 1));
        
        // Test swapping the same bit position (no change expected)
        assertEquals(0b1010, BitSwap.bitSwap(0b1010, 2, 2));
    }
}


No.10 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        assertEquals(10, BitSwap.bitSwap(2, 1, 3)); // 0010 -> 1010
        
        assertEquals(2, BitSwap.bitSwap(10, 1, 3)); // 1010 -> 0010
        
        assertEquals(0b11001, BitSwap.bitSwap(0b10011, 0, 4)); // 10011 -> 11001
        
        assertEquals(0b10011, BitSwap.bitSwap(0b11001, 0, 4)); // 11001 -> 10011
        
        assertEquals(0b11110000, BitSwap.bitSwap(0b11110000, 2, 6)); // no change because bits are the same
        
        assertEquals(-1, BitSwap.bitSwap(-1, 0, 31)); // no change because bits are the same
        
        assertEquals(0x7FFFFFFE, BitSwap.bitSwap(0x80000001, 0, 31)); // 100...1 -> 011...0
        
        assertEquals(0x80000001, BitSwap.bitSwap(0x7FFFFFFE, 0, 31)); // 011...0 -> 100...1
    }
}


