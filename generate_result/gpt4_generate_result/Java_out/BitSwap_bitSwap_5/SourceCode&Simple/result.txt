Source code: 

/*
 * @brief Swaps the bits at the position posA and posB from data
 */
public static int bitSwap(int data, final int posA, final int posB) {
    if (SingleBitOperations.getBit(data, posA) != SingleBitOperations.getBit(data, posB)) {
        data ^= (1 << posA) ^ (1 << posB);
    }
    return data;
}



No.1 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        // Initial data with the bit patterns. Example: int 2 is 0010 in binary.
        int initialData1 = 0b0010; // bit at position 1 is 1, and at position 2 is 0
        int initialData2 = 0b1010; // bit at position 1 is 1, and at position 3 is 0

        // Expected results after swapping bits.
        int expectedData1 = 0b0100; // expected result after swapping bits at positions 1 and 2
        int expectedData2 = 0b0010; // expected result after swapping bits at positions 1 and 3

        // Perform the actual bit swapping.
        int resultData1 = BitSwap.bitSwap(initialData1, 1, 2);
        int resultData2 = BitSwap.bitSwap(initialData2, 1, 3);

        // Assert that the expected outcomes are correct.
        assertEquals(expectedData1, resultData1, "Bits at positions 1 and 2 should be swapped.");
        assertEquals(expectedData2, resultData2, "Bits at positions 1 and 3 should be swapped.");
        
        // Test with the same position, the data should remain unchanged
        int resultData3 = BitSwap.bitSwap(initialData1, 1, 1);
        assertEquals(initialData1, resultData3, "Bits at the same position should result in no change.");

        // Test with an edge case of zero data, swap should have no effect
        int resultData4 = BitSwap.bitSwap(0, 1, 2);
        assertEquals(0, resultData4, "Bits swap on zero data should result in zero.");

        // Test with an edge case of all bits as ones, swap should have no effect
        int resultData5 = BitSwap.bitSwap(~0, 1, 2);
        assertEquals(~0, resultData5, "Bits swap with all ones should remain unchanged.");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class BitSwapTest {

    @Test
    public void bitSwapTest() {
        // Assuming we have a class SingleBitOperations with a method getBit for the sake of this task
        assertEquals(BitSwap.bitSwap(0b1010, 1, 3), 0b0101); // Swaps 0 with 1
        assertEquals(BitSwap.bitSwap(0b1001, 0, 3), 0b0010); // Swaps 1 with 0
        assertEquals(BitSwap.bitSwap(0b1010, 2, 3), 0b1010); // Bits are the same, no swap needed
        assertEquals(BitSwap.bitSwap(0b1111, 0, 3), 0b1111); // Bits are the same, no swap needed
        assertEquals(BitSwap.bitSwap(0b0000, 1, 2), 0b0000); // Bits are the same, no swap needed
        assertEquals(BitSwap.bitSwap(0xFFFFFFFF, 31, 0), 0xFFFFFFFF); // Bits are the same (all 1s), no swap needed
        assertEquals(BitSwap.bitSwap(0xAAAAAAAA, 31, 0), 0x55555555); // Swaps a pair of bits in a pattern
    }
}


No.3 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        // Test with no actual swap needed (bits at posA and posB are the same)
        assertEquals(BitSwap.bitSwap(0b1010, 1, 3), 0b1010, "No swap: bits are equal");

        // Test with swap needed (bits at posA and posB are different)
        assertEquals(BitSwap.bitSwap(0b1010, 0, 1), 0b1001, "Swap: bits at position 0 and 1 are different");

        // Test with swap needed with different positions 
        assertEquals(BitSwap.bitSwap(0b1110, 2, 3), 0b1011, "Swap: bits at position 2 and 3 are different");

        // Edge cases: swapping the same position should not alter the data
        assertEquals(BitSwap.bitSwap(0xFFFFFFFF, 0, 0), 0xFFFFFFFF, "Swap: same positions should not alter the data");

        // Test with different large value and swapping the least and most significant bits
        assertEquals(BitSwap.bitSwap(0xA5A5A5A5, 0, 31), 0x5A5A5A5A, "Swap: least and most significant bits are different");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        // Test bit swapping of data if bits are different
        int data = 0b1010; // binary representation: 10 in decimal
        int posA = 1;
        int posB = 3;
        int expectedResult = 0b0101; // After swapping bit at position 1 and 3, it should be 5 in decimal
        assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));
        
        // Test bit swapping of data if bits are the same
        data = 0b1010; // binary representation: 10 in decimal
        posA = 1;
        posB = 2;
        expectedResult = data; // Since bits at position 1 and 2 are same, data should remain unchanged (10 in decimal)
        assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));

        // Test with negative numbers and different positions
        data = -0b1010; // binary representation: -10 in decimal, in two's complement
        posA = 0;
        posB = 3;
        // Expected to swap the least significant bit with a bit at position 3
        expectedResult = -0b0111; // Should be -7 in decimal after swapping
        assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));
        
        // Test bit swapping with large numbers
        data = 0b10000000000000000000000000001111; // large number with some bit set
        posA = 0;
        posB = 31;
        expectedResult = 0b01111000000000000000000000000001; // Expected to swap highest bit with the lowest bit
        assertEquals(expectedResult, BitSwap.bitSwap(data, posA, posB));
    }
}


No.5 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {

    @Test
    public void bitSwapTest() {
        // Case 1: Swap bits that are different
        int originalData = 0b1010; // binary representation: 10 in decimal
        int swappedData = BitSwap.bitSwap(originalData, 1, 3);
        assertEquals(0b0101, swappedData); // expected result after swapping is 5 in decimal
        
        // Case 2: Swap bits that are the same
        originalData = 0b1001; // binary representation: 9 in decimal
        swappedData = BitSwap.bitSwap(originalData, 0, 3);
        assertEquals(0b1001, swappedData); // expected result is the same since bits are identical
        
        // Case 3: Test with swapping bits at the boundaries of an integer
        originalData = 0b1000_0000_0000_0000_0000_0000_0000_0001; // -2147483648 (Integer.MIN_VALUE) with a flipped LSB
        swappedData = BitSwap.bitSwap(originalData, 0, 31);
        assertEquals(0b0000_0000_0000_0000_0000_0000_0000_0010, swappedData); // expected is 2 in decimal
        
        // Add more cases as necessary to fully test the method
        // ...
    }
}


No.6 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        // Case where bits are different and should be swapped
        assertEquals(11, BitSwap.bitSwap(9, 0, 3), "Bits at position 0 and 3 should be swapped.");
        
        // Case where bits are the same and no swap should happen
        assertEquals(10, BitSwap.bitSwap(10, 1, 2), "Bits at position 1 and 2 are the same. No swap.");
        
        // Case where posA and posB are the same
        assertEquals(8, BitSwap.bitSwap(8, 2, 2), "Swapping the same bit position should result in no change.");
        
        // Case where bit positions are out of bounds for the data size (assumes int size of 32 bits)
        assertThrows(IndexOutOfBoundsException.class, () -> {
            BitSwap.bitSwap(5, 32, 33);
        }, "Should throw IndexOutOfBoundsException for bit positions beyond data size.");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
  
    @Test
    public void bitSwapTest() {
        assertEquals(10, BitSwap.bitSwap(2, 1, 3)); // Case where the bits are different and should be swapped
        assertEquals(2, BitSwap.bitSwap(2, 1, 1)); // Case where same bits are to be swapped, should remain unchanged
        assertEquals(0, BitSwap.bitSwap(0, 1, 3)); // Swap on all zeros should result in zero
        assertEquals(-1, BitSwap.bitSwap(-1, 1, 3)); // Swap on all ones (or -1 in two's complement) should result in -1
        assertEquals(6, BitSwap.bitSwap(5, 2, 1)); // Swapping bits in positions 2 and 1 in 5 (binary 101) should result in 6 (binary 110)
        assertThrows(IllegalArgumentException.class, () -> BitSwap.bitSwap(5, 32, 1)); // Should throw an exception for invalid bit position > 31
        assertThrows(IllegalArgumentException.class, () -> BitSwap.bitSwap(5, -1, 1)); // Should throw an exception for negative bit position
    }
}


No.8 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    
    @Test
    public void bitSwapTest() {
        // Test swapping different bits
        int dataOriginal = 0b1010; // binary representation: 10 in decimal
        int posA = 1; // second bit from right
        int posB = 3; // fourth bit from right
        int expected = 0b0101; // after swapping, should be 5 in decimal
        assertEquals(expected, BitSwap.bitSwap(dataOriginal, posA, posB));

        // Test swapping the same bit, should not affect the data
        dataOriginal = 0b1010; // binary representation: 10 in decimal
        posA = 2; // third bit from right
        posB = 2; // third bit from right
        expected = 0b1010; // after "swapping", should remain same
        assertEquals(expected, BitSwap.bitSwap(dataOriginal, posA, posB));
        
        // Test swapping bits at positions with the same bit value; no change expected
        dataOriginal = 0b1010; // binary representation: 10 in decimal
        posA = 0; // first bit from right
        posB = 2; // third bit from right
        expected = 0b1010; // after swapping same bits, should remain same
        assertEquals(expected, BitSwap.bitSwap(dataOriginal, posA, posB));
    }
}


No.9 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {

    @Test
    public void bitSwapTest() {
        // Test swapping different bits
        assertEquals(0b10110, BitSwap.bitSwap(0b10011, 1, 4)); // swaps bits at 1 and 4 position (0-based)
        
        // Test swapping the same bit: no change expected
        assertEquals(0b10101, BitSwap.bitSwap(0b10101, 2, 2)); // swapping the same bit position should result in the same number
        
        // Additional test cases
        assertEquals(0b11101, BitSwap.bitSwap(0b11011, 0, 2)); // swaps bits at 0 and 2 position (0-based)
        assertEquals(0b11001, BitSwap.bitSwap(0b11001, 0, 5)); // swapping with a bit outside of the number's range should result in no change
        assertEquals(0xFFFFFFFF, BitSwap.bitSwap(0xFFFFFFFF, 16, 31)); // swapping bits in a number where all bits are set should result in no change

        // Test with 0 data input
        assertEquals(0, BitSwap.bitSwap(0, 0, 31)); // swapping bits in a 0 number should result in no change

        // Test with negative numbers
        assertEquals(-1073741825, BitSwap.bitSwap(-1073741823, 0, 31)); // swaps MSB and LSB of Integer.MAX_VALUE + 2
    }
}


No.10 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {

    @Test
    public void bitSwapTest() {
        // Test case when the bits at posA and posB are the same - no change expected
        assertEquals(0b1010, BitSwap.bitSwap(0b1010, 1, 3));

        // Test case when bits are different - swap should change the positions
        assertEquals(0b1110, BitSwap.bitSwap(0b1101, 2, 0));
        
        // Test case with swapping the same position - no change expected
        assertEquals(0b1001, BitSwap.bitSwap(0b1001, 0, 0));
        
        // Test for large data values
        assertEquals(0b10010010010010010010010010010010, BitSwap.bitSwap(0b10010010010010010010010010010010, 16, 16));
        
        // Test case with negative data
        assertEquals(-0b10010010010010010010010010010010, BitSwap.bitSwap(-0b10010010010010010010010010010011, 1, 0));
        
        // Test case with posA and posB out of range, assuming that they should not modify the data
        // This assumes the SingleBitOperations.getBit method handles out of range values without error.
        // If SingleBitOperations.getBit may throw an exception for out of range values, exception handling should be tested instead.
        assertEquals(0b1001, BitSwap.bitSwap(0b1001, 32, 32));
        assertEquals(0b1001, BitSwap.bitSwap(0b1001, -1, -1));
    }
}


