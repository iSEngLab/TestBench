Source code: 

/*
 * @brief Swaps the bits at the position posA and posB from data
 */
public static int bitSwap(int data, final int posA, final int posB) {
    if (SingleBitOperations.getBit(data, posA) != SingleBitOperations.getBit(data, posB)) {
        data ^= (1 << posA) ^ (1 << posB);
    }
    return data;
}



No.1 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    
    @Test
    public void bitSwapTest() {
        // Let's test with a number where binary representation
        // is '1010' (10 in decimal), and we swap the bits at position 1 and 3.
        // After swapping the binary representation should be '0101' (5 in decimal).
        int data = 10; // binary: 1010
        int posA = 1;
        int posB = 3;
        int expected = 5; // binary: 0101
        int result = BitSwap.bitSwap(data, posA, posB);
        assertEquals(expected, result, "Bits at positions 1 and 3 should be swapped.");

        // Test where swapping does not alter the number
        // For example, '1010' swapping positions 2 and 2 (same position) should result in '1010'.
        data = 10; // binary: 1010
        posA = 2;
        posB = 2;
        expected = 10; // binary: 1010 (no change expected)
        result = BitSwap.bitSwap(data, posA, posB);
        assertEquals(expected, result, "Swapping bits at the same position should not change the data.");

        // Test with another number where we swap end bits (positions 0 and 3)
        // For '1001' (9 in decimal), swapping should result in '0110' (6 in decimal).
        data = 9; // binary: 1001
        posA = 0;
        posB = 3;
        expected = 6; // binary: 0110
        result = BitSwap.bitSwap(data, posA, posB);
        assertEquals(expected, result, "Bits at positions 0 and 3 should be swapped.");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        assertEquals(0b1010, BitSwap.bitSwap(0b1001, 1, 3));
        assertEquals(0b1001, BitSwap.bitSwap(0b1010, 1, 3));
        assertEquals(-1, BitSwap.bitSwap(-1, 1, 3)); // Assuming -1 in bits is all bits set due to two's complement.
        assertEquals(0, BitSwap.bitSwap(0, 1, 3));
        assertEquals(0b1110, BitSwap.bitSwap(0b0111, 0, 3));
        assertEquals(0b1001000, BitSwap.bitSwap(0b1000100, 2, 5));
        assertEquals(0b10000000, BitSwap.bitSwap(0b00000001, 7, 0));
        // Test the same bit position should not change the data
        assertEquals(0b1001, BitSwap.bitSwap(0b1001, 2, 2));
    }
}


No.3 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        // Test swapping bits that are different
        int inputData = 0b1010; // binary representation is 1010 (10 in decimal)
        int expectedData = 0b0101; // expected after swap is 0101 (5 in decimal)
        int posA = 0; // position of the first bit (counting from 0)
        int posB = 2; // position of the second bit (counting from 0)
        int resultData = BitSwap.bitSwap(inputData, posA, posB);
        assertEquals(expectedData, resultData, "The bits were not swapped correctly.");

        // Test swapping bits that are the same
        inputData = 0b1110; // binary representation is 1110 (14 in decimal)
        expectedData = 0b1110; // expected after swap is 1110 (14 in decimal, no change)
        posA = 1; // position of the first bit (counting from 0)
        posB = 3; // position of the second bit (counting from 0)
        resultData = BitSwap.bitSwap(inputData, posA, posB);
        assertEquals(expectedData, resultData, "The bits were swapped incorrectly (should be no change).");

        // Test swap between the same position (should have no effect)
        inputData = 0b1001; // binary representation is 1001 (9 in decimal)
        expectedData = 0b1001; // expected after swap is 1001 (9 in decimal, no change)
        posA = 0; // both positions are the same
        posB = 0; // both positions are the same
        resultData = BitSwap.bitSwap(inputData, posA, posB);
        assertEquals(expectedData, resultData, "The bits were swapped incorrectly (should be no change).");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {

    @Test
    public void bitSwapTest() {
        // Example usage of the bitSwap method
        // Let's say we swap bits at position 2 and 5 in the number 42 (binary 00101010)
        // Expected result is binary 10000010 which is 130 in decimal
        assertEquals(130, BitManipulation.bitSwap(42, 2, 5));
        
        // Testing with the same bit position should return the same data
        assertEquals(42, BitManipulation.bitSwap(42, 2, 2));
        
        // Testing with zero should return zero
        assertEquals(0, BitManipulation.bitSwap(0, 1, 3));
        
        // Testing with the highest and lowest bit positions swapped
        int data = 0b10000000000000000000000000000001; // This is -2147483647 in two's complement
        int expected = 0b00000000000000000000000000000010; // This is 2 in decimal
        assertEquals(expected, BitManipulation.bitSwap(data, 0, 31));
    }
}


No.5 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {

    @Test
    public void bitSwapTest() {
        // Test swapping different bits
        int originalData = 0b101010; // binary representation of 42
        int posA = 1; // second bit from the right
        int posB = 5; // sixth bit from the right
        int expectedOutput = 0b001011; // binary representation of 11
        assertEquals(expectedOutput, BitManipulation.bitSwap(originalData, posA, posB));

        // Test swapping the same bit (should result in the same data)
        originalData = 0b101010; // binary representation of 42
        posA = 2;
        posB = 2; // Same position
        expectedOutput = originalData; // Should remain unchanged
        assertEquals(expectedOutput, BitManipulation.bitSwap(originalData, posA, posB));

        // Test swapping bits that are already the same (should result in the same data)
        originalData = 0b111000; // binary representation of 56
        posA = 4;
        posB = 5;
        expectedOutput = originalData; // Since bits at position 4 and 5 are the same, there's no change
        assertEquals(expectedOutput, BitManipulation.bitSwap(originalData, posA, posB));
    }
}

// Note: You should assume that a class named BitManipulation exists and that it contains the static method bitSwap. 
// The test class is named BitSwapTest accordingly.


No.6 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {

    @Test
    public void bitSwapTest() {
        // Case 1: Swapping different bits
        int data1 = 0b1010; // Binary representation of 10
        int result1 = BitSwap.bitSwap(data1, 1, 3); // Should swap bits at positions 1 and 3
        assertEquals(0b0101, result1); // Expected result is 5

        // Case 2: Swapping the same bit - should yield the same number
        int data2 = 0b1010; // Binary representation of 10
        int result2 = BitSwap.bitSwap(data2, 2, 2); // Swapping the same bit should result in no change
        assertEquals(data2, result2);

        // Case 3: Swapping bits that are already the same - should yield same number
        int data3 = 0b1110; // Binary representation of 14
        int result3 = BitSwap.bitSwap(data3, 1, 2); // Bits at positions 1 and 2 are the same
        assertEquals(data3, result3);

        // Case 4: Swapping bits with zero - should toggle bits
        int data4 = 0b1001; // Binary representation of 9
        int result4 = BitSwap.bitSwap(data4, 0, 3); // Should swap bits at positions 0 and 3
        assertEquals(0b0010, result4); // Expected result is 2

        // Add more cases if needed to test additional scenarios
    }
}


No.7 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {

    @Test
    public void bitSwapTest() {
        // Test swapping different bits
        assertEquals(10, BitManipulation.bitSwap(8, 0, 1));

        // Test swapping the same bit, the value should not change
        assertEquals(8, BitManipulation.bitSwap(8, 1, 1));

        // Test with negative numbers
        assertEquals(-2147483648, BitManipulation.bitSwap(-1, 31, 0));

        // Test with zero, no bits to swap, the value should not change
        assertEquals(0, BitManipulation.bitSwap(0, 2, 5));
    }
}


No.8 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {

    @Test
    public void bitSwapTest() {
        // Let's create a scenario where we know what the output should be  
        // For example, swap bits at positions 1 and 3 (zero-based) in the binary number 00010110 (22 in decimal)
        // After the swap, it should become 00100100 (36 in decimal)

        int originalData = 22; // binary: 00010110
        int expectedData = 36; // binary: 00100100
        int posA = 1;
        int posB = 3;

        // Let's test with a known example
        assertEquals(expectedData, BitSwap.bitSwap(originalData, posA, posB));

        // Test if swapping the same position results in the same number
        assertEquals(originalData, BitSwap.bitSwap(originalData, posA, posA));

        // Test with different numbers, posA, and posB 
        originalData = 57; // binary: 00111001
        expectedData = 49;  // binary: 00110001
        posA = 0; 
        posB = 3;

        assertEquals(expectedData, BitSwap.bitSwap(originalData, posA, posB));

        // Test with a case where bits are already the same and should not change
        originalData = 10; // binary: 00001010
        expectedData = originalData; // should remain unchanged
        posA = 1;
        posB = 3;

        assertEquals(expectedData, BitSwap.bitSwap(originalData, posA, posB));
    }
}


No.9 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        assertEquals(10, SingleBitOperations.bitSwap(12, 1, 2));
        assertEquals(12, SingleBitOperations.bitSwap(10, 1, 2));
        assertEquals(1, SingleBitOperations.bitSwap(1, 0, 2));
        assertEquals(5, SingleBitOperations.bitSwap(5, 3, 7));
        assertEquals(0b10101, SingleBitOperations.bitSwap(0b10011, 0, 2));
        assertEquals(-1, SingleBitOperations.bitSwap(-1, 1, 30));
        assertEquals(0, SingleBitOperations.bitSwap(0, 1, 2));
    }
}


No.10 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        // Test case where bits are different and should be swapped
        int data = 0b1010; // binary representation of 10
        int posA = 1;
        int posB = 3;
        int expectedResult = 0b0101; // binary representation of 5 after swap
        assertEquals(expectedResult, SingleBitOperations.bitSwap(data, posA, posB));

        // Test case where bits are the same and data should remain unchanged
        data = 0b10101; // binary representation of 21
        posA = 2;
        posB = 0;
        expectedResult = 0b10101; // binary representation remains 21
        assertEquals(expectedResult, SingleBitOperations.bitSwap(data, posA, posB));

        // Test with another set where bits are different
        data = 0b1111; // binary representation of 15
        posA = 3;
        posB = 0;
        expectedResult = 0b10001; // binary representation of 17 after swap
        assertEquals(expectedResult, SingleBitOperations.bitSwap(data, posA, posB));
        
        // Test swapping bits in the same position should result in the same number
        data = 0b1001; // binary representation of 9
        posA = 2;
        posB = 2;
        expectedResult = 0b1001; // binary representation remains 9
        assertEquals(expectedResult, SingleBitOperations.bitSwap(data, posA, posB));
        
        // Test invalid positions, expecting original data as positions are out of bounds
        data = 0b0010; // binary representation of 2
        posA = 32;     // out of bound position
        posB = 1;
        expectedResult = data; // Should remain unchanged
        assertEquals(expectedResult, SingleBitOperations.bitSwap(data, posA, posB));

        data = 0b0110; // binary representation of 6
        posA = 1;
        posB = -1;    // negative position
        expectedResult = data; // Should remain unchanged
        assertEquals(expectedResult, SingleBitOperations.bitSwap(data, posA, posB));
    }
}


