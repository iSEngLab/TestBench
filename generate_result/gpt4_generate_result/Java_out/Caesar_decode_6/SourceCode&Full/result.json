{
    "project_name": "Java",
    "file_name": "Caesar.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/Caesar.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Decrypt message by shifting back every Latin char to previous the ASCII\n     * Example : B - 1 -> A\n     *\n     * @return message\n     */",
    "source_code": "\npublic String decode(String encryptedMessage, int shift) {\n    StringBuilder decoded = new StringBuilder();\n\n    shift %= 26;\n\n    final int length = encryptedMessage.length();\n    for (int i = 0; i < length; i++) {\n        char current = encryptedMessage.charAt(i);\n        if (isCapitalLatinLetter(current)) {\n            current -= shift;\n            decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters\n        } else if (isSmallLatinLetter(current)) {\n            current -= shift;\n            decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters\n        } else {\n            decoded.append(current);\n        }\n    }\n    return decoded.toString();\n}\n",
    "class_name": "Caesar",
    "method_name": "decode",
    "arguments": [
        "String encryptedMessage",
        "int shift"
    ],
    "generate_test": [
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n  private Caesar caesar;\n\n  @BeforeEach\n  public void setUp() {\n    caesar = new Caesar();\n  }\n\n  @Test\n  public void decodeTest() {\n    String originalMessage = \"Hello World!\";\n    int shift = 3;\n    \n    // Encrypting the original message by shifting it by 3 characters\n    String encryptedMessage = caesar.encode(originalMessage, shift);\n\n    // Decoding the message by shifting it back by 3 characters\n    String decodedMessage = caesar.decode(encryptedMessage, shift);\n\n    // Asserting that the original and decoded messages are equal\n    assertEquals(originalMessage, decodedMessage);\n\n    // Test case with wrapping around the end of the alphabet\n    String shiftedMessage = \"Axeeh Phkew!\";\n    assertEquals(\"Hello World!\", caesar.decode(shiftedMessage, shift));\n    \n    // Test handling non alphabetic characters (they should remain unchanged)\n    String specialChars = \"1234567890-=`~!@#$%^&*()_+[]\\\\{}|;':\\\",./<>?\";\n    assertEquals(specialChars, caesar.decode(specialChars, shift));\n\n    // Test with max possible shift of 26 which is effectively no shift\n    assertEquals(originalMessage, caesar.decode(originalMessage, 26));\n\n    // Test with negative shift\n    String negativeShiftDecoded = caesar.decode(\"Khoor Zruog!\", -3);\n    assertEquals(originalMessage, negativeShiftDecoded);\n    \n    // Test zero shift\n    assertEquals(originalMessage, caesar.decode(originalMessage, 0));\n  }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    private static Caesar caesar;\n\n    @BeforeAll\n    public static void setUp() {\n        caesar = new Caesar();\n    }\n\n    @Test\n    public void decodeTest() {\n        // Test basic decoding with shift\n        assertEquals(\"ABCD\", caesar.decode(\"BCDE\", 1), \"Decoding BCDE by a shift of 1 should give ABCD\");\n\n        // Test decoding with shift that wraps around the alphabet\n        assertEquals(\"ZABC\", caesar.decode(\"ABCD\", 1), \"Decoding ABCD by a shift of 1 should give ZABC\");\n\n        // Test decoding with negative shift\n        assertEquals(\"XYZ\", caesar.decode(\"ABC\", 25), \"Decoding ABC by a shift of 25 should give XYZ\");\n\n        // Test decoding with shift larger than the number of letters\n        assertEquals(\"BCD\", caesar.decode(\"CDE\", 27), \"Decoding CDE by a shift of 27 should give BCD\");\n\n        // Test decoding with non-alphabetic characters included\n        assertEquals(\"Hello, World!\", caesar.decode(\"Ifmmp, Xpsme!\", 1), \"Decoding 'Ifmmp, Xpsme!' by a shift of 1 should give 'Hello, World!'\");\n\n        // Test decoding an empty string\n        assertEquals(\"\", caesar.decode(\"\", 5), \"Decoding an empty string should return an empty string\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    private Caesar caesar;\n\n    @BeforeEach\n    void setUp() {\n        caesar = new Caesar();\n    }\n\n    @Test\n    public void decodeTest() {\n        String originalMessage = \"Hello World!\";\n        int shift = 3;\n\n        // Encode the message first to get the encrypted version\n        String encryptedMessage = caesar.encode(originalMessage, shift);\n\n        // Now decode the encrypted message\n        String decodedMessage = caesar.decode(encryptedMessage, shift);\n\n        // Assert that the decoded message is equal to the original message\n        assertEquals(originalMessage, decodedMessage, \"The decoded message should match the original message.\");\n    }\n\n    @AfterEach\n    void tearDown() {\n        caesar = null;\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    @Test\n    public void decodeTest() {\n        Caesar caesar = new Caesar();\n        final String originalMessage = \"Hello World!\";\n        final String encryptedMessage = \"Khoor Zruog!\";\n        final int shift = 3;\n\n        String decodedMessage = caesar.decode(encryptedMessage, shift);\n\n        assertEquals(originalMessage, decodedMessage, \"The decoded message should match the original message.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    \n    private Caesar caesar;\n\n    @BeforeEach\n    void setUp() {\n        caesar = new Caesar();\n    }\n\n    @Test\n    public void decodeTest() {\n        // Case 1: Testing lowercase text\n        String encryptedLowercase = \"khoor\"; // \"hello\" shifted with 3\n        int shiftLowerCase = 3;\n        String decodedLowercase = caesar.decode(encryptedLowercase, shiftLowerCase);\n        assertEquals(\"hello\", decodedLowercase);\n\n        // Case 2: Testing uppercase text\n        String encryptedUppercase = \"DWWDFN DW GDZQ\"; // \"ATTACK AT DAWN\" shifted by 3\n        int shiftUpperCase = 3;\n        String decodedUppercase = caesar.decode(encryptedUppercase, shiftUpperCase);\n        assertEquals(\"ATTACK AT DAWN\", decodedUppercase);\n\n        // Case 3: Testing with a shift that is a multiple of 26 (should return original message)\n        String originalMessage = \"Multiple of 26 shift\";\n        int largeShift = 52; // Multiple of 26\n        String decodedMessage = caesar.decode(originalMessage, largeShift);\n        assertEquals(originalMessage, decodedMessage);\n\n        // Case 4: Testing non-alphabetic characters (should remain unchanged)\n        String encryptedWithNonAlphabetic = \"@123 #!$\";\n        int shiftNonAlphabetic = 5;\n        String decodedWithNonAlphabetic = caesar.decode(encryptedWithNonAlphabetic, shiftNonAlphabetic);\n        assertEquals(encryptedWithNonAlphabetic, decodedWithNonAlphabetic);\n\n        // Case 5: Testing negative shift\n        String encryptedNegative = \"cyffnf\"; // \"attack\" shifted with -5\n        int shiftNegative = -5;\n        String decodedNegative = caesar.decode(encryptedNegative, shiftNegative);\n        assertEquals(\"attack\", decodedNegative);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    private Caesar caesar;\n\n    @BeforeEach\n    public void setUp() {\n        caesar = new Caesar();\n    }\n\n    @Test\n    public void decodeTest() {\n        assertEquals(\"ABC\", caesar.decode(\"BCD\", 1), \"Decoding with shift 1\");\n        assertEquals(\"hello\", caesar.decode(\"ifmmp\", 1), \"Decoding with shift 1\");\n        assertEquals(\"hello world\", caesar.decode(\"khoor zruog\", 3), \"Decoding with shift 3\");\n        assertEquals(\"HELLO WORLD\", caesar.decode(\"KHOOR ZRUOG\", 3), \"Decoding with shift 3\");\n        assertEquals(\"hello world\", caesar.decode(\"hello world\", 26), \"Decoding with shift 26 should be no-op\");\n        assertEquals(\"hello world\", caesar.decode(\"hello world\", 0), \"Decoding with shift 0 should be no-op\");\n        assertEquals(\"z\", caesar.decode(\"a\", 1), \"Decoding 'a' with shift 1 should result in 'z'\");\n        assertEquals(\"A message that includes punctuation!\", caesar.decode(\"D phvvdjh wkdw lqfoxghv sxqfwxdwlrq!\", 3), \"Decoding with shift 3 and punctuation\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    \n    @Test\n    public void decodeTest() {\n        Caesar caesar = new Caesar();\n        String originalMessage = \"Hello World!\";\n        int shift = 3;\n\n        // Encrypt the original message to get an encrypted message\n        String encryptedMessage = caesar.encode(originalMessage, shift);\n        \n        // Expected to get the original message after decoding the encrypted message\n        String decodedMessage = caesar.decode(encryptedMessage, shift);\n        assertEquals(originalMessage, decodedMessage);\n        \n        // Additional tests to ensure that the decode method works as expected\n        assertEquals(\"A\", caesar.decode(\"D\", 3));\n        assertEquals(\"a\", caesar.decode(\"d\", 3));\n        assertEquals(\"Hello World!\", caesar.decode(\"Khoor Zruog!\", 3));\n        assertEquals(\"XYZ\", caesar.decode(\"ABC\", 3));\n        assertEquals(\"xyz\", caesar.decode(\"abc\", 3));\n        assertEquals(\" \", caesar.decode(\" \", 3));  // Test to ensure spaces are unaffected\n        assertEquals(\"123\", caesar.decode(\"123\", 3));  // Test to ensure digits are unaffected\n        assertEquals(\"!@#\", caesar.decode(\"!@#\", 3));  // Test to ensure special chars are unaffected\n\n        // Test with a large shift value, ensuring it wraps properly\n        String largeShiftEncoded = caesar.encode(originalMessage, 29); // equivalent to a shift of 3\n        assertEquals(originalMessage, caesar.decode(largeShiftEncoded, 29));\n\n        // Shifting back with zero should yield the original encrypted message\n        assertEquals(encryptedMessage, caesar.decode(encryptedMessage, 0));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    private Caesar caesar;\n\n    @BeforeEach\n    public void setUp() {\n        caesar = new Caesar();\n    }\n\n    @Test\n    public void decodeTest() {\n        // Test decoding of a simple message (example with shift of 3)\n        String encodedMessage = \"KHOOR\";\n        int shift = 3;\n        String expectedDecodedMessage = \"HELLO\";\n        String actualDecodedMessage = caesar.decode(encodedMessage, shift);\n        assertEquals(expectedDecodedMessage, actualDecodedMessage, \"The decoded message should be 'HELLO'\");\n\n        // Test decoding with wrapping around alphabet (example with shift of 1)\n        encodedMessage = \"BCD\";\n        shift = 1;\n        expectedDecodedMessage = \"ABC\";\n        actualDecodedMessage = caesar.decode(encodedMessage, shift);\n        assertEquals(expectedDecodedMessage, actualDecodedMessage, \"The decoded message should be 'ABC'\");\n        \n        // Test decoding with a negative shift value\n        encodedMessage = \"ZAB\";\n        shift = -1;\n        expectedDecodedMessage = \"ABC\";\n        actualDecodedMessage = caesar.decode(encodedMessage, shift);\n        assertEquals(expectedDecodedMessage, actualDecodedMessage, \"The decoded message should be 'ABC'\");\n        \n        // Test decoding with shift larger than alphabet size\n        encodedMessage = \"ABC\";\n        shift = 26;\n        expectedDecodedMessage = \"ABC\";\n        actualDecodedMessage = caesar.decode(encodedMessage, shift);\n        assertEquals(expectedDecodedMessage, actualDecodedMessage, \"The decoded message should be 'ABC' with a shift equal to the alphabet size\");\n        \n        // Test decoding non-alphabetic characters (special characters should remain unchanged)\n        encodedMessage = \"123!@#\";\n        shift = 5;\n        expectedDecodedMessage = \"123!@#\";\n        actualDecodedMessage = caesar.decode(encodedMessage, shift);\n        assertEquals(expectedDecodedMessage, actualDecodedMessage, \"Non-alphabetic characters should remain unchanged\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    private Caesar caesar;\n\n    @BeforeEach\n    public void setUp() {\n        caesar = new Caesar();\n    }\n\n    @Test\n    public void decodeTest() {\n        // Given\n        String encryptedMessage = \"Khoor Zruog\"; // \"Hello World\" shifted 3 characters right\n        int shift = 3;\n        String expected = \"Hello World\";\n\n        // When\n        String actual = caesar.decode(encryptedMessage, shift);\n\n        // Then\n        assertEquals(expected, actual, \"The decoded message should match the original message.\");\n    }\n\n    // Tests for other methods like encode, isCapitalLatinLetter, etc., can be added here.\n    \n    @AfterEach\n    public void tearDown() {\n        caesar = null;\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    private Caesar caesar;\n\n    @BeforeEach\n    public void setUp() {\n        caesar = new Caesar();\n    }\n\n    @Test\n    public void decodeTest() {\n        String originalMessage = \"Hello World!\";\n        int shift = 3;\n        String encodedMessage = caesar.encode(originalMessage, shift);\n        // Checking the encoded message\n        assertEquals(\"Khoor Zruog!\", encodedMessage);\n\n        String decodedMessage = caesar.decode(encodedMessage, shift);\n        // Now, ensuring the decode function reverses the encoded message\n        assertEquals(originalMessage, decodedMessage);\n\n        // Testing edge cases with shift values greater than 26\n        int largeShift = 29; // effective shift of 3 (29 % 26)\n        encodedMessage = caesar.encode(originalMessage, largeShift);\n        assertEquals(\"Khoor Zruog!\", encodedMessage);\n        decodedMessage = caesar.decode(encodedMessage, largeShift);\n        assertEquals(originalMessage, decodedMessage);\n\n        // Testing with no actual shift should return original message\n        assertEquals(originalMessage, caesar.decode(originalMessage, 0));\n\n        // Testing with full shift cycle should return original message\n        assertEquals(originalMessage, caesar.decode(originalMessage, 26));\n\n        // Testing with negative shift\n        encodedMessage = caesar.encode(originalMessage, -shift);\n        assertEquals(\"Ebiil Tloia!\", encodedMessage);\n        decodedMessage = caesar.decode(encodedMessage, -shift);\n        assertEquals(originalMessage, decodedMessage);\n\n        // Testing decoding with characters that are not Latin letters\n        String encodedNumbers = caesar.encode(\"1234\", shift);\n        assertEquals(\"1234\", encodedNumbers);\n        String decodedNumbers = caesar.decode(encodedNumbers, shift);\n        assertEquals(\"1234\", decodedNumbers);\n        \n        // Testing special case with all the letters\n        // Considering 'A' shifted by 1 gives 'B'\n        // hence, 'Z' shifted by 1 will become 'A', to retain length in the cycle.\n        String fullAlphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        encodedMessage = caesar.encode(fullAlphabet, 1);\n        assertEquals(\"BCDEFGHIJKLMNOPQRSTUVWXYZA\", encodedMessage);\n        decodedMessage = caesar.decode(encodedMessage, 1);\n        assertEquals(fullAlphabet, decodedMessage);\n    }\n}"
    ]
}