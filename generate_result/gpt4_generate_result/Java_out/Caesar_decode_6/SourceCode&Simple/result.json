{
    "project_name": "Java",
    "file_name": "Caesar.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/Caesar.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Decrypt message by shifting back every Latin char to previous the ASCII\n     * Example : B - 1 -> A\n     *\n     * @return message\n     */",
    "source_code": "\npublic String decode(String encryptedMessage, int shift) {\n    StringBuilder decoded = new StringBuilder();\n\n    shift %= 26;\n\n    final int length = encryptedMessage.length();\n    for (int i = 0; i < length; i++) {\n        char current = encryptedMessage.charAt(i);\n        if (isCapitalLatinLetter(current)) {\n            current -= shift;\n            decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters\n        } else if (isSmallLatinLetter(current)) {\n            current -= shift;\n            decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters\n        } else {\n            decoded.append(current);\n        }\n    }\n    return decoded.toString();\n}\n",
    "class_name": "Caesar",
    "method_name": "decode",
    "arguments": [
        "String encryptedMessage",
        "int shift"
    ],
    "generate_test": [
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    private static Caesar caesar;\n\n    @BeforeAll\n    public static void setup() {\n        caesar = new Caesar();\n    }\n\n    @Test\n    public void decodeTest() {\n        // Assuming the 'encode' method does the opposite of 'decode',\n        // we'll use it to generate an encrypted message to test 'decode'.\n        \n        String originalMessage = \"Hello World!\";\n        int shift = 3;\n\n        // First, we'll encode the original message.\n        String encodedMessage = caesar.encode(originalMessage, shift);\n\n        // Now we'll decode the encoded message and check if we get the original one.\n        String decodedMessage = caesar.decode(encodedMessage, shift);\n        assertEquals(originalMessage, decodedMessage, \"The decoded message should match the original message.\");\n\n        // Let's test edge cases with the shift wrapping around the alphabet.\n        String edgeCaseMessage = \"XYZ xyz\";\n        String edgeEncodedMessage = caesar.encode(edgeCaseMessage, shift);\n        String edgeDecodedMessage = caesar.decode(edgeEncodedMessage, shift);\n        assertEquals(edgeCaseMessage, edgeDecodedMessage, \"Edge case: Decoded message should match the original message.\");\n\n        // Finally, test with a negative shift\n        int negativeShift = -5;\n        String negEncodedMessage = caesar.encode(originalMessage, negativeShift);\n        String negDecodedMessage = caesar.decode(negEncodedMessage, negativeShift);\n        assertEquals(originalMessage, negDecodedMessage, \"Negative shift: Decoded message should match the original message.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CaesarTest {\n    @Test\n    public void decodeTest() {\n        Caesar caesar = new Caesar();\n        String encryptedMessage = \"Uifsf jt b tfdsfu nfttbhf\";\n        int shift = 1;\n        String expectedOutput = \"There is a secret message\";\n\n        String actualOutput = caesar.decode(encryptedMessage, shift);\n\n        assertEquals(expectedOutput, actualOutput, \"The decode method did not work as expected.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    private Caesar caesar;\n\n    @BeforeEach\n    void setUp() {\n        caesar = new Caesar();\n    }\n    \n    @Test\n    public void decodeTest() {\n        String encryptedMessage = \"Crrng\";\n        int shift = 2;\n        String expectedResult = \"Apple\";\n\n        String actualResult = caesar.decode(encryptedMessage, shift);\n        assertEquals(expectedResult, actualResult, \"The decoded message should match the expected result.\");\n\n        // Additional test cases could be included here to ensure thorough testing.\n        // For example, testing boundary conditions or different shifts.\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    \n    // Assuming that the isCapitalLatinLetter and isSmallLatinLetter methods are already implemented.\n    // For the purpose of this test, we will create stubs of these methods that return true for Latin alphabet only.\n    private static boolean isCapitalLatinLetter(char c) {\n        return c >= 'A' && c <= 'Z';\n    }\n\n    private static boolean isSmallLatinLetter(char c) {\n        return c >= 'a' && c <= 'z';\n    }\n    \n    @Test\n    public void decodeTest() {\n        // Given\n        Caesar caesar = new Caesar();\n        int shift = 3;\n        String encoded = \"Khoor Zruog\";  // \"Hello World\" shifted 3 characters to the right\n        String expected = \"Hello World\";\n\n        // When\n        String actual = caesar.decode(encoded, shift);\n\n        // Then\n        assertEquals(expected, actual, \"The decoded string should match the expected result.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    @Test\n    public void decodeTest() {\n        Caesar caesar = new Caesar();\n        \n        // Example test cases\n        assertEquals(\"HELLO\", caesar.decode(\"KHOOR\", 3));\n        assertEquals(\"world\", caesar.decode(\"zruog\", 23));\n        assertEquals(\"Java\",  caesar.decode(\"Mdyd\", 3));\n        assertEquals(\"Unit Testing\",  caesar.decode(\"Xqlw Whvwlqj\", 3));\n        assertEquals(\"1234\", caesar.decode(\"1234\", 5)); // Non-letter characters should remain unchanged\n        assertEquals(\"with spaces\", caesar.decode(\"zlwk vsdfhv\", 3));\n        assertEquals(\"With MIXED case\", caesar.decode(\"Zlwk PLAHG fdvh\", 3));\n        \n        // Boundary conditions\n        assertEquals(\"xyz\", caesar.decode(\"abc\", 23));\n        assertEquals(\"ABC\", caesar.decode(\"XYZ\", 23));\n        assertEquals(\"a\", caesar.decode(\"n\", 13));\n        \n        // Testing with full shift cycle\n        assertEquals(\"ALPHABET\", caesar.decode(\"ALPHABET\", 26));\n        assertEquals(\"alphaBET\", caesar.decode(\"alphaBET\", 52));\n        \n        // Shifts greater than the alphabet size should still work because of modulo\n        assertEquals(\"ShiftTest\", caesar.decode(\"VmplzExhp\", 52));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    private Caesar caesar = new Caesar();\n\n    @Test\n    public void decodeTest() {\n        assertEquals(\"Hello\", caesar.decode(\"Khoor\", 3));\n        assertEquals(\"hello\", caesar.decode(\"khoor\", 3));\n        assertEquals(\"abc\", caesar.decode(\"def\", 3));\n        assertEquals(\"XYZ\", caesar.decode(\"ABC\", 3));\n        assertEquals(\"xyz\", caesar.decode(\"abc\", 3));\n        assertEquals(\"The quick brown fox jumps over the lazy dog\", caesar.decode(\"Wkh txlfn eurzq ira mxpsv ryhu wkh odcb grj\", 3));\n        assertEquals(\"123\", caesar.decode(\"123\", 3));\n        assertEquals(\"\", caesar.decode(\"\", 3));\n        assertEquals(\"With spaces\", caesar.decode(\"Zlwk vsdfhv\", 3));\n        assertEquals(\"With %^&* symbols\", caesar.decode(\"Zlwk %^&* vbperov\", 3));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    private Caesar caesar;\n\n    @BeforeEach\n    void setUp() {\n        caesar = new Caesar();\n    }\n\n    @Test\n    public void decodeTest() {\n        assertEquals(\"hello\", caesar.decode(\"khoor\", 3), \"Decoding 'khoor' with a shift of 3 should return 'hello'\");\n        assertEquals(\"world\", caesar.decode(\"zruog\", 23), \"Decoding 'zruog' with a shift of 23 should return 'world'\");\n        assertEquals(\"JAVA\", caesar.decode(\"MFKD\", 5), \"Decoding 'MFKD' with a shift of 5 should return 'JAVA'\");\n        assertEquals(\"Java\", caesar.decode(\"Mfkd\", 5), \"Decoding 'Mfkd' with a shift of 5 should return 'Java'\");\n        assertEquals(\"12345\", caesar.decode(\"12345\", 3), \"Decoding '12345' with any shift should return '12345'\");\n        assertEquals(\"a@b.c\", caesar.decode(\"d@c.f\", 3), \"Decoding 'd@c.f' with a shift of 3 should return 'a@b.c'\");\n\n        // Testing with full shift (no change)\n        assertEquals(\"hello\", caesar.decode(\"hello\", 26), \"Decoding 'hello' with a shift of 26 should return 'hello'\");\n        // Testing with shift of 0 (no change)\n        assertEquals(\"world\", caesar.decode(\"world\", 0), \"Decoding 'world' with a shift of 0 should return 'world'\");\n        // Testing with negative shift\n        assertEquals(\"world\", caesar.decode(\"tqika\", -3), \"Decoding 'tqika' with a negative shift of -3 should return 'world'\");\n\n        // Testing with shift larger than 26 (shift should wrap around)\n        assertEquals(\"hello\", caesar.decode(\"khoor\", 29), \"Decoding 'khoor' with a shift of 29 should still return 'hello'\");\n        \n        // Add more test cases as necessary\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    @Test\n    public void decodeTest() {\n        Caesar caesar = new Caesar();\n        String originalMessage = \"Hello World!\";\n        int shift = 3;\n        \n        // Assuming `encode` method works correctly and is available to use.\n        String encryptedMessage = caesar.encode(originalMessage, shift);\n        String decryptedMessage = caesar.decode(encryptedMessage, shift);\n        \n        assertEquals(originalMessage, decryptedMessage);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    private Caesar caesar;\n\n    @BeforeEach\n    public void setUp() {\n        caesar = new Caesar();\n    }\n\n    @Test\n    public void decodeTest() {\n        assertEquals(\"HELLO\", caesar.decode(\"KHOOR\", 3));\n        assertEquals(\"hello\", caesar.decode(\"khoor\", 3));\n        assertEquals(\"Hello World!\", caesar.decode(\"Khoor Zruog!\", 3));\n        assertEquals(\"\", caesar.decode(\"\", 3));\n        assertEquals(\"123\", caesar.decode(\"123\", 3));\n        assertEquals(\"Numbers 123 & Symbols!?\", caesar.decode(\"Qxpehuv 123 & V\\pypermv!?\", 3));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    private Caesar caesar;\n\n    @BeforeEach\n    public void setUp() {\n        caesar = new Caesar();\n    }\n\n    @Test\n    public void decodeTest() {\n        String originalMessage = \"HELLO\";\n        int shift = 3;\n\n        // Now let's encode a message and then decode it using the provided methods\n        // and make sure it matches the original message\n        String encodedMessage = caesar.encode(originalMessage, shift);\n        String decodedMessage = caesar.decode(encodedMessage, shift);\n\n        // Assertions to make sure the decode method is correctly implemented\n        assertEquals(originalMessage, decodedMessage, \"The decoded message should match the original message.\");\n\n        // Testing edge cases: shift by 0 and 26 should not alter the message\n        assertEquals(originalMessage, caesar.decode(originalMessage, 0), \"Shift by 0 should not change the message.\");\n        assertEquals(originalMessage, caesar.decode(originalMessage, 26), \"Shift by 26 should not change the message.\");\n\n        // Testing decode with negative shift\n        String negativeShiftEncoded = caesar.encode(originalMessage, -shift);\n        assertEquals(originalMessage, caesar.decode(negativeShiftEncoded, -shift), \"Decoding with a negative shift should return the original message.\");\n\n        // Test with characters outside of A-Z range to remain unchanged\n        String messageWithSymbols = \"HELLO, WORLD!\";\n        String encodedWithSymbols = caesar.encode(messageWithSymbols, shift);\n        String decodedWithSymbols = caesar.decode(encodedWithSymbols, shift);\n        assertEquals(messageWithSymbols, decodedWithSymbols, \"Characters outside of A-Z range should remain unchanged after decoding.\");\n    }\n}"
    ]
}