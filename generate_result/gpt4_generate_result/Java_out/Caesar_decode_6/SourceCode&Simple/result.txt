Source code: 


public String decode(String encryptedMessage, int shift) {
    StringBuilder decoded = new StringBuilder();

    shift %= 26;

    final int length = encryptedMessage.length();
    for (int i = 0; i < length; i++) {
        char current = encryptedMessage.charAt(i);
        if (isCapitalLatinLetter(current)) {
            current -= shift;
            decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters
        } else if (isSmallLatinLetter(current)) {
            current -= shift;
            decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters
        } else {
            decoded.append(current);
        }
    }
    return decoded.toString();
}



No.1 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {

    private static Caesar caesar;

    @BeforeAll
    public static void setup() {
        caesar = new Caesar();
    }

    @Test
    public void decodeTest() {
        // Assuming the 'encode' method does the opposite of 'decode',
        // we'll use it to generate an encrypted message to test 'decode'.
        
        String originalMessage = "Hello World!";
        int shift = 3;

        // First, we'll encode the original message.
        String encodedMessage = caesar.encode(originalMessage, shift);

        // Now we'll decode the encoded message and check if we get the original one.
        String decodedMessage = caesar.decode(encodedMessage, shift);
        assertEquals(originalMessage, decodedMessage, "The decoded message should match the original message.");

        // Let's test edge cases with the shift wrapping around the alphabet.
        String edgeCaseMessage = "XYZ xyz";
        String edgeEncodedMessage = caesar.encode(edgeCaseMessage, shift);
        String edgeDecodedMessage = caesar.decode(edgeEncodedMessage, shift);
        assertEquals(edgeCaseMessage, edgeDecodedMessage, "Edge case: Decoded message should match the original message.");

        // Finally, test with a negative shift
        int negativeShift = -5;
        String negEncodedMessage = caesar.encode(originalMessage, negativeShift);
        String negDecodedMessage = caesar.decode(negEncodedMessage, negativeShift);
        assertEquals(originalMessage, negDecodedMessage, "Negative shift: Decoded message should match the original message.");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class CaesarTest {
    @Test
    public void decodeTest() {
        Caesar caesar = new Caesar();
        String encryptedMessage = "Uifsf jt b tfdsfu nfttbhf";
        int shift = 1;
        String expectedOutput = "There is a secret message";

        String actualOutput = caesar.decode(encryptedMessage, shift);

        assertEquals(expectedOutput, actualOutput, "The decode method did not work as expected.");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {

    private Caesar caesar;

    @BeforeEach
    void setUp() {
        caesar = new Caesar();
    }
    
    @Test
    public void decodeTest() {
        String encryptedMessage = "Crrng";
        int shift = 2;
        String expectedResult = "Apple";

        String actualResult = caesar.decode(encryptedMessage, shift);
        assertEquals(expectedResult, actualResult, "The decoded message should match the expected result.");

        // Additional test cases could be included here to ensure thorough testing.
        // For example, testing boundary conditions or different shifts.
    }
}


No.4 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    
    // Assuming that the isCapitalLatinLetter and isSmallLatinLetter methods are already implemented.
    // For the purpose of this test, we will create stubs of these methods that return true for Latin alphabet only.
    private static boolean isCapitalLatinLetter(char c) {
        return c >= 'A' && c <= 'Z';
    }

    private static boolean isSmallLatinLetter(char c) {
        return c >= 'a' && c <= 'z';
    }
    
    @Test
    public void decodeTest() {
        // Given
        Caesar caesar = new Caesar();
        int shift = 3;
        String encoded = "Khoor Zruog";  // "Hello World" shifted 3 characters to the right
        String expected = "Hello World";

        // When
        String actual = caesar.decode(encoded, shift);

        // Then
        assertEquals(expected, actual, "The decoded string should match the expected result.");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {

    @Test
    public void decodeTest() {
        Caesar caesar = new Caesar();
        
        // Example test cases
        assertEquals("HELLO", caesar.decode("KHOOR", 3));
        assertEquals("world", caesar.decode("zruog", 23));
        assertEquals("Java",  caesar.decode("Mdyd", 3));
        assertEquals("Unit Testing",  caesar.decode("Xqlw Whvwlqj", 3));
        assertEquals("1234", caesar.decode("1234", 5)); // Non-letter characters should remain unchanged
        assertEquals("with spaces", caesar.decode("zlwk vsdfhv", 3));
        assertEquals("With MIXED case", caesar.decode("Zlwk PLAHG fdvh", 3));
        
        // Boundary conditions
        assertEquals("xyz", caesar.decode("abc", 23));
        assertEquals("ABC", caesar.decode("XYZ", 23));
        assertEquals("a", caesar.decode("n", 13));
        
        // Testing with full shift cycle
        assertEquals("ALPHABET", caesar.decode("ALPHABET", 26));
        assertEquals("alphaBET", caesar.decode("alphaBET", 52));
        
        // Shifts greater than the alphabet size should still work because of modulo
        assertEquals("ShiftTest", caesar.decode("VmplzExhp", 52));
    }
}


No.6 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    private Caesar caesar = new Caesar();

    @Test
    public void decodeTest() {
        assertEquals("Hello", caesar.decode("Khoor", 3));
        assertEquals("hello", caesar.decode("khoor", 3));
        assertEquals("abc", caesar.decode("def", 3));
        assertEquals("XYZ", caesar.decode("ABC", 3));
        assertEquals("xyz", caesar.decode("abc", 3));
        assertEquals("The quick brown fox jumps over the lazy dog", caesar.decode("Wkh txlfn eurzq ira mxpsv ryhu wkh odcb grj", 3));
        assertEquals("123", caesar.decode("123", 3));
        assertEquals("", caesar.decode("", 3));
        assertEquals("With spaces", caesar.decode("Zlwk vsdfhv", 3));
        assertEquals("With %^&* symbols", caesar.decode("Zlwk %^&* vbperov", 3));
    }
}


No.7 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    private Caesar caesar;

    @BeforeEach
    void setUp() {
        caesar = new Caesar();
    }

    @Test
    public void decodeTest() {
        assertEquals("hello", caesar.decode("khoor", 3), "Decoding 'khoor' with a shift of 3 should return 'hello'");
        assertEquals("world", caesar.decode("zruog", 23), "Decoding 'zruog' with a shift of 23 should return 'world'");
        assertEquals("JAVA", caesar.decode("MFKD", 5), "Decoding 'MFKD' with a shift of 5 should return 'JAVA'");
        assertEquals("Java", caesar.decode("Mfkd", 5), "Decoding 'Mfkd' with a shift of 5 should return 'Java'");
        assertEquals("12345", caesar.decode("12345", 3), "Decoding '12345' with any shift should return '12345'");
        assertEquals("a@b.c", caesar.decode("d@c.f", 3), "Decoding 'd@c.f' with a shift of 3 should return 'a@b.c'");

        // Testing with full shift (no change)
        assertEquals("hello", caesar.decode("hello", 26), "Decoding 'hello' with a shift of 26 should return 'hello'");
        // Testing with shift of 0 (no change)
        assertEquals("world", caesar.decode("world", 0), "Decoding 'world' with a shift of 0 should return 'world'");
        // Testing with negative shift
        assertEquals("world", caesar.decode("tqika", -3), "Decoding 'tqika' with a negative shift of -3 should return 'world'");

        // Testing with shift larger than 26 (shift should wrap around)
        assertEquals("hello", caesar.decode("khoor", 29), "Decoding 'khoor' with a shift of 29 should still return 'hello'");
        
        // Add more test cases as necessary
    }
}


No.8 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {

    @Test
    public void decodeTest() {
        Caesar caesar = new Caesar();
        String originalMessage = "Hello World!";
        int shift = 3;
        
        // Assuming `encode` method works correctly and is available to use.
        String encryptedMessage = caesar.encode(originalMessage, shift);
        String decryptedMessage = caesar.decode(encryptedMessage, shift);
        
        assertEquals(originalMessage, decryptedMessage);
    }
}


No.9 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    private Caesar caesar;

    @BeforeEach
    public void setUp() {
        caesar = new Caesar();
    }

    @Test
    public void decodeTest() {
        assertEquals("HELLO", caesar.decode("KHOOR", 3));
        assertEquals("hello", caesar.decode("khoor", 3));
        assertEquals("Hello World!", caesar.decode("Khoor Zruog!", 3));
        assertEquals("", caesar.decode("", 3));
        assertEquals("123", caesar.decode("123", 3));
        assertEquals("Numbers 123 & Symbols!?", caesar.decode("Qxpehuv 123 & V\pypermv!?", 3));
    }
}


No.10 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    private Caesar caesar;

    @BeforeEach
    public void setUp() {
        caesar = new Caesar();
    }

    @Test
    public void decodeTest() {
        String originalMessage = "HELLO";
        int shift = 3;

        // Now let's encode a message and then decode it using the provided methods
        // and make sure it matches the original message
        String encodedMessage = caesar.encode(originalMessage, shift);
        String decodedMessage = caesar.decode(encodedMessage, shift);

        // Assertions to make sure the decode method is correctly implemented
        assertEquals(originalMessage, decodedMessage, "The decoded message should match the original message.");

        // Testing edge cases: shift by 0 and 26 should not alter the message
        assertEquals(originalMessage, caesar.decode(originalMessage, 0), "Shift by 0 should not change the message.");
        assertEquals(originalMessage, caesar.decode(originalMessage, 26), "Shift by 26 should not change the message.");

        // Testing decode with negative shift
        String negativeShiftEncoded = caesar.encode(originalMessage, -shift);
        assertEquals(originalMessage, caesar.decode(negativeShiftEncoded, -shift), "Decoding with a negative shift should return the original message.");

        // Test with characters outside of A-Z range to remain unchanged
        String messageWithSymbols = "HELLO, WORLD!";
        String encodedWithSymbols = caesar.encode(messageWithSymbols, shift);
        String decodedWithSymbols = caesar.decode(encodedWithSymbols, shift);
        assertEquals(messageWithSymbols, decodedWithSymbols, "Characters outside of A-Z range should remain unchanged after decoding.");
    }
}


