{
    "project_name": "Java",
    "file_name": "Caesar.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/Caesar.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Decrypt message by shifting back every Latin char to previous the ASCII\n     * Example : B - 1 -> A\n     *\n     * @return message\n     */",
    "source_code": "\npublic String decode(String encryptedMessage, int shift) {\n    StringBuilder decoded = new StringBuilder();\n\n    shift %= 26;\n\n    final int length = encryptedMessage.length();\n    for (int i = 0; i < length; i++) {\n        char current = encryptedMessage.charAt(i);\n        if (isCapitalLatinLetter(current)) {\n            current -= shift;\n            decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters\n        } else if (isSmallLatinLetter(current)) {\n            current -= shift;\n            decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters\n        } else {\n            decoded.append(current);\n        }\n    }\n    return decoded.toString();\n}\n",
    "class_name": "Caesar",
    "method_name": "decode",
    "arguments": [
        "String encryptedMessage",
        "int shift"
    ],
    "generate_test": [
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    @Test\n    public void decodeTest() {\n        Caesar caesar = new Caesar();\n        String encoded = \"Ifmmp\";\n        int shift = 1;\n\n        String result = caesar.decode(encoded, shift);\n        assertEquals(\"Hello\", result);\n\n        encoded = \"Czggj\";\n        shift = 5;\n        result = caesar.decode(encoded, shift);\n        assertEquals(\"Hello\", result);\n\n        // Test with negative shift\n        encoded = \"Ebiil\";\n        shift = -3;\n        result = caesar.decode(encoded, shift);\n        assertEquals(\"Hello\", result);\n\n        // Test with shift greater than 26\n        encoded = \"Axeeh\";\n        shift = 30;\n        result = caesar.decode(encoded, shift);\n        assertEquals(\"Hello\", result);\n\n        // Test with non-alphabetic characters\n        encoded = \"H1ll0!\";\n        shift = 1;\n        result = caesar.decode(encoded, shift);\n        assertEquals(\"G1kk0!\", result);\n\n        // Test with no shift\n        encoded = \"Hello\";\n        shift = 0;\n        result = caesar.decode(encoded, shift);\n        assertEquals(\"Hello\", result);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CaesarTest {\n    \n    // Here we assume the existence of a class called Caesar that contains the method decode.\n    // That class is not provided, so we are simulating the existence of this class for the purpose of the test.\n    private Caesar caesar = new Caesar();\n    \n    @Test\n    public void decodeTest() {\n        // Test with a positive shift\n        assertEquals(\"abc\", caesar.decode(\"def\", 3), \"Decoding with shift 3 did not work as expected.\");\n\n        // Test with a negative shift\n        assertEquals(\"xyz\", caesar.decode(\"abc\", -3), \"Decoding with negative shift did not work as expected.\");\n\n        // Test with a shift equal to 26 (no shift)\n        assertEquals(\"abc\", caesar.decode(\"abc\", 26), \"Decoding with shift 26 did not work as expected.\");\n\n        // Test with a shift greater than 26\n        assertEquals(\"abc\", caesar.decode(\"def\", 29), \"Decoding with shift greater than 26 did not work as expected.\");\n\n        // Test with a shift that requires wrapping from the beginning of the alphabet to the end\n        assertEquals(\"zab\", caesar.decode(\"abc\", -1), \"Decoding with wrapping shift did not work as expected.\");\n\n        // Test with non-letter characters\n        assertEquals(\"1,a z!\", caesar.decode(\"1,d c!\", 3), \"Decoding with non-letter characters did not work as expected.\");\n\n        // Test with uppercase letters\n        assertEquals(\"ABC\", caesar.decode(\"DEF\", 3), \"Decoding with uppercase letters did not work as expected.\");\n\n        // Test with a mix of characters\n        assertEquals(\"Aa Bb Zz!\", caesar.decode(\"Dd Ee Cc!\", 3), \"Decoding with a mix of characters did not work as expected.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CaesarTest {\n\n    @Test\n    public void decodeTest() {\n        // instantiate the class containing the decode method\n        CaesarCipher caesarCipher = new CaesarCipher();\n        \n        // test with a positive shift\n        assertEquals(\"hello\", caesarCipher.decode(\"khoor\", 3), \"Decoding 'khoor' with a shift of 3 should result in 'hello'.\");\n        // test with a shift larger than 26\n        assertEquals(\"world\", caesarCipher.decode(\"world\", 52), \"Decoding 'world' with a shift of 52 should result in 'world' since it's a multiple of 26.\");\n        // test with a negative input\n        assertEquals(\"zebra\", caesarCipher.decode(\"cheud\", -3), \"Decoding 'cheud' with a shift of -3 should result in 'zebra'.\");\n        // test with a mix of capital and small letters\n        assertEquals(\"JavaFun\", caesarCipher.decode(\"MdydIxq\", 3), \"Decoding 'MdydIxq' with a shift of 3 should result in 'JavaFun'.\");\n        // test with punctuation and space\n        assertEquals(\"Hello, World!\", caesarCipher.decode(\"Khoor, Zruog!\", 3), \"Decoding 'Khoor, Zruog!' with a shift of 3 should result in 'Hello, World!'.\");\n    }\n\n    // Assuming we have a CaesarCipher class as the code did not provide a class context\n    public class CaesarCipher {\n        public String decode(String encryptedMessage, int shift) {\n            StringBuilder decoded = new StringBuilder();\n        \n            shift %= 26;\n        \n            final int length = encryptedMessage.length();\n            for (int i = 0; i < length; i++) {\n                char current = encryptedMessage.charAt(i);\n                if (isCapitalLatinLetter(current)) {\n                    current -= shift;\n                    decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters\n                } else if (isSmallLatinLetter(current)) {\n                    current -= shift;\n                    decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters\n                } else {\n                    decoded.append(current);\n                }\n            }\n            return decoded.toString();\n        }\n        \n        private boolean isCapitalLatinLetter(char ch) {\n            return ch >= 'A' && ch <= 'Z';\n        }\n        \n        private boolean isSmallLatinLetter(char ch) {\n            return ch >= 'a' && ch <= 'z';\n        }\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    @Test\n    public void decodeTest() {\n        // Assuming there is a class named `CaesarCipher` which has the `decode` method.\n        CaesarCipher cipher = new CaesarCipher();\n\n        // Test decoding for a shift within the number of alphabet letters\n        assertEquals(\"Hello World!\", cipher.decode(\"Khoor Zruog!\", 3), \"Decoding failed with shift 3\");\n\n        // Test decoding with shift equal to the number of alphabet letters (should return the same string)\n        assertEquals(\"Hello World!\", cipher.decode(\"Hello World!\", 26), \"Decoding failed with shift 26\");\n\n        // Test decoding with shift that wraps from a to z\n        assertEquals(\"Az\", cipher.decode(\"Za\", 25), \"Decoding failed with wrap shift\");\n\n        // Test decoding with a negative shift\n        assertEquals(\"Jgnnq Yqtnf!\", cipher.decode(\"Hello World!\", -2), \"Decoding failed with negative shift\");\n\n        // Test decoding with shift greater than the number of letters in the alphabet\n        assertEquals(\"Hello World!\", cipher.decode(\"Ifmmp Xpsme!\", 52), \"Decoding failed with large shift\");\n\n        // Test decoding with non-alphabetic characters (should be unchanged)\n        assertEquals(\"1234567890!@#$%^&*()_+-=\", cipher.decode(\"1234567890!@#$%^&*()_+-=\", 5), \"Decoding failed with non-alphabetic characters\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    private Caesar caesar;\n\n    @BeforeEach\n    public void setUp() {\n        caesar = new Caesar();\n    }\n\n    @Test\n    public void decodeTest() {\n        assertEquals(\"HELLO\", caesar.decode(\"KHOOR\", 3));\n        assertEquals(\"hello\", caesar.decode(\"khoor\", 3));\n        assertEquals(\"Hello World\", caesar.decode(\"Khoor Zruog\", 3));\n        assertEquals(\"Mjqqt, Btwqi!\", caesar.decode(\"Mjqqt, Btwqi!\", 0));\n        assertEquals(\"hello1#\", caesar.decode(\"khoor1#\", 3));\n        assertEquals(\"ABC\", caesar.decode(\"XYZ\", 3));\n        assertEquals(\"xyz\", caesar.decode(\"abc\", -3));\n        assertEquals(\"Message with non-Latin: !@#$%^&*\", caesar.decode(\"Phvvdjh zlwk qrq-/dwlq: !@#$%^&*\", 3));\n    }\n}\n\nclass Caesar {\n    public String decode(String encryptedMessage, int shift) {\n        // ... (implementation as provided in the Java Source Code section above)\n    }\n    \n    private boolean isCapitalLatinLetter(char c) {\n        return c >= 'A' && c <= 'Z';\n    }\n    \n    private boolean isSmallLatinLetter(char c) {\n        return c >= 'a' && c <= 'z';\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    @Test\n    public void decodeTest() {\n        Caesar caesar = new Caesar(); // Assuming the class name is Caesar\n        String encryptedMessage = \"Khoor Zruog\"; // \"Hello World\" with a shift of 3; H->K, e->h, etc.\n        int shift = 3;\n        String expectedOutput = \"Hello World\"; // The expected result after decoding\n        String actualOutput = caesar.decode(encryptedMessage, shift); // Calls the method to test\n        assertEquals(expectedOutput, actualOutput, \"The decoded message should match the expected output.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    private static final Caesar caesar = new Caesar();\n\n    @Test\n    public void decodeTest() {\n        // Test with uppercase letters\n        assertEquals(\"HELLO\", caesar.decode(\"KHOOR\", 3));\n\n        // Test with lowercase letters\n        assertEquals(\"hello\", caesar.decode(\"khoor\", 3));\n\n        // Test with a shift larger than the alphabet size\n        assertEquals(\"hello\", caesar.decode(\"khoor\", 29));\n\n        // Test with punctuation and whitespaces\n        assertEquals(\"Hello, World!\", caesar.decode(\"Khoor, Zruog!\", 3));\n\n        // Test with a shift of 0 (no decryption)\n        assertEquals(\"Hello\", caesar.decode(\"Hello\", 0));\n        \n        // Negative shift\n        assertEquals(\"hello\", caesar.decode(\"ebiil\", -3));\n    }\n    \n    private boolean isCapitalLatinLetter(char character) {\n        return character >= 'A' && character <= 'Z';\n    }\n\n    private boolean isSmallLatinLetter(char character) {\n        return character >= 'a' && character <= 'z';\n    }\n\n    public class Caesar {\n        public String decode(String encryptedMessage, int shift) {\n            StringBuilder decoded = new StringBuilder();\n        \n            shift %= 26;\n        \n            final int length = encryptedMessage.length();\n            for (int i = 0; i < length; i++) {\n                char current = encryptedMessage.charAt(i);\n                if (isCapitalLatinLetter(current)) {\n                    current -= shift;\n                    decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters\n                } else if (isSmallLatinLetter(current)) {\n                    current -= shift;\n                    decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters\n                } else {\n                    decoded.append(current);\n                }\n            }\n            return decoded.toString();\n        }\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    // Helper method to check if a character is a capital Latin letter\n    private boolean isCapitalLatinLetter(char c) {\n        return c >= 'A' && c <= 'Z';\n    }\n\n    // Helper method to check if a character is a small Latin letter\n    private boolean isSmallLatinLetter(char c) {\n        return c >= 'a' && c <= 'z';\n    }\n\n    // The actual decode method similar to the JAVA Source Code provided\n    public String decode(String encryptedMessage, int shift) {\n        StringBuilder decoded = new StringBuilder();\n        shift %= 26;\n        final int length = encryptedMessage.length();\n        for (int i = 0; i < length; i++) {\n            char current = encryptedMessage.charAt(i);\n            if (isCapitalLatinLetter(current)) {\n                current -= shift;\n                decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters\n            } else if (isSmallLatinLetter(current)) {\n                current -= shift;\n                decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters\n            } else {\n                decoded.append(current);\n            }\n        }\n        return decoded.toString();\n    }\n    \n    @Test\n    public void decodeTest() {\n        CaesarTest testObject = new CaesarTest();\n\n        // Test with a positive shift\n        assertEquals(\"hello\", testObject.decode(\"khoor\", 3), \"Decoding 'khoor' with a shift of 3 should return 'hello'\");\n        // Test with a shift that wraps the alphabet\n        assertEquals(\"xyz\", testObject.decode(\"abc\", 3), \"Decoding 'abc' with a shift of 3 should return 'xyz'\");\n        // Test with a shift larger than the alphabet size\n        assertEquals(\"hello\", testObject.decode(\"khoor\", 29), \"Decoding 'khoor' with a shift of 29 should be equivalent to a shift of 3 and return 'hello'\");\n        // Test with a capital letters\n        assertEquals(\"Hello World\", testObject.decode(\"Khoor Zruog\", 3), \"Decoding 'Khoor Zruog' with a shift of 3 should return 'Hello World'\");\n        // Test with no shift\n        assertEquals(\"hello\", testObject.decode(\"hello\", 0), \"Decoding 'hello' with a shift of 0 should return 'hello'\");\n        // Test with non-alphabetic characters\n        assertEquals(\"h3llo!\", testObject.decode(\"k3oor!\", 3), \"Decoding 'k3oor!' with a shift of 3 should return 'h3llo!' with non-alphabetic characters unchanged\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    // Assuming that the class where the decode method resides is called CaesarCipher\n    // and the decode method is declared as public. If the actual class name is different,\n    // please update the code with the correct class name accordingly.\n\n    private CaesarCipher caesarCipher;\n\n    @BeforeEach\n    public void setUp() {\n        caesarCipher = new CaesarCipher();\n    }\n\n    @Test\n    public void decodeTest() {\n        final String testString = \"Bcd ef g!\";\n        final int shift = 1;\n\n        // Expected output after applying decode with a shift of 1.\n        final String expectedOutput = \"Abc de f!\";\n\n        // Perform the test by calling the decode method\n        String actualOutput = caesarCipher.decode(testString, shift);\n\n        // Assert that the decoded string matches the expected output\n        assertEquals(expectedOutput, actualOutput, \"The decoded message should match the expected result.\");\n\n        // Additional test cases to assert correct behavior in edge cases\n        // With shift creating a wrap-around scenario\n        actualOutput = caesarCipher.decode(\"Bcd\", 27);\n        assertEquals(\"Abc\", actualOutput, \"The decoded message should wrap around when shifted beyond 'Z'.\");\n\n        // No shift scenario\n        actualOutput = caesarCipher.decode(\"Abc\", 0);\n        assertEquals(\"Abc\", actualOutput, \"The decoded message should remain the same when there is no shift.\");\n\n        // Shift that is a multiple of 26 (full cycle shift) scenario\n        actualOutput = caesarCipher.decode(\"Abc\", 26);\n        assertEquals(\"Abc\", actualOutput, \"The decoded message should remain the same when the shift is a full cycle (26).\");\n\n        // Including non-letter characters that should not be shifted\n        actualOutput = caesarCipher.decode(\"Bcd ef g!#123\", 1);\n        assertEquals(\"Abc de f!#123\", actualOutput, \"The decoded message should ignore non-letter characters.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n\n    @Test\n    public void decodeTest() {\n        // Let's assume the source code is inside a class called CaesarCipher.\n        CaesarCipher cipher = new CaesarCipher();\n        \n        // Test decoding with a positive shift\n        assertEquals(\"ABC\", cipher.decode(\"DEF\", 3));\n        \n        // Test decoding with a zero shift (should return the same string)\n        assertEquals(\"XYZ\", cipher.decode(\"XYZ\", 0));\n        \n        // Test decoding with a negative shift\n        assertEquals(\"XYZ\", cipher.decode(\"ABC\", -3));\n        \n        // Test decoding wrapping from start of alphabet to end\n        assertEquals(\"ZAB\", cipher.decode(\"CDE\", 3));\n\n        // Test decoding with a shift larger than 26 (should be the same as shift % 26)\n        assertEquals(\"ABC\", cipher.decode(\"DEF\", 29));\n\n        // Test decoding with non-alphabetic characters (should remain unchanged)\n        assertEquals(\"123?!\", cipher.decode(\"123?!\", 3));\n    }\n}"
    ]
}