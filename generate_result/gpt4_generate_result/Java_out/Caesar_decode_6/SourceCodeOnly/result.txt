Source code: 


public String decode(String encryptedMessage, int shift) {
    StringBuilder decoded = new StringBuilder();

    shift %= 26;

    final int length = encryptedMessage.length();
    for (int i = 0; i < length; i++) {
        char current = encryptedMessage.charAt(i);
        if (isCapitalLatinLetter(current)) {
            current -= shift;
            decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters
        } else if (isSmallLatinLetter(current)) {
            current -= shift;
            decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters
        } else {
            decoded.append(current);
        }
    }
    return decoded.toString();
}



No.1 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {

    @Test
    public void decodeTest() {
        Caesar caesar = new Caesar();
        String encoded = "Ifmmp";
        int shift = 1;

        String result = caesar.decode(encoded, shift);
        assertEquals("Hello", result);

        encoded = "Czggj";
        shift = 5;
        result = caesar.decode(encoded, shift);
        assertEquals("Hello", result);

        // Test with negative shift
        encoded = "Ebiil";
        shift = -3;
        result = caesar.decode(encoded, shift);
        assertEquals("Hello", result);

        // Test with shift greater than 26
        encoded = "Axeeh";
        shift = 30;
        result = caesar.decode(encoded, shift);
        assertEquals("Hello", result);

        // Test with non-alphabetic characters
        encoded = "H1ll0!";
        shift = 1;
        result = caesar.decode(encoded, shift);
        assertEquals("G1kk0!", result);

        // Test with no shift
        encoded = "Hello";
        shift = 0;
        result = caesar.decode(encoded, shift);
        assertEquals("Hello", result);
    }
}


No.2 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class CaesarTest {
    
    // Here we assume the existence of a class called Caesar that contains the method decode.
    // That class is not provided, so we are simulating the existence of this class for the purpose of the test.
    private Caesar caesar = new Caesar();
    
    @Test
    public void decodeTest() {
        // Test with a positive shift
        assertEquals("abc", caesar.decode("def", 3), "Decoding with shift 3 did not work as expected.");

        // Test with a negative shift
        assertEquals("xyz", caesar.decode("abc", -3), "Decoding with negative shift did not work as expected.");

        // Test with a shift equal to 26 (no shift)
        assertEquals("abc", caesar.decode("abc", 26), "Decoding with shift 26 did not work as expected.");

        // Test with a shift greater than 26
        assertEquals("abc", caesar.decode("def", 29), "Decoding with shift greater than 26 did not work as expected.");

        // Test with a shift that requires wrapping from the beginning of the alphabet to the end
        assertEquals("zab", caesar.decode("abc", -1), "Decoding with wrapping shift did not work as expected.");

        // Test with non-letter characters
        assertEquals("1,a z!", caesar.decode("1,d c!", 3), "Decoding with non-letter characters did not work as expected.");

        // Test with uppercase letters
        assertEquals("ABC", caesar.decode("DEF", 3), "Decoding with uppercase letters did not work as expected.");

        // Test with a mix of characters
        assertEquals("Aa Bb Zz!", caesar.decode("Dd Ee Cc!", 3), "Decoding with a mix of characters did not work as expected.");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class CaesarTest {

    @Test
    public void decodeTest() {
        // instantiate the class containing the decode method
        CaesarCipher caesarCipher = new CaesarCipher();
        
        // test with a positive shift
        assertEquals("hello", caesarCipher.decode("khoor", 3), "Decoding 'khoor' with a shift of 3 should result in 'hello'.");
        // test with a shift larger than 26
        assertEquals("world", caesarCipher.decode("world", 52), "Decoding 'world' with a shift of 52 should result in 'world' since it's a multiple of 26.");
        // test with a negative input
        assertEquals("zebra", caesarCipher.decode("cheud", -3), "Decoding 'cheud' with a shift of -3 should result in 'zebra'.");
        // test with a mix of capital and small letters
        assertEquals("JavaFun", caesarCipher.decode("MdydIxq", 3), "Decoding 'MdydIxq' with a shift of 3 should result in 'JavaFun'.");
        // test with punctuation and space
        assertEquals("Hello, World!", caesarCipher.decode("Khoor, Zruog!", 3), "Decoding 'Khoor, Zruog!' with a shift of 3 should result in 'Hello, World!'.");
    }

    // Assuming we have a CaesarCipher class as the code did not provide a class context
    public class CaesarCipher {
        public String decode(String encryptedMessage, int shift) {
            StringBuilder decoded = new StringBuilder();
        
            shift %= 26;
        
            final int length = encryptedMessage.length();
            for (int i = 0; i < length; i++) {
                char current = encryptedMessage.charAt(i);
                if (isCapitalLatinLetter(current)) {
                    current -= shift;
                    decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters
                } else if (isSmallLatinLetter(current)) {
                    current -= shift;
                    decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters
                } else {
                    decoded.append(current);
                }
            }
            return decoded.toString();
        }
        
        private boolean isCapitalLatinLetter(char ch) {
            return ch >= 'A' && ch <= 'Z';
        }
        
        private boolean isSmallLatinLetter(char ch) {
            return ch >= 'a' && ch <= 'z';
        }
    }
}


No.4 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {
    @Test
    public void decodeTest() {
        // Assuming there is a class named `CaesarCipher` which has the `decode` method.
        CaesarCipher cipher = new CaesarCipher();

        // Test decoding for a shift within the number of alphabet letters
        assertEquals("Hello World!", cipher.decode("Khoor Zruog!", 3), "Decoding failed with shift 3");

        // Test decoding with shift equal to the number of alphabet letters (should return the same string)
        assertEquals("Hello World!", cipher.decode("Hello World!", 26), "Decoding failed with shift 26");

        // Test decoding with shift that wraps from a to z
        assertEquals("Az", cipher.decode("Za", 25), "Decoding failed with wrap shift");

        // Test decoding with a negative shift
        assertEquals("Jgnnq Yqtnf!", cipher.decode("Hello World!", -2), "Decoding failed with negative shift");

        // Test decoding with shift greater than the number of letters in the alphabet
        assertEquals("Hello World!", cipher.decode("Ifmmp Xpsme!", 52), "Decoding failed with large shift");

        // Test decoding with non-alphabetic characters (should be unchanged)
        assertEquals("1234567890!@#$%^&*()_+-=", cipher.decode("1234567890!@#$%^&*()_+-=", 5), "Decoding failed with non-alphabetic characters");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {

    private Caesar caesar;

    @BeforeEach
    public void setUp() {
        caesar = new Caesar();
    }

    @Test
    public void decodeTest() {
        assertEquals("HELLO", caesar.decode("KHOOR", 3));
        assertEquals("hello", caesar.decode("khoor", 3));
        assertEquals("Hello World", caesar.decode("Khoor Zruog", 3));
        assertEquals("Mjqqt, Btwqi!", caesar.decode("Mjqqt, Btwqi!", 0));
        assertEquals("hello1#", caesar.decode("khoor1#", 3));
        assertEquals("ABC", caesar.decode("XYZ", 3));
        assertEquals("xyz", caesar.decode("abc", -3));
        assertEquals("Message with non-Latin: !@#$%^&*", caesar.decode("Phvvdjh zlwk qrq-/dwlq: !@#$%^&*", 3));
    }
}

class Caesar {
    public String decode(String encryptedMessage, int shift) {
        // ... (implementation as provided in the Java Source Code section above)
    }
    
    private boolean isCapitalLatinLetter(char c) {
        return c >= 'A' && c <= 'Z';
    }
    
    private boolean isSmallLatinLetter(char c) {
        return c >= 'a' && c <= 'z';
    }
}


No.6 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {

    @Test
    public void decodeTest() {
        Caesar caesar = new Caesar(); // Assuming the class name is Caesar
        String encryptedMessage = "Khoor Zruog"; // "Hello World" with a shift of 3; H->K, e->h, etc.
        int shift = 3;
        String expectedOutput = "Hello World"; // The expected result after decoding
        String actualOutput = caesar.decode(encryptedMessage, shift); // Calls the method to test
        assertEquals(expectedOutput, actualOutput, "The decoded message should match the expected output.");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {

    private static final Caesar caesar = new Caesar();

    @Test
    public void decodeTest() {
        // Test with uppercase letters
        assertEquals("HELLO", caesar.decode("KHOOR", 3));

        // Test with lowercase letters
        assertEquals("hello", caesar.decode("khoor", 3));

        // Test with a shift larger than the alphabet size
        assertEquals("hello", caesar.decode("khoor", 29));

        // Test with punctuation and whitespaces
        assertEquals("Hello, World!", caesar.decode("Khoor, Zruog!", 3));

        // Test with a shift of 0 (no decryption)
        assertEquals("Hello", caesar.decode("Hello", 0));
        
        // Negative shift
        assertEquals("hello", caesar.decode("ebiil", -3));
    }
    
    private boolean isCapitalLatinLetter(char character) {
        return character >= 'A' && character <= 'Z';
    }

    private boolean isSmallLatinLetter(char character) {
        return character >= 'a' && character <= 'z';
    }

    public class Caesar {
        public String decode(String encryptedMessage, int shift) {
            StringBuilder decoded = new StringBuilder();
        
            shift %= 26;
        
            final int length = encryptedMessage.length();
            for (int i = 0; i < length; i++) {
                char current = encryptedMessage.charAt(i);
                if (isCapitalLatinLetter(current)) {
                    current -= shift;
                    decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters
                } else if (isSmallLatinLetter(current)) {
                    current -= shift;
                    decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters
                } else {
                    decoded.append(current);
                }
            }
            return decoded.toString();
        }
    }
}


No.8 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {

    // Helper method to check if a character is a capital Latin letter
    private boolean isCapitalLatinLetter(char c) {
        return c >= 'A' && c <= 'Z';
    }

    // Helper method to check if a character is a small Latin letter
    private boolean isSmallLatinLetter(char c) {
        return c >= 'a' && c <= 'z';
    }

    // The actual decode method similar to the JAVA Source Code provided
    public String decode(String encryptedMessage, int shift) {
        StringBuilder decoded = new StringBuilder();
        shift %= 26;
        final int length = encryptedMessage.length();
        for (int i = 0; i < length; i++) {
            char current = encryptedMessage.charAt(i);
            if (isCapitalLatinLetter(current)) {
                current -= shift;
                decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters
            } else if (isSmallLatinLetter(current)) {
                current -= shift;
                decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters
            } else {
                decoded.append(current);
            }
        }
        return decoded.toString();
    }
    
    @Test
    public void decodeTest() {
        CaesarTest testObject = new CaesarTest();

        // Test with a positive shift
        assertEquals("hello", testObject.decode("khoor", 3), "Decoding 'khoor' with a shift of 3 should return 'hello'");
        // Test with a shift that wraps the alphabet
        assertEquals("xyz", testObject.decode("abc", 3), "Decoding 'abc' with a shift of 3 should return 'xyz'");
        // Test with a shift larger than the alphabet size
        assertEquals("hello", testObject.decode("khoor", 29), "Decoding 'khoor' with a shift of 29 should be equivalent to a shift of 3 and return 'hello'");
        // Test with a capital letters
        assertEquals("Hello World", testObject.decode("Khoor Zruog", 3), "Decoding 'Khoor Zruog' with a shift of 3 should return 'Hello World'");
        // Test with no shift
        assertEquals("hello", testObject.decode("hello", 0), "Decoding 'hello' with a shift of 0 should return 'hello'");
        // Test with non-alphabetic characters
        assertEquals("h3llo!", testObject.decode("k3oor!", 3), "Decoding 'k3oor!' with a shift of 3 should return 'h3llo!' with non-alphabetic characters unchanged");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {

    // Assuming that the class where the decode method resides is called CaesarCipher
    // and the decode method is declared as public. If the actual class name is different,
    // please update the code with the correct class name accordingly.

    private CaesarCipher caesarCipher;

    @BeforeEach
    public void setUp() {
        caesarCipher = new CaesarCipher();
    }

    @Test
    public void decodeTest() {
        final String testString = "Bcd ef g!";
        final int shift = 1;

        // Expected output after applying decode with a shift of 1.
        final String expectedOutput = "Abc de f!";

        // Perform the test by calling the decode method
        String actualOutput = caesarCipher.decode(testString, shift);

        // Assert that the decoded string matches the expected output
        assertEquals(expectedOutput, actualOutput, "The decoded message should match the expected result.");

        // Additional test cases to assert correct behavior in edge cases
        // With shift creating a wrap-around scenario
        actualOutput = caesarCipher.decode("Bcd", 27);
        assertEquals("Abc", actualOutput, "The decoded message should wrap around when shifted beyond 'Z'.");

        // No shift scenario
        actualOutput = caesarCipher.decode("Abc", 0);
        assertEquals("Abc", actualOutput, "The decoded message should remain the same when there is no shift.");

        // Shift that is a multiple of 26 (full cycle shift) scenario
        actualOutput = caesarCipher.decode("Abc", 26);
        assertEquals("Abc", actualOutput, "The decoded message should remain the same when the shift is a full cycle (26).");

        // Including non-letter characters that should not be shifted
        actualOutput = caesarCipher.decode("Bcd ef g!#123", 1);
        assertEquals("Abc de f!#123", actualOutput, "The decoded message should ignore non-letter characters.");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CaesarTest {

    @Test
    public void decodeTest() {
        // Let's assume the source code is inside a class called CaesarCipher.
        CaesarCipher cipher = new CaesarCipher();
        
        // Test decoding with a positive shift
        assertEquals("ABC", cipher.decode("DEF", 3));
        
        // Test decoding with a zero shift (should return the same string)
        assertEquals("XYZ", cipher.decode("XYZ", 0));
        
        // Test decoding with a negative shift
        assertEquals("XYZ", cipher.decode("ABC", -3));
        
        // Test decoding wrapping from start of alphabet to end
        assertEquals("ZAB", cipher.decode("CDE", 3));

        // Test decoding with a shift larger than 26 (should be the same as shift % 26)
        assertEquals("ABC", cipher.decode("DEF", 29));

        // Test decoding with non-alphabetic characters (should remain unchanged)
        assertEquals("123?!", cipher.decode("123?!", 3));
    }
}


