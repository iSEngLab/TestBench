{
    "project_name": "Java",
    "file_name": "CursorLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/CursorLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * @return the logical index of the element within the list , not the actual\n     * index of the [cursorSpace] array\n     */",
    "source_code": "\npublic int indexOf(T element) {\n    Objects.requireNonNull(element);\n    Node<T> iterator = cursorSpace[head];\n    for (int i = 0; i < count; i++) {\n        if (iterator.element.equals(element)) {\n            return i;\n        }\n        iterator = cursorSpace[iterator.next];\n    }\n\n    return -1;\n}\n",
    "class_name": "CursorLinkedList",
    "method_name": "indexOf",
    "arguments": [
        "T element"
    ],
    "generate_test": [
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    private CursorLinkedList<Integer> list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new CursorLinkedList<>();\n    }\n\n    @Test\n    public void indexOfTest() {\n        // Given an empty list, the index of any element should be -1\n        assertEquals(-1, list.indexOf(0), \"Searching in an empty list should return -1.\");\n\n        // Now append elements to the list\n        list.append(1);\n        list.append(2);\n        list.append(3);\n\n        // The indexOf each inserted element should match the order of insertion (0-based index)\n        assertEquals(0, list.indexOf(1), \"Index of first element (1) should be 0.\");\n        assertEquals(1, list.indexOf(2), \"Index of second element (2) should be 1.\");\n        assertEquals(2, list.indexOf(3), \"Index of third element (3) should be 2.\");\n\n        // If the element is not present, indexOf should return -1\n        assertEquals(-1, list.indexOf(4), \"Index of non-existent element should be -1.\");\n\n        // Also test the edge case with null values\n        try {\n            list.indexOf(null);\n            fail(\"Searching for null should throw NullPointerException.\");\n        } catch (NullPointerException e) {\n            // Expected behavior, the test should pass\n        }\n    }\n\n    // Additional test, if needed, for special cases or behavior\n\n    @AfterEach\n    public void tearDown() {\n        // Clean up resources if necessary\n        list = null;\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    private CursorLinkedList<Integer> list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new CursorLinkedList<>();\n    }\n\n    @Test\n    public void indexOfTest() {\n        // Assuming elements are integers for this test\n        list.append(1);\n        list.append(2);\n        list.append(3);\n        \n        // Check if the index of an element present in the list is correct\n        assertEquals(0, list.indexOf(1), \"Index of element 1 should be 0.\");\n        assertEquals(1, list.indexOf(2), \"Index of element 2 should be 1.\");\n        assertEquals(2, list.indexOf(3), \"Index of element 3 should be 2.\");\n        \n        // Check if the index of an element not present in the list is -1\n        assertEquals(-1, list.indexOf(4), \"Index of element not in list should be -1.\");\n    }\n\n    @AfterEach\n    public void tearDown() {\n        list = null;\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    private CursorLinkedList<Integer> list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new CursorLinkedList<>();\n    }\n\n    @Test\n    public void indexOfTest() {\n        assertTrue(list.indexOf(1) == -1, \"Empty list should return -1 for any element index\");\n\n        list.append(1);\n        list.append(2);\n        list.append(3);\n\n        assertEquals(0, list.indexOf(1), \"Index of first element (1) should be 0\");\n        assertEquals(1, list.indexOf(2), \"Index of second element (2) should be 1\");\n        assertEquals(2, list.indexOf(3), \"Index of third element (3) should be 2\");\n        assertTrue(list.indexOf(4) == -1, \"Index of non-existent element (4) should be -1\");\n    }\n\n    @AfterEach\n    public void tearDown() {\n        list = null;\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    @Test\n    public void indexOfTest() {\n        // Create a CursorLinkedList and populate it with some elements\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n        list.append(1);\n        list.append(2);\n        list.append(3);\n\n        // Test indexOf for an existing element\n        int indexForExistingElement = list.indexOf(2);\n        assertEquals(1, indexForExistingElement, \"indexOf should return the correct index of an existing element\");\n\n        // Test indexOf for a non-existing element\n        int indexForNonExistingElement = list.indexOf(5);\n        assertEquals(-1, indexForNonExistingElement, \"indexOf should return -1 when the element does not exist in the list\");\n\n        // Test indexOf for the head element\n        int indexForHeadElement = list.indexOf(1);\n        assertEquals(0, indexForHeadElement, \"indexOf should return 0 when the element is the head of the list\");\n\n        // Test indexOf for the tail element\n        int indexForTailElement = list.indexOf(3);\n        assertEquals(2, indexForTailElement, \"indexOf should return the index of the last element when it's the tail of the list\");\n\n        // Test indexOf with a null element should throw NullPointerException\n        Exception exception = assertThrows(NullPointerException.class, () -> list.indexOf(null));\n        assertEquals(\"element cannot be null\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    private CursorLinkedList<Integer> list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new CursorLinkedList<Integer>();\n        list.append(1);\n        list.append(2);\n        list.append(3);\n    }\n\n    @Test\n    public void indexOfTest() {\n        assertEquals(0, list.indexOf(1), \"Index of element '1' should be 0.\");\n        assertEquals(1, list.indexOf(2), \"Index of element '2' should be 1.\");\n        assertEquals(2, list.indexOf(3), \"Index of element '3' should be 2.\");\n        assertEquals(-1, list.indexOf(4), \"Index of element '4' should be -1 since it is not in the list.\");\n    }\n\n    @AfterEach\n    public void tearDown() {\n        list = null;\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    @Test\n    public void indexOfTest() {\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n\n        // Initially, the list is empty, so searching for any element should return -1\n        assertEquals(-1, list.indexOf(1), \"Index of element in an empty list should be -1.\");\n\n        // Append elements to the list\n        list.append(1);\n        list.append(2);\n        list.append(3);\n\n        // Test the indexOf method for elements that exist in the list\n        assertEquals(0, list.indexOf(1), \"Index of element 1 should be 0.\");\n        assertEquals(1, list.indexOf(2), \"Index of element 2 should be 1.\");\n        assertEquals(2, list.indexOf(3), \"Index of element 3 should be 2.\");\n\n        // Test the indexOf method for an element that does not exist in the list\n        assertEquals(-1, list.indexOf(4), \"Index of element not in the list should be -1.\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    private CursorLinkedList<Integer> list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new CursorLinkedList<>();\n    }\n\n    @Test\n    public void indexOfTest() {\n        assertTrue(list.indexOf(1) == -1, \"Index of an element in an empty list should be -1.\");\n\n        list.append(10);\n        assertEquals(0, list.indexOf(10), \"Index of the first element should be 0.\");\n\n        list.append(20);\n        list.append(30);\n        assertEquals(1, list.indexOf(20), \"Index of 20 should be 1.\");\n        assertEquals(2, list.indexOf(30), \"Index of 30 should be 2.\");\n        assertTrue(list.indexOf(40) == -1, \"Index of a non-existent element should be -1.\");\n\n        list.remove(new Integer(20));\n        assertTrue(list.indexOf(20) == -1, \"Index of a removed element (20) should be -1.\");\n        assertEquals(1, list.indexOf(30), \"After removing 20, index of 30 should be 1.\");\n        \n        list.removeByIndex(0); // Removing the first element (10)\n        assertEquals(0, list.indexOf(30), \"After removing the first element, index of 30 should now be 0.\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    private CursorLinkedList<Integer> list;\n\n    @BeforeEach\n    public void setUp() {\n        // Initialize a new list before each test\n        list = new CursorLinkedList<>();\n    }\n\n    @Test\n    public void indexOfTest() {\n        // Given an empty list\n        assertTrue(list.indexOf(1) == -1, \"Index should be -1 for element not in list\");\n\n        // Append elements to the list\n        list.append(1);\n        list.append(2);\n        list.append(3);\n\n        // Check index of each element\n        assertEquals(0, list.indexOf(1), \"Element 1 should be at index 0\");\n        assertEquals(1, list.indexOf(2), \"Element 2 should be at index 1\");\n        assertEquals(2, list.indexOf(3), \"Element 3 should be at index 2\");\n\n        // Check index of an element not in the list\n        assertEquals(-1, list.indexOf(4), \"Element not in list should return index -1\");\n\n        // Check index of null should throw NullPointerException\n        assertThrows(NullPointerException.class, () -> {\n            list.indexOf(null);\n        }, \"Passing null to indexOf should throw NullPointerException\");\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Cleanup resources if needed after each test\n        list = null;\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    private CursorLinkedList<Integer> list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new CursorLinkedList<>();\n    }\n\n    @Test\n    public void indexOfTest() {\n        assertTrue(list.indexOf(3) == -1, \"Checking indexOf on an empty list should return -1\");\n\n        list.append(1);\n        list.append(2);\n        list.append(3);\n\n        assertEquals(0, list.indexOf(1), \"IndexOf for first element should return 0\");\n        assertEquals(1, list.indexOf(2), \"IndexOf for second element should return 1\");\n        assertEquals(2, list.indexOf(3), \"IndexOf for third element should return 2\");\n        assertEquals(-1, list.indexOf(4), \"IndexOf for a non-existing element should return -1\");\n        \n        list.removeByIndex(1);\n        assertEquals(-1, list.indexOf(2), \"IndexOf for removed element should return -1\");\n        assertEquals(1, list.indexOf(3), \"IndexOf for remaining element after removal should show updated index\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n        assertEquals(-1, list.indexOf(42), \"Empty list should return index -1 for any element\");\n\n        list.append(10);\n        list.append(20);\n        list.append(30);\n\n        assertEquals(0, list.indexOf(10), \"List should return index 0 for the first element\");\n        assertEquals(1, list.indexOf(20), \"List should return index 1 for the second element\");\n        assertEquals(2, list.indexOf(30), \"List should return index 2 for the third element\");\n        assertEquals(-1, list.indexOf(40), \"List should return index -1 for an element that does not exist\");\n    }\n}"
    ]
}