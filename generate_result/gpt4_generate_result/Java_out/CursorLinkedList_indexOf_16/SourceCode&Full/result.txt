Source code: 


public int indexOf(T element) {
    Objects.requireNonNull(element);
    Node<T> iterator = cursorSpace[head];
    for (int i = 0; i < count; i++) {
        if (iterator.element.equals(element)) {
            return i;
        }
        iterator = cursorSpace[iterator.next];
    }

    return -1;
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    private CursorLinkedList<Integer> list;

    @BeforeEach
    public void setUp() {
        list = new CursorLinkedList<>();
    }

    @Test
    public void indexOfTest() {
        // Given an empty list, the index of any element should be -1
        assertEquals(-1, list.indexOf(0), "Searching in an empty list should return -1.");

        // Now append elements to the list
        list.append(1);
        list.append(2);
        list.append(3);

        // The indexOf each inserted element should match the order of insertion (0-based index)
        assertEquals(0, list.indexOf(1), "Index of first element (1) should be 0.");
        assertEquals(1, list.indexOf(2), "Index of second element (2) should be 1.");
        assertEquals(2, list.indexOf(3), "Index of third element (3) should be 2.");

        // If the element is not present, indexOf should return -1
        assertEquals(-1, list.indexOf(4), "Index of non-existent element should be -1.");

        // Also test the edge case with null values
        try {
            list.indexOf(null);
            fail("Searching for null should throw NullPointerException.");
        } catch (NullPointerException e) {
            // Expected behavior, the test should pass
        }
    }

    // Additional test, if needed, for special cases or behavior

    @AfterEach
    public void tearDown() {
        // Clean up resources if necessary
        list = null;
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    private CursorLinkedList<Integer> list;

    @BeforeEach
    public void setUp() {
        list = new CursorLinkedList<>();
    }

    @Test
    public void indexOfTest() {
        // Assuming elements are integers for this test
        list.append(1);
        list.append(2);
        list.append(3);
        
        // Check if the index of an element present in the list is correct
        assertEquals(0, list.indexOf(1), "Index of element 1 should be 0.");
        assertEquals(1, list.indexOf(2), "Index of element 2 should be 1.");
        assertEquals(2, list.indexOf(3), "Index of element 3 should be 2.");
        
        // Check if the index of an element not present in the list is -1
        assertEquals(-1, list.indexOf(4), "Index of element not in list should be -1.");
    }

    @AfterEach
    public void tearDown() {
        list = null;
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    private CursorLinkedList<Integer> list;

    @BeforeEach
    public void setUp() {
        list = new CursorLinkedList<>();
    }

    @Test
    public void indexOfTest() {
        assertTrue(list.indexOf(1) == -1, "Empty list should return -1 for any element index");

        list.append(1);
        list.append(2);
        list.append(3);

        assertEquals(0, list.indexOf(1), "Index of first element (1) should be 0");
        assertEquals(1, list.indexOf(2), "Index of second element (2) should be 1");
        assertEquals(2, list.indexOf(3), "Index of third element (3) should be 2");
        assertTrue(list.indexOf(4) == -1, "Index of non-existent element (4) should be -1");
    }

    @AfterEach
    public void tearDown() {
        list = null;
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    @Test
    public void indexOfTest() {
        // Create a CursorLinkedList and populate it with some elements
        CursorLinkedList<Integer> list = new CursorLinkedList<>();
        list.append(1);
        list.append(2);
        list.append(3);

        // Test indexOf for an existing element
        int indexForExistingElement = list.indexOf(2);
        assertEquals(1, indexForExistingElement, "indexOf should return the correct index of an existing element");

        // Test indexOf for a non-existing element
        int indexForNonExistingElement = list.indexOf(5);
        assertEquals(-1, indexForNonExistingElement, "indexOf should return -1 when the element does not exist in the list");

        // Test indexOf for the head element
        int indexForHeadElement = list.indexOf(1);
        assertEquals(0, indexForHeadElement, "indexOf should return 0 when the element is the head of the list");

        // Test indexOf for the tail element
        int indexForTailElement = list.indexOf(3);
        assertEquals(2, indexForTailElement, "indexOf should return the index of the last element when it's the tail of the list");

        // Test indexOf with a null element should throw NullPointerException
        Exception exception = assertThrows(NullPointerException.class, () -> list.indexOf(null));
        assertEquals("element cannot be null", exception.getMessage());
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    private CursorLinkedList<Integer> list;

    @BeforeEach
    public void setUp() {
        list = new CursorLinkedList<Integer>();
        list.append(1);
        list.append(2);
        list.append(3);
    }

    @Test
    public void indexOfTest() {
        assertEquals(0, list.indexOf(1), "Index of element '1' should be 0.");
        assertEquals(1, list.indexOf(2), "Index of element '2' should be 1.");
        assertEquals(2, list.indexOf(3), "Index of element '3' should be 2.");
        assertEquals(-1, list.indexOf(4), "Index of element '4' should be -1 since it is not in the list.");
    }

    @AfterEach
    public void tearDown() {
        list = null;
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    @Test
    public void indexOfTest() {
        CursorLinkedList<Integer> list = new CursorLinkedList<>();

        // Initially, the list is empty, so searching for any element should return -1
        assertEquals(-1, list.indexOf(1), "Index of element in an empty list should be -1.");

        // Append elements to the list
        list.append(1);
        list.append(2);
        list.append(3);

        // Test the indexOf method for elements that exist in the list
        assertEquals(0, list.indexOf(1), "Index of element 1 should be 0.");
        assertEquals(1, list.indexOf(2), "Index of element 2 should be 1.");
        assertEquals(2, list.indexOf(3), "Index of element 3 should be 2.");

        // Test the indexOf method for an element that does not exist in the list
        assertEquals(-1, list.indexOf(4), "Index of element not in the list should be -1.");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    private CursorLinkedList<Integer> list;

    @BeforeEach
    public void setUp() {
        list = new CursorLinkedList<>();
    }

    @Test
    public void indexOfTest() {
        assertTrue(list.indexOf(1) == -1, "Index of an element in an empty list should be -1.");

        list.append(10);
        assertEquals(0, list.indexOf(10), "Index of the first element should be 0.");

        list.append(20);
        list.append(30);
        assertEquals(1, list.indexOf(20), "Index of 20 should be 1.");
        assertEquals(2, list.indexOf(30), "Index of 30 should be 2.");
        assertTrue(list.indexOf(40) == -1, "Index of a non-existent element should be -1.");

        list.remove(new Integer(20));
        assertTrue(list.indexOf(20) == -1, "Index of a removed element (20) should be -1.");
        assertEquals(1, list.indexOf(30), "After removing 20, index of 30 should be 1.");
        
        list.removeByIndex(0); // Removing the first element (10)
        assertEquals(0, list.indexOf(30), "After removing the first element, index of 30 should now be 0.");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    private CursorLinkedList<Integer> list;

    @BeforeEach
    public void setUp() {
        // Initialize a new list before each test
        list = new CursorLinkedList<>();
    }

    @Test
    public void indexOfTest() {
        // Given an empty list
        assertTrue(list.indexOf(1) == -1, "Index should be -1 for element not in list");

        // Append elements to the list
        list.append(1);
        list.append(2);
        list.append(3);

        // Check index of each element
        assertEquals(0, list.indexOf(1), "Element 1 should be at index 0");
        assertEquals(1, list.indexOf(2), "Element 2 should be at index 1");
        assertEquals(2, list.indexOf(3), "Element 3 should be at index 2");

        // Check index of an element not in the list
        assertEquals(-1, list.indexOf(4), "Element not in list should return index -1");

        // Check index of null should throw NullPointerException
        assertThrows(NullPointerException.class, () -> {
            list.indexOf(null);
        }, "Passing null to indexOf should throw NullPointerException");
    }

    @AfterEach
    public void tearDown() {
        // Cleanup resources if needed after each test
        list = null;
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    private CursorLinkedList<Integer> list;

    @BeforeEach
    public void setUp() {
        list = new CursorLinkedList<>();
    }

    @Test
    public void indexOfTest() {
        assertTrue(list.indexOf(3) == -1, "Checking indexOf on an empty list should return -1");

        list.append(1);
        list.append(2);
        list.append(3);

        assertEquals(0, list.indexOf(1), "IndexOf for first element should return 0");
        assertEquals(1, list.indexOf(2), "IndexOf for second element should return 1");
        assertEquals(2, list.indexOf(3), "IndexOf for third element should return 2");
        assertEquals(-1, list.indexOf(4), "IndexOf for a non-existing element should return -1");
        
        list.removeByIndex(1);
        assertEquals(-1, list.indexOf(2), "IndexOf for removed element should return -1");
        assertEquals(1, list.indexOf(3), "IndexOf for remaining element after removal should show updated index");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        CursorLinkedList<Integer> list = new CursorLinkedList<>();
        assertEquals(-1, list.indexOf(42), "Empty list should return index -1 for any element");

        list.append(10);
        list.append(20);
        list.append(30);

        assertEquals(0, list.indexOf(10), "List should return index 0 for the first element");
        assertEquals(1, list.indexOf(20), "List should return index 1 for the second element");
        assertEquals(2, list.indexOf(30), "List should return index 2 for the third element");
        assertEquals(-1, list.indexOf(40), "List should return index -1 for an element that does not exist");
    }
}


