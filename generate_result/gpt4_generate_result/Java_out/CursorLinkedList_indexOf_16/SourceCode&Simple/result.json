{
    "project_name": "Java",
    "file_name": "CursorLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/CursorLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * @return the logical index of the element within the list , not the actual\n     * index of the [cursorSpace] array\n     */",
    "source_code": "\npublic int indexOf(T element) {\n    Objects.requireNonNull(element);\n    Node<T> iterator = cursorSpace[head];\n    for (int i = 0; i < count; i++) {\n        if (iterator.element.equals(element)) {\n            return i;\n        }\n        iterator = cursorSpace[iterator.next];\n    }\n\n    return -1;\n}\n",
    "class_name": "CursorLinkedList",
    "method_name": "indexOf",
    "arguments": [
        "T element"
    ],
    "generate_test": [
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    private CursorLinkedList<Integer> list;\n    \n    @BeforeEach\n    public void setUp() {\n        // Initialize CursorLinkedList with a fixed cursor space size\n        // You may need to adjust the constructor and setup based on the actual\n        // implementation and constructor arguments if any\n        list = new CursorLinkedList<>(CursorLinkedList.CURSOR_SPACE_SIZE);\n        \n        // Assuming `append` adds elements to the list correctly\n        list.append(1);\n        list.append(2);\n        list.append(3);\n    }\n\n    @Test\n    public void indexOfTest() {\n        // Test for existing elements\n        assertEquals(0, list.indexOf(1), \"Index of element 1 should be 0\");\n        assertEquals(1, list.indexOf(2), \"Index of element 2 should be 1\");\n        assertEquals(2, list.indexOf(3), \"Index of element 3 should be 2\");\n        \n        // Test for non-existing element\n        assertEquals(-1, list.indexOf(4), \"Index of element 4 should be -1 as it does not exist in the list\");\n        \n        // Test with null element, expecting NullPointerException\n        Exception exception = assertThrows(NullPointerException.class, () -> {\n            list.indexOf(null);\n        });\n        assertEquals(\"element is marked non-null but is null\", exception.getMessage(), \"Passing null should throw NullPointerException\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    private CursorLinkedList<Integer> list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new CursorLinkedList<>();\n    }\n\n    @Test\n    public void indexOfTest() {\n        // Assume the list is already populated with some elements and the logic\n        // for other operations such as append is working correctly.\n\n        // Given an empty list\n        assertEquals(-1, list.indexOf(1), \"Index of an element in an empty list should be -1\");\n\n        list.append(2);\n        list.append(3);\n        list.append(4);\n\n        // Now the list should be [2, 3, 4]\n\n        // Testing existing elements\n        assertEquals(0, list.indexOf(2), \"Index of element 2 should be 0\");\n        assertEquals(1, list.indexOf(3), \"Index of element 3 should be 1\");\n        assertEquals(2, list.indexOf(4), \"Index of element 4 should be 2\");\n\n        // Testing a non-existing element\n        assertEquals(-1, list.indexOf(5), \"Index of a non-existing element should be -1\");\n    }\n\n    @AfterEach\n    public void tearDown() {\n        list = null;\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    private CursorLinkedList<Integer> list;\n    \n    @BeforeEach\n    public void setUp() {\n        // The setup for CursorLinkedList might differ but assuming a default size for CURSOR_SPACE_SIZE\n        // and a constructor without parameters\n        list = new CursorLinkedList<>();\n        // Assuming the append method adds elements at the end of the list\n        list.append(1);\n        list.append(2);\n        list.append(3);\n    }\n    \n    @Test\n    public void indexOfTest() {\n        // Test for existing elements\n        assertEquals(0, list.indexOf(1), \"Index of element 1 should be 0.\");\n        assertEquals(1, list.indexOf(2), \"Index of element 2 should be 1.\");\n        assertEquals(2, list.indexOf(3), \"Index of element 3 should be 2.\");\n        \n        // Test for non-existing element\n        assertEquals(-1, list.indexOf(4), \"Index of element 4 should be -1 as it does not exist in the list.\");\n        \n        // Test for null input\n        Exception exception = assertThrows(NullPointerException.class, () -> {\n            list.indexOf(null);\n        });\n        String expectedMessage = \"element\";\n        String actualMessage = exception.getMessage();\n        \n        assertTrue(actualMessage.contains(expectedMessage), \"indexOf should throw NullPointerException for null element.\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    @Test\n    public void indexOfTest() {\n        // Instantiate a new CursorLinkedList\n        CursorLinkedList<String> list = new CursorLinkedList<>();\n\n        // Append elements to the list\n        list.append(\"A\");\n        list.append(\"B\");\n        list.append(\"C\");\n\n        // Test the indexOf method\n        assertEquals(0, list.indexOf(\"A\"), \"Index of A should be 0\");\n        assertEquals(1, list.indexOf(\"B\"), \"Index of B should be 1\");\n        assertEquals(2, list.indexOf(\"C\"), \"Index of C should be 2\");\n\n        // Test the indexOf method for an element not in the list\n        assertEquals(-1, list.indexOf(\"Z\"), \"Index of Z should be -1 as it is not in the list\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class CursorLinkedListTest {\n\n    @Test\n    public void indexOfTest() {\n        CursorLinkedList<Integer> list = new CursorLinkedList<Integer>();\n\n        // Assume CURSOR_SPACE_SIZE has been initialized to accommodate at least 4 elements\n        final int CURSOR_SPACE_SIZE = 4;\n\n        list.append(10);\n        list.append(20);\n        list.append(30);\n        list.append(40);\n\n        // Test indexOf on existing elements\n        assertEquals(0, list.indexOf(10), \"Index of first element should be 0.\");\n        assertEquals(1, list.indexOf(20), \"Index of second element should be 1.\");\n        assertEquals(2, list.indexOf(30), \"Index of third element should be 2.\");\n        assertEquals(3, list.indexOf(40), \"Index of fourth element should be 3.\");\n\n        // Test indexOf on non-existing element\n        assertEquals(-1, list.indexOf(50), \"Index of non-existing element should be -1.\");\n\n        // Test indexOf with null element\n        assertThrows(NullPointerException.class, () -> {\n            list.indexOf(null);\n        }, \"Searching for null element should throw NullPointerException.\");\n\n        // Optionally, cleanup or print the list.\n        // list.printList();\n        // Cleanup is tricky without knowing the implementation of CursorLinkedList methods\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    private CursorLinkedList<Integer> list;\n\n    @BeforeEach\n    public void setUp() {\n        // Initialize CursorLinkedList with a specified size for testing purposes\n        list = new CursorLinkedList<>(/* Assuming there's a constructor that takes size */);\n        list.append(1);\n        list.append(2);\n        list.append(3);\n    }\n\n    @Test\n    public void indexOfTest() {\n        assertAll(\"Testing indexOf method\",\n            () -> assertEquals(0, list.indexOf(1), \"Index of first element should be 0.\"),\n            () -> assertEquals(1, list.indexOf(2), \"Index of second element should be 1.\"),\n            () -> assertEquals(2, list.indexOf(3), \"Index of third element should be 2.\"),\n            () -> assertEquals(-1, list.indexOf(4), \"Index of non-existent element should be -1.\")\n        );\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    @Test\n    public void indexOfTest() {\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n        int firstElementIndex = -1;\n        int nonexistentElementIndex = -1;\n        int addedElementIndex = -1;\n        \n        // Case 1: Check index of an element in an empty list\n        assertEquals(firstElementIndex, list.indexOf(1));\n        \n        // Case 2: Check index of a nonexistent element in a non-empty list\n        list.append(1);\n        list.append(2);\n        list.append(3);\n        assertEquals(nonexistentElementIndex, list.indexOf(4));\n        \n        // Case 3: Check index of an existing element\n        int elementToAdd = 2;\n        addedElementIndex = list.indexOf(elementToAdd);\n        assertEquals(1, addedElementIndex);  // Assuming the list maintains the order of insertion\n\n        // Case 4: Check index of null (should throw NullPointerException)\n        assertThrows(NullPointerException.class, () -> list.indexOf(null));\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    CursorLinkedList<String> list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new CursorLinkedList<>();\n        list.append(\"One\");\n        list.append(\"Two\");\n        list.append(\"Three\");\n    }\n\n    @Test\n    public void indexOfTest() {\n        assertEquals(0, list.indexOf(\"One\"), \"The index of 'One' should be 0\");\n        assertEquals(1, list.indexOf(\"Two\"), \"The index of 'Two' should be 1\");\n        assertEquals(2, list.indexOf(\"Three\"), \"The index of 'Three' should be 2\");\n        assertEquals(-1, list.indexOf(\"Four\"), \"The index of 'Four' should be -1 as it is not in the list\");\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Cleaning up if necessary.\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    @Test\n    public void indexOfTest() {\n        // Assume that CursorLinkedList<Integer> is a valid instantiation for generic T\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n\n        // Populate the list\n        list.append(10);\n        list.append(20);\n        list.append(30);\n\n        // Test the indexOf method\n        assertEquals(0, list.indexOf(10), \"Index of element 10 should be 0.\");\n        assertEquals(1, list.indexOf(20), \"Index of element 20 should be 1.\");\n        assertEquals(2, list.indexOf(30), \"Index of element 30 should be 2.\");\n        assertEquals(-1, list.indexOf(40), \"Index of element 40 should be -1, as it does not exist in the list.\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    \n    private CursorLinkedList<Integer> list;\n    \n    @BeforeEach\n    public void setUp() {\n        list = new CursorLinkedList<>();\n        // Assuming the list manages integers and CursorLinkedList has appropriate methods to add elements\n        list.append(1);\n        list.append(2);\n        list.append(3);\n    }\n    \n    @Test\n    public void indexOfTestElementPresent() {\n        // Test with an element that is present\n        int index = list.indexOf(2);\n        assertEquals(1, index, \"The index of element 2 should be 1\");\n    }\n    \n    @Test\n    public void indexOfTestElementAbsent() {\n        // Test with an element that is not present\n        int index = list.indexOf(4);\n        assertEquals(-1, index, \"The index of element 4 should be -1 because it is not in the list\");\n    }\n    \n    @Test\n    public void indexOfTestNullElement() {\n        // Test to ensure proper handling of null values\n        Exception exception = assertThrows(NullPointerException.class, () -> {\n            list.indexOf(null);\n        });\n        assertNotNull(exception, \"A NullPointerException should be thrown when looking for null\");\n    }\n    \n    @Test\n    public void indexOfTestEmptyList() {\n        // Setup a new empty list and test\n        CursorLinkedList<Integer> emptyList = new CursorLinkedList<>();\n        int index = emptyList.indexOf(1);\n        assertEquals(-1, index, \"The index should be -1 since the list is empty\");\n    }\n    \n    // Additional tests can be written to cover more edge cases if needed.\n\n    // Make sure your CursorLinkedList class has the relevant methods and constructors,\n    // and that it implements generics if your Node class makes use of it.\n}"
    ]
}