Source code: 


public int indexOf(T element) {
    Objects.requireNonNull(element);
    Node<T> iterator = cursorSpace[head];
    for (int i = 0; i < count; i++) {
        if (iterator.element.equals(element)) {
            return i;
        }
        iterator = cursorSpace[iterator.next];
    }

    return -1;
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    private CursorLinkedList<Integer> list;
    
    @BeforeEach
    public void setUp() {
        // Initialize CursorLinkedList with a fixed cursor space size
        // You may need to adjust the constructor and setup based on the actual
        // implementation and constructor arguments if any
        list = new CursorLinkedList<>(CursorLinkedList.CURSOR_SPACE_SIZE);
        
        // Assuming `append` adds elements to the list correctly
        list.append(1);
        list.append(2);
        list.append(3);
    }

    @Test
    public void indexOfTest() {
        // Test for existing elements
        assertEquals(0, list.indexOf(1), "Index of element 1 should be 0");
        assertEquals(1, list.indexOf(2), "Index of element 2 should be 1");
        assertEquals(2, list.indexOf(3), "Index of element 3 should be 2");
        
        // Test for non-existing element
        assertEquals(-1, list.indexOf(4), "Index of element 4 should be -1 as it does not exist in the list");
        
        // Test with null element, expecting NullPointerException
        Exception exception = assertThrows(NullPointerException.class, () -> {
            list.indexOf(null);
        });
        assertEquals("element is marked non-null but is null", exception.getMessage(), "Passing null should throw NullPointerException");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    private CursorLinkedList<Integer> list;

    @BeforeEach
    public void setUp() {
        list = new CursorLinkedList<>();
    }

    @Test
    public void indexOfTest() {
        // Assume the list is already populated with some elements and the logic
        // for other operations such as append is working correctly.

        // Given an empty list
        assertEquals(-1, list.indexOf(1), "Index of an element in an empty list should be -1");

        list.append(2);
        list.append(3);
        list.append(4);

        // Now the list should be [2, 3, 4]

        // Testing existing elements
        assertEquals(0, list.indexOf(2), "Index of element 2 should be 0");
        assertEquals(1, list.indexOf(3), "Index of element 3 should be 1");
        assertEquals(2, list.indexOf(4), "Index of element 4 should be 2");

        // Testing a non-existing element
        assertEquals(-1, list.indexOf(5), "Index of a non-existing element should be -1");
    }

    @AfterEach
    public void tearDown() {
        list = null;
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    private CursorLinkedList<Integer> list;
    
    @BeforeEach
    public void setUp() {
        // The setup for CursorLinkedList might differ but assuming a default size for CURSOR_SPACE_SIZE
        // and a constructor without parameters
        list = new CursorLinkedList<>();
        // Assuming the append method adds elements at the end of the list
        list.append(1);
        list.append(2);
        list.append(3);
    }
    
    @Test
    public void indexOfTest() {
        // Test for existing elements
        assertEquals(0, list.indexOf(1), "Index of element 1 should be 0.");
        assertEquals(1, list.indexOf(2), "Index of element 2 should be 1.");
        assertEquals(2, list.indexOf(3), "Index of element 3 should be 2.");
        
        // Test for non-existing element
        assertEquals(-1, list.indexOf(4), "Index of element 4 should be -1 as it does not exist in the list.");
        
        // Test for null input
        Exception exception = assertThrows(NullPointerException.class, () -> {
            list.indexOf(null);
        });
        String expectedMessage = "element";
        String actualMessage = exception.getMessage();
        
        assertTrue(actualMessage.contains(expectedMessage), "indexOf should throw NullPointerException for null element.");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    @Test
    public void indexOfTest() {
        // Instantiate a new CursorLinkedList
        CursorLinkedList<String> list = new CursorLinkedList<>();

        // Append elements to the list
        list.append("A");
        list.append("B");
        list.append("C");

        // Test the indexOf method
        assertEquals(0, list.indexOf("A"), "Index of A should be 0");
        assertEquals(1, list.indexOf("B"), "Index of B should be 1");
        assertEquals(2, list.indexOf("C"), "Index of C should be 2");

        // Test the indexOf method for an element not in the list
        assertEquals(-1, list.indexOf("Z"), "Index of Z should be -1 as it is not in the list");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class CursorLinkedListTest {

    @Test
    public void indexOfTest() {
        CursorLinkedList<Integer> list = new CursorLinkedList<Integer>();

        // Assume CURSOR_SPACE_SIZE has been initialized to accommodate at least 4 elements
        final int CURSOR_SPACE_SIZE = 4;

        list.append(10);
        list.append(20);
        list.append(30);
        list.append(40);

        // Test indexOf on existing elements
        assertEquals(0, list.indexOf(10), "Index of first element should be 0.");
        assertEquals(1, list.indexOf(20), "Index of second element should be 1.");
        assertEquals(2, list.indexOf(30), "Index of third element should be 2.");
        assertEquals(3, list.indexOf(40), "Index of fourth element should be 3.");

        // Test indexOf on non-existing element
        assertEquals(-1, list.indexOf(50), "Index of non-existing element should be -1.");

        // Test indexOf with null element
        assertThrows(NullPointerException.class, () -> {
            list.indexOf(null);
        }, "Searching for null element should throw NullPointerException.");

        // Optionally, cleanup or print the list.
        // list.printList();
        // Cleanup is tricky without knowing the implementation of CursorLinkedList methods
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    private CursorLinkedList<Integer> list;

    @BeforeEach
    public void setUp() {
        // Initialize CursorLinkedList with a specified size for testing purposes
        list = new CursorLinkedList<>(/* Assuming there's a constructor that takes size */);
        list.append(1);
        list.append(2);
        list.append(3);
    }

    @Test
    public void indexOfTest() {
        assertAll("Testing indexOf method",
            () -> assertEquals(0, list.indexOf(1), "Index of first element should be 0."),
            () -> assertEquals(1, list.indexOf(2), "Index of second element should be 1."),
            () -> assertEquals(2, list.indexOf(3), "Index of third element should be 2."),
            () -> assertEquals(-1, list.indexOf(4), "Index of non-existent element should be -1.")
        );
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    @Test
    public void indexOfTest() {
        CursorLinkedList<Integer> list = new CursorLinkedList<>();
        int firstElementIndex = -1;
        int nonexistentElementIndex = -1;
        int addedElementIndex = -1;
        
        // Case 1: Check index of an element in an empty list
        assertEquals(firstElementIndex, list.indexOf(1));
        
        // Case 2: Check index of a nonexistent element in a non-empty list
        list.append(1);
        list.append(2);
        list.append(3);
        assertEquals(nonexistentElementIndex, list.indexOf(4));
        
        // Case 3: Check index of an existing element
        int elementToAdd = 2;
        addedElementIndex = list.indexOf(elementToAdd);
        assertEquals(1, addedElementIndex);  // Assuming the list maintains the order of insertion

        // Case 4: Check index of null (should throw NullPointerException)
        assertThrows(NullPointerException.class, () -> list.indexOf(null));
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    CursorLinkedList<String> list;

    @BeforeEach
    public void setUp() {
        list = new CursorLinkedList<>();
        list.append("One");
        list.append("Two");
        list.append("Three");
    }

    @Test
    public void indexOfTest() {
        assertEquals(0, list.indexOf("One"), "The index of 'One' should be 0");
        assertEquals(1, list.indexOf("Two"), "The index of 'Two' should be 1");
        assertEquals(2, list.indexOf("Three"), "The index of 'Three' should be 2");
        assertEquals(-1, list.indexOf("Four"), "The index of 'Four' should be -1 as it is not in the list");
    }

    @AfterEach
    public void tearDown() {
        // Cleaning up if necessary.
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    @Test
    public void indexOfTest() {
        // Assume that CursorLinkedList<Integer> is a valid instantiation for generic T
        CursorLinkedList<Integer> list = new CursorLinkedList<>();

        // Populate the list
        list.append(10);
        list.append(20);
        list.append(30);

        // Test the indexOf method
        assertEquals(0, list.indexOf(10), "Index of element 10 should be 0.");
        assertEquals(1, list.indexOf(20), "Index of element 20 should be 1.");
        assertEquals(2, list.indexOf(30), "Index of element 30 should be 2.");
        assertEquals(-1, list.indexOf(40), "Index of element 40 should be -1, as it does not exist in the list.");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    
    private CursorLinkedList<Integer> list;
    
    @BeforeEach
    public void setUp() {
        list = new CursorLinkedList<>();
        // Assuming the list manages integers and CursorLinkedList has appropriate methods to add elements
        list.append(1);
        list.append(2);
        list.append(3);
    }
    
    @Test
    public void indexOfTestElementPresent() {
        // Test with an element that is present
        int index = list.indexOf(2);
        assertEquals(1, index, "The index of element 2 should be 1");
    }
    
    @Test
    public void indexOfTestElementAbsent() {
        // Test with an element that is not present
        int index = list.indexOf(4);
        assertEquals(-1, index, "The index of element 4 should be -1 because it is not in the list");
    }
    
    @Test
    public void indexOfTestNullElement() {
        // Test to ensure proper handling of null values
        Exception exception = assertThrows(NullPointerException.class, () -> {
            list.indexOf(null);
        });
        assertNotNull(exception, "A NullPointerException should be thrown when looking for null");
    }
    
    @Test
    public void indexOfTestEmptyList() {
        // Setup a new empty list and test
        CursorLinkedList<Integer> emptyList = new CursorLinkedList<>();
        int index = emptyList.indexOf(1);
        assertEquals(-1, index, "The index should be -1 since the list is empty");
    }
    
    // Additional tests can be written to cover more edge cases if needed.

    // Make sure your CursorLinkedList class has the relevant methods and constructors,
    // and that it implements generics if your Node class makes use of it.
}


