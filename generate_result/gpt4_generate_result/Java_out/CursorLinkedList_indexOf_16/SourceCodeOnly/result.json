{
    "project_name": "Java",
    "file_name": "CursorLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/CursorLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * @return the logical index of the element within the list , not the actual\n     * index of the [cursorSpace] array\n     */",
    "source_code": "\npublic int indexOf(T element) {\n    Objects.requireNonNull(element);\n    Node<T> iterator = cursorSpace[head];\n    for (int i = 0; i < count; i++) {\n        if (iterator.element.equals(element)) {\n            return i;\n        }\n        iterator = cursorSpace[iterator.next];\n    }\n\n    return -1;\n}\n",
    "class_name": "CursorLinkedList",
    "method_name": "indexOf",
    "arguments": [
        "T element"
    ],
    "generate_test": [
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    private CursorLinkedList<Object> list;\n\n    @BeforeEach\n    public void setUp() {\n        // Initialize your list here if necessary\n        list = new CursorLinkedList<>();\n        // Presuming CursorLinkedList has an add method to append elements\n        list.add(\"Element1\");\n        list.add(\"Element2\");\n        list.add(\"Element3\");\n    }\n\n    @Test\n    public void indexOfTest() {\n        assertEquals(0, list.indexOf(\"Element1\"), \"Index should be 0 for the first element\");\n        assertEquals(1, list.indexOf(\"Element2\"), \"Index should be 1 for the second element\");\n        assertEquals(2, list.indexOf(\"Element3\"), \"Index should be 2 for the third element\");\n        assertEquals(-1, list.indexOf(\"Element4\"), \"Index should be -1 for an element that does not exist in the list\");\n        assertThrows(NullPointerException.class, () -> list.indexOf(null), \"Expect NullPointerException when searching for null\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass CursorLinkedListTest {\n\n    private CursorLinkedList<String> list;\n\n    @BeforeEach\n    void setUp() {\n        list = new CursorLinkedList<>();\n    }\n\n    @Test\n    public void indexOfTest() {\n        // Assuming CursorLinkedList has methods to add elements and setup the internal structure.\n        // Add test elements to the list\n        list.add(\"apple\");\n        list.add(\"banana\");\n        list.add(\"cherry\");\n\n        // Test for element that exists\n        assertEquals(0, list.indexOf(\"apple\"), \"The index of 'apple' should be 0\");\n        assertEquals(1, list.indexOf(\"banana\"), \"The index of 'banana' should be 1\");\n        assertEquals(2, list.indexOf(\"cherry\"), \"The index of 'cherry' should be 2\");\n\n        // Test for element that does not exist\n        assertEquals(-1, list.indexOf(\"date\"), \"The index of 'date' should be -1 as it is not in the list\");\n\n        // Test for null element handling, should throw NullPointerException\n        assertThrows(NullPointerException.class, () -> {\n            list.indexOf(null);\n        }, \"Attempting to find the index of 'null' should throw NullPointerException\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    private CursorLinkedList<Integer> list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new CursorLinkedList<>();\n    }\n\n    @Test\n    public void indexOfTest() {\n        // Assuming CursorLinkedList is similar to a normal linked list\n        list.append(1);\n        list.append(2);\n        list.append(3);\n\n        assertEquals(0, list.indexOf(1), \"Index of 1 should be 0\");\n        assertEquals(1, list.indexOf(2), \"Index of 2 should be 1\");\n        assertEquals(2, list.indexOf(3), \"Index of 3 should be 2\");\n        assertEquals(-1, list.indexOf(4), \"Index of non-existent element should be -1\");\n    }\n    \n    // Additional necessary code for CursorLinkedList can be added if needed, \n    // including setup of cursorSpace, head, count, etc. as those are not \n    // defined within the provided code.\n\n    // Also assuming that `append` method exists which appends elements to the list \n    // and correctly updates head, count, and cursorSpace as per the list's implementation.\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    private CursorLinkedList<Integer> list;\n\n    @BeforeEach\n    public void setUp() {\n        // Initialize the CursorLinkedList\n        list = new CursorLinkedList<>();\n        \n        // Assume the list has an add method to add elements\n        list.add(1);\n        list.add(2);\n        list.add(3);\n    }\n    \n    @Test\n    public void indexOfTest() {\n        // Test for element that exists\n        assertEquals(0, list.indexOf(1), \"Index of element 1 should be 0\");\n        assertEquals(1, list.indexOf(2), \"Index of element 2 should be 1\");\n        assertEquals(2, list.indexOf(3), \"Index of element 3 should be 2\");\n\n        // Test for element that doesn't exist\n        assertEquals(-1, list.indexOf(4), \"Index of element 4 should be -1\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass CursorLinkedList<T> {\n    // Assuming the following attributes and placeholder methods exist for this example\n    private Node<T>[] cursorSpace;\n    private int head;\n    private int count;\n    \n    // Implementation of Node class assuming it has element and next as attributes\n    private static class Node<T> {\n        T element;\n        int next;\n        // Constructor for Node class\n        Node(T element, int next) {\n            this.element = element;\n            this.next = next;\n        }\n    }\n    \n    // ...other methods...\n    \n    public int indexOf(T element) {\n        Objects.requireNonNull(element);\n        Node<T> iterator = cursorSpace[head];\n        for (int i = 0; i < count; i++) {\n            if (iterator.element.equals(element)) {\n                return i;\n            }\n            iterator = cursorSpace[iterator.next];\n        }\n\n        return -1;\n    }\n}\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        // Setup for the test\n        CursorLinkedList<String> list = new CursorLinkedList<>();\n        list.add(\"Apple\");\n        list.add(\"Banana\");\n        list.add(\"Cherry\");\n        \n        // Test for element that exists\n        assertEquals(1, list.indexOf(\"Banana\"), \"Index should be 1 for Banana\");\n        \n        // Test for element that does not exist\n        assertEquals(-1, list.indexOf(\"Durian\"), \"Index should be -1 for Durian since it's not in the list\");\n        \n        // Test for null element (should throw NullPointerException)\n        Exception exception = assertThrows(NullPointerException.class, () -> {\n            list.indexOf(null);\n        }, \"Should throw NullPointerException when trying to find index of null\");\n        assertEquals(\"element cannot be null\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    private CursorLinkedList<String> list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new CursorLinkedList<>();\n        list.add(\"apple\");\n        list.add(\"banana\");\n        list.add(\"cherry\");\n        list.add(\"date\");\n    }\n\n    @Test\n    public void indexOfTest() {\n        // Test to check if the index of an existing element is correctly found\n        assertEquals(0, list.indexOf(\"apple\"));\n        assertEquals(1, list.indexOf(\"banana\"));\n        assertEquals(2, list.indexOf(\"cherry\"));\n        assertEquals(3, list.indexOf(\"date\"));\n\n        // Test to check if the index of a non-existing element returns -1\n        assertEquals(-1, list.indexOf(\"orange\"));\n\n        // Assuming an 'add' method exists and works correctly\n        list.add(\"elderberry\");\n        assertEquals(4, list.indexOf(\"elderberry\"));\n\n        // Test to check if the index of a null element throws NullPointerException\n        assertThrows(NullPointerException.class, () -> {\n            list.indexOf(null);\n        });\n    }\n\n    // Other tests for the class...\n\n}\n",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    private CursorLinkedList<Integer> list;\n\n    @BeforeEach\n    void setUp() {\n        list = new CursorLinkedList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n    }\n\n    @Test\n    public void indexOfTest() {\n        // Testing existing elements\n        assertEquals(0, list.indexOf(1), \"Index of element 1 should be 0\");\n        assertEquals(1, list.indexOf(2), \"Index of element 2 should be 1\");\n        assertEquals(2, list.indexOf(3), \"Index of element 3 should be 2\");\n        \n        // Testing non-existing element\n        assertEquals(-1, list.indexOf(4), \"Index of element 4 should be -1 as it does not exist\");\n        \n        // Add verification for null input\n        assertThrows(NullPointerException.class, () -> {\n            list.indexOf(null);\n        }, \"indexOf() should throw NullPointerException for null element\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    private CursorLinkedList<Integer> list;\n    \n    @BeforeEach\n    public void setUp() {\n        list = new CursorLinkedList<>();\n        list.add(10);\n        list.add(20);\n        list.add(30);\n    }\n    \n    @Test\n    public void indexOfTest() {\n        assertEquals(0, list.indexOf(10), \"Index of 10 should be 0\");\n        assertEquals(1, list.indexOf(20), \"Index of 20 should be 1\");\n        assertEquals(2, list.indexOf(30), \"Index of 30 should be 2\");\n        assertEquals(-1, list.indexOf(40), \"Index of 40 should be -1 as it is not in the list\");\n    }\n    \n    @Test\n    public void indexOfWithNullTest() {\n        Exception exception = assertThrows(NullPointerException.class, () -> {\n            list.indexOf(null);\n        }, \"Passing null should throw NullPointerException\");\n        \n        String expectedMessage = \"element\";\n        String actualMessage = exception.getMessage();\n        \n        assertTrue(actualMessage.contains(expectedMessage), \"Exception message should indicate the null element\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    @Test\n    public void indexOfTest() {\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n        \n        // Let's assume that CursorLinkedList class has add method to add elements\n        list.add(10);\n        list.add(20);\n        list.add(30);\n\n        // Test to check the index of an element that exists in the list\n        assertEquals(0, list.indexOf(10), \"The index of 10 should be 0\");\n        assertEquals(1, list.indexOf(20), \"The index of 20 should be 1\");\n        assertEquals(2, list.indexOf(30), \"The index of 30 should be 2\");\n\n        // Test to check the index of an element that does not exist\n        assertEquals(-1, list.indexOf(40), \"The index of 40 should be -1 because it is not in the list\");\n        \n        // Check for exception with null argument\n        assertThrows(NullPointerException.class, () -> {\n            list.indexOf(null);\n        }, \"indexOf should throw NullPointerException for null elements\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    private CursorLinkedList<Integer> list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new CursorLinkedList<>();\n        for(int i = 0; i < 10; i++) {\n            list.add(i);\n        }\n    }\n\n    @Test\n    public void indexOfTest() {\n        // Assuming there's an add method in the list to add elements before we can find their index\n        // Check index of the element that exists in the list\n        assertEquals(0, list.indexOf(0), \"Index of the first element should be 0.\");\n        assertEquals(5, list.indexOf(5), \"Index of element 5 should be 5.\");\n        assertEquals(9, list.indexOf(9), \"Index of the last element should be 9.\");\n\n        // Check index of the element that does not exist in the list\n        assertEquals(-1, list.indexOf(10), \"Index of an element that does not exist should be -1.\");\n    }\n}"
    ]
}