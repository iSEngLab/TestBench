Source code: 


public int indexOf(T element) {
    Objects.requireNonNull(element);
    Node<T> iterator = cursorSpace[head];
    for (int i = 0; i < count; i++) {
        if (iterator.element.equals(element)) {
            return i;
        }
        iterator = cursorSpace[iterator.next];
    }

    return -1;
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    private CursorLinkedList<Object> list;

    @BeforeEach
    public void setUp() {
        // Initialize your list here if necessary
        list = new CursorLinkedList<>();
        // Presuming CursorLinkedList has an add method to append elements
        list.add("Element1");
        list.add("Element2");
        list.add("Element3");
    }

    @Test
    public void indexOfTest() {
        assertEquals(0, list.indexOf("Element1"), "Index should be 0 for the first element");
        assertEquals(1, list.indexOf("Element2"), "Index should be 1 for the second element");
        assertEquals(2, list.indexOf("Element3"), "Index should be 2 for the third element");
        assertEquals(-1, list.indexOf("Element4"), "Index should be -1 for an element that does not exist in the list");
        assertThrows(NullPointerException.class, () -> list.indexOf(null), "Expect NullPointerException when searching for null");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

class CursorLinkedListTest {

    private CursorLinkedList<String> list;

    @BeforeEach
    void setUp() {
        list = new CursorLinkedList<>();
    }

    @Test
    public void indexOfTest() {
        // Assuming CursorLinkedList has methods to add elements and setup the internal structure.
        // Add test elements to the list
        list.add("apple");
        list.add("banana");
        list.add("cherry");

        // Test for element that exists
        assertEquals(0, list.indexOf("apple"), "The index of 'apple' should be 0");
        assertEquals(1, list.indexOf("banana"), "The index of 'banana' should be 1");
        assertEquals(2, list.indexOf("cherry"), "The index of 'cherry' should be 2");

        // Test for element that does not exist
        assertEquals(-1, list.indexOf("date"), "The index of 'date' should be -1 as it is not in the list");

        // Test for null element handling, should throw NullPointerException
        assertThrows(NullPointerException.class, () -> {
            list.indexOf(null);
        }, "Attempting to find the index of 'null' should throw NullPointerException");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    private CursorLinkedList<Integer> list;

    @BeforeEach
    public void setUp() {
        list = new CursorLinkedList<>();
    }

    @Test
    public void indexOfTest() {
        // Assuming CursorLinkedList is similar to a normal linked list
        list.append(1);
        list.append(2);
        list.append(3);

        assertEquals(0, list.indexOf(1), "Index of 1 should be 0");
        assertEquals(1, list.indexOf(2), "Index of 2 should be 1");
        assertEquals(2, list.indexOf(3), "Index of 3 should be 2");
        assertEquals(-1, list.indexOf(4), "Index of non-existent element should be -1");
    }
    
    // Additional necessary code for CursorLinkedList can be added if needed, 
    // including setup of cursorSpace, head, count, etc. as those are not 
    // defined within the provided code.

    // Also assuming that `append` method exists which appends elements to the list 
    // and correctly updates head, count, and cursorSpace as per the list's implementation.
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    private CursorLinkedList<Integer> list;

    @BeforeEach
    public void setUp() {
        // Initialize the CursorLinkedList
        list = new CursorLinkedList<>();
        
        // Assume the list has an add method to add elements
        list.add(1);
        list.add(2);
        list.add(3);
    }
    
    @Test
    public void indexOfTest() {
        // Test for element that exists
        assertEquals(0, list.indexOf(1), "Index of element 1 should be 0");
        assertEquals(1, list.indexOf(2), "Index of element 2 should be 1");
        assertEquals(2, list.indexOf(3), "Index of element 3 should be 2");

        // Test for element that doesn't exist
        assertEquals(-1, list.indexOf(4), "Index of element 4 should be -1");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

class CursorLinkedList<T> {
    // Assuming the following attributes and placeholder methods exist for this example
    private Node<T>[] cursorSpace;
    private int head;
    private int count;
    
    // Implementation of Node class assuming it has element and next as attributes
    private static class Node<T> {
        T element;
        int next;
        // Constructor for Node class
        Node(T element, int next) {
            this.element = element;
            this.next = next;
        }
    }
    
    // ...other methods...
    
    public int indexOf(T element) {
        Objects.requireNonNull(element);
        Node<T> iterator = cursorSpace[head];
        for (int i = 0; i < count; i++) {
            if (iterator.element.equals(element)) {
                return i;
            }
            iterator = cursorSpace[iterator.next];
        }

        return -1;
    }
}

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        // Setup for the test
        CursorLinkedList<String> list = new CursorLinkedList<>();
        list.add("Apple");
        list.add("Banana");
        list.add("Cherry");
        
        // Test for element that exists
        assertEquals(1, list.indexOf("Banana"), "Index should be 1 for Banana");
        
        // Test for element that does not exist
        assertEquals(-1, list.indexOf("Durian"), "Index should be -1 for Durian since it's not in the list");
        
        // Test for null element (should throw NullPointerException)
        Exception exception = assertThrows(NullPointerException.class, () -> {
            list.indexOf(null);
        }, "Should throw NullPointerException when trying to find index of null");
        assertEquals("element cannot be null", exception.getMessage());
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    private CursorLinkedList<String> list;

    @BeforeEach
    public void setUp() {
        list = new CursorLinkedList<>();
        list.add("apple");
        list.add("banana");
        list.add("cherry");
        list.add("date");
    }

    @Test
    public void indexOfTest() {
        // Test to check if the index of an existing element is correctly found
        assertEquals(0, list.indexOf("apple"));
        assertEquals(1, list.indexOf("banana"));
        assertEquals(2, list.indexOf("cherry"));
        assertEquals(3, list.indexOf("date"));

        // Test to check if the index of a non-existing element returns -1
        assertEquals(-1, list.indexOf("orange"));

        // Assuming an 'add' method exists and works correctly
        list.add("elderberry");
        assertEquals(4, list.indexOf("elderberry"));

        // Test to check if the index of a null element throws NullPointerException
        assertThrows(NullPointerException.class, () -> {
            list.indexOf(null);
        });
    }

    // Other tests for the class...

}



No.7 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    private CursorLinkedList<Integer> list;

    @BeforeEach
    void setUp() {
        list = new CursorLinkedList<>();
        list.add(1);
        list.add(2);
        list.add(3);
    }

    @Test
    public void indexOfTest() {
        // Testing existing elements
        assertEquals(0, list.indexOf(1), "Index of element 1 should be 0");
        assertEquals(1, list.indexOf(2), "Index of element 2 should be 1");
        assertEquals(2, list.indexOf(3), "Index of element 3 should be 2");
        
        // Testing non-existing element
        assertEquals(-1, list.indexOf(4), "Index of element 4 should be -1 as it does not exist");
        
        // Add verification for null input
        assertThrows(NullPointerException.class, () -> {
            list.indexOf(null);
        }, "indexOf() should throw NullPointerException for null element");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    private CursorLinkedList<Integer> list;
    
    @BeforeEach
    public void setUp() {
        list = new CursorLinkedList<>();
        list.add(10);
        list.add(20);
        list.add(30);
    }
    
    @Test
    public void indexOfTest() {
        assertEquals(0, list.indexOf(10), "Index of 10 should be 0");
        assertEquals(1, list.indexOf(20), "Index of 20 should be 1");
        assertEquals(2, list.indexOf(30), "Index of 30 should be 2");
        assertEquals(-1, list.indexOf(40), "Index of 40 should be -1 as it is not in the list");
    }
    
    @Test
    public void indexOfWithNullTest() {
        Exception exception = assertThrows(NullPointerException.class, () -> {
            list.indexOf(null);
        }, "Passing null should throw NullPointerException");
        
        String expectedMessage = "element";
        String actualMessage = exception.getMessage();
        
        assertTrue(actualMessage.contains(expectedMessage), "Exception message should indicate the null element");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    @Test
    public void indexOfTest() {
        CursorLinkedList<Integer> list = new CursorLinkedList<>();
        
        // Let's assume that CursorLinkedList class has add method to add elements
        list.add(10);
        list.add(20);
        list.add(30);

        // Test to check the index of an element that exists in the list
        assertEquals(0, list.indexOf(10), "The index of 10 should be 0");
        assertEquals(1, list.indexOf(20), "The index of 20 should be 1");
        assertEquals(2, list.indexOf(30), "The index of 30 should be 2");

        // Test to check the index of an element that does not exist
        assertEquals(-1, list.indexOf(40), "The index of 40 should be -1 because it is not in the list");
        
        // Check for exception with null argument
        assertThrows(NullPointerException.class, () -> {
            list.indexOf(null);
        }, "indexOf should throw NullPointerException for null elements");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {

    private CursorLinkedList<Integer> list;

    @BeforeEach
    public void setUp() {
        list = new CursorLinkedList<>();
        for(int i = 0; i < 10; i++) {
            list.add(i);
        }
    }

    @Test
    public void indexOfTest() {
        // Assuming there's an add method in the list to add elements before we can find their index
        // Check index of the element that exists in the list
        assertEquals(0, list.indexOf(0), "Index of the first element should be 0.");
        assertEquals(5, list.indexOf(5), "Index of element 5 should be 5.");
        assertEquals(9, list.indexOf(9), "Index of the last element should be 9.");

        // Check index of the element that does not exist in the list
        assertEquals(-1, list.indexOf(10), "Index of an element that does not exist should be -1.");
    }
}


