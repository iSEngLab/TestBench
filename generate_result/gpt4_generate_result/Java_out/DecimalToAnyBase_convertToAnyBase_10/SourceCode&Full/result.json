{
    "project_name": "Java",
    "file_name": "DecimalToAnyBase.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/conversions/DecimalToAnyBase.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.conversions",
    "docstring": "/**\n     * This method produces a String value of any given input decimal in any\n     * base\n     *\n     * @param inp Decimal of which we need the value in base in String format\n     * @return string format of the converted value in the given base\n     */",
    "source_code": "\npublic static String convertToAnyBase(int inp, int base) {\n    ArrayList<Character> charArr = new ArrayList<>();\n\n    while (inp > 0) {\n        charArr.add(reVal(inp % base));\n        inp /= base;\n    }\n\n    StringBuilder str = new StringBuilder(charArr.size());\n\n    for (Character ch : charArr) {\n        str.append(ch);\n    }\n\n    return str.reverse().toString();\n}\n",
    "class_name": "DecimalToAnyBase",
    "method_name": "convertToAnyBase",
    "arguments": [
        "int inp",
        "int base"
    ],
    "generate_test": [
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        // Test case for base 2 conversion\n        assertEquals(\"101\", DecimalToAnyBase.convertToAnyBase(5, 2), \"5 in binary should be 101\");\n\n        // Test case for base 8 conversion\n        assertEquals(\"11\", DecimalToAnyBase.convertToAnyBase(9, 8), \"9 in octal should be 11\");\n\n        // Test case for base 16 conversion\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16), \"10 in hexadecimal should be A\");\n\n        // Test case for larger number in base 16\n        assertEquals(\"1E\", DecimalToAnyBase.convertToAnyBase(30, 16), \"30 in hexadecimal should be 1E\");\n\n        // Test with maximum base 36 where digits and alphabets are used\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(36, 36), \"36 in base-36 should be 10\");\n\n        // Test with 0 input\n        assertEquals(\"\", DecimalToAnyBase.convertToAnyBase(0, 2), \"0 in any base should return empty string\");\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"101\", DecimalToAnyBase.convertToAnyBase(5, 2), \"5 in base 2 should be 101\");\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16), \"10 in base 16 should be A\");\n        assertEquals(\"100\", DecimalToAnyBase.convertToAnyBase(100, 10), \"100 in base 10 should be 100\");\n        assertEquals(\"21\", DecimalToAnyBase.convertToAnyBase(33, 16), \"33 in base 16 should be 21\");\n        assertEquals(\"1111\", DecimalToAnyBase.convertToAnyBase(15, 2), \"15 in base 2 should be 1111\");\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 10), \"0 in base 10 should be 0\");\n        assertEquals(\"404\", DecimalToAnyBase.convertToAnyBase(260, 8), \"260 in base 8 should be 404\");\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"101\", DecimalToAnyBase.convertToAnyBase(5, 2));\n        assertEquals(\"5\", DecimalToAnyBase.convertToAnyBase(5, 10));\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8));\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16));\n        assertEquals(\"FF\", DecimalToAnyBase.convertToAnyBase(255, 16));\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 2));\n        assertEquals(\"1111\", DecimalToAnyBase.convertToAnyBase(15, 2));\n        assertEquals(\"Z\", DecimalToAnyBase.convertToAnyBase(35, 36));\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"101\", DecimalToAnyBase.convertToAnyBase(5, 2), \"5 in binary should be 101\");\n        assertEquals(\"5\", DecimalToAnyBase.convertToAnyBase(5, 10), \"5 in decimal should be 5\");\n        assertEquals(\"F\", DecimalToAnyBase.convertToAnyBase(15, 16), \"15 in hexadecimal should be F\");\n        assertEquals(\"11\", DecimalToAnyBase.convertToAnyBase(3, 2), \"3 in binary should be 11\");\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16), \"10 in hexadecimal should be A\");\n        // Testing for the case when the input number is 0\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 2), \"0 in binary should be 0\");\n        // Testing with a large number and different base\n        assertEquals(\"2S\", DecimalToAnyBase.convertToAnyBase(100, 36), \"100 in base 36 should be 2S\");\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"1010\", DecimalToAnyBase.convertToAnyBase(10, 2), \"10 in base 2 should be 1010\");\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16), \"10 in base 16 should be A\");\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8), \"10 in base 8 should be 12\");\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(10, 10), \"10 in base 10 should be 10\");\n        assertEquals(\"21\", DecimalToAnyBase.convertToAnyBase(7, 3), \"7 in base 3 should be 21\");\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class DecimalToAnyBaseTest {\n    \n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"101\", DecimalToAnyBase.convertToAnyBase(5, 2));\n        assertEquals(\"5\", DecimalToAnyBase.convertToAnyBase(5, 10));\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(18, 16));\n        assertEquals(\"111\", DecimalToAnyBase.convertToAnyBase(7, 2));\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16));\n        assertEquals(\"21\", DecimalToAnyBase.convertToAnyBase(7, 3));\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 2)); // Edge case if the input is 0\n        // Additional test cases can be added as required.\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    \n    @Test\n    public void convertToAnyBaseTest() {\n        // Test conversion to binary (base 2)\n        assertEquals(\"101\", DecimalToAnyBase.convertToAnyBase(5, 2), \"Decimal 5 to binary should be 101\");\n\n        // Test conversion to octal (base 8)\n        assertEquals(\"11\", DecimalToAnyBase.convertToAnyBase(9, 8), \"Decimal 9 to octal should be 11\");\n\n        // Test conversion to hexadecimal (base 16)\n        assertEquals(\"1E\", DecimalToAnyBase.convertToAnyBase(30, 16), \"Decimal 30 to hexadecimal should be 1E\");\n\n        // Test conversion to base 4\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(4, 4), \"Decimal 4 to base 4 should be 10\");\n\n        // Test with zero input for base 10\n        assertEquals(\"\", DecimalToAnyBase.convertToAnyBase(0, 10), \"Decimal 0 in any base should return empty string\");\n\n        // Test with base greater than 10\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 11), \"Decimal 10 to base 11 should be A\");\n\n        // Test with base 1 should be invalid, expecting an exception or error (Note: the requirement isn't part of method so this will actually fail; it depends on how you want to handle bases <= 1)\n        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, 1), \"Base 1 is invalid and should throw exception\");\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    private final DecimalToAnyBase decimalToAnyBase = new DecimalToAnyBase();\n\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"101\", DecimalToAnyBase.convertToAnyBase(5, 2), \"Decimal 5 to binary should be 101\");\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16), \"Decimal 10 to hexadecimal should be A\");\n        assertEquals(\"21\", DecimalToAnyBase.convertToAnyBase(7, 3), \"Decimal 7 to base 3 should be 21\");\n        assertEquals(\"11\", DecimalToAnyBase.convertToAnyBase(3, 2), \"Decimal 3 to binary should be 11\");\n        assertEquals(\"F\", DecimalToAnyBase.convertToAnyBase(15, 16), \"Decimal 15 to hexadecimal should be F\");\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(2, 2), \"Decimal 2 to binary should be 10\");\n        assertEquals(\"202\", DecimalToAnyBase.convertToAnyBase(50, 8), \"Decimal 50 to octal should be 202\");\n    }\n\n    // Additional tests can be added if necessary\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        // Test conversion to binary\n        assertEquals(\"101\", DecimalToAnyBase.convertToAnyBase(5, 2), \"5 in binary should be 101\");\n\n        // Test conversion to octal\n        assertEquals(\"7\", DecimalToAnyBase.convertToAnyBase(7, 8), \"7 in octal should be 7\");\n\n        // Test conversion to decimal (base 10)\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(10, 10), \"10 in decimal should be 10\");\n        \n        // Test conversion to hexadecimal\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16), \"10 in hexadecimal should be A\");\n\n        // Test conversion to a base that is not standard (e.g., base 7)\n        assertEquals(\"21\", DecimalToAnyBase.convertToAnyBase(15, 7), \"15 in base 7 should be 21\");\n\n        // Test conversion of zero in any base should be \"0\" (assuming method to be fixed for this case)\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 2), \"0 in binary should be 0\");\n\n        // Test conversion for input that includes numbers and letters (e.g., for hexadecimal)\n        assertEquals(\"1F\", DecimalToAnyBase.convertToAnyBase(31, 16), \"31 in hexadecimal should be 1F\");\n\n        // Test for the upper boundary of a single-digit base-36 conversion\n        assertEquals(\"Z\", DecimalToAnyBase.convertToAnyBase(35, 36), \"35 in base 36 should be Z\");\n\n        // Additional tests can be added for different edge cases and input ranges\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"1010\", DecimalToAnyBase.convertToAnyBase(10, 2));\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16));\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8));\n        assertEquals(\"F\", DecimalToAnyBase.convertToAnyBase(15, 16));\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(10, 10));\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(16, 16));\n        assertEquals(\"11\", DecimalToAnyBase.convertToAnyBase(17, 16));\n    }    \n}"
    ]
}