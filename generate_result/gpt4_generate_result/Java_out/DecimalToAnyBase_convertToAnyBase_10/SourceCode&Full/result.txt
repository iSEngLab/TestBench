Source code: 


public static String convertToAnyBase(int inp, int base) {
    ArrayList<Character> charArr = new ArrayList<>();

    while (inp > 0) {
        charArr.add(reVal(inp % base));
        inp /= base;
    }

    StringBuilder str = new StringBuilder(charArr.size());

    for (Character ch : charArr) {
        str.append(ch);
    }

    return str.reverse().toString();
}



No.1 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        // Test case for base 2 conversion
        assertEquals("101", DecimalToAnyBase.convertToAnyBase(5, 2), "5 in binary should be 101");

        // Test case for base 8 conversion
        assertEquals("11", DecimalToAnyBase.convertToAnyBase(9, 8), "9 in octal should be 11");

        // Test case for base 16 conversion
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16), "10 in hexadecimal should be A");

        // Test case for larger number in base 16
        assertEquals("1E", DecimalToAnyBase.convertToAnyBase(30, 16), "30 in hexadecimal should be 1E");

        // Test with maximum base 36 where digits and alphabets are used
        assertEquals("10", DecimalToAnyBase.convertToAnyBase(36, 36), "36 in base-36 should be 10");

        // Test with 0 input
        assertEquals("", DecimalToAnyBase.convertToAnyBase(0, 2), "0 in any base should return empty string");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {
    @Test
    public void convertToAnyBaseTest() {
        assertEquals("101", DecimalToAnyBase.convertToAnyBase(5, 2), "5 in base 2 should be 101");
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16), "10 in base 16 should be A");
        assertEquals("100", DecimalToAnyBase.convertToAnyBase(100, 10), "100 in base 10 should be 100");
        assertEquals("21", DecimalToAnyBase.convertToAnyBase(33, 16), "33 in base 16 should be 21");
        assertEquals("1111", DecimalToAnyBase.convertToAnyBase(15, 2), "15 in base 2 should be 1111");
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 10), "0 in base 10 should be 0");
        assertEquals("404", DecimalToAnyBase.convertToAnyBase(260, 8), "260 in base 8 should be 404");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        assertEquals("101", DecimalToAnyBase.convertToAnyBase(5, 2));
        assertEquals("5", DecimalToAnyBase.convertToAnyBase(5, 10));
        assertEquals("12", DecimalToAnyBase.convertToAnyBase(10, 8));
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16));
        assertEquals("FF", DecimalToAnyBase.convertToAnyBase(255, 16));
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 2));
        assertEquals("1111", DecimalToAnyBase.convertToAnyBase(15, 2));
        assertEquals("Z", DecimalToAnyBase.convertToAnyBase(35, 36));
    }
}


No.4 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        assertEquals("101", DecimalToAnyBase.convertToAnyBase(5, 2), "5 in binary should be 101");
        assertEquals("5", DecimalToAnyBase.convertToAnyBase(5, 10), "5 in decimal should be 5");
        assertEquals("F", DecimalToAnyBase.convertToAnyBase(15, 16), "15 in hexadecimal should be F");
        assertEquals("11", DecimalToAnyBase.convertToAnyBase(3, 2), "3 in binary should be 11");
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16), "10 in hexadecimal should be A");
        // Testing for the case when the input number is 0
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 2), "0 in binary should be 0");
        // Testing with a large number and different base
        assertEquals("2S", DecimalToAnyBase.convertToAnyBase(100, 36), "100 in base 36 should be 2S");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        assertEquals("1010", DecimalToAnyBase.convertToAnyBase(10, 2), "10 in base 2 should be 1010");
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16), "10 in base 16 should be A");
        assertEquals("12", DecimalToAnyBase.convertToAnyBase(10, 8), "10 in base 8 should be 12");
        assertEquals("10", DecimalToAnyBase.convertToAnyBase(10, 10), "10 in base 10 should be 10");
        assertEquals("21", DecimalToAnyBase.convertToAnyBase(7, 3), "7 in base 3 should be 21");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class DecimalToAnyBaseTest {
    
    @Test
    public void convertToAnyBaseTest() {
        assertEquals("101", DecimalToAnyBase.convertToAnyBase(5, 2));
        assertEquals("5", DecimalToAnyBase.convertToAnyBase(5, 10));
        assertEquals("12", DecimalToAnyBase.convertToAnyBase(18, 16));
        assertEquals("111", DecimalToAnyBase.convertToAnyBase(7, 2));
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16));
        assertEquals("21", DecimalToAnyBase.convertToAnyBase(7, 3));
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 2)); // Edge case if the input is 0
        // Additional test cases can be added as required.
    }
}


No.7 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {
    
    @Test
    public void convertToAnyBaseTest() {
        // Test conversion to binary (base 2)
        assertEquals("101", DecimalToAnyBase.convertToAnyBase(5, 2), "Decimal 5 to binary should be 101");

        // Test conversion to octal (base 8)
        assertEquals("11", DecimalToAnyBase.convertToAnyBase(9, 8), "Decimal 9 to octal should be 11");

        // Test conversion to hexadecimal (base 16)
        assertEquals("1E", DecimalToAnyBase.convertToAnyBase(30, 16), "Decimal 30 to hexadecimal should be 1E");

        // Test conversion to base 4
        assertEquals("10", DecimalToAnyBase.convertToAnyBase(4, 4), "Decimal 4 to base 4 should be 10");

        // Test with zero input for base 10
        assertEquals("", DecimalToAnyBase.convertToAnyBase(0, 10), "Decimal 0 in any base should return empty string");

        // Test with base greater than 10
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 11), "Decimal 10 to base 11 should be A");

        // Test with base 1 should be invalid, expecting an exception or error (Note: the requirement isn't part of method so this will actually fail; it depends on how you want to handle bases <= 1)
        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, 1), "Base 1 is invalid and should throw exception");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    private final DecimalToAnyBase decimalToAnyBase = new DecimalToAnyBase();

    @Test
    public void convertToAnyBaseTest() {
        assertEquals("101", DecimalToAnyBase.convertToAnyBase(5, 2), "Decimal 5 to binary should be 101");
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16), "Decimal 10 to hexadecimal should be A");
        assertEquals("21", DecimalToAnyBase.convertToAnyBase(7, 3), "Decimal 7 to base 3 should be 21");
        assertEquals("11", DecimalToAnyBase.convertToAnyBase(3, 2), "Decimal 3 to binary should be 11");
        assertEquals("F", DecimalToAnyBase.convertToAnyBase(15, 16), "Decimal 15 to hexadecimal should be F");
        assertEquals("10", DecimalToAnyBase.convertToAnyBase(2, 2), "Decimal 2 to binary should be 10");
        assertEquals("202", DecimalToAnyBase.convertToAnyBase(50, 8), "Decimal 50 to octal should be 202");
    }

    // Additional tests can be added if necessary
}


No.9 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        // Test conversion to binary
        assertEquals("101", DecimalToAnyBase.convertToAnyBase(5, 2), "5 in binary should be 101");

        // Test conversion to octal
        assertEquals("7", DecimalToAnyBase.convertToAnyBase(7, 8), "7 in octal should be 7");

        // Test conversion to decimal (base 10)
        assertEquals("10", DecimalToAnyBase.convertToAnyBase(10, 10), "10 in decimal should be 10");
        
        // Test conversion to hexadecimal
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16), "10 in hexadecimal should be A");

        // Test conversion to a base that is not standard (e.g., base 7)
        assertEquals("21", DecimalToAnyBase.convertToAnyBase(15, 7), "15 in base 7 should be 21");

        // Test conversion of zero in any base should be "0" (assuming method to be fixed for this case)
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 2), "0 in binary should be 0");

        // Test conversion for input that includes numbers and letters (e.g., for hexadecimal)
        assertEquals("1F", DecimalToAnyBase.convertToAnyBase(31, 16), "31 in hexadecimal should be 1F");

        // Test for the upper boundary of a single-digit base-36 conversion
        assertEquals("Z", DecimalToAnyBase.convertToAnyBase(35, 36), "35 in base 36 should be Z");

        // Additional tests can be added for different edge cases and input ranges
    }
}


No.10 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        assertEquals("1010", DecimalToAnyBase.convertToAnyBase(10, 2));
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16));
        assertEquals("12", DecimalToAnyBase.convertToAnyBase(10, 8));
        assertEquals("F", DecimalToAnyBase.convertToAnyBase(15, 16));
        assertEquals("10", DecimalToAnyBase.convertToAnyBase(10, 10));
        assertEquals("10", DecimalToAnyBase.convertToAnyBase(16, 16));
        assertEquals("11", DecimalToAnyBase.convertToAnyBase(17, 16));
    }    
}


