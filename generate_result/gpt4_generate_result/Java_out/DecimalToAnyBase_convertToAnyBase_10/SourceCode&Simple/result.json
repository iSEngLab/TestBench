{
    "project_name": "Java",
    "file_name": "DecimalToAnyBase.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/conversions/DecimalToAnyBase.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.conversions",
    "docstring": "/**\n     * This method produces a String value of any given input decimal in any\n     * base\n     *\n     * @param inp Decimal of which we need the value in base in String format\n     * @return string format of the converted value in the given base\n     */",
    "source_code": "\npublic static String convertToAnyBase(int inp, int base) {\n    ArrayList<Character> charArr = new ArrayList<>();\n\n    while (inp > 0) {\n        charArr.add(reVal(inp % base));\n        inp /= base;\n    }\n\n    StringBuilder str = new StringBuilder(charArr.size());\n\n    for (Character ch : charArr) {\n        str.append(ch);\n    }\n\n    return str.reverse().toString();\n}\n",
    "class_name": "DecimalToAnyBase",
    "method_name": "convertToAnyBase",
    "arguments": [
        "int inp",
        "int base"
    ],
    "generate_test": [
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"101\", DecimalToAnyBase.convertToAnyBase(5, 2));\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8));\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16));\n        assertEquals(\"21\", DecimalToAnyBase.convertToAnyBase(33, 16));\n        assertEquals(\"111\", DecimalToAnyBase.convertToAnyBase(7, 2));\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(2, 2));\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 2));\n    }\n}\n",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    \n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"1010\", DecimalToAnyBase.convertToAnyBase(10, 2), \"Decimal 10 to base 2 should be 1010.\");\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16), \"Decimal 10 to base 16 should be A.\");\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8), \"Decimal 10 to base 8 should be 12.\");\n        assertEquals(\"22\", DecimalToAnyBase.convertToAnyBase(22, 10), \"Decimal 22 to base 10 should be 22.\");\n        assertEquals(\"K\", DecimalToAnyBase.convertToAnyBase(20, 21), \"Decimal 20 to base 21 should be K.\");\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 2), \"Decimal 0 to base 2 should be 0.\");\n        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, 1), \"Base 1 should throw an IllegalArgumentException.\");\n        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, -2), \"Negative bases should throw an IllegalArgumentException.\");\n    }\n\n    // Assuming 'reVal' function is working, and testing it too would be beyond the scope of this unit test.\n    // If 'reVal' method is supposed to be public and tested, additional tests should be created to cover it.\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"1010\", DecimalToAnyBase.convertToAnyBase(10, 2));\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8));\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16));\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(10, 10));\n        assertEquals(\"2\", DecimalToAnyBase.convertToAnyBase(2, 10));\n        \n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            DecimalToAnyBase.convertToAnyBase(10, 1);\n        });\n        assertTrue(exception.getMessage().contains(\"Invalid base\"));\n\n        // Additional test cases for edge conditions or specific scenarios can be added below\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        // Test conversion to binary\n        assertEquals(\"1010\", DecimalToAnyBase.convertToAnyBase(10, 2), \"Binary conversion of 10 should be 1010\");\n\n        // Test conversion to octal\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8), \"Octal conversion of 10 should be 12\");\n\n        // Test conversion to hexadecimal\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16), \"Hexadecimal conversion of 10 should be A\");\n\n        // Test conversion with 0 input\n        assertEquals(\"\", DecimalToAnyBase.convertToAnyBase(0, 2), \"Conversion of 0 should return an empty string\");\n\n        // Test conversion with a base not in the range 2-36 (since only these bases can be represented in alphanumeric characters)\n        // This will throw an exception or produce an incorrect result based on how `reVal` is implemented.\n        // If an exception is expected, an additional test can be written to handle that case.\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class DecimalToAnyBaseTest {\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"101\", DecimalToAnyBase.convertToAnyBase(5, 2));\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8));\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16));\n        assertEquals(\"21\", DecimalToAnyBase.convertToAnyBase(33, 16));\n        assertEquals(\"ZA\", DecimalToAnyBase.convertToAnyBase(1000, 36));\n        // Add more assertions here for different input values and bases\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"1010\", DecimalToAnyBase.convertToAnyBase(10, 2));\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8));\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16));\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(10, 10));\n        assertEquals(\"22\", DecimalToAnyBase.convertToAnyBase(34, 16));\n        assertEquals(\"20\", DecimalToAnyBase.convertToAnyBase(32, 16));\n        assertEquals(\"Z\", DecimalToAnyBase.convertToAnyBase(35, 36));\n\n        // Test with input 0, expect \"0\" in any base\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 2));\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 8));\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 10));\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 16));\n\n        // Negative test case to check unexpected base (exception or error handling not shown in source code)\n        // Assuming method should throw an IllegalArgumentException for base <= 1 or base > 36\n        // uncomment the following lines if exception handling is implemented later\n        /*\n        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, 1));\n        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, 0));\n        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, 37));\n        */\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"101\", DecimalToAnyBase.convertToAnyBase(5, 2), \"5 in binary should be 101\");\n        assertEquals(\"5\", DecimalToAnyBase.convertToAnyBase(5, 10), \"5 in decimal should be 5\");\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8), \"10 in octal should be 12\");\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16), \"10 in hexadecimal should be A\");\n        assertEquals(\"F\", DecimalToAnyBase.convertToAnyBase(15, 16), \"15 in hexadecimal should be F\");\n        assertEquals(\"11\", DecimalToAnyBase.convertToAnyBase(3, 2), \"3 in binary should be 11\");\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 8), \"0 in octal should be 0\");\n        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(5, 1), \"Base 1 should throw an exception\");\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"1010\", DecimalToAnyBase.convertToAnyBase(10, 2), \"10 in binary should be 1010\");\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16), \"10 in hexadecimal should be A\");\n        assertEquals(\"22\", DecimalToAnyBase.convertToAnyBase(10, 8), \"10 in octal should be 12\");\n        assertEquals(\"5\", DecimalToAnyBase.convertToAnyBase(5, 10), \"5 in decimal should remain 5\");\n        assertEquals(\"1111111111111111\", DecimalToAnyBase.convertToAnyBase(65535, 2), \"65535 in binary should be a sequence of 16 1's\");\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 2), \"0 in any base should be 0\");\n        assertEquals(\"FF\", DecimalToAnyBase.convertToAnyBase(255, 16), \"255 in hexadecimal should be FF\");\n        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, 1),\n                \"Base 1 is not valid and should throw IllegalArgumentException\");\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    @Test\n    public void convertToAnyBaseTest() {\n        // First, check if the number zero returns \"0\" regardless of the base\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 2));\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 8));\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 10));\n        \n        // Test for conversion to binary base (base 2)\n        assertEquals(\"1010\", DecimalToAnyBase.convertToAnyBase(10, 2));\n        assertEquals(\"1101\", DecimalToAnyBase.convertToAnyBase(13, 2));\n\n        // Test for conversion to octal base (base 8)\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8));\n        assertEquals(\"15\", DecimalToAnyBase.convertToAnyBase(13, 8));\n\n        // Test for conversion to hexadecimal base (base 16)\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16));\n        assertEquals(\"D\", DecimalToAnyBase.convertToAnyBase(13, 16));\n\n        // Test for conversion to a non-standard base (base 7)\n        assertEquals(\"13\", DecimalToAnyBase.convertToAnyBase(10, 7));\n        assertEquals(\"16\", DecimalToAnyBase.convertToAnyBase(13, 7));\n\n        // Test for input where result should be more than one digit in the respective base\n        assertEquals(\"1111\", DecimalToAnyBase.convertToAnyBase(15, 2));\n        assertEquals(\"17\", DecimalToAnyBase.convertToAnyBase(15, 8));\n        assertEquals(\"F\", DecimalToAnyBase.convertToAnyBase(15, 16));\n        assertEquals(\"21\", DecimalToAnyBase.convertToAnyBase(15, 7));\n        \n        // Test for a larger number to ensure the algorithm works well with longer outputs\n        assertEquals(\"1111101000\", DecimalToAnyBase.convertToAnyBase(1000, 2));\n        assertEquals(\"1750\", DecimalToAnyBase.convertToAnyBase(1000, 8));\n        assertEquals(\"3E8\", DecimalToAnyBase.convertToAnyBase(1000, 16));\n        assertEquals(\"2626\", DecimalToAnyBase.convertToAnyBase(1000, 7));\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    \n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"101\", DecimalToAnyBase.convertToAnyBase(5, 2), \"5 in base 2 should be 101\");\n        assertEquals(\"5\", DecimalToAnyBase.convertToAnyBase(5, 10), \"5 in base 10 should be 5\");\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8), \"10 in base 8 should be 12\");\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16), \"10 in base 16 should be A\");\n        assertEquals(\"F\", DecimalToAnyBase.convertToAnyBase(15, 16), \"15 in base 16 should be F\");\n        assertEquals(\"11\", DecimalToAnyBase.convertToAnyBase(3, 2), \"3 in base 2 should be 11\");\n        // Assuming that the base can only be between 2 and 36, we can also add:\n        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, 1), \"Base 1 is invalid and should throw an exception.\");\n        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, 37), \"Base 37 is invalid and should throw an exception.\");\n    }\n}"
    ]
}