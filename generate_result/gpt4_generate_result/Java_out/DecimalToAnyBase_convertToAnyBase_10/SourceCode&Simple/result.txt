Source code: 


public static String convertToAnyBase(int inp, int base) {
    ArrayList<Character> charArr = new ArrayList<>();

    while (inp > 0) {
        charArr.add(reVal(inp % base));
        inp /= base;
    }

    StringBuilder str = new StringBuilder(charArr.size());

    for (Character ch : charArr) {
        str.append(ch);
    }

    return str.reverse().toString();
}



No.1 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        assertEquals("101", DecimalToAnyBase.convertToAnyBase(5, 2));
        assertEquals("12", DecimalToAnyBase.convertToAnyBase(10, 8));
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16));
        assertEquals("21", DecimalToAnyBase.convertToAnyBase(33, 16));
        assertEquals("111", DecimalToAnyBase.convertToAnyBase(7, 2));
        assertEquals("10", DecimalToAnyBase.convertToAnyBase(2, 2));
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 2));
    }
}



No.2 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {
    
    @Test
    public void convertToAnyBaseTest() {
        assertEquals("1010", DecimalToAnyBase.convertToAnyBase(10, 2), "Decimal 10 to base 2 should be 1010.");
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16), "Decimal 10 to base 16 should be A.");
        assertEquals("12", DecimalToAnyBase.convertToAnyBase(10, 8), "Decimal 10 to base 8 should be 12.");
        assertEquals("22", DecimalToAnyBase.convertToAnyBase(22, 10), "Decimal 22 to base 10 should be 22.");
        assertEquals("K", DecimalToAnyBase.convertToAnyBase(20, 21), "Decimal 20 to base 21 should be K.");
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 2), "Decimal 0 to base 2 should be 0.");
        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, 1), "Base 1 should throw an IllegalArgumentException.");
        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, -2), "Negative bases should throw an IllegalArgumentException.");
    }

    // Assuming 'reVal' function is working, and testing it too would be beyond the scope of this unit test.
    // If 'reVal' method is supposed to be public and tested, additional tests should be created to cover it.
}


No.3 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        assertEquals("1010", DecimalToAnyBase.convertToAnyBase(10, 2));
        assertEquals("12", DecimalToAnyBase.convertToAnyBase(10, 8));
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16));
        assertEquals("10", DecimalToAnyBase.convertToAnyBase(10, 10));
        assertEquals("2", DecimalToAnyBase.convertToAnyBase(2, 10));
        
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            DecimalToAnyBase.convertToAnyBase(10, 1);
        });
        assertTrue(exception.getMessage().contains("Invalid base"));

        // Additional test cases for edge conditions or specific scenarios can be added below
    }
}


No.4 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        // Test conversion to binary
        assertEquals("1010", DecimalToAnyBase.convertToAnyBase(10, 2), "Binary conversion of 10 should be 1010");

        // Test conversion to octal
        assertEquals("12", DecimalToAnyBase.convertToAnyBase(10, 8), "Octal conversion of 10 should be 12");

        // Test conversion to hexadecimal
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16), "Hexadecimal conversion of 10 should be A");

        // Test conversion with 0 input
        assertEquals("", DecimalToAnyBase.convertToAnyBase(0, 2), "Conversion of 0 should return an empty string");

        // Test conversion with a base not in the range 2-36 (since only these bases can be represented in alphanumeric characters)
        // This will throw an exception or produce an incorrect result based on how `reVal` is implemented.
        // If an exception is expected, an additional test can be written to handle that case.
    }
}


No.5 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class DecimalToAnyBaseTest {
    @Test
    public void convertToAnyBaseTest() {
        assertEquals("101", DecimalToAnyBase.convertToAnyBase(5, 2));
        assertEquals("12", DecimalToAnyBase.convertToAnyBase(10, 8));
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16));
        assertEquals("21", DecimalToAnyBase.convertToAnyBase(33, 16));
        assertEquals("ZA", DecimalToAnyBase.convertToAnyBase(1000, 36));
        // Add more assertions here for different input values and bases
    }
}


No.6 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        assertEquals("1010", DecimalToAnyBase.convertToAnyBase(10, 2));
        assertEquals("12", DecimalToAnyBase.convertToAnyBase(10, 8));
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16));
        assertEquals("10", DecimalToAnyBase.convertToAnyBase(10, 10));
        assertEquals("22", DecimalToAnyBase.convertToAnyBase(34, 16));
        assertEquals("20", DecimalToAnyBase.convertToAnyBase(32, 16));
        assertEquals("Z", DecimalToAnyBase.convertToAnyBase(35, 36));

        // Test with input 0, expect "0" in any base
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 2));
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 8));
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 10));
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 16));

        // Negative test case to check unexpected base (exception or error handling not shown in source code)
        // Assuming method should throw an IllegalArgumentException for base <= 1 or base > 36
        // uncomment the following lines if exception handling is implemented later
        /*
        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, 1));
        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, 0));
        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, 37));
        */
    }
}


No.7 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {
    @Test
    public void convertToAnyBaseTest() {
        assertEquals("101", DecimalToAnyBase.convertToAnyBase(5, 2), "5 in binary should be 101");
        assertEquals("5", DecimalToAnyBase.convertToAnyBase(5, 10), "5 in decimal should be 5");
        assertEquals("12", DecimalToAnyBase.convertToAnyBase(10, 8), "10 in octal should be 12");
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16), "10 in hexadecimal should be A");
        assertEquals("F", DecimalToAnyBase.convertToAnyBase(15, 16), "15 in hexadecimal should be F");
        assertEquals("11", DecimalToAnyBase.convertToAnyBase(3, 2), "3 in binary should be 11");
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 8), "0 in octal should be 0");
        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(5, 1), "Base 1 should throw an exception");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        assertEquals("1010", DecimalToAnyBase.convertToAnyBase(10, 2), "10 in binary should be 1010");
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16), "10 in hexadecimal should be A");
        assertEquals("22", DecimalToAnyBase.convertToAnyBase(10, 8), "10 in octal should be 12");
        assertEquals("5", DecimalToAnyBase.convertToAnyBase(5, 10), "5 in decimal should remain 5");
        assertEquals("1111111111111111", DecimalToAnyBase.convertToAnyBase(65535, 2), "65535 in binary should be a sequence of 16 1's");
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 2), "0 in any base should be 0");
        assertEquals("FF", DecimalToAnyBase.convertToAnyBase(255, 16), "255 in hexadecimal should be FF");
        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, 1),
                "Base 1 is not valid and should throw IllegalArgumentException");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {
    @Test
    public void convertToAnyBaseTest() {
        // First, check if the number zero returns "0" regardless of the base
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 2));
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 8));
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 10));
        
        // Test for conversion to binary base (base 2)
        assertEquals("1010", DecimalToAnyBase.convertToAnyBase(10, 2));
        assertEquals("1101", DecimalToAnyBase.convertToAnyBase(13, 2));

        // Test for conversion to octal base (base 8)
        assertEquals("12", DecimalToAnyBase.convertToAnyBase(10, 8));
        assertEquals("15", DecimalToAnyBase.convertToAnyBase(13, 8));

        // Test for conversion to hexadecimal base (base 16)
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16));
        assertEquals("D", DecimalToAnyBase.convertToAnyBase(13, 16));

        // Test for conversion to a non-standard base (base 7)
        assertEquals("13", DecimalToAnyBase.convertToAnyBase(10, 7));
        assertEquals("16", DecimalToAnyBase.convertToAnyBase(13, 7));

        // Test for input where result should be more than one digit in the respective base
        assertEquals("1111", DecimalToAnyBase.convertToAnyBase(15, 2));
        assertEquals("17", DecimalToAnyBase.convertToAnyBase(15, 8));
        assertEquals("F", DecimalToAnyBase.convertToAnyBase(15, 16));
        assertEquals("21", DecimalToAnyBase.convertToAnyBase(15, 7));
        
        // Test for a larger number to ensure the algorithm works well with longer outputs
        assertEquals("1111101000", DecimalToAnyBase.convertToAnyBase(1000, 2));
        assertEquals("1750", DecimalToAnyBase.convertToAnyBase(1000, 8));
        assertEquals("3E8", DecimalToAnyBase.convertToAnyBase(1000, 16));
        assertEquals("2626", DecimalToAnyBase.convertToAnyBase(1000, 7));
    }
}


No.10 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {
    
    @Test
    public void convertToAnyBaseTest() {
        assertEquals("101", DecimalToAnyBase.convertToAnyBase(5, 2), "5 in base 2 should be 101");
        assertEquals("5", DecimalToAnyBase.convertToAnyBase(5, 10), "5 in base 10 should be 5");
        assertEquals("12", DecimalToAnyBase.convertToAnyBase(10, 8), "10 in base 8 should be 12");
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16), "10 in base 16 should be A");
        assertEquals("F", DecimalToAnyBase.convertToAnyBase(15, 16), "15 in base 16 should be F");
        assertEquals("11", DecimalToAnyBase.convertToAnyBase(3, 2), "3 in base 2 should be 11");
        // Assuming that the base can only be between 2 and 36, we can also add:
        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, 1), "Base 1 is invalid and should throw an exception.");
        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, 37), "Base 37 is invalid and should throw an exception.");
    }
}


