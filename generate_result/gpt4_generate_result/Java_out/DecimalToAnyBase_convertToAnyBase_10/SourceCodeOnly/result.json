{
    "project_name": "Java",
    "file_name": "DecimalToAnyBase.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/conversions/DecimalToAnyBase.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.conversions",
    "docstring": "/**\n     * This method produces a String value of any given input decimal in any\n     * base\n     *\n     * @param inp Decimal of which we need the value in base in String format\n     * @return string format of the converted value in the given base\n     */",
    "source_code": "\npublic static String convertToAnyBase(int inp, int base) {\n    ArrayList<Character> charArr = new ArrayList<>();\n\n    while (inp > 0) {\n        charArr.add(reVal(inp % base));\n        inp /= base;\n    }\n\n    StringBuilder str = new StringBuilder(charArr.size());\n\n    for (Character ch : charArr) {\n        str.append(ch);\n    }\n\n    return str.reverse().toString();\n}\n",
    "class_name": "DecimalToAnyBase",
    "method_name": "convertToAnyBase",
    "arguments": [
        "int inp",
        "int base"
    ],
    "generate_test": [
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"101\", Main.convertToAnyBase(5, 2));\n        assertEquals(\"12\", Main.convertToAnyBase(10, 8));\n        assertEquals(\"A\", Main.convertToAnyBase(10, 16));\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"1010\", YourClassName.convertToAnyBase(10, 2));\n        assertEquals(\"A\", YourClassName.convertToAnyBase(10, 16));\n        assertEquals(\"12\", YourClassName.convertToAnyBase(10, 8));\n        assertEquals(\"2\", YourClassName.convertToAnyBase(2, 10));\n        assertEquals(\"F\", YourClassName.convertToAnyBase(15, 16));\n        assertEquals(\"0\", YourClassName.convertToAnyBase(0, 2)); // Assuming the method handles zero correctly\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        // Test for converting decimal to binary\n        assertEquals(\"1101\", DecimalToAnyBase.convertToAnyBase(13, 2));\n        \n        // Test for converting decimal to octal\n        assertEquals(\"15\", DecimalToAnyBase.convertToAnyBase(13, 8));\n        \n        // Test for converting decimal to hexadecimal\n        assertEquals(\"D\", DecimalToAnyBase.convertToAnyBase(13, 16));\n        \n        // Test for converting zero value\n        assertEquals(\"\", DecimalToAnyBase.convertToAnyBase(0, 2)); // As the current implementation returns an empty string when input is 0.\n        \n        // Test for converting decimal to a custom base (e.g., base 3)\n        assertEquals(\"111\", DecimalToAnyBase.convertToAnyBase(13, 3));\n        \n        // Add more tests if required ...\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"101\", DecimalToAnyBase.convertToAnyBase(5, 2));\n        assertEquals(\"11\", DecimalToAnyBase.convertToAnyBase(3, 2));\n\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8));\n        assertEquals(\"21\", DecimalToAnyBase.convertToAnyBase(17, 8));\n\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16));\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(16, 16));\n\n        assertEquals(\"1\", DecimalToAnyBase.convertToAnyBase(1, 10));\n        assertEquals(\"100\", DecimalToAnyBase.convertToAnyBase(100, 10));\n        \n        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, -1));\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"101\", DecimalToAnyBaseConverter.convertToAnyBase(5, 2));\n        assertEquals(\"12\", DecimalToAnyBaseConverter.convertToAnyBase(10, 8));\n        assertEquals(\"A\", DecimalToAnyBaseConverter.convertToAnyBase(10, 16));\n        assertEquals(\"21\", DecimalToAnyBaseConverter.convertToAnyBase(7, 3));\n        assertEquals(\"1\", DecimalToAnyBaseConverter.convertToAnyBase(1, 10));\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    \n    @Test\n    public void convertToAnyBaseTest() {\n        // Test for converting to binary\n        assertEquals(\"1010\", DecimalToAnyBaseConvertor.convertToAnyBase(10, 2), \"10 base-10 should be 1010 in binary\");\n\n        // Test for converting to octal\n        assertEquals(\"12\", DecimalToAnyBaseConvertor.convertToAnyBase(10, 8), \"10 base-10 should be 12 in octal\");\n\n        // Test for converting to hexadecimal\n        assertEquals(\"A\", DecimalToAnyBaseConvertor.convertToAnyBase(10, 16), \"10 base-10 should be A in hexadecimal\");\n\n        // Test for converting zero to any base\n        assertEquals(\"\", DecimalToAnyBaseConvertor.convertToAnyBase(0, 2), \"0 base-10 should return an empty string\");\n\n        // Test for negative input\n        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBaseConvertor.convertToAnyBase(-1, 2), \"Negative input should throw an exception\");\n\n        // Test for invalid base (less than 2)\n        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBaseConvertor.convertToAnyBase(10, 1), \"Base less than 2 should throw an exception\");\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        // Test conversion to base 2 (binary)\n        assertEquals(\"1010\", DecimalToAnyBase.convertToAnyBase(10, 2), \"10 in base 2 should be 1010\");\n        \n        // Test conversion to base 8 (octal)\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8), \"10 in base 8 should be 12\");\n        \n        // Test conversion to base 16 (hexadecimal)\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16), \"10 in base 16 should be A\");\n        \n        // Test conversion to base 7\n        assertEquals(\"13\", DecimalToAnyBase.convertToAnyBase(10, 7), \"10 in base 7 should be 13\");\n        \n        // Test conversion to base 28\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(28, 28), \"28 in base 28 should be A\");\n        \n        // Test conversion when input is 0\n        assertEquals(\"\", DecimalToAnyBase.convertToAnyBase(0, 2), \"0 in any base should be an empty string\");\n        \n        // Test for non-standard base, such as base 1 (unary)\n        assertEquals(\"11111\", DecimalToAnyBase.convertToAnyBase(5, 1), \"5 in base 1 should be 11111\");\n    }\n}\n",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    // Utility method to convert an integer value to a character\n    private static char reVal(int num) {\n        if (num >= 0 && num <= 9) {\n            return (char) (num + '0');\n        } else {\n            return (char) (num - 10 + 'A');\n        }\n    }\n    \n    // Test method that actually tests `convertToAnyBase`\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"101\", DecimalToAnyBase.convertToAnyBase(5, 2), \"5 in binary should be 101\");\n        assertEquals(\"5\", DecimalToAnyBase.convertToAnyBase(5, 10), \"5 in decimal should be 5\");\n        assertEquals(\"F\", DecimalToAnyBase.convertToAnyBase(15, 16), \"15 in hexadecimal should be F\");\n        assertEquals(\"11\", DecimalToAnyBase.convertToAnyBase(3, 2), \"3 in binary should be 11\");\n        assertEquals(\"21\", DecimalToAnyBase.convertToAnyBase(3, 4), \"3 in quaternary should be 21\");\n        assertEquals(\"1A7\", DecimalToAnyBase.convertToAnyBase(423, 16), \"423 in hexadecimal should be 1A7\");\n    }\n\n    public static String convertToAnyBase(int inp, int base) {\n        ArrayList<Character> charArr = new ArrayList<>();\n    \n        while (inp > 0) {\n            charArr.add(reVal(inp % base));\n            inp /= base;\n        }\n    \n        StringBuilder str = new StringBuilder(charArr.size());\n    \n        for (Character ch : charArr) {\n            str.append(ch);\n        }\n    \n        return str.reverse().toString();\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"1010\", DecimalToAnyBase.convertToAnyBase(10, 2), \"10 in base 2 should be 1010\");\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8), \"10 in base 8 should be 12\");\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16), \"10 in base 16 should be A\");\n        assertEquals(\"1\", DecimalToAnyBase.convertToAnyBase(1, 2), \"1 in base 2 should be 1\");\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(2, 2), \"2 in base 2 should be 10\");\n        assertEquals(\"FF\", DecimalToAnyBase.convertToAnyBase(255, 16), \"255 in base 16 should be FF\");\n        assertEquals(\"0\", DecimalToAnyBase.convertToAnyBase(0, 10), \"0 in base 10 should remain 0\");\n        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, 1), \"Base 1 should not be allowed and throw an exception\");\n    }\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n\n    @Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"1010\", DecimalToAnyBase.convertToAnyBase(10, 2));\n        assertEquals(\"a\", DecimalToAnyBase.convertToAnyBase(10, 16));\n        assertEquals(\"12\", DecimalToAnyBase.convertToAnyBase(10, 8));\n        assertEquals(\"22\", DecimalToAnyBase.convertToAnyBase(10, 4));\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(10, 10));\n    }\n}"
    ]
}