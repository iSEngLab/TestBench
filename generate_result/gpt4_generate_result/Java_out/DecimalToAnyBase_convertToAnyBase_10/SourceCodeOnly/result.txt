Source code: 


public static String convertToAnyBase(int inp, int base) {
    ArrayList<Character> charArr = new ArrayList<>();

    while (inp > 0) {
        charArr.add(reVal(inp % base));
        inp /= base;
    }

    StringBuilder str = new StringBuilder(charArr.size());

    for (Character ch : charArr) {
        str.append(ch);
    }

    return str.reverse().toString();
}



No.1 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        assertEquals("101", Main.convertToAnyBase(5, 2));
        assertEquals("12", Main.convertToAnyBase(10, 8));
        assertEquals("A", Main.convertToAnyBase(10, 16));
    }
}


No.2 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        assertEquals("1010", YourClassName.convertToAnyBase(10, 2));
        assertEquals("A", YourClassName.convertToAnyBase(10, 16));
        assertEquals("12", YourClassName.convertToAnyBase(10, 8));
        assertEquals("2", YourClassName.convertToAnyBase(2, 10));
        assertEquals("F", YourClassName.convertToAnyBase(15, 16));
        assertEquals("0", YourClassName.convertToAnyBase(0, 2)); // Assuming the method handles zero correctly
    }
}


No.3 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        // Test for converting decimal to binary
        assertEquals("1101", DecimalToAnyBase.convertToAnyBase(13, 2));
        
        // Test for converting decimal to octal
        assertEquals("15", DecimalToAnyBase.convertToAnyBase(13, 8));
        
        // Test for converting decimal to hexadecimal
        assertEquals("D", DecimalToAnyBase.convertToAnyBase(13, 16));
        
        // Test for converting zero value
        assertEquals("", DecimalToAnyBase.convertToAnyBase(0, 2)); // As the current implementation returns an empty string when input is 0.
        
        // Test for converting decimal to a custom base (e.g., base 3)
        assertEquals("111", DecimalToAnyBase.convertToAnyBase(13, 3));
        
        // Add more tests if required ...
    }
}


No.4 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        assertEquals("101", DecimalToAnyBase.convertToAnyBase(5, 2));
        assertEquals("11", DecimalToAnyBase.convertToAnyBase(3, 2));

        assertEquals("12", DecimalToAnyBase.convertToAnyBase(10, 8));
        assertEquals("21", DecimalToAnyBase.convertToAnyBase(17, 8));

        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16));
        assertEquals("10", DecimalToAnyBase.convertToAnyBase(16, 16));

        assertEquals("1", DecimalToAnyBase.convertToAnyBase(1, 10));
        assertEquals("100", DecimalToAnyBase.convertToAnyBase(100, 10));
        
        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, -1));
    }
}


No.5 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        assertEquals("101", DecimalToAnyBaseConverter.convertToAnyBase(5, 2));
        assertEquals("12", DecimalToAnyBaseConverter.convertToAnyBase(10, 8));
        assertEquals("A", DecimalToAnyBaseConverter.convertToAnyBase(10, 16));
        assertEquals("21", DecimalToAnyBaseConverter.convertToAnyBase(7, 3));
        assertEquals("1", DecimalToAnyBaseConverter.convertToAnyBase(1, 10));
    }
}


No.6 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {
    
    @Test
    public void convertToAnyBaseTest() {
        // Test for converting to binary
        assertEquals("1010", DecimalToAnyBaseConvertor.convertToAnyBase(10, 2), "10 base-10 should be 1010 in binary");

        // Test for converting to octal
        assertEquals("12", DecimalToAnyBaseConvertor.convertToAnyBase(10, 8), "10 base-10 should be 12 in octal");

        // Test for converting to hexadecimal
        assertEquals("A", DecimalToAnyBaseConvertor.convertToAnyBase(10, 16), "10 base-10 should be A in hexadecimal");

        // Test for converting zero to any base
        assertEquals("", DecimalToAnyBaseConvertor.convertToAnyBase(0, 2), "0 base-10 should return an empty string");

        // Test for negative input
        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBaseConvertor.convertToAnyBase(-1, 2), "Negative input should throw an exception");

        // Test for invalid base (less than 2)
        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBaseConvertor.convertToAnyBase(10, 1), "Base less than 2 should throw an exception");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        // Test conversion to base 2 (binary)
        assertEquals("1010", DecimalToAnyBase.convertToAnyBase(10, 2), "10 in base 2 should be 1010");
        
        // Test conversion to base 8 (octal)
        assertEquals("12", DecimalToAnyBase.convertToAnyBase(10, 8), "10 in base 8 should be 12");
        
        // Test conversion to base 16 (hexadecimal)
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16), "10 in base 16 should be A");
        
        // Test conversion to base 7
        assertEquals("13", DecimalToAnyBase.convertToAnyBase(10, 7), "10 in base 7 should be 13");
        
        // Test conversion to base 28
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(28, 28), "28 in base 28 should be A");
        
        // Test conversion when input is 0
        assertEquals("", DecimalToAnyBase.convertToAnyBase(0, 2), "0 in any base should be an empty string");
        
        // Test for non-standard base, such as base 1 (unary)
        assertEquals("11111", DecimalToAnyBase.convertToAnyBase(5, 1), "5 in base 1 should be 11111");
    }
}



No.8 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    // Utility method to convert an integer value to a character
    private static char reVal(int num) {
        if (num >= 0 && num <= 9) {
            return (char) (num + '0');
        } else {
            return (char) (num - 10 + 'A');
        }
    }
    
    // Test method that actually tests `convertToAnyBase`
    @Test
    public void convertToAnyBaseTest() {
        assertEquals("101", DecimalToAnyBase.convertToAnyBase(5, 2), "5 in binary should be 101");
        assertEquals("5", DecimalToAnyBase.convertToAnyBase(5, 10), "5 in decimal should be 5");
        assertEquals("F", DecimalToAnyBase.convertToAnyBase(15, 16), "15 in hexadecimal should be F");
        assertEquals("11", DecimalToAnyBase.convertToAnyBase(3, 2), "3 in binary should be 11");
        assertEquals("21", DecimalToAnyBase.convertToAnyBase(3, 4), "3 in quaternary should be 21");
        assertEquals("1A7", DecimalToAnyBase.convertToAnyBase(423, 16), "423 in hexadecimal should be 1A7");
    }

    public static String convertToAnyBase(int inp, int base) {
        ArrayList<Character> charArr = new ArrayList<>();
    
        while (inp > 0) {
            charArr.add(reVal(inp % base));
            inp /= base;
        }
    
        StringBuilder str = new StringBuilder(charArr.size());
    
        for (Character ch : charArr) {
            str.append(ch);
        }
    
        return str.reverse().toString();
    }
}


No.9 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        assertEquals("1010", DecimalToAnyBase.convertToAnyBase(10, 2), "10 in base 2 should be 1010");
        assertEquals("12", DecimalToAnyBase.convertToAnyBase(10, 8), "10 in base 8 should be 12");
        assertEquals("A", DecimalToAnyBase.convertToAnyBase(10, 16), "10 in base 16 should be A");
        assertEquals("1", DecimalToAnyBase.convertToAnyBase(1, 2), "1 in base 2 should be 1");
        assertEquals("10", DecimalToAnyBase.convertToAnyBase(2, 2), "2 in base 2 should be 10");
        assertEquals("FF", DecimalToAnyBase.convertToAnyBase(255, 16), "255 in base 16 should be FF");
        assertEquals("0", DecimalToAnyBase.convertToAnyBase(0, 10), "0 in base 10 should remain 0");
        assertThrows(IllegalArgumentException.class, () -> DecimalToAnyBase.convertToAnyBase(10, 1), "Base 1 should not be allowed and throw an exception");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DecimalToAnyBaseTest {

    @Test
    public void convertToAnyBaseTest() {
        assertEquals("1010", DecimalToAnyBase.convertToAnyBase(10, 2));
        assertEquals("a", DecimalToAnyBase.convertToAnyBase(10, 16));
        assertEquals("12", DecimalToAnyBase.convertToAnyBase(10, 8));
        assertEquals("22", DecimalToAnyBase.convertToAnyBase(10, 4));
        assertEquals("10", DecimalToAnyBase.convertToAnyBase(10, 10));
    }
}


