Source code: 


public static ArrayList<Complex> fft(ArrayList<Complex> x, boolean inverse) {
    /* Pad the signal with zeros if necessary */
    paddingPowerOfTwo(x);
    int N = x.size();
    int log2N = findLog2(N);
    x = fftBitReversal(N, log2N, x);
    int direction = inverse ? -1 : 1;

    /* Main loop of the algorithm */
    for (int len = 2; len <= N; len *= 2) {
        double angle = -2 * Math.PI / len * direction;
        Complex wlen = new Complex(Math.cos(angle), Math.sin(angle));
        for (int i = 0; i < N; i += len) {
            Complex w = new Complex(1, 0);
            for (int j = 0; j < len / 2; j++) {
                Complex u = x.get(i + j);
                Complex v = w.multiply(x.get(i + j + len / 2));
                x.set(i + j, u.add(v));
                x.set(i + j + len / 2, u.subtract(v));
                w = w.multiply(wlen);
            }
        }
    }
    x = inverseFFT(N, inverse, x);
    return x;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import java.util.ArrayList;
import static org.junit.jupiter.api.Assertions.*;

public class FFTTest {

    private static final double DELTA = 1e-8;

    @Test
    public void fftTest() {
        // Input signal (real part only)
        ArrayList<FFT.Complex> inputSignal = new ArrayList<>();
        inputSignal.add(new FFT.Complex(1.0, 0.0));
        inputSignal.add(new FFT.Complex(2.0, 0.0));
        inputSignal.add(new FFT.Complex(3.0, 0.0));
        inputSignal.add(new FFT.Complex(4.0, 0.0));

        // Expected output FFT coefficients (hardcoded or from known result)
        ArrayList<FFT.Complex> expectedOutput = new ArrayList<>();
        expectedOutput.add(new FFT.Complex(10.0, 0.0));
        expectedOutput.add(new FFT.Complex(-2.0, 2.0));
        expectedOutput.add(new FFT.Complex(-2.0, 0.0));
        expectedOutput.add(new FFT.Complex(-2.0, -2.0));

        // Perform FFT on the input signal
        ArrayList<FFT.Complex> actualOutput = FFT.fft(inputSignal, false);

        // Assert the size of the result array matches the expected size
        assertEquals(expectedOutput.size(), actualOutput.size(), "The actual output size should match the expected output size.");

        // Assert each value of FFT output matches the expected value within a tolerance (DELTA)
        for (int i = 0; i < expectedOutput.size(); i++) {
            assertEquals(expectedOutput.get(i).getReal(), actualOutput.get(i).getReal(), DELTA, "Real part of FFT output should match.");
            assertEquals(expectedOutput.get(i).getImaginary(), actualOutput.get(i).getImaginary(), DELTA, "Imaginary part of FFT output should match.");
        }

        // Test the inverse FFT which should return the original input signal.
        ArrayList<FFT.Complex> recoveredSignal = FFT.fft(actualOutput, true);

        // Assert the size of the recovered signal matches the input size
        assertEquals(inputSignal.size(), recoveredSignal.size(), "The size of the recovered signal should match the input signal size.");

        // Assert each value of the recovered signal matches the original input signal within a tolerance
        for (int i = 0; i < inputSignal.size(); i++) {
            assertEquals(inputSignal.get(i).getReal(), recoveredSignal.get(i).getReal(), DELTA, "Real part of the recovered signal should match the input signal.");
            assertEquals(inputSignal.get(i).getImaginary(), recoveredSignal.get(i).getImaginary(), DELTA, "Imaginary part of the recovered signal should match the input signal.");
        }
    }
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import java.util.ArrayList;
import static org.junit.jupiter.api.Assertions.*;

public class FFTTest {

    private final double tolerance = 1e-9; // for double comparison in Assertions

    @Test
    public void fftTest() {
        FFT fft = new FFT();
        ArrayList<FFT.Complex> input = new ArrayList<>();
        
        // Adding simple inputs to the array
        input.add(fft.new Complex(0, 0));
        input.add(fft.new Complex(1, 1));
        input.add(fft.new Complex(3, 3));
        input.add(fft.new Complex(4, 4));
        // FFT expects the number of samples to be a power of two, if not it pads with zero
        // which is the default constructor of Complex class in this case

        // Expected output after applying FFT manually calculated or obtained from a reliable source
        ArrayList<FFT.Complex> expectedOutput = new ArrayList<>();
        expectedOutput.add(fft.new Complex(8, 8));
        expectedOutput.add(fft.new Complex(-2, -2));
        expectedOutput.add(fft.new Complex(-4, -4));
        expectedOutput.add(fft.new Complex(-2, -2));

        ArrayList<FFT.Complex> result = FFT.fft(input, false); // false for forward FFT

        // Check if the result size matches the expected output size
        assertEquals(expectedOutput.size(), result.size(), "FFT result array size should match expected output size.");
        
        // Check if the result and expected output match within the allowed tolerance
        for (int i = 0; i < result.size(); i++) {
            assertEquals(expectedOutput.get(i).getReal(), result.get(i).getReal(), tolerance, "Real part of complex number at index " + i + " should match.");
            assertEquals(expectedOutput.get(i).getImaginary(), result.get(i).getImaginary(), tolerance, "Imaginary part of complex number at index " + i + " should match.");
        }
    }
}


No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;

public class FFTTest {

    @Test
    public void fftTest() {
        // Creating a discrete signal in time domain
        ArrayList<FFT.Complex> signal = new ArrayList<>();
        signal.add(new FFT.Complex(0, 0));
        signal.add(new FFT.Complex(1, 0));
        signal.add(new FFT.Complex(0, 0));
        signal.add(new FFT.Complex(-1, 0));

        // Apply FFT
        ArrayList<FFT.Complex> fourierTransform = FFT.fft(signal, false);

        // Expected values after FFT calculation (DFT of the given signal)
        ArrayList<FFT.Complex> expectedFourier = new ArrayList<>();
        expectedFourier.add(new FFT.Complex(0, 0));
        expectedFourier.add(new FFT.Complex(0, -2));
        expectedFourier.add(new FFT.Complex(0, 0));
        expectedFourier.add(new FFT.Complex(0, 2));
        
        // Compare expected values with actual values
        // Allow a small error margin
        double delta = 1e-10;
        for (int i = 0; i < fourierTransform.size(); i++) {
            assertEquals(expectedFourier.get(i).getReal(), fourierTransform.get(i).getReal(), delta);
            assertEquals(expectedFourier.get(i).getImaginary(), fourierTransform.get(i).getImaginary(), delta);
        }

        // Test inverse FFT
        ArrayList<FFT.Complex> inverseFFT = FFT.fft(fourierTransform, true);

        // The inverse FFT should give back the original time domain signal
        // Compare expected signal with actual values (resulted from inverse FFT)
        for (int i = 0; i < signal.size(); i++) {
            assertEquals(signal.get(i).getReal(), inverseFFT.get(i).getReal(), delta);
            assertEquals(signal.get(i).getImaginary(), inverseFFT.get(i).getImaginary(), delta);
        }
    }
}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;

public class FFTTest {
    @Test
    public void fftTest() {
        // Create a test signal as a list of complex numbers
        ArrayList<FFT.Complex> signal = new ArrayList<>();
        signal.add(new FFT.Complex(0.0, 0.0));
        signal.add(new FFT.Complex(1.0, 0.0));
        signal.add(new FFT.Complex(0.0, 0.0));
        signal.add(new FFT.Complex(-1.0, 0.0));
        // Pad the signal to a power of two length
        FFT.paddingPowerOfTwo(signal);

        // Perform FFT
        ArrayList<FFT.Complex> fftResult = FFT.fft(signal, false);

        // Expected FFT result (assuming known expected values)
        ArrayList<FFT.Complex> expectedFFTResult = new ArrayList<>();
        expectedFFTResult.add(new FFT.Complex(0.0, 0.0));
        expectedFFTResult.add(new FFT.Complex(2.0, -2.0));
        expectedFFTResult.add(new FFT.Complex(0.0, 0.0));
        expectedFFTResult.add(new FFT.Complex(0.0, 0.0));
        expectedFFTResult.add(new FFT.Complex(0.0, 0.0));
        expectedFFTResult.add(new FFT.Complex(-2.0, -2.0));
        expectedFFTResult.add(new FFT.Complex(0.0, 0.0));
        expectedFFTResult.add(new FFT.Complex(0.0, 0.0));

        // Verify the FFT result matches the expected result
        for (int i = 0; i < fftResult.size(); i++) {
            assertEquals(expectedFFTResult.get(i).getReal(), fftResult.get(i).getReal(), 1E-9);
            assertEquals(expectedFFTResult.get(i).getImaginary(), fftResult.get(i).getImaginary(), 1E-9);
        }
    }

    @Test
    public void inverseFftTest() {
        // Prepare an FFT result (here we use the same signal for simplicity)
        ArrayList<FFT.Complex> fftResult = new ArrayList<>();
        fftResult.add(new FFT.Complex(0.0, 0.0));
        fftResult.add(new FFT.Complex(2.0, -2.0));
        fftResult.add(new FFT.Complex(0.0, 0.0));
        fftResult.add(new FFT.Complex(0.0, 0.0));
        fftResult.add(new FFT.Complex(0.0, 0.0));
        fftResult.add(new FFT.Complex(-2.0, -2.0));
        fftResult.add(new FFT.Complex(0.0, 0.0));
        fftResult.add(new FFT.Complex(0.0, 0.0));
        // Pad the signal to a power of two length
        FFT.paddingPowerOfTwo(fftResult);

        // Perform inverse FFT
        ArrayList<FFT.Complex> originalSignal = FFT.fft(fftResult, true);

        // Expected original signal (assuming known expected values)
        ArrayList<FFT.Complex> expectedOriginalSignal = new ArrayList<>();
        expectedOriginalSignal.add(new FFT.Complex(0.0, 0.0));
        expectedOriginalSignal.add(new FFT.Complex(1.0, 0.0));
        expectedOriginalSignal.add(new FFT.Complex(0.0, 0.0));
        expectedOriginalSignal.add(new FFT.Complex(-1.0, 0.0));
        expectedOriginalSignal.add(new FFT.Complex(0.0, 0.0));
        expectedOriginalSignal.add(new FFT.Complex(0.0, 0.0));
        expectedOriginalSignal.add(new FFT.Complex(0.0, 0.0));
        expectedOriginalSignal.add(new FFT.Complex(0.0, 0.0));

        // Verify inverse FFT result returns the original signal
        for (int i = 0; i < originalSignal.size(); i++) {
            assertEquals(expectedOriginalSignal.get(i).getReal(), originalSignal.get(i).getReal(), 1E-9);
            assertEquals(expectedOriginalSignal.get(i).getImaginary(), originalSignal.get(i).getImaginary(), 1E-9);
        }
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;

public class FFTTest {
    @Test
    public void fftTest() {
        // Create a test signal
        ArrayList<Complex> x = new ArrayList<>();
        x.add(new Complex(1,0));
        x.add(new Complex(1,0));
        x.add(new Complex(1,0));
        x.add(new Complex(1,0));
        x.add(new Complex(0,0));
        x.add(new Complex(0,0));
        x.add(new Complex(0,0));
        x.add(new Complex(0,0));

        // Expected FFT of the test signal
        ArrayList<Complex> expected = new ArrayList<>();
        expected.add(new Complex(4,0));
        expected.add(new Complex(1,-2.4142));
        expected.add(new Complex(0,0));
        expected.add(new Complex(1,-0.4142));
        expected.add(new Complex(0,0));
        expected.add(new Complex(1,0.4142));
        expected.add(new Complex(0,0));
        expected.add(new Complex(1,2.4142));

        // Calculate FFT
        ArrayList<Complex> fftResult = FFT.fft(x, false);

        // Verify each element of the FFT result against expected values
        for (int i = 0; i < expected.size(); i++) {
            assertEquals(expected.get(i).getReal(), fftResult.get(i).getReal(), 0.001, "Real part doesn't match for index " + i);
            assertEquals(expected.get(i).getImaginary(), fftResult.get(i).getImaginary(), 0.001, "Imaginary part doesn't match for index " + i);
        }

        // Inverse FFT to get original signal
        ArrayList<Complex> ifftResult = FFT.fft(fftResult, true);

        // Verify the inverse FFT result against original signal
        for (int i = 0; i < x.size(); i++) {
            assertEquals(x.get(i).getReal(), ifftResult.get(i).getReal(), 0.001, "Real part doesn't match for index " + i);
            assertEquals(x.get(i).getImaginary(), ifftResult.get(i).getImaginary(), 0.001, "Imaginary part doesn't match for index " + i);
        }
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import java.util.ArrayList;
import static org.junit.jupiter.api.Assertions.*;

public class FFTTest {

    @Test
    public void fftTest() {
        ArrayList<FFT.Complex> x = new ArrayList<>();
        x.add(new FFT.Complex(0, 0));
        x.add(new FFT.Complex(2, 0));
        x.add(new FFT.Complex(0, 0));
        x.add(new FFT.Complex(-2, 0));

        ArrayList<FFT.Complex> expected = new ArrayList<>();
        expected.add(new FFT.Complex(0 / 4.0, 0));
        expected.add(new FFT.Complex(1, -1));
        expected.add(new FFT.Complex(2 / 4.0, 0));
        expected.add(new FFT.Complex(1, 1));

        ArrayList<FFT.Complex> result = FFT.fft(x, false);

        assertEquals(expected.size(), result.size());
        for (int i = 0; i < expected.size(); i++) {
            assertEquals(expected.get(i).getReal(), result.get(i).getReal(), 1e-9);
            assertEquals(expected.get(i).getImaginary(), result.get(i).getImaginary(), 1e-9);
        }
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FFTTest {
    @Test
    public void fftTest() {
        ArrayList<FFT.Complex> input = new ArrayList<>();
        input.add(new FFT.Complex(0.0, 0.0));
        input.add(new FFT.Complex(1.0, 1.0));
        input.add(new FFT.Complex(3.0, 3.0));
        input.add(new FFT.Complex(4.0, 4.0));
        input.add(new FFT.Complex(2.0, 2.0));
        input.add(new FFT.Complex(2.0, 2.0));
        FFT.paddingPowerOfTwo(input); // Ensure input length is a power of 2
        
        ArrayList<FFT.Complex> forwardFFT = FFT.fft(input, false);
        
        // Check if the size of the result is a power of two
        assertTrue((forwardFFT.size() & (forwardFFT.size() - 1)) == 0);
        
        // Check if inverse FFT results in original time-domain signal
        ArrayList<FFT.Complex> inverseFFT = FFT.fft(forwardFFT, true);
        
        for (int i = 0; i < input.size(); ++i) {
            assertEquals(input.get(i).getReal(), inverseFFT.get(i).getReal(), 1E-9);
            assertEquals(input.get(i).getImaginary(), inverseFFT.get(i).getImaginary(), 1E-9);
        }
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;

public class FFTTest {

    @Test
    public void fftTest() {
        // Initialize an ArrayList with some test values
        ArrayList<FFT.Complex> signal = new ArrayList<>();
        signal.add(new FFT.Complex(1, 0));
        signal.add(new FFT.Complex(1, 0));
        signal.add(new FFT.Complex(1, 0));
        signal.add(new FFT.Complex(1, 0));
        signal.add(new FFT.Complex(0, 0));
        signal.add(new FFT.Complex(0, 0));
        signal.add(new FFT.Complex(0, 0));
        signal.add(new FFT.Complex(0, 0));

        // Expected result after applying FFT
        ArrayList<FFT.Complex> expected = new ArrayList<>();
        expected.add(new FFT.Complex(4, 0));
        expected.add(new FFT.Complex(1, -2.414213562373095));
        expected.add(new FFT.Complex(0, 0));
        expected.add(new FFT.Complex(1, -0.4142135623730949));
        expected.add(new FFT.Complex(0, 0));
        expected.add(new FFT.Complex(1, 0.4142135623730949));
        expected.add(new FFT.Complex(0, 0));
        expected.add(new FFT.Complex(1, 2.414213562373095));

        // Perform the FFT on the test values
        ArrayList<FFT.Complex> result = FFT.fft(signal, false);

        // Verify the size of the result is equal to the expected size
        assertEquals(expected.size(), result.size(), "The result size should match the expected size.");

        // Verify that each element of the result matches the expected element
        for (int i = 0; i < result.size(); i++) {
            FFT.Complex expectedComplex = expected.get(i);
            FFT.Complex resultComplex = result.get(i);
            assertEquals(expectedComplex.getReal(), resultComplex.getReal(), 1e-9, "Real part does not match at index " + i);
            assertEquals(expectedComplex.getImaginary(), resultComplex.getImaginary(), 1e-9, "Imaginary part does not match at index " + i);
        }
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;

public class FFTTest {
    @Test
    public void fftTest() {
        // Create an array list of complex numbers for testing
        ArrayList<FFT.Complex> input = new ArrayList<>();
        input.add(new FFT.Complex(1, 0));
        input.add(new FFT.Complex(1, 0));
        input.add(new FFT.Complex(1, 0));
        input.add(new FFT.Complex(1, 0));
        input.add(new FFT.Complex(0, 0));
        input.add(new FFT.Complex(0, 0));
        input.add(new FFT.Complex(0, 0));
        input.add(new FFT.Complex(0, 0));

        // Perform FFT on the input data
        ArrayList<FFT.Complex> output = FFT.fft(input, false);

        // Validate the size of the output
        assertEquals(input.size(), output.size(), "Output size should match input size.");

        // Expected results for the provided input (based on a DFT calculation)
        double[][] expected = {
                {4, 0},
                {1, -2.414213562373095},
                {0, 0},
                {1, -0.4142135623730949},
                {0, 0},
                {1, 0.4142135623730949},
                {0, 0},
                {1, 2.414213562373095}
        };

        // Check if the output from FFT matches the expected results
        for (int i = 0; i < output.size(); i++) {
            assertEquals(expected[i][0], output.get(i).getReal(), 1e-9, "Real part doesn't match for index " + i);
            assertEquals(expected[i][1], output.get(i).getImaginary(), 1e-9, "Imaginary part doesn't match for index " + i);
        }

        // Perform inverse FFT
        ArrayList<FFT.Complex> inverseOutput = FFT.fft(output, true);

        // Check if the inverse FFT restores the original input
        for (int i = 0; i < inverseOutput.size(); i++) {
            assertEquals(input.get(i).getReal(), inverseOutput.get(i).getReal(), 1e-9, "Real part doesn't match for inverse FFT at index " + i);
            assertEquals(input.get(i).getImaginary(), inverseOutput.get(i).getImaginary(), 1e-9, "Imaginary part doesn't match for inverse FFT at index " + i);
        }
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import java.util.ArrayList;
import static org.junit.jupiter.api.Assertions.*;

public class FFTTest {
    @Test
    public void fftTest() {
        // Create a sample signal consisting of 4 complex numbers
        ArrayList<Complex> inputSignal = new ArrayList<>();
        inputSignal.add(new FFT.Complex(1, 0));
        inputSignal.add(new FFT.Complex(1, 0));
        inputSignal.add(new FFT.Complex(1, 0));
        inputSignal.add(new FFT.Complex(1, 0));

        // Perform FFT on the input signal
        ArrayList<Complex> outputSignal = FFT.fft(inputSignal, false);

        // Assert output signal size is the same as input signal
        assertEquals(inputSignal.size(), outputSignal.size());

        // Perform IFFT on the FFT result to obtain the original signal
        ArrayList<Complex> reconstructedSignal = FFT.fft(outputSignal, true);

        // Tolerance for floating-point comparison
        double tolerance = 1e-9;

        // Assert the original signal is reconstructed correctly
        for (int i = 0; i < reconstructedSignal.size(); i++) {
            assertEquals(inputSignal.get(i).getReal(), reconstructedSignal.get(i).getReal(), tolerance);
            assertEquals(inputSignal.get(i).getImaginary(), reconstructedSignal.get(i).getImaginary(), tolerance);
        }
    }
}


