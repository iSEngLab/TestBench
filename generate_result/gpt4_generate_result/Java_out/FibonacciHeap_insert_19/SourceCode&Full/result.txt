Source code: 


public HeapNode insert(int key) {
    HeapNode toInsert = new HeapNode(key); // creates the node
    if (this.empty()) {
        this.min = toInsert;
    } else { // tree is not empty
        min.setNext(toInsert);
        this.updateMin(toInsert);
    }
    this.numOfHeapNodes++;
    this.numOfTrees++;
    return toInsert;
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {

    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap();

        // Verify heap is initially empty
        assertTrue(heap.empty(), "Heap should be empty initially");

        // Insert a single element and verify
        FibonacciHeap.HeapNode node = heap.insert(10);
        assertNotNull(node, "Insert should return a non-null HeapNode object");
        assertEquals(10, node.getKey(), "Inserted node should have key equal to 10");
        assertFalse(heap.empty(), "Heap should not be empty after insert");
        assertEquals(node, heap.findMin(), "Inserted node should be the minimum in the heap");
        assertEquals(1, heap.size(), "Heap size should be 1 after insert");
        
        // Insert another element and verify
        FibonacciHeap.HeapNode secondNode = heap.insert(5);
        assertNotNull(secondNode, "Second insert should return a non-null HeapNode object");
        assertEquals(5, secondNode.getKey(), "Second inserted node should have key equal to 5");
        assertEquals(secondNode, heap.findMin(), "Second inserted node should now be the minimum in the heap");
        assertEquals(2, heap.size(), "Heap size should be 2 after second insert");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {
    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap();
        
        // Test 1: Insert into an empty heap
        FibonacciHeap.HeapNode insertNode1 = heap.insert(10);
        assertEquals(10, heap.findMin().getKey(), "Insert into an empty heap should set the new node as min.");
        assertFalse(heap.empty(), "Heap should not be empty after insert.");
        assertEquals(1, heap.size(), "Heap size should be 1 after first insert.");
        
        // Test 2: Insert into a non-empty heap with higher key value
        FibonacciHeap.HeapNode insertNode2 = heap.insert(20);
        assertEquals(10, heap.findMin().getKey(), "Insert of larger key should not change the min.");
        assertEquals(2, heap.size(), "Heap size should be 2 after second insert.");
        
        // Test 3: Insert into a non-empty heap with lower key value
        FibonacciHeap.HeapNode insertNode3 = heap.insert(5);
        assertEquals(5, heap.findMin().getKey(), "Insert of smaller key should change the min.");
        assertEquals(3, heap.size(), "Heap size should be 3 after third insert.");
        
        // Test 4: Verify the inserted nodes
        assertNotNull(insertNode1, "Inserted node should not be null.");
        assertEquals(10, insertNode1.getKey(), "Inserted node should have the correct key value.");
        assertNotNull(insertNode2, "Inserted node should not be null.");
        assertEquals(20, insertNode2.getKey(), "Inserted node should have the correct key value.");
        assertNotNull(insertNode3, "Inserted node should not be null.");
        assertEquals(5, insertNode3.getKey(), "Inserted node should have the correct key value.");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {

    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap();

        // Test that the heap is initially empty
        assertTrue(heap.empty(), "Heap should initially be empty.");

        // Insert an element and test the heap is no longer empty
        int keyToInsert = 10;
        FibonacciHeap.HeapNode nodeInserted = heap.insert(keyToInsert);
        assertFalse(heap.empty(), "Heap should not be empty after insertion.");

        // Check the inserted node's key matches the expected value
        assertEquals(keyToInsert, nodeInserted.getKey(), "The key of the inserted node should equal the key that was inserted.");

        // Check if the minimum element is the one we just inserted
        assertEquals(nodeInserted, heap.findMin(), "The inserted node should be the minimum after inserting into an empty heap.");

        // Check if the size of the heap is 1 after insertion
        assertEquals(1, heap.size(), "Heap size should be 1 after one insertion.");

        // Check if the number of trees in the heap is 1 after insertion
        assertEquals(1, heap.numOfTrees, "Number of trees should be 1 after one insertion.");

        // Insert another element and test if the size updates accordingly
        int secondKeyToInsert = 5;
        FibonacciHeap.HeapNode secondNodeInserted = heap.insert(secondKeyToInsert);
        assertEquals(2, heap.size(), "Heap size should be 2 after two insertions.");

        // Check if the minimum element is updated correctly after second insertion
        assertEquals(secondNodeInserted, heap.findMin(), "The second inserted node should be the new minimum.");

        // Check if the number of trees is now 2
        assertEquals(2, heap.numOfTrees, "Number of trees should be 2 after two insertions.");

        // Insert another element with a higher key and check if min remains unchanged
        int thirdKeyToInsert = 20;
        heap.insert(thirdKeyToInsert);
        assertEquals(secondNodeInserted, heap.findMin(), "The minimum should remain unchanged after inserting a higher key.");

        // Check if the size of the heap is 3 after third insertion
        assertEquals(3, heap.size(), "Heap size should be 3 after three insertions.");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {
    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap();
        assertTrue(heap.empty(), "Heap should be empty initially.");

        // Insert first element and check if it becomes the min
        HeapNode firstNode = heap.insert(10);
        assertEquals(10, heap.findMin().getKey(), "The min should be the first element inserted.");
        assertFalse(heap.empty(), "Heap should not be empty after insert.");
        assertEquals(1, heap.size(), "Heap size should be 1 after first insertion.");

        // Insert a larger number and check if the min remains the same
        heap.insert(20);
        assertEquals(10, heap.findMin().getKey(), "The min should not change when larger element is inserted.");
        assertEquals(2, heap.size(), "Heap size should be 2 after second insertion.");

        // Insert a smaller number and check if it becomes the new min
        heap.insert(5);
        assertEquals(5, heap.findMin().getKey(), "The min should be the new smaller element inserted.");
        assertEquals(3, heap.size(), "Heap size should be 3 after third insertion.");

        // Insert an element equal to current min and check min consistency
        heap.insert(5);
        assertEquals(5, heap.findMin().getKey(), "Inserting element equal to current min should keep the min unchanged.");
        assertEquals(4, heap.size(), "Heap size should be 4 after fourth insertion.");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {
    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap();
        
        assertTrue(heap.empty(), "Heap should be empty initially.");

        int key = 5;
        HeapNode insertedNode = heap.insert(key);

        assertNotNull(insertedNode, "Inserted node should not be null.");
        assertEquals(key, insertedNode.getKey(), "Inserted node key should match the key.");
        assertEquals(1, heap.size(), "Heap should have one node after insertion.");
        assertFalse(heap.empty(), "Heap should not be empty after insertion.");
        assertEquals(insertedNode, heap.findMin(), "Inserted node should be the minimum in the heap.");

        int newKey = 2;
        HeapNode newNode = heap.insert(newKey);

        assertEquals(newKey, heap.findMin().getKey(), "New node should be the new minimum in the heap.");
        assertEquals(2, heap.size(), "Heap should have two nodes after second insertion.");
        assertEquals(newNode, heap.findMin(), "findMin should return the new node with the smaller key.");

        int keyToTestExistingMin = 10;
        heap.insert(keyToTestExistingMin);

        assertNotEquals(keyToTestExistingMin, heap.findMin().getKey(), "findMin should still return the previous minimum node.");
        assertEquals(3, heap.size(), "Heap should have three nodes after third insertion.");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {
    
    private FibonacciHeap fibonacciHeap;
    
    @BeforeEach
    public void setUp() {
        fibonacciHeap = new FibonacciHeap();
    }
    
    @Test
    public void insertTest() {
        // Initially, heap should be empty.
        assertTrue(fibonacciHeap.empty(), "Heap should be empty before insertions");

        // Insert first node and check size and minimum.
        FibonacciHeap.HeapNode firstNode = fibonacciHeap.insert(10);
        assertEquals(1, fibonacciHeap.size(), "Heap should contain one node after first insertion");
        assertEquals(10, fibonacciHeap.findMin().getKey(), "Minimum should be 10 after first insertion");
        assertFalse(fibonacciHeap.empty(), "Heap should not be empty after insertion");

        // Insert a second node with a smaller key and check min again.
        FibonacciHeap.HeapNode secondNode = fibonacciHeap.insert(5);
        assertEquals(2, fibonacciHeap.size(), "Heap should contain two nodes after second insertion");
        assertEquals(5, fibonacciHeap.findMin().getKey(), "Minimum should be 5 after inserting node with key 5");
        
        // Insert a third node with a larger key and check min does not change.
        FibonacciHeap.HeapNode thirdNode = fibonacciHeap.insert(20);
        assertEquals(3, fibonacciHeap.size(), "Heap should contain three nodes after third insertion");
        assertEquals(5, fibonacciHeap.findMin().getKey(), "Minimum should still be 5 after inserting node with key 20");
        
        // Insert a fourth node with a key smaller than current min and check min changes.
        FibonacciHeap.HeapNode fourthNode = fibonacciHeap.insert(3);
        assertEquals(4, fibonacciHeap.size(), "Heap should contain four nodes after fourth insertion");
        assertEquals(3, fibonacciHeap.findMin().getKey(), "Minimum should be 3 after inserting node with key 3");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {
    private FibonacciHeap heap;

    @BeforeEach
    public void setUp() {
        heap = new FibonacciHeap();
    }

    @Test
    public void insertTest() {
        // Test empty heap condition
        assertTrue(heap.empty(), "Heap should be initially empty");

        // Insert a single node
        FibonacciHeap.HeapNode node = heap.insert(10);
        assertNotNull(node, "Inserted node should not be null");
        assertEquals(10, heap.findMin().getKey(), "Min should return the key of the only node in the heap");
        assertEquals(1, heap.size(), "Heap size should be 1 after one insert");
        assertFalse(heap.empty(), "Heap should not be empty after insert");

        // Insert a second node with a larger key
        FibonacciHeap.HeapNode secondNode = heap.insert(20);
        assertNotNull(secondNode, "Second inserted node should not be null");
        assertEquals(10, heap.findMin().getKey(), "Min should still return the key of the first node");
        assertEquals(2, heap.size(), "Heap size should be 2 after inserting two nodes");

        // Insert a third node with a smaller key
        FibonacciHeap.HeapNode thirdNode = heap.insert(5);
        assertNotNull(thirdNode, "Third inserted node should not be null");
        assertEquals(5, heap.findMin().getKey(), "Min should now return the key of the third node");
        assertEquals(3, heap.size(), "Heap size should be 3 after inserting three nodes");
    }

    @AfterEach
    public void tearDown() {
        heap = null;
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {
    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap();
        assertTrue(heap.empty(), "Heap should be empty initially");

        FibonacciHeap.HeapNode node = heap.insert(10);
        assertNotNull(node, "Inserted node should not be null");
        assertEquals(10, node.getKey(), "Inserted node should have key 10");
        assertFalse(heap.empty(), "Heap should not be empty after insertion");
        assertEquals(1, heap.size(), "Heap should contain 1 element after insertion");
        assertEquals(heap.findMin(), node, "Inserted node should be the minimum in the heap");
        
        heap.insert(5);
        assertEquals(5, heap.findMin().getKey(), "Minimum key should now be 5 after inserting a smaller key");
        assertEquals(2, heap.size(), "Heap should contain 2 elements after second insertion");
        
        heap.insert(15);
        assertEquals(5, heap.findMin().getKey(), "Minimum key should still be 5 after inserting a larger key");
        assertEquals(3, heap.size(), "Heap should contain 3 elements after third insertion");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {

    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap();

        // Test inserting into an empty heap
        FibonacciHeap.HeapNode node1 = heap.insert(10);
        assertNotNull(node1, "Inserted heap node should not be null");
        assertEquals(10, node1.getKey(), "Incorrect key on inserted node");
        assertEquals(1, heap.size(), "Heap size should be 1 after the first insertion");
        assertFalse(heap.empty(), "Heap should not be empty after an insertion");

        // Test inserting into a non-empty heap
        FibonacciHeap.HeapNode node2 = heap.insert(5);
        assertNotNull(node2, "Inserted heap node should not be null");
        assertEquals(5, node2.getKey(), "Incorrect key on inserted node");
        assertEquals(node2, heap.findMin(), "Node with key 5 should be the new min");
        assertEquals(2, heap.size(), "Heap size should be 2 after the second insertion");

        // Test inserting with a key greater than the min
        FibonacciHeap.HeapNode node3 = heap.insert(15);
        assertNotNull(node3, "Inserted heap node should not be null");
        assertEquals(15, node3.getKey(), "Incorrect key on inserted node");
        assertEquals(node2, heap.findMin(), "Min should still be the node with key 5");
        assertEquals(3, heap.size(), "Heap size should be 3 after the third insertion");

        // Test inserting with a key smaller than the min
        FibonacciHeap.HeapNode node4 = heap.insert(3);
        assertNotNull(node4, "Inserted heap node should not be null");
        assertEquals(3, node4.getKey(), "Incorrect key on inserted node");
        assertEquals(node4, heap.findMin(), "Node with key 3 should be the new min");
        assertEquals(4, heap.size(), "Heap size should be 4 after the fourth insertion");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {
    FibonacciHeap fibonacciHeap;

    @BeforeEach
    public void setUp() {
        fibonacciHeap = new FibonacciHeap();
    }

    @Test
    public void insertTest() {
        // Test insertion into an empty Fibonacci heap
        HeapNode node10 = fibonacciHeap.insert(10);
        assertFalse(fibonacciHeap.empty(), "Heap should not be empty after insertion");
        assertEquals(10, fibonacciHeap.findMin().getKey(), "The minimum value should be 10 after inserting 10 into an empty heap");
        assertEquals(1, fibonacciHeap.size(), "The size should be 1 after one insertion");
        
        // Test insertion into a non-empty Fibonacci heap which does not update the min
        HeapNode node20 = fibonacciHeap.insert(20);
        assertEquals(10, fibonacciHeap.findMin().getKey(), "The minimum value should remain 10 after inserting 20");
        assertEquals(2, fibonacciHeap.size(), "The size should be 2 after two insertions");
    
        // Test insertion into a non-empty Fibonacci heap which updates the min
        HeapNode node5 = fibonacciHeap.insert(5);
        assertEquals(5, fibonacciHeap.findMin().getKey(), "The minimum value should be updated to 5 after inserting 5");
        assertEquals(3, fibonacciHeap.size(), "The size should be 3 after three insertions");
        
        // Test the structure after insertions
        assertNotNull(node10.getNext(), "node10 should have a non-null next");
        assertNotNull(node20.getNext(), "node20 should have a non-null next");
        assertNotNull(node5.getNext(), "node5 should have a non-null next");
        assertEquals(node10, node5.getNext(), "node5's next should be node10");
        assertEquals(node5, node20.getNext(), "node20's next should be node5");
        assertEquals(node20, node10.getNext(), "node10's next should be node20");
    
        // Test insertion with a key smaller than zero
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            fibonacciHeap.insert(-1);
        }, "Inserting a key with value less than zero should throw an IllegalArgumentException");
        assertEquals("Key must be greater than or equal to 0", exception.getMessage(), "Exception message should indicate the invalid key value");
    }
}


