{
    "project_name": "Java",
    "file_name": "FibonacciHeap.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/heaps/FibonacciHeap.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.heaps",
    "docstring": "/**\n     * Creates a node (of type HeapNode) which contains the given key, and inserts it into the heap.\n     *\n     * @pre key>=0\n     * @post (numOfnodes = = $prev numOfnodes + 1)\n     * @post empty == false\n     * $ret = the HeapNode we inserted\n     */",
    "source_code": "\npublic HeapNode insert(int key) {\n    HeapNode toInsert = new HeapNode(key); // creates the node\n    if (this.empty()) {\n        this.min = toInsert;\n    } else { // tree is not empty\n        min.setNext(toInsert);\n        this.updateMin(toInsert);\n    }\n    this.numOfHeapNodes++;\n    this.numOfTrees++;\n    return toInsert;\n}\n",
    "class_name": "FibonacciHeap",
    "method_name": "insert",
    "arguments": [
        "int key"
    ],
    "generate_test": [
        "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n\n    @Test\n    public void insertTest() {\n        FibonacciHeap fibHeap = new FibonacciHeap();\n        \n        // Test inserting into an empty heap\n        HeapNode node1 = fibHeap.insert(10);\n        assertNotNull(node1, \"Inserted HeapNode should not be null\");\n        assertEquals(10, fibHeap.findMin().key, \"The minimum key value should be equal to the inserted key\");\n        assertEquals(10, node1.key, \"The key of the node should be equal to the inserted key\");\n        assertEquals(1, fibHeap.size(), \"The size of the heap should be 1 after the first insert\");\n        assertFalse(fibHeap.empty(), \"Heap should not be empty after insert\");\n        \n        // Test inserting into a non-empty heap\n        HeapNode node2 = fibHeap.insert(5);\n        assertNotNull(node2, \"Inserted HeapNode should not be null\");\n        assertEquals(5, fibHeap.findMin().key, \"The minimum key value should be updated after inserting a smaller key\");\n        assertEquals(5, node2.key, \"The key of the node should be equal to the inserted key\");\n        assertEquals(2, fibHeap.size(), \"The size of the heap should be 2 after the second insert\");\n        \n        // Insert a node with a key value greater than current min\n        HeapNode node3 = fibHeap.insert(15);\n        assertNotNull(node3, \"Inserted HeapNode should not be null\");\n        assertEquals(5, fibHeap.findMin().key, \"The minimum key value should not change after inserting a greater key\");\n        assertEquals(15, node3.key, \"The key of the node should be equal to the inserted key\");\n        assertEquals(3, fibHeap.size(), \"The size of the heap should be 3 after the third insert\");\n        \n        // Insert another node with the minimum value\n        HeapNode node4 = fibHeap.insert(5);\n        assertNotNull(node4, \"Inserted HeapNode should not be null\");\n        assertEquals(5, fibHeap.findMin().key, \"The minimum key value should still be 5 after inserting another node with key 5\");\n        assertEquals(5, node4.key, \"The key of the node should be equal to the inserted key\");\n        assertEquals(4, fibHeap.size(), \"The size of the heap should be 4 after the fourth insert\");\n    }\n}",
        "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n\n        assertTrue(heap.empty(), \"Heap should be empty initially\");\n\n        // Test inserting a single node\n        HeapNode firstNode = heap.insert(10);\n        assertFalse(heap.empty(), \"Heap should not be empty after insertion\");\n        assertEquals(10, heap.findMin().key, \"Min should be 10 after inserting node with key 10\");\n        assertEquals(1, heap.size(), \"Size of heap should be 1 after first insertion\");\n        assertSame(firstNode, heap.findMin(), \"First inserted node should be minimum\");\n\n        // Insert another node\n        HeapNode secondNode = heap.insert(5);\n        assertEquals(5, heap.findMin().key, \"Min should be 5 after inserting node with key 5\");\n        assertEquals(2, heap.size(), \"Size of heap should be 2 after second insertion\");\n        assertSame(secondNode, heap.findMin(), \"Second inserted node should be minimum\");\n\n        // Insert a third node with value greater than min\n        heap.insert(15);\n        assertEquals(5, heap.findMin().key, \"Min should remain 5 after inserting node with key 15\");\n        assertEquals(3, heap.size(), \"Size of heap should be 3 after third insertion\");\n\n        // Checking the number of trees and total number of nodes\n        assertEquals(3, heap.numOfTrees, \"Number of trees should be 3 after all insertions\");\n        assertEquals(3, heap.numOfHeapNodes, \"Number of heap nodes should be 3 after all insertions\");\n    }\n}",
        "package com.thealgorithms.datastructures.heaps;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.Test;\n\npublic class FibonacciHeapTest {\n    private FibonacciHeap.HeapNode createHeapNode(int key) {\n        return new FibonacciHeap().new HeapNode(key);\n    }\n\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        assertTrue(heap.empty(), \"Heap should be empty initially\");\n\n        // Insert first element and check if min is set to it\n        FibonacciHeap.HeapNode firstNode = heap.insert(10);\n        assertFalse(heap.empty(), \"Heap should not be empty after insertion\");\n        assertEquals(firstNode, heap.findMin(), \"Inserted node should be minimum\");\n\n        // Insert another element and check the min, size, and structure\n        FibonacciHeap.HeapNode secondNode = heap.insert(5);\n        assertFalse(heap.empty(), \"Heap should not be empty after second insertion\");\n        assertEquals(secondNode, heap.findMin(), \"Second inserted node with smaller key should be new minimum\");\n        assertEquals(2, heap.size(), \"Heap should contain two nodes after two insertions\");\n\n        // Insert another element with a greater key\n        FibonacciHeap.HeapNode thirdNode = heap.insert(15);\n        assertFalse(heap.empty(), \"Heap should not be empty after third insertion\");\n        assertEquals(secondNode, heap.findMin(), \"Min should not change after inserting a greater key\");\n        assertEquals(3, heap.size(), \"Heap should contain three nodes after three insertions\");\n\n        // Confirm the connections between the nodes\n        assertEquals(thirdNode, firstNode.getNext(), \"First node's next should point to the third node\");\n    }\n}",
        "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n\n    @Test\n    public void insertTest() {\n        FibonacciHeap fibonacciHeap = new FibonacciHeap();\n        \n        assertTrue(fibonacciHeap.empty(), \"Heap should be empty initially\");\n        \n        HeapNode firstNode = fibonacciHeap.insert(10);\n        assertEquals(10, firstNode.getKey(), \"Inserted node should have the key 10\");\n        assertNotNull(fibonacciHeap.findMin(), \"After first insert, min should not be null\");\n        assertEquals(firstNode, fibonacciHeap.findMin(), \"First node should be the minimum\");\n        assertEquals(1, fibonacciHeap.size(), \"Size should be 1 after first insert\");\n        \n        HeapNode secondNode = fibonacciHeap.insert(5);\n        assertEquals(5, secondNode.getKey(), \"Inserted node should have the key 5\");\n        assertNotEquals(firstNode, fibonacciHeap.findMin(), \"First node should no longer be the minimum\");\n        assertEquals(secondNode, fibonacciHeap.findMin(), \"Second node should be the new minimum\");\n        assertEquals(2, fibonacciHeap.size(), \"Size should be 2 after second insert\");\n        \n        HeapNode thirdNode = fibonacciHeap.insert(15);\n        assertEquals(15, thirdNode.getKey(), \"Inserted node should have the key 15\");\n        assertEquals(secondNode, fibonacciHeap.findMin(), \"Second node should still be the minimum\");\n        assertEquals(3, fibonacciHeap.size(), \"Size should be 3 after third insert\");\n    }\n}",
        "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        assertTrue(heap.empty(), \"New FibonacciHeap should be empty\");\n\n        // Insert single key into the heap and check if it is the minimum\n        HeapNode insertedNode = heap.insert(10);\n        assertNotNull(insertedNode, \"Inserted node should not be null\");\n        assertEquals(10, heap.findMin().key, \"The key of the minimum node should be 10 after insertion\");\n        assertEquals(1, heap.size(), \"Heap size should be 1 after one insertion\");\n        assertFalse(heap.empty(), \"Heap should not be empty after one insertion\");\n\n        // Insert another key and check if the minimum is updated\n        HeapNode secondInsertedNode = heap.insert(5);\n        assertNotNull(secondInsertedNode, \"Second inserted node should not be null\");\n        assertEquals(5, heap.findMin().key, \"The key of the minimum node should be 5 after second insertion\");\n        assertEquals(2, heap.size(), \"Heap size should be 2 after second insertion\");\n\n        // Insert a third key which is larger than the minimum and verify that min remains unchanged\n        HeapNode thirdInsertedNode = heap.insert(15);\n        assertNotNull(thirdInsertedNode, \"Third inserted node should not be null\");\n        assertEquals(5, heap.findMin().key, \"The key of the minimum node should remain 5 after third insertion\");\n        assertEquals(3, heap.size(), \"Heap size should be 3 after third insertion\");\n\n        // Check if the number of trees has increased correctly after each insertion\n        int[] counters = heap.countersRep();\n        int numOfTreesAfterInsertions = counters.length;  // Assuming that countersRep() method correctly gives the number of trees\n        assertEquals(3, numOfTreesAfterInsertions, \"There should be three trees in the heap after three insertions\");\n    }\n}",
        "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n\n        // Test when heap is empty\n        assertTrue(heap.empty(), \"Heap should be empty initially\");\n        HeapNode firstInsertedNode = heap.insert(10);\n        assertFalse(heap.empty(), \"Heap should no longer be empty after insertion\");\n        assertEquals(firstInsertedNode, heap.findMin(), \"Inserted node should be the minimum\");\n        assertEquals(1, heap.size(), \"Heap size should be 1 after first insertion\");\n        assertEquals(1, heap.numOfTrees, \"Number of trees should be 1 after first insertion\");\n\n        // Test when heap is not empty\n        HeapNode secondInsertedNode = heap.insert(5);\n        assertEquals(secondInsertedNode, heap.findMin(), \"Newly inserted node should be the new minimum\");\n        assertEquals(2, heap.size(), \"Heap size should be 2 after second insertion\");\n        assertEquals(2, heap.numOfTrees, \"Number of trees should be 2 after second insertion\");\n\n        // Test insert with a higher key value which should not change the minimum\n        heap.insert(20);\n        assertEquals(secondInsertedNode, heap.findMin(), \"Minimum should remain the same after inserting a larger value\");\n        assertEquals(3, heap.size(), \"Heap size should be 3 after third insertion\");\n\n        // Continue with further tests if needed\n    }\n}",
        "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        FibonacciHeap fibonacciHeap = new FibonacciHeap();\n\n        // Check if the heap is initially empty\n        assertTrue(fibonacciHeap.empty(), \"Heap should be empty initially\");\n\n        // Insert a node and check if it is now the minimum\n        HeapNode insertedNode1 = fibonacciHeap.insert(10);\n        assertNotNull(insertedNode1, \"Inserted node should not be null\");\n        assertEquals(10, insertedNode1.getKey(), \"The key of the inserted node should be 10\");\n        assertFalse(fibonacciHeap.empty(), \"Heap should not be empty after insertion\");\n        assertEquals(insertedNode1, fibonacciHeap.findMin(), \"Inserted node should be the minimum after first insertion\");\n\n        // Insert another node and check properties of the heap\n        HeapNode insertedNode2 = fibonacciHeap.insert(5);\n        assertNotNull(insertedNode2, \"Second inserted node should not be null\");\n        assertEquals(5, insertedNode2.getKey(), \"The key of the second inserted node should be 5\");\n        assertEquals(2, fibonacciHeap.size(), \"Heap should contain two nodes after second insertion\");\n        assertEquals(insertedNode2, fibonacciHeap.findMin(), \"Second inserted node should be the new minimum\");\n        \n        // Check if the number of trees and heap nodes is correct\n        assertEquals(2, fibonacciHeap.numOfTrees, \"Number of trees should be 2 after two insertions\");\n        assertEquals(2, fibonacciHeap.numOfHeapNodes, \"Number of heap nodes should be 2 after two insertions\");\n        \n        // Insert a node with a key greater than the current minimum and check the minimum does not change\n        HeapNode insertedNode3 = fibonacciHeap.insert(15);\n        assertNotNull(insertedNode3, \"Third inserted node should not be null\");\n        assertEquals(15, insertedNode3.getKey(), \"The key of the third inserted node should be 15\");\n        assertEquals(3, fibonacciHeap.size(), \"Heap should contain three nodes after third insertion\");\n        assertEquals(insertedNode2, fibonacciHeap.findMin(), \"Minimum should not change after inserting a node with key greater than the min\");\n\n        // Insert another node with the same key as the minimum and check that the new node is not set as the minimum\n        HeapNode insertedNode4 = fibonacciHeap.insert(5);\n        assertNotNull(insertedNode4, \"Fourth inserted node should not be null\");\n        assertEquals(5, insertedNode4.getKey(), \"The key of the fourth inserted node should be 5\");\n        assertEquals(4, fibonacciHeap.size(), \"Heap should contain four nodes after fourth insertion\");\n        assertEquals(insertedNode2, fibonacciHeap.findMin(), \"Minimum should remain unchanged after inserting another node with key equal to the min\");\n    }\n}",
        "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n\n        // Test empty heap insert\n        HeapNode insertNode = heap.insert(10);\n        assertNotNull(insertNode);\n        assertEquals(10, insertNode.getKey());\n        assertEquals(1, heap.size());\n        assertEquals(insertNode, heap.findMin());\n\n        // Test inserting a smaller element\n        HeapNode newMinNode = heap.insert(5);\n        assertNotNull(newMinNode);\n        assertEquals(5, newMinNode.getKey());\n        assertEquals(2, heap.size());\n        assertEquals(newMinNode, heap.findMin());\n\n        // Test inserting a larger element\n        HeapNode largerNode = heap.insert(20);\n        assertNotNull(largerNode);\n        assertEquals(20, largerNode.getKey());\n        assertEquals(3, heap.size());\n        assertEquals(newMinNode, heap.findMin()); // min should not change\n\n        // Check if total number of trees and heap nodes are incremented properly\n        assertEquals(3, heap.numOfTrees);\n        assertEquals(3, heap.numOfHeapNodes);\n    }\n}",
        "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        assertTrue(heap.empty(), \"Newly created heap should be empty.\");\n\n        // Inserting first element\n        int firstKey = 10;\n        HeapNode firstNode = heap.insert(firstKey);\n        assertNotNull(firstNode, \"Insert method should return a non-null HeapNode.\");\n        assertEquals(firstKey, firstNode.getKey(), \"The key of the node returned by insert should be the key that was inserted.\");\n        assertEquals(heap.findMin(), firstNode, \"The minimum should be the first inserted element when heap was empty\");\n        assertEquals(1, heap.size(), \"Heap size should be 1 after first insertion.\");\n        assertFalse(heap.empty(), \"Heap should not be empty after insertion.\");\n\n        // Inserting another element\n        int secondKey = 5;\n        HeapNode secondNode = heap.insert(secondKey);\n        assertNotNull(secondNode, \"Insert method should return a non-null HeapNode after second insertion.\");\n        assertEquals(secondKey, secondNode.getKey(), \"The key of the node returned by insert should be the key that was inserted.\");\n        assertEquals(secondNode, heap.findMin(), \"The minimum should be the second inserted element which is smaller than the first.\");\n        assertEquals(2, heap.size(), \"Heap size should be 2 after second insertion.\");\n\n        // Inserting third element, larger than min\n        int thirdKey = 15;\n        HeapNode thirdNode = heap.insert(thirdKey);\n        assertNotNull(thirdNode, \"Insert method should return a non-null HeapNode after third insertion.\");\n        assertEquals(thirdKey, thirdNode.getKey(), \"The key of the node returned by insert should be the key that was inserted.\");\n        assertEquals(secondNode, heap.findMin(), \"The minimum should not change when inserting an element larger than the current min.\");\n        assertEquals(3, heap.size(), \"Heap size should be 3 after inserting three elements.\");\n\n        // Make sure that the structure is correct\n        assertEquals(1, heap.numOfTrees(), \"There should be one tree after all insertions if no consolidation is required.\");\n    }\n}",
        "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        \n        // Test when the heap is empty\n        assertTrue(heap.empty(), \"Heap should be initially empty.\");\n        HeapNode node1 = heap.insert(10);\n        assertEquals(10, node1.getKey(), \"Inserted key should be 10.\");\n        assertEquals(1, heap.size(), \"Heap should contain one node after insertion.\");\n        assertEquals(node1, heap.findMin(), \"Inserted node should be the minimum node in the heap.\");\n        \n        // Test when the heap is non-empty\n        HeapNode node2 = heap.insert(5);\n        assertEquals(5, node2.getKey(), \"Inserted key should be 5.\");\n        assertEquals(2, heap.size(), \"Heap should contain two nodes after second insertion.\");\n        assertEquals(node2, heap.findMin(), \"Second inserted node with smaller key should now be the minimum node in the heap.\");\n        \n        HeapNode node3 = heap.insert(20);\n        assertEquals(20, node3.getKey(), \"Inserted key should be 20.\");\n        assertEquals(3, heap.size(), \"Heap should contain three nodes after third insertion.\");\n        assertEquals(node2, heap.findMin(), \"Min node should still be the second inserted node after third insertion.\");\n    }\n}"
    ]
}