Source code: 


public HeapNode insert(int key) {
    HeapNode toInsert = new HeapNode(key); // creates the node
    if (this.empty()) {
        this.min = toInsert;
    } else { // tree is not empty
        min.setNext(toInsert);
        this.updateMin(toInsert);
    }
    this.numOfHeapNodes++;
    this.numOfTrees++;
    return toInsert;
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {

    @Test
    public void insertTest() {
        FibonacciHeap fibHeap = new FibonacciHeap();
        
        // Test inserting into an empty heap
        HeapNode node1 = fibHeap.insert(10);
        assertNotNull(node1, "Inserted HeapNode should not be null");
        assertEquals(10, fibHeap.findMin().key, "The minimum key value should be equal to the inserted key");
        assertEquals(10, node1.key, "The key of the node should be equal to the inserted key");
        assertEquals(1, fibHeap.size(), "The size of the heap should be 1 after the first insert");
        assertFalse(fibHeap.empty(), "Heap should not be empty after insert");
        
        // Test inserting into a non-empty heap
        HeapNode node2 = fibHeap.insert(5);
        assertNotNull(node2, "Inserted HeapNode should not be null");
        assertEquals(5, fibHeap.findMin().key, "The minimum key value should be updated after inserting a smaller key");
        assertEquals(5, node2.key, "The key of the node should be equal to the inserted key");
        assertEquals(2, fibHeap.size(), "The size of the heap should be 2 after the second insert");
        
        // Insert a node with a key value greater than current min
        HeapNode node3 = fibHeap.insert(15);
        assertNotNull(node3, "Inserted HeapNode should not be null");
        assertEquals(5, fibHeap.findMin().key, "The minimum key value should not change after inserting a greater key");
        assertEquals(15, node3.key, "The key of the node should be equal to the inserted key");
        assertEquals(3, fibHeap.size(), "The size of the heap should be 3 after the third insert");
        
        // Insert another node with the minimum value
        HeapNode node4 = fibHeap.insert(5);
        assertNotNull(node4, "Inserted HeapNode should not be null");
        assertEquals(5, fibHeap.findMin().key, "The minimum key value should still be 5 after inserting another node with key 5");
        assertEquals(5, node4.key, "The key of the node should be equal to the inserted key");
        assertEquals(4, fibHeap.size(), "The size of the heap should be 4 after the fourth insert");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {

    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap();

        assertTrue(heap.empty(), "Heap should be empty initially");

        // Test inserting a single node
        HeapNode firstNode = heap.insert(10);
        assertFalse(heap.empty(), "Heap should not be empty after insertion");
        assertEquals(10, heap.findMin().key, "Min should be 10 after inserting node with key 10");
        assertEquals(1, heap.size(), "Size of heap should be 1 after first insertion");
        assertSame(firstNode, heap.findMin(), "First inserted node should be minimum");

        // Insert another node
        HeapNode secondNode = heap.insert(5);
        assertEquals(5, heap.findMin().key, "Min should be 5 after inserting node with key 5");
        assertEquals(2, heap.size(), "Size of heap should be 2 after second insertion");
        assertSame(secondNode, heap.findMin(), "Second inserted node should be minimum");

        // Insert a third node with value greater than min
        heap.insert(15);
        assertEquals(5, heap.findMin().key, "Min should remain 5 after inserting node with key 15");
        assertEquals(3, heap.size(), "Size of heap should be 3 after third insertion");

        // Checking the number of trees and total number of nodes
        assertEquals(3, heap.numOfTrees, "Number of trees should be 3 after all insertions");
        assertEquals(3, heap.numOfHeapNodes, "Number of heap nodes should be 3 after all insertions");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;

public class FibonacciHeapTest {
    private FibonacciHeap.HeapNode createHeapNode(int key) {
        return new FibonacciHeap().new HeapNode(key);
    }

    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap();
        assertTrue(heap.empty(), "Heap should be empty initially");

        // Insert first element and check if min is set to it
        FibonacciHeap.HeapNode firstNode = heap.insert(10);
        assertFalse(heap.empty(), "Heap should not be empty after insertion");
        assertEquals(firstNode, heap.findMin(), "Inserted node should be minimum");

        // Insert another element and check the min, size, and structure
        FibonacciHeap.HeapNode secondNode = heap.insert(5);
        assertFalse(heap.empty(), "Heap should not be empty after second insertion");
        assertEquals(secondNode, heap.findMin(), "Second inserted node with smaller key should be new minimum");
        assertEquals(2, heap.size(), "Heap should contain two nodes after two insertions");

        // Insert another element with a greater key
        FibonacciHeap.HeapNode thirdNode = heap.insert(15);
        assertFalse(heap.empty(), "Heap should not be empty after third insertion");
        assertEquals(secondNode, heap.findMin(), "Min should not change after inserting a greater key");
        assertEquals(3, heap.size(), "Heap should contain three nodes after three insertions");

        // Confirm the connections between the nodes
        assertEquals(thirdNode, firstNode.getNext(), "First node's next should point to the third node");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {

    @Test
    public void insertTest() {
        FibonacciHeap fibonacciHeap = new FibonacciHeap();
        
        assertTrue(fibonacciHeap.empty(), "Heap should be empty initially");
        
        HeapNode firstNode = fibonacciHeap.insert(10);
        assertEquals(10, firstNode.getKey(), "Inserted node should have the key 10");
        assertNotNull(fibonacciHeap.findMin(), "After first insert, min should not be null");
        assertEquals(firstNode, fibonacciHeap.findMin(), "First node should be the minimum");
        assertEquals(1, fibonacciHeap.size(), "Size should be 1 after first insert");
        
        HeapNode secondNode = fibonacciHeap.insert(5);
        assertEquals(5, secondNode.getKey(), "Inserted node should have the key 5");
        assertNotEquals(firstNode, fibonacciHeap.findMin(), "First node should no longer be the minimum");
        assertEquals(secondNode, fibonacciHeap.findMin(), "Second node should be the new minimum");
        assertEquals(2, fibonacciHeap.size(), "Size should be 2 after second insert");
        
        HeapNode thirdNode = fibonacciHeap.insert(15);
        assertEquals(15, thirdNode.getKey(), "Inserted node should have the key 15");
        assertEquals(secondNode, fibonacciHeap.findMin(), "Second node should still be the minimum");
        assertEquals(3, fibonacciHeap.size(), "Size should be 3 after third insert");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {

    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap();
        assertTrue(heap.empty(), "New FibonacciHeap should be empty");

        // Insert single key into the heap and check if it is the minimum
        HeapNode insertedNode = heap.insert(10);
        assertNotNull(insertedNode, "Inserted node should not be null");
        assertEquals(10, heap.findMin().key, "The key of the minimum node should be 10 after insertion");
        assertEquals(1, heap.size(), "Heap size should be 1 after one insertion");
        assertFalse(heap.empty(), "Heap should not be empty after one insertion");

        // Insert another key and check if the minimum is updated
        HeapNode secondInsertedNode = heap.insert(5);
        assertNotNull(secondInsertedNode, "Second inserted node should not be null");
        assertEquals(5, heap.findMin().key, "The key of the minimum node should be 5 after second insertion");
        assertEquals(2, heap.size(), "Heap size should be 2 after second insertion");

        // Insert a third key which is larger than the minimum and verify that min remains unchanged
        HeapNode thirdInsertedNode = heap.insert(15);
        assertNotNull(thirdInsertedNode, "Third inserted node should not be null");
        assertEquals(5, heap.findMin().key, "The key of the minimum node should remain 5 after third insertion");
        assertEquals(3, heap.size(), "Heap size should be 3 after third insertion");

        // Check if the number of trees has increased correctly after each insertion
        int[] counters = heap.countersRep();
        int numOfTreesAfterInsertions = counters.length;  // Assuming that countersRep() method correctly gives the number of trees
        assertEquals(3, numOfTreesAfterInsertions, "There should be three trees in the heap after three insertions");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {

    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap();

        // Test when heap is empty
        assertTrue(heap.empty(), "Heap should be empty initially");
        HeapNode firstInsertedNode = heap.insert(10);
        assertFalse(heap.empty(), "Heap should no longer be empty after insertion");
        assertEquals(firstInsertedNode, heap.findMin(), "Inserted node should be the minimum");
        assertEquals(1, heap.size(), "Heap size should be 1 after first insertion");
        assertEquals(1, heap.numOfTrees, "Number of trees should be 1 after first insertion");

        // Test when heap is not empty
        HeapNode secondInsertedNode = heap.insert(5);
        assertEquals(secondInsertedNode, heap.findMin(), "Newly inserted node should be the new minimum");
        assertEquals(2, heap.size(), "Heap size should be 2 after second insertion");
        assertEquals(2, heap.numOfTrees, "Number of trees should be 2 after second insertion");

        // Test insert with a higher key value which should not change the minimum
        heap.insert(20);
        assertEquals(secondInsertedNode, heap.findMin(), "Minimum should remain the same after inserting a larger value");
        assertEquals(3, heap.size(), "Heap size should be 3 after third insertion");

        // Continue with further tests if needed
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {
    @Test
    public void insertTest() {
        FibonacciHeap fibonacciHeap = new FibonacciHeap();

        // Check if the heap is initially empty
        assertTrue(fibonacciHeap.empty(), "Heap should be empty initially");

        // Insert a node and check if it is now the minimum
        HeapNode insertedNode1 = fibonacciHeap.insert(10);
        assertNotNull(insertedNode1, "Inserted node should not be null");
        assertEquals(10, insertedNode1.getKey(), "The key of the inserted node should be 10");
        assertFalse(fibonacciHeap.empty(), "Heap should not be empty after insertion");
        assertEquals(insertedNode1, fibonacciHeap.findMin(), "Inserted node should be the minimum after first insertion");

        // Insert another node and check properties of the heap
        HeapNode insertedNode2 = fibonacciHeap.insert(5);
        assertNotNull(insertedNode2, "Second inserted node should not be null");
        assertEquals(5, insertedNode2.getKey(), "The key of the second inserted node should be 5");
        assertEquals(2, fibonacciHeap.size(), "Heap should contain two nodes after second insertion");
        assertEquals(insertedNode2, fibonacciHeap.findMin(), "Second inserted node should be the new minimum");
        
        // Check if the number of trees and heap nodes is correct
        assertEquals(2, fibonacciHeap.numOfTrees, "Number of trees should be 2 after two insertions");
        assertEquals(2, fibonacciHeap.numOfHeapNodes, "Number of heap nodes should be 2 after two insertions");
        
        // Insert a node with a key greater than the current minimum and check the minimum does not change
        HeapNode insertedNode3 = fibonacciHeap.insert(15);
        assertNotNull(insertedNode3, "Third inserted node should not be null");
        assertEquals(15, insertedNode3.getKey(), "The key of the third inserted node should be 15");
        assertEquals(3, fibonacciHeap.size(), "Heap should contain three nodes after third insertion");
        assertEquals(insertedNode2, fibonacciHeap.findMin(), "Minimum should not change after inserting a node with key greater than the min");

        // Insert another node with the same key as the minimum and check that the new node is not set as the minimum
        HeapNode insertedNode4 = fibonacciHeap.insert(5);
        assertNotNull(insertedNode4, "Fourth inserted node should not be null");
        assertEquals(5, insertedNode4.getKey(), "The key of the fourth inserted node should be 5");
        assertEquals(4, fibonacciHeap.size(), "Heap should contain four nodes after fourth insertion");
        assertEquals(insertedNode2, fibonacciHeap.findMin(), "Minimum should remain unchanged after inserting another node with key equal to the min");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {

    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap();

        // Test empty heap insert
        HeapNode insertNode = heap.insert(10);
        assertNotNull(insertNode);
        assertEquals(10, insertNode.getKey());
        assertEquals(1, heap.size());
        assertEquals(insertNode, heap.findMin());

        // Test inserting a smaller element
        HeapNode newMinNode = heap.insert(5);
        assertNotNull(newMinNode);
        assertEquals(5, newMinNode.getKey());
        assertEquals(2, heap.size());
        assertEquals(newMinNode, heap.findMin());

        // Test inserting a larger element
        HeapNode largerNode = heap.insert(20);
        assertNotNull(largerNode);
        assertEquals(20, largerNode.getKey());
        assertEquals(3, heap.size());
        assertEquals(newMinNode, heap.findMin()); // min should not change

        // Check if total number of trees and heap nodes are incremented properly
        assertEquals(3, heap.numOfTrees);
        assertEquals(3, heap.numOfHeapNodes);
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {

    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap();
        assertTrue(heap.empty(), "Newly created heap should be empty.");

        // Inserting first element
        int firstKey = 10;
        HeapNode firstNode = heap.insert(firstKey);
        assertNotNull(firstNode, "Insert method should return a non-null HeapNode.");
        assertEquals(firstKey, firstNode.getKey(), "The key of the node returned by insert should be the key that was inserted.");
        assertEquals(heap.findMin(), firstNode, "The minimum should be the first inserted element when heap was empty");
        assertEquals(1, heap.size(), "Heap size should be 1 after first insertion.");
        assertFalse(heap.empty(), "Heap should not be empty after insertion.");

        // Inserting another element
        int secondKey = 5;
        HeapNode secondNode = heap.insert(secondKey);
        assertNotNull(secondNode, "Insert method should return a non-null HeapNode after second insertion.");
        assertEquals(secondKey, secondNode.getKey(), "The key of the node returned by insert should be the key that was inserted.");
        assertEquals(secondNode, heap.findMin(), "The minimum should be the second inserted element which is smaller than the first.");
        assertEquals(2, heap.size(), "Heap size should be 2 after second insertion.");

        // Inserting third element, larger than min
        int thirdKey = 15;
        HeapNode thirdNode = heap.insert(thirdKey);
        assertNotNull(thirdNode, "Insert method should return a non-null HeapNode after third insertion.");
        assertEquals(thirdKey, thirdNode.getKey(), "The key of the node returned by insert should be the key that was inserted.");
        assertEquals(secondNode, heap.findMin(), "The minimum should not change when inserting an element larger than the current min.");
        assertEquals(3, heap.size(), "Heap size should be 3 after inserting three elements.");

        // Make sure that the structure is correct
        assertEquals(1, heap.numOfTrees(), "There should be one tree after all insertions if no consolidation is required.");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.heaps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FibonacciHeapTest {

    @Test
    public void insertTest() {
        FibonacciHeap heap = new FibonacciHeap();
        
        // Test when the heap is empty
        assertTrue(heap.empty(), "Heap should be initially empty.");
        HeapNode node1 = heap.insert(10);
        assertEquals(10, node1.getKey(), "Inserted key should be 10.");
        assertEquals(1, heap.size(), "Heap should contain one node after insertion.");
        assertEquals(node1, heap.findMin(), "Inserted node should be the minimum node in the heap.");
        
        // Test when the heap is non-empty
        HeapNode node2 = heap.insert(5);
        assertEquals(5, node2.getKey(), "Inserted key should be 5.");
        assertEquals(2, heap.size(), "Heap should contain two nodes after second insertion.");
        assertEquals(node2, heap.findMin(), "Second inserted node with smaller key should now be the minimum node in the heap.");
        
        HeapNode node3 = heap.insert(20);
        assertEquals(20, node3.getKey(), "Inserted key should be 20.");
        assertEquals(3, heap.size(), "Heap should contain three nodes after third insertion.");
        assertEquals(node2, heap.findMin(), "Min node should still be the second inserted node after third insertion.");
    }
}


