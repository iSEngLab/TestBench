{
    "project_name": "Java",
    "file_name": "FindMax.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/FindMax.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * @brief finds the maximum value stored in the input array\n     *\n     * @param array the input array\n     * @exception IllegalArgumentException input array is empty\n     * @return the maximum value stored in the input array\n     */",
    "source_code": "\npublic static int findMax(final int[] array) {\n    int n = array.length;\n    if (n == 0) {\n        throw new IllegalArgumentException(\"Array must be non-empty.\");\n    }\n    int max = array[0];\n    for (int i = 1; i < n; i++) {\n        if (array[i] > max) {\n            max = array[i];\n        }\n    }\n    return max;\n}\n",
    "class_name": "FindMax",
    "method_name": "findMax",
    "arguments": [
        "int[] array"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxWithNonEmptyArray() {\n        int[] inputArray = {1, 3, 4, 2};\n        int expectedMax = 4;\n        assertEquals(expectedMax, FindMax.findMax(inputArray));\n    }\n\n    @Test\n    public void findMaxWithAllNegativeNumbers() {\n        int[] inputArray = {-3, -1, -2, -4};\n        int expectedMax = -1;\n        assertEquals(expectedMax, FindMax.findMax(inputArray));\n    }\n\n    @Test\n    public void findMaxWithSingleElement() {\n        int[] inputArray = {42};\n        int expectedMax = 42;\n        assertEquals(expectedMax, FindMax.findMax(inputArray));\n    }\n\n    @Test\n    public void findMaxWithAllIdenticalElements() {\n        int[] inputArray = {7, 7, 7, 7};\n        int expectedMax = 7;\n        assertEquals(expectedMax, FindMax.findMax(inputArray));\n    }\n\n    @Test\n    public void findMaxWithEmptyArray() {\n        int[] inputArray = {};\n        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(inputArray));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxWithNonEmptyArray() {\n        int[] inputArray = {1, 3, 5, 4, 2};\n        int expectedMax = 5;\n        assertEquals(expectedMax, FindMax.findMax(inputArray), \"The max value should be 5\");\n    }\n\n    @Test\n    public void findMaxWithAllNegativeNumbers() {\n        int[] inputArray = {-1, -3, -5, -4, -2};\n        int expectedMax = -1;\n        assertEquals(expectedMax, FindMax.findMax(inputArray), \"The max value should be -1\");\n    }\n\n    @Test\n    public void findMaxWithSingleElement() {\n        int[] inputArray = {42};\n        int expectedMax = 42;\n        assertEquals(expectedMax, FindMax.findMax(inputArray), \"The max value should be the single element 42\");\n    }\n\n    @Test\n    public void findMaxWithAllIdenticalNumbers() {\n        int[] inputArray = {7, 7, 7, 7, 7};\n        int expectedMax = 7;\n        assertEquals(expectedMax, FindMax.findMax(inputArray), \"The max value should be the same as all identical elements, 7\");\n    }\n\n    @Test\n    public void findMaxThrowsExceptionForEmptyArray() {\n        int[] inputArray = {};\n        Exception exception = assertThrows(\n            IllegalArgumentException.class,\n            () -> FindMax.findMax(inputArray),\n            \"An empty array should cause an IllegalArgumentException.\"\n        );\n\n        String expectedMessage = \"Array must be non-empty.\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage), \"Exception message should be: \" + expectedMessage);\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        // Test with an array containing a mix of positive and negative numbers\n        assertEquals(9, FindMax.findMax(new int[]{1, 3, 9, 0, -1}));\n\n        // Test with an array having same values, expecting the same value as max\n        assertEquals(4, FindMax.findMax(new int[]{4, 4, 4, 4}));\n\n        // Test with an array containing a single number\n        assertEquals(2, FindMax.findMax(new int[]{2}));\n\n        // Test with an array containing only negative numbers\n        assertEquals(-1, FindMax.findMax(new int[]{-10, -20, -1, -5}));\n\n        // Test with a sorted array in ascending order\n        assertEquals(7, FindMax.findMax(new int[]{1, 2, 3, 4, 5, 6, 7}));\n\n        // Test with a sorted array in descending order\n        assertEquals(33, FindMax.findMax(new int[]{33, 22, 11, 0, -1}));\n\n        // Test to check the IllegalArgumentException when array is empty\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(new int[]{});\n        });\n        assertEquals(\"Array must be non-empty.\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void testFindMaxWhenArrayHasMultipleElements() {\n        // Test with normal input\n        int[] array = {1, 3, 4, 2};\n        int result = FindMax.findMax(array);\n        assertEquals(4, result);\n    }\n\n    @Test\n    public void testFindMaxWhenArrayHasOneElement() {\n        // Test with single element array\n        int[] array = {42};\n        int result = FindMax.findMax(array);\n        assertEquals(42, result);\n    }\n\n    @Test\n    public void testFindMaxWithNegativeNumbers() {\n        // Test with negative numbers\n        int[] array = {-1, -3, -4, -2};\n        int result = FindMax.findMax(array);\n        assertEquals(-1, result);\n    }\n\n    @Test\n    public void testFindMaxWithMixedNumbers() {\n        // Test with a mix of negative and positive numbers\n        int[] array = {-1, 3, -4, 2};\n        int result = FindMax.findMax(array);\n        assertEquals(3, result);\n    }\n    \n    @Test \n    public void testFindMaxWithAllEqualElements() {\n        // Test with all elements being equal\n        int[] array = {7, 7, 7, 7};\n        int result = FindMax.findMax(array);\n        assertEquals(7, result);\n    }\n\n    @Test\n    public void testFindMaxWhenArrayIsEmpty() {\n        // Test with empty array\n        int[] array = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(array));\n        assertEquals(\"Array must be non-empty.\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxTest() {\n        // Test with a regular input\n        int[] inputArray = {1, 5, 3, 4, 2};\n        int expectedMax = 5;\n        assertEquals(expectedMax, FindMax.findMax(inputArray));\n\n        // Test with input having negative values\n        int[] negativeArray = {-3, -1, -2, -5, -4};\n        int expectedNegativeMax = -1;\n        assertEquals(expectedNegativeMax, FindMax.findMax(negativeArray));\n\n        // Test with input of size one\n        int[] singleElementArray = {42};\n        int expectedSingleElementMax = 42;\n        assertEquals(expectedSingleElementMax, FindMax.findMax(singleElementArray));\n\n        // Test with input having all equal values\n        int[] equalElementsArray = {7, 7, 7, 7, 7};\n        int expectedEqualElementMax = 7;\n        assertEquals(expectedEqualElementMax, FindMax.findMax(equalElementsArray));\n    }\n\n    @Test\n    public void findMaxEmptyArrayTest() {\n        // Test with an empty array\n        int[] emptyArray = {};\n\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(emptyArray);\n        });\n\n        String expectedMessage = \"Array must be non-empty.\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(new int[]{}), \"Array must be non-empty.\");\n\n        assertEquals(3, FindMax.findMax(new int[]{1, 2, 3}), \"The max value in the array {1, 2, 3} should be 3\");\n\n        assertEquals(-1, FindMax.findMax(new int[]{-3, -2, -1}), \"The max value in the array {-3, -2, -1} should be -1\");\n\n        assertEquals(0, FindMax.findMax(new int[]{0}), \"The max value in a single-element array {0} should be 0\");\n\n        assertEquals(7, FindMax.findMax(new int[]{7, 3, 5, 6, 7}), \"The max value in the array {7, 3, 5, 6, 7} should be 7\");\n\n        assertEquals(42, FindMax.findMax(new int[]{10, 22, 42, 11}), \"The max value in the array {10, 22, 42, 11} should be 42\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxWithNonEmptyArrayTest() {\n        int[] array = {1, 2, 3, 4, 5};\n        assertEquals(5, FindMax.findMax(array));\n    }\n\n    @Test\n    public void findMaxWithSingleElementArrayTest() {\n        int[] array = {42};\n        assertEquals(42, FindMax.findMax(array));\n    }\n\n    @Test\n    public void findMaxWithNegativeNumbersTest() {\n        int[] array = {-3, -1, -2, -7, -5};\n        assertEquals(-1, FindMax.findMax(array));\n    }\n\n    @Test\n    public void findMaxWithAllIdenticalElementsTest() {\n        int[] array = {7, 7, 7, 7};\n        assertEquals(7, FindMax.findMax(array));\n    }\n\n    @Test\n    public void findMaxWithMixedValuesTest() {\n        int[] array = {-10, 30, 20, 0, -20};\n        assertEquals(30, FindMax.findMax(array));\n    }\n\n    @Test\n    public void findMaxWhenArrayIsEmptyTest() {\n        int[] array = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(array);\n        });\n\n        String expectedMessage = \"Array must be non-empty.\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void testFindMaxWithNonEmptyArray() {\n        assertEquals(5, FindMax.findMax(new int[]{1, 3, 5, 4, 2}));\n        assertEquals(-1, FindMax.findMax(new int[]{-3, -5, -4, -1, -2}));\n        assertEquals(0, FindMax.findMax(new int[]{0}));\n        assertEquals(42, FindMax.findMax(new int[]{42, -42, 0, 42, 42}));\n    }\n\n    @Test\n    public void testFindMaxWithSingleElementArray() {\n        assertEquals(7, FindMax.findMax(new int[]{7}));\n    }\n\n    @Test\n    public void testFindMaxWithOrderedArray() {\n        assertEquals(3, FindMax.findMax(new int[]{1, 2, 3}));\n    }\n\n    @Test\n    public void testFindMaxWithSameElementsArray() {\n        assertEquals(8, FindMax.findMax(new int[]{8, 8, 8, 8}));\n    }\n\n    @Test\n    public void testFindMaxWithUnorderedArray() {\n        assertEquals(9, FindMax.findMax(new int[]{6, 9, 3, 5, 1}));\n    }\n\n    @Test\n    public void expectIllegalArgumentExceptionForEmptyArray() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(new int[]{});\n        });\n        assertEquals(\"Array must be non-empty.\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        assertThrows(IllegalArgumentException.class, \n            () -> FindMax.findMax(new int[]{}), \"Array must be non-empty.\");\n\n        assertEquals(9, FindMax.findMax(new int[]{1, 4, 9, 3}), \n            \"Max should be 9 for input {1, 4, 9, 3}\");\n\n        assertEquals(-1, FindMax.findMax(new int[]{-3, -5, -1, -8}), \n            \"Max should be -1 for input {-3, -5, -1, -8}\");\n\n        assertEquals(0, FindMax.findMax(new int[]{0}), \n            \"Max should be 0 for a single element array with element 0\");\n\n        assertEquals(1, FindMax.findMax(new int[]{1}), \n            \"Max should be 1 for a single element array with element 1\");\n\n        assertEquals(50, FindMax.findMax(new int[]{8, 22, 50, 4}), \n            \"Max should be 50 for input {8, 22, 50, 4}\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(new int[]{});\n        }, \"Array must be non-empty.\");\n\n        assertEquals(9, FindMax.findMax(new int[]{1, 3, 5, 7, 9}), \"Max should be 9 for the provided array\");\n\n        assertEquals(-1, FindMax.findMax(new int[]{-2, -5, -7, -1, -4}), \"Max should be -1 for negative numbers in the array\");\n\n        assertEquals(0, FindMax.findMax(new int[]{-1, 0, -3}), \"Max should be 0 when 0 is the highest number\");\n\n        assertEquals(1, FindMax.findMax(new int[]{1}), \"Max should be 1 for a single-element array\");\n    }\n}"
    ]
}