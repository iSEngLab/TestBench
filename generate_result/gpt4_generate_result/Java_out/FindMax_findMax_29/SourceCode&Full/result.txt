Source code: 


public static int findMax(final int[] array) {
    int n = array.length;
    if (n == 0) {
        throw new IllegalArgumentException("Array must be non-empty.");
    }
    int max = array[0];
    for (int i = 1; i < n; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    return max;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {

    @Test
    public void findMaxWithNonEmptyArray() {
        int[] inputArray = {1, 3, 4, 2};
        int expectedMax = 4;
        assertEquals(expectedMax, FindMax.findMax(inputArray));
    }

    @Test
    public void findMaxWithAllNegativeNumbers() {
        int[] inputArray = {-3, -1, -2, -4};
        int expectedMax = -1;
        assertEquals(expectedMax, FindMax.findMax(inputArray));
    }

    @Test
    public void findMaxWithSingleElement() {
        int[] inputArray = {42};
        int expectedMax = 42;
        assertEquals(expectedMax, FindMax.findMax(inputArray));
    }

    @Test
    public void findMaxWithAllIdenticalElements() {
        int[] inputArray = {7, 7, 7, 7};
        int expectedMax = 7;
        assertEquals(expectedMax, FindMax.findMax(inputArray));
    }

    @Test
    public void findMaxWithEmptyArray() {
        int[] inputArray = {};
        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(inputArray));
    }
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {

    @Test
    public void findMaxWithNonEmptyArray() {
        int[] inputArray = {1, 3, 5, 4, 2};
        int expectedMax = 5;
        assertEquals(expectedMax, FindMax.findMax(inputArray), "The max value should be 5");
    }

    @Test
    public void findMaxWithAllNegativeNumbers() {
        int[] inputArray = {-1, -3, -5, -4, -2};
        int expectedMax = -1;
        assertEquals(expectedMax, FindMax.findMax(inputArray), "The max value should be -1");
    }

    @Test
    public void findMaxWithSingleElement() {
        int[] inputArray = {42};
        int expectedMax = 42;
        assertEquals(expectedMax, FindMax.findMax(inputArray), "The max value should be the single element 42");
    }

    @Test
    public void findMaxWithAllIdenticalNumbers() {
        int[] inputArray = {7, 7, 7, 7, 7};
        int expectedMax = 7;
        assertEquals(expectedMax, FindMax.findMax(inputArray), "The max value should be the same as all identical elements, 7");
    }

    @Test
    public void findMaxThrowsExceptionForEmptyArray() {
        int[] inputArray = {};
        Exception exception = assertThrows(
            IllegalArgumentException.class,
            () -> FindMax.findMax(inputArray),
            "An empty array should cause an IllegalArgumentException."
        );

        String expectedMessage = "Array must be non-empty.";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage), "Exception message should be: " + expectedMessage);
    }
}


No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        // Test with an array containing a mix of positive and negative numbers
        assertEquals(9, FindMax.findMax(new int[]{1, 3, 9, 0, -1}));

        // Test with an array having same values, expecting the same value as max
        assertEquals(4, FindMax.findMax(new int[]{4, 4, 4, 4}));

        // Test with an array containing a single number
        assertEquals(2, FindMax.findMax(new int[]{2}));

        // Test with an array containing only negative numbers
        assertEquals(-1, FindMax.findMax(new int[]{-10, -20, -1, -5}));

        // Test with a sorted array in ascending order
        assertEquals(7, FindMax.findMax(new int[]{1, 2, 3, 4, 5, 6, 7}));

        // Test with a sorted array in descending order
        assertEquals(33, FindMax.findMax(new int[]{33, 22, 11, 0, -1}));

        // Test to check the IllegalArgumentException when array is empty
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            FindMax.findMax(new int[]{});
        });
        assertEquals("Array must be non-empty.", exception.getMessage());
    }
}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {

    @Test
    public void testFindMaxWhenArrayHasMultipleElements() {
        // Test with normal input
        int[] array = {1, 3, 4, 2};
        int result = FindMax.findMax(array);
        assertEquals(4, result);
    }

    @Test
    public void testFindMaxWhenArrayHasOneElement() {
        // Test with single element array
        int[] array = {42};
        int result = FindMax.findMax(array);
        assertEquals(42, result);
    }

    @Test
    public void testFindMaxWithNegativeNumbers() {
        // Test with negative numbers
        int[] array = {-1, -3, -4, -2};
        int result = FindMax.findMax(array);
        assertEquals(-1, result);
    }

    @Test
    public void testFindMaxWithMixedNumbers() {
        // Test with a mix of negative and positive numbers
        int[] array = {-1, 3, -4, 2};
        int result = FindMax.findMax(array);
        assertEquals(3, result);
    }
    
    @Test 
    public void testFindMaxWithAllEqualElements() {
        // Test with all elements being equal
        int[] array = {7, 7, 7, 7};
        int result = FindMax.findMax(array);
        assertEquals(7, result);
    }

    @Test
    public void testFindMaxWhenArrayIsEmpty() {
        // Test with empty array
        int[] array = {};
        Exception exception = assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(array));
        assertEquals("Array must be non-empty.", exception.getMessage());
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {

    @Test
    public void findMaxTest() {
        // Test with a regular input
        int[] inputArray = {1, 5, 3, 4, 2};
        int expectedMax = 5;
        assertEquals(expectedMax, FindMax.findMax(inputArray));

        // Test with input having negative values
        int[] negativeArray = {-3, -1, -2, -5, -4};
        int expectedNegativeMax = -1;
        assertEquals(expectedNegativeMax, FindMax.findMax(negativeArray));

        // Test with input of size one
        int[] singleElementArray = {42};
        int expectedSingleElementMax = 42;
        assertEquals(expectedSingleElementMax, FindMax.findMax(singleElementArray));

        // Test with input having all equal values
        int[] equalElementsArray = {7, 7, 7, 7, 7};
        int expectedEqualElementMax = 7;
        assertEquals(expectedEqualElementMax, FindMax.findMax(equalElementsArray));
    }

    @Test
    public void findMaxEmptyArrayTest() {
        // Test with an empty array
        int[] emptyArray = {};

        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            FindMax.findMax(emptyArray);
        });

        String expectedMessage = "Array must be non-empty.";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(new int[]{}), "Array must be non-empty.");

        assertEquals(3, FindMax.findMax(new int[]{1, 2, 3}), "The max value in the array {1, 2, 3} should be 3");

        assertEquals(-1, FindMax.findMax(new int[]{-3, -2, -1}), "The max value in the array {-3, -2, -1} should be -1");

        assertEquals(0, FindMax.findMax(new int[]{0}), "The max value in a single-element array {0} should be 0");

        assertEquals(7, FindMax.findMax(new int[]{7, 3, 5, 6, 7}), "The max value in the array {7, 3, 5, 6, 7} should be 7");

        assertEquals(42, FindMax.findMax(new int[]{10, 22, 42, 11}), "The max value in the array {10, 22, 42, 11} should be 42");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {

    @Test
    public void findMaxWithNonEmptyArrayTest() {
        int[] array = {1, 2, 3, 4, 5};
        assertEquals(5, FindMax.findMax(array));
    }

    @Test
    public void findMaxWithSingleElementArrayTest() {
        int[] array = {42};
        assertEquals(42, FindMax.findMax(array));
    }

    @Test
    public void findMaxWithNegativeNumbersTest() {
        int[] array = {-3, -1, -2, -7, -5};
        assertEquals(-1, FindMax.findMax(array));
    }

    @Test
    public void findMaxWithAllIdenticalElementsTest() {
        int[] array = {7, 7, 7, 7};
        assertEquals(7, FindMax.findMax(array));
    }

    @Test
    public void findMaxWithMixedValuesTest() {
        int[] array = {-10, 30, 20, 0, -20};
        assertEquals(30, FindMax.findMax(array));
    }

    @Test
    public void findMaxWhenArrayIsEmptyTest() {
        int[] array = {};
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            FindMax.findMax(array);
        });

        String expectedMessage = "Array must be non-empty.";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void testFindMaxWithNonEmptyArray() {
        assertEquals(5, FindMax.findMax(new int[]{1, 3, 5, 4, 2}));
        assertEquals(-1, FindMax.findMax(new int[]{-3, -5, -4, -1, -2}));
        assertEquals(0, FindMax.findMax(new int[]{0}));
        assertEquals(42, FindMax.findMax(new int[]{42, -42, 0, 42, 42}));
    }

    @Test
    public void testFindMaxWithSingleElementArray() {
        assertEquals(7, FindMax.findMax(new int[]{7}));
    }

    @Test
    public void testFindMaxWithOrderedArray() {
        assertEquals(3, FindMax.findMax(new int[]{1, 2, 3}));
    }

    @Test
    public void testFindMaxWithSameElementsArray() {
        assertEquals(8, FindMax.findMax(new int[]{8, 8, 8, 8}));
    }

    @Test
    public void testFindMaxWithUnorderedArray() {
        assertEquals(9, FindMax.findMax(new int[]{6, 9, 3, 5, 1}));
    }

    @Test
    public void expectIllegalArgumentExceptionForEmptyArray() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            FindMax.findMax(new int[]{});
        });
        assertEquals("Array must be non-empty.", exception.getMessage());
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        assertThrows(IllegalArgumentException.class, 
            () -> FindMax.findMax(new int[]{}), "Array must be non-empty.");

        assertEquals(9, FindMax.findMax(new int[]{1, 4, 9, 3}), 
            "Max should be 9 for input {1, 4, 9, 3}");

        assertEquals(-1, FindMax.findMax(new int[]{-3, -5, -1, -8}), 
            "Max should be -1 for input {-3, -5, -1, -8}");

        assertEquals(0, FindMax.findMax(new int[]{0}), 
            "Max should be 0 for a single element array with element 0");

        assertEquals(1, FindMax.findMax(new int[]{1}), 
            "Max should be 1 for a single element array with element 1");

        assertEquals(50, FindMax.findMax(new int[]{8, 22, 50, 4}), 
            "Max should be 50 for input {8, 22, 50, 4}");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        assertThrows(IllegalArgumentException.class, () -> {
            FindMax.findMax(new int[]{});
        }, "Array must be non-empty.");

        assertEquals(9, FindMax.findMax(new int[]{1, 3, 5, 7, 9}), "Max should be 9 for the provided array");

        assertEquals(-1, FindMax.findMax(new int[]{-2, -5, -7, -1, -4}), "Max should be -1 for negative numbers in the array");

        assertEquals(0, FindMax.findMax(new int[]{-1, 0, -3}), "Max should be 0 when 0 is the highest number");

        assertEquals(1, FindMax.findMax(new int[]{1}), "Max should be 1 for a single-element array");
    }
}


