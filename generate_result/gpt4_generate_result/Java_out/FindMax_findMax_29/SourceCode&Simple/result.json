{
    "project_name": "Java",
    "file_name": "FindMax.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/FindMax.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * @brief finds the maximum value stored in the input array\n     *\n     * @param array the input array\n     * @exception IllegalArgumentException input array is empty\n     * @return the maximum value stored in the input array\n     */",
    "source_code": "\npublic static int findMax(final int[] array) {\n    int n = array.length;\n    if (n == 0) {\n        throw new IllegalArgumentException(\"Array must be non-empty.\");\n    }\n    int max = array[0];\n    for (int i = 1; i < n; i++) {\n        if (array[i] > max) {\n            max = array[i];\n        }\n    }\n    return max;\n}\n",
    "class_name": "FindMax",
    "method_name": "findMax",
    "arguments": [
        "int[] array"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void testFindMaxWithPositiveNumbers() {\n        int[] array = {1, 2, 3, 4, 5};\n        int result = FindMax.findMax(array);\n        assertEquals(5, result, \"The max of the positive numbers is incorrect\");\n    }\n\n    @Test\n    public void testFindMaxWithNegativeNumbers() {\n        int[] array = {-1, -2, -3, -4, -5};\n        int result = FindMax.findMax(array);\n        assertEquals(-1, result, \"The max of the negative numbers is incorrect\");\n    }\n\n    @Test\n    public void testFindMaxWithMixedNumbers() {\n        int[] array = {-1, 3, -5, 7, 0};\n        int result = FindMax.findMax(array);\n        assertEquals(7, result, \"The max of the mixed numbers is incorrect\");\n    }\n\n    @Test\n    public void testFindMaxWithSingleElement() {\n        int[] array = {42};\n        int result = FindMax.findMax(array);\n        assertEquals(42, result, \"The max of a single-element array is incorrect\");\n    }\n\n    @Test\n    public void testFindMaxEmptyArray() {\n        int[] array = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(array);\n        });\n        String expectedMessage = \"Array must be non-empty.\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage), \"Exception message is not correct\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void testFindMaxWithPositiveNumbers() {\n        int[] array = {1, 2, 3, 4, 5};\n        int expectedMax = 5;\n        int actualMax = FindMax.findMax(array);\n        assertEquals(expectedMax, actualMax, \"The max should be the last element which is 5.\");\n    }\n    \n    @Test\n    public void testFindMaxWithNegativeNumbers() {\n        int[] array = {-3, -1, -4, -12, -5};\n        int expectedMax = -1;\n        int actualMax = FindMax.findMax(array);\n        assertEquals(expectedMax, actualMax, \"The max should be the second element which is -1.\");\n    }\n    \n    @Test\n    public void testFindMaxWithMixedNumbers() {\n        int[] array = {10, 0, -5, 4, 7};\n        int expectedMax = 10;\n        int actualMax = FindMax.findMax(array);\n        assertEquals(expectedMax, actualMax, \"The max should be the first element which is 10.\");\n    }\n    \n    @Test\n    public void testFindMaxWithSingleElement() {\n        int[] array = {42};\n        int expectedMax = 42;\n        int actualMax = FindMax.findMax(array);\n        assertEquals(expectedMax, actualMax, \"The max should be the only element which is 42.\");\n    }\n    \n    @Test\n    public void testFindMaxThrowsExceptionForEmptyArray() {\n        int[] array = {};\n        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(array), \"Empty array should throw IllegalArgumentException.\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxTest() {\n        // Test with a regular array\n        assertEquals(5, FindMax.findMax(new int[]{1, 2, 3, 4, 5}), \"The maximum value should be 5\");\n\n        // Test with a single element array\n        assertEquals(1, FindMax.findMax(new int[]{1}), \"The maximum value with a single element should be that element itself\");\n\n        // Test with a negative numbers in the array\n        assertEquals(-1, FindMax.findMax(new int[]{-3, -1, -4, -2}), \"The maximum value should be -1\");\n\n        // Test with an unordered array\n        assertEquals(9, FindMax.findMax(new int[]{6, 3, 9, 5}), \"The maximum value should be 9\");\n\n        // Test with all elements being the same\n        assertEquals(7, FindMax.findMax(new int[]{7, 7, 7, 7}), \"The maximum value should be 7\");\n    }\n\n    @Test\n    public void findMaxEmptyArrayTest() {\n        // Test with an empty array\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(new int[]{});\n        });\n\n        assertEquals(\"Array must be non-empty.\", exception.getMessage(), \"IllegalArgumentException should be thrown for an empty array\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxWithMultipleValues() {\n        int[] array = {1, 3, 4, 2};\n        int result = FindMax.findMax(array);\n        assertEquals(4, result);\n    }\n\n    @Test\n    public void findMaxWithSingleValue() {\n        int[] array = {42};\n        int result = FindMax.findMax(array);\n        assertEquals(42, result);\n    }\n\n    @Test\n    public void findMaxWithNegatives() {\n        int[] array = {-3, -1, -2, -4};\n        int result = FindMax.findMax(array);\n        assertEquals(-1, result);\n    }\n\n    @Test\n    public void findMaxWithAllIdenticalValues() {\n        int[] array = {7, 7, 7, 7};\n        int result = FindMax.findMax(array);\n        assertEquals(7, result);\n    }\n\n    @Test\n    public void findMaxSortedArray() {\n        int[] array = {1, 2, 3, 4, 5};\n        int result = FindMax.findMax(array);\n        assertEquals(5, result);\n    }\n\n    @Test\n    public void findMaxReverseSortedArray() {\n        int[] array = {5, 4, 3, 2, 1};\n        int result = FindMax.findMax(array);\n        assertEquals(5, result);\n    }\n\n    @Test\n    public void findMaxRandomOrder() {\n        int[] array = {5, 1, 3, 2, 4};\n        int result = FindMax.findMax(array);\n        assertEquals(5, result);\n    }\n\n    @Test\n    public void findMaxWithDuplicates() {\n        int[] array = {1, 3, 3, 2, 4};\n        int result = FindMax.findMax(array);\n        assertEquals(4, result);\n    }\n\n    @Test\n    public void findMaxStartsWithMaxValue() {\n        int[] array = {5, 3, 2, 1, 4};\n        int result = FindMax.findMax(array);\n        assertEquals(5, result);\n    }\n\n    @Test\n    public void findMaxEndsWithMaxValue() {\n        int[] array = {1, 3, 2, 4, 5};\n        int result = FindMax.findMax(array);\n        assertEquals(5, result);\n    }\n\n    @Test\n    public void findMaxEmptyArrayThrowsException() {\n        int[] array = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(array);\n        });\n        assertEquals(\"Array must be non-empty.\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        // Test for an array with multiple elements\n        assertEquals(5, FindMax.findMax(new int[]{1, 3, 4, 5, 2}));\n        // Test for an array with one element\n        assertEquals(1, FindMax.findMax(new int[]{1}));\n        // Test to ensure it finds the maximum when the max value is at the beginning\n        assertEquals(10, FindMax.findMax(new int[]{10, 0, 1, 2, 3, 4}));\n        // Test to ensure it finds the maximum when the max value is at the end\n        assertEquals(100, FindMax.findMax(new int[]{10, 20, 30, 100}));\n    }\n\n    @Test\n    public void findMaxEmptyArrayTest() {\n        // Test for an empty array to check if the appropriate exception is thrown\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(new int[]{});\n        });\n        assertTrue(exception.getMessage().contains(\"Array must be non-empty.\"));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    \n    @Test\n    public void findMaxWithArrayOfIntegers() {\n        // Testing with an array of positive and negative integers\n        int[] arrayOfInts = {-1, 5, 13, 2, 8, 3};\n        int expectedMax = 13;\n        assertEquals(expectedMax, FindMax.findMax(arrayOfInts), \"The max should be \" + expectedMax);\n    }\n    \n    @Test\n    public void findMaxWithSingleElement() {\n        // Testing with an array containing a single element\n        int[] singleElementArray = {42};\n        int expectedMax = 42;\n        assertEquals(expectedMax, FindMax.findMax(singleElementArray), \"The max should be \" + expectedMax);\n    }\n    \n    @Test\n    public void findMaxWithNegativeNumbers() {\n        // Testing with an array of all negative numbers\n        int[] negativeNumbersArray = {-3, -7, -1, -5, -9};\n        int expectedMax = -1;\n        assertEquals(expectedMax, FindMax.findMax(negativeNumbersArray), \"The max should be \" + expectedMax);\n    }\n    \n    @Test\n    public void findMaxThrowsExceptionForEmptyArray() {\n        // Testing with an empty array. Should throw IllegalArgumentException.\n        int[] emptyArray = {};\n        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(emptyArray), \"Should throw IllegalArgumentException for an empty array\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void testFindMaxWithPositiveNumbers() {\n        assertEquals(9, FindMax.findMax(new int[] {1, 3, 5, 7, 9}));\n    }\n\n    @Test\n    public void testFindMaxWithNegativeNumbers() {\n        assertEquals(-1, FindMax.findMax(new int[] {-10, -5, -3, -1}));\n    }\n\n    @Test\n    public void testFindMaxWithMixedNumbers() {\n        assertEquals(15, FindMax.findMax(new int[] {-8, 7, 15, -9, 0}));\n    }\n\n    @Test\n    public void testFindMaxWithSingleElement() {\n        assertEquals(42, FindMax.findMax(new int[] {42}));\n    }\n\n    @Test\n    public void testFindMaxWithAllEqualElements() {\n        assertEquals(7, FindMax.findMax(new int[] {7, 7, 7, 7}));\n    }\n\n    @Test\n    public void testFindMaxWithEmptyArray() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(new int[] {});\n        });\n\n        String expectedMessage = \"Array must be non-empty.\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    \n    @Test\n    public void findMaxTestWithValidArray() {\n        // Test with a valid array containing multiple elements\n        int[] array = {1, 5, 3, 7, 4};\n        int expectedMax = 7;\n        assertEquals(expectedMax, FindMax.findMax(array), \"The max value should be 7\");\n    }\n\n    @Test\n    public void findMaxTestWithSingleElement() {\n        // Test with an array containing a single element\n        int[] array = {10};\n        int expectedMax = 10;\n        assertEquals(expectedMax, FindMax.findMax(array), \"The max value should be 10 when array has a single element\");\n    }\n\n    @Test\n    public void findMaxTestWithNegativeNumbers() {\n        // Test with an array containing negative numbers\n        int[] array = {-2, -8, -4, -1};\n        int expectedMax = -1;\n        assertEquals(expectedMax, FindMax.findMax(array), \"The max value should be -1 when array contains only negative numbers\");\n    }\n\n    @Test\n    public void findMaxTestWithAllEqualElements() {\n        // Test with an array where all elements are equal\n        int[] array = {3, 3, 3, 3, 3};\n        int expectedMax = 3;\n        assertEquals(expectedMax, FindMax.findMax(array), \"The max value should be 3 when all elements are equal\");\n    }\n\n    @Test\n    public void findMaxTestWithEmptyArray() {\n        // Test with an empty array to check if it throws the correct exception\n        int[] array = {};\n        assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(array);\n        }, \"A IllegalArgumentException should be thrown when array is empty\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void whenArrayIsNotEmpty_thenFindMaxReturnsCorrectValue() {\n        // given a non-empty array\n        int[] testArray = {1, 3, 4, 2, 5, 0};\n        \n        // when we find maximum of array\n        int result = FindMax.findMax(testArray);\n\n        // then the correct maximum is returned\n        assertEquals(5, result);\n    }\n\n    @Test\n    public void whenArrayContainsOneElement_thenFindMaxReturnsThatElement() {\n        // given an array with a single element\n        int[] singleElementArray = {42};\n        \n        // when we find maximum of array\n        int result = FindMax.findMax(singleElementArray);\n\n        // then the correct maximum, which is the element itself, is returned\n        assertEquals(42, result);\n    }\n\n    @Test\n    public void whenArrayIsNotEmptyAndContainsNegatives_thenFindMaxReturnsCorrectValue() {\n        // given a non-empty array with negative numbers\n        int[] arrayWithNegatives = {-1, -3, -4, -2, -5, 0};\n        \n        // when we find maximum of array\n        int result = FindMax.findMax(arrayWithNegatives);\n\n        // then the correct maximum is returned (which is 0 in this case)\n        assertEquals(0, result);\n    }\n\n    @Test\n    public void whenArrayIsEmpty_thenIllegalArgumentExceptionIsThrown() {\n        // given an empty array\n        int[] emptyArray = {};\n\n        // when we try finding maximum of array, an exception is thrown\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(emptyArray);\n        });\n\n        // then verify if the correct message is received\n        assertEquals(\"Array must be non-empty.\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxTest() {\n        // Test with a regular array\n        assertEquals(9, FindMax.findMax(new int[]{1, 3, 5, 9, 2}));\n\n        // Test with a single element array\n        assertEquals(1, FindMax.findMax(new int[]{1}));\n\n        // Test with negative numbers\n        assertEquals(-1, FindMax.findMax(new int[]{-5, -3, -1, -4}));\n\n        // Test with all elements being the same\n        assertEquals(7, FindMax.findMax(new int[]{7, 7, 7, 7, 7}));\n\n        // Test that it throws the expected exception when the array is empty\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(new int[]{});\n        });\n        assertEquals(\"Array must be non-empty.\", exception.getMessage());\n    }\n}"
    ]
}