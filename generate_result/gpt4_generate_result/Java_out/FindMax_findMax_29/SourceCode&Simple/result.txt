Source code: 


public static int findMax(final int[] array) {
    int n = array.length;
    if (n == 0) {
        throw new IllegalArgumentException("Array must be non-empty.");
    }
    int max = array[0];
    for (int i = 1; i < n; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    return max;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {

    @Test
    public void testFindMaxWithPositiveNumbers() {
        int[] array = {1, 2, 3, 4, 5};
        int result = FindMax.findMax(array);
        assertEquals(5, result, "The max of the positive numbers is incorrect");
    }

    @Test
    public void testFindMaxWithNegativeNumbers() {
        int[] array = {-1, -2, -3, -4, -5};
        int result = FindMax.findMax(array);
        assertEquals(-1, result, "The max of the negative numbers is incorrect");
    }

    @Test
    public void testFindMaxWithMixedNumbers() {
        int[] array = {-1, 3, -5, 7, 0};
        int result = FindMax.findMax(array);
        assertEquals(7, result, "The max of the mixed numbers is incorrect");
    }

    @Test
    public void testFindMaxWithSingleElement() {
        int[] array = {42};
        int result = FindMax.findMax(array);
        assertEquals(42, result, "The max of a single-element array is incorrect");
    }

    @Test
    public void testFindMaxEmptyArray() {
        int[] array = {};
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            FindMax.findMax(array);
        });
        String expectedMessage = "Array must be non-empty.";
        String actualMessage = exception.getMessage();
        assertTrue(actualMessage.contains(expectedMessage), "Exception message is not correct");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {

    @Test
    public void testFindMaxWithPositiveNumbers() {
        int[] array = {1, 2, 3, 4, 5};
        int expectedMax = 5;
        int actualMax = FindMax.findMax(array);
        assertEquals(expectedMax, actualMax, "The max should be the last element which is 5.");
    }
    
    @Test
    public void testFindMaxWithNegativeNumbers() {
        int[] array = {-3, -1, -4, -12, -5};
        int expectedMax = -1;
        int actualMax = FindMax.findMax(array);
        assertEquals(expectedMax, actualMax, "The max should be the second element which is -1.");
    }
    
    @Test
    public void testFindMaxWithMixedNumbers() {
        int[] array = {10, 0, -5, 4, 7};
        int expectedMax = 10;
        int actualMax = FindMax.findMax(array);
        assertEquals(expectedMax, actualMax, "The max should be the first element which is 10.");
    }
    
    @Test
    public void testFindMaxWithSingleElement() {
        int[] array = {42};
        int expectedMax = 42;
        int actualMax = FindMax.findMax(array);
        assertEquals(expectedMax, actualMax, "The max should be the only element which is 42.");
    }
    
    @Test
    public void testFindMaxThrowsExceptionForEmptyArray() {
        int[] array = {};
        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(array), "Empty array should throw IllegalArgumentException.");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {

    @Test
    public void findMaxTest() {
        // Test with a regular array
        assertEquals(5, FindMax.findMax(new int[]{1, 2, 3, 4, 5}), "The maximum value should be 5");

        // Test with a single element array
        assertEquals(1, FindMax.findMax(new int[]{1}), "The maximum value with a single element should be that element itself");

        // Test with a negative numbers in the array
        assertEquals(-1, FindMax.findMax(new int[]{-3, -1, -4, -2}), "The maximum value should be -1");

        // Test with an unordered array
        assertEquals(9, FindMax.findMax(new int[]{6, 3, 9, 5}), "The maximum value should be 9");

        // Test with all elements being the same
        assertEquals(7, FindMax.findMax(new int[]{7, 7, 7, 7}), "The maximum value should be 7");
    }

    @Test
    public void findMaxEmptyArrayTest() {
        // Test with an empty array
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            FindMax.findMax(new int[]{});
        });

        assertEquals("Array must be non-empty.", exception.getMessage(), "IllegalArgumentException should be thrown for an empty array");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {

    @Test
    public void findMaxWithMultipleValues() {
        int[] array = {1, 3, 4, 2};
        int result = FindMax.findMax(array);
        assertEquals(4, result);
    }

    @Test
    public void findMaxWithSingleValue() {
        int[] array = {42};
        int result = FindMax.findMax(array);
        assertEquals(42, result);
    }

    @Test
    public void findMaxWithNegatives() {
        int[] array = {-3, -1, -2, -4};
        int result = FindMax.findMax(array);
        assertEquals(-1, result);
    }

    @Test
    public void findMaxWithAllIdenticalValues() {
        int[] array = {7, 7, 7, 7};
        int result = FindMax.findMax(array);
        assertEquals(7, result);
    }

    @Test
    public void findMaxSortedArray() {
        int[] array = {1, 2, 3, 4, 5};
        int result = FindMax.findMax(array);
        assertEquals(5, result);
    }

    @Test
    public void findMaxReverseSortedArray() {
        int[] array = {5, 4, 3, 2, 1};
        int result = FindMax.findMax(array);
        assertEquals(5, result);
    }

    @Test
    public void findMaxRandomOrder() {
        int[] array = {5, 1, 3, 2, 4};
        int result = FindMax.findMax(array);
        assertEquals(5, result);
    }

    @Test
    public void findMaxWithDuplicates() {
        int[] array = {1, 3, 3, 2, 4};
        int result = FindMax.findMax(array);
        assertEquals(4, result);
    }

    @Test
    public void findMaxStartsWithMaxValue() {
        int[] array = {5, 3, 2, 1, 4};
        int result = FindMax.findMax(array);
        assertEquals(5, result);
    }

    @Test
    public void findMaxEndsWithMaxValue() {
        int[] array = {1, 3, 2, 4, 5};
        int result = FindMax.findMax(array);
        assertEquals(5, result);
    }

    @Test
    public void findMaxEmptyArrayThrowsException() {
        int[] array = {};
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            FindMax.findMax(array);
        });
        assertEquals("Array must be non-empty.", exception.getMessage());
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        // Test for an array with multiple elements
        assertEquals(5, FindMax.findMax(new int[]{1, 3, 4, 5, 2}));
        // Test for an array with one element
        assertEquals(1, FindMax.findMax(new int[]{1}));
        // Test to ensure it finds the maximum when the max value is at the beginning
        assertEquals(10, FindMax.findMax(new int[]{10, 0, 1, 2, 3, 4}));
        // Test to ensure it finds the maximum when the max value is at the end
        assertEquals(100, FindMax.findMax(new int[]{10, 20, 30, 100}));
    }

    @Test
    public void findMaxEmptyArrayTest() {
        // Test for an empty array to check if the appropriate exception is thrown
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            FindMax.findMax(new int[]{});
        });
        assertTrue(exception.getMessage().contains("Array must be non-empty."));
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    
    @Test
    public void findMaxWithArrayOfIntegers() {
        // Testing with an array of positive and negative integers
        int[] arrayOfInts = {-1, 5, 13, 2, 8, 3};
        int expectedMax = 13;
        assertEquals(expectedMax, FindMax.findMax(arrayOfInts), "The max should be " + expectedMax);
    }
    
    @Test
    public void findMaxWithSingleElement() {
        // Testing with an array containing a single element
        int[] singleElementArray = {42};
        int expectedMax = 42;
        assertEquals(expectedMax, FindMax.findMax(singleElementArray), "The max should be " + expectedMax);
    }
    
    @Test
    public void findMaxWithNegativeNumbers() {
        // Testing with an array of all negative numbers
        int[] negativeNumbersArray = {-3, -7, -1, -5, -9};
        int expectedMax = -1;
        assertEquals(expectedMax, FindMax.findMax(negativeNumbersArray), "The max should be " + expectedMax);
    }
    
    @Test
    public void findMaxThrowsExceptionForEmptyArray() {
        // Testing with an empty array. Should throw IllegalArgumentException.
        int[] emptyArray = {};
        assertThrows(IllegalArgumentException.class, () -> FindMax.findMax(emptyArray), "Should throw IllegalArgumentException for an empty array");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void testFindMaxWithPositiveNumbers() {
        assertEquals(9, FindMax.findMax(new int[] {1, 3, 5, 7, 9}));
    }

    @Test
    public void testFindMaxWithNegativeNumbers() {
        assertEquals(-1, FindMax.findMax(new int[] {-10, -5, -3, -1}));
    }

    @Test
    public void testFindMaxWithMixedNumbers() {
        assertEquals(15, FindMax.findMax(new int[] {-8, 7, 15, -9, 0}));
    }

    @Test
    public void testFindMaxWithSingleElement() {
        assertEquals(42, FindMax.findMax(new int[] {42}));
    }

    @Test
    public void testFindMaxWithAllEqualElements() {
        assertEquals(7, FindMax.findMax(new int[] {7, 7, 7, 7}));
    }

    @Test
    public void testFindMaxWithEmptyArray() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            FindMax.findMax(new int[] {});
        });

        String expectedMessage = "Array must be non-empty.";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    
    @Test
    public void findMaxTestWithValidArray() {
        // Test with a valid array containing multiple elements
        int[] array = {1, 5, 3, 7, 4};
        int expectedMax = 7;
        assertEquals(expectedMax, FindMax.findMax(array), "The max value should be 7");
    }

    @Test
    public void findMaxTestWithSingleElement() {
        // Test with an array containing a single element
        int[] array = {10};
        int expectedMax = 10;
        assertEquals(expectedMax, FindMax.findMax(array), "The max value should be 10 when array has a single element");
    }

    @Test
    public void findMaxTestWithNegativeNumbers() {
        // Test with an array containing negative numbers
        int[] array = {-2, -8, -4, -1};
        int expectedMax = -1;
        assertEquals(expectedMax, FindMax.findMax(array), "The max value should be -1 when array contains only negative numbers");
    }

    @Test
    public void findMaxTestWithAllEqualElements() {
        // Test with an array where all elements are equal
        int[] array = {3, 3, 3, 3, 3};
        int expectedMax = 3;
        assertEquals(expectedMax, FindMax.findMax(array), "The max value should be 3 when all elements are equal");
    }

    @Test
    public void findMaxTestWithEmptyArray() {
        // Test with an empty array to check if it throws the correct exception
        int[] array = {};
        assertThrows(IllegalArgumentException.class, () -> {
            FindMax.findMax(array);
        }, "A IllegalArgumentException should be thrown when array is empty");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {

    @Test
    public void whenArrayIsNotEmpty_thenFindMaxReturnsCorrectValue() {
        // given a non-empty array
        int[] testArray = {1, 3, 4, 2, 5, 0};
        
        // when we find maximum of array
        int result = FindMax.findMax(testArray);

        // then the correct maximum is returned
        assertEquals(5, result);
    }

    @Test
    public void whenArrayContainsOneElement_thenFindMaxReturnsThatElement() {
        // given an array with a single element
        int[] singleElementArray = {42};
        
        // when we find maximum of array
        int result = FindMax.findMax(singleElementArray);

        // then the correct maximum, which is the element itself, is returned
        assertEquals(42, result);
    }

    @Test
    public void whenArrayIsNotEmptyAndContainsNegatives_thenFindMaxReturnsCorrectValue() {
        // given a non-empty array with negative numbers
        int[] arrayWithNegatives = {-1, -3, -4, -2, -5, 0};
        
        // when we find maximum of array
        int result = FindMax.findMax(arrayWithNegatives);

        // then the correct maximum is returned (which is 0 in this case)
        assertEquals(0, result);
    }

    @Test
    public void whenArrayIsEmpty_thenIllegalArgumentExceptionIsThrown() {
        // given an empty array
        int[] emptyArray = {};

        // when we try finding maximum of array, an exception is thrown
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            FindMax.findMax(emptyArray);
        });

        // then verify if the correct message is received
        assertEquals("Array must be non-empty.", exception.getMessage());
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {

    @Test
    public void findMaxTest() {
        // Test with a regular array
        assertEquals(9, FindMax.findMax(new int[]{1, 3, 5, 9, 2}));

        // Test with a single element array
        assertEquals(1, FindMax.findMax(new int[]{1}));

        // Test with negative numbers
        assertEquals(-1, FindMax.findMax(new int[]{-5, -3, -1, -4}));

        // Test with all elements being the same
        assertEquals(7, FindMax.findMax(new int[]{7, 7, 7, 7, 7}));

        // Test that it throws the expected exception when the array is empty
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            FindMax.findMax(new int[]{});
        });
        assertEquals("Array must be non-empty.", exception.getMessage());
    }
}


