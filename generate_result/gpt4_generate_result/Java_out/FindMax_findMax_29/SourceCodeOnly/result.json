{
    "project_name": "Java",
    "file_name": "FindMax.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/FindMax.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * @brief finds the maximum value stored in the input array\n     *\n     * @param array the input array\n     * @exception IllegalArgumentException input array is empty\n     * @return the maximum value stored in the input array\n     */",
    "source_code": "\npublic static int findMax(final int[] array) {\n    int n = array.length;\n    if (n == 0) {\n        throw new IllegalArgumentException(\"Array must be non-empty.\");\n    }\n    int max = array[0];\n    for (int i = 1; i < n; i++) {\n        if (array[i] > max) {\n            max = array[i];\n        }\n    }\n    return max;\n}\n",
    "class_name": "FindMax",
    "method_name": "findMax",
    "arguments": [
        "int[] array"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    \n    @Test\n    public void testFindMaxWithNormalArray() {\n        int[] array = { 1, 3, 4, 2 };\n        int result = ArrayMax.findMax(array);\n        assertEquals(4, result, \"The max of the array should be 4\");\n    }\n    \n    @Test\n    public void testFindMaxWithAllEqualElements() {\n        int[] array = { 2, 2, 2, 2 };\n        int result = ArrayMax.findMax(array);\n        assertEquals(2, result, \"The max of the array should be 2\");\n    }\n\n    @Test\n    public void testFindMaxWithSingleElement() {\n        int[] array = { 99 };\n        int result = ArrayMax.findMax(array);\n        assertEquals(99, result, \"The max of an array with a single element should be the element itself\");\n    }\n\n    @Test\n    public void testFindMaxWithNegativeNumbers() {\n        int[] array = { -3, -1, -4, -2 };\n        int result = ArrayMax.findMax(array);\n        assertEquals(-1, result, \"The max of the array with negative numbers should be -1\");\n    }\n\n    @Test\n    public void testFindMaxWithMixedNumbers() {\n        int[] array = { -5, 0, 4, -1, 3 };\n        int result = ArrayMax.findMax(array);\n        assertEquals(4, result, \"The max of the mixed number array should be 4\");\n    }\n\n    // This test is expected to throw an IllegalArgumentException because the input array is empty\n    @Test\n    public void testFindMaxWithEmptyArray() {\n        int[] array = {};\n        assertThrows(IllegalArgumentException.class, () -> {\n            ArrayMax.findMax(array);\n        }, \"The method should throw an IllegalArgumentException for empty array\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void testFindMaxWithPositiveNumbers() {\n        int[] array = {1, 2, 3, 4, 5};\n        assertEquals(5, SampleClass.findMax(array), \"The max of positive numbers should be 5\");\n    }\n\n    @Test\n    public void testFindMaxWithNegativeNumbers() {\n        int[] array = {-3, -1, -4, -2, -5};\n        assertEquals(-1, SampleClass.findMax(array), \"The max of negative numbers should be -1\");\n    }\n\n    @Test\n    public void testFindMaxWithMixedNumbers() {\n        int[] array = {-3, 0, 2, -8, 4};\n        assertEquals(4, SampleClass.findMax(array), \"The max of mixed numbers should be 4\");\n    }\n\n    @Test\n    public void testFindMaxWithSingleElement() {\n        int[] array = {42};\n        assertEquals(42, SampleClass.findMax(array), \"The max of single element array should be the element itself\");\n    }\n\n    @Test\n    public void testFindMaxThrowsExceptionForEmptyArray() {\n        int[] array = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> SampleClass.findMax(array));\n        assertEquals(\"Array must be non-empty.\", exception.getMessage(), \"An empty array should throw IllegalArgumentException\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    \n    @Test\n    public void whenArrayHasMultipleElements_thenFindMax() {\n        assertEquals(9, FindMax.findMax(new int[]{1, 3, 7, 9}));\n    }\n    \n    @Test\n    public void whenArrayHasOneElement_thenElementIsMax() {\n        assertEquals(1, FindMax.findMax(new int[]{1}));\n    }\n    \n    @Test\n    public void whenArrayHasNegativeElements_thenFindMax() {\n        assertEquals(-1, FindMax.findMax(new int[]{-3, -7, -9, -1}));\n    }\n    \n    @Test\n    public void whenArrayHasAllElementsSame_thenAnyElementIsMax() {\n        assertEquals(5, FindMax.findMax(new int[]{5, 5, 5, 5}));\n    }\n    \n    @Test\n    public void whenArrayIsEmpty_thenThrowException() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(new int[]{});\n        });\n        \n        assertEquals(\"Array must be non-empty.\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxWithValidInput() {\n        assertEquals(5, MaxFinder.findMax(new int[]{1, 2, 5, 4, 3}));\n        assertEquals(-1, MaxFinder.findMax(new int[]{-3, -4, -2, -1, -5}));\n        assertEquals(0, MaxFinder.findMax(new int[]{0}));\n        assertEquals(10, MaxFinder.findMax(new int[]{10, -10, 5, 0}));\n    }\n\n    @Test\n    public void findMaxWithSingleElement() {\n        assertEquals(7, MaxFinder.findMax(new int[]{7}));\n    }\n\n    @Test\n    public void findMaxWithAscendingOrder() {\n        assertEquals(9, MaxFinder.findMax(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9}));\n    }\n\n    @Test\n    public void findMaxWithDescendingOrder() {\n        assertEquals(9, MaxFinder.findMax(new int[]{9, 8, 7, 6, 5, 4, 3, 2, 1}));\n    }\n\n    @Test\n    public void findMaxWithDuplicates() {\n        assertEquals(5, MaxFinder.findMax(new int[]{1, 3, 5, 5, 2}));\n    }\n\n    @Test\n    public void findMaxWithAllNegativeNumbers() {\n        assertEquals(-1, MaxFinder.findMax(new int[]{-5, -8, -2, -15, -1}));\n    }\n\n    @Test\n    public void findMaxWithMixedValues() {\n        assertEquals(15, MaxFinder.findMax(new int[]{1, -4, 0, 15, 8}));\n    }\n\n    @Test\n    public void findMaxThrowsExceptionForEmptyArray() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MaxFinder.findMax(new int[]{});\n        });\n        assertEquals(\"Array must be non-empty.\", exception.getMessage());\n    }\n}\n\n// Assuming the class that contains findMax method is called \"MaxFinder\"",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxTestWithNonEmptyArray() {\n        // Testing with a standard array\n        assertEquals(7, Main.findMax(new int[]{1, 3, 7, 2}));\n    }\n\n    @Test\n    public void findMaxTestWithSingleElementArray() {\n        // Testing with an array containing a single element\n        assertEquals(1, Main.findMax(new int[]{1}));\n    }\n    \n    @Test\n    public void findMaxTestWithNegativeNumbers() {\n        // Testing with negative numbers\n        assertEquals(-1, Main.findMax(new int[]{-1, -3, -7, -2}));\n    }\n\n    @Test\n    public void findMaxTestWithAllEqualElements() {\n        // Testing with all elements equal\n        assertEquals(4, Main.findMax(new int[]{4, 4, 4, 4}));\n    }\n\n    @Test\n    public void findMaxTestWithMaxValueAtFirstPosition() {\n        // Testing with the max value at the first position\n        assertEquals(9, Main.findMax(new int[]{9, 3, 2, 5}));\n    }\n\n    @Test\n    public void findMaxTestWithMaxValueAtLastPosition() {\n        // Testing with the max value at the last position\n        assertEquals(6, Main.findMax(new int[]{1, 2, 3, 6}));\n    }\n\n    @Test\n    public void findMaxTestWithZeroLengthArray() {\n        // Testing with an empty array, which should throw an exception\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Main.findMax(new int[]{});\n        });\n        assertEquals(\"Array must be non-empty.\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxWithPositiveNumbersTest() {\n        int[] positiveArray = {1, 2, 3, 4, 5};\n        assertEquals(5, TheAlgorithmsSourceCode.findMax(positiveArray));\n    }\n\n    @Test\n    public void findMaxWithAllNegativeNumbersTest() {\n        int[] negativeArray = {-10, -50, -30, -40};\n        assertEquals(-10, TheAlgorithmsSourceCode.findMax(negativeArray));\n    }\n\n    @Test\n    public void findMaxWithMixedNumbersTest() {\n        int[] mixedArray = {-10, 20, -30, 40, 0};\n        assertEquals(40, TheAlgorithmsSourceCode.findMax(mixedArray));\n    }\n\n    @Test\n    public void findMaxWithSingleElementTest() {\n        int[] singleElementArray = {42};\n        assertEquals(42, TheAlgorithmsSourceCode.findMax(singleElementArray));\n    }\n\n    @Test\n    public void findMaxThrowsExceptionForEmptyArrayTest() {\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            int[] emptyArray = {};\n            TheAlgorithmsSourceCode.findMax(emptyArray);\n        });\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxTest() {\n        // Normal case\n        int[] normalArray = {1, 3, 4, 2};\n        assertEquals(4, FindMax.findMax(normalArray), \"The maximum of the normal case should be 4.\");\n        \n        // Case where the max value is at the beginning\n        int[] maxAtBeginningArray = {5, 4, 3, 2};\n        assertEquals(5, FindMax.findMax(maxAtBeginningArray), \"The maximum when it's at the beginning should be 5.\");\n        \n        // Case where the max value is at the end\n        int[] maxAtEndArray = {1, 2, 3, 10};\n        assertEquals(10, FindMax.findMax(maxAtEndArray), \"The maximum when it's at the end should be 10.\");\n        \n        // Single element case\n        int[] singleElementArray = {7};\n        assertEquals(7, FindMax.findMax(singleElementArray), \"The maximum of a single-element array should be the element itself.\");\n        \n        // All elements are the same\n        int[] allSameArray = {2, 2, 2, 2};\n        assertEquals(2, FindMax.findMax(allSameArray), \"The maximum of an array with all same elements should be the element itself.\");\n        \n        // Exception case for empty array\n        int[] emptyArray = {};\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            FindMax.findMax(emptyArray);\n        }, \"An empty array should throw an IllegalArgumentException.\");\n        assertEquals(\"Array must be non-empty.\", exception.getMessage(), \"The exception message must match the expected string.\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxWithMultipleElementsTest() {\n        assertAll(\"Testing findMax method with multiple elements\",\n            () -> assertEquals(5, YourClassName.findMax(new int[]{1, 2, 5, 4, 3})),\n            () -> assertEquals(-1, YourClassName.findMax(new int[]{-3, -1, -2, -4})),\n            () -> assertEquals(0, YourClassName.findMax(new int[]{0, 0, 0, 0}))\n        );\n    }\n\n    @Test\n    public void findMaxWithSingleElementTest() {\n        assertEquals(42, YourClassName.findMax(new int[]{42}));\n    }\n\n    @Test\n    public void findMaxWithEmptyArrayTest() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            YourClassName.findMax(new int[]{});\n        });\n        assertEquals(\"Array must be non-empty.\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        // Test with a normal array\n        assertEquals(9, Maths.findMax(new int[]{1, 3, 5, 7, 9}));\n\n        // Test with an array that has negative numbers\n        assertEquals(4, Maths.findMax(new int[]{-8, -4, 1, 4}));\n\n        // Test with an array of a single element\n        assertEquals(42, Maths.findMax(new int[]{42}));\n\n        // Test with an array where max is at the beginning\n        assertEquals(100, Maths.findMax(new int[]{100, 90, 10, 50}));\n\n        // Test with an array where max is at the end\n        assertEquals(77, Maths.findMax(new int[]{1, 2, 3, 77}));\n\n        // Test with an array that is already sorted\n        assertEquals(6, Maths.findMax(new int[]{1, 2, 3, 4, 5, 6}));\n\n        // Test with an array that is sorted in descending order\n        assertEquals(10, Maths.findMax(new int[]{10, 8, 6, 4, 2, 0}));\n\n        // Test with all elements equal\n        assertEquals(7, Maths.findMax(new int[]{7, 7, 7, 7}));\n    }\n\n    @Test\n    public void findMaxTestWithEmptyArray() {\n        // Test with an empty array, should throw an exception\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            Maths.findMax(new int[]{});\n        });\n        assertEquals(\"Array must be non-empty.\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n\n    @Test\n    public void findMaxWithMultipleElements() {\n        assertEquals(9, MathUtils.findMax(new int[]{1, 3, 5, 7, 9}), \"The max in the array should be 9\");\n    }\n\n    @Test\n    public void findMaxWithMaximumAtBeginning() {\n        assertEquals(10, MathUtils.findMax(new int[]{10, 3, 4, 2, 7}), \"The max at the beginning of the array should be 10\");\n    }\n\n    @Test\n    public void findMaxWithEmptyArray() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            MathUtils.findMax(new int[]{});\n        });\n        assertEquals(\"Array must be non-empty.\", exception.getMessage(), \"An empty array should throw an IllegalArgumentException\");\n    }\n}\n"
    ]
}