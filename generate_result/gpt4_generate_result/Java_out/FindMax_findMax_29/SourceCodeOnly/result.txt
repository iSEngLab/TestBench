Source code: 


public static int findMax(final int[] array) {
    int n = array.length;
    if (n == 0) {
        throw new IllegalArgumentException("Array must be non-empty.");
    }
    int max = array[0];
    for (int i = 1; i < n; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    return max;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    
    @Test
    public void testFindMaxWithNormalArray() {
        int[] array = { 1, 3, 4, 2 };
        int result = ArrayMax.findMax(array);
        assertEquals(4, result, "The max of the array should be 4");
    }
    
    @Test
    public void testFindMaxWithAllEqualElements() {
        int[] array = { 2, 2, 2, 2 };
        int result = ArrayMax.findMax(array);
        assertEquals(2, result, "The max of the array should be 2");
    }

    @Test
    public void testFindMaxWithSingleElement() {
        int[] array = { 99 };
        int result = ArrayMax.findMax(array);
        assertEquals(99, result, "The max of an array with a single element should be the element itself");
    }

    @Test
    public void testFindMaxWithNegativeNumbers() {
        int[] array = { -3, -1, -4, -2 };
        int result = ArrayMax.findMax(array);
        assertEquals(-1, result, "The max of the array with negative numbers should be -1");
    }

    @Test
    public void testFindMaxWithMixedNumbers() {
        int[] array = { -5, 0, 4, -1, 3 };
        int result = ArrayMax.findMax(array);
        assertEquals(4, result, "The max of the mixed number array should be 4");
    }

    // This test is expected to throw an IllegalArgumentException because the input array is empty
    @Test
    public void testFindMaxWithEmptyArray() {
        int[] array = {};
        assertThrows(IllegalArgumentException.class, () -> {
            ArrayMax.findMax(array);
        }, "The method should throw an IllegalArgumentException for empty array");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {

    @Test
    public void testFindMaxWithPositiveNumbers() {
        int[] array = {1, 2, 3, 4, 5};
        assertEquals(5, SampleClass.findMax(array), "The max of positive numbers should be 5");
    }

    @Test
    public void testFindMaxWithNegativeNumbers() {
        int[] array = {-3, -1, -4, -2, -5};
        assertEquals(-1, SampleClass.findMax(array), "The max of negative numbers should be -1");
    }

    @Test
    public void testFindMaxWithMixedNumbers() {
        int[] array = {-3, 0, 2, -8, 4};
        assertEquals(4, SampleClass.findMax(array), "The max of mixed numbers should be 4");
    }

    @Test
    public void testFindMaxWithSingleElement() {
        int[] array = {42};
        assertEquals(42, SampleClass.findMax(array), "The max of single element array should be the element itself");
    }

    @Test
    public void testFindMaxThrowsExceptionForEmptyArray() {
        int[] array = {};
        Exception exception = assertThrows(IllegalArgumentException.class, () -> SampleClass.findMax(array));
        assertEquals("Array must be non-empty.", exception.getMessage(), "An empty array should throw IllegalArgumentException");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    
    @Test
    public void whenArrayHasMultipleElements_thenFindMax() {
        assertEquals(9, FindMax.findMax(new int[]{1, 3, 7, 9}));
    }
    
    @Test
    public void whenArrayHasOneElement_thenElementIsMax() {
        assertEquals(1, FindMax.findMax(new int[]{1}));
    }
    
    @Test
    public void whenArrayHasNegativeElements_thenFindMax() {
        assertEquals(-1, FindMax.findMax(new int[]{-3, -7, -9, -1}));
    }
    
    @Test
    public void whenArrayHasAllElementsSame_thenAnyElementIsMax() {
        assertEquals(5, FindMax.findMax(new int[]{5, 5, 5, 5}));
    }
    
    @Test
    public void whenArrayIsEmpty_thenThrowException() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            FindMax.findMax(new int[]{});
        });
        
        assertEquals("Array must be non-empty.", exception.getMessage());
    }
}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxWithValidInput() {
        assertEquals(5, MaxFinder.findMax(new int[]{1, 2, 5, 4, 3}));
        assertEquals(-1, MaxFinder.findMax(new int[]{-3, -4, -2, -1, -5}));
        assertEquals(0, MaxFinder.findMax(new int[]{0}));
        assertEquals(10, MaxFinder.findMax(new int[]{10, -10, 5, 0}));
    }

    @Test
    public void findMaxWithSingleElement() {
        assertEquals(7, MaxFinder.findMax(new int[]{7}));
    }

    @Test
    public void findMaxWithAscendingOrder() {
        assertEquals(9, MaxFinder.findMax(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9}));
    }

    @Test
    public void findMaxWithDescendingOrder() {
        assertEquals(9, MaxFinder.findMax(new int[]{9, 8, 7, 6, 5, 4, 3, 2, 1}));
    }

    @Test
    public void findMaxWithDuplicates() {
        assertEquals(5, MaxFinder.findMax(new int[]{1, 3, 5, 5, 2}));
    }

    @Test
    public void findMaxWithAllNegativeNumbers() {
        assertEquals(-1, MaxFinder.findMax(new int[]{-5, -8, -2, -15, -1}));
    }

    @Test
    public void findMaxWithMixedValues() {
        assertEquals(15, MaxFinder.findMax(new int[]{1, -4, 0, 15, 8}));
    }

    @Test
    public void findMaxThrowsExceptionForEmptyArray() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            MaxFinder.findMax(new int[]{});
        });
        assertEquals("Array must be non-empty.", exception.getMessage());
    }
}

// Assuming the class that contains findMax method is called "MaxFinder"


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {

    @Test
    public void findMaxTestWithNonEmptyArray() {
        // Testing with a standard array
        assertEquals(7, Main.findMax(new int[]{1, 3, 7, 2}));
    }

    @Test
    public void findMaxTestWithSingleElementArray() {
        // Testing with an array containing a single element
        assertEquals(1, Main.findMax(new int[]{1}));
    }
    
    @Test
    public void findMaxTestWithNegativeNumbers() {
        // Testing with negative numbers
        assertEquals(-1, Main.findMax(new int[]{-1, -3, -7, -2}));
    }

    @Test
    public void findMaxTestWithAllEqualElements() {
        // Testing with all elements equal
        assertEquals(4, Main.findMax(new int[]{4, 4, 4, 4}));
    }

    @Test
    public void findMaxTestWithMaxValueAtFirstPosition() {
        // Testing with the max value at the first position
        assertEquals(9, Main.findMax(new int[]{9, 3, 2, 5}));
    }

    @Test
    public void findMaxTestWithMaxValueAtLastPosition() {
        // Testing with the max value at the last position
        assertEquals(6, Main.findMax(new int[]{1, 2, 3, 6}));
    }

    @Test
    public void findMaxTestWithZeroLengthArray() {
        // Testing with an empty array, which should throw an exception
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Main.findMax(new int[]{});
        });
        assertEquals("Array must be non-empty.", exception.getMessage());
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {

    @Test
    public void findMaxWithPositiveNumbersTest() {
        int[] positiveArray = {1, 2, 3, 4, 5};
        assertEquals(5, TheAlgorithmsSourceCode.findMax(positiveArray));
    }

    @Test
    public void findMaxWithAllNegativeNumbersTest() {
        int[] negativeArray = {-10, -50, -30, -40};
        assertEquals(-10, TheAlgorithmsSourceCode.findMax(negativeArray));
    }

    @Test
    public void findMaxWithMixedNumbersTest() {
        int[] mixedArray = {-10, 20, -30, 40, 0};
        assertEquals(40, TheAlgorithmsSourceCode.findMax(mixedArray));
    }

    @Test
    public void findMaxWithSingleElementTest() {
        int[] singleElementArray = {42};
        assertEquals(42, TheAlgorithmsSourceCode.findMax(singleElementArray));
    }

    @Test
    public void findMaxThrowsExceptionForEmptyArrayTest() {
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            int[] emptyArray = {};
            TheAlgorithmsSourceCode.findMax(emptyArray);
        });
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {

    @Test
    public void findMaxTest() {
        // Normal case
        int[] normalArray = {1, 3, 4, 2};
        assertEquals(4, FindMax.findMax(normalArray), "The maximum of the normal case should be 4.");
        
        // Case where the max value is at the beginning
        int[] maxAtBeginningArray = {5, 4, 3, 2};
        assertEquals(5, FindMax.findMax(maxAtBeginningArray), "The maximum when it's at the beginning should be 5.");
        
        // Case where the max value is at the end
        int[] maxAtEndArray = {1, 2, 3, 10};
        assertEquals(10, FindMax.findMax(maxAtEndArray), "The maximum when it's at the end should be 10.");
        
        // Single element case
        int[] singleElementArray = {7};
        assertEquals(7, FindMax.findMax(singleElementArray), "The maximum of a single-element array should be the element itself.");
        
        // All elements are the same
        int[] allSameArray = {2, 2, 2, 2};
        assertEquals(2, FindMax.findMax(allSameArray), "The maximum of an array with all same elements should be the element itself.");
        
        // Exception case for empty array
        int[] emptyArray = {};
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            FindMax.findMax(emptyArray);
        }, "An empty array should throw an IllegalArgumentException.");
        assertEquals("Array must be non-empty.", exception.getMessage(), "The exception message must match the expected string.");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxWithMultipleElementsTest() {
        assertAll("Testing findMax method with multiple elements",
            () -> assertEquals(5, YourClassName.findMax(new int[]{1, 2, 5, 4, 3})),
            () -> assertEquals(-1, YourClassName.findMax(new int[]{-3, -1, -2, -4})),
            () -> assertEquals(0, YourClassName.findMax(new int[]{0, 0, 0, 0}))
        );
    }

    @Test
    public void findMaxWithSingleElementTest() {
        assertEquals(42, YourClassName.findMax(new int[]{42}));
    }

    @Test
    public void findMaxWithEmptyArrayTest() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            YourClassName.findMax(new int[]{});
        });
        assertEquals("Array must be non-empty.", exception.getMessage());
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        // Test with a normal array
        assertEquals(9, Maths.findMax(new int[]{1, 3, 5, 7, 9}));

        // Test with an array that has negative numbers
        assertEquals(4, Maths.findMax(new int[]{-8, -4, 1, 4}));

        // Test with an array of a single element
        assertEquals(42, Maths.findMax(new int[]{42}));

        // Test with an array where max is at the beginning
        assertEquals(100, Maths.findMax(new int[]{100, 90, 10, 50}));

        // Test with an array where max is at the end
        assertEquals(77, Maths.findMax(new int[]{1, 2, 3, 77}));

        // Test with an array that is already sorted
        assertEquals(6, Maths.findMax(new int[]{1, 2, 3, 4, 5, 6}));

        // Test with an array that is sorted in descending order
        assertEquals(10, Maths.findMax(new int[]{10, 8, 6, 4, 2, 0}));

        // Test with all elements equal
        assertEquals(7, Maths.findMax(new int[]{7, 7, 7, 7}));
    }

    @Test
    public void findMaxTestWithEmptyArray() {
        // Test with an empty array, should throw an exception
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Maths.findMax(new int[]{});
        });
        assertEquals("Array must be non-empty.", exception.getMessage());
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {

    @Test
    public void findMaxWithMultipleElements() {
        assertEquals(9, MathUtils.findMax(new int[]{1, 3, 5, 7, 9}), "The max in the array should be 9");
    }

    @Test
    public void findMaxWithMaximumAtBeginning() {
        assertEquals(10, MathUtils.findMax(new int[]{10, 3, 4, 2, 7}), "The max at the beginning of the array should be 10");
    }

    @Test
    public void findMaxWithEmptyArray() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            MathUtils.findMax(new int[]{});
        });
        assertEquals("Array must be non-empty.", exception.getMessage(), "An empty array should throw an IllegalArgumentException");
    }
}



