Source code: 


public static void floodFill(final int[][] image, final int x, final int y, final int newColor, final int oldColor) {
    if (newColor == oldColor || x < 0 || x >= image.length || y < 0 || y >= image[x].length || getPixel(image, x, y) != oldColor) {
        return;
    }

    putPixel(image, x, y, newColor);

    /* Recursively check for horizontally & vertically adjacent coordinates */
    floodFill(image, x + 1, y, newColor, oldColor);
    floodFill(image, x - 1, y, newColor, oldColor);
    floodFill(image, x, y + 1, newColor, oldColor);
    floodFill(image, x, y - 1, newColor, oldColor);

    /* Recursively check for diagonally adjacent coordinates  */
    floodFill(image, x + 1, y - 1, newColor, oldColor);
    floodFill(image, x - 1, y + 1, newColor, oldColor);
    floodFill(image, x + 1, y + 1, newColor, oldColor);
    floodFill(image, x - 1, y - 1, newColor, oldColor);
}



No.1 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {
    @Test
    public void floodFillTest() {
        int[][] image = {
            {1, 1, 1, 1},
            {1, 1, 0, 0},
            {1, 0, 1, 1}
        };

        int newColor = 2;
        int x = 1;
        int y = 1;
        int oldColor = image[x][y];

        // Apply flood fill algorithm to image starting at pixel (x, y)
        FloodFill.floodFill(image, x, y, newColor, oldColor);

        int[][] expectedImage = {
            {1, 1, 1, 1},
            {1, 2, 0, 0},
            {1, 0, 1, 1}
        };

        // Check if the image array after applying flood fill matches the expected result
        assertArrayEquals(expectedImage[0], image[0], "First row should match");
        assertArrayEquals(expectedImage[1], image[1], "Second row should match");
        assertArrayEquals(expectedImage[2], image[2], "Third row should match");

        // additional checks can be added to ensure all scenarios are covered
    }
}


No.2 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    @Test
    public void floodFillTest() {
        // Prepare a sample image (2D array)
        int[][] image = {
            {1, 1, 1, 2, 1},
            {1, 1, 2, 2, 1},
            {1, 1, 1, 1, 2},
            {2, 1, 1, 2, 1}
        };

        // Expected result after flood fill
        int[][] expectedResult = {
            {3, 3, 3, 2, 1},
            {3, 3, 2, 2, 1},
            {3, 3, 3, 3, 2},
            {2, 3, 3, 2, 1}
        };

        // Coordinates for the start of the flood fill
        int x = 1;
        int y = 1;
        // New color to be filled
        int newColor = 3;
        // Old color to be replaced
        int oldColor = image[x][y];

        // Perform the flood fill
        FloodFill.floodFill(image, x, y, newColor, oldColor);

        // Assert that the image was filled correctly
        assertArrayEquals(expectedResult, image);
    }
}


No.3 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    @Test
    public void floodFillTest() {
        // Create an image represented by a 2D array
        int[][] image = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };
        // Define old color that needs to be replaced
        int oldColor = 1;
        // Define new color to replace the old color
        int newColor = 2;
        // Call the floodFill method starting from coordinate (1, 1)
        FloodFill.floodFill(image, 1, 1, newColor, oldColor);
        // Define the expected image after the flood fill
        int[][] expected = {
            {2, 2, 2},
            {2, 2, 0},
            {2, 0, 1}
        };
        // Assert that the flood-filled image matches the expected result
        assertArrayEquals(expected, image);
    }
}


No.4 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {
    @Test
    public void floodFillTest() {
        // Initialization of a simple image with oldColor of 1
        int[][] image = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };

        // The expected result after running floodFill algorithm with newColor of 2 starting at (1, 1)
        int[][] expectedImage = {
            {2, 2, 2},
            {2, 2, 0},
            {2, 0, 1}
        };

        int oldColor = 1;
        int newColor = 2;
        int x = 1; // x co-ordinate from where to start the flood fill
        int y = 1; // y co-ordinate from where to start the flood fill

        // Call the floodFill method on the image
        FloodFill.floodFill(image, x, y, newColor, oldColor);

        // Assert that after calling floodFill, the image shall be modified as expected
        assertArrayEquals(expectedImage, image, "The image should match the expected filled image.");

        // Try another test case where newColor is same as oldColor
        int[][] image2 = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };

        // The expected result should not change since newColor is same as oldColor
        int[][] expectedNoChangeImage = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };

        // Call the floodFill method on the image2
        FloodFill.floodFill(image2, x, y, oldColor, oldColor);

        // Assert that after calling floodFill, the image2 should not change
        assertArrayEquals(expectedNoChangeImage, image2, "The image should not change if newColor is same as the oldColor.");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    @Test
    public void floodFillTest() {
        // Initialize an image (2D array) with a pattern
        int[][] image = {
            {1, 1, 1, 1},
            {1, 1, 0, 1},
            {1, 0, 1, 1},
            {1, 1, 1, 1}
        };

        // Define old color to replace and new color
        int oldColor = 1;
        int newColor = 2;

        // Call the floodFill method on a specific starting coordinate
        FloodFill.floodFill(image, 1, 1, newColor, oldColor);

        // Expected result after flood fill algorithm is applied
        int[][] expectedImage = {
            {2, 2, 2, 2},
            {2, 2, 0, 2},
            {2, 0, 2, 2},
            {2, 2, 2, 2}
        };

        // Assert that the flood filled image matches the expected result
        assertArrayEquals(expectedImage, image);
    }
}


No.6 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {
    
    @Test
    public void floodFillTest() {
        // Given a 2D image array with initial colors
        int[][] image = {
            {1, 1, 1, 2, 1},
            {1, 1, 2, 2, 2},
            {1, 1, 1, 1, 1},
            {2, 1, 2, 2, 1}
        };
        // Assuming 1 is the old color and we want to replace it with 3
        int newColor = 3;
        int oldColor = 1;
        
        // Coordinates to start the flood fill
        int x = 1;
        int y = 1;
        
        // Expected image after flood fill, assuming all the adjacent 1's will be filled with 3
        int[][] expected = {
            {3, 3, 3, 2, 1},
            {3, 3, 2, 2, 2},
            {3, 3, 3, 3, 3},
            {2, 3, 2, 2, 1}
        };
        
        // Perform flood fill on the image
        FloodFill.floodFill(image, x, y, newColor, oldColor);
        
        // Assert that every pixel's color matches the expected color after the fill
        for (int i = 0; i < image.length; i++) {
            for (int j = 0; j < image[i].length; j++) {
                assertEquals(expected[i][j], image[i][j],
                    "Pixel at position (" + i + ", " + j + ") should have color " + expected[i][j]);
            }
        }
    }
}


No.7 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    @Test
    public void floodFillTest() {
        int[][] image = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };
        int newColor = 2;
        int x = 1;
        int y = 1;
        int oldColor = image[x][y];
        
        FloodFill.floodFill(image, x, y, newColor, oldColor);
        
        int[][] expected = {
            {2, 2, 2},
            {2, 2, 0},
            {2, 0, 1}
        };
        
        assertArrayEquals(expected, image, "The flood fill algorithm did not work as expected");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    @Test
    public void floodFillTest() {
        // Given
        int[][] image = {
                {1, 1, 1},
                {1, 1, 0},
                {1, 0, 1}
        };
        int newColor = 2;
        int x = 1;
        int y = 1;
        int oldColor = image[x][y];

        int[][] expected = {
                {2, 2, 2},
                {2, 2, 0},
                {2, 0, 1}
        };

        // When
        FloodFill.floodFill(image, x, y, newColor, oldColor);

        // Then
        assertArrayEquals(expected, image);
    }
    
    @Test
    public void floodFillTestNoChange() {
        // Test when the new color is the same as the old color
        int[][] image = {
                {1, 1, 1},
                {1, 1, 0},
                {1, 0, 1}
        };
        int newColor = 1; // same as old color
        int x = 1;
        int y = 1;
        int oldColor = image[x][y];

        int[][] expected = {
                {1, 1, 1},
                {1, 1, 0},
                {1, 0, 1}
        };

        // When
        FloodFill.floodFill(image, x, y, newColor, oldColor);

        // Then
        assertArrayEquals(expected, image);
    }

    @Test
    public void floodFillTestBoundary() {
        // Test when the seed point is at the boundary and should not fill diagonally
        int[][] image = {
                {0, 0, 0},
                {0, 1, 1},
                {0, 1, 0}
        };
        int newColor = 2;
        int x = 2;
        int y = 2;
        int oldColor = image[x][y];

        int[][] expected = {
                {0, 0, 0},
                {0, 1, 1},
                {0, 1, 2}
        };

        // When
        FloodFill.floodFill(image, x, y, newColor, oldColor);

        // Then
        assertArrayEquals(expected, image);
    }
}


No.9 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    @Test
    public void testFloodFill() {
        int[][] image = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };
        int newColor = 2;
        int x = 1;
        int y = 1;
        int oldColor = image[x][y];
        
        FloodFill.floodFill(image, x, y, newColor, oldColor);
        
        int[][] expectedImage = {
            {1, 1, 1},
            {1, 2, 0},
            {1, 0, 1}
        };

        assertArrayEquals(expectedImage, image);
    }

    @Test
    public void testFloodFillBoundaryCondition() {
        int[][] image = {
            {0, 0, 0},
            {0, 0, 0}
        };
        int newColor = 3;
        int x = 0;
        int y = 0;
        int oldColor = image[x][y];
        
        FloodFill.floodFill(image, x, y, newColor, oldColor);
        
        int[][] expectedImage = {
            {3, 3, 3},
            {3, 3, 3}
        };

        assertArrayEquals(expectedImage, image);
    }

    @Test
    public void testFloodFillNoChange() {
        int[][] image = {
            {2, 2},
            {2, 2}
        };
        int newColor = 2;
        int x = 0;
        int y = 0;
        int oldColor = image[x][y];
        
        FloodFill.floodFill(image, x, y, newColor, oldColor);
        
        // No change expected since oldColor is same as newColor
        int[][] expectedImage = {
            {2, 2},
            {2, 2}
        };
        
        assertArrayEquals(expectedImage, image);
    }
}


No.10 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    @Test
    public void floodFillTest() {
        // Initialize an image as a 2D grid
        int[][] image = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };

        // Call the floodFill method on the given coordinates and color
        FloodFill.floodFill(image, 1, 1, 2, image[1][1]);

        // Expected image after the floodFill operation to replace color 1 with 2
        int[][] expectedImage = {
            {2, 2, 2},
            {2, 2, 0},
            {2, 0, 1}
        };

        // Assert that the image is filled correctly
        assertArrayEquals(expectedImage, image);

        // Test boundary conditions where flooding should not occur
        FloodFill.floodFill(image, 1, 1, 3, image[1][1]);
        // Color at index (1,1) was already changed to 2, so it should not change to 3
        assertNotEquals(3, image[1][1]);

        // Test when newColor is same as oldColor, no change should happen
        FloodFill.floodFill(image, 0, 0, 2, 2);
        assertArrayEquals(expectedImage, image);

        // Test on a non-contiguous section
        int[][] nonContiguousImage = {
            {1, 2, 1},
            {2, 1, 2},
            {1, 2, 1}
        };

        FloodFill.floodFill(nonContiguousImage, 0, 0, 3, 1);
        int[][] expectedNonContiguousImage = {
            {3, 2, 1},
            {2, 1, 2},
            {1, 2, 1}
        };

        assertArrayEquals(expectedNonContiguousImage, nonContiguousImage);
    }
}


