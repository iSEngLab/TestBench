Source code: 


public static void floodFill(final int[][] image, final int x, final int y, final int newColor, final int oldColor) {
    if (newColor == oldColor || x < 0 || x >= image.length || y < 0 || y >= image[x].length || getPixel(image, x, y) != oldColor) {
        return;
    }

    putPixel(image, x, y, newColor);

    /* Recursively check for horizontally & vertically adjacent coordinates */
    floodFill(image, x + 1, y, newColor, oldColor);
    floodFill(image, x - 1, y, newColor, oldColor);
    floodFill(image, x, y + 1, newColor, oldColor);
    floodFill(image, x, y - 1, newColor, oldColor);

    /* Recursively check for diagonally adjacent coordinates  */
    floodFill(image, x + 1, y - 1, newColor, oldColor);
    floodFill(image, x - 1, y + 1, newColor, oldColor);
    floodFill(image, x + 1, y + 1, newColor, oldColor);
    floodFill(image, x - 1, y - 1, newColor, oldColor);
}



No.1 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    @Test
    public void floodFillTest() {
        // Initialize image with old color
        int oldColor = 1;
        int newColor = 2;
        int[][] image = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };

        // Coordinates to start the flood fill
        int x = 1;
        int y = 1;

        // Expected output after flood fill
        int[][] expected = {
            {2, 2, 2},
            {2, 2, 0},
            {2, 0, 1}
        };

        // Call the method under test
        FloodFill.floodFill(image, x, y, newColor, oldColor);

        // Assert that the image is filled correctly
        assertArrayEquals(expected, image, "The image should be filled correctly with the new color.");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    @Test
    public void floodFillTest() {
        // Example test image matrix where 1 represents old color and 2 represents new color
        int[][] image = {
              {1, 1, 1, 1, 1},
              {1, 1, 1, 1, 1},
              {1, 1, 0, 1, 1},
              {1, 1, 1, 1, 1}
        };
        int x = 2, y = 2; // Starting point for flood fill
        int newColor = 2;
        int oldColor = 1;

        //Call method under test
        FloodFill.floodFill(image, x, y, newColor, oldColor);

        // Expected image after floodFill:
        int[][] expectedImage = {
              {2, 2, 2, 2, 2},
              {2, 2, 2, 2, 2},
              {2, 2, 0, 2, 2},
              {2, 2, 2, 2, 2}
        };

        // Check if every pixel is filled with new color where the old color was present
        for (int i = 0; i < image.length; i++) {
            for (int j = 0; j < image[i].length; j++) {
                assertEquals(expectedImage[i][j], image[i][j],
                        "Pixel at [" + i + "][" + j + "] does not match expected value.");
            }
        }
    }
}


No.3 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    @Test
    public void floodFillTest() {
        // Setting up a test image with predefined pixel values
        int[][] image = {
                {1, 1, 1, 1},
                {1, 2, 2, 1},
                {1, 2, 1, 1},
                {1, 1, 1, 1}
        };
        int newColor = 3;
        int x = 1; // starting x position 
        int y = 1; // starting y position 
        int oldColor = 2; // color to be replaced
        
        // Expected result after flood fill
        int[][] expected = {
                {1, 1, 1, 1},
                {1, 3, 3, 1},
                {1, 3, 1, 1},
                {1, 1, 1, 1}
        };

        // Performing flood fill operation on the test image
        FloodFill.floodFill(image, x, y, newColor, oldColor);

        // Assert that the modified image matches the expected result
        assertArrayEquals(expected, image);
    }
}


No.4 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    @Test
    public void floodFillTest() {
        // Assume we have a canvas with some initial colors
        int[][] image = {
            {1, 1, 1, 1, 1},
            {1, 1, 2, 2, 1},
            {1, 2, 2, 1, 1},
            {1, 1, 1, 1, 1}
        };

        // The old color we want to replace
        int oldColor = 2;

        // The new color we want to flood with
        int newColor = 3;

        // The starting point for the flood fill
        int startX = 1;
        int startY = 2;

        // Expected image after flood fill
        int[][] expectedImage = {
            {1, 1, 1, 1, 1},
            {1, 1, 3, 3, 1},
            {1, 3, 3, 1, 1},
            {1, 1, 1, 1, 1}
        };

        // Perform flood fill on the image starting at (startX, startY)
        FloodFill.floodFill(image, startX, startY, newColor, oldColor);

        // Assert the image has been filled correctly
        assertArrayEquals(expectedImage, image, "The image should have the color " + newColor + " correctly filled in place of " + oldColor);
    }
}


No.5 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    @Test
    public void floodFillTest() {
        int[][] image = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };

        int[][] expectedImage = {
            {2, 2, 2},
            {2, 2, 0},
            {2, 0, 1}
        };

        final int x = 0;
        final int y = 0;
        final int newColor = 2;
        final int oldColor = 1;
        
        FloodFill.floodFill(image, x, y, newColor, oldColor);
        
        assertArrayEquals(expectedImage, image, "FloodFill did not fill the image correctly.");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {
    @Test
    public void floodFillTest() {
        // Arrange: Create a test image (2D array), and setup initial conditions
        int[][] image = {
            {1, 1, 1, 1, 1},
            {1, 1, 2, 2, 1},
            {1, 2, 2, 2, 1},
            {1, 1, 1, 1, 1}
        };
        int startX = 2;
        int startY = 2;
        int newColor = 3;
        int oldColor = 2;

        // Expected image after flood fill
        int[][] expected = {
            {1, 1, 1, 1, 1},
            {1, 1, 3, 3, 1},
            {1, 3, 3, 3, 1},
            {1, 1, 1, 1, 1}
        };

        // Act: Perform the flood fill operation
        FloodFill.floodFill(image, startX, startY, newColor, oldColor);

        // Assert: Check if image matches expected result after flood fill
        assertArrayEquals(expected, image);
    }
}


No.7 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {
    @Test
    public void floodFillTest() {
        // Assume we have a method for deep comparison of two-dimensional arrays
        int[][] image = {
                {1, 1, 1},
                {1, 1, 0},
                {1, 0, 1}
        };

        int[][] expectedImage = {
                {2, 2, 2},
                {2, 2, 0},
                {2, 0, 1}
        };

        int x = 1;
        int y = 1;
        int newColor = 2;
        int oldColor = 1;

        FloodFill.floodFill(image, x, y, newColor, oldColor);
        
        assertArrayEquals(expectedImage, image);
    }
}


No.8 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {
    @Test
    public void floodFillTest() {
        // Given
        int[][] image = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };
        int x = 1; // Start x coordinate
        int y = 1; // Start y coordinate
        int newColor = 2; // New color to fill
        int oldColor = image[x][y]; // Old color at the start coordinates

        // Expected filled image
        int[][] expectedImage = {
            {1, 1, 1},
            {1, 2, 0},
            {1, 0, 1}
        };

        // When
        FloodFill.floodFill(image, x, y, newColor, oldColor);

        // Then
        assertArrayEquals(expectedImage[0], image[0]);
        assertArrayEquals(expectedImage[1], image[1]);
        assertArrayEquals(expectedImage[2], image[2]);
    }
}


No.9 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {
    
    private static final int OLD_COLOR = 0;
    private static final int NEW_COLOR = 1;
    
    @Test
    public void floodFillTest() {
        // Initialize a sample image with old colors
        int[][] image = {
            {OLD_COLOR, OLD_COLOR, OLD_COLOR},
            {OLD_COLOR, OLD_COLOR, OLD_COLOR},
            {OLD_COLOR, OLD_COLOR, OLD_COLOR}
        };

        // Coordinate to start the flood fill
        int x = 1;
        int y = 1;

        // Perform flood fill on the image
        FloodFill.floodFill(image, x, y, NEW_COLOR, OLD_COLOR);

        // Expected result after flood fill with new color
        int[][] expected = {
            {NEW_COLOR, NEW_COLOR, NEW_COLOR},
            {NEW_COLOR, NEW_COLOR, NEW_COLOR},
            {NEW_COLOR, NEW_COLOR, NEW_COLOR}
        };
        
        // Assert that every pixel has been filled with the new color
        for (int i = 0; i < image.length; i++) {
            for (int j = 0; j < image[i].length; j++) {
                assertEquals(NEW_COLOR, image[i][j], "Pixel at [" + i + "][" + j + "] should be color " + NEW_COLOR);
            }
        }

        // Alternatively, compare the whole image arrays.
        assertArrayEquals(expected, image, "The entire image should be flood-filled with the new color.");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {
    @Test
    public void floodFillTest() {
        // Define the old and new colors
        int oldColor = 1;
        int newColor = 2;

        // Initialize an image with a solid color
        int[][] image = {
                {oldColor, oldColor, oldColor},
                {oldColor, oldColor, oldColor},
                {oldColor, oldColor, oldColor}
        };

        // Choose the starting point for the flood fill
        int startX = 0;
        int startY = 0;

        // Perform the flood fill
        FloodFill.floodFill(image, startX, startY, newColor, oldColor);

        // Construct the expected result
        int[][] expectedImage = {
                {newColor, newColor, newColor},
                {newColor, newColor, newColor},
                {newColor, newColor, newColor}
        };

        // Check each pixel to see if the flood fill worked as expected
        for (int i = 0; i < image.length; i++) {
            for (int j = 0; j < image[i].length; j++) {
                assertEquals(expectedImage[i][j], image[i][j], String.format("The pixel at (%d, %d) should be %d", i, j, newColor));
            }
        }
    }
}


