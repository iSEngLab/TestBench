Source code: 


public static void floodFill(final int[][] image, final int x, final int y, final int newColor, final int oldColor) {
    if (newColor == oldColor || x < 0 || x >= image.length || y < 0 || y >= image[x].length || getPixel(image, x, y) != oldColor) {
        return;
    }

    putPixel(image, x, y, newColor);

    /* Recursively check for horizontally & vertically adjacent coordinates */
    floodFill(image, x + 1, y, newColor, oldColor);
    floodFill(image, x - 1, y, newColor, oldColor);
    floodFill(image, x, y + 1, newColor, oldColor);
    floodFill(image, x, y - 1, newColor, oldColor);

    /* Recursively check for diagonally adjacent coordinates  */
    floodFill(image, x + 1, y - 1, newColor, oldColor);
    floodFill(image, x - 1, y + 1, newColor, oldColor);
    floodFill(image, x + 1, y + 1, newColor, oldColor);
    floodFill(image, x - 1, y - 1, newColor, oldColor);
}



No.1 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    @Test
    public void floodFillTest() {
        // Test images and expected results
        int[][] image = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };
        int newColor = 2;
        int x = 1;
        int y = 1;
        int oldColor = image[x][y];
        
        int[][] expectedResult = {
            {2, 2, 2},
            {2, 2, 0},
            {2, 0, 1}
        };
        
        // Perform the flood fill operation
        FloodFill.floodFill(image, x, y, newColor, oldColor);
        
        // Assertion
        assertArrayEquals(expectedResult, image, "The flood fill operation did not produce the expected image.");
    }

    // Helper methods for the unit test
    public static void putPixel(int[][] image, int x, int y, int newColor) {
        image[x][y] = newColor;
    }

    public static int getPixel(int[][] image, int x, int y) {
        return image[x][y];
    }

    // Assuming the FloodFill class contains the floodFill method as provided
    public static class FloodFill {
        public static void floodFill(final int[][] image, final int x, final int y, final int newColor, final int oldColor) {
            if (newColor == oldColor || x < 0 || x >= image.length || y < 0 || y >= image[x].length || getPixel(image, x, y) != oldColor) {
                return;
            }

            putPixel(image, x, y, newColor);

            /* Recursively check for horizontally & vertically adjacent coordinates */
            floodFill(image, x + 1, y, newColor, oldColor);
            floodFill(image, x - 1, y, newColor, oldColor);
            floodFill(image, x, y + 1, newColor, oldColor);
            floodFill(image, x, y - 1, newColor, oldColor);

            /* Recursively check for diagonally adjacent coordinates  */
            floodFill(image, x + 1, y - 1, newColor, oldColor);
            floodFill(image, x - 1, y + 1, newColor, oldColor);
            floodFill(image, x + 1, y + 1, newColor, oldColor);
            floodFill(image, x - 1, y - 1, newColor, oldColor);
        }
    }
}


No.2 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    @Test
    public void floodFillTest() {
        int[][] image = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };

        int x = 1;
        int y = 1;
        int newColor = 2;
        int oldColor = image[x][y];
        
        FloodFillAlgorithm.floodFill(image, x, y, newColor, oldColor);

        int[][] expectedImage = {
            {2, 2, 2},
            {2, 2, 0},
            {2, 0, 1}
        };

        assertArrayEquals(expectedImage, image);

        // Additional test cases could go here to check various scenarios like:
        // - non-rectangular images
        // - large images
        // - edge cases with negative coordinates or coordinates out of bounds
        // - cases where newColor is the same as oldColor
        // - empty image case
    }
}


No.3 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;

public class FloodFillTest {

    @Test
    public void floodFillTest() {
        int[][] image = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };
        int newColor = 2;
        int oldColor = 1;
        int x = 1; // Starting coordinates x position
        int y = 1; // Starting coordinates y position

        // The expected result after the floodFill function should be executed
        int[][] expectedImage = {
            {2, 2, 2},
            {2, 2, 0},
            {2, 0, 1}
        };
        
        // Call the static method floodFill from some class where it is defined
        SomeClass.floodFill(image, x, y, newColor, oldColor); // Assuming floodFill is a static method in SomeClass

        // Verify that the floodFill method performs as expected
        assertArrayEquals(expectedImage, image, "The floodFill method did not produce the expected output.");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    // Helper methods to mimic the ones possibly present in the source code file
    private static int getPixel(int[][] image, int x, int y) {
        return image[x][y];
    }
    
    private static void putPixel(int[][] image, int x, int y, int color) {
        image[x][y] = color;
    }

    public static void floodFill(final int[][] image, final int x, final int y, final int newColor, final int oldColor) {
        if (newColor == oldColor || x < 0 || x >= image.length || y < 0 || y >= image[x].length || getPixel(image, x, y) != oldColor) {
            return;
        }

        putPixel(image, x, y, newColor);

        floodFill(image, x + 1, y, newColor, oldColor);
        floodFill(image, x - 1, y, newColor, oldColor);
        floodFill(image, x, y + 1, newColor, oldColor);
        floodFill(image, x, y - 1, newColor, oldColor);

        floodFill(image, x + 1, y - 1, newColor, oldColor);
        floodFill(image, x - 1, y + 1, newColor, oldColor);
        floodFill(image, x + 1, y + 1, newColor, oldColor);
        floodFill(image, x - 1, y - 1, newColor, oldColor);
    }

    @Test
    public void floodFillTest() {
        // Prepare sample image
        int[][] image = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };
        // Expected result after filling
        int[][] expected = {
            {2, 2, 2},
            {2, 2, 0},
            {2, 0, 1}
        };
        // Perform flood fill
        floodFill(image, 0, 0, 2, 1); // Fill with new color 2 at (0,0) where old color is 1

        // Assert that the flood-filled image matches the expected result
        assertArrayEquals(expected[0], image[0]);
        assertArrayEquals(expected[1], image[1]);
        assertArrayEquals(expected[2], image[2]);
    }
}


No.5 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {
    @Test
    public void floodFillTest() {
        // Create a sample image represented by a 2D array
        int[][] image = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };
        
        // Define the old and new colors
        int newColor = 2;
        int oldColor = 1;

        // Expected result after flood fill
        int[][] expectedImage = {
            {2, 2, 2},
            {2, 2, 0},
            {2, 0, 1}
        };
        
        // Calling the floodFill method on the (1, 1) position
        FloodFill.floodFill(image, 1, 1, newColor, oldColor);

        // Assertions to make sure the floodFill method works as expected
        for (int i = 0; i < image.length; i++) {
            assertArrayEquals(expectedImage[i], image[i], "The floodFill method did not fill the expected pixels.");
        }
    }

    // Helper methods that imitate the actual image manipulation logic
    // These would need to be defined in the actual implementation
    private static void putPixel(int[][] image, int x, int y, int newColor) {
        image[x][y] = newColor;
    }
    
    private static int getPixel(int[][] image, int x, int y) {
        return image[x][y];
    }
}


No.6 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    private static void putPixel(int[][] image, int x, int y, int color) {
        image[x][y] = color;
    }

    private static int getPixel(int[][] image, int x, int y) {
        return image[x][y];
    }

    @Test
    public void floodFillTest() {
        // Use a static nested class to access the method, assuming that the floodFill method 
        // is within a class named `FloodFillAlgorithm`
        final class FloodFillAlgorithm {
            public static void floodFill(int[][] image, int x, int y, int newColor, int oldColor) {
                // Implementation is hidden as it is assumed to be provided above
            }
        }
        
        int[][] image = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };
        int x = 1;
        int y = 1;
        int newColor = 2;
        int oldColor = image[x][y];

        FloodFillAlgorithm.floodFill(image, x, y, newColor, oldColor);

        int[][] expectedImage = {
            {2, 2, 2},
            {2, 2, 0},
            {2, 0, 1}
        };

        assertArrayEquals(expectedImage[0], image[0], "First row did not match expected result.");
        assertArrayEquals(expectedImage[1], image[1], "Second row did not match expected result.");
        assertArrayEquals(expectedImage[2], image[2], "Third row did not match expected result.");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    // Helper methods to use in the test case.
    private static void putPixel(int[][] image, int x, int y, int newColor) {
        image[x][y] = newColor;
    }

    private static int getPixel(int[][] image, int x, int y) {
        return image[x][y];
    }
    
    // Actual test method
    @Test
    public void floodFillTest() {
        // Example input image, we will use it to test our flood fill method
        int[][] image = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };
        
        // Expected result after flood filling (6 is the new color)
        int[][] expectedImage = {
            {6, 6, 6},
            {6, 6, 0},
            {6, 0, 1}
        };
        
        // The old color we want to replace (all '1's should be replaced)
        int oldColor = 1; 
        
        // The new color with which we should replace the old color
        int newColor = 6; 
        
        // Start flood fill from the coordinate (1, 1)
        FloodFillTest.floodFill(image, 1, 1, newColor, oldColor);
        
        // Check every pixel to see if the fill was successful
        assertArrayEquals(expectedImage, image);
    }
}


No.8 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    public static void floodFill(final int[][] image, final int x, final int y, final int newColor, final int oldColor) {
        // Source Code implementation...
    }
    
    // Helper method to get the pixel color at a specific location.
    private static int getPixel(int[][] image, int x, int y) {
        return image[x][y];
    }

    // Helper method to set the pixel color at a specific location to the new color.
    private static void putPixel(int[][] image, int x, int y, int newColor) {
        image[x][y] = newColor;
    }

    @Test
    public void floodFillTest() {
        int newColor = 3;
        int[][] image = {
            {1, 1, 1, 2, 2},
            {1, 1, 1, 2, 2},
            {1, 1, 1, 2, 2},
            {1, 1, 1, 1, 1},
        };
        int oldColor = image[0][0];
        FloodFillTest.floodFill(image, 1, 1, newColor, oldColor);
        
        int[][] expectedImage = {
            {3, 3, 3, 2, 2},
            {3, 3, 3, 2, 2},
            {3, 3, 3, 2, 2},
            {3, 3, 3, 3, 3},
        };
        
        assertArrayEquals(expectedImage, image, "The image should be correctly flood filled with the new color.");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    // Helper methods to simulate getPixel and putPixel to directly access the array.
    private static int getPixel(int[][] image, int x, int y) {
        return image[x][y];
    }

    private static void putPixel(int[][] image, int x, int y, int newColor) {
        image[x][y] = newColor;
    }
    
    // The test method itself
    @Test
    public void floodFillTest() {
        int[][] image = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };
        int x = 1; // Starting X coordinate
        int y = 1; // Starting Y coordinate
        int newColor = 2; // New color to apply
        int oldColor = image[x][y]; // Color to replace, taken from the starting coordinates
        
        // Expected image after flood fill
        int[][] expected = {
            {1, 1, 1},
            {1, 2, 0},
            {1, 0, 1}
        };
        
        // Perform flood fill
        FloodFill.floodFill(image, x, y, newColor, oldColor);
        
        // Check each pixel to see if the flood fill worked as expected
        for(int i = 0; i < image.length; i++) {
            assertArrayEquals(expected[i], image[i], "Row " + i + " of the image should match the expected result.");
        }
    }
}


No.10 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {

    // Static helper methods to simulate the methods that are called within floodFill
    private static int getPixel(final int[][] image, final int x, final int y) {
        return image[x][y];
    }

    private static void putPixel(final int[][] image, final int x, final int y, final int newColor) {
        image[x][y] = newColor;
    }
    
    // The floodFill method from the JAVA Source Code provided
    public static void floodFill(final int[][] image, final int x, final int y, final int newColor, final int oldColor) {
        if (newColor == oldColor || x < 0 || x >= image.length || y < 0 || y >= image[x].length || getPixel(image, x, y) != oldColor) {
            return;
        }

        putPixel(image, x, y, newColor);

        /* Recursively check for adjacent coordinates */
        floodFill(image, x + 1, y, newColor, oldColor);
        floodFill(image, x - 1, y, newColor, oldColor);
        floodFill(image, x, y + 1, newColor, oldColor);
        floodFill(image, x, y - 1, newColor, oldColor);

        /* Recursively check for diagonally adjacent coordinates  */
        floodFill(image, x + 1, y - 1, newColor, oldColor);
        floodFill(image, x - 1, y + 1, newColor, oldColor);
        floodFill(image, x + 1, y + 1, newColor, oldColor);
        floodFill(image, x - 1, y - 1, newColor, oldColor);
    }
    
    @Test
    public void floodFillTest() {
        final int[][] image = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };
        
        final int[][] expectedImage = {
            {2, 2, 2},
            {2, 2, 0},
            {2, 0, 1}
        };
        
        final int newColor = 2;
        final int x = 1;
        final int y = 1;
        final int oldColor = image[x][y];

        // Perform the floodFill
        floodFill(image, x, y, newColor, oldColor);

        // Assertion to check the entire array for the expected result
        for (int i = 0; i < image.length; i++) {
            assertArrayEquals(expectedImage[i], image[i], "Row " + i + " does not match expected result.");
        }
    }
}


