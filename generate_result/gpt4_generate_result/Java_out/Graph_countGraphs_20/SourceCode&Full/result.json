{
    "project_name": "Java",
    "file_name": "ConnectedComponent.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/ConnectedComponent.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Main method used for counting the connected components. Iterates through\n     * the array of nodes to do a depth first search to get all nodes of the\n     * graph from the actual node. These nodes are added to the array\n     * markedNodes and will be ignored if they are chosen in the nodeList.\n     *\n     * @return returns the amount of unconnected graphs\n     */",
    "source_code": "\npublic int countGraphs() {\n    int count = 0;\n    Set<Node> markedNodes = new HashSet<Node>();\n\n    for (Node n : nodeList) {\n        if (!markedNodes.contains(n)) {\n            markedNodes.add(n);\n            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));\n            count++;\n        }\n    }\n\n    return count;\n}\n",
    "class_name": "Graph",
    "method_name": "countGraphs",
    "arguments": [],
    "generate_test": [
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n\n    @Test\n    public void countGraphsTest() {\n        // Test case for graph with characters\n        Graph<Character> graphChars = new Graph<>();\n\n        // Graph 1\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n\n        // Graph 2 (disconnected from Graph 1)\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n\n        // Graph 3 (disconnected and consists of a single self-loop)\n        graphChars.addEdge('w', 'w');\n\n        // Assert there are 3 different char-graphs\n        int countCharGraphs = graphChars.countGraphs();\n        assertEquals(3, countCharGraphs, \"The amount of different char-graphs is incorrect.\");\n\n        // Test case for graph with integers\n        Graph<Integer> graphInts = new Graph<>();\n\n        // Graph 1\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n\n        // Graph 2 (disconnected from Graph 1)\n        graphInts.addEdge(7, 8);\n        graphInts.addEdge(8, 10);\n        graphInts.addEdge(10, 8);\n\n        // Assert there are 2 different int-graphs\n        int countIntGraphs = graphInts.countGraphs();\n        assertEquals(2, countIntGraphs, \"The amount of different int-graphs is incorrect.\");\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    \n    // Test with Character Nodes\n    @Test\n    public void countGraphsTestWithChars() {\n        Graph<Character> graphChars = new Graph<>();\n        \n        // Graph 1\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n\n        // Graph 2\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n\n        // Graph 3 (self-loop)\n        graphChars.addEdge('w', 'w');\n        \n        int count = graphChars.countGraphs();\n        assertEquals(3, count, \"The number of connected components should be 3\");\n    }\n\n    // Test with Integer Nodes\n    @Test\n    public void countGraphsTestWithInts() {\n        Graph<Integer> graphInts = new Graph<>();\n        \n        // Graph 1\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n\n        // Graph 2\n        graphInts.addEdge(7, 8);\n        graphInts.addEdge(8, 10);\n        graphInts.addEdge(10, 8);\n        \n        int count = graphInts.countGraphs();\n        assertEquals(2, count, \"The number of connected components should be 2\");\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a new Graph of Characters\n        Graph<Character> graphChars = new Graph<>();\n        // Add edges to form a single connected component ('a' to 'e' and 'x' to 'z')\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'e');\n        graphChars.addEdge('e', 'a');\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('y', 'z');\n        graphChars.addEdge('z', 'x');\n        // Expected count is 2: one for each graph 1 ('a' to 'e') and graph 2 ('x' to 'z')\n        assertEquals(2, graphChars.countGraphs(), \"Character graph should have 2 connected components.\");\n\n        // Create a new Graph of Integers\n        Graph<Integer> graphInts = new Graph<>();\n        // Add edges to form two connected components\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        // Second component\n        graphInts.addEdge(4, 5);\n        graphInts.addEdge(5, 6);\n        graphInts.addEdge(6, 4);\n        // Expected count is 2: one for each graph 1 (1 to 3) and graph 2 (4 to 6)\n        assertEquals(2, graphInts.countGraphs(), \"Integer graph should have 2 connected components.\");\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n\n    @Test\n    void countGraphsTest() {\n        Graph<Character> graphChars = new Graph<>();\n\n        // Graph 1\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n\n        graphChars.addEdge('w', 'w');\n\n        assertEquals(3, graphChars.countGraphs(), \"Count of disconnected char-graphs should be 3\");\n\n        Graph<Integer> graphInts = new Graph<>();\n\n        // Graph 2\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n\n        graphInts.addEdge(7, 8);\n        graphInts.addEdge(8, 10);\n        graphInts.addEdge(10, 8);\n\n        assertEquals(2, graphInts.countGraphs(), \"Count of disconnected int-graphs should be 2\");\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n\n    @Test\n    public void countGraphsTest() {\n        Graph<Character> graphChars = new Graph<>();\n\n        // Graph 1\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n\n        graphChars.addEdge('w', 'w');\n\n        Graph<Integer> graphInts = new Graph<>();\n\n        // Graph 2\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n\n        graphInts.addEdge(7, 8);\n        graphInts.addEdge(8, 10);\n        graphInts.addEdge(10, 8);\n\n        assertEquals(3, graphChars.countGraphs(), \"The character graph should contain 3 connected components.\");\n        assertEquals(2, graphInts.countGraphs(), \"The integer graph should contain 2 connected components.\");\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n\n    private Graph<Character> graphChars;\n    private Graph<Integer> graphInts;\n\n    @BeforeEach\n    public void setUp() {\n        // Setup graph for Character nodes\n        graphChars = new Graph<>();\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n        graphChars.addEdge('w', 'w');\n\n        // Setup graph for Integer nodes\n        graphInts = new Graph<>();\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n        graphInts.addEdge(7, 8);\n        graphInts.addEdge(8, 10);\n        graphInts.addEdge(10, 8);\n\n    }\n\n    @Test\n    public void countGraphsTest() {\n        // Assert the count of connected graphs for a graph composed of Characters\n        int charConnectedComponents = graphChars.countGraphs();\n        assertEquals(2, charConnectedComponents, \"The graph of Characters should have 2 connected components.\");\n\n        // Assert the count of connected graphs for a graph composed of Integers\n        int intConnectedComponents = graphInts.countGraphs();\n        assertEquals(2, intConnectedComponents, \"The graph of Integers should have 2 connected components.\");\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Test with Character type\n        Graph<Character> graphChars = new Graph<>();\n        // Graph 1\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n        // Another component\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n        // Another component with single node\n        graphChars.addEdge('w', 'w');\n\n        // There should be 3 separate components in the graphChars\n        assertEquals(3, graphChars.countGraphs());\n\n        // Test with Integer type\n        Graph<Integer> graphInts = new Graph<>();\n        // Graph 2\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n        // Another component\n        graphInts.addEdge(7, 8);\n        graphInts.addEdge(8, 10);\n        graphInts.addEdge(10, 8);\n\n        // There should be 2 separate components in the graphInts\n        assertEquals(2, graphInts.countGraphs());\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    \n    @Test\n    public void countGraphsTest() {\n        // Testing with Character graph.\n        Graph<Character> graphChars = new Graph<>();\n        \n        // Graph 1 - fully connected component.\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n\n        // Graph 2 - another fully connected component.\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n\n        // Graph 3 - single node graph.\n        graphChars.addEdge('w', 'w');\n        \n        assertEquals(3, graphChars.countGraphs(), \"Graph with characters should contain 3 separate connected components.\");\n\n        // Testing with Integer graph.\n        Graph<Integer> graphInts = new Graph<>();\n        \n        // Graph 1 - fully connected component.\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n\n        // Graph 2 - fully connected component with a cycle.\n        graphInts.addEdge(7, 8);\n        graphInts.addEdge(8, 10);\n        graphInts.addEdge(10, 8);\n        \n        assertEquals(2, graphInts.countGraphs(), \"Graph with integers should contain 2 separate connected components.\");\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a graph for characters\n        Graph<Character> graphChars = new Graph<>();\n        // Graph 1\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n\n        // A separate component\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n\n        // A separate self-loop component\n        graphChars.addEdge('w', 'w');\n\n        // Assert that there are three separate components\n        assertEquals(3, graphChars.countGraphs(), \"Amount of different char-graphs should be 3\");\n\n        // Create a graph for integers\n        Graph<Integer> graphInts = new Graph<>();\n        // Graph 2\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n\n        // A separate component\n        graphInts.addEdge(7, 8);\n        graphInts.addEdge(8, 10);\n        graphInts.addEdge(10, 8);\n\n        // Assert that there are two separate components\n        assertEquals(2, graphInts.countGraphs(), \"Amount of different int-graphs should be 2\");\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Create a graph instance for Character nodes\n        Graph<Character> graphChars = new Graph<>();\n        // Graph 1\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n        // Disconnected graph with nodes 'x', 'y', and 'z'\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n        // Self-loop graph\n        graphChars.addEdge('w', 'w');\n        \n        // Create a graph instance for Integer nodes\n        Graph<Integer> graphInts = new Graph<>();\n        // Graph 2\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n        // Disconnected graph with nodes '7', '8', and '10'\n        graphInts.addEdge(7, 8);\n        graphInts.addEdge(8, 10);\n        graphInts.addEdge(10, 8);\n\n        // Assert that graphChars has 3 disconnected graphs\n        assertEquals(3, graphChars.countGraphs(), \"Incorrect count of disconnected char-graphs\");\n\n        // Assert that graphInts has 2 disconnected graphs\n        assertEquals(2, graphInts.countGraphs(), \"Incorrect count of disconnected int-graphs\");\n    }\n}"
    ]
}