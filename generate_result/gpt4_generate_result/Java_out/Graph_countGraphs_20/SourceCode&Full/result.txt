Source code: 


public int countGraphs() {
    int count = 0;
    Set<Node> markedNodes = new HashSet<Node>();

    for (Node n : nodeList) {
        if (!markedNodes.contains(n)) {
            markedNodes.add(n);
            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));
            count++;
        }
    }

    return count;
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {

    @Test
    public void countGraphsTest() {
        // Test case for graph with characters
        Graph<Character> graphChars = new Graph<>();

        // Graph 1
        graphChars.addEdge('a', 'b');
        graphChars.addEdge('a', 'e');
        graphChars.addEdge('b', 'e');
        graphChars.addEdge('b', 'c');
        graphChars.addEdge('c', 'd');
        graphChars.addEdge('d', 'a');

        // Graph 2 (disconnected from Graph 1)
        graphChars.addEdge('x', 'y');
        graphChars.addEdge('x', 'z');

        // Graph 3 (disconnected and consists of a single self-loop)
        graphChars.addEdge('w', 'w');

        // Assert there are 3 different char-graphs
        int countCharGraphs = graphChars.countGraphs();
        assertEquals(3, countCharGraphs, "The amount of different char-graphs is incorrect.");

        // Test case for graph with integers
        Graph<Integer> graphInts = new Graph<>();

        // Graph 1
        graphInts.addEdge(1, 2);
        graphInts.addEdge(2, 3);
        graphInts.addEdge(2, 4);
        graphInts.addEdge(3, 5);

        // Graph 2 (disconnected from Graph 1)
        graphInts.addEdge(7, 8);
        graphInts.addEdge(8, 10);
        graphInts.addEdge(10, 8);

        // Assert there are 2 different int-graphs
        int countIntGraphs = graphInts.countGraphs();
        assertEquals(2, countIntGraphs, "The amount of different int-graphs is incorrect.");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    
    // Test with Character Nodes
    @Test
    public void countGraphsTestWithChars() {
        Graph<Character> graphChars = new Graph<>();
        
        // Graph 1
        graphChars.addEdge('a', 'b');
        graphChars.addEdge('a', 'e');
        graphChars.addEdge('b', 'e');
        graphChars.addEdge('b', 'c');
        graphChars.addEdge('c', 'd');
        graphChars.addEdge('d', 'a');

        // Graph 2
        graphChars.addEdge('x', 'y');
        graphChars.addEdge('x', 'z');

        // Graph 3 (self-loop)
        graphChars.addEdge('w', 'w');
        
        int count = graphChars.countGraphs();
        assertEquals(3, count, "The number of connected components should be 3");
    }

    // Test with Integer Nodes
    @Test
    public void countGraphsTestWithInts() {
        Graph<Integer> graphInts = new Graph<>();
        
        // Graph 1
        graphInts.addEdge(1, 2);
        graphInts.addEdge(2, 3);
        graphInts.addEdge(2, 4);
        graphInts.addEdge(3, 5);

        // Graph 2
        graphInts.addEdge(7, 8);
        graphInts.addEdge(8, 10);
        graphInts.addEdge(10, 8);
        
        int count = graphInts.countGraphs();
        assertEquals(2, count, "The number of connected components should be 2");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Create a new Graph of Characters
        Graph<Character> graphChars = new Graph<>();
        // Add edges to form a single connected component ('a' to 'e' and 'x' to 'z')
        graphChars.addEdge('a', 'b');
        graphChars.addEdge('b', 'c');
        graphChars.addEdge('c', 'd');
        graphChars.addEdge('d', 'e');
        graphChars.addEdge('e', 'a');
        graphChars.addEdge('x', 'y');
        graphChars.addEdge('y', 'z');
        graphChars.addEdge('z', 'x');
        // Expected count is 2: one for each graph 1 ('a' to 'e') and graph 2 ('x' to 'z')
        assertEquals(2, graphChars.countGraphs(), "Character graph should have 2 connected components.");

        // Create a new Graph of Integers
        Graph<Integer> graphInts = new Graph<>();
        // Add edges to form two connected components
        graphInts.addEdge(1, 2);
        graphInts.addEdge(2, 3);
        // Second component
        graphInts.addEdge(4, 5);
        graphInts.addEdge(5, 6);
        graphInts.addEdge(6, 4);
        // Expected count is 2: one for each graph 1 (1 to 3) and graph 2 (4 to 6)
        assertEquals(2, graphInts.countGraphs(), "Integer graph should have 2 connected components.");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {

    @Test
    void countGraphsTest() {
        Graph<Character> graphChars = new Graph<>();

        // Graph 1
        graphChars.addEdge('a', 'b');
        graphChars.addEdge('a', 'e');
        graphChars.addEdge('b', 'e');
        graphChars.addEdge('b', 'c');
        graphChars.addEdge('c', 'd');
        graphChars.addEdge('d', 'a');

        graphChars.addEdge('x', 'y');
        graphChars.addEdge('x', 'z');

        graphChars.addEdge('w', 'w');

        assertEquals(3, graphChars.countGraphs(), "Count of disconnected char-graphs should be 3");

        Graph<Integer> graphInts = new Graph<>();

        // Graph 2
        graphInts.addEdge(1, 2);
        graphInts.addEdge(2, 3);
        graphInts.addEdge(2, 4);
        graphInts.addEdge(3, 5);

        graphInts.addEdge(7, 8);
        graphInts.addEdge(8, 10);
        graphInts.addEdge(10, 8);

        assertEquals(2, graphInts.countGraphs(), "Count of disconnected int-graphs should be 2");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {

    @Test
    public void countGraphsTest() {
        Graph<Character> graphChars = new Graph<>();

        // Graph 1
        graphChars.addEdge('a', 'b');
        graphChars.addEdge('a', 'e');
        graphChars.addEdge('b', 'e');
        graphChars.addEdge('b', 'c');
        graphChars.addEdge('c', 'd');
        graphChars.addEdge('d', 'a');

        graphChars.addEdge('x', 'y');
        graphChars.addEdge('x', 'z');

        graphChars.addEdge('w', 'w');

        Graph<Integer> graphInts = new Graph<>();

        // Graph 2
        graphInts.addEdge(1, 2);
        graphInts.addEdge(2, 3);
        graphInts.addEdge(2, 4);
        graphInts.addEdge(3, 5);

        graphInts.addEdge(7, 8);
        graphInts.addEdge(8, 10);
        graphInts.addEdge(10, 8);

        assertEquals(3, graphChars.countGraphs(), "The character graph should contain 3 connected components.");
        assertEquals(2, graphInts.countGraphs(), "The integer graph should contain 2 connected components.");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {

    private Graph<Character> graphChars;
    private Graph<Integer> graphInts;

    @BeforeEach
    public void setUp() {
        // Setup graph for Character nodes
        graphChars = new Graph<>();
        graphChars.addEdge('a', 'b');
        graphChars.addEdge('a', 'e');
        graphChars.addEdge('b', 'e');
        graphChars.addEdge('b', 'c');
        graphChars.addEdge('c', 'd');
        graphChars.addEdge('d', 'a');
        graphChars.addEdge('x', 'y');
        graphChars.addEdge('x', 'z');
        graphChars.addEdge('w', 'w');

        // Setup graph for Integer nodes
        graphInts = new Graph<>();
        graphInts.addEdge(1, 2);
        graphInts.addEdge(2, 3);
        graphInts.addEdge(2, 4);
        graphInts.addEdge(3, 5);
        graphInts.addEdge(7, 8);
        graphInts.addEdge(8, 10);
        graphInts.addEdge(10, 8);

    }

    @Test
    public void countGraphsTest() {
        // Assert the count of connected graphs for a graph composed of Characters
        int charConnectedComponents = graphChars.countGraphs();
        assertEquals(2, charConnectedComponents, "The graph of Characters should have 2 connected components.");

        // Assert the count of connected graphs for a graph composed of Integers
        int intConnectedComponents = graphInts.countGraphs();
        assertEquals(2, intConnectedComponents, "The graph of Integers should have 2 connected components.");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Test with Character type
        Graph<Character> graphChars = new Graph<>();
        // Graph 1
        graphChars.addEdge('a', 'b');
        graphChars.addEdge('a', 'e');
        graphChars.addEdge('b', 'e');
        graphChars.addEdge('b', 'c');
        graphChars.addEdge('c', 'd');
        graphChars.addEdge('d', 'a');
        // Another component
        graphChars.addEdge('x', 'y');
        graphChars.addEdge('x', 'z');
        // Another component with single node
        graphChars.addEdge('w', 'w');

        // There should be 3 separate components in the graphChars
        assertEquals(3, graphChars.countGraphs());

        // Test with Integer type
        Graph<Integer> graphInts = new Graph<>();
        // Graph 2
        graphInts.addEdge(1, 2);
        graphInts.addEdge(2, 3);
        graphInts.addEdge(2, 4);
        graphInts.addEdge(3, 5);
        // Another component
        graphInts.addEdge(7, 8);
        graphInts.addEdge(8, 10);
        graphInts.addEdge(10, 8);

        // There should be 2 separate components in the graphInts
        assertEquals(2, graphInts.countGraphs());
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    
    @Test
    public void countGraphsTest() {
        // Testing with Character graph.
        Graph<Character> graphChars = new Graph<>();
        
        // Graph 1 - fully connected component.
        graphChars.addEdge('a', 'b');
        graphChars.addEdge('a', 'e');
        graphChars.addEdge('b', 'e');
        graphChars.addEdge('b', 'c');
        graphChars.addEdge('c', 'd');
        graphChars.addEdge('d', 'a');

        // Graph 2 - another fully connected component.
        graphChars.addEdge('x', 'y');
        graphChars.addEdge('x', 'z');

        // Graph 3 - single node graph.
        graphChars.addEdge('w', 'w');
        
        assertEquals(3, graphChars.countGraphs(), "Graph with characters should contain 3 separate connected components.");

        // Testing with Integer graph.
        Graph<Integer> graphInts = new Graph<>();
        
        // Graph 1 - fully connected component.
        graphInts.addEdge(1, 2);
        graphInts.addEdge(2, 3);
        graphInts.addEdge(2, 4);
        graphInts.addEdge(3, 5);

        // Graph 2 - fully connected component with a cycle.
        graphInts.addEdge(7, 8);
        graphInts.addEdge(8, 10);
        graphInts.addEdge(10, 8);
        
        assertEquals(2, graphInts.countGraphs(), "Graph with integers should contain 2 separate connected components.");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Create a graph for characters
        Graph<Character> graphChars = new Graph<>();
        // Graph 1
        graphChars.addEdge('a', 'b');
        graphChars.addEdge('a', 'e');
        graphChars.addEdge('b', 'e');
        graphChars.addEdge('b', 'c');
        graphChars.addEdge('c', 'd');
        graphChars.addEdge('d', 'a');

        // A separate component
        graphChars.addEdge('x', 'y');
        graphChars.addEdge('x', 'z');

        // A separate self-loop component
        graphChars.addEdge('w', 'w');

        // Assert that there are three separate components
        assertEquals(3, graphChars.countGraphs(), "Amount of different char-graphs should be 3");

        // Create a graph for integers
        Graph<Integer> graphInts = new Graph<>();
        // Graph 2
        graphInts.addEdge(1, 2);
        graphInts.addEdge(2, 3);
        graphInts.addEdge(2, 4);
        graphInts.addEdge(3, 5);

        // A separate component
        graphInts.addEdge(7, 8);
        graphInts.addEdge(8, 10);
        graphInts.addEdge(10, 8);

        // Assert that there are two separate components
        assertEquals(2, graphInts.countGraphs(), "Amount of different int-graphs should be 2");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Create a graph instance for Character nodes
        Graph<Character> graphChars = new Graph<>();
        // Graph 1
        graphChars.addEdge('a', 'b');
        graphChars.addEdge('a', 'e');
        graphChars.addEdge('b', 'e');
        graphChars.addEdge('b', 'c');
        graphChars.addEdge('c', 'd');
        graphChars.addEdge('d', 'a');
        // Disconnected graph with nodes 'x', 'y', and 'z'
        graphChars.addEdge('x', 'y');
        graphChars.addEdge('x', 'z');
        // Self-loop graph
        graphChars.addEdge('w', 'w');
        
        // Create a graph instance for Integer nodes
        Graph<Integer> graphInts = new Graph<>();
        // Graph 2
        graphInts.addEdge(1, 2);
        graphInts.addEdge(2, 3);
        graphInts.addEdge(2, 4);
        graphInts.addEdge(3, 5);
        // Disconnected graph with nodes '7', '8', and '10'
        graphInts.addEdge(7, 8);
        graphInts.addEdge(8, 10);
        graphInts.addEdge(10, 8);

        // Assert that graphChars has 3 disconnected graphs
        assertEquals(3, graphChars.countGraphs(), "Incorrect count of disconnected char-graphs");

        // Assert that graphInts has 2 disconnected graphs
        assertEquals(2, graphInts.countGraphs(), "Incorrect count of disconnected int-graphs");
    }
}


