{
    "project_name": "Java",
    "file_name": "ConnectedComponent.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/ConnectedComponent.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Main method used for counting the connected components. Iterates through\n     * the array of nodes to do a depth first search to get all nodes of the\n     * graph from the actual node. These nodes are added to the array\n     * markedNodes and will be ignored if they are chosen in the nodeList.\n     *\n     * @return returns the amount of unconnected graphs\n     */",
    "source_code": "\npublic int countGraphs() {\n    int count = 0;\n    Set<Node> markedNodes = new HashSet<Node>();\n\n    for (Node n : nodeList) {\n        if (!markedNodes.contains(n)) {\n            markedNodes.add(n);\n            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));\n            count++;\n        }\n    }\n\n    return count;\n}\n",
    "class_name": "Graph",
    "method_name": "countGraphs",
    "arguments": [],
    "generate_test": [
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n\n    private Graph<String> graph;\n    \n    @BeforeEach\n    public void setUp() {\n        graph = new Graph<>();\n        // Prepare nodes and edges for graph\n        graph.addNode(\"A\");\n        graph.addNode(\"B\");\n        graph.addNode(\"C\");\n        graph.addNode(\"D\");\n    }\n    \n    // Assume addNode and addEdge handle both node creation and edge creation appropriately.\n    \n    @Test\n    public void countGraphsTest() {\n        // Create a completely disconnected graph (no edges)\n        assertEquals(4, graph.countGraphs(), \"Expected 4 disconnected graphs\");\n\n        // Connect two nodes, expecting two separate graphs now\n        graph.addEdge(\"A\", \"B\");\n        assertEquals(3, graph.countGraphs(), \"Expected 3 graphs after adding edge A-B\");\n\n        // Connect another pair, expecting a total of 2 separate graphs now\n        graph.addEdge(\"C\", \"D\");\n        assertEquals(2, graph.countGraphs(), \"Expected 2 graphs after adding edge C-D\");\n\n        // Connect across the pairs, expecting a single connected graph now\n        graph.addEdge(\"B\", \"C\");\n        assertEquals(1, graph.countGraphs(), \"Expected 1 graph after connecting B-C\");\n    }\n    \n    // Other test cases could be added here for example dealing with self loops, \n    // adding already existing edges or testing illegal arguments.\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    // Assuming that Graph<E> is a parameterized type and a Node constructor and addEdge method accept parameters of type E.\n    \n    Graph<Integer> graph;\n    \n    @BeforeEach\n    public void setUp() {\n        graph = new Graph<>();\n    }\n\n    @Test\n    public void countGraphsTest() {\n        // Assuming that a graph can add nodes and edges via the addEdge method.\n        // Adding edges and nodes for the first connected component\n        graph.addEdge(1, 2);\n        graph.addEdge(2, 3);\n\n        // Adding edges and nodes for the second connected component\n        graph.addEdge(4, 5);\n\n        // Adding a standalone node (third connected component)\n        graph.addEdge(6, 6); // Self-loop to add the node to the graph\n\n        // There should be three connected components total\n        assertEquals(3, graph.countGraphs(), \"The count of connected components should be 3\");\n\n        // Adding an edge between two existing components should decrease the count\n        graph.addEdge(3, 4);\n\n        // Now there should be two connected components, since nodes 1-2-3 are connected with 4-5\n        assertEquals(2, graph.countGraphs(), \"The count of connected components should be 2 after connecting two components with an edge\");\n    }\n    \n    // Add any additional tests as necessary...\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n\n    private Graph<Integer> graph;\n\n    @BeforeEach\n    public void setUp() {\n        graph = new Graph<>();\n    }\n\n    @Test\n    public void countGraphsTest() {\n        // Test with no nodes or edges\n        assertEquals(0, graph.countGraphs(), \"Graph should have 0 connected components when empty.\");\n\n        // Add nodes but no edges (isolated nodes)\n        graph.addNode(1);\n        graph.addNode(2);\n        graph.addNode(3);\n        assertEquals(3, graph.countGraphs(), \"Graph should have 3 connected components with 3 isolated nodes.\");\n\n        // Add edges to form a connected component\n        graph.addEdge(1, 2);\n        graph.addEdge(2, 3);\n        assertEquals(1, graph.countGraphs(), \"Graph should have 1 connected component when all nodes are connected.\");\n\n        // Add nodes and edges to form another disconnected graph\n        graph.addNode(4);\n        graph.addNode(5);\n        graph.addEdge(4, 5);\n        assertEquals(2, graph.countGraphs(), \"Graph should have 2 connected components with 1 disconnected edge.\");\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n\n    @Test\n    public void countGraphsTest() {\n        Graph<String> graph = new Graph<String>();\n\n        // Set up the nodes and edges for the graph\n\n        // Graph 1\n        Graph<String>.Node nodeA = graph.new Node(\"A\");\n        Graph<String>.Node nodeB = graph.new Node(\"B\");\n        \n        graph.addEdge(\"A\", \"B\");\n\n        // Graph 2\n        Graph<String>.Node nodeC = graph.new Node(\"C\");\n        \n        // No edges connecting graph 1 and graph 2, so they are two separate subgraphs.\n\n        // Run the countGraphs method and assert the expected output\n        assertEquals(2, graph.countGraphs(), \"Graph should have 2 disconnected subgraphs\");\n    }\n}\n\n/* Assuming that there exists appropriate addEdge() and depthFirstSearch() methods within Graph class, which are used to construct and search the graph, respectively. Also, assuming that both the Graph class and Node class are defined with proper members and constructors that can allow the above usage. */\n\n/* Also assuming there exists some implementation for managing nodeList and edgeList inside the Graph class, where addEdge also appropriately updates both lists. */",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    \n    @Test\n    public void countGraphsTest() {\n        // Setup\n        Graph<Character> graph = new Graph<>();\n        \n        // Suppose we are testing 3 disconnected graphs (A-B-C, D-E, F)\n        graph.addEdge('A', 'B');\n        graph.addEdge('B', 'C');\n        graph.addEdge('D', 'E');\n        // Add the nodes without edges to ensure they count as separate graphs\n        graph.addNode('F');\n        \n        int expectedGraphCount = 3;\n        \n        // Execution\n        int actualGraphCount = graph.countGraphs();\n        \n        // Assertion\n        assertEquals(expectedGraphCount, actualGraphCount, \"The countGraphs method should return the correct number of disconnected graphs.\");\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        // Initialize the graph \n        Graph<Integer> graph = new Graph<>();\n        // Add nodes and edges to the graph to form two separate graphs (disjoint sets)\n        graph.addNode(1);\n        graph.addNode(2);\n        graph.addEdge(1, 2);\n        graph.addNode(3);\n        graph.addEdge(2, 3);\n        graph.addNode(4);\n        graph.addNode(5);\n        graph.addEdge(4, 5);\n\n        // Assemble\n        int expectedConnectedComponents = 2;\n\n        // Act\n        int actualConnectedComponents = graph.countGraphs();\n\n        // Assert\n        assertEquals(expectedConnectedComponents, actualConnectedComponents, \"The count of connected components should be 2\");\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n\n    private Graph<String> graph;\n\n    @BeforeEach\n    public void setup() {\n        graph = new Graph<>();\n    }\n\n    @Test\n    public void countGraphsTest() {\n        // Assume that the Graph class has methods to add nodes and edges properly.\n        // We will simulate two separate graphs within the graph instance.\n\n        Graph.Node<String> nodeA = graph.new Node<>(\"A\");\n        Graph.Node<String> nodeB = graph.new Node<>(\"B\");\n        Graph.Node<String> nodeC = graph.new Node<>(\"C\");\n        Graph.Node<String> nodeD = graph.new Node<>(\"D\");\n        Graph.Node<String> nodeE = graph.new Node<>(\"E\");\n        Graph.Node<String> nodeF = graph.new Node<>(\"F\");\n\n        // First graph (A - B - C)\n        graph.addEdge(nodeA, nodeB);\n        graph.addEdge(nodeB, nodeC);\n\n        // Second graph (D - E - F)\n        graph.addEdge(nodeD, nodeE);\n        graph.addEdge(nodeE, nodeF);\n\n        // There should be 2 separate graphs as per setup\n        int count = graph.countGraphs();\n        assertEquals(2, count, \"The count of separate graphs should be 2\");\n    }\n\n    // It may be beneficial to have additional tests to check for edge cases such as empty graphs and single node graphs.\n    @Test\n    public void countGraphsEmptyGraphTest() {\n        // Testing with an empty graph, should have 0 graphs\n        int count = graph.countGraphs();\n        assertEquals(0, count, \"The count of separate graphs in an empty graph should be 0\");\n    }\n\n    @Test\n    public void countGraphsSingleGraphTest() {\n        // Testing with one single node graph\n        Graph.Node<String> singleNode = graph.new Node<>(\"Single\");\n        graph.addEdge(singleNode, singleNode); // Loop edge to make it a graph\n\n        int count = graph.countGraphs();\n        assertEquals(1, count, \"The count of separate graphs with a single node should be 1\");\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n\n    @Test\n    public void countGraphsTest() {\n        // Create an instance of Graph\n        Graph<String> graph = new Graph<String>();\n\n        // Add nodes and edges such that there are two separate graphs (disconnected subgraphs)\n        Graph.Node nodeA = graph.new Node(\"A\");\n        Graph.Node nodeB = graph.new Node(\"B\");\n        Graph.Node nodeC = graph.new Node(\"C\");\n        Graph.Node nodeD = graph.new Node(\"D\");\n        Graph.Node nodeE = graph.new Node(\"E\");\n\n        graph.addEdge(nodeA, nodeB);\n        graph.addEdge(nodeB, nodeC);\n        graph.addEdge(nodeD, nodeE);\n\n        // Run countGraphs to determine the number of disconnected graphs\n        int count = graph.countGraphs();\n\n        // Assert that there are two disconnected graphs\n        assertEquals(2, count);\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n\n    @Test\n    public void countGraphsTest() {\n        // Initialize the graph\n        Graph<String> graph = new Graph<>();\n        \n        // Create nodes\n        Graph.Node<String> nodeA = graph.new Node<>(\"A\");\n        Graph.Node<String> nodeB = graph.new Node<>(\"B\");\n        Graph.Node<String> nodeC = graph.new Node<>(\"C\");\n        \n        // Create separate nodes to test disconnected graph\n        Graph.Node<String> nodeD = graph.new Node<>(\"D\");\n        Graph.Node<String> nodeE = graph.new Node<>(\"E\");\n\n        // Adding edges to the graph to form a connected component\n        graph.addEdge(nodeA.name, nodeB.name); // Connects A with B\n        graph.addEdge(nodeB.name, nodeC.name); // Connects B with C\n\n        // Adding nodes as separate graphs\n        graph.nodeList.add(nodeD);\n        graph.nodeList.add(nodeE);\n\n        // There should be 3 graphs: {A,B,C}, {D}, {E}\n        assertEquals(3, graph.countGraphs());\n\n        // Adding edge between D and E, which should decrease the number of graphs\n        graph.addEdge(nodeD.name, nodeE.name);\n\n        // There should now be 2 graphs: {A, B, C} and {D, E}\n        assertEquals(2, graph.countGraphs());\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n\n    @Test\n    public void countGraphsTest() {\n        // Create an instance of the Graph class\n        Graph<String> graph = new Graph<>();\n        \n        // Test with empty graph (no nodes)\n        assertEquals(0, graph.countGraphs(), \"An empty graph should have 0 connected components.\");\n\n        // Add nodes and edges to form two separate graphs: \n        // Graph 1: A-B-C (connected graph)\n        graph.addEdge(\"A\", \"B\");\n        graph.addEdge(\"B\", \"C\");\n        \n        // Graph 2: D-E (connected graph), independent of Graph 1\n        graph.addEdge(\"D\", \"E\");\n\n        assertEquals(2, graph.countGraphs(), \"Graph should have 2 connected components.\");\n\n        // Adding an edge to connect the two separate graphs: B-D\n        graph.addEdge(\"B\", \"D\");\n\n        assertEquals(1, graph.countGraphs(), \"Graph should have 1 connected component after connecting the two separate graphs.\");\n    }\n}"
    ]
}