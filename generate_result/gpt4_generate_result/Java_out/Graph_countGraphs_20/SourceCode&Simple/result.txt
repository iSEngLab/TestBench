Source code: 


public int countGraphs() {
    int count = 0;
    Set<Node> markedNodes = new HashSet<Node>();

    for (Node n : nodeList) {
        if (!markedNodes.contains(n)) {
            markedNodes.add(n);
            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));
            count++;
        }
    }

    return count;
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {

    private Graph<String> graph;
    
    @BeforeEach
    public void setUp() {
        graph = new Graph<>();
        // Prepare nodes and edges for graph
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        graph.addNode("D");
    }
    
    // Assume addNode and addEdge handle both node creation and edge creation appropriately.
    
    @Test
    public void countGraphsTest() {
        // Create a completely disconnected graph (no edges)
        assertEquals(4, graph.countGraphs(), "Expected 4 disconnected graphs");

        // Connect two nodes, expecting two separate graphs now
        graph.addEdge("A", "B");
        assertEquals(3, graph.countGraphs(), "Expected 3 graphs after adding edge A-B");

        // Connect another pair, expecting a total of 2 separate graphs now
        graph.addEdge("C", "D");
        assertEquals(2, graph.countGraphs(), "Expected 2 graphs after adding edge C-D");

        // Connect across the pairs, expecting a single connected graph now
        graph.addEdge("B", "C");
        assertEquals(1, graph.countGraphs(), "Expected 1 graph after connecting B-C");
    }
    
    // Other test cases could be added here for example dealing with self loops, 
    // adding already existing edges or testing illegal arguments.
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    // Assuming that Graph<E> is a parameterized type and a Node constructor and addEdge method accept parameters of type E.
    
    Graph<Integer> graph;
    
    @BeforeEach
    public void setUp() {
        graph = new Graph<>();
    }

    @Test
    public void countGraphsTest() {
        // Assuming that a graph can add nodes and edges via the addEdge method.
        // Adding edges and nodes for the first connected component
        graph.addEdge(1, 2);
        graph.addEdge(2, 3);

        // Adding edges and nodes for the second connected component
        graph.addEdge(4, 5);

        // Adding a standalone node (third connected component)
        graph.addEdge(6, 6); // Self-loop to add the node to the graph

        // There should be three connected components total
        assertEquals(3, graph.countGraphs(), "The count of connected components should be 3");

        // Adding an edge between two existing components should decrease the count
        graph.addEdge(3, 4);

        // Now there should be two connected components, since nodes 1-2-3 are connected with 4-5
        assertEquals(2, graph.countGraphs(), "The count of connected components should be 2 after connecting two components with an edge");
    }
    
    // Add any additional tests as necessary...
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {

    private Graph<Integer> graph;

    @BeforeEach
    public void setUp() {
        graph = new Graph<>();
    }

    @Test
    public void countGraphsTest() {
        // Test with no nodes or edges
        assertEquals(0, graph.countGraphs(), "Graph should have 0 connected components when empty.");

        // Add nodes but no edges (isolated nodes)
        graph.addNode(1);
        graph.addNode(2);
        graph.addNode(3);
        assertEquals(3, graph.countGraphs(), "Graph should have 3 connected components with 3 isolated nodes.");

        // Add edges to form a connected component
        graph.addEdge(1, 2);
        graph.addEdge(2, 3);
        assertEquals(1, graph.countGraphs(), "Graph should have 1 connected component when all nodes are connected.");

        // Add nodes and edges to form another disconnected graph
        graph.addNode(4);
        graph.addNode(5);
        graph.addEdge(4, 5);
        assertEquals(2, graph.countGraphs(), "Graph should have 2 connected components with 1 disconnected edge.");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {

    @Test
    public void countGraphsTest() {
        Graph<String> graph = new Graph<String>();

        // Set up the nodes and edges for the graph

        // Graph 1
        Graph<String>.Node nodeA = graph.new Node("A");
        Graph<String>.Node nodeB = graph.new Node("B");
        
        graph.addEdge("A", "B");

        // Graph 2
        Graph<String>.Node nodeC = graph.new Node("C");
        
        // No edges connecting graph 1 and graph 2, so they are two separate subgraphs.

        // Run the countGraphs method and assert the expected output
        assertEquals(2, graph.countGraphs(), "Graph should have 2 disconnected subgraphs");
    }
}

/* Assuming that there exists appropriate addEdge() and depthFirstSearch() methods within Graph class, which are used to construct and search the graph, respectively. Also, assuming that both the Graph class and Node class are defined with proper members and constructors that can allow the above usage. */

/* Also assuming there exists some implementation for managing nodeList and edgeList inside the Graph class, where addEdge also appropriately updates both lists. */


No.5 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    
    @Test
    public void countGraphsTest() {
        // Setup
        Graph<Character> graph = new Graph<>();
        
        // Suppose we are testing 3 disconnected graphs (A-B-C, D-E, F)
        graph.addEdge('A', 'B');
        graph.addEdge('B', 'C');
        graph.addEdge('D', 'E');
        // Add the nodes without edges to ensure they count as separate graphs
        graph.addNode('F');
        
        int expectedGraphCount = 3;
        
        // Execution
        int actualGraphCount = graph.countGraphs();
        
        // Assertion
        assertEquals(expectedGraphCount, actualGraphCount, "The countGraphs method should return the correct number of disconnected graphs.");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    @Test
    public void countGraphsTest() {
        // Initialize the graph 
        Graph<Integer> graph = new Graph<>();
        // Add nodes and edges to the graph to form two separate graphs (disjoint sets)
        graph.addNode(1);
        graph.addNode(2);
        graph.addEdge(1, 2);
        graph.addNode(3);
        graph.addEdge(2, 3);
        graph.addNode(4);
        graph.addNode(5);
        graph.addEdge(4, 5);

        // Assemble
        int expectedConnectedComponents = 2;

        // Act
        int actualConnectedComponents = graph.countGraphs();

        // Assert
        assertEquals(expectedConnectedComponents, actualConnectedComponents, "The count of connected components should be 2");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {

    private Graph<String> graph;

    @BeforeEach
    public void setup() {
        graph = new Graph<>();
    }

    @Test
    public void countGraphsTest() {
        // Assume that the Graph class has methods to add nodes and edges properly.
        // We will simulate two separate graphs within the graph instance.

        Graph.Node<String> nodeA = graph.new Node<>("A");
        Graph.Node<String> nodeB = graph.new Node<>("B");
        Graph.Node<String> nodeC = graph.new Node<>("C");
        Graph.Node<String> nodeD = graph.new Node<>("D");
        Graph.Node<String> nodeE = graph.new Node<>("E");
        Graph.Node<String> nodeF = graph.new Node<>("F");

        // First graph (A - B - C)
        graph.addEdge(nodeA, nodeB);
        graph.addEdge(nodeB, nodeC);

        // Second graph (D - E - F)
        graph.addEdge(nodeD, nodeE);
        graph.addEdge(nodeE, nodeF);

        // There should be 2 separate graphs as per setup
        int count = graph.countGraphs();
        assertEquals(2, count, "The count of separate graphs should be 2");
    }

    // It may be beneficial to have additional tests to check for edge cases such as empty graphs and single node graphs.
    @Test
    public void countGraphsEmptyGraphTest() {
        // Testing with an empty graph, should have 0 graphs
        int count = graph.countGraphs();
        assertEquals(0, count, "The count of separate graphs in an empty graph should be 0");
    }

    @Test
    public void countGraphsSingleGraphTest() {
        // Testing with one single node graph
        Graph.Node<String> singleNode = graph.new Node<>("Single");
        graph.addEdge(singleNode, singleNode); // Loop edge to make it a graph

        int count = graph.countGraphs();
        assertEquals(1, count, "The count of separate graphs with a single node should be 1");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {

    @Test
    public void countGraphsTest() {
        // Create an instance of Graph
        Graph<String> graph = new Graph<String>();

        // Add nodes and edges such that there are two separate graphs (disconnected subgraphs)
        Graph.Node nodeA = graph.new Node("A");
        Graph.Node nodeB = graph.new Node("B");
        Graph.Node nodeC = graph.new Node("C");
        Graph.Node nodeD = graph.new Node("D");
        Graph.Node nodeE = graph.new Node("E");

        graph.addEdge(nodeA, nodeB);
        graph.addEdge(nodeB, nodeC);
        graph.addEdge(nodeD, nodeE);

        // Run countGraphs to determine the number of disconnected graphs
        int count = graph.countGraphs();

        // Assert that there are two disconnected graphs
        assertEquals(2, count);
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {

    @Test
    public void countGraphsTest() {
        // Initialize the graph
        Graph<String> graph = new Graph<>();
        
        // Create nodes
        Graph.Node<String> nodeA = graph.new Node<>("A");
        Graph.Node<String> nodeB = graph.new Node<>("B");
        Graph.Node<String> nodeC = graph.new Node<>("C");
        
        // Create separate nodes to test disconnected graph
        Graph.Node<String> nodeD = graph.new Node<>("D");
        Graph.Node<String> nodeE = graph.new Node<>("E");

        // Adding edges to the graph to form a connected component
        graph.addEdge(nodeA.name, nodeB.name); // Connects A with B
        graph.addEdge(nodeB.name, nodeC.name); // Connects B with C

        // Adding nodes as separate graphs
        graph.nodeList.add(nodeD);
        graph.nodeList.add(nodeE);

        // There should be 3 graphs: {A,B,C}, {D}, {E}
        assertEquals(3, graph.countGraphs());

        // Adding edge between D and E, which should decrease the number of graphs
        graph.addEdge(nodeD.name, nodeE.name);

        // There should now be 2 graphs: {A, B, C} and {D, E}
        assertEquals(2, graph.countGraphs());
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {

    @Test
    public void countGraphsTest() {
        // Create an instance of the Graph class
        Graph<String> graph = new Graph<>();
        
        // Test with empty graph (no nodes)
        assertEquals(0, graph.countGraphs(), "An empty graph should have 0 connected components.");

        // Add nodes and edges to form two separate graphs: 
        // Graph 1: A-B-C (connected graph)
        graph.addEdge("A", "B");
        graph.addEdge("B", "C");
        
        // Graph 2: D-E (connected graph), independent of Graph 1
        graph.addEdge("D", "E");

        assertEquals(2, graph.countGraphs(), "Graph should have 2 connected components.");

        // Adding an edge to connect the two separate graphs: B-D
        graph.addEdge("B", "D");

        assertEquals(1, graph.countGraphs(), "Graph should have 1 connected component after connecting the two separate graphs.");
    }
}


