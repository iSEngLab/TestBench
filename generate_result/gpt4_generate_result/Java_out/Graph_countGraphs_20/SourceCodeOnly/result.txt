Source code: 


public int countGraphs() {
    int count = 0;
    Set<Node> markedNodes = new HashSet<Node>();

    for (Node n : nodeList) {
        if (!markedNodes.contains(n)) {
            markedNodes.add(n);
            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));
            count++;
        }
    }

    return count;
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {

    private Graph graph;

    @BeforeEach
    public void setUp() {
        // Initialize Graph object here with nodes and edges according to your Graph implementation
        // This setup is necessary to test the countGraphs method appropriately
        graph = new Graph();
        // Add nodes and edges to create disconnected graphs for testing
        // For example, if your nodeList is a list field in Graph:
        // graph.nodeList.add(new Node("Node1"));
        // graph.nodeList.add(new Node("Node2"));
        // ... Add all the nodes for the test graphs
        // ... and connect them if necessary to form the disconnected subgraphs
    }

    @Test
    public void countGraphsTest() {
        // Assuming the setup creates two disconnected subgraphs:
        int expectedCount = 2;
        // Call the method countGraphs and assert that it returns the expected number of subgraphs
        assertEquals(expectedCount, graph.countGraphs(), "countGraphs should return the correct number of disconnected subgraphs");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {

    @Test
    public void countGraphsTest() {
        // Arrange
        Graph graph = new Graph();
        Node node1 = new Node();
        Node node2 = new Node();
        Node node3 = new Node();
        Node node4 = new Node();

        // Assuming Graph class has methods to add nodes and edges
        graph.addNode(node1);
        graph.addNode(node2);
        graph.addEdge(node1, node2); // First connected component
        
        graph.addNode(node3);
        graph.addNode(node4);
        // No edges added between node3 and node4, hence they'll be separate components

        int expectedCount = 3; // We expect 3 as there are 3 separate graphs (2 single nodes and 1 connected graph)

        // Act
        int actualCount = graph.countGraphs();

        // Assert
        assertEquals(expectedCount, actualCount, "The count of separate graphs should be 3.");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {

    @Test
    public void countGraphsTest() {
        // Create nodes and graphs
        Node node1 = new Node(...); // Assuming Node class has been defined
        Node node2 = new Node(...);
        Node node3 = new Node(...);
        Node node4 = new Node(...); // Assume more nodes as needed

        // Connect nodes to form graphs
        // For example:
        // Graph 1: (node1)--(node2)
        // Graph 2: (node3), (node4) are unconnected, hence two different graphs

        // Add nodes to the nodeList used within the countGraphs method
        List<Node> nodeList = new ArrayList<>();
        nodeList.add(node1);
        nodeList.add(node2);
        nodeList.add(node3);
        nodeList.add(node4);

        // Inserting an anonymous Graph class that contains the nodeList
        // and the countGraphs method
        Graph graph = new Graph() {
            List<Node> nodeList = this.nodeList;
            
            public int countGraphs() {
                // Implement the original source code provided here
                int count = 0;
                Set<Node> markedNodes = new HashSet<Node>();

                for (Node n : this.nodeList) {
                    if (!markedNodes.contains(n)) {
                        markedNodes.add(n);
                        markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));
                        count++;
                    }
                }

                return count;
            }
            
            private Set<Node> depthFirstSearch(Node node, List<Node> visited) {
                // Implement DFS logic based on how the actual Node and Graph classes are set up
                // This is just an indicative, since the actual implementation is not given
                Set<Node> connectedNodes = new HashSet<>();
                // ... Perform DFS to collect connected nodes...
                return connectedNodes;
            }
        };

        // Count the number of graphs and assert the expected value (which is 3 in this example)
        int result = graph.countGraphs();
        assertEquals(3, result);
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {

    private Graph graph;

    @BeforeEach
    void setUp() {
        graph = new Graph();
        // Assume Graph class has a method to add nodes or this could be the direct nodeList manipulation
        // Add nodes and edges to simulate a graph
        Node node1 = new Node(1);
        Node node2 = new Node(2);
        Node node3 = new Node(3);
        Node node4 = new Node(4);
        
        graph.addNode(node1);
        graph.addNode(node2);
        graph.addNode(node3);
        // Assuming node4 is disconnected to represent a separate graph
        graph.addNode(node4);
        
        // Add edges to connect the nodes (skipped, as we don't have graph structure details)
        // graph.addEdge(node1, node2);
        // graph.addEdge(node2, node3);
    }

    @Test
    public void countGraphsTest() {
        int expectedCount = 2; // Assuming one connected component with node1, node2, node3 and one separate node node4
        int actualCount = graph.countGraphs();
        assertEquals(expectedCount, actualCount, "The countGraphs method should return the number of disconnected graphs.");
    }

    // If necessary, here add more test cases for various graph configurations

    // Tear down resources if needed after tests
    @AfterEach
    void tearDown() {
        graph = null;
    }

    // Assuming a Node class for the sake of completeness
    private static class Node {
        // Node class details
        private int id;
        public Node(int id) {
            this.id = id;
        }
        // Implement hash and equals if used in a Hash-based collection
        // ...
    }
    
    // Assuming a Graph class that encapsulates nodeList, addNode, etc.
    private static class Graph {
        HashSet<Node> nodeList = new HashSet<>();
        
        public void addNode(Node node) {
            nodeList.add(node);
        }
        
        public int countGraphs() {
            int count = 0;
            Set<Node> markedNodes = new HashSet<Node>();

            for (Node n : nodeList) {
                if (!markedNodes.contains(n)) {
                    markedNodes.add(n);
                    // markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>())); // this line would be in real code
                    count++;
                }
            }

            return count;
        }
        // ...
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

class Node {
    // A simple Node class may be needed for the test unless it's provided elsewhere.
}

public class GraphTest {
    private Graph graph;

    @BeforeEach
    public void setUp() {
        // Initialize a new Graph object before each test
        graph = new Graph();
    }

    @Test
    public void countGraphsTest() {
        // Assuming nodeList is a public field or has an addNode method.
        Node node1 = new Node();
        Node node2 = new Node();
        Node node3 = new Node();
        Node node4 = new Node();
        Node isolatedNode = new Node();

        // Suppose we add edges like this, or in another way if Graph has specific edge methods
        // 1-2-3 is one graph, and 4 is another graph, isolatedNode is an isolated graph
        graph.addNode(node1);
        graph.addNode(node2);
        graph.addNode(node3);
        graph.addNode(node4);
        graph.addNode(isolatedNode);
        
        // Connect nodes here if needed, for example:
        // graph.connectNodes(node1, node2);
        // graph.connectNodes(node2, node3);

        int graphCount = graph.countGraphs(); 

        assertEquals(3, graphCount, "Graph should contain exactly three separate graphs.");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

// Assume that a class Graph and a class Node exist in the same package
// with the appropriate implementation.

public class GraphTest {

    private Graph graph;

    @BeforeEach
    public void setUp() {
        // Set up is done before each test
        graph = new Graph();
    }

    @Test
    public void countGraphsTest() {
        // Assuming Graph has an addNode method to add nodes to nodeList
        Node node1 = new Node(1);
        graph.addNode(node1); // First graph
        Node node2 = new Node(2);
        graph.addNode(node2); // Second graph
        Node node3 = new Node(3);
        Node node4 = new Node(4);
        Node node5 = new Node(5);
        // Node 3, 4, and 5 form the third graph (assuming there's some connection added between them)
        graph.addNode(node3);
        graph.addNode(node4);
        graph.addNode(node5);
        // Assuming Graph has an addEdge method
        graph.addEdge(node3, node4);
        graph.addEdge(node4, node5);

        // Should count 3 separate graphs
        assertEquals(3, graph.countGraphs(), "The count of graphs should be 3");

        // Testing an edge case with no nodes
        graph = new Graph(); // Reset graph
        assertEquals(0, graph.countGraphs(), "The count of graphs should be 0 with no nodes");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    private Graph graph; // Assuming there is a Graph class which has countGraphs method

    @BeforeEach
    public void setup() {
        graph = new Graph();
        // Initialize the graph with nodes and edges if necessary
        // e.g., graph.addNode(new Node(...));
        // graph.addEdge(new Node(...), new Node(...));
    }

    @Test
    public void countGraphsTest() {
        // Test with no nodes
        assertEquals(0, graph.countGraphs(), "Graph should have 0 graphs without any nodes.");

        // Add nodes and potentially some edges to the graph for testing
        Node node1 = new Node();
        graph.addNode(node1);
        // Test with one node with no edges (i.e., the node itself forms a graph)
        assertEquals(1, graph.countGraphs(), "Graph should have 1 graph with one node.");

        Node node2 = new Node();
        Node node3 = new Node();
        graph.addNode(node2);
        graph.addNode(node3);

        // Connect nodes if you are testing connected components
        graph.addEdge(node1, node2);

        // Test with multiple nodes with a single graph
        assertEquals(1, graph.countGraphs(), "Graph should have 1 graph with two connected nodes.");

        // Test with multiple nodes, more than one graph
        // Since node3 is not connected to node1 or node2, there should be two graphs
        assertEquals(2, graph.countGraphs(), "Graph should have 2 separate graphs.");

        // Add more tests as necessary to cover different scenarios,
        // such as fully connected graph, graph with loops, etc.
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

class Node {
    // Assuming there is a class Node defined here for the purpose of this testing.
}

class Graph {
    private List<Node> nodeList;
    
    // Assuming there is an implementation detail here for nodeList and a depthFirstSearch method.
    
    public Graph(List<Node> nodeList) {
        this.nodeList = nodeList;
    }

    public int countGraphs() {
        int count = 0;
        Set<Node> markedNodes = new HashSet<Node>();

        for (Node n : nodeList) {
            if (!markedNodes.contains(n)) {
                markedNodes.add(n);
                markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));
                count++;
            }
        }

        return count;
    }
    
    // Other methods such as depthFirstSearch would be here
}

public class GraphTest {
    
    Graph graph;

    @BeforeEach
    public void setUp() {
        // Setup the graph with nodes for the test, this may change based on the Node implementation and Graph's constructor
        List<Node> nodeList = new ArrayList<>();
        // Add nodes to nodeList that form one or more separate graphs
        graph = new Graph(nodeList);
        // Assume the graph initialization here
    }

    @Test
    public void countGraphsTest() {
        // Assert that countGraphs returns the correct number of separate graphs
        // The expected number should match the number of separate graphs added to the nodeList during setup
        int expected = <EXPECTED_NUMBER_OF_GRAPHS>;
        int actual = graph.countGraphs();
        assertEquals(expected, actual, "The count of graphs should be equal to the expected number.");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {
    private Graph graph;

    @BeforeEach
    public void setUp() {
        // Assuming Graph class has a default constructor
        graph = new Graph();
        // Assuming we have a method addNode to add nodes to the graph
        // Assuming Node is a class that is used to create new nodes
    }

    @Test
    public void countGraphsTest() {
        // Assume graph is empty initially and should have 0 connected components
        assertEquals(0, graph.countGraphs());

        // Add first node, should result in one graph
        Node node1 = new Node();
        graph.addNode(node1);
        assertEquals(1, graph.countGraphs());

        // Add a second disconnected node, should increase graph count
        Node node2 = new Node();
        graph.addNode(node2);
        assertEquals(2, graph.countGraphs());

        // Connect node1 and node2, should decrease graph count as they are part of the same graph
        // Assuming connectNodes is a method that takes two nodes and connects them
        graph.connectNodes(node1, node2);
        assertEquals(1, graph.countGraphs());

        // Add another disconnected node, should result in two separate graphs
        Node node3 = new Node();
        graph.addNode(node3);
        assertEquals(2, graph.countGraphs());
    }

    @AfterEach
    public void tearDown() {
        // Clean up resources, if necessary
        graph = null;
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class GraphTest {

    @Test
    public void countGraphsTest() {
        // Set up an instance of Graph and populate it
        Graph graph = new Graph();
        // Assuming Graph has methods like addNode/Edge to construct the graph.

        // We will set up two disconnected sets of nodes (assuming these methods exist)
        // This could vary greatly depending on the actual implementation of the Graph class
        Node node1 = new Node(1);
        Node node2 = new Node(2);
        Node node3 = new Node(3);
        Node node4 = new Node(4);
        
        graph.addNode(node1);
        graph.addNode(node2);
        graph.addNode(node3);
        graph.addNode(node4);
        
        graph.addEdge(node1, node2); // First graph
        
        // Node 3 and 4 are not connected to nodes 1 and 2, they form separate graphs.
        
        // Act
        int graphCount = graph.countGraphs();
        
        // Assert
        assertEquals(3, graphCount, "Graph should have 3 separate graphs");
    }
}


