{
    "project_name": "Java",
    "file_name": "HammingDistance.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/strings/HammingDistance.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.strings",
    "docstring": "/**\n     * calculate the hamming distance between two strings of equal length\n     *\n     * @param s1 the first string\n     * @param s2 the second string\n     * @return {@code int} hamming distance\n     * @throws Exception\n     */",
    "source_code": "\npublic static int calculateHammingDistance(String s1, String s2) throws Exception {\n    if (s1.length() != s2.length()) {\n        throw new Exception(\"String lengths must be equal\");\n    }\n\n    int stringLength = s1.length();\n    int counter = 0;\n\n    for (int i = 0; i < stringLength; i++) {\n        if (s1.charAt(i) != s2.charAt(i)) {\n            counter++;\n        }\n    }\n    return counter;\n}\n",
    "class_name": "HammingDistance",
    "method_name": "calculateHammingDistance",
    "arguments": [
        "String s1",
        "String s2"
    ],
    "generate_test": [
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        // String with no differences -- Hamming distance should be 0\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"test\", \"test\"));\n\n        // String with one difference -- Hamming distance should be 1\n        assertEquals(1, HammingDistance.calculateHammingDistance(\"test\", \"best\"));\n\n        // String with complete difference -- Hamming distance equals the length\n        assertEquals(4, HammingDistance.calculateHammingDistance(\"test\", \"fail\"));\n\n        // Expected Exception for strings of different lengths\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"test\", \"testing\");\n        });\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        try {\n            assertEquals(4, HammingDistance.calculateHammingDistance(\"karolin\", \"kathrin\"));\n            assertEquals(2, HammingDistance.calculateHammingDistance(\"karolin\", \"kerstin\"));\n            assertEquals(0, HammingDistance.calculateHammingDistance(\"1011101\", \"1011101\"));\n            assertEquals(3, HammingDistance.calculateHammingDistance(\"2173896\", \"2233796\"));\n        } catch (Exception e) {\n            fail(\"An exception should not have been thrown for strings of equal length\");\n        }\n\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"0101\", \"11010\");\n        });\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test equal strings\n        assertDoesNotThrow(() -> {\n            assertEquals(0, HammingDistance.calculateHammingDistance(\"test\", \"test\")); // Expect Hamming Distance to be 0\n        });\n\n        // Test strings with some differences\n        assertDoesNotThrow(() -> {\n            assertEquals(2, HammingDistance.calculateHammingDistance(\"1010\", \"1001\")); // Expect Hamming Distance to be 2\n        });\n\n        // Test strings with all different characters\n        assertDoesNotThrow(() -> {\n            assertEquals(4, HammingDistance.calculateHammingDistance(\"abcd\", \"wxyz\")); // Expect Hamming Distance to be 4\n        });\n\n        // Test exception for strings with unequal length\n        assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"java\", \"jvm\"); // Expect to throw Exception because of unequal length\n        });\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test with strings of equal length\n        assertDoesNotThrow(() -> {\n            assertEquals(2, HammingDistance.calculateHammingDistance(\"1011101\", \"1001001\"));\n            assertEquals(3, HammingDistance.calculateHammingDistance(\"2143896\", \"2233796\"));\n        });\n\n        // Test with one of the strings being empty\n        Exception exceptionEmptyStrings = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"\", \"a\");\n        });\n        assertEquals(\"String lengths must be equal\", exceptionEmptyStrings.getMessage());\n\n        // Test with strings that have a Hamming distance of 0 (identical strings)\n        assertDoesNotThrow(() -> {\n            assertEquals(0, HammingDistance.calculateHammingDistance(\"identical\", \"identical\"));\n        });\n\n        // Test with different length strings\n        Exception exceptionDifferentLengths = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"short\", \"longer\");\n        });\n        assertEquals(\"String lengths must be equal\", exceptionDifferentLengths.getMessage());\n\n        // Test with null strings to ensure NullPointerException\n        assertThrows(NullPointerException.class, () -> {\n            HammingDistance.calculateHammingDistance(null, null);\n        });\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() throws Exception {\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"\", \"\"));\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"abc\", \"abc\"));\n        assertEquals(3, HammingDistance.calculateHammingDistance(\"abc\", \"def\"));\n        assertEquals(1, HammingDistance.calculateHammingDistance(\"karolin\", \"kathrin\"));\n\n        Exception thrown = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"abcd\", \"abc\");\n        });\n        assertTrue(thrown.getMessage().contains(\"String lengths must be equal\"));\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() throws Exception {\n        // Test with strings of equal length but different characters\n        assertEquals(3, HammingDistance.calculateHammingDistance(\"1011101\", \"1001001\"));\n\n        // Test with strings of equal length and identical characters\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"111\", \"111\"));\n\n        // Test with empty strings (length 0, so distance should also be 0)\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"\", \"\"));\n        \n        // Test with null inputs (should throw an Exception)\n        // Uncomment the following test if it aligns with desired behavior, as null would cause \n        // NullPointerException before reaching the length check in the actual method.\n        // Exception exception = assertThrows(Exception.class, () -> {\n        //     HammingDistance.calculateHammingDistance(null, null);\n        // });\n        // assertTrue(exception.getMessage().contains(\"String lengths must be equal\"));\n\n        // Testing for exception throwing when lengths are unequal\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"101\", \"1001\");\n        });\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test case with strings of equal length and with different characters\n        assertDoesNotThrow(() -> {\n            int hammingDistance = HammingDistance.calculateHammingDistance(\"1011101\", \"1001001\");\n            assertEquals(2, hammingDistance, \"Hamming distance calculation is incorrect.\");\n        });\n\n        // Test case with strings of equal length and the same characters\n        assertDoesNotThrow(() -> {\n            int hammingDistance = HammingDistance.calculateHammingDistance(\"1011101\", \"1011101\");\n            assertEquals(0, hammingDistance, \"Hamming distance should be zero when strings are identical.\");\n        });\n\n        // Test case with strings of unequal length\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"1011101\", \"0110\");\n        });\n        String expectedMessage = \"String lengths must be equal\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage), \"Expected an exception with the message 'String lengths must be equal'\");\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test for strings of same length with no differences\n        assertDoesNotThrow(() -> assertEquals(0, HammingDistance.calculateHammingDistance(\"abcde\", \"abcde\")));\n\n        // Test for strings of same length with some differences\n        assertDoesNotThrow(() -> assertEquals(2, HammingDistance.calculateHammingDistance(\"abcde\", \"abdce\")));\n\n        // Test for strings of same length with all differences\n        assertDoesNotThrow(() -> assertEquals(5, HammingDistance.calculateHammingDistance(\"abcde\", \"vwxyz\")));\n\n        // Test for strings of different length\n        Exception exception = assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance(\"abc\", \"abcd\"));\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n\n        // Test for empty strings\n        assertDoesNotThrow(() -> assertEquals(0, HammingDistance.calculateHammingDistance(\"\", \"\")));\n\n        // Test for null strings\n        assertThrows(NullPointerException.class, () -> HammingDistance.calculateHammingDistance(null, null));\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test case where the strings are identical\n        assertDoesNotThrow(() -> {\n            int distance = HammingDistance.calculateHammingDistance(\"test\", \"test\");\n            assertEquals(0, distance);\n        });\n\n        // Test case with a different character in one position\n        assertDoesNotThrow(() -> {\n            int distance = HammingDistance.calculateHammingDistance(\"test\", \"best\");\n            assertEquals(1, distance);\n        });\n\n        // Test case where all characters are different\n        assertDoesNotThrow(() -> {\n            int distance = HammingDistance.calculateHammingDistance(\"test\", \"fail\");\n            assertEquals(4, distance);\n        });\n\n        // Test case with strings of different lengths, which should throw an exception\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"test\", \"tests\");\n        });\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() throws Exception {\n        // Test with equal strings (distance should be 0)\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"1011101\", \"1011101\"), \"Hamming distance should be 0 for identical strings\");\n\n        // Test with strings which have a Hamming distance of 2\n        assertEquals(2, HammingDistance.calculateHammingDistance(\"1011101\", \"1001001\"), \"Hamming distance should be 2\");\n\n        // Test with strings which have a Hamming distance of 3\n        assertEquals(3, HammingDistance.calculateHammingDistance(\"2173896\", \"2233796\"), \"Hamming distance should be 3\");\n\n        // Test with strings of different lengths, should throw an Exception\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"1011101\", \"10111\");\n        });\n        assertTrue(exception.getMessage().contains(\"String lengths must be equal\"), \"Exception message should state that the string lengths must be equal\");\n    }\n}"
    ]
}