Source code: 


public static int calculateHammingDistance(String s1, String s2) throws Exception {
    if (s1.length() != s2.length()) {
        throw new Exception("String lengths must be equal");
    }

    int stringLength = s1.length();
    int counter = 0;

    for (int i = 0; i < stringLength; i++) {
        if (s1.charAt(i) != s2.charAt(i)) {
            counter++;
        }
    }
    return counter;
}



No.1 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() {
        // String with no differences -- Hamming distance should be 0
        assertEquals(0, HammingDistance.calculateHammingDistance("test", "test"));

        // String with one difference -- Hamming distance should be 1
        assertEquals(1, HammingDistance.calculateHammingDistance("test", "best"));

        // String with complete difference -- Hamming distance equals the length
        assertEquals(4, HammingDistance.calculateHammingDistance("test", "fail"));

        // Expected Exception for strings of different lengths
        Exception exception = assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("test", "testing");
        });
        assertEquals("String lengths must be equal", exception.getMessage());
    }
}


No.2 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() {
        try {
            assertEquals(4, HammingDistance.calculateHammingDistance("karolin", "kathrin"));
            assertEquals(2, HammingDistance.calculateHammingDistance("karolin", "kerstin"));
            assertEquals(0, HammingDistance.calculateHammingDistance("1011101", "1011101"));
            assertEquals(3, HammingDistance.calculateHammingDistance("2173896", "2233796"));
        } catch (Exception e) {
            fail("An exception should not have been thrown for strings of equal length");
        }

        Exception exception = assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("0101", "11010");
        });
        assertEquals("String lengths must be equal", exception.getMessage());
    }
}


No.3 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        // Test equal strings
        assertDoesNotThrow(() -> {
            assertEquals(0, HammingDistance.calculateHammingDistance("test", "test")); // Expect Hamming Distance to be 0
        });

        // Test strings with some differences
        assertDoesNotThrow(() -> {
            assertEquals(2, HammingDistance.calculateHammingDistance("1010", "1001")); // Expect Hamming Distance to be 2
        });

        // Test strings with all different characters
        assertDoesNotThrow(() -> {
            assertEquals(4, HammingDistance.calculateHammingDistance("abcd", "wxyz")); // Expect Hamming Distance to be 4
        });

        // Test exception for strings with unequal length
        assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("java", "jvm"); // Expect to throw Exception because of unequal length
        });
    }
}


No.4 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() {
        // Test with strings of equal length
        assertDoesNotThrow(() -> {
            assertEquals(2, HammingDistance.calculateHammingDistance("1011101", "1001001"));
            assertEquals(3, HammingDistance.calculateHammingDistance("2143896", "2233796"));
        });

        // Test with one of the strings being empty
        Exception exceptionEmptyStrings = assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("", "a");
        });
        assertEquals("String lengths must be equal", exceptionEmptyStrings.getMessage());

        // Test with strings that have a Hamming distance of 0 (identical strings)
        assertDoesNotThrow(() -> {
            assertEquals(0, HammingDistance.calculateHammingDistance("identical", "identical"));
        });

        // Test with different length strings
        Exception exceptionDifferentLengths = assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("short", "longer");
        });
        assertEquals("String lengths must be equal", exceptionDifferentLengths.getMessage());

        // Test with null strings to ensure NullPointerException
        assertThrows(NullPointerException.class, () -> {
            HammingDistance.calculateHammingDistance(null, null);
        });
    }
}


No.5 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() throws Exception {
        assertEquals(0, HammingDistance.calculateHammingDistance("", ""));
        assertEquals(0, HammingDistance.calculateHammingDistance("abc", "abc"));
        assertEquals(3, HammingDistance.calculateHammingDistance("abc", "def"));
        assertEquals(1, HammingDistance.calculateHammingDistance("karolin", "kathrin"));

        Exception thrown = assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("abcd", "abc");
        });
        assertTrue(thrown.getMessage().contains("String lengths must be equal"));
    }
}


No.6 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() throws Exception {
        // Test with strings of equal length but different characters
        assertEquals(3, HammingDistance.calculateHammingDistance("1011101", "1001001"));

        // Test with strings of equal length and identical characters
        assertEquals(0, HammingDistance.calculateHammingDistance("111", "111"));

        // Test with empty strings (length 0, so distance should also be 0)
        assertEquals(0, HammingDistance.calculateHammingDistance("", ""));
        
        // Test with null inputs (should throw an Exception)
        // Uncomment the following test if it aligns with desired behavior, as null would cause 
        // NullPointerException before reaching the length check in the actual method.
        // Exception exception = assertThrows(Exception.class, () -> {
        //     HammingDistance.calculateHammingDistance(null, null);
        // });
        // assertTrue(exception.getMessage().contains("String lengths must be equal"));

        // Testing for exception throwing when lengths are unequal
        Exception exception = assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("101", "1001");
        });
        assertEquals("String lengths must be equal", exception.getMessage());
    }
}


No.7 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() {
        // Test case with strings of equal length and with different characters
        assertDoesNotThrow(() -> {
            int hammingDistance = HammingDistance.calculateHammingDistance("1011101", "1001001");
            assertEquals(2, hammingDistance, "Hamming distance calculation is incorrect.");
        });

        // Test case with strings of equal length and the same characters
        assertDoesNotThrow(() -> {
            int hammingDistance = HammingDistance.calculateHammingDistance("1011101", "1011101");
            assertEquals(0, hammingDistance, "Hamming distance should be zero when strings are identical.");
        });

        // Test case with strings of unequal length
        Exception exception = assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("1011101", "0110");
        });
        String expectedMessage = "String lengths must be equal";
        String actualMessage = exception.getMessage();
        assertTrue(actualMessage.contains(expectedMessage), "Expected an exception with the message 'String lengths must be equal'");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() {
        // Test for strings of same length with no differences
        assertDoesNotThrow(() -> assertEquals(0, HammingDistance.calculateHammingDistance("abcde", "abcde")));

        // Test for strings of same length with some differences
        assertDoesNotThrow(() -> assertEquals(2, HammingDistance.calculateHammingDistance("abcde", "abdce")));

        // Test for strings of same length with all differences
        assertDoesNotThrow(() -> assertEquals(5, HammingDistance.calculateHammingDistance("abcde", "vwxyz")));

        // Test for strings of different length
        Exception exception = assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance("abc", "abcd"));
        assertEquals("String lengths must be equal", exception.getMessage());

        // Test for empty strings
        assertDoesNotThrow(() -> assertEquals(0, HammingDistance.calculateHammingDistance("", "")));

        // Test for null strings
        assertThrows(NullPointerException.class, () -> HammingDistance.calculateHammingDistance(null, null));
    }
}


No.9 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        // Test case where the strings are identical
        assertDoesNotThrow(() -> {
            int distance = HammingDistance.calculateHammingDistance("test", "test");
            assertEquals(0, distance);
        });

        // Test case with a different character in one position
        assertDoesNotThrow(() -> {
            int distance = HammingDistance.calculateHammingDistance("test", "best");
            assertEquals(1, distance);
        });

        // Test case where all characters are different
        assertDoesNotThrow(() -> {
            int distance = HammingDistance.calculateHammingDistance("test", "fail");
            assertEquals(4, distance);
        });

        // Test case with strings of different lengths, which should throw an exception
        Exception exception = assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("test", "tests");
        });
        assertEquals("String lengths must be equal", exception.getMessage());
    }
}


No.10 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() throws Exception {
        // Test with equal strings (distance should be 0)
        assertEquals(0, HammingDistance.calculateHammingDistance("1011101", "1011101"), "Hamming distance should be 0 for identical strings");

        // Test with strings which have a Hamming distance of 2
        assertEquals(2, HammingDistance.calculateHammingDistance("1011101", "1001001"), "Hamming distance should be 2");

        // Test with strings which have a Hamming distance of 3
        assertEquals(3, HammingDistance.calculateHammingDistance("2173896", "2233796"), "Hamming distance should be 3");

        // Test with strings of different lengths, should throw an Exception
        Exception exception = assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("1011101", "10111");
        });
        assertTrue(exception.getMessage().contains("String lengths must be equal"), "Exception message should state that the string lengths must be equal");
    }
}


