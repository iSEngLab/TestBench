{
    "project_name": "Java",
    "file_name": "HammingDistance.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/strings/HammingDistance.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.strings",
    "docstring": "/**\n     * calculate the hamming distance between two strings of equal length\n     *\n     * @param s1 the first string\n     * @param s2 the second string\n     * @return {@code int} hamming distance\n     * @throws Exception\n     */",
    "source_code": "\npublic static int calculateHammingDistance(String s1, String s2) throws Exception {\n    if (s1.length() != s2.length()) {\n        throw new Exception(\"String lengths must be equal\");\n    }\n\n    int stringLength = s1.length();\n    int counter = 0;\n\n    for (int i = 0; i < stringLength; i++) {\n        if (s1.charAt(i) != s2.charAt(i)) {\n            counter++;\n        }\n    }\n    return counter;\n}\n",
    "class_name": "HammingDistance",
    "method_name": "calculateHammingDistance",
    "arguments": [
        "String s1",
        "String s2"
    ],
    "generate_test": [
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() throws Exception {\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"abc\", \"abc\"), \"Hamming distance of identical strings should be 0.\");\n        assertEquals(1, HammingDistance.calculateHammingDistance(\"abc\", \"abd\"), \"Hamming distance should be 1 when there is one character difference.\");\n        assertEquals(3, HammingDistance.calculateHammingDistance(\"abc\", \"def\"), \"Hamming distance should be 3 when all characters are different.\");\n        \n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"abc\", \"abcd\");\n        });\n        assertTrue(exception.getMessage().contains(\"String lengths must be equal\"), \"An exception should be thrown if string lengths are not equal.\");\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        assertAll(\"Hamming Distance\",\n            // Test case with equal strings should return a Hamming distance of 0\n            () -> assertEquals(0, HammingDistance.calculateHammingDistance(\"abc\", \"abc\"), \"Hamming distance for identical strings should be 0\"),\n            \n            // Test case with some different characters should return the correct Hamming distance\n            () -> assertEquals(3, HammingDistance.calculateHammingDistance(\"abcd\", \"abef\"), \"Hamming distance for differing strings should be calculated correctly\"),\n            \n            // Test case with all different characters should return the length of the strings\n            () -> assertEquals(4, HammingDistance.calculateHammingDistance(\"abcd\", \"wxyz\"), \"Hamming distance with all chars different should be the string length\")\n        );\n    }\n\n    @Test\n    public void calculateHammingDistanceExceptionTest() {\n        // Test case to verify that an Exception is thrown when the string lengths are not equal\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"abc\", \"abcd\");\n        }, \"Exception should be thrown if string lengths are not equal\");\n        \n        // Verify if the message of the thrown exception is as expected\n        String expectedMessage = \"String lengths must be equal\";\n        String actualMessage = exception.getMessage();\n        \n        assertTrue(actualMessage.contains(expectedMessage), \"Exception message should inform about unequal string lengths\");\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"1010101\", \"10111\");\n        }, \"String lengths must be equal\");\n\n        assertDoesNotThrow(() -> {\n            HammingDistance.calculateHammingDistance(\"1010101\", \"1010101\");\n        });\n\n        int distance;\n        distance = HammingDistance.calculateHammingDistance(\"1010101\", \"1001001\");\n        assertEquals(2, distance);\n\n        distance = HammingDistance.calculateHammingDistance(\"111\", \"000\");\n        assertEquals(3, distance);\n\n        distance = HammingDistance.calculateHammingDistance(\"\", \"\");\n        assertEquals(0, distance);\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() throws Exception {\n        // Test case 1: Hamming Distance of equal length strings.\n        assertEquals(2, HammingDistance.calculateHammingDistance(\"1011101\", \"1001001\"));\n        // Test case 2: Hamming Distance for identical strings should be 0.\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"11111\", \"11111\"));\n        // Test case 3: Check if exception is thrown when strings are not of equal length\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"010101\", \"1101\");\n        });\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n        // Additional test case 4: Non identical characters at all positions. \n        assertEquals(4, HammingDistance.calculateHammingDistance(\"abcd\", \"wxyz\"));\n        // Additional test case 5: All identical characters, but one.\n        assertEquals(1, HammingDistance.calculateHammingDistance(\"aaaaa\", \"aaaba\"));\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"1010\", \"10101\");\n        }, \"Exception should be thrown if strings are of unequal length\");\n\n        assertDoesNotThrow(() -> {\n            HammingDistance.calculateHammingDistance(\"1010\", \"1001\");\n        }, \"No exception should be thrown if strings are of equal length\");\n\n        assertEquals(2, HammingDistance.calculateHammingDistance(\"1010\", \"1001\"),\n                \"Hamming distance between '1010' and '1001' should be 2\");\n\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"1010\", \"1010\"),\n                \"Hamming distance should be 0 for identical strings\");\n\n        assertEquals(4, HammingDistance.calculateHammingDistance(\"1111\", \"0000\"),\n                \"Hamming distance between '1111' and '0000' should be 4\");\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance(\"1011101\", \"1001001\"));\n\n        assertDoesNotThrow(() -> HammingDistance.calculateHammingDistance(\"1011101\", \"1011101\"));\n\n        int result = 0;\n        try {\n            result = HammingDistance.calculateHammingDistance(\"1011101\", \"1001001\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(2, result);\n        \n        try {\n            result = HammingDistance.calculateHammingDistance(\"111\", \"000\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(3, result);\n        \n        try {\n            result = HammingDistance.calculateHammingDistance(\"\", \"\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(0, result);\n        \n        assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance(\"1010\", \"10101\"));\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"1011101\", \"1001001\");\n        }, \"String lengths must be equal\");\n\n        assertDoesNotThrow(() -> {\n            HammingDistance.calculateHammingDistance(\"1011101\", \"1001001\");\n        });\n\n        assertEquals(2, HammingDistance.calculateHammingDistance(\"1011101\", \"1001001\"));\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"\", \"\"));\n        assertEquals(4, HammingDistance.calculateHammingDistance(\"1111\", \"0000\"));\n        assertEquals(1, HammingDistance.calculateHammingDistance(\"12345\", \"12335\"));\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test with strings of equal length with some differences\n        assertDoesNotThrow(() -> {\n            int distance = HammingDistance.calculateHammingDistance(\"1011101\", \"1001001\");\n            assertEquals(2, distance);\n        });\n\n        // Test with strings of equal length with no differences\n        assertDoesNotThrow(() -> {\n            int distance = HammingDistance.calculateHammingDistance(\"1111111\", \"1111111\");\n            assertEquals(0, distance);\n        });\n\n        // Test with strings of different lengths\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"10101\", \"001\");\n        });\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() throws Exception {\n        // Test with same length strings and some differences\n        assertEquals(3, HammingDistance.calculateHammingDistance(\"karolin\", \"kathrin\"));\n        \n        // Test with same strings (expecting 0 distance)\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"hello\", \"hello\"));\n        \n        // Test with same length strings and no differences (also 0 distance)\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"abcdef\", \"abcdef\"));\n        \n        // Test with empty strings (expecting 0 distance)\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"\", \"\"));\n        \n        // Test for the exception with different length strings\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"test\", \"testing\");\n        });\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() throws Exception {\n        // Test cases with equal length strings\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"test\", \"test\"));\n        assertEquals(1, HammingDistance.calculateHammingDistance(\"test\", \"tost\"));\n        assertEquals(2, HammingDistance.calculateHammingDistance(\"12345\", \"11335\"));\n\n        // Test case with different length strings to check if Exception is thrown\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"test\", \"testing\");\n        });\n\n        String expectedMessage = \"String lengths must be equal\";\n        String actualMessage = exception.getMessage();\n        \n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}"
    ]
}