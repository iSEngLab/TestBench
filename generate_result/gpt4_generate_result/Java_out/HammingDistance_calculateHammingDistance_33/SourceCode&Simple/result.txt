Source code: 


public static int calculateHammingDistance(String s1, String s2) throws Exception {
    if (s1.length() != s2.length()) {
        throw new Exception("String lengths must be equal");
    }

    int stringLength = s1.length();
    int counter = 0;

    for (int i = 0; i < stringLength; i++) {
        if (s1.charAt(i) != s2.charAt(i)) {
            counter++;
        }
    }
    return counter;
}



No.1 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() throws Exception {
        assertEquals(0, HammingDistance.calculateHammingDistance("abc", "abc"), "Hamming distance of identical strings should be 0.");
        assertEquals(1, HammingDistance.calculateHammingDistance("abc", "abd"), "Hamming distance should be 1 when there is one character difference.");
        assertEquals(3, HammingDistance.calculateHammingDistance("abc", "def"), "Hamming distance should be 3 when all characters are different.");
        
        Exception exception = assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("abc", "abcd");
        });
        assertTrue(exception.getMessage().contains("String lengths must be equal"), "An exception should be thrown if string lengths are not equal.");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() {
        assertAll("Hamming Distance",
            // Test case with equal strings should return a Hamming distance of 0
            () -> assertEquals(0, HammingDistance.calculateHammingDistance("abc", "abc"), "Hamming distance for identical strings should be 0"),
            
            // Test case with some different characters should return the correct Hamming distance
            () -> assertEquals(3, HammingDistance.calculateHammingDistance("abcd", "abef"), "Hamming distance for differing strings should be calculated correctly"),
            
            // Test case with all different characters should return the length of the strings
            () -> assertEquals(4, HammingDistance.calculateHammingDistance("abcd", "wxyz"), "Hamming distance with all chars different should be the string length")
        );
    }

    @Test
    public void calculateHammingDistanceExceptionTest() {
        // Test case to verify that an Exception is thrown when the string lengths are not equal
        Exception exception = assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("abc", "abcd");
        }, "Exception should be thrown if string lengths are not equal");
        
        // Verify if the message of the thrown exception is as expected
        String expectedMessage = "String lengths must be equal";
        String actualMessage = exception.getMessage();
        
        assertTrue(actualMessage.contains(expectedMessage), "Exception message should inform about unequal string lengths");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("1010101", "10111");
        }, "String lengths must be equal");

        assertDoesNotThrow(() -> {
            HammingDistance.calculateHammingDistance("1010101", "1010101");
        });

        int distance;
        distance = HammingDistance.calculateHammingDistance("1010101", "1001001");
        assertEquals(2, distance);

        distance = HammingDistance.calculateHammingDistance("111", "000");
        assertEquals(3, distance);

        distance = HammingDistance.calculateHammingDistance("", "");
        assertEquals(0, distance);
    }
}


No.4 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() throws Exception {
        // Test case 1: Hamming Distance of equal length strings.
        assertEquals(2, HammingDistance.calculateHammingDistance("1011101", "1001001"));
        // Test case 2: Hamming Distance for identical strings should be 0.
        assertEquals(0, HammingDistance.calculateHammingDistance("11111", "11111"));
        // Test case 3: Check if exception is thrown when strings are not of equal length
        Exception exception = assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("010101", "1101");
        });
        assertEquals("String lengths must be equal", exception.getMessage());
        // Additional test case 4: Non identical characters at all positions. 
        assertEquals(4, HammingDistance.calculateHammingDistance("abcd", "wxyz"));
        // Additional test case 5: All identical characters, but one.
        assertEquals(1, HammingDistance.calculateHammingDistance("aaaaa", "aaaba"));
    }
}


No.5 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() {
        assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("1010", "10101");
        }, "Exception should be thrown if strings are of unequal length");

        assertDoesNotThrow(() -> {
            HammingDistance.calculateHammingDistance("1010", "1001");
        }, "No exception should be thrown if strings are of equal length");

        assertEquals(2, HammingDistance.calculateHammingDistance("1010", "1001"),
                "Hamming distance between '1010' and '1001' should be 2");

        assertEquals(0, HammingDistance.calculateHammingDistance("1010", "1010"),
                "Hamming distance should be 0 for identical strings");

        assertEquals(4, HammingDistance.calculateHammingDistance("1111", "0000"),
                "Hamming distance between '1111' and '0000' should be 4");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() {
        assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance("1011101", "1001001"));

        assertDoesNotThrow(() -> HammingDistance.calculateHammingDistance("1011101", "1011101"));

        int result = 0;
        try {
            result = HammingDistance.calculateHammingDistance("1011101", "1001001");
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertEquals(2, result);
        
        try {
            result = HammingDistance.calculateHammingDistance("111", "000");
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertEquals(3, result);
        
        try {
            result = HammingDistance.calculateHammingDistance("", "");
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertEquals(0, result);
        
        assertThrows(Exception.class, () -> HammingDistance.calculateHammingDistance("1010", "10101"));
    }
}


No.7 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("1011101", "1001001");
        }, "String lengths must be equal");

        assertDoesNotThrow(() -> {
            HammingDistance.calculateHammingDistance("1011101", "1001001");
        });

        assertEquals(2, HammingDistance.calculateHammingDistance("1011101", "1001001"));
        assertEquals(0, HammingDistance.calculateHammingDistance("", ""));
        assertEquals(4, HammingDistance.calculateHammingDistance("1111", "0000"));
        assertEquals(1, HammingDistance.calculateHammingDistance("12345", "12335"));
    }
}


No.8 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() {
        // Test with strings of equal length with some differences
        assertDoesNotThrow(() -> {
            int distance = HammingDistance.calculateHammingDistance("1011101", "1001001");
            assertEquals(2, distance);
        });

        // Test with strings of equal length with no differences
        assertDoesNotThrow(() -> {
            int distance = HammingDistance.calculateHammingDistance("1111111", "1111111");
            assertEquals(0, distance);
        });

        // Test with strings of different lengths
        Exception exception = assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("10101", "001");
        });
        assertEquals("String lengths must be equal", exception.getMessage());
    }
}


No.9 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() throws Exception {
        // Test with same length strings and some differences
        assertEquals(3, HammingDistance.calculateHammingDistance("karolin", "kathrin"));
        
        // Test with same strings (expecting 0 distance)
        assertEquals(0, HammingDistance.calculateHammingDistance("hello", "hello"));
        
        // Test with same length strings and no differences (also 0 distance)
        assertEquals(0, HammingDistance.calculateHammingDistance("abcdef", "abcdef"));
        
        // Test with empty strings (expecting 0 distance)
        assertEquals(0, HammingDistance.calculateHammingDistance("", ""));
        
        // Test for the exception with different length strings
        Exception exception = assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("test", "testing");
        });
        assertEquals("String lengths must be equal", exception.getMessage());
    }
}


No.10 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() throws Exception {
        // Test cases with equal length strings
        assertEquals(0, HammingDistance.calculateHammingDistance("test", "test"));
        assertEquals(1, HammingDistance.calculateHammingDistance("test", "tost"));
        assertEquals(2, HammingDistance.calculateHammingDistance("12345", "11335"));

        // Test case with different length strings to check if Exception is thrown
        Exception exception = assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("test", "testing");
        });

        String expectedMessage = "String lengths must be equal";
        String actualMessage = exception.getMessage();
        
        assertTrue(actualMessage.contains(expectedMessage));
    }
}


