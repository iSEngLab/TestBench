{
    "project_name": "Java",
    "file_name": "HammingDistance.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/strings/HammingDistance.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.strings",
    "docstring": "/**\n     * calculate the hamming distance between two strings of equal length\n     *\n     * @param s1 the first string\n     * @param s2 the second string\n     * @return {@code int} hamming distance\n     * @throws Exception\n     */",
    "source_code": "\npublic static int calculateHammingDistance(String s1, String s2) throws Exception {\n    if (s1.length() != s2.length()) {\n        throw new Exception(\"String lengths must be equal\");\n    }\n\n    int stringLength = s1.length();\n    int counter = 0;\n\n    for (int i = 0; i < stringLength; i++) {\n        if (s1.charAt(i) != s2.charAt(i)) {\n            counter++;\n        }\n    }\n    return counter;\n}\n",
    "class_name": "HammingDistance",
    "method_name": "calculateHammingDistance",
    "arguments": [
        "String s1",
        "String s2"
    ],
    "generate_test": [
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        assertThrows(Exception.class, () -> {\n            StringUtil.calculateHammingDistance(\"1010101\", \"1010\");\n        }, \"String lengths must be equal\");\n\n        assertEquals(0, StringUtil.calculateHammingDistance(\"\", \"\"), \"Hamming distance between empty strings should be 0\");\n        \n        assertEquals(0, StringUtil.calculateHammingDistance(\"test\", \"test\"), \"Hamming distance between identical strings should be 0\");\n        \n        assertEquals(2, StringUtil.calculateHammingDistance(\"1010101\", \"1001001\"), \"Hamming distance between '1010101' and '1001001' should be 2\");\n        \n        assertEquals(3, StringUtil.calculateHammingDistance(\"karolin\", \"kathrin\"), \"Hamming distance between 'karolin' and 'kathrin' should be 3\");\n        \n        assertEquals(4, StringUtil.calculateHammingDistance(\"2173896\", \"2233796\"), \"Hamming distance between '2173896' and '2233796' should be 4\");\n        \n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test with equal length strings with different characters\n        assertDoesNotThrow(() -> {\n            int result = StringFunctions.calculateHammingDistance(\"karolin\", \"kathrin\");\n            assertEquals(3, result);\n        });\n\n        // Test with equal length strings with same characters\n        assertDoesNotThrow(() -> {\n            int result = StringFunctions.calculateHammingDistance(\"hello\", \"hello\");\n            assertEquals(0, result);\n        });\n\n        // Test with equal length strings with no common characters\n        assertDoesNotThrow(() -> {\n            int result = StringFunctions.calculateHammingDistance(\"abc\", \"xyz\");\n            assertEquals(3, result);\n        });\n\n        // Test with strings of different lengths, which should throw an exception\n        Exception exception = assertThrows(Exception.class, () -> {\n            StringFunctions.calculateHammingDistance(\"1011101\", \"1001001\");\n        });\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    // Your JUNIT Test case with the <FILL> tags filled in\n    @Test\n    public void calculateHammingDistanceTest() {\n        assertThrows(Exception.class, () -> {\n            StringProcessor.calculateHammingDistance(\"abc\", \"ab\");\n        });\n        \n        assertDoesNotThrow(() -> {\n            StringProcessor.calculateHammingDistance(\"1011101\", \"1001001\");\n        });\n        \n        assertThrows(Exception.class, () -> {\n            StringProcessor.calculateHammingDistance(\"101\", \"10\");\n        });\n        \n        assertEquals(2, StringProcessor.calculateHammingDistance(\"1011101\", \"1001001\"));\n        assertEquals(3, StringProcessor.calculateHammingDistance(\"2173896\", \"2233796\"));\n        assertEquals(0, StringProcessor.calculateHammingDistance(\"\", \"\"));\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        try {\n            int result = Strings.calculateHammingDistance(\"1011101\", \"1001001\");\n            assertEquals(2, result); // Expect 2 differences\n\n            result = Strings.calculateHammingDistance(\"2173896\", \"2233796\");\n            assertEquals(3, result); // Expect 3 differences\n\n            result = Strings.calculateHammingDistance(\"\", \"\");\n            assertEquals(0, result); // Expect 0 differences for empty strings\n        } catch (Exception e) {\n            fail(\"An exception should not have been thrown for strings of equal length.\");\n        }\n    }\n\n    @Test\n    public void calculateHammingDistanceWithUnequalLengthsTest() {\n        Exception exception = assertThrows(Exception.class, () -> {\n            Strings.calculateHammingDistance(\"1011101\", \"10111\");\n        });\n\n        String expectedMessage = \"String lengths must be equal\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() throws Exception {\n        assertEquals(2, StringUtils.calculateHammingDistance(\"karolin\", \"kathrin\"));\n        assertEquals(4, StringUtils.calculateHammingDistance(\"karolin\", \"kerstin\"));\n        assertEquals(0, StringUtils.calculateHammingDistance(\"1011101\", \"1011101\"));\n        assertEquals(3, StringUtils.calculateHammingDistance(\"2173896\", \"2233796\"));\n    }\n\n    @Test\n    public void calculateHammingDistanceWithDifferentLengthsTest() {\n        Exception exception = assertThrows(Exception.class, () -> {\n            StringUtils.calculateHammingDistance(\"1011101\", \"011101\");\n        });\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test with equal strings (distance should be 0)\n        assertEquals(0, StringUtils.calculateHammingDistance(\"abc\", \"abc\"));\n\n        // Test with strings differing by one character (distance should be 1)\n        assertEquals(1, StringUtils.calculateHammingDistance(\"abc\", \"abd\"));\n\n        // Test with strings that are completely different (distance should be length of the strings)\n        assertEquals(3, StringUtils.calculateHammingDistance(\"abc\", \"def\"));\n        \n        // Test with empty strings (distance should be 0)\n        assertEquals(0, StringUtils.calculateHammingDistance(\"\", \"\"));\n    }\n\n    @Test\n    public void calculateHammingDistanceExceptionTest() {\n        // Test the exception for strings of different lengths\n        Exception exception = assertThrows(Exception.class, () -> {\n            StringUtils.calculateHammingDistance(\"abc\", \"abcd\");\n        });\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.function.Executable;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        try {\n            // Test for equal-length strings with 2 differences\n            assertEquals(2, Strings.calculateHammingDistance(\"1101\", \"1000\"));\n            // Test for equal-length strings with all characters different\n            assertEquals(3, Strings.calculateHammingDistance(\"abc\", \"def\"));\n            // Test for equal-length strings with no differences\n            assertEquals(0, Strings.calculateHammingDistance(\"test\", \"test\"));\n            // Test for equal-length strings with 1 difference\n            assertEquals(1, Strings.calculateHammingDistance(\"java\", \"jaya\"));\n        } catch (Exception e) {\n            fail(\"Exception should not be thrown for equal length strings\");\n        }\n\n        // Test for strings of different lengths, expecting an exception\n        Exception exception = assertThrows(Exception.class, new Executable() {\n            @Override\n            public void execute() throws Throwable {\n                Strings.calculateHammingDistance(\"10011\", \"1010\");\n            }\n        });\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Case 1: Hamming distance should be calculated correctly\n        assertEquals(2, StringUtilities.calculateHammingDistance(\"1011101\", \"1001001\"));\n        \n        // Case 2: Hamming distance with no differences\n        assertEquals(0, StringUtilities.calculateHammingDistance(\"1111111\", \"1111111\"));\n\n        // Case 3: Exception should be thrown when string lengths are not equal\n        Exception exception = assertThrows(Exception.class, () -> {\n            StringUtilities.calculateHammingDistance(\"01010\", \"101\");\n        });\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n    }\n    \n    // You can have more test cases to cover edge cases and typical scenarios\n\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceValidTest() {\n        // Strings with same length and no differing characters\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"test\", \"test\"));\n        \n        // Strings with same length and 1 differing character\n        assertEquals(1, HammingDistance.calculateHammingDistance(\"test\", \"best\"));\n\n        // Strings with same length and multiple differing characters\n        assertEquals(3, HammingDistance.calculateHammingDistance(\"abc\", \"xyz\"));\n    }\n\n    @Test\n    public void calculateHammingDistanceEmptyStringsTest() {\n        // Both strings are empty\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"\", \"\"));\n    }\n\n    @Test\n    public void calculateHammingDistanceWithDifferentLengthStringsTest() {\n        // Strings of different lengths should throw an exception\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"test\", \"testing\");\n        });\n\n        String expectedMessage = \"String lengths must be equal\";\n        String actualMessage = exception.getMessage();\n        \n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test for equal strings\n        assertDoesNotThrow(() -> {\n            assertEquals(0, HammingDistance.calculateHammingDistance(\"test\", \"test\"));\n        });\n\n        // Test for strings with different characters\n        assertDoesNotThrow(() -> {\n            assertEquals(2, HammingDistance.calculateHammingDistance(\"karolin\", \"kathrin\"));\n        });\n\n        // Test for strings with different lengths\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"10011\", \"101\");\n        });\n        assertEquals(\"String lengths must be equal\", exception.getMessage());\n    }\n}"
    ]
}