Source code: 


public static int calculateHammingDistance(String s1, String s2) throws Exception {
    if (s1.length() != s2.length()) {
        throw new Exception("String lengths must be equal");
    }

    int stringLength = s1.length();
    int counter = 0;

    for (int i = 0; i < stringLength; i++) {
        if (s1.charAt(i) != s2.charAt(i)) {
            counter++;
        }
    }
    return counter;
}



No.1 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() {
        assertThrows(Exception.class, () -> {
            StringUtil.calculateHammingDistance("1010101", "1010");
        }, "String lengths must be equal");

        assertEquals(0, StringUtil.calculateHammingDistance("", ""), "Hamming distance between empty strings should be 0");
        
        assertEquals(0, StringUtil.calculateHammingDistance("test", "test"), "Hamming distance between identical strings should be 0");
        
        assertEquals(2, StringUtil.calculateHammingDistance("1010101", "1001001"), "Hamming distance between '1010101' and '1001001' should be 2");
        
        assertEquals(3, StringUtil.calculateHammingDistance("karolin", "kathrin"), "Hamming distance between 'karolin' and 'kathrin' should be 3");
        
        assertEquals(4, StringUtil.calculateHammingDistance("2173896", "2233796"), "Hamming distance between '2173896' and '2233796' should be 4");
        
    }
}


No.2 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        // Test with equal length strings with different characters
        assertDoesNotThrow(() -> {
            int result = StringFunctions.calculateHammingDistance("karolin", "kathrin");
            assertEquals(3, result);
        });

        // Test with equal length strings with same characters
        assertDoesNotThrow(() -> {
            int result = StringFunctions.calculateHammingDistance("hello", "hello");
            assertEquals(0, result);
        });

        // Test with equal length strings with no common characters
        assertDoesNotThrow(() -> {
            int result = StringFunctions.calculateHammingDistance("abc", "xyz");
            assertEquals(3, result);
        });

        // Test with strings of different lengths, which should throw an exception
        Exception exception = assertThrows(Exception.class, () -> {
            StringFunctions.calculateHammingDistance("1011101", "1001001");
        });
        assertEquals("String lengths must be equal", exception.getMessage());
    }
}


No.3 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    // Your JUNIT Test case with the <FILL> tags filled in
    @Test
    public void calculateHammingDistanceTest() {
        assertThrows(Exception.class, () -> {
            StringProcessor.calculateHammingDistance("abc", "ab");
        });
        
        assertDoesNotThrow(() -> {
            StringProcessor.calculateHammingDistance("1011101", "1001001");
        });
        
        assertThrows(Exception.class, () -> {
            StringProcessor.calculateHammingDistance("101", "10");
        });
        
        assertEquals(2, StringProcessor.calculateHammingDistance("1011101", "1001001"));
        assertEquals(3, StringProcessor.calculateHammingDistance("2173896", "2233796"));
        assertEquals(0, StringProcessor.calculateHammingDistance("", ""));
    }
}


No.4 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() {
        try {
            int result = Strings.calculateHammingDistance("1011101", "1001001");
            assertEquals(2, result); // Expect 2 differences

            result = Strings.calculateHammingDistance("2173896", "2233796");
            assertEquals(3, result); // Expect 3 differences

            result = Strings.calculateHammingDistance("", "");
            assertEquals(0, result); // Expect 0 differences for empty strings
        } catch (Exception e) {
            fail("An exception should not have been thrown for strings of equal length.");
        }
    }

    @Test
    public void calculateHammingDistanceWithUnequalLengthsTest() {
        Exception exception = assertThrows(Exception.class, () -> {
            Strings.calculateHammingDistance("1011101", "10111");
        });

        String expectedMessage = "String lengths must be equal";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }
}


No.5 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() throws Exception {
        assertEquals(2, StringUtils.calculateHammingDistance("karolin", "kathrin"));
        assertEquals(4, StringUtils.calculateHammingDistance("karolin", "kerstin"));
        assertEquals(0, StringUtils.calculateHammingDistance("1011101", "1011101"));
        assertEquals(3, StringUtils.calculateHammingDistance("2173896", "2233796"));
    }

    @Test
    public void calculateHammingDistanceWithDifferentLengthsTest() {
        Exception exception = assertThrows(Exception.class, () -> {
            StringUtils.calculateHammingDistance("1011101", "011101");
        });
        assertEquals("String lengths must be equal", exception.getMessage());
    }
}


No.6 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() {
        // Test with equal strings (distance should be 0)
        assertEquals(0, StringUtils.calculateHammingDistance("abc", "abc"));

        // Test with strings differing by one character (distance should be 1)
        assertEquals(1, StringUtils.calculateHammingDistance("abc", "abd"));

        // Test with strings that are completely different (distance should be length of the strings)
        assertEquals(3, StringUtils.calculateHammingDistance("abc", "def"));
        
        // Test with empty strings (distance should be 0)
        assertEquals(0, StringUtils.calculateHammingDistance("", ""));
    }

    @Test
    public void calculateHammingDistanceExceptionTest() {
        // Test the exception for strings of different lengths
        Exception exception = assertThrows(Exception.class, () -> {
            StringUtils.calculateHammingDistance("abc", "abcd");
        });
        assertEquals("String lengths must be equal", exception.getMessage());
    }
}


No.7 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;

import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() {
        try {
            // Test for equal-length strings with 2 differences
            assertEquals(2, Strings.calculateHammingDistance("1101", "1000"));
            // Test for equal-length strings with all characters different
            assertEquals(3, Strings.calculateHammingDistance("abc", "def"));
            // Test for equal-length strings with no differences
            assertEquals(0, Strings.calculateHammingDistance("test", "test"));
            // Test for equal-length strings with 1 difference
            assertEquals(1, Strings.calculateHammingDistance("java", "jaya"));
        } catch (Exception e) {
            fail("Exception should not be thrown for equal length strings");
        }

        // Test for strings of different lengths, expecting an exception
        Exception exception = assertThrows(Exception.class, new Executable() {
            @Override
            public void execute() throws Throwable {
                Strings.calculateHammingDistance("10011", "1010");
            }
        });
        assertEquals("String lengths must be equal", exception.getMessage());
    }
}


No.8 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() {
        // Case 1: Hamming distance should be calculated correctly
        assertEquals(2, StringUtilities.calculateHammingDistance("1011101", "1001001"));
        
        // Case 2: Hamming distance with no differences
        assertEquals(0, StringUtilities.calculateHammingDistance("1111111", "1111111"));

        // Case 3: Exception should be thrown when string lengths are not equal
        Exception exception = assertThrows(Exception.class, () -> {
            StringUtilities.calculateHammingDistance("01010", "101");
        });
        assertEquals("String lengths must be equal", exception.getMessage());
    }
    
    // You can have more test cases to cover edge cases and typical scenarios

}


No.9 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceValidTest() {
        // Strings with same length and no differing characters
        assertEquals(0, HammingDistance.calculateHammingDistance("test", "test"));
        
        // Strings with same length and 1 differing character
        assertEquals(1, HammingDistance.calculateHammingDistance("test", "best"));

        // Strings with same length and multiple differing characters
        assertEquals(3, HammingDistance.calculateHammingDistance("abc", "xyz"));
    }

    @Test
    public void calculateHammingDistanceEmptyStringsTest() {
        // Both strings are empty
        assertEquals(0, HammingDistance.calculateHammingDistance("", ""));
    }

    @Test
    public void calculateHammingDistanceWithDifferentLengthStringsTest() {
        // Strings of different lengths should throw an exception
        Exception exception = assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("test", "testing");
        });

        String expectedMessage = "String lengths must be equal";
        String actualMessage = exception.getMessage();
        
        assertTrue(actualMessage.contains(expectedMessage));
    }
}


No.10 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {

    @Test
    public void calculateHammingDistanceTest() {
        // Test for equal strings
        assertDoesNotThrow(() -> {
            assertEquals(0, HammingDistance.calculateHammingDistance("test", "test"));
        });

        // Test for strings with different characters
        assertDoesNotThrow(() -> {
            assertEquals(2, HammingDistance.calculateHammingDistance("karolin", "kathrin"));
        });

        // Test for strings with different lengths
        Exception exception = assertThrows(Exception.class, () -> {
            HammingDistance.calculateHammingDistance("10011", "101");
        });
        assertEquals("String lengths must be equal", exception.getMessage());
    }
}


