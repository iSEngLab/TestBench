{
    "project_name": "Java",
    "file_name": "HeapSort.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/sorts/HeapSort.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.sorts",
    "docstring": "/**\n     * For simplicity, we are considering the heap root index as 1 instead of 0.\n     * It simplifies future calculations. Because of that we are decreasing the\n     * provided indexes by 1 in {@link #swap(Object[], int, int)} and\n     * {@link #less(Comparable[], int, int)} functions.\n     */",
    "source_code": "\n@Override\npublic <T extends Comparable<T>> T[] sort(T[] unsorted) {\n    int n = unsorted.length;\n    heapify(unsorted, n);\n    while (n > 1) {\n        swap(unsorted, 1, n--);\n        siftDown(unsorted, 1, n);\n    }\n    return unsorted;\n}\n",
    "class_name": "HeapSort",
    "method_name": "sort",
    "arguments": [
        "T unsorted"
    ],
    "generate_test": [
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    @Test\n    public void sortTest() {\n        \n        // Create an instance of HeapSort to test the sort method\n        HeapSort heapSort = new HeapSort();\n        \n        // Test with an array of Integers\n        Integer[] unsortedIntegers = {3, 1, 4, 1, 5, 9, 2, 6, 5};\n        Integer[] sortedIntegers = heapSort.sort(unsortedIntegers);\n        Integer[] expectedIntegers = {1, 1, 2, 3, 4, 5, 5, 6, 9};\n        assertArrayEquals(expectedIntegers, sortedIntegers, \"The array of integers should be sorted\");\n        \n        // Test with an array of Strings\n        String[] unsortedStrings = {\"banana\", \"cherry\", \"apple\", \"date\"};\n        String[] sortedStrings = heapSort.sort(unsortedStrings);\n        String[] expectedStrings = {\"apple\", \"banana\", \"cherry\", \"date\"};\n        assertArrayEquals(expectedStrings, sortedStrings, \"The array of strings should be sorted\");\n        \n        // Test with an empty array\n        Integer[] emptyIntegers = {};\n        Integer[] sortedEmptyIntegers = heapSort.sort(emptyIntegers);\n        assertArrayEquals(emptyIntegers, sortedEmptyIntegers, \"An empty array should remain empty after sorting\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n\n        Integer[] actual = {3, 2, 1, 5, 4};\n        Integer[] expected = {1, 2, 3, 4, 5};\n        assertArrayEquals(expected, heapSort.sort(actual));\n\n        String[] actualStrings = {\"delta\", \"charlie\", \"echo\", \"bravo\", \"alpha\"};\n        String[] expectedStrings = {\"alpha\", \"bravo\", \"charlie\", \"delta\", \"echo\"};\n        assertArrayEquals(expectedStrings, heapSort.sort(actualStrings));\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    \n    private HeapSort heapSort;\n    \n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n    \n    @Test\n    public void sortTest() {\n        Integer[] inputArray = {4, 10, 3, 5, 1};\n        Integer[] sortedArray = {1, 3, 4, 5, 10};\n        Integer[] resultArray = heapSort.sort(inputArray);\n        assertArrayEquals(sortedArray, resultArray);\n    }\n\n    @Test\n    public void emptyArrayTest() {\n        Integer[] emptyArray = {};\n        Integer[] resultArray = heapSort.sort(emptyArray);\n        assertArrayEquals(emptyArray, resultArray);\n    }\n\n    @Test\n    public void singleElementTest() {\n        Integer[] singleElementArray = {77};\n        Integer[] resultArray = heapSort.sort(singleElementArray);\n        assertArrayEquals(singleElementArray, resultArray);\n    }\n\n    @Test\n    public void alreadySortedArrayTest() {\n        Integer[] sortedArray = {1, 2, 3, 4, 5};\n        Integer[] resultArray = heapSort.sort(sortedArray);\n        assertArrayEquals(sortedArray, resultArray);\n    }\n\n    @Test\n    public void reverseSortedArrayTest() {\n        Integer[] reverseSortedArray = {9, 7, 5, 3, 1};\n        Integer[] sortedArray = {1, 3, 5, 7, 9};\n        Integer[] resultArray = heapSort.sort(reverseSortedArray);\n        assertArrayEquals(sortedArray, resultArray);\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    \n    private HeapSort heapSort;\n    \n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n    \n    @Test\n    public void sortTest() {\n        Integer[] actual = {8, 4, 23, 42, 16, 15};\n        Integer[] expected = {4, 8, 15, 16, 23, 42};\n        assertArrayEquals(expected, heapSort.sort(actual), \"The sorted array should match the expected array.\");\n        \n        String[] actualStr = {\"banana\", \"cherry\", \"apple\", \"date\"};\n        String[] expectedStr = {\"apple\", \"banana\", \"cherry\", \"date\"};\n        assertArrayEquals(expectedStr, heapSort.sort(actualStr), \"The sorted array should match the expected array.\");\n        \n        Double[] actualDoubles = {9.5, 4.4, 6.6, 1.2, 3.3};\n        Double[] expectedDoubles = {1.2, 3.3, 4.4, 6.6, 9.5};\n        assertArrayEquals(expectedDoubles, heapSort.sort(actualDoubles), \"The sorted array should match the expected array.\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n        Integer[] actual = {3, 2, 1, 4, 5};\n        Integer[] expected = {1, 2, 3, 4, 5};\n        actual = heapSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The sorted array does not match the expected array.\");\n        \n        String[] actualStrings = {\"delta\", \"alpha\", \"charlie\", \"bravo\"};\n        String[] expectedStrings = {\"alpha\", \"bravo\", \"charlie\", \"delta\"};\n        actualStrings = heapSort.sort(actualStrings);\n        assertArrayEquals(expectedStrings, actualStrings, \"The sorted array of strings does not match the expected array.\");\n        \n        // Testing when the input array is already sorted\n        Integer[] alreadySortedActual = {1, 2, 3, 4, 5};\n        Integer[] alreadySortedExpected = {1, 2, 3, 4, 5};\n        alreadySortedActual = heapSort.sort(alreadySortedActual);\n        assertArrayEquals(alreadySortedExpected, alreadySortedActual, \"The sorted array should be equal to the original sorted array.\");\n        \n        // Testing on an empty array\n        Integer[] emptyActual = {};\n        Integer[] emptyExpected = {};\n        emptyActual = heapSort.sort(emptyActual);\n        assertArrayEquals(emptyExpected, emptyActual, \"The sorted empty array should also be empty.\");\n        \n        // Testing on a single element array\n        Integer[] singleElementActual = {42};\n        Integer[] singleElementExpected = {42};\n        singleElementActual = heapSort.sort(singleElementActual);\n        assertArrayEquals(singleElementExpected, singleElementActual, \"The sorted single element array should be equal to the original single element array.\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    private HeapSort heapSort;\n    \n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n    \n    @Test\n    public void sortTest() {\n        Integer[] actual = {3, 2, 5, 4, 1};\n        Integer[] expected = {1, 2, 3, 4, 5};\n        actual = heapSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The sorted array does not match the expected output.\");\n    }\n    \n    @Test\n    public void sortTest_Empty() {\n        Integer[] actual = {};\n        Integer[] expected = {};\n        actual = heapSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The sorted array of an empty array should be empty.\");\n    }\n    \n    @Test\n    public void sortTest_SingleElement() {\n        Integer[] actual = {1};\n        Integer[] expected = {1};\n        actual = heapSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The sorted array with a single element should be the same as the input.\");\n    }\n\n    @Test\n    public void sortTest_AlreadySorted() {\n        Integer[] actual = {1, 2, 3, 4, 5};\n        Integer[] expected = {1, 2, 3, 4, 5};\n        actual = heapSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The sorted array that was already sorted should remain unaltered.\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    \n    private HeapSort heapSort;\n\n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n    \n    @Test\n    public void sortTest() {\n        Integer[] unsortedIntegerArray = { 3, 2, 5, 1, 7, 4 };\n        Integer[] sortedIntegerArray = { 1, 2, 3, 4, 5, 7 };\n\n        // Test with integers\n        assertArrayEquals(sortedIntegerArray, heapSort.sort(unsortedIntegerArray));\n        \n        // Test with empty array\n        Integer[] emptyArray = {};\n        assertArrayEquals(emptyArray, heapSort.sort(emptyArray));\n        \n        // Test with single-element array\n        Integer[] singleElementArray = { 1 };\n        assertArrayEquals(singleElementArray, heapSort.sort(singleElementArray));\n        \n        // Test with already sorted array\n        Integer[] alreadySortedArray = { 1, 2, 3, 4, 5 };\n        assertArrayEquals(alreadySortedArray, heapSort.sort(alreadySortedArray));\n        \n        // Test with reverse sorted array\n        Integer[] reverseSortedArray = { 5, 4, 3, 2, 1 };\n        Integer[] expectedSortedArray = { 1, 2, 3, 4, 5 };\n        assertArrayEquals(expectedSortedArray, heapSort.sort(reverseSortedArray));\n        \n        // Test with Strings\n        String[] unsortedStringArray = { \"delta\", \"alpha\", \"charlie\", \"bravo\" };\n        String[] sortedStringArray = { \"alpha\", \"bravo\", \"charlie\", \"delta\" };\n        assertArrayEquals(sortedStringArray, heapSort.sort(unsortedStringArray));\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    private final HeapSort heapSort = new HeapSort();\n\n    @Test\n    public void sortTest() {\n        Integer[] actual = {3, 2, 5, 1, 4};\n        Integer[] expected = {1, 2, 3, 4, 5};\n        actual = heapSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The sorted array is not correct.\");\n\n        String[] actualStrings = {\"delta\", \"charlie\", \"echo\", \"bravo\", \"alpha\"};\n        String[] expectedStrings = {\"alpha\", \"bravo\", \"charlie\", \"delta\", \"echo\"};\n        actualStrings = heapSort.sort(actualStrings);\n        assertArrayEquals(expectedStrings, actualStrings, \"The sorted strings array is not correct.\");\n    }\n\n    @Test\n    public void sortTest_EmptyArray() {\n        Integer[] actualEmpty = {};\n        Integer[] expectedEmpty = {};\n        actualEmpty = heapSort.sort(actualEmpty);\n        assertArrayEquals(expectedEmpty, actualEmpty, \"The sorted empty array should be the same as the input.\");\n    }\n\n    @Test\n    public void sortTest_SingleElement() {\n        Integer[] actualSingle = {1};\n        Integer[] expectedSingle = {1};\n        actualSingle = heapSort.sort(actualSingle);\n        assertArrayEquals(expectedSingle, actualSingle, \"The sorted single-element array should be the same as the input.\");\n    }\n\n    @Test\n    public void sortTest_NullArray() {\n        Integer[] actualNull = null;\n        Assertions.assertThrows(NullPointerException.class, () -> {\n            heapSort.sort(actualNull);\n        }, \"Sorting a null array should throw NullPointerException.\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    private HeapSort heapSort;\n\n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n\n    @Test\n    public void sortTest() {\n        // Test with Integer array\n        Integer[] unsortedIntegers = {3, 2, 5, 1, 4};\n        Integer[] sortedIntegers = {1, 2, 3, 4, 5};\n        assertArrayEquals(sortedIntegers, heapSort.sort(unsortedIntegers));\n\n        // Test with String array\n        String[] unsortedStrings = {\"banana\", \"apple\", \"cherry\", \"date\", \"elderberry\"};\n        String[] sortedStrings = {\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"};\n        assertArrayEquals(sortedStrings, heapSort.sort(unsortedStrings));\n\n        // Test with empty array\n        Integer[] emptyArray = {};\n        assertArrayEquals(emptyArray, heapSort.sort(emptyArray));\n\n        // Test with already sorted array\n        Integer[] alreadySortedArray = {1, 2, 3, 4, 5};\n        assertArrayEquals(alreadySortedArray, heapSort.sort(alreadySortedArray));\n\n        // Test with reverse ordered array\n        Integer[] reverseArray = {5, 4, 3, 2, 1};\n        assertArrayEquals(sortedIntegers, heapSort.sort(reverseArray));\n\n        // Test with single element array\n        Integer[] singleElementArray = {42};\n        assertArrayEquals(singleElementArray, heapSort.sort(singleElementArray));\n\n        // Test with duplicate elements in array\n        Integer[] duplicateElementsArray = {2, 1, 2, 1};\n        Integer[] sortedWithDuplicatesArray = {1, 1, 2, 2};\n        assertArrayEquals(sortedWithDuplicatesArray, heapSort.sort(duplicateElementsArray));\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    private HeapSort heapSort;\n\n    @BeforeEach\n    public void setup() {\n        heapSort = new HeapSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] actual = { 4, 3, 2, 1 };\n        Integer[] expected = { 1, 2, 3, 4 };\n\n        actual = heapSort.sort(actual);\n\n        assertArrayEquals(expected, actual, \"The sorted array is not as expected.\");\n    }\n\n    @Test\n    public void sortTestEmpty() {\n        Integer[] actual = {};\n        Integer[] expected = {};\n\n        actual = heapSort.sort(actual);\n\n        assertArrayEquals(expected, actual, \"The sorted array of an empty array should be an empty array.\");\n    }\n\n    @Test\n    public void sortTestSingleElement() {\n        Integer[] actual = { 1 };\n        Integer[] expected = { 1 };\n\n        actual = heapSort.sort(actual);\n\n        assertArrayEquals(expected, actual, \"The sorted array with a single element should be identical to the input array.\");\n    }\n\n    @Test\n    public void sortTestDuplicates() {\n        Integer[] actual = { 2, 3, 2, 1 };\n        Integer[] expected = { 1, 2, 2, 3 };\n\n        actual = heapSort.sort(actual);\n\n        assertArrayEquals(expected, actual, \"The sorted array should handle duplicates correctly.\");\n    }\n\n    @Test\n    public void sortTestAlreadySorted() {\n        Integer[] actual = { 1, 2, 3, 4 };\n        Integer[] expected = { 1, 2, 3, 4 };\n\n        actual = heapSort.sort(actual);\n\n        assertArrayEquals(expected, actual, \"An already sorted array should not change after being sorted.\");\n    }\n\n    @Test\n    public void sortTestReverseSorted() {\n        Integer[] actual = { 4, 3, 2, 1 };\n        Integer[] expected = { 1, 2, 3, 4 };\n\n        actual = heapSort.sort(actual);\n\n        assertArrayEquals(expected, actual, \"A reverse sorted array should be correctly sorted.\");\n    }\n}"
    ]
}