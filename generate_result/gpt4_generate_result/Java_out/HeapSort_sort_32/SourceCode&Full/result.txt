Source code: 


@Override
public <T extends Comparable<T>> T[] sort(T[] unsorted) {
    int n = unsorted.length;
    heapify(unsorted, n);
    while (n > 1) {
        swap(unsorted, 1, n--);
        siftDown(unsorted, 1, n);
    }
    return unsorted;
}



No.1 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {

    @Test
    public void sortTest() {
        
        // Create an instance of HeapSort to test the sort method
        HeapSort heapSort = new HeapSort();
        
        // Test with an array of Integers
        Integer[] unsortedIntegers = {3, 1, 4, 1, 5, 9, 2, 6, 5};
        Integer[] sortedIntegers = heapSort.sort(unsortedIntegers);
        Integer[] expectedIntegers = {1, 1, 2, 3, 4, 5, 5, 6, 9};
        assertArrayEquals(expectedIntegers, sortedIntegers, "The array of integers should be sorted");
        
        // Test with an array of Strings
        String[] unsortedStrings = {"banana", "cherry", "apple", "date"};
        String[] sortedStrings = heapSort.sort(unsortedStrings);
        String[] expectedStrings = {"apple", "banana", "cherry", "date"};
        assertArrayEquals(expectedStrings, sortedStrings, "The array of strings should be sorted");
        
        // Test with an empty array
        Integer[] emptyIntegers = {};
        Integer[] sortedEmptyIntegers = heapSort.sort(emptyIntegers);
        assertArrayEquals(emptyIntegers, sortedEmptyIntegers, "An empty array should remain empty after sorting");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        HeapSort heapSort = new HeapSort();

        Integer[] actual = {3, 2, 1, 5, 4};
        Integer[] expected = {1, 2, 3, 4, 5};
        assertArrayEquals(expected, heapSort.sort(actual));

        String[] actualStrings = {"delta", "charlie", "echo", "bravo", "alpha"};
        String[] expectedStrings = {"alpha", "bravo", "charlie", "delta", "echo"};
        assertArrayEquals(expectedStrings, heapSort.sort(actualStrings));
    }
}


No.3 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    
    private HeapSort heapSort;
    
    @BeforeEach
    public void setUp() {
        heapSort = new HeapSort();
    }
    
    @Test
    public void sortTest() {
        Integer[] inputArray = {4, 10, 3, 5, 1};
        Integer[] sortedArray = {1, 3, 4, 5, 10};
        Integer[] resultArray = heapSort.sort(inputArray);
        assertArrayEquals(sortedArray, resultArray);
    }

    @Test
    public void emptyArrayTest() {
        Integer[] emptyArray = {};
        Integer[] resultArray = heapSort.sort(emptyArray);
        assertArrayEquals(emptyArray, resultArray);
    }

    @Test
    public void singleElementTest() {
        Integer[] singleElementArray = {77};
        Integer[] resultArray = heapSort.sort(singleElementArray);
        assertArrayEquals(singleElementArray, resultArray);
    }

    @Test
    public void alreadySortedArrayTest() {
        Integer[] sortedArray = {1, 2, 3, 4, 5};
        Integer[] resultArray = heapSort.sort(sortedArray);
        assertArrayEquals(sortedArray, resultArray);
    }

    @Test
    public void reverseSortedArrayTest() {
        Integer[] reverseSortedArray = {9, 7, 5, 3, 1};
        Integer[] sortedArray = {1, 3, 5, 7, 9};
        Integer[] resultArray = heapSort.sort(reverseSortedArray);
        assertArrayEquals(sortedArray, resultArray);
    }
}


No.4 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    
    private HeapSort heapSort;
    
    @BeforeEach
    public void setUp() {
        heapSort = new HeapSort();
    }
    
    @Test
    public void sortTest() {
        Integer[] actual = {8, 4, 23, 42, 16, 15};
        Integer[] expected = {4, 8, 15, 16, 23, 42};
        assertArrayEquals(expected, heapSort.sort(actual), "The sorted array should match the expected array.");
        
        String[] actualStr = {"banana", "cherry", "apple", "date"};
        String[] expectedStr = {"apple", "banana", "cherry", "date"};
        assertArrayEquals(expectedStr, heapSort.sort(actualStr), "The sorted array should match the expected array.");
        
        Double[] actualDoubles = {9.5, 4.4, 6.6, 1.2, 3.3};
        Double[] expectedDoubles = {1.2, 3.3, 4.4, 6.6, 9.5};
        assertArrayEquals(expectedDoubles, heapSort.sort(actualDoubles), "The sorted array should match the expected array.");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;

public class HeapSortTest {
    @Test
    public void sortTest() {
        HeapSort heapSort = new HeapSort();
        Integer[] actual = {3, 2, 1, 4, 5};
        Integer[] expected = {1, 2, 3, 4, 5};
        actual = heapSort.sort(actual);
        assertArrayEquals(expected, actual, "The sorted array does not match the expected array.");
        
        String[] actualStrings = {"delta", "alpha", "charlie", "bravo"};
        String[] expectedStrings = {"alpha", "bravo", "charlie", "delta"};
        actualStrings = heapSort.sort(actualStrings);
        assertArrayEquals(expectedStrings, actualStrings, "The sorted array of strings does not match the expected array.");
        
        // Testing when the input array is already sorted
        Integer[] alreadySortedActual = {1, 2, 3, 4, 5};
        Integer[] alreadySortedExpected = {1, 2, 3, 4, 5};
        alreadySortedActual = heapSort.sort(alreadySortedActual);
        assertArrayEquals(alreadySortedExpected, alreadySortedActual, "The sorted array should be equal to the original sorted array.");
        
        // Testing on an empty array
        Integer[] emptyActual = {};
        Integer[] emptyExpected = {};
        emptyActual = heapSort.sort(emptyActual);
        assertArrayEquals(emptyExpected, emptyActual, "The sorted empty array should also be empty.");
        
        // Testing on a single element array
        Integer[] singleElementActual = {42};
        Integer[] singleElementExpected = {42};
        singleElementActual = heapSort.sort(singleElementActual);
        assertArrayEquals(singleElementExpected, singleElementActual, "The sorted single element array should be equal to the original single element array.");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    private HeapSort heapSort;
    
    @BeforeEach
    public void setUp() {
        heapSort = new HeapSort();
    }
    
    @Test
    public void sortTest() {
        Integer[] actual = {3, 2, 5, 4, 1};
        Integer[] expected = {1, 2, 3, 4, 5};
        actual = heapSort.sort(actual);
        assertArrayEquals(expected, actual, "The sorted array does not match the expected output.");
    }
    
    @Test
    public void sortTest_Empty() {
        Integer[] actual = {};
        Integer[] expected = {};
        actual = heapSort.sort(actual);
        assertArrayEquals(expected, actual, "The sorted array of an empty array should be empty.");
    }
    
    @Test
    public void sortTest_SingleElement() {
        Integer[] actual = {1};
        Integer[] expected = {1};
        actual = heapSort.sort(actual);
        assertArrayEquals(expected, actual, "The sorted array with a single element should be the same as the input.");
    }

    @Test
    public void sortTest_AlreadySorted() {
        Integer[] actual = {1, 2, 3, 4, 5};
        Integer[] expected = {1, 2, 3, 4, 5};
        actual = heapSort.sort(actual);
        assertArrayEquals(expected, actual, "The sorted array that was already sorted should remain unaltered.");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    
    private HeapSort heapSort;

    @BeforeEach
    public void setUp() {
        heapSort = new HeapSort();
    }
    
    @Test
    public void sortTest() {
        Integer[] unsortedIntegerArray = { 3, 2, 5, 1, 7, 4 };
        Integer[] sortedIntegerArray = { 1, 2, 3, 4, 5, 7 };

        // Test with integers
        assertArrayEquals(sortedIntegerArray, heapSort.sort(unsortedIntegerArray));
        
        // Test with empty array
        Integer[] emptyArray = {};
        assertArrayEquals(emptyArray, heapSort.sort(emptyArray));
        
        // Test with single-element array
        Integer[] singleElementArray = { 1 };
        assertArrayEquals(singleElementArray, heapSort.sort(singleElementArray));
        
        // Test with already sorted array
        Integer[] alreadySortedArray = { 1, 2, 3, 4, 5 };
        assertArrayEquals(alreadySortedArray, heapSort.sort(alreadySortedArray));
        
        // Test with reverse sorted array
        Integer[] reverseSortedArray = { 5, 4, 3, 2, 1 };
        Integer[] expectedSortedArray = { 1, 2, 3, 4, 5 };
        assertArrayEquals(expectedSortedArray, heapSort.sort(reverseSortedArray));
        
        // Test with Strings
        String[] unsortedStringArray = { "delta", "alpha", "charlie", "bravo" };
        String[] sortedStringArray = { "alpha", "bravo", "charlie", "delta" };
        assertArrayEquals(sortedStringArray, heapSort.sort(unsortedStringArray));
    }
}


No.8 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {

    private final HeapSort heapSort = new HeapSort();

    @Test
    public void sortTest() {
        Integer[] actual = {3, 2, 5, 1, 4};
        Integer[] expected = {1, 2, 3, 4, 5};
        actual = heapSort.sort(actual);
        assertArrayEquals(expected, actual, "The sorted array is not correct.");

        String[] actualStrings = {"delta", "charlie", "echo", "bravo", "alpha"};
        String[] expectedStrings = {"alpha", "bravo", "charlie", "delta", "echo"};
        actualStrings = heapSort.sort(actualStrings);
        assertArrayEquals(expectedStrings, actualStrings, "The sorted strings array is not correct.");
    }

    @Test
    public void sortTest_EmptyArray() {
        Integer[] actualEmpty = {};
        Integer[] expectedEmpty = {};
        actualEmpty = heapSort.sort(actualEmpty);
        assertArrayEquals(expectedEmpty, actualEmpty, "The sorted empty array should be the same as the input.");
    }

    @Test
    public void sortTest_SingleElement() {
        Integer[] actualSingle = {1};
        Integer[] expectedSingle = {1};
        actualSingle = heapSort.sort(actualSingle);
        assertArrayEquals(expectedSingle, actualSingle, "The sorted single-element array should be the same as the input.");
    }

    @Test
    public void sortTest_NullArray() {
        Integer[] actualNull = null;
        Assertions.assertThrows(NullPointerException.class, () -> {
            heapSort.sort(actualNull);
        }, "Sorting a null array should throw NullPointerException.");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    private HeapSort heapSort;

    @BeforeEach
    public void setUp() {
        heapSort = new HeapSort();
    }

    @Test
    public void sortTest() {
        // Test with Integer array
        Integer[] unsortedIntegers = {3, 2, 5, 1, 4};
        Integer[] sortedIntegers = {1, 2, 3, 4, 5};
        assertArrayEquals(sortedIntegers, heapSort.sort(unsortedIntegers));

        // Test with String array
        String[] unsortedStrings = {"banana", "apple", "cherry", "date", "elderberry"};
        String[] sortedStrings = {"apple", "banana", "cherry", "date", "elderberry"};
        assertArrayEquals(sortedStrings, heapSort.sort(unsortedStrings));

        // Test with empty array
        Integer[] emptyArray = {};
        assertArrayEquals(emptyArray, heapSort.sort(emptyArray));

        // Test with already sorted array
        Integer[] alreadySortedArray = {1, 2, 3, 4, 5};
        assertArrayEquals(alreadySortedArray, heapSort.sort(alreadySortedArray));

        // Test with reverse ordered array
        Integer[] reverseArray = {5, 4, 3, 2, 1};
        assertArrayEquals(sortedIntegers, heapSort.sort(reverseArray));

        // Test with single element array
        Integer[] singleElementArray = {42};
        assertArrayEquals(singleElementArray, heapSort.sort(singleElementArray));

        // Test with duplicate elements in array
        Integer[] duplicateElementsArray = {2, 1, 2, 1};
        Integer[] sortedWithDuplicatesArray = {1, 1, 2, 2};
        assertArrayEquals(sortedWithDuplicatesArray, heapSort.sort(duplicateElementsArray));
    }
}


No.10 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {

    private HeapSort heapSort;

    @BeforeEach
    public void setup() {
        heapSort = new HeapSort();
    }

    @Test
    public void sortTest() {
        Integer[] actual = { 4, 3, 2, 1 };
        Integer[] expected = { 1, 2, 3, 4 };

        actual = heapSort.sort(actual);

        assertArrayEquals(expected, actual, "The sorted array is not as expected.");
    }

    @Test
    public void sortTestEmpty() {
        Integer[] actual = {};
        Integer[] expected = {};

        actual = heapSort.sort(actual);

        assertArrayEquals(expected, actual, "The sorted array of an empty array should be an empty array.");
    }

    @Test
    public void sortTestSingleElement() {
        Integer[] actual = { 1 };
        Integer[] expected = { 1 };

        actual = heapSort.sort(actual);

        assertArrayEquals(expected, actual, "The sorted array with a single element should be identical to the input array.");
    }

    @Test
    public void sortTestDuplicates() {
        Integer[] actual = { 2, 3, 2, 1 };
        Integer[] expected = { 1, 2, 2, 3 };

        actual = heapSort.sort(actual);

        assertArrayEquals(expected, actual, "The sorted array should handle duplicates correctly.");
    }

    @Test
    public void sortTestAlreadySorted() {
        Integer[] actual = { 1, 2, 3, 4 };
        Integer[] expected = { 1, 2, 3, 4 };

        actual = heapSort.sort(actual);

        assertArrayEquals(expected, actual, "An already sorted array should not change after being sorted.");
    }

    @Test
    public void sortTestReverseSorted() {
        Integer[] actual = { 4, 3, 2, 1 };
        Integer[] expected = { 1, 2, 3, 4 };

        actual = heapSort.sort(actual);

        assertArrayEquals(expected, actual, "A reverse sorted array should be correctly sorted.");
    }
}


