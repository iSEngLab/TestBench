{
    "project_name": "Java",
    "file_name": "HeapSort.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/sorts/HeapSort.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.sorts",
    "docstring": "/**\n     * For simplicity, we are considering the heap root index as 1 instead of 0.\n     * It simplifies future calculations. Because of that we are decreasing the\n     * provided indexes by 1 in {@link #swap(Object[], int, int)} and\n     * {@link #less(Comparable[], int, int)} functions.\n     */",
    "source_code": "\n@Override\npublic <T extends Comparable<T>> T[] sort(T[] unsorted) {\n    int n = unsorted.length;\n    heapify(unsorted, n);\n    while (n > 1) {\n        swap(unsorted, 1, n--);\n        siftDown(unsorted, 1, n);\n    }\n    return unsorted;\n}\n",
    "class_name": "HeapSort",
    "method_name": "sort",
    "arguments": [
        "T unsorted"
    ],
    "generate_test": [
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n        Integer[] actual = {3, 1, 4, 1, 5, 9};\n        Integer[] expected = {1, 1, 3, 4, 5, 9};\n\n        assertArrayEquals(expected, heapSort.sort(actual), \"Array should be sorted\");\n\n        actual = new Integer[]{2, 7, 1, 8, 2, 8, 1};\n        expected = new Integer[]{1, 1, 2, 2, 7, 8, 8};\n\n        assertArrayEquals(expected, heapSort.sort(actual), \"Array should be sorted\");\n        \n        actual = new Integer[]{};\n        expected = new Integer[]{};\n\n        assertArrayEquals(expected, heapSort.sort(actual), \"Empty array should remain unchanged\");\n\n        actual = new Integer[]{10};\n        expected = new Integer[]{10};\n\n        assertArrayEquals(expected, heapSort.sort(actual), \"Single element array should remain unchanged\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    \n    @Test\n    public void sortTestIntegerArray() {\n        HeapSort heapSort = new HeapSort();\n        Integer[] actual = {5, 3, 0, -2, 4, 1};\n        Integer[] expected = {-2, 0, 1, 3, 4, 5};\n        assertArrayEquals(expected, heapSort.sort(actual));\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    private final HeapSort heapSort = new HeapSort();\n\n    @Test\n    public void sortTest() {\n        Integer[] actual = {4, 3, 2, 5, 1};\n        Integer[] expected = {1, 2, 3, 4, 5};\n        actual = heapSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The sorted array should be: [1, 2, 3, 4, 5]\");\n        \n        String[] actualStrings = {\"delta\", \"charlie\", \"echo\", \"bravo\", \"alpha\"};\n        String[] expectedStrings = {\"alpha\", \"bravo\", \"charlie\", \"delta\", \"echo\"};\n        actualStrings = heapSort.sort(actualStrings);\n        assertArrayEquals(expectedStrings, actualStrings, \"The sorted strings should be: [alpha, bravo, charlie, delta, echo]\");\n        \n        // Test with empty array\n        Integer[] emptyActual = new Integer[0];\n        Integer[] emptyExpected = new Integer[0];\n        emptyActual = heapSort.sort(emptyActual);\n        assertArrayEquals(emptyExpected, emptyActual, \"The sorted empty array should be equal to an empty array.\");\n        \n        // Test with single element array\n        Integer[] singleActual = {1};\n        Integer[] singleExpected = {1};\n        singleActual = heapSort.sort(singleActual);\n        assertArrayEquals(singleExpected, singleActual, \"A single-element array should not change after sorting.\");\n        \n        // Test with null elements\n        Integer[] nullArray = {3, null, 1};\n        Throwable exception = assertThrows(NullPointerException.class, () -> heapSort.sort(nullArray));\n        assertNotNull(exception, \"Sorting an array with a null value should throw NullPointerException.\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\npublic class HeapSortTest {\n\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n\n        Integer[] unsortedArray = {4, 3, 2, 1};\n        Integer[] sortedArray = {1, 2, 3, 4};\n        \n        Integer[] resultArray = heapSort.sort(unsortedArray);\n        \n        // Check if the result array is sorted\n        for (int i = 1; i < resultArray.length; i++) {\n            assertTrue(resultArray[i - 1].compareTo(resultArray[i]) <= 0);\n        }\n        \n        // Additionally, compare the expected sorted array with the result\n        assertArrayEquals(sortedArray, resultArray, \"The array is not sorted correctly\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        HeapSort<Integer> heapSort = new HeapSort<>();\n        Integer[] unsorted = {4, 3, 2, 5, 1};\n        Integer[] expected = {1, 2, 3, 4, 5};\n        \n        Integer[] sorted = heapSort.sort(unsorted);\n        \n        assertArrayEquals(expected, sorted, \"The sorted array should be: {1, 2, 3, 4, 5}\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    \n    private final HeapSort heapSort = new HeapSort();\n\n    @Test\n    public void sortTest() {\n        // Test case for Integer array\n        Integer[] actualInt = {3, 2, 5, 4, 1};\n        Integer[] expectedInt = {1, 2, 3, 4, 5};\n        actualInt = heapSort.sort(actualInt);\n        assertArrayEquals(expectedInt, actualInt, \"The integer array is not sorted correctly.\");\n        \n        // Test case for String array\n        String[] actualStr = {\"Delta\", \"Bravo\", \"Charlie\", \"Echo\", \"Alpha\"};\n        String[] expectedStr = {\"Alpha\", \"Bravo\", \"Charlie\", \"Delta\", \"Echo\"};\n        actualStr = heapSort.sort(actualStr);\n        assertArrayEquals(expectedStr, actualStr, \"The string array is not sorted correctly.\");\n        \n        // Test case for empty array\n        Integer[] actualEmpty = {};\n        Integer[] expectedEmpty = {};\n        actualEmpty = heapSort.sort(actualEmpty);\n        assertArrayEquals(expectedEmpty, actualEmpty, \"The empty array should remain unchanged.\");\n        \n        // Test case for single-element array\n        Integer[] actualSingle = {42};\n        Integer[] expectedSingle = {42};\n        actualSingle = heapSort.sort(actualSingle);\n        assertArrayEquals(expectedSingle, actualSingle, \"The single-element array should remain unchanged.\");\n        \n        // Test case for already sorted array\n        Integer[] actualSorted = {1, 2, 3, 4, 5};\n        Integer[] expectedSorted = {1, 2, 3, 4, 5};\n        actualSorted = heapSort.sort(actualSorted);\n        assertArrayEquals(expectedSorted, actualSorted, \"The already sorted array should remain unchanged.\");\n        \n        // Test for null input. Since the method does not handle null, we expect a NullPointerException\n        assertThrows(NullPointerException.class, () -> {\n            heapSort.sort(null);\n        }, \"Sorting null should throw NullPointerException.\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    private HeapSort heapSort;\n\n    @BeforeEach\n    public void setup() {\n        heapSort = new HeapSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] inputArray = {4, 3, 2, 10, 12, 1, 5, 6};\n        Integer[] expectedOutput = {1, 2, 3, 4, 5, 6, 10, 12};\n\n        Integer[] sortedArray = heapSort.sort(inputArray);\n\n        assertArrayEquals(expectedOutput, sortedArray, \"The sorted array should match the expected output.\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n        \n        // Case 1: Testing with integers\n        Integer[] intArray = {4, 3, 2, 1};\n        Integer[] intExpected = {1, 2, 3, 4};\n        Integer[] intSorted = heapSort.sort(intArray);\n        assertArrayEquals(intExpected, intSorted, \"The integer array should be sorted after calling the sort method.\");\n\n        // Case 2: Testing with empty array\n        Integer[] emptyArray = {};\n        Integer[] emptyExpected = {};\n        Integer[] emptySorted = heapSort.sort(emptyArray);\n        assertArrayEquals(emptyExpected, emptySorted, \"An empty array should not change after calling the sort method.\");\n\n        // Case 3: Testing with already sorted array\n        Integer[] sortedArray = {1, 2, 3, 4, 5};\n        Integer[] sortedExpected = {1, 2, 3, 4, 5};\n        Integer[] sortedArraySorted = heapSort.sort(sortedArray);\n        assertArrayEquals(sortedExpected, sortedArraySorted, \"An already sorted array should remain unchanged after calling the sort method.\");\n        \n        // Case 4: Testing with Strings\n        String[] stringArray = {\"delta\", \"bravo\", \"charlie\", \"alpha\"};\n        String[] stringExpected = {\"alpha\", \"bravo\", \"charlie\", \"delta\"};\n        String[] stringSorted = heapSort.sort(stringArray);\n        assertArrayEquals(stringExpected, stringSorted, \"The string array should be sorted after calling the sort method.\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    \n    private HeapSort heapSort;\n    \n    @BeforeEach\n    public void setup() {\n        heapSort = new HeapSort();\n    }\n    \n    @Test\n    public void sortTest() {\n        Integer[] unsorted = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3};\n        Integer[] expected = {1, 1, 2, 3, 3, 4, 5, 5, 6, 9};\n\n        Integer[] sorted = heapSort.sort(unsorted);\n        \n        assertArrayEquals(expected, sorted, \"The sorted array does not match the expected array\");\n    }\n    \n    // Add more tests if necessary for different generic types and edge cases.\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    private HeapSort heapSort;\n\n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] inputArray = {4, 1, 3, 9, 7};\n        Integer[] expectedArray = {1, 3, 4, 7, 9};\n        Integer[] sortedArray = heapSort.sort(inputArray);\n\n        assertArrayEquals(expectedArray, sortedArray, \"The sorted array does not match the expected array.\");\n    }\n    \n    @AfterEach\n    public void tearDown() {\n        heapSort = null;\n    }\n}"
    ]
}