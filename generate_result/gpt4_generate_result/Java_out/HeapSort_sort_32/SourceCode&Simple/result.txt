Source code: 


@Override
public <T extends Comparable<T>> T[] sort(T[] unsorted) {
    int n = unsorted.length;
    heapify(unsorted, n);
    while (n > 1) {
        swap(unsorted, 1, n--);
        siftDown(unsorted, 1, n);
    }
    return unsorted;
}



No.1 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {

    @Test
    public void sortTest() {
        HeapSort heapSort = new HeapSort();
        Integer[] actual = {3, 1, 4, 1, 5, 9};
        Integer[] expected = {1, 1, 3, 4, 5, 9};

        assertArrayEquals(expected, heapSort.sort(actual), "Array should be sorted");

        actual = new Integer[]{2, 7, 1, 8, 2, 8, 1};
        expected = new Integer[]{1, 1, 2, 2, 7, 8, 8};

        assertArrayEquals(expected, heapSort.sort(actual), "Array should be sorted");
        
        actual = new Integer[]{};
        expected = new Integer[]{};

        assertArrayEquals(expected, heapSort.sort(actual), "Empty array should remain unchanged");

        actual = new Integer[]{10};
        expected = new Integer[]{10};

        assertArrayEquals(expected, heapSort.sort(actual), "Single element array should remain unchanged");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    
    @Test
    public void sortTestIntegerArray() {
        HeapSort heapSort = new HeapSort();
        Integer[] actual = {5, 3, 0, -2, 4, 1};
        Integer[] expected = {-2, 0, 1, 3, 4, 5};
        assertArrayEquals(expected, heapSort.sort(actual));
    }
}


No.3 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {

    private final HeapSort heapSort = new HeapSort();

    @Test
    public void sortTest() {
        Integer[] actual = {4, 3, 2, 5, 1};
        Integer[] expected = {1, 2, 3, 4, 5};
        actual = heapSort.sort(actual);
        assertArrayEquals(expected, actual, "The sorted array should be: [1, 2, 3, 4, 5]");
        
        String[] actualStrings = {"delta", "charlie", "echo", "bravo", "alpha"};
        String[] expectedStrings = {"alpha", "bravo", "charlie", "delta", "echo"};
        actualStrings = heapSort.sort(actualStrings);
        assertArrayEquals(expectedStrings, actualStrings, "The sorted strings should be: [alpha, bravo, charlie, delta, echo]");
        
        // Test with empty array
        Integer[] emptyActual = new Integer[0];
        Integer[] emptyExpected = new Integer[0];
        emptyActual = heapSort.sort(emptyActual);
        assertArrayEquals(emptyExpected, emptyActual, "The sorted empty array should be equal to an empty array.");
        
        // Test with single element array
        Integer[] singleActual = {1};
        Integer[] singleExpected = {1};
        singleActual = heapSort.sort(singleActual);
        assertArrayEquals(singleExpected, singleActual, "A single-element array should not change after sorting.");
        
        // Test with null elements
        Integer[] nullArray = {3, null, 1};
        Throwable exception = assertThrows(NullPointerException.class, () -> heapSort.sort(nullArray));
        assertNotNull(exception, "Sorting an array with a null value should throw NullPointerException.");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;

public class HeapSortTest {

    @Test
    public void sortTest() {
        HeapSort heapSort = new HeapSort();

        Integer[] unsortedArray = {4, 3, 2, 1};
        Integer[] sortedArray = {1, 2, 3, 4};
        
        Integer[] resultArray = heapSort.sort(unsortedArray);
        
        // Check if the result array is sorted
        for (int i = 1; i < resultArray.length; i++) {
            assertTrue(resultArray[i - 1].compareTo(resultArray[i]) <= 0);
        }
        
        // Additionally, compare the expected sorted array with the result
        assertArrayEquals(sortedArray, resultArray, "The array is not sorted correctly");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        HeapSort<Integer> heapSort = new HeapSort<>();
        Integer[] unsorted = {4, 3, 2, 5, 1};
        Integer[] expected = {1, 2, 3, 4, 5};
        
        Integer[] sorted = heapSort.sort(unsorted);
        
        assertArrayEquals(expected, sorted, "The sorted array should be: {1, 2, 3, 4, 5}");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    
    private final HeapSort heapSort = new HeapSort();

    @Test
    public void sortTest() {
        // Test case for Integer array
        Integer[] actualInt = {3, 2, 5, 4, 1};
        Integer[] expectedInt = {1, 2, 3, 4, 5};
        actualInt = heapSort.sort(actualInt);
        assertArrayEquals(expectedInt, actualInt, "The integer array is not sorted correctly.");
        
        // Test case for String array
        String[] actualStr = {"Delta", "Bravo", "Charlie", "Echo", "Alpha"};
        String[] expectedStr = {"Alpha", "Bravo", "Charlie", "Delta", "Echo"};
        actualStr = heapSort.sort(actualStr);
        assertArrayEquals(expectedStr, actualStr, "The string array is not sorted correctly.");
        
        // Test case for empty array
        Integer[] actualEmpty = {};
        Integer[] expectedEmpty = {};
        actualEmpty = heapSort.sort(actualEmpty);
        assertArrayEquals(expectedEmpty, actualEmpty, "The empty array should remain unchanged.");
        
        // Test case for single-element array
        Integer[] actualSingle = {42};
        Integer[] expectedSingle = {42};
        actualSingle = heapSort.sort(actualSingle);
        assertArrayEquals(expectedSingle, actualSingle, "The single-element array should remain unchanged.");
        
        // Test case for already sorted array
        Integer[] actualSorted = {1, 2, 3, 4, 5};
        Integer[] expectedSorted = {1, 2, 3, 4, 5};
        actualSorted = heapSort.sort(actualSorted);
        assertArrayEquals(expectedSorted, actualSorted, "The already sorted array should remain unchanged.");
        
        // Test for null input. Since the method does not handle null, we expect a NullPointerException
        assertThrows(NullPointerException.class, () -> {
            heapSort.sort(null);
        }, "Sorting null should throw NullPointerException.");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {

    private HeapSort heapSort;

    @BeforeEach
    public void setup() {
        heapSort = new HeapSort();
    }

    @Test
    public void sortTest() {
        Integer[] inputArray = {4, 3, 2, 10, 12, 1, 5, 6};
        Integer[] expectedOutput = {1, 2, 3, 4, 5, 6, 10, 12};

        Integer[] sortedArray = heapSort.sort(inputArray);

        assertArrayEquals(expectedOutput, sortedArray, "The sorted array should match the expected output.");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {

    @Test
    public void sortTest() {
        HeapSort heapSort = new HeapSort();
        
        // Case 1: Testing with integers
        Integer[] intArray = {4, 3, 2, 1};
        Integer[] intExpected = {1, 2, 3, 4};
        Integer[] intSorted = heapSort.sort(intArray);
        assertArrayEquals(intExpected, intSorted, "The integer array should be sorted after calling the sort method.");

        // Case 2: Testing with empty array
        Integer[] emptyArray = {};
        Integer[] emptyExpected = {};
        Integer[] emptySorted = heapSort.sort(emptyArray);
        assertArrayEquals(emptyExpected, emptySorted, "An empty array should not change after calling the sort method.");

        // Case 3: Testing with already sorted array
        Integer[] sortedArray = {1, 2, 3, 4, 5};
        Integer[] sortedExpected = {1, 2, 3, 4, 5};
        Integer[] sortedArraySorted = heapSort.sort(sortedArray);
        assertArrayEquals(sortedExpected, sortedArraySorted, "An already sorted array should remain unchanged after calling the sort method.");
        
        // Case 4: Testing with Strings
        String[] stringArray = {"delta", "bravo", "charlie", "alpha"};
        String[] stringExpected = {"alpha", "bravo", "charlie", "delta"};
        String[] stringSorted = heapSort.sort(stringArray);
        assertArrayEquals(stringExpected, stringSorted, "The string array should be sorted after calling the sort method.");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    
    private HeapSort heapSort;
    
    @BeforeEach
    public void setup() {
        heapSort = new HeapSort();
    }
    
    @Test
    public void sortTest() {
        Integer[] unsorted = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3};
        Integer[] expected = {1, 1, 2, 3, 3, 4, 5, 5, 6, 9};

        Integer[] sorted = heapSort.sort(unsorted);
        
        assertArrayEquals(expected, sorted, "The sorted array does not match the expected array");
    }
    
    // Add more tests if necessary for different generic types and edge cases.
}


No.10 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {

    private HeapSort heapSort;

    @BeforeEach
    public void setUp() {
        heapSort = new HeapSort();
    }

    @Test
    public void sortTest() {
        Integer[] inputArray = {4, 1, 3, 9, 7};
        Integer[] expectedArray = {1, 3, 4, 7, 9};
        Integer[] sortedArray = heapSort.sort(inputArray);

        assertArrayEquals(expectedArray, sortedArray, "The sorted array does not match the expected array.");
    }
    
    @AfterEach
    public void tearDown() {
        heapSort = null;
    }
}


