{
    "project_name": "Java",
    "file_name": "HeapSort.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/sorts/HeapSort.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.sorts",
    "docstring": "/**\n     * For simplicity, we are considering the heap root index as 1 instead of 0.\n     * It simplifies future calculations. Because of that we are decreasing the\n     * provided indexes by 1 in {@link #swap(Object[], int, int)} and\n     * {@link #less(Comparable[], int, int)} functions.\n     */",
    "source_code": "\n@Override\npublic <T extends Comparable<T>> T[] sort(T[] unsorted) {\n    int n = unsorted.length;\n    heapify(unsorted, n);\n    while (n > 1) {\n        swap(unsorted, 1, n--);\n        siftDown(unsorted, 1, n);\n    }\n    return unsorted;\n}\n",
    "class_name": "HeapSort",
    "method_name": "sort",
    "arguments": [
        "T unsorted"
    ],
    "generate_test": [
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    @Test\n    public void sortTest() {\n        // Assuming HeapSort class has a public method named sort\n        // and resides in the same package\n        HeapSort heapSort = new HeapSort();\n\n        // Test with an unsorted array\n        Integer[] unsorted = { 3, 2, 5, 1, 4 };\n        Integer[] sorted = heapSort.sort(unsorted);\n\n        // Check if the sorted array is in the correct order\n        assertArrayEquals(new Integer[]{ 1, 2, 3, 4, 5 }, sorted);\n        \n        // Test with an already sorted array\n        unsorted = new Integer[]{ 1, 2, 3, 4, 5 };\n        sorted = heapSort.sort(unsorted);\n        \n        // Check if the sorted array remains in the correct order\n        assertArrayEquals(new Integer[]{ 1, 2, 3, 4, 5 }, sorted);\n        \n        // Test with all elements being the same\n        unsorted = new Integer[]{ 2, 2, 2, 2, 2 };\n        sorted = heapSort.sort(unsorted);\n        \n        // Check if the sorted array remains in the correct order\n        assertArrayEquals(new Integer[]{ 2, 2, 2, 2, 2 }, sorted);\n        \n        // Test with negatives and positives\n        unsorted = new Integer[]{ -3, 11, 2, -14, 0 };\n        sorted = heapSort.sort(unsorted);\n        \n        // Check if the sorted array is in the correct order\n        assertArrayEquals(new Integer[]{ -14, -3, 0, 2, 11 }, sorted);\n        \n        // Test with an empty array\n        unsorted = new Integer[]{};\n        sorted = heapSort.sort(unsorted);\n        \n        // Check if the sorted array is in the correct order\n        assertArrayEquals(new Integer[]{}, sorted);\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    \n    private HeapSort heapSort;\n    \n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n    \n    @Test\n    public void sortTest() {\n        // Assert that the method sorts as expected\n        Integer[] inputArray = { 4, 3, 2, 1 };\n        Integer[] expectedOutput = { 1, 2, 3, 4 };\n        assertArrayEquals(expectedOutput, heapSort.sort(inputArray));\n        \n        // Test with another data type, for example, strings\n        String[] stringInputArray = { \"delta\", \"alpha\", \"charlie\", \"bravo\" };\n        String[] stringExpectedOutput = { \"alpha\", \"bravo\", \"charlie\", \"delta\" };\n        assertArrayEquals(stringExpectedOutput, heapSort.sort(stringInputArray));\n        \n        // Test with empty array\n        Integer[] emptyArray = {};\n        Integer[] expectedEmptyOutput = {};\n        assertArrayEquals(expectedEmptyOutput, heapSort.sort(emptyArray));\n        \n        // Test with already sorted array\n        Integer[] sortedArray = { 1, 2, 3, 4 };\n        Integer[] expectedSortedOutput = { 1, 2, 3, 4 };\n        assertArrayEquals(expectedSortedOutput, heapSort.sort(sortedArray));\n        \n        // Test with all elements same array\n        Integer[] sameElementsArray = { 7, 7, 7, 7 };\n        Integer[] expectedSameElementsOutput = { 7, 7, 7, 7 };\n        assertArrayEquals(expectedSameElementsOutput, heapSort.sort(sameElementsArray));\n    }    \n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    private final HeapSort heapSort = new HeapSort();  // Assuming HeapSort is the containing class of the sort method\n\n    @Test\n    public void sortTest() {\n        // Assume generic type to be Integer for test\n        Integer[] actual = {3, 2, 1, 5, 4};\n        Integer[] expected = {1, 2, 3, 4, 5};  // Expected result after sorting\n        \n        // Perform the sorting\n        actual = heapSort.sort(actual);  \n        \n        // Assert that the actual sorted array matches the expected array\n        assertArrayEquals(expected, actual, \"The sorted array does not match the expected array.\");\n        \n        // Additional test case for an empty array\n        Integer[] emptyActual = {};\n        Integer[] emptyExpected = {};\n        emptyActual = heapSort.sort(emptyActual);\n        assertArrayEquals(emptyExpected, emptyActual, \"Sorting an empty array should result in an empty array.\");\n        \n        // Additional test for a null input\n        Integer[] nullActual = null;\n        assertThrows(NullPointerException.class, () -> {\n            heapSort.sort(nullActual);\n        }, \"Sorting a null array should throw a NullPointerException.\");\n    }\n}\n\n// Dummy HeapSort class for code completion - real implementation needed\nclass HeapSort {\n\n    public <T extends Comparable<T>> T[] sort(T[] unsorted) {\n        int n = unsorted.length;\n        heapify(unsorted, n);\n        while (n > 1) {\n            swap(unsorted, 1, n--);\n            siftDown(unsorted, 1, n);\n        }\n        return unsorted;\n    }\n    \n    // Dummy implementations for code completion - real implementations needed\n    private <T extends Comparable<T>> void heapify(T[] unsorted, int n) {\n        // Implementation needed\n    }\n\n    private <T extends Comparable<T>> void swap(T[] unsorted, int a, int b) {\n        // Implementation needed\n    }\n\n    private <T extends Comparable<T>> void siftDown(T[] unsorted, int k, int n) {\n        // Implementation needed\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    // Assuming we have a HeapSort class that implements the sort method\n    private final HeapSort heapSort = new HeapSort();\n    \n    @Test\n    public void sortTest() {\n        // Create test data\n        Integer[] testArray = new Integer[]{3, 1, 4, 1, 5, 9, 2, 6, 5, 3};\n        Integer[] expectedSortedArray = new Integer[]{1, 1, 2, 3, 3, 4, 5, 5, 6, 9};\n\n        // Execute the sort method on the test data\n        Integer[] resultArray = heapSort.sort(testArray);\n        \n        // Assert that the result is as expected\n        assertArrayEquals(expectedSortedArray, resultArray, \"The array is not sorted correctly\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    private HeapSort heapSort;\n\n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] actual = {3, 2, 1, 4, 5};\n        Integer[] expected = {1, 2, 3, 4, 5};\n        actual = heapSort.sort(actual);\n        assertArrayEquals(expected, actual);\n\n        String[] actualStrings = {\"delta\", \"alpha\", \"charlie\", \"bravo\"};\n        String[] expectedStrings = {\"alpha\", \"bravo\", \"charlie\", \"delta\"};\n        actualStrings = heapSort.sort(actualStrings);\n        assertArrayEquals(expectedStrings, actualStrings);\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Any cleanup can go here\n    }\n\n    // Additional test cases can be added to further test the sort method\n\n    // Inner class for HeapSort (if not provided in the question)\n    public class HeapSort {\n\n        public <T extends Comparable<T>> T[] sort(T[] unsorted) {\n            int n = unsorted.length;\n            heapify(unsorted, n);\n            while (n > 1) {\n                swap(unsorted, 1, n--);\n                siftDown(unsorted, 1, n);\n            }\n            return unsorted;\n        }\n\n        // Assuming the following methods are implemented correctly.\n        private <T extends Comparable<T>> void heapify(T[] unsorted, int n) {\n            // Implementation Code\n        }\n\n        private <T extends Comparable<T>> void swap(T[] unsorted, int i, int j) {\n            // Implementation Code\n        }\n\n        private <T extends Comparable<T>> void siftDown(T[] unsorted, int i, int n) {\n            // Implementation Code\n        }\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    HeapSort heapSort = new HeapSort(); // Assume there is a HeapSort class this test is meant for\n\n    @Test\n    public void sortTest() {\n        // Given\n        Integer[] actual = {4, 1, 3, 9, 7};\n        Integer[] expected = {1, 3, 4, 7, 9}; // Expected outcome after sorting the array\n        \n        // When\n        actual = heapSort.sort(actual);\n        \n        // Then\n        assertArrayEquals(expected, actual, \"The sorted array should be [1, 3, 4, 7, 9]\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    private HeapSort heapSort;\n\n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] inputArray = {4, 3, 2, 10, 12, 1, 5, 6};\n        Integer[] sortedArray = {1, 2, 3, 4, 5, 6, 10, 12};\n\n        // Assume `sort` is a public method within `heapSort` instance\n        assertEquals(sortedArray, heapSort.sort(inputArray));\n\n        // Alternatively, if we need to also check that each element is in its right position\n        Integer[] result = heapSort.sort(inputArray);\n        for (int i = 0; i < sortedArray.length; i++) {\n            assertEquals(sortedArray[i], result[i]);\n        }\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    private HeapSort heapSort;\n\n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] inputArray = { 3, 1, 4, 1, 5, 9 };\n        Integer[] expectedOutput = { 1, 1, 3, 4, 5, 9 };\n        Integer[] sortedArray = heapSort.sort(inputArray);\n        assertArrayEquals(expectedOutput, sortedArray, \"The sorted array should be [1, 1, 3, 4, 5, 9]\");\n\n        String[] inputStringArray = { \"banana\", \"apple\", \"pear\", \"grape\" };\n        String[] expectedStringOutput = { \"apple\", \"banana\", \"grape\", \"pear\" };\n        String[] sortedStringArray = heapSort.sort(inputStringArray);\n        assertArrayEquals(expectedStringOutput, sortedStringArray, \"The sorted String array should be [apple, banana, grape, pear]\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass HeapSort {\n\n    public <T extends Comparable<T>> T[] sort(T[] unsorted) {\n        int n = unsorted.length;\n        heapify(unsorted, n);\n        while (n > 1) {\n            swap(unsorted, 0, --n); // Adjusted index to 0 based\n            siftDown(unsorted, 0, n);\n        }\n        return unsorted;\n    }\n\n    private <T extends Comparable<T>> void heapify(T[] array, int size) {\n        // Method logic (assuming this is correctly implemented)\n    }\n\n    private <T extends Comparable<T>> void swap(T[] array, int i, int j) {\n        // Swap logic (assuming this is correctly implemented)\n    }\n\n    private <T extends Comparable<T>> void siftDown(T[] array, int i, int size) {\n        // Sift down logic (assuming this is correctly implemented)\n    }\n}\n\npublic class HeapSortTest {\n\n    private HeapSort heapSort = new HeapSort();\n\n    @Test\n    public void sortTest() {\n        Integer[] actual = {4, 3, 2, 1};\n        Integer[] expected = {1, 2, 3, 4};\n        actual = heapSort.sort(actual);\n        assertArrayEquals(expected, actual, \"The sorted array should be in ascending order\");\n\n        String[] actualStrings = {\"delta\", \"charlie\", \"bravo\", \"alpha\"};\n        String[] expectedStrings = {\"alpha\", \"bravo\", \"charlie\", \"delta\"};\n        actualStrings = heapSort.sort(actualStrings);\n        assertArrayEquals(expectedStrings, actualStrings, \"The sorted strings should be in alphabetical order\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n\n    private HeapSort heapSort;\n\n    @BeforeEach\n    public void setUp() {\n        heapSort = new HeapSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] unsorted = {4, 3, 2, 1};\n        Integer[] expected = {1, 2, 3, 4};\n        \n        Integer[] sorted = heapSort.sort(unsorted);\n        assertArrayEquals(expected, sorted, \"The sorted array does not match the expected array\");\n    }\n    \n    // You may also want to test other types, edge cases, and null handling\n    @Test\n    public void sortTest_emptyArray() {\n        String[] unsorted = {};\n        String[] expected = {};\n        \n        String[] sorted = heapSort.sort(unsorted);\n        assertArrayEquals(expected, sorted, \"The sorted array should still be empty\");\n    }\n\n    @Test\n    public void sortTest_nullArray() {\n        assertThrows(NullPointerException.class, () -> {\n            heapSort.sort(null);\n        }, \"Sorting a null array should throw a NullPointerException\");\n    }\n\n    @Test\n    public void sortTest_singleElementArray() {\n        Double[] unsorted = {1.0};\n        Double[] expected = {1.0};\n        \n        Double[] sorted = heapSort.sort(unsorted);\n        assertArrayEquals(expected, sorted, \"A single-element array should remain unchanged\");\n    }\n    \n    // Additional tests could be added here for larger arrays, arrays with duplicates, arrays with negative numbers, etc.\n}"
    ]
}