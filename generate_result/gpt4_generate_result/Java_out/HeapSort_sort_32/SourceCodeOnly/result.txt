Source code: 


@Override
public <T extends Comparable<T>> T[] sort(T[] unsorted) {
    int n = unsorted.length;
    heapify(unsorted, n);
    while (n > 1) {
        swap(unsorted, 1, n--);
        siftDown(unsorted, 1, n);
    }
    return unsorted;
}



No.1 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {

    @Test
    public void sortTest() {
        // Assuming HeapSort class has a public method named sort
        // and resides in the same package
        HeapSort heapSort = new HeapSort();

        // Test with an unsorted array
        Integer[] unsorted = { 3, 2, 5, 1, 4 };
        Integer[] sorted = heapSort.sort(unsorted);

        // Check if the sorted array is in the correct order
        assertArrayEquals(new Integer[]{ 1, 2, 3, 4, 5 }, sorted);
        
        // Test with an already sorted array
        unsorted = new Integer[]{ 1, 2, 3, 4, 5 };
        sorted = heapSort.sort(unsorted);
        
        // Check if the sorted array remains in the correct order
        assertArrayEquals(new Integer[]{ 1, 2, 3, 4, 5 }, sorted);
        
        // Test with all elements being the same
        unsorted = new Integer[]{ 2, 2, 2, 2, 2 };
        sorted = heapSort.sort(unsorted);
        
        // Check if the sorted array remains in the correct order
        assertArrayEquals(new Integer[]{ 2, 2, 2, 2, 2 }, sorted);
        
        // Test with negatives and positives
        unsorted = new Integer[]{ -3, 11, 2, -14, 0 };
        sorted = heapSort.sort(unsorted);
        
        // Check if the sorted array is in the correct order
        assertArrayEquals(new Integer[]{ -14, -3, 0, 2, 11 }, sorted);
        
        // Test with an empty array
        unsorted = new Integer[]{};
        sorted = heapSort.sort(unsorted);
        
        // Check if the sorted array is in the correct order
        assertArrayEquals(new Integer[]{}, sorted);
    }
}


No.2 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    
    private HeapSort heapSort;
    
    @BeforeEach
    public void setUp() {
        heapSort = new HeapSort();
    }
    
    @Test
    public void sortTest() {
        // Assert that the method sorts as expected
        Integer[] inputArray = { 4, 3, 2, 1 };
        Integer[] expectedOutput = { 1, 2, 3, 4 };
        assertArrayEquals(expectedOutput, heapSort.sort(inputArray));
        
        // Test with another data type, for example, strings
        String[] stringInputArray = { "delta", "alpha", "charlie", "bravo" };
        String[] stringExpectedOutput = { "alpha", "bravo", "charlie", "delta" };
        assertArrayEquals(stringExpectedOutput, heapSort.sort(stringInputArray));
        
        // Test with empty array
        Integer[] emptyArray = {};
        Integer[] expectedEmptyOutput = {};
        assertArrayEquals(expectedEmptyOutput, heapSort.sort(emptyArray));
        
        // Test with already sorted array
        Integer[] sortedArray = { 1, 2, 3, 4 };
        Integer[] expectedSortedOutput = { 1, 2, 3, 4 };
        assertArrayEquals(expectedSortedOutput, heapSort.sort(sortedArray));
        
        // Test with all elements same array
        Integer[] sameElementsArray = { 7, 7, 7, 7 };
        Integer[] expectedSameElementsOutput = { 7, 7, 7, 7 };
        assertArrayEquals(expectedSameElementsOutput, heapSort.sort(sameElementsArray));
    }    
}


No.3 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {

    private final HeapSort heapSort = new HeapSort();  // Assuming HeapSort is the containing class of the sort method

    @Test
    public void sortTest() {
        // Assume generic type to be Integer for test
        Integer[] actual = {3, 2, 1, 5, 4};
        Integer[] expected = {1, 2, 3, 4, 5};  // Expected result after sorting
        
        // Perform the sorting
        actual = heapSort.sort(actual);  
        
        // Assert that the actual sorted array matches the expected array
        assertArrayEquals(expected, actual, "The sorted array does not match the expected array.");
        
        // Additional test case for an empty array
        Integer[] emptyActual = {};
        Integer[] emptyExpected = {};
        emptyActual = heapSort.sort(emptyActual);
        assertArrayEquals(emptyExpected, emptyActual, "Sorting an empty array should result in an empty array.");
        
        // Additional test for a null input
        Integer[] nullActual = null;
        assertThrows(NullPointerException.class, () -> {
            heapSort.sort(nullActual);
        }, "Sorting a null array should throw a NullPointerException.");
    }
}

// Dummy HeapSort class for code completion - real implementation needed
class HeapSort {

    public <T extends Comparable<T>> T[] sort(T[] unsorted) {
        int n = unsorted.length;
        heapify(unsorted, n);
        while (n > 1) {
            swap(unsorted, 1, n--);
            siftDown(unsorted, 1, n);
        }
        return unsorted;
    }
    
    // Dummy implementations for code completion - real implementations needed
    private <T extends Comparable<T>> void heapify(T[] unsorted, int n) {
        // Implementation needed
    }

    private <T extends Comparable<T>> void swap(T[] unsorted, int a, int b) {
        // Implementation needed
    }

    private <T extends Comparable<T>> void siftDown(T[] unsorted, int k, int n) {
        // Implementation needed
    }
}


No.4 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {

    // Assuming we have a HeapSort class that implements the sort method
    private final HeapSort heapSort = new HeapSort();
    
    @Test
    public void sortTest() {
        // Create test data
        Integer[] testArray = new Integer[]{3, 1, 4, 1, 5, 9, 2, 6, 5, 3};
        Integer[] expectedSortedArray = new Integer[]{1, 1, 2, 3, 3, 4, 5, 5, 6, 9};

        // Execute the sort method on the test data
        Integer[] resultArray = heapSort.sort(testArray);
        
        // Assert that the result is as expected
        assertArrayEquals(expectedSortedArray, resultArray, "The array is not sorted correctly");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {

    private HeapSort heapSort;

    @BeforeEach
    public void setUp() {
        heapSort = new HeapSort();
    }

    @Test
    public void sortTest() {
        Integer[] actual = {3, 2, 1, 4, 5};
        Integer[] expected = {1, 2, 3, 4, 5};
        actual = heapSort.sort(actual);
        assertArrayEquals(expected, actual);

        String[] actualStrings = {"delta", "alpha", "charlie", "bravo"};
        String[] expectedStrings = {"alpha", "bravo", "charlie", "delta"};
        actualStrings = heapSort.sort(actualStrings);
        assertArrayEquals(expectedStrings, actualStrings);
    }

    @AfterEach
    public void tearDown() {
        // Any cleanup can go here
    }

    // Additional test cases can be added to further test the sort method

    // Inner class for HeapSort (if not provided in the question)
    public class HeapSort {

        public <T extends Comparable<T>> T[] sort(T[] unsorted) {
            int n = unsorted.length;
            heapify(unsorted, n);
            while (n > 1) {
                swap(unsorted, 1, n--);
                siftDown(unsorted, 1, n);
            }
            return unsorted;
        }

        // Assuming the following methods are implemented correctly.
        private <T extends Comparable<T>> void heapify(T[] unsorted, int n) {
            // Implementation Code
        }

        private <T extends Comparable<T>> void swap(T[] unsorted, int i, int j) {
            // Implementation Code
        }

        private <T extends Comparable<T>> void siftDown(T[] unsorted, int i, int n) {
            // Implementation Code
        }
    }
}


No.6 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    HeapSort heapSort = new HeapSort(); // Assume there is a HeapSort class this test is meant for

    @Test
    public void sortTest() {
        // Given
        Integer[] actual = {4, 1, 3, 9, 7};
        Integer[] expected = {1, 3, 4, 7, 9}; // Expected outcome after sorting the array
        
        // When
        actual = heapSort.sort(actual);
        
        // Then
        assertArrayEquals(expected, actual, "The sorted array should be [1, 3, 4, 7, 9]");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    private HeapSort heapSort;

    @BeforeEach
    public void setUp() {
        heapSort = new HeapSort();
    }

    @Test
    public void sortTest() {
        Integer[] inputArray = {4, 3, 2, 10, 12, 1, 5, 6};
        Integer[] sortedArray = {1, 2, 3, 4, 5, 6, 10, 12};

        // Assume `sort` is a public method within `heapSort` instance
        assertEquals(sortedArray, heapSort.sort(inputArray));

        // Alternatively, if we need to also check that each element is in its right position
        Integer[] result = heapSort.sort(inputArray);
        for (int i = 0; i < sortedArray.length; i++) {
            assertEquals(sortedArray[i], result[i]);
        }
    }
}


No.8 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {

    private HeapSort heapSort;

    @BeforeEach
    public void setUp() {
        heapSort = new HeapSort();
    }

    @Test
    public void sortTest() {
        Integer[] inputArray = { 3, 1, 4, 1, 5, 9 };
        Integer[] expectedOutput = { 1, 1, 3, 4, 5, 9 };
        Integer[] sortedArray = heapSort.sort(inputArray);
        assertArrayEquals(expectedOutput, sortedArray, "The sorted array should be [1, 1, 3, 4, 5, 9]");

        String[] inputStringArray = { "banana", "apple", "pear", "grape" };
        String[] expectedStringOutput = { "apple", "banana", "grape", "pear" };
        String[] sortedStringArray = heapSort.sort(inputStringArray);
        assertArrayEquals(expectedStringOutput, sortedStringArray, "The sorted String array should be [apple, banana, grape, pear]");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

class HeapSort {

    public <T extends Comparable<T>> T[] sort(T[] unsorted) {
        int n = unsorted.length;
        heapify(unsorted, n);
        while (n > 1) {
            swap(unsorted, 0, --n); // Adjusted index to 0 based
            siftDown(unsorted, 0, n);
        }
        return unsorted;
    }

    private <T extends Comparable<T>> void heapify(T[] array, int size) {
        // Method logic (assuming this is correctly implemented)
    }

    private <T extends Comparable<T>> void swap(T[] array, int i, int j) {
        // Swap logic (assuming this is correctly implemented)
    }

    private <T extends Comparable<T>> void siftDown(T[] array, int i, int size) {
        // Sift down logic (assuming this is correctly implemented)
    }
}

public class HeapSortTest {

    private HeapSort heapSort = new HeapSort();

    @Test
    public void sortTest() {
        Integer[] actual = {4, 3, 2, 1};
        Integer[] expected = {1, 2, 3, 4};
        actual = heapSort.sort(actual);
        assertArrayEquals(expected, actual, "The sorted array should be in ascending order");

        String[] actualStrings = {"delta", "charlie", "bravo", "alpha"};
        String[] expectedStrings = {"alpha", "bravo", "charlie", "delta"};
        actualStrings = heapSort.sort(actualStrings);
        assertArrayEquals(expectedStrings, actualStrings, "The sorted strings should be in alphabetical order");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {

    private HeapSort heapSort;

    @BeforeEach
    public void setUp() {
        heapSort = new HeapSort();
    }

    @Test
    public void sortTest() {
        Integer[] unsorted = {4, 3, 2, 1};
        Integer[] expected = {1, 2, 3, 4};
        
        Integer[] sorted = heapSort.sort(unsorted);
        assertArrayEquals(expected, sorted, "The sorted array does not match the expected array");
    }
    
    // You may also want to test other types, edge cases, and null handling
    @Test
    public void sortTest_emptyArray() {
        String[] unsorted = {};
        String[] expected = {};
        
        String[] sorted = heapSort.sort(unsorted);
        assertArrayEquals(expected, sorted, "The sorted array should still be empty");
    }

    @Test
    public void sortTest_nullArray() {
        assertThrows(NullPointerException.class, () -> {
            heapSort.sort(null);
        }, "Sorting a null array should throw a NullPointerException");
    }

    @Test
    public void sortTest_singleElementArray() {
        Double[] unsorted = {1.0};
        Double[] expected = {1.0};
        
        Double[] sorted = heapSort.sort(unsorted);
        assertArrayEquals(expected, sorted, "A single-element array should remain unchanged");
    }
    
    // Additional tests could be added here for larger arrays, arrays with duplicates, arrays with negative numbers, etc.
}


