{
    "project_name": "Java",
    "file_name": "HillCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/HillCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": null,
    "source_code": "// Determinant calculator\npublic static int determinant(int[][] a, int n) {\n    int det = 0, sign = 1, p = 0, q = 0;\n\n    if (n == 1) {\n        det = a[0][0];\n    } else {\n        int[][] b = new int[n - 1][n - 1];\n        for (int x = 0; x < n; x++) {\n            p = 0;\n            q = 0;\n            for (int i = 1; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (j != x) {\n                        b[p][q++] = a[i][j];\n                        if (q % (n - 1) == 0) {\n                            p++;\n                            q = 0;\n                        }\n                    }\n                }\n            }\n            det = det + a[0][x] * determinant(b, n - 1) * sign;\n            sign = -sign;\n        }\n    }\n    return det;\n}\n",
    "class_name": "HillCipher",
    "method_name": "determinant",
    "arguments": [
        "int[][] a",
        "int n"
    ],
    "generate_test": [
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    // helper method to create a 2D array\n    private static int[][] createMatrix(int[] elements, int n) {\n        assert n * n == elements.length : \"Mismatched array length and matrix size.\";\n        int[][] matrix = new int[n][n];\n        for (int i = 0, k = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                matrix[i][j] = elements[k++];\n            }\n        }\n        return matrix;\n    }\n\n    @Test\n    public void determinantTest() {\n        // Testing 1x1 matrix\n        int[][] matrix1 = createMatrix(new int[]{5}, 1);\n        assertEquals(5, HillCipher.determinant(matrix1, matrix1.length), \"Det of 1x1 matrix failed\");\n\n        // Testing 2x2 matrix\n        int[][] matrix2 = createMatrix(new int[]{4, 7, 2, 6}, 2);\n        assertEquals(10, HillCipher.determinant(matrix2, matrix2.length), \"Det of 2x2 matrix failed\");\n\n        // Testing 3x3 matrix\n        int[][] matrix3 = createMatrix(new int[]{6, 1, 1, 4, -2, 5, 2, 8, 7}, 3);\n        assertEquals(-306, HillCipher.determinant(matrix3, matrix3.length), \"Det of 3x3 matrix failed\");\n\n        // Testing for a square matrix with det = 0\n        int[][] matrixZeroDet = createMatrix(new int[]{2, 4, 2, 2}, 2);\n        assertEquals(0, HillCipher.determinant(matrixZeroDet, matrixZeroDet.length), \"Det of 2x2 zero matrix failed\");\n\n        // Testing larger matrix\n        int[][] matrix4 = createMatrix(new int[]{1, 0, 2, -1, 3, 0, 0, 5, 2, 1, 4, -3, 1, 0, 3, 0}, 4);\n        assertEquals(-20, HillCipher.determinant(matrix4, matrix4.length), \"Det of 4x4 matrix failed\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    @Test\n    public void determinantTest() {\n        // Test 1: determinant of a 1x1 matrix\n        int[][] matrix1x1 = {{5}};\n        assertEquals(5, HillCipher.determinant(matrix1x1, 1), \"Determinant of a 1x1 matrix should be the element itself.\");\n\n        // Test 2: determinant of a 2x2 matrix\n        int[][] matrix2x2 = {{1, 2}, {3, 4}};\n        assertEquals(-2, HillCipher.determinant(matrix2x2, 2), \"Determinant of a 2x2 matrix should be (ad-bc).\");\n\n        // Test 3: determinant of a 3x3 matrix\n        int[][] matrix3x3 = {{6, 1, 1}, {4, -2, 5}, {2, 8, 7}};\n        assertEquals(-306, HillCipher.determinant(matrix3x3, 3), \"Determinant of a 3x3 matrix should be computed accordingly.\");\n\n        // Test 4: determinant of a singular 2x2 matrix (determinant should be 0)\n        int[][] singularMatrix = {{2, 4}, {1, 2}};\n        assertEquals(0, HillCipher.determinant(singularMatrix, 2), \"Determinant of a singular matrix should be 0.\");\n\n        // Test 5: determinant of a 4x4 matrix\n        int[][] matrix4x4 = {\n            {1, 0, 2, -1},\n            {3, 0, 0, 5},\n            {2, 1, 4, -3},\n            {1, 0, 5, 0}\n        };\n        assertEquals(30, HillCipher.determinant(matrix4x4, 4), \"Determinant of a 4x4 matrix should be computed accordingly.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    @Test\n    public void determinantTest() {\n        assertAll(\"determinant\",\n            () -> assertEquals(0, HillCipher.determinant(new int[][]{{1, 2}, {1, 2}}, 2), \"Determinant should be 0.\"),\n            () -> assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2), \"Determinant should be -2.\"),\n            () -> assertEquals(3, HillCipher.determinant(new int[][]{{2}}, 1), \"Determinant of single element matrix should be element itself.\"),\n            () -> assertEquals(-1, HillCipher.determinant(new int[][]{{1, 2, 3}, {0, 1, 4}, {5, 6, 0}}, 3), \"Determinant should be -1.\"),\n            () -> assertEquals(0, HillCipher.determinant(new int[][]{{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}, 3), \"Determinant of zero matrix should be 0.\")\n        );\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        assertAll(\"Determinant calculations\",\n            () -> assertEquals(1, HillCipher.determinant(new int[][]{{1}}, 1)),\n            () -> assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2)),\n            () -> assertEquals(0, HillCipher.determinant(new int[][]{{2, 2}, {2, 2}}, 2)),\n            () -> assertEquals(-3, HillCipher.determinant(new int[][]{{6, 1, 1}, {4, -2, 5}, {2, 8, 7}}, 3))\n        );\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        // Test 1: determinant of 1x1 matrix should be the single element itself\n        assertEquals(5, HillCipher.determinant(new int[][]{{5}}, 1));\n\n        // Test 2: determinant of a 2x2 matrix\n        assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2));\n\n        // Test 3: determinant of a 3x3 matrix\n        assertEquals(0, HillCipher.determinant(new int[][]{{1, 2, 3}, {0, -4, 1}, {0, 3, -1}}, 3));\n\n        // Test 4: determinant of a singular 3x3 matrix (should be 0)\n        assertEquals(0, HillCipher.determinant(new int[][]{{2, 4, 6}, {1, 2, 3}, {3, 1, 1}}, 3));\n\n        // Test 5: determinant of a 4x4 matrix\n        assertEquals(-20, HillCipher.determinant(\n                new int[][]{\n                        {1, 0, 2, -1},\n                        {3, 0, 0, 5},\n                        {2, 1, 4, -3},\n                        {1, 0, 5, 0}\n                }, 4\n        ));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        // First test case: 2x2 matrix\n        int[][] matrix2x2 = {{1, 2}, {3, 4}};\n        int det2x2 = HillCipher.determinant(matrix2x2, 2);\n        assertEquals(-2, det2x2, \"Determinant of a 2x2 matrix is incorrect.\");\n\n        // Second test case: 3x3 matrix\n        int[][] matrix3x3 = {{6, 1, 1}, {4, -2, 5}, {2, 8, 7}};\n        int det3x3 = HillCipher.determinant(matrix3x3, 3);\n        assertEquals(-306, det3x3, \"Determinant of a 3x3 matrix is incorrect.\");\n\n        // Third test case: 1x1 matrix\n        int[][] matrix1x1 = {{5}};\n        int det1x1 = HillCipher.determinant(matrix1x1, 1);\n        assertEquals(5, det1x1, \"Determinant of a 1x1 matrix is incorrect.\");\n\n        // Additional test cases could be added here, testing other sizes of matrices,\n        // including edge cases such as zero determinants or very large matrix values.\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n  \n    @Test\n    public void determinantTest() {\n        // Test case for 1x1 matrix\n        assertEquals(5, HillCipher.determinant(new int[][]{{5}}, 1), \"Determinant should be 5 for 1x1 matrix\");\n\n        // Test case for 2x2 matrix\n        assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2), \"Determinant should be -2 for 2x2 matrix\");\n\n        // Test case for 3x3 matrix\n        assertEquals(-6, HillCipher.determinant(new int[][]{{6, 1, 1}, {4, -2, 5}, {2, 8, 7}}, 3), \"Determinant should be -6 for 3x3 matrix\");\n\n        // Additional test case for consistency\n        assertEquals(0, HillCipher.determinant(new int[][]{{2, 4, 2}, {3, 1, 1}, {1, 2, 1}}, 3), \"Determinant should be 0 for singular 3x3 matrix\");\n\n        // Test case for a larger matrix (4x4)\n        assertEquals(-20, HillCipher.determinant(new int[][]{{1, 0, 2, -1}, {3, 0, 0, 5}, {2, 1, 4, -3}, {1, 0, 5, 0}}, 4), \"Determinant should be -20 for 4x4 matrix\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    \n    // Testing the determinant method with different scenarios\n    @Test\n    public void determinantTest() {\n\n        // Case 1: Testing determinant of a 1x1 matrix\n        int[][] matrix1 = {{5}};\n        assertEquals(5, HillCipher.determinant(matrix1, 1), \"Determinant should be 5 for a 1x1 matrix with the only element as 5.\");\n\n        // Case 2: Testing determinant of a 2x2 matrix\n        int[][] matrix2 = {\n                {1, 2},\n                {3, 4}\n        };\n        assertEquals(-2, HillCipher.determinant(matrix2, 2), \"Determinant should be -2 for the given 2x2 matrix.\");\n\n        // Case 3: Testing determinant of a 3x3 matrix\n        int[][] matrix3 = {\n                {6, 1, 1},\n                {4, -2, 5},\n                {2, 8, 7}\n        };\n        assertEquals(-306, HillCipher.determinant(matrix3, 3), \"Determinant should be -306 for the given 3x3 matrix.\");\n\n        // Case 4: Testing determinant of a singular (determinant = 0) 3x3 matrix\n        int[][] matrix4 = {\n                {1, 2, 3},\n                {1, 2, 3},\n                {1, 2, 3}\n        };\n        assertEquals(0, HillCipher.determinant(matrix4, 3), \"Determinant should be 0 for the given singular 3x3 matrix.\");\n\n        // Additional test cases can be written for larger matrices or specific edge cases\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    @Test\n    public void determinantTest() {\n        // Test 1x1 matrix\n        int[][] matrix1x1 = {{5}};\n        assertEquals(5, HillCipher.determinant(matrix1x1, 1), \"Determinant should be 5 for 1x1 matrix.\");\n\n        // Test 2x2 matrix\n        int[][] matrix2x2 = {\n            {1, 2},\n            {3, 4}\n        };\n        assertEquals(-2, HillCipher.determinant(matrix2x2, 2), \"Determinant should be -2 for 2x2 matrix.\");\n        \n        // Test 3x3 matrix\n        int[][] matrix3x3 = {\n            {6, 1, 1},\n            {4, -2, 5},\n            {2, 8, 7}\n        };\n        assertEquals(-306, HillCipher.determinant(matrix3x3, 3), \"Determinant should be -306 for 3x3 matrix.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    @Test\n    public void determinantTest() {\n        int[][] matrix1 = {{1}};\n        assertEquals(1, HillCipher.determinant(matrix1, 1), \"Determinant of a 1x1 matrix failed.\");\n\n        int[][] matrix2 = {{3, 8}, {4, 6}};\n        assertEquals(-14, HillCipher.determinant(matrix2, 2), \"Determinant of a 2x2 matrix failed.\");\n\n        int[][] matrix3 = {{6, 1, 1}, {4, -2, 5}, {2, 8, 7}};\n        assertEquals(-306, HillCipher.determinant(matrix3, 3), \"Determinant of a 3x3 matrix failed.\");\n\n        int[][] matrix4 = {{1, 0, 2, -1}, {3, 0, 0, 5}, {2, 1, 4, -3}, {1, 0, 5, 0}};\n        assertEquals(30, HillCipher.determinant(matrix4, 4), \"Determinant of a 4x4 matrix failed.\");\n    }\n}"
    ]
}