Source code: 

// Determinant calculator
public static int determinant(int[][] a, int n) {
    int det = 0, sign = 1, p = 0, q = 0;

    if (n == 1) {
        det = a[0][0];
    } else {
        int[][] b = new int[n - 1][n - 1];
        for (int x = 0; x < n; x++) {
            p = 0;
            q = 0;
            for (int i = 1; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (j != x) {
                        b[p][q++] = a[i][j];
                        if (q % (n - 1) == 0) {
                            p++;
                            q = 0;
                        }
                    }
                }
            }
            det = det + a[0][x] * determinant(b, n - 1) * sign;
            sign = -sign;
        }
    }
    return det;
}



No.1 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {

    // helper method to create a 2D array
    private static int[][] createMatrix(int[] elements, int n) {
        assert n * n == elements.length : "Mismatched array length and matrix size.";
        int[][] matrix = new int[n][n];
        for (int i = 0, k = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = elements[k++];
            }
        }
        return matrix;
    }

    @Test
    public void determinantTest() {
        // Testing 1x1 matrix
        int[][] matrix1 = createMatrix(new int[]{5}, 1);
        assertEquals(5, HillCipher.determinant(matrix1, matrix1.length), "Det of 1x1 matrix failed");

        // Testing 2x2 matrix
        int[][] matrix2 = createMatrix(new int[]{4, 7, 2, 6}, 2);
        assertEquals(10, HillCipher.determinant(matrix2, matrix2.length), "Det of 2x2 matrix failed");

        // Testing 3x3 matrix
        int[][] matrix3 = createMatrix(new int[]{6, 1, 1, 4, -2, 5, 2, 8, 7}, 3);
        assertEquals(-306, HillCipher.determinant(matrix3, matrix3.length), "Det of 3x3 matrix failed");

        // Testing for a square matrix with det = 0
        int[][] matrixZeroDet = createMatrix(new int[]{2, 4, 2, 2}, 2);
        assertEquals(0, HillCipher.determinant(matrixZeroDet, matrixZeroDet.length), "Det of 2x2 zero matrix failed");

        // Testing larger matrix
        int[][] matrix4 = createMatrix(new int[]{1, 0, 2, -1, 3, 0, 0, 5, 2, 1, 4, -3, 1, 0, 3, 0}, 4);
        assertEquals(-20, HillCipher.determinant(matrix4, matrix4.length), "Det of 4x4 matrix failed");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {

    @Test
    public void determinantTest() {
        // Test 1: determinant of a 1x1 matrix
        int[][] matrix1x1 = {{5}};
        assertEquals(5, HillCipher.determinant(matrix1x1, 1), "Determinant of a 1x1 matrix should be the element itself.");

        // Test 2: determinant of a 2x2 matrix
        int[][] matrix2x2 = {{1, 2}, {3, 4}};
        assertEquals(-2, HillCipher.determinant(matrix2x2, 2), "Determinant of a 2x2 matrix should be (ad-bc).");

        // Test 3: determinant of a 3x3 matrix
        int[][] matrix3x3 = {{6, 1, 1}, {4, -2, 5}, {2, 8, 7}};
        assertEquals(-306, HillCipher.determinant(matrix3x3, 3), "Determinant of a 3x3 matrix should be computed accordingly.");

        // Test 4: determinant of a singular 2x2 matrix (determinant should be 0)
        int[][] singularMatrix = {{2, 4}, {1, 2}};
        assertEquals(0, HillCipher.determinant(singularMatrix, 2), "Determinant of a singular matrix should be 0.");

        // Test 5: determinant of a 4x4 matrix
        int[][] matrix4x4 = {
            {1, 0, 2, -1},
            {3, 0, 0, 5},
            {2, 1, 4, -3},
            {1, 0, 5, 0}
        };
        assertEquals(30, HillCipher.determinant(matrix4x4, 4), "Determinant of a 4x4 matrix should be computed accordingly.");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {

    @Test
    public void determinantTest() {
        assertAll("determinant",
            () -> assertEquals(0, HillCipher.determinant(new int[][]{{1, 2}, {1, 2}}, 2), "Determinant should be 0."),
            () -> assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2), "Determinant should be -2."),
            () -> assertEquals(3, HillCipher.determinant(new int[][]{{2}}, 1), "Determinant of single element matrix should be element itself."),
            () -> assertEquals(-1, HillCipher.determinant(new int[][]{{1, 2, 3}, {0, 1, 4}, {5, 6, 0}}, 3), "Determinant should be -1."),
            () -> assertEquals(0, HillCipher.determinant(new int[][]{{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}, 3), "Determinant of zero matrix should be 0.")
        );
    }
}


No.4 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {
    @Test
    public void determinantTest() {
        assertAll("Determinant calculations",
            () -> assertEquals(1, HillCipher.determinant(new int[][]{{1}}, 1)),
            () -> assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2)),
            () -> assertEquals(0, HillCipher.determinant(new int[][]{{2, 2}, {2, 2}}, 2)),
            () -> assertEquals(-3, HillCipher.determinant(new int[][]{{6, 1, 1}, {4, -2, 5}, {2, 8, 7}}, 3))
        );
    }
}


No.5 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {
    @Test
    public void determinantTest() {
        // Test 1: determinant of 1x1 matrix should be the single element itself
        assertEquals(5, HillCipher.determinant(new int[][]{{5}}, 1));

        // Test 2: determinant of a 2x2 matrix
        assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2));

        // Test 3: determinant of a 3x3 matrix
        assertEquals(0, HillCipher.determinant(new int[][]{{1, 2, 3}, {0, -4, 1}, {0, 3, -1}}, 3));

        // Test 4: determinant of a singular 3x3 matrix (should be 0)
        assertEquals(0, HillCipher.determinant(new int[][]{{2, 4, 6}, {1, 2, 3}, {3, 1, 1}}, 3));

        // Test 5: determinant of a 4x4 matrix
        assertEquals(-20, HillCipher.determinant(
                new int[][]{
                        {1, 0, 2, -1},
                        {3, 0, 0, 5},
                        {2, 1, 4, -3},
                        {1, 0, 5, 0}
                }, 4
        ));
    }
}


No.6 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class HillCipherTest {
    @Test
    public void determinantTest() {
        // First test case: 2x2 matrix
        int[][] matrix2x2 = {{1, 2}, {3, 4}};
        int det2x2 = HillCipher.determinant(matrix2x2, 2);
        assertEquals(-2, det2x2, "Determinant of a 2x2 matrix is incorrect.");

        // Second test case: 3x3 matrix
        int[][] matrix3x3 = {{6, 1, 1}, {4, -2, 5}, {2, 8, 7}};
        int det3x3 = HillCipher.determinant(matrix3x3, 3);
        assertEquals(-306, det3x3, "Determinant of a 3x3 matrix is incorrect.");

        // Third test case: 1x1 matrix
        int[][] matrix1x1 = {{5}};
        int det1x1 = HillCipher.determinant(matrix1x1, 1);
        assertEquals(5, det1x1, "Determinant of a 1x1 matrix is incorrect.");

        // Additional test cases could be added here, testing other sizes of matrices,
        // including edge cases such as zero determinants or very large matrix values.
    }
}


No.7 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {
  
    @Test
    public void determinantTest() {
        // Test case for 1x1 matrix
        assertEquals(5, HillCipher.determinant(new int[][]{{5}}, 1), "Determinant should be 5 for 1x1 matrix");

        // Test case for 2x2 matrix
        assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2), "Determinant should be -2 for 2x2 matrix");

        // Test case for 3x3 matrix
        assertEquals(-6, HillCipher.determinant(new int[][]{{6, 1, 1}, {4, -2, 5}, {2, 8, 7}}, 3), "Determinant should be -6 for 3x3 matrix");

        // Additional test case for consistency
        assertEquals(0, HillCipher.determinant(new int[][]{{2, 4, 2}, {3, 1, 1}, {1, 2, 1}}, 3), "Determinant should be 0 for singular 3x3 matrix");

        // Test case for a larger matrix (4x4)
        assertEquals(-20, HillCipher.determinant(new int[][]{{1, 0, 2, -1}, {3, 0, 0, 5}, {2, 1, 4, -3}, {1, 0, 5, 0}}, 4), "Determinant should be -20 for 4x4 matrix");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {
    
    // Testing the determinant method with different scenarios
    @Test
    public void determinantTest() {

        // Case 1: Testing determinant of a 1x1 matrix
        int[][] matrix1 = {{5}};
        assertEquals(5, HillCipher.determinant(matrix1, 1), "Determinant should be 5 for a 1x1 matrix with the only element as 5.");

        // Case 2: Testing determinant of a 2x2 matrix
        int[][] matrix2 = {
                {1, 2},
                {3, 4}
        };
        assertEquals(-2, HillCipher.determinant(matrix2, 2), "Determinant should be -2 for the given 2x2 matrix.");

        // Case 3: Testing determinant of a 3x3 matrix
        int[][] matrix3 = {
                {6, 1, 1},
                {4, -2, 5},
                {2, 8, 7}
        };
        assertEquals(-306, HillCipher.determinant(matrix3, 3), "Determinant should be -306 for the given 3x3 matrix.");

        // Case 4: Testing determinant of a singular (determinant = 0) 3x3 matrix
        int[][] matrix4 = {
                {1, 2, 3},
                {1, 2, 3},
                {1, 2, 3}
        };
        assertEquals(0, HillCipher.determinant(matrix4, 3), "Determinant should be 0 for the given singular 3x3 matrix.");

        // Additional test cases can be written for larger matrices or specific edge cases
    }
}


No.9 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {

    @Test
    public void determinantTest() {
        // Test 1x1 matrix
        int[][] matrix1x1 = {{5}};
        assertEquals(5, HillCipher.determinant(matrix1x1, 1), "Determinant should be 5 for 1x1 matrix.");

        // Test 2x2 matrix
        int[][] matrix2x2 = {
            {1, 2},
            {3, 4}
        };
        assertEquals(-2, HillCipher.determinant(matrix2x2, 2), "Determinant should be -2 for 2x2 matrix.");
        
        // Test 3x3 matrix
        int[][] matrix3x3 = {
            {6, 1, 1},
            {4, -2, 5},
            {2, 8, 7}
        };
        assertEquals(-306, HillCipher.determinant(matrix3x3, 3), "Determinant should be -306 for 3x3 matrix.");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {

    @Test
    public void determinantTest() {
        int[][] matrix1 = {{1}};
        assertEquals(1, HillCipher.determinant(matrix1, 1), "Determinant of a 1x1 matrix failed.");

        int[][] matrix2 = {{3, 8}, {4, 6}};
        assertEquals(-14, HillCipher.determinant(matrix2, 2), "Determinant of a 2x2 matrix failed.");

        int[][] matrix3 = {{6, 1, 1}, {4, -2, 5}, {2, 8, 7}};
        assertEquals(-306, HillCipher.determinant(matrix3, 3), "Determinant of a 3x3 matrix failed.");

        int[][] matrix4 = {{1, 0, 2, -1}, {3, 0, 0, 5}, {2, 1, 4, -3}, {1, 0, 5, 0}};
        assertEquals(30, HillCipher.determinant(matrix4, 4), "Determinant of a 4x4 matrix failed.");
    }
}


