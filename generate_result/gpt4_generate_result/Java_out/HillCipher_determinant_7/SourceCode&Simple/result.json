{
    "project_name": "Java",
    "file_name": "HillCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/HillCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": null,
    "source_code": "// Determinant calculator\npublic static int determinant(int[][] a, int n) {\n    int det = 0, sign = 1, p = 0, q = 0;\n\n    if (n == 1) {\n        det = a[0][0];\n    } else {\n        int[][] b = new int[n - 1][n - 1];\n        for (int x = 0; x < n; x++) {\n            p = 0;\n            q = 0;\n            for (int i = 1; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (j != x) {\n                        b[p][q++] = a[i][j];\n                        if (q % (n - 1) == 0) {\n                            p++;\n                            q = 0;\n                        }\n                    }\n                }\n            }\n            det = det + a[0][x] * determinant(b, n - 1) * sign;\n            sign = -sign;\n        }\n    }\n    return det;\n}\n",
    "class_name": "HillCipher",
    "method_name": "determinant",
    "arguments": [
        "int[][] a",
        "int n"
    ],
    "generate_test": [
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        int[][] matrix1 = {{1}};\n        assertEquals(1, HillCipher.determinant(matrix1, 1), \"Determinant of a 1x1 matrix should be the single element\");\n        \n        int[][] matrix2 = {\n            {1, 0},\n            {0, 1}\n        };\n        assertEquals(1, HillCipher.determinant(matrix2, 2), \"Determinant of identity matrix should be 1\");\n        \n        int[][] matrix3 = {\n            {3, 8},\n            {4, 6}\n        };\n        assertEquals(-14, HillCipher.determinant(matrix3, 2), \"Determinant calculation for 2x2 matrix is incorrect\");\n\n        int[][] matrix4 = {\n            {6, 1, 1},\n            {4, -2, 5},\n            {2, 8, 7}\n        };\n        assertEquals(-306, HillCipher.determinant(matrix4, 3), \"Determinant calculation for 3x3 matrix is incorrect\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    @Test\n    public void determinantTest() {\n        // Test 1x1 matrix\n        assertEquals(5, HillCipher.determinant(new int[][]{{5}}, 1));\n\n        // Test 2x2 matrix\n        assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2));\n\n        // Test 3x3 matrix\n        assertEquals(0, HillCipher.determinant(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3));\n        \n        // Test 4x4 matrix\n        assertEquals(-20, HillCipher.determinant(new int[][]{\n            {7, 2, 1, 5},\n            {3, 6, 2, 8},\n            {4, 2, 9, 7},\n            {5, 3, 5, 1}}, 4));\n        \n        // Test singular matrix (expected determinant is 0)\n        assertEquals(0, HillCipher.determinant(new int[][]{\n            {1, 1, 1},\n            {0, 0, 0},\n            {2, 2, 2}}, 3));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    @Test\n    public void determinantTest() {\n        int[][] matrix1 = { {1} };\n        assertEquals(1, HillCipher.determinant(matrix1, 1));\n        \n        int[][] matrix2 = { {1, 2}, {3, 4} };\n        assertEquals(-2, HillCipher.determinant(matrix2, 2));\n        \n        int[][] matrix3 = { {6, 1, 1}, {4, -2, 5}, {2, 8, 7} };\n        assertEquals(-306, HillCipher.determinant(matrix3, 3));\n\n        // Test with larger matrix\n        int[][] matrix4 = {\n            {3, 2, 0, 1},\n            {4, 0, 1, 2},\n            {3, 0, 2, 1},\n            {9, 2, 3, 1}\n        };\n        assertEquals(-24, HillCipher.determinant(matrix4, 4));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    @Test\n    public void determinantTest() {\n        // Test a 1x1 matrix\n        assertEquals(1, HillCipher.determinant(new int[][]{{1}}, 1));\n\n        // Test a 2x2 matrix\n        assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2));\n        \n        // Test a 3x3 matrix\n        assertEquals(0, HillCipher.determinant(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3));\n        \n        // Test for a 4x4 matrix with a non-zero determinant\n        assertEquals(-20, HillCipher.determinant(new int[][]{{1, 0, 2, -1}, {3, 0, 0, 5}, {2, 1, 4, -3}, {1, 0, 5, 0}}, 4));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    @Test\n    public void determinantTest() {\n        // 1x1 Matrix test\n        assertEquals(5, HillCipher.determinant(new int[][]{{5}}, 1), \"Determinant of a 1x1 matrix should be the element itself.\");\n\n        // 2x2 Matrix test\n        assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2), \"Determinant of a 2x2 matrix should be (ad - bc).\");\n\n        // 3x3 Matrix test\n        assertEquals(0, HillCipher.determinant(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), \"Determinant of a 3x3 matrix with linear dependent rows should be 0.\");\n\n        // 3x3 Matrix test with a non-zero determinant\n        assertEquals(-12, HillCipher.determinant(new int[][]{{3, 2, 1}, {1, 1, 0}, {0, 1, 1}}, 3), \"Determinant of a 3x3 matrix should be calculated properly.\");\n\n        // Testing determinant of a larger matrix (4x4)\n        assertEquals(-20, HillCipher.determinant(new int[][]{\n                {1, 0, 2, -1},\n                {3, 0, 0, 5},\n                {2, 1, 4, -3},\n                {1, 0, 5, 0}\n        }, 4), \"Determinant of a 4x4 matrix should be calculated properly.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        // 1x1 matrix\n        int[][] matrix1 = {{5}};\n        assertEquals(5, HillCipher.determinant(matrix1, 1));\n\n        // 2x2 matrix\n        int[][] matrix2 = {{1, 2}, {3, 4}};\n        assertEquals(-2, HillCipher.determinant(matrix2, 2));\n\n        // 3x3 matrix\n        int[][] matrix3 = {{6, 1, 1}, {4, -2, 5}, {2, 8, 7}};\n        assertEquals(-306, HillCipher.determinant(matrix3, 3));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        // Test with a 1x1 matrix\n        int[][] matrix1 = {{5}};\n        assertEquals(5, HillCipher.determinant(matrix1, 1), \"Determinant of a 1x1 matrix should be the single element\");\n\n        // Test with a 2x2 matrix\n        int[][] matrix2 = {{4, 6}, {3, 8}};\n        assertEquals(14, HillCipher.determinant(matrix2, 2), \"Determinant of a 2x2 matrix should be ad-bc\");\n\n        // Test with a 3x3 matrix\n        int[][] matrix3 = {\n            {1, 0, 2},\n            {-1, 3, 1},\n            {3, -2, 0}\n        };\n        assertEquals(10, HillCipher.determinant(matrix3, 3), \"Determinant of a 3x3 matrix should be calculated correctly\");\n\n        // Ensuring determinant of the identity matrix is 1\n        int[][] identityMatrix = {\n            {1, 0, 0},\n            {0, 1, 0},\n            {0, 0, 1}\n        };\n        assertEquals(1, HillCipher.determinant(identityMatrix, 3), \"Determinant of an identity matrix should be 1\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    @Test\n    public void determinantTest() {\n        // Test for a 1x1 matrix\n        int[][] matrix1x1 = {{5}};\n        assertEquals(5, HillCipher.determinant(matrix1x1, 1), \"Determinant should be the single element for a 1x1 matrix.\");\n        \n        // Test for a 2x2 matrix\n        int[][] matrix2x2 = {{4, 2}, {3, 1}};\n        assertEquals(4, HillCipher.determinant(matrix2x2, 2), \"Determinant of a 2x2 matrix should be ad-bc.\");\n\n        // Test for a 3x3 matrix\n        int[][] matrix3x3 = {{1, 0, 2}, {-1, 3, 1}, {3, 0, 1}};\n        assertEquals(10, HillCipher.determinant(matrix3x3, 3), \"Determinant calculation for a 3x3 matrix is incorrect.\");\n\n        // Optional: Add more tests for larger matrices or special cases\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    @Test\n    public void determinantTest() {\n        assertAll(\"Determinant calculation\",\n            () -> assertEquals(1, HillCipher.determinant(new int[][]{{1}}, 1), \"Determinant of 1x1 matrix\"),\n            () -> assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2), \"Determinant of 2x2 matrix\"),\n            () -> assertEquals(0, HillCipher.determinant(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), \"Determinant of 3x3 matrix with dependent rows\"),\n            () -> assertEquals(-18, HillCipher.determinant(new int[][]{{3, 2, 0}, {0, 0, -2}, {1, -1, 3}}, 3), \"Determinant of 3x3 matrix\")\n        );\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        // Testing determinant for a 1x1 matrix\n        assertEquals(5, HillCipher.determinant(new int[][] {{5}}, 1));\n\n        // Testing determinant for a 2x2 matrix\n        assertEquals(-2, HillCipher.determinant(new int[][] {{1, 2}, {3, 4}}, 2));\n\n        // Testing determinant for a 3x3 matrix\n        assertEquals(-3, HillCipher.determinant(new int[][] {{6, 1, 1}, {4, -2, 5}, {2, 8, 7}}, 3));\n    }\n}"
    ]
}