Source code: 

// Determinant calculator
public static int determinant(int[][] a, int n) {
    int det = 0, sign = 1, p = 0, q = 0;

    if (n == 1) {
        det = a[0][0];
    } else {
        int[][] b = new int[n - 1][n - 1];
        for (int x = 0; x < n; x++) {
            p = 0;
            q = 0;
            for (int i = 1; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (j != x) {
                        b[p][q++] = a[i][j];
                        if (q % (n - 1) == 0) {
                            p++;
                            q = 0;
                        }
                    }
                }
            }
            det = det + a[0][x] * determinant(b, n - 1) * sign;
            sign = -sign;
        }
    }
    return det;
}



No.1 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {
    @Test
    public void determinantTest() {
        int[][] matrix1 = {{1}};
        assertEquals(1, HillCipher.determinant(matrix1, 1), "Determinant of a 1x1 matrix should be the single element");
        
        int[][] matrix2 = {
            {1, 0},
            {0, 1}
        };
        assertEquals(1, HillCipher.determinant(matrix2, 2), "Determinant of identity matrix should be 1");
        
        int[][] matrix3 = {
            {3, 8},
            {4, 6}
        };
        assertEquals(-14, HillCipher.determinant(matrix3, 2), "Determinant calculation for 2x2 matrix is incorrect");

        int[][] matrix4 = {
            {6, 1, 1},
            {4, -2, 5},
            {2, 8, 7}
        };
        assertEquals(-306, HillCipher.determinant(matrix4, 3), "Determinant calculation for 3x3 matrix is incorrect");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {

    @Test
    public void determinantTest() {
        // Test 1x1 matrix
        assertEquals(5, HillCipher.determinant(new int[][]{{5}}, 1));

        // Test 2x2 matrix
        assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2));

        // Test 3x3 matrix
        assertEquals(0, HillCipher.determinant(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3));
        
        // Test 4x4 matrix
        assertEquals(-20, HillCipher.determinant(new int[][]{
            {7, 2, 1, 5},
            {3, 6, 2, 8},
            {4, 2, 9, 7},
            {5, 3, 5, 1}}, 4));
        
        // Test singular matrix (expected determinant is 0)
        assertEquals(0, HillCipher.determinant(new int[][]{
            {1, 1, 1},
            {0, 0, 0},
            {2, 2, 2}}, 3));
    }
}


No.3 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {

    @Test
    public void determinantTest() {
        int[][] matrix1 = { {1} };
        assertEquals(1, HillCipher.determinant(matrix1, 1));
        
        int[][] matrix2 = { {1, 2}, {3, 4} };
        assertEquals(-2, HillCipher.determinant(matrix2, 2));
        
        int[][] matrix3 = { {6, 1, 1}, {4, -2, 5}, {2, 8, 7} };
        assertEquals(-306, HillCipher.determinant(matrix3, 3));

        // Test with larger matrix
        int[][] matrix4 = {
            {3, 2, 0, 1},
            {4, 0, 1, 2},
            {3, 0, 2, 1},
            {9, 2, 3, 1}
        };
        assertEquals(-24, HillCipher.determinant(matrix4, 4));
    }
}


No.4 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {

    @Test
    public void determinantTest() {
        // Test a 1x1 matrix
        assertEquals(1, HillCipher.determinant(new int[][]{{1}}, 1));

        // Test a 2x2 matrix
        assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2));
        
        // Test a 3x3 matrix
        assertEquals(0, HillCipher.determinant(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3));
        
        // Test for a 4x4 matrix with a non-zero determinant
        assertEquals(-20, HillCipher.determinant(new int[][]{{1, 0, 2, -1}, {3, 0, 0, 5}, {2, 1, 4, -3}, {1, 0, 5, 0}}, 4));
    }
}


No.5 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {

    @Test
    public void determinantTest() {
        // 1x1 Matrix test
        assertEquals(5, HillCipher.determinant(new int[][]{{5}}, 1), "Determinant of a 1x1 matrix should be the element itself.");

        // 2x2 Matrix test
        assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2), "Determinant of a 2x2 matrix should be (ad - bc).");

        // 3x3 Matrix test
        assertEquals(0, HillCipher.determinant(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), "Determinant of a 3x3 matrix with linear dependent rows should be 0.");

        // 3x3 Matrix test with a non-zero determinant
        assertEquals(-12, HillCipher.determinant(new int[][]{{3, 2, 1}, {1, 1, 0}, {0, 1, 1}}, 3), "Determinant of a 3x3 matrix should be calculated properly.");

        // Testing determinant of a larger matrix (4x4)
        assertEquals(-20, HillCipher.determinant(new int[][]{
                {1, 0, 2, -1},
                {3, 0, 0, 5},
                {2, 1, 4, -3},
                {1, 0, 5, 0}
        }, 4), "Determinant of a 4x4 matrix should be calculated properly.");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {
    @Test
    public void determinantTest() {
        // 1x1 matrix
        int[][] matrix1 = {{5}};
        assertEquals(5, HillCipher.determinant(matrix1, 1));

        // 2x2 matrix
        int[][] matrix2 = {{1, 2}, {3, 4}};
        assertEquals(-2, HillCipher.determinant(matrix2, 2));

        // 3x3 matrix
        int[][] matrix3 = {{6, 1, 1}, {4, -2, 5}, {2, 8, 7}};
        assertEquals(-306, HillCipher.determinant(matrix3, 3));
    }
}


No.7 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {
    @Test
    public void determinantTest() {
        // Test with a 1x1 matrix
        int[][] matrix1 = {{5}};
        assertEquals(5, HillCipher.determinant(matrix1, 1), "Determinant of a 1x1 matrix should be the single element");

        // Test with a 2x2 matrix
        int[][] matrix2 = {{4, 6}, {3, 8}};
        assertEquals(14, HillCipher.determinant(matrix2, 2), "Determinant of a 2x2 matrix should be ad-bc");

        // Test with a 3x3 matrix
        int[][] matrix3 = {
            {1, 0, 2},
            {-1, 3, 1},
            {3, -2, 0}
        };
        assertEquals(10, HillCipher.determinant(matrix3, 3), "Determinant of a 3x3 matrix should be calculated correctly");

        // Ensuring determinant of the identity matrix is 1
        int[][] identityMatrix = {
            {1, 0, 0},
            {0, 1, 0},
            {0, 0, 1}
        };
        assertEquals(1, HillCipher.determinant(identityMatrix, 3), "Determinant of an identity matrix should be 1");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {

    @Test
    public void determinantTest() {
        // Test for a 1x1 matrix
        int[][] matrix1x1 = {{5}};
        assertEquals(5, HillCipher.determinant(matrix1x1, 1), "Determinant should be the single element for a 1x1 matrix.");
        
        // Test for a 2x2 matrix
        int[][] matrix2x2 = {{4, 2}, {3, 1}};
        assertEquals(4, HillCipher.determinant(matrix2x2, 2), "Determinant of a 2x2 matrix should be ad-bc.");

        // Test for a 3x3 matrix
        int[][] matrix3x3 = {{1, 0, 2}, {-1, 3, 1}, {3, 0, 1}};
        assertEquals(10, HillCipher.determinant(matrix3x3, 3), "Determinant calculation for a 3x3 matrix is incorrect.");

        // Optional: Add more tests for larger matrices or special cases
    }
}


No.9 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {

    @Test
    public void determinantTest() {
        assertAll("Determinant calculation",
            () -> assertEquals(1, HillCipher.determinant(new int[][]{{1}}, 1), "Determinant of 1x1 matrix"),
            () -> assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2), "Determinant of 2x2 matrix"),
            () -> assertEquals(0, HillCipher.determinant(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), "Determinant of 3x3 matrix with dependent rows"),
            () -> assertEquals(-18, HillCipher.determinant(new int[][]{{3, 2, 0}, {0, 0, -2}, {1, -1, 3}}, 3), "Determinant of 3x3 matrix")
        );
    }
}


No.10 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {
    @Test
    public void determinantTest() {
        // Testing determinant for a 1x1 matrix
        assertEquals(5, HillCipher.determinant(new int[][] {{5}}, 1));

        // Testing determinant for a 2x2 matrix
        assertEquals(-2, HillCipher.determinant(new int[][] {{1, 2}, {3, 4}}, 2));

        // Testing determinant for a 3x3 matrix
        assertEquals(-3, HillCipher.determinant(new int[][] {{6, 1, 1}, {4, -2, 5}, {2, 8, 7}}, 3));
    }
}


