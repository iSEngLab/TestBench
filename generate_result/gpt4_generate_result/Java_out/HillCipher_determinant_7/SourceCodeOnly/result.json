{
    "project_name": "Java",
    "file_name": "HillCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/HillCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": null,
    "source_code": "// Determinant calculator\npublic static int determinant(int[][] a, int n) {\n    int det = 0, sign = 1, p = 0, q = 0;\n\n    if (n == 1) {\n        det = a[0][0];\n    } else {\n        int[][] b = new int[n - 1][n - 1];\n        for (int x = 0; x < n; x++) {\n            p = 0;\n            q = 0;\n            for (int i = 1; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (j != x) {\n                        b[p][q++] = a[i][j];\n                        if (q % (n - 1) == 0) {\n                            p++;\n                            q = 0;\n                        }\n                    }\n                }\n            }\n            det = det + a[0][x] * determinant(b, n - 1) * sign;\n            sign = -sign;\n        }\n    }\n    return det;\n}\n",
    "class_name": "HillCipher",
    "method_name": "determinant",
    "arguments": [
        "int[][] a",
        "int n"
    ],
    "generate_test": [
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    @Test\n    public void determinantTest() {\n        // 2x2 matrix\n        int[][] matrix2x2 = {\n            {1, 2},\n            {3, 4}\n        };\n        assertEquals(-2, HillCipher.determinant(matrix2x2, 2), \"Determinant of a 2x2 matrix is incorrect.\");\n\n        // 3x3 matrix\n        int[][] matrix3x3 = {\n            {6, 1, 1},\n            {4, -2, 5},\n            {2, 8, 7}\n        };\n        assertEquals(-306, HillCipher.determinant(matrix3x3, 3), \"Determinant of a 3x3 matrix is incorrect.\");\n        \n        // 1x1 matrix (edge case)\n        int[][] matrix1x1 = {\n            {42}\n        };\n        assertEquals(42, HillCipher.determinant(matrix1x1, 1), \"Determinant of a 1x1 matrix is incorrect.\");\n        \n        // Test with another 3x3 matrix\n        int[][] matrix3x3_2 = {\n            {3, 2, -1},\n            {2, 1, 3},\n            {1, 0, -2}\n        };\n        assertEquals(15, HillCipher.determinant(matrix3x3_2, 3), \"Determinant of a second 3x3 matrix is incorrect.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    \n    @Test\n    public void determinantTest() {\n        // Test case for 1x1 matrix\n        int[][] matrix1x1 = {{5}};\n        assertEquals(5, HillCipher.determinant(matrix1x1, 1), \"Determinant for 1x1 matrix\");\n        \n        // Test case for 2x2 matrix\n        int[][] matrix2x2 = {{1, 2}, {3, 4}};\n        assertEquals(-2, HillCipher.determinant(matrix2x2, 2), \"Determinant for 2x2 matrix\");\n        \n        // Test case for 3x3 matrix\n        int[][] matrix3x3 = {{1, 0, 2}, {-1, 3, 0}, {3, 0, 1}};\n        assertEquals(10, HillCipher.determinant(matrix3x3, 3), \"Determinant for 3x3 matrix\");\n\n        // Add more test cases as necessary\n        // ...\n    }\n    \n    // You may need to add the actual class with the 'determinant' method \n    // if it is not defined in the same file\n    public static class HillCipher {\n        // Determinant calculator method here (if not in the same file)\n        // ...\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        // Square matrix of size 1\n        assertEquals(5, HillCipher.determinant(new int[][]{{5}}, 1));\n\n        // Square matrix of size 2\n        assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2));\n\n        // Square matrix of size 3\n        assertEquals(0, HillCipher.determinant(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3));\n\n        // Another square matrix of size 3 with non-zero determinant\n        assertEquals(-12, HillCipher.determinant(new int[][]{{3, 2, -1}, {1, 1, 0}, {-1, 2, 1}}, 3));\n\n        // Testing with single element equal to zero\n        assertEquals(0, HillCipher.determinant(new int[][]{{0}}, 1));\n\n        // Testing with larger matrix of size 4 (example chosen for ease of hand calculation to verify)\n        assertEquals(-20, HillCipher.determinant(new int[][]{{1, 0, 2, -1}, {3, 0, 0, 5}, {2, 1, 4, -3}, {1, 0, 5, 0}}, 4));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        int[][] matrix1 = {{5}};\n        assertEquals(5, HillCipher.determinant(matrix1, 1), \"Determinant of a 1x1 matrix should be the element itself\");\n\n        int[][] matrix2 = {\n            {1, 2},\n            {3, 4}\n        };\n        assertEquals(-2, HillCipher.determinant(matrix2, 2), \"Determinant of a 2x2 matrix should be (ad-bc)\");\n\n        int[][] matrix3 = {\n            {6, 1, 1},\n            {4, -2, 5},\n            {2, 8, 7}\n        };\n        assertEquals(-306, HillCipher.determinant(matrix3, 3), \"Determinant of a 3x3 matrix should be calculated correctly\");\n\n        // You can also add more test cases for larger matrices and edge cases, if necessary\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    @Test\n    public void determinantTest() {\n        // For a 1x1 matrix.\n        assertEquals(5, MatrixOperations.determinant(new int[][]{{5}}, 1));\n\n        // For a 2x2 matrix.\n        assertEquals(-2, MatrixOperations.determinant(new int[][]{\n                {1, 2},\n                {3, 4}\n        }, 2));\n\n        // For a 3x3 matrix.\n        assertEquals(0, MatrixOperations.determinant(new int[][]{\n                {1, 2, 3},\n                {4, 5, 6},\n                {7, 8, 9}\n        }, 3));\n\n        // For a 4x4 matrix with a known determinant.\n        assertEquals(-20, MatrixOperations.determinant(new int[][]{\n                {1, 0, 2, -1},\n                {3, 0, 0, 5},\n                {2, 1, 4, -3},\n                {1, 0, 5, 0}\n        }, 4));\n    }\n\n    // Static inner class to represent the MatrixOperations\n    // since it's not included in the provided code snippet.\n    public static class MatrixOperations {\n        public static int determinant(int[][] a, int n) {\n            // Original determinant method provided\n            int det = 0, sign = 1, p = 0, q = 0;\n\n            if (n == 1) {\n                det = a[0][0];\n            } else {\n                int[][] b = new int[n - 1][n - 1];\n                for (int x = 0; x < n; x++) {\n                    p = 0;\n                    q = 0;\n                    for (int i = 1; i < n; i++) {\n                        for (int j = 0; j < n; j++) {\n                            if (j != x) {\n                                b[p][q++] = a[i][j];\n                                if (q % (n - 1) == 0) {\n                                    p++;\n                                    q = 0;\n                                }\n                            }\n                        }\n                    }\n                    det = det + a[0][x] * determinant(b, n - 1) * sign;\n                    sign = -sign;\n                }\n            }\n            return det;\n        }\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    private static int determinant(int[][] a, int n) {\n        // ... (The determinant method implementation should be here)\n    }\n\n    @Test\n    public void determinantTest() {\n        // Test case 1: Testing 1x1 matrix\n        assertEquals(5, determinant(new int[][]{{5}}, 1), \"Determinant of 1x1 matrix should be the matrix element itself\");\n\n        // Test case 2: Testing 2x2 matrix\n        assertEquals(-2, determinant(new int[][]{{1, 2}, {3, 4}}, 2), \"Determinant of 2x2 matrix should be (ad-bc)\");\n\n        // Test case 3: Testing 3x3 matrix\n        assertEquals(0, determinant(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), \"Determinant of 3x3 matrix with dependent rows should be 0\");\n\n        // Additional test cases can be added here as needed\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        // Test case for a 1x1 matrix.\n        assertEquals(5, HillCipher.determinant(new int[][]{{5}}, 1), \"Determinant of 1x1 matrix should be the single element itself.\");\n\n        // Test case for a 2x2 matrix.\n        assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2), \"Determinant of 2x2 matrix should be (ad - bc).\");\n\n        // Test case for a 3x3 matrix.\n        assertEquals(0, HillCipher.determinant(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), \"Determinant of 3x3 matrix with linearly dependent rows should be 0.\");\n        \n        // Additional test cases can be added to check different sizes or special conditions of matrices.\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        // Test 1x1 matrix\n        assertEquals(5, HillCipher.determinant(new int[][]{{5}}, 1), \"Determinant of a 1x1 matrix should be the single element value.\");\n\n        // Test 2x2 matrix\n        assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2), \"Determinant of a 2x2 matrix should be ad-bc.\");\n\n        // Test 3x3 matrix\n        assertEquals(0, HillCipher.determinant(new int[][]{{1, 0, 2}, {-1, 3, 1}, {3, 1, 1}}, 3), \"Determinant of a 3x3 matrix should be 0 for this example.\");\n\n        // Test 4x4 matrix\n        assertEquals(-20, HillCipher.determinant(new int[][]{{2, 3, 1, 5}, {6, 13, 5, 19}, {2, 19, 10, 23}, {4, 10, 11, 31}}, 4), \"Determinant of a 4x4 matrix should be -20 for this example.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    // Helper method to perform the determinant method\n    public static int determinant(int[][] a, int n) {\n        int det = 0, sign = 1, p = 0, q = 0;\n\n        if (n == 1) {\n            det = a[0][0];\n        } else {\n            int[][] b = new int[n - 1][n - 1];\n            for (int x = 0; x < n; x++) {\n                p = 0;\n                q = 0;\n                for (int i = 1; i < n; i++) {\n                    for (int j = 0; j < n; j++) {\n                        if (j != x) {\n                            b[p][q++] = a[i][j];\n                            if (q % (n - 1) == 0) {\n                                p++;\n                                q = 0;\n                            }\n                        }\n                    }\n                }\n                det = det + a[0][x] * determinant(b, n - 1) * sign;\n                sign = -sign;\n            }\n        }\n        return det;\n    }\n\n    @Test\n    public void determinantTest() {\n        // Test identity matrix determinant\n        int[][] identityMatrix = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};\n        assertEquals(1, determinant(identityMatrix, identityMatrix.length));\n\n        // Test zero matrix determinant\n        int[][] zeroMatrix = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};\n        assertEquals(0, determinant(zeroMatrix, zeroMatrix.length));\n\n        // Test matrix with determinant different than 0 or 1\n        int[][] matrix = {{1, 2, 3}, {0, 4, 5}, {1, 0, 6}};\n        assertEquals(24, determinant(matrix, matrix.length));\n\n        // Test single element matrix\n        int[][] singleElementMatrix = {{5}};\n        assertEquals(5, determinant(singleElementMatrix, singleElementMatrix.length));\n        \n        // Test 2x2 matrix determinant\n        int[][] twoByTwoMatrix = {{4, 7}, {2, 6}};\n        assertEquals(10, determinant(twoByTwoMatrix, twoByTwoMatrix.length));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n\n    @Test\n    public void determinantTest() {\n        assertEquals(1, HillCipher.determinant(new int[][]{{1}}, 1), \"Determinant of 1x1 matrix\");\n        assertEquals(-2, HillCipher.determinant(new int[][]{{1, 2}, {3, 4}}, 2), \"Determinant of 2x2 matrix\");\n        assertEquals(0, HillCipher.determinant(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), \"Determinant of 3x3 matrix with linearly dependent rows\");\n        assertEquals(-3, HillCipher.determinant(new int[][]{{1, 2, 3}, {0, 1, 4}, {5, 6, 0}}, 3), \"Determinant of 3x3 matrix\");\n    }\n}"
    ]
}