{
    "project_name": "Java",
    "file_name": "KahnsAlgorithm.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/KahnsAlgorithm.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Returns an ArrayList with vertices arranged in topological order\n     */",
    "source_code": "\nArrayList<E> topSortOrder() {\n    calculateInDegree();\n    Queue<E> q = new LinkedList<E>();\n\n    for (E vertex : inDegree.keySet()) {\n        if (inDegree.get(vertex) == 0) {\n            q.add(vertex);\n        }\n    }\n\n    ArrayList<E> answer = new ArrayList<>();\n\n    while (!q.isEmpty()) {\n        E current = q.poll();\n        answer.add(current);\n        for (E adjacent : graph.getAdjacents(current)) {\n            inDegree.put(adjacent, inDegree.get(adjacent) - 1);\n            if (inDegree.get(adjacent) == 0) {\n                q.add(adjacent);\n            }\n        }\n    }\n\n    return answer;\n}\n",
    "class_name": "KahnsAlgorithm",
    "method_name": "topSortOrder",
    "arguments": [],
    "generate_test": [
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport java.util.ArrayList;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class KahnsAlgorithmTest {\n    \n    @Test\n    public void topSortOrderTest() {\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"u\", \"b\");\n        \n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n        ArrayList<String> sortedOrder = topSort.topSortOrder();\n        \n        ArrayList<String> expectedOrder = new ArrayList<>();\n        expectedOrder.add(\"c\");\n        expectedOrder.add(\"u\");\n        expectedOrder.add(\"a\");\n        expectedOrder.add(\"b\");\n        expectedOrder.add(\"d\");\n        // The actual order can vary as long as it respects the edges precedence, this is one of the possible orders\n        \n        assertEquals(expectedOrder.size(), sortedOrder.size(), \"Sorted order should have the same size as expected order\");\n\n        // Further test cases could check the validity of the topological sort (each vertex appears before all vertices it has edges to)\n        // However, as topological ordering is not unique, checking for an exact sequence may not be correct\n        // For simplicity, we just check if sortedOrder contains all elements and in this case if it matches the expected sequence.\n        for(int i = 0; i < expectedOrder.size(); i++) {\n            assertEquals(expectedOrder.get(i), sortedOrder.get(i), \"Mismatch at position \" + i + \" of the sorted order\");\n        }\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\n\npublic class KahnsAlgorithmTest {\n    @Test\n    public void topSortOrderTest() {\n        // Set up the graph\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"u\", \"b\");\n\n        // Initialize the topological sort\n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n\n        // Create an ArrayList to hold the expected output\n        ArrayList<String> expectedOutput = new ArrayList<>();\n        // Based on the edges defined, \"c\" and \"u\" or \"u\" and \"c\" can be first\n        // but they should be before \"a\", \"b\", and \"d\", the rest of the order is determined by dependency.\n        // Here we select one valid topological sort ordering.\n        expectedOutput.add(\"c\");\n        expectedOutput.add(\"u\");\n        expectedOutput.add(\"a\");\n        expectedOutput.add(\"b\");\n        expectedOutput.add(\"d\");\n\n        // Execute topSortOrder method\n        ArrayList<String> actualOutput = topSort.topSortOrder();\n\n        // Assert that actual output matches expected output\n        assertEquals(expectedOutput, actualOutput, \"The topological sort order is incorrect.\");\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class KahnsAlgorithmTest {\n\n    @Test\n    public void topSortOrderTest() {\n        // Create a graph instance\n        AdjacencyList<String> graph = new AdjacencyList<>();\n\n        // Add edges to the graph\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"u\", \"b\");\n\n        // Run topological sort\n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n        ArrayList<String> order = topSort.topSortOrder();\n\n        // Expected topological sort result (example order can vary)\n        // Note: The actual topological order could be one of several \n        // correct orders, so the test may be more complex in practice\n        \n        // Assert that the order is valid\n        assertTrue(order.indexOf(\"c\") < order.indexOf(\"a\") &&\n                   order.indexOf(\"a\") < order.indexOf(\"b\") &&\n                   order.indexOf(\"a\") < order.indexOf(\"d\") &&\n                   order.indexOf(\"b\") < order.indexOf(\"d\") &&\n                   order.indexOf(\"c\") < order.indexOf(\"u\") &&\n                   order.indexOf(\"u\") < order.indexOf(\"b\"), \"The topological sort order is incorrect.\");\n\n        // Ensure all vertices are present in the result\n        assertEquals(new HashSet<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"u\")), new HashSet<>(order), \"Some vertices are missing from the topological sort order.\");\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class KahnsAlgorithmTest {\n    @Test\n    public void topSortOrderTest() {\n        // Arrange\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"u\", \"b\");\n\n        ArrayList<String> expectedOrder = new ArrayList<>();\n        expectedOrder.add(\"c\");\n        expectedOrder.add(\"u\");\n        expectedOrder.add(\"a\");\n        expectedOrder.add(\"b\");\n        expectedOrder.add(\"d\");\n\n        // Act\n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n        ArrayList<String> actualOrder = topSort.topSortOrder();\n\n        // Assert\n        assertEquals(expectedOrder, actualOrder);\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class KahnsAlgorithmTest {\n\n    @Test\n    public void topSortOrderTest() {\n        // Construct the graph\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"u\", \"b\");\n\n        // Perform topological sort\n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n        ArrayList<String> actualOrder = topSort.topSortOrder();\n\n        // There can be multiple valid topological sorts for a given graph.\n        // For the purpose of this unit test, we are asserting one possible valid order.\n        // However, we need to ensure that the test is flexible enough to allow for other valid orders.\n        // The only strict requirements are that for each directed edge u -> v, u comes before v.\n\n        // Possible expected order: \"c\", \"u\", \"a\", \"b\", \"d\"\n        // This is based on the given graph structure and is one of the valid topological orders.\n        \n        // Verify that all vertices are present in the topological order\n        assertEquals(graph.getVertices().size(), actualOrder.size());\n\n        // Verify that for each directed edge u -> v, u comes before v\n        for (String vertex : actualOrder) {\n            ArrayList<String> adjVertices = graph.getAdjacents(vertex);\n            for (String adjVertex : adjVertices) {\n                assertTrue(actualOrder.indexOf(vertex) < actualOrder.indexOf(adjVertex),\n                           \"The vertex \" + vertex + \" should come before \" + adjVertex);\n            }\n        }\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport java.util.ArrayList;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class KahnsAlgorithmTest {\n    @Test\n    public void topSortOrderTest() {\n        // Step 1: Create the graph\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"u\", \"b\");\n        \n        // Step 2: Perform the topological sort\n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n        ArrayList<String> sortedList = topSort.topSortOrder();\n        \n        // Step 3: Define correct output\n        // Note: There might be more than one valid topological order for a graph,\n        // therefore, test may need to account for variability.\n        // For simplicity, we are asserting one of the possible correct orders.\n        \n        ArrayList<String> correctOrder = new ArrayList<>();\n        correctOrder.add(\"c\");\n        correctOrder.add(\"u\");\n        correctOrder.add(\"a\");\n        correctOrder.add(\"b\");\n        correctOrder.add(\"d\");\n        \n        // Step 4: Assertion\n        assertEquals(correctOrder.size(), sortedList.size(), \"The sorted list should have the same size as the correct order.\");\n        \n        for (int i = 0; i < correctOrder.size(); i++) {\n            assertEquals(correctOrder.get(i), sortedList.get(i), \"The element at index \" + i + \" should be \" + correctOrder.get(i));\n        }\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\n\npublic class KahnsAlgorithmTest {\n\n    private AdjacencyList<String> graph;\n    private TopologicalSort<String> topSort;\n\n    @BeforeEach\n    public void setUp() {\n        // Initialize graph as in the main method\n        graph = new AdjacencyList<>();\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"u\", \"b\");\n\n        topSort = new TopologicalSort<>(graph);\n    }\n\n    @Test\n    public void topSortOrderTest() {\n        ArrayList<String> sortOrder = topSort.topSortOrder();\n\n        // To test topological sort, we need to make sure each directed edge uv from vertex u to vertex v,\n        // vertex u comes before v in the ordering.\n        // Since there are potentially multiple valid orderings, we cannot test for a single correct answer.\n        // Instead, we verify the condition of topological sort for all edges.\n\n        for (int i = 0; i < sortOrder.size(); i++) {\n            for (int j = i + 1; j < sortOrder.size(); j++) {\n                String u = sortOrder.get(i);\n                String v = sortOrder.get(j);\n                assertFalse(graph.getAdjacents(u).contains(v), \"Graph has an edge from \" + v + \" to \" + u + \" which violates topological order\");\n            }\n        }\n    }\n}",
        "### JUNIT Test case:\npackage com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\n\npublic class KahnsAlgorithmTest {\n    \n    @Test\n    public void topSortOrderTest() {\n        // Set up a graph with a known topological ordering\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"u\", \"b\");\n        graph.addEdge(\"b\", \"d\");\n        \n        // Initializing the topSort instance with the mock graph\n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n        \n        // Perform topological sort\n        ArrayList<String> sortedOrder = topSort.topSortOrder();\n        \n        // Expected topological order \n        // The exact order could vary since multiple correct orders can exist. We are asserting one possible correct order.\n        ArrayList<String> expectedOrder = new ArrayList<>();\n        expectedOrder.add(\"c\");\n        expectedOrder.add(\"u\");\n        expectedOrder.add(\"a\");\n        expectedOrder.add(\"b\");\n        expectedOrder.add(\"d\");\n        \n        // Assert the sortedOrder equals expectedOrder\n        assertEquals(expectedOrder, sortedOrder);\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport java.util.ArrayList;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class KahnsAlgorithmTest {\n    @Test\n    public void topSortOrderTest() {\n        // Setup the graph\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"u\", \"b\");\n\n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n        ArrayList<String> actualOrder = topSort.topSortOrder();\n\n        // Defining a correct topological order (one of the possible correct orders)\n        ArrayList<String> expectedOrder = new ArrayList<>();\n        expectedOrder.add(\"c\");\n        expectedOrder.add(\"u\");\n        expectedOrder.add(\"a\");\n        expectedOrder.add(\"b\");\n        expectedOrder.add(\"d\");\n\n        // Asserting that the actual order is the same as the expected order\n        assertIterableEquals(expectedOrder, actualOrder);\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.ArrayList;\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\npublic class KahnsAlgorithmTest {\n    @Test\n    public void topSortOrderTest() {\n        // Arrange: create the graph and fill edges as in the main method\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"u\", \"b\");\n\n        // Act: perform topological sort\n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n        ArrayList<String> result = topSort.topSortOrder();\n\n        // Assert: check if the sort order is valid. Exact order may\n        // vary due to the possible variation in valid topological sorts.\n        // The test case below assumes 'c' -> 'a' -> 'u' -> 'b' -> 'd' is a valid sort.\n        String[] expectedResult = {\"c\", \"u\", \"a\", \"b\", \"d\"};\n        assertArrayEquals(expectedResult, result.toArray(new String[0]));\n    }\n}"
    ]
}