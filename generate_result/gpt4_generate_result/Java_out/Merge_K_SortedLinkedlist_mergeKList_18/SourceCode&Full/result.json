{
    "project_name": "Java",
    "file_name": "Merge_K_SortedLinkedlist.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/Merge_K_SortedLinkedlist.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * This function merge K sorted LinkedList\n     *\n     * @param a array of LinkedList\n     * @param N size of array\n     * @return node\n     */",
    "source_code": "\nNode mergeKList(Node[] a, int N) {\n    // Min Heap\n    PriorityQueue<Node> min = new PriorityQueue<>(Comparator.comparingInt(x -> x.data));\n\n    // adding head of all linkedList in min heap\n    min.addAll(Arrays.asList(a).subList(0, N));\n\n    // Make new head among smallest heads in K linkedList\n    Node head = min.poll();\n    min.add(head.next);\n    Node curr = head;\n\n    // merging LinkedList\n    while (!min.isEmpty()) {\n        Node temp = min.poll();\n        curr.next = temp;\n        curr = temp;\n\n        // Add Node in min Heap only if temp.next is not null\n        if (temp.next != null) {\n            min.add(temp.next);\n        }\n    }\n\n    return head;\n}\n",
    "class_name": "Merge_K_SortedLinkedlist",
    "method_name": "mergeKList",
    "arguments": [
        "Node a",
        "int N"
    ],
    "generate_test": [
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n\n    public static class Node {\n        int data;\n        Node next;\n\n        public Node(int data) {\n            this.data = data;\n        }   \n    }\n\n    private Merge_K_SortedLinkedlist.Node[] createLists() {\n        // Create test data\n        Merge_K_SortedLinkedlist.Node node1 = new Node(1);\n        node1.next = new Node(4);\n        node1.next.next = new Node(5);\n\n        Merge_K_SortedLinkedlist.Node node2 = new Node(1);\n        node2.next = new Node(3);\n        node2.next.next = new Node(4);\n\n        Merge_K_SortedLinkedlist.Node node3 = new Node(2);\n        node3.next = new Node(6);\n\n        return new Merge_K_SortedLinkedlist.Node[]{node1, node2, node3};\n    }\n\n    private String listToString(Merge_K_SortedLinkedlist.Node node) {\n        StringBuilder sb = new StringBuilder();\n        while (node != null) {\n            sb.append(node.data);\n            if (node.next != null) {\n                sb.append(\"->\");\n            }\n            node = node.next;\n        }\n        return sb.toString();\n    }\n\n    @Test\n    public void mergeKListTest() {\n        Merge_K_SortedLinkedlist mergeKSortedList = new Merge_K_SortedLinkedlist();\n        Merge_K_SortedLinkedlist.Node[] lists = createLists();\n        \n        Merge_K_SortedLinkedlist.Node mergedHead = mergeKSortedList.mergeKList(lists, lists.length);\n        \n        // We expect the merged list to be 1->1->2->3->4->4->5->6\n        String result = listToString(mergedHead);\n        assertEquals(\"1->1->2->3->4->4->5->6\", result);\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n\n    private Merge_K_SortedLinkedlist merge_k_sortedLinkedList;\n\n    @BeforeEach\n    public void setup() {\n        merge_k_sortedLinkedList = new Merge_K_SortedLinkedlist();\n    }\n\n    @Test\n    public void mergeKListTest() {\n        Merge_K_SortedLinkedlist.Node[] lists = new Merge_K_SortedLinkedlist.Node[]{\n            createList(new int[]{1, 4, 5}),\n            createList(new int[]{1, 3, 4}),\n            createList(new int[]{2, 6})\n        };\n        Merge_K_SortedLinkedlist.Node mergedHead = merge_k_sortedLinkedList.mergeKList(lists, lists.length);\n\n        int[] expected = new int[]{1, 1, 2, 3, 4, 4, 5, 6};\n        for (int value : expected) {\n            assertNotNull(mergedHead);\n            assertEquals(value, mergedHead.data);\n            mergedHead = mergedHead.next;\n        }\n\n        assertNull(mergedHead); // The merged list should end here\n    }\n\n    private Merge_K_SortedLinkedlist.Node createList(int[] data) {\n        if (data == null || data.length == 0) {\n            return null;\n        }\n\n        Merge_K_SortedLinkedlist.Node head = new Merge_K_SortedLinkedlist.Node(data[0]);\n        Merge_K_SortedLinkedlist.Node current = head;\n\n        for (int i = 1; i < data.length; i++) {\n            current.next = new Merge_K_SortedLinkedlist.Node(data[i]);\n            current = current.next;\n        }\n\n        return head;\n    }\n    \n    // This is required as the Node class was private. We are mimicking it with a static nested class for this test.\n    private static class Node {\n        private int data;\n        private Merge_K_SortedLinkedlist.Node next;\n\n        public Node(int data) {\n            this.data = data;\n            this.next = null;\n        }\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n\n    private Merge_K_SortedLinkedlist.Node newNode(int value) {\n        Merge_K_SortedLinkedlist.Node node = new Merge_K_SortedLinkedlist().new Node();\n        node.data = value;\n        node.next = null;\n        return node;\n    }\n\n    private Merge_K_SortedLinkedlist.Node[] createTestLists() {\n        // List 1: 1->3->5\n        Merge_K_SortedLinkedlist.Node head1 = newNode(1);\n        head1.next = newNode(3);\n        head1.next.next = newNode(5);\n\n        // List 2: 2->4->6\n        Merge_K_SortedLinkedlist.Node head2 = newNode(2);\n        head2.next = newNode(4);\n        head2.next.next = newNode(6);\n\n        return new Merge_K_SortedLinkedlist.Node[]{head1, head2};\n    }\n\n    @Test\n    public void mergeKListTest() {\n        Merge_K_SortedLinkedlist mergeKLists = new Merge_K_SortedLinkedlist();\n        Merge_K_SortedLinkedlist.Node[] lists = createTestLists();\n        Merge_K_SortedLinkedlist.Node mergedList = mergeKLists.mergeKList(lists, lists.length);\n\n        assertNotNull(mergedList);\n\n        int[] expectedData = {1, 2, 3, 4, 5, 6};\n        for (int value : expectedData) {\n            assertNotNull(mergedList);\n            assertEquals(value, mergedList.data);\n            mergedList = mergedList.next;\n        }\n\n        assertNull(mergedList);\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n\n    Merge_K_SortedLinkedlist merge_k_sortedLinkedlist = new Merge_K_SortedLinkedlist();\n\n    @Test\n    public void mergeKListTest() {\n        // Initialize individual linked lists\n        Merge_K_SortedLinkedlist.Node[] lists = new Merge_K_SortedLinkedlist.Node[3];\n        lists[0] = createList(new int[]{1, 4, 5});\n        lists[1] = createList(new int[]{1, 3, 4});\n        lists[2] = createList(new int[]{2, 6});\n\n        // Merge K lists\n        Merge_K_SortedLinkedlist.Node head = merge_k_sortedLinkedlist.mergeKList(lists, lists.length);\n        \n        // Expected merged list as array\n        int[] expected = new int[]{1, 1, 2, 3, 4, 4, 5, 6};\n\n        // Convert merged linked list to array\n        int[] result = linkedListToArray(head);\n        \n        // Assert that the merged list matches the expected result\n        assertArrayEquals(expected, result, \"The merged array does not match the expected output.\");\n    }\n\n    // Helper method to create a linked list from the given array of values\n    private Merge_K_SortedLinkedlist.Node createList(int[] values) {\n        if (values == null || values.length == 0) return null;\n        Merge_K_SortedLinkedlist.Node head = merge_k_sortedLinkedlist.new Node();\n        Merge_K_SortedLinkedlist.Node current = head;\n        head.data = values[0];\n        for (int i = 1; i < values.length; i++) {\n            Merge_K_SortedLinkedlist.Node temp = merge_k_sortedLinkedlist.new Node();\n            temp.data = values[i];\n            current.next = temp;\n            current = temp;\n        }\n        return head;\n    }\n\n    // Helper method to convert a linked list to an array of ints\n    private int[] linkedListToArray(Merge_K_SortedLinkedlist.Node head) {\n        int length = 0;\n        Merge_K_SortedLinkedlist.Node current = head;\n        while (current != null) {\n            length++;\n            current = current.next;\n        }\n        int[] result = new int[length];\n        current = head;\n        int index = 0;\n        while (current != null) {\n            result[index++] = current.data;\n            current = current.next;\n        }\n        return result;\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    \n    private Merge_K_SortedLinkedlist.Node createNode(int data) {\n        Merge_K_SortedLinkedlist.Node node = new Merge_K_SortedLinkedlist().new Node();\n        node.data = data;\n        node.next = null;\n        return node;\n    }\n\n    private Merge_K_SortedLinkedlist.Node createLinkedList(int[] values) {\n        if (values.length == 0) return null;\n        Merge_K_SortedLinkedlist.Node head = createNode(values[0]);\n        Merge_K_SortedLinkedlist.Node curr = head;\n        for (int i = 1; i < values.length; i++) {\n            curr.next = createNode(values[i]);\n            curr = curr.next;\n        }\n        return head;\n    }\n\n    @Test\n    public void mergeKListTest() {\n        Merge_K_SortedLinkedlist mergeK = new Merge_K_SortedLinkedlist();\n\n        // Create linked lists\n        Merge_K_SortedLinkedlist.Node list1 = createLinkedList(new int[]{1, 4, 7});\n        Merge_K_SortedLinkedlist.Node list2 = createLinkedList(new int[]{2, 5, 8});\n        Merge_K_SortedLinkedlist.Node list3 = createLinkedList(new int[]{3, 6, 9});\n\n        // Array of linked list heads\n        Merge_K_SortedLinkedlist.Node[] nodes = new Merge_K_SortedLinkedlist.Node[]{list1, list2, list3};\n\n        // Merge the K sorted linked lists\n        Merge_K_SortedLinkedlist.Node mergedHead = mergeK.mergeKList(nodes, nodes.length);\n\n        // Convert the merged linked list to an array for easy comparison\n        int[] result = new int[9];\n        int i = 0;\n        while (mergedHead != null) {\n            result[i++] = mergedHead.data;\n            mergedHead = mergedHead.next;\n        }\n\n        // Define the expected result\n        int[] expectedResult = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n        assertArrayEquals(expectedResult, result, \"The merged linked list is not correct.\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n\n    private Merge_K_SortedLinkedlist merge_k_sortedLinkedList;\n\n    @BeforeEach\n    public void setUp() {\n        merge_k_sortedLinkedList = new Merge_K_SortedLinkedlist();\n    }\n\n    @Test\n    public void mergeKListTest() {\n        // Setup test data: creating k sorted linked lists\n        Merge_K_SortedLinkedlist.Node[] sortedLists = new Merge_K_SortedLinkedlist.Node[3];\n\n        // List 1: 1 -> 3 -> 5\n        sortedLists[0] = createNodeList(new int[]{1, 3, 5});\n\n        // List 2: 2 -> 4 -> 6\n        sortedLists[1] = createNodeList(new int[]{2, 4, 6});\n\n        // List 3: 0 -> 7 -> 8\n        sortedLists[2] = createNodeList(new int[]{0, 7, 8});\n\n        // Merge k lists\n        Merge_K_SortedLinkedlist.Node mergedHead = merge_k_sortedLinkedList.mergeKList(sortedLists, sortedLists.length);\n\n        // Verify merged list is sorted: 0 -> 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8\n        int[] expectedData = {0, 1, 2, 3, 4, 5, 6, 7, 8};\n        for (int data : expectedData) {\n            assertNotNull(mergedHead, \"Node should not be null\");\n            assertEquals(data, mergedHead.data, \"Node data should match expected value\");\n            mergedHead = mergedHead.next;\n        }\n        assertNull(mergedHead, \"Merged list should end with null\");\n    }\n\n    private Merge_K_SortedLinkedlist.Node createNodeList(int[] data) {\n        if (data.length == 0) return null;\n        Merge_K_SortedLinkedlist.Node head, current;\n\n        head = merge_k_sortedLinkedList.new Node();\n        head.data = data[0];\n        current = head;\n\n        for (int i = 1; i < data.length; i++) {\n            current.next = merge_k_sortedLinkedList.new Node();\n            current = current.next;\n            current.data = data[i];\n        }\n\n        return head;\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.PriorityQueue;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\npublic class Merge_K_SortedLinkedlistTest {\n\n    @Test\n    public void mergeKListTest() {\n        // Setup the linked lists (Nodes)\n        Merge_K_SortedLinkedlist mergeKListUtil = new Merge_K_SortedLinkedlist();\n        Merge_K_SortedLinkedlist.Node list1 = mergeKListUtil.new Node();\n        list1.data = 1;\n        list1.next = mergeKListUtil.new Node();\n        list1.next.data = 4;\n        list1.next.next = mergeKListUtil.new Node();\n        list1.next.next.data = 5;\n\n        Merge_K_SortedLinkedlist.Node list2 = mergeKListUtil.new Node();\n        list2.data = 1;\n        list2.next = mergeKListUtil.new Node();\n        list2.next.data = 3;\n        list2.next.next = mergeKListUtil.new Node();\n        list2.next.next.data = 4;\n\n        Merge_K_SortedLinkedlist.Node list3 = mergeKListUtil.new Node();\n        list3.data = 2;\n        list3.next = mergeKListUtil.new Node();\n        list3.next.data = 6;\n\n        Merge_K_SortedLinkedlist.Node[] nodes = new Merge_K_SortedLinkedlist.Node[] { list1, list2, list3 };\n\n        // Perform the merge\n        Merge_K_SortedLinkedlist.Node mergedList = mergeKListUtil.mergeKList(nodes, nodes.length);\n\n        // Assert the resulting list is as expected\n        assertNotNull(mergedList);\n        int[] expectedData = {1, 1, 2, 3, 4, 4, 5, 6};\n\n        for (int expectedValue : expectedData) {\n            assertEquals(expectedValue, mergedList.data);\n            mergedList = mergedList.next;\n        }\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\n\nimport java.util.Arrays;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\npublic class Merge_K_SortedLinkedlistTest {\n    \n    Merge_K_SortedLinkedlist mergeKListsObj = new Merge_K_SortedLinkedlist();\n    \n    @Test\n    public void mergeKListTest() {\n        Merge_K_SortedLinkedlist.Node[] nodeList = new Merge_K_SortedLinkedlist.Node[3];\n        \n        nodeList[0] = createLinkedList(new int[]{1, 4, 7});\n        nodeList[1] = createLinkedList(new int[]{2, 5, 8});\n        nodeList[2] = createLinkedList(new int[]{3, 6, 9});\n        \n        Merge_K_SortedLinkedlist.Node mergedHead = mergeKListsObj.mergeKList(nodeList, nodeList.length);\n        \n        assertNotNull(mergedHead, \"The merged linked list should not be null\");\n        \n        int[] expectedMergedValues = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9};\n        for (int value : expectedMergedValues) {\n            assertNotNull(mergedHead, \"Node should not be null\");\n            assertEquals(value, mergedHead.data, \"Node data should match expected value\");\n            mergedHead = mergedHead.next;\n        }\n        assertEquals(null, mergedHead, \"The last node should point to null\");\n    }\n    \n    private Merge_K_SortedLinkedlist.Node createLinkedList(int[] values) {\n        if (values == null || values.length == 0) {\n            return null;\n        }\n\n        Merge_K_SortedLinkedlist.Node head = new Merge_K_SortedLinkedlist().new Node();\n        Merge_K_SortedLinkedlist.Node current = head;\n\n        head.data = values[0];\n\n        for (int i = 1; i < values.length; i++) {\n            Merge_K_SortedLinkedlist.Node temp = new Merge_K_SortedLinkedlist().new Node();\n            temp.data = values[i];\n            current.next = temp;\n            current = temp;\n        }\n\n        return head;\n    }\n    \n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n\n    private Merge_K_SortedLinkedlist mergeKListObj = new Merge_K_SortedLinkedlist();\n    \n    private Merge_K_SortedLinkedlist.Node[] generateSampleLists() {\n        // Creating sample lists\n        Merge_K_SortedLinkedlist.Node list1 = createList(new int[]{1, 4, 7});\n        Merge_K_SortedLinkedlist.Node list2 = createList(new int[]{2, 5, 8});\n        Merge_K_SortedLinkedlist.Node list3 = createList(new int[]{3, 6, 9});\n\n        return new Merge_K_SortedLinkedlist.Node[]{list1, list2, list3};\n    }\n    \n    private Merge_K_SortedLinkedlist.Node createList(int[] values) {\n        Merge_K_SortedLinkedlist.Node head = mergeKListObj.new Node(values[0], null);\n        Merge_K_SortedLinkedlist.Node current = head;\n        for (int i = 1; i < values.length; i++) {\n            current.next = mergeKListObj.new Node(values[i], null);\n            current = current.next;\n        }\n        return head;\n    }\n\n    private boolean areListsEqual(Merge_K_SortedLinkedlist.Node head1, Merge_K_SortedLinkedlist.Node head2) {\n        Merge_K_SortedLinkedlist.Node ptr1 = head1;\n        Merge_K_SortedLinkedlist.Node ptr2 = head2;\n        while (ptr1 != null && ptr2 != null) {\n            if (ptr1.data != ptr2.data) {\n                return false;\n            }\n            ptr1 = ptr1.next;\n            ptr2 = ptr2.next;\n        }\n        return (ptr1 == null) && (ptr2 == null);\n    }\n    \n    @Test\n    public void mergeKListTest() {\n        // given\n        Merge_K_SortedLinkedlist.Node[] sampleLists = generateSampleLists();\n        Merge_K_SortedLinkedlist.Node expected = createList(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9});\n        \n        // when\n        Merge_K_SortedLinkedlist.Node resultHead = mergeKListObj.mergeKList(sampleLists, sampleLists.length);\n        \n        // then\n        assertTrue(areListsEqual(expected, resultHead));\n    }\n\n    @Test\n    public void mergeKListTest_EmptyList() {\n        // given\n        Merge_K_SortedLinkedlist.Node[] sampleLists = new Merge_K_SortedLinkedlist.Node[]{};\n\n        // when\n        Merge_K_SortedLinkedlist.Node resultHead = mergeKListObj.mergeKList(sampleLists, sampleLists.length);\n\n        // then\n        assertNull(resultHead);\n    }\n    \n    // We can add more test cases for scenarios like partially filled arrays, very large lists, etc.\n\n    // Define the Node class properly according to the available constructor in the original codebase or update the code\n    // to match this test case, if necessary.\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n\n    private class Node {\n        private int data;\n        private Node next;\n\n        public Node(int data) {\n            this.data = data;\n            this.next = null;\n        }\n    }\n    \n    // Helper method to create a linked list with given values\n    private Node createLinkedList(int[] values) {\n        Node head = new Node(values[0]);\n        Node current = head;\n        for (int i = 1; i < values.length; i++) {\n            current.next = new Node(values[i]);\n            current = current.next;\n        }\n        return head;\n    }\n    \n    // Helper method to convert linked list to string for easy comparison\n    private String linkedListToString(Node head) {\n        StringBuilder sb = new StringBuilder();\n        Node current = head;\n        while (current != null) {\n            sb.append(current.data).append(\" \");\n            current = current.next;\n        }\n        return sb.toString().trim();\n    }\n    \n    @Test\n    public void mergeKListTest() {\n        Merge_K_SortedLinkedlist mergeKSortedLinkedlist = new Merge_K_SortedLinkedlist();\n        \n        // Create linked lists\n        Node l1 = createLinkedList(new int[] {1, 4, 7});\n        Node l2 = createLinkedList(new int[] {2, 5, 8});\n        Node l3 = createLinkedList(new int[] {3, 6, 9});\n        \n        // Array of linked list heads\n        Node[] lists = new Node[] {l1, l2, l3};\n        \n        // Perform merge operation\n        Node mergedListHead = mergeKSortedLinkedlist.mergeKList(lists, lists.length);\n        \n        // Convert merged list to string and assert\n        String result = linkedListToString(mergedListHead);\n        String expected = \"1 2 3 4 5 6 7 8 9\";\n        assertEquals(expected, result);\n    }\n} "
    ]
}