{
    "project_name": "Java",
    "file_name": "Merge_K_SortedLinkedlist.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/Merge_K_SortedLinkedlist.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * This function merge K sorted LinkedList\n     *\n     * @param a array of LinkedList\n     * @param N size of array\n     * @return node\n     */",
    "source_code": "\nNode mergeKList(Node[] a, int N) {\n    // Min Heap\n    PriorityQueue<Node> min = new PriorityQueue<>(Comparator.comparingInt(x -> x.data));\n\n    // adding head of all linkedList in min heap\n    min.addAll(Arrays.asList(a).subList(0, N));\n\n    // Make new head among smallest heads in K linkedList\n    Node head = min.poll();\n    min.add(head.next);\n    Node curr = head;\n\n    // merging LinkedList\n    while (!min.isEmpty()) {\n        Node temp = min.poll();\n        curr.next = temp;\n        curr = temp;\n\n        // Add Node in min Heap only if temp.next is not null\n        if (temp.next != null) {\n            min.add(temp.next);\n        }\n    }\n\n    return head;\n}\n",
    "class_name": "Merge_K_SortedLinkedlist",
    "method_name": "mergeKList",
    "arguments": [
        "Node a",
        "int N"
    ],
    "generate_test": [
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n\n    private Merge_K_SortedLinkedlist.Node createLinkedList(int[] values) {\n        Merge_K_SortedLinkedlist.Node head = null, temp = null;\n        for (int v : values) {\n            if (temp == null) {\n                head = new Merge_K_SortedLinkedlist().new Node();\n                head.data = v;\n                temp = head;\n            } else {\n                temp.next = new Merge_K_SortedLinkedlist().new Node();\n                temp.next.data = v;\n                temp = temp.next;\n            }\n        }\n        return head;\n    }\n\n    private boolean isSorted(Merge_K_SortedLinkedlist.Node head) {\n        if (head == null) return true;\n\n        Merge_K_SortedLinkedlist.Node temp = head;\n        while (temp.next != null) {\n            if (temp.data > temp.next.data) {\n                return false;\n            }\n            temp = temp.next;\n        }\n        return true;\n    }\n\n    @Test\n    public void mergeKListTest() {\n        Merge_K_SortedLinkedlist merge_k_sortedLinkedList = new Merge_K_SortedLinkedlist();\n        \n        // Create 3 sorted linked lists\n        Merge_K_SortedLinkedlist.Node list1 = createLinkedList(new int[]{1, 4, 5});\n        Merge_K_SortedLinkedlist.Node list2 = createLinkedList(new int[]{1, 3, 4});\n        Merge_K_SortedLinkedlist.Node list3 = createLinkedList(new int[]{2, 6});\n\n        // Array of Node pointers\n        Merge_K_SortedLinkedlist.Node[] lists = new Merge_K_SortedLinkedlist.Node[]{list1, list2, list3};\n\n        // Merge k sorted linked lists\n        Merge_K_SortedLinkedlist.Node mergedList = merge_k_sortedLinkedList.mergeKList(lists, lists.length);\n\n        // Assertions\n        assertTrue(isSorted(mergedList), \"The merged list should be sorted.\");\n        assertNotNull(mergedList, \"The merged list should not be null.\");\n        \n        // Additional checks to verify the merged list content\n        int[] expectedValues = new int[]{1, 1, 2, 3, 4, 4, 5, 6};\n        int i = 0;\n        Merge_K_SortedLinkedlist.Node temp = mergedList;\n        while (temp != null) {\n            assertEquals(expectedValues[i++], temp.data, \"Values of the merged linked list are not in the expected order.\");\n            temp = temp.next;\n        }\n        \n        assertEquals(8, i, \"The merged linked list does not contain the expected number of elements.\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n\n    private Merge_K_SortedLinkedlist mergeKInstance;\n    private Merge_K_SortedLinkedlist.Node[] nodes;\n\n    @BeforeEach\n    public void setUp() {\n        mergeKInstance = new Merge_K_SortedLinkedlist();\n        // Initialize nodes here or you can do this in test case itself\n    }\n\n    private Merge_K_SortedLinkedlist.Node createLinkedList(int[] values) {\n        Merge_K_SortedLinkedlist.Node head = null;\n        Merge_K_SortedLinkedlist.Node prev = null;\n        for (int value : values) {\n            Merge_K_SortedLinkedlist.Node newNode = mergeKInstance.new Node();\n            newNode.data = value;\n            if (prev != null) {\n                prev.next = newNode;\n            } else {\n                head = newNode;\n            }\n            prev = newNode;\n        }\n        return head;\n    }\n\n    @Test\n    public void mergeKListTest() {\n        // Create 3 sorted linked lists\n        nodes = new Merge_K_SortedLinkedlist.Node[3];\n        nodes[0] = createLinkedList(new int[]{1, 4, 7});\n        nodes[1] = createLinkedList(new int[]{2, 5, 8});\n        nodes[2] = createLinkedList(new int[]{3, 6, 9});\n        \n        // Merge k sorted linked lists\n        Merge_K_SortedLinkedlist.Node mergedHead = mergeKInstance.mergeKList(nodes, nodes.length);\n\n        // Verify merged linked list is in sorted order\n        int[] expectedValues = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9};\n        for (int expectedValue : expectedValues) {\n            assertNotNull(mergedHead); // Head should not be null\n            assertEquals(expectedValue, mergedHead.data); // Verify node data\n            mergedHead = mergedHead.next;\n        }\n        assertNull(mergedHead); // After last element, next should be null\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n\n    private Merge_K_SortedLinkedlist mergeKSortedLinkedList;\n\n    @BeforeEach\n    public void setUp() {\n        mergeKSortedLinkedList = new Merge_K_SortedLinkedlist();\n    }\n\n    private Merge_K_SortedLinkedlist.Node newNode(int data) {\n        Merge_K_SortedLinkedlist.Node node = mergeKSortedLinkedList.new Node();\n        node.data = data;\n        node.next = null;\n        return node;\n    }\n\n    private boolean areListsIdentical(Merge_K_SortedLinkedlist.Node a, Merge_K_SortedLinkedlist.Node b) {\n        while (a != null && b != null) {\n            if (a.data != b.data) return false;\n            a = a.next;\n            b = b.next;\n        }\n        return (a == null && b == null);\n    }\n\n    @Test\n    public void mergeKListTest() {\n        // Setup linked lists\n        Merge_K_SortedLinkedlist.Node[] lists = new Merge_K_SortedLinkedlist.Node[3];\n\n        // List 1: 1->4->7\n        lists[0] = newNode(1);\n        lists[0].next = newNode(4);\n        lists[0].next.next = newNode(7);\n\n        // List 2: 2->5->8\n        lists[1] = newNode(2);\n        lists[1].next = newNode(5);\n        lists[1].next.next = newNode(8);\n\n        // List 3: 3->6->9\n        lists[2] = newNode(3);\n        lists[2].next = newNode(6);\n        lists[2].next.next = newNode(9);\n\n        // Expected: 1->2->3->4->5->6->7->8->9\n        Merge_K_SortedLinkedlist.Node expected = newNode(1);\n        expected.next = newNode(2);\n        expected.next.next = newNode(3);\n        expected.next.next.next = newNode(4);\n        expected.next.next.next.next = newNode(5);\n        expected.next.next.next.next.next = newNode(6);\n        expected.next.next.next.next.next.next = newNode(7);\n        expected.next.next.next.next.next.next.next = newNode(8);\n        expected.next.next.next.next.next.next.next.next = newNode(9);\n\n        // Perform the operation\n        Merge_K_SortedLinkedlist.Node result = mergeKSortedLinkedList.mergeKList(lists, lists.length);\n\n        // Check using helper function to compare linked list\n        assertTrue(areListsIdentical(expected, result));\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    \n    private Merge_K_SortedLinkedlist.Node node(int data, Merge_K_SortedLinkedlist.Node next) {\n        Merge_K_SortedLinkedlist.Node newNode = new Merge_K_SortedLinkedlist().new Node();\n        newNode.data = data;\n        newNode.next = next;\n        return newNode;\n    }\n\n    private boolean isEqual(Merge_K_SortedLinkedlist.Node n1, Merge_K_SortedLinkedlist.Node n2) {\n        while (n1 != null && n2 != null) {\n            if (n1.data != n2.data) return false;\n            n1 = n1.next;\n            n2 = n2.next;\n        }\n        return n1 == n2;\n    }\n\n    @Test\n    public void mergeKListTest() {\n        // Creating example linked lists\n        Merge_K_SortedLinkedlist mergeK_SortedLinkedlist = new Merge_K_SortedLinkedlist();\n\n        Merge_K_SortedLinkedlist.Node list1 = node(1, node(4, node(5, null)));\n        Merge_K_SortedLinkedlist.Node list2 = node(1, node(3, node(4, null)));\n        Merge_K_SortedLinkedlist.Node list3 = node(2, node(6, null));\n\n        Merge_K_SortedLinkedlist.Node[] lists = new Merge_K_SortedLinkedlist.Node[]{list1, list2, list3};\n\n        Merge_K_SortedLinkedlist.Node expected = node(1, node(1, node(2, node(3, node(4, node(4, node(5, node(6, null))))))));\n\n        // Act\n        Merge_K_SortedLinkedlist.Node result = mergeK_SortedLinkedlist.mergeKList(lists, lists.length);\n\n        // Assert\n        assertTrue(isEqual(expected, result));\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n\n    private Merge_K_SortedLinkedlist mergeKListsSolver;\n\n    @BeforeEach\n    public void setUp() {\n        mergeKListsSolver = new Merge_K_SortedLinkedlist();\n    }\n\n    private Merge_K_SortedLinkedlist.Node[] createTestLists() {\n        Merge_K_SortedLinkedlist.Node list1 = new Merge_K_SortedLinkedlist.Node();\n        list1.data = 1;\n        list1.next = new Merge_K_SortedLinkedlist.Node();\n        list1.next.data = 4;\n        list1.next.next = new Merge_K_SortedLinkedlist.Node();\n        list1.next.next.data = 5;\n\n        Merge_K_SortedLinkedlist.Node list2 = new Merge_K_SortedLinkedlist.Node();\n        list2.data = 1;\n        list2.next = new Merge_K_SortedLinkedlist.Node();\n        list2.next.data = 3;\n        list2.next.next = new Merge_K_SortedLinkedlist.Node();\n        list2.next.next.data = 4;\n\n        Merge_K_SortedLinkedlist.Node list3 = new Merge_K_SortedLinkedlist.Node();\n        list3.data = 2;\n        list3.next = new Merge_K_SortedLinkedlist.Node();\n        list3.next.data = 6;\n\n        Merge_K_SortedLinkedlist.Node[] lists = new Merge_K_SortedLinkedlist.Node[3];\n        lists[0] = list1;\n        lists[1] = list2;\n        lists[2] = list3;\n        return lists;\n    }\n\n    @Test\n    public void mergeKListTest() {\n        Merge_K_SortedLinkedlist.Node[] lists = createTestLists();\n        Merge_K_SortedLinkedlist.Node mergedHead = mergeKListsSolver.mergeKList(lists, lists.length);\n\n        int[] expectedData = new int[]{1, 1, 2, 3, 4, 4, 5, 6};\n        int index = 0;\n        while (mergedHead != null) {\n            assertEquals(expectedData[index++], mergedHead.data);\n            mergedHead = mergedHead.next;\n        }\n        assertEquals(expectedData.length, index);\n    }\n\n    // You should add other test cases to test edge cases like empty input or single-element lists\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n\n    private Merge_K_SortedLinkedlist mergeKSortedList;\n    \n    // Helper method to create a linked list from an array of values\n    private Merge_K_SortedLinkedlist.Node createLinkedList(int[] values) {\n        Merge_K_SortedLinkedlist.Node head = null;\n        Merge_K_SortedLinkedlist.Node prev = null;\n        for (int v : values){\n            Merge_K_SortedLinkedlist.Node node = mergeKSortedList.new Node();\n            node.data = v;\n            if (prev != null) {\n                prev.next = node;\n            } else {\n                head = node;\n            }\n            prev = node;\n        }\n        return head;\n    }\n\n    // Helper method to convert a linked list to a string representation for easy comparison\n    private String linkedListToString(Merge_K_SortedLinkedlist.Node head) {\n        StringBuilder sb = new StringBuilder();\n        Merge_K_SortedLinkedlist.Node current = head;\n        while (current != null) {\n            sb.append(current.data).append(\"->\");\n            current = current.next;\n        }\n        sb.append(\"null\");\n        return sb.toString();\n    }\n    \n    @BeforeEach\n    public void setUp() {\n        mergeKSortedList = new Merge_K_SortedLinkedlist();\n    }\n\n    @Test\n    public void mergeKListTest() {\n        // Creating 3 sorted linked lists\n        Merge_K_SortedLinkedlist.Node list1 = createLinkedList(new int[]{1, 4, 5});\n        Merge_K_SortedLinkedlist.Node list2 = createLinkedList(new int[]{1, 3, 4});\n        Merge_K_SortedLinkedlist.Node list3 = createLinkedList(new int[]{2, 6});\n\n        // Array of linked list heads\n        Merge_K_SortedLinkedlist.Node[] arr = new Merge_K_SortedLinkedlist.Node[] { list1, list2, list3 };\n\n        // Merging k sorted linked lists\n        Merge_K_SortedLinkedlist.Node result = mergeKSortedList.mergeKList(arr, arr.length);\n\n        // Converting result to string to verify the linked list contents\n        String resultString = linkedListToString(result);\n\n        // Expected sorted linked list\n        String expectedString = \"1->1->2->3->4->4->5->6->null\";\n\n        // Compare expected string representation with the actual result string\n        assertEquals(expectedString, resultString);\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n\n    private Merge_K_SortedLinkedlist.Node createLinkedList(int[] dataArray) {\n        Merge_K_SortedLinkedlist.Node head = null;\n        Merge_K_SortedLinkedlist.Node current = null;\n        for (int data : dataArray) {\n            Merge_K_SortedLinkedlist.Node newNode = new Merge_K_SortedLinkedlist().new Node();\n            newNode.data = data;\n            if (head == null) {\n                head = newNode;\n            } else {\n                current.next = newNode;\n            }\n            current = newNode;\n        }\n        return head;\n    }\n\n    private boolean isSorted(Merge_K_SortedLinkedlist.Node head) {\n        Merge_K_SortedLinkedlist.Node current = head;\n        while (current != null && current.next != null) {\n            if (current.data > current.next.data) {\n                return false;\n            }\n            current = current.next;\n        }\n        return true;\n    }\n\n    @Test\n    public void mergeKListTest() {\n        // Initialize Merge_K_SortedLinkedlist and Node arrays\n        Merge_K_SortedLinkedlist mergeKSortedLinkedlist = new Merge_K_SortedLinkedlist();\n        Merge_K_SortedLinkedlist.Node[] lists = new Merge_K_SortedLinkedlist.Node[3];\n        \n        // Create individual linked lists\n        lists[0] = createLinkedList(new int[]{1, 4, 7});\n        lists[1] = createLinkedList(new int[]{2, 5, 8});\n        lists[2] = createLinkedList(new int[]{3, 6, 9});\n        \n        // Merge k sorted linked lists\n        Merge_K_SortedLinkedlist.Node mergedHead = mergeKSortedLinkedlist.mergeKList(lists, lists.length);\n        \n        // Check if the merged linked list is sorted\n        assertTrue(isSorted(mergedHead), \"The merged list should be sorted\");\n        \n        // Convert merged linked list to array and verify the elements\n        int[] expectedMergedArray = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n        for (int i = 0; i < expectedMergedArray.length; i++) {\n            assertNotNull(mergedHead, \"Expected a non-null node at position \" + i);\n            assertEquals(expectedMergedArray[i], mergedHead.data, \"Expected value did not match at position \" + i);\n            mergedHead = mergedHead.next;\n        }\n        \n        // Check if the list has ended\n        assertNull(mergedHead, \"Merged list should have no more elements at the end\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n\n    private static Node createList(int[] elements) {\n        Node head = null, current = null;\n        for (int data : elements) {\n            if (head == null) {\n                head = current = new Node(data);\n            } else {\n                Node temp = new Node(data);\n                current.next = temp;\n                current = temp;\n            }\n        }\n        return head;\n    }\n\n    private static boolean isSorted(Node head) {\n        if (head == null || head.next == null) {\n            return true;\n        }\n        Node current = head;\n        while (current.next != null) {\n            if (current.data > current.next.data) {\n                return false;\n            }\n            current = current.next;\n        }\n        return true;\n    }\n\n    private static class Node {\n        private int data;\n        private Node next;\n\n        public Node(int data) {\n            this.data = data;\n        }\n    }\n\n    @Test\n    public void mergeKListTest() {\n        Merge_K_SortedLinkedlist merger = new Merge_K_SortedLinkedlist();\n\n        // Creating sample lists\n        Node list1 = createList(new int[]{1, 4, 5});\n        Node list2 = createList(new int[]{1, 3, 4});\n        Node list3 = createList(new int[]{2, 6});\n\n        // Array of lists to merge\n        Node[] arr = new Node[]{list1, list2, list3};\n\n        // Merge k lists\n        Node mergedHead = merger.mergeKList(arr, arr.length);\n        \n        // Verify if the merged list is sorted\n        boolean isMergedListSorted = isSorted(mergedHead);\n        \n        assertTrue(isMergedListSorted, \"Merged list should be sorted\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n\n    private static class Node implements Comparable<Node> {\n        public int data;\n        public Node next;\n        \n        public Node(int data) {\n            this.data = data;\n            this.next = null;\n        }\n        \n        @Override\n        public int compareTo(Node o) {\n            return this.data - o.data;\n        }\n    }\n    \n    private Merge_K_SortedLinkedlist.Node[] createTestLists() {\n        // List 1: 1 -> 4 -> 5\n        Node n1 = new Node(1);\n        Node n2 = new Node(4);\n        Node n3 = new Node(5);\n        n1.next = n2;\n        n2.next = n3;\n        \n        // List 2: 1 -> 3 -> 4\n        Node m1 = new Node(1);\n        Node m2 = new Node(3);\n        Node m3 = new Node(4);\n        m1.next = m2;\n        m2.next = m3;\n        \n        // List 3: 2 -> 6\n        Node l1 = new Node(2);\n        Node l2 = new Node(6);\n        l1.next = l2;\n\n        return new Merge_K_SortedLinkedlist.Node[]{n1, m1, l1};\n    }\n    \n    private Merge_K_SortedLinkedlist mergeKSortedList = new Merge_K_SortedLinkedlist();\n    \n    @Test\n    public void mergeKListTest() {\n        Merge_K_SortedLinkedlist.Node[] testLists = createTestLists();\n        Merge_K_SortedLinkedlist.Node mergedList = mergeKSortedList.mergeKList(testLists, 3);\n        \n        int[] expectedData = {1, 1, 2, 3, 4, 4, 5, 6};\n        for (int data : expectedData) {\n            assertNotNull(mergedList);\n            assertEquals(data, mergedList.data);\n            mergedList = mergedList.next;\n        }\n        assertNull(mergedList, \"The merged list should end with null\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n\n    private Merge_K_SortedLinkedlist.Node createNode(int data) {\n        Merge_K_SortedLinkedlist.Node node = new Merge_K_SortedLinkedlist().new Node();\n        node.data = data;\n        node.next = null;\n        return node;\n    }\n\n    private Merge_K_SortedLinkedlist.Node createLinkedList(int... values) {\n        if (values.length == 0) return null;\n        Merge_K_SortedLinkedlist.Node head = createNode(values[0]);\n        Merge_K_SortedLinkedlist.Node current = head;\n\n        for (int i = 1; i < values.length; i++) {\n            current.next = createNode(values[i]);\n            current = current.next;\n        }\n\n        return head;\n    }\n\n    private boolean compareLinkedLists(Merge_K_SortedLinkedlist.Node head1, Merge_K_SortedLinkedlist.Node head2) {\n        while (head1 != null && head2 != null) {\n            if (head1.data != head2.data) return false;\n            head1 = head1.next;\n            head2 = head2.next;\n        }\n        return head1 == head2; // both should be null for the lists to be identical\n    }\n\n    @Test\n    public void mergeKListTest() {\n        Merge_K_SortedLinkedlist mergeKSortedLinkedlist = new Merge_K_SortedLinkedlist();\n\n        Merge_K_SortedLinkedlist.Node list1 = createLinkedList(1, 4, 5);\n        Merge_K_SortedLinkedlist.Node list2 = createLinkedList(1, 3, 4);\n        Merge_K_SortedLinkedlist.Node list3 = createLinkedList(2, 6);\n\n        Merge_K_SortedLinkedlist.Node[] lists = new Merge_K_SortedLinkedlist.Node[]{list1, list2, list3};\n\n        Merge_K_SortedLinkedlist.Node expected = createLinkedList(1, 1, 2, 3, 4, 4, 5, 6);\n        Merge_K_SortedLinkedlist.Node actual = mergeKSortedLinkedlist.mergeKList(lists, lists.length);\n\n        assertTrue(compareLinkedLists(expected, actual));\n    }\n}"
    ]
}