{
    "project_name": "Java",
    "file_name": "NodeStack.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/stacks/NodeStack.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.stacks",
    "docstring": "/**\n     * Put a value onto the stack.\n     *\n     * @param item : value to be put on the stack.\n     */",
    "source_code": "\npublic void push(Item item) {\n    NodeStack<Item> newNs = new NodeStack<Item>(item);\n\n    if (this.isEmpty()) {\n        NodeStack.setHead(new NodeStack<>(item));\n        newNs.setNext(null);\n        newNs.setPrevious(null);\n    } else {\n        newNs.setPrevious(NodeStack.head);\n        NodeStack.head.setNext(newNs);\n        NodeStack.setHead(newNs);\n    }\n\n    NodeStack.setSize(NodeStack.getSize() + 1);\n}\n",
    "class_name": "NodeStack",
    "method_name": "push",
    "arguments": [
        "Item item"
    ],
    "generate_test": [
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        \n        assertTrue(stack.isEmpty(), \"Stack should be empty initially\");\n        \n        stack.push(1);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push operation\");\n        \n        assertEquals(1, stack.size(), \"Stack size should be 1 after the first push operation\");\n        assertEquals(1, stack.peek().intValue(), \"Top element should be 1 after the first push\");\n        \n        stack.push(2);\n        assertEquals(2, stack.size(), \"Stack size should be 2 after the second push operation\");\n        assertEquals(2, stack.peek().intValue(), \"Top element should be 2 after the second push\");\n        \n        stack.push(3);\n        assertEquals(3, stack.size(), \"Stack size should be 3 after the third push operation\");\n        assertEquals(3, stack.peek().intValue(), \"Top element should be 3 after the third push\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n\n        // Test stack should be initially empty\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially\");\n\n        // Test pushing single item\n        stack.push(1);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push\");\n        assertEquals(1, stack.size(), \"Stack size should be 1 after one push\");\n        assertEquals(1, stack.peek(), \"Peek should return the last pushed item (1)\");\n\n        // Test pushing additional items\n        stack.push(2);\n        assertEquals(2, stack.size(), \"Stack size should be 2 after two pushes\");\n        assertEquals(2, stack.peek(), \"Peek should return the last pushed item (2)\");\n\n        stack.push(3);\n        assertEquals(3, stack.size(), \"Stack size should be 3 after three pushes\");\n        assertEquals(3, stack.peek(), \"Peek should return the last pushed item (3)\");\n\n        // Test item order after multiple pushes\n        assertEquals(3, stack.pop(), \"Pop should return the last pushed item (3)\");\n        assertEquals(2, stack.pop(), \"Pop should return the second pushed item (2)\");\n        assertEquals(1, stack.pop(), \"Pop should return the first pushed item (1)\");\n        assertTrue(stack.isEmpty(), \"Stack should be empty after popping all items\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    private NodeStack<Integer> stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new NodeStack<>();\n    }\n\n    @Test\n    public void pushTest() {\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially\");\n        stack.push(1);\n        assertEquals(1, stack.size(), \"Stack should contain one item after push\");\n        assertEquals(1, stack.peek(), \"The top item should be 1\");\n        \n        stack.push(2);\n        assertEquals(2, stack.size(), \"Stack should contain two items after second push\");\n        assertEquals(2, stack.peek(), \"The top item should now be 2\");\n        \n        stack.push(3);\n        assertEquals(3, stack.size(), \"Stack should contain three items after third push\");\n        assertEquals(3, stack.peek(), \"The top item should now be 3\");\n        \n        // Ensure the stack contains the items in the correct order\n        assertEquals(3, stack.pop(), \"Popping should return the last item pushed: 3\");\n        assertEquals(2, stack.pop(), \"Popping should return the second item: 2\");\n        assertEquals(1, stack.pop(), \"Popping should return the first item: 1\");\n\n        assertTrue(stack.isEmpty(), \"Stack should be empty after popping all items\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    private NodeStack<Integer> stack;\n\n    // Set up the NodeStack object before each test\n    @BeforeEach\n    public void setUp() {\n        stack = new NodeStack<>();\n    }\n\n    @Test\n    public void pushTest() {\n        // Verify stack is initially empty\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially\");\n\n        // Push an item to the stack and verify changes\n        stack.push(1);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push\");\n        assertEquals(1, stack.size(), \"Stack size should be 1 after one push\");\n        assertEquals(1, stack.peek(), \"Peek should return the pushed item\");\n\n        // Push another item and verify the stack's state\n        stack.push(2);\n        assertEquals(2, stack.size(), \"Stack size should be 2 after second push\");\n        assertEquals(2, stack.peek(), \"Peek should return the new pushed item\");\n\n        // Push yet another item to confirm stack is maintaining order\n        stack.push(3);\n        assertEquals(3, stack.size(), \"Stack size should be 3 after third push\");\n        assertEquals(3, stack.peek(), \"Peek should return the latest pushed item\");\n\n        // Test that the stack is correctly reflecting the elements (LIFO)\n        assertEquals(3, stack.pop(), \"Pop should return the last pushed item 3\");\n        assertEquals(2, stack.pop(), \"Pop should return the next last pushed item 2\");\n        assertEquals(1, stack.pop(), \"Pop should return the last item 1 in the stack\");\n        assertTrue(stack.isEmpty(), \"Stack should be empty after popping all elements\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<Integer>();\n\n        // Assert that the stack is initially empty\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially.\");\n\n        // Push elements into the stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n\n        // Assert that the stack size increments accordingly\n        assertEquals(3, stack.size(), \"Stack size should be 3 after pushing 3 elements.\");\n\n        // Confirm the stack top using peek\n        assertEquals(3, (int) stack.peek(), \"Top of the stack should be the last element pushed which is 3.\");\n\n        // Push another element\n        stack.push(4);\n\n        // Assert the new size and new top of the stack\n        assertEquals(4, stack.size(), \"Stack size should be 4 after pushing another element.\");\n        assertEquals(4, (int) stack.peek(), \"Top of the stack should be the new element pushed which is 4.\");\n\n        // Check that stack is not empty now\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after pushing elements.\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    private NodeStack<Integer> stack;\n\n    @BeforeEach\n    public void init() {\n        stack = new NodeStack<Integer>();\n    }\n    \n    @Test\n    public void pushTest() {\n        // Check if the stack is initially empty\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially\");\n\n        // Push an element and check if stack is not empty and size is 1\n        stack.push(1);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push\");\n        assertEquals(1, stack.size(), \"Stack size should be 1 after first push\");\n\n        // Push another element and check if the size increases\n        stack.push(2);\n        assertEquals(2, stack.size(), \"Stack size should be 2 after second push\");\n\n        // Push third element to see if it becomes the head\n        stack.push(3);\n        assertEquals(3, stack.size(), \"Stack size should be 3 after third push\");\n        assertEquals(3, stack.peek(), \"Top element should be equal to last element pushed\");\n\n        // Cleanup after test\n        stack = null;\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        \n        assertTrue(stack.isEmpty(), \"Stack should be empty initially.\");\n        \n        stack.push(1);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push.\");\n        assertEquals(1, (int) stack.peek(), \"Top element should be 1 after push.\");\n        assertEquals(1, stack.size(), \"Stack size should be 1 after one push.\");\n        \n        stack.push(2);\n        assertEquals(2, (int) stack.peek(), \"Top element should be 2 after second push.\");\n        assertEquals(2, stack.size(), \"Stack size should be 2 after two pushes.\");\n        \n        stack.push(3);\n        assertEquals(3, (int) stack.peek(), \"Top element should be 3 after third push.\");\n        assertEquals(3, stack.size(), \"Stack size should be 3 after three pushes.\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    \n    // This is the missing test method for the push method of the NodeStack class.\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n\n        // Verify stack is empty at the start\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially.\");\n        \n        // Push elements onto the stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n\n        // Verify the stack size is correct\n        assertEquals(3, stack.size(), \"Stack size should be 3 after three pushes.\");\n\n        // Verify the correct element is at the head of the stack (LIFO structure)\n        assertEquals(Integer.valueOf(3), stack.peek(), \"Top element should be 3.\");\n\n        // Verify the stack is not empty\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after elements are pushed.\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    \n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<Integer>();\n\n        // The stack should initially be empty.\n        assertTrue(stack.isEmpty(), \"Stack should be empty before pushing any items.\");\n\n        // Pushing an item to the stack should increase its size by 1.\n        stack.push(1);\n        assertEquals(1, stack.size(), \"Stack size should be 1 after pushing one item.\");\n\n        // Push another item and verify the size and the head element.\n        stack.push(2);\n        assertEquals(2, stack.size(), \"Stack size should be 2 after pushing another item.\");\n        assertEquals(2, stack.peek(), \"Top of the stack should be the latest item pushed.\");\n\n        // Push a third element and verify the stack size again.\n        stack.push(3);\n        assertEquals(3, stack.size(), \"Stack size should be 3 after pushing three items.\");\n        assertEquals(3, stack.peek(), \"Top of the stack should be the latest item pushed.\");\n        \n        // The stack contents should be 3 (head) - 2 - 1 (tail), if printed.\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially\");\n        \n        stack.push(1);\n        assertEquals(1, stack.size(), \"Stack size should be 1 after pushing 1 element\");\n        assertEquals(Integer.valueOf(1), stack.peek(), \"Top of the stack should be the last pushed element (1)\");\n\n        stack.push(2);\n        assertEquals(2, stack.size(), \"Stack size should be 2 after pushing another element\");\n        assertEquals(Integer.valueOf(2), stack.peek(), \"Top of the stack should be the last pushed element (2)\");\n\n        stack.push(3);\n        assertEquals(3, stack.size(), \"Stack size should be 3 after pushing another element\");\n        assertEquals(Integer.valueOf(3), stack.peek(), \"Top of the stack should be the last pushed element (3)\");\n\n        // Testing internal stack structure\n        NodeStack<Integer> current = (NodeStack<Integer>) NodeStack.getHead();\n        assertNotNull(current, \"Head of the stack should not be null after pushes\");\n        assertEquals(Integer.valueOf(3), current.getData(), \"Head should have data = 3\");\n        assertNotNull(current.getPrevious(), \"Head should have a previous node\");\n        assertEquals(Integer.valueOf(2), current.getPrevious().getData(), \"The previous node should have data = 2\");\n        assertNotNull(current.getPrevious().getPrevious(), \"The previous node should also have a previous node\");\n        assertEquals(Integer.valueOf(1), current.getPrevious().getPrevious().getData(), \"The previous->previous node should have data = 1\");\n    }\n    \n    // Helper method to access the head for verification purposes\n    public static NodeStack<?> getHead() {\n        return NodeStack.head;\n    }\n}"
    ]
}