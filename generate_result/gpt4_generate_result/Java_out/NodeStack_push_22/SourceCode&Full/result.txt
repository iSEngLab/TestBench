Source code: 


public void push(Item item) {
    NodeStack<Item> newNs = new NodeStack<Item>(item);

    if (this.isEmpty()) {
        NodeStack.setHead(new NodeStack<>(item));
        newNs.setNext(null);
        newNs.setPrevious(null);
    } else {
        newNs.setPrevious(NodeStack.head);
        NodeStack.head.setNext(newNs);
        NodeStack.setHead(newNs);
    }

    NodeStack.setSize(NodeStack.getSize() + 1);
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {

    @Test
    public void pushTest() {
        NodeStack<Integer> stack = new NodeStack<>();
        
        assertTrue(stack.isEmpty(), "Stack should be empty initially");
        
        stack.push(1);
        assertFalse(stack.isEmpty(), "Stack should not be empty after push operation");
        
        assertEquals(1, stack.size(), "Stack size should be 1 after the first push operation");
        assertEquals(1, stack.peek().intValue(), "Top element should be 1 after the first push");
        
        stack.push(2);
        assertEquals(2, stack.size(), "Stack size should be 2 after the second push operation");
        assertEquals(2, stack.peek().intValue(), "Top element should be 2 after the second push");
        
        stack.push(3);
        assertEquals(3, stack.size(), "Stack size should be 3 after the third push operation");
        assertEquals(3, stack.peek().intValue(), "Top element should be 3 after the third push");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {

    @Test
    public void pushTest() {
        NodeStack<Integer> stack = new NodeStack<>();

        // Test stack should be initially empty
        assertTrue(stack.isEmpty(), "Stack should be empty initially");

        // Test pushing single item
        stack.push(1);
        assertFalse(stack.isEmpty(), "Stack should not be empty after push");
        assertEquals(1, stack.size(), "Stack size should be 1 after one push");
        assertEquals(1, stack.peek(), "Peek should return the last pushed item (1)");

        // Test pushing additional items
        stack.push(2);
        assertEquals(2, stack.size(), "Stack size should be 2 after two pushes");
        assertEquals(2, stack.peek(), "Peek should return the last pushed item (2)");

        stack.push(3);
        assertEquals(3, stack.size(), "Stack size should be 3 after three pushes");
        assertEquals(3, stack.peek(), "Peek should return the last pushed item (3)");

        // Test item order after multiple pushes
        assertEquals(3, stack.pop(), "Pop should return the last pushed item (3)");
        assertEquals(2, stack.pop(), "Pop should return the second pushed item (2)");
        assertEquals(1, stack.pop(), "Pop should return the first pushed item (1)");
        assertTrue(stack.isEmpty(), "Stack should be empty after popping all items");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    private NodeStack<Integer> stack;

    @BeforeEach
    public void setUp() {
        stack = new NodeStack<>();
    }

    @Test
    public void pushTest() {
        assertTrue(stack.isEmpty(), "Stack should be empty initially");
        stack.push(1);
        assertEquals(1, stack.size(), "Stack should contain one item after push");
        assertEquals(1, stack.peek(), "The top item should be 1");
        
        stack.push(2);
        assertEquals(2, stack.size(), "Stack should contain two items after second push");
        assertEquals(2, stack.peek(), "The top item should now be 2");
        
        stack.push(3);
        assertEquals(3, stack.size(), "Stack should contain three items after third push");
        assertEquals(3, stack.peek(), "The top item should now be 3");
        
        // Ensure the stack contains the items in the correct order
        assertEquals(3, stack.pop(), "Popping should return the last item pushed: 3");
        assertEquals(2, stack.pop(), "Popping should return the second item: 2");
        assertEquals(1, stack.pop(), "Popping should return the first item: 1");

        assertTrue(stack.isEmpty(), "Stack should be empty after popping all items");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    private NodeStack<Integer> stack;

    // Set up the NodeStack object before each test
    @BeforeEach
    public void setUp() {
        stack = new NodeStack<>();
    }

    @Test
    public void pushTest() {
        // Verify stack is initially empty
        assertTrue(stack.isEmpty(), "Stack should be empty initially");

        // Push an item to the stack and verify changes
        stack.push(1);
        assertFalse(stack.isEmpty(), "Stack should not be empty after push");
        assertEquals(1, stack.size(), "Stack size should be 1 after one push");
        assertEquals(1, stack.peek(), "Peek should return the pushed item");

        // Push another item and verify the stack's state
        stack.push(2);
        assertEquals(2, stack.size(), "Stack size should be 2 after second push");
        assertEquals(2, stack.peek(), "Peek should return the new pushed item");

        // Push yet another item to confirm stack is maintaining order
        stack.push(3);
        assertEquals(3, stack.size(), "Stack size should be 3 after third push");
        assertEquals(3, stack.peek(), "Peek should return the latest pushed item");

        // Test that the stack is correctly reflecting the elements (LIFO)
        assertEquals(3, stack.pop(), "Pop should return the last pushed item 3");
        assertEquals(2, stack.pop(), "Pop should return the next last pushed item 2");
        assertEquals(1, stack.pop(), "Pop should return the last item 1 in the stack");
        assertTrue(stack.isEmpty(), "Stack should be empty after popping all elements");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    @Test
    public void pushTest() {
        NodeStack<Integer> stack = new NodeStack<Integer>();

        // Assert that the stack is initially empty
        assertTrue(stack.isEmpty(), "Stack should be empty initially.");

        // Push elements into the stack
        stack.push(1);
        stack.push(2);
        stack.push(3);

        // Assert that the stack size increments accordingly
        assertEquals(3, stack.size(), "Stack size should be 3 after pushing 3 elements.");

        // Confirm the stack top using peek
        assertEquals(3, (int) stack.peek(), "Top of the stack should be the last element pushed which is 3.");

        // Push another element
        stack.push(4);

        // Assert the new size and new top of the stack
        assertEquals(4, stack.size(), "Stack size should be 4 after pushing another element.");
        assertEquals(4, (int) stack.peek(), "Top of the stack should be the new element pushed which is 4.");

        // Check that stack is not empty now
        assertFalse(stack.isEmpty(), "Stack should not be empty after pushing elements.");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {

    private NodeStack<Integer> stack;

    @BeforeEach
    public void init() {
        stack = new NodeStack<Integer>();
    }
    
    @Test
    public void pushTest() {
        // Check if the stack is initially empty
        assertTrue(stack.isEmpty(), "Stack should be empty initially");

        // Push an element and check if stack is not empty and size is 1
        stack.push(1);
        assertFalse(stack.isEmpty(), "Stack should not be empty after push");
        assertEquals(1, stack.size(), "Stack size should be 1 after first push");

        // Push another element and check if the size increases
        stack.push(2);
        assertEquals(2, stack.size(), "Stack size should be 2 after second push");

        // Push third element to see if it becomes the head
        stack.push(3);
        assertEquals(3, stack.size(), "Stack size should be 3 after third push");
        assertEquals(3, stack.peek(), "Top element should be equal to last element pushed");

        // Cleanup after test
        stack = null;
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    @Test
    public void pushTest() {
        NodeStack<Integer> stack = new NodeStack<>();
        
        assertTrue(stack.isEmpty(), "Stack should be empty initially.");
        
        stack.push(1);
        assertFalse(stack.isEmpty(), "Stack should not be empty after push.");
        assertEquals(1, (int) stack.peek(), "Top element should be 1 after push.");
        assertEquals(1, stack.size(), "Stack size should be 1 after one push.");
        
        stack.push(2);
        assertEquals(2, (int) stack.peek(), "Top element should be 2 after second push.");
        assertEquals(2, stack.size(), "Stack size should be 2 after two pushes.");
        
        stack.push(3);
        assertEquals(3, (int) stack.peek(), "Top element should be 3 after third push.");
        assertEquals(3, stack.size(), "Stack size should be 3 after three pushes.");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    
    // This is the missing test method for the push method of the NodeStack class.
    @Test
    public void pushTest() {
        NodeStack<Integer> stack = new NodeStack<>();

        // Verify stack is empty at the start
        assertTrue(stack.isEmpty(), "Stack should be empty initially.");
        
        // Push elements onto the stack
        stack.push(1);
        stack.push(2);
        stack.push(3);

        // Verify the stack size is correct
        assertEquals(3, stack.size(), "Stack size should be 3 after three pushes.");

        // Verify the correct element is at the head of the stack (LIFO structure)
        assertEquals(Integer.valueOf(3), stack.peek(), "Top element should be 3.");

        // Verify the stack is not empty
        assertFalse(stack.isEmpty(), "Stack should not be empty after elements are pushed.");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    
    @Test
    public void pushTest() {
        NodeStack<Integer> stack = new NodeStack<Integer>();

        // The stack should initially be empty.
        assertTrue(stack.isEmpty(), "Stack should be empty before pushing any items.");

        // Pushing an item to the stack should increase its size by 1.
        stack.push(1);
        assertEquals(1, stack.size(), "Stack size should be 1 after pushing one item.");

        // Push another item and verify the size and the head element.
        stack.push(2);
        assertEquals(2, stack.size(), "Stack size should be 2 after pushing another item.");
        assertEquals(2, stack.peek(), "Top of the stack should be the latest item pushed.");

        // Push a third element and verify the stack size again.
        stack.push(3);
        assertEquals(3, stack.size(), "Stack size should be 3 after pushing three items.");
        assertEquals(3, stack.peek(), "Top of the stack should be the latest item pushed.");
        
        // The stack contents should be 3 (head) - 2 - 1 (tail), if printed.
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    @Test
    public void pushTest() {
        NodeStack<Integer> stack = new NodeStack<>();

        assertTrue(stack.isEmpty(), "Stack should be empty initially");
        
        stack.push(1);
        assertEquals(1, stack.size(), "Stack size should be 1 after pushing 1 element");
        assertEquals(Integer.valueOf(1), stack.peek(), "Top of the stack should be the last pushed element (1)");

        stack.push(2);
        assertEquals(2, stack.size(), "Stack size should be 2 after pushing another element");
        assertEquals(Integer.valueOf(2), stack.peek(), "Top of the stack should be the last pushed element (2)");

        stack.push(3);
        assertEquals(3, stack.size(), "Stack size should be 3 after pushing another element");
        assertEquals(Integer.valueOf(3), stack.peek(), "Top of the stack should be the last pushed element (3)");

        // Testing internal stack structure
        NodeStack<Integer> current = (NodeStack<Integer>) NodeStack.getHead();
        assertNotNull(current, "Head of the stack should not be null after pushes");
        assertEquals(Integer.valueOf(3), current.getData(), "Head should have data = 3");
        assertNotNull(current.getPrevious(), "Head should have a previous node");
        assertEquals(Integer.valueOf(2), current.getPrevious().getData(), "The previous node should have data = 2");
        assertNotNull(current.getPrevious().getPrevious(), "The previous node should also have a previous node");
        assertEquals(Integer.valueOf(1), current.getPrevious().getPrevious().getData(), "The previous->previous node should have data = 1");
    }
    
    // Helper method to access the head for verification purposes
    public static NodeStack<?> getHead() {
        return NodeStack.head;
    }
}


