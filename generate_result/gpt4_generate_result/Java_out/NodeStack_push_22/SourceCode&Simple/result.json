{
    "project_name": "Java",
    "file_name": "NodeStack.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/stacks/NodeStack.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.stacks",
    "docstring": "/**\n     * Put a value onto the stack.\n     *\n     * @param item : value to be put on the stack.\n     */",
    "source_code": "\npublic void push(Item item) {\n    NodeStack<Item> newNs = new NodeStack<Item>(item);\n\n    if (this.isEmpty()) {\n        NodeStack.setHead(new NodeStack<>(item));\n        newNs.setNext(null);\n        newNs.setPrevious(null);\n    } else {\n        newNs.setPrevious(NodeStack.head);\n        NodeStack.head.setNext(newNs);\n        NodeStack.setHead(newNs);\n    }\n\n    NodeStack.setSize(NodeStack.getSize() + 1);\n}\n",
    "class_name": "NodeStack",
    "method_name": "push",
    "arguments": [
        "Item item"
    ],
    "generate_test": [
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially\");\n\n        stack.push(1);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after pushing an element\");\n        assertEquals(1, stack.size(), \"Stack size should be 1 after pushing one element\");\n        assertEquals(new Integer(1), stack.peek(), \"Peek should return the last pushed element\");\n\n        stack.push(2);\n        assertEquals(2, stack.size(), \"Stack size should be 2 after pushing another element\");\n        assertEquals(new Integer(2), stack.peek(), \"Peek should return the new element which is at the top\");\n\n        stack.push(3);\n        assertEquals(3, stack.size(), \"Stack size should be 3 after pushing another element\");\n        assertEquals(new Integer(3), stack.peek(), \"Peek should return the new element which is at the top\");\n\n        // Check the internal stack consistency\n        NodeStack<Integer> current = NodeStack.getHead();\n        assertNotNull(current, \"Head should not be null after pushes\");\n        assertEquals(new Integer(3), current.getData(), \"Head data should be the last pushed element\");\n        assertEquals(new Integer(2), current.getPrevious().getData(), \"Previous element should be the second pushed element\");\n        assertNull(current.getPrevious().getPrevious().getPrevious(), \"The stack should have only three elements\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    @Test\n    public void pushTest() {\n        NodeStack<String> stack = new NodeStack<>();\n\n        // Initial state should be empty\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially\");\n        assertEquals(0, stack.size(), \"Initial stack size should be 0\");\n\n        // Push first item\n        stack.push(\"First\");\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push\");\n        assertEquals(1, stack.size(), \"Stack size should be 1 after first push\");\n        assertEquals(\"First\", stack.peek(), \"Top of stack should be 'First' after first push\");\n\n        // Push a second item\n        stack.push(\"Second\");\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after second push\");\n        assertEquals(2, stack.size(), \"Stack size should be 2 after second push\");\n        assertEquals(\"Second\", stack.peek(), \"Top of stack should be 'Second' after second push\");\n\n        // Push a third item\n        stack.push(\"Third\");\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after third push\");\n        assertEquals(3, stack.size(), \"Stack size should be 3 after third push\");\n        assertEquals(\"Third\", stack.peek(), \"Top of stack should be 'Third' after third push\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    private NodeStack<String> stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new NodeStack<String>();\n    }\n\n    @Test\n    public void pushTest() {\n        assertTrue(stack.isEmpty(), \"Stack should be initially empty\");\n\n        String itemOne = \"Item 1\";\n        stack.push(itemOne);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push\");\n        assertEquals(1, stack.size(), \"Stack size should be 1 after one push\");\n        assertEquals(itemOne, stack.peek(), \"The top of the stack should be the first item pushed\");\n\n        String itemTwo = \"Item 2\";\n        stack.push(itemTwo);\n        assertEquals(2, stack.size(), \"Stack size should be 2 after two pushes\");\n        assertEquals(itemTwo, stack.peek(), \"The top of the stack should be the second item pushed\");\n\n        String itemThree = \"Item 3\";\n        stack.push(itemThree);\n        assertEquals(3, stack.size(), \"Stack size should be 3 after three pushes\");\n        assertEquals(itemThree, stack.peek(), \"The top of the stack should be the third item pushed\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    \n    private NodeStack<Integer> nodeStack;\n\n    @BeforeEach\n    public void setUp() {\n        nodeStack = new NodeStack<>();\n    }\n\n    @Test\n    public void pushTest() {\n        assertTrue(nodeStack.isEmpty(), \"Stack should be empty initially.\");\n        assertEquals(0, nodeStack.size(), \"Stack size should be 0 initially.\");\n\n        Integer firstElement = 1;\n        nodeStack.push(firstElement);\n        assertFalse(nodeStack.isEmpty(), \"Stack should not be empty after push.\");\n        assertEquals(1, nodeStack.size(), \"Stack size should be 1 after one push.\");\n        assertEquals(firstElement, nodeStack.peek(), \"Top element should be the same as pushed element.\");\n\n        Integer secondElement = 2;\n        nodeStack.push(secondElement);\n        assertFalse(nodeStack.isEmpty(), \"Stack should not be empty after second push.\");\n        assertEquals(2, nodeStack.size(), \"Stack size should be 2 after two pushes.\");\n        assertEquals(secondElement, nodeStack.peek(), \"Top element should be the same as last pushed element.\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    \n    private NodeStack<Item> stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new NodeStack<>();\n    }\n\n    @Test\n    public void pushTest() {\n        // Scenario 1: Stack is initially empty\n        assertTrue(stack.isEmpty(), \"Stack should be empty before any items are pushed.\");\n\n        // Create an item to push on the stack\n        Item firstItem = new Item(); // Assuming that this is a valid constructor for Item\n        stack.push(firstItem);\n\n        // Check if the stack is no longer empty\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after pushing an item.\");\n\n        // Check if the pushed item is at the head of the stack\n        assertEquals(firstItem, stack.peek(), \"The item pushed should be at the top of the stack.\");\n\n        // Check the size of the stack\n        assertEquals(1, stack.size(), \"Stack size should be 1 after pushing an item.\");\n\n        // Scenario 2: Stack already contains one element\n        Item secondItem = new Item();\n        stack.push(secondItem);\n\n        // Check if the newest item is at the head of the stack\n        assertEquals(secondItem, stack.peek(), \"The most recently pushed item should be at the top of the stack.\");\n\n        // Check if the stack size is incremented\n        assertEquals(2, stack.size(), \"Stack size should be 2 after pushing another item.\");\n    }\n    \n    // Additional edge cases and methods would be needed for a more comprehensive test suite, \n    // including testing pop and other behaviors.\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    // Let's assume 'Item' is a valid, pre-defined class\n    private static class Item {\n        private int value;\n        \n        public Item(int value) {\n            this.value = value;\n        }\n    }\n\n    @Test\n    public void pushTest() {\n        NodeStack<Item> stack = new NodeStack<>();\n\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially\");\n        assertEquals(0, stack.size(), \"Size of stack should be 0 initially\");\n\n        Item firstItem = new Item(1);\n        stack.push(firstItem);\n\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after pushing an item\");\n        assertEquals(1, stack.size(), \"Size of stack should be 1 after pushing one item\");\n        assertEquals(firstItem, stack.peek(), \"Peek should return the first item\");\n\n        Item secondItem = new Item(2);\n        stack.push(secondItem);\n\n        assertEquals(2, stack.size(), \"Size of stack should be 2 after pushing another item\");\n        assertEquals(secondItem, stack.peek(), \"Peek should return the second item, which is the last pushed item\");\n\n        Item thirdItem = new Item(3);\n        stack.push(thirdItem);\n        \n        assertEquals(3, stack.size(), \"Size of stack should be 3 after pushing the third item\");\n        assertEquals(thirdItem, stack.peek(), \"Peek should return the third item\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially.\");\n\n        Integer firstElement = 10;\n        stack.push(firstElement);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push.\");\n\n        assertEquals(firstElement, stack.peek(), \"Top element should be equal to the first pushed element.\");\n        assertEquals(1, stack.size(), \"Stack size should be equal to 1 after first push.\");\n\n        Integer secondElement = 20;\n        stack.push(secondElement);\n        assertEquals(secondElement, stack.peek(), \"Top element should be updated to the second pushed element.\");\n        assertEquals(2, stack.size(), \"Stack size should be equal to 2 after second push.\");\n\n        Integer thirdElement = 30;\n        stack.push(thirdElement);\n        assertEquals(thirdElement, stack.peek(), \"Top element should be updated to the third pushed element.\");\n        assertEquals(3, stack.size(), \"Stack size should be equal to 3 after third push.\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    private NodeStack<String> stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new NodeStack<>(); // Assume NodeStack<> can be instantiated\n    }\n\n    @Test\n    public void pushTest() {\n        assertTrue(stack.isEmpty(), \"Stack should initially be empty\");\n\n        // Push first item\n        stack.push(\"first\");\n        assertEquals(1, stack.size(), \"Stack size should be 1 after first push\");\n        assertEquals(\"first\", stack.peek(), \"Top of the stack should be 'first'\");\n\n        // Push second item\n        stack.push(\"second\");\n        assertEquals(2, stack.size(), \"Stack size should be 2 after second push\");\n        assertEquals(\"second\", stack.peek(), \"Top of the stack should be 'second'\");\n\n        // Push third item\n        stack.push(\"third\");\n        assertEquals(3, stack.size(), \"Stack size should be 3 after third push\");\n        assertEquals(\"third\", stack.peek(), \"Top of the stack should be 'third'\");\n\n        // Testing the order when popped\n        assertEquals(\"third\", stack.pop(), \"Popped item should be 'third'\");\n        assertEquals(\"second\", stack.pop(), \"Popped item should be 'second'\");\n        assertEquals(\"first\", stack.pop(), \"Popped item should be 'first'\");\n        assertTrue(stack.isEmpty(), \"Stack should be empty after popping all items\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    @Test\n    public void pushTest() {\n        // Given\n        NodeStack<Integer> stack = new NodeStack<>();\n        \n        // When pushing the first item\n        Item firstItem = new Item(1);\n        stack.push(firstItem);\n        \n        // Assert that the stack size is 1\n        assertEquals(1, stack.size());\n        \n        // Assert that the item is at the head\n        assertEquals(firstItem, stack.peek());\n        \n        // Assert that the stack is not empty\n        assertFalse(stack.isEmpty());\n        \n        // When pushing another item\n        Item secondItem = new Item(2);\n        stack.push(secondItem);\n        \n        // Assert that the stack size is 2\n        assertEquals(2, stack.size());\n        \n        // Assert that the new item is now at the head\n        assertEquals(secondItem, stack.peek());\n        \n        // Assert that the first item is the 'previous' of the head\n        assertEquals(firstItem, stack.peek().getPrevious().getData());\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    @Test\n    public void pushTest() {\n        // Assume Item is a proper type that can be instantiated for the purpose of this test\n        class Item {\n            int value;\n            public Item(int value) {\n                this.value = value;\n            }\n        }\n\n        NodeStack<Item> stack = new NodeStack<>();\n        Item firstItem = new Item(1);\n        \n        // Test push onto an empty stack\n        stack.push(firstItem);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push\");\n        assertEquals(1, stack.size(), \"Stack size should be 1 after first push\");\n        assertEquals(firstItem, stack.peek(), \"Top item should be the first item pushed\");\n\n        Item secondItem = new Item(2);\n        \n        // Test push onto a non-empty stack\n        stack.push(secondItem);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after second push\");\n        assertEquals(2, stack.size(), \"Stack size should be 2 after second push\");\n        assertEquals(secondItem, stack.peek(), \"Top item should be the second item pushed\");\n\n        // Check that the order of items is correct\n        Item poppedItem = stack.pop();\n        assertNotNull(poppedItem, \"Popped item should not be null\");\n        assertEquals(secondItem, poppedItem, \"Popped item should be the second item pushed\");\n        assertEquals(1, stack.size(), \"Stack size should decrease to 1 after pop\");\n        \n        // Check that the remaining item is the first one\n        poppedItem = stack.pop();\n        assertNotNull(poppedItem, \"Popped item should not be null after second pop\");\n        assertEquals(firstItem, poppedItem, \"Popped item should be the first item pushed\");\n        assertTrue(stack.isEmpty(), \"Stack should be empty after popping all items\");\n        assertEquals(0, stack.size(), \"Stack size should be 0 after popping all items\");\n    }\n}"
    ]
}