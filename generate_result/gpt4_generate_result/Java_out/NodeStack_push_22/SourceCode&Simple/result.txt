Source code: 


public void push(Item item) {
    NodeStack<Item> newNs = new NodeStack<Item>(item);

    if (this.isEmpty()) {
        NodeStack.setHead(new NodeStack<>(item));
        newNs.setNext(null);
        newNs.setPrevious(null);
    } else {
        newNs.setPrevious(NodeStack.head);
        NodeStack.head.setNext(newNs);
        NodeStack.setHead(newNs);
    }

    NodeStack.setSize(NodeStack.getSize() + 1);
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {

    @Test
    public void pushTest() {
        NodeStack<Integer> stack = new NodeStack<>();

        assertTrue(stack.isEmpty(), "Stack should be empty initially");

        stack.push(1);
        assertFalse(stack.isEmpty(), "Stack should not be empty after pushing an element");
        assertEquals(1, stack.size(), "Stack size should be 1 after pushing one element");
        assertEquals(new Integer(1), stack.peek(), "Peek should return the last pushed element");

        stack.push(2);
        assertEquals(2, stack.size(), "Stack size should be 2 after pushing another element");
        assertEquals(new Integer(2), stack.peek(), "Peek should return the new element which is at the top");

        stack.push(3);
        assertEquals(3, stack.size(), "Stack size should be 3 after pushing another element");
        assertEquals(new Integer(3), stack.peek(), "Peek should return the new element which is at the top");

        // Check the internal stack consistency
        NodeStack<Integer> current = NodeStack.getHead();
        assertNotNull(current, "Head should not be null after pushes");
        assertEquals(new Integer(3), current.getData(), "Head data should be the last pushed element");
        assertEquals(new Integer(2), current.getPrevious().getData(), "Previous element should be the second pushed element");
        assertNull(current.getPrevious().getPrevious().getPrevious(), "The stack should have only three elements");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {

    @Test
    public void pushTest() {
        NodeStack<String> stack = new NodeStack<>();

        // Initial state should be empty
        assertTrue(stack.isEmpty(), "Stack should be empty initially");
        assertEquals(0, stack.size(), "Initial stack size should be 0");

        // Push first item
        stack.push("First");
        assertFalse(stack.isEmpty(), "Stack should not be empty after push");
        assertEquals(1, stack.size(), "Stack size should be 1 after first push");
        assertEquals("First", stack.peek(), "Top of stack should be 'First' after first push");

        // Push a second item
        stack.push("Second");
        assertFalse(stack.isEmpty(), "Stack should not be empty after second push");
        assertEquals(2, stack.size(), "Stack size should be 2 after second push");
        assertEquals("Second", stack.peek(), "Top of stack should be 'Second' after second push");

        // Push a third item
        stack.push("Third");
        assertFalse(stack.isEmpty(), "Stack should not be empty after third push");
        assertEquals(3, stack.size(), "Stack size should be 3 after third push");
        assertEquals("Third", stack.peek(), "Top of stack should be 'Third' after third push");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {

    private NodeStack<String> stack;

    @BeforeEach
    public void setUp() {
        stack = new NodeStack<String>();
    }

    @Test
    public void pushTest() {
        assertTrue(stack.isEmpty(), "Stack should be initially empty");

        String itemOne = "Item 1";
        stack.push(itemOne);
        assertFalse(stack.isEmpty(), "Stack should not be empty after push");
        assertEquals(1, stack.size(), "Stack size should be 1 after one push");
        assertEquals(itemOne, stack.peek(), "The top of the stack should be the first item pushed");

        String itemTwo = "Item 2";
        stack.push(itemTwo);
        assertEquals(2, stack.size(), "Stack size should be 2 after two pushes");
        assertEquals(itemTwo, stack.peek(), "The top of the stack should be the second item pushed");

        String itemThree = "Item 3";
        stack.push(itemThree);
        assertEquals(3, stack.size(), "Stack size should be 3 after three pushes");
        assertEquals(itemThree, stack.peek(), "The top of the stack should be the third item pushed");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    
    private NodeStack<Integer> nodeStack;

    @BeforeEach
    public void setUp() {
        nodeStack = new NodeStack<>();
    }

    @Test
    public void pushTest() {
        assertTrue(nodeStack.isEmpty(), "Stack should be empty initially.");
        assertEquals(0, nodeStack.size(), "Stack size should be 0 initially.");

        Integer firstElement = 1;
        nodeStack.push(firstElement);
        assertFalse(nodeStack.isEmpty(), "Stack should not be empty after push.");
        assertEquals(1, nodeStack.size(), "Stack size should be 1 after one push.");
        assertEquals(firstElement, nodeStack.peek(), "Top element should be the same as pushed element.");

        Integer secondElement = 2;
        nodeStack.push(secondElement);
        assertFalse(nodeStack.isEmpty(), "Stack should not be empty after second push.");
        assertEquals(2, nodeStack.size(), "Stack size should be 2 after two pushes.");
        assertEquals(secondElement, nodeStack.peek(), "Top element should be the same as last pushed element.");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    
    private NodeStack<Item> stack;

    @BeforeEach
    public void setUp() {
        stack = new NodeStack<>();
    }

    @Test
    public void pushTest() {
        // Scenario 1: Stack is initially empty
        assertTrue(stack.isEmpty(), "Stack should be empty before any items are pushed.");

        // Create an item to push on the stack
        Item firstItem = new Item(); // Assuming that this is a valid constructor for Item
        stack.push(firstItem);

        // Check if the stack is no longer empty
        assertFalse(stack.isEmpty(), "Stack should not be empty after pushing an item.");

        // Check if the pushed item is at the head of the stack
        assertEquals(firstItem, stack.peek(), "The item pushed should be at the top of the stack.");

        // Check the size of the stack
        assertEquals(1, stack.size(), "Stack size should be 1 after pushing an item.");

        // Scenario 2: Stack already contains one element
        Item secondItem = new Item();
        stack.push(secondItem);

        // Check if the newest item is at the head of the stack
        assertEquals(secondItem, stack.peek(), "The most recently pushed item should be at the top of the stack.");

        // Check if the stack size is incremented
        assertEquals(2, stack.size(), "Stack size should be 2 after pushing another item.");
    }
    
    // Additional edge cases and methods would be needed for a more comprehensive test suite, 
    // including testing pop and other behaviors.
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {

    // Let's assume 'Item' is a valid, pre-defined class
    private static class Item {
        private int value;
        
        public Item(int value) {
            this.value = value;
        }
    }

    @Test
    public void pushTest() {
        NodeStack<Item> stack = new NodeStack<>();

        assertTrue(stack.isEmpty(), "Stack should be empty initially");
        assertEquals(0, stack.size(), "Size of stack should be 0 initially");

        Item firstItem = new Item(1);
        stack.push(firstItem);

        assertFalse(stack.isEmpty(), "Stack should not be empty after pushing an item");
        assertEquals(1, stack.size(), "Size of stack should be 1 after pushing one item");
        assertEquals(firstItem, stack.peek(), "Peek should return the first item");

        Item secondItem = new Item(2);
        stack.push(secondItem);

        assertEquals(2, stack.size(), "Size of stack should be 2 after pushing another item");
        assertEquals(secondItem, stack.peek(), "Peek should return the second item, which is the last pushed item");

        Item thirdItem = new Item(3);
        stack.push(thirdItem);
        
        assertEquals(3, stack.size(), "Size of stack should be 3 after pushing the third item");
        assertEquals(thirdItem, stack.peek(), "Peek should return the third item");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    @Test
    public void pushTest() {
        NodeStack<Integer> stack = new NodeStack<>();
        assertTrue(stack.isEmpty(), "Stack should be empty initially.");

        Integer firstElement = 10;
        stack.push(firstElement);
        assertFalse(stack.isEmpty(), "Stack should not be empty after push.");

        assertEquals(firstElement, stack.peek(), "Top element should be equal to the first pushed element.");
        assertEquals(1, stack.size(), "Stack size should be equal to 1 after first push.");

        Integer secondElement = 20;
        stack.push(secondElement);
        assertEquals(secondElement, stack.peek(), "Top element should be updated to the second pushed element.");
        assertEquals(2, stack.size(), "Stack size should be equal to 2 after second push.");

        Integer thirdElement = 30;
        stack.push(thirdElement);
        assertEquals(thirdElement, stack.peek(), "Top element should be updated to the third pushed element.");
        assertEquals(3, stack.size(), "Stack size should be equal to 3 after third push.");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {

    private NodeStack<String> stack;

    @BeforeEach
    public void setUp() {
        stack = new NodeStack<>(); // Assume NodeStack<> can be instantiated
    }

    @Test
    public void pushTest() {
        assertTrue(stack.isEmpty(), "Stack should initially be empty");

        // Push first item
        stack.push("first");
        assertEquals(1, stack.size(), "Stack size should be 1 after first push");
        assertEquals("first", stack.peek(), "Top of the stack should be 'first'");

        // Push second item
        stack.push("second");
        assertEquals(2, stack.size(), "Stack size should be 2 after second push");
        assertEquals("second", stack.peek(), "Top of the stack should be 'second'");

        // Push third item
        stack.push("third");
        assertEquals(3, stack.size(), "Stack size should be 3 after third push");
        assertEquals("third", stack.peek(), "Top of the stack should be 'third'");

        // Testing the order when popped
        assertEquals("third", stack.pop(), "Popped item should be 'third'");
        assertEquals("second", stack.pop(), "Popped item should be 'second'");
        assertEquals("first", stack.pop(), "Popped item should be 'first'");
        assertTrue(stack.isEmpty(), "Stack should be empty after popping all items");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {

    @Test
    public void pushTest() {
        // Given
        NodeStack<Integer> stack = new NodeStack<>();
        
        // When pushing the first item
        Item firstItem = new Item(1);
        stack.push(firstItem);
        
        // Assert that the stack size is 1
        assertEquals(1, stack.size());
        
        // Assert that the item is at the head
        assertEquals(firstItem, stack.peek());
        
        // Assert that the stack is not empty
        assertFalse(stack.isEmpty());
        
        // When pushing another item
        Item secondItem = new Item(2);
        stack.push(secondItem);
        
        // Assert that the stack size is 2
        assertEquals(2, stack.size());
        
        // Assert that the new item is now at the head
        assertEquals(secondItem, stack.peek());
        
        // Assert that the first item is the 'previous' of the head
        assertEquals(firstItem, stack.peek().getPrevious().getData());
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {

    @Test
    public void pushTest() {
        // Assume Item is a proper type that can be instantiated for the purpose of this test
        class Item {
            int value;
            public Item(int value) {
                this.value = value;
            }
        }

        NodeStack<Item> stack = new NodeStack<>();
        Item firstItem = new Item(1);
        
        // Test push onto an empty stack
        stack.push(firstItem);
        assertFalse(stack.isEmpty(), "Stack should not be empty after push");
        assertEquals(1, stack.size(), "Stack size should be 1 after first push");
        assertEquals(firstItem, stack.peek(), "Top item should be the first item pushed");

        Item secondItem = new Item(2);
        
        // Test push onto a non-empty stack
        stack.push(secondItem);
        assertFalse(stack.isEmpty(), "Stack should not be empty after second push");
        assertEquals(2, stack.size(), "Stack size should be 2 after second push");
        assertEquals(secondItem, stack.peek(), "Top item should be the second item pushed");

        // Check that the order of items is correct
        Item poppedItem = stack.pop();
        assertNotNull(poppedItem, "Popped item should not be null");
        assertEquals(secondItem, poppedItem, "Popped item should be the second item pushed");
        assertEquals(1, stack.size(), "Stack size should decrease to 1 after pop");
        
        // Check that the remaining item is the first one
        poppedItem = stack.pop();
        assertNotNull(poppedItem, "Popped item should not be null after second pop");
        assertEquals(firstItem, poppedItem, "Popped item should be the first item pushed");
        assertTrue(stack.isEmpty(), "Stack should be empty after popping all items");
        assertEquals(0, stack.size(), "Stack size should be 0 after popping all items");
    }
}


