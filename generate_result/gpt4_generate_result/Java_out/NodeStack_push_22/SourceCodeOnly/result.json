{
    "project_name": "Java",
    "file_name": "NodeStack.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/stacks/NodeStack.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.stacks",
    "docstring": "/**\n     * Put a value onto the stack.\n     *\n     * @param item : value to be put on the stack.\n     */",
    "source_code": "\npublic void push(Item item) {\n    NodeStack<Item> newNs = new NodeStack<Item>(item);\n\n    if (this.isEmpty()) {\n        NodeStack.setHead(new NodeStack<>(item));\n        newNs.setNext(null);\n        newNs.setPrevious(null);\n    } else {\n        newNs.setPrevious(NodeStack.head);\n        NodeStack.head.setNext(newNs);\n        NodeStack.setHead(newNs);\n    }\n\n    NodeStack.setSize(NodeStack.getSize() + 1);\n}\n",
    "class_name": "NodeStack",
    "method_name": "push",
    "arguments": [
        "Item item"
    ],
    "generate_test": [
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    private NodeStack<Integer> testStack;\n\n    @BeforeEach\n    public void setUp() {\n        testStack = new NodeStack<>();\n    }\n\n    @Test\n    public void pushTest() {\n        // Assume that a valid constructor, isEmpty, and getSize methods exist.\n        assertTrue(testStack.isEmpty(), \"Stack should be empty initially\");\n        assertEquals(0, testStack.getSize(), \"Initial size should be 0\");\n\n        Integer item1 = 5;\n        testStack.push(item1);\n        assertFalse(testStack.isEmpty(), \"Stack should not be empty after push\");\n        assertEquals(1, testStack.getSize(), \"Size should be 1 after one push\");\n        assertEquals(item1, testStack.peek(), \"Peek should return the last pushed item\");\n\n        Integer item2 = 10;\n        testStack.push(item2);\n        assertEquals(2, testStack.getSize(), \"Size should be 2 after two pushes\");\n        assertEquals(item2, testStack.peek(), \"Peek should return the last pushed item after second push\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    \n    private NodeStack<Item> stack;\n    \n    @BeforeEach\n    public void setUp() {\n        stack = new NodeStack<Item>();\n    }\n\n    @Test\n    public void pushTest() {\n        Item firstItem = new Item(\"First\");\n        Item secondItem = new Item(\"Second\");\n\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially\");\n        assertEquals(0, NodeStack.getSize(), \"Stack size should initially be 0\");\n\n        // Test pushing first item\n        stack.push(firstItem);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push\");\n        assertEquals(1, NodeStack.getSize(), \"Stack size should be 1 after first push\");\n        assertSame(firstItem, NodeStack.getHead().getItem(), \"The item of the head node should be the first item pushed\");\n\n        // Test pushing second item\n        stack.push(secondItem);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after second push\");\n        assertEquals(2, NodeStack.getSize(), \"Stack size should be 2 after second push\");\n        assertSame(secondItem, NodeStack.getHead().getItem(), \"The item of the head node should be the second item pushed\");\n        assertNotNull(NodeStack.getHead().getPrevious(), \"The head node should have a previous node after second push\");\n        assertSame(firstItem, NodeStack.getHead().getPrevious().getItem(), \"The previous node's item should be the first item after second push\");\n    }\n    \n    // Inner class for mock `Item` used only for testing\n    static class Item {\n        private String name;\n        \n        public Item(String name) {\n            this.name = name;\n        }\n        \n        public String getName() {\n            return name;\n        }\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    private NodeStack<Item> stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new NodeStack<>();\n    }\n\n    @Test\n    public void pushTest() {\n        // Assume Item is some predefined class with a meaningful equals() method\n        Item firstItem = new Item(\"First\");\n        Item secondItem = new Item(\"Second\");\n\n        // Test if stack is initially empty\n        assertTrue(stack.isEmpty(), \"Stack should be initially empty\");\n\n        // Push first item and check if it is present\n        stack.push(firstItem);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push\");\n        assertEquals(1, NodeStack.getSize(), \"Stack size should be 1 after first push\");\n        assertEquals(firstItem, NodeStack.getHead().getData(), \"The head of the stack should be the first item pushed\");\n\n        // Push second item and check the stack properties\n        stack.push(secondItem);\n        assertEquals(2, NodeStack.getSize(), \"Stack size should be 2 after second push\");\n        assertEquals(secondItem, NodeStack.getHead().getData(), \"The head of the stack should now be the second item pushed\");\n        assertEquals(firstItem, NodeStack.getHead().getPrevious().getData(), \"The previous item of the head should be the first item pushed\");\n\n        // Clear up after test\n        NodeStack.setHead(null);\n        NodeStack.setSize(0);\n    }\n\n    // Since we used 'getHead()' and 'getSize()' methods,\n    // we assume getters have been implemented in the NodeStack class\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    private NodeStack<Integer> stack;\n    \n    @BeforeEach\n    public void setUp() {\n        stack = new NodeStack<>();\n    }\n\n    @Test\n    public void pushTest() {\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially\");\n\n        Integer firstElement = 10;\n        stack.push(firstElement); // Push first element\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push\");\n        assertEquals(1, NodeStack.getSize(), \"Stack size should be 1 after first push\");\n        assertEquals(firstElement, NodeStack.getHead().getItem(), \"Head should be equal to first pushed element\");\n\n        Integer secondElement = 20;\n        stack.push(secondElement); // Push second element\n        assertEquals(2, NodeStack.getSize(), \"Stack size should be 2 after second push\");\n        assertEquals(secondElement, NodeStack.getHead().getItem(), \"Head should be equal to second pushed element\");\n        assertEquals(firstElement, NodeStack.getHead().getPrevious().getItem(), \"Second node should be first pushed element\");\n\n        // You can continue to add more assertions to validate the integrity of the stack after additional push operations.\n    }\n\n    // Additional methods to set up test environment or other test cases could be inserted here\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    private NodeStack<Integer> nodeStack;\n\n    @BeforeEach\n    public void setUp() {\n        // Initialize NodeStack before each test\n        nodeStack = new NodeStack<>();\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Clean up after each test if necessary\n    }\n\n    @Test\n    public void pushTest() {\n        assertTrue(nodeStack.isEmpty(), \"Stack should be empty initially.\");\n\n        Integer firstItem = 1;\n        Integer secondItem = 2;\n\n        // Push first item and check\n        nodeStack.push(firstItem);\n        assertEquals(1, nodeStack.getSize(), \"Stack size should be 1 after first push.\");\n        assertEquals(firstItem, nodeStack.peek(), \"Top of stack should be the first item pushed.\");\n\n        // Push second item and check\n        nodeStack.push(secondItem);\n        assertEquals(2, nodeStack.getSize(), \"Stack size should be 2 after second push.\");\n        assertEquals(secondItem, nodeStack.peek(), \"Top of stack should be the second item pushed.\");\n    }\n}\n\n// Assuming NodeStack has a getSize, peek, and isEmpty methods for this test to work.\n// Also assuming NodeStack.setHead(), NodeStack.head, and NodeStack.setSize() methods\n// are accessible and work as intended.\n// NodeStack is also assumed to be a generic class capable of holding items of type <Item>.",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    \n    private NodeStack<Item> stack;\n    \n    @BeforeEach\n    public void setUp() {\n        stack = new NodeStack<Item>();\n    }\n\n    @Test\n    public void pushTest() {\n        Item firstItem = new Item(\"First\");\n        Item secondItem = new Item(\"Second\");\n\n        assertTrue(stack.isEmpty(), \"Stack should be empty initially.\");\n\n        stack.push(firstItem);\n        assertFalse(stack.isEmpty(), \"Stack should not be empty after pushing an item.\");\n        assertEquals(1, NodeStack.getSize(), \"The size should be 1 after pushing one item.\");\n        assertEquals(firstItem, NodeStack.getHead().getValue(), \"The head's value should be the same as the first item pushed.\");\n\n        stack.push(secondItem);\n        assertEquals(2, NodeStack.getSize(), \"The size should be 2 after pushing another item.\");\n        assertEquals(secondItem, NodeStack.getHead().getValue(), \"The head's value should be the same as the second item pushed.\");\n        assertEquals(firstItem, NodeStack.getHead().getPrevious().getValue(), \"The second node should be the first item after pushing another item.\");\n    }\n\n    // Assuming the existence of an Item class and the NodeStack class with the required methods.\n    private static class Item {\n        String value;\n\n        public Item(String value) {\n            this.value = value;\n        }\n\n        public String getValue() {\n            return value;\n        }\n    }\n\n    // Assuming the NodeStack class is implemented with a static head and size.\n    // The NodeStack class also assumes that the methods setHead, setSize, getSize, and isEmpty are implemented.\n    private static class NodeStack<Item> {\n        private Item value;\n        private NodeStack<Item> next;\n        private NodeStack<Item> previous;\n        private static NodeStack<?> head;\n        private static int size;\n\n        public NodeStack(Item value) {\n            this.value = value;\n        }\n\n        public void setNext(NodeStack<Item> next) {\n            this.next = next;\n        }\n\n        public void setPrevious(NodeStack<Item> previous) {\n            this.previous = previous;\n        }\n\n        public static void setHead(NodeStack<?> head) {\n            NodeStack.head = head;\n        }\n\n        public static void setSize(int size) {\n            NodeStack.size = size;\n        }\n\n        public static int getSize() {\n            return size;\n        }\n\n        public static boolean isEmpty() {\n            return head == null;\n        }\n\n        public NodeStack<Item> getPrevious() {\n            return previous;\n        }\n\n        public Item getValue() {\n            return value;\n        }\n\n        public static NodeStack<?> getHead() {\n            return head;\n        }\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    private NodeStack<Integer> nodeStack;\n\n    @BeforeEach\n    public void setup() {\n        nodeStack = new NodeStack<>();\n    }\n\n    @Test\n    public void pushTest() {\n        // Assuming that NodeStack has a method getSize() to check the size  \n        // And also assuming that NodeStack has a getHead() method to check the item on the top\n\n        assertTrue(nodeStack.isEmpty(), \"Stack should be empty initially\");\n\n        // Push first item to the stack\n        Integer firstItem = 10;\n        nodeStack.push(firstItem);\n        assertEquals(1, NodeStack.getSize(), \"Stack size should be 1 after first push\");\n        assertEquals(firstItem, NodeStack.getHead().getItem(), \"The top of the stack should be the first item pushed\");\n\n        // Push another item\n        Integer secondItem = 20;\n        nodeStack.push(secondItem);\n        assertEquals(2, NodeStack.getSize(), \"Stack size should be 2 after second push\");\n        assertEquals(secondItem, NodeStack.getHead().getItem(), \"The top of the stack should be the last item pushed\");\n\n        // Push another item\n        Integer thirdItem = 30;\n        nodeStack.push(thirdItem);\n        assertEquals(3, NodeStack.getSize(), \"Stack size should be 3 after third push\");\n        assertEquals(thirdItem, NodeStack.getHead().getItem(), \"The top of the stack should be the new item pushed\");\n\n        // Check the previous item of the top is the second item\n        assertEquals(secondItem, NodeStack.getHead().getPrevious().getItem(), \"The item below the top should be the second item\");\n\n        // Check the previous item of second is first item\n        assertEquals(firstItem, NodeStack.getHead().getPrevious().getPrevious().getItem(), \"The bottom item should be the first item after three pushes\");\n\n        // Now there should be 3 items in the stack in the order of thirdItem, secondItem, and firstItem\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    private NodeStack<Item> nodeStack;\n\n    @BeforeEach\n    void setUp() {\n        nodeStack = new NodeStack<>();\n    }\n\n    @Test\n    public void pushTest() {\n        Item firstItem = new Item(); // Replace with the actual Item class or type you're using.\n        nodeStack.push(firstItem);\n        \n        assertFalse(nodeStack.isEmpty(), \"Stack should not be empty after pushing an item.\");\n        assertEquals(1, NodeStack.getSize(), \"Stack size should be 1 after pushing one item.\");\n        \n        Item secondItem = new Item(); // Replace with the actual Item class or type you're using.\n        nodeStack.push(secondItem);\n        \n        assertEquals(secondItem, NodeStack.getHead().getItem(), \"The top of the stack should be the last item pushed.\");\n        assertEquals(2, NodeStack.getSize(), \"Stack size should be 2 after pushing two items.\");\n        \n        NodeStack<Item> headNode = NodeStack.getHead();\n        assertEquals(firstItem, headNode.getPrevious().getItem(), \"The second item should now be below the top item.\");\n        \n        // Additional assertions can be made to ensure the order of the stack is maintained\n        // and all references (next, previous, head) are set correctly.\n    }\n\n    // Additional utility methods for the test\n    // (these methods are placeholders and should match the actual implementation details of NodeStack)\n    private static class NodeStack<Item> {\n        private static NodeStack<?> head;\n        private static int size;\n\n        // Assuming there is an Item class or type you're using within the NodeStack\n        NodeStack() {\n            // ... constructor body (if needed)\n        }\n\n        NodeStack(Item item) {\n            // ... constructor body (if needed)\n        }\n\n        public static <T> void setHead(NodeStack<T> node) {\n            head = node;\n        }\n\n        public static void setSize(int newSize) {\n            size = newSize;\n        }\n\n        public static int getSize() {\n            return size;\n        }\n\n        public static <T> NodeStack<T> getHead() {\n            return (NodeStack<T>) head;\n        }\n\n        public Item getItem() {\n            // Return the item held by this node\n            return null; // Placeholder\n        }\n\n        public void setNext(NodeStack<Item> node) {\n            // ... implementation for setNext\n        }\n\n        public void setPrevious(NodeStack<Item> node) {\n            // ... implementation for setPrevious\n        }\n\n        public NodeStack<Item> getPrevious() {\n            // ... implementation for getPrevious\n            return null; // Placeholder\n        }\n\n        public boolean isEmpty() {\n            return size == 0;\n        }\n        \n        public void push(Item item) {\n            // ... (your provided code)\n        }\n    }\n\n    // A placeholder Item class. Replace with the actual class or type you're using within NodeStack\n    private static class Item {\n        // ... fields, constructors, methods, etc.\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    private NodeStack<Item> stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new NodeStack<>();\n    }\n\n    @Test\n    public void pushTest() {\n        // Assuming an 'Item' class exists\n        Item firstItem = new Item(); // Replace with actual constructor if applicable\n        stack.push(firstItem);\n        \n        assertFalse(stack.isEmpty(), \"Stack should not be empty after push.\");\n        assertEquals(1, NodeStack.getSize(), \"Stack size should be 1 after one push.\");\n\n        Item secondItem = new Item(); // Replace with actual constructor if applicable\n        stack.push(secondItem);\n        \n        assertEquals(secondItem, NodeStack.getHead().getItem(), \"The item at the head should be the last item pushed.\");\n        assertEquals(2, NodeStack.getSize(), \"Stack size should be 2 after two pushes.\");\n        \n        // If NodeStack class supports it, you can add checks for the 'next' and 'previous' connections\n        // Example (if getters are available):\n        // assertNotNull(NodeStack.getHead().getPrevious(), \"New head node should have a reference to the previous head.\");\n        // assertNull(NodeStack.getHead().getPrevious().getNext(), \"Old head's next node should be null.\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        assertTrue(stack.isEmpty());\n\n        int sizeBeforePush = NodeStack.getSize();\n        stack.push(1);\n        assertEquals(sizeBeforePush + 1, NodeStack.getSize());\n        assertEquals(1, NodeStack.getHead().getItem());\n\n        stack.push(2);\n        assertEquals(sizeBeforePush + 2, NodeStack.getSize());\n        assertEquals(2, NodeStack.getHead().getItem());\n\n        stack.push(3);\n        assertEquals(sizeBeforePush + 3, NodeStack.getSize());\n        assertEquals(3, NodeStack.getHead().getItem());\n    }\n}"
    ]
}