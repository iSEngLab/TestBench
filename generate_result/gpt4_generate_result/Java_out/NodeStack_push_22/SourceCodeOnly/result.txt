Source code: 


public void push(Item item) {
    NodeStack<Item> newNs = new NodeStack<Item>(item);

    if (this.isEmpty()) {
        NodeStack.setHead(new NodeStack<>(item));
        newNs.setNext(null);
        newNs.setPrevious(null);
    } else {
        newNs.setPrevious(NodeStack.head);
        NodeStack.head.setNext(newNs);
        NodeStack.setHead(newNs);
    }

    NodeStack.setSize(NodeStack.getSize() + 1);
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {

    private NodeStack<Integer> testStack;

    @BeforeEach
    public void setUp() {
        testStack = new NodeStack<>();
    }

    @Test
    public void pushTest() {
        // Assume that a valid constructor, isEmpty, and getSize methods exist.
        assertTrue(testStack.isEmpty(), "Stack should be empty initially");
        assertEquals(0, testStack.getSize(), "Initial size should be 0");

        Integer item1 = 5;
        testStack.push(item1);
        assertFalse(testStack.isEmpty(), "Stack should not be empty after push");
        assertEquals(1, testStack.getSize(), "Size should be 1 after one push");
        assertEquals(item1, testStack.peek(), "Peek should return the last pushed item");

        Integer item2 = 10;
        testStack.push(item2);
        assertEquals(2, testStack.getSize(), "Size should be 2 after two pushes");
        assertEquals(item2, testStack.peek(), "Peek should return the last pushed item after second push");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    
    private NodeStack<Item> stack;
    
    @BeforeEach
    public void setUp() {
        stack = new NodeStack<Item>();
    }

    @Test
    public void pushTest() {
        Item firstItem = new Item("First");
        Item secondItem = new Item("Second");

        assertTrue(stack.isEmpty(), "Stack should be empty initially");
        assertEquals(0, NodeStack.getSize(), "Stack size should initially be 0");

        // Test pushing first item
        stack.push(firstItem);
        assertFalse(stack.isEmpty(), "Stack should not be empty after push");
        assertEquals(1, NodeStack.getSize(), "Stack size should be 1 after first push");
        assertSame(firstItem, NodeStack.getHead().getItem(), "The item of the head node should be the first item pushed");

        // Test pushing second item
        stack.push(secondItem);
        assertFalse(stack.isEmpty(), "Stack should not be empty after second push");
        assertEquals(2, NodeStack.getSize(), "Stack size should be 2 after second push");
        assertSame(secondItem, NodeStack.getHead().getItem(), "The item of the head node should be the second item pushed");
        assertNotNull(NodeStack.getHead().getPrevious(), "The head node should have a previous node after second push");
        assertSame(firstItem, NodeStack.getHead().getPrevious().getItem(), "The previous node's item should be the first item after second push");
    }
    
    // Inner class for mock `Item` used only for testing
    static class Item {
        private String name;
        
        public Item(String name) {
            this.name = name;
        }
        
        public String getName() {
            return name;
        }
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    private NodeStack<Item> stack;

    @BeforeEach
    public void setUp() {
        stack = new NodeStack<>();
    }

    @Test
    public void pushTest() {
        // Assume Item is some predefined class with a meaningful equals() method
        Item firstItem = new Item("First");
        Item secondItem = new Item("Second");

        // Test if stack is initially empty
        assertTrue(stack.isEmpty(), "Stack should be initially empty");

        // Push first item and check if it is present
        stack.push(firstItem);
        assertFalse(stack.isEmpty(), "Stack should not be empty after push");
        assertEquals(1, NodeStack.getSize(), "Stack size should be 1 after first push");
        assertEquals(firstItem, NodeStack.getHead().getData(), "The head of the stack should be the first item pushed");

        // Push second item and check the stack properties
        stack.push(secondItem);
        assertEquals(2, NodeStack.getSize(), "Stack size should be 2 after second push");
        assertEquals(secondItem, NodeStack.getHead().getData(), "The head of the stack should now be the second item pushed");
        assertEquals(firstItem, NodeStack.getHead().getPrevious().getData(), "The previous item of the head should be the first item pushed");

        // Clear up after test
        NodeStack.setHead(null);
        NodeStack.setSize(0);
    }

    // Since we used 'getHead()' and 'getSize()' methods,
    // we assume getters have been implemented in the NodeStack class
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {

    private NodeStack<Integer> stack;
    
    @BeforeEach
    public void setUp() {
        stack = new NodeStack<>();
    }

    @Test
    public void pushTest() {
        assertTrue(stack.isEmpty(), "Stack should be empty initially");

        Integer firstElement = 10;
        stack.push(firstElement); // Push first element
        assertFalse(stack.isEmpty(), "Stack should not be empty after push");
        assertEquals(1, NodeStack.getSize(), "Stack size should be 1 after first push");
        assertEquals(firstElement, NodeStack.getHead().getItem(), "Head should be equal to first pushed element");

        Integer secondElement = 20;
        stack.push(secondElement); // Push second element
        assertEquals(2, NodeStack.getSize(), "Stack size should be 2 after second push");
        assertEquals(secondElement, NodeStack.getHead().getItem(), "Head should be equal to second pushed element");
        assertEquals(firstElement, NodeStack.getHead().getPrevious().getItem(), "Second node should be first pushed element");

        // You can continue to add more assertions to validate the integrity of the stack after additional push operations.
    }

    // Additional methods to set up test environment or other test cases could be inserted here
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {

    private NodeStack<Integer> nodeStack;

    @BeforeEach
    public void setUp() {
        // Initialize NodeStack before each test
        nodeStack = new NodeStack<>();
    }

    @AfterEach
    public void tearDown() {
        // Clean up after each test if necessary
    }

    @Test
    public void pushTest() {
        assertTrue(nodeStack.isEmpty(), "Stack should be empty initially.");

        Integer firstItem = 1;
        Integer secondItem = 2;

        // Push first item and check
        nodeStack.push(firstItem);
        assertEquals(1, nodeStack.getSize(), "Stack size should be 1 after first push.");
        assertEquals(firstItem, nodeStack.peek(), "Top of stack should be the first item pushed.");

        // Push second item and check
        nodeStack.push(secondItem);
        assertEquals(2, nodeStack.getSize(), "Stack size should be 2 after second push.");
        assertEquals(secondItem, nodeStack.peek(), "Top of stack should be the second item pushed.");
    }
}

// Assuming NodeStack has a getSize, peek, and isEmpty methods for this test to work.
// Also assuming NodeStack.setHead(), NodeStack.head, and NodeStack.setSize() methods
// are accessible and work as intended.
// NodeStack is also assumed to be a generic class capable of holding items of type <Item>.


No.6 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    
    private NodeStack<Item> stack;
    
    @BeforeEach
    public void setUp() {
        stack = new NodeStack<Item>();
    }

    @Test
    public void pushTest() {
        Item firstItem = new Item("First");
        Item secondItem = new Item("Second");

        assertTrue(stack.isEmpty(), "Stack should be empty initially.");

        stack.push(firstItem);
        assertFalse(stack.isEmpty(), "Stack should not be empty after pushing an item.");
        assertEquals(1, NodeStack.getSize(), "The size should be 1 after pushing one item.");
        assertEquals(firstItem, NodeStack.getHead().getValue(), "The head's value should be the same as the first item pushed.");

        stack.push(secondItem);
        assertEquals(2, NodeStack.getSize(), "The size should be 2 after pushing another item.");
        assertEquals(secondItem, NodeStack.getHead().getValue(), "The head's value should be the same as the second item pushed.");
        assertEquals(firstItem, NodeStack.getHead().getPrevious().getValue(), "The second node should be the first item after pushing another item.");
    }

    // Assuming the existence of an Item class and the NodeStack class with the required methods.
    private static class Item {
        String value;

        public Item(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }
    }

    // Assuming the NodeStack class is implemented with a static head and size.
    // The NodeStack class also assumes that the methods setHead, setSize, getSize, and isEmpty are implemented.
    private static class NodeStack<Item> {
        private Item value;
        private NodeStack<Item> next;
        private NodeStack<Item> previous;
        private static NodeStack<?> head;
        private static int size;

        public NodeStack(Item value) {
            this.value = value;
        }

        public void setNext(NodeStack<Item> next) {
            this.next = next;
        }

        public void setPrevious(NodeStack<Item> previous) {
            this.previous = previous;
        }

        public static void setHead(NodeStack<?> head) {
            NodeStack.head = head;
        }

        public static void setSize(int size) {
            NodeStack.size = size;
        }

        public static int getSize() {
            return size;
        }

        public static boolean isEmpty() {
            return head == null;
        }

        public NodeStack<Item> getPrevious() {
            return previous;
        }

        public Item getValue() {
            return value;
        }

        public static NodeStack<?> getHead() {
            return head;
        }
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {

    private NodeStack<Integer> nodeStack;

    @BeforeEach
    public void setup() {
        nodeStack = new NodeStack<>();
    }

    @Test
    public void pushTest() {
        // Assuming that NodeStack has a method getSize() to check the size  
        // And also assuming that NodeStack has a getHead() method to check the item on the top

        assertTrue(nodeStack.isEmpty(), "Stack should be empty initially");

        // Push first item to the stack
        Integer firstItem = 10;
        nodeStack.push(firstItem);
        assertEquals(1, NodeStack.getSize(), "Stack size should be 1 after first push");
        assertEquals(firstItem, NodeStack.getHead().getItem(), "The top of the stack should be the first item pushed");

        // Push another item
        Integer secondItem = 20;
        nodeStack.push(secondItem);
        assertEquals(2, NodeStack.getSize(), "Stack size should be 2 after second push");
        assertEquals(secondItem, NodeStack.getHead().getItem(), "The top of the stack should be the last item pushed");

        // Push another item
        Integer thirdItem = 30;
        nodeStack.push(thirdItem);
        assertEquals(3, NodeStack.getSize(), "Stack size should be 3 after third push");
        assertEquals(thirdItem, NodeStack.getHead().getItem(), "The top of the stack should be the new item pushed");

        // Check the previous item of the top is the second item
        assertEquals(secondItem, NodeStack.getHead().getPrevious().getItem(), "The item below the top should be the second item");

        // Check the previous item of second is first item
        assertEquals(firstItem, NodeStack.getHead().getPrevious().getPrevious().getItem(), "The bottom item should be the first item after three pushes");

        // Now there should be 3 items in the stack in the order of thirdItem, secondItem, and firstItem
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {
    private NodeStack<Item> nodeStack;

    @BeforeEach
    void setUp() {
        nodeStack = new NodeStack<>();
    }

    @Test
    public void pushTest() {
        Item firstItem = new Item(); // Replace with the actual Item class or type you're using.
        nodeStack.push(firstItem);
        
        assertFalse(nodeStack.isEmpty(), "Stack should not be empty after pushing an item.");
        assertEquals(1, NodeStack.getSize(), "Stack size should be 1 after pushing one item.");
        
        Item secondItem = new Item(); // Replace with the actual Item class or type you're using.
        nodeStack.push(secondItem);
        
        assertEquals(secondItem, NodeStack.getHead().getItem(), "The top of the stack should be the last item pushed.");
        assertEquals(2, NodeStack.getSize(), "Stack size should be 2 after pushing two items.");
        
        NodeStack<Item> headNode = NodeStack.getHead();
        assertEquals(firstItem, headNode.getPrevious().getItem(), "The second item should now be below the top item.");
        
        // Additional assertions can be made to ensure the order of the stack is maintained
        // and all references (next, previous, head) are set correctly.
    }

    // Additional utility methods for the test
    // (these methods are placeholders and should match the actual implementation details of NodeStack)
    private static class NodeStack<Item> {
        private static NodeStack<?> head;
        private static int size;

        // Assuming there is an Item class or type you're using within the NodeStack
        NodeStack() {
            // ... constructor body (if needed)
        }

        NodeStack(Item item) {
            // ... constructor body (if needed)
        }

        public static <T> void setHead(NodeStack<T> node) {
            head = node;
        }

        public static void setSize(int newSize) {
            size = newSize;
        }

        public static int getSize() {
            return size;
        }

        public static <T> NodeStack<T> getHead() {
            return (NodeStack<T>) head;
        }

        public Item getItem() {
            // Return the item held by this node
            return null; // Placeholder
        }

        public void setNext(NodeStack<Item> node) {
            // ... implementation for setNext
        }

        public void setPrevious(NodeStack<Item> node) {
            // ... implementation for setPrevious
        }

        public NodeStack<Item> getPrevious() {
            // ... implementation for getPrevious
            return null; // Placeholder
        }

        public boolean isEmpty() {
            return size == 0;
        }
        
        public void push(Item item) {
            // ... (your provided code)
        }
    }

    // A placeholder Item class. Replace with the actual class or type you're using within NodeStack
    private static class Item {
        // ... fields, constructors, methods, etc.
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {

    private NodeStack<Item> stack;

    @BeforeEach
    public void setUp() {
        stack = new NodeStack<>();
    }

    @Test
    public void pushTest() {
        // Assuming an 'Item' class exists
        Item firstItem = new Item(); // Replace with actual constructor if applicable
        stack.push(firstItem);
        
        assertFalse(stack.isEmpty(), "Stack should not be empty after push.");
        assertEquals(1, NodeStack.getSize(), "Stack size should be 1 after one push.");

        Item secondItem = new Item(); // Replace with actual constructor if applicable
        stack.push(secondItem);
        
        assertEquals(secondItem, NodeStack.getHead().getItem(), "The item at the head should be the last item pushed.");
        assertEquals(2, NodeStack.getSize(), "Stack size should be 2 after two pushes.");
        
        // If NodeStack class supports it, you can add checks for the 'next' and 'previous' connections
        // Example (if getters are available):
        // assertNotNull(NodeStack.getHead().getPrevious(), "New head node should have a reference to the previous head.");
        // assertNull(NodeStack.getHead().getPrevious().getNext(), "Old head's next node should be null.");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeStackTest {

    @Test
    public void pushTest() {
        NodeStack<Integer> stack = new NodeStack<>();
        assertTrue(stack.isEmpty());

        int sizeBeforePush = NodeStack.getSize();
        stack.push(1);
        assertEquals(sizeBeforePush + 1, NodeStack.getSize());
        assertEquals(1, NodeStack.getHead().getItem());

        stack.push(2);
        assertEquals(sizeBeforePush + 2, NodeStack.getSize());
        assertEquals(2, NodeStack.getHead().getItem());

        stack.push(3);
        assertEquals(sizeBeforePush + 3, NodeStack.getSize());
        assertEquals(3, NodeStack.getHead().getItem());
    }
}


