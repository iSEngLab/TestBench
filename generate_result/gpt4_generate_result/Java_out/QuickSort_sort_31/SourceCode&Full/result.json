{
    "project_name": "Java",
    "file_name": "QuickSort.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/sorts/QuickSort.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.sorts",
    "docstring": "/**\n     * This method implements the Generic Quick Sort\n     *\n     * @param array The array to be sorted Sorts the array in increasing order\n     */",
    "source_code": "\n@Override\npublic <T extends Comparable<T>> T[] sort(T[] array) {\n    doSort(array, 0, array.length - 1);\n    return array;\n}\n",
    "class_name": "QuickSort",
    "method_name": "sort",
    "arguments": [
        "T array"
    ],
    "generate_test": [
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n\n        // Test with Integers\n        Integer[] actualInt = {4, 3, 2, 5, 1};\n        Integer[] expectedInt = {1, 2, 3, 4, 5};\n        actualInt = quickSort.sort(actualInt);\n        assertArrayEquals(expectedInt, actualInt);\n\n        // Test with Strings\n        String[] actualStr = {\"delta\", \"bravo\", \"charlie\", \"echo\", \"alpha\"};\n        String[] expectedStr = {\"alpha\", \"bravo\", \"charlie\", \"delta\", \"echo\"};\n        actualStr = quickSort.sort(actualStr);\n        assertArrayEquals(expectedStr, actualStr);\n\n        // Test with Doubles\n        Double[] actualDouble = {4.4, 3.3, 2.2, 5.5, 1.1};\n        Double[] expectedDouble = {1.1, 2.2, 3.3, 4.4, 5.5};\n        actualDouble = quickSort.sort(actualDouble);\n        assertArrayEquals(expectedDouble, actualDouble);\n\n        // Test with an already sorted array\n        Integer[] sortedArray = {1, 2, 3, 4, 5};\n        actualInt = quickSort.sort(sortedArray);\n        assertArrayEquals(sortedArray, actualInt);\n        \n        // Test with an empty array\n        Integer[] emptyArray = {};\n        actualInt = quickSort.sort(emptyArray);\n        assertArrayEquals(emptyArray, actualInt);\n\n        // Test with a single element array\n        Integer[] singleElementArray = {1};\n        actualInt = quickSort.sort(singleElementArray);\n        assertArrayEquals(singleElementArray, actualInt);\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    private QuickSort quickSort;\n\n    @BeforeEach\n    public void setUp() {\n        quickSort = new QuickSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] original = {4, 3, 2, 1};\n        Integer[] sorted = {1, 2, 3, 4};\n        assertArrayEquals(sorted, quickSort.sort(original), \"The sorted array should be in ascending order\");\n        \n        Integer[] alreadySorted = {1, 2, 3, 4};\n        assertArrayEquals(alreadySorted, quickSort.sort(alreadySorted), \"The already sorted array should stay the same\");\n        \n        Integer[] singleElement = {1};\n        assertArrayEquals(singleElement, quickSort.sort(singleElement), \"An array with a single element should stay the same\");\n        \n        Integer[] empty = {};\n        assertArrayEquals(empty, quickSort.sort(empty), \"An empty array should stay the same\");\n        \n        String[] strings = {\"delta\", \"alpha\", \"charlie\", \"bravo\"};\n        String[] stringsSorted = {\"alpha\", \"bravo\", \"charlie\", \"delta\"};\n        assertArrayEquals(stringsSorted, quickSort.sort(strings), \"The sorted array of strings should be in ascending order\");\n    }\n\n    @AfterEach\n    public void tearDown() {\n        quickSort = null;\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n\n        // Test with integers\n        Integer[] inputInt = {5, 1, 4, 2, 8};\n        Integer[] expectedResultInt = {1, 2, 4, 5, 8};\n        assertArrayEquals(expectedResultInt, quickSort.sort(inputInt));\n\n        // Test with empty array\n        Integer[] emptyArray = {};\n        Integer[] expectedEmptyArray = {};\n        assertArrayEquals(expectedEmptyArray, quickSort.sort(emptyArray));\n        \n        // Test with strings\n        String[] inputStr = {\"E\", \"A\", \"C\", \"B\", \"D\"};\n        String[] expectedResultStr = {\"A\", \"B\", \"C\", \"D\", \"E\"};\n        assertArrayEquals(expectedResultStr, quickSort.sort(inputStr));\n\n        // Test with doubles\n        Double[] inputDouble = {6.0, 3.3, 5.5, 0.0, -1.1, 3.3};\n        Double[] expectedResultDouble = {-1.1, 0.0, 3.3, 3.3, 5.5, 6.0};\n        assertArrayEquals(expectedResultDouble, quickSort.sort(inputDouble));\n        \n        // Test with all elements the same\n        Integer[] sameElements = {1, 1, 1, 1};\n        Integer[] expectedSameElements = {1, 1, 1, 1};\n        assertArrayEquals(expectedSameElements, quickSort.sort(sameElements));\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    private QuickSort quickSort;\n\n    @BeforeEach\n    public void setUp() {\n        quickSort = new QuickSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] inputArray = {4, 3, 2, 1};\n        Integer[] expectedArray = {1, 2, 3, 4};\n        Integer[] sortedArray = quickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedArray, sortedArray, \"The sorted array should be in ascending order\");\n    }\n\n    @Test\n    public void sortTestWithDuplicates() {\n        Integer[] inputArray = {5, 4, 3, 3, 1};\n        Integer[] expectedArray = {1, 3, 3, 4, 5};\n        Integer[] sortedArray = quickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedArray, sortedArray, \"The sorted array should be in ascending order with duplicates properly handled\");\n    }\n\n    @Test\n    public void sortTestEmptyArray() {\n        Integer[] inputArray = new Integer[0];\n        Integer[] expectedArray = new Integer[0];\n        Integer[] sortedArray = quickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedArray, sortedArray, \"An empty array should not change when sorted\");\n    }\n\n    // Additional tests could be written to check for the sorting of various types of arrays,\n    // Including arrays with negative numbers, larger numbers, and arrays that are already sorted.\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    \n    private QuickSort quickSort;\n\n    @BeforeEach\n    public void setUp() {\n        quickSort = new QuickSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] inputArray = {5, 2, 4, 6, 1, 3};\n        Integer[] expectedArray = {1, 2, 3, 4, 5, 6}; // This is how the array should look after sorting\n\n        // Sort the array\n        Integer[] sortedArray = quickSort.sort(inputArray);\n\n        // Now let's check if the array has been sorted properly\n        assertArrayEquals(expectedArray, sortedArray, \"The input array is not sorted correctly.\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        // Given\n        QuickSort quickSort = new QuickSort();\n        Integer[] inputArray = {5, 3, 2, 8, 4, 1, 9, 6};\n        Integer[] expectedArray = {1, 2, 3, 4, 5, 6, 8, 9};\n\n        // When\n        Integer[] sortedArray = quickSort.sort(inputArray);\n\n        // Then\n        assertArrayEquals(expectedArray, sortedArray, \"The sorted array should be in ascending order\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n\n        Integer[] inputArray = {5, 2, 8, 9, 1, 3, 7, 6};\n        Integer[] sortedArray = {1, 2, 3, 5, 6, 7, 8, 9};\n\n        assertArrayEquals(sortedArray, quickSort.sort(inputArray), \"The sorted array does not match the expected output.\");\n\n        String[] inputStringArray = {\"banana\", \"apple\", \"pineapple\", \"cherry\", \"blueberry\"};\n        String[] sortedStringArray = {\"apple\", \"banana\", \"blueberry\", \"cherry\", \"pineapple\"};\n\n        assertArrayEquals(sortedStringArray, quickSort.sort(inputStringArray), \"The sorted string array does not match the expected output.\");\n    }\n\n    // Extra tests could be added (if needed) for edge cases like an already sorted array, an empty array, or arrays with duplicate elements.\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        \n        Integer[] actual = {3, 2, 5, 1, 4};\n        Integer[] expected = {1, 2, 3, 4, 5};\n        \n        actual = quickSort.sort(actual); // Sort the array\n        \n        assertArrayEquals(expected, actual, \"The sorted array should be in ascending order\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    private final QuickSort quickSort = new QuickSort();\n\n    @Test\n    public void sortTest() {\n        Integer[] inputArray = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};\n        Integer[] expectedArray = {1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9};\n\n        Integer[] sortedArray = quickSort.sort(inputArray);\n\n        assertArrayEquals(expectedArray, sortedArray, \"The sorted array is not correct.\");\n    }\n\n    @Test\n    public void sortEmptyTest() {\n        Integer[] emptyArray = {};\n        Integer[] sortedEmptyArray = quickSort.sort(emptyArray);\n        assertArrayEquals(emptyArray, sortedEmptyArray, \"Sorting an empty array should return an empty array.\");\n    }\n\n    @Test\n    public void sortSingleElementTest() {\n        Integer[] singleElementArray = {42};\n        Integer[] sortedSingleElementArray = quickSort.sort(singleElementArray);\n        assertArrayEquals(singleElementArray, sortedSingleElementArray, \"Sorting a single element array should return the same array.\");\n    }\n\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    private QuickSort quickSort;\n\n    @BeforeEach\n    public void setUp() {\n        quickSort = new QuickSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] inputArray = { 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5 };\n        Integer[] expectedArray = { 1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9 };\n        assertArrayEquals(expectedArray, quickSort.sort(inputArray));\n\n        String[] inputStringArray = { \"banana\", \"apple\", \"pear\", \"kiwi\" };\n        String[] expectedStringArray = { \"apple\", \"banana\", \"kiwi\", \"pear\" };\n        assertArrayEquals(expectedStringArray, quickSort.sort(inputStringArray));\n\n        Double[] inputDoubleArray = { 3.14, 1.59, 2.65, 3.58 };\n        Double[] expectedDoubleArray = { 1.59, 2.65, 3.14, 3.58 };\n        assertArrayEquals(expectedDoubleArray, quickSort.sort(inputDoubleArray));\n    }\n\n    @Test\n    public void sortEmptyArrayTest() {\n        Integer[] emptyArray = new Integer[0];\n        assertArrayEquals(emptyArray, quickSort.sort(emptyArray));\n    }\n\n    @Test\n    public void sortSingleElementArrayTest() {\n        Integer[] singleElementArray = { 42 };\n        assertArrayEquals(singleElementArray, quickSort.sort(singleElementArray));\n    }\n}"
    ]
}