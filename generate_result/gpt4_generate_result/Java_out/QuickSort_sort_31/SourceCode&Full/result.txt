Source code: 


@Override
public <T extends Comparable<T>> T[] sort(T[] array) {
    doSort(array, 0, array.length - 1);
    return array;
}



No.1 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    @Test
    public void sortTest() {
        QuickSort quickSort = new QuickSort();

        // Test with Integers
        Integer[] actualInt = {4, 3, 2, 5, 1};
        Integer[] expectedInt = {1, 2, 3, 4, 5};
        actualInt = quickSort.sort(actualInt);
        assertArrayEquals(expectedInt, actualInt);

        // Test with Strings
        String[] actualStr = {"delta", "bravo", "charlie", "echo", "alpha"};
        String[] expectedStr = {"alpha", "bravo", "charlie", "delta", "echo"};
        actualStr = quickSort.sort(actualStr);
        assertArrayEquals(expectedStr, actualStr);

        // Test with Doubles
        Double[] actualDouble = {4.4, 3.3, 2.2, 5.5, 1.1};
        Double[] expectedDouble = {1.1, 2.2, 3.3, 4.4, 5.5};
        actualDouble = quickSort.sort(actualDouble);
        assertArrayEquals(expectedDouble, actualDouble);

        // Test with an already sorted array
        Integer[] sortedArray = {1, 2, 3, 4, 5};
        actualInt = quickSort.sort(sortedArray);
        assertArrayEquals(sortedArray, actualInt);
        
        // Test with an empty array
        Integer[] emptyArray = {};
        actualInt = quickSort.sort(emptyArray);
        assertArrayEquals(emptyArray, actualInt);

        // Test with a single element array
        Integer[] singleElementArray = {1};
        actualInt = quickSort.sort(singleElementArray);
        assertArrayEquals(singleElementArray, actualInt);
    }
}


No.2 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    private QuickSort quickSort;

    @BeforeEach
    public void setUp() {
        quickSort = new QuickSort();
    }

    @Test
    public void sortTest() {
        Integer[] original = {4, 3, 2, 1};
        Integer[] sorted = {1, 2, 3, 4};
        assertArrayEquals(sorted, quickSort.sort(original), "The sorted array should be in ascending order");
        
        Integer[] alreadySorted = {1, 2, 3, 4};
        assertArrayEquals(alreadySorted, quickSort.sort(alreadySorted), "The already sorted array should stay the same");
        
        Integer[] singleElement = {1};
        assertArrayEquals(singleElement, quickSort.sort(singleElement), "An array with a single element should stay the same");
        
        Integer[] empty = {};
        assertArrayEquals(empty, quickSort.sort(empty), "An empty array should stay the same");
        
        String[] strings = {"delta", "alpha", "charlie", "bravo"};
        String[] stringsSorted = {"alpha", "bravo", "charlie", "delta"};
        assertArrayEquals(stringsSorted, quickSort.sort(strings), "The sorted array of strings should be in ascending order");
    }

    @AfterEach
    public void tearDown() {
        quickSort = null;
    }
}


No.3 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {

    @Test
    public void sortTest() {
        QuickSort quickSort = new QuickSort();

        // Test with integers
        Integer[] inputInt = {5, 1, 4, 2, 8};
        Integer[] expectedResultInt = {1, 2, 4, 5, 8};
        assertArrayEquals(expectedResultInt, quickSort.sort(inputInt));

        // Test with empty array
        Integer[] emptyArray = {};
        Integer[] expectedEmptyArray = {};
        assertArrayEquals(expectedEmptyArray, quickSort.sort(emptyArray));
        
        // Test with strings
        String[] inputStr = {"E", "A", "C", "B", "D"};
        String[] expectedResultStr = {"A", "B", "C", "D", "E"};
        assertArrayEquals(expectedResultStr, quickSort.sort(inputStr));

        // Test with doubles
        Double[] inputDouble = {6.0, 3.3, 5.5, 0.0, -1.1, 3.3};
        Double[] expectedResultDouble = {-1.1, 0.0, 3.3, 3.3, 5.5, 6.0};
        assertArrayEquals(expectedResultDouble, quickSort.sort(inputDouble));
        
        // Test with all elements the same
        Integer[] sameElements = {1, 1, 1, 1};
        Integer[] expectedSameElements = {1, 1, 1, 1};
        assertArrayEquals(expectedSameElements, quickSort.sort(sameElements));
    }
}


No.4 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    private QuickSort quickSort;

    @BeforeEach
    public void setUp() {
        quickSort = new QuickSort();
    }

    @Test
    public void sortTest() {
        Integer[] inputArray = {4, 3, 2, 1};
        Integer[] expectedArray = {1, 2, 3, 4};
        Integer[] sortedArray = quickSort.sort(inputArray);
        
        assertArrayEquals(expectedArray, sortedArray, "The sorted array should be in ascending order");
    }

    @Test
    public void sortTestWithDuplicates() {
        Integer[] inputArray = {5, 4, 3, 3, 1};
        Integer[] expectedArray = {1, 3, 3, 4, 5};
        Integer[] sortedArray = quickSort.sort(inputArray);
        
        assertArrayEquals(expectedArray, sortedArray, "The sorted array should be in ascending order with duplicates properly handled");
    }

    @Test
    public void sortTestEmptyArray() {
        Integer[] inputArray = new Integer[0];
        Integer[] expectedArray = new Integer[0];
        Integer[] sortedArray = quickSort.sort(inputArray);
        
        assertArrayEquals(expectedArray, sortedArray, "An empty array should not change when sorted");
    }

    // Additional tests could be written to check for the sorting of various types of arrays,
    // Including arrays with negative numbers, larger numbers, and arrays that are already sorted.
}


No.5 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    
    private QuickSort quickSort;

    @BeforeEach
    public void setUp() {
        quickSort = new QuickSort();
    }

    @Test
    public void sortTest() {
        Integer[] inputArray = {5, 2, 4, 6, 1, 3};
        Integer[] expectedArray = {1, 2, 3, 4, 5, 6}; // This is how the array should look after sorting

        // Sort the array
        Integer[] sortedArray = quickSort.sort(inputArray);

        // Now let's check if the array has been sorted properly
        assertArrayEquals(expectedArray, sortedArray, "The input array is not sorted correctly.");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    @Test
    public void sortTest() {
        // Given
        QuickSort quickSort = new QuickSort();
        Integer[] inputArray = {5, 3, 2, 8, 4, 1, 9, 6};
        Integer[] expectedArray = {1, 2, 3, 4, 5, 6, 8, 9};

        // When
        Integer[] sortedArray = quickSort.sort(inputArray);

        // Then
        assertArrayEquals(expectedArray, sortedArray, "The sorted array should be in ascending order");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {

    @Test
    public void sortTest() {
        QuickSort quickSort = new QuickSort();

        Integer[] inputArray = {5, 2, 8, 9, 1, 3, 7, 6};
        Integer[] sortedArray = {1, 2, 3, 5, 6, 7, 8, 9};

        assertArrayEquals(sortedArray, quickSort.sort(inputArray), "The sorted array does not match the expected output.");

        String[] inputStringArray = {"banana", "apple", "pineapple", "cherry", "blueberry"};
        String[] sortedStringArray = {"apple", "banana", "blueberry", "cherry", "pineapple"};

        assertArrayEquals(sortedStringArray, quickSort.sort(inputStringArray), "The sorted string array does not match the expected output.");
    }

    // Extra tests could be added (if needed) for edge cases like an already sorted array, an empty array, or arrays with duplicate elements.
}


No.8 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    @Test
    public void sortTest() {
        QuickSort quickSort = new QuickSort();
        
        Integer[] actual = {3, 2, 5, 1, 4};
        Integer[] expected = {1, 2, 3, 4, 5};
        
        actual = quickSort.sort(actual); // Sort the array
        
        assertArrayEquals(expected, actual, "The sorted array should be in ascending order");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {

    private final QuickSort quickSort = new QuickSort();

    @Test
    public void sortTest() {
        Integer[] inputArray = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};
        Integer[] expectedArray = {1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9};

        Integer[] sortedArray = quickSort.sort(inputArray);

        assertArrayEquals(expectedArray, sortedArray, "The sorted array is not correct.");
    }

    @Test
    public void sortEmptyTest() {
        Integer[] emptyArray = {};
        Integer[] sortedEmptyArray = quickSort.sort(emptyArray);
        assertArrayEquals(emptyArray, sortedEmptyArray, "Sorting an empty array should return an empty array.");
    }

    @Test
    public void sortSingleElementTest() {
        Integer[] singleElementArray = {42};
        Integer[] sortedSingleElementArray = quickSort.sort(singleElementArray);
        assertArrayEquals(singleElementArray, sortedSingleElementArray, "Sorting a single element array should return the same array.");
    }

}


No.10 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {

    private QuickSort quickSort;

    @BeforeEach
    public void setUp() {
        quickSort = new QuickSort();
    }

    @Test
    public void sortTest() {
        Integer[] inputArray = { 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5 };
        Integer[] expectedArray = { 1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9 };
        assertArrayEquals(expectedArray, quickSort.sort(inputArray));

        String[] inputStringArray = { "banana", "apple", "pear", "kiwi" };
        String[] expectedStringArray = { "apple", "banana", "kiwi", "pear" };
        assertArrayEquals(expectedStringArray, quickSort.sort(inputStringArray));

        Double[] inputDoubleArray = { 3.14, 1.59, 2.65, 3.58 };
        Double[] expectedDoubleArray = { 1.59, 2.65, 3.14, 3.58 };
        assertArrayEquals(expectedDoubleArray, quickSort.sort(inputDoubleArray));
    }

    @Test
    public void sortEmptyArrayTest() {
        Integer[] emptyArray = new Integer[0];
        assertArrayEquals(emptyArray, quickSort.sort(emptyArray));
    }

    @Test
    public void sortSingleElementArrayTest() {
        Integer[] singleElementArray = { 42 };
        assertArrayEquals(singleElementArray, quickSort.sort(singleElementArray));
    }
}


