{
    "project_name": "Java",
    "file_name": "QuickSort.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/sorts/QuickSort.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.sorts",
    "docstring": "/**\n     * This method implements the Generic Quick Sort\n     *\n     * @param array The array to be sorted Sorts the array in increasing order\n     */",
    "source_code": "\n@Override\npublic <T extends Comparable<T>> T[] sort(T[] array) {\n    doSort(array, 0, array.length - 1);\n    return array;\n}\n",
    "class_name": "QuickSort",
    "method_name": "sort",
    "arguments": [
        "T array"
    ],
    "generate_test": [
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    \n    private final QuickSort quickSort = new QuickSort();\n    \n    @Test\n    public void sortTest() {\n        Integer[] inputArray = {6, 2, 5, 3, 8, 7, 1, 4};\n        Integer[] expectedArray = {1, 2, 3, 4, 5, 6, 7, 8};\n        \n        Integer[] resultArray = quickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedArray, resultArray, \"The sorted array does not match the expected sorted array.\");\n    }\n    \n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        \n        // Test with Integer array\n        Integer[] inputIntegers = { 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5 };\n        Integer[] expectedIntegers = { 1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9 };\n        Integer[] sortedIntegers = quickSort.sort(inputIntegers);\n        assertArrayEquals(expectedIntegers, sortedIntegers, \"The sorted array of Integers does not match the expected output.\");\n\n        // Test with String array\n        String[] inputStrings = { \"delta\", \"alpha\", \"charlie\", \"bravo\" };\n        String[] expectedStrings = { \"alpha\", \"bravo\", \"charlie\", \"delta\" };\n        String[] sortedStrings = quickSort.sort(inputStrings);\n        assertArrayEquals(expectedStrings, sortedStrings, \"The sorted array of Strings does not match the expected output.\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    private final QuickSort quickSort = new QuickSort();\n\n    @Test\n    public void sortTest() {\n        Integer[] inputArray = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};\n        Integer[] expectedArray = {1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9};\n        \n        // Call the sort method on QuickSort instance\n        Integer[] sortedArray = quickSort.sort(inputArray);\n        \n        // Test if the sorted array matches the expected sorted array\n        assertArrayEquals(expectedArray, sortedArray, \"The sorted array should match the expected sorted array\");\n    }\n    \n    // Optional: Additional test cases can be added to test for edge cases\n    // Such as an empty array, a single element array, a sorted array, etc.\n    \n    @Test\n    public void sortEmptyTest() {\n        Integer[] emptyArray = {};\n        Integer[] expectedEmptyArray = {};\n        \n        Integer[] sortedEmptyArray = quickSort.sort(emptyArray);\n\n        assertArrayEquals(expectedEmptyArray, sortedEmptyArray, \"An empty array should remain unchanged when sorted\");\n    }\n\n    @Test\n    public void sortSingleElementTest() {\n        Integer[] singleElementArray = {42};\n        Integer[] expectedSingleElementArray = {42};\n        \n        Integer[] sortedSingleElementArray = quickSort.sort(singleElementArray);\n\n        assertArrayEquals(expectedSingleElementArray, sortedSingleElementArray, \"A single element array should remain unchanged when sorted\");\n    }\n\n    @Test\n    public void sortAlreadySortedTest() {\n        Integer[] alreadySortedArray = {1, 2, 3, 4, 5};\n        Integer[] expectedAlreadySortedArray = {1, 2, 3, 4, 5};\n        \n        Integer[] sortedAlreadySortedArray = quickSort.sort(alreadySortedArray);\n\n        assertArrayEquals(expectedAlreadySortedArray, sortedAlreadySortedArray, \"An already sorted array should remain unchanged when sorted\");\n    }\n    \n    // Additional tests as needed...\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        Integer[] inputArray = { 9, -3, 5, 0, 1 };\n        Integer[] expectedArray = { -3, 0, 1, 5, 9 };\n\n        Integer[] sortedArray = quickSort.sort(inputArray);\n\n        assertArrayEquals(expectedArray, sortedArray, \"The sorted array did not match the expected array\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        \n        Integer[] original = {3, 2, 5, 4, 1};\n        Integer[] sorted = quickSort.sort(original.clone());\n        \n        assertArrayEquals(new Integer[]{1, 2, 3, 4, 5}, sorted);\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    \n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        Integer[] array = {4, 3, 2, 1};\n        Integer[] sortedArray = {1, 2, 3, 4};\n\n        // Act - Sort the array\n        Integer[] resultArray = quickSort.sort(array);\n\n        // Assert - Verify the array is sorted\n        assertArrayEquals(sortedArray, resultArray, \"The quicksort algorithm did not correctly sort the array\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n\n    private QuickSort quickSort;\n\n    @BeforeEach\n    public void setUp() {\n        quickSort = new QuickSort();\n    }\n\n    @Test\n    public void sortTest() {\n        Integer[] input = { 4, 2, 6, 1, 3, 5 };\n        Integer[] expected = { 1, 2, 3, 4, 5, 6 };\n        Integer[] result = quickSort.sort(input);\n        assertArrayEquals(expected, result, \"The sorted array should be {1, 2, 3, 4, 5, 6}\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    \n    private QuickSort<Integer> integerQuickSort; // QuickSort instance for Integer\n\n    @BeforeEach\n    public void setUp() {\n        integerQuickSort = new QuickSort<Integer>(); // Initialize QuickSort instance\n    }\n    \n    @Test\n    public void sortTest() {\n    Integer[] inputArray = {4, 3, 2, 1};\n        Integer[] sortedArray = {1, 2, 3, 4};\n\n        assertArrayEquals(sortedArray, integerQuickSort.sort(inputArray), \"The sorted array should be in ascending order\");\n        \n        // Further tests can be added to check for sorting stability, cases with duplicates etc.\n        Integer[] arrayWithDuplicates = {5, 4, 3, 3, 1};\n        Integer[] sortedArrayWithDuplicates = {1, 3, 3, 4, 5};\n        assertArrayEquals(sortedArrayWithDuplicates, integerQuickSort.sort(arrayWithDuplicates), \"The sorted array should handle duplicates and be in ascending order\");\n    }\n    \n    // Additional tests like testing for empty array, large arrays, arrays with negative values could be implemented here.\n    \n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    \n    private QuickSort quickSort;\n    \n    @BeforeEach\n    public void setup() {\n        quickSort = new QuickSort();\n    }\n\n    @Test\n    public void sortTest() {\n        // Assuming the SortUtils provides a generic comparison method for the elements\n        Integer[] inputArray = { 4, 3, 2, 1 };\n        Integer[] expectedArray = { 1, 2, 3, 4 };\n        Integer[] resultArray = quickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedArray, resultArray, \"The sorted array should be ascending\");\n        \n        inputArray = new Integer[] { -1, 2, 0, -2 };\n        expectedArray = new Integer[] { -2, -1, 0, 2 };\n        resultArray = quickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedArray, resultArray, \"The sorted array should handle negative numbers\");\n        \n        inputArray = new Integer[] {}; // Testing an empty array\n        expectedArray = new Integer[] {};\n        resultArray = quickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedArray, resultArray, \"The sorted array should be the same as an empty input array\");\n        \n        inputArray = new Integer[] { 5 }; // Testing a single element array\n        expectedArray = new Integer[] { 5 };\n        resultArray = quickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedArray, resultArray, \"The sorted array should be the same as a single element input array\");\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        \n        // Test with integers\n        Integer[] arrayInt = {5, 3, 2, 8, 4, 1};\n        Integer[] arrayIntSorted = {1, 2, 3, 4, 5, 8};\n        assertArrayEquals(arrayIntSorted, quickSort.sort(arrayInt));\n        \n        // Test with empty array\n        Integer[] emptyArray = {};\n        assertArrayEquals(emptyArray, quickSort.sort(emptyArray));\n        \n        // Test with strings\n        String[] arrayStr = {\"delta\", \"charlie\", \"bravo\", \"alpha\", \"echo\", \"foxtrot\"};\n        String[] arrayStrSorted = {\"alpha\", \"bravo\", \"charlie\", \"delta\", \"echo\", \"foxtrot\"};\n        assertArrayEquals(arrayStrSorted, quickSort.sort(arrayStr));\n\n        // Test with duplicates\n        Integer[] arrayWithDuplicates = {5, 2, 5, 2, 8, 2, 1};\n        Integer[] arrayWithDuplicatesSorted = {1, 2, 2, 2, 5, 5, 8};\n        assertArrayEquals(arrayWithDuplicatesSorted, quickSort.sort(arrayWithDuplicates));\n\n        // Test with all same elements\n        Integer[] sameElementsArray = {1, 1, 1, 1};\n        Integer[] sameElementsArraySorted = {1, 1, 1, 1};\n        assertArrayEquals(sameElementsArraySorted, quickSort.sort(sameElementsArray));\n    }\n}"
    ]
}