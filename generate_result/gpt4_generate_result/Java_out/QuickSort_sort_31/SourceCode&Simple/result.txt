Source code: 


@Override
public <T extends Comparable<T>> T[] sort(T[] array) {
    doSort(array, 0, array.length - 1);
    return array;
}



No.1 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    
    private final QuickSort quickSort = new QuickSort();
    
    @Test
    public void sortTest() {
        Integer[] inputArray = {6, 2, 5, 3, 8, 7, 1, 4};
        Integer[] expectedArray = {1, 2, 3, 4, 5, 6, 7, 8};
        
        Integer[] resultArray = quickSort.sort(inputArray);
        
        assertArrayEquals(expectedArray, resultArray, "The sorted array does not match the expected sorted array.");
    }
    
}


No.2 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {

    @Test
    public void sortTest() {
        QuickSort quickSort = new QuickSort();
        
        // Test with Integer array
        Integer[] inputIntegers = { 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5 };
        Integer[] expectedIntegers = { 1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9 };
        Integer[] sortedIntegers = quickSort.sort(inputIntegers);
        assertArrayEquals(expectedIntegers, sortedIntegers, "The sorted array of Integers does not match the expected output.");

        // Test with String array
        String[] inputStrings = { "delta", "alpha", "charlie", "bravo" };
        String[] expectedStrings = { "alpha", "bravo", "charlie", "delta" };
        String[] sortedStrings = quickSort.sort(inputStrings);
        assertArrayEquals(expectedStrings, sortedStrings, "The sorted array of Strings does not match the expected output.");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {

    private final QuickSort quickSort = new QuickSort();

    @Test
    public void sortTest() {
        Integer[] inputArray = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};
        Integer[] expectedArray = {1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9};
        
        // Call the sort method on QuickSort instance
        Integer[] sortedArray = quickSort.sort(inputArray);
        
        // Test if the sorted array matches the expected sorted array
        assertArrayEquals(expectedArray, sortedArray, "The sorted array should match the expected sorted array");
    }
    
    // Optional: Additional test cases can be added to test for edge cases
    // Such as an empty array, a single element array, a sorted array, etc.
    
    @Test
    public void sortEmptyTest() {
        Integer[] emptyArray = {};
        Integer[] expectedEmptyArray = {};
        
        Integer[] sortedEmptyArray = quickSort.sort(emptyArray);

        assertArrayEquals(expectedEmptyArray, sortedEmptyArray, "An empty array should remain unchanged when sorted");
    }

    @Test
    public void sortSingleElementTest() {
        Integer[] singleElementArray = {42};
        Integer[] expectedSingleElementArray = {42};
        
        Integer[] sortedSingleElementArray = quickSort.sort(singleElementArray);

        assertArrayEquals(expectedSingleElementArray, sortedSingleElementArray, "A single element array should remain unchanged when sorted");
    }

    @Test
    public void sortAlreadySortedTest() {
        Integer[] alreadySortedArray = {1, 2, 3, 4, 5};
        Integer[] expectedAlreadySortedArray = {1, 2, 3, 4, 5};
        
        Integer[] sortedAlreadySortedArray = quickSort.sort(alreadySortedArray);

        assertArrayEquals(expectedAlreadySortedArray, sortedAlreadySortedArray, "An already sorted array should remain unchanged when sorted");
    }
    
    // Additional tests as needed...
}


No.4 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {

    @Test
    public void sortTest() {
        QuickSort quickSort = new QuickSort();
        Integer[] inputArray = { 9, -3, 5, 0, 1 };
        Integer[] expectedArray = { -3, 0, 1, 5, 9 };

        Integer[] sortedArray = quickSort.sort(inputArray);

        assertArrayEquals(expectedArray, sortedArray, "The sorted array did not match the expected array");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    @Test
    public void sortTest() {
        QuickSort quickSort = new QuickSort();
        
        Integer[] original = {3, 2, 5, 4, 1};
        Integer[] sorted = quickSort.sort(original.clone());
        
        assertArrayEquals(new Integer[]{1, 2, 3, 4, 5}, sorted);
    }
}


No.6 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    
    @Test
    public void sortTest() {
        QuickSort quickSort = new QuickSort();
        Integer[] array = {4, 3, 2, 1};
        Integer[] sortedArray = {1, 2, 3, 4};

        // Act - Sort the array
        Integer[] resultArray = quickSort.sort(array);

        // Assert - Verify the array is sorted
        assertArrayEquals(sortedArray, resultArray, "The quicksort algorithm did not correctly sort the array");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {

    private QuickSort quickSort;

    @BeforeEach
    public void setUp() {
        quickSort = new QuickSort();
    }

    @Test
    public void sortTest() {
        Integer[] input = { 4, 2, 6, 1, 3, 5 };
        Integer[] expected = { 1, 2, 3, 4, 5, 6 };
        Integer[] result = quickSort.sort(input);
        assertArrayEquals(expected, result, "The sorted array should be {1, 2, 3, 4, 5, 6}");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    
    private QuickSort<Integer> integerQuickSort; // QuickSort instance for Integer

    @BeforeEach
    public void setUp() {
        integerQuickSort = new QuickSort<Integer>(); // Initialize QuickSort instance
    }
    
    @Test
    public void sortTest() {
    Integer[] inputArray = {4, 3, 2, 1};
        Integer[] sortedArray = {1, 2, 3, 4};

        assertArrayEquals(sortedArray, integerQuickSort.sort(inputArray), "The sorted array should be in ascending order");
        
        // Further tests can be added to check for sorting stability, cases with duplicates etc.
        Integer[] arrayWithDuplicates = {5, 4, 3, 3, 1};
        Integer[] sortedArrayWithDuplicates = {1, 3, 3, 4, 5};
        assertArrayEquals(sortedArrayWithDuplicates, integerQuickSort.sort(arrayWithDuplicates), "The sorted array should handle duplicates and be in ascending order");
    }
    
    // Additional tests like testing for empty array, large arrays, arrays with negative values could be implemented here.
    
}


No.9 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    
    private QuickSort quickSort;
    
    @BeforeEach
    public void setup() {
        quickSort = new QuickSort();
    }

    @Test
    public void sortTest() {
        // Assuming the SortUtils provides a generic comparison method for the elements
        Integer[] inputArray = { 4, 3, 2, 1 };
        Integer[] expectedArray = { 1, 2, 3, 4 };
        Integer[] resultArray = quickSort.sort(inputArray);
        
        assertArrayEquals(expectedArray, resultArray, "The sorted array should be ascending");
        
        inputArray = new Integer[] { -1, 2, 0, -2 };
        expectedArray = new Integer[] { -2, -1, 0, 2 };
        resultArray = quickSort.sort(inputArray);
        
        assertArrayEquals(expectedArray, resultArray, "The sorted array should handle negative numbers");
        
        inputArray = new Integer[] {}; // Testing an empty array
        expectedArray = new Integer[] {};
        resultArray = quickSort.sort(inputArray);
        
        assertArrayEquals(expectedArray, resultArray, "The sorted array should be the same as an empty input array");
        
        inputArray = new Integer[] { 5 }; // Testing a single element array
        expectedArray = new Integer[] { 5 };
        resultArray = quickSort.sort(inputArray);
        
        assertArrayEquals(expectedArray, resultArray, "The sorted array should be the same as a single element input array");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    @Test
    public void sortTest() {
        QuickSort quickSort = new QuickSort();
        
        // Test with integers
        Integer[] arrayInt = {5, 3, 2, 8, 4, 1};
        Integer[] arrayIntSorted = {1, 2, 3, 4, 5, 8};
        assertArrayEquals(arrayIntSorted, quickSort.sort(arrayInt));
        
        // Test with empty array
        Integer[] emptyArray = {};
        assertArrayEquals(emptyArray, quickSort.sort(emptyArray));
        
        // Test with strings
        String[] arrayStr = {"delta", "charlie", "bravo", "alpha", "echo", "foxtrot"};
        String[] arrayStrSorted = {"alpha", "bravo", "charlie", "delta", "echo", "foxtrot"};
        assertArrayEquals(arrayStrSorted, quickSort.sort(arrayStr));

        // Test with duplicates
        Integer[] arrayWithDuplicates = {5, 2, 5, 2, 8, 2, 1};
        Integer[] arrayWithDuplicatesSorted = {1, 2, 2, 2, 5, 5, 8};
        assertArrayEquals(arrayWithDuplicatesSorted, quickSort.sort(arrayWithDuplicates));

        // Test with all same elements
        Integer[] sameElementsArray = {1, 1, 1, 1};
        Integer[] sameElementsArraySorted = {1, 1, 1, 1};
        assertArrayEquals(sameElementsArraySorted, quickSort.sort(sameElementsArray));
    }
}


