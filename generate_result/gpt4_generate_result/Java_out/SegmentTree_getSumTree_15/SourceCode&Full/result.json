{
    "project_name": "Java",
    "file_name": "SegmentTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/SegmentTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": null,
    "source_code": "/* A function to get the sum of the elements from index l to index r. This will be called\n * internally*/\nprivate int getSumTree(int start, int end, int q_start, int q_end, int seg_index) {\n    if (q_start <= start && q_end >= end) {\n        return this.seg_t[seg_index];\n    }\n\n    if (q_start > end || q_end < start) {\n        return 0;\n    }\n\n    int mid = start + (end - start) / 2;\n    return (getSumTree(start, mid, q_start, q_end, seg_index * 2 + 1) + getSumTree(mid + 1, end, q_start, q_end, seg_index * 2 + 2));\n}\n",
    "class_name": "SegmentTree",
    "method_name": "getSumTree",
    "arguments": [
        "int start",
        "int end",
        "int q_start",
        "int q_end",
        "int seg_index"
    ],
    "generate_test": [
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n    private SegmentTree segmentTree;\n    private static final int SIZE = 6;\n    private static final int[] INPUT_ARRAY = {1, 3, 5, 7, 9, 11};\n\n    @BeforeEach\n    void setup() {\n        // Initialize Segment Tree with predefined array\n        segmentTree = new SegmentTree(SIZE, INPUT_ARRAY);\n    }\n\n    @Test\n    public void getSumTreeTest() {\n        // Test for sum of the full array\n        assertEquals(1 + 3 + 5 + 7 + 9 + 11, segmentTree.getSum(0, 5),\n            \"The sum of the full array should be equal to the sum of its elements.\");\n\n        // Test for sum of the first half of the array\n        assertEquals(1 + 3 + 5, segmentTree.getSum(0, 2),\n            \"The sum of the first half of the array should be equal to the sum of its first three elements.\");\n\n        // Test for sum of the second half of the array\n        assertEquals(7 + 9 + 11, segmentTree.getSum(3, 5),\n            \"The sum of the second half of the array should be equal to the sum of its last three elements.\");\n\n        // Test for sum of a single element\n        assertEquals(5, segmentTree.getSum(2, 2),\n            \"The sum of one element should be equal to the element itself.\");\n\n        // Test for sum of a non-existent subarray\n        assertEquals(0, segmentTree.getSum(1, -1),\n            \"The sum of a non-existent subarray should be zero.\");\n\n        // Test for sum with start index greater than the end index\n        assertEquals(0, segmentTree.getSum(4, 2),\n            \"The sum should be zero if the start index is greater than the end index.\");\n\n        // Test for sum with indexes outside of the array bounds\n        assertEquals(0, segmentTree.getSum(-1, SIZE),\n            \"The sum should be zero if the indexes are outside of the array bounds.\");\n        \n        // Update an element and test for sum again\n        segmentTree.update(2, 10); // Now the array should be {1, 3, 10, 7, 9, 11}\n        assertEquals(1 + 3 + 10 + 7 + 9 + 11, segmentTree.getSum(0, 5),\n            \"The sum of the full array should reflect the updated value.\");\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n    @Test\n    public void getSumTreeTest() {\n        int[] arr = {1, 3, 5, 7, 9, 11};\n        int n = arr.length;\n        SegmentTree segmentTree = new SegmentTree(n, arr);\n        \n        // Test case: sum of the entire array\n        int totalSum = segmentTree.getSum(0, n - 1);\n        assertEquals(36, totalSum); // 1 + 3 + 5 + 7 + 9 + 11 = 36\n        \n        // Test case: sum of the first three elements\n        int sumFirstThree = segmentTree.getSum(0, 2);\n        assertEquals(9, sumFirstThree); // 1 + 3 + 5 = 9\n\n        // Test case: sum of the elements from index 1 to 4\n        int sumFromOneToFour = segmentTree.getSum(1, 4);\n        assertEquals(24, sumFromOneToFour); // 3 + 5 + 7 + 9 = 24\n\n        // Test case: sum of the last two elements\n        int sumLastTwo = segmentTree.getSum(n - 2, n - 1);\n        assertEquals(20, sumLastTwo); // 9 + 11 = 20\n\n        // Update the tree and test\n        segmentTree.update(2, 10); // Update element at index 2 to be 10\n\n        // New expected sum of the first three elements after the update\n        int updatedSumFirstThree = segmentTree.getSum(0, 2);\n        assertEquals(14, updatedSumFirstThree); // 1 + 3 + 10 = 14\n\n        // New expected sum of the entire array after the update\n        int updatedTotalSum = segmentTree.getSum(0, n - 1);\n        assertEquals(41, updatedTotalSum); // 1 + 3 + 10 + 7 + 9 + 11 = 41\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n    private SegmentTree segmentTree;\n\n    @BeforeEach\n    void setUp() {\n        int[] arr = {1, 3, 5, 7, 9, 11};\n        segmentTree = new SegmentTree(arr.length, arr);\n    }\n\n    @Test\n    public void getSumTreeTest() {\n        // Test the sum on different range queries\n        assertEquals(15, segmentTree.getSum(1, 3), \"Sum of elements from index 1 to 3 should be 15\");\n        assertEquals(9, segmentTree.getSum(0, 2), \"Sum of elements from index 0 to 2 should be 9\");\n        assertEquals(35, segmentTree.getSum(2, 5), \"Sum of elements from index 2 to 5 should be 35\");\n\n        // Test for an updated value\n        segmentTree.update(2, 6); // Update index 2 value from 5 to 6\n        assertEquals(16, segmentTree.getSum(1, 3), \"Sum of elements from index 1 to 3 after update should be 16\");\n\n        // Edge cases\n        assertEquals(0, segmentTree.getSum(6, 6), \"Querying out of bounds should return 0\");\n        assertEquals(0, segmentTree.getSum(-1, 0), \"Query with negative start index should return 0\");\n        assertEquals(0, segmentTree.getSum(4, 3), \"Query with start index greater than end index should return 0\");\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n\n    private SegmentTree segmentTree;\n\n    @BeforeEach\n    public void setUp() {\n        // Initialize segment tree with example values\n        int[] arr = {1, 3, 5, 7, 9, 11};\n        int n = arr.length;\n        segmentTree = new SegmentTree(n, arr);\n    }\n\n    @Test\n    public void getSumTreeTest_ValidRange_ReturnsCorrectSum() {\n        int startRange = 1;\n        int endRange = 3;\n        int expectedSum = 3 + 5 + 7; // Sum of elements from index 1 to 3 in the array [1, 3, 5, 7, 9, 11]\n\n        assertEquals(expectedSum, segmentTree.getSum(startRange, endRange), \"The sum calculated by getSum does not match the expected sum.\");\n    }\n\n    @Test\n    public void getSumTreeTest_SingleElementRange_ReturnsElementValue() {\n        int index = 4;\n        int expectedValue = 9; // The value at index 4 in the array [1, 3, 5, 7, 9, 11]\n\n        assertEquals(expectedValue, segmentTree.getSum(index, index), \"The sum for a single element range should be the element itself.\");\n    }\n\n    @Test\n    public void getSumTreeTest_InvalidRange_ReturnsZero() {\n        int invalidStart = 5;\n        int invalidEnd = 3;\n\n        assertEquals(0, segmentTree.getSum(invalidStart, invalidEnd), \"The sum for an invalid range should be zero.\");\n    }\n\n    @Test\n    public void getSumTreeTest_OutOfBoundsRange_ReturnsZero() {\n        int outOfBoundsStart = -1;\n        int outOfBoundsEnd = 10;\n\n        assertEquals(0, segmentTree.getSum(outOfBoundsStart, outOfBoundsEnd), \"The sum for an out-of-bounds range should be zero.\");\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n    \n    private SegmentTree segmentTree;\n    \n    @BeforeEach\n    public void setUp() {\n        int[] arr = {1, 3, 5, 7, 9, 11};\n        int n = arr.length;\n        segmentTree = new SegmentTree(n, arr);\n    }\n\n    @Test\n    public void getSumTreeTest() {\n        // Test sum of the full array\n        assertEquals(36, segmentTree.getSum(0, 5));\n\n        // Test sum of a subarray\n        assertEquals(15, segmentTree.getSum(1, 3));\n\n        // Test sum with single element\n        assertEquals(9, segmentTree.getSum(4, 4));\n\n        // Test sum with invalid indices\n        assertEquals(0, segmentTree.getSum(-1, 2));\n        assertEquals(0, segmentTree.getSum(2, 6));\n        assertEquals(0, segmentTree.getSum(3, 2));\n\n        // Test sum after an update\n        segmentTree.update(2, 10); // update index 2 (value 5) to 10\n        assertEquals(41, segmentTree.getSum(0, 5)); // New sum including updated value\n        assertEquals(20, segmentTree.getSum(1, 3)); // Subarray sum including updated value        \n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n\n    private SegmentTree segmentTree;\n    \n    @BeforeEach\n    public void setUp() {\n        int arr[] = {1, 3, 5, 7, 9, 11};\n        int n = arr.length;\n        segmentTree = new SegmentTree(n, arr);\n    }\n    \n    @Test\n    public void getSumTreeTest() {\n        assertEquals(16, segmentTree.getSum(1, 3), \"Sum of values in range 1 to 3\");\n        assertEquals(15, segmentTree.getSum(0, 2), \"Sum of values in range 0 to 2\");\n        assertEquals(9, segmentTree.getSum(3, 3), \"Sum of single element range\");\n        assertEquals(0, segmentTree.getSum(5, 4), \"Invalid range should return 0\");\n        assertEquals(0, segmentTree.getSum(-1, 2), \"Range starting with invalid negative index\");\n        assertEquals(0, segmentTree.getSum(2, 6), \"Range ending with index out of bound\");\n        \n        segmentTree.update(1, 10);\n        assertEquals(23, segmentTree.getSum(1, 3), \"Sum after update of values in range 1 to 3\");\n    }\n    \n    @AfterEach\n    public void tearDown() {\n        segmentTree = null;\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n    private SegmentTree segmentTree;\n\n    @BeforeEach\n    public void setUp() {\n        int[] arr = {1, 3, 5, 7, 9, 11};\n        int n = arr.length;\n        segmentTree = new SegmentTree(n, arr);\n    }\n\n    @Test\n    public void getSumTreeTest() {\n        assertEquals(9, segmentTree.getSum(0, 2), \"Sum of the first three elements should be 9\");\n        assertEquals(16, segmentTree.getSum(1, 3), \"Sum from index 1 to 3 should be 16\");\n        assertEquals(20, segmentTree.getSum(2, 4), \"Sum from index 2 to 4 should be 20\");\n        assertEquals(36, segmentTree.getSum(0, 5), \"Sum of the whole array should be 36\");\n\n        // Testing out of bounds scenarios\n        assertEquals(0, segmentTree.getSum(-1, 2), \"Query with negative start index should return 0\");\n        assertEquals(0, segmentTree.getSum(1, 6), \"Query with end index out of bounds should return 0\");\n        assertEquals(0, segmentTree.getSum(4, 3), \"Query with end index less than start index should return 0\");\n\n        // Testing update and sum retrieval\n        segmentTree.update(2, 6); // Update index 2 from 5 to 6\n        assertEquals(10, segmentTree.getSum(0, 2), \"Sum after updating index 2 to 6 should be 10\");\n\n        // Undo the update for consistent test environment\n        segmentTree.update(2, 5); // Change back to original value\n    }\n\n    @AfterEach\n    public void tearDown() {\n        segmentTree = null;\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n    private SegmentTree segmentTree;\n\n    @BeforeEach\n    public void setUp() {\n        int[] arr = {1, 3, 5, 7, 9, 11};\n        int n = arr.length;\n        segmentTree = new SegmentTree(n, arr);\n    }\n\n    @Test\n    public void getSumTreeTest() {\n        // Testing the sum from index 0 to 5 (entire array)\n        assertEquals(36, segmentTree.getSum(0, 5), \"Sum of the entire array should be 36.\");\n\n        // Testing the sum from index 1 to 3\n        assertEquals(15, segmentTree.getSum(1, 3), \"Sum of elements from index 1 to 3 should be 15.\");\n\n        // Testing the sum for a single element at index 2\n        assertEquals(5, segmentTree.getSum(2, 2),\"Sum for a single element at index 2 should be 5.\");\n\n        // Testing the sum from index 4 to 5\n        assertEquals(20, segmentTree.getSum(4, 5), \"Sum of elements from index 4 to 5 should be 20.\");\n\n        // Testing the sum with invalid range (start > end)\n        assertEquals(0, segmentTree.getSum(3, 2), \"Sum should be 0 when start index is greater than end index.\");\n\n        // Testing the sum with index out of range\n        assertEquals(0, segmentTree.getSum(-1, 6), \"Sum should be 0 when indices are out of bounds.\");\n    }\n    \n    // This test could be added to evaluate the update functionality as well\n    @Test\n    public void updateAndQuerySumTest() {\n        segmentTree.update(2, 10); // Updating array[2] from 5 to 10\n        assertEquals(41, segmentTree.getSum(0, 5), \"After updating, sum of the entire array should be 41.\");\n        assertEquals(20, segmentTree.getSum(1, 3), \"After updating, sum of elements from index 1 to 3 should be 20.\");\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n    @Test\n    public void getSumTreeTest() {\n        int[] inputArray = {1, 3, 5, 7, 9, 11};\n        int size = inputArray.length;\n        SegmentTree segmentTree = new SegmentTree(size, inputArray);\n\n        // Test the sum of the entire array\n        assertEquals(36, segmentTree.getSum(0, size - 1), \"Sum of the entire array should be 36\");\n\n        // Test a subrange sum\n        assertEquals(9, segmentTree.getSum(1, 2), \"Sum of elements from index 1 to 2 should be 9\");\n\n        // Test update and subsequent sum\n        segmentTree.update(2, 6); // Update index 2 to value 6\n        assertEquals(37, segmentTree.getSum(0, size - 1), \"Sum after update should be 37\");\n        assertEquals(10, segmentTree.getSum(1, 2), \"Sum of elements from index 1 to 2 after update should be 10\");\n        \n        // Test invalid range sum\n        assertEquals(0, segmentTree.getSum(5, 4), \"Sum of an invalid range should be 0\");\n        \n        // Test single element sum\n        assertEquals(7, segmentTree.getSum(3, 3), \"Sum of a single element at index 3 should be 7\");\n        \n        // Test out of bound queries\n        assertEquals(0, segmentTree.getSum(-1, 2), \"Sum with start index out of bounds should be 0\");\n        assertEquals(0, segmentTree.getSum(1, size), \"Sum with end index out of bounds should be 0\");\n        \n        // Test query after multiple updates\n        segmentTree.update(0, 10); // Update index 0 to value 10\n        segmentTree.update(5, 14); // Update index 5 to value 14\n        assertEquals(52, segmentTree.getSum(0, size - 1), \"Sum after multiple updates should be 52\");\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n\n    private SegmentTree segmentTree;\n\n    @BeforeEach\n    public void setup() {\n        int[] arr = {1, 3, 5, 7, 9, 11};\n        segmentTree = new SegmentTree(arr.length, arr);\n    }\n\n    @Test\n    public void getSumTreeTest() {\n        // Test for sum of the first three elements - indexes 0 to 2\n        assertEquals(9, segmentTree.getSum(0, 2));\n\n        // Test the sum of all elements - indexes 0 to 5\n        assertEquals(36, segmentTree.getSum(0, 5));\n\n        // Test individual element (element at index 4) - indexes 4 to 4\n        assertEquals(9, segmentTree.getSum(4, 4));\n\n        // Test for a sub-range sum - indexes 2 to 4\n        assertEquals(21, segmentTree.getSum(2, 4));\n\n        // Test for out-of-bound indices, these should return 0\n        assertEquals(0, segmentTree.getSum(-1, 2));\n        assertEquals(0, segmentTree.getSum(2, 6));\n \n        // Test for invalid range (start > end), should return 0\n        assertEquals(0, segmentTree.getSum(4, 3));\n    }\n    \n    // Additional Test for update function\n    @Test\n    public void updateTreeTest() {\n        // The current sum of elements from index 2 to 3 is 5 + 7 = 12\n        assertEquals(12, segmentTree.getSum(2, 3));\n        \n        // Update the element at index 3 to 10\n        segmentTree.update(3, 10);\n        \n        // The updated sum of elements from index 2 to 3 is now 5 + 10 = 15\n        assertEquals(15, segmentTree.getSum(2, 3));\n    }\n}"
    ]
}