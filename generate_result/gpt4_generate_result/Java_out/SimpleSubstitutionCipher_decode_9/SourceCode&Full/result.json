{
    "project_name": "Java",
    "file_name": "SimpleSubstitutionCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/SimpleSubstitutionCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Decrypt message by replacing each element with its opposite character in\n     * cipher.\n     *\n     * @return message\n     */",
    "source_code": "\npublic static String decode(String encryptedMessage, String cipherSmall) {\n    StringBuilder decoded = new StringBuilder();\n\n    Map<Character, Character> cipherMap = new HashMap<>();\n\n    char beginSmallLetter = 'a';\n    char beginCapitalLetter = 'A';\n\n    cipherSmall = cipherSmall.toLowerCase();\n    String cipherCapital = cipherSmall.toUpperCase();\n\n    for (int i = 0; i < cipherSmall.length(); i++) {\n        cipherMap.put(cipherSmall.charAt(i), beginSmallLetter++);\n        cipherMap.put(cipherCapital.charAt(i), beginCapitalLetter++);\n    }\n\n    for (int i = 0; i < encryptedMessage.length(); i++) {\n        if (Character.isAlphabetic(encryptedMessage.charAt(i))) {\n            decoded.append(cipherMap.get(encryptedMessage.charAt(i)));\n        } else {\n            decoded.append(encryptedMessage.charAt(i));\n        }\n    }\n\n    return decoded.toString();\n}\n",
    "class_name": "SimpleSubstitutionCipher",
    "method_name": "decode",
    "arguments": [
        "String encryptedMessage",
        "String cipherSmall"
    ],
    "generate_test": [
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        // Assuming a cipher where the alphabet is reversed\n        String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n        String encrypted = \"zolxp\"; // \"apple\" with reversed alphabet\n        String expected = \"apple\";\n\n        String actual = SimpleSubstitutionCipher.decode(encrypted, cipherSmall);\n\n        assertEquals(expected, actual, \"The decoded message should be 'apple'\");\n        \n        // Test with capital letters\n        encrypted = \"ZoLXP\"; // mixed case\n        actual = SimpleSubstitutionCipher.decode(encrypted, cipherSmall);\n        assertEquals(expected, actual, \"The decoded message should be 'apple' even with mixed case input\");\n        \n        // Test with non-alphabetic characters\n        encrypted = \"ZoLXP$%\"; // mixed case with non-alphabetic at the end\n        expected = \"apple$%\"; // non-alphabetic characters should be untouched\n        actual = SimpleSubstitutionCipher.decode(encrypted, cipherSmall);\n        assertEquals(expected, actual, \"The decoded message should keep non-alphabetic characters intact\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n        String encodedMessage = \"zoczi\";\n        String expectedDecodedMessage = \"aloha\";\n\n        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encodedMessage, cipherSmall);\n        \n        assertEquals(expectedDecodedMessage, actualDecodedMessage, \"The decoded message should match the expected output.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    \n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n        String encryptedMessage = \"Zyx\";\n        String expectedDecodedMessage = \"Aby\";\n\n        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n        assertEquals(expectedDecodedMessage, actualDecodedMessage, \"The decoded message should match the expected output.\");\n    }\n\n    // Optionally, you may want to add more test cases to cover different scenarios, such as:\n    // - Decoding with different cipher strings\n    // - Handling non-alphabetic characters in the encoded message\n    // - Edge cases with empty or null strings for `encryptedMessage` or `cipherSmall`\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        // Define inputs\n        String encryptedMessage = \"Bcde\";\n        String cipherSmall = \"bcde\";\n        \n        // Expected outcome: \"abcd\" because \"bcde\" is shifted by 1 from \"abcd\"\n        String expectedDecodedMessage = \"abcd\";\n\n        // Call the method under test\n        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n        // Assert that the actualDecodedMessage is the same as the expectedDecodedMessage\n        assertEquals(expectedDecodedMessage, actualDecodedMessage);\n\n        // Additional test cases to verify the correct behavior with other inputs\n        String encryptedMessageUpper = \"BCDE\";\n        String expectedDecodedMessageUpper = \"ABCD\";\n        String actualDecodedMessageUpper = SimpleSubstitutionCipher.decode(encryptedMessageUpper, cipherSmall);\n\n        assertEquals(expectedDecodedMessageUpper, actualDecodedMessageUpper);\n\n        // Test case with non-alphabetic characters\n        String encryptedMessageWithSymbols = \"Bcde123!\";\n        String expectedDecodedMessageWithSymbols = \"abcd123!\";\n\n        String actualDecodedMessageWithSymbols = SimpleSubstitutionCipher.decode(encryptedMessageWithSymbols, cipherSmall);\n\n        assertEquals(expectedDecodedMessageWithSymbols, actualDecodedMessageWithSymbols);\n\n        // Test case with full cipher\n        String fullCipherSmall = \"zebracdfghijklmnopqstuvwxy\";\n        String fullyEncryptedMessage = \"Zebra123\";\n        String expectedFullyDecodedMessage = \"Azbyx123\";\n\n        String actualFullyDecodedMessage = SimpleSubstitutionCipher.decode(fullyEncryptedMessage, fullCipherSmall);\n\n        assertEquals(expectedFullyDecodedMessage, actualFullyDecodedMessage);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n        String encryptedMessage = \"z\";\n        String expectedOutput = \"a\";\n\n        String result = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n        assertEquals(expectedOutput, result);\n\n        encryptedMessage = \"Z\";\n        expectedOutput = \"A\";\n        result = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n        assertEquals(expectedOutput, result);\n\n        encryptedMessage = \"Zyx Ywv!\";\n        expectedOutput = \"Aba Bcd!\";\n        result = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n        assertEquals(expectedOutput, result);\n\n        encryptedMessage = \"Ylmxv, zylmxb xlfx 123!\";\n        expectedOutput = \"Bumpy, bumpy code 123!\";\n        result = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n        assertEquals(expectedOutput, result);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\"; // reverse alphabet for testing\n        String encryptedMessage = \"Zyx\"; // reverse of \"Cab\"\n        String expectedOutput = \"Cab\"; // expected decoded result\n\n        String actualOutput = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n        assertEquals(expectedOutput, actualOutput, \"The decoded string did not match the expected output.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    \n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"qazwsxedcrfvtgbyhnujmikolp\";\n        String encryptedMessage = \"QaZwSxE\";\n        String expectedDecodedMessage = \"AtBuIvE\";\n        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n        \n        assertEquals(expectedDecodedMessage, actualDecodedMessage, \"Decoded message should match expected\");\n\n        // Additional test cases can be added here to test different scenarios and edge cases\n        // For example:\n        // Testing lowercase encoded message\n        encryptedMessage = \"qaz\";\n        expectedDecodedMessage = \"abc\";\n        actualDecodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n        assertEquals(expectedDecodedMessage, actualDecodedMessage, \"Lowercase decoded message should match expected\");\n\n        // Testing non-alphabetic characters are not affected\n        encryptedMessage = \"qa!z\";\n        expectedDecodedMessage = \"ab!c\";\n        actualDecodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n        assertEquals(expectedDecodedMessage, actualDecodedMessage, \"Non-alphabetic characters should remain unchanged in decoded message\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        final String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n        final String message = \"Hello World!\";\n        final String encryptedMessage = \"Svool Dliow!\";\n\n        String decodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n        assertEquals(message, decodedMessage);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        String originalMessage = \"hello world\";\n        String encryptedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);\n\n        String decryptedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n        assertEquals(originalMessage, decryptedMessage, \"The decrypted message should match the original message.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        String encrypted = \"bqqmf\";\n        String expectedDecoded = \"apple\";\n        \n        String actualDecoded = SimpleSubstitutionCipher.decode(encrypted, cipherSmall);\n        \n        assertEquals(expectedDecoded, actualDecoded, \"The decoded message should match the expected plaintext.\");\n    }\n}"
    ]
}