Source code: 


public static String decode(String encryptedMessage, String cipherSmall) {
    StringBuilder decoded = new StringBuilder();

    Map<Character, Character> cipherMap = new HashMap<>();

    char beginSmallLetter = 'a';
    char beginCapitalLetter = 'A';

    cipherSmall = cipherSmall.toLowerCase();
    String cipherCapital = cipherSmall.toUpperCase();

    for (int i = 0; i < cipherSmall.length(); i++) {
        cipherMap.put(cipherSmall.charAt(i), beginSmallLetter++);
        cipherMap.put(cipherCapital.charAt(i), beginCapitalLetter++);
    }

    for (int i = 0; i < encryptedMessage.length(); i++) {
        if (Character.isAlphabetic(encryptedMessage.charAt(i))) {
            decoded.append(cipherMap.get(encryptedMessage.charAt(i)));
        } else {
            decoded.append(encryptedMessage.charAt(i));
        }
    }

    return decoded.toString();
}



No.1 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void decodeTest() {
        // Assuming a cipher where the alphabet is reversed
        String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
        String encrypted = "zolxp"; // "apple" with reversed alphabet
        String expected = "apple";

        String actual = SimpleSubstitutionCipher.decode(encrypted, cipherSmall);

        assertEquals(expected, actual, "The decoded message should be 'apple'");
        
        // Test with capital letters
        encrypted = "ZoLXP"; // mixed case
        actual = SimpleSubstitutionCipher.decode(encrypted, cipherSmall);
        assertEquals(expected, actual, "The decoded message should be 'apple' even with mixed case input");
        
        // Test with non-alphabetic characters
        encrypted = "ZoLXP$%"; // mixed case with non-alphabetic at the end
        expected = "apple$%"; // non-alphabetic characters should be untouched
        actual = SimpleSubstitutionCipher.decode(encrypted, cipherSmall);
        assertEquals(expected, actual, "The decoded message should keep non-alphabetic characters intact");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class SimpleSubstitutionCipherTest {

    @Test
    public void decodeTest() {
        String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
        String encodedMessage = "zoczi";
        String expectedDecodedMessage = "aloha";

        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encodedMessage, cipherSmall);
        
        assertEquals(expectedDecodedMessage, actualDecodedMessage, "The decoded message should match the expected output.");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    
    @Test
    public void decodeTest() {
        String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
        String encryptedMessage = "Zyx";
        String expectedDecodedMessage = "Aby";

        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);

        assertEquals(expectedDecodedMessage, actualDecodedMessage, "The decoded message should match the expected output.");
    }

    // Optionally, you may want to add more test cases to cover different scenarios, such as:
    // - Decoding with different cipher strings
    // - Handling non-alphabetic characters in the encoded message
    // - Edge cases with empty or null strings for `encryptedMessage` or `cipherSmall`
}


No.4 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void decodeTest() {
        // Define inputs
        String encryptedMessage = "Bcde";
        String cipherSmall = "bcde";
        
        // Expected outcome: "abcd" because "bcde" is shifted by 1 from "abcd"
        String expectedDecodedMessage = "abcd";

        // Call the method under test
        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);

        // Assert that the actualDecodedMessage is the same as the expectedDecodedMessage
        assertEquals(expectedDecodedMessage, actualDecodedMessage);

        // Additional test cases to verify the correct behavior with other inputs
        String encryptedMessageUpper = "BCDE";
        String expectedDecodedMessageUpper = "ABCD";
        String actualDecodedMessageUpper = SimpleSubstitutionCipher.decode(encryptedMessageUpper, cipherSmall);

        assertEquals(expectedDecodedMessageUpper, actualDecodedMessageUpper);

        // Test case with non-alphabetic characters
        String encryptedMessageWithSymbols = "Bcde123!";
        String expectedDecodedMessageWithSymbols = "abcd123!";

        String actualDecodedMessageWithSymbols = SimpleSubstitutionCipher.decode(encryptedMessageWithSymbols, cipherSmall);

        assertEquals(expectedDecodedMessageWithSymbols, actualDecodedMessageWithSymbols);

        // Test case with full cipher
        String fullCipherSmall = "zebracdfghijklmnopqstuvwxy";
        String fullyEncryptedMessage = "Zebra123";
        String expectedFullyDecodedMessage = "Azbyx123";

        String actualFullyDecodedMessage = SimpleSubstitutionCipher.decode(fullyEncryptedMessage, fullCipherSmall);

        assertEquals(expectedFullyDecodedMessage, actualFullyDecodedMessage);
    }
}


No.5 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void decodeTest() {
        String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
        String encryptedMessage = "z";
        String expectedOutput = "a";

        String result = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);
        assertEquals(expectedOutput, result);

        encryptedMessage = "Z";
        expectedOutput = "A";
        result = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);
        assertEquals(expectedOutput, result);

        encryptedMessage = "Zyx Ywv!";
        expectedOutput = "Aba Bcd!";
        result = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);
        assertEquals(expectedOutput, result);

        encryptedMessage = "Ylmxv, zylmxb xlfx 123!";
        expectedOutput = "Bumpy, bumpy code 123!";
        result = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);
        assertEquals(expectedOutput, result);
    }
}


No.6 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void decodeTest() {
        String cipherSmall = "zyxwvutsrqponmlkjihgfedcba"; // reverse alphabet for testing
        String encryptedMessage = "Zyx"; // reverse of "Cab"
        String expectedOutput = "Cab"; // expected decoded result

        String actualOutput = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);

        assertEquals(expectedOutput, actualOutput, "The decoded string did not match the expected output.");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    
    @Test
    public void decodeTest() {
        String cipherSmall = "qazwsxedcrfvtgbyhnujmikolp";
        String encryptedMessage = "QaZwSxE";
        String expectedDecodedMessage = "AtBuIvE";
        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);
        
        assertEquals(expectedDecodedMessage, actualDecodedMessage, "Decoded message should match expected");

        // Additional test cases can be added here to test different scenarios and edge cases
        // For example:
        // Testing lowercase encoded message
        encryptedMessage = "qaz";
        expectedDecodedMessage = "abc";
        actualDecodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);
        assertEquals(expectedDecodedMessage, actualDecodedMessage, "Lowercase decoded message should match expected");

        // Testing non-alphabetic characters are not affected
        encryptedMessage = "qa!z";
        expectedDecodedMessage = "ab!c";
        actualDecodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);
        assertEquals(expectedDecodedMessage, actualDecodedMessage, "Non-alphabetic characters should remain unchanged in decoded message");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class SimpleSubstitutionCipherTest {
    @Test
    public void decodeTest() {
        final String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
        final String message = "Hello World!";
        final String encryptedMessage = "Svool Dliow!";

        String decodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);
        assertEquals(message, decodedMessage);
    }
}


No.9 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void decodeTest() {
        String cipherSmall = "bcdefghijklmnopqrstuvwxyza";
        String originalMessage = "hello world";
        String encryptedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);

        String decryptedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);

        assertEquals(originalMessage, decryptedMessage, "The decrypted message should match the original message.");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void decodeTest() {
        String cipherSmall = "bcdefghijklmnopqrstuvwxyza";
        String encrypted = "bqqmf";
        String expectedDecoded = "apple";
        
        String actualDecoded = SimpleSubstitutionCipher.decode(encrypted, cipherSmall);
        
        assertEquals(expectedDecoded, actualDecoded, "The decoded message should match the expected plaintext.");
    }
}


