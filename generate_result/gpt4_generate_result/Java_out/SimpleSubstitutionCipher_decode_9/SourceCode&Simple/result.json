{
    "project_name": "Java",
    "file_name": "SimpleSubstitutionCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/SimpleSubstitutionCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Decrypt message by replacing each element with its opposite character in\n     * cipher.\n     *\n     * @return message\n     */",
    "source_code": "\npublic static String decode(String encryptedMessage, String cipherSmall) {\n    StringBuilder decoded = new StringBuilder();\n\n    Map<Character, Character> cipherMap = new HashMap<>();\n\n    char beginSmallLetter = 'a';\n    char beginCapitalLetter = 'A';\n\n    cipherSmall = cipherSmall.toLowerCase();\n    String cipherCapital = cipherSmall.toUpperCase();\n\n    for (int i = 0; i < cipherSmall.length(); i++) {\n        cipherMap.put(cipherSmall.charAt(i), beginSmallLetter++);\n        cipherMap.put(cipherCapital.charAt(i), beginCapitalLetter++);\n    }\n\n    for (int i = 0; i < encryptedMessage.length(); i++) {\n        if (Character.isAlphabetic(encryptedMessage.charAt(i))) {\n            decoded.append(cipherMap.get(encryptedMessage.charAt(i)));\n        } else {\n            decoded.append(encryptedMessage.charAt(i));\n        }\n    }\n\n    return decoded.toString();\n}\n",
    "class_name": "SimpleSubstitutionCipher",
    "method_name": "decode",
    "arguments": [
        "String encryptedMessage",
        "String cipherSmall"
    ],
    "generate_test": [
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        String encryptedMessage = \"bcda\";\n        String expectedDecodedMessage = \"abcd\";\n\n        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n        assertEquals(expectedDecodedMessage, actualDecodedMessage, \"The decoded string does not match the expected output.\");\n\n        // Additional test cases\n        // Checking for proper handling of capital letters and characters that are not to be decrypted\n        String encryptedWithCapsAndNonLetters = \"BcDa 123!\";\n        String expectedDecodedWithCapsAndNonLetters = \"AbCd 123!\";\n\n        String actualDecodedWithCapsAndNonLetters = SimpleSubstitutionCipher.decode(encryptedWithCapsAndNonLetters, cipherSmall);\n\n        assertEquals(expectedDecodedWithCapsAndNonLetters, actualDecodedWithCapsAndNonLetters, \"The decoded string with capitals and non-letters does not match the expected output.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    \n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\"; // Example cipher\n        String originalMessage = \"hello world\";\n        String encryptedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);\n        \n        // Ensure that the encode method exists and is working correctly (assuming it's implemented)\n        assertNotNull(encryptedMessage, \"The encoded message should not be null\");\n        \n        // Now, test the decode method\n        String decodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n        \n        assertEquals(originalMessage, decodedMessage, \"The decoded message should match the original message\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"qazwsxedcrfvtgbyhnujmikolp\";\n        String encodedMessage = \"qzwwln\";\n        String expectedDecodedMessage = \"attack\";\n        \n        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encodedMessage, cipherSmall);\n        \n        assertEquals(expectedDecodedMessage, actualDecodedMessage, \"The decoded message should be 'attack'\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        // Arrange\n        String encryptedMessage = \"Bmfy f xywnsl!\";\n        String cipher = \"qwertyuiopasdfghjklzxcvbnm\";\n        String expectedDecodedMessage = \"Hello h world!\";\n\n        // Act\n        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipher);\n\n        // Assert\n        assertEquals(expectedDecodedMessage, actualDecodedMessage, \"The decoded message should match the expected message.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        String encodedMessage = \"bcda\";\n        String expectedDecodedMessage = \"abcd\";\n        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encodedMessage, cipherSmall);\n        assertEquals(expectedDecodedMessage, actualDecodedMessage);\n\n        String encodedMessageWithCaps = \"BCDA\";\n        String expectedDecodedMessageWithCaps = \"ABCD\";\n        String actualDecodedMessageWithCaps = SimpleSubstitutionCipher.decode(encodedMessageWithCaps, cipherSmall);\n        assertEquals(expectedDecodedMessageWithCaps, actualDecodedMessageWithCaps);\n\n        String encodedMessageWithNonAlphabetic = \"b-c-d-a\";\n        String expectedDecodedMessageWithNonAlphabetic = \"a-b-c-d\";\n        String actualDecodedMessageWithNonAlphabetic = SimpleSubstitutionCipher.decode(encodedMessageWithNonAlphabetic, cipherSmall);\n        assertEquals(expectedDecodedMessageWithNonAlphabetic, actualDecodedMessageWithNonAlphabetic);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    // Assuming the encode method is correctly implemented, as it's mentioned in the context\n    // we can use it to test the decode method\n    @Test\n    public void decodeTest() {\n        String originalMessage = \"Hello World!\";\n        String cipherSmall = \"qwertyuiopasdfghjklzxcvbnm\";\n        String encodedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);\n        String decodedMessage = SimpleSubstitutionCipher.decode(encodedMessage, cipherSmall);\n        \n        assertEquals(originalMessage, decodedMessage, \"The decoded message should match the original message.\");\n        \n        // Additional test cases\n        // Test empty string\n        assertEquals(\"\", SimpleSubstitutionCipher.decode(\"\", cipherSmall), \"Decoding an empty string should return an empty string.\");\n        \n        // Test string with no alphabetic characters\n        String nonAlphabetic = \"12345 !@#$%\";\n        assertEquals(nonAlphabetic, SimpleSubstitutionCipher.decode(nonAlphabetic, cipherSmall),\n                     \"Decoding a string without alphabetic characters should return the original string.\");\n        \n        // Test full alphabet\n        String alphabet = \"The quick brown fox jumps over the lazy dog\";\n        String cipheredAlphabet = SimpleSubstitutionCipher.encode(alphabet, cipherSmall);\n        assertEquals(alphabet, SimpleSubstitutionCipher.decode(cipheredAlphabet, cipherSmall),\n                     \"Decoding an encoded alphabet string should return the original alphabet string.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void decodeTest() {\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        String original = \"hello world\";\n        String encrypted = \"ifmmp xpsme\";\n\n        String decoded = SimpleSubstitutionCipher.decode(encrypted, cipherSmall);\n        \n        assertEquals(original, decoded, \"The decode method should properly decrypt the message using the given cipher\");\n        \n        original = \"Java123\";\n        encrypted = \"Kbwb123\";\n        \n        decoded = SimpleSubstitutionCipher.decode(encrypted, cipherSmall);\n\n        assertEquals(original, decoded, \"The decode method should ignore non-alphabetic characters and maintain their original state.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    \n    @Test\n    public void decodeTest() {\n        // Cipher with a simple shift of 1\n        String cipherShiftByOne = \"bcdefghijklmnopqrstuvwxyza\";\n\n        // Testing edge cases with empty strings\n        assertEquals(\"\", SimpleSubstitutionCipher.decode(\"\", cipherShiftByOne));\n\n        // Testing the decoding of a simple encoded message\n        String encodedMessage = \"cfib\";\n        String expectedDecodedMessage = \"beha\";\n        assertEquals(expectedDecodedMessage, SimpleSubstitutionCipher.decode(encodedMessage, cipherShiftByOne));\n\n        // Testing with capital letters in the message\n        String encodedWithCapitalLetters = \"CFIB\";\n        String expectedDecodedWithCapitalLetters = \"BEHA\";\n        assertEquals(expectedDecodedWithCapitalLetters, SimpleSubstitutionCipher.decode(encodedWithCapitalLetters, cipherShiftByOne));\n\n        // Testing a complex encoded message with special characters and spaces\n        String complexEncoded = \"Mjolnir is Thzr's hfgovfg!\";\n        String expectedDecodedComplex = \"Lighter is Sguy's getnuest!\";\n        assertEquals(expectedDecodedComplex, SimpleSubstitutionCipher.decode(complexEncoded, cipherShiftByOne));\n\n        // Testing a message with characters that do not exist in the mapping (should remain unchanged)\n        String messageWithNumbers = \"Bifrost 9 is brzdpn 8?\";\n        String expectedWithNumbers = \"Aheqnsr 9 is aqycom 8?\";\n        assertEquals(expectedWithNumbers, SimpleSubstitutionCipher.decode(messageWithNumbers, cipherShiftByOne));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        String cipher = \"zyxwvutsrqponmlkjihgfedcba\";\n        String original = \"hello\";\n        String encrypted = \"svool\";\n\n        String decrypted = SimpleSubstitutionCipher.decode(encrypted, cipher);\n        assertEquals(original, decrypted, \"The decryption should return the original message\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    \n    private static final String CIPHER_SMALL = \"zyxwvutsrqponmlkjihgfedcba\"; // Reversed alphabet\n\n    @Test\n    public void decodeTest() {\n        // Considering encryptedMessage = \"zab\" -> \"abc\" after decoding using the given CIPHER_SMALL\n        String decoded = SimpleSubstitutionCipher.decode(\"zab\", CIPHER_SMALL);\n        assertEquals(\"abc\", decoded);\n\n        // Test with capital letters\n        decoded = SimpleSubstitutionCipher.decode(\"ZAB\", CIPHER_SMALL);\n        assertEquals(\"ABC\", decoded);\n\n        // Test with non-alphabetic characters included\n        decoded = SimpleSubstitutionCipher.decode(\"Z1A!B?\", CIPHER_SMALL);\n        assertEquals(\"A1B!C?\", decoded);\n\n        // Test with empty string\n        decoded = SimpleSubstitutionCipher.decode(\"\", CIPHER_SMALL);\n        assertEquals(\"\", decoded);\n\n        // Test with full alphabet\n        decoded = SimpleSubstitutionCipher.decode(CIPHER_SMALL.toUpperCase(), CIPHER_SMALL);\n        assertEquals(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", decoded);\n    }\n}"
    ]
}