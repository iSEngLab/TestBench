Source code: 


public static String decode(String encryptedMessage, String cipherSmall) {
    StringBuilder decoded = new StringBuilder();

    Map<Character, Character> cipherMap = new HashMap<>();

    char beginSmallLetter = 'a';
    char beginCapitalLetter = 'A';

    cipherSmall = cipherSmall.toLowerCase();
    String cipherCapital = cipherSmall.toUpperCase();

    for (int i = 0; i < cipherSmall.length(); i++) {
        cipherMap.put(cipherSmall.charAt(i), beginSmallLetter++);
        cipherMap.put(cipherCapital.charAt(i), beginCapitalLetter++);
    }

    for (int i = 0; i < encryptedMessage.length(); i++) {
        if (Character.isAlphabetic(encryptedMessage.charAt(i))) {
            decoded.append(cipherMap.get(encryptedMessage.charAt(i)));
        } else {
            decoded.append(encryptedMessage.charAt(i));
        }
    }

    return decoded.toString();
}



No.1 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void decodeTest() {
        String cipherSmall = "bcdefghijklmnopqrstuvwxyza";
        String encryptedMessage = "bcda";
        String expectedDecodedMessage = "abcd";

        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);

        assertEquals(expectedDecodedMessage, actualDecodedMessage, "The decoded string does not match the expected output.");

        // Additional test cases
        // Checking for proper handling of capital letters and characters that are not to be decrypted
        String encryptedWithCapsAndNonLetters = "BcDa 123!";
        String expectedDecodedWithCapsAndNonLetters = "AbCd 123!";

        String actualDecodedWithCapsAndNonLetters = SimpleSubstitutionCipher.decode(encryptedWithCapsAndNonLetters, cipherSmall);

        assertEquals(expectedDecodedWithCapsAndNonLetters, actualDecodedWithCapsAndNonLetters, "The decoded string with capitals and non-letters does not match the expected output.");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    
    @Test
    public void decodeTest() {
        String cipherSmall = "bcdefghijklmnopqrstuvwxyza"; // Example cipher
        String originalMessage = "hello world";
        String encryptedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);
        
        // Ensure that the encode method exists and is working correctly (assuming it's implemented)
        assertNotNull(encryptedMessage, "The encoded message should not be null");
        
        // Now, test the decode method
        String decodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);
        
        assertEquals(originalMessage, decodedMessage, "The decoded message should match the original message");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void decodeTest() {
        String cipherSmall = "qazwsxedcrfvtgbyhnujmikolp";
        String encodedMessage = "qzwwln";
        String expectedDecodedMessage = "attack";
        
        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encodedMessage, cipherSmall);
        
        assertEquals(expectedDecodedMessage, actualDecodedMessage, "The decoded message should be 'attack'");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void decodeTest() {
        // Arrange
        String encryptedMessage = "Bmfy f xywnsl!";
        String cipher = "qwertyuiopasdfghjklzxcvbnm";
        String expectedDecodedMessage = "Hello h world!";

        // Act
        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipher);

        // Assert
        assertEquals(expectedDecodedMessage, actualDecodedMessage, "The decoded message should match the expected message.");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void decodeTest() {
        String cipherSmall = "bcdefghijklmnopqrstuvwxyza";
        String encodedMessage = "bcda";
        String expectedDecodedMessage = "abcd";
        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encodedMessage, cipherSmall);
        assertEquals(expectedDecodedMessage, actualDecodedMessage);

        String encodedMessageWithCaps = "BCDA";
        String expectedDecodedMessageWithCaps = "ABCD";
        String actualDecodedMessageWithCaps = SimpleSubstitutionCipher.decode(encodedMessageWithCaps, cipherSmall);
        assertEquals(expectedDecodedMessageWithCaps, actualDecodedMessageWithCaps);

        String encodedMessageWithNonAlphabetic = "b-c-d-a";
        String expectedDecodedMessageWithNonAlphabetic = "a-b-c-d";
        String actualDecodedMessageWithNonAlphabetic = SimpleSubstitutionCipher.decode(encodedMessageWithNonAlphabetic, cipherSmall);
        assertEquals(expectedDecodedMessageWithNonAlphabetic, actualDecodedMessageWithNonAlphabetic);
    }
}


No.6 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    // Assuming the encode method is correctly implemented, as it's mentioned in the context
    // we can use it to test the decode method
    @Test
    public void decodeTest() {
        String originalMessage = "Hello World!";
        String cipherSmall = "qwertyuiopasdfghjklzxcvbnm";
        String encodedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);
        String decodedMessage = SimpleSubstitutionCipher.decode(encodedMessage, cipherSmall);
        
        assertEquals(originalMessage, decodedMessage, "The decoded message should match the original message.");
        
        // Additional test cases
        // Test empty string
        assertEquals("", SimpleSubstitutionCipher.decode("", cipherSmall), "Decoding an empty string should return an empty string.");
        
        // Test string with no alphabetic characters
        String nonAlphabetic = "12345 !@#$%";
        assertEquals(nonAlphabetic, SimpleSubstitutionCipher.decode(nonAlphabetic, cipherSmall),
                     "Decoding a string without alphabetic characters should return the original string.");
        
        // Test full alphabet
        String alphabet = "The quick brown fox jumps over the lazy dog";
        String cipheredAlphabet = SimpleSubstitutionCipher.encode(alphabet, cipherSmall);
        assertEquals(alphabet, SimpleSubstitutionCipher.decode(cipheredAlphabet, cipherSmall),
                     "Decoding an encoded alphabet string should return the original alphabet string.");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void decodeTest() {
        String cipherSmall = "bcdefghijklmnopqrstuvwxyza";
        String original = "hello world";
        String encrypted = "ifmmp xpsme";

        String decoded = SimpleSubstitutionCipher.decode(encrypted, cipherSmall);
        
        assertEquals(original, decoded, "The decode method should properly decrypt the message using the given cipher");
        
        original = "Java123";
        encrypted = "Kbwb123";
        
        decoded = SimpleSubstitutionCipher.decode(encrypted, cipherSmall);

        assertEquals(original, decoded, "The decode method should ignore non-alphabetic characters and maintain their original state.");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    
    @Test
    public void decodeTest() {
        // Cipher with a simple shift of 1
        String cipherShiftByOne = "bcdefghijklmnopqrstuvwxyza";

        // Testing edge cases with empty strings
        assertEquals("", SimpleSubstitutionCipher.decode("", cipherShiftByOne));

        // Testing the decoding of a simple encoded message
        String encodedMessage = "cfib";
        String expectedDecodedMessage = "beha";
        assertEquals(expectedDecodedMessage, SimpleSubstitutionCipher.decode(encodedMessage, cipherShiftByOne));

        // Testing with capital letters in the message
        String encodedWithCapitalLetters = "CFIB";
        String expectedDecodedWithCapitalLetters = "BEHA";
        assertEquals(expectedDecodedWithCapitalLetters, SimpleSubstitutionCipher.decode(encodedWithCapitalLetters, cipherShiftByOne));

        // Testing a complex encoded message with special characters and spaces
        String complexEncoded = "Mjolnir is Thzr's hfgovfg!";
        String expectedDecodedComplex = "Lighter is Sguy's getnuest!";
        assertEquals(expectedDecodedComplex, SimpleSubstitutionCipher.decode(complexEncoded, cipherShiftByOne));

        // Testing a message with characters that do not exist in the mapping (should remain unchanged)
        String messageWithNumbers = "Bifrost 9 is brzdpn 8?";
        String expectedWithNumbers = "Aheqnsr 9 is aqycom 8?";
        assertEquals(expectedWithNumbers, SimpleSubstitutionCipher.decode(messageWithNumbers, cipherShiftByOne));
    }
}


No.9 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void decodeTest() {
        String cipher = "zyxwvutsrqponmlkjihgfedcba";
        String original = "hello";
        String encrypted = "svool";

        String decrypted = SimpleSubstitutionCipher.decode(encrypted, cipher);
        assertEquals(original, decrypted, "The decryption should return the original message");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    
    private static final String CIPHER_SMALL = "zyxwvutsrqponmlkjihgfedcba"; // Reversed alphabet

    @Test
    public void decodeTest() {
        // Considering encryptedMessage = "zab" -> "abc" after decoding using the given CIPHER_SMALL
        String decoded = SimpleSubstitutionCipher.decode("zab", CIPHER_SMALL);
        assertEquals("abc", decoded);

        // Test with capital letters
        decoded = SimpleSubstitutionCipher.decode("ZAB", CIPHER_SMALL);
        assertEquals("ABC", decoded);

        // Test with non-alphabetic characters included
        decoded = SimpleSubstitutionCipher.decode("Z1A!B?", CIPHER_SMALL);
        assertEquals("A1B!C?", decoded);

        // Test with empty string
        decoded = SimpleSubstitutionCipher.decode("", CIPHER_SMALL);
        assertEquals("", decoded);

        // Test with full alphabet
        decoded = SimpleSubstitutionCipher.decode(CIPHER_SMALL.toUpperCase(), CIPHER_SMALL);
        assertEquals("ABCDEFGHIJKLMNOPQRSTUVWXYZ", decoded);
    }
}


