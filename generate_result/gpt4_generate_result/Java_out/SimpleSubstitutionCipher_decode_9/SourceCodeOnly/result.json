{
    "project_name": "Java",
    "file_name": "SimpleSubstitutionCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/SimpleSubstitutionCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Decrypt message by replacing each element with its opposite character in\n     * cipher.\n     *\n     * @return message\n     */",
    "source_code": "\npublic static String decode(String encryptedMessage, String cipherSmall) {\n    StringBuilder decoded = new StringBuilder();\n\n    Map<Character, Character> cipherMap = new HashMap<>();\n\n    char beginSmallLetter = 'a';\n    char beginCapitalLetter = 'A';\n\n    cipherSmall = cipherSmall.toLowerCase();\n    String cipherCapital = cipherSmall.toUpperCase();\n\n    for (int i = 0; i < cipherSmall.length(); i++) {\n        cipherMap.put(cipherSmall.charAt(i), beginSmallLetter++);\n        cipherMap.put(cipherCapital.charAt(i), beginCapitalLetter++);\n    }\n\n    for (int i = 0; i < encryptedMessage.length(); i++) {\n        if (Character.isAlphabetic(encryptedMessage.charAt(i))) {\n            decoded.append(cipherMap.get(encryptedMessage.charAt(i)));\n        } else {\n            decoded.append(encryptedMessage.charAt(i));\n        }\n    }\n\n    return decoded.toString();\n}\n",
    "class_name": "SimpleSubstitutionCipher",
    "method_name": "decode",
    "arguments": [
        "String encryptedMessage",
        "String cipherSmall"
    ],
    "generate_test": [
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void decodeTest() {\n        // Given\n        String encryptedMessage = \"Uifsf jt b tfdsfu nfttbhf\";\n        String cipherSmall = \"njogpsvuwmxbdqkescayhlz\"; // example cipher (randomly shuffled alphabet)\n        \n        // When\n        String actualDecoded = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n        \n        // Then\n        String expectedDecoded = \"There is a secret message\";\n        assertEquals(expectedDecoded, actualDecoded, \"Decoded message should match expected result.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        // Test decryption with lowercase\n        String cipherSmall = \"qazwsxedcrfvtgbyhnujmikolp\";\n        String encryptedLowerCase = \"mikolp\";\n        String expectedLowerCase = \"abcdef\";\n        assertEquals(expectedLowerCase, SimpleSubstitutionCipher.decode(encryptedLowerCase, cipherSmall));\n\n        // Test decryption with uppercase\n        String encryptedUpperCase = \"MIKOLP\";\n        String expectedUpperCase = \"ABCDEF\";\n        assertEquals(expectedUpperCase, SimpleSubstitutionCipher.decode(encryptedUpperCase, cipherSmall));\n\n        // Test decryption with mixed case and non-alphabetic characters\n        String encryptedMixed = \"Qazxsw! 2023\";\n        String expectedMixed = \"Atest! 2023\";\n        assertEquals(expectedMixed, SimpleSubstitutionCipher.decode(encryptedMixed, cipherSmall));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    \n    @Test\n    public void decodeTest() {\n        // Test with a simple substitution cipher\n        String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n        String encoded = \"Bzdrzq bhogdq? H oqdedq Bzdrzq rzkzc.\";\n        String expectedDecoded = \"Example string? A sample Example text.\";\n\n        String actualDecoded = SimpleSubstitutionCipher.decode(encoded, cipherSmall);\n        assertEquals(expectedDecoded, actualDecoded, \"The decoded message should match the expected output.\");\n\n        // Additional test case with different cipher and message\n        String anotherCipherSmall = \"xwvutsrqponmlkjihgfedcbazy\";\n        String anotherEncoded = \"Wkh txlfn eurzq ira mxpsv ryhu wkh odcb grj.\";\n        String anotherExpectedDecoded = \"The quick brown fox jumps over the lazy dog.\";\n\n        String anotherActualDecoded = SimpleSubstitutionCipher.decode(anotherEncoded, anotherCipherSmall);\n        assertEquals(anotherExpectedDecoded, anotherActualDecoded, \"The decoded message should match the expected output.\");\n\n        // Test to ensure non alphabetic characters are not transformed\n        String encodedWithNumbers = \"Bzdrzq 1234! H oqdedq Bzdrzq rzkzc.\";\n        String expectedWithNumbers = \"Example 1234! A sample Example text.\";\n        String actualWithNumbers = SimpleSubstitutionCipher.decode(encodedWithNumbers, cipherSmall);\n        assertEquals(expectedWithNumbers, actualWithNumbers, \"The decoded message including numbers should match the expected output.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void decodeTest() {\n        // given\n        String encryptedMessage = \"Zebbj Tdit\";\n        String cipherSmall = \"zxnmclaskdjpowieurytbghfv\";\n        \n        // when\n        String decoded = Ciphers.decode(encryptedMessage, cipherSmall);\n\n        // then\n        assertEquals(\"Hello World\", decoded);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    // Here's the completed decodeTest method\n    @Test\n    public void decodeTest() {\n        // Setup\n        String encryptedMessage = \"BcdEF\";\n        String cipher = \"qwertyuiopasdfghjklzxcvbnm\";\n        \n        // Action\n        String decodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipher);\n        \n        // Assertion\n        assertEquals(\"AbcDE\", decodedMessage, \"The decoded message should match the expected output.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        final String cipher = \"zyxwvutsrqponmlkjihgfedcba\";\n        final String encryptedMessage = \"Zyx\";\n        final String expectedDecoded = \"Aby\";\n        String decodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipher);\n        \n        assertEquals(expectedDecoded, decodedMessage, \"The decoded message does not match the expected output\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void decodeTest() {\n        assertEquals(\"hello\", SimpleSubstitutionCipher.decode(\"ifmmp\", \"bcdefghijklmnopqrstuvwxyz\"));\n        assertEquals(\"Java Programming\", SimpleSubstitutionCipher.decode(\"Kbwb Qsphsbnnjoh\", \"bcdefghijklmnopqrstuvwxyz\"));\n        assertEquals(\"The quick brown fox\", SimpleSubstitutionCipher.decode(\"Uif rvjdl cspxo gpy\", \"bcdefghijklmnopqrstuvwxyz\"));\n        assertEquals(\"Jumped over the lazy dog!\", SimpleSubstitutionCipher.decode(\"Kvnqfe pwfs uif mbaz eph!\", \"bcdefghijklmnopqrstuvwxyz\"));\n        assertEquals(\"1234567890\", SimpleSubstitutionCipher.decode(\"1234567890\", \"bcdefghijklmnopqrstuvwxyz\"));\n        assertEquals(\"AaBbCcDdEe\", SimpleSubstitutionCipher.decode(\"BbCcDdEeFf\", \"bcdefghijklmnopqrstuvwxyz\"));\n        assertEquals(\"Non-alphabetic characters: @#$%^&*()_+[]{}|;':,./<>?\", SimpleSubstitutionCipher.decode(\"Non-alphabetic characters: @#$%^&*()_+[]{}|;':,./<>?\", \"bcdefghijklmnopqrstuvwxyz\"));\n        assertEquals(\"\", SimpleSubstitutionCipher.decode(\"\", \"bcdefghijklmnopqrstuvwxyz\"));\n        assertEquals(\"Spaces are preserved\", SimpleSubstitutionCipher.decode(\"Tqbdft bsf qsftfswfe\", \"bcdefghijklmnopqrstuvwxyz\"));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void decodeTest() {\n        // Assuming 'SimpleSubstitutionCipher' class holds the 'decode' method.\n        // Replace it with the actual class name where the 'decode' method resides.\n\n        // Test with a proper cipher and encoded message\n        String encoded = \"Bcd\";\n        String cipher = \"xyzabcdefghijklmnopqrstuvw\";\n        String expectedDecoded = \"Abc\";\n        assertEquals(expectedDecoded, SimpleSubstitutionCipher.decode(encoded, cipher));\n\n        // Test with characters that are not part of the alphabet\n        encoded = \"Bcd 123!\";\n        cipher = \"xyzabcdefghijklmnopqrstuvw\";\n        expectedDecoded = \"Abc 123!\";\n        assertEquals(expectedDecoded, SimpleSubstitutionCipher.decode(encoded, cipher));\n\n        // Test with uppercase letters in the cipher\n        encoded = \"xYz\";\n        cipher = \"XYZabcdefghijklmnopqrstuvw\";\n        expectedDecoded = \"aBc\";\n        assertEquals(expectedDecoded, SimpleSubstitutionCipher.decode(encoded, cipher));\n\n        // Test with uppercase encoded message and upper+lower case cipher\n        encoded = \"BCD\";\n        cipher = \"xYzAbCdEfGhIjKlMnOpQrStUvW\";\n        expectedDecoded = \"ABC\";\n        assertEquals(expectedDecoded, SimpleSubstitutionCipher.decode(encoded, cipher));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    \n    @Test\n    public void decodeTest() {\n        // Test with a valid encoded message and a cipher\n        String encryptedMessage = \"Jr;;p Eptl!\";\n        String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n        String expectedDecoded = \"Hello World!\";\n        assertEquals(expectedDecoded, SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));\n        \n        // Test with all uppercase encoded message\n        encryptedMessage = \"JR;;P EPTL!\";\n        expectedDecoded = \"HELLO WORLD!\";\n        assertEquals(expectedDecoded, SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));\n        \n        // Test with a message containing non-alphabetic characters\n        encryptedMessage = \"Jr;;p 2023 Eptl!\";\n        expectedDecoded = \"Hello 2023 World!\";\n        assertEquals(expectedDecoded, SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));\n        \n        // Test with an empty string\n        encryptedMessage = \"\";\n        expectedDecoded = \"\";\n        assertEquals(expectedDecoded, SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));\n        \n        // Test with a cipher that doesn't cover the entire alphabet\n        encryptedMessage = \"Mr; ufmt;\";\n        cipherSmall = \"zyxwvutsr\";\n        expectedDecoded = \"Ei; lzhsk;\";\n        assertThrows(NullPointerException.class, () -> SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void decodeTest() {\n        String encoded = \"Bcd\";\n        String cipher = \"zyxwvutsrqponmlkjihgfedcba\";\n        String expected = \"xyz\";\n\n        String actual = YourClassName.decode(encoded, cipher);\n        assertEquals(expected, actual, \"Decoding failed with given substitution cipher\");\n\n        // Testing with numbers and special characters\n        encoded = \"Bcd! 123\";\n        expected = \"xyz! 123\";\n\n        actual = YourClassName.decode(encoded, cipher);\n        assertEquals(expected, actual, \"Decoding failed with numbers and special characters\");\n\n        // Testing with upper-case letters\n        encoded = \"BcD\";\n        cipher = \"zyxwvutsrqponmlkjihgfedcba\";\n        expected = \"xyZ\";\n\n        actual = YourClassName.decode(encoded, cipher);\n        assertEquals(expected, actual, \"Decoding failed with upper-case letters\");\n\n        // Adding more cases if needed, such as an empty string or a string without valid substitutions\n        encoded = \"\";\n        expected = \"\";\n\n        actual = YourClassName.decode(encoded, cipher);\n        assertEquals(expected, actual, \"Decoding failed with an empty string\");\n\n        encoded = \"12345 !@#\";\n        expected = \"12345 !@#\";\n\n        actual = YourClassName.decode(encoded, cipher);\n        assertEquals(expected, actual, \"Decoding failed with a string without alphabetic characters\");\n    }\n\n}"
    ]
}