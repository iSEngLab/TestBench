Source code: 


public static String decode(String encryptedMessage, String cipherSmall) {
    StringBuilder decoded = new StringBuilder();

    Map<Character, Character> cipherMap = new HashMap<>();

    char beginSmallLetter = 'a';
    char beginCapitalLetter = 'A';

    cipherSmall = cipherSmall.toLowerCase();
    String cipherCapital = cipherSmall.toUpperCase();

    for (int i = 0; i < cipherSmall.length(); i++) {
        cipherMap.put(cipherSmall.charAt(i), beginSmallLetter++);
        cipherMap.put(cipherCapital.charAt(i), beginCapitalLetter++);
    }

    for (int i = 0; i < encryptedMessage.length(); i++) {
        if (Character.isAlphabetic(encryptedMessage.charAt(i))) {
            decoded.append(cipherMap.get(encryptedMessage.charAt(i)));
        } else {
            decoded.append(encryptedMessage.charAt(i));
        }
    }

    return decoded.toString();
}



No.1 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void decodeTest() {
        // Given
        String encryptedMessage = "Uifsf jt b tfdsfu nfttbhf";
        String cipherSmall = "njogpsvuwmxbdqkescayhlz"; // example cipher (randomly shuffled alphabet)
        
        // When
        String actualDecoded = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);
        
        // Then
        String expectedDecoded = "There is a secret message";
        assertEquals(expectedDecoded, actualDecoded, "Decoded message should match expected result.");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void decodeTest() {
        // Test decryption with lowercase
        String cipherSmall = "qazwsxedcrfvtgbyhnujmikolp";
        String encryptedLowerCase = "mikolp";
        String expectedLowerCase = "abcdef";
        assertEquals(expectedLowerCase, SimpleSubstitutionCipher.decode(encryptedLowerCase, cipherSmall));

        // Test decryption with uppercase
        String encryptedUpperCase = "MIKOLP";
        String expectedUpperCase = "ABCDEF";
        assertEquals(expectedUpperCase, SimpleSubstitutionCipher.decode(encryptedUpperCase, cipherSmall));

        // Test decryption with mixed case and non-alphabetic characters
        String encryptedMixed = "Qazxsw! 2023";
        String expectedMixed = "Atest! 2023";
        assertEquals(expectedMixed, SimpleSubstitutionCipher.decode(encryptedMixed, cipherSmall));
    }
}


No.3 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    
    @Test
    public void decodeTest() {
        // Test with a simple substitution cipher
        String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
        String encoded = "Bzdrzq bhogdq? H oqdedq Bzdrzq rzkzc.";
        String expectedDecoded = "Example string? A sample Example text.";

        String actualDecoded = SimpleSubstitutionCipher.decode(encoded, cipherSmall);
        assertEquals(expectedDecoded, actualDecoded, "The decoded message should match the expected output.");

        // Additional test case with different cipher and message
        String anotherCipherSmall = "xwvutsrqponmlkjihgfedcbazy";
        String anotherEncoded = "Wkh txlfn eurzq ira mxpsv ryhu wkh odcb grj.";
        String anotherExpectedDecoded = "The quick brown fox jumps over the lazy dog.";

        String anotherActualDecoded = SimpleSubstitutionCipher.decode(anotherEncoded, anotherCipherSmall);
        assertEquals(anotherExpectedDecoded, anotherActualDecoded, "The decoded message should match the expected output.");

        // Test to ensure non alphabetic characters are not transformed
        String encodedWithNumbers = "Bzdrzq 1234! H oqdedq Bzdrzq rzkzc.";
        String expectedWithNumbers = "Example 1234! A sample Example text.";
        String actualWithNumbers = SimpleSubstitutionCipher.decode(encodedWithNumbers, cipherSmall);
        assertEquals(expectedWithNumbers, actualWithNumbers, "The decoded message including numbers should match the expected output.");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void decodeTest() {
        // given
        String encryptedMessage = "Zebbj Tdit";
        String cipherSmall = "zxnmclaskdjpowieurytbghfv";
        
        // when
        String decoded = Ciphers.decode(encryptedMessage, cipherSmall);

        // then
        assertEquals("Hello World", decoded);
    }
}


No.5 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    // Here's the completed decodeTest method
    @Test
    public void decodeTest() {
        // Setup
        String encryptedMessage = "BcdEF";
        String cipher = "qwertyuiopasdfghjklzxcvbnm";
        
        // Action
        String decodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipher);
        
        // Assertion
        assertEquals("AbcDE", decodedMessage, "The decoded message should match the expected output.");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void decodeTest() {
        final String cipher = "zyxwvutsrqponmlkjihgfedcba";
        final String encryptedMessage = "Zyx";
        final String expectedDecoded = "Aby";
        String decodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipher);
        
        assertEquals(expectedDecoded, decodedMessage, "The decoded message does not match the expected output");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void decodeTest() {
        assertEquals("hello", SimpleSubstitutionCipher.decode("ifmmp", "bcdefghijklmnopqrstuvwxyz"));
        assertEquals("Java Programming", SimpleSubstitutionCipher.decode("Kbwb Qsphsbnnjoh", "bcdefghijklmnopqrstuvwxyz"));
        assertEquals("The quick brown fox", SimpleSubstitutionCipher.decode("Uif rvjdl cspxo gpy", "bcdefghijklmnopqrstuvwxyz"));
        assertEquals("Jumped over the lazy dog!", SimpleSubstitutionCipher.decode("Kvnqfe pwfs uif mbaz eph!", "bcdefghijklmnopqrstuvwxyz"));
        assertEquals("1234567890", SimpleSubstitutionCipher.decode("1234567890", "bcdefghijklmnopqrstuvwxyz"));
        assertEquals("AaBbCcDdEe", SimpleSubstitutionCipher.decode("BbCcDdEeFf", "bcdefghijklmnopqrstuvwxyz"));
        assertEquals("Non-alphabetic characters: @#$%^&*()_+[]{}|;':,./<>?", SimpleSubstitutionCipher.decode("Non-alphabetic characters: @#$%^&*()_+[]{}|;':,./<>?", "bcdefghijklmnopqrstuvwxyz"));
        assertEquals("", SimpleSubstitutionCipher.decode("", "bcdefghijklmnopqrstuvwxyz"));
        assertEquals("Spaces are preserved", SimpleSubstitutionCipher.decode("Tqbdft bsf qsftfswfe", "bcdefghijklmnopqrstuvwxyz"));
    }
}


No.8 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void decodeTest() {
        // Assuming 'SimpleSubstitutionCipher' class holds the 'decode' method.
        // Replace it with the actual class name where the 'decode' method resides.

        // Test with a proper cipher and encoded message
        String encoded = "Bcd";
        String cipher = "xyzabcdefghijklmnopqrstuvw";
        String expectedDecoded = "Abc";
        assertEquals(expectedDecoded, SimpleSubstitutionCipher.decode(encoded, cipher));

        // Test with characters that are not part of the alphabet
        encoded = "Bcd 123!";
        cipher = "xyzabcdefghijklmnopqrstuvw";
        expectedDecoded = "Abc 123!";
        assertEquals(expectedDecoded, SimpleSubstitutionCipher.decode(encoded, cipher));

        // Test with uppercase letters in the cipher
        encoded = "xYz";
        cipher = "XYZabcdefghijklmnopqrstuvw";
        expectedDecoded = "aBc";
        assertEquals(expectedDecoded, SimpleSubstitutionCipher.decode(encoded, cipher));

        // Test with uppercase encoded message and upper+lower case cipher
        encoded = "BCD";
        cipher = "xYzAbCdEfGhIjKlMnOpQrStUvW";
        expectedDecoded = "ABC";
        assertEquals(expectedDecoded, SimpleSubstitutionCipher.decode(encoded, cipher));
    }
}


No.9 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    
    @Test
    public void decodeTest() {
        // Test with a valid encoded message and a cipher
        String encryptedMessage = "Jr;;p Eptl!";
        String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
        String expectedDecoded = "Hello World!";
        assertEquals(expectedDecoded, SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));
        
        // Test with all uppercase encoded message
        encryptedMessage = "JR;;P EPTL!";
        expectedDecoded = "HELLO WORLD!";
        assertEquals(expectedDecoded, SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));
        
        // Test with a message containing non-alphabetic characters
        encryptedMessage = "Jr;;p 2023 Eptl!";
        expectedDecoded = "Hello 2023 World!";
        assertEquals(expectedDecoded, SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));
        
        // Test with an empty string
        encryptedMessage = "";
        expectedDecoded = "";
        assertEquals(expectedDecoded, SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));
        
        // Test with a cipher that doesn't cover the entire alphabet
        encryptedMessage = "Mr; ufmt;";
        cipherSmall = "zyxwvutsr";
        expectedDecoded = "Ei; lzhsk;";
        assertThrows(NullPointerException.class, () -> SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall));
    }
}


No.10 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void decodeTest() {
        String encoded = "Bcd";
        String cipher = "zyxwvutsrqponmlkjihgfedcba";
        String expected = "xyz";

        String actual = YourClassName.decode(encoded, cipher);
        assertEquals(expected, actual, "Decoding failed with given substitution cipher");

        // Testing with numbers and special characters
        encoded = "Bcd! 123";
        expected = "xyz! 123";

        actual = YourClassName.decode(encoded, cipher);
        assertEquals(expected, actual, "Decoding failed with numbers and special characters");

        // Testing with upper-case letters
        encoded = "BcD";
        cipher = "zyxwvutsrqponmlkjihgfedcba";
        expected = "xyZ";

        actual = YourClassName.decode(encoded, cipher);
        assertEquals(expected, actual, "Decoding failed with upper-case letters");

        // Adding more cases if needed, such as an empty string or a string without valid substitutions
        encoded = "";
        expected = "";

        actual = YourClassName.decode(encoded, cipher);
        assertEquals(expected, actual, "Decoding failed with an empty string");

        encoded = "12345 !@#";
        expected = "12345 !@#";

        actual = YourClassName.decode(encoded, cipher);
        assertEquals(expected, actual, "Decoding failed with a string without alphabetic characters");
    }

}


