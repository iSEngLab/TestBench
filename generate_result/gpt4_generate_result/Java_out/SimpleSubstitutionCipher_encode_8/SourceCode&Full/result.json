{
    "project_name": "Java",
    "file_name": "SimpleSubstitutionCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/SimpleSubstitutionCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Encrypt text by replacing each element with its opposite character.\n     *\n     * @return Encrypted message\n     */",
    "source_code": "\npublic static String encode(String message, String cipherSmall) {\n    StringBuilder encoded = new StringBuilder();\n\n    // This map is used to encode\n    Map<Character, Character> cipherMap = new HashMap<>();\n\n    char beginSmallLetter = 'a';\n    char beginCapitalLetter = 'A';\n\n    cipherSmall = cipherSmall.toLowerCase();\n    String cipherCapital = cipherSmall.toUpperCase();\n\n    // To handle Small and Capital letters\n    for (int i = 0; i < cipherSmall.length(); i++) {\n        cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));\n        cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));\n    }\n\n    for (int i = 0; i < message.length(); i++) {\n        if (Character.isAlphabetic(message.charAt(i))) {\n            encoded.append(cipherMap.get(message.charAt(i)));\n        } else {\n            encoded.append(message.charAt(i));\n        }\n    }\n\n    return encoded.toString();\n}\n",
    "class_name": "SimpleSubstitutionCipher",
    "method_name": "encode",
    "arguments": [
        "String message",
        "String cipherSmall"
    ],
    "generate_test": [
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    \n    // This instance of the SimpleSubstitutionCipher class is static, \n    // because the methods we are testing are static and thus do not require a class instance.\n    private static SimpleSubstitutionCipher cipher;\n\n    @BeforeEach\n    public void setUp() {\n        cipher = new SimpleSubstitutionCipher();\n    }\n\n    @Test\n    public void encodeTest() {\n        // Here we fill in the <FILL> tag with a test case\n        String message = \"Hello World!\";\n        String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n        String expectedEncodedMessage = \"Svool Dliow!\";\n        String actualEncodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage, \"The encoded message should be correct.\");\n    }\n    \n    // Additional test case to test various scenarios\n    @Test\n    public void encodeWithSpecialCharactersTest() {\n        String message = \"Java123!\";\n        String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n        String expectedEncodedMessage = \"Qzev123!\";\n        String actualEncodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage, \"The encoded message including special characters and numbers should be correct.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        // Prepare the input message and the cipher\n        String message = \"Hello, World!\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\"; // example of a shifted cipher, \"a\" -> \"b\", \"b\" -> \"c\", etc.\n        \n        // Prepare the expected outcome\n        // Given the sample cipher above, \"H\" -> \"I\" and so on, except non-alphabetic characters which remain the same\n        String expectedEncoded = \"Ifmmp, Xpsme!\";\n        \n        // Perform the encoding operation using the SimpleSubstitutionCipher class's encode method\n        String actualEncoded = SimpleSubstitutionCipher.encode(message, cipherSmall);\n        \n        // Assert the expected encoded string is the same as the actual encoded string\n        assertEquals(expectedEncoded, actualEncoded, \"The encoded message does not match the expected output.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        String originalMessage = \"Hello World!\";\n        String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n        String expectedEncodedMessage = \"Svool Dliow!\";\n        \n        String actualEncodedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    // Test method for the encode functionality\n    @Test\n    public void encodeTest() {\n        String message = \"Hello World\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\"; // a simple substitution where a->b, b->c, ..., z->a\n        String expectedEncodedMessage = \"Ifmmp Xpsme\";\n        String actualEncodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage, \"The encoding did not match the expected output.\");\n    }\n\n    // Optionally, you can also add a test case for the decode functionality here\n    @Test\n    public void decodeTest() {\n        String encodedMessage = \"Ifmmp Xpsme\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\"; // a simple substitution where a->b, b->c, ..., z->a\n        String expectedDecodedMessage = \"Hello World\";\n        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encodedMessage, cipherSmall);\n        assertEquals(expectedDecodedMessage, actualDecodedMessage, \"The decoding did not match the expected output.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        // Given a cipher for substitution and a message to encode\n        String cipher = \"bcdefghijklmnopqrstuvwxyza\";\n        String message = \"Hello World!\";\n        String expectedEncodedMessage = \"Ifmmp Xpsme!\";\n\n        // When the static encode method is called from SimpleSubstitutionCipher\n        String actualEncodedMessage = SimpleSubstitutionCipher.encode(message, cipher);\n\n        // Then the encoded message should match the expected output\n        assertEquals(expectedEncodedMessage, actualEncodedMessage,\n            \"The encoded message did not match the expected output.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String message = \"Hello, World!\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n\n        String expectedEncodedResult = \"Ifmmp, Xpsme!\";\n        String actualEncodedResult = SimpleSubstitutionCipher.encode(message, cipherSmall);\n\n        assertEquals(expectedEncodedResult, actualEncodedResult, \"The encoded message does not match the expected result.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        String message = \"Hello, World!\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        \n        // Assuming the cipher shifts each letter to the next in the alphabet\n        String expected = \"Ifmmp, Xpsme!\";\n        String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n        \n        assertEquals(expected, actual);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        // Given\n        String originalMessage = \"The quick brown fox jumps over the lazy dog\";\n        String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n        String expectedEncodedMessage = \"Gsv jfrxp yildm ulc qfnkh levi gsv ozab wlt\";\n\n        // When\n        String actualEncodedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);\n\n        // Then\n        assertEquals(expectedEncodedMessage, actualEncodedMessage, \"The encoded message should match the expected result.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        String originalMessage = \"Hello World!\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        String encodedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);\n\n        // Expected encoded result based on the provided substitution cipher\n        String expectedResult = \"Ifmmp Xpsme!\";\n        assertEquals(expectedResult, encodedMessage, \"The encoded message does not match the expected result.\");\n    }\n\n    // You could potentially add more test cases here\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        final String message = \"Hello, World!\";\n        final String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n        final String expected = \"Svool, Dliow!\";\n\n        String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n        assertEquals(expected, actual);\n    }\n}"
    ]
}