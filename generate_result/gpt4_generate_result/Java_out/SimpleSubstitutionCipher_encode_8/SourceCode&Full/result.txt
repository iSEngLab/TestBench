Source code: 


public static String encode(String message, String cipherSmall) {
    StringBuilder encoded = new StringBuilder();

    // This map is used to encode
    Map<Character, Character> cipherMap = new HashMap<>();

    char beginSmallLetter = 'a';
    char beginCapitalLetter = 'A';

    cipherSmall = cipherSmall.toLowerCase();
    String cipherCapital = cipherSmall.toUpperCase();

    // To handle Small and Capital letters
    for (int i = 0; i < cipherSmall.length(); i++) {
        cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));
        cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));
    }

    for (int i = 0; i < message.length(); i++) {
        if (Character.isAlphabetic(message.charAt(i))) {
            encoded.append(cipherMap.get(message.charAt(i)));
        } else {
            encoded.append(message.charAt(i));
        }
    }

    return encoded.toString();
}



No.1 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    
    // This instance of the SimpleSubstitutionCipher class is static, 
    // because the methods we are testing are static and thus do not require a class instance.
    private static SimpleSubstitutionCipher cipher;

    @BeforeEach
    public void setUp() {
        cipher = new SimpleSubstitutionCipher();
    }

    @Test
    public void encodeTest() {
        // Here we fill in the <FILL> tag with a test case
        String message = "Hello World!";
        String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
        String expectedEncodedMessage = "Svool Dliow!";
        String actualEncodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);
        assertEquals(expectedEncodedMessage, actualEncodedMessage, "The encoded message should be correct.");
    }
    
    // Additional test case to test various scenarios
    @Test
    public void encodeWithSpecialCharactersTest() {
        String message = "Java123!";
        String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
        String expectedEncodedMessage = "Qzev123!";
        String actualEncodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);
        assertEquals(expectedEncodedMessage, actualEncodedMessage, "The encoded message including special characters and numbers should be correct.");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        // Prepare the input message and the cipher
        String message = "Hello, World!";
        String cipherSmall = "bcdefghijklmnopqrstuvwxyza"; // example of a shifted cipher, "a" -> "b", "b" -> "c", etc.
        
        // Prepare the expected outcome
        // Given the sample cipher above, "H" -> "I" and so on, except non-alphabetic characters which remain the same
        String expectedEncoded = "Ifmmp, Xpsme!";
        
        // Perform the encoding operation using the SimpleSubstitutionCipher class's encode method
        String actualEncoded = SimpleSubstitutionCipher.encode(message, cipherSmall);
        
        // Assert the expected encoded string is the same as the actual encoded string
        assertEquals(expectedEncoded, actualEncoded, "The encoded message does not match the expected output.");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void encodeTest() {
        String originalMessage = "Hello World!";
        String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
        String expectedEncodedMessage = "Svool Dliow!";
        
        String actualEncodedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);
        assertEquals(expectedEncodedMessage, actualEncodedMessage);
    }
}


No.4 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    // Test method for the encode functionality
    @Test
    public void encodeTest() {
        String message = "Hello World";
        String cipherSmall = "bcdefghijklmnopqrstuvwxyza"; // a simple substitution where a->b, b->c, ..., z->a
        String expectedEncodedMessage = "Ifmmp Xpsme";
        String actualEncodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);
        assertEquals(expectedEncodedMessage, actualEncodedMessage, "The encoding did not match the expected output.");
    }

    // Optionally, you can also add a test case for the decode functionality here
    @Test
    public void decodeTest() {
        String encodedMessage = "Ifmmp Xpsme";
        String cipherSmall = "bcdefghijklmnopqrstuvwxyza"; // a simple substitution where a->b, b->c, ..., z->a
        String expectedDecodedMessage = "Hello World";
        String actualDecodedMessage = SimpleSubstitutionCipher.decode(encodedMessage, cipherSmall);
        assertEquals(expectedDecodedMessage, actualDecodedMessage, "The decoding did not match the expected output.");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void encodeTest() {
        // Given a cipher for substitution and a message to encode
        String cipher = "bcdefghijklmnopqrstuvwxyza";
        String message = "Hello World!";
        String expectedEncodedMessage = "Ifmmp Xpsme!";

        // When the static encode method is called from SimpleSubstitutionCipher
        String actualEncodedMessage = SimpleSubstitutionCipher.encode(message, cipher);

        // Then the encoded message should match the expected output
        assertEquals(expectedEncodedMessage, actualEncodedMessage,
            "The encoded message did not match the expected output.");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        String message = "Hello, World!";
        String cipherSmall = "bcdefghijklmnopqrstuvwxyza";

        String expectedEncodedResult = "Ifmmp, Xpsme!";
        String actualEncodedResult = SimpleSubstitutionCipher.encode(message, cipherSmall);

        assertEquals(expectedEncodedResult, actualEncodedResult, "The encoded message does not match the expected result.");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void encodeTest() {
        String message = "Hello, World!";
        String cipherSmall = "bcdefghijklmnopqrstuvwxyza";
        
        // Assuming the cipher shifts each letter to the next in the alphabet
        String expected = "Ifmmp, Xpsme!";
        String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);
        
        assertEquals(expected, actual);
    }
}


No.8 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        // Given
        String originalMessage = "The quick brown fox jumps over the lazy dog";
        String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
        String expectedEncodedMessage = "Gsv jfrxp yildm ulc qfnkh levi gsv ozab wlt";

        // When
        String actualEncodedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);

        // Then
        assertEquals(expectedEncodedMessage, actualEncodedMessage, "The encoded message should match the expected result.");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void encodeTest() {
        String originalMessage = "Hello World!";
        String cipherSmall = "bcdefghijklmnopqrstuvwxyza";
        String encodedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);

        // Expected encoded result based on the provided substitution cipher
        String expectedResult = "Ifmmp Xpsme!";
        assertEquals(expectedResult, encodedMessage, "The encoded message does not match the expected result.");
    }

    // You could potentially add more test cases here
}


No.10 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void encodeTest() {
        final String message = "Hello, World!";
        final String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
        final String expected = "Svool, Dliow!";

        String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);
        assertEquals(expected, actual);
    }
}


