{
    "project_name": "Java",
    "file_name": "SimpleSubstitutionCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/SimpleSubstitutionCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Encrypt text by replacing each element with its opposite character.\n     *\n     * @return Encrypted message\n     */",
    "source_code": "\npublic static String encode(String message, String cipherSmall) {\n    StringBuilder encoded = new StringBuilder();\n\n    // This map is used to encode\n    Map<Character, Character> cipherMap = new HashMap<>();\n\n    char beginSmallLetter = 'a';\n    char beginCapitalLetter = 'A';\n\n    cipherSmall = cipherSmall.toLowerCase();\n    String cipherCapital = cipherSmall.toUpperCase();\n\n    // To handle Small and Capital letters\n    for (int i = 0; i < cipherSmall.length(); i++) {\n        cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));\n        cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));\n    }\n\n    for (int i = 0; i < message.length(); i++) {\n        if (Character.isAlphabetic(message.charAt(i))) {\n            encoded.append(cipherMap.get(message.charAt(i)));\n        } else {\n            encoded.append(message.charAt(i));\n        }\n    }\n\n    return encoded.toString();\n}\n",
    "class_name": "SimpleSubstitutionCipher",
    "method_name": "encode",
    "arguments": [
        "String message",
        "String cipherSmall"
    ],
    "generate_test": [
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        // Example test case with a simple cipher mapping (a->b, b->c, ... z->a)\n        String message = \"The quick brown fox jumps over the lazy dog!\";\n        String cipher = \"bcdefghijklmnopqrstuvwxyza\";\n        \n        // Expected result using the above example cipher mapping\n        String expectedEncodedMessage = \"Uif rvjdl cspxo gpy kvnqt pwfs uif mbaz eph!\";\n        \n        // Testing the encode method\n        String actualEncodedMessage = SimpleSubstitutionCipher.encode(message, cipher);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage, \"Encoded message should match the expected result\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        // Arrange\n        String message = \"Hello, World!\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        \n        // Expected output is based on the given cipher where 'a' -> 'b', 'b' -> 'c', etc.\n        String expected = \"Ifmmp, Xpsme!\";\n        \n        // Act\n        String encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);\n        \n        // Assert\n        assertEquals(expected, encodedMessage, \"The encoded message should match the expected output.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        // Arrange\n        String message = \"Hello World!\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        String expectedEncodedMessage = \"Ifmmp Xpsme!\";\n\n        // Act\n        String encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);\n\n        // Assert\n        assertEquals(expectedEncodedMessage, encodedMessage, \"Encoded message should match the expected result.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        // Test cases\n        assertEquals(SimpleSubstitutionCipher.encode(\"hello\",\"bcdefghijklmnopqrstuvwxyza\"), \"ifmmp\");\n        assertEquals(SimpleSubstitutionCipher.encode(\"HELLO\",\"bcdefghijklmnopqrstuvwxyza\"), \"IFMMP\");\n        assertEquals(SimpleSubstitutionCipher.encode(\"hello world\",\"bcdefghijklmnopqrstuvwxyza\"), \"ifmmp xpsme\");\n        assertEquals(SimpleSubstitutionCipher.encode(\"HELLO WORLD\",\"bcdefghijklmnopqrstuvwxyza\"), \"IFMMP XPSME\");\n        assertEquals(SimpleSubstitutionCipher.encode(\"123\",\"bcdefghijklmnopqrstuvwxyza\"), \"123\");\n        assertEquals(SimpleSubstitutionCipher.encode(\"Hello, World!\",\"bcdefghijklmnopqrstuvwxyza\"), \"Ifmmp, Xpsme!\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        String inputMessage = \"Hello World!\";\n        String cipher = \"xkmlozyirwgb\";\n        String expectedEncodedMessage = \"Xiyyg Dvomk!\";\n        \n        // Call the method under test\n        String result = SimpleSubstitutionCipher.encode(inputMessage, cipher);\n        \n        // Verify the result\n        assertEquals(expectedEncodedMessage, result);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    \n    @Test\n    public void encodeTest() {\n        // Test for lowercase encoding\n        assertEquals(\"bdc\", SimpleSubstitutionCipher.encode(\"abc\", \"bca\"));\n        // Test for uppercase encoding\n        assertEquals(\"BDC\", SimpleSubstitutionCipher.encode(\"ABC\", \"bca\"));\n        // Test for mixed case encoding\n        assertEquals(\"BdC\", SimpleSubstitutionCipher.encode(\"AbC\", \"bca\"));\n        // Test for non-alphabetic characters\n        assertEquals(\"BdC123\", SimpleSubstitutionCipher.encode(\"AbC123\", \"bca\"));\n        // Test for empty message\n        assertEquals(\"\", SimpleSubstitutionCipher.encode(\"\", \"bca\"));\n        // Test for empty cipher (should return original message)\n        assertEquals(\"abc\", SimpleSubstitutionCipher.encode(\"abc\", \"\"));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    private static final String SAMPLE_CIPHER = \"bcdefghijklmnopqrstuvwxyza\";\n\n    @Test\n    public void encodeTest() {\n        // Testing with a lowercase message\n        String message = \"hello\";\n        String expectedEncodedMessage = \"ifmmp\";\n        String actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n\n        // Testing with an uppercase message\n        message = \"HELLO\";\n        expectedEncodedMessage = \"IFMMP\";\n        actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n\n        // Testing with a mixed case message\n        message = \"Hello World\";\n        expectedEncodedMessage = \"Ifmmp Xpsme\";\n        actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n\n        // Testing with non-alphabetic characters\n        message = \"hello123\";\n        expectedEncodedMessage = \"ifmmp123\";\n        actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n\n        // Testing with an empty string\n        message = \"\";\n        expectedEncodedMessage = \"\";\n        actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n\n        // Testing with a full alphabet\n        message = \"abcdefghijklmnopqrstuvwxyz\";\n        expectedEncodedMessage = \"bcdefghijklmnopqrstuvwxyza\";\n        actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n\n        // Testing with full Capital alphabet\n        message = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        expectedEncodedMessage = \"BCDEFGHIJKLMNOPQRSTUVWXYZA\";\n        actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        // Arrange\n        String originalMessage = \"Hello World!\";\n        String cipher = \"bcdefghijklmnopqrstuvwxyza\";\n        String expectedEncodedMessage = \"Ifmmp Xpsme!\";\n\n        // Act\n        String actualEncodedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipher);\n\n        // Assert\n        assertEquals(expectedEncodedMessage, actualEncodedMessage, \"The encoded message does not match the expected output.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    \n    @Test\n    public void encodeTest() {\n        // set up\n        String message = \"Hello, World!\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        \n        // execute\n        String encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);\n\n        // assert\n        String expectedEncodedMessage = \"Ifmmp, Xpsme!\";\n        assertEquals(expectedEncodedMessage, encodedMessage, \"The encoded message does not match the expected output.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        // Set up the sample message and corresponding cipher\n        String sampleMessage = \"Hello World!\";\n        String cipherSmall = \"xoyqmcgrukswaflnthdjpzibev\";\n        // Expected encoded message should be provided here (assuming correct cipher provided)\n        String expectedEncodedMessage = \"Ebiil Tloia!\"; // This encoding assumes that 'h' maps to 'e', etc.\n        \n        // Use the SimpleSubstitutionCipher's encode method to obtain the actual encoded message\n        String actualEncodedMessage = SimpleSubstitutionCipher.encode(sampleMessage, cipherSmall);\n\n        // Assert that the actual encoded message matches the expected one\n        assertEquals(expectedEncodedMessage, actualEncodedMessage, \n            \"The encoded message does not match the expected output.\");\n    }\n}"
    ]
}