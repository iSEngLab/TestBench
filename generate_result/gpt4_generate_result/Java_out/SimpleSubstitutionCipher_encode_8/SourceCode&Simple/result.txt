Source code: 


public static String encode(String message, String cipherSmall) {
    StringBuilder encoded = new StringBuilder();

    // This map is used to encode
    Map<Character, Character> cipherMap = new HashMap<>();

    char beginSmallLetter = 'a';
    char beginCapitalLetter = 'A';

    cipherSmall = cipherSmall.toLowerCase();
    String cipherCapital = cipherSmall.toUpperCase();

    // To handle Small and Capital letters
    for (int i = 0; i < cipherSmall.length(); i++) {
        cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));
        cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));
    }

    for (int i = 0; i < message.length(); i++) {
        if (Character.isAlphabetic(message.charAt(i))) {
            encoded.append(cipherMap.get(message.charAt(i)));
        } else {
            encoded.append(message.charAt(i));
        }
    }

    return encoded.toString();
}



No.1 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        // Example test case with a simple cipher mapping (a->b, b->c, ... z->a)
        String message = "The quick brown fox jumps over the lazy dog!";
        String cipher = "bcdefghijklmnopqrstuvwxyza";
        
        // Expected result using the above example cipher mapping
        String expectedEncodedMessage = "Uif rvjdl cspxo gpy kvnqt pwfs uif mbaz eph!";
        
        // Testing the encode method
        String actualEncodedMessage = SimpleSubstitutionCipher.encode(message, cipher);
        assertEquals(expectedEncodedMessage, actualEncodedMessage, "Encoded message should match the expected result");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void encodeTest() {
        // Arrange
        String message = "Hello, World!";
        String cipherSmall = "bcdefghijklmnopqrstuvwxyza";
        
        // Expected output is based on the given cipher where 'a' -> 'b', 'b' -> 'c', etc.
        String expected = "Ifmmp, Xpsme!";
        
        // Act
        String encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);
        
        // Assert
        assertEquals(expected, encodedMessage, "The encoded message should match the expected output.");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class SimpleSubstitutionCipherTest {

    @Test
    public void encodeTest() {
        // Arrange
        String message = "Hello World!";
        String cipherSmall = "bcdefghijklmnopqrstuvwxyza";
        String expectedEncodedMessage = "Ifmmp Xpsme!";

        // Act
        String encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);

        // Assert
        assertEquals(expectedEncodedMessage, encodedMessage, "Encoded message should match the expected result.");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void encodeTest() {
        // Test cases
        assertEquals(SimpleSubstitutionCipher.encode("hello","bcdefghijklmnopqrstuvwxyza"), "ifmmp");
        assertEquals(SimpleSubstitutionCipher.encode("HELLO","bcdefghijklmnopqrstuvwxyza"), "IFMMP");
        assertEquals(SimpleSubstitutionCipher.encode("hello world","bcdefghijklmnopqrstuvwxyza"), "ifmmp xpsme");
        assertEquals(SimpleSubstitutionCipher.encode("HELLO WORLD","bcdefghijklmnopqrstuvwxyza"), "IFMMP XPSME");
        assertEquals(SimpleSubstitutionCipher.encode("123","bcdefghijklmnopqrstuvwxyza"), "123");
        assertEquals(SimpleSubstitutionCipher.encode("Hello, World!","bcdefghijklmnopqrstuvwxyza"), "Ifmmp, Xpsme!");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void encodeTest() {
        String inputMessage = "Hello World!";
        String cipher = "xkmlozyirwgb";
        String expectedEncodedMessage = "Xiyyg Dvomk!";
        
        // Call the method under test
        String result = SimpleSubstitutionCipher.encode(inputMessage, cipher);
        
        // Verify the result
        assertEquals(expectedEncodedMessage, result);
    }
}


No.6 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    
    @Test
    public void encodeTest() {
        // Test for lowercase encoding
        assertEquals("bdc", SimpleSubstitutionCipher.encode("abc", "bca"));
        // Test for uppercase encoding
        assertEquals("BDC", SimpleSubstitutionCipher.encode("ABC", "bca"));
        // Test for mixed case encoding
        assertEquals("BdC", SimpleSubstitutionCipher.encode("AbC", "bca"));
        // Test for non-alphabetic characters
        assertEquals("BdC123", SimpleSubstitutionCipher.encode("AbC123", "bca"));
        // Test for empty message
        assertEquals("", SimpleSubstitutionCipher.encode("", "bca"));
        // Test for empty cipher (should return original message)
        assertEquals("abc", SimpleSubstitutionCipher.encode("abc", ""));
    }
}


No.7 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    private static final String SAMPLE_CIPHER = "bcdefghijklmnopqrstuvwxyza";

    @Test
    public void encodeTest() {
        // Testing with a lowercase message
        String message = "hello";
        String expectedEncodedMessage = "ifmmp";
        String actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);
        assertEquals(expectedEncodedMessage, actualEncodedMessage);

        // Testing with an uppercase message
        message = "HELLO";
        expectedEncodedMessage = "IFMMP";
        actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);
        assertEquals(expectedEncodedMessage, actualEncodedMessage);

        // Testing with a mixed case message
        message = "Hello World";
        expectedEncodedMessage = "Ifmmp Xpsme";
        actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);
        assertEquals(expectedEncodedMessage, actualEncodedMessage);

        // Testing with non-alphabetic characters
        message = "hello123";
        expectedEncodedMessage = "ifmmp123";
        actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);
        assertEquals(expectedEncodedMessage, actualEncodedMessage);

        // Testing with an empty string
        message = "";
        expectedEncodedMessage = "";
        actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);
        assertEquals(expectedEncodedMessage, actualEncodedMessage);

        // Testing with a full alphabet
        message = "abcdefghijklmnopqrstuvwxyz";
        expectedEncodedMessage = "bcdefghijklmnopqrstuvwxyza";
        actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);
        assertEquals(expectedEncodedMessage, actualEncodedMessage);

        // Testing with full Capital alphabet
        message = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        expectedEncodedMessage = "BCDEFGHIJKLMNOPQRSTUVWXYZA";
        actualEncodedMessage = SimpleSubstitutionCipher.encode(message, SAMPLE_CIPHER);
        assertEquals(expectedEncodedMessage, actualEncodedMessage);
    }
}


No.8 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        // Arrange
        String originalMessage = "Hello World!";
        String cipher = "bcdefghijklmnopqrstuvwxyza";
        String expectedEncodedMessage = "Ifmmp Xpsme!";

        // Act
        String actualEncodedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipher);

        // Assert
        assertEquals(expectedEncodedMessage, actualEncodedMessage, "The encoded message does not match the expected output.");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    
    @Test
    public void encodeTest() {
        // set up
        String message = "Hello, World!";
        String cipherSmall = "bcdefghijklmnopqrstuvwxyza";
        
        // execute
        String encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);

        // assert
        String expectedEncodedMessage = "Ifmmp, Xpsme!";
        assertEquals(expectedEncodedMessage, encodedMessage, "The encoded message does not match the expected output.");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        // Set up the sample message and corresponding cipher
        String sampleMessage = "Hello World!";
        String cipherSmall = "xoyqmcgrukswaflnthdjpzibev";
        // Expected encoded message should be provided here (assuming correct cipher provided)
        String expectedEncodedMessage = "Ebiil Tloia!"; // This encoding assumes that 'h' maps to 'e', etc.
        
        // Use the SimpleSubstitutionCipher's encode method to obtain the actual encoded message
        String actualEncodedMessage = SimpleSubstitutionCipher.encode(sampleMessage, cipherSmall);

        // Assert that the actual encoded message matches the expected one
        assertEquals(expectedEncodedMessage, actualEncodedMessage, 
            "The encoded message does not match the expected output.");
    }
}


