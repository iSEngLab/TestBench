{
    "project_name": "Java",
    "file_name": "SimpleSubstitutionCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/SimpleSubstitutionCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Encrypt text by replacing each element with its opposite character.\n     *\n     * @return Encrypted message\n     */",
    "source_code": "\npublic static String encode(String message, String cipherSmall) {\n    StringBuilder encoded = new StringBuilder();\n\n    // This map is used to encode\n    Map<Character, Character> cipherMap = new HashMap<>();\n\n    char beginSmallLetter = 'a';\n    char beginCapitalLetter = 'A';\n\n    cipherSmall = cipherSmall.toLowerCase();\n    String cipherCapital = cipherSmall.toUpperCase();\n\n    // To handle Small and Capital letters\n    for (int i = 0; i < cipherSmall.length(); i++) {\n        cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));\n        cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));\n    }\n\n    for (int i = 0; i < message.length(); i++) {\n        if (Character.isAlphabetic(message.charAt(i))) {\n            encoded.append(cipherMap.get(message.charAt(i)));\n        } else {\n            encoded.append(message.charAt(i));\n        }\n    }\n\n    return encoded.toString();\n}\n",
    "class_name": "SimpleSubstitutionCipher",
    "method_name": "encode",
    "arguments": [
        "String message",
        "String cipherSmall"
    ],
    "generate_test": [
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        // Input for encode method\n        String message = \"Hello World!\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        \n        // Expected result after encoding\n        String expectedEncoded = \"Ifmmp Xpsme!\";\n        \n        // Actual result from encode method\n        String actualEncoded = SimpleSubstitutionCipher.encode(message, cipherSmall);\n        \n        // Assertion to make sure actual result matches the expected\n        assertEquals(expectedEncoded, actualEncoded, \"The encoded string does not match the expected output.\");\n    }\n\n    // Static Nested Class to simulate the actual source code as provided:\n    public static class SimpleSubstitutionCipher {\n        public static String encode(String message, String cipherSmall) {\n            StringBuilder encoded = new StringBuilder();\n\n            // This map is used to encode\n            Map<Character, Character> cipherMap = new HashMap<>();\n\n            char beginSmallLetter = 'a';\n            char beginCapitalLetter = 'A';\n\n            cipherSmall = cipherSmall.toLowerCase();\n            String cipherCapital = cipherSmall.toUpperCase();\n\n            // To handle Small and Capital letters\n            for (int i = 0; i < cipherSmall.length(); i++) {\n                cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));\n                cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));\n            }\n\n            for (int i = 0; i < message.length(); i++) {\n                if (Character.isAlphabetic(message.charAt(i))) {\n                    encoded.append(cipherMap.get(message.charAt(i)));\n                } else {\n                    encoded.append(message.charAt(i));\n                }\n            }\n\n            return encoded.toString();\n        }\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    // Method under test\n    @Test\n    public void encodeTest() {\n        // Provide a cipher for testing\n        String cipher = \"bcdefghijklmnopqrstuvwxyza\";\n        \n        // Test encoding with the provided cipher\n        // Expected result is the message encoded with the cipher\n        \n        // Test 1: Plain lowercase\n        assertEquals(\"cdefg\", YourClassName.encode(\"abcde\", cipher), \"Encode lowercase failed\");\n        \n        // Test 2: Plain uppercase\n        assertEquals(\"CDEFG\", YourClassName.encode(\"ABCDE\", cipher), \"Encode uppercase failed\");\n        \n        // Test 3: Combination of upper and lower case\n        assertEquals(\"CdEfG\", YourClassName.encode(\"AbCdE\", cipher), \"Encode mixed case failed\");\n        \n        // Test 4: Non-alphabetic characters\n        assertEquals(\"C3f#G\", YourClassName.encode(\"A3c#E\", cipher), \"Encode with non-alphabetic characters failed\");\n        \n        // Test 5: Empty message\n        assertEquals(\"\", YourClassName.encode(\"\", cipher), \"Encode empty message failed\");\n        \n        // Test 6: Cipher that shifts characters by 1 (a->b, b->c, ... z->a)\n        assertEquals(\"b\", YourClassName.encode(\"a\", cipher), \"Encode with single character failed\");\n        \n        // Test 7: Message with spaces\n        assertEquals(\"cd fg\", YourClassName.encode(\"ab de\", cipher), \"Encode message with spaces failed\");\n        \n        // (Additional tests can be added if necessary)\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    \n    @Test\n    public void encodeTest() {\n        // Example cipher, it is assumed to have 26 characters corresponding to a-z letters\n        String cipher = \"bcdefghijklmnopqrstuvwxyza\";\n        \n        // Test cases with expected outcomes\n        String result1 = SimpleSubstitutionCipher.encode(\"hello\", cipher);\n        assertEquals(\"ifmmp\", result1);\n        \n        String result2 = SimpleSubstitutionCipher.encode(\"HELLO\", cipher);\n        assertEquals(\"IFMMP\", result2);\n        \n        String result3 = SimpleSubstitutionCipher.encode(\"Hello World!\", cipher);\n        assertEquals(\"Ifmmp Xpsme!\", result3);\n        \n        String result4 = SimpleSubstitutionCipher.encode(\"\", cipher);\n        assertEquals(\"\", result4);\n    }\n\n    // Optional: Add more test cases to test edge cases and special input\n    // ...\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        // Test with a simple case\n        String message1 = \"hello\";\n        String cipher1 = \"bcdefghijklmnopqrstuvwxyza\";\n        String encoded1 = SimpleSubstitutionCipher.encode(message1, cipher1);\n        assertEquals(\"ifmmp\", encoded1);\n\n        // Test with mixed case\n        String message2 = \"Hello World\";\n        String cipher2 = \"bcdefghijklmnopqrstuvwxyza\";\n        String encoded2 = SimpleSubstitutionCipher.encode(message2, cipher2);\n        assertEquals(\"Ifmmp Xorld\", encoded2);\n        \n        // Test with punctuation\n        String message3 = \"Hello, World!\";\n        String cipher3 = \"bcdefghijklmnopqrstuvwxyza\";\n        String encoded3 = SimpleSubstitutionCipher.encode(message3, cipher3);\n        assertEquals(\"Ifmmp, Xorld!\", encoded3);\n        \n        // Test with numbers (should remain unchanged)\n        String message4 = \"Hello World 123\";\n        String cipher4 = \"bcdefghijklmnopqrstuvwxyza\";\n        String encoded4 = SimpleSubstitutionCipher.encode(message4, cipher4);\n        assertEquals(\"Ifmmp Xorld 123\", encoded4);\n        \n        // Test with an empty string\n        String message5 = \"\";\n        String cipher5 = \"bcdefghijklmnopqrstuvwxyza\";\n        String encoded5 = SimpleSubstitutionCipher.encode(message5, cipher5);\n        assertEquals(\"\", encoded5);\n        \n        // Test with a full alphabet\n        String message6 = \"abcdefghijklmnopqrstuvwxyz\";\n        String cipher6 = \"bcdefghijklmnopqrstuvwxyza\";\n        String encoded6 = SimpleSubstitutionCipher.encode(message6, cipher6);\n        assertEquals(\"bcdefghijklmnopqrstuvwxyza\", encoded6);\n        \n        // Test with a full alphabet in uppercase\n        String message7 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        String cipher7 = \"bcdefghijklmnopqrstuvwxyza\";\n        String encoded7 = SimpleSubstitutionCipher.encode(message7, cipher7);\n        assertEquals(\"BCDEFGHIJKLMNOPQRSTUVWXYZA\", encoded7);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String message = \"Hello World!\";\n        String cipherSmall = \"xkmflghjwqbn\";\n        String expected = \"Tebbo Wkwld!\";\n        \n        assertEquals(expected, SimpleSubstitutionCipher.encode(message, cipherSmall), \"The encoded message is not as expected.\");\n\n        // To test edge cases\n        String messageEmpty = \"\";\n        String expectedEmpty = \"\";\n        assertEquals(expectedEmpty, SimpleSubstitutionCipher.encode(messageEmpty, cipherSmall), \"Encoding an empty message should return an empty string.\");\n\n        String noAlphaMessage = \"1234!@#$\";\n        String expectedNoAlpha = \"1234!@#$\";\n        assertEquals(expectedNoAlpha, SimpleSubstitutionCipher.encode(noAlphaMessage, cipherSmall), \"A message with no alphabetic characters should remain unchanged.\");\n\n        String allAlphaMessage = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n        String expectedAllAlpha = \"XKMFLGHJWQBNXKMFLGHJWQBNxkmflghjwqbnxkmflghjwqbn\";\n        assertEquals(expectedAllAlpha, SimpleSubstitutionCipher.encode(allAlphaMessage, cipherSmall), \"A message with all alphabetic characters should be completely encoded.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    \n    // Assuming encode method exists within the same class where test is written\n    public static String encode(String message, String cipherSmall) {\n        // implementation from provided JAVA code\n    }\n    \n    @Test\n    public void encodeTest() {\n        String message = \"Hello World!\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        String expectedEncodedMessage = \"Ifmmp Xnswd!\";\n        String actualEncodedMessage = encode(message, cipherSmall);\n        \n        assertEquals(expectedEncodedMessage, actualEncodedMessage,\n                \"The encoded message did not match the expected output\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void encodeTest() {\n        String original = \"Hello World!\";\n        String cipher = \"bcdefghijklmnopqrstuvwxyza\";\n        String expectedEncoded = \"Ifmmp Xnswd!\";\n\n        String actualEncoded = SimpleSubstitutionCipher.encode(original, cipher);\n        assertEquals(expectedEncoded, actualEncoded, \"The encoded string does not match the expected output.\");\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n    \n    @Test\n    public void encodeTest() {\n        assertEquals(\"bcde\", SimpleSubstitutionCipher.encode(\"abcd\", \"bcdefghijklmnopqrstuvwxyz\"));\n        assertEquals(\"BcdE\", SimpleSubstitutionCipher.encode(\"AbcD\", \"bcdefghijklmnopqrstuvwxyz\"));\n        assertEquals(\"bCdE\", SimpleSubstitutionCipher.encode(\"aBcD\", \"bcdefghijklmnopqrstuvwxyz\"));\n        assertEquals(\"yzab\", SimpleSubstitutionCipher.encode(\"xyza\", \"bcdefghijklmnopqrstuvwxyz\"));\n        assertEquals(\"Ifmmp!Xpsme\", SimpleSubstitutionCipher.encode(\"Hello World\", \"bcdefghijklmnopqrstuvwxyza\"));\n        assertEquals(\"Hello World!\", SimpleSubstitutionCipher.encode(\"Hello World!\", \"abcdefghijklmnopqrstuvwxyz\"));\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    // Assuming the encode method is within a class called SimpleSubstitutionCipher\n    @Test\n    public void encodeTest() {\n        String originalMessage = \"Hello, World!\";\n        String cipherSmall = \"bcdefghijklmnoprstuvwxyz\";\n        String encodedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);\n        String expectedEncodedMessage = \"Ifmmp, Xpsme!\"; // Based on the provided cipher\n        assertEquals(expectedEncodedMessage, encodedMessage);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleSubstitutionCipherTest {\n\n    @Test\n    public void encodeTest() {\n        final String inputMessage = \"Hello World!\";\n        final String cipherString = \"bdfhjlnprtvxzacegikmoqsuwy\";\n        final String expectedEncodedMessage = \"Hfnos Wsnlc!\";\n\n        String actualEncodedMessage = SimpleSubstitutionCipher.encode(inputMessage, cipherString);\n        assertEquals(expectedEncodedMessage, actualEncodedMessage);\n    }\n}"
    ]
}