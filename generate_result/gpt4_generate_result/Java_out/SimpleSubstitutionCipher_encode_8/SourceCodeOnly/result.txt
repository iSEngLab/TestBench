Source code: 


public static String encode(String message, String cipherSmall) {
    StringBuilder encoded = new StringBuilder();

    // This map is used to encode
    Map<Character, Character> cipherMap = new HashMap<>();

    char beginSmallLetter = 'a';
    char beginCapitalLetter = 'A';

    cipherSmall = cipherSmall.toLowerCase();
    String cipherCapital = cipherSmall.toUpperCase();

    // To handle Small and Capital letters
    for (int i = 0; i < cipherSmall.length(); i++) {
        cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));
        cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));
    }

    for (int i = 0; i < message.length(); i++) {
        if (Character.isAlphabetic(message.charAt(i))) {
            encoded.append(cipherMap.get(message.charAt(i)));
        } else {
            encoded.append(message.charAt(i));
        }
    }

    return encoded.toString();
}



No.1 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class SimpleSubstitutionCipherTest {

    @Test
    public void encodeTest() {
        // Input for encode method
        String message = "Hello World!";
        String cipherSmall = "bcdefghijklmnopqrstuvwxyza";
        
        // Expected result after encoding
        String expectedEncoded = "Ifmmp Xpsme!";
        
        // Actual result from encode method
        String actualEncoded = SimpleSubstitutionCipher.encode(message, cipherSmall);
        
        // Assertion to make sure actual result matches the expected
        assertEquals(expectedEncoded, actualEncoded, "The encoded string does not match the expected output.");
    }

    // Static Nested Class to simulate the actual source code as provided:
    public static class SimpleSubstitutionCipher {
        public static String encode(String message, String cipherSmall) {
            StringBuilder encoded = new StringBuilder();

            // This map is used to encode
            Map<Character, Character> cipherMap = new HashMap<>();

            char beginSmallLetter = 'a';
            char beginCapitalLetter = 'A';

            cipherSmall = cipherSmall.toLowerCase();
            String cipherCapital = cipherSmall.toUpperCase();

            // To handle Small and Capital letters
            for (int i = 0; i < cipherSmall.length(); i++) {
                cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));
                cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));
            }

            for (int i = 0; i < message.length(); i++) {
                if (Character.isAlphabetic(message.charAt(i))) {
                    encoded.append(cipherMap.get(message.charAt(i)));
                } else {
                    encoded.append(message.charAt(i));
                }
            }

            return encoded.toString();
        }
    }
}


No.2 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    // Method under test
    @Test
    public void encodeTest() {
        // Provide a cipher for testing
        String cipher = "bcdefghijklmnopqrstuvwxyza";
        
        // Test encoding with the provided cipher
        // Expected result is the message encoded with the cipher
        
        // Test 1: Plain lowercase
        assertEquals("cdefg", YourClassName.encode("abcde", cipher), "Encode lowercase failed");
        
        // Test 2: Plain uppercase
        assertEquals("CDEFG", YourClassName.encode("ABCDE", cipher), "Encode uppercase failed");
        
        // Test 3: Combination of upper and lower case
        assertEquals("CdEfG", YourClassName.encode("AbCdE", cipher), "Encode mixed case failed");
        
        // Test 4: Non-alphabetic characters
        assertEquals("C3f#G", YourClassName.encode("A3c#E", cipher), "Encode with non-alphabetic characters failed");
        
        // Test 5: Empty message
        assertEquals("", YourClassName.encode("", cipher), "Encode empty message failed");
        
        // Test 6: Cipher that shifts characters by 1 (a->b, b->c, ... z->a)
        assertEquals("b", YourClassName.encode("a", cipher), "Encode with single character failed");
        
        // Test 7: Message with spaces
        assertEquals("cd fg", YourClassName.encode("ab de", cipher), "Encode message with spaces failed");
        
        // (Additional tests can be added if necessary)
    }
}


No.3 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    
    @Test
    public void encodeTest() {
        // Example cipher, it is assumed to have 26 characters corresponding to a-z letters
        String cipher = "bcdefghijklmnopqrstuvwxyza";
        
        // Test cases with expected outcomes
        String result1 = SimpleSubstitutionCipher.encode("hello", cipher);
        assertEquals("ifmmp", result1);
        
        String result2 = SimpleSubstitutionCipher.encode("HELLO", cipher);
        assertEquals("IFMMP", result2);
        
        String result3 = SimpleSubstitutionCipher.encode("Hello World!", cipher);
        assertEquals("Ifmmp Xpsme!", result3);
        
        String result4 = SimpleSubstitutionCipher.encode("", cipher);
        assertEquals("", result4);
    }

    // Optional: Add more test cases to test edge cases and special input
    // ...
}


No.4 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void encodeTest() {
        // Test with a simple case
        String message1 = "hello";
        String cipher1 = "bcdefghijklmnopqrstuvwxyza";
        String encoded1 = SimpleSubstitutionCipher.encode(message1, cipher1);
        assertEquals("ifmmp", encoded1);

        // Test with mixed case
        String message2 = "Hello World";
        String cipher2 = "bcdefghijklmnopqrstuvwxyza";
        String encoded2 = SimpleSubstitutionCipher.encode(message2, cipher2);
        assertEquals("Ifmmp Xorld", encoded2);
        
        // Test with punctuation
        String message3 = "Hello, World!";
        String cipher3 = "bcdefghijklmnopqrstuvwxyza";
        String encoded3 = SimpleSubstitutionCipher.encode(message3, cipher3);
        assertEquals("Ifmmp, Xorld!", encoded3);
        
        // Test with numbers (should remain unchanged)
        String message4 = "Hello World 123";
        String cipher4 = "bcdefghijklmnopqrstuvwxyza";
        String encoded4 = SimpleSubstitutionCipher.encode(message4, cipher4);
        assertEquals("Ifmmp Xorld 123", encoded4);
        
        // Test with an empty string
        String message5 = "";
        String cipher5 = "bcdefghijklmnopqrstuvwxyza";
        String encoded5 = SimpleSubstitutionCipher.encode(message5, cipher5);
        assertEquals("", encoded5);
        
        // Test with a full alphabet
        String message6 = "abcdefghijklmnopqrstuvwxyz";
        String cipher6 = "bcdefghijklmnopqrstuvwxyza";
        String encoded6 = SimpleSubstitutionCipher.encode(message6, cipher6);
        assertEquals("bcdefghijklmnopqrstuvwxyza", encoded6);
        
        // Test with a full alphabet in uppercase
        String message7 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String cipher7 = "bcdefghijklmnopqrstuvwxyza";
        String encoded7 = SimpleSubstitutionCipher.encode(message7, cipher7);
        assertEquals("BCDEFGHIJKLMNOPQRSTUVWXYZA", encoded7);
    }
}


No.5 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        String message = "Hello World!";
        String cipherSmall = "xkmflghjwqbn";
        String expected = "Tebbo Wkwld!";
        
        assertEquals(expected, SimpleSubstitutionCipher.encode(message, cipherSmall), "The encoded message is not as expected.");

        // To test edge cases
        String messageEmpty = "";
        String expectedEmpty = "";
        assertEquals(expectedEmpty, SimpleSubstitutionCipher.encode(messageEmpty, cipherSmall), "Encoding an empty message should return an empty string.");

        String noAlphaMessage = "1234!@#$";
        String expectedNoAlpha = "1234!@#$";
        assertEquals(expectedNoAlpha, SimpleSubstitutionCipher.encode(noAlphaMessage, cipherSmall), "A message with no alphabetic characters should remain unchanged.");

        String allAlphaMessage = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        String expectedAllAlpha = "XKMFLGHJWQBNXKMFLGHJWQBNxkmflghjwqbnxkmflghjwqbn";
        assertEquals(expectedAllAlpha, SimpleSubstitutionCipher.encode(allAlphaMessage, cipherSmall), "A message with all alphabetic characters should be completely encoded.");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    
    // Assuming encode method exists within the same class where test is written
    public static String encode(String message, String cipherSmall) {
        // implementation from provided JAVA code
    }
    
    @Test
    public void encodeTest() {
        String message = "Hello World!";
        String cipherSmall = "bcdefghijklmnopqrstuvwxyza";
        String expectedEncodedMessage = "Ifmmp Xnswd!";
        String actualEncodedMessage = encode(message, cipherSmall);
        
        assertEquals(expectedEncodedMessage, actualEncodedMessage,
                "The encoded message did not match the expected output");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    @Test
    public void encodeTest() {
        String original = "Hello World!";
        String cipher = "bcdefghijklmnopqrstuvwxyza";
        String expectedEncoded = "Ifmmp Xnswd!";

        String actualEncoded = SimpleSubstitutionCipher.encode(original, cipher);
        assertEquals(expectedEncoded, actualEncoded, "The encoded string does not match the expected output.");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {
    
    @Test
    public void encodeTest() {
        assertEquals("bcde", SimpleSubstitutionCipher.encode("abcd", "bcdefghijklmnopqrstuvwxyz"));
        assertEquals("BcdE", SimpleSubstitutionCipher.encode("AbcD", "bcdefghijklmnopqrstuvwxyz"));
        assertEquals("bCdE", SimpleSubstitutionCipher.encode("aBcD", "bcdefghijklmnopqrstuvwxyz"));
        assertEquals("yzab", SimpleSubstitutionCipher.encode("xyza", "bcdefghijklmnopqrstuvwxyz"));
        assertEquals("Ifmmp!Xpsme", SimpleSubstitutionCipher.encode("Hello World", "bcdefghijklmnopqrstuvwxyza"));
        assertEquals("Hello World!", SimpleSubstitutionCipher.encode("Hello World!", "abcdefghijklmnopqrstuvwxyz"));
    }
}


No.9 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    // Assuming the encode method is within a class called SimpleSubstitutionCipher
    @Test
    public void encodeTest() {
        String originalMessage = "Hello, World!";
        String cipherSmall = "bcdefghijklmnoprstuvwxyz";
        String encodedMessage = SimpleSubstitutionCipher.encode(originalMessage, cipherSmall);
        String expectedEncodedMessage = "Ifmmp, Xpsme!"; // Based on the provided cipher
        assertEquals(expectedEncodedMessage, encodedMessage);
    }
}


No.10 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SimpleSubstitutionCipherTest {

    @Test
    public void encodeTest() {
        final String inputMessage = "Hello World!";
        final String cipherString = "bdfhjlnprtvxzacegikmoqsuwy";
        final String expectedEncodedMessage = "Hfnos Wsnlc!";

        String actualEncodedMessage = SimpleSubstitutionCipher.encode(inputMessage, cipherString);
        assertEquals(expectedEncodedMessage, actualEncodedMessage);
    }
}


