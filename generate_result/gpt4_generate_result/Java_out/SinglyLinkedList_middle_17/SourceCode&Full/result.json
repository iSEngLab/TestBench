{
    "project_name": "Java",
    "file_name": "SinglyLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/SinglyLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * Return the node in the middle of the list\n     * If the length of the list is even then return item number length/2\n     * @return middle node of the list\n     */",
    "source_code": "\npublic Node middle() {\n    if (head == null) {\n        return null;\n    }\n    Node firstCounter = head;\n    Node secondCounter = firstCounter.next;\n    while (secondCounter != null && secondCounter.next != null) {\n        firstCounter = firstCounter.next;\n        secondCounter = secondCounter.next.next;\n    }\n    return firstCounter;\n}\n",
    "class_name": "SinglyLinkedList",
    "method_name": "middle",
    "arguments": [],
    "generate_test": [
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        assertNull(list.middle(), \"Middle of empty list should be null.\");\n\n        list.insertHead(1);\n        assertEquals(1, list.middle().value, \"Middle of single element list should be itself.\");\n\n        list.insertHead(2);\n        assertEquals(1, list.middle().value, \"Middle of 2-element list should be the first element.\");\n\n        list.insertHead(3);\n        assertEquals(2, list.middle().value, \"Middle of 3-element list should be the second element.\");\n        \n        list.insertHead(4);\n        assertEquals(2, list.middle().value, \"Middle of 4-element list should be the second element.\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    \n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        assertNull(list.middle(), \"Middle of empty list should be null.\");\n\n        // List with one element\n        list.insertHead(1);\n        assertEquals(1, list.middle().value, \"Middle of single-element list should be the element itself.\");\n\n        // List with two elements\n        list.insertHead(2);\n        assertEquals(2, list.middle().value, \"Middle of two-element list should be the first element.\");\n\n        // List with odd number of elements\n        list.insertHead(3);\n        assertEquals(2, list.middle().value, \"Middle of list with odd size should be the middle element.\");\n        \n        // List with even number of elements\n        list.insertHead(4);\n        assertEquals(2, list.middle().value, \"Middle of list with even size should be the first element of the second half.\");\n        \n        // Adding more nodes to test the middle on larger dataset\n        list.insertHead(5);\n        list.insertHead(6);\n        assertEquals(3, list.middle().value, \"Middle should be updated with larger list size.\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n\n        // Test empty list\n        assertNull(list.middle(), \"Middle of empty list should be null\");\n\n        // Add elements to the list\n        list.insertHead(1);   // List: 1\n        assertEquals(1, list.middle().value, \"Middle of one element list should be itself\");\n\n        list.insertHead(2);   // List: 2 -> 1\n        assertEquals(2, list.middle().value, \"Middle of two elements list should be the first one\");\n\n        list.insertHead(3);   // List: 3 -> 2 -> 1\n        assertEquals(2, list.middle().value, \"Middle of three elements list should be the middle one\");\n\n        list.insertHead(4);   // List: 4 -> 3 -> 2 -> 1\n        assertEquals(3, list.middle().value, \"Middle of four elements list should be the second one\");\n\n        list.insertHead(5);   // List: 5 -> 4 -> 3 -> 2 -> 1\n        assertEquals(3, list.middle().value, \"Middle of five elements list should be the middle one\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        // Test when list is empty, middle should be null.\n        SinglyLinkedList emptyList = new SinglyLinkedList();\n        assertNull(emptyList.middle());\n\n        // Test when list has only one element, middle should be the head.\n        SinglyLinkedList singleElementList = new SinglyLinkedList();\n        singleElementList.insertHead(1);\n        assertEquals(1, singleElementList.middle().value);\n\n        // Test when list has odd number of elements, middle should be the center element.\n        SinglyLinkedList oddList = new SinglyLinkedList();\n        oddList.insertHead(1);\n        oddList.insertHead(2);\n        oddList.insertHead(3);\n        assertEquals(2, oddList.middle().value);\n\n        // Test when list has even number of elements, middle should be first in the second half.\n        SinglyLinkedList evenList = new SinglyLinkedList();\n        evenList.insertHead(1);\n        evenList.insertHead(2);\n        evenList.insertHead(3);\n        evenList.insertHead(4);\n        assertEquals(3, evenList.middle().value);\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        assertNull(list.middle(), \"The middle of an empty list should be null\");\n\n        // list: [1]\n        list.insert(1);\n        assertEquals(1, list.middle().value, \"The middle of a single-element list should be the element itself\");\n\n        // list: [1, 2]\n        list.insert(2);\n        assertEquals(1, list.middle().value, \"The middle of a two-element list should be the first element\");\n\n        // list: [1, 2, 3]\n        list.insert(3);\n        assertEquals(2, list.middle().value, \"The middle of a three-element list should be the second element\");\n\n        // list: [1, 2, 3, 4]\n        list.insert(4);\n        assertEquals(2, list.middle().value, \"The middle of a four-element list should be the second element\");\n\n        // list: [1, 2, 3, 4, 5]\n        list.insert(5);\n        assertEquals(3, list.middle().value, \"The middle of a five-element list should be the third element\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n\n        // Test for empty list\n        assertNull(list.middle(), \"Middle of empty list should be null\");\n\n        // Test for list with 1 node\n        Node firstNode = new Node(1);\n        list.setHead(firstNode);\n        list.insertHead(1);\n        assertEquals(firstNode, list.middle(), \"Middle of a single-element list should be the element itself\");\n\n        // Test for list with even number of nodes (should return the first middle node)\n        Node secondNode = new Node(2);\n        firstNode.next = secondNode;\n        list.insertHead(2);\n        assertEquals(firstNode, list.middle(), \"Middle of two-element list should be the first element\");\n\n        // Test for list with odd number of nodes\n        Node thirdNode = new Node(3);\n        Node fourthNode = new Node(4);\n        secondNode.next = thirdNode;\n        thirdNode.next = fourthNode;\n        list.insertHead(3);\n        assertEquals(secondNode, list.middle(), \"Middle of a three-element list should be the second element\");\n\n        // Test for larger list of elements\n        for (int i = 5; i <= 10; i++) {\n            list.insert(i);\n        }\n        // Now the list has elements {3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n        Node expectedMiddle = list.getHead();\n        for (int i = 0; i < 5; i++) { // move to the 6th element for even-number list middle check\n            expectedMiddle = expectedMiddle.next;\n        }\n        assertEquals(expectedMiddle, list.middle(), \"Middle of larger list did not match the expected node\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        assertNull(list.middle(), \"Middle of empty list should be null.\");\n\n        // Adding elements to the list: [1]\n        list.insertHead(1);\n        assertEquals(list.middle().value, 1, \"Middle of [1] should be 1.\");\n\n        // Adding elements to the list: [1, 2]\n        list.insert(2);\n        assertEquals(list.middle().value, 1, \"Middle of [1, 2] should be 1.\");\n\n        // Adding elements to the list: [1, 2, 3]\n        list.insert(3);\n        assertEquals(list.middle().value, 2, \"Middle of [1, 2, 3] should be 2.\");\n\n        // Adding elements to the list: [1, 2, 3, 4]\n        list.insert(4);\n        assertEquals(list.middle().value, 2, \"Middle of [1, 2, 3, 4] should be 2.\");\n\n        // Adding elements to the list: [1, 2, 3, 4, 5]\n        list.insert(5);\n        assertEquals(list.middle().value, 3, \"Middle of [1, 2, 3, 4, 5] should be 3.\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        // Create an empty SinglyLinkedList\n        SinglyLinkedList list = new SinglyLinkedList();\n        assertNull(list.middle(), \"Middle of empty list should be null.\");\n\n        // Add elements to the list\n        list.insertHead(1);\n        assertEquals(1, list.middle().value, \"Middle of a single-element list should be the element itself.\");\n\n        // Add another element and test the middle; list is now [2, 1]\n        list.insertHead(2);\n        assertEquals(1, list.middle().value, \"Middle of a two-element list should be the second element.\");\n        \n        // Add third element; list should now be [3, 2, 1]\n        list.insertHead(3);\n        assertEquals(2, list.middle().value, \"Middle of a three-element list should be the second element.\");\n\n        // Add more elements and check the middle accordingly\n        list.insertHead(4);\n        list.insertHead(5);\n        // List is now [5, 4, 3, 2, 1]\n        assertEquals(3, list.middle().value, \"Middle of a five-element list should be the third element.\");\n        \n        // Insert a new head to make the list even-numbered; list is now [6, 5, 4, 3, 2, 1]\n        list.insertHead(6);\n        assertEquals(3, list.middle().value, \"Middle of a six-element list should be the third element.\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n\n        // The list is empty, so the middle should be null\n        assertNull(list.middle(), \"Middle of an empty list should be null\");\n\n        // Add one element; the middle is that element itself\n        list.insert(1);\n        assertEquals(1, list.middle().value, \"Middle of a list with one element should be that element\");\n\n        // Add a second element; now the middle should be the first element\n        list.insert(2);\n        assertEquals(1, list.middle().value, \"Middle of a list with two elements should be the first element\");\n\n        // Add a third element; the middle should now be the second element\n        list.insert(3);\n        assertEquals(2, list.middle().value, \"Middle of a list with three elements should be the second element\");\n\n        // Add additional elements and check if middle is correct\n        list.insert(4);\n        assertEquals(2, list.middle().value, \"Middle of a list with four elements should be the second element\");\n        list.insert(5);\n        assertEquals(3, list.middle().value, \"Middle of a list with five elements should be the third element\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        \n        // Test when list is empty\n        assertNull(list.middle(), \"The middle of an empty list should be null\");\n\n        // Test when list has one element\n        Node singleNode = new Node(1);\n        list.setHead(singleNode);\n        assertEquals(singleNode, list.middle(), \"The middle of a list with one element should be that element\");\n\n        // Test when list has an odd number of elements\n        Node headOdd = new Node(1, new Node(2, new Node(3, new Node(4, new Node(5)))));\n        list.setHead(headOdd);\n        assertEquals(3, list.middle().value, \"The middle of a list with an odd number of elements should be the central element\");\n\n        // Test when list has an even number of elements\n        Node headEven = new Node(1, new Node(2, new Node(3, new Node(4))));\n        list.setHead(headEven);\n        assertEquals(2, list.middle().value, \"The middle of a list with an even number of elements should be the first element of the second half\");\n    }\n}"
    ]
}