Source code: 


public Node middle() {
    if (head == null) {
        return null;
    }
    Node firstCounter = head;
    Node secondCounter = firstCounter.next;
    while (secondCounter != null && secondCounter.next != null) {
        firstCounter = firstCounter.next;
        secondCounter = secondCounter.next.next;
    }
    return firstCounter;
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();
        assertNull(list.middle(), "Middle of empty list should be null.");

        list.insertHead(1);
        assertEquals(1, list.middle().value, "Middle of single element list should be itself.");

        list.insertHead(2);
        assertEquals(1, list.middle().value, "Middle of 2-element list should be the first element.");

        list.insertHead(3);
        assertEquals(2, list.middle().value, "Middle of 3-element list should be the second element.");
        
        list.insertHead(4);
        assertEquals(2, list.middle().value, "Middle of 4-element list should be the second element.");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    
    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();
        assertNull(list.middle(), "Middle of empty list should be null.");

        // List with one element
        list.insertHead(1);
        assertEquals(1, list.middle().value, "Middle of single-element list should be the element itself.");

        // List with two elements
        list.insertHead(2);
        assertEquals(2, list.middle().value, "Middle of two-element list should be the first element.");

        // List with odd number of elements
        list.insertHead(3);
        assertEquals(2, list.middle().value, "Middle of list with odd size should be the middle element.");
        
        // List with even number of elements
        list.insertHead(4);
        assertEquals(2, list.middle().value, "Middle of list with even size should be the first element of the second half.");
        
        // Adding more nodes to test the middle on larger dataset
        list.insertHead(5);
        list.insertHead(6);
        assertEquals(3, list.middle().value, "Middle should be updated with larger list size.");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {

    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();

        // Test empty list
        assertNull(list.middle(), "Middle of empty list should be null");

        // Add elements to the list
        list.insertHead(1);   // List: 1
        assertEquals(1, list.middle().value, "Middle of one element list should be itself");

        list.insertHead(2);   // List: 2 -> 1
        assertEquals(2, list.middle().value, "Middle of two elements list should be the first one");

        list.insertHead(3);   // List: 3 -> 2 -> 1
        assertEquals(2, list.middle().value, "Middle of three elements list should be the middle one");

        list.insertHead(4);   // List: 4 -> 3 -> 2 -> 1
        assertEquals(3, list.middle().value, "Middle of four elements list should be the second one");

        list.insertHead(5);   // List: 5 -> 4 -> 3 -> 2 -> 1
        assertEquals(3, list.middle().value, "Middle of five elements list should be the middle one");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {

    @Test
    public void middleTest() {
        // Test when list is empty, middle should be null.
        SinglyLinkedList emptyList = new SinglyLinkedList();
        assertNull(emptyList.middle());

        // Test when list has only one element, middle should be the head.
        SinglyLinkedList singleElementList = new SinglyLinkedList();
        singleElementList.insertHead(1);
        assertEquals(1, singleElementList.middle().value);

        // Test when list has odd number of elements, middle should be the center element.
        SinglyLinkedList oddList = new SinglyLinkedList();
        oddList.insertHead(1);
        oddList.insertHead(2);
        oddList.insertHead(3);
        assertEquals(2, oddList.middle().value);

        // Test when list has even number of elements, middle should be first in the second half.
        SinglyLinkedList evenList = new SinglyLinkedList();
        evenList.insertHead(1);
        evenList.insertHead(2);
        evenList.insertHead(3);
        evenList.insertHead(4);
        assertEquals(3, evenList.middle().value);
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {

    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();
        assertNull(list.middle(), "The middle of an empty list should be null");

        // list: [1]
        list.insert(1);
        assertEquals(1, list.middle().value, "The middle of a single-element list should be the element itself");

        // list: [1, 2]
        list.insert(2);
        assertEquals(1, list.middle().value, "The middle of a two-element list should be the first element");

        // list: [1, 2, 3]
        list.insert(3);
        assertEquals(2, list.middle().value, "The middle of a three-element list should be the second element");

        // list: [1, 2, 3, 4]
        list.insert(4);
        assertEquals(2, list.middle().value, "The middle of a four-element list should be the second element");

        // list: [1, 2, 3, 4, 5]
        list.insert(5);
        assertEquals(3, list.middle().value, "The middle of a five-element list should be the third element");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {

    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();

        // Test for empty list
        assertNull(list.middle(), "Middle of empty list should be null");

        // Test for list with 1 node
        Node firstNode = new Node(1);
        list.setHead(firstNode);
        list.insertHead(1);
        assertEquals(firstNode, list.middle(), "Middle of a single-element list should be the element itself");

        // Test for list with even number of nodes (should return the first middle node)
        Node secondNode = new Node(2);
        firstNode.next = secondNode;
        list.insertHead(2);
        assertEquals(firstNode, list.middle(), "Middle of two-element list should be the first element");

        // Test for list with odd number of nodes
        Node thirdNode = new Node(3);
        Node fourthNode = new Node(4);
        secondNode.next = thirdNode;
        thirdNode.next = fourthNode;
        list.insertHead(3);
        assertEquals(secondNode, list.middle(), "Middle of a three-element list should be the second element");

        // Test for larger list of elements
        for (int i = 5; i <= 10; i++) {
            list.insert(i);
        }
        // Now the list has elements {3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
        Node expectedMiddle = list.getHead();
        for (int i = 0; i < 5; i++) { // move to the 6th element for even-number list middle check
            expectedMiddle = expectedMiddle.next;
        }
        assertEquals(expectedMiddle, list.middle(), "Middle of larger list did not match the expected node");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();
        assertNull(list.middle(), "Middle of empty list should be null.");

        // Adding elements to the list: [1]
        list.insertHead(1);
        assertEquals(list.middle().value, 1, "Middle of [1] should be 1.");

        // Adding elements to the list: [1, 2]
        list.insert(2);
        assertEquals(list.middle().value, 1, "Middle of [1, 2] should be 1.");

        // Adding elements to the list: [1, 2, 3]
        list.insert(3);
        assertEquals(list.middle().value, 2, "Middle of [1, 2, 3] should be 2.");

        // Adding elements to the list: [1, 2, 3, 4]
        list.insert(4);
        assertEquals(list.middle().value, 2, "Middle of [1, 2, 3, 4] should be 2.");

        // Adding elements to the list: [1, 2, 3, 4, 5]
        list.insert(5);
        assertEquals(list.middle().value, 3, "Middle of [1, 2, 3, 4, 5] should be 3.");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {

    @Test
    public void middleTest() {
        // Create an empty SinglyLinkedList
        SinglyLinkedList list = new SinglyLinkedList();
        assertNull(list.middle(), "Middle of empty list should be null.");

        // Add elements to the list
        list.insertHead(1);
        assertEquals(1, list.middle().value, "Middle of a single-element list should be the element itself.");

        // Add another element and test the middle; list is now [2, 1]
        list.insertHead(2);
        assertEquals(1, list.middle().value, "Middle of a two-element list should be the second element.");
        
        // Add third element; list should now be [3, 2, 1]
        list.insertHead(3);
        assertEquals(2, list.middle().value, "Middle of a three-element list should be the second element.");

        // Add more elements and check the middle accordingly
        list.insertHead(4);
        list.insertHead(5);
        // List is now [5, 4, 3, 2, 1]
        assertEquals(3, list.middle().value, "Middle of a five-element list should be the third element.");
        
        // Insert a new head to make the list even-numbered; list is now [6, 5, 4, 3, 2, 1]
        list.insertHead(6);
        assertEquals(3, list.middle().value, "Middle of a six-element list should be the third element.");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {

    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();

        // The list is empty, so the middle should be null
        assertNull(list.middle(), "Middle of an empty list should be null");

        // Add one element; the middle is that element itself
        list.insert(1);
        assertEquals(1, list.middle().value, "Middle of a list with one element should be that element");

        // Add a second element; now the middle should be the first element
        list.insert(2);
        assertEquals(1, list.middle().value, "Middle of a list with two elements should be the first element");

        // Add a third element; the middle should now be the second element
        list.insert(3);
        assertEquals(2, list.middle().value, "Middle of a list with three elements should be the second element");

        // Add additional elements and check if middle is correct
        list.insert(4);
        assertEquals(2, list.middle().value, "Middle of a list with four elements should be the second element");
        list.insert(5);
        assertEquals(3, list.middle().value, "Middle of a list with five elements should be the third element");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();
        
        // Test when list is empty
        assertNull(list.middle(), "The middle of an empty list should be null");

        // Test when list has one element
        Node singleNode = new Node(1);
        list.setHead(singleNode);
        assertEquals(singleNode, list.middle(), "The middle of a list with one element should be that element");

        // Test when list has an odd number of elements
        Node headOdd = new Node(1, new Node(2, new Node(3, new Node(4, new Node(5)))));
        list.setHead(headOdd);
        assertEquals(3, list.middle().value, "The middle of a list with an odd number of elements should be the central element");

        // Test when list has an even number of elements
        Node headEven = new Node(1, new Node(2, new Node(3, new Node(4))));
        list.setHead(headEven);
        assertEquals(2, list.middle().value, "The middle of a list with an even number of elements should be the first element of the second half");
    }
}


