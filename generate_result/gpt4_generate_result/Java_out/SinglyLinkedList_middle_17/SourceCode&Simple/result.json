{
    "project_name": "Java",
    "file_name": "SinglyLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/SinglyLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * Return the node in the middle of the list\n     * If the length of the list is even then return item number length/2\n     * @return middle node of the list\n     */",
    "source_code": "\npublic Node middle() {\n    if (head == null) {\n        return null;\n    }\n    Node firstCounter = head;\n    Node secondCounter = firstCounter.next;\n    while (secondCounter != null && secondCounter.next != null) {\n        firstCounter = firstCounter.next;\n        secondCounter = secondCounter.next.next;\n    }\n    return firstCounter;\n}\n",
    "class_name": "SinglyLinkedList",
    "method_name": "middle",
    "arguments": [],
    "generate_test": [
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    private SinglyLinkedList list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new SinglyLinkedList();\n    }\n\n    @Test\n    public void middleTest() {\n        // Test the middle method on an empty list\n        assertNull(list.middle(), \"Middle of an empty list should be null.\");\n\n        // Add elements to the list and test the middle again\n        list.insert(1);\n        assertEquals(1, list.middle().value, \"Middle of a list with one element should be the element itself.\");\n\n        list.insert(2);\n        assertEquals(1, list.middle().value, \"Middle of a list with two elements should be the first element.\");\n\n        list.insert(3);\n        assertEquals(2, list.middle().value, \"Middle of a list with three elements should be the second element.\");\n\n        list.insert(4);\n        assertEquals(2, list.middle().value, \"Middle of a list with four elements should be the second element.\");\n\n        list.insert(5);\n        assertEquals(3, list.middle().value, \"Middle of a list with five elements should be the third element.\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n\n        // Test empty list\n        assertNull(list.middle(), \"Middle of an empty list should be null\");\n\n        // Test single element list\n        list.insert(1);\n        assertEquals(1, list.middle().value, \"Middle of a single element list should be that element\");\n\n        // Test even number of elements\n        list.insert(2);\n        list.insert(3);\n        list.insert(4);\n        assertEquals(2, list.middle().value, \"Middle of an even number of elements should be the first of the two middle elements\");\n\n        // Test odd number of elements\n        list.insert(5);\n        assertEquals(3, list.middle().value, \"Middle of an odd number of elements should be the middle element\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    private SinglyLinkedList list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new SinglyLinkedList();\n    }\n\n    @Test\n    public void middleTestSingleElementList() {\n        list.insert(1);\n        Node middleNode = list.middle();\n        assertNotNull(middleNode);\n        assertEquals(1, middleNode.value);\n    }\n\n    @Test\n    public void middleTestEvenElementsList() {\n        list.insert(1);\n        list.insert(2);\n        Node middleNode = list.middle();\n        assertNotNull(middleNode);\n        assertEquals(1, middleNode.value);\n    }\n\n    @Test\n    public void middleTestOddElementsList() {\n        list.insert(1);\n        list.insert(2);\n        list.insert(3);\n        Node middleNode = list.middle();\n        assertNotNull(middleNode);\n        assertEquals(2, middleNode.value);\n    }\n\n    @Test\n    public void middleTestEmptyList() {\n        Node middleNode = list.middle();\n        assertNull(middleNode);\n    }\n\n    @AfterEach\n    public void tearDown() {\n        list.clear();\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        // Initialize the singly linked list with several elements\n        SinglyLinkedList list = new SinglyLinkedList();\n        list.insert(1);\n        list.insert(2);\n        list.insert(3);\n        list.insert(4);\n        list.insert(5);\n        \n        // Test finding the middle for odd number of elements\n        Node middle = list.middle();\n        assertNotNull(middle, \"Middle node should not be null when the list has elements\");\n        assertEquals(3, middle.value, \"Middle node value should be 3 for the list with odd number of elements\");\n\n        // Add another element to make it even\n        list.insert(6);\n        \n        // Test finding the middle for even number of elements\n        middle = list.middle();\n        assertNotNull(middle, \"Middle node should not be null even when the list has even elements\");\n        assertEquals(4, middle.value, \"Middle node value should be 4 for the list with even number of elements\");\n\n        // Test for an empty list\n        SinglyLinkedList emptyList = new SinglyLinkedList();\n        assertNull(emptyList.middle(), \"Middle of an empty list should be null\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        // Create an empty SinglyLinkedList and verify middle element is null\n        SinglyLinkedList emptyList = new SinglyLinkedList();\n        assertNull(emptyList.middle(), \"Middle of an empty list should be null.\");\n\n        // Create a list with one element and verify the middle is the element itself\n        SinglyLinkedList singleElementList = new SinglyLinkedList();\n        singleElementList.insert(1);\n        assertEquals(1, singleElementList.middle().value, \"Middle of a single-element list should be the element itself.\");\n\n        // Create a list with an even number of elements and verify the middle is correct\n        // Assuming the middle element is the first of the two middle elements in even sized list\n        SinglyLinkedList evenList = new SinglyLinkedList();\n        evenList.insert(1);\n        evenList.insert(2);\n        evenList.insert(3);\n        evenList.insert(4);\n        assertEquals(2, evenList.middle().value, \"Middle of an even-sized list should be the first middle element.\");\n\n        // Create a list with an odd number of elements and verify the middle is correct\n        SinglyLinkedList oddList = new SinglyLinkedList();\n        oddList.insert(1);\n        oddList.insert(2);\n        oddList.insert(3);\n        oddList.insert(4);\n        oddList.insert(5);\n        assertEquals(3, oddList.middle().value, \"Middle of an odd-sized list should be the central element.\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        // Case 1: Testing an empty list\n        SinglyLinkedList emptyList = new SinglyLinkedList();\n        assertNull(emptyList.middle(), \"Middle of an empty list should be null\");\n\n        // Case 2: Testing a list with one element\n        SinglyLinkedList oneElementList = new SinglyLinkedList();\n        oneElementList.insert(1);\n        assertNotNull(oneElementList.middle(), \"Middle should not be null for a list with one element\");\n        assertEquals(1, oneElementList.middle().value, \"Middle of a list with one element should be that element\");\n\n        // Case 3: Testing a list with an even number of elements\n        SinglyLinkedList evenList = new SinglyLinkedList();\n        evenList.insert(1);\n        evenList.insert(2);\n        evenList.insert(3);\n        evenList.insert(4);\n        assertNotNull(evenList.middle(), \"Middle should not be null for an even-numbered list\");\n        assertEquals(2, evenList.middle().value, \"Middle of a list with four elements should be the second element\");\n\n        // Case 4: Testing a list with an odd number of elements\n        SinglyLinkedList oddList = new SinglyLinkedList();\n        oddList.insert(1);\n        oddList.insert(2);\n        oddList.insert(3);\n        oddList.insert(4);\n        oddList.insert(5);\n        assertNotNull(oddList.middle(), \"Middle should not be null for an odd-numbered list\");\n        assertEquals(3, oddList.middle().value, \"Middle of a list with five elements should be the third element\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        SinglyLinkedList emptyList = new SinglyLinkedList();\n        assertNull(emptyList.middle(), \"Middle of empty list should be null\");\n\n        SinglyLinkedList singleItemList = new SinglyLinkedList(new Node(1), 1);\n        assertEquals(1, singleItemList.middle().value, \"Middle of single-item list should be the item itself\");\n\n        SinglyLinkedList evenItemList = new SinglyLinkedList();\n        evenItemList.insert(1);\n        evenItemList.insert(2);\n        evenItemList.insert(3);\n        evenItemList.insert(4);\n        assertEquals(2, evenItemList.middle().value, \"Middle of even item list should be the first middle element\");\n\n        SinglyLinkedList oddItemList = new SinglyLinkedList();\n        oddItemList.insert(1);\n        oddItemList.insert(2);\n        oddItemList.insert(3);\n        oddItemList.insert(4);\n        oddItemList.insert(5);\n        assertEquals(3, oddItemList.middle().value, \"Middle of odd item list should be the central element\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        \n        // Test with an empty list\n        assertNull(list.middle(), \"Middle of an empty list should be null.\");\n        \n        // Test with a single element list\n        list.insert(1);\n        assertEquals(1, list.middle().value, \"Middle of a single element list should be the element itself.\");\n        \n        // Test with an even number list\n        list.insert(2);\n        list.insert(3);\n        list.insert(4);\n        assertEquals(2, list.middle().value, \"Middle of a list with even number of elements should be the first middle element.\");\n        \n        // Test with an odd number list\n        list.insert(5);\n        assertEquals(3, list.middle().value, \"Middle of a list with odd number of elements should be the central element.\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n\n        // Test with empty list\n        assertNull(list.middle(), \"Middle of an empty list should be null\");\n\n        // Add elements to the list\n        list.insert(1);\n        assertEquals(1, list.middle().value, \"Middle of a single-element list should be the element itself\");\n\n        list.insert(2);\n        assertEquals(1, list.middle().value, \"Middle of two elements should be the first element\");\n\n        list.insert(3);\n        assertEquals(2, list.middle().value, \"Middle of three elements should be the second element\");\n\n        list.insert(4);\n        assertEquals(2, list.middle().value, \"Middle of four elements should still be the second element\");\n\n        list.insert(5);\n        assertEquals(3, list.middle().value, \"Middle of five elements should be the third element\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n\n        assertNull(list.middle(), \"Middle of empty list should be null.\");\n\n        list.insert(1);  // List is 1\n        assertEquals(1, list.middle().value, \"Middle of single-element list should be the element itself.\");\n\n        list.insert(2);  // List is 1 -> 2\n        assertEquals(1, list.middle().value, \"Middle of two-element list should be the first element.\");\n\n        list.insert(3);  // List is 1 -> 2 -> 3\n        assertEquals(2, list.middle().value, \"Middle of three-element list should be the second element.\");\n\n        list.insert(4);  // List is 1 -> 2 -> 3 -> 4\n        assertEquals(2, list.middle().value, \"Middle of four-element list should be the second element.\");\n        \n        list.insert(5);  // List is 1 -> 2 -> 3 -> 4 -> 5\n        assertEquals(3, list.middle().value, \"Middle of five-element list should be the third element.\");\n    }\n}"
    ]
}