Source code: 


public Node middle() {
    if (head == null) {
        return null;
    }
    Node firstCounter = head;
    Node secondCounter = firstCounter.next;
    while (secondCounter != null && secondCounter.next != null) {
        firstCounter = firstCounter.next;
        secondCounter = secondCounter.next.next;
    }
    return firstCounter;
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {

    private SinglyLinkedList list;

    @BeforeEach
    public void setUp() {
        list = new SinglyLinkedList();
    }

    @Test
    public void middleTest() {
        // Test the middle method on an empty list
        assertNull(list.middle(), "Middle of an empty list should be null.");

        // Add elements to the list and test the middle again
        list.insert(1);
        assertEquals(1, list.middle().value, "Middle of a list with one element should be the element itself.");

        list.insert(2);
        assertEquals(1, list.middle().value, "Middle of a list with two elements should be the first element.");

        list.insert(3);
        assertEquals(2, list.middle().value, "Middle of a list with three elements should be the second element.");

        list.insert(4);
        assertEquals(2, list.middle().value, "Middle of a list with four elements should be the second element.");

        list.insert(5);
        assertEquals(3, list.middle().value, "Middle of a list with five elements should be the third element.");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();

        // Test empty list
        assertNull(list.middle(), "Middle of an empty list should be null");

        // Test single element list
        list.insert(1);
        assertEquals(1, list.middle().value, "Middle of a single element list should be that element");

        // Test even number of elements
        list.insert(2);
        list.insert(3);
        list.insert(4);
        assertEquals(2, list.middle().value, "Middle of an even number of elements should be the first of the two middle elements");

        // Test odd number of elements
        list.insert(5);
        assertEquals(3, list.middle().value, "Middle of an odd number of elements should be the middle element");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    private SinglyLinkedList list;

    @BeforeEach
    public void setUp() {
        list = new SinglyLinkedList();
    }

    @Test
    public void middleTestSingleElementList() {
        list.insert(1);
        Node middleNode = list.middle();
        assertNotNull(middleNode);
        assertEquals(1, middleNode.value);
    }

    @Test
    public void middleTestEvenElementsList() {
        list.insert(1);
        list.insert(2);
        Node middleNode = list.middle();
        assertNotNull(middleNode);
        assertEquals(1, middleNode.value);
    }

    @Test
    public void middleTestOddElementsList() {
        list.insert(1);
        list.insert(2);
        list.insert(3);
        Node middleNode = list.middle();
        assertNotNull(middleNode);
        assertEquals(2, middleNode.value);
    }

    @Test
    public void middleTestEmptyList() {
        Node middleNode = list.middle();
        assertNull(middleNode);
    }

    @AfterEach
    public void tearDown() {
        list.clear();
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {

    @Test
    public void middleTest() {
        // Initialize the singly linked list with several elements
        SinglyLinkedList list = new SinglyLinkedList();
        list.insert(1);
        list.insert(2);
        list.insert(3);
        list.insert(4);
        list.insert(5);
        
        // Test finding the middle for odd number of elements
        Node middle = list.middle();
        assertNotNull(middle, "Middle node should not be null when the list has elements");
        assertEquals(3, middle.value, "Middle node value should be 3 for the list with odd number of elements");

        // Add another element to make it even
        list.insert(6);
        
        // Test finding the middle for even number of elements
        middle = list.middle();
        assertNotNull(middle, "Middle node should not be null even when the list has even elements");
        assertEquals(4, middle.value, "Middle node value should be 4 for the list with even number of elements");

        // Test for an empty list
        SinglyLinkedList emptyList = new SinglyLinkedList();
        assertNull(emptyList.middle(), "Middle of an empty list should be null");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {

    @Test
    public void middleTest() {
        // Create an empty SinglyLinkedList and verify middle element is null
        SinglyLinkedList emptyList = new SinglyLinkedList();
        assertNull(emptyList.middle(), "Middle of an empty list should be null.");

        // Create a list with one element and verify the middle is the element itself
        SinglyLinkedList singleElementList = new SinglyLinkedList();
        singleElementList.insert(1);
        assertEquals(1, singleElementList.middle().value, "Middle of a single-element list should be the element itself.");

        // Create a list with an even number of elements and verify the middle is correct
        // Assuming the middle element is the first of the two middle elements in even sized list
        SinglyLinkedList evenList = new SinglyLinkedList();
        evenList.insert(1);
        evenList.insert(2);
        evenList.insert(3);
        evenList.insert(4);
        assertEquals(2, evenList.middle().value, "Middle of an even-sized list should be the first middle element.");

        // Create a list with an odd number of elements and verify the middle is correct
        SinglyLinkedList oddList = new SinglyLinkedList();
        oddList.insert(1);
        oddList.insert(2);
        oddList.insert(3);
        oddList.insert(4);
        oddList.insert(5);
        assertEquals(3, oddList.middle().value, "Middle of an odd-sized list should be the central element.");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {

    @Test
    public void middleTest() {
        // Case 1: Testing an empty list
        SinglyLinkedList emptyList = new SinglyLinkedList();
        assertNull(emptyList.middle(), "Middle of an empty list should be null");

        // Case 2: Testing a list with one element
        SinglyLinkedList oneElementList = new SinglyLinkedList();
        oneElementList.insert(1);
        assertNotNull(oneElementList.middle(), "Middle should not be null for a list with one element");
        assertEquals(1, oneElementList.middle().value, "Middle of a list with one element should be that element");

        // Case 3: Testing a list with an even number of elements
        SinglyLinkedList evenList = new SinglyLinkedList();
        evenList.insert(1);
        evenList.insert(2);
        evenList.insert(3);
        evenList.insert(4);
        assertNotNull(evenList.middle(), "Middle should not be null for an even-numbered list");
        assertEquals(2, evenList.middle().value, "Middle of a list with four elements should be the second element");

        // Case 4: Testing a list with an odd number of elements
        SinglyLinkedList oddList = new SinglyLinkedList();
        oddList.insert(1);
        oddList.insert(2);
        oddList.insert(3);
        oddList.insert(4);
        oddList.insert(5);
        assertNotNull(oddList.middle(), "Middle should not be null for an odd-numbered list");
        assertEquals(3, oddList.middle().value, "Middle of a list with five elements should be the third element");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {

    @Test
    public void middleTest() {
        SinglyLinkedList emptyList = new SinglyLinkedList();
        assertNull(emptyList.middle(), "Middle of empty list should be null");

        SinglyLinkedList singleItemList = new SinglyLinkedList(new Node(1), 1);
        assertEquals(1, singleItemList.middle().value, "Middle of single-item list should be the item itself");

        SinglyLinkedList evenItemList = new SinglyLinkedList();
        evenItemList.insert(1);
        evenItemList.insert(2);
        evenItemList.insert(3);
        evenItemList.insert(4);
        assertEquals(2, evenItemList.middle().value, "Middle of even item list should be the first middle element");

        SinglyLinkedList oddItemList = new SinglyLinkedList();
        oddItemList.insert(1);
        oddItemList.insert(2);
        oddItemList.insert(3);
        oddItemList.insert(4);
        oddItemList.insert(5);
        assertEquals(3, oddItemList.middle().value, "Middle of odd item list should be the central element");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {

    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();
        
        // Test with an empty list
        assertNull(list.middle(), "Middle of an empty list should be null.");
        
        // Test with a single element list
        list.insert(1);
        assertEquals(1, list.middle().value, "Middle of a single element list should be the element itself.");
        
        // Test with an even number list
        list.insert(2);
        list.insert(3);
        list.insert(4);
        assertEquals(2, list.middle().value, "Middle of a list with even number of elements should be the first middle element.");
        
        // Test with an odd number list
        list.insert(5);
        assertEquals(3, list.middle().value, "Middle of a list with odd number of elements should be the central element.");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();

        // Test with empty list
        assertNull(list.middle(), "Middle of an empty list should be null");

        // Add elements to the list
        list.insert(1);
        assertEquals(1, list.middle().value, "Middle of a single-element list should be the element itself");

        list.insert(2);
        assertEquals(1, list.middle().value, "Middle of two elements should be the first element");

        list.insert(3);
        assertEquals(2, list.middle().value, "Middle of three elements should be the second element");

        list.insert(4);
        assertEquals(2, list.middle().value, "Middle of four elements should still be the second element");

        list.insert(5);
        assertEquals(3, list.middle().value, "Middle of five elements should be the third element");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {

    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();

        assertNull(list.middle(), "Middle of empty list should be null.");

        list.insert(1);  // List is 1
        assertEquals(1, list.middle().value, "Middle of single-element list should be the element itself.");

        list.insert(2);  // List is 1 -> 2
        assertEquals(1, list.middle().value, "Middle of two-element list should be the first element.");

        list.insert(3);  // List is 1 -> 2 -> 3
        assertEquals(2, list.middle().value, "Middle of three-element list should be the second element.");

        list.insert(4);  // List is 1 -> 2 -> 3 -> 4
        assertEquals(2, list.middle().value, "Middle of four-element list should be the second element.");
        
        list.insert(5);  // List is 1 -> 2 -> 3 -> 4 -> 5
        assertEquals(3, list.middle().value, "Middle of five-element list should be the third element.");
    }
}


