{
    "project_name": "Java",
    "file_name": "SinglyLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/SinglyLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * Return the node in the middle of the list\n     * If the length of the list is even then return item number length/2\n     * @return middle node of the list\n     */",
    "source_code": "\npublic Node middle() {\n    if (head == null) {\n        return null;\n    }\n    Node firstCounter = head;\n    Node secondCounter = firstCounter.next;\n    while (secondCounter != null && secondCounter.next != null) {\n        firstCounter = firstCounter.next;\n        secondCounter = secondCounter.next.next;\n    }\n    return firstCounter;\n}\n",
    "class_name": "SinglyLinkedList",
    "method_name": "middle",
    "arguments": [],
    "generate_test": [
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n\n        // Test case when list is empty\n        assertNull(list.middle(), \"Middle of empty list should be null\");\n        \n        // Test case when list has one element\n        list.add(new Node(1));\n        assertEquals(1, list.middle().data, \"Middle of a list with one element should be the element itself\");\n        \n        // Test case when list has odd number of elements (3 elements)\n        list.add(new Node(2));\n        list.add(new Node(3));\n        assertEquals(2, list.middle().data, \"Middle of a list with odd number of elements should be the middle element\");\n        \n        // Test case when list has even number of elements (4 elements)\n        list.add(new Node(4));\n        assertEquals(2, list.middle().data, \"Middle of a list with even number of elements should be the first middle element\");\n    }\n\n    private class SinglyLinkedList {\n        private Node head;\n\n        public void add(Node node) {\n            if (head == null) {\n                head = node;\n            } else {\n                Node current = head;\n                while (current.next != null) {\n                    current = current.next;\n                }\n                current.next = node;\n            }\n        }\n\n        public Node middle() {\n            if (head == null) {\n                return null;\n            }\n            Node firstCounter = head;\n            Node secondCounter = firstCounter.next;\n            while (secondCounter != null && secondCounter.next != null) {\n                firstCounter = firstCounter.next;\n                secondCounter = secondCounter.next.next;\n            }\n            return firstCounter;\n        }\n    }\n\n    private class Node {\n        int data;\n        Node next;\n\n        public Node(int data) {\n            this.data = data;\n            this.next = null;\n        }\n    }\n}",
        "public class SinglyLinkedList {\n    Node head;\n\n    public void add(int value) {\n        if (head == null) {\n            head = new Node(value);\n        } else {\n            Node currentNode = head;\n            while (currentNode.next != null) {\n                currentNode = currentNode.next;\n            }\n            currentNode.next = new Node(value);\n        }\n    }\n\n    // The middle method as provided by the instruction\n    public Node middle() {\n        // Implementation from the instruction...\n    }\n    \n    static class Node {\n        int value;\n        Node next;\n\n        Node(int value) {\n            this.value = value;\n            this.next = null;\n        }\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        \n        // Case 1: Empty List should return null on middle\n        assertNull(list.middle(), \"Empty list should have no middle.\");\n        \n        // Case 2: List with one node should return the head as middle\n        list.insert(new Node(1));\n        assertEquals(1, list.middle().data, \"Middle of single-element list should be itself.\");\n        \n        // Case 3: List with even number of nodes should return the first middle node\n        list.insert(new Node(2));\n        assertEquals(1, list.middle().data, \"Middle of two-element list should be first element.\");\n        \n        // Case 4: List with odd number of nodes should return the true middle\n        list.insert(new Node(3));\n        assertEquals(2, list.middle().data, \"Middle of three-element list should be second element.\");\n        \n        // Add more cases as necessary\n        list.insert(new Node(4));\n        assertEquals(2, list.middle().data, \"Middle of four-element list should be second element.\");\n        list.insert(new Node(5));\n        assertEquals(3, list.middle().data, \"Middle of five-element list should be third element.\");\n    }\n\n    // Assuming a Node class as part of the SinglyLinkedList structure.\n    private class Node {\n        int data;\n        Node next;\n        \n        Node(int data) {\n            this.data = data;\n            next = null;\n        }\n    }\n\n    // Assuming a SinglyLinkedList class with necessary insert and middle methods.\n    private class SinglyLinkedList {\n        Node head;\n\n        public void insert(Node newNode) {\n            if (head == null) {\n                head = newNode;\n            } else {\n                Node temp = head;\n                while (temp.next != null) {\n                    temp = temp.next;\n                }\n                temp.next = newNode;\n            }\n        }\n\n        // The `middle` method provided in the prompt.\n        public Node middle() {\n            if (head == null) {\n                return null;\n            }\n            Node firstCounter = head;\n            Node secondCounter = firstCounter.next;\n            while (secondCounter != null && secondCounter.next != null) {\n                firstCounter = firstCounter.next;\n                secondCounter = secondCounter.next.next;\n            }\n            return firstCounter;\n        }\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    private SinglyLinkedList list;\n\n    @BeforeEach\n    void setUp() {\n        list = new SinglyLinkedList();\n    }\n\n    @AfterEach\n    void tearDown() {\n        list = null;\n    }\n\n    @Test\n    public void middleTest() {\n        // Test for empty list\n        assertNull(list.middle(), \"Middle of an empty list should be null\");\n\n        // Test for list with one element\n        list.add(1);\n        assertNotNull(list.middle(), \"Middle of a single-element list should not be null\");\n        assertEquals(1, list.middle().data, \"Middle of single-element list should be the element itself\");\n\n        // Test for list with odd number of elements\n        list.add(2);\n        list.add(3);\n        assertEquals(2, list.middle().data, \"Middle should return the 2nd element for list with 3 elements\");\n\n        // Test for list with even number of elements (should return the higher middle)\n        list.add(4);\n        assertEquals(3, list.middle().data, \"Middle should return the 2nd element for list with 4 elements\");\n\n        // Further tests can be added for larger lists\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Node {\n    int data;\n    Node next;\n    Node(int data) { this.data = data; }\n}\n\nclass SinglyLinkedList {\n    Node head;\n    public void add(int data) {\n        Node newNode = new Node(data);\n        newNode.next = head;\n        head = newNode;\n    }\n    \n    // Assuming this is the method provided in the question\n    public Node middle() {\n        if (head == null) {\n            return null;\n        }\n        Node firstCounter = head;\n        Node secondCounter = firstCounter.next;\n        while (secondCounter != null && secondCounter.next != null) {\n            firstCounter = firstCounter.next;\n            secondCounter = secondCounter.next.next;\n        }\n        return firstCounter;\n    }\n}\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        \n        // Test list is empty\n        assertNull(list.middle(), \"Middle of an empty list should be null.\");\n        \n        // Test list has only one node\n        list.add(1);\n        assertEquals(1, list.middle().data, \"Middle of a list with one node should be the node itself.\");\n        \n        // Test list has odd number of nodes\n        list.add(2);\n        list.add(3);\n        assertEquals(2, list.middle().data, \"Middle of a list with three nodes should be the second node.\");\n\n        // Test list has even number of nodes\n        list.add(4);\n        assertEquals(2, list.middle().data, \"Middle of a list with an even number of nodes should be the first of the two middle nodes.\");\n    }\n}",
        "class Node {\n    int data;\n    Node next;\n\n    Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\nclass SinglyLinkedList {\n    Node head;\n\n    public SinglyLinkedList() {\n        this.head = null;\n    }\n\n    public void add(int data) {\n        Node newNode = new Node(data);\n        if (head == null) {\n            head = newNode;\n        } else {\n            Node current = head;\n            while (current.next != null) {\n                current = current.next;\n            }\n            current.next = newNode;\n        }\n    }\n\n    public Node middle() {\n        if (head == null) {\n            return null;\n        }\n        Node firstCounter = head;\n        Node secondCounter = firstCounter.next;\n        while (secondCounter != null && secondCounter.next != null) {\n            firstCounter = firstCounter.next;\n            secondCounter = secondCounter.next.next;\n        }\n        return firstCounter;\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n\n        // Test case where the list is empty\n        assertNull(list.middle(), \"Middle of empty list should be null\");\n\n        // Add elements to the list and test for single element\n        list.addLast(new Node(1));\n        assertEquals(1, list.middle().value, \"Middle of a single element list should be the element itself\");\n\n        // Add a second element and test for two elements\n        list.addLast(new Node(2));\n        assertEquals(1, list.middle().value, \"Middle of two elements should be the first element\");\n\n        // Add third element and test for odd number of elements\n        list.addLast(new Node(3));\n        assertEquals(2, list.middle().value, \"Middle of three elements should be the second element\");\n\n        // Continue to add elements and test\n        list.addLast(new Node(4));\n        assertEquals(2, list.middle().value, \"Middle of four elements should be the second element\");\n\n        list.addLast(new Node(5));\n        assertEquals(3, list.middle().value, \"Middle of five elements should be the third element\");\n    }\n\n    // Inner class Node and SinglyLinkedList for the sake of the example, real classes would be separate\n    class Node {\n        int value;\n        Node next;\n\n        public Node(int value) {\n            this.value = value;\n            this.next = null;\n        }\n    }\n\n    class SinglyLinkedList {\n        Node head;\n\n        void addLast(Node node) {\n            if (head == null) {\n                head = node;\n            } else {\n                Node current = head;\n                while (current.next != null) {\n                    current = current.next;\n                }\n                current.next = node;\n            }\n        }\n\n        Node middle() {\n            // assuming this is the method you've provided\n            if (head == null) {\n                return null;\n            }\n            Node firstCounter = head;\n            Node secondCounter = firstCounter.next;\n            while (secondCounter != null && secondCounter.next != null) {\n                firstCounter = firstCounter.next;\n                secondCounter = secondCounter.next.next;\n            }\n            return firstCounter;\n        }\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    \n    public class Node { // Assuming there is a Node class since it's used in the source code snippet\n        int data;\n        Node next;\n\n        public Node(int data) {\n            this.data = data;\n            this.next = null;\n        }\n    }\n    \n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList(); // Assuming there is a SinglyLinkedList class with a `middle` method\n        \n        // Case: Empty list\n        assertNull(list.middle(), \"The middle of an empty list should be null\");\n        \n        // Case: List with one node\n        Node first = new Node(1);\n        list.head = first;\n        assertEquals(first, list.middle(), \"The middle of a single-element list should be the element itself\");\n        \n        // Case: List with two nodes\n        Node second = new Node(2);\n        first.next = second;\n        assertEquals(first, list.middle(), \"The middle of a two-element list should be the first element\");\n        \n        // Case: List with odd number of nodes\n        Node third = new Node(3);\n        second.next = third;\n        assertEquals(second, list.middle(), \"The middle of a three-element list should be the second element\");\n        \n        // Case: List with even number of nodes\n        Node fourth = new Node(4);\n        third.next = fourth;\n        assertEquals(third, list.middle(), \"The middle of a four-element list should be the second element\");\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    private SinglyLinkedList list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new SinglyLinkedList();\n    }\n\n    @Test\n    public void middleTest_emptyList() {\n        assertNull(list.middle(), \"The middle element of an empty list should be null.\");\n    }\n\n    @Test\n    public void middleTest_oddElements() {\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        list.add(5);\n\n        Node middle = list.middle();\n        assertNotNull(middle, \"The middle element should not be null.\");\n        assertEquals(3, middle.data, \"The middle element of a list with an odd number of elements should be 3.\");\n    }\n\n    @Test\n    public void middleTest_evenElements() {\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n\n        Node middle = list.middle();\n        assertNotNull(middle, \"The middle element should not be null.\");\n        assertEquals(2, middle.data, \"The middle element of a list with an even number of elements should be 2.\");\n    }\n\n    // Assuming there is an add() method to add elements to the linked list\n    private class Node {\n        int data;\n        Node next;\n\n        Node(int data) {\n            this.data = data;\n            this.next = null;\n        }\n    }\n\n    private class SinglyLinkedList {\n        Node head;\n\n        public void add(int data) {\n            Node newNode = new Node(data);\n            if (head == null) {\n                head = newNode;\n            } else {\n                Node current = head;\n                while (current.next != null) {\n                    current = current.next;\n                }\n                current.next = newNode;\n            }\n        }\n\n        public Node middle() {\n            if (head == null) {\n                return null;\n            }\n            Node firstCounter = head;\n            Node secondCounter = firstCounter.next;\n            while (secondCounter != null && secondCounter.next != null) {\n                firstCounter = firstCounter.next;\n                secondCounter = secondCounter.next.next;\n            }\n            return firstCounter;\n        }\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n\n    private SinglyLinkedList list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new SinglyLinkedList();\n    }\n\n    @Test\n    public void middleTest() {\n        assertNull(\"Empty list should return null\", list.middle());\n\n        list.add(1);\n        assertEquals(1, list.middle().data, \"Single element list should return the element itself\");\n\n        list.add(2);\n        assertEquals(1, list.middle().data, \"Two element list should return the first element\");\n\n        list.add(3);\n        assertEquals(2, list.middle().data, \"Three element list should return the middle element\");\n\n        list.add(4);\n        assertEquals(2, list.middle().data, \"Four element list should return the second element\");\n\n        list.add(5);\n        assertEquals(3, list.middle().data, \"Five element list should return the middle element\");\n    }\n}"
    ]
}