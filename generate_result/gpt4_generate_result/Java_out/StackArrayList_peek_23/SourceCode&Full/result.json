{
    "project_name": "Java",
    "file_name": "StackArrayList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/stacks/StackArrayList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.stacks",
    "docstring": "/**\n     * Return the element at the top of this stack without removing it from the\n     * stack.\n     *\n     * @return the element at the top of this stack.\n     */",
    "source_code": "\npublic int peek() {\n    if (isEmpty()) {\n        throw new EmptyStackException();\n    }\n    return stack.get(stack.size() - 1);\n}\n",
    "class_name": "StackArrayList",
    "method_name": "peek",
    "arguments": [],
    "generate_test": [
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTest() {\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        }, \"peek() should throw EmptyStackException when stack is empty\");\n\n        stack.push(1);\n        assertEquals(1, stack.peek(), \"peek() should return top element after pushing 1\");\n\n        stack.push(2);\n        assertEquals(2, stack.peek(), \"peek() should return top element after pushing 2\");\n\n        stack.pop();\n        assertEquals(1, stack.peek(), \"peek() should return top element after popping the top element (2)\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    private StackArrayList stack;\n    \n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTest() {\n        // Testing empty stack behavior\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        }, \"peek() should throw EmptyStackException when the stack is empty\");\n        \n        // Adding elements and using peek\n        stack.push(1);\n        assertEquals(1, stack.peek(), \"peek() should return the last element pushed on the stack\");\n\n        stack.push(2);\n        assertEquals(2, stack.peek(), \"peek() should return the last element pushed on the stack\");\n\n        stack.push(3);\n        assertEquals(3, stack.peek(), \"peek() should return the last element pushed on the stack\");\n\n        // Removing an element and checking if peek() returns the correct element\n        stack.pop();\n        assertEquals(2, stack.peek(), \"peek() should return the new top element after popping the stack\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        StackArrayList stack = new StackArrayList();\n        \n        // Test empty stack\n        Exception exception = assertThrows(EmptyStackException.class, stack::peek);\n        assertTrue(exception instanceof EmptyStackException);\n        \n        // Test non-empty stack\n        stack.push(10);\n        assertEquals(10, stack.peek(), \"Peek should return the last element pushed.\");\n        \n        stack.push(20);\n        stack.push(30);\n        assertEquals(30, stack.peek(), \"Peek should return the last element pushed.\");\n        \n        // Test peek doesn't remove the element\n        int sizeBeforePeek = stack.size();\n        int peekedValue = stack.peek();\n        int sizeAfterPeek = stack.size();\n        assertEquals(peekedValue, 30, \"Peek should return the last element pushed without removing it.\");\n        assertEquals(sizeBeforePeek, sizeAfterPeek, \"Peek should not change the stack size.\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    \n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTest() {\n        assertThrows(EmptyStackException.class, stack::peek, \"peek should throw EmptyStackException when the stack is empty\");\n\n        stack.push(42);\n        assertEquals(42, stack.peek(), \"peek should return the last pushed element (42) without removing it\");\n\n        stack.push(23);\n        assertEquals(23, stack.peek(), \"peek should now return the last element pushed (23)\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n    \n    @Test\n    public void peekTest() {\n        // Assert that peeking on an empty stack throws EmptyStackException\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        });\n\n        // Push an element and peek\n        stack.push(1);\n        assertEquals(1, stack.peek(), \"Peek should return the top element of the stack\");\n\n        // Push another element and peek\n        stack.push(2);\n        assertEquals(2, stack.peek(), \"Peek should return the new top element of the stack after pushing another element\");\n\n        // Pop the top element and check that peek returns the correct element\n        stack.pop();\n        assertEquals(1, stack.peek(), \"Peek should return the previous top element after popping the current top\");\n    }\n    \n    // You may include additional tests for isEmpty, push, pop, and size methods if needed.\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTest() {\n        // Test 1: throw EmptyStackException when peeking an empty stack\n        assertThrows(EmptyStackException.class, () -> stack.peek());\n\n        // Test 2: successfully retrieve the top element of the stack\n        stack.push(10);\n        assertEquals(10, stack.peek());\n        stack.push(20);\n        assertEquals(20, stack.peek());\n\n        // Test 3: peeking should not remove the element\n        int sizeBeforePeek = stack.size();\n        int topElement = stack.peek();\n        assertEquals(topElement, stack.peek());\n        assertEquals(sizeBeforePeek, stack.size());\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        StackArrayList stack = new StackArrayList();\n\n        // Test peek() on an empty stack to ensure it throws EmptyStackException\n        Exception exception = assertThrows(EmptyStackException.class, stack::peek);\n        assertTrue(exception instanceof EmptyStackException);\n\n        // Push elements to stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        \n        // Test peek() returns the last element that was pushed\n        assertEquals(3, stack.peek());\n\n        // Ensure peek() doesn't remove the element\n        assertEquals(3, stack.size());\n\n        // Push another element and check if peek() now returns the new element\n        stack.push(4);\n        assertEquals(4, stack.peek());\n\n        // After popping, check if the peek() now returns the previous element\n        stack.pop();\n        assertEquals(3, stack.peek());\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    \n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTest() {\n        // This test will check that calling peek on an empty stack throws EmptyStackException\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        });\n\n        // Push elements into the stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n\n        // This test will check the peek method returns the top without removing it\n        assertEquals(3, stack.peek(), \"Peek should return the top element which is 3\");\n        \n        // The size should not change after peeking\n        assertEquals(3, stack.size(), \"The size should be unchanged after peek\");\n        \n        // Another peek to ensure the top is still the same and hasn't been removed\n        assertEquals(3, stack.peek(), \"Peek should still return the top element which remains 3\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTest() {\n        // Test empty stack\n        assertThrows(EmptyStackException.class, stack::peek);\n\n        // Push items onto the stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n\n        // Peek the top of the stack without removing it\n        assertEquals(3, stack.peek(), \"The top of the stack should be 3\");\n\n        // Ensure the size has not changed\n        assertEquals(3, stack.size(), \"The stack size should still be 3\");\n\n        // Push another item and peek\n        stack.push(4);\n        assertEquals(4, stack.peek(), \"The top of the stack should be 4 after pushing another item\");\n\n        // Ensure the size is correct\n        assertEquals(4, stack.size(), \"The stack size should now be 4\");\n\n        // Pop the top item and peek again\n        stack.pop();\n        assertEquals(3, stack.peek(), \"The top of the stack should be 3 after popping the top item\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTest() {\n        assertThrows(EmptyStackException.class, () -> stack.peek(), \"peek() should throw EmptyStackException when the stack is empty\");\n       \n        stack.push(1);\n        assertEquals(1, stack.peek(), \"peek() should return the last element pushed onto the stack\");\n        \n        stack.push(2);\n        assertEquals(2, stack.peek(), \"peek() should return the new last element after pushing another element\");\n        \n        stack.pop();\n        assertEquals(1, stack.peek(), \"peek() should return the initial element after popping the last element\");\n    }\n}"
    ]
}