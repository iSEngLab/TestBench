Source code: 


public int peek() {
    if (isEmpty()) {
        throw new EmptyStackException();
    }
    return stack.get(stack.size() - 1);
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    private StackArrayList stack;

    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }

    @Test
    public void peekTest() {
        assertThrows(EmptyStackException.class, () -> {
            stack.peek();
        }, "peek() should throw EmptyStackException when stack is empty");

        stack.push(1);
        assertEquals(1, stack.peek(), "peek() should return top element after pushing 1");

        stack.push(2);
        assertEquals(2, stack.peek(), "peek() should return top element after pushing 2");

        stack.pop();
        assertEquals(1, stack.peek(), "peek() should return top element after popping the top element (2)");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    private StackArrayList stack;
    
    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }

    @Test
    public void peekTest() {
        // Testing empty stack behavior
        assertThrows(EmptyStackException.class, () -> {
            stack.peek();
        }, "peek() should throw EmptyStackException when the stack is empty");
        
        // Adding elements and using peek
        stack.push(1);
        assertEquals(1, stack.peek(), "peek() should return the last element pushed on the stack");

        stack.push(2);
        assertEquals(2, stack.peek(), "peek() should return the last element pushed on the stack");

        stack.push(3);
        assertEquals(3, stack.peek(), "peek() should return the last element pushed on the stack");

        // Removing an element and checking if peek() returns the correct element
        stack.pop();
        assertEquals(2, stack.peek(), "peek() should return the new top element after popping the stack");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import java.util.EmptyStackException;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        StackArrayList stack = new StackArrayList();
        
        // Test empty stack
        Exception exception = assertThrows(EmptyStackException.class, stack::peek);
        assertTrue(exception instanceof EmptyStackException);
        
        // Test non-empty stack
        stack.push(10);
        assertEquals(10, stack.peek(), "Peek should return the last element pushed.");
        
        stack.push(20);
        stack.push(30);
        assertEquals(30, stack.peek(), "Peek should return the last element pushed.");
        
        // Test peek doesn't remove the element
        int sizeBeforePeek = stack.size();
        int peekedValue = stack.peek();
        int sizeAfterPeek = stack.size();
        assertEquals(peekedValue, 30, "Peek should return the last element pushed without removing it.");
        assertEquals(sizeBeforePeek, sizeAfterPeek, "Peek should not change the stack size.");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    
    private StackArrayList stack;

    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }

    @Test
    public void peekTest() {
        assertThrows(EmptyStackException.class, stack::peek, "peek should throw EmptyStackException when the stack is empty");

        stack.push(42);
        assertEquals(42, stack.peek(), "peek should return the last pushed element (42) without removing it");

        stack.push(23);
        assertEquals(23, stack.peek(), "peek should now return the last element pushed (23)");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {

    private StackArrayList stack;

    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }
    
    @Test
    public void peekTest() {
        // Assert that peeking on an empty stack throws EmptyStackException
        assertThrows(EmptyStackException.class, () -> {
            stack.peek();
        });

        // Push an element and peek
        stack.push(1);
        assertEquals(1, stack.peek(), "Peek should return the top element of the stack");

        // Push another element and peek
        stack.push(2);
        assertEquals(2, stack.peek(), "Peek should return the new top element of the stack after pushing another element");

        // Pop the top element and check that peek returns the correct element
        stack.pop();
        assertEquals(1, stack.peek(), "Peek should return the previous top element after popping the current top");
    }
    
    // You may include additional tests for isEmpty, push, pop, and size methods if needed.
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import java.util.EmptyStackException;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {

    private StackArrayList stack;

    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }

    @Test
    public void peekTest() {
        // Test 1: throw EmptyStackException when peeking an empty stack
        assertThrows(EmptyStackException.class, () -> stack.peek());

        // Test 2: successfully retrieve the top element of the stack
        stack.push(10);
        assertEquals(10, stack.peek());
        stack.push(20);
        assertEquals(20, stack.peek());

        // Test 3: peeking should not remove the element
        int sizeBeforePeek = stack.size();
        int topElement = stack.peek();
        assertEquals(topElement, stack.peek());
        assertEquals(sizeBeforePeek, stack.size());
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import java.util.EmptyStackException;

import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        StackArrayList stack = new StackArrayList();

        // Test peek() on an empty stack to ensure it throws EmptyStackException
        Exception exception = assertThrows(EmptyStackException.class, stack::peek);
        assertTrue(exception instanceof EmptyStackException);

        // Push elements to stack
        stack.push(1);
        stack.push(2);
        stack.push(3);
        
        // Test peek() returns the last element that was pushed
        assertEquals(3, stack.peek());

        // Ensure peek() doesn't remove the element
        assertEquals(3, stack.size());

        // Push another element and check if peek() now returns the new element
        stack.push(4);
        assertEquals(4, stack.peek());

        // After popping, check if the peek() now returns the previous element
        stack.pop();
        assertEquals(3, stack.peek());
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    
    private StackArrayList stack;

    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }

    @Test
    public void peekTest() {
        // This test will check that calling peek on an empty stack throws EmptyStackException
        assertThrows(EmptyStackException.class, () -> {
            stack.peek();
        });

        // Push elements into the stack
        stack.push(1);
        stack.push(2);
        stack.push(3);

        // This test will check the peek method returns the top without removing it
        assertEquals(3, stack.peek(), "Peek should return the top element which is 3");
        
        // The size should not change after peeking
        assertEquals(3, stack.size(), "The size should be unchanged after peek");
        
        // Another peek to ensure the top is still the same and hasn't been removed
        assertEquals(3, stack.peek(), "Peek should still return the top element which remains 3");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.EmptyStackException;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {

    private StackArrayList stack;

    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }

    @Test
    public void peekTest() {
        // Test empty stack
        assertThrows(EmptyStackException.class, stack::peek);

        // Push items onto the stack
        stack.push(1);
        stack.push(2);
        stack.push(3);

        // Peek the top of the stack without removing it
        assertEquals(3, stack.peek(), "The top of the stack should be 3");

        // Ensure the size has not changed
        assertEquals(3, stack.size(), "The stack size should still be 3");

        // Push another item and peek
        stack.push(4);
        assertEquals(4, stack.peek(), "The top of the stack should be 4 after pushing another item");

        // Ensure the size is correct
        assertEquals(4, stack.size(), "The stack size should now be 4");

        // Pop the top item and peek again
        stack.pop();
        assertEquals(3, stack.peek(), "The top of the stack should be 3 after popping the top item");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    private StackArrayList stack;

    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }

    @Test
    public void peekTest() {
        assertThrows(EmptyStackException.class, () -> stack.peek(), "peek() should throw EmptyStackException when the stack is empty");
       
        stack.push(1);
        assertEquals(1, stack.peek(), "peek() should return the last element pushed onto the stack");
        
        stack.push(2);
        assertEquals(2, stack.peek(), "peek() should return the new last element after pushing another element");
        
        stack.pop();
        assertEquals(1, stack.peek(), "peek() should return the initial element after popping the last element");
    }
}


