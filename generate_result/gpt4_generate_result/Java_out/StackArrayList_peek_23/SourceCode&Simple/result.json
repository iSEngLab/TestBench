{
    "project_name": "Java",
    "file_name": "StackArrayList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/stacks/StackArrayList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.stacks",
    "docstring": "/**\n     * Return the element at the top of this stack without removing it from the\n     * stack.\n     *\n     * @return the element at the top of this stack.\n     */",
    "source_code": "\npublic int peek() {\n    if (isEmpty()) {\n        throw new EmptyStackException();\n    }\n    return stack.get(stack.size() - 1);\n}\n",
    "class_name": "StackArrayList",
    "method_name": "peek",
    "arguments": [],
    "generate_test": [
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n\n    @Test\n    public void peekTest() {\n        StackArrayList stack = new StackArrayList();\n\n        // Test empty stack\n        Exception exception = assertThrows(EmptyStackException.class, stack::peek);\n        assertNotNull(exception);\n\n        // Set up the stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n\n        // Test non-empty stack\n        assertEquals(3, stack.peek(), \"Peek should return top element which is 3\"); \n        \n        // Test to ensure the size is still the same after peek()\n        assertEquals(3, stack.size(), \"Stack size should remain unchanged after peek()\");\n        \n        // Test to ensure the top element is not removed\n        assertEquals(3, stack.peek(), \"Peek should return top element on consecutive calls\");\n        assertEquals(3, stack.size(), \"Stack size should still be 3 after consecutive peek()\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTest() {\n        // Test for an empty stack\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek(); \n        });\n\n        // Test with one element\n        stack.push(42);\n        int peekedValue = stack.peek();\n        assertEquals(42, peekedValue);\n        assertFalse(stack.isEmpty());\n\n        // Test with another element\n        stack.push(24);\n        peekedValue = stack.peek();\n        assertEquals(24, peekedValue);\n        assertFalse(stack.isEmpty());\n\n        // Size after two push() and one peek()\n        assertEquals(2, stack.size());\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTest() {\n        assertTrue(stack.isEmpty());\n\n        stack.push(10);\n        assertEquals(10, stack.peek());\n        \n        stack.push(20);\n        assertEquals(20, stack.peek());\n        \n        stack.pop();\n        assertEquals(10, stack.peek());\n        \n        stack.pop();\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        });\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    \n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTest() {\n        // Test peek on an empty stack\n        Exception exception = assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        });\n        assertTrue(exception instanceof EmptyStackException);\n\n        // Test peek on a non-empty stack\n        stack.push(5);\n        stack.push(10);\n        int topValue = stack.peek();\n        assertEquals(10, topValue, \"peek() should return the top element of the stack\");\n        \n        // Ensure the size has not changed after peek()\n        assertEquals(2, stack.size(), \"The size of the stack should remain the same after peek()\");\n\n        // Ensure that the element was not removed\n        int popValue = stack.pop();\n        assertEquals(10, popValue, \"The top element should still be on the stack after peek()\");\n\n        // Ensure that the size is now reduced by 1\n        assertEquals(1, stack.size(), \"The size of the stack should be reduced by 1 after pop()\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n\n    @Test\n    public void peekTest() {\n        // Create an instance of StackArrayList\n        StackArrayList stack = new StackArrayList();\n\n        // Test with an empty stack\n        Exception exception = assertThrows(EmptyStackException.class, stack::peek);\n        assertNotNull(exception);\n\n        // Push elements into the stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n\n        // Peek the last element (which should be the most recently pushed)\n        int lastElement = stack.peek();\n        assertEquals(3, lastElement, \"Peek should return the last element pushed onto the stack\");\n\n        // Ensure that the size is not changed after the peek operation\n        assertEquals(3, stack.size(), \"Peek should not remove the element from the stack\");\n\n        // Push another element and test peek again\n        stack.push(4);\n        assertEquals(4, stack.peek(), \"Peek should now return the new last element pushed onto the stack\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n\n    @Test\n    public void peekTest() {\n        // Arrange\n        StackArrayList stack = new StackArrayList();\n        stack.push(10);\n        stack.push(20);\n\n        // Act & Assert\n        assertEquals(20, stack.peek(), \"Peek should return the top element of the stack\");\n\n        // Arrange (for empty stack exception)\n        stack.pop();\n        stack.pop();\n\n        // Act & Assert (for empty stack exception)\n        assertThrows(EmptyStackException.class, stack::peek, \"Peek should throw EmptyStackException when stack is empty\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.EmptyStackException;\n\npublic class StackArrayListTest {\n\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekEmptyStackThrowsException() {\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        });\n    }\n\n    @Test\n    public void peekAfterPushingElements() {\n        stack.push(1);\n        stack.push(42);\n        stack.push(7);\n        int result = stack.peek();\n        assertEquals(7, result);\n    }\n\n    @Test\n    public void peekDoesNotRemoveElement() {\n        stack.push(1);\n        stack.push(2);\n        int peekedValue = stack.peek();\n        int stackSizeAfterPeek = stack.size();\n        assertEquals(2, peekedValue);\n        assertEquals(2, stackSizeAfterPeek); // Size should remain same after peek\n    }\n\n    // ... Additional tests could go here ...\n\n    @AfterEach\n    public void tearDown() {\n        stack = null;\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTestWhenStackNotEmpty() {\n        // setup\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n\n        // execute & verify\n        assertEquals(3, stack.peek(), \"peek() should return the last element pushed onto the stack\");\n    }\n\n    @Test\n    public void peekTestWhenStackIsEmpty() {\n        // execute & verify\n        assertThrows(EmptyStackException.class, stack::peek, \"peek() should throw EmptyStackException when the stack is empty\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTest() {\n        // Test peek on non-empty stack\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        int result = stack.peek();\n        assertEquals(3, result, \"Peek should return the top element of the stack\");\n\n        // Test peek after a pop\n        stack.pop();\n        result = stack.peek();\n        assertEquals(2, result, \"Peek should now return the new top after a pop\");\n\n        // Test peek on a single-element stack\n        stack.pop();\n        result = stack.peek();\n        assertEquals(1, result, \"Peek should return the last element when only one is present\");\n\n        // Test peek on empty stack\n        stack.pop();\n        assertThrows(EmptyStackException.class, stack::peek, \"Peek on an empty stack should throw EmptyStackException\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTestWhenStackIsEmpty() {\n        // Test to ensure EmptyStackException is thrown when peek() is called on an empty stack\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        });\n    }\n\n    @Test\n    public void peekTestWhenStackIsNotEmpty() {\n        // Pushes an element onto the stack and then peeks it\n        stack.push(1);\n        int result = stack.peek();\n        assertEquals(1, result);\n        \n        // Pushes another element and peeks to ensure the top of the stack is correct\n        stack.push(2);\n        result = stack.peek();\n        assertEquals(2, result);\n    }\n}"
    ]
}