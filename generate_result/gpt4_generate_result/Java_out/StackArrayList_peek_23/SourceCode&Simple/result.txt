Source code: 


public int peek() {
    if (isEmpty()) {
        throw new EmptyStackException();
    }
    return stack.get(stack.size() - 1);
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import java.util.EmptyStackException;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {

    @Test
    public void peekTest() {
        StackArrayList stack = new StackArrayList();

        // Test empty stack
        Exception exception = assertThrows(EmptyStackException.class, stack::peek);
        assertNotNull(exception);

        // Set up the stack
        stack.push(1);
        stack.push(2);
        stack.push(3);

        // Test non-empty stack
        assertEquals(3, stack.peek(), "Peek should return top element which is 3"); 
        
        // Test to ensure the size is still the same after peek()
        assertEquals(3, stack.size(), "Stack size should remain unchanged after peek()");
        
        // Test to ensure the top element is not removed
        assertEquals(3, stack.peek(), "Peek should return top element on consecutive calls");
        assertEquals(3, stack.size(), "Stack size should still be 3 after consecutive peek()");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.EmptyStackException;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    private StackArrayList stack;

    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }

    @Test
    public void peekTest() {
        // Test for an empty stack
        assertThrows(EmptyStackException.class, () -> {
            stack.peek(); 
        });

        // Test with one element
        stack.push(42);
        int peekedValue = stack.peek();
        assertEquals(42, peekedValue);
        assertFalse(stack.isEmpty());

        // Test with another element
        stack.push(24);
        peekedValue = stack.peek();
        assertEquals(24, peekedValue);
        assertFalse(stack.isEmpty());

        // Size after two push() and one peek()
        assertEquals(2, stack.size());
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {

    private StackArrayList stack;

    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }

    @Test
    public void peekTest() {
        assertTrue(stack.isEmpty());

        stack.push(10);
        assertEquals(10, stack.peek());
        
        stack.push(20);
        assertEquals(20, stack.peek());
        
        stack.pop();
        assertEquals(10, stack.peek());
        
        stack.pop();
        assertThrows(EmptyStackException.class, () -> {
            stack.peek();
        });
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import java.util.EmptyStackException;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    
    private StackArrayList stack;

    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }

    @Test
    public void peekTest() {
        // Test peek on an empty stack
        Exception exception = assertThrows(EmptyStackException.class, () -> {
            stack.peek();
        });
        assertTrue(exception instanceof EmptyStackException);

        // Test peek on a non-empty stack
        stack.push(5);
        stack.push(10);
        int topValue = stack.peek();
        assertEquals(10, topValue, "peek() should return the top element of the stack");
        
        // Ensure the size has not changed after peek()
        assertEquals(2, stack.size(), "The size of the stack should remain the same after peek()");

        // Ensure that the element was not removed
        int popValue = stack.pop();
        assertEquals(10, popValue, "The top element should still be on the stack after peek()");

        // Ensure that the size is now reduced by 1
        assertEquals(1, stack.size(), "The size of the stack should be reduced by 1 after pop()");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {

    @Test
    public void peekTest() {
        // Create an instance of StackArrayList
        StackArrayList stack = new StackArrayList();

        // Test with an empty stack
        Exception exception = assertThrows(EmptyStackException.class, stack::peek);
        assertNotNull(exception);

        // Push elements into the stack
        stack.push(1);
        stack.push(2);
        stack.push(3);

        // Peek the last element (which should be the most recently pushed)
        int lastElement = stack.peek();
        assertEquals(3, lastElement, "Peek should return the last element pushed onto the stack");

        // Ensure that the size is not changed after the peek operation
        assertEquals(3, stack.size(), "Peek should not remove the element from the stack");

        // Push another element and test peek again
        stack.push(4);
        assertEquals(4, stack.peek(), "Peek should now return the new last element pushed onto the stack");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import java.util.EmptyStackException;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {

    @Test
    public void peekTest() {
        // Arrange
        StackArrayList stack = new StackArrayList();
        stack.push(10);
        stack.push(20);

        // Act & Assert
        assertEquals(20, stack.peek(), "Peek should return the top element of the stack");

        // Arrange (for empty stack exception)
        stack.pop();
        stack.pop();

        // Act & Assert (for empty stack exception)
        assertThrows(EmptyStackException.class, stack::peek, "Peek should throw EmptyStackException when stack is empty");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.EmptyStackException;

public class StackArrayListTest {

    private StackArrayList stack;

    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }

    @Test
    public void peekEmptyStackThrowsException() {
        assertThrows(EmptyStackException.class, () -> {
            stack.peek();
        });
    }

    @Test
    public void peekAfterPushingElements() {
        stack.push(1);
        stack.push(42);
        stack.push(7);
        int result = stack.peek();
        assertEquals(7, result);
    }

    @Test
    public void peekDoesNotRemoveElement() {
        stack.push(1);
        stack.push(2);
        int peekedValue = stack.peek();
        int stackSizeAfterPeek = stack.size();
        assertEquals(2, peekedValue);
        assertEquals(2, stackSizeAfterPeek); // Size should remain same after peek
    }

    // ... Additional tests could go here ...

    @AfterEach
    public void tearDown() {
        stack = null;
    }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import java.util.EmptyStackException;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {

    private StackArrayList stack;

    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }

    @Test
    public void peekTestWhenStackNotEmpty() {
        // setup
        stack.push(1);
        stack.push(2);
        stack.push(3);

        // execute & verify
        assertEquals(3, stack.peek(), "peek() should return the last element pushed onto the stack");
    }

    @Test
    public void peekTestWhenStackIsEmpty() {
        // execute & verify
        assertThrows(EmptyStackException.class, stack::peek, "peek() should throw EmptyStackException when the stack is empty");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    private StackArrayList stack;

    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }

    @Test
    public void peekTest() {
        // Test peek on non-empty stack
        stack.push(1);
        stack.push(2);
        stack.push(3);
        int result = stack.peek();
        assertEquals(3, result, "Peek should return the top element of the stack");

        // Test peek after a pop
        stack.pop();
        result = stack.peek();
        assertEquals(2, result, "Peek should now return the new top after a pop");

        // Test peek on a single-element stack
        stack.pop();
        result = stack.peek();
        assertEquals(1, result, "Peek should return the last element when only one is present");

        // Test peek on empty stack
        stack.pop();
        assertThrows(EmptyStackException.class, stack::peek, "Peek on an empty stack should throw EmptyStackException");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {

    private StackArrayList stack;

    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }

    @Test
    public void peekTestWhenStackIsEmpty() {
        // Test to ensure EmptyStackException is thrown when peek() is called on an empty stack
        assertThrows(EmptyStackException.class, () -> {
            stack.peek();
        });
    }

    @Test
    public void peekTestWhenStackIsNotEmpty() {
        // Pushes an element onto the stack and then peeks it
        stack.push(1);
        int result = stack.peek();
        assertEquals(1, result);
        
        // Pushes another element and peeks to ensure the top of the stack is correct
        stack.push(2);
        result = stack.peek();
        assertEquals(2, result);
    }
}


