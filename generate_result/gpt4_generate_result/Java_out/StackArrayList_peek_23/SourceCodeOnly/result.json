{
    "project_name": "Java",
    "file_name": "StackArrayList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/stacks/StackArrayList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.stacks",
    "docstring": "/**\n     * Return the element at the top of this stack without removing it from the\n     * stack.\n     *\n     * @return the element at the top of this stack.\n     */",
    "source_code": "\npublic int peek() {\n    if (isEmpty()) {\n        throw new EmptyStackException();\n    }\n    return stack.get(stack.size() - 1);\n}\n",
    "class_name": "StackArrayList",
    "method_name": "peek",
    "arguments": [],
    "generate_test": [
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    private StackArrayList stack;\n\n    @BeforeEach\n    void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekWhenStackIsEmptyShouldThrowException() {\n        Exception exception = assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        });\n        \n        String expectedMessage = \"Empty Stack\";\n        String actualMessage = exception.getMessage();\n        \n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n\n    @Test\n    public void peekWhenStackIsNotEmptyShouldReturnLastElement() {\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        \n        assertEquals(3, stack.peek());\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport java.util.EmptyStackException;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    \n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setup() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTestWhenNotEmpty() {\n        stack.push(1);\n        assertEquals(1, stack.peek());\n    }\n\n    @Test\n    public void peekTestWhenEmpty() {\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        });\n    }\n}\n\nclass StackArrayList {\n\n    private ArrayList<Integer> stack = new ArrayList<>();\n\n    public boolean isEmpty() {\n        return stack.isEmpty();\n    }\n\n    public void push(int value) {\n        stack.add(value);\n    }\n\n    public int peek() {\n        if (isEmpty()) {\n            throw new EmptyStackException();\n        }\n        return stack.get(stack.size() - 1);\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setup() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTest() {\n        // Assuming StackArrayList has a push method to add elements\n        stack.push(1);\n        stack.push(2);\n        int peekedElement = stack.peek();\n        assertEquals(2, peekedElement, \"Peek should return the top element of the stack without removing it\");\n\n        stack.push(3);\n        peekedElement = stack.peek();\n        assertEquals(3, peekedElement, \"Peek should return the new top element after a push\");\n    }\n\n    @Test\n    public void peekWhenEmptyShouldThrowException() {\n        Exception exception = assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        }, \"Peek should throw EmptyStackException when the stack is empty\");\n\n        String expectedMessage = \"Stack is empty\"; // assuming the exception has this message\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n    \n    // Assuming StackArrayList has methods like push or an initialization that accepts a Collection.\n    // Otherwise, additional context would be needed to properly set up and test this method.\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    \n    private StackArrayList stack;\n    \n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n    \n    @Test\n    public void peekTest() {\n        // Assert that peek() throws an EmptyStackException when the stack is empty\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        });\n        \n        // Push items into the stack and then peek\n        stack.push(1);\n        assertEquals(1, stack.peek(), \"Peek should return the last element pushed which is 1\");\n        \n        stack.push(2);\n        assertEquals(2, stack.peek(), \"Peek should now return the last element pushed which is 2\");\n        \n        // Add more elements and check if peek still returns the top\n        stack.push(3);\n        stack.push(4);\n        assertEquals(4, stack.peek(), \"Peek should return the last element pushed which is 4\");\n        \n        // Pop an item and check if peek adjusts to the new top\n        stack.pop();\n        assertEquals(3, stack.peek(), \"After popping, peek should return the new last element which is 3\");\n    }\n    \n    @AfterEach\n    public void tearDown() {\n        stack = null;\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.EmptyStackException;\nimport java.util.ArrayList;\n\npublic class StackArrayListTest {\n\n    private ArrayList<Integer> stack;\n\n    // Setting up for the test, initialize stack before each test\n    @BeforeEach\n    public void setUp() {\n        stack = new ArrayList<>();\n    }\n\n    @Test\n    public void peekTest() {\n        // Test case where the stack is not empty\n        stack.add(1);\n        stack.add(2);\n        stack.add(3);\n        int lastElement = stack.get(stack.size() - 1); // should be 3\n        assertEquals(lastElement, 3, \"peek() should return the last element when the stack is not empty.\");\n\n        // Test case where the stack is empty, should throw EmptyStackException\n        stack.clear(); // ensure stack is empty\n        assertThrows(EmptyStackException.class, this::peek, \"peek() should throw EmptyStackException when stack is empty.\");\n    }\n\n    // Method stubs for the actual methods we're testing\n    public int peek() {\n        if (isEmpty()) {\n            throw new EmptyStackException();\n        }\n        return stack.get(stack.size() - 1);\n    }\n\n    public boolean isEmpty() {\n        return stack.isEmpty();\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    private Stack<Integer> stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new Stack<Integer>(); // Assuming a constructor is available for the Stack class\n    }\n\n    @Test\n    public void testPeekOnNonEmptyStackShouldReturnLastElement() {\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        assertEquals(3, stack.peek(), \"Peek should return the last element pushed onto the stack\");\n    }\n\n    @Test\n    public void testPeekOnEmptyStackShouldThrowException() {\n        assertThrows(EmptyStackException.class, () -> stack.peek(), \"Peek should throw EmptyStackException when the stack is empty\");\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTestWhenStackIsEmptyShouldThrowException() {\n        Exception exception = assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        });\n\n        String expectedMessage = \"Stack is empty\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n\n    @Test\n    public void peekTestWhenStackIsNotEmptyShouldReturnLastElement() {\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        int lastElement = stack.peek();\n        \n        assertEquals(3, lastElement);\n    }\n    \n    // Assuming you've got other stack methods like `isEmpty` and `push` already implemented.\n    // class StackArrayList { ... }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.EmptyStackException;\n\npublic class StackArrayListTest {\n    private StackArrayList stack;\n\n    @BeforeEach\n    void setUp() {\n        stack = new StackArrayList(); // Assume this is an existing class with a default constructor.\n    }\n\n    // Test peeking into a non-empty stack\n    @Test\n    void peekNonEmptyStack() {\n        stack.push(1); // Assume this is a valid method call to add an item to the stack.\n        stack.push(2);\n        assertEquals(2, stack.peek(), \"Peek should return the top element of the stack.\");\n        stack.push(3);\n        assertEquals(3, stack.peek(), \"Peek should consistently return the top element of the stack.\");\n    }\n\n    // Test peeking into an empty stack\n    @Test\n    void peekEmptyStack() {\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        }, \"Peeking into an empty stack should throw an EmptyStackException.\");\n    }\n\n    // Assuming a cleanup might be necessary after each test.\n    @AfterEach\n    void tearDown() {\n        stack = null;\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport java.util.EmptyStackException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n    }\n\n    @Test\n    public void peekTestNotEmpty() {\n        stack.push(1);\n        stack.push(2);\n        int topElement = stack.peek();\n        assertEquals(2, topElement, \"Peek should return the top element of the stack.\");\n    }\n\n    @Test\n    public void peekTestEmpty() {\n        assertThrows(EmptyStackException.class, () -> {\n            stack.peek();\n        }, \"Peek should throw EmptyStackException when the stack is empty.\");\n    }\n}",
        "\npackage com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.EmptyStackException;\nimport java.util.ArrayList;\n\npublic class StackArrayListTest {\n\n    private static ArrayList<Integer> stack;\n\n    @BeforeAll\n    public static void setUpClass() {\n        stack = new ArrayList<>();\n    }\n\n    @AfterEach\n    public void tearDownEachTest() {\n        stack.clear(); // Clear the stack after each test\n    }\n\n    @Test\n    public void peekTest() {\n        // Test case 1: throw EmptyStackException when the stack is empty\n        assertThrows(EmptyStackException.class, () -> {\n            peek();\n        });\n\n        // Test case 2: return the top element when the stack is not empty\n        stack.add(1); // Push an element to the stack\n        stack.add(2); // Push another element to the stack\n        stack.add(3); // Push one more element, which is now at the top\n        int topElement = peek();\n        assertEquals(3, topElement, \"peek() should return the last pushed element which is 3.\");\n    }\n    \n    public int peek() {\n        if (isEmpty()) {\n            throw new EmptyStackException();\n        }\n        return stack.get(stack.size() - 1);\n    }\n\n    private boolean isEmpty() {\n        return stack.isEmpty();\n    }\n}\n"
    ]
}