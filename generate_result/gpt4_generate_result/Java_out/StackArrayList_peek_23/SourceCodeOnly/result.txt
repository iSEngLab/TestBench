Source code: 


public int peek() {
    if (isEmpty()) {
        throw new EmptyStackException();
    }
    return stack.get(stack.size() - 1);
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import java.util.EmptyStackException;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    private StackArrayList stack;

    @BeforeEach
    void setUp() {
        stack = new StackArrayList();
    }

    @Test
    public void peekWhenStackIsEmptyShouldThrowException() {
        Exception exception = assertThrows(EmptyStackException.class, () -> {
            stack.peek();
        });
        
        String expectedMessage = "Empty Stack";
        String actualMessage = exception.getMessage();
        
        assertTrue(actualMessage.contains(expectedMessage));
    }

    @Test
    public void peekWhenStackIsNotEmptyShouldReturnLastElement() {
        stack.push(1);
        stack.push(2);
        stack.push(3);
        
        assertEquals(3, stack.peek());
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import java.util.EmptyStackException;
import java.util.ArrayList;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    
    private StackArrayList stack;

    @BeforeEach
    public void setup() {
        stack = new StackArrayList();
    }

    @Test
    public void peekTestWhenNotEmpty() {
        stack.push(1);
        assertEquals(1, stack.peek());
    }

    @Test
    public void peekTestWhenEmpty() {
        assertThrows(EmptyStackException.class, () -> {
            stack.peek();
        });
    }
}

class StackArrayList {

    private ArrayList<Integer> stack = new ArrayList<>();

    public boolean isEmpty() {
        return stack.isEmpty();
    }

    public void push(int value) {
        stack.add(value);
    }

    public int peek() {
        if (isEmpty()) {
            throw new EmptyStackException();
        }
        return stack.get(stack.size() - 1);
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import java.util.EmptyStackException;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {

    private StackArrayList stack;

    @BeforeEach
    public void setup() {
        stack = new StackArrayList();
    }

    @Test
    public void peekTest() {
        // Assuming StackArrayList has a push method to add elements
        stack.push(1);
        stack.push(2);
        int peekedElement = stack.peek();
        assertEquals(2, peekedElement, "Peek should return the top element of the stack without removing it");

        stack.push(3);
        peekedElement = stack.peek();
        assertEquals(3, peekedElement, "Peek should return the new top element after a push");
    }

    @Test
    public void peekWhenEmptyShouldThrowException() {
        Exception exception = assertThrows(EmptyStackException.class, () -> {
            stack.peek();
        }, "Peek should throw EmptyStackException when the stack is empty");

        String expectedMessage = "Stack is empty"; // assuming the exception has this message
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }
    
    // Assuming StackArrayList has methods like push or an initialization that accepts a Collection.
    // Otherwise, additional context would be needed to properly set up and test this method.
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import java.util.EmptyStackException;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    
    private StackArrayList stack;
    
    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }
    
    @Test
    public void peekTest() {
        // Assert that peek() throws an EmptyStackException when the stack is empty
        assertThrows(EmptyStackException.class, () -> {
            stack.peek();
        });
        
        // Push items into the stack and then peek
        stack.push(1);
        assertEquals(1, stack.peek(), "Peek should return the last element pushed which is 1");
        
        stack.push(2);
        assertEquals(2, stack.peek(), "Peek should now return the last element pushed which is 2");
        
        // Add more elements and check if peek still returns the top
        stack.push(3);
        stack.push(4);
        assertEquals(4, stack.peek(), "Peek should return the last element pushed which is 4");
        
        // Pop an item and check if peek adjusts to the new top
        stack.pop();
        assertEquals(3, stack.peek(), "After popping, peek should return the new last element which is 3");
    }
    
    @AfterEach
    public void tearDown() {
        stack = null;
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.EmptyStackException;
import java.util.ArrayList;

public class StackArrayListTest {

    private ArrayList<Integer> stack;

    // Setting up for the test, initialize stack before each test
    @BeforeEach
    public void setUp() {
        stack = new ArrayList<>();
    }

    @Test
    public void peekTest() {
        // Test case where the stack is not empty
        stack.add(1);
        stack.add(2);
        stack.add(3);
        int lastElement = stack.get(stack.size() - 1); // should be 3
        assertEquals(lastElement, 3, "peek() should return the last element when the stack is not empty.");

        // Test case where the stack is empty, should throw EmptyStackException
        stack.clear(); // ensure stack is empty
        assertThrows(EmptyStackException.class, this::peek, "peek() should throw EmptyStackException when stack is empty.");
    }

    // Method stubs for the actual methods we're testing
    public int peek() {
        if (isEmpty()) {
            throw new EmptyStackException();
        }
        return stack.get(stack.size() - 1);
    }

    public boolean isEmpty() {
        return stack.isEmpty();
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import java.util.EmptyStackException;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    private Stack<Integer> stack;

    @BeforeEach
    public void setUp() {
        stack = new Stack<Integer>(); // Assuming a constructor is available for the Stack class
    }

    @Test
    public void testPeekOnNonEmptyStackShouldReturnLastElement() {
        stack.push(1);
        stack.push(2);
        stack.push(3);
        assertEquals(3, stack.peek(), "Peek should return the last element pushed onto the stack");
    }

    @Test
    public void testPeekOnEmptyStackShouldThrowException() {
        assertThrows(EmptyStackException.class, () -> stack.peek(), "Peek should throw EmptyStackException when the stack is empty");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import java.util.EmptyStackException;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    private StackArrayList stack;

    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }

    @Test
    public void peekTestWhenStackIsEmptyShouldThrowException() {
        Exception exception = assertThrows(EmptyStackException.class, () -> {
            stack.peek();
        });

        String expectedMessage = "Stack is empty";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }

    @Test
    public void peekTestWhenStackIsNotEmptyShouldReturnLastElement() {
        stack.push(1);
        stack.push(2);
        stack.push(3);
        int lastElement = stack.peek();
        
        assertEquals(3, lastElement);
    }
    
    // Assuming you've got other stack methods like `isEmpty` and `push` already implemented.
    // class StackArrayList { ... }
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.EmptyStackException;

public class StackArrayListTest {
    private StackArrayList stack;

    @BeforeEach
    void setUp() {
        stack = new StackArrayList(); // Assume this is an existing class with a default constructor.
    }

    // Test peeking into a non-empty stack
    @Test
    void peekNonEmptyStack() {
        stack.push(1); // Assume this is a valid method call to add an item to the stack.
        stack.push(2);
        assertEquals(2, stack.peek(), "Peek should return the top element of the stack.");
        stack.push(3);
        assertEquals(3, stack.peek(), "Peek should consistently return the top element of the stack.");
    }

    // Test peeking into an empty stack
    @Test
    void peekEmptyStack() {
        assertThrows(EmptyStackException.class, () -> {
            stack.peek();
        }, "Peeking into an empty stack should throw an EmptyStackException.");
    }

    // Assuming a cleanup might be necessary after each test.
    @AfterEach
    void tearDown() {
        stack = null;
    }
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import java.util.EmptyStackException;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    private StackArrayList stack;

    @BeforeEach
    public void setUp() {
        stack = new StackArrayList();
    }

    @Test
    public void peekTestNotEmpty() {
        stack.push(1);
        stack.push(2);
        int topElement = stack.peek();
        assertEquals(2, topElement, "Peek should return the top element of the stack.");
    }

    @Test
    public void peekTestEmpty() {
        assertThrows(EmptyStackException.class, () -> {
            stack.peek();
        }, "Peek should throw EmptyStackException when the stack is empty.");
    }
}


No.10 generated result --------------------------


package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.EmptyStackException;
import java.util.ArrayList;

public class StackArrayListTest {

    private static ArrayList<Integer> stack;

    @BeforeAll
    public static void setUpClass() {
        stack = new ArrayList<>();
    }

    @AfterEach
    public void tearDownEachTest() {
        stack.clear(); // Clear the stack after each test
    }

    @Test
    public void peekTest() {
        // Test case 1: throw EmptyStackException when the stack is empty
        assertThrows(EmptyStackException.class, () -> {
            peek();
        });

        // Test case 2: return the top element when the stack is not empty
        stack.add(1); // Push an element to the stack
        stack.add(2); // Push another element to the stack
        stack.add(3); // Push one more element, which is now at the top
        int topElement = peek();
        assertEquals(3, topElement, "peek() should return the last pushed element which is 3.");
    }
    
    public int peek() {
        if (isEmpty()) {
            throw new EmptyStackException();
        }
        return stack.get(stack.size() - 1);
    }

    private boolean isEmpty() {
        return stack.isEmpty();
    }
}



