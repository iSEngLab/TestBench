{
    "project_name": "Java",
    "file_name": "TwinPrime.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/TwinPrime.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * This method returns twin prime of the integer value passed as argument\n     *\n     * @param input_number Integer value of which twin prime is to be found\n     * @return (number + 2) if number and (number + 2) are prime, -1 otherwise\n     */",
    "source_code": "\nstatic int getTwinPrime(int inputNumber) {\n\n    // if inputNumber and (inputNumber + 2) are both prime\n    // then return (inputNumber + 2) as a result\n    if (PrimeCheck.isPrime(inputNumber) && PrimeCheck.isPrime(inputNumber + 2)) {\n        return inputNumber + 2;\n    }\n    // if any one from inputNumber and (inputNumber + 2) or if both of them are not prime\n    // then return -1 as a result\n    return -1;\n}\n",
    "class_name": "TwinPrime",
    "method_name": "getTwinPrime",
    "arguments": [
        "int inputNumber"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test with a known twin prime\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes.\");\n        assertEquals(17, TwinPrime.getTwinPrime(15), \"15 is not a prime, so should return -1.\");\n        assertEquals(29, TwinPrime.getTwinPrime(27), \"27 is not a prime, so should return -1.\");\n        \n        // Test with a prime number that does not have a twin prime\n        assertEquals(-1, TwinPrime.getTwinPrime(23), \"23 is a prime but 25 is not, so should return -1.\");\n\n        // Test with numbers that are not prime\n        assertEquals(-1, TwinPrime.getTwinPrime(16), \"16 is not a prime, so should return -1.\");\n        assertEquals(-1, TwinPrime.getTwinPrime(8), \"8 is not a prime, so should return -1.\");\n\n        // Test with a negative number\n        assertEquals(-1, TwinPrime.getTwinPrime(-5), \"Negative numbers cannot be primes, so should return -1.\");\n        \n        // Test with zero and one, which are not considered primes\n        assertEquals(-1, TwinPrime.getTwinPrime(0), \"0 is not a prime, so should return -1.\");\n        assertEquals(-1, TwinPrime.getTwinPrime(1), \"1 is not a prime, so should return -1.\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes.\");\n        assertEquals(7, TwinPrime.getTwinPrime(5), \"5 and 7 are twin primes.\");\n        assertEquals(13, TwinPrime.getTwinPrime(11), \"11 and 13 are twin primes.\");\n        assertEquals(17, TwinPrime.getTwinPrime(15), \"15 is not prime, so no twin prime.\");\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"14 is not prime and neither is 16.\");\n        assertEquals(-1, TwinPrime.getTwinPrime(20), \"Neither 20 nor 22 are prime.\");\n        assertEquals(19, TwinPrime.getTwinPrime(17), \"17 and 19 are twin primes.\");\n        assertEquals(-1, TwinPrime.getTwinPrime(0), \"0 is not prime and neither is 2.\");\n        assertEquals(-1, TwinPrime.getTwinPrime(1), \"1 is not prime and neither is 3.\");\n        assertEquals(-1, TwinPrime.getTwinPrime(29), \"29 is prime but 31 is not, so no twin prime.\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Considering 5 and 7 are twin primes\n        assertEquals(7, TwinPrime.getTwinPrime(5), \"The twin prime of 5 should be 7\");\n        \n        // Considering 11 and 13 are twin primes\n        assertEquals(13, TwinPrime.getTwinPrime(11), \"The twin prime of 11 should be 13\");\n\n        // Considering 29 and 31 are twin primes\n        assertEquals(31, TwinPrime.getTwinPrime(29), \"The twin prime of 29 should be 31\");\n\n        // Testing non-prime input which should not have a twin prime\n        assertEquals(-1, TwinPrime.getTwinPrime(10), \"10 is not a prime number, so the result should be -1\");\n\n        // Testing a prime input which the next number (input + 2) is not prime\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"14 and 16 are not primes, so the result should be -1\");\n\n        // Edge case: testing the prime number 2, which should return -1 \n        // because it does not have a twin prime (2 and 4, where 4 is not a prime number)\n        assertEquals(-1, TwinPrime.getTwinPrime(2), \"2 is a prime number, but 4 is not, so the result should be -1\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    \n    @Test\n    public void getTwinPrimeTest() {\n        // Prime number 11 has a twin prime (13)\n        assertEquals(13, TwinPrime.getTwinPrime(11), \"11 should have a twin prime which is 13.\");\n\n        // Prime number 13 does not have a twin prime (15 is not prime)\n        assertEquals(-1, TwinPrime.getTwinPrime(13), \"13 should not have a twin prime as 15 is not prime.\");\n\n        // Check non-prime number (non-prime number should always return -1)\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"14 is not a prime number, so it should return -1.\");\n\n        // Edge Case: Test the lowest pair of twin primes (3, 5)\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 should have a twin prime which is 5.\");\n\n        // Test a negative number (should always return -1)\n        assertEquals(-1, TwinPrime.getTwinPrime(-1), \"Negative numbers are not prime, so it should return -1.\");\n\n        // Add more tests as needed to cover the edge cases and normal behavior\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"Twin prime of 3 should be 5\");\n        assertEquals(17, TwinPrime.getTwinPrime(13), \"Twin prime of 13 should be 17\");\n        assertEquals(29, TwinPrime.getTwinPrime(23), \"Twin prime of 23 should be 29\");\n        assertEquals(-1, TwinPrime.getTwinPrime(15), \"15 and 17 are not twin primes\");\n        assertEquals(-1, TwinPrime.getTwinPrime(2), \"2 and 4 are not twin primes, as 4 is not a prime\");\n        assertEquals(-1, TwinPrime.getTwinPrime(0), \"0 and 2 do not form a twin prime pair\");\n        assertEquals(-1, TwinPrime.getTwinPrime(-1), \"Negative numbers cannot have a twin prime\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Test for a case where the result should be a valid twin prime\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes\");\n\n        // Test for a case where input number is not a prime; should return -1\n        assertEquals(-1, TwinPrime.getTwinPrime(4), \"4 is not a prime, hence no twin prime\");\n\n        // Test for a case where input number is a prime but input number + 2 is not a prime; should return -1\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"14 is not a prime, hence no twin prime\");\n\n        // Test for another valid twin prime case\n        assertEquals(17, TwinPrime.getTwinPrime(15), \"15 and 17 are twin primes\");\n\n        // Test for a large input number that should return a valid twin prime\n        assertEquals(107, TwinPrime.getTwinPrime(105), \"105 and 107 are twin primes\");\n\n        // Test for negative input number which cannot have a twin prime\n        assertEquals(-1, TwinPrime.getTwinPrime(-1), \"negative numbers can't have twin primes\");\n\n        // Test for zero which cannot have a twin prime\n        assertEquals(-1, TwinPrime.getTwinPrime(0), \"zero can't have a twin prime\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Test with a pair of twin primes\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"Twin prime of 3 should be 5\");\n\n        // Test with first input as non-prime\n        assertEquals(-1, TwinPrime.getTwinPrime(4), \"There is no twin prime for 4\");\n\n        // Test with second number (inputNumber + 2) as non-prime\n        assertEquals(-1, TwinPrime.getTwinPrime(8), \"There is no twin prime for 8 since 10 is not a prime\");\n\n        // Test with another pair of twin primes\n        assertEquals(17, TwinPrime.getTwinPrime(15), \"Twin prime of 15 should be 17\");\n        \n        // Test with a large prime number\n        assertEquals(-1, TwinPrime.getTwinPrime(29), \"There should be no twin prime for 29 as 31 is not twin prime with it\");\n\n        // Test with negative number, assuming method should always return -1 for negative input\n        assertEquals(-1, TwinPrime.getTwinPrime(-5), \"There is no twin prime for negative numbers\");\n        \n        // Test with a zero, assuming method should always return -1\n        assertEquals(-1, TwinPrime.getTwinPrime(0), \"There should be no twin prime for 0\");\n\n        // Test with one, assuming method should return -1 as 1 is not considered a prime\n        assertEquals(-1, TwinPrime.getTwinPrime(1), \"There is no twin prime for 1 since 1 is not a prime\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Test with a prime input number which has a twin prime\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"Twin prime of 3 should be 5\");\n        \n        // Test with a prime input number which has a twin prime\n        assertEquals(17, TwinPrime.getTwinPrime(13), \"Twin prime of 13 should be 17\");\n        \n        // Test with an input number which does not have a twin prime\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"14 is not a prime, so should return -1\");\n        \n        // Test with an input prime number where the twin is not prime\n        assertEquals(-1, TwinPrime.getTwinPrime(11), \"Although 11 is prime, 13 is also prime but twin prime definition requires that (n + 2) also be prime, hence no twin prime exists and should return -1\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Test with a known pair of twin primes (input 3 should return 5)\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes, method should return 5\");\n\n        // Test with a prime number that does not have a twin prime (input 23 should return -1)\n        assertEquals(-1, TwinPrime.getTwinPrime(23), \"23 does not have a twin prime that is two numbers greater\");\n\n        // Test with a non-prime number (input 8 should return -1)\n        assertEquals(-1, TwinPrime.getTwinPrime(8), \"8 is not a prime, method should return -1\");\n\n        // Test with a negative prime number\n        assertEquals(-1, TwinPrime.getTwinPrime(-3), \"-3 is negative, method should return -1\");\n        \n        // Test with another known pair of twin primes (input 11 should return 13)\n        assertEquals(13, TwinPrime.getTwinPrime(11), \"11 and 13 are twin primes, method should return 13\");\n\n        // Additional test for larger prime to check efficiency\n        // Assuming 997 is a large enough prime for this test and its twin prime is 999 (which is not prime)\n        assertEquals(-1, TwinPrime.getTwinPrime(997), \"997's twin would be 999, which is not a prime, method should return -1\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    \n    @Test\n    public void getTwinPrimeTest() {\n        // assuming PrimeCheck.isPrime() is correctly implemented and available\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes\");\n        assertEquals(17, TwinPrime.getTwinPrime(15), \"15 and 17 are not twin primes, but the next prime is 17 (being lenient with non-prime input)\");\n        assertEquals(-1, TwinPrime.getTwinPrime(4), \"Neither 4 nor 6 are prime\");\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"14 is not prime and neither is 16\");\n        assertEquals(13, TwinPrime.getTwinPrime(11), \"11 and 13 are twin primes\");\n        assertEquals(19, TwinPrime.getTwinPrime(17), \"17 and 19 are twin primes\");\n        assertEquals(-1, TwinPrime.getTwinPrime(29), \"29 is prime but 31 is not\");\n    }\n}"
    ]
}