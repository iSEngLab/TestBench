{
    "project_name": "Java",
    "file_name": "TwinPrime.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/TwinPrime.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * This method returns twin prime of the integer value passed as argument\n     *\n     * @param input_number Integer value of which twin prime is to be found\n     * @return (number + 2) if number and (number + 2) are prime, -1 otherwise\n     */",
    "source_code": "\nstatic int getTwinPrime(int inputNumber) {\n\n    // if inputNumber and (inputNumber + 2) are both prime\n    // then return (inputNumber + 2) as a result\n    if (PrimeCheck.isPrime(inputNumber) && PrimeCheck.isPrime(inputNumber + 2)) {\n        return inputNumber + 2;\n    }\n    // if any one from inputNumber and (inputNumber + 2) or if both of them are not prime\n    // then return -1 as a result\n    return -1;\n}\n",
    "class_name": "TwinPrime",
    "method_name": "getTwinPrime",
    "arguments": [
        "int inputNumber"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Twin prime pair (5, 7)\n        assertEquals(7, TwinPrime.getTwinPrime(5), \"The twin prime of 5 should be 7\");\n\n        // Twin prime pair (11, 13)\n        assertEquals(13, TwinPrime.getTwinPrime(11), \"The twin prime of 11 should be 13\");\n\n        // Not a twin prime (inputNumber is not prime)\n        assertEquals(-1, TwinPrime.getTwinPrime(8), \"8 is not a prime, so should return -1\");\n\n        // Not a twin prime (inputNumber + 2 is not prime)\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"16 is not a prime, so should return -1\");\n\n        // Not a twin prime (both inputNumber and (inputNumber + 2) are not prime)\n        assertEquals(-1, TwinPrime.getTwinPrime(15), \"Neither 15 nor 17 is prime, should return -1\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"5 is a twin prime of 3\");\n        assertEquals(17, TwinPrime.getTwinPrime(15), \"17 is a twin prime of 15\");\n        assertEquals(-1, TwinPrime.getTwinPrime(4), \"4 is not a twin prime with any number\");\n        assertEquals(-1, TwinPrime.getTwinPrime(0), \"0 does not have a twin prime\");\n        assertEquals(29, TwinPrime.getTwinPrime(27), \"29 is a twin prime of 27\");\n        assertEquals(-1, TwinPrime.getTwinPrime(-1), \"-1 does not have a twin prime\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Test with a pair of twin primes\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes so result should be 5\");\n        assertEquals(17, TwinPrime.getTwinPrime(15), \"15 and 17 should return 17 because they are twin primes\");\n\n        // Test with non-prime input which should not have twin prime\n        assertEquals(-1, TwinPrime.getTwinPrime(8), \"8 is not a prime so result should be -1\");\n        assertEquals(-1, TwinPrime.getTwinPrime(20), \"20 is not a prime so result should be -1\");\n\n        // Test with a prime input but its twin is not a prime\n        assertEquals(-1, TwinPrime.getTwinPrime(11), \"13 is prime but 11 is not so result should be -1\");\n        \n        // Test with negative numbers which should not have twin prime\n        assertEquals(-1, TwinPrime.getTwinPrime(-3), \"-3 is negative and so result should be -1\");\n        assertEquals(-1, TwinPrime.getTwinPrime(-20), \"-20 is negative and so result should be -1\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Example test cases for the getTwinPrime method\n\n        // Test with a pair of twin primes\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"Expected twin prime of 3 is 5\");\n        assertEquals(17, TwinPrime.getTwinPrime(13), \"Expected twin prime of 13 is 17\");\n\n        // Test with prime numbers that do not have a twin prime\n        assertEquals(-1, TwinPrime.getTwinPrime(23), \"23 does not have a twin prime, expect -1\");\n        assertEquals(-1, TwinPrime.getTwinPrime(29), \"29 does not have a twin prime, expect -1\");\n\n        // Test with non-prime numbers\n        assertEquals(-1, TwinPrime.getTwinPrime(20), \"20 is not a prime, expect -1\");\n        assertEquals(-1, TwinPrime.getTwinPrime(1), \"1 is not a prime, expect -1\");\n        \n        // Test with negative numbers and zero\n        assertEquals(-1, TwinPrime.getTwinPrime(-2), \"Negative numbers are not prime, expect -1\");\n        assertEquals(-1, TwinPrime.getTwinPrime(0), \"0 is not prime, expect -1\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // testing with a pair of twin primes\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes but the method did not return the correct value\");\n        \n        // testing with a prime and its non-prime twin\n        assertEquals(-1, TwinPrime.getTwinPrime(11), \"11 and 13 are not twin primes, the method should return -1\");\n        \n        // testing with two non-prime numbers\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"14 and 16 are not primes, the method should return -1\");\n        \n        // testing with negative input\n        assertEquals(-1, TwinPrime.getTwinPrime(-3), \"Negative numbers are not prime, the method should return -1\");\n        \n        // testing with a prime number that does not have a twin prime\n        assertEquals(-1, TwinPrime.getTwinPrime(23), \"23 and 25 are not twin primes, the method should return -1\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Positive test case: expected a twin prime number\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes so expected 5\");\n        assertEquals(17, TwinPrime.getTwinPrime(15), \"15 and 17 are not twin primes, but 13 and 15 are not twin primes either, so expecting the next twin prime which is 17\");\n\n        // Negative test case: expected a result of -1 since one or both are not primes\n        assertEquals(-1, TwinPrime.getTwinPrime(8), \"8 and 10 are not twin primes\");\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"14 and 16 are not twin primes\");\n\n        // Edge case: testing with first prime number\n        assertEquals(-1, TwinPrime.getTwinPrime(2), \"2 and 4 are not twin primes\");\n        \n        // Edge case: testing with a negative input\n        assertEquals(-1, TwinPrime.getTwinPrime(-1), \"Negative numbers cannot be primes\");\n        \n        // Edge case: testing with input zero\n        assertEquals(-1, TwinPrime.getTwinPrime(0), \"0 and 2 are not twin primes\");\n\n        // Test with the smallest twin prime pair\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are the first and smallest twin primes\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"Twin prime of 3 should be 5\");\n        assertEquals(7, TwinPrime.getTwinPrime(5), \"Twin prime of 5 should be 7\");\n        assertEquals(13, TwinPrime.getTwinPrime(11), \"Twin prime of 11 should be 13\");\n        assertEquals(-1, TwinPrime.getTwinPrime(8), \"8 is not a prime, so the result should be -1\");\n        assertEquals(-1, TwinPrime.getTwinPrime(23), \"There is no twin prime for 23, so the result should be -1\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Test with a pair of twin primes\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes.\");\n        \n        // Test with a pair of twin primes\n        assertEquals(17, TwinPrime.getTwinPrime(15), \"15 and 17 are twin primes.\");\n        \n        // Test with a non-prime number\n        assertEquals(-1, TwinPrime.getTwinPrime(8), \"8 and 10 are not twin primes.\");\n        \n        // Test with a prime number but where inputNumber + 2 is not prime\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"14 and 16 are not twin primes.\");\n        \n        // Test with negative input\n        assertEquals(-1, TwinPrime.getTwinPrime(-1), \"Negative numbers cannot be primes.\");\n        \n        // Test with inputNumber being 2 which is the only even prime number\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes even though 3 is the only even prime.\");\n        \n        // Test with highest possible int value which should not be considered prime\n        assertEquals(-1, TwinPrime.getTwinPrime(Integer.MAX_VALUE), \"Max int value and Max int value + 2 are not valid primes.\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    \n    @Test\n    public void getTwinPrimeTest() {\n        // Test with a pair of twin primes\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"Should return 5 for input 3\");\n        assertEquals(17, TwinPrime.getTwinPrime(13), \"Should return 17 for input 13\");\n\n        // Test with a number that is not a part of a twin prime pair\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"Should return -1 for input 14\");\n        assertEquals(-1, TwinPrime.getTwinPrime(20), \"Should return -1 for input 20\");\n\n        // Test with negative numbers\n        assertEquals(-1, TwinPrime.getTwinPrime(-3), \"Should return -1 for input -3\");\n        assertEquals(-1, TwinPrime.getTwinPrime(-1), \"Should return -1 for input -1\");\n        \n        // Test with input of prime number that does not have a twin prime\n        assertEquals(-1, TwinPrime.getTwinPrime(23), \"Should return -1 for input 23\");\n\n        // Test with the smallest twin prime\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"Should return 5 for input 3\");\n\n        // Test with zero and one which are not prime numbers\n        assertEquals(-1, TwinPrime.getTwinPrime(0), \"Should return -1 for input 0\");\n        assertEquals(-1, TwinPrime.getTwinPrime(1), \"Should return -1 for input 1\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes\");\n        assertEquals(-1, TwinPrime.getTwinPrime(4), \"4 is not a prime\");\n        assertEquals(17, TwinPrime.getTwinPrime(13), \"13 and 17 are twin primes\");\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"Neither 14 nor 16 are primes\");\n        assertEquals(29, TwinPrime.getTwinPrime(11), \"11 and 29 are not twin primes but both are prime\");\n    }\n}"
    ]
}