Source code: 


static int getTwinPrime(int inputNumber) {

    // if inputNumber and (inputNumber + 2) are both prime
    // then return (inputNumber + 2) as a result
    if (PrimeCheck.isPrime(inputNumber) && PrimeCheck.isPrime(inputNumber + 2)) {
        return inputNumber + 2;
    }
    // if any one from inputNumber and (inputNumber + 2) or if both of them are not prime
    // then return -1 as a result
    return -1;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class TwinPrimeTest {

    @Test
    public void getTwinPrimeTest() {
        // Twin prime pair (5, 7)
        assertEquals(7, TwinPrime.getTwinPrime(5), "The twin prime of 5 should be 7");

        // Twin prime pair (11, 13)
        assertEquals(13, TwinPrime.getTwinPrime(11), "The twin prime of 11 should be 13");

        // Not a twin prime (inputNumber is not prime)
        assertEquals(-1, TwinPrime.getTwinPrime(8), "8 is not a prime, so should return -1");

        // Not a twin prime (inputNumber + 2 is not prime)
        assertEquals(-1, TwinPrime.getTwinPrime(14), "16 is not a prime, so should return -1");

        // Not a twin prime (both inputNumber and (inputNumber + 2) are not prime)
        assertEquals(-1, TwinPrime.getTwinPrime(15), "Neither 15 nor 17 is prime, should return -1");
    }
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        assertEquals(5, TwinPrime.getTwinPrime(3), "5 is a twin prime of 3");
        assertEquals(17, TwinPrime.getTwinPrime(15), "17 is a twin prime of 15");
        assertEquals(-1, TwinPrime.getTwinPrime(4), "4 is not a twin prime with any number");
        assertEquals(-1, TwinPrime.getTwinPrime(0), "0 does not have a twin prime");
        assertEquals(29, TwinPrime.getTwinPrime(27), "29 is a twin prime of 27");
        assertEquals(-1, TwinPrime.getTwinPrime(-1), "-1 does not have a twin prime");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {

    @Test
    public void getTwinPrimeTest() {
        // Test with a pair of twin primes
        assertEquals(5, TwinPrime.getTwinPrime(3), "3 and 5 are twin primes so result should be 5");
        assertEquals(17, TwinPrime.getTwinPrime(15), "15 and 17 should return 17 because they are twin primes");

        // Test with non-prime input which should not have twin prime
        assertEquals(-1, TwinPrime.getTwinPrime(8), "8 is not a prime so result should be -1");
        assertEquals(-1, TwinPrime.getTwinPrime(20), "20 is not a prime so result should be -1");

        // Test with a prime input but its twin is not a prime
        assertEquals(-1, TwinPrime.getTwinPrime(11), "13 is prime but 11 is not so result should be -1");
        
        // Test with negative numbers which should not have twin prime
        assertEquals(-1, TwinPrime.getTwinPrime(-3), "-3 is negative and so result should be -1");
        assertEquals(-1, TwinPrime.getTwinPrime(-20), "-20 is negative and so result should be -1");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        // Example test cases for the getTwinPrime method

        // Test with a pair of twin primes
        assertEquals(5, TwinPrime.getTwinPrime(3), "Expected twin prime of 3 is 5");
        assertEquals(17, TwinPrime.getTwinPrime(13), "Expected twin prime of 13 is 17");

        // Test with prime numbers that do not have a twin prime
        assertEquals(-1, TwinPrime.getTwinPrime(23), "23 does not have a twin prime, expect -1");
        assertEquals(-1, TwinPrime.getTwinPrime(29), "29 does not have a twin prime, expect -1");

        // Test with non-prime numbers
        assertEquals(-1, TwinPrime.getTwinPrime(20), "20 is not a prime, expect -1");
        assertEquals(-1, TwinPrime.getTwinPrime(1), "1 is not a prime, expect -1");
        
        // Test with negative numbers and zero
        assertEquals(-1, TwinPrime.getTwinPrime(-2), "Negative numbers are not prime, expect -1");
        assertEquals(-1, TwinPrime.getTwinPrime(0), "0 is not prime, expect -1");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class TwinPrimeTest {

    @Test
    public void getTwinPrimeTest() {
        // testing with a pair of twin primes
        assertEquals(5, TwinPrime.getTwinPrime(3), "3 and 5 are twin primes but the method did not return the correct value");
        
        // testing with a prime and its non-prime twin
        assertEquals(-1, TwinPrime.getTwinPrime(11), "11 and 13 are not twin primes, the method should return -1");
        
        // testing with two non-prime numbers
        assertEquals(-1, TwinPrime.getTwinPrime(14), "14 and 16 are not primes, the method should return -1");
        
        // testing with negative input
        assertEquals(-1, TwinPrime.getTwinPrime(-3), "Negative numbers are not prime, the method should return -1");
        
        // testing with a prime number that does not have a twin prime
        assertEquals(-1, TwinPrime.getTwinPrime(23), "23 and 25 are not twin primes, the method should return -1");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {

    @Test
    public void getTwinPrimeTest() {
        // Positive test case: expected a twin prime number
        assertEquals(5, TwinPrime.getTwinPrime(3), "3 and 5 are twin primes so expected 5");
        assertEquals(17, TwinPrime.getTwinPrime(15), "15 and 17 are not twin primes, but 13 and 15 are not twin primes either, so expecting the next twin prime which is 17");

        // Negative test case: expected a result of -1 since one or both are not primes
        assertEquals(-1, TwinPrime.getTwinPrime(8), "8 and 10 are not twin primes");
        assertEquals(-1, TwinPrime.getTwinPrime(14), "14 and 16 are not twin primes");

        // Edge case: testing with first prime number
        assertEquals(-1, TwinPrime.getTwinPrime(2), "2 and 4 are not twin primes");
        
        // Edge case: testing with a negative input
        assertEquals(-1, TwinPrime.getTwinPrime(-1), "Negative numbers cannot be primes");
        
        // Edge case: testing with input zero
        assertEquals(-1, TwinPrime.getTwinPrime(0), "0 and 2 are not twin primes");

        // Test with the smallest twin prime pair
        assertEquals(5, TwinPrime.getTwinPrime(3), "3 and 5 are the first and smallest twin primes");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        assertEquals(5, TwinPrime.getTwinPrime(3), "Twin prime of 3 should be 5");
        assertEquals(7, TwinPrime.getTwinPrime(5), "Twin prime of 5 should be 7");
        assertEquals(13, TwinPrime.getTwinPrime(11), "Twin prime of 11 should be 13");
        assertEquals(-1, TwinPrime.getTwinPrime(8), "8 is not a prime, so the result should be -1");
        assertEquals(-1, TwinPrime.getTwinPrime(23), "There is no twin prime for 23, so the result should be -1");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {

    @Test
    public void getTwinPrimeTest() {
        // Test with a pair of twin primes
        assertEquals(5, TwinPrime.getTwinPrime(3), "3 and 5 are twin primes.");
        
        // Test with a pair of twin primes
        assertEquals(17, TwinPrime.getTwinPrime(15), "15 and 17 are twin primes.");
        
        // Test with a non-prime number
        assertEquals(-1, TwinPrime.getTwinPrime(8), "8 and 10 are not twin primes.");
        
        // Test with a prime number but where inputNumber + 2 is not prime
        assertEquals(-1, TwinPrime.getTwinPrime(14), "14 and 16 are not twin primes.");
        
        // Test with negative input
        assertEquals(-1, TwinPrime.getTwinPrime(-1), "Negative numbers cannot be primes.");
        
        // Test with inputNumber being 2 which is the only even prime number
        assertEquals(5, TwinPrime.getTwinPrime(3), "3 and 5 are twin primes even though 3 is the only even prime.");
        
        // Test with highest possible int value which should not be considered prime
        assertEquals(-1, TwinPrime.getTwinPrime(Integer.MAX_VALUE), "Max int value and Max int value + 2 are not valid primes.");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    
    @Test
    public void getTwinPrimeTest() {
        // Test with a pair of twin primes
        assertEquals(5, TwinPrime.getTwinPrime(3), "Should return 5 for input 3");
        assertEquals(17, TwinPrime.getTwinPrime(13), "Should return 17 for input 13");

        // Test with a number that is not a part of a twin prime pair
        assertEquals(-1, TwinPrime.getTwinPrime(14), "Should return -1 for input 14");
        assertEquals(-1, TwinPrime.getTwinPrime(20), "Should return -1 for input 20");

        // Test with negative numbers
        assertEquals(-1, TwinPrime.getTwinPrime(-3), "Should return -1 for input -3");
        assertEquals(-1, TwinPrime.getTwinPrime(-1), "Should return -1 for input -1");
        
        // Test with input of prime number that does not have a twin prime
        assertEquals(-1, TwinPrime.getTwinPrime(23), "Should return -1 for input 23");

        // Test with the smallest twin prime
        assertEquals(5, TwinPrime.getTwinPrime(3), "Should return 5 for input 3");

        // Test with zero and one which are not prime numbers
        assertEquals(-1, TwinPrime.getTwinPrime(0), "Should return -1 for input 0");
        assertEquals(-1, TwinPrime.getTwinPrime(1), "Should return -1 for input 1");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {

    @Test
    public void getTwinPrimeTest() {
        assertEquals(5, TwinPrime.getTwinPrime(3), "3 and 5 are twin primes");
        assertEquals(-1, TwinPrime.getTwinPrime(4), "4 is not a prime");
        assertEquals(17, TwinPrime.getTwinPrime(13), "13 and 17 are twin primes");
        assertEquals(-1, TwinPrime.getTwinPrime(14), "Neither 14 nor 16 are primes");
        assertEquals(29, TwinPrime.getTwinPrime(11), "11 and 29 are not twin primes but both are prime");
    }
}


