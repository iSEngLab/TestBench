{
    "project_name": "Java",
    "file_name": "TwinPrime.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/TwinPrime.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * This method returns twin prime of the integer value passed as argument\n     *\n     * @param input_number Integer value of which twin prime is to be found\n     * @return (number + 2) if number and (number + 2) are prime, -1 otherwise\n     */",
    "source_code": "\nstatic int getTwinPrime(int inputNumber) {\n\n    // if inputNumber and (inputNumber + 2) are both prime\n    // then return (inputNumber + 2) as a result\n    if (PrimeCheck.isPrime(inputNumber) && PrimeCheck.isPrime(inputNumber + 2)) {\n        return inputNumber + 2;\n    }\n    // if any one from inputNumber and (inputNumber + 2) or if both of them are not prime\n    // then return -1 as a result\n    return -1;\n}\n",
    "class_name": "TwinPrime",
    "method_name": "getTwinPrime",
    "arguments": [
        "int inputNumber"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Test for known twin primes\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes\");\n        assertEquals(7, TwinPrime.getTwinPrime(5), \"5 and 7 are twin primes\");\n        assertEquals(17, TwinPrime.getTwinPrime(15), \"15 and 17 are not twin primes, but 17 is a prime\");\n\n        // Test for non-prime input, the result should be -1\n        assertEquals(-1, TwinPrime.getTwinPrime(8), \"8 is not a prime\");\n        \n        // Test for prime input that does not have a prime twin\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"14 and 16 are not twin primes\");\n\n        // Edge cases\n        assertEquals(-1, TwinPrime.getTwinPrime(-1), \"-1 and 1 are not twin primes\");\n        assertEquals(-1, TwinPrime.getTwinPrime(0), \"0 and 2 are not twin primes\");\n        assertEquals(-1, TwinPrime.getTwinPrime(1), \"1 and 3 are not twin primes\");\n        assertEquals(-1, TwinPrime.getTwinPrime(2), \"2 and 4 are not twin primes\"); // Although 2 is a prime, 4 is not\n        \n        // Extreme case for maximum int value (note: this requires PrimeCheck.isPrime to be correctly implemented for edge cases)\n        // Skipped as it's impractical to have a unit test for this scenario due to computation time\n        // assertEquals(-1, TwinPrime.getTwinPrime(Integer.MAX_VALUE), \"Edge case for maximum int value\");\n    }\n    \n    // Alternatively, if the class containing 'getTwinPrime' is named 'TwinPrime', then replace 'TwinPrime.getTwinPrime' with 'YourClassName.getTwinPrime'\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Positive test case where both are twin primes\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes but were not recognized as such\");\n\n        // Negative test case where one or both are not primes\n        assertEquals(-1, TwinPrime.getTwinPrime(4), \"4 and 6 are not twin primes\");\n\n        // Test case where the input number is a prime but inputNumber + 2 is not\n        assertEquals(-1, TwinPrime.getTwinPrime(7), \"7 is prime but 9 is not\");\n\n        // Test case where inputNumber + 2 is a prime but input number is not\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"14 is not prime but 16 is not a prime too\");\n\n        // Test negative numbers handling\n        assertEquals(-1, TwinPrime.getTwinPrime(-1), \"Negative numbers cannot be primes\");\n\n        // Test case for the lowest twin prime pair\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes\");\n\n        // Test limit of twin primes, ensure method works for larger primes\n        assertEquals(29, TwinPrime.getTwinPrime(27), \"27 and 29 are twin primes\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    \n    @Test\n    public void getTwinPrimeTest() {\n        // Test with a pair of twin primes\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes\");\n        assertEquals(17, TwinPrime.getTwinPrime(15), \"15 and 17 are twin primes\");\n        \n        // Test with a number that is not part of a twin prime pair\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"14 and 16 are not twin primes\");\n        assertEquals(-1, TwinPrime.getTwinPrime(20), \"20 and 22 are not twin primes\");\n\n        // Test with a negative number\n        assertEquals(-1, TwinPrime.getTwinPrime(-3), \"Negative numbers cannot be prime\");\n\n        // Test with zero and one\n        assertEquals(-1, TwinPrime.getTwinPrime(0), \"0 and 2 cannot be twin primes because 0 is not prime\");\n        assertEquals(-1, TwinPrime.getTwinPrime(1), \"1 and 3 cannot be twin primes because 1 is not prime\");\n\n        // Test with a large prime number\n        assertEquals(10061, TwinPrime.getTwinPrime(10059), \"10059 and 10061 are twin primes\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    \n    @Test\n    public void getTwinPrimeTest() {\n        // Test with a pair of twin primes\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes so the method should return 5.\");\n        assertEquals(17, TwinPrime.getTwinPrime(15), \"15 and 17 are not twin primes but 15 + 2 = 17 is prime, so the method should return 17.\");\n        \n        // Test with non-twin prime numbers\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"14 and 16 are not prime so the method should return -1.\");\n        assertEquals(-1, TwinPrime.getTwinPrime(0), \"0 and 2 are not twin primes so the method should return -1.\");\n        \n        // Test at the edge of prime / non-prime boundary\n        assertEquals(19, TwinPrime.getTwinPrime(17), \"17 and 19 are twin primes so the method should return 19.\");\n        assertEquals(-1, TwinPrime.getTwinPrime(18), \"18 and 20 are not prime so the method should return -1.\");\n        \n        // Test with negative input\n        assertEquals(-1, TwinPrime.getTwinPrime(-5), \"Negative numbers are not prime so the method should return -1.\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Test with a twin prime number input (3,5 are twin primes)\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"Expected twin prime of 3 to be 5.\");\n        \n        // Test with a non-twin prime input (there are no twin primes where one of the pair is 4)\n        assertEquals(-1, TwinPrime.getTwinPrime(4), \"Expected result to be -1 since 4 is not a part of twin primes.\");\n        \n        // Test with a negative input\n        assertEquals(-1, TwinPrime.getTwinPrime(-3), \"Expected result to be -1 since negative numbers cannot be prime.\");\n        \n        // Test with a larger twin prime number input (11,13 are twin primes)\n        assertEquals(13, TwinPrime.getTwinPrime(11), \"Expected twin prime of 11 to be 13.\");\n        \n        // Test with a prime number that's not part of a twin prime pair\n        assertEquals(-1, TwinPrime.getTwinPrime(23), \"Expected result to be -1 since 23 is a prime but not part of twin prime.\");\n        \n        // Test with a zero input\n        assertEquals(-1, TwinPrime.getTwinPrime(0), \"Expected result to be -1 since 0 cannot be part of twin primes.\");\n        \n        // Test at the boundary of int values. Note that this assumes that the method handles overflows correctly\n        assertEquals(-1, TwinPrime.getTwinPrime(Integer.MAX_VALUE - 1), \"Expected result to be -1 since it's outside of prime range or causes overflow.\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Twin prime pairs (3, 5), (11, 13), etc.\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"5 is a twin prime of 3\");\n        assertEquals(13, TwinPrime.getTwinPrime(11), \"13 is a twin prime of 11\");\n\n        // Non-twin primes, such as (4, 6) or (14, 16)\n        assertEquals(-1, TwinPrime.getTwinPrime(4), \"4 is not a prime, so its twin is also not a prime\");\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"14 is not a prime, thus it can't have a twin prime\");\n\n        // Test with a negative number\n        assertEquals(-1, TwinPrime.getTwinPrime(-3), \"Negative numbers cannot be prime\");\n\n        // Test with a large prime to ensure the method works for larger inputs\n        assertEquals(17, TwinPrime.getTwinPrime(13), \"17 is a twin prime of 13\");\n\n        // Test the edge case of the smallest non-prime number, 1\n        assertEquals(-1, TwinPrime.getTwinPrime(1), \"1 is not prime, and neither is 3 in this case\");\n\n        // Test the case with a prime number that does not have a twin prime\n        assertEquals(-1, TwinPrime.getTwinPrime(23), \"23 is prime but 25 is not, so no twin prime\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Test for a known twin prime pair (3, 5)\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes\");\n\n        // Test for a pair that is not a twin prime, expecting -1\n        assertEquals(-1, TwinPrime.getTwinPrime(4), \"4 and 6 are not twin primes\");\n\n        // Test for a prime number that doesn't have a twin prime\n        assertEquals(-1, TwinPrime.getTwinPrime(29), \"29 doesn't have a twin prime\");\n\n        // Test for a prime number that has a twin prime\n        assertEquals(17, TwinPrime.getTwinPrime(13), \"13 and 17 are twin primes\");\n\n        // Test for a negative input, which is not a prime by definition\n        assertEquals(-1, TwinPrime.getTwinPrime(-3), \"Negative numbers are not primes\");\n\n        // Test for zero and one, which are not primes\n        assertEquals(-1, TwinPrime.getTwinPrime(0), \"0 is not a prime\");\n        assertEquals(-1, TwinPrime.getTwinPrime(1), \"1 is not a prime\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes, so should return 5\");\n        assertEquals(-1, TwinPrime.getTwinPrime(4), \"4 and 6 are not twin primes, so should return -1\");\n        assertEquals(17, TwinPrime.getTwinPrime(15), \"15 is not a prime but 17 is, implying that 15 and 17 are twin primes\");\n        assertEquals(-1, TwinPrime.getTwinPrime(29), \"29 is a prime but 31 is not, so should return -1\");\n        assertEquals(11, TwinPrime.getTwinPrime(9), \"9 is not a prime but 11 is, implying that 9 and 11 are twin primes\");\n        assertEquals(29, TwinPrime.getTwinPrime(27), \"27 is not a prime but 29 is, implying that 27 and 29 are twin primes\");\n        assertEquals(-1, TwinPrime.getTwinPrime(1), \"1 and 3 are not considered twin primes, so should return -1\");\n        assertEquals(-1, TwinPrime.getTwinPrime(0), \"0 and 2 are not twin primes as 0 is not a prime, so should return -1\");\n        assertEquals(19, TwinPrime.getTwinPrime(17), \"17 and 19 are twin primes, so should return 19\");\n        assertEquals(-1, TwinPrime.getTwinPrime(23), \"23 is a prime but 25 is not, so should return -1\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        // Test for a pair of twin primes\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"Should return the twin prime of 3 which is 5\");\n        assertEquals(17, TwinPrime.getTwinPrime(13), \"Should return the twin prime of 13 which is 17\");\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"14 is not a prime, so it should return -1\");\n        assertEquals(-1, TwinPrime.getTwinPrime(29), \"29 has no twin prime, so it should return -1\");\n        assertEquals(19, TwinPrime.getTwinPrime(17), \"Should return the twin prime of 17 which is 19\");\n\n        // Edge cases\n        assertEquals(-1, TwinPrime.getTwinPrime(1), \"1 is not a prime, so it should return -1\");\n        assertEquals(-1, TwinPrime.getTwinPrime(0), \"0 is not a prime, so it should return -1\");\n        assertEquals(-1, TwinPrime.getTwinPrime(-1), \"-1 is not a prime, so it should return -1\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n\n    @Test\n    public void getTwinPrimeTest() {\n        assertEquals(5, TwinPrime.getTwinPrime(3), \"3 and 5 are twin primes\");\n        assertEquals(17, TwinPrime.getTwinPrime(15), \"15 is not a prime but 17 is a twin prime with 19\");\n        assertEquals(29, TwinPrime.getTwinPrime(27), \"27 is not a prime but 29 is a twin prime with 31\");\n        assertEquals(-1, TwinPrime.getTwinPrime(14), \"Neither 14 nor 16 are prime numbers\");\n        assertEquals(-1, TwinPrime.getTwinPrime(0), \"0 and 2 should not be considered twin primes\");\n        assertEquals(-1, TwinPrime.getTwinPrime(1), \"1 and 3 should not be considered twin primes\");\n        assertEquals(-1, TwinPrime.getTwinPrime(29), \"29 is a prime number but 31 is not\");\n    }\n}"
    ]
}