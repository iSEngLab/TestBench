Source code: 


static int getTwinPrime(int inputNumber) {

    // if inputNumber and (inputNumber + 2) are both prime
    // then return (inputNumber + 2) as a result
    if (PrimeCheck.isPrime(inputNumber) && PrimeCheck.isPrime(inputNumber + 2)) {
        return inputNumber + 2;
    }
    // if any one from inputNumber and (inputNumber + 2) or if both of them are not prime
    // then return -1 as a result
    return -1;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {

    @Test
    public void getTwinPrimeTest() {
        // Test for known twin primes
        assertEquals(5, TwinPrime.getTwinPrime(3), "3 and 5 are twin primes");
        assertEquals(7, TwinPrime.getTwinPrime(5), "5 and 7 are twin primes");
        assertEquals(17, TwinPrime.getTwinPrime(15), "15 and 17 are not twin primes, but 17 is a prime");

        // Test for non-prime input, the result should be -1
        assertEquals(-1, TwinPrime.getTwinPrime(8), "8 is not a prime");
        
        // Test for prime input that does not have a prime twin
        assertEquals(-1, TwinPrime.getTwinPrime(14), "14 and 16 are not twin primes");

        // Edge cases
        assertEquals(-1, TwinPrime.getTwinPrime(-1), "-1 and 1 are not twin primes");
        assertEquals(-1, TwinPrime.getTwinPrime(0), "0 and 2 are not twin primes");
        assertEquals(-1, TwinPrime.getTwinPrime(1), "1 and 3 are not twin primes");
        assertEquals(-1, TwinPrime.getTwinPrime(2), "2 and 4 are not twin primes"); // Although 2 is a prime, 4 is not
        
        // Extreme case for maximum int value (note: this requires PrimeCheck.isPrime to be correctly implemented for edge cases)
        // Skipped as it's impractical to have a unit test for this scenario due to computation time
        // assertEquals(-1, TwinPrime.getTwinPrime(Integer.MAX_VALUE), "Edge case for maximum int value");
    }
    
    // Alternatively, if the class containing 'getTwinPrime' is named 'TwinPrime', then replace 'TwinPrime.getTwinPrime' with 'YourClassName.getTwinPrime'
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {

    @Test
    public void getTwinPrimeTest() {
        // Positive test case where both are twin primes
        assertEquals(5, TwinPrime.getTwinPrime(3), "3 and 5 are twin primes but were not recognized as such");

        // Negative test case where one or both are not primes
        assertEquals(-1, TwinPrime.getTwinPrime(4), "4 and 6 are not twin primes");

        // Test case where the input number is a prime but inputNumber + 2 is not
        assertEquals(-1, TwinPrime.getTwinPrime(7), "7 is prime but 9 is not");

        // Test case where inputNumber + 2 is a prime but input number is not
        assertEquals(-1, TwinPrime.getTwinPrime(14), "14 is not prime but 16 is not a prime too");

        // Test negative numbers handling
        assertEquals(-1, TwinPrime.getTwinPrime(-1), "Negative numbers cannot be primes");

        // Test case for the lowest twin prime pair
        assertEquals(5, TwinPrime.getTwinPrime(3), "3 and 5 are twin primes");

        // Test limit of twin primes, ensure method works for larger primes
        assertEquals(29, TwinPrime.getTwinPrime(27), "27 and 29 are twin primes");
    }
}


No.3 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    
    @Test
    public void getTwinPrimeTest() {
        // Test with a pair of twin primes
        assertEquals(5, TwinPrime.getTwinPrime(3), "3 and 5 are twin primes");
        assertEquals(17, TwinPrime.getTwinPrime(15), "15 and 17 are twin primes");
        
        // Test with a number that is not part of a twin prime pair
        assertEquals(-1, TwinPrime.getTwinPrime(14), "14 and 16 are not twin primes");
        assertEquals(-1, TwinPrime.getTwinPrime(20), "20 and 22 are not twin primes");

        // Test with a negative number
        assertEquals(-1, TwinPrime.getTwinPrime(-3), "Negative numbers cannot be prime");

        // Test with zero and one
        assertEquals(-1, TwinPrime.getTwinPrime(0), "0 and 2 cannot be twin primes because 0 is not prime");
        assertEquals(-1, TwinPrime.getTwinPrime(1), "1 and 3 cannot be twin primes because 1 is not prime");

        // Test with a large prime number
        assertEquals(10061, TwinPrime.getTwinPrime(10059), "10059 and 10061 are twin primes");
    }
}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    
    @Test
    public void getTwinPrimeTest() {
        // Test with a pair of twin primes
        assertEquals(5, TwinPrime.getTwinPrime(3), "3 and 5 are twin primes so the method should return 5.");
        assertEquals(17, TwinPrime.getTwinPrime(15), "15 and 17 are not twin primes but 15 + 2 = 17 is prime, so the method should return 17.");
        
        // Test with non-twin prime numbers
        assertEquals(-1, TwinPrime.getTwinPrime(14), "14 and 16 are not prime so the method should return -1.");
        assertEquals(-1, TwinPrime.getTwinPrime(0), "0 and 2 are not twin primes so the method should return -1.");
        
        // Test at the edge of prime / non-prime boundary
        assertEquals(19, TwinPrime.getTwinPrime(17), "17 and 19 are twin primes so the method should return 19.");
        assertEquals(-1, TwinPrime.getTwinPrime(18), "18 and 20 are not prime so the method should return -1.");
        
        // Test with negative input
        assertEquals(-1, TwinPrime.getTwinPrime(-5), "Negative numbers are not prime so the method should return -1.");
    }
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {

    @Test
    public void getTwinPrimeTest() {
        // Test with a twin prime number input (3,5 are twin primes)
        assertEquals(5, TwinPrime.getTwinPrime(3), "Expected twin prime of 3 to be 5.");
        
        // Test with a non-twin prime input (there are no twin primes where one of the pair is 4)
        assertEquals(-1, TwinPrime.getTwinPrime(4), "Expected result to be -1 since 4 is not a part of twin primes.");
        
        // Test with a negative input
        assertEquals(-1, TwinPrime.getTwinPrime(-3), "Expected result to be -1 since negative numbers cannot be prime.");
        
        // Test with a larger twin prime number input (11,13 are twin primes)
        assertEquals(13, TwinPrime.getTwinPrime(11), "Expected twin prime of 11 to be 13.");
        
        // Test with a prime number that's not part of a twin prime pair
        assertEquals(-1, TwinPrime.getTwinPrime(23), "Expected result to be -1 since 23 is a prime but not part of twin prime.");
        
        // Test with a zero input
        assertEquals(-1, TwinPrime.getTwinPrime(0), "Expected result to be -1 since 0 cannot be part of twin primes.");
        
        // Test at the boundary of int values. Note that this assumes that the method handles overflows correctly
        assertEquals(-1, TwinPrime.getTwinPrime(Integer.MAX_VALUE - 1), "Expected result to be -1 since it's outside of prime range or causes overflow.");
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {

    @Test
    public void getTwinPrimeTest() {
        // Twin prime pairs (3, 5), (11, 13), etc.
        assertEquals(5, TwinPrime.getTwinPrime(3), "5 is a twin prime of 3");
        assertEquals(13, TwinPrime.getTwinPrime(11), "13 is a twin prime of 11");

        // Non-twin primes, such as (4, 6) or (14, 16)
        assertEquals(-1, TwinPrime.getTwinPrime(4), "4 is not a prime, so its twin is also not a prime");
        assertEquals(-1, TwinPrime.getTwinPrime(14), "14 is not a prime, thus it can't have a twin prime");

        // Test with a negative number
        assertEquals(-1, TwinPrime.getTwinPrime(-3), "Negative numbers cannot be prime");

        // Test with a large prime to ensure the method works for larger inputs
        assertEquals(17, TwinPrime.getTwinPrime(13), "17 is a twin prime of 13");

        // Test the edge case of the smallest non-prime number, 1
        assertEquals(-1, TwinPrime.getTwinPrime(1), "1 is not prime, and neither is 3 in this case");

        // Test the case with a prime number that does not have a twin prime
        assertEquals(-1, TwinPrime.getTwinPrime(23), "23 is prime but 25 is not, so no twin prime");
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {

    @Test
    public void getTwinPrimeTest() {
        // Test for a known twin prime pair (3, 5)
        assertEquals(5, TwinPrime.getTwinPrime(3), "3 and 5 are twin primes");

        // Test for a pair that is not a twin prime, expecting -1
        assertEquals(-1, TwinPrime.getTwinPrime(4), "4 and 6 are not twin primes");

        // Test for a prime number that doesn't have a twin prime
        assertEquals(-1, TwinPrime.getTwinPrime(29), "29 doesn't have a twin prime");

        // Test for a prime number that has a twin prime
        assertEquals(17, TwinPrime.getTwinPrime(13), "13 and 17 are twin primes");

        // Test for a negative input, which is not a prime by definition
        assertEquals(-1, TwinPrime.getTwinPrime(-3), "Negative numbers are not primes");

        // Test for zero and one, which are not primes
        assertEquals(-1, TwinPrime.getTwinPrime(0), "0 is not a prime");
        assertEquals(-1, TwinPrime.getTwinPrime(1), "1 is not a prime");
    }
}


No.8 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {

    @Test
    public void getTwinPrimeTest() {
        assertEquals(5, TwinPrime.getTwinPrime(3), "3 and 5 are twin primes, so should return 5");
        assertEquals(-1, TwinPrime.getTwinPrime(4), "4 and 6 are not twin primes, so should return -1");
        assertEquals(17, TwinPrime.getTwinPrime(15), "15 is not a prime but 17 is, implying that 15 and 17 are twin primes");
        assertEquals(-1, TwinPrime.getTwinPrime(29), "29 is a prime but 31 is not, so should return -1");
        assertEquals(11, TwinPrime.getTwinPrime(9), "9 is not a prime but 11 is, implying that 9 and 11 are twin primes");
        assertEquals(29, TwinPrime.getTwinPrime(27), "27 is not a prime but 29 is, implying that 27 and 29 are twin primes");
        assertEquals(-1, TwinPrime.getTwinPrime(1), "1 and 3 are not considered twin primes, so should return -1");
        assertEquals(-1, TwinPrime.getTwinPrime(0), "0 and 2 are not twin primes as 0 is not a prime, so should return -1");
        assertEquals(19, TwinPrime.getTwinPrime(17), "17 and 19 are twin primes, so should return 19");
        assertEquals(-1, TwinPrime.getTwinPrime(23), "23 is a prime but 25 is not, so should return -1");
    }
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {

    @Test
    public void getTwinPrimeTest() {
        // Test for a pair of twin primes
        assertEquals(5, TwinPrime.getTwinPrime(3), "Should return the twin prime of 3 which is 5");
        assertEquals(17, TwinPrime.getTwinPrime(13), "Should return the twin prime of 13 which is 17");
        assertEquals(-1, TwinPrime.getTwinPrime(14), "14 is not a prime, so it should return -1");
        assertEquals(-1, TwinPrime.getTwinPrime(29), "29 has no twin prime, so it should return -1");
        assertEquals(19, TwinPrime.getTwinPrime(17), "Should return the twin prime of 17 which is 19");

        // Edge cases
        assertEquals(-1, TwinPrime.getTwinPrime(1), "1 is not a prime, so it should return -1");
        assertEquals(-1, TwinPrime.getTwinPrime(0), "0 is not a prime, so it should return -1");
        assertEquals(-1, TwinPrime.getTwinPrime(-1), "-1 is not a prime, so it should return -1");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {

    @Test
    public void getTwinPrimeTest() {
        assertEquals(5, TwinPrime.getTwinPrime(3), "3 and 5 are twin primes");
        assertEquals(17, TwinPrime.getTwinPrime(15), "15 is not a prime but 17 is a twin prime with 19");
        assertEquals(29, TwinPrime.getTwinPrime(27), "27 is not a prime but 29 is a twin prime with 31");
        assertEquals(-1, TwinPrime.getTwinPrime(14), "Neither 14 nor 16 are prime numbers");
        assertEquals(-1, TwinPrime.getTwinPrime(0), "0 and 2 should not be considered twin primes");
        assertEquals(-1, TwinPrime.getTwinPrime(1), "1 and 3 should not be considered twin primes");
        assertEquals(-1, TwinPrime.getTwinPrime(29), "29 is a prime number but 31 is not");
    }
}


