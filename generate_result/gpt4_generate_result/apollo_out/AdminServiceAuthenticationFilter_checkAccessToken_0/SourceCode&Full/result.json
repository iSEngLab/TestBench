{
    "project_name": "apollo",
    "file_name": "AdminServiceAuthenticationFilter.java",
    "relative_path": "apollo/apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/filter/AdminServiceAuthenticationFilter.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.adminservice.filter",
    "docstring": null,
    "source_code": "private boolean checkAccessToken(String token) {\n  String accessTokens = bizConfig.getAdminServiceAccessTokens();\n\n  // if user forget to configure access tokens, then default to pass\n  if (Strings.isNullOrEmpty(accessTokens)) {\n    return true;\n  }\n\n  // no need to check\n  if (Strings.isNullOrEmpty(token)) {\n    return false;\n  }\n\n  // update cache\n  if (!accessTokens.equals(lastAccessTokens)) {\n    synchronized (this) {\n      accessTokenList = ACCESS_TOKEN_SPLITTER.splitToList(accessTokens);\n      lastAccessTokens = accessTokens;\n    }\n  }\n\n  return accessTokenList.contains(token);\n}\n",
    "class_name": "AdminServiceAuthenticationFilter",
    "method_name": "checkAccessToken",
    "arguments": [
        "String token"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.when;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n\n    private BizConfig mockBizConfig;\n    private AdminServiceAuthenticationFilter authenticationFilter;\n\n    @BeforeEach\n    public void setUp() {\n        // Mock the BizConfig dependency which is used by AdminServiceAuthenticationFilter\n        mockBizConfig = Mockito.mock(BizConfig.class);\n        authenticationFilter = new AdminServiceAuthenticationFilter(mockBizConfig);\n    }\n\n    @Test\n    public void checkAccessTokenTest_NoAccessTokens_ReturnTrue() {\n        // Assuming no access tokens are configured, should return true\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n\n        assertTrue(authenticationFilter.checkAccessToken(\"anyToken\"));\n    }\n\n    @Test\n    public void checkAccessTokenTest_NullOrEmptyToken_ReturnFalse() {\n        // Given a non-empty list of valid tokens\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"validToken1,validToken2\");\n\n        // When passing a null token, should return false\n        assertFalse(authenticationFilter.checkAccessToken(null));\n        \n        // When passing an empty string as the token, should also return false\n        assertFalse(authenticationFilter.checkAccessToken(\"\"));\n    }\n\n    @Test\n    public void checkAccessTokenTest_ValidToken_ReturnTrue() {\n        // Setup valid tokens and simulate the token checking\n        String validTokens = \"validToken1,validToken2\";\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(validTokens);\n\n        assertTrue(authenticationFilter.checkAccessToken(\"validToken1\"));\n    }\n\n    @Test\n    public void checkAccessTokenTest_InvalidToken_ReturnFalse() {\n        // Setup valid tokens and simulate token checking with an invalid token\n        String validTokens = \"validToken1,validToken2\";\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(validTokens);\n\n        assertFalse(authenticationFilter.checkAccessToken(\"invalidToken\"));\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class AdminServiceAuthenticationFilterTest {\n    \n    private AdminServiceAuthenticationFilter adminServiceAuthenticationFilter;\n    \n    @Mock\n    private BizConfig mockedBizConfig;\n    \n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n        adminServiceAuthenticationFilter = new AdminServiceAuthenticationFilter(mockedBizConfig);\n    }\n    \n    @Test\n    public void checkAccessTokenTest_noConfiguredAccessTokens_shouldPass() {\n        when(mockedBizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n        \n        assertTrue(adminServiceAuthenticationFilter.checkAccessToken(\"anyToken\"));\n    }\n\n    @Test\n    public void checkAccessTokenTest_nullOrEmptyToken_shouldFail() {\n        when(mockedBizConfig.getAdminServiceAccessTokens()).thenReturn(\"validToken\");\n        \n        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(null));\n        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(\"\"));\n    }\n\n    @Test\n    public void checkAccessTokenTest_validToken_shouldPass() {\n        String validAccessToken = \"validToken\";\n        when(mockedBizConfig.getAdminServiceAccessTokens()).thenReturn(validAccessToken);\n        \n        assertTrue(adminServiceAuthenticationFilter.checkAccessToken(validAccessToken));\n    }\n\n    @Test\n    public void checkAccessTokenTest_invalidToken_shouldFail() {\n        when(mockedBizConfig.getAdminServiceAccessTokens()).thenReturn(\"validToken\");\n        \n        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(\"invalidToken\"));\n    }\n    \n    @Test\n    public void checkAccessTokenTest_accessTokenListUpdatedOnNewConfig_shouldPass() {\n        when(mockedBizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2\").thenReturn(\"token3,token4\");\n        \n        assertTrue(adminServiceAuthenticationFilter.checkAccessToken(\"token1\"));\n        // Simulate config change\n        assertTrue(adminServiceAuthenticationFilter.checkAccessToken(\"token3\"));\n        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(\"token1\")); // old token\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n\n    private BizConfig mockBizConfig;\n    private AdminServiceAuthenticationFilter filter;\n\n    @BeforeEach\n    void setUp() {\n        mockBizConfig = mock(BizConfig.class);\n        filter = new AdminServiceAuthenticationFilter(mockBizConfig);\n    }\n\n    @Test\n    public void checkAccessTokenTest() {\n        // Assuming the BizConfig will return the access tokens for testing\n        String validTokens = \"token1,token2,token3\";\n        String validToken = \"token2\";\n        String invalidToken = \"token4\";\n        String emptyConfig = \"\";\n\n        // Configure BizConfig mock to return predefined access tokens\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(validTokens);\n\n        // Test for valid access token\n        assertTrue(filter.checkAccessToken(validToken), \"Access should be granted with a valid token\");\n\n        // Test for invalid access token\n        assertFalse(filter.checkAccessToken(invalidToken), \"Access should not be granted with an invalid token\");\n\n        // Test for no token provided\n        assertFalse(filter.checkAccessToken(null), \"Access should not be granted with a null token\");\n        assertFalse(filter.checkAccessToken(\"\"), \"Access should not be granted with an empty string token\");\n\n        // Testing if no access tokens are configured (should default to pass)\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(emptyConfig);\n        assertTrue(filter.checkAccessToken(validToken), \"Access should be granted by default when no tokens are configured\");\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport static org.mockito.Mockito.*;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n\n    private BizConfig mockBizConfig;\n    private AdminServiceAuthenticationFilter filter;\n\n    @BeforeEach\n    public void setUp() {\n        mockBizConfig = mock(BizConfig.class);\n        filter = new AdminServiceAuthenticationFilter(mockBizConfig);\n    }\n\n    @Test\n    public void testCheckAccessTokenWhenAccessTokensNotConfiguredShouldReturnTrue() {\n        // Arrange - no access tokens are configured\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n\n        // Act & Assert - should return true\n        assertTrue(filter.checkAccessToken(\"someToken\"), \"Access should be granted when no access tokens are configured.\");\n    }\n\n    @Test\n    public void testCheckAccessTokenWithNullTokenShouldReturnFalse() {\n        // Arrange - access tokens are configured, but token to check is null\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2\");\n\n        // Act & Assert - should return false\n        assertFalse(filter.checkAccessToken(null), \"Access should be denied when token is null.\");\n    }\n\n    @Test\n    public void testCheckAccessTokenWithValidTokenShouldReturnTrue() {\n        // Arrange - valid token\n        String validToken = \"token1\";\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2\");\n\n        // Act & Assert - should return true\n        // Invoke checkAccessToken twice to also test cache update logic\n        assertTrue(filter.checkAccessToken(validToken), \"Access should be granted for a valid token.\");\n        assertTrue(filter.checkAccessToken(validToken), \"Access should still be granted when checking with a cached token list.\");\n    }\n\n    @Test\n    public void testCheckAccessTokenWithInvalidTokenShouldReturnFalse() {\n        // Arrange - invalid token\n        String invalidToken = \"invalidToken\";\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2\");\n\n        // Act & Assert - should return false\n        assertFalse(filter.checkAccessToken(invalidToken), \"Access should be denied for an invalid token.\");\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.util.ArrayList;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.when;\n\npublic class AdminServiceAuthenticationFilterTest {\n\n    private AdminServiceAuthenticationFilter filter;\n    private BizConfig mockBizConfig;\n\n    @BeforeEach\n    public void setUp() {\n        mockBizConfig = Mockito.mock(BizConfig.class);\n        filter = new AdminServiceAuthenticationFilter(mockBizConfig);\n    }\n\n    @Test\n    public void checkAccessTokenTest() {\n        // Prepare the access tokens to be returned by the mock\n        String validToken = \"validToken\";\n        String invalidToken = \"invalidToken\";\n        String accessTokens = \"token1,token2,validToken\";\n\n        // Mock the BizConfig responses\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);\n\n        // Test for a valid token\n        assertTrue(filter.checkAccessToken(validToken), \"Access check for valid token failed.\");\n\n        // Test for an invalid token\n        assertFalse(filter.checkAccessToken(invalidToken), \"Access check for invalid token failed.\");\n\n        // Test for null token\n        assertFalse(filter.checkAccessToken(null), \"Access check for null token should fail.\");\n\n        // Test for an empty token\n        assertFalse(filter.checkAccessToken(\"\"), \"Access check for empty token should fail.\");\n\n        // Test for no configured tokens (i.e., empty string returned by BizConfig)\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n        assertTrue(filter.checkAccessToken(validToken), \"Access should pass if no tokens configured.\");\n\n        // Test for no configured tokens and a null input token\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n        assertFalse(filter.checkAccessToken(null), \"Access should fail if no tokens configured and token is null.\");\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport java.util.Arrays;\n\npublic class AdminServiceAuthenticationFilterTest {\n\n    private BizConfig bizConfig;\n    private AdminServiceAuthenticationFilter adminServiceAuthenticationFilter;\n\n    @BeforeEach\n    public void setUp() {\n        bizConfig = mock(BizConfig.class);\n        adminServiceAuthenticationFilter = new AdminServiceAuthenticationFilter(bizConfig);\n    }\n\n    @Test\n    public void checkAccessTokenTest() {\n        String validToken = \"validToken\";\n        String invalidToken = \"invalidToken\";\n        String accessTokens = \"token1,token2,validToken\";\n\n        // Configure the mock to return `accessTokens` when getAdminServiceAccessTokens is called\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);\n        \n        // Token is valid\n        assertTrue(adminServiceAuthenticationFilter.checkAccessToken(validToken));\n\n        // Token is invalid\n        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(invalidToken));\n\n        // Access tokens have not been configured (null)\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(null);\n        assertTrue(adminServiceAuthenticationFilter.checkAccessToken(validToken));\n\n        // Access tokens have not been configured (empty)\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n        assertTrue(adminServiceAuthenticationFilter.checkAccessToken(validToken));\n\n        // The token to check is null\n        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(null));\n\n        // The token to check is empty\n        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(\"\"));\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.mockito.Mockito.*;\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class AdminServiceAuthenticationFilterTest {\n\n    private BizConfig mockBizConfig;\n    private AdminServiceAuthenticationFilter filterUnderTest;\n\n    @BeforeEach\n    public void setUp() {\n        mockBizConfig = mock(BizConfig.class);\n        filterUnderTest = new AdminServiceAuthenticationFilter(mockBizConfig);\n    }\n\n    @Test\n    public void checkAccessTokenTest_withInvalidToken_shouldReturnFalse() {\n        String token = \"invalidToken\";\n        String accessTokens = \"validToken1,validToken2\";\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);\n\n        boolean result = filterUnderTest.checkAccessToken(token);\n\n        assertFalse(result);\n    }\n\n    @Test\n    public void checkAccessTokenTest_withValidToken_shouldReturnTrue() {\n        String token = \"validToken1\";\n        String accessTokens = \"validToken1,validToken2\";\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);\n\n        boolean result = filterUnderTest.checkAccessToken(token);\n\n        assertTrue(result);\n    }\n\n    @Test\n    public void checkAccessTokenTest_withEmptyAccessTokens_shouldReturnTrue() {\n        String token = \"anyToken\";\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n\n        boolean result = filterUnderTest.checkAccessToken(token);\n\n        assertTrue(result);\n    }\n\n    @Test\n    public void checkAccessTokenTest_withNullToken_shouldReturnFalse() {\n        String accessTokens = \"validToken1,validToken2\";\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);\n\n        boolean result = filterUnderTest.checkAccessToken(null);\n\n        assertFalse(result);\n    }\n\n    @Test\n    public void checkAccessTokenTest_withTokenUpdate_shouldUpdateCacheAndReturnTrue() {\n        String accessTokensOriginal = \"validToken1\";\n        String accessTokensUpdated = \"validToken2,validToken3\";\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokensOriginal, accessTokensUpdated);\n\n        // First call to initialize cache\n        assertTrue(filterUnderTest.checkAccessToken(\"validToken1\"));\n        // Change in config should update cache\n        assertTrue(filterUnderTest.checkAccessToken(\"validToken2\"));\n        // Even though original token was valid, it should now be invalid after cache update\n        assertFalse(filterUnderTest.checkAccessToken(\"validToken1\"));\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Cleanup if necessary\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport com.google.common.base.Strings;\nimport java.util.Arrays;\n\npublic class AdminServiceAuthenticationFilterTest {\n\n    private AdminServiceAuthenticationFilter filter;\n    private BizConfig mockBizConfig;\n\n    @BeforeEach\n    public void setUp() {\n        mockBizConfig = mock(BizConfig.class);\n        filter = new AdminServiceAuthenticationFilter(mockBizConfig);\n    }\n\n    @Test\n    public void checkAccessTokenTest() {\n        String validToken = \"validToken\";\n        String invalidToken = \"invalidToken\";\n        String accessTokens = \"validToken,someOtherToken\";\n\n        // 1. Test with null access tokens config - should default to pass\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(null);\n        assertTrue(filter.checkAccessToken(validToken));\n\n        // 2. Test with empty access tokens string - should default to pass\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n        assertTrue(filter.checkAccessToken(validToken));\n\n        // 3. Test with non-empty access tokens string and null token - should fail\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);\n        assertFalse(filter.checkAccessToken(null));\n\n        // 4. Test with non-empty access tokens string and empty token - should fail\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);\n        assertFalse(filter.checkAccessToken(\"\"));\n\n        // 5. Test with non-empty access tokens string and valid token - should pass\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);\n        assertTrue(filter.checkAccessToken(validToken));\n\n        // 6. Test with non-empty access tokens string and invalid token - should fail\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);\n        assertFalse(filter.checkAccessToken(invalidToken));\n\n        // 7. Test access token cache update by changing the access tokens\n        String updatedAccessTokens = \"newValidToken,anotherToken\";\n        when(mockBizConfig.getAdminServiceAccessTokens())\n            .thenReturn(accessTokens) // first call returns the original tokens\n            .thenReturn(updatedAccessTokens); // subsequent calls return updated tokens\n\n        // Check with original valid token - should pass and populate cache\n        assertTrue(filter.checkAccessToken(validToken));\n\n        // Cache should now be updated, and original valid token should not work anymore\n        assertFalse(filter.checkAccessToken(validToken));\n\n        // And the new valid token should pass\n        assertTrue(filter.checkAccessToken(\"newValidToken\"));\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Clean up resources or reset mocks if necessary\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport com.google.common.base.Strings;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n\n    private AdminServiceAuthenticationFilter filter;\n    private BizConfig bizConfigMock;\n\n    @BeforeEach\n    public void setUp() {\n        bizConfigMock = Mockito.mock(BizConfig.class);\n        filter = new AdminServiceAuthenticationFilter(bizConfigMock);\n    }\n\n    @Test\n    public void whenAccessTokensNotConfigured_thenShouldPass() {\n        Mockito.when(bizConfigMock.getAdminServiceAccessTokens()).thenReturn(\"\");\n\n        assertTrue(filter.checkAccessToken(\"anyToken\"));\n    }\n\n    @Test\n    public void whenTokenIsEmpty_thenShouldFail() {\n        Mockito.when(bizConfigMock.getAdminServiceAccessTokens()).thenReturn(\"configuredToken\");\n\n        assertFalse(filter.checkAccessToken(null));\n        assertFalse(filter.checkAccessToken(\"\"));\n    }\n\n    @Test\n    public void whenTokenIsNotInList_thenShouldFail() {\n        String accessTokens = \"token1,token2,token3\";\n        Mockito.when(bizConfigMock.getAdminServiceAccessTokens()).thenReturn(accessTokens);\n\n        assertFalse(filter.checkAccessToken(\"nonExistingToken\"));\n    }\n\n    @Test\n    public void whenTokenIsInList_thenShouldPass() {\n        String accessTokens = \"token1,token2,token3\";\n        Mockito.when(bizConfigMock.getAdminServiceAccessTokens()).thenReturn(accessTokens);\n\n        assertTrue(filter.checkAccessToken(\"token2\"));\n    }\n\n    // This test ensures that if the access tokens list was updated,\n    // the cache will be updated too and the new tokens will be validated successfully\n    @Test\n    public void whenAccessTokensChanged_thenCacheShouldBeUpdated() {\n        String initialAccessTokens = \"token1,token2,token3\";\n        Mockito.when(bizConfigMock.getAdminServiceAccessTokens()).thenReturn(initialAccessTokens);\n\n        assertTrue(filter.checkAccessToken(\"token2\"));  // first check to populate cache\n\n        String updatedAccessTokens = \"token4,token5,token6\";\n        Mockito.when(bizConfigMock.getAdminServiceAccessTokens()).thenReturn(updatedAccessTokens);\n\n        assertFalse(filter.checkAccessToken(\"token2\")); // this token was valid before but not after update\n\n        assertTrue(filter.checkAccessToken(\"token5\"));  // now we check with a new valid token\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport com.google.common.base.Strings;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.when;\n\n@ExtendWith(MockitoExtension.class)\npublic class AdminServiceAuthenticationFilterTest {\n\n    private AdminServiceAuthenticationFilter adminServiceAuthenticationFilter;\n\n    @Mock\n    private BizConfig bizConfig;\n\n    @BeforeEach\n    public void setUp() {\n        adminServiceAuthenticationFilter = new AdminServiceAuthenticationFilter(bizConfig);\n    }\n\n    @Test\n    public void checkAccessTokenTest() {\n        String validToken = \"validToken\";\n        String invalidToken = \"invalidToken\";\n        String configuredTokens = \"validToken,anotherValidToken\";\n\n        // Mock the behavior of bizConfig to return the configured access tokens\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(configuredTokens);\n\n        // Test case with no tokens configured (defaults to true)\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n        assertTrue(adminServiceAuthenticationFilter.checkAccessToken(\"anyToken\"));\n\n        // Test case with a null token (should return false)\n        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(null));\n\n        // Test case with an empty token (should return false)\n        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(Strings.emptyToNull(\"\")));\n\n        // Test case with a valid token (should return true)\n        assertTrue(adminServiceAuthenticationFilter.checkAccessToken(validToken));\n\n        // Test case with an invalid token (should return false)\n        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(invalidToken));\n    }\n}"
    ]
}