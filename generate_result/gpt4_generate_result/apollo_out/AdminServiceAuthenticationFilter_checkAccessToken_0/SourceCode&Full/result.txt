Source code: 

private boolean checkAccessToken(String token) {
  String accessTokens = bizConfig.getAdminServiceAccessTokens();

  // if user forget to configure access tokens, then default to pass
  if (Strings.isNullOrEmpty(accessTokens)) {
    return true;
  }

  // no need to check
  if (Strings.isNullOrEmpty(token)) {
    return false;
  }

  // update cache
  if (!accessTokens.equals(lastAccessTokens)) {
    synchronized (this) {
      accessTokenList = ACCESS_TOKEN_SPLITTER.splitToList(accessTokens);
      lastAccessTokens = accessTokens;
    }
  }

  return accessTokenList.contains(token);
}



No.1 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import com.ctrip.framework.apollo.biz.config.BizConfig;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.*;

public class AdminServiceAuthenticationFilterTest {

    private BizConfig mockBizConfig;
    private AdminServiceAuthenticationFilter authenticationFilter;

    @BeforeEach
    public void setUp() {
        // Mock the BizConfig dependency which is used by AdminServiceAuthenticationFilter
        mockBizConfig = Mockito.mock(BizConfig.class);
        authenticationFilter = new AdminServiceAuthenticationFilter(mockBizConfig);
    }

    @Test
    public void checkAccessTokenTest_NoAccessTokens_ReturnTrue() {
        // Assuming no access tokens are configured, should return true
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn("");

        assertTrue(authenticationFilter.checkAccessToken("anyToken"));
    }

    @Test
    public void checkAccessTokenTest_NullOrEmptyToken_ReturnFalse() {
        // Given a non-empty list of valid tokens
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn("validToken1,validToken2");

        // When passing a null token, should return false
        assertFalse(authenticationFilter.checkAccessToken(null));
        
        // When passing an empty string as the token, should also return false
        assertFalse(authenticationFilter.checkAccessToken(""));
    }

    @Test
    public void checkAccessTokenTest_ValidToken_ReturnTrue() {
        // Setup valid tokens and simulate the token checking
        String validTokens = "validToken1,validToken2";
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(validTokens);

        assertTrue(authenticationFilter.checkAccessToken("validToken1"));
    }

    @Test
    public void checkAccessTokenTest_InvalidToken_ReturnFalse() {
        // Setup valid tokens and simulate token checking with an invalid token
        String validTokens = "validToken1,validToken2";
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(validTokens);

        assertFalse(authenticationFilter.checkAccessToken("invalidToken"));
    }
}


No.2 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.ctrip.framework.apollo.biz.config.BizConfig;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class AdminServiceAuthenticationFilterTest {
    
    private AdminServiceAuthenticationFilter adminServiceAuthenticationFilter;
    
    @Mock
    private BizConfig mockedBizConfig;
    
    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        adminServiceAuthenticationFilter = new AdminServiceAuthenticationFilter(mockedBizConfig);
    }
    
    @Test
    public void checkAccessTokenTest_noConfiguredAccessTokens_shouldPass() {
        when(mockedBizConfig.getAdminServiceAccessTokens()).thenReturn("");
        
        assertTrue(adminServiceAuthenticationFilter.checkAccessToken("anyToken"));
    }

    @Test
    public void checkAccessTokenTest_nullOrEmptyToken_shouldFail() {
        when(mockedBizConfig.getAdminServiceAccessTokens()).thenReturn("validToken");
        
        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(null));
        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(""));
    }

    @Test
    public void checkAccessTokenTest_validToken_shouldPass() {
        String validAccessToken = "validToken";
        when(mockedBizConfig.getAdminServiceAccessTokens()).thenReturn(validAccessToken);
        
        assertTrue(adminServiceAuthenticationFilter.checkAccessToken(validAccessToken));
    }

    @Test
    public void checkAccessTokenTest_invalidToken_shouldFail() {
        when(mockedBizConfig.getAdminServiceAccessTokens()).thenReturn("validToken");
        
        assertFalse(adminServiceAuthenticationFilter.checkAccessToken("invalidToken"));
    }
    
    @Test
    public void checkAccessTokenTest_accessTokenListUpdatedOnNewConfig_shouldPass() {
        when(mockedBizConfig.getAdminServiceAccessTokens()).thenReturn("token1,token2").thenReturn("token3,token4");
        
        assertTrue(adminServiceAuthenticationFilter.checkAccessToken("token1"));
        // Simulate config change
        assertTrue(adminServiceAuthenticationFilter.checkAccessToken("token3"));
        assertFalse(adminServiceAuthenticationFilter.checkAccessToken("token1")); // old token
    }
}


No.3 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import org.junit.jupiter.api.*;
import org.mockito.Mockito;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class AdminServiceAuthenticationFilterTest {

    private BizConfig mockBizConfig;
    private AdminServiceAuthenticationFilter filter;

    @BeforeEach
    void setUp() {
        mockBizConfig = mock(BizConfig.class);
        filter = new AdminServiceAuthenticationFilter(mockBizConfig);
    }

    @Test
    public void checkAccessTokenTest() {
        // Assuming the BizConfig will return the access tokens for testing
        String validTokens = "token1,token2,token3";
        String validToken = "token2";
        String invalidToken = "token4";
        String emptyConfig = "";

        // Configure BizConfig mock to return predefined access tokens
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(validTokens);

        // Test for valid access token
        assertTrue(filter.checkAccessToken(validToken), "Access should be granted with a valid token");

        // Test for invalid access token
        assertFalse(filter.checkAccessToken(invalidToken), "Access should not be granted with an invalid token");

        // Test for no token provided
        assertFalse(filter.checkAccessToken(null), "Access should not be granted with a null token");
        assertFalse(filter.checkAccessToken(""), "Access should not be granted with an empty string token");

        // Testing if no access tokens are configured (should default to pass)
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(emptyConfig);
        assertTrue(filter.checkAccessToken(validToken), "Access should be granted by default when no tokens are configured");
    }
}


No.4 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import static org.mockito.Mockito.*;

import com.ctrip.framework.apollo.biz.config.BizConfig;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AdminServiceAuthenticationFilterTest {

    private BizConfig mockBizConfig;
    private AdminServiceAuthenticationFilter filter;

    @BeforeEach
    public void setUp() {
        mockBizConfig = mock(BizConfig.class);
        filter = new AdminServiceAuthenticationFilter(mockBizConfig);
    }

    @Test
    public void testCheckAccessTokenWhenAccessTokensNotConfiguredShouldReturnTrue() {
        // Arrange - no access tokens are configured
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn("");

        // Act & Assert - should return true
        assertTrue(filter.checkAccessToken("someToken"), "Access should be granted when no access tokens are configured.");
    }

    @Test
    public void testCheckAccessTokenWithNullTokenShouldReturnFalse() {
        // Arrange - access tokens are configured, but token to check is null
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn("token1,token2");

        // Act & Assert - should return false
        assertFalse(filter.checkAccessToken(null), "Access should be denied when token is null.");
    }

    @Test
    public void testCheckAccessTokenWithValidTokenShouldReturnTrue() {
        // Arrange - valid token
        String validToken = "token1";
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn("token1,token2");

        // Act & Assert - should return true
        // Invoke checkAccessToken twice to also test cache update logic
        assertTrue(filter.checkAccessToken(validToken), "Access should be granted for a valid token.");
        assertTrue(filter.checkAccessToken(validToken), "Access should still be granted when checking with a cached token list.");
    }

    @Test
    public void testCheckAccessTokenWithInvalidTokenShouldReturnFalse() {
        // Arrange - invalid token
        String invalidToken = "invalidToken";
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn("token1,token2");

        // Act & Assert - should return false
        assertFalse(filter.checkAccessToken(invalidToken), "Access should be denied for an invalid token.");
    }
}


No.5 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import com.ctrip.framework.apollo.biz.config.BizConfig;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

public class AdminServiceAuthenticationFilterTest {

    private AdminServiceAuthenticationFilter filter;
    private BizConfig mockBizConfig;

    @BeforeEach
    public void setUp() {
        mockBizConfig = Mockito.mock(BizConfig.class);
        filter = new AdminServiceAuthenticationFilter(mockBizConfig);
    }

    @Test
    public void checkAccessTokenTest() {
        // Prepare the access tokens to be returned by the mock
        String validToken = "validToken";
        String invalidToken = "invalidToken";
        String accessTokens = "token1,token2,validToken";

        // Mock the BizConfig responses
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);

        // Test for a valid token
        assertTrue(filter.checkAccessToken(validToken), "Access check for valid token failed.");

        // Test for an invalid token
        assertFalse(filter.checkAccessToken(invalidToken), "Access check for invalid token failed.");

        // Test for null token
        assertFalse(filter.checkAccessToken(null), "Access check for null token should fail.");

        // Test for an empty token
        assertFalse(filter.checkAccessToken(""), "Access check for empty token should fail.");

        // Test for no configured tokens (i.e., empty string returned by BizConfig)
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn("");
        assertTrue(filter.checkAccessToken(validToken), "Access should pass if no tokens configured.");

        // Test for no configured tokens and a null input token
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn("");
        assertFalse(filter.checkAccessToken(null), "Access should fail if no tokens configured and token is null.");
    }
}


No.6 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.ctrip.framework.apollo.biz.config.BizConfig;
import java.util.Arrays;

public class AdminServiceAuthenticationFilterTest {

    private BizConfig bizConfig;
    private AdminServiceAuthenticationFilter adminServiceAuthenticationFilter;

    @BeforeEach
    public void setUp() {
        bizConfig = mock(BizConfig.class);
        adminServiceAuthenticationFilter = new AdminServiceAuthenticationFilter(bizConfig);
    }

    @Test
    public void checkAccessTokenTest() {
        String validToken = "validToken";
        String invalidToken = "invalidToken";
        String accessTokens = "token1,token2,validToken";

        // Configure the mock to return `accessTokens` when getAdminServiceAccessTokens is called
        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);
        
        // Token is valid
        assertTrue(adminServiceAuthenticationFilter.checkAccessToken(validToken));

        // Token is invalid
        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(invalidToken));

        // Access tokens have not been configured (null)
        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(null);
        assertTrue(adminServiceAuthenticationFilter.checkAccessToken(validToken));

        // Access tokens have not been configured (empty)
        when(bizConfig.getAdminServiceAccessTokens()).thenReturn("");
        assertTrue(adminServiceAuthenticationFilter.checkAccessToken(validToken));

        // The token to check is null
        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(null));

        // The token to check is empty
        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(""));
    }
}


No.7 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import org.junit.jupiter.api.*;
import static org.mockito.Mockito.*;
import com.ctrip.framework.apollo.biz.config.BizConfig;
import java.util.ArrayList;
import java.util.Arrays;

public class AdminServiceAuthenticationFilterTest {

    private BizConfig mockBizConfig;
    private AdminServiceAuthenticationFilter filterUnderTest;

    @BeforeEach
    public void setUp() {
        mockBizConfig = mock(BizConfig.class);
        filterUnderTest = new AdminServiceAuthenticationFilter(mockBizConfig);
    }

    @Test
    public void checkAccessTokenTest_withInvalidToken_shouldReturnFalse() {
        String token = "invalidToken";
        String accessTokens = "validToken1,validToken2";
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);

        boolean result = filterUnderTest.checkAccessToken(token);

        assertFalse(result);
    }

    @Test
    public void checkAccessTokenTest_withValidToken_shouldReturnTrue() {
        String token = "validToken1";
        String accessTokens = "validToken1,validToken2";
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);

        boolean result = filterUnderTest.checkAccessToken(token);

        assertTrue(result);
    }

    @Test
    public void checkAccessTokenTest_withEmptyAccessTokens_shouldReturnTrue() {
        String token = "anyToken";
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn("");

        boolean result = filterUnderTest.checkAccessToken(token);

        assertTrue(result);
    }

    @Test
    public void checkAccessTokenTest_withNullToken_shouldReturnFalse() {
        String accessTokens = "validToken1,validToken2";
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);

        boolean result = filterUnderTest.checkAccessToken(null);

        assertFalse(result);
    }

    @Test
    public void checkAccessTokenTest_withTokenUpdate_shouldUpdateCacheAndReturnTrue() {
        String accessTokensOriginal = "validToken1";
        String accessTokensUpdated = "validToken2,validToken3";
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokensOriginal, accessTokensUpdated);

        // First call to initialize cache
        assertTrue(filterUnderTest.checkAccessToken("validToken1"));
        // Change in config should update cache
        assertTrue(filterUnderTest.checkAccessToken("validToken2"));
        // Even though original token was valid, it should now be invalid after cache update
        assertFalse(filterUnderTest.checkAccessToken("validToken1"));
    }

    @AfterEach
    public void tearDown() {
        // Cleanup if necessary
    }
}


No.8 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import com.ctrip.framework.apollo.biz.config.BizConfig;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.google.common.base.Strings;
import java.util.Arrays;

public class AdminServiceAuthenticationFilterTest {

    private AdminServiceAuthenticationFilter filter;
    private BizConfig mockBizConfig;

    @BeforeEach
    public void setUp() {
        mockBizConfig = mock(BizConfig.class);
        filter = new AdminServiceAuthenticationFilter(mockBizConfig);
    }

    @Test
    public void checkAccessTokenTest() {
        String validToken = "validToken";
        String invalidToken = "invalidToken";
        String accessTokens = "validToken,someOtherToken";

        // 1. Test with null access tokens config - should default to pass
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(null);
        assertTrue(filter.checkAccessToken(validToken));

        // 2. Test with empty access tokens string - should default to pass
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn("");
        assertTrue(filter.checkAccessToken(validToken));

        // 3. Test with non-empty access tokens string and null token - should fail
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);
        assertFalse(filter.checkAccessToken(null));

        // 4. Test with non-empty access tokens string and empty token - should fail
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);
        assertFalse(filter.checkAccessToken(""));

        // 5. Test with non-empty access tokens string and valid token - should pass
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);
        assertTrue(filter.checkAccessToken(validToken));

        // 6. Test with non-empty access tokens string and invalid token - should fail
        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);
        assertFalse(filter.checkAccessToken(invalidToken));

        // 7. Test access token cache update by changing the access tokens
        String updatedAccessTokens = "newValidToken,anotherToken";
        when(mockBizConfig.getAdminServiceAccessTokens())
            .thenReturn(accessTokens) // first call returns the original tokens
            .thenReturn(updatedAccessTokens); // subsequent calls return updated tokens

        // Check with original valid token - should pass and populate cache
        assertTrue(filter.checkAccessToken(validToken));

        // Cache should now be updated, and original valid token should not work anymore
        assertFalse(filter.checkAccessToken(validToken));

        // And the new valid token should pass
        assertTrue(filter.checkAccessToken("newValidToken"));
    }

    @AfterEach
    public void tearDown() {
        // Clean up resources or reset mocks if necessary
    }
}


No.9 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import com.ctrip.framework.apollo.biz.config.BizConfig;
import com.google.common.base.Strings;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.*;

public class AdminServiceAuthenticationFilterTest {

    private AdminServiceAuthenticationFilter filter;
    private BizConfig bizConfigMock;

    @BeforeEach
    public void setUp() {
        bizConfigMock = Mockito.mock(BizConfig.class);
        filter = new AdminServiceAuthenticationFilter(bizConfigMock);
    }

    @Test
    public void whenAccessTokensNotConfigured_thenShouldPass() {
        Mockito.when(bizConfigMock.getAdminServiceAccessTokens()).thenReturn("");

        assertTrue(filter.checkAccessToken("anyToken"));
    }

    @Test
    public void whenTokenIsEmpty_thenShouldFail() {
        Mockito.when(bizConfigMock.getAdminServiceAccessTokens()).thenReturn("configuredToken");

        assertFalse(filter.checkAccessToken(null));
        assertFalse(filter.checkAccessToken(""));
    }

    @Test
    public void whenTokenIsNotInList_thenShouldFail() {
        String accessTokens = "token1,token2,token3";
        Mockito.when(bizConfigMock.getAdminServiceAccessTokens()).thenReturn(accessTokens);

        assertFalse(filter.checkAccessToken("nonExistingToken"));
    }

    @Test
    public void whenTokenIsInList_thenShouldPass() {
        String accessTokens = "token1,token2,token3";
        Mockito.when(bizConfigMock.getAdminServiceAccessTokens()).thenReturn(accessTokens);

        assertTrue(filter.checkAccessToken("token2"));
    }

    // This test ensures that if the access tokens list was updated,
    // the cache will be updated too and the new tokens will be validated successfully
    @Test
    public void whenAccessTokensChanged_thenCacheShouldBeUpdated() {
        String initialAccessTokens = "token1,token2,token3";
        Mockito.when(bizConfigMock.getAdminServiceAccessTokens()).thenReturn(initialAccessTokens);

        assertTrue(filter.checkAccessToken("token2"));  // first check to populate cache

        String updatedAccessTokens = "token4,token5,token6";
        Mockito.when(bizConfigMock.getAdminServiceAccessTokens()).thenReturn(updatedAccessTokens);

        assertFalse(filter.checkAccessToken("token2")); // this token was valid before but not after update

        assertTrue(filter.checkAccessToken("token5"));  // now we check with a new valid token
    }
}


No.10 generated result --------------------------

package com.ctrip.framework.apollo.adminservice.filter;

import com.ctrip.framework.apollo.biz.config.BizConfig;
import com.google.common.base.Strings;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class AdminServiceAuthenticationFilterTest {

    private AdminServiceAuthenticationFilter adminServiceAuthenticationFilter;

    @Mock
    private BizConfig bizConfig;

    @BeforeEach
    public void setUp() {
        adminServiceAuthenticationFilter = new AdminServiceAuthenticationFilter(bizConfig);
    }

    @Test
    public void checkAccessTokenTest() {
        String validToken = "validToken";
        String invalidToken = "invalidToken";
        String configuredTokens = "validToken,anotherValidToken";

        // Mock the behavior of bizConfig to return the configured access tokens
        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(configuredTokens);

        // Test case with no tokens configured (defaults to true)
        when(bizConfig.getAdminServiceAccessTokens()).thenReturn("");
        assertTrue(adminServiceAuthenticationFilter.checkAccessToken("anyToken"));

        // Test case with a null token (should return false)
        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(null));

        // Test case with an empty token (should return false)
        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(Strings.emptyToNull("")));

        // Test case with a valid token (should return true)
        assertTrue(adminServiceAuthenticationFilter.checkAccessToken(validToken));

        // Test case with an invalid token (should return false)
        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(invalidToken));
    }
}


