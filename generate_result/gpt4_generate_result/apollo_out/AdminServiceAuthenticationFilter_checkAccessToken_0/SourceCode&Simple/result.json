{
    "project_name": "apollo",
    "file_name": "AdminServiceAuthenticationFilter.java",
    "relative_path": "apollo/apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/filter/AdminServiceAuthenticationFilter.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.adminservice.filter",
    "docstring": null,
    "source_code": "private boolean checkAccessToken(String token) {\n  String accessTokens = bizConfig.getAdminServiceAccessTokens();\n\n  // if user forget to configure access tokens, then default to pass\n  if (Strings.isNullOrEmpty(accessTokens)) {\n    return true;\n  }\n\n  // no need to check\n  if (Strings.isNullOrEmpty(token)) {\n    return false;\n  }\n\n  // update cache\n  if (!accessTokens.equals(lastAccessTokens)) {\n    synchronized (this) {\n      accessTokenList = ACCESS_TOKEN_SPLITTER.splitToList(accessTokens);\n      lastAccessTokens = accessTokens;\n    }\n  }\n\n  return accessTokenList.contains(token);\n}\n",
    "class_name": "AdminServiceAuthenticationFilter",
    "method_name": "checkAccessToken",
    "arguments": [
        "String token"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport com.google.common.base.Splitter;\nimport com.google.common.base.Strings;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.util.Arrays;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.when;\n\npublic class AdminServiceAuthenticationFilterTest {\n    \n    private AdminServiceAuthenticationFilter filter;\n    private BizConfig mockBizConfig;\n    \n    @BeforeEach\n    public void setUp() {\n        mockBizConfig = Mockito.mock(BizConfig.class);\n        filter = new AdminServiceAuthenticationFilter(mockBizConfig);\n        AdminServiceAuthenticationFilter.ACCESS_TOKEN_SPLITTER = Splitter.on(',').omitEmptyStrings().trimResults();\n    }\n\n    @Test\n    public void whenTokenIsNull_shouldReturnFalse() {\n        assertFalse(filter.checkAccessToken(null));\n    }\n\n    @Test\n    public void whenTokenIsEmpty_shouldReturnFalse() {\n        assertFalse(filter.checkAccessToken(\"\"));\n    }\n    \n    @Test\n    public void whenAccessTokensAreNotConfigured_shouldReturnTrue() {\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n        assertTrue(filter.checkAccessToken(\"someToken\"));\n    }\n    \n    @Test\n    public void whenAccessTokensAreConfiguredAndTokenIsValid_shouldReturnTrue() {\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"validToken1,validToken2\");\n        filter.checkAccessToken(\"validToken1\"); // to update the cache\n        assertTrue(filter.checkAccessToken(\"validToken1\"));\n    }\n\n    @Test\n    public void whenAccessTokensAreConfiguredAndTokenIsInvalid_shouldReturnFalse() {\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"validToken1,validToken2\");\n        filter.checkAccessToken(\"validToken1\"); // to update the cache\n        assertFalse(filter.checkAccessToken(\"invalidToken\"));\n    }\n\n    @Test\n    public void whenAccessTokensChange_shouldUpdateCache() {\n        String firstConfiguredTokens = \"validToken1,validToken2\";\n        String updatedConfiguredTokens = \"validToken3,validToken4\";\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(firstConfiguredTokens);\n        \n        filter.checkAccessToken(\"validToken1\"); // initial cache update\n        assertTrue(filter.accessTokenList.containsAll(Arrays.asList(\"validToken1\", \"validToken2\")));\n        \n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(updatedConfiguredTokens);        \n        filter.checkAccessToken(\"validToken3\"); // cache should be updated\n        assertFalse(filter.accessTokenList.contains(\"validToken1\"));\n        assertFalse(filter.accessTokenList.contains(\"validToken2\"));\n        assertTrue(filter.accessTokenList.contains(\"validToken3\"));\n        assertTrue(filter.accessTokenList.contains(\"validToken4\"));\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport static org.mockito.Mockito.*;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\n\npublic class AdminServiceAuthenticationFilterTest {\n    \n    private AdminServiceAuthenticationFilter adminServiceAuthenticationFilter;\n    private BizConfig bizConfig;\n\n    @BeforeEach\n    public void setUp() {\n        bizConfig = mock(BizConfig.class);\n        adminServiceAuthenticationFilter = new AdminServiceAuthenticationFilter(bizConfig);\n    }\n\n    @Test\n    public void whenAccessTokensNotConfigured_shouldPass() {\n        // Arrange\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(null);\n\n        // Act & Assert\n        assertTrue(adminServiceAuthenticationFilter.checkAccessToken(\"anyToken\"));\n    }\n\n    @Test\n    public void whenAccessTokenIsEmpty_shouldFail() {\n        // Arrange - assuming access tokens are configured\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2,token3\");\n\n        // Act & Assert\n        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(\"\"));\n    }\n\n    @Test\n    public void whenTokenIsValid_shouldPass() {\n        // Arrange\n        String validToken = \"validToken\";\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,validToken,token3\");\n\n        // Act & Assert\n        assertTrue(adminServiceAuthenticationFilter.checkAccessToken(validToken));\n    }\n\n    @Test\n    public void whenTokenIsInvalid_shouldFail() {\n        // Arrange\n        String invalidToken = \"invalidToken\";\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2,token3\");\n\n        // Act & Assert\n        assertFalse(adminServiceAuthenticationFilter.checkAccessToken(invalidToken));\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.when;\n\npublic class AdminServiceAuthenticationFilterTest {\n    private AdminServiceAuthenticationFilter filter;\n    private BizConfig mockBizConfig;\n\n    @BeforeEach\n    public void setUp() {\n        mockBizConfig = Mockito.mock(BizConfig.class);\n        filter = new AdminServiceAuthenticationFilter(mockBizConfig);\n    }\n\n    @Test\n    public void checkAccessTokenWhenNoConfiguredTokens_ShouldReturnTrue() {\n        // Arrange\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(null);\n\n        // Act\n        boolean result = filter.checkAccessToken(\"someToken\");\n\n        // Assert\n        assertTrue(result);\n    }\n\n    @Test\n    public void checkAccessTokenWhenTokenIsNull_ShouldReturnFalse() {\n        // Arrange\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"validToken\");\n\n        // Act\n        boolean result = filter.checkAccessToken(null);\n\n        // Assert\n        assertFalse(result);\n    }\n\n    @Test\n    public void checkAccessTokenWhenTokenIsValid_ShouldReturnTrue() {\n        // Arrange\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"validToken\");\n        filter.checkAccessToken(\"validToken\"); // to initialize the accessTokenList and lastAccessTokens\n\n        // Act\n        boolean result = filter.checkAccessToken(\"validToken\");\n\n        // Assert\n        assertTrue(result);\n    }\n\n    @Test\n    public void checkAccessTokenWhenTokenIsInvalid_ShouldReturnFalse() {\n        // Arrange\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"validToken,anotherValidToken\");\n        filter.checkAccessToken(\"validToken\"); // to initialize the accessTokenList and lastAccessTokens\n\n        // Act\n        boolean result = filter.checkAccessToken(\"invalidToken\");\n\n        // Assert\n        assertFalse(result);\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    private BizConfig bizConfig;\n    private AdminServiceAuthenticationFilter filter;\n\n    @BeforeEach\n    public void setUp() {\n        bizConfig = mock(BizConfig.class);\n        filter = new AdminServiceAuthenticationFilter(bizConfig);\n    }\n\n    @Test\n    public void checkAccessToken_whenAccessTokensNotConfigured_shouldReturnTrue() {\n        // Arrange\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n\n        // Act\n        boolean result = filter.checkAccessToken(\"someToken\");\n\n        // Assert\n        assertTrue(result);\n    }\n\n    @Test\n    public void checkAccessToken_whenTokenIsNull_shouldReturnFalse() {\n        // Arrange\n        String accessTokens = \"token1,token2\";\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);\n\n        // Act\n        boolean result = filter.checkAccessToken(null);\n\n        // Assert\n        assertFalse(result);\n    }\n\n    @Test\n    public void checkAccessToken_whenTokenIsValidAndExists_shouldReturnTrue() {\n        // Arrange\n        String validToken = \"token2\";\n        String accessTokens = \"token1,token2\";\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);\n        filter.checkAccessToken(validToken); // This will populate the token list\n\n        // Act\n        boolean result = filter.checkAccessToken(validToken);\n\n        // Assert\n        assertTrue(result);\n    }\n\n    @Test\n    public void checkAccessToken_whenTokenIsInvalidAndDoesNotExists_shouldReturnFalse() {\n        // Arrange\n        String invalidToken = \"token3\";\n        String accessTokens = \"token1,token2\";\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokens);\n        filter.checkAccessToken(invalidToken); // This will populate the token list\n\n        // Act\n        boolean result = filter.checkAccessToken(invalidToken);\n\n        // Assert\n        assertFalse(result);\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.when;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n\n    private AdminServiceAuthenticationFilter filter;\n    private BizConfig mockBizConfig;\n\n    // Mock data for access tokens\n    private final String validToken = \"validToken\";\n    private final String invalidToken = \"invalidToken\";\n    private final String adminServiceAccessTokens = \"validToken,anotherValidToken\";\n\n    @BeforeEach\n    public void setUp() {\n        mockBizConfig = Mockito.mock(BizConfig.class);\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(adminServiceAccessTokens);\n        filter = new AdminServiceAuthenticationFilter(mockBizConfig);\n    }\n\n    @Test\n    public void checkAccessTokenTest() {\n        assertTrue(filter.checkAccessToken(validToken), \"Access should be granted for valid token.\");\n        assertFalse(filter.checkAccessToken(invalidToken), \"Access should be denied for invalid token.\");\n        assertFalse(filter.checkAccessToken(null), \"Access should be denied for null token.\");\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(null);\n        assertTrue(filter.checkAccessToken(invalidToken), \"Access should be granted if access tokens are not configured.\");\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport com.google.common.base.Splitter;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.util.Arrays;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.when;\n\npublic class AdminServiceAuthenticationFilterTest {\n    private AdminServiceAuthenticationFilter authenticationFilter;\n    private BizConfig mockBizConfig;\n\n    @BeforeEach\n    public void setUp() {\n        mockBizConfig = Mockito.mock(BizConfig.class);\n        authenticationFilter = new AdminServiceAuthenticationFilter(mockBizConfig);\n    }\n\n    @Test\n    public void checkAccessTokenTest() {\n        // Scenario 1: accessTokens is not configured (null or empty string), should return true\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(null);\n        assertTrue(authenticationFilter.checkAccessToken(\"dummy-token\"));\n\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n        assertTrue(authenticationFilter.checkAccessToken(\"dummy-token\"));\n\n        // Scenario 2: token is null or empty, should return false\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"valid-token\");\n        assertFalse(authenticationFilter.checkAccessToken(null));\n\n        assertFalse(authenticationFilter.checkAccessToken(\"\"));\n\n        // Scenario 3: accessTokens contains the provided token, should return true\n        String validToken = \"valid-token\";\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(validToken);\n        assertTrue(authenticationFilter.checkAccessToken(validToken));\n\n        // Scenario 4: accessTokens doesn't contain the provided token, should return false\n        String invalidToken = \"invalid-token\";\n        assertFalse(authenticationFilter.checkAccessToken(invalidToken));\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.when;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n\n    private AdminServiceAuthenticationFilter filter;\n    private BizConfig mockBizConfig;\n\n    @BeforeEach\n    public void setUp() {\n        mockBizConfig = Mockito.mock(BizConfig.class);\n        filter = new AdminServiceAuthenticationFilter(mockBizConfig);\n    }\n\n    @Test\n    public void checkAccessTokenTest() {\n        String validToken = \"validToken\";\n        String invalidToken = \"invalidToken\";\n        String configTokens = \"validToken,anotherValidToken\";\n\n        // Given an unconfigured scenario, should default to pass\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(null);\n        assertTrue(filter.checkAccessToken(\"anyToken\"));\n\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n        assertTrue(filter.checkAccessToken(\"anyToken\"));\n\n        // Given a configured environment\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(configTokens);\n\n        // Valid token, should return true\n        assertTrue(filter.checkAccessToken(validToken));\n\n        // Invalid token, should return false\n        assertFalse(filter.checkAccessToken(invalidToken));\n\n        // If the token is null or empty, should return false\n        assertFalse(filter.checkAccessToken(null));\n        assertFalse(filter.checkAccessToken(\"\"));\n\n        // Checking thread-safety and effectiveness of updated cache\n        String newConfigTokens = \"newToken,validToken\";\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(newConfigTokens);\n\n        // Before invoking checkAccessToken again, it should still fail for newToken\n        assertFalse(filter.checkAccessToken(\"newToken\"));\n\n        // Now invoke checkAccessToken to refresh the cache\n        assertTrue(filter.checkAccessToken(validToken));\n\n        // Check the newToken after cache refresh, it should pass now\n        assertTrue(filter.checkAccessToken(\"newToken\"));\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass AdminServiceAuthenticationFilterTest {\n\n    private AdminServiceAuthenticationFilter authenticationFilter;\n    private BizConfig bizConfig;\n    private final String validToken = \"validToken\";\n    private final String invalidToken = \"invalidToken\";\n\n    @BeforeEach\n    void setUp() {\n        // Assuming BizConfig is a mockable component and its methods can be stubbed.\n        bizConfig = org.mockito.Mockito.mock(BizConfig.class);\n\n        // Assuming validToken is a setup token in BizConfig\n        org.mockito.Mockito.when(bizConfig.getAdminServiceAccessTokens()).thenReturn(validToken);\n\n        authenticationFilter = new AdminServiceAuthenticationFilter(bizConfig);\n    }\n    \n    @Test\n    void checkAccessTokenTest_withValidToken_returnsTrue() {\n        boolean result = authenticationFilter.checkAccessToken(validToken);\n        assertTrue(result, \"Access should be granted for valid token\");\n    }\n\n    @Test\n    void checkAccessTokenTest_withInvalidToken_returnsFalse() {\n        boolean result = authenticationFilter.checkAccessToken(invalidToken);\n        assertFalse(result, \"Access should be denied for invalid token\");\n    }\n\n    @Test\n    void checkAccessTokenTest_withUnsetTokenConfig_returnsTrue() {\n        // Simulating an unset or null token configuration case\n        org.mockito.Mockito.when(bizConfig.getAdminServiceAccessTokens()).thenReturn(null);\n\n        boolean result = authenticationFilter.checkAccessToken(validToken);\n        assertTrue(result, \"Access should be granted if tokens are not configured\");\n    }\n\n    @Test\n    void checkAccessTokenTest_withEmptyToken_returnsFalse() {\n        boolean result = authenticationFilter.checkAccessToken(\"\");\n        assertFalse(result, \"Access should be denied for empty token\");\n    }\n\n    @Test\n    void checkAccessTokenTest_withNullToken_returnsFalse() {\n        boolean result = authenticationFilter.checkAccessToken(null);\n        assertFalse(result, \"Access should be denied for null token\");\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.util.Arrays;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.when;\n\npublic class AdminServiceAuthenticationFilterTest {\n    private AdminServiceAuthenticationFilter filter;\n    private BizConfig mockBizConfig;\n    \n    @BeforeEach\n    public void setUp() {\n        mockBizConfig = Mockito.mock(BizConfig.class);\n        filter = new AdminServiceAuthenticationFilter(mockBizConfig); // Assuming that the constructor exists and assigns the passed bizConfig to the class variable\n    }\n\n    @Test\n    public void checkAccessToken_WhenTokensAreNotConfigured_ShouldReturnTrue() {\n        // Simulate behavior when no access tokens are configured.\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n        \n        assertTrue(filter.checkAccessToken(\"anyToken\"));\n    }\n    \n    @Test\n    public void checkAccessToken_WhenTokenIsNull_ShouldReturnFalse() {\n        assertTrue(filter.checkAccessToken(null));\n    }\n\n    @Test\n    public void checkAccessToken_WhenTokenEmpty_ShouldReturnFalse() {\n        assertTrue(filter.checkAccessToken(\"\"));\n    }\n\n    @Test\n    public void checkAccessToken_WithValidToken_ShouldReturnTrue() {\n        String validToken = \"validToken\";\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2,validToken\");\n        \n        assertTrue(filter.checkAccessToken(validToken));\n    }\n    \n    @Test\n    public void checkAccessToken_WithInvalidToken_ShouldReturnFalse() {\n        String invalidToken = \"invalidToken\";\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2,validToken\");\n        \n        assertFalse(filter.checkAccessToken(invalidToken));\n    }\n    \n    @Test\n    public void checkAccessToken_RefreshAccessTokenList_WhenAccessTokensHaveChanged() {\n        String oldTokensConfig = \"token1,token2\";\n        String newTokensConfig = \"token3,token4\";\n        when(mockBizConfig.getAdminServiceAccessTokens())\n            .thenReturn(oldTokensConfig) // First call with old tokens\n            .thenReturn(newTokensConfig); // Second call with new tokens\n        \n        // First check with old token config\n        assertTrue(filter.checkAccessToken(\"token1\"));\n        \n        // Now let's \"change\" the tokens in the configuration to see if the list gets refreshed\n        assertTrue(filter.checkAccessToken(\"token3\"));\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.util.Arrays;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.when;\n\npublic class AdminServiceAuthenticationFilterTest {\n    \n    private AdminServiceAuthenticationFilter filter;\n    private BizConfig mockBizConfig;\n    \n    static {\n        // Assuming ACCESS_TOKEN_SPLITTER initialization is done somewhere in the static context\n        AdminServiceAuthenticationFilter.ACCESS_TOKEN_SPLITTER = Splitter.on(\",\").omitEmptyStrings().trimResults();\n    }\n    \n    @BeforeEach\n    public void setUp() {\n        mockBizConfig = Mockito.mock(BizConfig.class);\n        filter = new AdminServiceAuthenticationFilter(mockBizConfig);\n    }\n    \n    @Test\n    public void checkAccessTokenTest() {\n        String validToken = \"valid_token\";\n        String invalidToken = \"invalid_token\";\n        String configuredTokens = \"valid_token,another_valid_token\";\n        \n        // Simulate behavior when access tokens are properly configured\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(configuredTokens);\n        \n        // Case 1: Access token is in the list, should return true\n        assertTrue(filter.checkAccessToken(validToken));\n        \n        // Case 2: Access token is not in the list, should return false\n        assertFalse(filter.checkAccessToken(invalidToken));\n        \n        // Simulate behavior when access tokens are not configured (null or empty)\n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(null);\n        \n        // Case 3: No access tokens are configured, should default to pass (true)\n        assertTrue(filter.checkAccessToken(validToken));\n        \n        when(mockBizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n        \n        // Case 4: Empty access tokens string, should default to pass (true)\n        assertTrue(filter.checkAccessToken(validToken));\n        \n        // Case 5: Provided token is null or empty, should return false regardless of config\n        assertFalse(filter.checkAccessToken(null));\n        assertFalse(filter.checkAccessToken(\"\"));\n    }\n}"
    ]
}