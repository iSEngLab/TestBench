{
    "project_name": "apollo",
    "file_name": "AdminServiceAuthenticationFilter.java",
    "relative_path": "apollo/apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/filter/AdminServiceAuthenticationFilter.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.adminservice.filter",
    "docstring": null,
    "source_code": "private boolean checkAccessToken(String token) {\n  String accessTokens = bizConfig.getAdminServiceAccessTokens();\n\n  // if user forget to configure access tokens, then default to pass\n  if (Strings.isNullOrEmpty(accessTokens)) {\n    return true;\n  }\n\n  // no need to check\n  if (Strings.isNullOrEmpty(token)) {\n    return false;\n  }\n\n  // update cache\n  if (!accessTokens.equals(lastAccessTokens)) {\n    synchronized (this) {\n      accessTokenList = ACCESS_TOKEN_SPLITTER.splitToList(accessTokens);\n      lastAccessTokens = accessTokens;\n    }\n  }\n\n  return accessTokenList.contains(token);\n}\n",
    "class_name": "AdminServiceAuthenticationFilter",
    "method_name": "checkAccessToken",
    "arguments": [
        "String token"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.Mockito;\n\npublic class AdminServiceAuthenticationFilterTest {\n    \n    private AdminServiceAuthenticationFilter filter;\n    private BizConfig bizConfig; // Mock this dependency\n    \n    @BeforeEach\n    public void setUp() {\n        filter = new AdminServiceAuthenticationFilter();\n        bizConfig = Mockito.mock(BizConfig.class);\n        // Assume BizConfig is a mockable dependency and we're injecting it into the filter. \n        // In the real scenario, this might be done differently, \n        // for example using a constructor or a setter method.\n        filter.setBizConfig(bizConfig); \n    }\n\n    @Test\n    public void checkAccessTokenTest() {\n        // Scenario 1: Access tokens are not configured (empty string), should return true\n        Mockito.when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n        assertTrue(filter.checkAccessToken(\"any-token\"));\n\n        // Scenario 2: Access tokens are not configured (null), should return true\n        Mockito.when(bizConfig.getAdminServiceAccessTokens()).thenReturn(null);\n        assertTrue(filter.checkAccessToken(\"any-token\"));\n\n        // Scenario 3: Token is null or empty, should return false\n        Mockito.when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2\");\n        assertFalse(filter.checkAccessToken(\"\"));\n        assertFalse(filter.checkAccessToken(null));\n\n        // Scenario 4: Token is valid and contained in the access tokens, should return true\n        Mockito.when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2\");\n        assertTrue(filter.checkAccessToken(\"token1\"));\n\n        // Scenario 5: Token is not contained in the access tokens, should return false\n        Mockito.when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2\");\n        assertFalse(filter.checkAccessToken(\"token3\"));\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport com.google.common.base.Strings;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.List;\n\npublic class AdminServiceAuthenticationFilterTest {\n\nprivate AdminServiceAuthenticationFilter filter;\nprivate BizConfig bizConfig;\n\n@BeforeEach\npublic void setUp() {    \n    bizConfig = Mockito.mock(BizConfig.class);\n    filter = new AdminServiceAuthenticationFilter(bizConfig);\n}\n\n@Test\npublic void checkAccessTokenTest() {\n    // Test case for config with tokens and valid token provided.\n    String validToken = \"validToken\";\n    when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2,validToken\");\n    assertTrue(filter.checkAccessToken(validToken));\n    \n    // Test case for config with tokens and no token provided.\n    String noToken = \"\";\n    when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2,validToken\");\n    assertFalse(filter.checkAccessToken(noToken));\n    \n    // Test case for empty config and any token provided.\n    when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n    assertTrue(filter.checkAccessToken(\"anyToken\"));\n    \n    // Test case for null config and no token provided\n    when(bizConfig.getAdminServiceAccessTokens()).thenReturn(null);\n    assertTrue(filter.checkAccessToken(null));\n    \n    // Test case for config with tokens and invalid token provided.\n    String invalidToken = \"tokenX\";\n    when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2,validToken\");\n    assertFalse(filter.checkAccessToken(invalidToken));\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport com.ctrip.framework.apollo.adminservice.configuration.BizConfig;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.List;\nimport com.google.common.base.Strings;\n\npublic class AdminServiceAuthenticationFilterTest {\n\n    private AdminServiceAuthenticationFilter filter;\n    private BizConfig bizConfig;\n\n    // Utility which can be a constant\n    private static final com.google.common.base.Splitter ACCESS_TOKEN_SPLITTER = com.google.common.base.Splitter.on(',').omitEmptyStrings().trimResults();\n\n    @BeforeEach\n    public void setUp() {\n        filter = new AdminServiceAuthenticationFilter();\n        bizConfig = Mockito.mock(BizConfig.class);\n        ReflectionTestUtils.setField(filter, \"bizConfig\", bizConfig);\n    }\n\n    @Test\n    public void checkAccessTokenTest() {\n        String validToken = \"validToken\";\n        String invalidToken = \"invalidToken\";\n        String accessTokenList = \"token1,validToken,token3\";\n        Mockito.when(bizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokenList);\n\n        // Test for valid token\n        boolean result = filter.checkAccessToken(validToken);\n        assertTrue(result, \"Access should be granted with a valid token\");\n\n        // Test for invalid token\n        result = filter.checkAccessToken(invalidToken);\n        assertFalse(result, \"Access should be denied with an invalid token\");\n\n        // Test when access tokens are not configured (null or empty)\n        Mockito.when(bizConfig.getAdminServiceAccessTokens()).thenReturn(null);\n        assertTrue(filter.checkAccessToken(validToken), \"Access should be granted if access tokens are not configured\");\n\n        // Test when access tokens are empty\n        Mockito.when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n        assertTrue(filter.checkAccessToken(validToken), \"Access should be granted if access tokens are empty\");\n\n        // Test for null token\n        result = filter.checkAccessToken(null);\n        assertFalse(result, \"Access should be denied for null token\");\n\n        // Test for empty string token\n        Mockito.when(bizConfig.getAdminServiceAccessTokens()).thenReturn(accessTokenList);\n        result = filter.checkAccessToken(\"\");\n        assertFalse(result, \"Access should be denied for empty token\");\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.Mockito;\nimport com.google.common.base.Strings; // Let's assume this is part of the used Google Guava library\n\n// Mock necessary items and methods assuming the class name is `AdminServiceAuthentication`\npublic class AdminServiceAuthenticationFilterTest {\n\n    private AdminServiceAuthentication adminServiceAuth;\n    private BizConfig bizConfig; // mock bizConfig\n\n    @BeforeEach\n    public void setUp() {\n        bizConfig = Mockito.mock(BizConfig.class);\n        adminServiceAuth = new AdminServiceAuthentication(bizConfig); // assuming a constructor that takes BizConfig\n    }\n\n    @Test\n    public void checkAccessTokenTest() {\n        // Scenario 1: accessTokens config is null or empty, should return true\n        Mockito.when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n        assertTrue(adminServiceAuth.checkAccessToken(\"anyToken\"));\n\n        // Scenario 2: accessTokens is not empty, token is null or empty, should return false\n        Mockito.when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"validToken\");\n        assertFalse(adminServiceAuth.checkAccessToken(\"\"));\n\n        // Scenario 3: accessTokens and token are non-empty, token is valid, should return true\n        Mockito.when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"validToken,anotherToken\");\n        assertTrue(adminServiceAuth.checkAccessToken(\"validToken\"));\n\n        // Scenario 4: accessTokens and token are non-empty, token is invalid, should return false\n        Mockito.when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"validToken,anotherToken\");\n        assertFalse(adminServiceAuth.checkAccessToken(\"invalidToken\"));\n    }\n    \n    // Other necessary cleanup if required\n    @AfterEach\n    public void tearDown() {\n        // Perform cleanup if necessary\n    }\n\n    // The AdminServiceAuthentication class must exist within the testing scope \n    // and the checkAccessToken method should be 'package-private' or 'public' for testing.\n    public class AdminServiceAuthentication {\n        private final BizConfig bizConfig;\n        private String lastAccessTokens;\n        private List<String> accessTokenList;\n\n        public AdminServiceAuthentication(BizConfig bizConfig) {\n            this.bizConfig = bizConfig;\n        }\n        \n        // This is the method being tested - here it's assumed to be 'package-private'\n        boolean checkAccessToken(String token) {\n            // ...method body from the provided source code...\n        }\n    }\n    \n    // Assuming BizConfig interface or class exists\n    public interface BizConfig {\n        String getAdminServiceAccessTokens();\n    }\n    \n    // You will also have to take care of ACCESS_TOKEN_SPLITTER. This\n    // could involve a mock or a static utility that reflects real functionality.\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass MockBizConfig {\n    private String adminServiceAccessTokens = \"token1,token2,token3\";\n\n    public String getAdminServiceAccessTokens() {\n        return adminServiceAccessTokens;\n    }\n}\n\npublic class AdminServiceAuthenticationFilterTest {\n\n    private MockBizConfig bizConfig;\n    private AdminServiceAuthenticationFilter filter;\n    private final String lastAccessTokens = \"\";\n    private List<String> accessTokenList = new ArrayList<>();\n\n    @BeforeEach\n    void setUp() {\n        bizConfig = new MockBizConfig();\n        filter = new AdminServiceAuthenticationFilter() {\n            @Override\n            String checkAccessToken(String token) {\n                return super.checkAccessToken(token);\n            }\n        };\n    }\n\n    @Test\n    public void checkAccessTokenTest() {\n        // Assuming we have a valid token \"token1\" in the accessTokens list\n        assertTrue(filter.checkAccessToken(\"token1\"), \"Access should be granted with valid token\");\n        \n        // Assuming we have an invalid token \"invalidToken\" that is not in the accessTokens list\n        assertFalse(filter.checkAccessToken(\"invalidToken\"), \"Access should be denied with invalid token\");\n        \n        // Assuming bizConfig returns null or empty string, default behavior is to pass\n        assertNull(bizConfig.getAdminServiceAccessTokens());\n        assertTrue(filter.checkAccessToken(\"token\"), \"Access should be granted with no access tokens configured\");\n        \n        // Assuming we have a null or empty token, access should be denied\n        assertFalse(filter.checkAccessToken(null), \"Access should be denied with null token\");\n        assertFalse(filter.checkAccessToken(\"\"), \"Access should be denied with empty token\");\n    }\n\n    @AfterEach\n    void tearDown() {\n        // You can implement any tear down here if necessary.\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport java.util.List;\nimport org.junit.jupiter.api.*;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass BizConfig {\n    public String getAdminServiceAccessTokens() {\n        // Stub the method for unit testing purposes\n        return null;\n    }\n}\n\npublic class AdminServiceAuthenticationFilterTest {\n\n    private BizConfig bizConfig;\n    private AdminServiceAuthenticationFilter filter;\n    private final String lastAccessTokens = \"expectedLastAccessTokens\";\n    private final List<String> accessTokenList = List.of(\"token1\", \"token2\", \"token3\");\n\n    @BeforeEach\n    public void setUp() {\n        bizConfig = mock(BizConfig.class);\n        filter = new AdminServiceAuthenticationFilter();\n        filter.bizConfig = bizConfig;\n        filter.lastAccessTokens = lastAccessTokens;\n        filter.accessTokenList = accessTokenList;\n    }\n\n    @Test\n    public void checkAccessTokenWithNullConfiguredTokensShouldPass() {\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(null);\n\n        boolean result = filter.checkAccessToken(\"anyToken\");\n\n        assertTrue(result, \"Access should be granted when there are no tokens configured.\");\n    }\n\n    @Test\n    public void checkAccessTokenWithEmptyConfiguredTokensShouldPass() {\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n\n        boolean result = filter.checkAccessToken(\"anyToken\");\n\n        assertTrue(result, \"Access should be granted when there are empty tokens configured.\");\n    }\n\n    @Test\n    public void checkAccessTokenWithNullProvidedTokenShouldFail() {\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2,token3\");\n\n        boolean result = filter.checkAccessToken(null);\n\n        assertFalse(result, \"Access should be denied when the provided token is null.\");\n    }\n\n    @Test\n    public void checkAccessTokenWithEmptyProvidedTokenShouldFail() {\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2,token3\");\n\n        boolean result = filter.checkAccessToken(\"\");\n\n        assertFalse(result, \"Access should be denied when the provided token is empty.\");\n    }\n\n    @Test\n    public void checkAccessTokenWithValidTokenShouldPass() {\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2,token3\");\n\n        boolean result = filter.checkAccessToken(\"token1\");\n\n        assertTrue(result, \"Access should be granted with a valid token.\");\n    }\n\n    @Test\n    public void checkAccessTokenWithInvalidTokenShouldFail() {\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2,token3\");\n\n        boolean result = filter.checkAccessToken(\"invalidToken\");\n\n        assertFalse(result, \"Access should be denied with an invalid token.\");\n    }\n\n    // Helper class to mimic the structure of the actual implementation\n    private static class AdminServiceAuthenticationFilter {\n        private BizConfig bizConfig; // mocked instance\n        private String lastAccessTokens;\n        private List<String> accessTokenList;\n\n        private boolean checkAccessToken(String token) {\n            String accessTokens = bizConfig.getAdminServiceAccessTokens();\n\n            // if user forget to configure access tokens, then default to pass\n            if (accessTokens == null || accessTokens.isEmpty()) {\n                return true;\n            }\n\n            // no need to check\n            if (token == null || token.isEmpty()) {\n                return false;\n            }\n\n            // update cache\n            if (!accessTokens.equals(lastAccessTokens)) {\n                synchronized (this) {\n                    accessTokenList = List.of(accessTokens.split(\",\"));\n                    lastAccessTokens = accessTokens;\n                }\n            }\n\n            return accessTokenList.contains(token);\n        }\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport com.google.common.base.Strings;\nimport java.util.List;\n\npublic class AdminServiceAuthenticationFilterTest {\n    \n    private AdminServiceAuthenticationFilter filter;\n    private BizConfig bizConfig; // Assuming BizConfig is a dependency\n\n    @BeforeEach\n    void setUp() {\n        filter = new AdminServiceAuthenticationFilter();\n        bizConfig = mock(BizConfig.class);\n        filter.bizConfig = bizConfig;\n    }\n\n    @Test\n    public void checkAccessTokenWhenAccessTokensAreNullShouldPass() {\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(null);\n\n        assertTrue(filter.checkAccessToken(\"anyToken\"));\n    }\n\n    @Test\n    public void checkAccessTokenWhenAccessTokensAreEmptyShouldPass() {\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n\n        assertTrue(filter.checkAccessToken(\"anyToken\"));\n    }\n\n    @Test\n    public void checkAccessTokenWhenTokenIsNullShouldFail() {\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"validToken\");\n\n        assertFalse(filter.checkAccessToken(null));\n    }\n\n    @Test\n    public void checkAccessTokenWhenTokenIsEmptyShouldFail() {\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"validToken\");\n\n        assertFalse(filter.checkAccessToken(\"\"));\n    }\n\n    @Test\n    public void checkAccessTokenWhenTokenIsValidShouldPass() {\n        String validToken = \"validToken\";\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(validToken);\n\n        assertTrue(filter.checkAccessToken(validToken));\n    }\n\n    @Test\n    public void checkAccessTokenWhenTokenIsInvalidShouldFail() {\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"validToken\");\n\n        assertFalse(filter.checkAccessToken(\"invalidToken\"));\n    }\n\n    // Additional set up and mocks may need to be created depending on the implementation details of AdminServiceAuthenticationFilter\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.when;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\n\npublic class AdminServiceAuthenticationFilterTest {\n\n    private AdminServiceAuthenticationFilter filter; // Assuming this is the class containing `checkAccessToken` method.\n    private BizConfig bizConfig; // Mocked BizConfig object\n\n    @BeforeEach\n    public void setup() {\n        filter = new AdminServiceAuthenticationFilter();\n        bizConfig = Mockito.mock(BizConfig.class);\n        filter.bizConfig = bizConfig; // Assuming there is a way to set BizConfig object.\n        filter.accessTokenList = null; // Assuming this is the initial state.\n        filter.lastAccessTokens = null; // Assuming this is the initial state.\n\n        // Assuming ACCESS_TOKEN_SPLITTER is a static final variable accessible in this context.\n        AdminServiceAuthenticationFilter.ACCESS_TOKEN_SPLITTER = (string) -> Arrays.asList(string.split(\",\"));\n    }\n\n    @Test\n    public void checkAccessTokenWhenNoTokensConfiguredShouldPass() {\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n        assertTrue(filter.checkAccessToken(\"sometoken\"));\n    }\n\n    @Test\n    public void checkAccessTokenWhenTokenIsEmptyShouldFail() {\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2\");\n        assertFalse(filter.checkAccessToken(\"\"));\n    }\n\n    @Test\n    public void checkAccessTokenWhenTokenIsValidShouldPass() {\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2\");\n        filter.lastAccessTokens = \"token1,token2\";\n        filter.accessTokenList = Arrays.asList(\"token1\", \"token2\");\n        assertTrue(filter.checkAccessToken(\"token2\"));\n    }\n\n    @Test\n    public void checkAccessTokenWhenTokenIsInvalidShouldFail() {\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1,token2\");\n        filter.lastAccessTokens = \"token1,token2\";\n        filter.accessTokenList = Arrays.asList(\"token1\", \"token2\");\n        assertFalse(filter.checkAccessToken(\"invalidtoken\"));\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Clean up resources, if necessary\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    \n    private AdminServiceAuthenticationFilter filter;\n    private BizConfig bizConfig;\n    \n    @BeforeEach\n    public void setUp() {\n        bizConfig = mock(BizConfig.class);\n        filter = new AdminServiceAuthenticationFilter(bizConfig);\n    }\n    \n    @Test\n    public void checkAccessTokenTest() {\n        \n        // Assuming we have setters or ways to inject mock values\n        // Token configured in bizConfig\n        String configuredToken = \"configured-token\";\n        // Token passed for checking\n        String validToken = configuredToken;\n        String invalidToken = \"invalid-token\";\n        \n        // Mock the BizConfig responses\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(configuredToken);\n        \n        // Set up the condition for the test\n        // Token is configured and valid\n        assertTrue(filter.checkAccessToken(validToken), \"Access should be granted for valid configured token\");\n        \n        // Token is configured but invalid\n        assertFalse(filter.checkAccessToken(invalidToken), \"Access should be denied for invalid token\");\n        \n        // Token is not configured, which means any token should pass\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(null);\n        assertTrue(filter.checkAccessToken(validToken), \"Access should be granted if no tokens are configured\");\n        \n        // Validate behavior with empty accessTokens string\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n        assertTrue(filter.checkAccessToken(validToken), \"Access should be granted if the configured tokens are empty\");\n        \n        // Validate behavior with null token\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(configuredToken);\n        assertFalse(filter.checkAccessToken(null), \"Access should be denied if the provided token is null\");\n        \n        verify(bizConfig, atLeastOnce()).getAdminServiceAccessTokens();\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n\n    private AdminServiceAuthenticationFilter filter;\n    private BizConfig bizConfig;\n\n    @BeforeEach\n    public void setUp() {\n        bizConfig = mock(BizConfig.class);\n        filter = new AdminServiceAuthenticationFilter(bizConfig);\n    }\n\n    @Test\n    public void checkAccessTokenTest() {\n        // Test when tokens are not configured (expecting true)\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"\");\n        assertTrue(filter.checkAccessToken(\"someToken\"));\n\n        // Test when the token is null or empty (expecting false)\n        assertFalse(filter.checkAccessToken(null));\n        assertFalse(filter.checkAccessToken(\"\"));\n\n        // Test with a mismatching token (expecting false)\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"validToken\");\n        assertFalse(filter.checkAccessToken(\"invalidToken\"));\n\n        // Set up matching token (expecting true)\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"validToken,anotherValidToken\");\n        filter.checkAccessToken(\"validToken\"); // To trigger the cache update\n        assertTrue(filter.checkAccessToken(\"validToken\"));\n        assertTrue(filter.checkAccessToken(\"anotherValidToken\"));\n        \n        // Verify bizConfig was called as expected\n        verify(bizConfig, atLeastOnce()).getAdminServiceAccessTokens();\n    }\n}\n"
    ]
}