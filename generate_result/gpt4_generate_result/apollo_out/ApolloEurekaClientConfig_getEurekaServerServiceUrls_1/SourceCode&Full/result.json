{
    "project_name": "apollo",
    "file_name": "ApolloEurekaClientConfig.java",
    "relative_path": "apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/eureka/ApolloEurekaClientConfig.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.biz.eureka",
    "docstring": "/**\n   * Assert only one zone: defaultZone, but multiple environments.\n   */",
    "source_code": "\n@Override\npublic List<String> getEurekaServerServiceUrls(String myZone) {\n  List<String> urls = bizConfig.eurekaServiceUrls();\n  return CollectionUtils.isEmpty(urls) ? super.getEurekaServerServiceUrls(myZone) : urls;\n}\n",
    "class_name": "ApolloEurekaClientConfig",
    "method_name": "getEurekaServerServiceUrls",
    "arguments": [
        "String myZone"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport org.springframework.cloud.netflix.eureka.EurekaClientConfigBean;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class ApolloEurekaClientConfigTest {\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n    private BizConfig mockedBizConfig;\n    private EurekaClientConfigBean mockedSuperConfig;\n\n    @BeforeEach\n    void setUp() {\n        // Mock the dependencies\n        mockedBizConfig = mock(BizConfig.class);\n        mockedSuperConfig = spy(new EurekaClientConfigBean());\n\n        // ApolloEurekaClientConfig with mocked BizConfig and a spy of the superclass\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(mockedBizConfig, null) {\n            // Override method to provide our spy\n            @Override\n            public List<String> getEurekaServerServiceUrls(String myZone) {\n                return super.getEurekaServerServiceUrls(myZone);\n            }\n        };\n    }\n    \n    @Test\n    public void getEurekaServerServiceUrlsTest_WhenUrlsAreNotEmpty() {\n        // Arrange\n        List<String> configuredUrls = Arrays.asList(\"http://eureka-server-1/\", \"http://eureka-server-2/\");\n        when(mockedBizConfig.eurekaServiceUrls()).thenReturn(configuredUrls);\n\n        // Act\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n\n        // Assert\n        assertEquals(configuredUrls, result);\n        verify(mockedBizConfig).eurekaServiceUrls();\n        verify(mockedSuperConfig, never()).getEurekaServerServiceUrls(\"myZone\");\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest_WhenUrlsAreEmpty() {\n        // Arrange\n        when(mockedBizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        doReturn(Arrays.asList(\"http://default-eureka-server/\")).when(mockedSuperConfig).getEurekaServerServiceUrls(\"myZone\");\n\n        // Replace real method with spy\n        apolloEurekaClientConfig = spy(apolloEurekaClientConfig);\n        doReturn(Arrays.asList(\"http://default-eureka-server/\")).when(apolloEurekaClientConfig).getEurekaServerServiceUrls(\"myZone\");\n\n        // Act\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n\n        // Assert\n        assertEquals(Arrays.asList(\"http://default-eureka-server/\"), result);\n        verify(mockedBizConfig).eurekaServiceUrls();\n        verify(apolloEurekaClientConfig).getEurekaServerServiceUrls(\"myZone\");\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.cloud.netflix.eureka.EurekaClientConfigBean;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class ApolloEurekaClientConfigTest {\n    \n    private BizConfig bizConfig;\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n    private EurekaClientConfigBean eurekaClientConfigBean;\n    \n    @BeforeEach\n    public void setUp() {\n        bizConfig = Mockito.mock(BizConfig.class);\n        eurekaClientConfigBean = Mockito.mock(EurekaClientConfigBean.class);\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig, null) {\n            @Override\n            public List<String> getEurekaServerServiceUrls(String myZone) {\n                return super.getEurekaServerServiceUrls(myZone);\n            }\n        };\n        Mockito.doCallRealMethod().when(eurekaClientConfigBean).getEurekaServerServiceUrls(Mockito.anyString());\n    }\n    \n    @Test\n    public void getEurekaServerServiceUrlsTest_whenBizConfigUrlsNotEmpty() {\n        List<String> mockUrls = Arrays.asList(\"http://localhost:8761/eureka/\", \"http://localhost:8762/eureka/\");\n        when(bizConfig.eurekaServiceUrls()).thenReturn(mockUrls);\n\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n        \n        assertEquals(mockUrls, result);\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest_whenBizConfigUrlsEmpty() {\n        when(bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        when(eurekaClientConfigBean.getEurekaServerServiceUrls(\"defaultZone\")).thenReturn(Collections.singletonList(\"http://defaultZone/eureka/\"));\n        Mockito.doCallRealMethod().when(eurekaClientConfigBean).getEurekaServerServiceUrls(Mockito.anyString());\n\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig, null) {\n            @Override\n            public List<String> getEurekaServerServiceUrls(String myZone) {\n                return eurekaClientConfigBean.getEurekaServerServiceUrls(myZone);\n            }\n        };\n        \n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n        \n        assertEquals(Collections.singletonList(\"http://defaultZone/eureka/\"), result);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport org.springframework.cloud.netflix.eureka.EurekaClientConfigBean;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.mockito.Mockito.when;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ApolloEurekaClientConfigTest {\n    private BizConfig mockBizConfig;\n    private EurekaClientConfigBean mockEurekaClientConfig;\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n\n    @BeforeEach\n    public void setUp() {\n        mockBizConfig = Mockito.mock(BizConfig.class);\n        mockEurekaClientConfig = Mockito.mock(EurekaClientConfigBean.class);\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(mockBizConfig, null);\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTestWhenBizConfigUrlsNotEmpty() {\n        List<String> expectedUrls = Arrays.asList(\"http://localhost:8761/eureka/\", \"http://localhost:8762/eureka/\");\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(expectedUrls);\n\n        List<String> actualUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n\n        assertNotNull(actualUrls);\n        assertEquals(expectedUrls, actualUrls);\n        Mockito.verify(mockBizConfig).eurekaServiceUrls();\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTestWhenBizConfigUrlsEmpty() {\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        when(mockEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\"))\n                .thenReturn(Collections.singletonList(\"http://localhost:8761/eureka/\"));\n        Mockito.doCallRealMethod().when(mockEurekaClientConfig).getEurekaServerServiceUrls(Mockito.anyString());\n        \n        // Inheriting the behavior from the mock, required because the actual call is to 'super'\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(mockBizConfig, null) {\n            @Override\n            public List<String> getEurekaServerServiceUrls(String myZone) {\n                return mockEurekaClientConfig.getEurekaServerServiceUrls(myZone);\n            }\n        };\n\n        List<String> actualUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n\n        assertNotNull(actualUrls);\n        assertEquals(Collections.singletonList(\"http://localhost:8761/eureka/\"), actualUrls);\n        Mockito.verify(mockBizConfig).eurekaServiceUrls();\n        Mockito.verify(mockEurekaClientConfig).getEurekaServerServiceUrls(\"defaultZone\");\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.cloud.netflix.eureka.EurekaClientConfigBean;\n\npublic class ApolloEurekaClientConfigTest {\n\n    private BizConfig mockBizConfig;\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n    private EurekaClientConfigBean mockSuperEurekaClientConfig;\n\n    @BeforeEach\n    public void setUp() {\n        mockBizConfig = mock(BizConfig.class);\n        mockSuperEurekaClientConfig = mock(EurekaClientConfigBean.class);\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(mockBizConfig, null) {\n            @Override\n            public List<String> getEurekaServerServiceUrls(String myZone) {\n                return super.getEurekaServerServiceUrls(myZone);\n            }\n        };\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest_UrlsNotEmpty() {\n        List<String> expectedUrls = Arrays.asList(\"http://localhost:8080/eureka/\", \"http://localhost:8081/eureka/\");\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(expectedUrls);\n        \n        List<String> actualUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n\n        assertEquals(expectedUrls, actualUrls, \"Returned URLs should match the expected URLs from BizConfig\");\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest_UrlsEmpty_CallSuper() {\n        List<String> expectedUrls = Collections.singletonList(\"http://localhost:8761/eureka/\");\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        when(mockSuperEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\")).thenReturn(expectedUrls);\n        \n        List<String> actualUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n\n        assertEquals(expectedUrls, actualUrls, \"Should call and return from super class when BizConfig URLs are empty\");\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport org.springframework.cloud.netflix.eureka.EurekaClientConfigBean;\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class ApolloEurekaClientConfigTest {\n    \n    private BizConfig mockBizConfig;\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n    private final String testZone = \"defaultZone\";\n\n    @BeforeEach\n    void setUp() {\n        mockBizConfig = Mockito.mock(BizConfig.class);\n        apolloEurekaClientConfig = Mockito.spy(new ApolloEurekaClientConfig(mockBizConfig, null));\n    }\n\n    @Test\n    public void getEurekaServerServiceUrls_ReturnNonEmptyList_FromBizConfig() {\n        List<String> mockUrls = Arrays.asList(\"http://eureka-server-1\", \"http://eureka-server-2\");\n        Mockito.when(mockBizConfig.eurekaServiceUrls()).thenReturn(mockUrls);\n        \n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(testZone);\n        \n        assertNotNull(result);\n        assertFalse(result.isEmpty());\n        assertEquals(mockUrls, result);\n        verify(mockBizConfig, times(1)).eurekaServiceUrls();\n        verify(apolloEurekaClientConfig, never()).getEurekaServerServiceUrls(testZone);\n    }\n\n    @Test\n    public void getEurekaServerServiceUrls_ReturnList_FromSuperMethod() {\n        Mockito.when(mockBizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        EurekaClientConfigBean mockSuperConfig = Mockito.mock(EurekaClientConfigBean.class);\n        Mockito.when(apolloEurekaClientConfig.getEurekaServerServiceUrls(testZone)).thenReturn(mockSuperConfig.getEurekaServerServiceUrls(testZone));\n\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(testZone);\n        \n        assertNotNull(result);\n        assertEquals(mockSuperConfig.getEurekaServerServiceUrls(testZone), result);\n        verify(mockBizConfig, times(1)).eurekaServiceUrls();\n        verify(apolloEurekaClientConfig, times(1)).getEurekaServerServiceUrls(testZone);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport org.springframework.cloud.netflix.eureka.EurekaClientConfigBean;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class ApolloEurekaClientConfigTest {\n\n    @Mock\n    private BizConfig mockBizConfig;\n    \n    @Mock\n    private RefreshScope mockRefreshScope;\n    \n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(mockBizConfig, mockRefreshScope);\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest_WhenUrlsIsEmpty_ShouldReturnSuper() {\n        // Mock BizConfig to return empty URL list\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        \n        // Mocking the superclass method (need to partially mock ApolloEurekaClientConfig for it)\n        ApolloEurekaClientConfig spyApolloEurekaClientConfig = spy(apolloEurekaClientConfig);\n        List<String> superUrls = Arrays.asList(\"http://super.example.com\");\n        doReturn(superUrls).when(spyApolloEurekaClientConfig).getEurekaServerServiceUrls(anyString());\n        \n        List<String> result = spyApolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n        \n        assertEquals(superUrls, result);\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest_WhenUrlsIsNotEmpty_ShouldReturnUrls() {\n        // Mock BizConfig to return a non-empty URL list\n        List<String> expectedUrls = Arrays.asList(\"http://test1.example.com\", \"http://test2.example.com\");\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(expectedUrls);\n\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n        \n        assertEquals(expectedUrls, result);\n    }\n    \n    // Add any additional tests here if needed\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class ApolloEurekaClientConfigTest {\n\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n    @Mock\n    private BizConfig bizConfig;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig, null);\n    }\n    \n    @Test\n    public void getEurekaServerServiceUrlsShouldReturnBizConfigUrlsWhenNotEmpty() {\n        // Arrange\n        List<String> expectedUrls = Arrays.asList(\"http://localhost:8761/eureka/\", \"http://localhost:8762/eureka/\");\n        when(bizConfig.eurekaServiceUrls()).thenReturn(expectedUrls);\n        \n        // Act\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n        \n        // Assert\n        assertNotNull(result);\n        assertFalse(result.isEmpty());\n        assertEquals(expectedUrls, result);\n        verify(bizConfig, times(1)).eurekaServiceUrls();\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsShouldReturnParentUrlsWhenBizConfigUrlsEmpty() {\n        // Arrange\n        List<String> fallbackUrls = Arrays.asList(\"http://fallback:8761/eureka/\");\n        when(bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        apolloEurekaClientConfig = spy(apolloEurekaClientConfig);\n        doReturn(fallbackUrls).when(apolloEurekaClientConfig).getEurekaServerServiceUrls(\"defaultZone\");\n\n        // Act\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n        \n        // Assert\n        assertNotNull(result);\n        assertFalse(result.isEmpty());\n        assertEquals(fallbackUrls, result);\n        verify(bizConfig, times(1)).eurekaServiceUrls();\n        verify(apolloEurekaClientConfig, times(1)).getEurekaServerServiceUrls(\"defaultZone\");\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Cleanup resources or mock resets if necessary\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class ApolloEurekaClientConfigTest {\n    \n    private BizConfig mockBizConfig = Mockito.mock(BizConfig.class);\n    private RefreshScope mockRefreshScope = Mockito.mock(RefreshScope.class);\n    private ApolloEurekaClientConfig apolloEurekaClientConfig = new ApolloEurekaClientConfig(mockBizConfig, mockRefreshScope);\n    \n    // Assuming the parent getEurekaServerServiceUrls implementation for testing.\n    private List<String> defaultServiceUrls = Collections.singletonList(\"http://default.com/eureka\");\n\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        // Prepare the default response from super\n        EurekaClientConfigBean defaultConfig = new EurekaClientConfigBean() {\n            @Override\n            public List<String> getEurekaServerServiceUrls(String myZone) {\n                return defaultServiceUrls;\n            }\n        };\n        \n        // Inject default behaviour into our config for tests\n        apolloEurekaClientConfig = Mockito.spy(apolloEurekaClientConfig);\n        Mockito.doReturn(defaultServiceUrls).when(apolloEurekaClientConfig).getEurekaServerServiceUrls(Mockito.anyString());\n        \n        // Case 1: BizConfig returns non-empty list\n        List<String> mockUrls = Arrays.asList(\"http://custom1.com/eureka\", \"http://custom2.com/eureka\");\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(mockUrls);\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n        assertEquals(mockUrls, result, \"Returned URLs should match the mock URLs when BizConfig returns a non-empty list.\");\n        \n        // Case 2: BizConfig returns empty list, should return default\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        result = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n        assertEquals(defaultServiceUrls, result, \"Returned URLs should match the default when BizConfig returns an empty list.\");\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\n@ExtendWith(MockitoExtension.class)\npublic class ApolloEurekaClientConfigTest {\n\n    @Mock\n    private BizConfig bizConfig;\n\n    @Mock\n    private RefreshScope refreshScope;\n\n    @InjectMocks\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n\n    private final String myZone = \"defaultZone\";\n    private final List<String> fakeServiceUrls = Arrays.asList(\"http://localhost:8080/eureka/\", \"http://localhost:8090/eureka/\");\n    \n    @BeforeEach\n    public void setup() {\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig, refreshScope);\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest_whenNoUrlsConfigured_shouldDelegateToSuper() {\n        // Arrange\n        when(bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n\n        // Act\n        List<String> resultUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(myZone);\n\n        // Assert\n        assertNotNull(resultUrls);\n        verify(bizConfig, times(1)).eurekaServiceUrls();\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest_whenUrlsConfigured_shouldReturnConfiguredUrls() {\n        // Arrange\n        when(bizConfig.eurekaServiceUrls()).thenReturn(fakeServiceUrls);\n\n        // Act\n        List<String> resultUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(myZone);\n\n        // Assert\n        assertEquals(fakeServiceUrls, resultUrls);\n        verify(bizConfig, times(1)).eurekaServiceUrls();\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.cloud.netflix.eureka.EurekaClientConfigBean;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class ApolloEurekaClientConfigTest {\n    private BizConfig bizConfig;\n    private EurekaClientConfigBean eurekaClientConfigBean;\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n\n    @BeforeEach\n    public void setUp() {\n        bizConfig = Mockito.mock(BizConfig.class);\n        eurekaClientConfigBean = Mockito.mock(EurekaClientConfigBean.class);\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig, null) {\n            @Override\n            public List<String> getEurekaServerServiceUrls(String myZone) {\n                return super.getEurekaServerServiceUrls(myZone);\n            }\n        };\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        // Case when bizConfig returns non-empty list\n        List<String> expectedUrls = Arrays.asList(\"http://localhost:8080/eureka\", \"http://localhost:9090/eureka\");\n        when(bizConfig.eurekaServiceUrls()).thenReturn(expectedUrls);\n\n        List<String> actualUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n\n        verify(bizConfig).eurekaServiceUrls();\n        assertEquals(expectedUrls, actualUrls);\n\n        // Case when bizConfig returns an empty list\n        when(bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        when(eurekaClientConfigBean.getEurekaServerServiceUrls(\"defaultZone\"))\n                .thenReturn(Collections.singletonList(\"http://default-zone.eureka.com\"));\n\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig, null) {\n            @Override\n            public List<String> getEurekaServerServiceUrls(String myZone) {\n                return Collections.singletonList(\"http://default-zone.eureka.com\");\n            }\n        };\n\n        actualUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n\n        assertEquals(Collections.singletonList(\"http://default-zone.eureka.com\"), actualUrls);\n    }\n}"
    ]
}