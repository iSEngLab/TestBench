{
    "project_name": "apollo",
    "file_name": "ApolloEurekaClientConfig.java",
    "relative_path": "apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/eureka/ApolloEurekaClientConfig.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.biz.eureka",
    "docstring": "/**\n   * Assert only one zone: defaultZone, but multiple environments.\n   */",
    "source_code": "\n@Override\npublic List<String> getEurekaServerServiceUrls(String myZone) {\n  List<String> urls = bizConfig.eurekaServiceUrls();\n  return CollectionUtils.isEmpty(urls) ? super.getEurekaServerServiceUrls(myZone) : urls;\n}\n",
    "class_name": "ApolloEurekaClientConfig",
    "method_name": "getEurekaServerServiceUrls",
    "arguments": [
        "String myZone"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.cloud.netflix.eureka.EurekaClientConfigBean;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class ApolloEurekaClientConfigTest {\n\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        BizConfig mockBizConfig = mock(BizConfig.class);\n        RefreshScope mockRefreshScope = mock(RefreshScope.class);\n\n        // Create instance of ApolloEurekaClientConfig with mocked dependencies\n        ApolloEurekaClientConfig apolloEurekaClientConfig = new ApolloEurekaClientConfig(mockBizConfig, mockRefreshScope);\n\n        // Define the zone we are testing with\n        String testZone = \"defaultZone\";\n\n        // Stubbing the mocked BizConfig.eurekaServiceUrls() method to return a non-empty list\n        List<String> mockUrls = Arrays.asList(\"http://eureka1.example.com\", \"http://eureka2.example.com\");\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(mockUrls);\n\n        // Call the method under test\n        List<String> urls = apolloEurekaClientConfig.getEurekaServerServiceUrls(testZone);\n\n        // Verification that the Eureka service URLs obtained from BizConfig are returned\n        assertEquals(mockUrls, urls, \"The returned Eureka server URLs should match the mock URLs from BizConfig.\");\n\n        // Making sure that when `bizConfig.eurekaServiceUrls()` is empty, it falls back to `super.getEurekaServerServiceUrls()`\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n\n        // Since `super.getEurekaServerServiceUrls()` is not easily mockable, let's simulate the base class behavior and assume it to return a specific URL list.\n        List<String> superUrls = Arrays.asList(\"http://super.eureka.example.com\");\n        EurekaClientConfigBean eurekaClientConfigBean = new EurekaClientConfigBean();\n        apolloEurekaClientConfig = spy(new ApolloEurekaClientConfig(mockBizConfig, mockRefreshScope));\n        doReturn(superUrls).when(apolloEurekaClientConfig).getEurekaServerServiceUrls(testZone);\n\n        urls = apolloEurekaClientConfig.getEurekaServerServiceUrls(testZone);\n\n        // Verifying that the `super.getEurekaServerServiceUrls` has been called and has provided the URLs\n        assertEquals(superUrls, urls, \"The returned Eureka server URLs should fall back to the 'super' implementation when BizConfig returns an empty list.\");\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\n\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\n@ExtendWith(MockitoExtension.class)\npublic class ApolloEurekaClientConfigTest {\n\n    @Mock\n    private BizConfig bizConfig;\n\n    @Mock\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n\n    @BeforeEach\n    void setUp() {\n        apolloEurekaClientConfig = spy(new ApolloEurekaClientConfig(bizConfig, null));\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest_withNonEmptyUrls() {\n        List<String> mockUrls = Arrays.asList(\"http://eureka-server-1\", \"http://eureka-server-2\");\n\n        // Mocking bizConfig.eurekaServiceUrls() to return the mock URL list\n        doReturn(mockUrls).when(bizConfig).eurekaServiceUrls();\n\n        // When\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n\n        // Then\n        assertNotNull(result, \"The result should not be null\");\n        assertEquals(mockUrls, result, \"The method should return the mocked URLs list\");\n        verify(apolloEurekaClientConfig, never()).getEurekaServerServiceUrls(anyString());\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest_withEmptyUrls() {\n        // Mock the bizConfig.eurekaServiceUrls() to return an empty list\n        doReturn(Collections.emptyList()).when(bizConfig).eurekaServiceUrls();\n\n        // Assuming we have some default URLs in the parent method\n        List<String> defaultUrls = Arrays.asList(\"http://default-eureka-server\");\n        doReturn(defaultUrls).when(apolloEurekaClientConfig).getEurekaServerServiceUrls(\"myZone\");\n\n        // When\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n\n        // Then\n        assertNotNull(result, \"The result should not be null\");\n        assertEquals(defaultUrls, result, \"The method should return the default URLs as the returned list is empty\");\n        verify(apolloEurekaClientConfig).getEurekaServerServiceUrls(\"myZone\");\n    }\n\n    // Add more tests if needed to cover various cases, including null values, etc.\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.Mockito.verify;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.cloud.netflix.eureka.EurekaClientConfigBean;\n\npublic class ApolloEurekaClientConfigTest {\n\n    private BizConfig bizConfig;\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n    private final List<String> testUrls = Arrays.asList(\"http://localhost:8761/eureka/\", \"http://localhost:8762/eureka/\");\n\n    @BeforeEach\n    public void setUp() {\n        bizConfig = mock(BizConfig.class);\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig, null);\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        when(bizConfig.eurekaServiceUrls()).thenReturn(testUrls);\n        \n        List<String> urls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n        \n        assertEquals(testUrls, urls);\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsWithEmptyUrlsTest() {\n        when(bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        \n        // Mock the superclass method call since we are focusing on unit testing the ApolloEurekaClientConfig class.\n        EurekaClientConfigBean superEurekaClient = mock(EurekaClientConfigBean.class);\n        when(superEurekaClient.getEurekaServerServiceUrls(\"defaultZone\")).thenReturn(Collections.singletonList(\"http://super.default.zone/eureka/\"));\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig, null) {\n            @Override\n            public List<String> getEurekaServerServiceUrls(String myZone) {\n                return super.getEurekaServerServiceUrls(myZone);\n            }\n        };\n        \n        List<String> urls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n        \n        assertEquals(Collections.singletonList(\"http://super.default.zone/eureka/\"), urls);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\n@ExtendWith(MockitoExtension.class)\npublic class ApolloEurekaClientConfigTest {\n\n    @Mock\n    private BizConfig mockBizConfig;\n    \n    @InjectMocks\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n\n    @Test\n    public void getEurekaServerServiceUrls_UsesBizConfig() {\n        // Given\n        List<String> expectedUrls = Arrays.asList(\"http://localhost:8761/eureka/\");\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(expectedUrls);\n        \n        // When\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n        \n        // Then\n        assertEquals(expectedUrls, result);\n        verify(mockBizConfig).eurekaServiceUrls();\n    }\n\n    @Test\n    public void getEurekaServerServiceUrls_DelegatesToSuperWhenBizConfigIsEmpty() {\n        // Given\n        List<String> expectedUrls = Arrays.asList(\"http://super.example.com/eureka/\");\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        \n        ApolloEurekaClientConfig spyConfig = spy(apolloEurekaClientConfig);\n        doReturn(expectedUrls).when(spyConfig).getEurekaServerServiceUrls(\"myZone\");\n\n        // When\n        List<String> result = spyConfig.getEurekaServerServiceUrls(\"myZone\");\n        \n        // Then\n        assertEquals(expectedUrls, result);\n        verify(mockBizConfig).eurekaServiceUrls();\n        verify(spyConfig).getEurekaServerServiceUrls(\"myZone\");\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.Mockito.verify;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\nimport java.util.Collections;\n\npublic class ApolloEurekaClientConfigTest {\n\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n\n    @Mock\n    private BizConfig bizConfig;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig, null); // Assuming RefreshScope is not needed for this test\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        // Case 1: Non-empty urls from bizConfig\n        List<String> mockUrls = Arrays.asList(\"http://localhost:8080/eureka/\", \"http://localhost:8090/eureka/\");\n        when(bizConfig.eurekaServiceUrls()).thenReturn(mockUrls);\n\n        List<String> urls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n\n        assertNotNull(urls);\n        assertFalse(urls.isEmpty());\n        assertEquals(mockUrls, urls);\n\n        // Case 2: Empty urls from bizConfig should invoke super.getEurekaServerServiceUrls\n        when(bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n\n        // We cannot directly assert the result of calling super.getEurekaServerServiceUrls without an actual implementation.\n        // Hence, we will just ensure that the result is not null which is a reasonable assumption.\n        urls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n\n        assertNotNull(urls);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.when;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.verifyZeroInteractions;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class ApolloEurekaClientConfigTest {\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n\n    @Mock\n    private BizConfig mockBizConfig;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(mockBizConfig, null);\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        // Prepare mocked data\n        List<String> mockUrls = Arrays.asList(\"http://localhost:8761/eureka/\", \"http://localhost:8762/eureka/\");\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(mockUrls);\n\n        // Test the actual method\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n\n        // Verify the result\n        assertEquals(mockUrls, result, \"The returned URLs should match the mock URLs.\");\n\n        // Test the case where the bizConfig returns an empty list\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(new ArrayList<>());\n        // Assuming we have a valid implementation of getEurekaServerServiceUrls(myZone) in the parent class\n        // This can't be mocked directly because the method is not static, and the superclass isn't mocked\n        // We're just verifying that no exception is thrown and the method returns a non-null list.\n        List<String> superResult = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n        assertNotNull(superResult, \"The result should fallback to the super implementation for an empty list and should not be null.\");\n\n        // Verify that bizConfig.eurekaServiceUrls() is called\n        verifyZeroInteractions(mockBizConfig);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.when;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class ApolloEurekaClientConfigTest {\n    private BizConfig bizConfig;\n    private RefreshScope refreshScope;\n    private ApolloEurekaClientConfig clientConfig;\n\n    @BeforeEach\n    public void setUp() {\n        bizConfig = Mockito.mock(BizConfig.class);\n        refreshScope = Mockito.mock(RefreshScope.class);\n        clientConfig = new ApolloEurekaClientConfig(bizConfig, refreshScope);\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        String myZone = \"testZone\";\n\n        // Test with non-empty urls from bizConfig\n        List<String> expectedBizConfigUrls = Arrays.asList(\"http://localhost:8761/eureka/\");\n        when(bizConfig.eurekaServiceUrls()).thenReturn(expectedBizConfigUrls);\n        List<String> actualBizConfigUrls = clientConfig.getEurekaServerServiceUrls(myZone);\n        assertEquals(expectedBizConfigUrls, actualBizConfigUrls, \"Should return the URLs from bizConfig when non-empty\");\n\n        // Test with empty urls from bizConfig\n        when(bizConfig.eurekaServiceUrls()).thenReturn(null);\n        EurekaClientConfigBean parent = Mockito.mock(EurekaClientConfigBean.class);\n        when(parent.getEurekaServerServiceUrls(myZone)).thenReturn(Arrays.asList(\"http://parentConfig:8761/eureka/\"));\n        clientConfig = Mockito.spy(clientConfig);\n        Mockito.doReturn(parent).when(clientConfig).super$getEurekaServerServiceUrls(myZone);\n        List<String> actualParentUrls = clientConfig.getEurekaServerServiceUrls(myZone);\n        assertEquals(Arrays.asList(\"http://parentConfig:8761/eureka/\"), actualParentUrls, \"Should return the URLs from the superclass method when bizConfig's URLs are empty\");\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.springframework.cloud.netflix.eureka.EurekaClientConfigBean;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class ApolloEurekaClientConfigTest {\n\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n    private final String myZone = \"myZone\";\n\n    @Mock\n    private BizConfig bizConfig;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig, null);\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        // Case when BizConfig returns a non-empty list of URLs\n        List<String> mockUrls = Arrays.asList(\"http://localhost:8761/eureka/\", \"http://localhost:8762/eureka/\");\n        when(bizConfig.eurekaServiceUrls()).thenReturn(mockUrls);\n\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(myZone);\n        assertEquals(mockUrls, result, \"The URLs should match the list returned by bizConfig\");\n\n        // Case when BizConfig returns an empty list of URLs\n        when(bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        EurekaClientConfigBean superEurekaClientConfig = mock(EurekaClientConfigBean.class);\n        List<String> superUrls = Arrays.asList(\"http://superhost:8761/eureka/\");\n        when(superEurekaClientConfig.getEurekaServerServiceUrls(anyString())).thenReturn(superUrls);\n\n        // Replace the actual parent with the mocked one (would require making the apolloEurekaClientConfig's super field accessible or adding a setter)\n        ReflectionTestUtils.setField(apolloEurekaClientConfig, \"super$0\", superEurekaClientConfig);\n        result = apolloEurekaClientConfig.getEurekaServerServiceUrls(myZone);\n        assertEquals(superUrls, result, \"The URLs should match the list returned by the super implementation\");\n\n        // Make sure bizConfig's method was called twice, once for each test case\n        verify(bizConfig, times(2)).eurekaServiceUrls();\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Clean up resources if necessary\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class ApolloEurekaClientConfigTest {\n    \n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        // Mock the BizConfig to return a list of URLs\n        BizConfig mockBizConfig = mock(BizConfig.class);\n        List<String> mockUrls = Arrays.asList(\"http://localhost:8080/eureka/\", \"http://localhost:8081/eureka/\");\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(mockUrls);\n\n        // Create an instance of ApolloEurekaClientConfig using the mocked BizConfig\n        ApolloEurekaClientConfig config = new ApolloEurekaClientConfig(mockBizConfig, null);\n\n        // Now we can call getEurekaServerServiceUrls and confirm it returns the mock URLs\n        List<String> result = config.getEurekaServerServiceUrls(\"anyZone\");\n        assertEquals(mockUrls, result, \"The returned URLs should match the mock URLs\");\n\n        // Test the alternative branch where the BizConfig returns an empty list\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        List<String> superResult = Arrays.asList(\"http://default-eureka-url.com\");\n        ApolloEurekaClientConfig configWithNoUrls = new ApolloEurekaClientConfig(mockBizConfig, null) {\n            @Override\n            public List<String> getEurekaServerServiceUrls(String myZone) {\n                return superResult; // Simulating the overridden super method\n            }\n        };\n        \n        // Confirm that the super.getEurekaServerServiceUrls is called when urls are empty\n        result = configWithNoUrls.getEurekaServerServiceUrls(\"anyZone\");\n        assertEquals(superResult, result, \"The returned URLs should match the default super URLs\");\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class ApolloEurekaClientConfigTest {\n\n    private BizConfig mockBizConfig;\n    private RefreshScope mockRefreshScope;\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n\n    @BeforeEach\n    public void setUp() {\n        mockBizConfig = Mockito.mock(BizConfig.class);\n        mockRefreshScope = Mockito.mock(RefreshScope.class);\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(mockBizConfig, mockRefreshScope);\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        // Assume the zone is \"myZone\" for testing purposes\n        String zone = \"myZone\";\n\n        // When the bizConfig returns a non-empty list\n        List<String> nonEmptyList = Arrays.asList(\"http://eureka1.example.com\", \"http://eureka2.example.com\");\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(nonEmptyList);\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(zone);\n        assertEquals(nonEmptyList, result, \"The returned URLs should be the same as the non-empty list provided by bizConfig\");\n\n        // When the bizConfig returns an empty list\n        List<String> emptyList = Collections.emptyList();\n        when(mockBizConfig.eurekaServiceUrls()).thenReturn(emptyList);\n        \n        // Assuming super.getEurekaServerServiceUrls(zone) would return some default URLs for testing\n        List<String> defaultUrls = Arrays.asList(\"http://eureka.example.com\");\n        EurekaClientConfigBean spyConfigBean = Mockito.spy(new EurekaClientConfigBean());\n        doReturn(defaultUrls).when(spyConfigBean).getEurekaServerServiceUrls(zone);\n        result = spyConfigBean.getEurekaServerServiceUrls(zone);\n        \n        assertEquals(defaultUrls, result, \"The returned URLs should be the default URLs when bizConfig provides an empty list\");\n    }\n}"
    ]
}