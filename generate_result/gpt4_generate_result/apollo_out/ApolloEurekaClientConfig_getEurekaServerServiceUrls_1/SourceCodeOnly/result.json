{
    "project_name": "apollo",
    "file_name": "ApolloEurekaClientConfig.java",
    "relative_path": "apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/eureka/ApolloEurekaClientConfig.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.biz.eureka",
    "docstring": "/**\n   * Assert only one zone: defaultZone, but multiple environments.\n   */",
    "source_code": "\n@Override\npublic List<String> getEurekaServerServiceUrls(String myZone) {\n  List<String> urls = bizConfig.eurekaServiceUrls();\n  return CollectionUtils.isEmpty(urls) ? super.getEurekaServerServiceUrls(myZone) : urls;\n}\n",
    "class_name": "ApolloEurekaClientConfig",
    "method_name": "getEurekaServerServiceUrls",
    "arguments": [
        "String myZone"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\nimport static org.mockito.MockitoAnnotations.openMocks;\n\npublic class ApolloEurekaClientConfigTest {\n\n    @Mock\n    private BizConfig bizConfig;\n\n    @InjectMocks\n    private ApolloEurekaClient apolloEurekaClient;\n\n    @BeforeEach\n    public void setUp() {\n        openMocks(this);\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsWithNonEmptyUrlsTest() {\n        // Given\n        List<String> expectedUrls = Arrays.asList(\"http://eureka-1\", \"http://eureka-2\");\n        when(bizConfig.eurekaServiceUrls()).thenReturn(expectedUrls);\n\n        // When\n        List<String> actualUrls = apolloEurekaClient.getEurekaServerServiceUrls(\"someZone\");\n\n        // Then\n        verify(bizConfig, times(1)).eurekaServiceUrls();\n        assertEquals(expectedUrls, actualUrls);\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsWithEmptyUrlsTest() {\n        // Given\n        when(bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        List<String> superUrls = Arrays.asList(\"http://super-eureka\");\n        doReturn(superUrls).when(apolloEurekaClient).getEurekaServerServiceUrls(\"someZone\");\n\n        // When\n        List<String> actualUrls = apolloEurekaClient.getEurekaServerServiceUrls(\"someZone\");\n\n        // Then\n        verify(bizConfig, times(1)).eurekaServiceUrls();\n        assertNotSame(superUrls, actualUrls); // Verify it is not the same reference\n        assertEquals(superUrls, actualUrls); // Verify the contents are the same\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class ApolloEurekaClientConfigTest {\n\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n    private BizConfig bizConfig;\n\n    @BeforeEach\n    public void setUp() {\n        bizConfig = Mockito.mock(BizConfig.class);\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig) {\n            @Override\n            public List<String> getEurekaServerServiceUrls(String myZone) {\n                return super.getEurekaServerServiceUrls(myZone);\n            }\n        };\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        Mockito.when(bizConfig.eurekaServiceUrls()).thenReturn(Arrays.asList(\"http://localhost:8080/eureka/\"));\n\n        List<String> urls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n        assertFalse(urls.isEmpty(), \"Eureka server URLs should not be empty\");\n        assertEquals(Arrays.asList(\"http://localhost:8080/eureka/\"), urls, \"The returned URLs should match the expected ones\");\n\n        Mockito.when(bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n\n        // Assuming there is a method 'getDefaultEurekaServerServiceUrls' to return default URLs\n        // Modify the method reference to the actual method that returns the super class URLs\n        Mockito.doReturn(Arrays.asList(\"http://localhost:8001/eureka/\")).when(apolloEurekaClientConfig).getEurekaServerServiceUrls(\"defaultZone\");\n\n        urls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n        assertFalse(urls.isEmpty(), \"Eureka server URLs should not be empty even when bizConfig returns empty list\");\n        assertEquals(Arrays.asList(\"http://localhost:8001/eureka/\"), urls, \"The returned URLs should match the expected default ones\");\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.*;\n\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.*;\n\n// Assuming there's an interface for the bizConfig that can be mocked.\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\n\npublic class ApolloEurekaClientConfigTest {\n\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n    private BizConfig bizConfig;\n    \n    @BeforeEach\n    public void setUp() {\n        bizConfig = mock(BizConfig.class); // Mock the BizConfig\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(); // Assuming a zero-arg constructor\n        apolloEurekaClientConfig.bizConfig = bizConfig; // Inject the mock\n    }\n    \n    @Test\n    public void getEurekaServerServiceUrlsTest_WithNonEmptyUrls() {\n        // Arrange\n        String myZone = \"myZone\";\n        List<String> mockUrls = Arrays.asList(\"http://eureka-server-1\", \"http://eureka-server-2\");\n        when(bizConfig.eurekaServiceUrls()).thenReturn(mockUrls);\n        \n        // Act\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(myZone);\n\n        // Assert\n        assertIterableEquals(mockUrls, result);\n    }\n    \n    @Test\n    public void getEurekaServerServiceUrlsTest_WithEmptyUrls() {\n        // Arrange\n        String myZone = \"myZone\";\n        List<String> superUrls = Arrays.asList(\"http://eureka-super-1\", \"http://eureka-super-2\");\n        when(bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        // Assuming a way to mock the superclass method\n        Mockito.doReturn(superUrls).when((YourSuperClassType)apolloEurekaClientConfig).getEurekaServerServiceUrls(myZone);\n        \n        // Act\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(myZone);\n\n        // Assert\n        assertIterableEquals(superUrls, result);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class ApolloEurekaClientConfigTest {\n\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n    private BizConfig bizConfig;\n\n    @BeforeEach\n    public void setUp() {\n        bizConfig = Mockito.mock(BizConfig.class);\n        apolloEurekaClientConfig = Mockito.spy(new ApolloEurekaClientConfig(bizConfig));\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest_withNonEmptyUrls() {\n        // Arrange\n        List<String> fakeUrls = Arrays.asList(\"http://localhost:8080/eureka\", \"http://remotehost:8080/eureka\");\n        when(bizConfig.eurekaServiceUrls()).thenReturn(fakeUrls);\n    \n        // Act\n        List<String> returnedUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n    \n        // Assert\n        assertNotNull(returnedUrls, \"The returned URL list should not be null\");\n        assertFalse(returnedUrls.isEmpty(), \"The returned URL list should not be empty\");\n        assertIterableEquals(fakeUrls, returnedUrls, \"The returned URLs should match the URLs from bizConfig\");\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest_withEmptyUrls() {\n        // Arrange\n        when(bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        doReturn(Arrays.asList(\"http://defaultUrl\")).when(apolloEurekaClientConfig).getEurekaServerServiceUrls(\"myZone\");\n\n        // Act\n        List<String> returnedUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n    \n        // Assert\n        assertNotNull(returnedUrls, \"The returned URL list should not be null\");\n        assertEquals(Arrays.asList(\"http://defaultUrl\"), returnedUrls, \"The returned URLs should match the default URLs when bizConfig returns an empty list\");\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.Mockito;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Collections;\n\npublic class ApolloEurekaClientConfigTest {\n\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n    private BizConfig bizConfig;\n    private final String myZone = \"myZone\";\n\n    @BeforeEach\n    public void setUp() {\n        bizConfig = Mockito.mock(BizConfig.class);\n        apolloEurekaClientConfig = Mockito.spy(new ApolloEurekaClientConfig(bizConfig));\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest_WithNonEmptyList() {\n        List<String> mockUrls = Arrays.asList(\"http://eureka-server-1\", \"http://eureka-server-2\");\n        Mockito.when(bizConfig.eurekaServiceUrls()).thenReturn(mockUrls);\n        \n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(myZone);\n        \n        assertEquals(mockUrls, result, \"The URLs should be taken from bizConfig when it provides a non-empty list.\");\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest_WithEmptyList() {\n        Mockito.when(bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        List<String> superUrls = Arrays.asList(\"http://super-eureka-server\");\n        Mockito.doReturn(superUrls).when(apolloEurekaClientConfig).getEurekaServerServiceUrls(myZone);\n        \n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(myZone);\n        \n        assertEquals(superUrls, result, \"The URLs should be taken from the super implementation when bizConfig provides an empty list.\");\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\n// Assuming BizConfig is an interface with the method eurekaServiceUrls()\n// and ExtendedEurekaClientConfig extends a class that has the method getEurekaServerServiceUrls(String myZone)\npublic class ApolloEurekaClientConfigTest extends ExtendedEurekaClientConfig {\n\n    private BizConfig bizConfig;\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n\n    @BeforeEach\n    public void setUp() {\n        bizConfig = Mockito.mock(BizConfig.class);\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig);\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        String myZone = \"testZone\";\n        List<String> mockUrls = Arrays.asList(\"http://localhost:8080/eureka/\", \"http://localhost:8081/eureka/\");\n        List<String> superUrls = Arrays.asList(\"http://superhost:8080/eureka/\");\n\n        Mockito.when(bizConfig.eurekaServiceUrls()).thenReturn(mockUrls);\n        \n        // Test when URLs are not empty\n        List<String> urls = apolloEurekaClientConfig.getEurekaServerServiceUrls(myZone);\n        assertNotNull(urls);\n        assertFalse(urls.isEmpty());\n        assertEquals(mockUrls, urls);\n\n        // Test when URLs are empty\n        Mockito.when(bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n\n        // Assuming we have a superclass with the implementation of getEurekaServerServiceUrls\n        Mockito.doReturn(superUrls).when((ExtendedEurekaClientConfig)apolloEurekaClientConfig).getEurekaServerServiceUrls(myZone);\n\n        urls = apolloEurekaClientConfig.getEurekaServerServiceUrls(myZone);\n        assertNotNull(urls);\n        assertFalse(urls.isEmpty());\n        assertEquals(superUrls, urls);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport static org.mockito.Mockito.*;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class ApolloEurekaClientConfigTest {\n\n    private BizConfig bizConfig; // Assuming BizConfig is the class type of bizConfig field\n    private ApolloEurekaClientConfig apolloEurekaClientConfig; // Assuming ApolloEurekaClientConfig is the current class\n\n    @BeforeEach\n    public void setUp() {\n        bizConfig = mock(BizConfig.class);\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig);\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsNonEmptyListTest() {\n        // Arrange\n        List<String> expectedUrls = Arrays.asList(\"http://localhost:8080/eureka\", \"http://localhost:8081/eureka\");\n        when(bizConfig.eurekaServiceUrls()).thenReturn(expectedUrls);\n\n        // Act\n        List<String> actualUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n\n        // Assert\n        assertEquals(expectedUrls, actualUrls);\n        verify(bizConfig, times(1)).eurekaServiceUrls();\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsEmptyListTest() {\n        // Arrange\n        when(bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        ApolloEurekaClientConfig spyApolloEurekaClientConfig = spy(apolloEurekaClientConfig);\n        List<String> fallbackUrls = Arrays.asList(\"http://fallback:8080/eureka\");\n        doReturn(fallbackUrls).when(spyApolloEurekaClientConfig).getEurekaServerServiceUrls(\"defaultZone\");\n\n        // Act\n        List<String> actualUrls = spyApolloEurekaClientConfig.getEurekaServerServiceUrls(\"defaultZone\");\n\n        // Assert\n        assertEquals(fallbackUrls, actualUrls);\n        verify(bizConfig, times(1)).eurekaServiceUrls();\n        verify(spyApolloEurekaClientConfig, times(1)).getEurekaServerServiceUrls(\"defaultZone\");\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.mockito.Mockito;\n\npublic class ApolloEurekaClientConfigTest {\n\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        // Mock BizConfig\n        BizConfig bizConfig = Mockito.mock(BizConfig.class);\n        \n        ApolloEurekaClientConfig eurekaClientConfig = new ApolloEurekaClientConfig(bizConfig) {\n            public List<String> getEurekaServerServiceUrls(String myZone) {\n                return super.getEurekaServerServiceUrls(myZone);\n            }\n        };\n\n        // Scenario 1: eurekaServiceUrls is empty, should fallback to superclass method\n        Mockito.when(bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        List<String> fallbackUrls = Arrays.asList(\"http://fallback-eureka-url.com\");\n        \n        ApolloEurekaClientConfig spyEurekaClientConfig = Mockito.spy(eurekaClientConfig);\n        \n        Mockito.doReturn(fallbackUrls).when(spyEurekaClientConfig).getEurekaServerServiceUrls(\"testZone\");\n        \n        assertEquals(fallbackUrls, spyEurekaClientConfig.getEurekaServerServiceUrls(\"testZone\"));\n\n        // Scenario 2: eurekaServiceUrls is not empty, should return the given URLs\n        List<String> expectedUrls = Arrays.asList(\"http://custom-eureka-url.com\");\n        Mockito.when(bizConfig.eurekaServiceUrls()).thenReturn(expectedUrls);\n        \n        assertEquals(expectedUrls, eurekaClientConfig.getEurekaServerServiceUrls(\"testZone\"));\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class ApolloEurekaClientConfigTest {\n\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n    private BizConfig bizConfig;\n\n    @BeforeEach\n    public void setUp() {\n        bizConfig = mock(BizConfig.class);\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig);\n    }\n\n    @Test\n    public void testGetEurekaServerServiceUrls_withNonEmptyUrls() {\n        // Arrange\n        List<String> expectedUrls = Arrays.asList(\"http://eureka1.example.com\", \"http://eureka2.example.com\");\n        when(bizConfig.eurekaServiceUrls()).thenReturn(expectedUrls);\n\n        // Act\n        List<String> actualUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"someZone\");\n\n        // Assert\n        assertEquals(expectedUrls, actualUrls);\n        verify(bizConfig, times(1)).eurekaServiceUrls();\n    }\n\n    @Test\n    public void testGetEurekaServerServiceUrls_withEmptyUrls() {\n        // Arrange\n        when(bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        ApolloEurekaClientConfig spyConfig = spy(apolloEurekaClientConfig);\n        List<String> superUrls = Arrays.asList(\"http://eurekasuper1.example.com\", \"http://eurekasuper2.example.com\");\n        doReturn(superUrls).when(spyConfig).getEurekaServerServiceUrls(anyString());\n\n        // Act\n        List<String> actualUrls = spyConfig.getEurekaServerServiceUrls(\"myZone\");\n\n        // Assert\n        assertEquals(superUrls, actualUrls);\n        verify(bizConfig, times(1)).eurekaServiceUrls();\n        verify(spyConfig, times(1)).getEurekaServerServiceUrls(\"myZone\");\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class ApolloEurekaClientConfigTest {\n\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n    \n    @Mock\n    private BizConfig bizConfig;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig);\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsWhenUrlsIsNotEmptyTest() {\n        // Set up the mocked return value\n        List<String> mockUrls = Arrays.asList(\"http://eureka-1.com\", \"http://eureka-2.com\");\n        when(bizConfig.eurekaServiceUrls()).thenReturn(mockUrls);\n        \n        // Call the method under test\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"someZone\");\n\n        // Verify the result\n        assertNotNull(result);\n        assertEquals(mockUrls, result);\n    }\n\n    @Test\n    public void getEurekaServerServiceUrlsWhenUrlsIsEmptyTest() {\n        // Set up the mocked return value\n        List<String> fallbackUrls = Arrays.asList(\"http://fallback-eureka.com\");\n        when(bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n        when(apolloEurekaClientConfig.getEurekaServerServiceUrls(\"someZone\")).thenReturn(fallbackUrls);\n\n        // Call the method under test\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"someZone\");\n\n        // Verify the result\n        assertNotNull(result);\n        assertEquals(fallbackUrls, result);\n    }\n\n    // Additional clean up if necessary\n    @AfterEach\n    public void tearDown() {\n        // Any tear down operation after each test case\n    }\n}"
    ]
}