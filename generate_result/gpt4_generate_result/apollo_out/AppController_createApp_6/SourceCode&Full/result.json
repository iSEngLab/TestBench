{
    "project_name": "apollo",
    "file_name": "AppController.java",
    "relative_path": "apollo/apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/AppController.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.openapi.v1.controller",
    "docstring": "/**\n   * @see com.ctrip.framework.apollo.portal.controller.AppController#create(AppModel)\n   */",
    "source_code": "\n@Transactional\n@PreAuthorize(value = \"@consumerPermissionValidator.hasCreateApplicationPermission(#request)\")\n@PostMapping(value = \"/apps\")\npublic void createApp(\n    @RequestBody OpenCreateAppDTO req,\n    HttpServletRequest request\n) {\n  if (null == req.getApp()) {\n    throw new BadRequestException(\"App is null\");\n  }\n  final OpenAppDTO app = req.getApp();\n  if (null == app.getAppId()) {\n    throw new BadRequestException(\"AppId is null\");\n  }\n  // create app\n  this.appOpenApiService.createApp(req);\n  if (req.isAssignAppRoleToSelf()) {\n    long consumerId = this.consumerAuthUtil.retrieveConsumerId(request);\n    consumerService.assignAppRoleToConsumer(consumerId, app.getAppId());\n  }\n}\n",
    "class_name": "AppController",
    "method_name": "createApp",
    "arguments": [
        "OpenCreateAppDTO req",
        "HttpServletRequest request"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport javax.servlet.http.HttpServletRequest;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AppControllerTest {\n\n    private AppController appController;\n\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n    @Mock\n    private ConsumerService consumerService;\n    @Mock\n    private AppOpenApiService appOpenApiService;\n    @Mock\n    private HttpServletRequest httpServletRequest;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n        appController = new AppController(consumerAuthUtil, consumerService, appOpenApiService);\n    }\n\n    @Test\n    public void createAppTest_NullOpenCreateAppDTO_ThrowsBadRequestException() {\n        BadRequestException exception = assertThrows(\n            BadRequestException.class, \n            () -> appController.createApp(null, httpServletRequest)\n        );\n        assertEquals(\"App is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_NullOpenAppDTO_ThrowsBadRequestException() {\n        OpenCreateAppDTO openCreateAppDTO = new OpenCreateAppDTO();\n        \n        BadRequestException exception = assertThrows(\n            BadRequestException.class, \n            () -> appController.createApp(openCreateAppDTO, httpServletRequest)\n        );\n        assertEquals(\"App is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_NullAppId_ThrowsBadRequestException() {\n        OpenAppDTO openAppDTO = new OpenAppDTO();\n        OpenCreateAppDTO openCreateAppDTO = new OpenCreateAppDTO();\n        openCreateAppDTO.setApp(openAppDTO);\n\n        BadRequestException exception = assertThrows(\n            BadRequestException.class, \n            () -> appController.createApp(openCreateAppDTO, httpServletRequest)\n        );\n        assertEquals(\"AppId is null\", exception.getMessage());\n    }\n\n    // Additional tests for other scenarios can be added here.\n\n    @AfterEach\n    public void tearDown() {\n        // Cleanup resources if needed\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\npublic class AppControllerTest {\n\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @Mock\n    private ConsumerService consumerService;\n\n    @Mock\n    private AppOpenApiService appOpenApiService;\n\n    @Mock\n    private HttpServletRequest request;\n\n    @InjectMocks\n    private AppController appController;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void createAppTest_appIsNull_throwsBadRequestException() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n\n        BadRequestException exception = assertThrows(BadRequestException.class, () ->\n                appController.createApp(req, request)\n        );\n\n        assertEquals(\"App is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_appIdIsNull_throwsBadRequestException() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(new OpenAppDTO());\n\n        BadRequestException exception = assertThrows(BadRequestException.class, () ->\n                appController.createApp(req, request)\n        );\n\n        assertEquals(\"AppId is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_validRequest_createsAppAndAssignsRole() {\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"testAppId\");\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(app);\n        req.setAssignAppRoleToSelf(true);\n        long consumerId = 1L;\n\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(consumerId);\n\n        appController.createApp(req, request);\n\n        verify(appOpenApiService, times(1)).createApp(req);\n        verify(consumerService, times(1)).assignAppRoleToConsumer(consumerId, app.getAppId());\n    }\n\n    @Test\n    public void createAppTest_validRequestNoAssignRole_createsAppWithoutAssigningRole() {\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"testAppId\");\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(app);\n        req.setAssignAppRoleToSelf(false);\n\n        appController.createApp(req, request);\n\n        verify(appOpenApiService, times(1)).createApp(req);\n        verify(consumerService, never()).assignAppRoleToConsumer(anyLong(), anyString());\n    }\n\n    // Add additional test cases as needed\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.mock.web.MockHttpServletRequest;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class AppControllerTest {\n\n    @Mock\n    private AppOpenApiService appOpenApiService;\n\n    @Mock\n    private ConsumerService consumerService;\n\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @InjectMocks\n    private AppController appController;\n\n    private MockHttpServletRequest request;\n\n    @BeforeEach\n    public void setUp() {\n        request = new MockHttpServletRequest();\n    }\n\n    @Test\n    public void whenOpenCreateAppDTOIsNull_thenThrowBadRequestException() {\n        OpenCreateAppDTO req = null;\n\n        assertThrows(BadRequestException.class, () -> appController.createApp(req, request));\n    }\n\n    @Test\n    public void whenOpenAppDTOAppIdIsNull_thenThrowBadRequestException() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(null);\n        req.setApp(app);\n\n        assertThrows(BadRequestException.class, () -> appController.createApp(req, request));\n    }\n\n    @Test\n    public void whenValidRequest_thenAssignAppRoleToSelf() {\n        OpenCreateAppDTO req = mock(OpenCreateAppDTO.class);\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"myAppId\");\n        when(req.getApp()).thenReturn(app);\n        when(req.isAssignAppRoleToSelf()).thenReturn(true);\n\n        long consumerId = 100L;\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(consumerId);\n\n        appController.createApp(req, request);\n\n        verify(appOpenApiService, times(1)).createApp(req);\n        verify(consumerAuthUtil, times(1)).retrieveConsumerId(request);\n        verify(consumerService, times(1)).assignAppRoleToConsumer(consumerId, app.getAppId());\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport javax.servlet.http.HttpServletRequest;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.ArgumentMatchers.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass AppControllerTest {\n    private AppOpenApiService appOpenApiService;\n    private ConsumerService consumerService;\n    private ConsumerAuthUtil consumerAuthUtil;\n    private AppController appController;\n    private HttpServletRequest request;\n\n    @BeforeEach\n    void setUp() {\n        appOpenApiService = Mockito.mock(AppOpenApiService.class);\n        consumerService = Mockito.mock(ConsumerService.class);\n        consumerAuthUtil = Mockito.mock(ConsumerAuthUtil.class);\n        appController = new AppController(consumerAuthUtil, consumerService, appOpenApiService);\n        request = Mockito.mock(HttpServletRequest.class);\n    }\n    \n    @Test\n    void createAppTest_whenAppIsNull_thenThrowBadRequestException() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        \n        Exception exception = assertThrows(BadRequestException.class, () -> {\n            appController.createApp(req, request);\n        });\n\n        assertEquals(\"App is null\", exception.getMessage());\n    }\n    \n    @Test\n    void createAppTest_whenAppIdIsNull_thenThrowBadRequestException() {\n        OpenAppDTO openAppDTO = new OpenAppDTO();\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(openAppDTO);\n        \n        Exception exception = assertThrows(BadRequestException.class, () -> {\n            appController.createApp(req, request);\n        });\n\n        assertEquals(\"AppId is null\", exception.getMessage());\n    }\n    \n    @Test\n    void createAppTest_whenValidApp_thenSucceed() {\n        OpenAppDTO openAppDTO = new OpenAppDTO();\n        openAppDTO.setAppId(\"my-app-id\");\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(openAppDTO);\n        req.setAssignAppRoleToSelf(true);\n        Mockito.when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(1L);\n        \n        assertDoesNotThrow(() -> appController.createApp(req, request));\n        Mockito.verify(appOpenApiService, Mockito.times(1)).createApp(req);\n        Mockito.verify(consumerService, Mockito.times(1)).assignAppRoleToConsumer(anyLong(), eq(\"my-app-id\"));\n    }\n}\n",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.mock.web.MockHttpServletRequest;\n\nimport static org.mockito.Mockito.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class AppControllerTest {\n    \n    @InjectMocks\n    private AppController appController;\n    \n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n    \n    @Mock\n    private ConsumerService consumerService;\n    \n    @Mock\n    private AppOpenApiService appOpenApiService;\n\n    private MockHttpServletRequest request;\n    private OpenCreateAppDTO createAppDTO;\n    \n    @BeforeEach\n    public void setUp() {\n        request = new MockHttpServletRequest();\n        createAppDTO = new OpenCreateAppDTO();\n    }\n    \n    @Test\n    public void createAppTest_appIsNull_throwsBadRequestException() {\n        // Arrange\n        createAppDTO.setApp(null);\n        \n        // Assert\n        assertThrows(BadRequestException.class, () -> {\n            // Act\n            appController.createApp(createAppDTO, request);\n        });\n    }\n\n    @Test\n    public void createAppTest_appIdIsNull_throwsBadRequestException() {\n        // Arrange\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(null);\n        createAppDTO.setApp(app);\n        \n        // Assert\n        assertThrows(BadRequestException.class, () -> {\n            // Act\n            appController.createApp(createAppDTO, request);\n        });\n    }\n\n    @Test\n    public void createAppTest_validRequest_createsApp() {\n        // Arrange\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"my-app-id\");\n        createAppDTO.setApp(app);\n        createAppDTO.setAssignAppRoleToSelf(false);\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(1L);\n\n        // Act\n        appController.createApp(createAppDTO, request);\n        \n        // Assert\n        verify(appOpenApiService).createApp(createAppDTO);\n    }\n\n    @Test\n    public void createAppTest_assignAppRoleToSelf_assingsAppRoleToConsumer() {\n        // Arrange\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"my-app-id\");\n        createAppDTO.setApp(app);\n        createAppDTO.setAssignAppRoleToSelf(true);\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(1L);\n\n        // Act\n        appController.createApp(createAppDTO, request);\n        \n        // Assert\n        verify(appOpenApiService).createApp(createAppDTO);\n        verify(consumerService).assignAppRoleToConsumer(1L, \"my-app-id\");\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.mock.web.MockHttpServletRequest;\n\nimport static org.mockito.ArgumentMatchers.anyLong;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.mock;\n\n@ExtendWith(MockitoExtension.class)\npublic class AppControllerTest {\n    \n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n    \n    @Mock\n    private ConsumerService consumerService;\n    \n    @Mock\n    private AppOpenApiService appOpenApiService;\n    \n    @InjectMocks\n    private AppController appController;\n    \n    private MockHttpServletRequest request;\n    private OpenCreateAppDTO openCreateAppDTO;\n    private OpenAppDTO openAppDTO;\n    private final long consumerId = 1L;\n    \n    @BeforeEach\n    void setUp() {\n        // Initialize the test request and DTO objects\n        request = new MockHttpServletRequest();\n        openAppDTO = new OpenAppDTO();\n        openAppDTO.setAppId(\"SampleAppId\");\n        openCreateAppDTO = new OpenCreateAppDTO();\n        openCreateAppDTO.setApp(openAppDTO);\n        // Stubbing for methods that will be called\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(consumerId);\n        doNothing().when(appOpenApiService).createApp(any(OpenCreateAppDTO.class));\n        doNothing().when(consumerService).assignAppRoleToConsumer(anyLong(), any(String.class));\n    }\n    \n    @Test\n    public void createAppTest_ThrowsExceptionIfAppIsNull() {\n        OpenCreateAppDTO dtoWithNullApp = new OpenCreateAppDTO();\n        assertThrows(BadRequestException.class, () -> appController.createApp(dtoWithNullApp, request));\n    }\n    \n    @Test\n    public void createAppTest_ThrowsExceptionIfAppIdIsNull() {\n        OpenAppDTO appWithNullId = new OpenAppDTO();\n        openCreateAppDTO.setApp(appWithNullId);\n        assertThrows(BadRequestException.class, () -> appController.createApp(openCreateAppDTO, request));\n    }\n    \n    @Test\n    public void createAppTest_SuccessfulCreationWithoutRoleAssignment() {\n        openCreateAppDTO.setAssignAppRoleToSelf(false);\n        appController.createApp(openCreateAppDTO, request);\n\n        // Verify service method was called once\n        verify(appOpenApiService, times(1)).createApp(openCreateAppDTO);\n        // Verify no role assignment was attempted\n        verify(consumerService, times(0)).assignAppRoleToConsumer(consumerId, openAppDTO.getAppId());\n    }\n    \n    @Test\n    public void createAppTest_SuccessfulCreationWithRoleAssignment() {\n        openCreateAppDTO.setAssignAppRoleToSelf(true);\n        appController.createApp(openCreateAppDTO, request);\n\n        // Verify service methods were called once\n        verify(appOpenApiService, times(1)).createApp(openCreateAppDTO);\n        verify(consumerService, times(1)).assignAppRoleToConsumer(consumerId, openAppDTO.getAppId());\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport javax.servlet.http.HttpServletRequest;\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AppControllerTest {\n    \n    private AppController appController;\n    private HttpServletRequest request;\n    private AppOpenApiService appOpenApiService;\n    private ConsumerAuthUtil consumerAuthUtil;\n    private ConsumerService consumerService;\n\n    @BeforeEach\n    public void setUp() {\n        appOpenApiService = mock(AppOpenApiService.class);\n        consumerAuthUtil = mock(ConsumerAuthUtil.class);\n        consumerService = mock(ConsumerService.class);\n        appController = new AppController(consumerAuthUtil, consumerService, appOpenApiService);\n        request = mock(HttpServletRequest.class);\n    }\n\n    @Test\n    public void createAppTest_WhenAppIsNull_ShouldThrowBadRequestException() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(null);\n        \n        BadRequestException exception = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(req, request)\n        );\n        \n        assertEquals(\"App is null\", exception.getMessage());\n    }\n    \n    @Test\n    public void createAppTest_WhenAppIdIsNull_ShouldThrowBadRequestException() {\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(null);\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(app);\n        \n        BadRequestException exception = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(req, request)\n        );\n\n        assertEquals(\"AppId is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_WhenValidApp_ShouldCallCreateAppAndAssignRole() {\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"valid-app-id\");\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(app);\n        req.setAssignAppRoleToSelf(true);\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(100L);\n\n        appController.createApp(req, request);\n\n        verify(appOpenApiService, times(1)).createApp(req);\n        verify(consumerService, times(1)).assignAppRoleToConsumer(100L, \"valid-app-id\");\n    }\n\n    // Additional tests can go here to cover more scenarios such as\n    // app creation without assigning roles, handling of exceptions thrown by service layers, etc.\n\n    @AfterEach\n    public void tearDown() {\n        Mockito.reset(appOpenApiService, consumerAuthUtil, consumerService);\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.mockito.ArgumentMatchers.anyLong;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class AppControllerTest {\n\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @Mock\n    private ConsumerService consumerService;\n\n    @Mock\n    private AppOpenApiService appOpenApiService;\n\n    @Mock\n    private HttpServletRequest request;\n\n    @InjectMocks\n    private AppController appController;\n\n    private OpenCreateAppDTO createAppDTO;\n    private OpenAppDTO appDTO;\n\n    @BeforeEach\n    public void setUp() {\n        appDTO = new OpenAppDTO();\n        appDTO.setAppId(\"someAppId\");\n\n        createAppDTO = new OpenCreateAppDTO();\n        createAppDTO.setApp(appDTO);\n    }\n\n    @Test\n    public void createAppTest_appIsNull_shouldThrowException() {\n        // Arrange\n        OpenCreateAppDTO nullAppDTO = new OpenCreateAppDTO();\n\n        // Act & Assert\n        assertThrows(BadRequestException.class, () -> appController.createApp(nullAppDTO, request));\n    }\n\n    @Test\n    public void createAppTest_appIdIsNull_shouldThrowException() {\n        // Arrange\n        appDTO.setAppId(null);\n        createAppDTO.setApp(appDTO);\n\n        // Act & Assert\n        assertThrows(BadRequestException.class, () -> appController.createApp(createAppDTO, request));\n    }\n\n    @Test\n    public void createAppTest_validApp_createAppAndAssignRole() {\n        // Arrange\n        long consumerId = 1L;\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(consumerId);\n        when(appOpenApiService.createApp(eq(createAppDTO))).thenReturn(appDTO);\n        createAppDTO.setAssignAppRoleToSelf(true);\n\n        // Act\n        appController.createApp(createAppDTO, request);\n\n        // Assert\n        verify(appOpenApiService, times(1)).createApp(createAppDTO);\n        verify(consumerService, times(1)).assignAppRoleToConsumer(eq(consumerId), eq(appDTO.getAppId()));\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.mockito.Mockito.*;\n\npublic class AppControllerTest {\n\n    @InjectMocks\n    private AppController appController;\n\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @Mock\n    private ConsumerService consumerService;\n\n    @Mock\n    private AppOpenApiService appOpenApiService;\n\n    @Mock\n    private HttpServletRequest request;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void createAppTest() {\n        OpenCreateAppDTO openCreateAppDTO = new OpenCreateAppDTO();\n        OpenAppDTO openAppDTO = new OpenAppDTO();\n        openAppDTO.setAppId(\"testAppId\");\n        openCreateAppDTO.setApp(openAppDTO);\n        openCreateAppDTO.setAssignAppRoleToSelf(true);\n\n        long consumerId = 100L;\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(consumerId);\n\n        appController.createApp(openCreateAppDTO, request);\n\n        verify(appOpenApiService, times(1)).createApp(openCreateAppDTO);\n        verify(consumerService, times(1)).assignAppRoleToConsumer(eq(consumerId), eq(\"testAppId\"));\n    }\n\n    @Test\n    public void createAppThrowsBadRequestWhenAppIsNullTest() {\n        OpenCreateAppDTO openCreateAppDTO = new OpenCreateAppDTO();\n        openCreateAppDTO.setApp(null);\n\n        Exception exception = assertThrows(BadRequestException.class, () -> {\n            appController.createApp(openCreateAppDTO, request);\n        });\n\n        assertEquals(\"App is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppThrowsBadRequestWhenAppIdIsNullTest() {\n        OpenCreateAppDTO openCreateAppDTO = new OpenCreateAppDTO();\n        OpenAppDTO openAppDTO = new OpenAppDTO();\n        openAppDTO.setAppId(null);\n        openCreateAppDTO.setApp(openAppDTO);\n\n        Exception exception = assertThrows(BadRequestException.class, () -> {\n            appController.createApp(openCreateAppDTO, request);\n        });\n\n        assertEquals(\"AppId is null\", exception.getMessage());\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport static org.mockito.Mockito.*;\nimport javax.servlet.http.HttpServletRequest;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AppControllerTest {\n\n    @Mock\n    private AppOpenApiService mockAppOpenApiService;\n    \n    @Mock\n    private ConsumerService mockConsumerService;\n    \n    @Mock\n    private ConsumerAuthUtil mockConsumerAuthUtil;\n\n    @Mock\n    private HttpServletRequest mockRequest;\n\n    @InjectMocks\n    private AppController appController;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void createAppTest_throwBadRequestWhenAppIsNull() {\n        OpenCreateAppDTO requestDTO = new OpenCreateAppDTO();\n\n        BadRequestException thrown = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(requestDTO, mockRequest),\n            \"Expected createApp to throw, but it didn't\"\n        );\n\n        assertTrue(thrown.getMessage().contains(\"App is null\"));\n    }\n\n    @Test\n    public void createAppTest_throwBadRequestWhenAppIdIsNull() {\n        OpenAppDTO appDTO = new OpenAppDTO();\n        OpenCreateAppDTO requestDTO = new OpenCreateAppDTO();\n        requestDTO.setApp(appDTO);\n\n        BadRequestException thrown = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(requestDTO, mockRequest),\n            \"Expected createApp to throw, but it didn't\"\n        );\n\n        assertTrue(thrown.getMessage().contains(\"AppId is null\"));\n    }\n\n    @Test\n    public void createAppTest_success() {\n        OpenAppDTO appDTO = Mockito.mock(OpenAppDTO.class);\n        when(appDTO.getAppId()).thenReturn(\"my-app-id\");\n\n        OpenCreateAppDTO requestDTO = new OpenCreateAppDTO();\n        requestDTO.setApp(appDTO);\n        requestDTO.setAssignAppRoleToSelf(true);\n\n        when(mockConsumerAuthUtil.retrieveConsumerId(mockRequest)).thenReturn(100L);\n\n        appController.createApp(requestDTO, mockRequest);\n\n        verify(mockAppOpenApiService, times(1)).createApp(requestDTO);\n        verify(mockConsumerService, times(1)).assignAppRoleToConsumer(100L, \"my-app-id\");\n    }\n}"
    ]
}