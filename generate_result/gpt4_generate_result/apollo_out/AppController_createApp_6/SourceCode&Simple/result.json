{
    "project_name": "apollo",
    "file_name": "AppController.java",
    "relative_path": "apollo/apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/AppController.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.openapi.v1.controller",
    "docstring": "/**\n   * @see com.ctrip.framework.apollo.portal.controller.AppController#create(AppModel)\n   */",
    "source_code": "\n@Transactional\n@PreAuthorize(value = \"@consumerPermissionValidator.hasCreateApplicationPermission(#request)\")\n@PostMapping(value = \"/apps\")\npublic void createApp(\n    @RequestBody OpenCreateAppDTO req,\n    HttpServletRequest request\n) {\n  if (null == req.getApp()) {\n    throw new BadRequestException(\"App is null\");\n  }\n  final OpenAppDTO app = req.getApp();\n  if (null == app.getAppId()) {\n    throw new BadRequestException(\"AppId is null\");\n  }\n  // create app\n  this.appOpenApiService.createApp(req);\n  if (req.isAssignAppRoleToSelf()) {\n    long consumerId = this.consumerAuthUtil.retrieveConsumerId(request);\n    consumerService.assignAppRoleToConsumer(consumerId, app.getAppId());\n  }\n}\n",
    "class_name": "AppController",
    "method_name": "createApp",
    "arguments": [
        "OpenCreateAppDTO req",
        "HttpServletRequest request"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.*;\nimport javax.servlet.http.HttpServletRequest;\n\npublic class AppControllerTest {\n\n    @InjectMocks\n    private AppController appController;\n    \n    @Mock\n    private AppOpenApiService appOpenApiService;\n\n    @Mock\n    private ConsumerService consumerService;\n\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @Mock\n    private HttpServletRequest request;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void createAppTest_withNullApp_ThrowsBadRequestException() {\n        OpenCreateAppDTO nullAppDTO = new OpenCreateAppDTO();\n\n        BadRequestException exception = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(nullAppDTO, request),\n            \"Expected createApp to throw, but it didn't\"\n        );\n\n        assertTrue(exception.getMessage().contains(\"App is null\"));\n    }\n\n    @Test\n    public void createAppTest_withNullAppId_ThrowsBadRequestException() {\n        OpenCreateAppDTO appDTOWithNullAppId = new OpenCreateAppDTO();\n        appDTOWithNullAppId.setApp(new OpenAppDTO());\n\n        BadRequestException exception = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(appDTOWithNullAppId, request),\n            \"Expected createApp to throw, but it didn't\"\n        );\n\n        assertTrue(exception.getMessage().contains(\"AppId is null\"));\n    }\n\n    @Test\n    public void createAppTest_withValidApp_CreatesApp() {\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"my-app-id\");\n        OpenCreateAppDTO appDTO = new OpenCreateAppDTO();\n        appDTO.setApp(app);\n        appDTO.setAssignAppRoleToSelf(true);\n        Long consumerId = 123L;\n\n        Mockito.when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(consumerId);\n        Mockito.doNothing().when(appOpenApiService).createApp(Mockito.any(OpenCreateAppDTO.class));\n        Mockito.doNothing().when(consumerService).assignAppRoleToConsumer(Mockito.anyLong(), Mockito.anyString());\n\n        assertDoesNotThrow(() -> appController.createApp(appDTO, request));\n        Mockito.verify(appOpenApiService, Mockito.times(1)).createApp(appDTO);\n        Mockito.verify(consumerService, Mockito.times(1)).assignAppRoleToConsumer(consumerId, app.getAppId());\n    }\n    \n    // Additional test could be written for the case where 'assignAppRoleToSelf' is false\n    // and the case with successful creation without throwing any exceptions.\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport static org.mockito.Mockito.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\n@ExtendWith(MockitoExtension.class)\npublic class AppControllerTest {\n\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @Mock\n    private ConsumerService consumerService;\n\n    @Mock\n    private AppOpenApiService appOpenApiService;\n\n    @Mock\n    private HttpServletRequest request;\n\n    @InjectMocks\n    private AppController appController;\n\n    @Test\n    public void createAppTest() {\n        // Prepare test data\n        OpenCreateAppDTO createAppDTO = new OpenCreateAppDTO();\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"testAppId\");\n        createAppDTO.setApp(app);\n        createAppDTO.setAssignAppRoleToSelf(true);\n        long consumerId = 100L;\n\n        // Mock the dependencies\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(consumerId);\n        doNothing().when(appOpenApiService).createApp(createAppDTO);\n        doNothing().when(consumerService).assignAppRoleToConsumer(consumerId, app.getAppId());\n\n        // Run the test\n        appController.createApp(createAppDTO, request);\n\n        // Verify the methods calls\n        verify(appOpenApiService, times(1)).createApp(createAppDTO);\n        verify(consumerService, times(1)).assignAppRoleToConsumer(consumerId, \"testAppId\");\n    }\n\n    @Test\n    public void createAppTest_withNullApp_shouldThrowBadRequest() {\n        // Prepare test data\n        OpenCreateAppDTO createAppDTO = new OpenCreateAppDTO();\n        createAppDTO.setApp(null);\n\n        // Run test and assert the exception\n        BadRequestException exception = assertThrows(BadRequestException.class, () -> {\n           appController.createApp(createAppDTO, request);\n        });\n\n        // Verify error message\n        assertEquals(\"App is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_withNullAppId_shouldThrowBadRequest() {\n        // Prepare test data\n        OpenCreateAppDTO createAppDTO = new OpenCreateAppDTO();\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(null);\n        createAppDTO.setApp(app);\n\n        // Run test and assert the exception\n        BadRequestException exception = assertThrows(BadRequestException.class, () -> {\n           appController.createApp(createAppDTO, request);\n        });\n\n        // Verify error message\n        assertEquals(\"AppId is null\", exception.getMessage());\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.security.test.context.support.WithMockUser;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class AppControllerTest {\n\n    @Mock\n    private AppOpenApiService appOpenApiService;\n\n    @Mock\n    private ConsumerService consumerService;\n\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @Mock\n    private HttpServletRequest request;\n\n    @InjectMocks\n    private AppController appController;\n\n    private OpenCreateAppDTO createAppRequest;\n\n    @BeforeEach\n    void setUp() {\n        OpenAppDTO openAppDTO = new OpenAppDTO();\n        openAppDTO.setAppId(\"myUniqueAppId\");\n\n        createAppRequest = new OpenCreateAppDTO();\n        createAppRequest.setApp(openAppDTO);\n\n        when(consumerAuthUtil.retrieveConsumerId(any(HttpServletRequest.class))).thenReturn(123L);\n    }\n\n    @Test\n    @WithMockUser\n    public void shouldThrowExceptionWhenAppIsNull() {\n        OpenCreateAppDTO requestWithNullApp = new OpenCreateAppDTO();\n        BadRequestException thrown = assertThrows(\n                BadRequestException.class,\n                () -> appController.createApp(requestWithNullApp, request),\n                \"Expected createApp() to throw, but it didn't\"\n        );\n        assertTrue(thrown.getMessage().contains(\"App is null\"));\n    }\n\n    @Test\n    @WithMockUser\n    public void shouldThrowExceptionWhenAppIdIsNull() {\n        OpenAppDTO appWithNullId = new OpenAppDTO();\n        createAppRequest.setApp(appWithNullId);\n\n        BadRequestException thrown = assertThrows(\n                BadRequestException.class,\n                () -> appController.createApp(createAppRequest, request),\n                \"Expected createApp() to throw, but it didn't\"\n        );\n        assertTrue(thrown.getMessage().contains(\"AppId is null\"));\n    }\n\n    @Test\n    @WithMockUser\n    public void shouldCreateAppSuccessfully() {\n        assertDoesNotThrow(() -> appController.createApp(createAppRequest, request));\n        verify(appOpenApiService, times(1)).createApp(createAppRequest);\n    }\n\n    @Test\n    @WithMockUser\n    public void shouldAssignAppRoleToSelfIfRequested() {\n        createAppRequest.setAssignAppRoleToSelf(true);\n\n        assertDoesNotThrow(() -> appController.createApp(createAppRequest, request));\n        verify(consumerService, times(1)).assignAppRoleToConsumer(123L, \"myUniqueAppId\");\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport javax.servlet.http.HttpServletRequest;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\n@ExtendWith(MockitoExtension.class)\npublic class AppControllerTest {\n\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @Mock\n    private ConsumerService consumerService;\n\n    @Mock\n    private AppOpenApiService appOpenApiService;\n\n    @Mock\n    private HttpServletRequest request;\n\n    @InjectMocks\n    private AppController appController;\n\n    private OpenCreateAppDTO openCreateAppDTO;\n    private OpenAppDTO openAppDTO;\n\n    @BeforeEach\n    public void setUp() {\n        openAppDTO = new OpenAppDTO();\n        openCreateAppDTO = new OpenCreateAppDTO();\n        openCreateAppDTO.setApp(openAppDTO);\n    }\n\n    @Test\n    public void createAppTest_nullApp_throwsBadRequestException() {\n        openCreateAppDTO.setApp(null);\n\n        BadRequestException exception = assertThrows(BadRequestException.class, () ->\n            appController.createApp(openCreateAppDTO, request)\n        );\n\n        assertEquals(\"App is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_nullAppId_throwsBadRequestException() {\n        openAppDTO.setAppId(null);\n\n        BadRequestException exception = assertThrows(BadRequestException.class, () ->\n            appController.createApp(openCreateAppDTO, request)\n        );\n\n        assertEquals(\"AppId is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_validRequest_createsAppSuccessfully() {\n        openAppDTO.setAppId(\"123\");\n        openCreateAppDTO.setAssignAppRoleToSelf(true);\n        long fakeConsumerId = 42L;\n\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(fakeConsumerId);\n\n        appController.createApp(openCreateAppDTO, request);\n\n        verify(appOpenApiService, times(1)).createApp(openCreateAppDTO);\n        verify(consumerService, times(1))\n            .assignAppRoleToConsumer(fakeConsumerId, openAppDTO.getAppId());\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class AppControllerTest {\n\n    @InjectMocks\n    private AppController appController;\n\n    @Mock\n    private AppOpenApiService appOpenApiService;\n    @Mock\n    private ConsumerService consumerService;\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n    @Mock\n    private HttpServletRequest request;\n\n    private OpenCreateAppDTO openCreateAppDTO;\n    private static final String APP_ID = \"testAppId\";\n    private static final long CONSUMER_ID = 1L;\n\n    @BeforeEach\n    void setUp() {\n        openCreateAppDTO = new OpenCreateAppDTO();\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(APP_ID);\n        openCreateAppDTO.setApp(app);\n    }\n\n    @Test\n    public void createAppTest_AppIsNull_ThrowsBadRequestException() {\n        OpenCreateAppDTO requestWithNullApp = new OpenCreateAppDTO();\n\n        assertThrows(BadRequestException.class, () -> {\n            appController.createApp(requestWithNullApp, request);\n        });\n    }\n\n    @Test\n    public void createAppTest_AppIdIsNull_ThrowsBadRequestException() {\n        OpenAppDTO appWithoutId = new OpenAppDTO();\n        openCreateAppDTO.setApp(appWithoutId);\n\n        assertThrows(BadRequestException.class, () -> {\n            appController.createApp(openCreateAppDTO, request);\n        });\n    }\n\n    @Test\n    public void createAppTest_ValidRequest_CreatesApp() {\n        doNothing().when(appOpenApiService).createApp(any(OpenCreateAppDTO.class));\n        when(consumerAuthUtil.retrieveConsumerId(any(HttpServletRequest.class))).thenReturn(CONSUMER_ID);\n        doNothing().when(consumerService).assignAppRoleToConsumer(anyLong(), anyString());\n\n        openCreateAppDTO.setAssignAppRoleToSelf(true);\n\n        assertDoesNotThrow(() -> appController.createApp(openCreateAppDTO, request));\n        verify(appOpenApiService, times(1)).createApp(refEq(openCreateAppDTO));\n        verify(consumerService, times(1)).assignAppRoleToConsumer(CONSUMER_ID, APP_ID);\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport static org.mockito.Mockito.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\n\npublic class AppControllerTest {\n\n    private AppController appController;\n    private ConsumerAuthUtil consumerAuthUtil;\n    private ConsumerService consumerService;\n    private AppOpenApiService appOpenApiService;\n    private HttpServletRequest request;\n    private OpenCreateAppDTO openCreateAppDTO;\n    private OpenAppDTO openAppDTO;\n\n    @BeforeEach\n    public void setUp() {\n        consumerAuthUtil = mock(ConsumerAuthUtil.class);\n        consumerService = mock(ConsumerService.class);\n        appOpenApiService = mock(AppOpenApiService.class);\n        request = mock(HttpServletRequest.class);\n        appController = new AppController(consumerAuthUtil, consumerService, appOpenApiService);\n\n        openAppDTO = new OpenAppDTO();\n        openAppDTO.setAppId(\"testAppId\");\n\n        openCreateAppDTO = new OpenCreateAppDTO();\n        openCreateAppDTO.setApp(openAppDTO);\n    }\n\n    @Test\n    public void createAppTest_Should_ThrowBadRequest_When_AppIsNull() {\n        Exception exception = assertThrows(BadRequestException.class, () -> {\n            openCreateAppDTO.setApp(null);\n            appController.createApp(openCreateAppDTO, request);\n        });\n\n        assertEquals(\"App is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_Should_ThrowBadRequest_When_AppIdIsNull() {\n        Exception exception = assertThrows(BadRequestException.class, () -> {\n            openAppDTO.setAppId(null);\n            appController.createApp(openCreateAppDTO, request);\n        });\n\n        assertEquals(\"AppId is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_Should_CreateApp_When_ValidRequest() {\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(1L);\n\n        appController.createApp(openCreateAppDTO, request);\n\n        verify(appOpenApiService, times(1)).createApp(openCreateAppDTO);\n    }\n\n    @Test\n    public void createAppTest_Should_AssignRole_When_AssignAppRoleToSelfIsTrue() {\n        openCreateAppDTO.setAssignAppRoleToSelf(true);\n\n        long consumerId = 1L;\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(consumerId);\n\n        appController.createApp(openCreateAppDTO, request);\n\n        verify(consumerService, times(1)).assignAppRoleToConsumer(consumerId, openAppDTO.getAppId());\n    }\n\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\npublic class AppControllerTest {\n    \n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n    @Mock\n    private ConsumerService consumerService;\n    @Mock\n    private AppOpenApiService appOpenApiService;\n    @Mock\n    private HttpServletRequest request;\n    \n    @InjectMocks\n    private AppController appController;\n    \n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n    \n    @Test\n    public void createAppTest_NullApp_ShouldThrowBadRequestException() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(null); // App is set to null\n        \n        BadRequestException exception = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(req, request),\n            \"Expected createApp to throw, but it didn't\"\n        );\n        \n        assertTrue(exception.getMessage().contains(\"App is null\"));\n    }\n\n    @Test\n    public void createAppTest_NullAppId_ShouldThrowBadRequestException() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(null); // AppId is set to null\n        req.setApp(app);\n        \n        BadRequestException exception = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(req, request),\n            \"Expected createApp to throw, but it didn't\"\n        );\n        \n        assertTrue(exception.getMessage().contains(\"AppId is null\"));\n    }\n    \n    @Test\n    public void createAppTest_ValidRequest_ShouldCallCreateAppAndPotentiallyAssignRole() {\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"valid-app-id\");\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(app);\n        req.setAssignAppRoleToSelf(true);\n        long mockConsumerId = 12345L;\n        \n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(mockConsumerId);\n        \n        appController.createApp(req, request);\n        \n        verify(appOpenApiService, times(1)).createApp(req);\n        verify(consumerService, times(1)).assignAppRoleToConsumer(mockConsumerId, app.getAppId());\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Cleanup resources if needed\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport static org.mockito.Mockito.*;\nimport javax.servlet.http.HttpServletRequest;\n\n@ExtendWith(MockitoExtension.class)\npublic class AppControllerTest {\n\n    @Mock\n    private HttpServletRequest mockRequest;\n\n    @Mock\n    private AppOpenApiService mockAppOpenApiService;\n\n    @Mock\n    private ConsumerAuthUtil mockConsumerAuthUtil;\n\n    @Mock\n    private ConsumerService mockConsumerService;\n\n    @InjectMocks\n    private AppController appController;\n\n    @BeforeEach\n    void setUp() {\n        // Set up necessary mock behavior if required\n    }\n\n    @Test\n    public void createAppTest_WhenAppIsNull_ThrowsBadRequestException() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        \n        BadRequestException thrown = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(req, mockRequest),\n            \"Expected createApp() to throw, but it didn't\"\n        );\n        \n        assertTrue(thrown.getMessage().contains(\"App is null\"));\n    }\n    \n    @Test\n    public void createAppTest_WhenAppIdIsNull_ThrowsBadRequestException() {\n        OpenAppDTO openAppDTO = new OpenAppDTO();\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(openAppDTO);\n        \n        BadRequestException thrown = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(req, mockRequest),\n            \"Expected createApp() to throw, but it didn't\"\n        );\n        \n        assertTrue(thrown.getMessage().contains(\"AppId is null\"));\n    }\n    \n    @Test\n    public void createAppTest_WhenValidRequest_CreatesAppAndAssignsRole() {\n        OpenAppDTO openAppDTO = new OpenAppDTO();\n        openAppDTO.setAppId(\"test-app-id\");\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(openAppDTO);\n        req.setAssignAppRoleToSelf(true);\n        \n        when(mockConsumerAuthUtil.retrieveConsumerId(mockRequest)).thenReturn(100L);\n        \n        appController.createApp(req, mockRequest);\n        \n        verify(mockAppOpenApiService, times(1)).createApp(req);\n        verify(mockConsumerService, times(1)).assignAppRoleToConsumer(100L, \"test-app-id\");\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class AppControllerTest {\n\n    private AppController appController;\n    private AppOpenApiService appOpenApiService;\n    private ConsumerService consumerService;\n    private ConsumerAuthUtil consumerAuthUtil;\n    private HttpServletRequest request;\n\n    @BeforeEach\n    public void setUp() {\n        appOpenApiService = mock(AppOpenApiService.class);\n        consumerService = mock(ConsumerService.class);\n        consumerAuthUtil = mock(ConsumerAuthUtil.class);\n        request = mock(HttpServletRequest.class);\n        appController = new AppController(consumerAuthUtil, consumerService, appOpenApiService);\n    }\n\n    @Test\n    public void createAppTest_AppIsNull_ThrowsBadRequestException() {\n        OpenCreateAppDTO dto = new OpenCreateAppDTO();\n\n        BadRequestException exception = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(dto, request)\n        );\n\n        assertEquals(\"App is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_AppIdIsNull_ThrowsBadRequestException() {\n        OpenCreateAppDTO dto = new OpenCreateAppDTO();\n        OpenAppDTO app = new OpenAppDTO();\n        dto.setApp(app);\n\n        BadRequestException exception = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(dto, request)\n        );\n\n        assertEquals(\"AppId is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_ValidApp_CreatesApp() {\n        OpenCreateAppDTO dto = new OpenCreateAppDTO();\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"someAppId\");\n        dto.setApp(app);\n        dto.setAssignAppRoleToSelf(true);\n        long consumerId = 1L;\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(consumerId);\n\n        appController.createApp(dto, request);\n        \n        verify(appOpenApiService, times(1)).createApp(dto);\n        verify(consumerService, times(1)).assignAppRoleToConsumer(consumerId, app.getAppId());\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\n\nimport javax.servlet.http.HttpServletRequest;\n\npublic class AppControllerTest {\n\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @Mock\n    private ConsumerService consumerService;\n\n    @Mock\n    private AppOpenApiService appOpenApiService;\n\n    @Mock\n    private HttpServletRequest request;\n\n    @InjectMocks\n    private AppController appController;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void createAppThrowsBadRequestWhenAppIsNull() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n\n        BadRequestException exception = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(req, request),\n            \"Expected createApp to throw, but it didn't\"\n        );\n\n        assertTrue(exception.getMessage().contains(\"App is null\"));\n    }\n\n    @Test\n    public void createAppThrowsBadRequestWhenAppIdIsNull() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(new OpenAppDTO());\n\n        BadRequestException exception = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(req, request),\n            \"Expected createApp to throw, but it didn't\"\n        );\n\n        assertTrue(exception.getMessage().contains(\"AppId is null\"));\n    }\n\n    @Test\n    public void createAppSuccess() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        OpenAppDTO appDTO = new OpenAppDTO();\n        appDTO.setAppId(\"1\");\n        req.setApp(appDTO);\n        req.setAssignAppRoleToSelf(true);\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(100L);\n\n        assertDoesNotThrow(() -> appController.createApp(req, request));\n\n        verify(appOpenApiService, times(1)).createApp(req);\n        verify(consumerService, times(1)).assignAppRoleToConsumer(100L, \"1\");\n    }\n}"
    ]
}