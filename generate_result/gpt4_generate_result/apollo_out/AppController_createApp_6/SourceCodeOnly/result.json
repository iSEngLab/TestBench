{
    "project_name": "apollo",
    "file_name": "AppController.java",
    "relative_path": "apollo/apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/AppController.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.openapi.v1.controller",
    "docstring": "/**\n   * @see com.ctrip.framework.apollo.portal.controller.AppController#create(AppModel)\n   */",
    "source_code": "\n@Transactional\n@PreAuthorize(value = \"@consumerPermissionValidator.hasCreateApplicationPermission(#request)\")\n@PostMapping(value = \"/apps\")\npublic void createApp(\n    @RequestBody OpenCreateAppDTO req,\n    HttpServletRequest request\n) {\n  if (null == req.getApp()) {\n    throw new BadRequestException(\"App is null\");\n  }\n  final OpenAppDTO app = req.getApp();\n  if (null == app.getAppId()) {\n    throw new BadRequestException(\"AppId is null\");\n  }\n  // create app\n  this.appOpenApiService.createApp(req);\n  if (req.isAssignAppRoleToSelf()) {\n    long consumerId = this.consumerAuthUtil.retrieveConsumerId(request);\n    consumerService.assignAppRoleToConsumer(consumerId, app.getAppId());\n  }\n}\n",
    "class_name": "AppController",
    "method_name": "createApp",
    "arguments": [
        "OpenCreateAppDTO req",
        "HttpServletRequest request"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AppControllerTest {\n\n    private AppController appController;\n    private OpenAppDTO openAppDTO;\n    private OpenCreateAppDTO openCreateAppDTO;\n    private HttpServletRequest mockRequest;\n    private AppOpenApiService mockAppOpenApiService;\n    private ConsumerService mockConsumerService;\n    private ConsumerAuthUtil mockConsumerAuthUtil;\n\n    @BeforeEach\n    public void setup() {\n        appController = new AppController();\n        openAppDTO = mock(OpenAppDTO.class);\n        openCreateAppDTO = mock(OpenCreateAppDTO.class);\n        mockRequest = mock(HttpServletRequest.class);\n        mockAppOpenApiService = mock(AppOpenApiService.class);\n        mockConsumerService = mock(ConsumerService.class);\n        mockConsumerAuthUtil = mock(ConsumerAuthUtil.class);\n        \n        // Assign necessary mocks to the appController\n        appController.appOpenApiService = mockAppOpenApiService;\n        appController.consumerService = mockConsumerService;\n        appController.consumerAuthUtil = mockConsumerAuthUtil;\n    }\n\n    @Test\n    public void createAppTest() {\n        // Arrange\n        when(openCreateAppDTO.getApp()).thenReturn(openAppDTO);\n        when(openAppDTO.getAppId()).thenReturn(\"ValidAppId\");\n        when(openCreateAppDTO.isAssignAppRoleToSelf()).thenReturn(true);\n        when(mockConsumerAuthUtil.retrieveConsumerId(mockRequest)).thenReturn(123L);\n        \n        // Act\n        appController.createApp(openCreateAppDTO, mockRequest);\n        \n        // Assert\n        verify(mockAppOpenApiService, times(1)).createApp(openCreateAppDTO);\n        verify(mockConsumerService, times(1)).assignAppRoleToConsumer(123L, \"ValidAppId\");\n    }\n\n    @Test\n    public void createAppWithNullAppTest() {\n        // Arrange\n        when(openCreateAppDTO.getApp()).thenReturn(null);\n        \n        // Assert throws BadRequestException\n        BadRequestException exception = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(openCreateAppDTO, mockRequest),\n            \"Expected createApp() to throw, but it didn't\"\n        );\n        \n        assertTrue(exception.getMessage().contains(\"App is null\"));\n    }\n    \n    @Test\n    public void createAppWithNullAppIdTest() {\n        // Arrange\n        when(openCreateAppDTO.getApp()).thenReturn(openAppDTO);\n        when(openAppDTO.getAppId()).thenReturn(null);\n        \n        // Assert throws BadRequestException\n        BadRequestException exception = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(openCreateAppDTO, mockRequest),\n            \"Expected createApp() to throw, but it didn't\"\n        );\n        \n        assertTrue(exception.getMessage().contains(\"AppId is null\"));\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.Mockito;\nimport org.springframework.security.access.prepost.PreAuthorize;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.transaction.Transactional;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AppControllerTest {\n\n    private AppOpenApiService appOpenApiServiceMock;\n    private ConsumerService consumerServiceMock;\n    private ConsumerAuthUtil consumerAuthUtilMock;\n    private OpenCreateAppDTO mockReq;\n    private HttpServletRequest mockRequest;\n    private OpenAppDTO mockApp;\n    private AppController appController;\n\n    @BeforeEach\n    void setUp() {\n        // Initialize mocks\n        appOpenApiServiceMock = mock(AppOpenApiService.class);\n        consumerServiceMock = mock(ConsumerService.class);\n        consumerAuthUtilMock = mock(ConsumerAuthUtil.class);\n        mockReq = mock(OpenCreateAppDTO.class);\n        mockRequest = mock(HttpServletRequest.class);\n        mockApp = mock(OpenAppDTO.class);\n        appController = new AppController(appOpenApiServiceMock, consumerServiceMock, consumerAuthUtilMock);\n    }\n\n    @Test\n    public void createApp_Test_withNullApp_shouldThrowBadRequestException() {\n        // Arrange\n        when(mockReq.getApp()).thenReturn(null);\n\n        // Assert\n        BadRequestException exception = assertThrows(BadRequestException.class, () -> {\n            // Act\n            appController.createApp(mockReq, mockRequest);\n        });\n\n        assertEquals(\"App is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createApp_Test_withNullAppId_shouldThrowBadRequestException() {\n        // Arrange\n        when(mockReq.getApp()).thenReturn(mockApp);\n        when(mockApp.getAppId()).thenReturn(null);\n\n        // Assert\n        BadRequestException exception = assertThrows(BadRequestException.class, () -> {\n            // Act\n            appController.createApp(mockReq, mockRequest);\n        });\n\n        assertEquals(\"AppId is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createApp_Test_withValidRequest_shouldInvokeCreateApp() {\n        // Arrange\n        long consumerId = 1L;\n        when(mockReq.getApp()).thenReturn(mockApp);\n        when(mockApp.getAppId()).thenReturn(\"validAppId\");\n        when(consumerAuthUtilMock.retrieveConsumerId(any(HttpServletRequest.class))).thenReturn(consumerId);\n        when(mockReq.isAssignAppRoleToSelf()).thenReturn(true);\n\n        // Act\n        appController.createApp(mockReq, mockRequest);\n\n        // Assert\n        verify(appOpenApiServiceMock).createApp(mockReq);\n        verify(consumerServiceMock).assignAppRoleToConsumer(eq(consumerId), eq(\"validAppId\"));\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport org.springframework.security.access.AccessDeniedException;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\npublic class AppControllerTest {\n\n    @InjectMocks\n    private AppController appController;\n\n    @Mock\n    private AppOpenApiService appOpenApiService;\n\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @Mock\n    private ConsumerService consumerService;\n\n    @Mock\n    private ConsumerPermissionValidator consumerPermissionValidator;\n\n    private MockHttpServletRequest request;\n    private OpenCreateAppDTO appDTO;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.initMocks(this);\n        request = new MockHttpServletRequest();\n        appDTO = new OpenCreateAppDTO();\n    }\n\n    @Test\n    public void createAppTest_withNullApp_shouldThrowBadRequest() {\n        appDTO.setApp(null);\n\n        BadRequestException thrown = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(appDTO, request),\n            \"Expected createApp to throw, but it didn't\"\n        );\n\n        assertTrue(thrown.getMessage().contains(\"App is null\"));\n    }\n\n    @Test\n    public void createAppTest_withNullAppId_shouldThrowBadRequest() {\n        OpenAppDTO openAppDTO = new OpenAppDTO();\n        openAppDTO.setAppId(null);\n        appDTO.setApp(openAppDTO);\n\n        BadRequestException thrown = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(appDTO, request),\n            \"Expected createApp to throw, but it didn't\"\n        );\n\n        assertTrue(thrown.getMessage().contains(\"AppId is null\"));\n    }\n\n    @Test\n    public void createAppTest_withValidData_shouldCreateApp() {\n        OpenAppDTO openAppDTO = new OpenAppDTO();\n        openAppDTO.setAppId(\"validAppId\");\n        appDTO.setApp(openAppDTO);\n        appDTO.setAssignAppRoleToSelf(true);\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(1L);\n\n        assertDoesNotThrow(() -> appController.createApp(appDTO, request));\n\n        verify(appOpenApiService, times(1)).createApp(appDTO);\n        verify(consumerService, times(1)).assignAppRoleToConsumer(1L, \"validAppId\");\n    }\n\n    @Test\n    public void createAppTest_withoutPermission_shouldThrowAccessDenied() {\n        when(consumerPermissionValidator.hasCreateApplicationPermission(any(HttpServletRequest.class)))\n            .thenThrow(new AccessDeniedException(\"Forbidden\"));\n\n        assertThrows(\n            ResponseStatusException.class,\n            () -> appController.createApp(appDTO, request),\n            \"Expected createApp to throw access denied, but it didn't\"\n        );\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.server.ResponseStatusException;\n\npublic class AppControllerTest {\n\n    // Mock dependencies since they are used within the createApp method\n    AppOpenApiService appOpenApiService = Mockito.mock(AppOpenApiService.class);\n    ConsumerAuthUtil consumerAuthUtil = Mockito.mock(ConsumerAuthUtil.class);\n    ConsumerService consumerService = Mockito.mock(ConsumerService.class);\n    ConsumerPermissionValidator consumerPermissionValidator = Mockito.mock(ConsumerPermissionValidator.class);\n    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n\n    // Object under test\n    AppController controller = new AppController(\n        appOpenApiService, consumerAuthUtil, consumerService, consumerPermissionValidator\n    );\n\n    @Test\n    public void createAppTest_NullApp_ShouldThrowBadRequestException() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(null);\n        \n        ResponseStatusException exception = assertThrows(\n            ResponseStatusException.class,\n            () -> controller.createApp(req, request)\n        );\n        \n        assertEquals(HttpStatus.BAD_REQUEST, exception.getStatus());\n        assertEquals(\"App is null\", exception.getReason());\n    }\n\n    @Test\n    public void createAppTest_NullAppId_ShouldThrowBadRequestException() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(null);\n        req.setApp(app);\n        \n        ResponseStatusException exception = assertThrows(\n            ResponseStatusException.class,\n            () -> controller.createApp(req, request)\n        );\n        \n        assertEquals(HttpStatus.BAD_REQUEST, exception.getStatus());\n        assertEquals(\"AppId is null\", exception.getReason());\n    }\n\n    @Test\n    public void createAppTest_ValidApp_ShouldCreateApp() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"123\");\n\n        req.setApp(app);\n        req.setAssignAppRoleToSelf(true);\n        \n        when(consumerAuthUtil.retrieveConsumerId(any(HttpServletRequest.class))).thenReturn(1L);\n        \n        assertDoesNotThrow(() -> controller.createApp(req, request));\n        \n        Mockito.verify(appOpenApiService).createApp(req);\n        Mockito.verify(consumerService).assignAppRoleToConsumer(1L, \"123\");\n    }\n    \n    // Other methods for setting up mocks, initializations, and cleaning up resources can be added here...\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\nimport javax.servlet.http.HttpServletRequest;\n\n@ExtendWith(MockitoExtension.class)\npublic class AppControllerTest {\n    \n    @InjectMocks\n    private AppController appController;\n    \n    @Mock\n    private AppOpenApiService appOpenApiService;\n    \n    @Mock\n    private ConsumerService consumerService;\n    \n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @Mock\n    private HttpServletRequest request;\n\n    @Test\n    public void createApp_shouldThrowBadRequest_whenAppIsNull() {\n        OpenCreateAppDTO dto = new OpenCreateAppDTO();\n        dto.setApp(null);\n\n        Exception exception = assertThrows(BadRequestException.class, () -> {\n            appController.createApp(dto, request);\n        });\n\n        assertEquals(\"App is null\", exception.getMessage());\n    }\n    \n    @Test\n    public void createApp_shouldThrowBadRequest_whenAppIdIsNull() {\n        OpenAppDTO app = new OpenAppDTO();\n        OpenCreateAppDTO dto = new OpenCreateAppDTO();\n        dto.setApp(app);\n\n        Exception exception = assertThrows(BadRequestException.class, () -> {\n            appController.createApp(dto, request);\n        });\n\n        assertEquals(\"AppId is null\", exception.getMessage());\n    }\n    \n    @Test\n    public void createApp_shouldSucceed_whenValidRequest() {\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"validAppId\");\n        OpenCreateAppDTO dto = new OpenCreateAppDTO();\n        dto.setApp(app);\n        \n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(42L);\n        dto.setAssignAppRoleToSelf(true);\n\n        // no exception expected, hence no assertThrows wrapper\n        appController.createApp(dto, request);\n\n        // verify interactions\n        verify(appOpenApiService, times(1)).createApp(dto);\n        verify(consumerService, times(1)).assignAppRoleToConsumer(42L, \"validAppId\");\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.server.ResponseStatusException;\nimport org.mockito.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\npublic class AppControllerTest {\n\n    @Mock\n    private OpenApiService appOpenApiService;\n\n    @Mock\n    private ConsumerService consumerService;\n\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @InjectMocks\n    private AppController appController;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void createAppTest_appIsNull_shouldThrowBadRequestException() {\n        // Arrange\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(null);\n        HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);\n\n        // Act & Assert\n        BadRequestException exception = assertThrows(\n                BadRequestException.class,\n                () -> appController.createApp(req, mockRequest),\n                \"Expected createApp to throw BadRequestException, but it didn't\"\n        );\n        assertTrue(exception.getMessage().contains(\"App is null\"));\n    }\n\n    @Test\n    public void createAppTest_appIdIsNull_shouldThrowBadRequestException() {\n        // Arrange\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(null);\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(app);\n        HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);\n\n        // Act & Assert\n        BadRequestException exception = assertThrows(\n                BadRequestException.class,\n                () -> appController.createApp(req, mockRequest),\n                \"Expected createApp to throw BadRequestException, but it didn't\"\n        );\n        assertTrue(exception.getMessage().contains(\"AppId is null\"));\n    }\n\n    @Test\n    public void createAppTest_validRequest_shouldCreateAppAndAssignRole() {\n        // Arrange\n        long sampleConsumerId = 12345L;\n        String appId = \"sample-app-id\";\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(appId);\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(app);\n        req.setAssignAppRoleToSelf(true);\n        HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);\n\n        Mockito.when(consumerAuthUtil.retrieveConsumerId(ArgumentMatchers.any(HttpServletRequest.class))).thenReturn(sampleConsumerId);\n        \n        // Act\n        appController.createApp(req, mockRequest);\n\n        // Assert\n        Mockito.verify(appOpenApiService, Mockito.times(1)).createApp(req);\n        Mockito.verify(consumerService, Mockito.times(1)).assignAppRoleToConsumer(sampleConsumerId, appId);\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.*;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport javax.servlet.http.HttpServletRequest;\n\npublic class AppControllerTest {\n\n    @InjectMocks\n    private AppController appController;\n\n    @Mock\n    private AppOpenApiService appOpenApiService;\n\n    @Mock\n    private ConsumerService consumerService;\n\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void createAppTest_shouldThrowBadRequestException_WhenAppIsNull() {\n        // Arrange\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(null); // set to null to simulate a bad request\n        HttpServletRequest request = new MockHttpServletRequest();\n\n        // Assert\n        BadRequestException exception = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(req, request),\n            \"Expected createApp to throw, but it didn't\"\n        );\n\n        assertTrue(exception.getMessage().contains(\"App is null\"));\n    }\n\n    @Test\n    public void createAppTest_shouldThrowBadRequestException_WhenAppIdIsNull() {\n        // Arrange\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(null); // set to null to simulate a bad request\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(app);\n        HttpServletRequest request = new MockHttpServletRequest();\n\n        // Assert\n        BadRequestException exception = assertThrows(\n            BadRequestException.class,\n            () -> appController.createApp(req, request),\n            \"Expected createApp to throw, but it didn't\"\n        );\n\n        assertTrue(exception.getMessage().contains(\"AppId is null\"));\n    }\n\n    // Additional test skeleton for successful creation and role assignment\n    @Test\n    public void createAppTest_shouldCreateAppAndAssignRole_WhenValidRequest() {\n        // Arrange\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"123\");\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(app);\n        req.setAssignAppRoleToSelf(true);\n        HttpServletRequest request = new MockHttpServletRequest();\n        \n        // Assume the mock returns a certain consumerId when retrieveConsumerId is called\n        Mockito.when(consumerAuthUtil.retrieveConsumerId(Mockito.any())).thenReturn(1L);\n        \n        // Act\n        appController.createApp(req, request);\n\n        // Assert\n        Mockito.verify(appOpenApiService).createApp(req);\n        Mockito.verify(consumerService).assignAppRoleToConsumer(1L, \"123\");\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass AppControllerTest {\n\n    @InjectMocks\n    private AppController appController;\n\n    @Mock\n    private AppOpenApiService appOpenApiService;\n\n    @Mock\n    private ConsumerService consumerService;\n\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @Mock\n    private HttpServletRequest request;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void createAppTest_whenAppIsNull_thenBadRequestException() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(null); // Set the app to null to trigger BadRequestException\n        \n        BadRequestException exception = assertThrows(BadRequestException.class, () -> {\n            appController.createApp(req, request);\n        });\n\n        assertEquals(\"App is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_whenAppIdIsNull_thenBadRequestException() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(null); // Set the appId to null to trigger BadRequestException\n        req.setApp(app);\n        \n        BadRequestException exception = assertThrows(BadRequestException.class, () -> {\n            appController.createApp(req, request);\n        });\n\n        assertEquals(\"AppId is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_whenValidApp_createsApp() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"app1\");\n        req.setApp(app);\n\n        doNothing().when(appOpenApiService).createApp(any(OpenCreateAppDTO.class));\n        when(consumerAuthUtil.retrieveConsumerId(any(HttpServletRequest.class))).thenReturn(123L);\n        doNothing().when(consumerService).assignAppRoleToConsumer(anyLong(), anyString());\n\n        assertDoesNotThrow(() -> appController.createApp(req, request));\n\n        verify(appOpenApiService, times(1)).createApp(req);\n    }\n\n    @Test\n    public void createAppTest_whenValidAppAndAssignRole_assignsRoleToConsumer() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"app1\");\n        req.setApp(app);\n        req.setAssignAppRoleToSelf(true);\n\n        doNothing().when(appOpenApiService).createApp(any(OpenCreateAppDTO.class));\n        when(consumerAuthUtil.retrieveConsumerId(any(HttpServletRequest.class))).thenReturn(123L);\n        doNothing().when(consumerService).assignAppRoleToConsumer(anyLong(), anyString());\n\n        appController.createApp(req, request);\n\n        verify(consumerService, times(1)).assignAppRoleToConsumer(123L, \"app1\");\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.mockito.Mockito.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class AppControllerTest {\n\n    @InjectMocks\n    private AppController appController;\n\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @Mock\n    private AppOpenApiService appOpenApiService;\n\n    @Mock\n    private ConsumerService consumerService;\n\n    @Mock\n    private HttpServletRequest request;\n\n    @Test\n    public void whenCreateAppWithNullApp_shouldThrowBadRequest() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        Exception exception = assertThrows(BadRequestException.class, () -> {\n            appController.createApp(req, request);\n        });\n\n        assertEquals(\"App is null\", exception.getMessage());\n    }\n\n    @Test\n    public void whenCreateAppWithNullAppId_shouldThrowBadRequest() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        req.setApp(new OpenAppDTO());\n\n        Exception exception = assertThrows(BadRequestException.class, () -> {\n            appController.createApp(req, request);\n        });\n\n        assertEquals(\"AppId is null\", exception.getMessage());\n    }\n\n    @Test\n    public void whenCreateApp_withValidRequest_shouldCallCreateAppService() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"123\");\n        req.setApp(app);\n        req.setAssignAppRoleToSelf(true);\n        long consumerId = 1L;\n\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(consumerId);\n\n        appController.createApp(req, request);\n\n        verify(appOpenApiService, times(1)).createApp(req);\n        verify(consumerService, times(1)).assignAppRoleToConsumer(consumerId, app.getAppId());\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport static org.mockito.BDDMockito.*;\nimport javax.servlet.http.HttpServletRequest;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.PostMapping;\n\npublic class AppControllerTest {\n\n    private AppController controller;\n    private OpenCreateAppDTO req;\n    private HttpServletRequest request;\n    \n    // Mocked services and utilities\n    @Mock\n    private AppOpenApiService appOpenApiService;\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n    @Mock\n    private ConsumerService consumerService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        controller = new AppController(appOpenApiService, consumerAuthUtil, consumerService);\n        req = Mockito.mock(OpenCreateAppDTO.class);\n        request = Mockito.mock(HttpServletRequest.class);\n    }\n\n    @Test\n    public void createAppTest_ThrowsBadRequestWhenAppIsNull() {\n        // Arrange\n        given(req.getApp()).willReturn(null);\n\n        // Act and Assert\n        BadRequestException exception = assertThrows(BadRequestException.class,\n            () -> controller.createApp(req, request));\n        assertEquals(\"App is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_ThrowsBadRequestWhenAppIdIsNull() {\n        // Arrange\n        OpenAppDTO appDto = Mockito.mock(OpenAppDTO.class);\n        given(req.getApp()).willReturn(appDto);\n\n        // Act and Assert\n        BadRequestException exception = assertThrows(BadRequestException.class,\n            () -> controller.createApp(req, request));\n        assertEquals(\"AppId is null\", exception.getMessage());\n    }\n\n    @Test\n    public void createAppTest_SuccessfulCreation() {\n        // Arrange\n        OpenAppDTO appDto = new OpenAppDTO();\n        appDto.setAppId(\"unique-app-id\");\n        given(req.getApp()).willReturn(appDto);\n        given(req.isAssignAppRoleToSelf()).willReturn(true);\n        given(consumerAuthUtil.retrieveConsumerId(request)).willReturn(1L);\n\n        // Act\n        assertDoesNotThrow(() -> controller.createApp(req, request));\n\n        // Assert\n        then(appOpenApiService).should().createApp(req);\n        then(consumerService).should().assignAppRoleToConsumer(1L, \"unique-app-id\");\n    }\n}"
    ]
}