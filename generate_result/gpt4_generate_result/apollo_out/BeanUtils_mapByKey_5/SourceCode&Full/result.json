{
    "project_name": "apollo",
    "file_name": "BeanUtils.java",
    "relative_path": "apollo/apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/BeanUtils.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.common.utils",
    "docstring": "/**\n   * \u7528\u4e8e\u5c06\u4e00\u4e2a\u5217\u8868\u8f6c\u6362\u4e3a\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\u7684\u67d0\u4e2a\u5c5e\u6027\u6620\u5c04\u5230\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\n   *\n   * <pre>\n   *      List<UserDTO> userList = userService.queryUsers();\n   *      Map<Integer, userDTO> userIdToUser = BeanUtil.mapByKey(\"userId\", userList);\n   * </pre>\n   *\n   * @param key \u5c5e\u6027\u540d\n   */",
    "source_code": "\n@SuppressWarnings(\"unchecked\")\npublic static <K, V> Map<K, V> mapByKey(String key, List<?> list) {\n  Map<K, V> map = new HashMap<>();\n  if (CollectionUtils.isEmpty(list)) {\n    return map;\n  }\n  try {\n    Class<?> clazz = list.get(0).getClass();\n    Field field = deepFindField(clazz, key);\n    if (field == null) {\n        throw new IllegalArgumentException(\"Could not find the key\");\n    }\n    field.setAccessible(true);\n    for (Object o : list) {\n      map.put((K) field.get(o), (V) o);\n    }\n  } catch (Exception e) {\n    throw new BeanUtilsException(e);\n  }\n  return map;\n}\n",
    "class_name": "BeanUtils",
    "method_name": "mapByKey",
    "arguments": [
        "String key",
        "List<> list"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.Test;\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass BeanUtilsTest {\n\n    private static class UserDTO {\n        private Integer userId;\n        private String username;\n        \n        public UserDTO() {\n        }\n        \n        public UserDTO(Integer userId, String username) {\n            this.userId = userId;\n            this.username = username;\n        }\n\n        public Integer getUserId() {\n            return userId;\n        }\n\n        public void setUserId(Integer userId) {\n            this.userId = userId;\n        }\n\n        public String getUsername() {\n            return username;\n        }\n\n        public void setUsername(String username) {\n            this.username = username;\n        }\n    }\n    \n    @Test\n    public void mapByKeyTest() {\n        // Prepare test objects\n        List<UserDTO> userList = new ArrayList<>();\n        userList.add(new UserDTO(1, \"John\"));\n        userList.add(new UserDTO(2, \"Jane\"));\n        userList.add(new UserDTO(3, \"Doe\"));\n\n        // Test for valid key\n        Map<Integer, UserDTO> userIdToUser = BeanUtils.mapByKey(\"userId\", userList);\n        assertNotNull(userIdToUser, \"Map should not be null\");\n        assertEquals(3, userIdToUser.size(), \"Map should have 3 entries\");\n        assertTrue(userIdToUser.containsKey(1), \"Map should contain key 1\");\n        assertTrue(userIdToUser.containsKey(2), \"Map should contain key 2\");\n        assertTrue(userIdToUser.containsKey(3), \"Map should contain key 3\");\n\n        // Test for user object retrieval\n        UserDTO user = userIdToUser.get(1);\n        assertNotNull(user, \"User should not be null\");\n        assertEquals(\"John\", user.getUsername(), \"Username should be John\");\n\n        // Test for invalid key\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"nonExistingKey\", userList);\n        }, \"Expected IllegalArgumentException for non-existing key\");\n\n        assertEquals(\"Could not find the key\", exception.getMessage(), \"Exception message should match\");\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class BeanUtilsTest {\n\n    public static class UserDTO {\n        private Integer userId;\n        private String userName;\n\n        public UserDTO(Integer userId, String userName) {\n            this.userId = userId;\n            this.userName = userName;\n        }\n\n        public Integer getUserId() {\n            return userId;\n        }\n\n        public void setUserId(Integer userId) {\n            this.userId = userId;\n        }\n\n        public String getUserName() {\n            return userName;\n        }\n\n        public void setUserName(String userName) {\n            this.userName = userName;\n        }\n    }\n\n    @Test\n    public void mapByKeyTest() {\n        // Set up test objects\n        List<UserDTO> userList = new ArrayList<>();\n        userList.add(new UserDTO(1, \"Alice\"));\n        userList.add(new UserDTO(2, \"Bob\"));\n        userList.add(new UserDTO(3, \"Charlie\"));\n\n        // Invoke the method to test\n        Map<Integer, UserDTO> result = BeanUtils.mapByKey(\"userId\", userList);\n\n        // Assert the results\n        assertEquals(3, result.size(), \"Map should contain 3 entries\");\n        assertEquals(\"Alice\", result.get(1).getUserName(), \"User with ID 1 should be Alice\");\n        assertEquals(\"Bob\", result.get(2).getUserName(), \"User with ID 2 should be Bob\");\n        assertEquals(\"Charlie\", result.get(3).getUserName(), \"User with ID 3 should be Charlie\");\n        assertTrue(result.keySet().containsAll(List.of(1, 2, 3)), \"Resulting map keys should match the user IDs\");\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.lang.reflect.Field;\nimport java.util.*;\n\nclass BeanUtilsTest {\n\n    static class MockBean {\n        private String id;\n        private String value;\n        \n        MockBean(String id, String value) {\n            this.id = id;\n            this.value = value;\n        }\n        \n        public String getId() {\n            return id;\n        }\n        \n        public String getValue() {\n            return value;\n        }\n    }\n\n    @Test\n    public void mapByKeyTest() {\n        // Prepare test data\n        List<MockBean> list = new ArrayList<>();\n        list.add(new MockBean(\"1\", \"value1\"));\n        list.add(new MockBean(\"2\", \"value2\"));\n        list.add(new MockBean(\"3\", \"value3\"));\n        \n        // Execute the method under test\n        Map<String, MockBean> resultMap = BeanUtils.mapByKey(\"id\", list);\n        \n        // Assertions\n        Assertions.assertNotNull(resultMap, \"The map should not be null\");\n        Assertions.assertEquals(3, resultMap.size(), \"The map size should be 3\");\n        \n        // Used try-catch to cover the potential IllegalArgumentException which means key not found\n        try {\n            MockBean bean1 = resultMap.get(\"1\");\n            Assertions.assertNotNull(bean1, \"Bean with id '1' should not be null\");\n            Assertions.assertEquals(\"1\", bean1.getId(), \"The id of bean1 should be '1'\");\n            Assertions.assertEquals(\"value1\", bean1.getValue(), \"The value of bean1 should be 'value1'\");\n            \n            MockBean bean2 = resultMap.get(\"2\");\n            Assertions.assertNotNull(bean2, \"Bean with id '2' should not be null\");\n            Assertions.assertEquals(\"2\", bean2.getId(), \"The id of bean2 should be '2'\");\n            Assertions.assertEquals(\"value2\", bean2.getValue(), \"The value of bean2 should be 'value2'\");\n            \n            MockBean bean3 = resultMap.get(\"3\");\n            Assertions.assertNotNull(bean3, \"Bean with id '3' should not be null\");\n            Assertions.assertEquals(\"3\", bean3.getId(), \"The id of bean3 should be '3'\");\n            Assertions.assertEquals(\"value3\", bean3.getValue(), \"The value of bean3 should be 'value3'\");\n            \n            // Test for the case when the key does not exist\n            Assertions.assertThrows(IllegalArgumentException.class, () -> {\n                BeanUtils.mapByKey(\"nonExistingKey\", list);\n            }, \"Should throw IllegalArgumentException as the key does not exist\");\n        } catch (IllegalArgumentException e) {\n            Assertions.fail(\"Should not throw an exception when the key exists\");\n        }\n        \n        // Test for the case when the input list is null or empty\n        Map<String, MockBean> emptyMap = BeanUtils.mapByKey(\"id\", null);\n        Assertions.assertTrue(emptyMap.isEmpty(), \"The map should be empty if the input list is null\");\n        \n        Map<String, MockBean> emptyMapFromEmptyList = BeanUtils.mapByKey(\"id\", Collections.emptyList());\n        Assertions.assertTrue(emptyMapFromEmptyList.isEmpty(), \"The map should be empty if the input list is empty\");\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nclass TestObject {\n    private String key;\n    private int value;\n\n    public TestObject(String key, int value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    public String getKey() {\n        return key;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n\npublic class BeanUtilsTest {\n\n    @Test\n    public void mapByKeyWithValidKeyTest() {\n        // Arrange\n        List<TestObject> list = Arrays.asList(new TestObject(\"a\", 1), new TestObject(\"b\", 2), new TestObject(\"c\", 3));\n        String key = \"key\";\n        \n        // Act\n        Map<String, TestObject> result = BeanUtils.mapByKey(key, list);\n\n        // Assert\n        assertNotNull(result, \"Resulting map should not be null.\");\n        assertEquals(3, result.size(), \"Map should contain 3 entries.\");\n        assertEquals(list.get(0), result.get(\"a\"), \"List item with key 'a' should be in the map.\");\n        assertEquals(list.get(1), result.get(\"b\"), \"List item with key 'b' should be in the map.\");\n        assertEquals(list.get(2), result.get(\"c\"), \"List item with key 'c' should be in the map.\");\n    }\n\n    @Test\n    public void mapByKeyWithInvalidKeyTest() {\n        // Arrange\n        List<TestObject> list = Arrays.asList(new TestObject(\"a\", 1), new TestObject(\"b\", 2), new TestObject(\"c\", 3));\n        String key = \"nonExistingKey\";\n        \n        // Act and Assert\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(key, list);\n        });\n        \n        assertEquals(\"Could not find the key\", exception.getMessage(), \"Exception should be thrown if key does not exist.\");\n    }\n\n    @Test\n    public void mapByKeyWithEmptyListTest() {\n        // Arrange\n        List<TestObject> list = Arrays.asList();\n        String key = \"key\";\n        \n        // Act\n        Map<String, TestObject> result = BeanUtils.mapByKey(key, list);\n\n        // Assert\n        assertTrue(result.isEmpty(), \"Resulting map should be empty.\");\n    }\n\n    @Test\n    public void mapByKeyWithNullListTest() {\n        // Arrange\n        List<TestObject> list = null;\n        String key = \"key\";\n        \n        // Act\n        Map<String, TestObject> result = BeanUtils.mapByKey(key, list);\n\n        // Assert\n        assertTrue(result.isEmpty(), \"Resulting map should be empty for null input list.\");\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.lang.reflect.Field;\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass TestEntity {\n  private String id;\n  private String value;\n\n  public TestEntity(String id, String value) {\n    this.id = id;\n    this.value = value;\n  }\n}\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Given a list with test entities\n        List<TestEntity> list = new ArrayList<>();\n        list.add(new TestEntity(\"1\", \"Value1\"));\n        list.add(new TestEntity(\"2\", \"Value2\"));\n        list.add(new TestEntity(\"3\", \"Value3\"));\n\n        // When we map by key \"id\"\n        Map<String, TestEntity> result = BeanUtils.mapByKey(\"id\", list);\n\n        // Then the map should contain all entities, indexed by their \"id\" field\n        assertNotNull(result);\n        assertEquals(3, result.size());\n\n        assertTrue(result.containsKey(\"1\"));\n        assertSame(list.get(0), result.get(\"1\"));\n\n        assertTrue(result.containsKey(\"2\"));\n        assertSame(list.get(1), result.get(\"2\"));\n\n        assertTrue(result.containsKey(\"3\"));\n        assertSame(list.get(2), result.get(\"3\"));\n    }\n\n    @Test\n    public void mapByKeyWithEmptyListTest() {\n        // Given an empty list\n        List<TestEntity> list = Collections.emptyList();\n\n        // When we map by any key\n        Map<String, TestEntity> result = BeanUtils.mapByKey(\"id\", list);\n\n        // Then the result should be an empty map\n        assertTrue(result.isEmpty());\n    }\n\n    @Test\n    public void mapByKeyWithInvalidKeyTest() {\n        // Given a list with one test entity\n        List<TestEntity> list = Collections.singletonList(new TestEntity(\"1\", \"Value1\"));\n\n        // When we try to map by a non-existing key, we expect an exception\n        assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"nonExistingKey\", list);\n        });\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n\n    static class UserBean {\n        private int userId;\n        private String username;\n\n        public UserBean(int userId, String username) {\n            this.userId = userId;\n            this.username = username;\n        }\n\n        public int getUserId() {\n            return userId;\n        }\n\n        public String getUsername() {\n            return username;\n        }\n    }\n\n    @Test\n    public void mapByKeyTest() {\n        // Prepare a list of UserBean objects\n        List<UserBean> userList = Arrays.asList(\n            new UserBean(1, \"Alice\"),\n            new UserBean(2, \"Bob\"),\n            new UserBean(3, \"Charlie\")\n        );\n\n        Map<Integer, UserBean> userIdToUserMap = BeanUtils.mapByKey(\"userId\", userList);\n\n        // Assertions to verify the returned map\n        assertNotNull(userIdToUserMap, \"The map should not be null.\");\n        assertEquals(3, userIdToUserMap.size(), \"The map size should be 3.\");\n\n        // Asserting that the keys and values are correct based on the userId field\n        assertEquals(\"Alice\", userIdToUserMap.get(1).getUsername(), \"The username for userId 1 should be Alice.\");\n        assertEquals(\"Bob\", userIdToUserMap.get(2).getUsername(), \"The username for userId 2 should be Bob.\");\n        assertEquals(\"Charlie\", userIdToUserMap.get(3).getUsername(), \"The username for userId 3 should be Charlie.\");\n\n        // Test with an empty list\n        List<UserBean> emptyUserList = Arrays.asList();\n        Map<Integer, UserBean> emptyMap = BeanUtils.mapByKey(\"userId\", emptyUserList);\n\n        // Assert that an empty list returns an empty map\n        assertNotNull(emptyMap, \"The map should not be null even for an empty list.\");\n        assertTrue(emptyMap.isEmpty(), \"The map should be empty when provided an empty list.\");\n\n        // Test for exception handling by passing a key that doesn't exist\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"nonExistentKey\", userList);\n        });\n\n        assertEquals(\"Could not find the key\", exception.getMessage(), \"Exception message should match for non-existent key.\");\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Arrays;\n\nclass UserDTO {\n    private Integer userId;\n    private String name;\n\n    UserDTO(Integer userId, String name) {\n        this.userId = userId;\n        this.name = name;\n    }\n\n    public Integer getUserId() {\n        return userId;\n    }\n\n    public void setUserId(Integer userId) {\n        this.userId = userId;\n    }\n\n    // Assume other getters and setters are here as well\n}\n\npublic class BeanUtilsTest {\n\n    @Test\n    public void mapByKeyTest() {\n        List<UserDTO> userList = Arrays.asList(\n                new UserDTO(1, \"Alice\"),\n                new UserDTO(2, \"Bob\"),\n                new UserDTO(3, \"Charlie\")\n        );\n\n        Map<Integer, UserDTO> result = BeanUtils.mapByKey(\"userId\", userList);\n\n        assertEquals(3, result.size(), \"The size of the resulting map should be equal to the size of the input list.\");\n        \n        assertTrue(result.containsKey(1), \"The resulting map should contain the key for user ID 1.\");\n        assertTrue(result.containsKey(2), \"The resulting map should contain the key for user ID 2.\");\n        assertTrue(result.containsKey(3), \"The resulting map should contain the key for user ID 3.\");\n\n        assertEquals(\"Alice\", result.get(1).name, \"The value for key 1 should have the name Alice.\");\n        assertEquals(\"Bob\", result.get(2).name, \"The value for key 2 should have the name Bob.\");\n        assertEquals(\"Charlie\", result.get(3).name, \"The value for key 3 should have the name Charlie.\");\n\n        // Test for an empty list\n        List<UserDTO> emptyList = Arrays.asList();\n        Map<Integer, UserDTO> emptyResult = BeanUtils.mapByKey(\"userId\", emptyList);\n        \n        assertTrue(emptyResult.isEmpty(), \"The resulting map should be empty when provided with an empty input list.\");\n\n        // Test for a non-existent key\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"nonExistentKey\", userList);\n        });\n\n        assertEquals(\"Could not find the key\", exception.getMessage(), \"An IllegalArgumentException should be thrown if the key does not exist.\");\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport java.lang.reflect.Field;\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass User {\n    private String userId;\n    private String username;\n\n    public User(String userId, String username) {\n        this.userId = userId;\n        this.username = username;\n    }\n\n    public String getUserId() {\n        return userId;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n}\n\npublic class BeanUtilsTest {\n\n    @Test\n    public void mapByKeyTest() {\n        // Prepare test data\n        List<User> users = Arrays.asList(\n                new User(\"1\", \"Alice\"),\n                new User(\"2\", \"Bob\"),\n                new User(\"3\", \"Charlie\")\n        );\n\n        // Call the method to be tested\n        Map<String, User> result = BeanUtils.mapByKey(\"userId\", users);\n\n        // Verify results\n        assertNotNull(result, \"Resulting map should not be null\");\n        assertEquals(3, result.size(), \"Map size should be equal to the number of users\");\n        \n        // Verify that each user is correctly mapped\n        assertSame(users.get(0), result.get(\"1\"), \"User with userId '1' should be Alice\");\n        assertSame(users.get(1), result.get(\"2\"), \"User with userId '2' should be Bob\");\n        assertSame(users.get(2), result.get(\"3\"), \"User with userId '3' should be Charlie\");\n        \n        // Test with an empty list\n        List<User> emptyList = Collections.emptyList();\n        Map<String, User> resultWithEmptyList = BeanUtils.mapByKey(\"userId\", emptyList);\n        assertTrue(resultWithEmptyList.isEmpty(), \"Map should be empty when input list is empty\");\n        \n        // Test with null key\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n           BeanUtils.mapByKey(\"nonExistingKey\", users);\n        });\n        assertEquals(\"Could not find the key\", exception.getMessage(), \"Exception message should match expected message for non-existing key\");\n        \n        // Test with null list\n        Map<String, User> resultWithNullList = BeanUtils.mapByKey(\"userId\", null);\n        assertTrue(resultWithNullList.isEmpty(), \"Resulting map should be empty when input list is null\");\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\npublic class BeanUtilsTest {\n\n    private static class TestObject {\n        private String id;\n        private String value;\n\n        public TestObject(String id, String value) {\n            this.id = id;\n            this.value = value;\n        }\n\n        // Getters and setters for id and value if not using public fields directly\n        public String getId() {\n            return id;\n        }\n\n        public void setId(String id) {\n            this.id = id;\n        }\n\n        public String getValue() {\n            return value;\n        }\n\n        public void setValue(String value) {\n            this.value = value;\n        }\n    }\n\n    @Test\n    public void mapByKeyTest() {\n        // prepare list of TestObjects\n        List<TestObject> list = Arrays.asList(\n            new TestObject(\"1\", \"value1\"),\n            new TestObject(\"2\", \"value2\"),\n            new TestObject(\"3\", \"value3\")\n        );\n\n        // invoke mapByKey\n        Map<String, TestObject> resultMap = BeanUtils.mapByKey(\"id\", list);\n\n        // assert map size\n        assertEquals(3, resultMap.size());\n\n        // assert map content\n        assertEquals(\"value1\", resultMap.get(\"1\").getValue());\n        assertEquals(\"value2\", resultMap.get(\"2\").getValue());\n        assertEquals(\"value3\", resultMap.get(\"3\").getValue());\n\n        // Testing with non-existing key\n        IllegalArgumentException thrown = assertThrows(\n            IllegalArgumentException.class,\n            () -> BeanUtils.mapByKey(\"nonExistingKey\", list),\n            \"Expected mapByKey to throw, but it didn't\"\n        );\n\n        assertTrue(thrown.getMessage().contains(\"Could not find the key\"));\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\nclass Dummy {\n    private String id;\n    private String value;\n\n    public Dummy(String id, String value) {\n        this.id = id;\n        this.value = value;\n    }\n\n    // Getters and setters are not necessary for the reflection used in the tested method\n}\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Prepare a list of dummy objects\n        List<Dummy> dummyList = Arrays.asList(\n            new Dummy(\"1\", \"Value1\"),\n            new Dummy(\"2\", \"Value2\"),\n            new Dummy(\"3\", \"Value3\")\n        );\n\n        // Testing the success scenario\n        Map<String, Dummy> resultMap = BeanUtils.mapByKey(\"id\", dummyList);\n        assertNotNull(resultMap, \"The result map should not be null\");\n        assertEquals(3, resultMap.size(), \"The result map should contain 3 entries\");\n        assertEquals(dummyList.get(0), resultMap.get(\"1\"), \"The map should contain the correct object for key '1'\");\n        assertEquals(dummyList.get(1), resultMap.get(\"2\"), \"The map should contain the correct object for key '2'\");\n        assertEquals(dummyList.get(2), resultMap.get(\"3\"), \"The map should contain the correct object for key '3'\");\n\n        // Testing the exception scenario for inexistent key\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"nonexistentKey\", dummyList);\n        });\n        assertEquals(\"Could not find the key\", exception.getMessage(), \"The expected exception message does not match\");\n\n        // Testing the scenario with an empty list\n        List<Dummy> emptyList = Arrays.asList();\n        Map<String, Dummy> resultMapEmpty = BeanUtils.mapByKey(\"id\", emptyList);\n        assertTrue(resultMapEmpty.isEmpty(), \"The result map should be empty for an empty input list\");\n    }\n}"
    ]
}