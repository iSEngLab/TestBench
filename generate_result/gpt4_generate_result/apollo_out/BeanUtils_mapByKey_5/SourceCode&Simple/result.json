{
    "project_name": "apollo",
    "file_name": "BeanUtils.java",
    "relative_path": "apollo/apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/BeanUtils.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.common.utils",
    "docstring": "/**\n   * \u7528\u4e8e\u5c06\u4e00\u4e2a\u5217\u8868\u8f6c\u6362\u4e3a\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\u7684\u67d0\u4e2a\u5c5e\u6027\u6620\u5c04\u5230\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\n   *\n   * <pre>\n   *      List<UserDTO> userList = userService.queryUsers();\n   *      Map<Integer, userDTO> userIdToUser = BeanUtil.mapByKey(\"userId\", userList);\n   * </pre>\n   *\n   * @param key \u5c5e\u6027\u540d\n   */",
    "source_code": "\n@SuppressWarnings(\"unchecked\")\npublic static <K, V> Map<K, V> mapByKey(String key, List<?> list) {\n  Map<K, V> map = new HashMap<>();\n  if (CollectionUtils.isEmpty(list)) {\n    return map;\n  }\n  try {\n    Class<?> clazz = list.get(0).getClass();\n    Field field = deepFindField(clazz, key);\n    if (field == null) {\n        throw new IllegalArgumentException(\"Could not find the key\");\n    }\n    field.setAccessible(true);\n    for (Object o : list) {\n      map.put((K) field.get(o), (V) o);\n    }\n  } catch (Exception e) {\n    throw new BeanUtilsException(e);\n  }\n  return map;\n}\n",
    "class_name": "BeanUtils",
    "method_name": "mapByKey",
    "arguments": [
        "String key",
        "List<> list"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport java.lang.reflect.Field;\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class BeanUtilsTest {\n\n    private static class TestClass {\n        private String id;\n        private String value;\n\n        public TestClass(String id, String value) {\n            this.id = id;\n            this.value = value;\n        }\n    }\n\n    private List<TestClass> testList;\n    \n    @BeforeEach\n    public void setUp() {\n        testList = new ArrayList<>();\n        testList.add(new TestClass(\"key1\", \"value1\"));\n        testList.add(new TestClass(\"key2\", \"value2\"));\n    }\n\n    @Test\n    public void mapByKeyTest() {\n        // Testing if the map is created correctly\n        Map<String, TestClass> map = BeanUtils.mapByKey(\"id\", testList);\n        assertNotNull(map);\n        assertEquals(2, map.size());\n        assertSame(testList.get(0), map.get(\"key1\"));\n        assertSame(testList.get(1), map.get(\"key2\"));\n        \n        // Testing for an empty list\n        List<TestClass> emptyList = Collections.emptyList();\n        assertTrue(BeanUtils.mapByKey(\"id\", emptyList).isEmpty());\n        \n        // Testing for null input\n        assertThrows(IllegalArgumentException.class, () -> BeanUtils.mapByKey(\"id\", null));\n\n        // Testing for a non-existing key\n        assertThrows(IllegalArgumentException.class, () -> BeanUtils.mapByKey(\"nonExistingKey\", testList));\n\n        // Optionally: Testing for a private or protected field can be done if the class is accordingly designed\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n\n    private static class TestData {\n        private String id;\n        private String value;\n\n        public TestData(String id, String value) {\n            this.id = id;\n            this.value = value;\n        }\n\n        public String getId() {\n            return id;\n        }\n\n        public void setId(String id) {\n            this.id = id;\n        }\n\n        public String getValue() {\n            return value;\n        }\n\n        public void setValue(String value) {\n            this.value = value;\n        }\n    }\n\n    @Test\n    public void mapByKeyTest() {\n        // Create a list of test objects\n        List<TestData> dataList = new ArrayList<>();\n        dataList.add(new TestData(\"1\", \"Test1\"));\n        dataList.add(new TestData(\"2\", \"Test2\"));\n        dataList.add(new TestData(\"3\", \"Test3\"));\n\n        // Case 1: Test mapping by a valid key\n        Map<String, TestData> result = BeanUtils.mapByKey(\"id\", dataList);\n        assertEquals(3, result.size(), \"The size of the result map should be 3\");\n        assertTrue(result.containsKey(\"1\"), \"The map should contain the key '1'\");\n        assertTrue(result.containsKey(\"2\"), \"The map should contain the key '2'\");\n        assertTrue(result.containsKey(\"3\"), \"The map should contain the key '3'\");\n        assertEquals(\"Test1\", result.get(\"1\").getValue(), \"The value associated with key '1' should be 'Test1'\");\n        \n        // Case 2: Test mapping with an empty list\n        List<TestData> emptyList = new ArrayList<>();\n        Map<String, TestData> emptyResult = BeanUtils.mapByKey(\"id\", emptyList);\n        assertTrue(emptyResult.isEmpty(), \"The result map should be empty\");\n\n        // Case 3: Test mapping by an invalid key\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"nonExistentKey\", dataList);\n        }, \"An IllegalArgumentException should be thrown if the key does not exist\");\n\n        // Case 4: Test mapping with null list\n        Map<String, TestData> nullResult = BeanUtils.mapByKey(\"id\", null);\n        assertTrue(nullResult.isEmpty(), \"The result map should be empty when the input list is null\");\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\npublic class BeanUtilsTest {\n\n    private static class SampleObject {\n        private String id;\n        private String value;\n\n        public SampleObject(String id, String value) {\n            this.id = id;\n            this.value = value;\n        }\n        \n        public String getId() {\n            return id;\n        }\n\n        // Other getters and setters for the properties if needed\n    }\n\n    @Test\n    public void mapByKeyTest() {\n        // Create a list of sample objects\n        List<SampleObject> sampleList = Arrays.asList(\n            new SampleObject(\"1\", \"First\"),\n            new SampleObject(\"2\", \"Second\"),\n            new SampleObject(\"3\", \"Third\")\n        );\n\n        // Call the method under test\n        Map<String, SampleObject> result = BeanUtils.mapByKey(\"id\", sampleList);\n\n        // Verify the size of the resulting map\n        assertEquals(3, result.size(), \"Map should contain 3 elements\");\n\n        // Verify that keys and values are correctly mapped\n        for (SampleObject obj : sampleList) {\n            assertTrue(result.containsKey(obj.getId()), \"Map should contain the key \" + obj.getId());\n            assertEquals(obj, result.get(obj.getId()), \"Value should be mapped to the key \" + obj.getId());\n        }\n        \n        // Verify behavior with empty list\n        assertTrue(BeanUtils.mapByKey(\"id\", Collections.emptyList()).isEmpty(), \"Map should be empty when given an empty list\");\n\n        // Verify IllegalArgumentException is thrown with a null list\n        assertThrows(IllegalArgumentException.class, () -> BeanUtils.mapByKey(\"id\", null), \"Should throw an IllegalArgumentException for null list\");\n        \n        // Verify exception is thrown with a non-existing key\n        assertThrows(IllegalArgumentException.class, () -> BeanUtils.mapByKey(\"nonExistingKey\", sampleList), \"Should throw an IllegalArgumentException for a non-existing key\");\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass ExampleObject {\n    private String key;\n    private Integer value;\n    \n    public ExampleObject(String key, Integer value) {\n        this.key = key;\n        this.value = value;\n    }\n    \n    // Getter and setters as needed\n    public String getKey() {\n        return key;\n    }\n    \n    public Integer getValue() {\n        return value;\n    }\n}\n\npublic class BeanUtilsTest {\n\n    @Test\n    public void mapByKeyTest() {\n        // Create a list of example objects\n        List<ExampleObject> exampleList = new ArrayList<>();\n        exampleList.add(new ExampleObject(\"key1\", 1));\n        exampleList.add(new ExampleObject(\"key2\", 2));\n        exampleList.add(new ExampleObject(\"key3\", 3));\n\n        // Call mapByKey method\n        Map<String, ExampleObject> resultMap = BeanUtils.mapByKey(\"key\", exampleList);\n\n        // Assert that the resultMap is not null and has the correct size\n        assertNotNull(resultMap, \"The resulting map should not be null.\");\n        assertEquals(3, resultMap.size(), \"The resulting map should have 3 entries.\");\n\n        // Assert that the map contains all keys from the example list\n        assertTrue(resultMap.containsKey(\"key1\"), \"Resulting map should contain key 'key1'.\");\n        assertTrue(resultMap.containsKey(\"key2\"), \"Resulting map should contain key 'key2'.\");\n        assertTrue(resultMap.containsKey(\"key3\"), \"Resulting map should contain key 'key3'.\");\n\n        // Assert that the map values match the objects from the list\n        assertEquals(exampleList.get(0), resultMap.get(\"key1\"), \"Map should map 'key1' to the first example object.\");\n        assertEquals(exampleList.get(1), resultMap.get(\"key2\"), \"Map should map 'key2' to the second example object.\");\n        assertEquals(exampleList.get(2), resultMap.get(\"key3\"), \"Map should map 'key3' to the third example object.\");\n\n        // Test with an empty list\n        List<ExampleObject> emptyList = new ArrayList<>();\n        Map<String, ExampleObject> emptyResultMap = BeanUtils.mapByKey(\"key\", emptyList);\n        assertTrue(emptyResultMap.isEmpty(), \"Resulting map from an empty list should be empty.\");\n\n        // Test with invalid key, expect an exception\n        final List<ExampleObject> finalList = exampleList;\n        assertThrows(IllegalArgumentException.class,\n            () -> { BeanUtils.mapByKey(\"nonExistentKey\", finalList); },\n            \"An IllegalArgumentException should be thrown when the key doesn't exist in the class.\");\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\nclass Item {\n    private String id;\n    private String value;\n\n    public Item(String id, String value) {\n        this.id = id;\n        this.value = value;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getValue() {\n        return value;\n    }\n}\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Arrange\n        List<Item> itemList = Arrays.asList(new Item(\"1\", \"One\"), new Item(\"2\", \"Two\"), new Item(\"3\", \"Three\"));\n        String key = \"id\"; // Field to use as map key\n\n        // Act\n        Map<String, Item> resultMap = BeanUtils.mapByKey(key, itemList);\n\n        // Assert\n        assertNotNull(resultMap);\n        assertEquals(3, resultMap.size());\n        assertTrue(resultMap.containsKey(\"1\"));\n        assertTrue(resultMap.containsKey(\"2\"));\n        assertTrue(resultMap.containsKey(\"3\"));\n        assertEquals(\"One\", resultMap.get(\"1\").getValue());\n        assertEquals(\"Two\", resultMap.get(\"2\").getValue());\n        assertEquals(\"Three\", resultMap.get(\"3\").getValue());\n    }\n\n    @Test\n    public void mapByKeyTestWithEmptyList() {\n        // Arrange\n        List<Item> itemList = Arrays.asList();\n        String key = \"id\";\n\n        // Act\n        Map<String, Item> resultMap = BeanUtils.mapByKey(key, itemList);\n\n        // Assert\n        assertNotNull(resultMap);\n        assertTrue(resultMap.isEmpty());\n    }\n\n    @Test\n    public void mapByKeyTestWithInvalidKey() {\n        // Arrange\n        List<Item> itemList = Arrays.asList(new Item(\"1\", \"One\"));\n        String key = \"nonExistentKey\";\n\n        // Act / Assert\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(key, itemList);\n        });\n        assertEquals(\"Could not find the key\", exception.getMessage());\n    }\n\n    @Test\n    public void mapByKeyTestWithNullList() {\n        // Arrange\n        String key = \"id\";\n\n        // Act\n        Map<String, Item> resultMap = BeanUtils.mapByKey(key, null);\n\n        // Assert\n        assertNotNull(resultMap);\n        assertTrue(resultMap.isEmpty());\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\npublic class BeanUtilsTest {\n\n    private static class TestEntity {\n        private String id;\n        private String value;\n\n        public TestEntity(String id, String value) {\n            this.id = id;\n            this.value = value;\n        }\n\n        public String getId() {\n            return id;\n        }\n\n        public String getValue() {\n            return value;\n        }\n    }\n\n    @Test\n    public void mapByKeyTest() {\n        // Set up test data\n        List<TestEntity> entityList = Arrays.asList(\n            new TestEntity(\"1\", \"value1\"),\n            new TestEntity(\"2\", \"value2\"),\n            new TestEntity(\"3\", \"value3\")\n        );\n\n        // Invoke method\n        Map<String, TestEntity> result = BeanUtils.mapByKey(\"id\", entityList);\n\n        // Verify that the result map is constructed correctly\n        assertNotNull(result, \"The result should not be null.\");\n        assertEquals(3, result.size(), \"The map should contain 3 entries.\");\n\n        // Verify that each entity is mapped correctly using the 'id' field\n        for (TestEntity entity : entityList) {\n            TestEntity mappedEntity = result.get(entity.getId());\n            assertNotNull(mappedEntity, \"The mapped entity should not be null.\");\n            assertEquals(entity.getId(), mappedEntity.getId(), \"The IDs should match.\");\n            assertEquals(entity.getValue(), mappedEntity.getValue(), \"The values should match.\");\n        }\n\n        // Test with an empty list\n        List<TestEntity> emptyList = Arrays.asList();\n        Map<String, TestEntity> emptyResult = BeanUtils.mapByKey(\"id\", emptyList);\n        assertTrue(emptyResult.isEmpty(), \"The result should be an empty map.\");\n        \n        // Test with invalid key\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"nonExistentKey\", entityList);\n        });\n        assertEquals(\"Could not find the key\", exception.getMessage(), \"Exception message should match.\");\n\n        // Test with null list\n        Map<String, TestEntity> nullResult = BeanUtils.mapByKey(\"id\", null);\n        assertNotNull(nullResult, \"The result should not be null.\");\n        assertTrue(nullResult.isEmpty(), \"The result should be an empty map.\");\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\npublic class BeanUtilsTest {\n\n    static class TestClass {\n        private String id;\n        private String value;\n\n        public TestClass(String id, String value) {\n            this.id = id;\n            this.value = value;\n        }\n\n        public String getId() {\n            return id;\n        }\n\n        public String getValue() {\n            return value;\n        }\n    }\n\n    @Test\n    public void mapByKeyTest() {\n        // Prepare test objects\n        TestClass obj1 = new TestClass(\"1\", \"A\");\n        TestClass obj2 = new TestClass(\"2\", \"B\");\n        List<TestClass> list = Arrays.asList(obj1, obj2);\n\n        // Execute the method with the 'id' field as the key\n        Map<String, TestClass> result = BeanUtils.mapByKey(\"id\", list);\n\n        // Verification\n        assertNotNull(result, \"The map should not be null.\");\n        assertEquals(2, result.size(), \"The map should have 2 entries.\");\n        assertTrue(result.containsKey(obj1.getId()), \"The map should contain the ID of the first object.\");\n        assertTrue(result.containsKey(obj2.getId()), \"The map should contain the ID of the second object.\");\n        assertEquals(obj1, result.get(obj1.getId()), \"The map should map the right object to its ID.\");\n        assertEquals(obj2, result.get(obj2.getId()), \"The map should map the right object to its ID.\");\n\n        // Test with an empty list\n        result = BeanUtils.mapByKey(\"id\", Collections.emptyList());\n        assertTrue(result.isEmpty(), \"The map should be empty when provided an empty list.\");\n\n        // Test with a null list\n        result = BeanUtils.mapByKey(\"id\", null);\n        assertTrue(result.isEmpty(), \"The map should be empty when provided a null list.\");\n\n        // Test with non-existing key\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"nonExistingKey\", list);\n        });\n        assertEquals(\"Could not find the key\", exception.getMessage(), \"An IllegalArgumentException should be thrown if the key doesn't exist.\");\n\n        // Test with security exception while setting field accessible\n        Exception beanException = assertThrows(BeanUtilsException.class, () -> {\n            // Mock behavior that simulates a SecurityException\n            Field field = TestClass.class.getDeclaredField(\"id\");\n            field.setAccessible(false);\n            BeanUtils.mapByKey(\"id\", list);\n        });\n        assertNotNull(beanException.getCause(), \"A BeanUtilsException with a cause should be thrown when the field can't be accessed.\");\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass BeanUtilsTest {\n\n    private static class MockObject {\n        private String id;\n        private String value;\n\n        public MockObject(String id, String value) {\n            this.id = id;\n            this.value = value;\n        }\n        \n        // Getters and setters for id and value\n        public String getId() {\n            return id;\n        }\n        \n        public void setId(String id) {\n            this.id = id;\n        }\n        \n        public String getValue() {\n            return value;\n        }\n        \n        public void setValue(String value) {\n            this.value = value;\n        }\n    }\n\n    @Test\n    public void mapByKeyTest() {\n        List<MockObject> mockList = new ArrayList<>(Arrays.asList(\n            new MockObject(\"1\", \"A\"),\n            new MockObject(\"2\", \"B\"),\n            new MockObject(\"3\", \"C\")\n        ));\n\n        Map<String, MockObject> resultMap = BeanUtils.mapByKey(\"id\", mockList);\n\n        assertNotNull(resultMap, \"The result map should not be null.\");\n        assertEquals(3, resultMap.size(), \"The size of the result map should match the list size.\");\n        assertEquals(\"A\", resultMap.get(\"1\").getValue(), \"Value should match for key 1.\");\n        assertEquals(\"B\", resultMap.get(\"2\").getValue(), \"Value should match for key 2.\");\n        assertEquals(\"C\", resultMap.get(\"3\").getValue(), \"Value should match for key 3.\");\n        \n        // Test when collection is empty\n        List<MockObject> emptyList = new ArrayList<>();\n        Map<String, MockObject> emptyResultMap = BeanUtils.mapByKey(\"id\", emptyList);\n        assertTrue(emptyResultMap.isEmpty(), \"Result map should be empty for an empty list.\");\n\n        // Test when the key doesn't exist\n        Exception exception = assertThrows(IllegalArgumentException.class, () ->\n            BeanUtils.mapByKey(\"unknownKey\", mockList), \"Expected an IllegalArgumentException to be thrown\"\n        );\n        assertEquals(\"Could not find the key\", exception.getMessage(), \"The exception message should match.\");\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Create a simple class for testing\n        class Person {\n            public String name;\n            public int age;\n            \n            public Person(String name, int age) {\n                this.name = name;\n                this.age = age;\n            }\n        }\n\n        // Create a list of Persons\n        List<Person> people = Arrays.asList(new Person(\"Alice\", 30), new Person(\"Bob\", 25));\n\n        // Test mapByKey with valid key\n        Map<String, Person> mapByName;\n        try {\n            mapByName = BeanUtils.mapByKey(\"name\", people);\n            assertEquals(2, mapByName.size(), \"Map should contain 2 entries\");\n            assertTrue(mapByName.containsKey(\"Alice\"), \"Map should contain key 'Alice'\");\n            assertTrue(mapByName.containsKey(\"Bob\"), \"Map should contain key 'Bob'\");\n        } catch (Exception e) {\n            fail(\"Exception should not be thrown for valid key\");\n        }\n\n        // Test mapByKey with invalid key\n        Exception exception = assertThrows(IllegalArgumentException.class, () ->\n                BeanUtils.mapByKey(\"nonExistingKey\", people),\n            \"An IllegalArgumentException should be thrown when key does not exist\"\n        );\n\n        // Test mapByKey with null key\n        Exception nullKeyException = assertThrows(IllegalArgumentException.class, () ->\n                BeanUtils.mapByKey(null, people),\n            \"An IllegalArgumentException should be thrown when key is null\"\n        );\n\n        // Test mapByKey with empty list\n        Map<String, Person> emptyMap = BeanUtils.mapByKey(\"name\", Collections.emptyList());\n        assertTrue(emptyMap.isEmpty(), \"Resulting map from an empty list should be empty\");\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\nclass ExampleObject {\n    private String id;\n    private String value;\n\n    public ExampleObject(String id, String value) {\n        this.id = id;\n        this.value = value;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getValue() {\n        return value;\n    }\n}\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Prepare a list of objects to work with\n        List<ExampleObject> exampleObjects = new ArrayList<>();\n        exampleObjects.add(new ExampleObject(\"1\", \"One\"));\n        exampleObjects.add(new ExampleObject(\"2\", \"Two\"));\n        exampleObjects.add(new ExampleObject(\"3\", \"Three\"));\n\n        // Test mapping by a valid key\n        Map<String, ExampleObject> mapById = BeanUtils.mapByKey(\"id\", exampleObjects);\n        assertNotNull(mapById);\n        assertEquals(3, mapById.size());\n        assertEquals(\"One\", mapById.get(\"1\").getValue());\n        assertEquals(\"Two\", mapById.get(\"2\").getValue());\n        assertEquals(\"Three\", mapById.get(\"3\").getValue());\n\n        // Test with an empty list\n        List<ExampleObject> emptyList = new ArrayList<>();\n        Map<String, ExampleObject> emptyMap = BeanUtils.mapByKey(\"id\", emptyList);\n        assertNotNull(emptyMap);\n        assertTrue(emptyMap.isEmpty());\n\n        // Test with an invalid key - expecting an IllegalArgumentException\n        assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"nonExistentKey\", exampleObjects);\n        });\n\n        // Test for an exception being thrown for null list input - expecting a NullPointerException or specific BeanUtilsException\n        assertThrows(Exception.class, () -> {\n            BeanUtils.mapByKey(\"id\", null);\n        });\n    }\n}"
    ]
}