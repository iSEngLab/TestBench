{
    "project_name": "apollo",
    "file_name": "BeanUtils.java",
    "relative_path": "apollo/apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/BeanUtils.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.common.utils",
    "docstring": "/**\n   * \u7528\u4e8e\u5c06\u4e00\u4e2a\u5217\u8868\u8f6c\u6362\u4e3a\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\u7684\u67d0\u4e2a\u5c5e\u6027\u6620\u5c04\u5230\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\n   *\n   * <pre>\n   *      List<UserDTO> userList = userService.queryUsers();\n   *      Map<Integer, userDTO> userIdToUser = BeanUtil.mapByKey(\"userId\", userList);\n   * </pre>\n   *\n   * @param key \u5c5e\u6027\u540d\n   */",
    "source_code": "\n@SuppressWarnings(\"unchecked\")\npublic static <K, V> Map<K, V> mapByKey(String key, List<?> list) {\n  Map<K, V> map = new HashMap<>();\n  if (CollectionUtils.isEmpty(list)) {\n    return map;\n  }\n  try {\n    Class<?> clazz = list.get(0).getClass();\n    Field field = deepFindField(clazz, key);\n    if (field == null) {\n        throw new IllegalArgumentException(\"Could not find the key\");\n    }\n    field.setAccessible(true);\n    for (Object o : list) {\n      map.put((K) field.get(o), (V) o);\n    }\n  } catch (Exception e) {\n    throw new BeanUtilsException(e);\n  }\n  return map;\n}\n",
    "class_name": "BeanUtils",
    "method_name": "mapByKey",
    "arguments": [
        "String key",
        "List<> list"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport java.lang.reflect.Field;\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n\n    private static class TestObject {\n        private String id;\n        private String value;\n\n        public TestObject(String id, String value) {\n            this.id = id;\n            this.value = value;\n        }\n\n        // getters and setters for id and value if necessary\n    }\n\n    @Test\n    public void mapByKeyTest() {\n        // Case: Normal functionality\n        List<TestObject> list = new ArrayList<>();\n        list.add(new TestObject(\"1\", \"One\"));\n        list.add(new TestObject(\"2\", \"Two\"));\n        list.add(new TestObject(\"3\", \"Three\"));\n        \n        Map<String, TestObject> result = BeanUtils.mapByKey(\"id\", list);\n        assertNotNull(result);\n        assertEquals(3, result.size());\n        assertEquals(list.get(0), result.get(\"1\"));\n        assertEquals(list.get(1), result.get(\"2\"));\n        assertEquals(list.get(2), result.get(\"3\"));\n        \n        // Case: Empty list\n        List<TestObject> emptyList = Collections.emptyList();\n        assertTrue(BeanUtils.mapByKey(\"id\", emptyList).isEmpty());\n\n        // Case: Key doesn't exist\n        List<TestObject> anotherList = new ArrayList<>(list);\n        Exception exception = assertThrows(IllegalArgumentException.class, () ->\n                BeanUtils.mapByKey(\"nonExistingKey\", anotherList));\n        assertTrue(exception.getMessage().contains(\"Could not find the key\"));\n\n        // Case: Null list\n        Exception nullListException = assertThrows(BeanUtilsException.class, () ->\n                BeanUtils.mapByKey(\"id\", null));\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.lang.reflect.Field;\nimport java.util.*;\n\nclass SomeObject {\n    private String id;\n    private String value;\n\n    public SomeObject(String id, String value) {\n        this.id = id;\n        this.value = value;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    // Other getters and setters\n}\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Prepare test data\n        List<SomeObject> list = new ArrayList<>();\n        list.add(new SomeObject(\"123\", \"One Two Three\"));\n        list.add(new SomeObject(\"456\", \"Four Five Six\"));\n\n        // Perform the actual mapping by key\n        Map<String, SomeObject> result = BeanUtils.mapByKey(\"id\", list);\n\n        // Assertions\n        assertNotNull(result, \"The result map should not be null.\");\n        assertEquals(2, result.size(), \"The map should contain exactly 2 elements.\");\n        assertTrue(result.containsKey(\"123\"), \"The map should contain key '123'.\");\n        assertTrue(result.containsKey(\"456\"), \"The map should contain key '456'.\");\n        assertEquals(list.get(0), result.get(\"123\"), \"Map value for key '123' should match the first list element.\");\n        assertEquals(list.get(1), result.get(\"456\"), \"Map value for key '456' should match the second list element.\");\n\n        // Test with an empty list\n        List<SomeObject> emptyList = Collections.emptyList();\n        Map<String, SomeObject> emptyResult = BeanUtils.mapByKey(\"id\", emptyList);\n        assertNotNull(emptyResult, \"The result map for an empty list should not be null.\");\n        assertTrue(emptyResult.isEmpty(), \"The result map for an empty list should be empty.\");\n\n        // Test with a non-existing key field\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"nonExistingKey\", list);\n        }, \"An IllegalArgumentException should be thrown when key does not exist.\");\n\n        // Verify exception message\n        String expectedMessage = \"Could not find the key\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage), \"The exception message should contain the expected message.\");\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass SomeClass {\n    private String key;\n    \n    public SomeClass(String key) {\n        this.key = key;\n    }\n\n    public String getKey() {\n        return key;\n    }\n}\n\npublic class BeanUtilsTest {\n\n    @Test\n    public void mapByKeyTest() {\n        List<SomeClass> list = new ArrayList<>();\n        list.add(new SomeClass(\"first\"));\n        list.add(new SomeClass(\"second\"));\n        list.add(new SomeClass(\"third\"));\n\n        Map<String, SomeClass> result = BeanUtils.mapByKey(\"key\", list);\n        \n        assertNotNull(result);\n        assertEquals(3, result.size());\n        assertTrue(result.containsKey(\"first\"));\n        assertTrue(result.containsKey(\"second\"));\n        assertTrue(result.containsKey(\"third\"));\n        \n        assertSame(list.get(0), result.get(\"first\"));\n        assertSame(list.get(1), result.get(\"second\"));\n        assertSame(list.get(2), result.get(\"third\"));\n\n        // Test with an empty list\n        assertTrue(BeanUtils.mapByKey(\"key\", new ArrayList<>()).isEmpty());\n\n        // Test with a non-existing key\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> BeanUtils.mapByKey(\"nonExistingKey\", list));\n        assertEquals(\"Could not find the key\", exception.getMessage());\n\n        // Test with null list\n        assertThrows(NullPointerException.class, () -> BeanUtils.mapByKey(\"key\", null));\n        \n        // Assuming BeanUtilsException is a custom exception that should be handled\n        // Test with objects that throw an exception when trying to access the key field\n        List<Object> invalidList = new ArrayList<>();\n        invalidList.add(new Object(){\n            @SuppressWarnings(\"unused\")\n            public String getKey() throws Exception {\n                throw new IllegalAccessException(\"Cannot access key\");\n            }\n        });\n        assertThrows(BeanUtilsException.class, () -> BeanUtils.mapByKey(\"key\", invalidList));\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport java.lang.reflect.Field;\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n\n    private static class TestClass {\n        String keyField;\n        int valueField;\n\n        TestClass(String keyField, int valueField) {\n            this.keyField = keyField;\n            this.valueField = valueField;\n        }\n    }\n\n    @Test\n    public void mapByKeyTest_EmptyList() {\n        assertTrue(BeanUtils.mapByKey(\"keyField\", Collections.emptyList()).isEmpty());\n    }\n\n    @Test\n    public void mapByKeyTest_NonEmptyList() {\n        List<TestClass> list = Arrays.asList(new TestClass(\"key1\", 1), new TestClass(\"key2\", 2));\n        Map<String, TestClass> result = BeanUtils.mapByKey(\"keyField\", list);\n        assertNotNull(result);\n        assertEquals(2, result.size());\n        assertTrue(result.containsKey(\"key1\"));\n        assertEquals(1, result.get(\"key1\").valueField);\n        assertTrue(result.containsKey(\"key2\"));\n        assertEquals(2, result.get(\"key2\").valueField);\n    }\n\n    @Test\n    public void mapByKeyTest_InvalidKey() {\n        List<TestClass> list = Arrays.asList(new TestClass(\"key1\", 1));\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"nonExistingKey\", list);\n        });\n        assertEquals(\"Could not find the key\", exception.getMessage());\n    }\n\n    @Test\n    public void mapByKeyTest_ExceptionHandling() {\n        List<String> list = Arrays.asList(\"string\");\n        assertThrows(BeanUtilsException.class, () -> {\n            BeanUtils.mapByKey(\"length\", list); // Assuming BeanUtilsException is runtime and triggered by some conditions\n        });\n    }\n\n    // This section would be to simulate the reflection-based field lookup; this is just an example.\n    private static Field deepFindField(Class<?> clazz, String key) {\n        try {\n            return clazz.getDeclaredField(key);\n        } catch (NoSuchFieldException e) {\n            return null;\n        }\n    }\n\n    // You would include any extra test cases to cover more branches of the code if necessary\n\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.*;\n\nclass TestData {\n    private String id;\n    private String value;\n\n    public TestData(String id, String value){\n        this.id = id;\n        this.value = value;\n    }\n\n    public String getId(){\n        return id;\n    }\n\n    public String getValue(){\n        return value;\n    }\n}\n\nclass BeanUtilsTest {\n    private List<TestData> testDataList;\n\n    @BeforeEach\n    public void setUp() {\n        testDataList = new ArrayList<>();\n        testDataList.add(new TestData(\"1\", \"Value1\"));\n        testDataList.add(new TestData(\"2\", \"Value2\"));\n        testDataList.add(new TestData(\"3\", \"Value3\"));\n    }\n\n    @Test\n    public void mapByKeyTest() {\n        // Test with valid key\n        Map<String, TestData> result = BeanUtils.mapByKey(\"id\", testDataList);\n        assertEquals(3, result.size());\n        assertEquals(\"Value1\", result.get(\"1\").getValue());\n        assertEquals(\"Value2\", result.get(\"2\").getValue());\n        assertEquals(\"Value3\", result.get(\"3\").getValue());\n\n        // Test with empty list\n        List<TestData> emptyList = new ArrayList<>();\n        Map<String, TestData> emptyResult = BeanUtils.mapByKey(\"id\", emptyList);\n        assertTrue(emptyResult.isEmpty());\n\n        // Test with non-existent key\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"nonExistentKey\", testDataList);\n        });\n        assertEquals(\"Could not find the key\", exception.getMessage());\n\n        // Test handling of other exceptions (if any)\n        testDataList.add(new TestData(null, \"Value4\"));\n        Exception exceptionForNullKey = assertThrows(BeanUtilsException.class, () -> {\n            BeanUtils.mapByKey(\"id\", testDataList);\n        });\n        assertNotNull(exceptionForNullKey.getMessage());\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport java.lang.reflect.Field;\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BeanUtilsTest {\n\n    public static class TestObject {\n        private String id;\n        private String value;\n\n        public TestObject(String id, String value) {\n            this.id = id;\n            this.value = value;\n        }\n\n        public String getId() { return id; }\n        public String getValue() { return value; }\n    }\n\n    @Test\n    public void mapByKeyTest() {\n        // Test with non-empty list and valid key\n        List<TestObject> list = Arrays.asList(new TestObject(\"1\", \"obj1\"), new TestObject(\"2\", \"obj2\"));\n        Map<String, TestObject> result = BeanUtils.mapByKey(\"id\", list);\n        assertEquals(2, result.size(), \"Map should have 2 entries.\");\n        assertTrue(result.containsKey(\"1\"), \"Map should contain key '1'.\");\n        assertTrue(result.containsKey(\"2\"), \"Map should contain key '2'.\");\n\n        // Test with empty list\n        List<TestObject> emptyList = Collections.emptyList();\n        Map<String, TestObject> emptyResult = BeanUtils.mapByKey(\"id\", emptyList);\n        assertTrue(emptyResult.isEmpty(), \"Map should be empty.\");\n\n        // Test with invalid key\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"unknown\", list);\n        }, \"Expected to throw IllegalArgumentException for unknown key.\");\n        assertEquals(\"Could not find the key\", exception.getMessage(), \"Exception message should match expected one.\");\n\n        // Test with null list\n        assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"id\", null);\n        }, \"Expected to throw IllegalArgumentException for null list.\");\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class BeanUtilsTest {\n\n    static class TestData {\n        private String key;\n        private int value;\n\n        TestData(String key, int value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        // Assume getters and setters are here.\n        public String getKey() { return key; }\n        public int getValue() { return value; }\n    }\n\n    @Test\n    public void mapByKeyTest() {\n        // Test case with a normal scenario\n        List<TestData> testDataList = new ArrayList<>();\n        testDataList.add(new TestData(\"first\", 1));\n        testDataList.add(new TestData(\"second\", 2));\n\n        Map<String, TestData> result = BeanUtils.mapByKey(\"key\", testDataList);\n        assertNotNull(result);\n        assertEquals(2, result.size());\n        assertEquals(testDataList.get(0), result.get(\"first\"));\n        assertEquals(testDataList.get(1), result.get(\"second\"));\n\n        // Test case with an empty list\n        List<TestData> emptyList = new ArrayList<>();\n        Map<String, TestData> emptyResult = BeanUtils.mapByKey(\"key\", emptyList);\n        assertNotNull(emptyResult);\n        assertTrue(emptyResult.isEmpty());\n\n        // Test case with a non-existent field\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"nonExistentKey\", testDataList);\n        });\n        assertTrue(exception.getMessage().contains(\"Could not find the key\"));\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.lang.reflect.Field;\nimport java.util.*;\n\nclass ExampleObject {\n    private String id;\n    private String value;\n\n    public ExampleObject(String id, String value) {\n        this.id = id;\n        this.value = value;\n    }\n\n    public String getId() {\n        return id;\n    }\n}\n\nclass BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Arrange\n        List<ExampleObject> list = new ArrayList<>();\n        list.add(new ExampleObject(\"1\", \"Value1\"));\n        list.add(new ExampleObject(\"2\", \"Value2\"));\n        list.add(new ExampleObject(\"3\", \"Value3\"));\n\n        // Act\n        Map<String, ExampleObject> result = BeanUtils.mapByKey(\"id\", list);\n\n        // Assert\n        assertNotNull(result);\n        assertEquals(3, result.size());\n        assertEquals(list.get(0), result.get(\"1\"));\n        assertEquals(list.get(1), result.get(\"2\"));\n        assertEquals(list.get(2), result.get(\"3\"));\n\n        // Test with an empty list\n        List<ExampleObject> emptyList = new ArrayList<>();\n        Map<String, ExampleObject> emptyResult = BeanUtils.mapByKey(\"id\", emptyList);\n        assertTrue(emptyResult.isEmpty());\n\n        // Test with non-existing key\n        Exception keyException = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"nonExistingKey\", list);\n        });\n        assertEquals(\"Could not find the key\", keyException.getMessage());\n\n        // Test handling of null list\n        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"id\", null);\n        });\n        assertEquals(\"The list must not be null\", nullException.getMessage());\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport java.util.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass TestObject {\n    public Integer id;\n    public String name;\n    \n    public TestObject(Integer id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n}\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Setup\n        List<TestObject> list = new ArrayList<>();\n        list.add(new TestObject(1, \"Object1\"));\n        list.add(new TestObject(2, \"Object2\"));\n        list.add(new TestObject(3, \"Object3\"));\n        \n        // Successful mapping\n        Map<Integer, TestObject> result = BeanUtils.mapByKey(\"id\", list);\n        \n        // Assertions\n        assertNotNull(result);\n        assertEquals(3, result.size());\n        assertEquals(\"Object1\", result.get(1).name);\n        assertEquals(\"Object2\", result.get(2).name);\n        assertEquals(\"Object3\", result.get(3).name);\n        \n        // Empty list\n        Map<Integer, TestObject> emptyMap = BeanUtils.mapByKey(\"id\", new ArrayList<>());\n        assertTrue(emptyMap.isEmpty());\n        \n        // Non-existing key\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            BeanUtils.mapByKey(\"nonExistingKey\", list);\n        });\n        assertEquals(\"Could not find the key\", exception.getMessage());\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\nclass BeanUtilsTest {\n    \n    private static class TestObject {\n        private String id;\n        private String value;\n\n        TestObject(String id, String value) {\n            this.id = id;\n            this.value = value;\n        }\n\n        public String getId() {\n            return id;\n        }\n\n        public String getValue() {\n            return value;\n        }\n    }\n\n    @Test\n    public void mapByKeyTest() {\n        // Prepare test list\n        TestObject obj1 = new TestObject(\"1\", \"One\");\n        TestObject obj2 = new TestObject(\"2\", \"Two\");\n        TestObject obj3 = new TestObject(\"3\", \"Three\");\n        List<TestObject> list = Arrays.asList(obj1, obj2, obj3);\n\n        // Call mapByKey\n        Map<String, TestObject> result = BeanUtils.mapByKey(\"id\", list);\n\n        // Assertions\n        assertNotNull(result);\n        assertEquals(3, result.size(), \"Map should contain 3 elements\");\n        assertSame(obj1, result.get(\"1\"), \"Map should contain obj1 with key '1'\");\n        assertSame(obj2, result.get(\"2\"), \"Map should contain obj2 with key '2'\");\n        assertSame(obj3, result.get(\"3\"), \"Map should contain obj3 with key '3'\");\n    }\n    \n    @Test\n    public void mapByKeyEmptyListTest() {\n        List<TestObject> emptyList = Arrays.asList();\n        Map<String, TestObject> result = BeanUtils.mapByKey(\"id\", emptyList);\n        \n        assertTrue(result.isEmpty(), \"Map should be empty\");\n    }\n    \n    @Test\n    public void mapByKeyInvalidKeyTest() {\n        TestObject obj = new TestObject(\"1\", \"One\");\n        List<TestObject> list = Arrays.asList(obj);\n        Exception exception = assertThrows(BeanUtilsException.class, () -> {\n            BeanUtils.mapByKey(\"invalidKey\", list);\n        });\n        \n        assertTrue(exception.getCause() instanceof IllegalArgumentException, \"Cause should be an IllegalArgumentException\");\n        assertEquals(\"Could not find the key\", exception.getCause().getMessage(), \"Error message should indicate the key was not found\");\n    }\n}"
    ]
}