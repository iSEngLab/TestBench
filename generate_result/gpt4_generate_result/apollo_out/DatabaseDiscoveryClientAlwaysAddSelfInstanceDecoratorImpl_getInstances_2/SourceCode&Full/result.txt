Source code: 


@Override
public List<ServiceInstance> getInstances(String serviceName) {
  if (Objects.equals(serviceName, this.selfInstance.getServiceName())) {
    List<ServiceInstance> serviceInstances = this.delegate.getInstances(serviceName);
    if (containSelf(serviceInstances, this.selfInstance)) {
      // contains self instance already
      return serviceInstances;
    }

    // add self instance to result
    List<ServiceInstance> result = new ArrayList<>(serviceInstances.size() + 1);
    result.add(this.selfInstance);
    result.addAll(serviceInstances);
    return result;
  } else {
    return this.delegate.getInstances(serviceName);
  }
}



No.1 generated result --------------------------

package com.ctrip.framework.apollo.biz.registry;

import org.junit.jupiter.api.*;
import org.mockito.Mockito;
import static org.mockito.Mockito.*;
import java.net.URI;
import java.util.Arrays;
import java.util.List;

public class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {

    private DatabaseDiscoveryClient delegate;
    private ServiceInstance selfInstance;
    private DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator;

    @BeforeEach
    public void setUp() {
        // Initialize the mock delegate and a self instance for testing
        delegate = Mockito.mock(DatabaseDiscoveryClient.class);
        selfInstance = new ServiceInstance("selfService", URI.create("http://localhost:8080"), "default");
        decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);
    }

    @Test
    public void getInstancesTest_SelfInstanceNotInList_ShouldAddSelfInstance() {
        // Given a service name same as self instance's name, and a delegate returning a list not containing the self instance
        String serviceName = "selfService";
        List<ServiceInstance> mockInstances = Arrays.asList(
                new ServiceInstance("otherService", URI.create("http://otherhost:8080"), "default")
        );
        when(delegate.getInstances(serviceName)).thenReturn(mockInstances);

        // When calling getInstances on decorator
        List<ServiceInstance> instances = decorator.getInstances(serviceName);

        // Then the result should contain the self instance
        assertTrue(instances.contains(selfInstance));
        assertEquals(2, instances.size());
        verify(delegate, times(1)).getInstances(serviceName);
    }

    @Test
    public void getInstancesTest_SelfInstanceInList_ShouldReturnOriginalList() {
        // Given a service name same as self instance's name, and a delegate returning a list containing the self instance
        String serviceName = "selfService";
        List<ServiceInstance> mockInstances = Arrays.asList(
                selfInstance,
                new ServiceInstance("otherService", URI.create("http://otherhost:8080"), "default")
        );
        when(delegate.getInstances(serviceName)).thenReturn(mockInstances);

        // When calling getInstances on decorator
        List<ServiceInstance> instances = decorator.getInstances(serviceName);

        // Then the result should be same as the delegate's returned list
        assertEquals(mockInstances, instances);
        assertTrue(instances.contains(selfInstance));
        assertEquals(2, instances.size());
        verify(delegate, times(1)).getInstances(serviceName);
    }

    @Test
    public void getInstancesTest_DifferentServiceName_ShouldDelegate() {
        // Given a different service name and a delegate returning a list of instances
        String serviceName = "otherService";
        List<ServiceInstance> mockInstances = Arrays.asList(
                new ServiceInstance(serviceName, URI.create("http://otherhost:8080"), "default")
        );
        when(delegate.getInstances(serviceName)).thenReturn(mockInstances);

        // When calling getInstances on decorator
        List<ServiceInstance> instances = decorator.getInstances(serviceName);

        // Then the result should be only the delegate's returned list without self instance
        assertEquals(mockInstances, instances);
        assertFalse(instances.contains(selfInstance));
        verify(delegate, times(1)).getInstances(serviceName);
    }
}


No.2 generated result --------------------------

package com.ctrip.framework.apollo.biz.registry;

import org.junit.jupiter.api.*;
import org.mockito.Mockito;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.net.URI;
import java.util.Arrays;
import java.util.List;

public class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {
    
    private DatabaseDiscoveryClient delegate;
    private ServiceInstance selfInstance;
    private DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator;
    
    @BeforeEach
    public void setUp() {
        delegate = Mockito.mock(DatabaseDiscoveryClient.class);
        selfInstance = Mockito.mock(ServiceInstance.class);
        decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);
    }

    @Test
    public void getInstancesTest() {
        String serviceName = "test-service";
        String selfServiceName = "test-service";
        URI uri = URI.create("http://localhost:8080");
        String cluster = "default";
        
        ServiceInstance otherInstance1 = Mockito.mock(ServiceInstance.class);
        ServiceInstance otherInstance2 = Mockito.mock(ServiceInstance.class);
        
        when(selfInstance.getServiceName()).thenReturn(selfServiceName);
        when(selfInstance.getUri()).thenReturn(uri);
        when(selfInstance.getCluster()).thenReturn(cluster);
        
        // Scenario 1: Delegate contains self instance
        List<ServiceInstance> initialInstances = Arrays.asList(selfInstance, otherInstance1, otherInstance2);
        when(delegate.getInstances(serviceName)).thenReturn(initialInstances);
        
        List<ServiceInstance> result = decorator.getInstances(serviceName);
        assertEquals(3, result.size(), "Size should be the same as the delegate returned because self instance is already present");
        assertTrue(result.contains(selfInstance), "List should contain the self instance");
        
        // Scenario 2: Delegate does not contain self instance, and serviceName equals selfInstance service name
        List<ServiceInstance> initialInstancesWithoutSelf = Arrays.asList(otherInstance1, otherInstance2);
        when(delegate.getInstances(selfServiceName)).thenReturn(initialInstancesWithoutSelf);
        
        List<ServiceInstance> resultWhenSelfNotContained = decorator.getInstances(selfServiceName);
        assertEquals(3, resultWhenSelfNotContained.size(), "Should add self instance to the list when it is not contained");
        assertTrue(resultWhenSelfNotContained.contains(selfInstance), "List should now contain the self instance");

        // Scenario 3: Delegate does not contain self instance, and serviceName does not equal selfInstance service name
        String differentServiceName = "different-service";
        when(delegate.getInstances(differentServiceName)).thenReturn(initialInstancesWithoutSelf);
        
        List<ServiceInstance> resultWithDifferentServiceName = decorator.getInstances(differentServiceName);
        assertEquals(2, resultWithDifferentServiceName.size(), "Should not add self instance if the serviceName is different");
        assertFalse(resultWithDifferentServiceName.contains(selfInstance), "List should not contain the self instance");
    }
    
    // Additional tests can be implemented here, such as handling null responses from delegated getInstances,
    // checking if the correct instance is added first (i.e., the self instance), and so on.
}


No.3 generated result --------------------------

package com.ctrip.framework.apollo.biz.registry;

import org.junit.jupiter.api.*;
import org.mockito.Mockito;

import java.net.URI;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {

    private static final String SERVICE_NAME = "testService";
    private static final URI SELF_URI = URI.create("http://localhost:8080");
    private static final String CLUSTER = "testCluster";

    private DatabaseDiscoveryClient delegateMock;
    private ServiceInstance selfInstance;
    private DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator;

    @BeforeEach
    public void setUp() {
        delegateMock = Mockito.mock(DatabaseDiscoveryClient.class);
        selfInstance = new ServiceInstance(SERVICE_NAME, SELF_URI, CLUSTER);
        decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegateMock, selfInstance);
    }

    @Test
    public void getInstances_WhenServiceNameMatches_ShouldAlwaysReturnSelfInstance() {
        // Arrange
        ServiceInstance anotherInstance = new ServiceInstance(SERVICE_NAME, SELF_URI, "anotherCluster");
        List<ServiceInstance> mockInstances = Collections.singletonList(anotherInstance);
        
        when(delegateMock.getInstances(SERVICE_NAME)).thenReturn(mockInstances);
        
        // Act
        List<ServiceInstance> instances = decorator.getInstances(SERVICE_NAME);
        
        // Assert
        assertNotNull(instances);
        assertFalse(instances.isEmpty(), "The instance list should not be empty.");
        assertTrue(instances.contains(selfInstance), "The list should contain the self instance.");
        assertEquals(2, instances.size(), "There should be two instances.");
        verify(delegateMock, times(1)).getInstances(SERVICE_NAME);
    }

    @Test
    public void getInstances_WhenServiceNameDoesNotMatch_ShouldDelegate() {
        // Arrange
        String anotherServiceName = "anotherService";
        List<ServiceInstance> mockInstances = Arrays.asList(new ServiceInstance(anotherServiceName, SELF_URI, CLUSTER), 
                                                           new ServiceInstance(anotherServiceName, SELF_URI, CLUSTER));
        
        when(delegateMock.getInstances(anotherServiceName)).thenReturn(mockInstances);
        
        // Act
        List<ServiceInstance> instances = decorator.getInstances(anotherServiceName);
        
        // Assert
        assertNotNull(instances);
        assertEquals(mockInstances, instances, "Instances must be the same as those returned from delegate.");
        verify(delegateMock, times(1)).getInstances(anotherServiceName);
    }

    @Test
    public void getInstances_WhenContainingSelf_ShouldReturnOriginalList() {
        // Arrange
        List<ServiceInstance> mockInstances = Collections.singletonList(selfInstance);
        when(delegateMock.getInstances(SERVICE_NAME)).thenReturn(mockInstances);
        
        // Act
        List<ServiceInstance> instances = decorator.getInstances(SERVICE_NAME);
        
        // Assert
        assertNotNull(instances);
        assertTrue(instances.contains(selfInstance), "The list should contain the self instance.");
        assertEquals(1, instances.size(), "Only the self instance should be present.");
        verify(delegateMock, times(1)).getInstances(SERVICE_NAME);
    }
}


No.4 generated result --------------------------

package com.ctrip.framework.apollo.biz.registry;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.net.URI;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {

    private DatabaseDiscoveryClient delegate;
    private ServiceInstance selfInstance;

    @BeforeEach
    public void setUp() {
        delegate = mock(DatabaseDiscoveryClient.class);
        selfInstance = new ServiceInstance("serviceName-self", URI.create("http://localhost:8080"), "default");
    }
    
    @Test
    public void getInstances_whenSelfInstanceIsNotInList_addsSelfInstance() {
        // Arrange
        String serviceName = selfInstance.getServiceName();
        List<ServiceInstance> instancesFromDelegate = Collections.singletonList(
                new ServiceInstance("serviceName1", URI.create("http://otherservice:8080"), "default"));
        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator =
                new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);
        when(delegate.getInstances(serviceName)).thenReturn(instancesFromDelegate);

        // Act
        List<ServiceInstance> instances = decorator.getInstances(serviceName);

        // Assert
        assertEquals(2, instances.size());
        assertTrue(instances.contains(selfInstance));
    }

    @Test
    public void getInstances_whenSelfInstanceIsInList_doesNotAddSelfInstance() {
        // Arrange
        String serviceName = selfInstance.getServiceName();
        List<ServiceInstance> instancesFromDelegate = Arrays.asList(
                selfInstance,
                new ServiceInstance("serviceName1", URI.create("http://otherservice:8080"), "default"));
        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator =
                new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);
        when(delegate.getInstances(serviceName)).thenReturn(instancesFromDelegate);

        // Act
        List<ServiceInstance> instances = decorator.getInstances(serviceName);

        // Assert
        assertEquals(2, instances.size());
        // Verify that the returned list matches exactly with the list from the delegate
        assertIterableEquals(instancesFromDelegate, instances);
    }

    @Test
    public void getInstances_whenServiceNameIsDifferent_usesDelegate() {
        // Arrange
        String differentServiceName = "different-service";
        List<ServiceInstance> instancesFromDelegate = Collections.singletonList(
                new ServiceInstance("serviceName1", URI.create("http://otherservice:8080"), "default"));
        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator =
                new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);
        when(delegate.getInstances(differentServiceName)).thenReturn(instancesFromDelegate);

        // Act
        List<ServiceInstance> instances = decorator.getInstances(differentServiceName);

        // Assert
        assertIterableEquals(instancesFromDelegate, instances);
        // Verify that the instances returned are genuinely those returned by the delegate
        assertEquals(instancesFromDelegate, instances);
    }
}


No.5 generated result --------------------------

package com.ctrip.framework.apollo.biz.registry;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {
    
    private static final String SERVICE_NAME = "TestService";

    private DatabaseDiscoveryClient delegate;
    private ServiceInstance selfInstance;
    private DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl discoveryClient;

    @BeforeEach
    public void setUp() {
        delegate = Mockito.mock(DatabaseDiscoveryClient.class);
        selfInstance = new ServiceInstance(SERVICE_NAME, URI.create("http://localhost:8080"), "default");
        
        discoveryClient = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);
    }

    @Test
    public void getInstances_withSelfServiceName_containSelfInstance() {
        String serviceName = SERVICE_NAME;
        ServiceInstance otherInstance = new ServiceInstance(SERVICE_NAME, URI.create("http://localhost:9090"), "default");
        List<ServiceInstance> delegatedInstances = Collections.singletonList(otherInstance);

        Mockito.when(delegate.getInstances(serviceName)).thenReturn(delegatedInstances);

        List<ServiceInstance> instances = discoveryClient.getInstances(serviceName);

        Mockito.verify(delegate).getInstances(serviceName);
        assertFalse(instances.isEmpty(), "Instances list should never be empty");
        assertTrue(instances.contains(selfInstance), "Instances list should contain self instance");
        assertTrue(instances.containsAll(delegatedInstances), "Instances list should contain all instances from delegate");
        assertEquals(2, instances.size(), "Instances list should contain exactly two instances");
    }

    @Test
    public void getInstances_withSelfServiceName_alreadyContainSelfInstance() {
        String serviceName = SERVICE_NAME;
        List<ServiceInstance> delegatedInstances = Collections.singletonList(selfInstance);

        Mockito.when(delegate.getInstances(serviceName)).thenReturn(delegatedInstances);

        List<ServiceInstance> instances = discoveryClient.getInstances(serviceName);

        Mockito.verify(delegate).getInstances(serviceName);
        assertFalse(instances.isEmpty(), "Instances list should never be empty");
        assertTrue(instances.contains(selfInstance), "Instances list should contain self instance");
        assertEquals(1, instances.size(), "Instances list should contain only the self instance");
    }

    @Test
    public void getInstances_withOtherServiceName_delegateToOriginal() {
        String otherServiceName = "OtherService";
        ServiceInstance otherInstance = new ServiceInstance(otherServiceName, URI.create("http://localhost:9091"), "default");
        List<ServiceInstance> delegatedInstances = Collections.singletonList(otherInstance);

        Mockito.when(delegate.getInstances(otherServiceName)).thenReturn(delegatedInstances);

        List<ServiceInstance> instances = discoveryClient.getInstances(otherServiceName);

        Mockito.verify(delegate).getInstances(otherServiceName);
        assertEquals(delegatedInstances, instances, "Instances list should be equal to what delegate returns");
    }


    @AfterEach
    public void tearDown() {
        Mockito.validateMockitoUsage();
    }
}


No.6 generated result --------------------------

package com.ctrip.framework.apollo.biz.registry;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.net.URI;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {

    @Test
    public void getInstancesTest() {
        // Create the delegate mock
        DatabaseDiscoveryClient delegate = mock(DatabaseDiscoveryClient.class);
        
        // Define a self instance for the decorator
        ServiceInstance selfInstance = new ServiceInstance() {
            @Override
            public String getServiceName() {
                return "TestService";
            }

            @Override
            public URI getUri() {
                return URI.create("http://local.test:8080");
            }

            @Override
            public String getCluster() {
                return "TestCluster";
            }
        };
        
        // Initialize the decorator with the delegate and self instance
        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator =
                new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);

        // Create a scenario where the delegate returns a list without the self instance
        when(delegate.getInstances("TestService")).thenReturn(Collections.emptyList());

        // Invoke the getInstances method which should always return the self instance included
        List<ServiceInstance> instancesNoSelfInDelegate = decorator.getInstances("TestService");
        
        // Verify self instance is added when not present
        assertNotNull(instancesNoSelfInDelegate);
        assertFalse(instancesNoSelfInDelegate.isEmpty());
        assertEquals(selfInstance, instancesNoSelfInDelegate.get(0));
        
        // Create a scenario where the delegate returns a list with the self instance
        when(delegate.getInstances("TestService")).thenReturn(Arrays.asList(selfInstance));

        // Invoke the getInstances method
        List<ServiceInstance> instancesWithSelfInDelegate = decorator.getInstances("TestService");
        
        // Verify no extra self instance is added if already present
        assertNotNull(instancesWithSelfInDelegate);
        assertEquals(1, instancesWithSelfInDelegate.size());
        assertEquals(selfInstance, instancesWithSelfInDelegate.get(0));
        
        // Now test a different service name, should delegate only
        when(delegate.getInstances("AnotherService")).thenReturn(Collections.singletonList(mock(ServiceInstance.class)));

        // Invoke getInstances with a different service name
        List<ServiceInstance> instancesDifferentService = decorator.getInstances("AnotherService");

        // Verify self instance is not added for a different service name
        assertNotNull(instancesDifferentService);
        assertNotEquals(selfInstance.getServiceName(), instancesDifferentService.stream()
            .map(ServiceInstance::getServiceName)
            .findFirst()
            .orElse(null)
        );
    }
}


No.7 generated result --------------------------

package com.ctrip.framework.apollo.biz.registry;

import org.junit.jupiter.api.*;
import org.mockito.Mockito;
import java.net.URI;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import static org.mockito.ArgumentMatchers.anyString;
import static org.junit.jupiter.api.Assertions.*;

public class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {

    private DatabaseDiscoveryClient delegateMock;
    private ServiceInstance selfInstance;
    private DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator;

    @BeforeEach
    public void setUp() {
        delegateMock = Mockito.mock(DatabaseDiscoveryClient.class);
        selfInstance = new ServiceInstance("self-service", URI.create("http://localhost:8080"), "self-cluster");
        decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegateMock, selfInstance);
    }

    @Test
    public void getInstancesTest_whenServiceNameIsSelfAndContainsSelfInstance() {
        List<ServiceInstance> mockInstances = Arrays.asList(selfInstance, new ServiceInstance("other-service", URI.create("http://otherhost:9090"), "other-cluster"));
        Mockito.when(delegateMock.getInstances(selfInstance.getServiceName())).thenReturn(mockInstances);

        List<ServiceInstance> instances = decorator.getInstances(selfInstance.getServiceName());

        assertAll(
                () -> assertEquals(2, instances.size(), "Expected size to be 2"),
                () -> assertTrue(instances.contains(selfInstance), "Expected list to contain selfInstance")
        );
    }

    @Test
    public void getInstancesTest_whenServiceNameIsSelfAndDoesNotContainSelfInstance() {
        ServiceInstance otherInstance = new ServiceInstance("other-service", URI.create("http://otherhost:9090"), "other-cluster");
        List<ServiceInstance> mockInstances = Collections.singletonList(otherInstance);
        Mockito.when(delegateMock.getInstances(selfInstance.getServiceName())).thenReturn(mockInstances);

        List<ServiceInstance> instances = decorator.getInstances(selfInstance.getServiceName());

        assertAll(
                () -> assertEquals(2, instances.size(), "Expected size to be 2"),
                () -> assertTrue(instances.contains(selfInstance), "Expected list to contain selfInstance"),
                () -> assertTrue(instances.contains(otherInstance), "Expected list to contain otherInstance")
        );
    }

    @Test
    public void getInstancesTest_whenServiceNameIsNotSelf() {
        ServiceInstance anotherInstance = new ServiceInstance("another-service", URI.create("http://anotherhost:8080"), "another-cluster");
        List<ServiceInstance> mockInstances = Collections.singletonList(anotherInstance);
        Mockito.when(delegateMock.getInstances(anyString())).thenReturn(mockInstances);

        List<ServiceInstance> instances = decorator.getInstances("different-service");

        assertAll(
                () -> assertEquals(1, instances.size(), "Expected size to be 1"),
                () -> assertEquals(anotherInstance, instances.get(0), "Expected list to contain anotherInstance")
        );
    }
}


No.8 generated result --------------------------

package com.ctrip.framework.apollo.biz.registry;

import static org.mockito.Mockito.*;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import java.net.URI;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {

    private DatabaseDiscoveryClient delegate;
    private ServiceInstance selfInstance;
    private DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator;

    @BeforeEach
    void setUp() {
        delegate = mock(DatabaseDiscoveryClient.class);
        selfInstance = new ServiceInstance("myService", URI.create("http://localhost:8080"), "DEFAULT");
        decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);
    }

    @Test
    public void getInstancesWhenServiceNameEqualsSelfShouldReturnSelfPlusDelegateInstances() {
        // Arrange
        String serviceName = selfInstance.getServiceName();
        List<ServiceInstance> mockInstances = Arrays.asList(
                new ServiceInstance(serviceName, URI.create("http://localhost:8081"), "DEFAULT"),
                new ServiceInstance(serviceName, URI.create("http://localhost:8082"), "DEFAULT"));
        when(delegate.getInstances(serviceName)).thenReturn(mockInstances);

        // Act
        List<ServiceInstance> instances = decorator.getInstances(serviceName);

        // Assert
        assertNotNull(instances);
        assertFalse(instances.isEmpty());
        assertTrue(instances.contains(selfInstance));
        assertEquals(mockInstances.size() + 1, instances.size());
        verify(delegate).getInstances(serviceName);
    }

    @Test
    public void getInstancesWhenServiceNameNotEqualsSelfShouldReturnDelegateInstancesOnly() {
        // Arrange
        String otherServiceName = "otherService";
        List<ServiceInstance> mockInstances = Arrays.asList(
                new ServiceInstance(otherServiceName, URI.create("http://localhost:9080"), "DEFAULT"));
        when(delegate.getInstances(otherServiceName)).thenReturn(mockInstances);

        // Act
        List<ServiceInstance> instances = decorator.getInstances(otherServiceName);

        // Assert
        assertEquals(mockInstances, instances);
        verify(delegate).getInstances(otherServiceName);
    }

    @Test
    public void getInstancesShouldReturnListContainingSelfInstanceWhenNotAlreadyIncluded() {
        // Arrange
        String serviceName = selfInstance.getServiceName();
        when(delegate.getInstances(serviceName)).thenReturn(Collections.emptyList());

        // Act
        List<ServiceInstance> instances = decorator.getInstances(serviceName);

        // Assert
        assertNotNull(instances);
        assertFalse(instances.isEmpty());
        assertTrue(instances.contains(selfInstance));
        assertEquals(1, instances.size());
    }

    @Test
    public void getInstancesShouldReturnSameListWhenSelfInstanceAlreadyIncluded() {
        // Arrange
        String serviceName = selfInstance.getServiceName();
        List<ServiceInstance> mockInstances = Collections.singletonList(selfInstance);
        when(delegate.getInstances(serviceName)).thenReturn(mockInstances);

        // Act
        List<ServiceInstance> instances = decorator.getInstances(serviceName);

        // Assert
        assertNotNull(instances);
        assertFalse(instances.isEmpty());
        assertEquals(mockInstances, instances);
        assertSame(mockInstances, instances, "Expected list returned is the same list as the delegate provided");
    }
}


No.9 generated result --------------------------

package com.ctrip.framework.apollo.biz.registry;

import org.junit.jupiter.api.*;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.net.URI;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {

    @Test
    public void getInstancesTest() {
        // Arrange
        DatabaseDiscoveryClient mockDelegate = mock(DatabaseDiscoveryClient.class);
        ServiceInstance selfInstance = new ServiceInstance("selfService", URI.create("http://localhost:8080"), "default");
        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl discoveryClient =
                new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(mockDelegate, selfInstance);

        // When self instance should be added (not contained in the delegate response)
        String serviceName = "selfService";
        List<ServiceInstance> delegatedList = Collections.emptyList();
        when(mockDelegate.getInstances(serviceName)).thenReturn(delegatedList);

        // Act
        List<ServiceInstance> actualInstancesWhenNotContained = discoveryClient.getInstances(serviceName);

        // Assert
        assertEquals(1, actualInstancesWhenNotContained.size(), "The list should contain exactly one instance when the delegate returns empty.");
        assertTrue(actualInstancesWhenNotContained.contains(selfInstance), "The list should contain the self instance.");

        // When self instance is already contained
        List<ServiceInstance> delegatedListWithSelf = Collections.singletonList(selfInstance);
        when(mockDelegate.getInstances(serviceName)).thenReturn(delegatedListWithSelf);

        // Act
        List<ServiceInstance> actualInstancesWhenContained = discoveryClient.getInstances(serviceName);

        // Assert
        assertEquals(1, actualInstancesWhenContained.size(), "The list should not contain duplicates of the self instance.");
        assertTrue(actualInstancesWhenContained.contains(selfInstance), "The list should contain the self instance.");

        // When the serviceName is different
        String differentServiceName = "otherService";
        List<ServiceInstance> delegatedListForDifferentService = Arrays.asList(
                new ServiceInstance(differentServiceName, URI.create("http://otherhost:1234"), "default")
        );
        when(mockDelegate.getInstances(differentServiceName)).thenReturn(delegatedListForDifferentService);

        // Act
        List<ServiceInstance> actualInstancesForDifferentService = discoveryClient.getInstances(differentServiceName);

        // Assert
        assertEquals(delegatedListForDifferentService, actualInstancesForDifferentService, "The list should be exactly what the delegate returns for different service names.");
    }
}



No.10 generated result --------------------------

package com.ctrip.framework.apollo.biz.registry;

import org.junit.jupiter.api.*;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {

    private DatabaseDiscoveryClient delegateMock;
    private ServiceInstance selfInstanceMock;
    private DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl clientDecorator;

    @BeforeEach
    public void setUp() {
        delegateMock = mock(DatabaseDiscoveryClient.class);
        selfInstanceMock = mock(ServiceInstance.class);
        clientDecorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegateMock, selfInstanceMock);
    }

    @Test
    public void getInstancesTest_WhenSelfInstanceIsAlreadyPresent() {
        String serviceName = "testService";
        when(selfInstanceMock.getServiceName()).thenReturn(serviceName);
        
        // Mock a response that already includes the self instance
        List<ServiceInstance> mockResponse = Collections.singletonList(selfInstanceMock);
        when(delegateMock.getInstances(serviceName)).thenReturn(mockResponse);

        List<ServiceInstance> result = clientDecorator.getInstances(serviceName);

        verify(delegateMock).getInstances(serviceName);
        assertEquals(mockResponse, result, "List should contain the self instance already");
    }

    @Test
    public void getInstancesTest_WhenSelfInstanceIsNotPresent() {
        String serviceName = "testService";
        when(selfInstanceMock.getServiceName()).thenReturn(serviceName);

        ServiceInstance anotherInstanceMock = mock(ServiceInstance.class);
        List<ServiceInstance> mockResponse = Collections.singletonList(anotherInstanceMock);
        when(delegateMock.getInstances(serviceName)).thenReturn(mockResponse);

        List<ServiceInstance> result = clientDecorator.getInstances(serviceName);

        verify(delegateMock).getInstances(serviceName);
        assertTrue(result.contains(selfInstanceMock), "List should contain the self instance");
        assertTrue(result.containsAll(mockResponse), "Original instances should be included in the result");
        assertEquals(mockResponse.size() + 1, result.size(), "The result list size should be increased by 1");
    }

    @Test
    public void getInstancesTest_WhenServiceNameDoesNotMatch() {
        String searchedServiceName = "otherService";
        when(selfInstanceMock.getServiceName()).thenReturn("testService");

        ServiceInstance otherInstanceMock = mock(ServiceInstance.class);
        when(otherInstanceMock.getServiceName()).thenReturn("otherService");
        List<ServiceInstance> mockResponse = Arrays.asList(selfInstanceMock, otherInstanceMock);

        when(delegateMock.getInstances(searchedServiceName)).thenReturn(mockResponse);

        List<ServiceInstance> result = clientDecorator.getInstances(searchedServiceName);

        verify(delegateMock).getInstances(searchedServiceName);
        assertEquals(mockResponse, result, "Should return delegated instances without adding self instance");
    }

    @AfterEach
    public void tearDown() {
        reset(delegateMock, selfInstanceMock);
    }
}


