{
    "project_name": "apollo",
    "file_name": "DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl.java",
    "relative_path": "apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/registry/DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.biz.registry",
    "docstring": "/**\n   * if the serviceName is same with self, always return self's instance\n   * @return never be empty list when serviceName is same with self\n   */",
    "source_code": "\n@Override\npublic List<ServiceInstance> getInstances(String serviceName) {\n  if (Objects.equals(serviceName, this.selfInstance.getServiceName())) {\n    List<ServiceInstance> serviceInstances = this.delegate.getInstances(serviceName);\n    if (containSelf(serviceInstances, this.selfInstance)) {\n      // contains self instance already\n      return serviceInstances;\n    }\n\n    // add self instance to result\n    List<ServiceInstance> result = new ArrayList<>(serviceInstances.size() + 1);\n    result.add(this.selfInstance);\n    result.addAll(serviceInstances);\n    return result;\n  } else {\n    return this.delegate.getInstances(serviceName);\n  }\n}\n",
    "class_name": "DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl",
    "method_name": "getInstances",
    "arguments": [
        "String serviceName"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n\n    private static final String SERVICE_NAME = \"testService\";\n    private static final ServiceInstance SELF_INSTANCE = Mockito.mock(ServiceInstance.class);\n    private static final ServiceInstance OTHER_INSTANCE = Mockito.mock(ServiceInstance.class);\n    \n    private DiscoveryClient delegate;\n    private DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl discoveryClient;\n\n    @BeforeEach\n    void setUp() {\n        delegate = Mockito.mock(DiscoveryClient.class);\n        discoveryClient = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, SELF_INSTANCE);\n        Mockito.when(SELF_INSTANCE.getServiceName()).thenReturn(SERVICE_NAME);\n    }\n    \n    @Test\n    public void getInstancesShouldAddSelfWhenMissingTest() {\n        List<ServiceInstance> mockReturnList = List.of(OTHER_INSTANCE);\n        Mockito.when(delegate.getInstances(SERVICE_NAME)).thenReturn(mockReturnList);\n        \n        List<ServiceInstance> instances = discoveryClient.getInstances(SERVICE_NAME);\n        \n        assertEquals(2, instances.size());\n        assertTrue(instances.contains(SELF_INSTANCE), \"The returned list of instances should contain self instance.\");\n        assertTrue(instances.contains(OTHER_INSTANCE), \"The returned list of instances should contain other instances.\");\n    }\n    \n    @Test\n    public void getInstancesShouldNotAddSelfWhenPresentTest() {\n        List<ServiceInstance> mockReturnList = List.of(SELF_INSTANCE, OTHER_INSTANCE);\n        Mockito.when(delegate.getInstances(SERVICE_NAME)).thenReturn(mockReturnList);\n        \n        List<ServiceInstance> instances = discoveryClient.getInstances(SERVICE_NAME);\n        \n        assertEquals(2, instances.size(), \"The list of instances should have two elements.\");\n        assertSame(mockReturnList, instances, \"The returned list of instances should be the same as the mocked return list.\");\n    }\n    \n    @Test\n    public void getInstancesWithDifferentServiceNameTest() {\n        String differentServiceName = \"differentService\";\n        List<ServiceInstance> mockReturnList = List.of(OTHER_INSTANCE);\n        Mockito.when(delegate.getInstances(differentServiceName)).thenReturn(mockReturnList);\n        \n        List<ServiceInstance> instances = discoveryClient.getInstances(differentServiceName);\n        \n        assertEquals(1, instances.size());\n        assertFalse(instances.contains(SELF_INSTANCE), \"The returned list of instances should not contain self instance for a different service name.\");\n        assertTrue(instances.contains(OTHER_INSTANCE), \"The returned list of instances should contain other instances.\");\n    }\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.Mockito.when;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.Objects;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    private final DiscoveryClient delegate = Mockito.mock(DiscoveryClient.class);\n    private final ServiceInstance selfInstance = Mockito.mock(ServiceInstance.class);\n    private DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl discoveryClient;\n\n    @BeforeEach\n    public void setUp() {\n        when(selfInstance.getServiceName()).thenReturn(\"selfService\");\n        discoveryClient = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    }\n\n    @Test\n    public void getInstancesTest() {\n        // setup\n        ServiceInstance otherInstance = Mockito.mock(ServiceInstance.class);\n        when(otherInstance.getServiceName()).thenReturn(\"otherService\");\n\n        List<ServiceInstance> serviceInstances = new ArrayList<>(Arrays.asList(otherInstance));\n\n        // when the serviceName is selfInstance's serviceName\n        when(delegate.getInstances(\"selfService\")).thenReturn(serviceInstances);\n        when(selfInstance.getServiceName()).thenReturn(\"selfService\");\n\n        // test contains self\n        List<ServiceInstance> returnedServiceInstances = discoveryClient.getInstances(\"selfService\");\n        assertTrue(returnedServiceInstances.contains(selfInstance));\n        assertTrue(returnedServiceInstances.containsAll(serviceInstances));\n        assertEquals(serviceInstances.size() + 1, returnedServiceInstances.size());\n\n        // when the serviceName is other than self\n        when(delegate.getInstances(\"otherService\")).thenReturn(serviceInstances);\n        returnedServiceInstances = discoveryClient.getInstances(\"otherService\");\n        assertFalse(returnedServiceInstances.contains(selfInstance));\n        assertTrue(returnedServiceInstances.containsAll(serviceInstances));\n        assertEquals(serviceInstances.size(), returnedServiceInstances.size());\n    }\n\n    private boolean containSelf(List<ServiceInstance> serviceInstances, ServiceInstance selfInstance) {\n        return serviceInstances.stream().anyMatch(instance -> Objects.equals(instance.getServiceName(), selfInstance.getServiceName()));\n    }\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    \n    private final DiscoveryClient delegate = Mockito.mock(DiscoveryClient.class);\n    private final ServiceInstance selfInstance = Mockito.mock(ServiceInstance.class);\n    private DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator;\n\n    @BeforeEach\n    public void setup() {\n        Mockito.when(selfInstance.getServiceName()).thenReturn(\"my-service\");\n        decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    }\n\n    @Test\n    public void getInstancesTest() {\n        String serviceName = \"my-service\";\n\n        // Setup delegate to return a list with some mock instances\n        List<ServiceInstance> delegateInstances = new ArrayList<>();\n        delegateInstances.add(Mockito.mock(ServiceInstance.class)); // Add a different instance\n        Mockito.when(delegate.getInstances(serviceName)).thenReturn(delegateInstances);\n\n        List<ServiceInstance> instances = decorator.getInstances(serviceName);\n\n        // Check that the result contains two instances, the selfInstance and the one returned by the delegate\n        assertEquals(2, instances.size());\n\n        // Check that the selfInstance is added as the first instance of the resulting list\n        assertTrue(instances.contains(selfInstance));\n        assertEquals(selfInstance, instances.get(0));\n\n        // Verify that when the serviceName doesn't match, only the delegate's list is returned\n        String otherServiceName = \"other-service\";\n        Mockito.when(delegate.getInstances(otherServiceName)).thenReturn(delegateInstances);\n        List<ServiceInstance> otherInstances = decorator.getInstances(otherServiceName);\n        assertEquals(delegateInstances, otherInstances);\n        assertFalse(otherInstances.contains(selfInstance));\n    }\n\n    // Additional test to check behavior when the delegate's list already contains the self instance\n    @Test\n    public void getInstancesWhenContainsSelfTest() {\n        String serviceName = \"my-service\";\n\n        // Setup delegate to return a list with the self instance\n        List<ServiceInstance> delegateInstances = new ArrayList<>();\n        delegateInstances.add(selfInstance);\n        Mockito.when(delegate.getInstances(serviceName)).thenReturn(delegateInstances);\n\n        List<ServiceInstance> instances = decorator.getInstances(serviceName);\n\n        // Check the result should contain only one instance, which is the selfInstance\n        assertEquals(1, instances.size());\n        assertTrue(instances.contains(selfInstance));\n    }\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.ArrayList;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    \n    private ServiceInstance selfInstance; // Assuming this is the implementation of the ServiceInstance interface\n    private DiscoveryClient delegate; // Assuming this is the implementation of the DiscoveryClient interface\n    private DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl discoveryClient;\n    \n    @BeforeEach\n    public void setUp() {\n        selfInstance = Mockito.mock(ServiceInstance.class);\n        delegate = Mockito.mock(DiscoveryClient.class);\n        discoveryClient = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n        \n        Mockito.when(selfInstance.getServiceName()).thenReturn(\"my-service\");\n    }\n    \n    @Test\n    public void getInstancesTest() {\n        String serviceName = \"my-service\";\n        List<ServiceInstance> mockServiceInstances = new ArrayList<>();\n        mockServiceInstances.add(Mockito.mock(ServiceInstance.class)); // Add a mock ServiceInstance for simulation\n        \n        Mockito.when(delegate.getInstances(serviceName)).thenReturn(mockServiceInstances);\n        Mockito.when(selfInstance.getServiceName()).thenReturn(serviceName);\n        \n        List<ServiceInstance> instances = discoveryClient.getInstances(serviceName);\n        \n        // Mocked delegate's list plus one self instance\n        assertEquals(mockServiceInstances.size() + 1, instances.size(), \"Self instance should be added\");\n        // Ensure the self instance is indeed in the list\n        assertTrue(instances.contains(selfInstance), \"The result list should contain the selfInstance\");\n        // Confirm that the self instance is the first in the list\n        assertEquals(selfInstance, instances.get(0), \"The self instance should be first in the list.\");\n        // Confirm that the rest of the instances are the same as the mockServiceInstances\n        assertTrue(instances.containsAll(mockServiceInstances), \"The list should contain all instances from the mockServiceInstances\");\n    }\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    \n    private final DiscoveryClient delegate = Mockito.mock(DiscoveryClient.class);\n    private final ServiceInstance selfInstance = Mockito.mock(ServiceInstance.class);\n    private final DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl discoveryClient =\n        new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n\n    @Test\n    public void getInstancesTest() {\n        // Setup\n        String serviceName = \"testService\";\n        List<ServiceInstance> mockInstances = new ArrayList<>();\n        mockInstances.add(Mockito.mock(ServiceInstance.class)); // external instance\n        when(selfInstance.getServiceName()).thenReturn(serviceName);\n        when(delegate.getInstances(serviceName)).thenReturn(mockInstances);\n\n        // Act\n        List<ServiceInstance> instances = discoveryClient.getInstances(serviceName);\n\n        // Assert\n        assertNotNull(instances, \"Instances list should not be null\");\n        assertEquals(mockInstances.size() + 1, instances.size(),\n            \"Instances list should contain all external instances plus self instance\");\n        assertTrue(instances.contains(selfInstance), \"Instances list should contain the self instance\");\n        verify(delegate).getInstances(serviceName);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport static org.mockito.Mockito.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    \n    private final String serviceName = \"testService\";\n    private DiscoveryClientAlwaysAddSelfInstanceDecoratorImpl instance;\n    private ServiceInstance selfInstance;\n    private DiscoveryClient delegate;\n    \n    @BeforeEach\n    public void setUp() {\n        selfInstance = mock(ServiceInstance.class);\n        delegate = mock(DiscoveryClient.class);\n        when(selfInstance.getServiceName()).thenReturn(serviceName);\n        instance = new DiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    }\n    \n    @Test\n    public void getInstancesTest() {\n        List<ServiceInstance> mockList = new ArrayList<>();\n        mockList.add(mock(ServiceInstance.class)); // Add a dummy ServiceInstance to the list\n        \n        when(delegate.getInstances(serviceName)).thenReturn(mockList);\n        when(selfInstance.containSelf(mockList, selfInstance)).thenReturn(false);\n        \n        List<ServiceInstance> result = instance.getInstances(serviceName);\n        \n        assertNotNull(result, \"Result should not be null\");\n        assertEquals(mockList.size() + 1, result.size(), \"Result list size should be original size plus one (for self instance)\");\n        assertTrue(result.contains(selfInstance), \"Result list should contain the self instance\");\n        \n        // Test the scenario when self instance is already included\n        when(selfInstance.containSelf(mockList, selfInstance)).thenReturn(true);\n        result = instance.getInstances(serviceName);\n        \n        assertEquals(mockList.size(), result.size(), \"Result list size should be equal to original, as self instance should be present\");\n        assertTrue(result.contains(selfInstance), \"Result list should contain the self instance even without adding\");\n    }\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n\n    private final String SELF_SERVICE_NAME = \"selfService\";\n    private final ServiceInstance selfInstance = new ServiceInstance(SELF_SERVICE_NAME, \"selfHost\", 8080);\n    private DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl client;\n\n    @BeforeEach\n    public void setUp() {\n      DiscoveryClient delegate = Mockito.mock(DiscoveryClient.class);\n      client = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n      \n      List<ServiceInstance> existingInstances = Arrays.asList(\n        new ServiceInstance(\"testService1\", \"host1\", 8080),\n        new ServiceInstance(\"testService2\", \"host2\", 8081)\n      );\n      \n      Mockito.when(delegate.getInstances(Mockito.anyString())).thenReturn(existingInstances);\n    }\n\n    @Test\n    public void getInstancesTest() {\n        // Test case when serviceName equals self instance service name and self instance is not part of the returned instances.\n        String serviceName = SELF_SERVICE_NAME;\n        List<ServiceInstance> instances = client.getInstances(serviceName);\n        \n        assertNotNull(instances, \"Instances should not be null\");\n        assertTrue(instances.contains(selfInstance), \"Instances should contain self instance\");\n        assertEquals(instances.get(0), selfInstance, \"Self instance should be the first in the list\");\n\n        // Test case when serviceName does not equal self instance service name.\n        serviceName = \"anotherServiceName\";\n        instances = client.getInstances(serviceName);\n        \n        assertNotNull(instances, \"Instances should not be null\");\n        assertFalse(instances.contains(selfInstance), \"Instances should not contain self instance when service name does not match\");\n\n        // Test to ensure delegate.getInstances is called with the correct service name.\n        Mockito.verify(client.delegate).getInstances(serviceName);\n    }\n    \n    // Other utility methods and mocks can be defined here as needed.\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.Mockito;\nimport java.util.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n\n    private DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator;\n    private DiscoveryClient delegate;\n    private ServiceInstance selfInstance;\n\n    @BeforeEach\n    public void setUp() {\n        delegate = Mockito.mock(DiscoveryClient.class);\n        selfInstance = Mockito.mock(ServiceInstance.class);\n        decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    }\n\n    @Test\n    public void getInstancesTest_whenServiceNameMatchesAndContainsSelf_thenShouldReturnOriginalList() {\n        String serviceName = \"testService\";\n        List<ServiceInstance> originalList = Arrays.asList(selfInstance);\n\n        Mockito.when(selfInstance.getServiceName()).thenReturn(serviceName);\n        Mockito.when(delegate.getInstances(serviceName)).thenReturn(originalList);\n\n        List<ServiceInstance> result = decorator.getInstances(serviceName);\n\n        Mockito.verify(delegate, Mockito.times(1)).getInstances(serviceName);\n        assertSame(originalList, result);\n        assertTrue(result.contains(selfInstance));\n    }\n\n    @Test\n    public void getInstancesTest_whenServiceNameMatchesAndDoesNotContainSelf_thenShouldAddSelfToList() {\n        String serviceName = \"testService\";\n        ServiceInstance otherInstance = Mockito.mock(ServiceInstance.class);\n        List<ServiceInstance> originalList = Arrays.asList(otherInstance);\n\n        Mockito.when(selfInstance.getServiceName()).thenReturn(serviceName);\n        Mockito.when(delegate.getInstances(serviceName)).thenReturn(originalList);\n\n        List<ServiceInstance> result = decorator.getInstances(serviceName);\n\n        Mockito.verify(delegate, Mockito.times(1)).getInstances(serviceName);\n        assertEquals(originalList.size() + 1, result.size());\n        assertTrue(result.contains(selfInstance));\n    }\n\n    @Test\n    public void getInstancesTest_whenServiceNameDoesNotMatch_thenShouldDelegateCall() {\n        String serviceName = \"testService\";\n        String otherServiceName = \"otherService\";\n        List<ServiceInstance> delegateList = new ArrayList<>();\n\n        Mockito.when(selfInstance.getServiceName()).thenReturn(serviceName);\n        Mockito.when(delegate.getInstances(otherServiceName)).thenReturn(delegateList);\n\n        List<ServiceInstance> result = decorator.getInstances(otherServiceName);\n\n        Mockito.verify(delegate, Mockito.times(1)).getInstances(otherServiceName);\n        assertSame(delegateList, result);\n        assertFalse(result.contains(selfInstance));\n    }\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n\n    private final DatabaseDiscoveryClient delegate = mock(DatabaseDiscoveryClient.class);\n    private final ServiceInstance selfInstance = new ServiceInstance(\"selfService\", \"selfHost\", 8080);\n    private final DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl client =\n            new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n\n    @BeforeEach\n    public void setUp() {\n        List<ServiceInstance> mockInstances = new ArrayList<>();\n        mockInstances.add(new ServiceInstance(\"testService\", \"testHost\", 1234));\n\n        when(delegate.getInstances(\"testService\")).thenReturn(mockInstances);\n        when(delegate.getInstances(\"selfService\")).thenReturn(mockInstances);\n    }\n\n    @Test\n    public void getInstancesTest() {\n        List<ServiceInstance> instances = client.getInstances(\"testService\");\n        assertEquals(1, instances.size());\n        assertFalse(containSelf(instances, selfInstance));\n\n        instances = client.getInstances(\"testService\");\n        assertEquals(2, instances.size());\n        assertTrue(containSelf(instances, selfInstance));\n        assertEquals(selfInstance, instances.get(0));\n    }\n\n    @Test\n    public void getInstancesTestWithDifferentService() {\n        List<ServiceInstance> instances = client.getInstances(\"otherService\");\n        assertEquals(0, instances.size());\n    }\n\n    private boolean containSelf(List<ServiceInstance> instances, ServiceInstance selfInstance) {\n        for (ServiceInstance instance : instances) {\n            if (Objects.equals(instance, selfInstance)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.List;\nimport java.util.Arrays;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n\n    private final static String TEST_SERVICE_NAME = \"TestService\";\n    private final ServiceInstance selfInstance = mock(ServiceInstance.class);\n    private final DiscoveryClient delegate = mock(DiscoveryClient.class);\n    private final DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl discoveryClient =\n        new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n\n    @BeforeEach\n    public void setUp() {\n        when(selfInstance.getServiceName()).thenReturn(TEST_SERVICE_NAME);\n    }\n\n    @Test\n    public void getInstances_ContainsSelf() {\n        List<ServiceInstance> mockedServiceInstances = Arrays.asList(selfInstance);\n        when(delegate.getInstances(TEST_SERVICE_NAME)).thenReturn(mockedServiceInstances);\n\n        List<ServiceInstance> result = discoveryClient.getInstances(TEST_SERVICE_NAME);\n        \n        assertSame(mockedServiceInstances, result, \"Should return the same list from delegate\");\n        assertTrue(result.contains(selfInstance), \"The result should contain the self instance.\");\n    }\n\n    @Test\n    public void getInstances_DoesNotContainSelfAndShouldAddSelf() {\n        ServiceInstance otherInstance = mock(ServiceInstance.class);\n        List<ServiceInstance> mockedServiceInstances = Arrays.asList(otherInstance);\n        when(delegate.getInstances(TEST_SERVICE_NAME)).thenReturn(mockedServiceInstances);\n\n        List<ServiceInstance> result = discoveryClient.getInstances(TEST_SERVICE_NAME);\n        \n        assertEquals(mockedServiceInstances.size() + 1, result.size(), \"Should have added the self instance.\");\n        assertTrue(result.contains(selfInstance), \"The result should contain the self instance.\");\n        assertTrue(result.contains(otherInstance), \"The result should contain the other instance.\");\n    }\n\n    @Test\n    public void getInstances_OtherServiceName() {\n        final String otherServiceName = \"OtherService\";\n        List<ServiceInstance> mockedServiceInstances = Arrays.asList(mock(ServiceInstance.class));\n        when(delegate.getInstances(otherServiceName)).thenReturn(mockedServiceInstances);\n\n        List<ServiceInstance> result = discoveryClient.getInstances(otherServiceName);\n        \n        assertSame(mockedServiceInstances, result, \"Should return the same list from delegate for the other service name.\");\n    }\n}"
    ]
}