{
    "project_name": "apollo",
    "file_name": "Env.java",
    "relative_path": "apollo/apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/environment/Env.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.portal.environment",
    "docstring": "/**\n   * add some change to environment name trim and to upper\n   *\n   * @param envName\n   * @return\n   */",
    "source_code": "\nprivate static String getWellFormName(String envName) {\n  if (StringUtils.isBlank(envName)) {\n    return \"\";\n  }\n\n  String envWellFormName = envName.trim().toUpperCase();\n\n  // special case for production in case of typo\n  if (\"PROD\".equals(envWellFormName)) {\n    return Env.PRO.name;\n  }\n\n  // special case that FAT & FWS should map to FAT\n  if (\"FWS\".equals(envWellFormName)) {\n    return Env.FAT.name;\n  }\n\n  return envWellFormName;\n}\n",
    "class_name": "Env",
    "method_name": "getWellFormName",
    "arguments": [
        "String envName"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        // Test for null input\n        assertEquals(\"\", Env.getWellFormName(null), \"The well-formed name of a null input should be an empty string.\");\n        \n        // Test for blank input\n        assertEquals(\"\", Env.getWellFormName(\" \"), \"The well-formed name of a blank input should be an empty string.\");\n        \n        // Test for input with only spaces\n        assertEquals(\"\", Env.getWellFormName(\"   \"), \"The well-formed name of an input with only spaces should be an empty string.\");\n\n        // Test for correct trimming and uppercasing\n        assertEquals(\"DEMO\", Env.getWellFormName(\"  demo \"), \"The well-formed name should be trimmed and uppercased.\");\n\n        // Test for special case for production\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"prod\"), \"The well-formed name should be 'PRO' when input is 'prod'.\");\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"proD\"), \"The well-formed name should be 'PRO' when input is 'proD'.\");\n\n        // Test for special cases that map FWS to FAT\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"FWS\"), \"The well-formed name should be 'FAT' when input is 'FWS'.\");\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"fwS\"), \"The well-formed name should be 'FAT' when input is 'fwS'.\");\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    \n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"\", Env.getWellFormName(null));\n        assertEquals(\"\", Env.getWellFormName(\"\"));\n        assertEquals(\"\", Env.getWellFormName(\"   \"));\n        assertEquals(\"DEV\", Env.getWellFormName(\"dev\"));\n        assertEquals(\"DEV\", Env.getWellFormName(\" dev \"));\n        assertEquals(\"LOCAL\", Env.getWellFormName(\"local\"));\n        assertEquals(\"UAT\", Env.getWellFormName(\"uat\"));\n        assertEquals(\"PRO\", Env.getWellFormName(\"PROD\")); // special case for production\n        assertEquals(\"FAT\", Env.getWellFormName(\"fat\"));\n        assertEquals(\"FAT\", Env.getWellFormName(\"FWS\")); // special case that maps FWS to FAT\n        assertEquals(\"TOOLS\", Env.getWellFormName(\"tools\"));\n        assertEquals(\"UNKNOWN\", Env.getWellFormName(\"unknown\"));\n        // Test a case that is not in the predefined environments\n        assertEquals(\"NONEXISTENTENV\", Env.getWellFormName(\"nonexistentenv\"));\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        // Base case - input string is null or blank\n        assertEquals(\"\", Env.transformEnv(null).getName());\n        assertEquals(\"\", Env.transformEnv(\"\").getName());\n        assertEquals(\"\", Env.transformEnv(\"   \").getName());\n\n        // Test trimming and upper case\n        assertEquals(\"DEMO\", Env.transformEnv(\" demo \").getName());\n        assertEquals(\"DEMO\", Env.transformEnv(\"DEMO\").getName());\n\n        // Special case for PROD\n        assertEquals(Env.PRO.getName(), Env.transformEnv(\"prod\").getName());\n        assertEquals(Env.PRO.getName(), Env.transformEnv(\"PROD\").getName());\n        assertEquals(Env.PRO.getName(), Env.transformEnv(\"ProD\").getName());\n\n        // Special case for FAT\n        assertEquals(Env.FAT.getName(), Env.transformEnv(\"FAT\").getName());\n\n        // Special case for FWS\n        assertEquals(Env.FAT.getName(), Env.transformEnv(\"FWS\").getName());\n\n        // Case where the string does not match any special case or existing environment\n        assertEquals(\"NONEXISTENTENV\", Env.transformEnv(\"NonExistentEnv\").getName());\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    \n    @Test\n    public void getWellFormNameTest() {\n        // Check for null or empty string handling\n        assertEquals(\"\", Env.getWellFormName(null));\n        assertEquals(\"\", Env.getWellFormName(\"\"));\n        assertEquals(\"\", Env.getWellFormName(\" \"));\n        \n        // Check for trimming and upper case conversion\n        assertEquals(\"DEV\", Env.getWellFormName(\" dev \"));\n        assertEquals(\"TEST\", Env.getWellFormName(\"test\"));\n        \n        // Check for production environment special case\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"prod\"));\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"PROD\"));\n        \n        // Check for the special case where \"FWS\" should map to \"FAT\"\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"FWS\"));\n        \n        // Check for non-special cases to ensure they are returned correctly\n        assertEquals(\"UAT\", Env.getWellFormName(\"uat\"));\n        assertEquals(\"LPT\", Env.getWellFormName(\"LPT\"));\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        // Test with null input\n        assertEquals(\"\", Env.getWellFormName(null), \"The well-formed name of a null input should be an empty string.\");\n\n        // Test with empty string\n        assertEquals(\"\", Env.getWellFormName(\"\"), \"The well-formed name of an empty string should be an empty string.\");\n\n        // Test with whitespace input\n        assertEquals(\"\", Env.getWellFormName(\"  \"), \"The well-formed name of whitespace should be an empty string.\");\n\n        // Test with normal env names\n        assertEquals(\"DEV\", Env.getWellFormName(\"dev\"), \"The well-formed name should be in uppercase.\");\n        assertEquals(\"FAT\", Env.getWellFormName(\"fat\"), \"The well-formed name should be in uppercase.\");\n\n        // Test with leading and trailing spaces\n        assertEquals(\"UAT\", Env.getWellFormName(\"  uat  \"), \"The well-formed name should be trimmed and in uppercase.\");\n\n        // Test with special case for PROD environment\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"prod\"), \"The well-formed name of 'prod' should map to the name of Env.PRO.\");\n\n        // Test with special case for FAT and FWS environments\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"fws\"), \"The well-formed name of 'fws' should map to the name of Env.FAT.\");\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n\n    @Test\n    public void getWellFormNameTest() {\n        // Test for null input\n        assertEquals(\"\", Env.getWellFormName(null));\n\n        // Test for empty string input\n        assertEquals(\"\", Env.getWellFormName(\"\"));\n\n        // Test for string with only whitespace\n        assertEquals(\"\", Env.getWellFormName(\" \\t\\n\"));\n\n        // Test for valid environment name without any extra whitespace\n        assertEquals(\"DEV\", Env.getWellFormName(\"dev\"));\n\n        // Test for valid environment name with extra whitespace\n        assertEquals(\"DEV\", Env.getWellFormName(\" dev \"));\n\n        // Test for all-uppercase environment name\n        assertEquals(\"DEV\", Env.getWellFormName(\"DEV\"));\n\n        // Test for mixed-case environment name\n        assertEquals(\"DEV\", Env.getWellFormName(\"dEv\"));\n\n        // Test for special case \"PROD\" typo\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"prod\"));\n\n        // Test for special case that \"FWS\" should map to \"FAT\"\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"fws\"));\n\n        // Test for other environment names that are not special cases\n        assertEquals(\"UAT\", Env.getWellFormName(\"uat\"));\n        assertEquals(\"LPT\", Env.getWellFormName(\"lpt\"));\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        // Test that a null or blank string returns an empty string\n        assertEquals(\"\", Env.getWellFormName(null));\n        assertEquals(\"\", Env.getWellFormName(\"\"));\n        assertEquals(\"\", Env.getWellFormName(\"   \"));\n\n        // Test that env name is trimmed and converted to uppercase\n        assertEquals(\"DEV\", Env.getWellFormName(\" dev \"));\n        assertEquals(\"PRO\", Env.getWellFormName(\"    PROD  \")); // special case for PROD\n        assertEquals(\"FAT\", Env.getWellFormName(\"fat\")); // default mapping\n        assertEquals(\"FAT\", Env.getWellFormName(\"FWS\")); // special case for FWS\n\n        // Test that random string (not a valid Env) returns the same string in uppercase\n        assertEquals(\"RANDOM\", Env.getWellFormName(\"random\"));\n\n        // Test that valid env names are correctly transformed\n        assertEquals(\"LOCAL\", Env.getWellFormName(\"Local\"));\n        assertEquals(\"DEV\", Env.getWellFormName(\"dev\"));\n        assertEquals(\"FAT\", Env.getWellFormName(\"FAT\"));\n        assertEquals(\"UAT\", Env.getWellFormName(\"uat\"));\n        assertEquals(\"PRO\", Env.getWellFormName(\"PRO\"));\n        assertEquals(\"TOOLS\", Env.getWellFormName(\"tools\"));\n\n        // Further tests could include other cases as needed\n    }\n}\n",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    \n    @Test\n    public void getWellFormNameTest() {\n        // Test for null input\n        assertEquals(\"\", Env.getWellFormName(null), \"Well form name should be empty string for null input\");\n        \n        // Test for empty string input\n        assertEquals(\"\", Env.getWellFormName(\"\"), \"Well form name should be empty string for empty input\");\n        \n        // Test for whitespace input\n        assertEquals(\"\", Env.getWellFormName(\"   \"), \"Well form name should be empty string for whitespace input\");\n        \n        // Test for name normalization\n        assertEquals(\"DEV\", Env.getWellFormName(\" dev  \"), \"Well form name should be in uppercase and trimmed\");\n        \n        // Test for special case for \"PROD\" typo\n        assertEquals(Env.PRO.getName(), Env.getWellFormName(\"prod\"), \"Well form name should be the name of PRO env when input is 'prod'\");\n        \n        // Test for special case that FAT & FWS should map to FAT\n        assertEquals(Env.FAT.getName(), Env.getWellFormName(\"fws\"), \"Well form name should be the name of FAT env when input is 'fws'\");\n        \n        // Test for typical case\n        assertEquals(\"UAT\", Env.getWellFormName(\"uat\"), \"Well form name should be the UAT env\");\n        \n        // Test for case sensitivity and trimming\n        assertEquals(\"TOOLS\", Env.getWellFormName(\" tools \"), \"Well form name should be uppercase and trimmed for TOOLS env\");\n        \n        // Test for an input that is not a special case and doesn't exist in STRING_ENV_MAP\n        assertThrows(IllegalArgumentException.class, () -> Env.valueOf(\"DOESNOTEXIST\"), \"Should throw an exception if environment name does not exist\");\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n\n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"\", Env.getWellFormName(null), \"Null should return an empty string\");\n        assertEquals(\"\", Env.getWellFormName(\"\"), \"Empty string should return an empty string\");\n        assertEquals(\"\", Env.getWellFormName(\"   \"), \"Whitespace string should return an empty string\");\n        assertEquals(\"DEV\", Env.getWellFormName(\"dev\"), \"Lowercase env name should be transformed to uppercase\");\n        assertEquals(\"DEV\", Env.getWellFormName(\" DEV \"), \"Env name with surrounding spaces should be trimmed and uppercase\");\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"PROD\"), \"PROD should be corrected to PRO\");\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"FWS\"), \"FWS should be mapped to FAT\");\n        assertEquals(\"UNKNOWN_ENV\", Env.getWellFormName(\"unknown_env\"), \"Unknown env should be returned as is, in uppercase form\");\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n\n    @Test\n    public void getWellFormNameTest() {\n        // Test with a blank environment name\n        assertEquals(\"\", Env.getWellFormName(null), \"A null environment name should return an empty string.\");\n        assertEquals(\"\", Env.getWellFormName(\" \"), \"A blank environment name should return an empty string.\");\n        assertEquals(\"\", Env.getWellFormName(\"\\t\"), \"A whitespace environment name should return an empty string.\");\n\n        // Test with different cases and spaces\n        assertEquals(\"DEV\", Env.getWellFormName(\"  dev  \"), \"A lower case environment name with spaces should be transformed to upper case.\");\n        assertEquals(\"QA\", Env.getWellFormName(\" qa \"), \"A lower case environment name with leading/trailing spaces should be trimmed and upper cased.\");\n        assertEquals(\"STAGING\", Env.getWellFormName(\"StAgInG\"), \"A mixed-case environment name should be transformed to upper case.\");\n\n        // Test the special case for production regardless of typo (\"PROD\" should return \"PRO\")\n        assertEquals(Env.PRO.getName(), Env.getWellFormName(\"Prod\"), \"The 'Prod' typo should return the well-formed 'PRO' environment name.\");\n        assertEquals(Env.PRO.getName(), Env.getWellFormName(\"prod\"), \"The 'prod' typo in lower case should still return the well-formed 'PRO' environment name.\");\n\n        // Test the special case that \"FWS\" should map to \"FAT\"\n        assertEquals(Env.FAT.getName(), Env.getWellFormName(\"FWS\"), \"The 'FWS' environment name should be mapped to 'FAT'.\");\n\n        // Test with a name that is not a special case and not blank\n        String randomEnvName = \"CUSTOM_ENV\";\n        assertEquals(randomEnvName, Env.getWellFormName(randomEnvName), \"A valid non-special environment name should be returned as is.\");\n    }\n}"
    ]
}