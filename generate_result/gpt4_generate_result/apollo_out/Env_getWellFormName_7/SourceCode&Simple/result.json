{
    "project_name": "apollo",
    "file_name": "Env.java",
    "relative_path": "apollo/apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/environment/Env.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.portal.environment",
    "docstring": "/**\n   * add some change to environment name trim and to upper\n   *\n   * @param envName\n   * @return\n   */",
    "source_code": "\nprivate static String getWellFormName(String envName) {\n  if (StringUtils.isBlank(envName)) {\n    return \"\";\n  }\n\n  String envWellFormName = envName.trim().toUpperCase();\n\n  // special case for production in case of typo\n  if (\"PROD\".equals(envWellFormName)) {\n    return Env.PRO.name;\n  }\n\n  // special case that FAT & FWS should map to FAT\n  if (\"FWS\".equals(envWellFormName)) {\n    return Env.FAT.name;\n  }\n\n  return envWellFormName;\n}\n",
    "class_name": "Env",
    "method_name": "getWellFormName",
    "arguments": [
        "String envName"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n\n    // Assume that 'getWellFormName' method is made package-private or public for testing purposes\n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"\", Env.getWellFormName(null), \"Null string should return empty string\");\n        assertEquals(\"\", Env.getWellFormName(\"\"), \"Empty string should return empty string\");\n        assertEquals(\"\", Env.getWellFormName(\"   \"), \"Whitespace string should return empty string\");\n\n        assertEquals(\"DEV\", Env.getWellFormName(\"dev\"), \"Lowercase dev should be converted to uppercase DEV\");\n        assertEquals(\"DEV\", Env.getWellFormName(\"   dev   \"), \"DEV with spaces should be trimmed and converted to uppercase\");\n\n        // Special case for PROD which should return PRO.name\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"PROD\"), \"PROD should return PRO name\");\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"prod\"), \"prod in any case should return PRO name\");\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"   pRoD   \"), \"\\\"   pRoD   \\\" should return PRO name\");\n\n        // Special case for FWS which should return FAT.name\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"FWS\"), \"FWS should return FAT name\");\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"fws\"), \"fws in any case should return FAT name\");\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"   fWs   \"), \"\\\"   fWs   \\\" should return FAT name\");\n\n        // Test for a well-formed name that does not require special mapping\n        assertEquals(\"UAT\", Env.getWellFormName(\"UAT\"), \"UAT should be returned as it is\");\n        assertEquals(\"UAT\", Env.getWellFormName(\"uat\"), \"uat should be converted to UAT\");\n        assertEquals(\"UAT\", Env.getWellFormName(\"   uAt   \"), \"\\\"   uAt   \\\" should return UAT\");\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"\", Env.getWellFormName(null), \"getWellFormName should return an empty string for null input\");\n        assertEquals(\"\", Env.getWellFormName(\"\"), \"getWellFormName should return an empty string for empty input\");\n        assertEquals(\"\", Env.getWellFormName(\"  \"), \"getWellFormName should return an empty string for whitespace input\");\n        assertEquals(\"DEV\", Env.getWellFormName(\" dev \"), \"getWellFormName should return uppercase trimmed name for non-special env input\");\n        assertEquals(Env.PRO.name, Env.getWellFormName(\" proD \"), \"getWellFormName should return Env.PRO.name for 'proD' input\");\n        assertEquals(Env.FAT.name, Env.getWellFormName(\" fWs \"), \"getWellFormName should return Env.FAT.name for 'fWs' input\");\n        assertEquals(\"LPT\", Env.getWellFormName(\"Lpt\"), \"getWellFormName should return 'LPT' for 'Lpt' input\");\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        // Test with null input, expecting empty string\n        assertEquals(\"\", Env.getWellFormName(null), \"Null input should return empty string\");\n\n        // Test with empty string input, expecting empty string\n        assertEquals(\"\", Env.getWellFormName(\"\"), \"Empty input should return empty string\");\n\n        // Test with blank string input, expecting empty string\n        assertEquals(\"\", Env.getWellFormName(\"   \"), \"Blank input should return empty string\");\n\n        // Test with input that has leading/trailing spaces, expecting trimmed upper case\n        assertEquals(\"SOMEENV\", Env.getWellFormName(\" someenv \"), \"Input with spaces should be trimmed and upper case\");\n\n        // Test with input \"PROD\", expecting \"PRO\"\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"PROD\"), \"Input 'PROD' should return 'PRO'\");\n\n        // Test with typo in \"PROD\", expecting \"PRO\"\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"proD\"), \"Typo in 'PROD' should return 'PRO'\");\n\n        // Test with input \"FWS\", expecting \"FAT\"\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"FWS\"), \"Input 'FWS' should return 'FAT'\");\n\n        // Test with normal input that should not be altered, except for being upper case\n        assertEquals(\"DEV\", Env.getWellFormName(\"Dev\"), \"Input should be in upper case\");\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    \n    // Assuming there's a way to access the getWellFormName method, if not, it would require changing the method visibility to package-private or public for testing\n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"\", Env.getWellFormName(null), \"Null environment name should return an empty string\");\n        assertEquals(\"\", Env.getWellFormName(\"\"), \"Empty environment name should return an empty string\");\n        assertEquals(\"\", Env.getWellFormName(\" \"), \"Blank environment name should return an empty string\");\n\n        assertEquals(\"DEVELOPMENT\", Env.getWellFormName(\"development\"), \"Proper formatted non-special env name should be returned in uppercase\");\n        assertEquals(\"DEVELOPMENT\", Env.getWellFormName(\" Development \"), \"Trailing spaces should be trimmed and name returned in uppercase\");\n\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"prod\"), \"Special case for production with lowercase should match 'PRO'\");\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"PROD\"), \"Special case for production with uppercase should match 'PRO'\");\n        assertEquals(Env.PRO.name, Env.getWellFormName(\" Pro \"), \"Special case for production with spaces should match 'PRO'\");\n\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"fat\"), \"Special case for FAT with lowercase should match 'FAT'\");\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"FAT\"), \"Special case for FAT with uppercase should match 'FAT'\");\n        assertEquals(Env.FAT.name, Env.getWellFormName(\" fAt \"), \"Special case for FAT with spaces and mixed case should match 'FAT'\");\n\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"fws\"), \"Special case that FWS maps to FAT should match 'FAT'\");\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"FWS\"), \"Special case that FWS in uppercase maps to FAT should match 'FAT'\");\n        assertEquals(Env.FAT.name, Env.getWellFormName(\" Fws \"), \"Special case that FWS with spaces and mixed case maps to FAT should match 'FAT'\");\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    \n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"DEV\", Env.getWellFormName(\"dev\")); // Test with lowercase\n        assertEquals(\"DEV\", Env.getWellFormName(\" DEV \")); // Test with trailing spaces\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"prod\")); // Test the special case for production\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"PROD\")); // Test case insensitivity for production\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"fat\")); // Normal case for FAT\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"FWS\")); // Special case for FWS\n        assertEquals(\"\", Env.getWellFormName(null)); // Test with null input\n        assertEquals(\"\", Env.getWellFormName(\"\")); // Test with empty string\n        assertEquals(\"\", Env.getWellFormName(\"  \")); // Test with spaces only\n        assertEquals(\"LPT\", Env.getWellFormName(\" LPT \")); // Test with other environments\n        // Add additional test cases as necessary\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class EnvTest {\n\n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"\", Env.getWellFormName(null), \"Null should return an empty string\");\n        assertEquals(\"\", Env.getWellFormName(\"\"), \"Empty string should return an empty string\");\n        assertEquals(\"\", Env.getWellFormName(\"  \"), \"Whitespace should return an empty string\");\n        assertEquals(\"ENV\", Env.getWellFormName(\"  env \"), \"Whitespace and case should be normalized\");\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"prod\"), \"'prod' should map to PRO environment name\");\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"PROD\"), \"'PROD' should map to PRO environment name\");\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"FWS\"), \"'FWS' should map to FAT environment name\");\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"fat\"), \"'fat' should map to FAT environment name\");\n        assertEquals(\"DEV\", Env.getWellFormName(\"DEV\"), \"DEV should remain unchanged\");\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n\n    @Test\n    public void getWellFormNameTest() {\n        // Test case with null input\n        assertEquals(\"\", Env.getWellFormName(null));\n\n        // Test case with an empty string\n        assertEquals(\"\", Env.getWellFormName(\"\"));\n\n        // Test case with whitespace\n        assertEquals(\"\", Env.getWellFormName(\"   \"));\n\n        // Test case with mixed-case input\n        assertEquals(\"DEV\", Env.getWellFormName(\"deV\"));\n\n        // Test case with leading/trailing whitespace\n        assertEquals(\"DEV\", Env.getWellFormName(\" dev \"));\n\n        // Special case for typo in 'PROD'\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"Prod\"));\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"PROD\"));\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"pro\"));\n\n        // Special case that 'FAT' & 'FWS' should both map to 'FAT'\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"FAT\"));\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"fat\"));\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"FWS\"));\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"fws\"));\n\n        // Test case with an unknown environment\n        assertEquals(\"UNKNOWN_ENV\", Env.getWellFormName(\"Unknown_Env\"));\n\n        // Test case for environments that don't have special mapping\n        assertEquals(\"DEV\", Env.getWellFormName(\"DEV\"));\n        assertEquals(\"UAT\", Env.getWellFormName(\"UAT\"));\n        assertEquals(\"LPT\", Env.getWellFormName(\"LPT\"));\n        assertEquals(\"TOOLS\", Env.getWellFormName(\"TOOLS\"));\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        // Test case for null input\n        assertEquals(\"\", Env.getWellFormName(null), \"WellFormName should be empty for null environment name\");\n\n        // Test case for blank input\n        assertEquals(\"\", Env.getWellFormName(\" \"), \"WellFormName should be empty for blank environment name\");\n\n        // Test cases for typical environment names\n        assertEquals(\"DEV\", Env.getWellFormName(\"dev\"), \"WellFormName should be in uppercase for 'dev'\");\n        assertEquals(\"UAT\", Env.getWellFormName(\"UaT\"), \"WellFormName should be in uppercase for 'UaT'\");\n        assertEquals(\"LPT\", Env.getWellFormName(\"lpt\"), \"WellFormName should be in uppercase for 'lpt'\");\n        \n        // Special case for production \"PROD\"\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"prod\"), \"WellFormName should be mapped to Env.PRO.name for 'prod' or variations\");\n        \n        // Special case for \"FWS\" that should map to \"FAT\"\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"FWS\"), \"WellFormName should be mapped to Env.FAT.name for 'FWS'\");\n        \n        // Test case with additional spaces\n        assertEquals(\"TOOLS\", Env.getWellFormName(\"  tools  \"), \"WellFormName should be in uppercase and trimmed for '  tools  '\");\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    \n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"\",  Env.getWellFormName(null), \"Null input should return an empty string.\");\n        assertEquals(\"\", Env.getWellFormName(\"\"), \"Empty string input should return an empty string.\");\n        assertEquals(\"\", Env.getWellFormName(\"   \"), \"Input consisting solely of spaces should return an empty string.\");\n        assertEquals(\"ENV\", Env.getWellFormName(\" env \"), \"Input with leading/trailing spaces should be trimmed and returned in uppercase.\");\n        assertEquals(\"PRO\", Env.getWellFormName(\"prod\"), \"The 'prod' environment should special-case to 'PRO'.\");\n        assertEquals(\"FAT\", Env.getWellFormName(\"fws\"), \"The 'fws' environment should special-case to 'FAT'.\");\n        assertEquals(\"DEV\", Env.getWellFormName(\"dev\"), \"Other cases should simply be returned in uppercase.\");\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n\n    @Test\n    public void getWellFormNameTest() {\n        // Test case for an empty string\n        assertEquals(\"\", Env.getWellFormName(\"\"));\n        \n        // Test case for a null string\n        assertEquals(\"\", Env.getWellFormName(null));\n        \n        // Test case for a string with only whitespace\n        assertEquals(\"\", Env.getWellFormName(\"     \"));\n\n        // Test case with no special cases\n        assertEquals(\"DEVELOPMENT\", Env.getWellFormName(\"  development \"));\n        \n        // Test case for the special \"PROD\" case\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"PrOD\"));\n        \n        // Test case for the special \"FWS\" case, which should map to \"FAT\"\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"  FWS  \"));\n        \n        // Test for a normal input that is not a special case\n        assertEquals(\"LOCAL\", Env.getWellFormName(\"local\"));\n    }\n}"
    ]
}