{
    "project_name": "apollo",
    "file_name": "Env.java",
    "relative_path": "apollo/apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/environment/Env.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.portal.environment",
    "docstring": "/**\n   * add some change to environment name trim and to upper\n   *\n   * @param envName\n   * @return\n   */",
    "source_code": "\nprivate static String getWellFormName(String envName) {\n  if (StringUtils.isBlank(envName)) {\n    return \"\";\n  }\n\n  String envWellFormName = envName.trim().toUpperCase();\n\n  // special case for production in case of typo\n  if (\"PROD\".equals(envWellFormName)) {\n    return Env.PRO.name;\n  }\n\n  // special case that FAT & FWS should map to FAT\n  if (\"FWS\".equals(envWellFormName)) {\n    return Env.FAT.name;\n  }\n\n  return envWellFormName;\n}\n",
    "class_name": "Env",
    "method_name": "getWellFormName",
    "arguments": [
        "String envName"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Env {\n    public static final Env PRO = new Env(\"PRODUCTION\");\n    public static final Env FAT = new Env(\"FAT\");\n    \n    public String name;\n\n    public Env(String name) {\n        this.name = name;\n    }\n}\n\npublic class EnvTest {\n    private static String getWellFormName(String envName) {\n        if (StringUtils.isBlank(envName)) {\n            return \"\";\n        }\n\n        String envWellFormName = envName.trim().toUpperCase();\n\n        // special case for production in case of typo\n        if (\"PROD\".equals(envWellFormName)) {\n            return Env.PRO.name;\n        }\n\n        // special case that FAT & FWS should map to FAT\n        if (\"FWS\".equals(envWellFormName)) {\n            return Env.FAT.name;\n        }\n\n        return envWellFormName;\n    }\n\n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"\", getWellFormName(null), \"Null input should return an empty string\");\n        assertEquals(\"\", getWellFormName(\"\"), \"Empty string input should return an empty string\");\n        assertEquals(\"\", getWellFormName(\"   \"), \"Whitespace input should return an empty string\");\n        assertEquals(\"DEVELOPMENT\", getWellFormName(\"development\"), \"Input 'development' should return 'DEVELOPMENT'\");\n        assertEquals(\"DEVELOPMENT\", getWellFormName(\"  development  \"), \"Input with leading and trailing spaces should return 'DEVELOPMENT'\");\n        assertEquals(\"STAGING\", getWellFormName(\"StAgInG\"), \"Input with mixed case should return 'STAGING'\");\n        assertEquals(Env.PRO.name, getWellFormName(\"PROD\"), \"Input 'PROD' should return the special case for production.\");\n        assertEquals(Env.FAT.name, getWellFormName(\"FAT\"), \"Input 'FAT' should return 'FAT'.\");\n        assertEquals(Env.FAT.name, getWellFormName(\"FWS\"), \"Input 'FWS' should return the special case for FAT.\");\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    \n    // Assuming there is an enum named Env with PRO and FAT members\n    enum Env {\n        PRO(\"Production\"),\n        FAT(\"Feature Acceptance Testing\");\n\n        public final String name;\n\n        Env(String name) {\n            this.name = name;\n        }\n    }\n    \n    // The method to be tested (assuming it is made accessible for testing)\n    private static String getWellFormName(String envName) {\n      if (StringUtils.isBlank(envName)) {\n        return \"\";\n      }\n\n      String envWellFormName = envName.trim().toUpperCase();\n\n      // special case for production in case of typo\n      if (\"PROD\".equals(envWellFormName)) {\n        return Env.PRO.name;\n      }\n\n      // special case that FAT & FWS should map to FAT\n      if (\"FWS\".equals(envWellFormName)) {\n        return Env.FAT.name;\n      }\n\n      return envWellFormName;\n    }\n\n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"\", getWellFormName(null), \"Null string should return an empty string\");\n        assertEquals(\"\", getWellFormName(\" \"), \"Blank string should return an empty string\");\n        assertEquals(\"DEVELOPMENT\", getWellFormName(\"  development \"), \"Whitespace should be trimmed and case transformed to upper\");\n        assertEquals(Env.PRO.name, getWellFormName(\"prod\"), \"'prod' should return the name of the PRO\");\n        assertEquals(Env.PRO.name, getWellFormName(\"PROD\"), \"'PROD' should return the name of the PRO\");\n        assertEquals(Env.FAT.name, getWellFormName(\"fws\"), \"'fws' should return the name of the FAT\");\n        assertEquals(Env.FAT.name, getWellFormName(\"FWS\"), \"'FWS' should return the name of the FAT\");\n        assertEquals(\"STAGE\", getWellFormName(\"stage\"), \"Other cases should return their upper case forms\");\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"\", EnvUtils.getWellFormName(null));\n        assertEquals(\"\", EnvUtils.getWellFormName(\"\"));\n        assertEquals(\"\", EnvUtils.getWellFormName(\"   \"));\n        assertEquals(\"PRO\", EnvUtils.getWellFormName(\"prod\"));\n        assertEquals(\"PRO\", EnvUtils.getWellFormName(\"PROD\"));\n        assertEquals(\"PRO\", EnvUtils.getWellFormName(\" ProD \"));\n        assertEquals(\"FAT\", EnvUtils.getWellFormName(\"fat\"));\n        assertEquals(\"FAT\", EnvUtils.getWellFormName(\"FAT\"));\n        assertEquals(\"FAT\", EnvUtils.getWellFormName(\" FAt \"));\n        assertEquals(\"FAT\", EnvUtils.getWellFormName(\"fws\"));\n        assertEquals(\"FAT\", EnvUtils.getWellFormName(\"FWS\"));\n        assertEquals(\"FAT\", EnvUtils.getWellFormName(\" Fws \"));\n        assertEquals(\"DEV\", EnvUtils.getWellFormName(\"dev\"));\n        assertEquals(\"DEV\", EnvUtils.getWellFormName(\"DEV\"));\n        assertEquals(\"DEV\", EnvUtils.getWellFormName(\" Dev \"));\n        assertEquals(\"TEST\", EnvUtils.getWellFormName(\"test\"));\n        assertEquals(\"TEST\", EnvUtils.getWellFormName(\"TEST\"));\n        assertEquals(\"TEST\", EnvUtils.getWellFormName(\" Test \"));\n        assertEquals(\"UAT\", EnvUtils.getWellFormName(\"uat\"));\n        assertEquals(\"UAT\", EnvUtils.getWellFormName(\"UAT\"));\n        assertEquals(\"UAT\", EnvUtils.getWellFormName(\" Uat \"));\n        // More test cases if necessary...\n    }\n\n    // Assuming there are enum Env and method EnvUtils.getWellFormName available\n    enum Env {\n        PRO(\"PRO\"), FAT(\"FAT\"), DEV(\"DEV\"), TEST(\"TEST\"), UAT(\"UAT\");\n\n        private String name;\n\n        Env(String name) {\n            this.name = name;\n        }\n\n        public String getName() {\n            return name;\n        }\n    }\n\n    private static class EnvUtils {\n        // Assuming this is the actual implementation of the getWellFormName method\n        private static String getWellFormName(String envName) {\n            if (StringUtils.isBlank(envName)) {\n                return \"\";\n            }\n\n            String envWellFormName = envName.trim().toUpperCase();\n\n            // special case for production in case of typo\n            if (\"PROD\".equals(envWellFormName)) {\n                return Env.PRO.getName();\n            }\n\n            // special case that FAT & FWS should map to FAT\n            if (\"FWS\".equals(envWellFormName)) {\n                return Env.FAT.getName();\n            }\n\n            return envWellFormName;\n        }\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n\n    private static String getWellFormName(String envName) {\n        // The actual method should be part of the class being tested.\n        // For this example, it's simply added here for completeness.\n        if (envName == null || envName.trim().isEmpty()) {\n            return \"\";\n        }\n\n        String envWellFormName = envName.trim().toUpperCase();\n  \n        // special case for production in case of typo\n        if (\"PROD\".equals(envWellFormName)) {\n            return Env.PRO.name;\n        }\n  \n        // special case that FAT & FWS should map to FAT\n        if (\"FWS\".equals(envWellFormName)) {\n            return Env.FAT.name;\n        }\n  \n        return envWellFormName;\n    }\n\n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"\", getWellFormName(null), \"Should return an empty string for null input.\");\n        assertEquals(\"\", getWellFormName(\" \"), \"Should return an empty string for blank input.\");\n        assertEquals(\"DEVELOPMENT\", getWellFormName(\" development \"), \"Should return 'DEVELOPMENT' for ' development '.\");\n        assertEquals(Env.PRO.name, getWellFormName(\"prod\"), \"Should return 'PRO' for 'prod'.\");\n        assertEquals(Env.PRO.name, getWellFormName(\"PROD\"), \"Should return 'PRO' for 'PROD'.\");\n        assertEquals(Env.FAT.name, getWellFormName(\"FAT\"), \"Should return 'FAT' for 'FAT'.\");\n        assertEquals(Env.FAT.name, getWellFormName(\"FWS\"), \"Should return 'FAT' for 'FWS'.\");\n        assertEquals(\"STAGING\", getWellFormName(\"staging\"), \"Should return 'STAGING' for 'staging'.\");\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n\n    @Test\n    public void getWellFormNameTest() {\n        // Test for empty input\n        assertEquals(\"\", EnvUtil.getWellFormName(\"  \"));\n        assertEquals(\"\", EnvUtil.getWellFormName(null));\n        \n        // Test for normal input\n        assertEquals(\"DEVELOPMENT\", EnvUtil.getWellFormName(\"development\"));\n        assertEquals(\"DEVELOPMENT\", EnvUtil.getWellFormName(\" Development \"));\n        \n        // Test for special cases\n        assertEquals(Env.PRO.name, EnvUtil.getWellFormName(\"prod\"));\n        assertEquals(Env.PRO.name, EnvUtil.getWellFormName(\"pRoD  \"));\n        assertEquals(Env.FAT.name, EnvUtil.getWellFormName(\"fws\"));\n        assertEquals(Env.FAT.name, EnvUtil.getWellFormName(\" FWS \"));\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n\n    @Test\n    public void getWellFormNameTest() {\n        // Test with null input\n        assertEquals(\"\", Env.getWellFormName(null));\n\n        // Test with empty string\n        assertEquals(\"\", Env.getWellFormName(\"\"));\n\n        // Test with whitespaces only\n        assertEquals(\"\", Env.getWellFormName(\"  \"));\n\n        // Test with a regular environment name\n        assertEquals(\"DEVELOPMENT\", Env.getWellFormName(\"development\"));\n\n        // Test with leading and trailing whitespaces\n        assertEquals(\"DEVELOPMENT\", Env.getWellFormName(\"  development  \"));\n\n        // Test with uppercase input\n        assertEquals(\"STAGING\", Env.getWellFormName(\"STAGING\"));\n\n        // Test correction for PROD (special case)\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"prod\"));\n\n        // Test correction for PROD with typo (special case)\n        assertEquals(Env.PRO.name, Env.getWellFormName(\"PROd\"));\n\n        // Test correction for FAT mapping - FWS to FAT (special case)\n        assertEquals(Env.FAT.name, Env.getWellFormName(\"FWS\"));\n    }\n\n    /* Since Env.PRO and Env.FAT are used within the getWellFormName method,\n       these enums should be defined somewhere in the code.\n       Assuming they are defined like this:\n\n       public enum Env {\n           PRO(\"PRODUCTION\"),\n           FAT(\"FAT\");\n\n           public final String name;\n\n           Env(String name) {\n               this.name = name;\n           }\n       }\n    */\n\n    // Add additional code or helpers depending on actual code structure.\n    // The above Enum is written based on assumption as it is not defined in the provided code snippet.\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    \n    @Test\n    public void getWellFormNameTest() {\n        // Test null input\n        assertEquals(\"\", EnvUtils.getWellFormName(null), \"Null input should return empty string\");\n\n        // Test empty string input\n        assertEquals(\"\", EnvUtils.getWellFormName(\"\"), \"Empty string should return empty string\");\n\n        // Test blank string input with spaces\n        assertEquals(\"\", EnvUtils.getWellFormName(\"   \"), \"Blank string input should return empty string\");\n\n        // Test normal environment name without special case\n        assertEquals(\"DEV\", EnvUtils.getWellFormName(\"dev\"), \"Lowercase dev should be converted to uppercase DEV\");\n\n        // Test trim and uppercase\n        assertEquals(\"STAGE\", EnvUtils.getWellFormName(\" stage \"), \"Environment name with spaces should be trimmed and converted to uppercase\");\n\n        // Test special case for \"PROD\"\n        assertEquals(Env.PRO.name, EnvUtils.getWellFormName(\"proD\"), \"'PROD' special case should return 'PRO'\");\n\n        // Test special case for \"FWS\" that should map to \"FAT\"\n        assertEquals(Env.FAT.name, EnvUtils.getWellFormName(\"fWs\"), \"'FWS' special case should map to 'FAT'\");\n\n        // Test non-special case that is already in uppercase\n        assertEquals(\"TEST\", EnvUtils.getWellFormName(\"TEST\"), \"Uppercase TEST should remain uppercase\");\n    }\n    \n    // Assume these enums exist per the context provided by the original Java method\n    enum Env {\n        PRO(\"PRO\"),\n        FAT(\"FAT\");\n\n        public final String name;\n\n        Env(String name) {\n            this.name = name;\n        }\n    }\n    \n    // Utility class placeholder (assuming it exists in the same package)\n    // with getWellFormName method akin to the source code provided.\n    static class EnvUtils {\n        static String getWellFormName(String envName) {\n            // Existing source code logic here...\n        }\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass EnvTest {\n\n    // Assuming that a static helper class Env exists with String constants for name\n    static class Env {\n        static final Env PRO = new Env(\"PRODUCTION\");\n        static final Env FAT = new Env(\"FAT\");\n\n        String name;\n\n        public Env(String name) {\n            this.name = name;\n        }\n    }\n\n    @Test\n    public void getWellFormNameTest() {\n        // Test with null input\n        assertEquals(\"\", YourClassName.getWellFormName(null));\n\n        // Test with blank string\n        assertEquals(\"\", YourClassName.getWellFormName(\" \"));\n\n        // Test with normal input should return uppercase version\n        assertEquals(\"DEVELOPMENT\", YourClassName.getWellFormName(\"development\"));\n\n        // Test with leading and trailing whitespaces\n        assertEquals(\"STAGING\", YourClassName.getWellFormName(\" staging \"));\n\n        // Test with PROD special case\n        assertEquals(Env.PRO.name, YourClassName.getWellFormName(\"ProD\"));\n\n        // Test with FWS special case\n        assertEquals(Env.FAT.name, YourClassName.getWellFormName(\"FWS\"));\n    }\n\n    // Assuming that the following method is available in YourClassName where you implement getWellFormName\n    private static String getWellFormName(String envName) {\n        // ... (implement the actual method here)\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n\n    @Test\n    public void getWellFormNameTest() {\n        // Assuming Env.PRO.name equals \"PROD\" and Env.FAT.name equals \"FAT\"\n        assertEquals(\"PROD\", Env.getWellFormName(\"PRO\"));\n        assertEquals(\"PROD\", Env.getWellFormName(\"pro\"));\n        assertEquals(\"PROD\", Env.getWellFormName(\"   PRO   \"));\n        assertEquals(\"PROD\", Env.getWellFormName(\"Prod\"));\n        assertEquals(\"PROD\", Env.getWellFormName(\"prod\"));\n        \n        assertEquals(\"FAT\", Env.getWellFormName(\"FAT\"));\n        assertEquals(\"FAT\", Env.getWellFormName(\"fat\"));\n        assertEquals(\"FAT\", Env.getWellFormName(\"   FAT   \"));\n        assertEquals(\"FAT\", Env.getWellFormName(\"FWS\"));\n        assertEquals(\"FAT\", Env.getWellFormName(\"fws\"));\n        \n        assertEquals(\"\", Env.getWellFormName(\"\"));\n        assertEquals(\"\", Env.getWellFormName(\"   \"));\n        assertEquals(\"\", Env.getWellFormName(null));\n        \n        assertEquals(\"DEV\", Env.getWellFormName(\"DEV\"));\n        assertEquals(\"DEV\", Env.getWellFormName(\"dev\"));\n        assertEquals(\"DEV\", Env.getWellFormName(\"   dev   \"));\n    }\n\n    // Utility method needed since getWellFormName is private.\n    // Modify the visibility of getWellFormName if necessary.\n    private static String getWellFormName(String envName) {\n        // Insert the actual implementation here\n        return \"\"; // Placeholder for the actual method logic\n    }\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n\n    private static String getWellFormName(String envName) {\n      if (StringUtils.isBlank(envName)) {\n        return \"\";\n      }\n\n      String envWellFormName = envName.trim().toUpperCase();\n\n      // special case for production in case of typo\n      if (\"PROD\".equals(envWellFormName)) {\n        return Env.PRO.name;\n      }\n\n      // special case that FAT & FWS should map to FAT\n      if (\"FWS\".equals(envWellFormName)) {\n        return Env.FAT.name;\n      }\n\n      return envWellFormName;\n    }\n\n    enum Env {\n      PRO(\"PRODUCTION\"),\n      FAT(\"FAT\");\n\n      public final String name;\n\n      Env(String name) {\n          this.name = name;\n      }\n    }\n\n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"\", getWellFormName(null), \"Should return empty string for null input.\");\n        assertEquals(\"\", getWellFormName(\" \"), \"Should return empty string for blank string input.\");\n        assertEquals(\"ENVIRONMENT\", getWellFormName(\"  environment \"), \"Should return a trimmed uppercase string.\");\n        assertEquals(Env.PRO.name, getWellFormName(\"proD\"), \"Should return 'PRODUCTION' for 'proD'.\");\n        assertEquals(Env.PRO.name, getWellFormName(\"pRod\"), \"Should return 'PRODUCTION' for 'pRod'.\");\n        assertEquals(Env.FAT.name, getWellFormName(\"Fat\"), \"Should return 'FAT' for 'Fat'.\");\n        assertEquals(Env.FAT.name, getWellFormName(\"fwS\"), \"Should return 'FAT' for 'fwS' due to special case.\");\n    }\n}"
    ]
}