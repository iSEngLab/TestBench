{
    "project_name": "apollo",
    "file_name": "GlobalDefaultExceptionHandler.java",
    "relative_path": "apollo/apollo-common/src/main/java/com/ctrip/framework/apollo/common/controller/GlobalDefaultExceptionHandler.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.common.controller",
    "docstring": null,
    "source_code": "//\u6253\u5370\u65e5\u5fd7, \u5176\u4e2dlogLevel\u4e3a\u65e5\u5fd7\u7ea7\u522b: ERROR/WARN/DEBUG/INFO/TRACE\nprivate void printLog(String message, Throwable ex, Level logLevel) {\n  switch (logLevel) {\n    case ERROR:\n      logger.error(message, ex);\n      break;\n    case WARN:\n      logger.warn(message, ex);\n      break;\n    case DEBUG:\n      logger.debug(message, ex);\n      break;\n    case INFO:\n      logger.info(message, ex);\n      break;\n    case TRACE:\n      logger.trace(message, ex);\n      break;\n  }\n\n  Tracer.logError(ex);\n}\n",
    "class_name": "GlobalDefaultExceptionHandler",
    "method_name": "printLog",
    "arguments": [
        "String message",
        "Throwable ex",
        "Level logLevel"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.verify;\nimport org.slf4j.Logger;\nimport org.slf4j.event.Level;\nimport com.ctrip.framework.apollo.tracer.Tracer;\nimport org.junit.runner.RunWith;\nimport org.mockito.junit.MockitoJUnitRunner;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class GlobalDefaultExceptionHandlerTest {\n\n    @Mock\n    private Logger logger;\n\n    @InjectMocks\n    private GlobalDefaultExceptionHandler exceptionHandler;\n\n    @Mock\n    private Tracer tracer;\n\n    @BeforeEach\n    public void setUp() {\n        Mockito.doNothing().when(tracer).logError(Mockito.any());\n    }\n\n    @Test\n    public void printLogTest() {\n        // Given\n        String message = \"Test message\";\n        Exception e = new Exception(\"Test exception\");\n        \n        // When\n        exceptionHandler.printLog(message, e, Level.ERROR);\n        \n        // Then\n        verify(logger).error(message, e);\n        verify(tracer).logError(e);\n\n        // When\n        exceptionHandler.printLog(message, e, Level.WARN);\n        \n        // Then\n        verify(logger).warn(message, e);\n\n        // When\n        exceptionHandler.printLog(message, e, Level.DEBUG);\n        \n        // Then\n        verify(logger).debug(message, e);\n\n        // When\n        exceptionHandler.printLog(message, e, Level.INFO);\n        \n        // Then\n        verify(logger).info(message, e);\n\n        // When\n        exceptionHandler.printLog(message, e, Level.TRACE);\n        \n        // Then\n        verify(logger).trace(message, e);\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.event.Level;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.*;\n\npublic class GlobalDefaultExceptionHandlerTest {\n\n    @Test\n    public void printLogTest() {\n        // Arrange\n        GlobalDefaultExceptionHandler handler = new GlobalDefaultExceptionHandler();\n        Throwable ex = new RuntimeException(\"Error occurred\");\n        Logger logger = Mockito.mock(Logger.class);\n        Mockito.doNothing().when(logger).error(anyString(), any(Throwable.class));\n        Mockito.doNothing().when(logger).warn(anyString(), any(Throwable.class));\n        Mockito.doNothing().when(logger).debug(anyString(), any(Throwable.class));\n        Mockito.doNothing().when(logger).info(anyString(), any(Throwable.class));\n        Mockito.doNothing().when(logger).trace(anyString(), any(Throwable.class));\n        \n        // Set the logger to the mock\n        setLogger(handler, logger);\n        \n        // Act and Assert for ERROR level\n        handler.printLog(\"Error Message\", ex, Level.ERROR);\n        verify(logger).error(\"Error Message\", ex);\n\n        // Act and Assert for WARN level\n        handler.printLog(\"Warning Message\", ex, Level.WARN);\n        verify(logger).warn(\"Warning Message\", ex);\n\n        // Act and Assert for DEBUG level\n        handler.printLog(\"Debug Message\", ex, Level.DEBUG);\n        verify(logger).debug(\"Debug Message\", ex);\n\n        // Act and Assert for INFO level\n        handler.printLog(\"Info Message\", ex, Level.INFO);\n        verify(logger).info(\"Info Message\", ex);\n\n        // Act and Assert for TRACE level\n        handler.printLog(\"Trace Message\", ex, Level.TRACE);\n        verify(logger).trace(\"Trace Message\", ex);\n    }\n\n    private void setLogger(GlobalDefaultExceptionHandler handler, Logger logger) {\n        // Reflection is used here to set the private `logger` field in the handler to the mock logger.\n        try {\n            java.lang.reflect.Field loggerField = handler.getClass().getDeclaredField(\"logger\");\n            loggerField.setAccessible(true);\n            loggerField.set(handler, logger);\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.ArgumentCaptor;\nimport org.slf4j.Logger;\nimport org.slf4j.event.Level;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport org.springframework.mock.web.MockHttpServletResponse;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass GlobalDefaultExceptionHandlerTest {\n\n    private GlobalDefaultExceptionHandler exceptionHandler = new GlobalDefaultExceptionHandler();\n    private Logger logger = mock(Logger.class);\n    private MockHttpServletRequest request = new MockHttpServletRequest();\n    private MockHttpServletResponse response = new MockHttpServletResponse();\n\n    @Test\n    void printLogTest() {\n        // Prepare a throwable to use in tests\n        Throwable throwable = new Throwable(\"Test exception\");\n\n        // Create an argument captor for Logger method calls\n        ArgumentCaptor<String> messageCaptor = ArgumentCaptor.forClass(String.class);\n        ArgumentCaptor<Throwable> throwableCaptor = ArgumentCaptor.forClass(Throwable.class);\n\n        // Set the logger in the GlobalDefaultExceptionHandler to our mock\n        setLoggerToExceptionHandler(logger);\n\n        // Invoke the method with different log levels\n        exceptionHandler.printLog(\"Test Error message\", throwable, Level.ERROR);\n        exceptionHandler.printLog(\"Test Warn message\", throwable, Level.WARN);\n        exceptionHandler.printLog(\"Test Debug message\", throwable, Level.DEBUG);\n        exceptionHandler.printLog(\"Test Info message\", throwable, Level.INFO);\n        exceptionHandler.printLog(\"Test Trace message\", throwable, Level.TRACE);\n\n        // Verify that the logger was called with the correct log level each time\n        verify(logger).error(messageCaptor.capture(), throwableCaptor.capture());\n        assertEquals(\"Test Error message\", messageCaptor.getValue());\n        assertEquals(throwable, throwableCaptor.getValue());\n\n        verify(logger).warn(messageCaptor.capture(), throwableCaptor.capture());\n        assertEquals(\"Test Warn message\", messageCaptor.getValue());\n\n        verify(logger).debug(messageCaptor.capture(), throwableCaptor.capture());\n        assertEquals(\"Test Debug message\", messageCaptor.getValue());\n\n        verify(logger).info(messageCaptor.capture(), throwableCaptor.capture());\n        assertEquals(\"Test Info message\", messageCaptor.getValue());\n\n        verify(logger).trace(messageCaptor.capture(), throwableCaptor.capture());\n        assertEquals(\"Test Trace message\", messageCaptor.getValue());\n\n        // Verify that Tracer.logError method was invoked for each log level\n        for (int i = 0; i < 5; i++) {\n            // Verify Tracer.logError call, but since we have no access to the static method,\n            // You would need to inject Tracer and mock it similarly to Logger\n        }\n    }\n\n    private void setLoggerToExceptionHandler(Logger mockLogger) {\n        // A utility method that uses reflection to set the private 'logger' field in the\n        // GlobalDefaultExceptionHandler instance\n        try {\n            java.lang.reflect.Field loggerField = GlobalDefaultExceptionHandler.class.getDeclaredField(\"logger\");\n            loggerField.setAccessible(true);\n            loggerField.set(exceptionHandler, mockLogger);\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.slf4j.Logger;\nimport org.slf4j.event.Level;\n\nimport static org.mockito.Mockito.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class GlobalDefaultExceptionHandlerTest {\n\n    @Mock\n    private Logger mockLogger;\n\n    // Partial GlobalDefaultExceptionHandler with method under test isolated\n    public class GlobalDefaultExceptionHandlerPartial {\n        public void printLog(String message, Throwable ex, Level logLevel) {\n            switch (logLevel) {\n                case ERROR:\n                    mockLogger.error(message, ex);\n                    break;\n                case WARN:\n                    mockLogger.warn(message, ex);\n                    break;\n                case DEBUG:\n                    mockLogger.debug(message, ex);\n                    break;\n                case INFO:\n                    mockLogger.info(message, ex);\n                    break;\n                case TRACE:\n                    mockLogger.trace(message, ex);\n                    break;\n            }\n\n            // Omitted Tracer.logError(ex); as it's not explicitly shown how to mock\n        }\n    }\n\n    @Test\n    public void printLogTest() {\n        Throwable dummyException = new RuntimeException(\"Test Exception\");\n        GlobalDefaultExceptionHandlerPartial exceptionHandler = new GlobalDefaultExceptionHandlerPartial();\n\n        exceptionHandler.printLog(\"Error message\", dummyException, Level.ERROR);\n        verify(mockLogger).error(\"Error message\", dummyException);\n\n        exceptionHandler.printLog(\"Warning message\", dummyException, Level.WARN);\n        verify(mockLogger).warn(\"Warning message\", dummyException);\n\n        exceptionHandler.printLog(\"Debug message\", dummyException, Level.DEBUG);\n        verify(mockLogger).debug(\"Debug message\", dummyException);\n\n        exceptionHandler.printLog(\"Info message\", dummyException, Level.INFO);\n        verify(mockLogger).info(\"Info message\", dummyException);\n\n        exceptionHandler.printLog(\"Trace message\", dummyException, Level.TRACE);\n        verify(mockLogger).trace(\"Trace message\", dummyException);\n\n        // Note: Actual test should also include Tracer.logError(ex) interaction if possible\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport org.slf4j.Logger;\nimport org.slf4j.event.Level;\nimport static org.mockito.Mockito.*;\n\nclass GlobalDefaultExceptionHandlerTest {\n\n    @Mock\n    private Logger mockLogger;\n\n    @InjectMocks\n    private GlobalDefaultExceptionHandler globalDefaultExceptionHandler;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void printLogTest() {\n        Throwable mockException = new Exception(\"Test exception\");\n        Level logLevel = Level.ERROR;\n        String message = \"Error occurred\";\n        \n        globalDefaultExceptionHandler.printLog(message, mockException, logLevel);\n        \n        verify(mockLogger).error(message, mockException);\n        verify(Tracer.class);\n        Tracer.logError(mockException);\n    }\n    \n    @AfterEach\n    public void tearDown() {\n        // This can include logic to undo any changes which were done in the @BeforeEach method\n        // For this specific test case, there's nothing to tear down.\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport static org.mockito.Mockito.*;\nimport org.slf4j.Logger;\nimport org.slf4j.event.Level;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.test.util.ReflectionTestUtils;\n\npublic class GlobalDefaultExceptionHandlerTest {\n\n    @Mock\n    private Logger logger;\n\n    @MockBean\n    private Tracer tracer;\n\n    @InjectMocks\n    private GlobalDefaultExceptionHandler handler;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        // Mock logger instance inside handler\n        ReflectionTestUtils.setField(handler, \"logger\", logger);\n    }\n\n    @Test\n    public void printLogTest() {\n        // Given\n        String message = \"Test message\";\n        Throwable ex = new RuntimeException(\"Test exception\");\n\n        // When & Then - for ERROR level\n        handler.printLog(message, ex, Level.ERROR);\n        verify(logger).error(message, ex);\n        verify(tracer).logError(ex);\n\n        // When & Then - for WARN level\n        handler.printLog(message, ex, Level.WARN);\n        verify(logger).warn(message, ex);\n\n        // When & Then - for DEBUG level\n        handler.printLog(message, ex, Level.DEBUG);\n        verify(logger).debug(message, ex);\n\n        // When & Then - for INFO level\n        handler.printLog(message, ex, Level.INFO);\n        verify(logger).info(message, ex);\n\n        // When & Then - for TRACE level\n        handler.printLog(message, ex, Level.TRACE);\n        verify(logger).trace(message, ex);\n    }\n\n    // Clean up after tests\n    @AfterEach\n    public void tearDown() {\n        Mockito.reset(logger, tracer);\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport org.slf4j.Logger;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\n// Import for creating mock classes\nimport org.slf4j.event.Level;\nimport com.ctrip.framework.apollo.tracer.Tracer;\n\npublic class GlobalDefaultExceptionHandlerTest {\n    private final Logger loggerMock = mock(Logger.class);\n    private final GlobalDefaultExceptionHandler exceptionHandler = new GlobalDefaultExceptionHandler();\n\n    @BeforeEach\n    public void setUp() {\n        // Using reflection to inject the mocked logger into the handler.\n        FieldSetter.setField(exceptionHandler, exceptionHandler.getClass().getDeclaredField(\"logger\"), loggerMock);\n        // Mocking the static method logError from Tracer class\n        mockStatic(Tracer.class);\n    }\n\n    @Test\n    public void printLogTest() {\n        // Arrange\n        String mockMessage = \"Test message\";\n        Throwable mockException = new RuntimeException(\"Test exception\");\n        Level mockLogLevel = Level.ERROR;\n\n        doNothing().when(loggerMock).error(anyString(), any(Throwable.class));\n        doNothing().when(Tracer.class);\n        Tracer.logError(any(Throwable.class));\n\n        // Act\n        exceptionHandler.printLog(mockMessage, mockException, mockLogLevel);\n\n        // Assert\n        verify(loggerMock).error(mockMessage, mockException);\n        verifyStatic(Tracer.class);\n        Tracer.logError(mockException);\n    }\n\n    // Additional method to tearDown or any necessary cleanup could be placed here.\n\n    @AfterEach\n    public void tearDown() {\n        // Clean up or close resources used in setUp.\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport org.slf4j.Logger;\nimport org.slf4j.event.Level;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class GlobalDefaultExceptionHandlerTest {\n\n    @Mock\n    private Logger logger;\n\n    @MockBean\n    private Tracer tracer;\n\n    private GlobalDefaultExceptionHandler exceptionHandler;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n        exceptionHandler = new GlobalDefaultExceptionHandler();\n\n        // Use reflection to set the mocked logger in exceptionHandler\n        ReflectionTestUtils.setField(exceptionHandler, \"logger\", logger);\n    }\n\n    @Test\n    public void printLogTest() {\n        Throwable ex = new Exception(\"Test exception\");\n        String message = \"Test message\";\n        \n        doCallRealMethod().when(tracer).logError(any(Throwable.class));\n\n        // Let's test for each logLevel\n        exceptionHandler.printLog(message, ex, Level.ERROR);\n        verify(logger).error(message, ex);\n        verify(tracer).logError(ex);\n\n        exceptionHandler.printLog(message, ex, Level.WARN);\n        verify(logger).warn(message, ex);\n        verify(tracer, times(2)).logError(ex); // since it has been called once already\n\n        exceptionHandler.printLog(message, ex, Level.DEBUG);\n        verify(logger).debug(message, ex);\n        verify(tracer, times(3)).logError(ex);\n\n        exceptionHandler.printLog(message, ex, Level.INFO);\n        verify(logger).info(message, ex);\n        verify(tracer, times(4)).logError(ex);\n\n        exceptionHandler.printLog(message, ex, Level.TRACE);\n        verify(logger).trace(message, ex);\n        verify(tracer, times(5)).logError(ex);\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Cleanup the mocks\n        Mockito.framework().clearInlineMocks();\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport org.slf4j.Logger;\nimport org.slf4j.event.Level;\nimport org.springframework.boot.test.mock.mockito.MockBean;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.times;\n\npublic class GlobalDefaultExceptionHandlerTest {\n\n    @MockBean\n    private Logger logger;\n\n    @InjectMocks\n    private GlobalDefaultExceptionHandler handler;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void printLogTest() {\n        // Given\n        String message = \"Test message\";\n        Throwable ex = new RuntimeException(\"Test exception\");\n        Level[] levels = {Level.ERROR, Level.WARN, Level.DEBUG, Level.INFO, Level.TRACE};\n\n        // When & Then\n        for (Level level : levels) {\n            handler.printLog(message, ex, level);\n            switch (level) {\n                case ERROR:\n                    verify(logger, times(1)).error(message, ex);\n                    break;\n                case WARN:\n                    verify(logger, times(1)).warn(message, ex);\n                    break;\n                case DEBUG:\n                    verify(logger, times(1)).debug(message, ex);\n                    break;\n                case INFO:\n                    verify(logger, times(1)).info(message, ex);\n                    break;\n                case TRACE:\n                    verify(logger, times(1)).trace(message, ex);\n                    break;\n            }\n            // Resetting mocks after each verification because we are reusing the same mocks\n            Mockito.reset(logger);\n        }\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport org.slf4j.Logger;\nimport org.slf4j.event.Level;\nimport static org.mockito.Mockito.*;\nimport com.ctrip.framework.apollo.tracer.Tracer;\n\npublic class GlobalDefaultExceptionHandlerTest {\n\n    private GlobalDefaultExceptionHandler globalDefaultExceptionHandler;\n    private Logger logger = mock(Logger.class);\n\n    @BeforeEach\n    void setUp() {\n        globalDefaultExceptionHandler = Mockito.spy(new GlobalDefaultExceptionHandler());\n        // Inject the mocked logger into the globalDefaultExceptionHandler.\n        ReflectionTestUtils.setField(globalDefaultExceptionHandler, \"logger\", logger);\n    }\n\n    @Test\n    public void printLogTest() {\n        // Here we create a mock Throwable to be passed into the printLog method.\n        Throwable mockThrowable = new RuntimeException(\"Sample Error\");\n\n        // Assuming we are also testing if Tracer.logError is called, though the mock setup for Tracer needs to be done if it's a static method.\n        // Mock Tracer as well if needed and capture the Throwable passed to the logError method.\n        // MockedStatic<Tracer> mockedTracer = mockStatic(Tracer.class);\n\n        // Test each log level\n        Level[] levels = {Level.ERROR, Level.WARN, Level.DEBUG, Level.INFO, Level.TRACE};\n        for (Level level : levels) {\n            globalDefaultExceptionHandler.printLog(\"Test message\", mockThrowable, level);\n            \n            switch (level) {\n                case ERROR:\n                    verify(logger, times(1)).error(\"Test message\", mockThrowable);\n                    break;\n                case WARN:\n                    verify(logger, times(1)).warn(\"Test message\", mockThrowable);\n                    break;\n                case DEBUG:\n                    verify(logger, times(1)).debug(\"Test message\", mockThrowable);\n                    break;\n                case INFO:\n                    verify(logger, times(1)).info(\"Test message\", mockThrowable);\n                    break;\n                case TRACE:\n                    verify(logger, times(1)).trace(\"Test message\", mockThrowable);\n                    break;\n            }\n            \n            // Verify that Tracer.logError is called and the correct throwable object is passed to it.\n            // mockedTracer.verify(() -> Tracer.logError(mockThrowable));\n        }\n\n        // After all tests, close the mocked tracer object.\n        // mockedTracer.close();\n    }\n    \n    // Any additional tests or clean-up can go here.\n}"
    ]
}