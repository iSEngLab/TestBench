{
    "project_name": "apollo",
    "file_name": "GlobalDefaultExceptionHandler.java",
    "relative_path": "apollo/apollo-common/src/main/java/com/ctrip/framework/apollo/common/controller/GlobalDefaultExceptionHandler.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.common.controller",
    "docstring": null,
    "source_code": "//\u6253\u5370\u65e5\u5fd7, \u5176\u4e2dlogLevel\u4e3a\u65e5\u5fd7\u7ea7\u522b: ERROR/WARN/DEBUG/INFO/TRACE\nprivate void printLog(String message, Throwable ex, Level logLevel) {\n  switch (logLevel) {\n    case ERROR:\n      logger.error(message, ex);\n      break;\n    case WARN:\n      logger.warn(message, ex);\n      break;\n    case DEBUG:\n      logger.debug(message, ex);\n      break;\n    case INFO:\n      logger.info(message, ex);\n      break;\n    case TRACE:\n      logger.trace(message, ex);\n      break;\n  }\n\n  Tracer.logError(ex);\n}\n",
    "class_name": "GlobalDefaultExceptionHandler",
    "method_name": "printLog",
    "arguments": [
        "String message",
        "Throwable ex",
        "Level logLevel"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport org.slf4j.Logger;\nimport org.slf4j.event.Level;\n\npublic class GlobalDefaultExceptionHandlerTest {\n    \n    private GlobalDefaultExceptionHandler defaultExceptionHandler;\n    private Logger mockLogger;\n    \n    // Set up the necessary mocks and objects before running tests\n    @BeforeEach\n    void setUp() {\n        mockLogger = spy(LoggerFactory.getLogger(GlobalDefaultExceptionHandler.class));\n        defaultExceptionHandler = new GlobalDefaultExceptionHandler() {\n            public void printLog(String message, Throwable ex, Level logLevel) {\n                super.printLog(message, ex, logLevel);\n            }\n        };\n    }\n    \n    @Test\n    public void printLogTest() {\n        // Arrange\n        Throwable mockThrowable = new Throwable();\n        String testMessage = \"Test Log Message\";\n        \n        // Act\n        defaultExceptionHandler.printLog(testMessage, mockThrowable, Level.ERROR);\n        \n        // Assert\n        verify(mockLogger).error(testMessage, mockThrowable);\n        defaultExceptionHandler.printLog(testMessage, mockThrowable, Level.WARN);\n        verify(mockLogger).warn(testMessage, mockThrowable);\n        defaultExceptionHandler.printLog(testMessage, mockThrowable, Level.DEBUG);\n        verify(mockLogger).debug(testMessage, mockThrowable);\n        defaultExceptionHandler.printLog(testMessage, mockThrowable, Level.INFO);\n        verify(mockLogger).info(testMessage, mockThrowable);\n        defaultExceptionHandler.printLog(testMessage, mockThrowable, Level.TRACE);\n        verify(mockLogger).trace(testMessage, mockThrowable);\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.*;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport static org.mockito.ArgumentMatchers.*;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.times;\n\nimport org.slf4j.Logger;\nimport org.slf4j.event.Level;\n\n@ExtendWith(MockitoExtension.class)\npublic class GlobalDefaultExceptionHandlerTest {\n\n    @Mock\n    private Logger mockLogger;\n    \n    @Mock\n    private Tracer mockTracer;\n\n    @InjectMocks\n    private GlobalDefaultExceptionHandler globalDefaultExceptionHandler;\n\n    @Test\n    public void printLogTest() {\n        Throwable dummyException = new RuntimeException(\"Dummy exception for testing\");\n\n        // Inject the mocked logger and tracer into the singleton classes (if applicable).\n        // Since the logger and tracer are being accessed statically in the source code,\n        // it would usually require refactoring for proper unit testing.\n        // For the sake of this example, let's assume the Logger and Tracer are injected\n        // and can be mocked.\n\n        globalDefaultExceptionHandler.printLog(\"Test message\", dummyException, Level.ERROR);\n        verify(mockLogger, times(1)).error(\"Test message\", dummyException);\n        verify(mockTracer, times(1)).logError(dummyException);\n\n        globalDefaultExceptionHandler.printLog(\"Test message\", dummyException, Level.WARN);\n        verify(mockLogger, times(1)).warn(\"Test message\", dummyException);\n\n        globalDefaultExceptionHandler.printLog(\"Test message\", dummyException, Level.DEBUG);\n        verify(mockLogger, times(1)).debug(\"Test message\", dummyException);\n\n        globalDefaultExceptionHandler.printLog(\"Test message\", dummyException, Level.INFO);\n        verify(mockLogger, times(1)).info(\"Test message\", dummyException);\n\n        globalDefaultExceptionHandler.printLog(\"Test message\", dummyException, Level.TRACE);\n        verify(mockLogger, times(1)).trace(\"Test message\", dummyException);\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.*;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class GlobalDefaultExceptionHandlerTest {\n    @Mock\n    private Logger logger;\n    @Mock\n    private Tracer tracer;\n    \n    @InjectMocks\n    private GlobalDefaultExceptionHandler handler;\n\n    private final String mockMessage = \"Test message\";\n    private final Throwable mockException = new RuntimeException(\"Test exception\");\n\n    @Test\n    public void printLogErrorTest() {\n        handler.printLog(mockMessage, mockException, Level.ERROR);\n        verify(logger, times(1)).error(mockMessage, mockException);\n        verify(tracer, times(1)).logError(mockException);\n    }\n\n    @Test\n    public void printLogWarnTest() {\n        handler.printLog(mockMessage, mockException, Level.WARN);\n        verify(logger, times(1)).warn(mockMessage, mockException);\n        verify(tracer, times(1)).logError(mockException);\n    }\n\n    @Test\n    public void printLogDebugTest() {\n        handler.printLog(mockMessage, mockException, Level.DEBUG);\n        verify(logger, times(1)).debug(mockMessage, mockException);\n        verify(tracer, times(1)).logError(mockException);\n    }\n\n    @Test\n    public void printLogInfoTest() {\n        handler.printLog(mockMessage, mockException, Level.INFO);\n        verify(logger, times(1)).info(mockMessage, mockException);\n        verify(tracer, times(1)).logError(mockException);\n    }\n\n    @Test\n    public void printLogTraceTest() {\n        handler.printLog(mockMessage, mockException, Level.TRACE);\n        verify(logger, times(1)).trace(mockMessage, mockException);\n        verify(tracer, times(1)).logError(mockException);\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.slf4j.event.Level;\nimport static org.mockito.Mockito.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class GlobalDefaultExceptionHandlerTest {\n\n    @Mock\n    private Logger mockLogger;\n    @Mock\n    private Tracer mockTracer;\n    \n    private GlobalDefaultExceptionHandler globalDefaultExceptionHandler;\n\n    @BeforeEach\n    public void setUp() {\n        globalDefaultExceptionHandler = new GlobalDefaultExceptionHandler() {\n            @Override\n            public void printLog(String message, Throwable ex, Level logLevel) {\n                super.printLog(message, ex, logLevel);\n            }\n        };\n        globalDefaultExceptionHandler.logger = mockLogger;\n        Tracer tracer = mockTracer;\n    }\n\n    @Test\n    public void printLogTest() {\n        Exception mockException = new Exception(\"Test exception\");\n        String testMessage = \"Test message\";\n\n        globalDefaultExceptionHandler.printLog(testMessage, mockException, Level.ERROR);\n        verify(mockLogger, times(1)).error(testMessage, mockException);\n\n        globalDefaultExceptionHandler.printLog(testMessage, mockException, Level.WARN);\n        verify(mockLogger, times(1)).warn(testMessage, mockException);\n\n        globalDefaultExceptionHandler.printLog(testMessage, mockException, Level.DEBUG);\n        verify(mockLogger, times(1)).debug(testMessage, mockException);\n\n        globalDefaultExceptionHandler.printLog(testMessage, mockException, Level.INFO);\n        verify(mockLogger, times(1)).info(testMessage, mockException);\n\n        globalDefaultExceptionHandler.printLog(testMessage, mockException, Level.TRACE);\n        verify(mockLogger, times(1)).trace(testMessage, mockException);\n\n        verify(mockTracer, times(5)).logError(mockException);\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.Test;\nimport static org.mockito.Mockito.*;\nimport org.slf4j.Logger;\nimport org.slf4j.event.Level;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\npublic class GlobalDefaultExceptionHandlerTest {\n\n    private Logger logger = mock(Logger.class);\n    private Tracer tracer = mock(Tracer.class);\n    private GlobalDefaultExceptionHandler handler = new GlobalDefaultExceptionHandler();\n    \n    @Test\n    public void printLogTest() {\n        // Set up the message and the exception to log\n        String testMessage = \"Test Message\";\n        Throwable testException = new RuntimeException(\"Test Exception\");\n\n        // Inject mocked tracer and logger into the handler\n        // Here we assume there are setter methods or ways to inject these dependencies otherwise\n        handler.setTracer(tracer);\n        handler.setLogger(logger);\n\n        // ERROR level log assertion\n        handler.printLog(testMessage, testException, Level.ERROR);\n        verify(logger).error(testMessage, testException);\n        verify(tracer).logError(testException);\n\n        // WARN level log assertion\n        handler.printLog(testMessage, testException, Level.WARN);\n        verify(logger).warn(testMessage, testException);\n        verify(tracer, times(2)).logError(testException);\n\n        // DEBUG level log assertion\n        handler.printLog(testMessage, testException, Level.DEBUG);\n        verify(logger).debug(testMessage, testException);\n        verify(tracer, times(3)).logError(testException);\n\n        // INFO level log assertion\n        handler.printLog(testMessage, testException, Level.INFO);\n        verify(logger).info(testMessage, testException);\n        verify(tracer, times(4)).logError(testException);\n\n        // TRACE level log assertion\n        handler.printLog(testMessage, testException, Level.TRACE);\n        verify(logger).trace(testMessage, testException);\n        verify(tracer, times(5)).logError(testException);\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport org.slf4j.Logger;\nimport org.slf4j.event.Level;\nimport static org.mockito.Mockito.*;\n\npublic class GlobalDefaultExceptionHandlerTest {\n\n    private Logger loggerMock;\n    private GlobalDefaultExceptionHandler handler;\n\n    @BeforeEach\n    public void setUp() {\n        // Create a mock Logger\n        loggerMock = mock(Logger.class);\n        // Initialize GlobalDefaultExceptionHandler with the mocked logger\n        handler = new GlobalDefaultExceptionHandler(loggerMock);\n    }\n\n    @Test\n    public void printLogTest() {\n        // Arrange\n        String message = \"Test Message\";\n        Throwable throwable = new RuntimeException(\"Test Exception\");\n        \n        // Act and Assert for each LogLevel\n        // ERROR Level\n        handler.printLog(message, throwable, Level.ERROR);\n        verify(loggerMock, times(1)).error(message, throwable);\n\n        // WARN Level\n        handler.printLog(message, throwable, Level.WARN);\n        verify(loggerMock, times(1)).warn(message, throwable);\n\n        // DEBUG Level\n        handler.printLog(message, throwable, Level.DEBUG);\n        verify(loggerMock, times(1)).debug(message, throwable);\n\n        // INFO Level\n        handler.printLog(message, throwable, Level.INFO);\n        verify(loggerMock, times(1)).info(message, throwable);\n\n        // TRACE Level\n        handler.printLog(message, throwable, Level.TRACE);\n        verify(loggerMock, times(1)).trace(message, throwable);\n\n        // Verify Tracer.logError called for each LogLevel\n        verifyStatic(Tracer.class, times(5));\n        Tracer.logError(throwable);\n    }\n\n    // Helper method to enable mockito to verify static method calls\n    private void enableStaticMockingForTracerClass() {\n        try (MockedStatic<Tracer> mocked = mockStatic(Tracer.class)) {\n            mocked.when(() -> Tracer.logError(any(Throwable.class))).thenAnswer(invocation -> null);\n        }\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Clean up after each test\n        Mockito.reset(loggerMock);\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.ArgumentCaptor;\nimport static org.mockito.Mockito.*;\nimport org.slf4j.Logger;\nimport org.slf4j.event.Level;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport com.ctrip.framework.apollo.tracer.Tracer;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GlobalDefaultExceptionHandlerTest {\n\n    private final Logger logger = mock(Logger.class);\n    private final Tracer tracer = mock(Tracer.class);\n    private GlobalDefaultExceptionHandler exceptionHandler;\n\n    @BeforeEach\n    public void setUp() {\n        exceptionHandler = new GlobalDefaultExceptionHandler() {\n            @Override\n            protected void printLog(String message, Throwable ex, Level logLevel) {\n                super.printLog(message, ex, logLevel);\n            }\n        };\n        exceptionHandler.logger = logger;\n        Tracer.setTracer(tracer);\n    }\n\n    @Test\n    public void printLogTest() {\n        Throwable throwable = new RuntimeException(\"Test Exception\");\n        ArgumentCaptor<String> messageCaptor = ArgumentCaptor.forClass(String.class);\n        ArgumentCaptor<Throwable> throwableCaptor = ArgumentCaptor.forClass(Throwable.class);\n\n        // Test ERROR level logging\n        exceptionHandler.printLog(\"Test ERROR\", throwable, Level.ERROR);\n        verify(logger).error(messageCaptor.capture(), throwableCaptor.capture());\n        assertEquals(\"Test ERROR\", messageCaptor.getValue());\n        assertEquals(throwable, throwableCaptor.getValue());\n\n        // Test WARN level logging\n        exceptionHandler.printLog(\"Test WARN\", throwable, Level.WARN);\n        verify(logger).warn(messageCaptor.capture(), throwableCaptor.capture());\n        assertEquals(\"Test WARN\", messageCaptor.getValue());\n        assertEquals(throwable, throwableCaptor.getValue());\n\n        // Test DEBUG level logging\n        exceptionHandler.printLog(\"Test DEBUG\", throwable, Level.DEBUG);\n        verify(logger).debug(messageCaptor.capture(), throwableCaptor.capture());\n        assertEquals(\"Test DEBUG\", messageCaptor.getValue());\n        assertEquals(throwable, throwableCaptor.getValue());\n\n        // Test INFO level logging\n        exceptionHandler.printLog(\"Test INFO\", throwable, Level.INFO);\n        verify(logger).info(messageCaptor.capture(), throwableCaptor.capture());\n        assertEquals(\"Test INFO\", messageCaptor.getValue());\n        assertEquals(throwable, throwableCaptor.getValue());\n\n        // Test TRACE level logging\n        exceptionHandler.printLog(\"Test TRACE\", throwable, Level.TRACE);\n        verify(logger).trace(messageCaptor.capture(), throwableCaptor.capture());\n        assertEquals(\"Test TRACE\", messageCaptor.getValue());\n        assertEquals(throwable, throwableCaptor.getValue());\n\n        // Verify Tracer.logError was called for each log level\n        verify(tracer, times(5)).logError(throwable);\n    }\n\n    @AfterEach\n    public void tearDown() {\n        Tracer.setTracer(null);\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport static org.mockito.Mockito.*;\n\nimport org.slf4j.Logger;\nimport org.slf4j.event.Level;\nimport com.ctrip.framework.apollo.tracer.Tracer;\n\n@ExtendWith(MockitoExtension.class)\npublic class GlobalDefaultExceptionHandlerTest {\n\n    @Mock\n    private Logger logger;\n\n    // This method needs to be added to GlobalDefaultExceptionHandler to support testing.\n    // It injects the mock logger into the class.\n    public void setLogger(Logger mockLogger) {\n        logger = mockLogger;\n    }\n\n    @Mock\n    private Throwable throwable;\n\n    private GlobalDefaultExceptionHandler exceptionHandler;\n\n    @BeforeEach\n    public void setUp() {\n        exceptionHandler = new GlobalDefaultExceptionHandler();\n        // Set the mock logger into the instance of GlobalDefaultExceptionHandler\n        exceptionHandler.setLogger(logger);\n        \n        // Since Tracer.logError is a static method, it shall be mocked statically\n        Tracer mockTracer = mock(Tracer.class);\n        Tracer.logError = mockTracer; \n    }\n\n    @Test\n    public void printLogTest() {\n        // Mock the message to be logged\n        String message = \"Test message\";\n        \n        // Test logging at each level and verify that the correct logger method is called\n        Level[] logLevels = Level.values();\n        for (Level level : logLevels) {\n            exceptionHandler.printLog(message, throwable, level);\n\n            switch (level) {\n                case ERROR:\n                    verify(logger).error(message, throwable);\n                    break;\n                case WARN:\n                    verify(logger).warn(message, throwable);\n                    break;\n                case DEBUG:\n                    verify(logger).debug(message, throwable);\n                    break;\n                case INFO:\n                    verify(logger).info(message, throwable);\n                    break;\n                case TRACE:\n                    verify(logger).trace(message, throwable);\n                    break;\n                default:\n                    fail(\"Unexpected log level\");\n            }\n            \n            // Verify that Tracer.logError has been called with the throwable\n            verify(Tracer.logError).logError(throwable);\n            \n            // Clear invocations between tests of different log levels\n            clearInvocations(logger, Tracer.logError);\n        }\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\nimport org.slf4j.Logger;\nimport org.slf4j.event.Level;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.verify;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class GlobalDefaultExceptionHandlerTest {\n    \n    @Mock\n    private Logger logger;\n    \n    @Mock\n    private Tracer tracer;\n\n    @InjectMocks\n    private GlobalDefaultExceptionHandler globalDefaultExceptionHandler;\n\n    @Test\n    public void printLogTest_ERROR() {\n        Throwable dummyException = new RuntimeException(\"error\");\n        String dummyMessage = \"Error message\";\n        \n        globalDefaultExceptionHandler.printLog(dummyMessage, dummyException, Level.ERROR);\n        verify(logger).error(dummyMessage, dummyException);\n        verify(tracer).logError(dummyException);\n    }\n\n    @Test\n    public void printLogTest_WARN() {\n        Throwable dummyException = new RuntimeException(\"warning\");\n        String dummyMessage = \"Warning message\";\n        \n        globalDefaultExceptionHandler.printLog(dummyMessage, dummyException, Level.WARN);\n        verify(logger).warn(dummyMessage, dummyException);\n        verify(tracer).logError(dummyException);\n    }\n\n    @Test\n    public void printLogTest_INFO() {\n        Throwable dummyException = new RuntimeException(\"info\");\n        String dummyMessage = \"Info message\";\n        \n        globalDefaultExceptionHandler.printLog(dummyMessage, dummyException, Level.INFO);\n        verify(logger).info(dummyMessage, dummyException);\n        verify(tracer).logError(dummyException);\n    }\n\n    @Test\n    public void printLogTest_DEBUG() {\n        Throwable dummyException = new RuntimeException(\"debug\");\n        String dummyMessage = \"Debug message\";\n        \n        globalDefaultExceptionHandler.printLog(dummyMessage, dummyException, Level.DEBUG);\n        verify(logger).debug(dummyMessage, dummyException);\n        verify(tracer).logError(dummyException);\n    }\n\n    @Test\n    public void printLogTest_TRACE() {\n        Throwable dummyException = new RuntimeException(\"trace\");\n        String dummyMessage = \"Trace message\";\n        \n        globalDefaultExceptionHandler.printLog(dummyMessage, dummyException, Level.TRACE);\n        verify(logger).trace(dummyMessage, dummyException);\n        verify(tracer).logError(dummyException);\n    }\n}",
        "package com.ctrip.framework.apollo.common.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport org.slf4j.Logger;\nimport org.slf4j.event.Level;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\npublic class GlobalDefaultExceptionHandlerTest {\n\n    Logger loggerMock;\n    GlobalDefaultExceptionHandler exceptionHandler;\n    Throwable mockThrowable;\n\n    @BeforeEach\n    public void setUp() {\n        // Create mock objects\n        loggerMock = mock(Logger.class);\n        mockThrowable = new Throwable();\n\n        // Create the instance of the class under test using the mocked logger\n        exceptionHandler = Mockito.mock(GlobalDefaultExceptionHandler.class);\n\n        // Set the behavior for the printLog method using Mockito\n        doCallRealMethod().when(exceptionHandler).printLog(any(String.class), any(Throwable.class), any(Level.class));\n    }\n\n    @Test\n    public void printLogTest() {\n        // Inject the mocked logger\n        GlobalDefaultExceptionHandler.logger = loggerMock;\n\n        // Call the method with different log levels\n        exceptionHandler.printLog(\"Error Message\", mockThrowable, Level.ERROR);\n        exceptionHandler.printLog(\"Warn Message\", mockThrowable, Level.WARN);\n        exceptionHandler.printLog(\"Info Message\", mockThrowable, Level.INFO);\n        exceptionHandler.printLog(\"Debug Message\", mockThrowable, Level.DEBUG);\n        exceptionHandler.printLog(\"Trace Message\", mockThrowable, Level.TRACE);\n\n        // Verify that the logger method was called with appropriate log level\n        verify(loggerMock).error(\"Error Message\", mockThrowable);\n        verify(loggerMock).warn(\"Warn Message\", mockThrowable);\n        verify(loggerMock).info(\"Info Message\", mockThrowable);\n        verify(loggerMock).debug(\"Debug Message\", mockThrowable);\n        verify(loggerMock).trace(\"Trace Message\", mockThrowable);\n\n        // Since Tracer.logError is a static method, it should be called with correct parameter\n        // Note: Tracer.logError() actual invocation is not possible without proper mocking framework setup for statics\n    }\n}"
    ]
}