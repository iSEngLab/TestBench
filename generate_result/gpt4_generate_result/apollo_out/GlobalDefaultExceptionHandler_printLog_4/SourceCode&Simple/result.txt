Source code: 

//打印日志, 其中logLevel为日志级别: ERROR/WARN/DEBUG/INFO/TRACE
private void printLog(String message, Throwable ex, Level logLevel) {
  switch (logLevel) {
    case ERROR:
      logger.error(message, ex);
      break;
    case WARN:
      logger.warn(message, ex);
      break;
    case DEBUG:
      logger.debug(message, ex);
      break;
    case INFO:
      logger.info(message, ex);
      break;
    case TRACE:
      logger.trace(message, ex);
      break;
  }

  Tracer.logError(ex);
}



No.1 generated result --------------------------

package com.ctrip.framework.apollo.common.controller;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.slf4j.Logger;
import org.slf4j.event.Level;

public class GlobalDefaultExceptionHandlerTest {
    
    private GlobalDefaultExceptionHandler defaultExceptionHandler;
    private Logger mockLogger;
    
    // Set up the necessary mocks and objects before running tests
    @BeforeEach
    void setUp() {
        mockLogger = spy(LoggerFactory.getLogger(GlobalDefaultExceptionHandler.class));
        defaultExceptionHandler = new GlobalDefaultExceptionHandler() {
            public void printLog(String message, Throwable ex, Level logLevel) {
                super.printLog(message, ex, logLevel);
            }
        };
    }
    
    @Test
    public void printLogTest() {
        // Arrange
        Throwable mockThrowable = new Throwable();
        String testMessage = "Test Log Message";
        
        // Act
        defaultExceptionHandler.printLog(testMessage, mockThrowable, Level.ERROR);
        
        // Assert
        verify(mockLogger).error(testMessage, mockThrowable);
        defaultExceptionHandler.printLog(testMessage, mockThrowable, Level.WARN);
        verify(mockLogger).warn(testMessage, mockThrowable);
        defaultExceptionHandler.printLog(testMessage, mockThrowable, Level.DEBUG);
        verify(mockLogger).debug(testMessage, mockThrowable);
        defaultExceptionHandler.printLog(testMessage, mockThrowable, Level.INFO);
        verify(mockLogger).info(testMessage, mockThrowable);
        defaultExceptionHandler.printLog(testMessage, mockThrowable, Level.TRACE);
        verify(mockLogger).trace(testMessage, mockThrowable);
    }
}


No.2 generated result --------------------------

package com.ctrip.framework.apollo.common.controller;

import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.times;

import org.slf4j.Logger;
import org.slf4j.event.Level;

@ExtendWith(MockitoExtension.class)
public class GlobalDefaultExceptionHandlerTest {

    @Mock
    private Logger mockLogger;
    
    @Mock
    private Tracer mockTracer;

    @InjectMocks
    private GlobalDefaultExceptionHandler globalDefaultExceptionHandler;

    @Test
    public void printLogTest() {
        Throwable dummyException = new RuntimeException("Dummy exception for testing");

        // Inject the mocked logger and tracer into the singleton classes (if applicable).
        // Since the logger and tracer are being accessed statically in the source code,
        // it would usually require refactoring for proper unit testing.
        // For the sake of this example, let's assume the Logger and Tracer are injected
        // and can be mocked.

        globalDefaultExceptionHandler.printLog("Test message", dummyException, Level.ERROR);
        verify(mockLogger, times(1)).error("Test message", dummyException);
        verify(mockTracer, times(1)).logError(dummyException);

        globalDefaultExceptionHandler.printLog("Test message", dummyException, Level.WARN);
        verify(mockLogger, times(1)).warn("Test message", dummyException);

        globalDefaultExceptionHandler.printLog("Test message", dummyException, Level.DEBUG);
        verify(mockLogger, times(1)).debug("Test message", dummyException);

        globalDefaultExceptionHandler.printLog("Test message", dummyException, Level.INFO);
        verify(mockLogger, times(1)).info("Test message", dummyException);

        globalDefaultExceptionHandler.printLog("Test message", dummyException, Level.TRACE);
        verify(mockLogger, times(1)).trace("Test message", dummyException);
    }
}


No.3 generated result --------------------------

package com.ctrip.framework.apollo.common.controller;

import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class GlobalDefaultExceptionHandlerTest {
    @Mock
    private Logger logger;
    @Mock
    private Tracer tracer;
    
    @InjectMocks
    private GlobalDefaultExceptionHandler handler;

    private final String mockMessage = "Test message";
    private final Throwable mockException = new RuntimeException("Test exception");

    @Test
    public void printLogErrorTest() {
        handler.printLog(mockMessage, mockException, Level.ERROR);
        verify(logger, times(1)).error(mockMessage, mockException);
        verify(tracer, times(1)).logError(mockException);
    }

    @Test
    public void printLogWarnTest() {
        handler.printLog(mockMessage, mockException, Level.WARN);
        verify(logger, times(1)).warn(mockMessage, mockException);
        verify(tracer, times(1)).logError(mockException);
    }

    @Test
    public void printLogDebugTest() {
        handler.printLog(mockMessage, mockException, Level.DEBUG);
        verify(logger, times(1)).debug(mockMessage, mockException);
        verify(tracer, times(1)).logError(mockException);
    }

    @Test
    public void printLogInfoTest() {
        handler.printLog(mockMessage, mockException, Level.INFO);
        verify(logger, times(1)).info(mockMessage, mockException);
        verify(tracer, times(1)).logError(mockException);
    }

    @Test
    public void printLogTraceTest() {
        handler.printLog(mockMessage, mockException, Level.TRACE);
        verify(logger, times(1)).trace(mockMessage, mockException);
        verify(tracer, times(1)).logError(mockException);
    }
}


No.4 generated result --------------------------

package com.ctrip.framework.apollo.common.controller;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.event.Level;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class GlobalDefaultExceptionHandlerTest {

    @Mock
    private Logger mockLogger;
    @Mock
    private Tracer mockTracer;
    
    private GlobalDefaultExceptionHandler globalDefaultExceptionHandler;

    @BeforeEach
    public void setUp() {
        globalDefaultExceptionHandler = new GlobalDefaultExceptionHandler() {
            @Override
            public void printLog(String message, Throwable ex, Level logLevel) {
                super.printLog(message, ex, logLevel);
            }
        };
        globalDefaultExceptionHandler.logger = mockLogger;
        Tracer tracer = mockTracer;
    }

    @Test
    public void printLogTest() {
        Exception mockException = new Exception("Test exception");
        String testMessage = "Test message";

        globalDefaultExceptionHandler.printLog(testMessage, mockException, Level.ERROR);
        verify(mockLogger, times(1)).error(testMessage, mockException);

        globalDefaultExceptionHandler.printLog(testMessage, mockException, Level.WARN);
        verify(mockLogger, times(1)).warn(testMessage, mockException);

        globalDefaultExceptionHandler.printLog(testMessage, mockException, Level.DEBUG);
        verify(mockLogger, times(1)).debug(testMessage, mockException);

        globalDefaultExceptionHandler.printLog(testMessage, mockException, Level.INFO);
        verify(mockLogger, times(1)).info(testMessage, mockException);

        globalDefaultExceptionHandler.printLog(testMessage, mockException, Level.TRACE);
        verify(mockLogger, times(1)).trace(testMessage, mockException);

        verify(mockTracer, times(5)).logError(mockException);
    }
}


No.5 generated result --------------------------

package com.ctrip.framework.apollo.common.controller;

import org.junit.jupiter.api.Test;
import static org.mockito.Mockito.*;
import org.slf4j.Logger;
import org.slf4j.event.Level;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class GlobalDefaultExceptionHandlerTest {

    private Logger logger = mock(Logger.class);
    private Tracer tracer = mock(Tracer.class);
    private GlobalDefaultExceptionHandler handler = new GlobalDefaultExceptionHandler();
    
    @Test
    public void printLogTest() {
        // Set up the message and the exception to log
        String testMessage = "Test Message";
        Throwable testException = new RuntimeException("Test Exception");

        // Inject mocked tracer and logger into the handler
        // Here we assume there are setter methods or ways to inject these dependencies otherwise
        handler.setTracer(tracer);
        handler.setLogger(logger);

        // ERROR level log assertion
        handler.printLog(testMessage, testException, Level.ERROR);
        verify(logger).error(testMessage, testException);
        verify(tracer).logError(testException);

        // WARN level log assertion
        handler.printLog(testMessage, testException, Level.WARN);
        verify(logger).warn(testMessage, testException);
        verify(tracer, times(2)).logError(testException);

        // DEBUG level log assertion
        handler.printLog(testMessage, testException, Level.DEBUG);
        verify(logger).debug(testMessage, testException);
        verify(tracer, times(3)).logError(testException);

        // INFO level log assertion
        handler.printLog(testMessage, testException, Level.INFO);
        verify(logger).info(testMessage, testException);
        verify(tracer, times(4)).logError(testException);

        // TRACE level log assertion
        handler.printLog(testMessage, testException, Level.TRACE);
        verify(logger).trace(testMessage, testException);
        verify(tracer, times(5)).logError(testException);
    }
}


No.6 generated result --------------------------

package com.ctrip.framework.apollo.common.controller;

import org.junit.jupiter.api.*;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.slf4j.event.Level;
import static org.mockito.Mockito.*;

public class GlobalDefaultExceptionHandlerTest {

    private Logger loggerMock;
    private GlobalDefaultExceptionHandler handler;

    @BeforeEach
    public void setUp() {
        // Create a mock Logger
        loggerMock = mock(Logger.class);
        // Initialize GlobalDefaultExceptionHandler with the mocked logger
        handler = new GlobalDefaultExceptionHandler(loggerMock);
    }

    @Test
    public void printLogTest() {
        // Arrange
        String message = "Test Message";
        Throwable throwable = new RuntimeException("Test Exception");
        
        // Act and Assert for each LogLevel
        // ERROR Level
        handler.printLog(message, throwable, Level.ERROR);
        verify(loggerMock, times(1)).error(message, throwable);

        // WARN Level
        handler.printLog(message, throwable, Level.WARN);
        verify(loggerMock, times(1)).warn(message, throwable);

        // DEBUG Level
        handler.printLog(message, throwable, Level.DEBUG);
        verify(loggerMock, times(1)).debug(message, throwable);

        // INFO Level
        handler.printLog(message, throwable, Level.INFO);
        verify(loggerMock, times(1)).info(message, throwable);

        // TRACE Level
        handler.printLog(message, throwable, Level.TRACE);
        verify(loggerMock, times(1)).trace(message, throwable);

        // Verify Tracer.logError called for each LogLevel
        verifyStatic(Tracer.class, times(5));
        Tracer.logError(throwable);
    }

    // Helper method to enable mockito to verify static method calls
    private void enableStaticMockingForTracerClass() {
        try (MockedStatic<Tracer> mocked = mockStatic(Tracer.class)) {
            mocked.when(() -> Tracer.logError(any(Throwable.class))).thenAnswer(invocation -> null);
        }
    }

    @AfterEach
    public void tearDown() {
        // Clean up after each test
        Mockito.reset(loggerMock);
    }
}


No.7 generated result --------------------------

package com.ctrip.framework.apollo.common.controller;

import org.junit.jupiter.api.*;
import org.mockito.ArgumentCaptor;
import static org.mockito.Mockito.*;
import org.slf4j.Logger;
import org.slf4j.event.Level;
import org.springframework.boot.test.mock.mockito.MockBean;
import com.ctrip.framework.apollo.tracer.Tracer;

import static org.junit.jupiter.api.Assertions.*;

public class GlobalDefaultExceptionHandlerTest {

    private final Logger logger = mock(Logger.class);
    private final Tracer tracer = mock(Tracer.class);
    private GlobalDefaultExceptionHandler exceptionHandler;

    @BeforeEach
    public void setUp() {
        exceptionHandler = new GlobalDefaultExceptionHandler() {
            @Override
            protected void printLog(String message, Throwable ex, Level logLevel) {
                super.printLog(message, ex, logLevel);
            }
        };
        exceptionHandler.logger = logger;
        Tracer.setTracer(tracer);
    }

    @Test
    public void printLogTest() {
        Throwable throwable = new RuntimeException("Test Exception");
        ArgumentCaptor<String> messageCaptor = ArgumentCaptor.forClass(String.class);
        ArgumentCaptor<Throwable> throwableCaptor = ArgumentCaptor.forClass(Throwable.class);

        // Test ERROR level logging
        exceptionHandler.printLog("Test ERROR", throwable, Level.ERROR);
        verify(logger).error(messageCaptor.capture(), throwableCaptor.capture());
        assertEquals("Test ERROR", messageCaptor.getValue());
        assertEquals(throwable, throwableCaptor.getValue());

        // Test WARN level logging
        exceptionHandler.printLog("Test WARN", throwable, Level.WARN);
        verify(logger).warn(messageCaptor.capture(), throwableCaptor.capture());
        assertEquals("Test WARN", messageCaptor.getValue());
        assertEquals(throwable, throwableCaptor.getValue());

        // Test DEBUG level logging
        exceptionHandler.printLog("Test DEBUG", throwable, Level.DEBUG);
        verify(logger).debug(messageCaptor.capture(), throwableCaptor.capture());
        assertEquals("Test DEBUG", messageCaptor.getValue());
        assertEquals(throwable, throwableCaptor.getValue());

        // Test INFO level logging
        exceptionHandler.printLog("Test INFO", throwable, Level.INFO);
        verify(logger).info(messageCaptor.capture(), throwableCaptor.capture());
        assertEquals("Test INFO", messageCaptor.getValue());
        assertEquals(throwable, throwableCaptor.getValue());

        // Test TRACE level logging
        exceptionHandler.printLog("Test TRACE", throwable, Level.TRACE);
        verify(logger).trace(messageCaptor.capture(), throwableCaptor.capture());
        assertEquals("Test TRACE", messageCaptor.getValue());
        assertEquals(throwable, throwableCaptor.getValue());

        // Verify Tracer.logError was called for each log level
        verify(tracer, times(5)).logError(throwable);
    }

    @AfterEach
    public void tearDown() {
        Tracer.setTracer(null);
    }
}


No.8 generated result --------------------------

package com.ctrip.framework.apollo.common.controller;

import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;

import org.slf4j.Logger;
import org.slf4j.event.Level;
import com.ctrip.framework.apollo.tracer.Tracer;

@ExtendWith(MockitoExtension.class)
public class GlobalDefaultExceptionHandlerTest {

    @Mock
    private Logger logger;

    // This method needs to be added to GlobalDefaultExceptionHandler to support testing.
    // It injects the mock logger into the class.
    public void setLogger(Logger mockLogger) {
        logger = mockLogger;
    }

    @Mock
    private Throwable throwable;

    private GlobalDefaultExceptionHandler exceptionHandler;

    @BeforeEach
    public void setUp() {
        exceptionHandler = new GlobalDefaultExceptionHandler();
        // Set the mock logger into the instance of GlobalDefaultExceptionHandler
        exceptionHandler.setLogger(logger);
        
        // Since Tracer.logError is a static method, it shall be mocked statically
        Tracer mockTracer = mock(Tracer.class);
        Tracer.logError = mockTracer; 
    }

    @Test
    public void printLogTest() {
        // Mock the message to be logged
        String message = "Test message";
        
        // Test logging at each level and verify that the correct logger method is called
        Level[] logLevels = Level.values();
        for (Level level : logLevels) {
            exceptionHandler.printLog(message, throwable, level);

            switch (level) {
                case ERROR:
                    verify(logger).error(message, throwable);
                    break;
                case WARN:
                    verify(logger).warn(message, throwable);
                    break;
                case DEBUG:
                    verify(logger).debug(message, throwable);
                    break;
                case INFO:
                    verify(logger).info(message, throwable);
                    break;
                case TRACE:
                    verify(logger).trace(message, throwable);
                    break;
                default:
                    fail("Unexpected log level");
            }
            
            // Verify that Tracer.logError has been called with the throwable
            verify(Tracer.logError).logError(throwable);
            
            // Clear invocations between tests of different log levels
            clearInvocations(logger, Tracer.logError);
        }
    }
}


No.9 generated result --------------------------

package com.ctrip.framework.apollo.common.controller;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.slf4j.Logger;
import org.slf4j.event.Level;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import static org.mockito.Mockito.verify;

@RunWith(MockitoJUnitRunner.class)
public class GlobalDefaultExceptionHandlerTest {
    
    @Mock
    private Logger logger;
    
    @Mock
    private Tracer tracer;

    @InjectMocks
    private GlobalDefaultExceptionHandler globalDefaultExceptionHandler;

    @Test
    public void printLogTest_ERROR() {
        Throwable dummyException = new RuntimeException("error");
        String dummyMessage = "Error message";
        
        globalDefaultExceptionHandler.printLog(dummyMessage, dummyException, Level.ERROR);
        verify(logger).error(dummyMessage, dummyException);
        verify(tracer).logError(dummyException);
    }

    @Test
    public void printLogTest_WARN() {
        Throwable dummyException = new RuntimeException("warning");
        String dummyMessage = "Warning message";
        
        globalDefaultExceptionHandler.printLog(dummyMessage, dummyException, Level.WARN);
        verify(logger).warn(dummyMessage, dummyException);
        verify(tracer).logError(dummyException);
    }

    @Test
    public void printLogTest_INFO() {
        Throwable dummyException = new RuntimeException("info");
        String dummyMessage = "Info message";
        
        globalDefaultExceptionHandler.printLog(dummyMessage, dummyException, Level.INFO);
        verify(logger).info(dummyMessage, dummyException);
        verify(tracer).logError(dummyException);
    }

    @Test
    public void printLogTest_DEBUG() {
        Throwable dummyException = new RuntimeException("debug");
        String dummyMessage = "Debug message";
        
        globalDefaultExceptionHandler.printLog(dummyMessage, dummyException, Level.DEBUG);
        verify(logger).debug(dummyMessage, dummyException);
        verify(tracer).logError(dummyException);
    }

    @Test
    public void printLogTest_TRACE() {
        Throwable dummyException = new RuntimeException("trace");
        String dummyMessage = "Trace message";
        
        globalDefaultExceptionHandler.printLog(dummyMessage, dummyException, Level.TRACE);
        verify(logger).trace(dummyMessage, dummyException);
        verify(tracer).logError(dummyException);
    }
}


No.10 generated result --------------------------

package com.ctrip.framework.apollo.common.controller;

import org.junit.jupiter.api.*;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.slf4j.event.Level;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

public class GlobalDefaultExceptionHandlerTest {

    Logger loggerMock;
    GlobalDefaultExceptionHandler exceptionHandler;
    Throwable mockThrowable;

    @BeforeEach
    public void setUp() {
        // Create mock objects
        loggerMock = mock(Logger.class);
        mockThrowable = new Throwable();

        // Create the instance of the class under test using the mocked logger
        exceptionHandler = Mockito.mock(GlobalDefaultExceptionHandler.class);

        // Set the behavior for the printLog method using Mockito
        doCallRealMethod().when(exceptionHandler).printLog(any(String.class), any(Throwable.class), any(Level.class));
    }

    @Test
    public void printLogTest() {
        // Inject the mocked logger
        GlobalDefaultExceptionHandler.logger = loggerMock;

        // Call the method with different log levels
        exceptionHandler.printLog("Error Message", mockThrowable, Level.ERROR);
        exceptionHandler.printLog("Warn Message", mockThrowable, Level.WARN);
        exceptionHandler.printLog("Info Message", mockThrowable, Level.INFO);
        exceptionHandler.printLog("Debug Message", mockThrowable, Level.DEBUG);
        exceptionHandler.printLog("Trace Message", mockThrowable, Level.TRACE);

        // Verify that the logger method was called with appropriate log level
        verify(loggerMock).error("Error Message", mockThrowable);
        verify(loggerMock).warn("Warn Message", mockThrowable);
        verify(loggerMock).info("Info Message", mockThrowable);
        verify(loggerMock).debug("Debug Message", mockThrowable);
        verify(loggerMock).trace("Trace Message", mockThrowable);

        // Since Tracer.logError is a static method, it should be called with correct parameter
        // Note: Tracer.logError() actual invocation is not possible without proper mocking framework setup for statics
    }
}


