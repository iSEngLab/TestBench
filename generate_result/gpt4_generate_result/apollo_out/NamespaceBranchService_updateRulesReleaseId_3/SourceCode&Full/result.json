{
    "project_name": "apollo",
    "file_name": "NamespaceBranchService.java",
    "relative_path": "apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/NamespaceBranchService.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.biz.service",
    "docstring": null,
    "source_code": "@Transactional\npublic GrayReleaseRule updateRulesReleaseId(String appId, String clusterName,\n                                 String namespaceName, String branchName,\n                                 long latestReleaseId, String operator) {\n  GrayReleaseRule oldRules = grayReleaseRuleRepository.\n      findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName);\n\n  if (oldRules == null) {\n    return null;\n  }\n\n  GrayReleaseRule newRules = new GrayReleaseRule();\n  newRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);\n  newRules.setReleaseId(latestReleaseId);\n  newRules.setRules(oldRules.getRules());\n  newRules.setAppId(oldRules.getAppId());\n  newRules.setClusterName(oldRules.getClusterName());\n  newRules.setNamespaceName(oldRules.getNamespaceName());\n  newRules.setBranchName(oldRules.getBranchName());\n  newRules.setDataChangeCreatedBy(operator);\n  newRules.setDataChangeLastModifiedBy(operator);\n\n  grayReleaseRuleRepository.save(newRules);\n\n  grayReleaseRuleRepository.delete(oldRules);\n\n  return newRules;\n}\n",
    "class_name": "NamespaceBranchService",
    "method_name": "updateRulesReleaseId",
    "arguments": [
        "String appId",
        "String clusterName",
        "String namespaceName",
        "String branchName",
        "long latestReleaseId",
        "String operator"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\nimport com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NamespaceBranchServiceTest {\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // GIVEN\n        final String appId = \"testAppId\";\n        final String clusterName = \"testClusterName\";\n        final String namespaceName = \"testNamespaceName\";\n        final String branchName = \"testBranchName\";\n        final long latestReleaseId = 100L;\n        final String operator = \"operator\";\n        \n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        oldRules.setRules(\"oldRules\");\n\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n                appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);\n        \n        // WHEN\n        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(\n                appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        // THEN\n        assertNotNull(updatedRules, \"Updated rules should not be null\");\n        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus(), \"Branch status should be ACTIVE\");\n        assertEquals(latestReleaseId, updatedRules.getReleaseId(), \"Release ID should match the latest release ID\");\n        assertEquals(\"oldRules\", updatedRules.getRules(), \"Rules should match the old rules\");\n        assertEquals(appId, updatedRules.getAppId(), \"AppId should match\");\n        assertEquals(clusterName, updatedRules.getClusterName(), \"ClusterName should match\");\n        assertEquals(namespaceName, updatedRules.getNamespaceName(), \"NamespaceName should match\");\n        assertEquals(branchName, updatedRules.getBranchName(), \"BranchName should match\");\n        assertEquals(operator, updatedRules.getDataChangeCreatedBy(), \"DataChangeCreatedBy should match the operator\");\n        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy(), \"DataChangeLastModifiedBy should match the operator\");\n\n        // Verify that interactions with the repository took place as expected\n        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository).delete(oldRules);\n    }\n} ",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class NamespaceBranchServiceTest {\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        String appId = \"myAppId\";\n        String clusterName = \"default\";\n        String namespaceName = \"application\";\n        String branchName = \"myBranch\";\n        long latestReleaseId = 100L;\n        String operator = \"testOperator\";\n\n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        oldRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);\n        oldRules.setReleaseId(99L);\n        oldRules.setRules(\"[]\");\n\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n                appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);\n\n        GrayReleaseRule newRules = namespaceBranchService.updateRulesReleaseId(\n                appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        assertNotNull(newRules);\n        assertEquals(NamespaceBranchStatus.ACTIVE, newRules.getBranchStatus());\n        assertEquals(latestReleaseId, newRules.getReleaseId());\n        assertEquals(appId, newRules.getAppId());\n        assertEquals(clusterName, newRules.getClusterName());\n        assertEquals(namespaceName, newRules.getNamespaceName());\n        assertEquals(branchName, newRules.getBranchName());\n        assertEquals(operator, newRules.getDataChangeCreatedBy());\n        assertEquals(operator, newRules.getDataChangeLastModifiedBy());\n\n\n        verify(grayReleaseRuleRepository, times(1)).save(newRules);\n        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class NamespaceBranchServiceTest {\n    \n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n    \n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @BeforeEach\n    public void setUp() {\n        // Prepare test data or configure mocks before each test if necessary\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // Setup test data\n        String appId = \"myApp\";\n        String clusterName = \"myCluster\";\n        String namespaceName = \"myNamespace\";\n        String branchName = \"myBranch\";\n        long latestReleaseId = 100L;\n        String operator = \"operator\";\n        \n        // Mock the old rules returned by the repository\n        GrayReleaseRule oldRules = mock(GrayReleaseRule.class);\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n            appId, clusterName, namespaceName, branchName\n        )).thenReturn(oldRules);\n\n        // Execute the method to test\n        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(\n            appId, clusterName, namespaceName, branchName, latestReleaseId, operator\n        );\n\n        // Validate the results\n        assertNotNull(updatedRules, \"Updated rules should not be null\");\n        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus(), \"Branch status should be ACTIVE\");\n        assertEquals(latestReleaseId, updatedRules.getReleaseId(), \"Release ID should match the one provided\");\n        assertSame(oldRules.getRules(), updatedRules.getRules(), \"Rules should match the old rules' rules\");\n        assertEquals(oldRules.getAppId(), updatedRules.getAppId(), \"App ID should match the old rules' app ID\");\n        assertEquals(oldRules.getClusterName(), updatedRules.getClusterName(), \"Cluster name should match the old rules' cluster name\");\n        assertEquals(oldRules.getNamespaceName(), updatedRules.getNamespaceName(), \"Namespace name should match the old rules' namespace name\");\n        assertEquals(oldRules.getBranchName(), updatedRules.getBranchName(), \"Branch name should match the old rules' branch name\");\n        assertEquals(operator, updatedRules.getDataChangeCreatedBy(), \"Created by operator should match the one provided\");\n        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy(), \"Last modified by operator should match the one provided\");\n\n        // Verify interaction with mock objects\n        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository).delete(oldRules);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\nimport com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NamespaceBranchServiceTest {\n    \n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n    \n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // Arrange\n        String appId = \"testAppId\";\n        String clusterName = \"testClusterName\";\n        String namespaceName = \"testNamespaceName\";\n        String branchName = \"testBranchName\";\n        long latestReleaseId = 100L;\n        String operator = \"testOperator\";\n        \n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setRules(\"oldRules\");\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        \n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName))\n            .thenReturn(oldRules);\n        \n        // Act\n        GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n        \n        // Assert\n        assertNotNull(result);\n        assertEquals(latestReleaseId, result.getReleaseId());\n        assertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());\n        assertEquals(\"oldRules\", result.getRules());\n        assertEquals(operator, result.getDataChangeLastModifiedBy());\n        assertEquals(operator, result.getDataChangeCreatedBy());\n\n        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository).delete(oldRules);\n    }\n    \n    @AfterEach\n    public void tearDown() {\n        // Closing resources if necessary\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NamespaceBranchServiceTest {\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // Given\n        String appId = \"myApp\";\n        String clusterName = \"default\";\n        String namespaceName = \"application\";\n        String branchName = \"feature-branch\";\n        long latestReleaseId = 100L;\n        String operator = \"operator\";\n\n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);\n        oldRules.setReleaseId(99L);\n        oldRules.setRules(\"{}\");\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n                anyString(), anyString(), anyString(), anyString()\n        )).thenReturn(oldRules);\n\n        GrayReleaseRule expectedNewRules = new GrayReleaseRule();\n        expectedNewRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);\n        expectedNewRules.setReleaseId(latestReleaseId);\n        expectedNewRules.setRules(oldRules.getRules());\n        expectedNewRules.setAppId(appId);\n        expectedNewRules.setClusterName(clusterName);\n        expectedNewRules.setNamespaceName(namespaceName);\n        expectedNewRules.setBranchName(branchName);\n        expectedNewRules.setDataChangeCreatedBy(operator);\n        expectedNewRules.setDataChangeLastModifiedBy(operator);\n\n        // When\n        GrayReleaseRule newRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        // Then\n        assertNotNull(newRules);\n        assertEquals(latestReleaseId, newRules.getReleaseId());\n        assertEquals(operator, newRules.getDataChangeCreatedBy());\n        assertEquals(operator, newRules.getDataChangeLastModifiedBy());\n        verify(grayReleaseRuleRepository, times(1)).save(expectedNewRules);\n        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport static org.mockito.Mockito.*;\nimport static org.mockito.BDDMockito.given;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class NamespaceBranchServiceTest {\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    private final String appId = \"myAppId\";\n    private final String clusterName = \"myClusterName\";\n    private final String namespaceName = \"myNamespace\";\n    private final String branchName = \"branchName\";\n    private final long latestReleaseId = 100L;\n    private final String operator = \"operator\";\n\n    private GrayReleaseRule oldRules;\n    private GrayReleaseRule newRules;\n\n    @BeforeEach\n    public void setUp() {\n        // set up an existing gray release rule\n        oldRules = new GrayReleaseRule();\n        oldRules.setId(1L);\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        oldRules.setRules(\"oldRules\");\n        oldRules.setReleaseId(99L);\n        // new rules will not exist before the method execution\n        newRules = null;\n\n        // given statement to mimic repository behavior\n        given(grayReleaseRuleRepository\n                .findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName))\n                .willReturn(oldRules);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // when updateRulesReleaseId is invoked with all proper parameters\n        newRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        // then new Rules should be created with updated releaseId\n        assertNotNull(newRules);\n        assertEquals(NamespaceBranchStatus.ACTIVE, newRules.getBranchStatus());\n        assertEquals(latestReleaseId, newRules.getReleaseId());\n        assertEquals(oldRules.getRules(), newRules.getRules());\n        assertEquals(oldRules.getAppId(), newRules.getAppId());\n        assertEquals(oldRules.getClusterName(), newRules.getClusterName());\n        assertEquals(oldRules.getNamespaceName(), newRules.getNamespaceName());\n        assertEquals(oldRules.getBranchName(), newRules.getBranchName());\n        assertEquals(operator, newRules.getDataChangeCreatedBy());\n        assertEquals(operator, newRules.getDataChangeLastModifiedBy());\n\n        // and old Rules should be deleted\n        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);\n        // and the new Rules should be saved\n        verify(grayReleaseRuleRepository, times(1)).save(newRules);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\nimport com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class NamespaceBranchServiceTest {\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    private final String appId = \"SampleAppId\";\n    private final String clusterName = \"default\";\n    private final String namespaceName = \"application\";\n    private final String branchName = \"feature-branch\";\n    private final long latestReleaseId = 100L;\n    private final String operator = \"operator\";\n    private GrayReleaseRule oldRules;\n\n    @BeforeEach\n    void setUp() {\n        oldRules = new GrayReleaseRule();\n        oldRules.setId(1L);\n        oldRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);\n        oldRules.setReleaseId(10L);\n        oldRules.setRules(\"{}\");\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        oldRules.setDataChangeCreatedBy(operator);\n        oldRules.setDataChangeLastModifiedBy(operator);\n\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName))\n                .thenReturn(oldRules);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        GrayReleaseRule newRules = new GrayReleaseRule();\n        newRules.setId(2L);\n        newRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);\n        newRules.setReleaseId(latestReleaseId);\n        newRules.setRules(oldRules.getRules());\n        newRules.setAppId(appId);\n        newRules.setClusterName(clusterName);\n        newRules.setNamespaceName(namespaceName);\n        newRules.setBranchName(branchName);\n        newRules.setDataChangeCreatedBy(operator);\n        newRules.setDataChangeLastModifiedBy(operator);\n\n        when(grayReleaseRuleRepository.save(any(GrayReleaseRule.class))).thenReturn(newRules);\n\n        GrayReleaseRule actual = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        assertNotNull(actual);\n        assertEquals(NamespaceBranchStatus.ACTIVE, actual.getBranchStatus());\n        assertEquals(latestReleaseId, actual.getReleaseId());\n        assertNotNull(actual.getRules());\n        assertEquals(appId, actual.getAppId());\n        assertEquals(clusterName, actual.getClusterName());\n        assertEquals(namespaceName, actual.getNamespaceName());\n        assertEquals(branchName, actual.getBranchName());\n        assertEquals(operator, actual.getDataChangeCreatedBy());\n        assertEquals(operator, actual.getDataChangeLastModifiedBy());\n\n        verify(grayReleaseRuleRepository, times(1)).save(newRules);\n        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n\npublic class NamespaceBranchServiceTest {\n\n    private NamespaceBranchService namespaceBranchService;\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        namespaceBranchService = new NamespaceBranchService(\n            null, grayReleaseRuleRepository, null, null, null, null);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        String appId = \"myAppId\";\n        String clusterName = \"default\";\n        String namespaceName = \"application\";\n        String branchName = \"myBranch\";\n        long latestReleaseId = 100L;\n        String operator = \"operator\";\n\n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        oldRules.setRules(\"rule\");\n        \n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n            appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);\n        when(grayReleaseRuleRepository.save(any(GrayReleaseRule.class))).thenReturn(null);\n\n        GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(\n            appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        assertNotNull(result);\n        assertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());\n        assertEquals(latestReleaseId, result.getReleaseId());\n        assertEquals(oldRules.getRules(), result.getRules());\n        assertEquals(appId, result.getAppId());\n        assertEquals(clusterName, result.getClusterName());\n        assertEquals(namespaceName, result.getNamespaceName());\n        assertEquals(branchName, result.getBranchName());\n        assertEquals(operator, result.getDataChangeCreatedBy());\n        assertEquals(operator, result.getDataChangeLastModifiedBy());\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\n\npublic class NamespaceBranchServiceTest {\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        String appId = \"myAppId\";\n        String clusterName = \"default\";\n        String namespaceName = \"application\";\n        String branchName = \"feature-branch\";\n        long latestReleaseId = 100L;\n        String operator = \"operator\";\n        \n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setBranchName(branchName);\n        oldRules.setAppId(appId);\n        oldRules.setRules(\"rules-content\");\n        \n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName))\n                .thenReturn(oldRules);\n\n        namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        GrayReleaseRule captorValue = new GrayReleaseRule();\n        captorValue.setBranchStatus(NamespaceBranchStatus.ACTIVE);\n        captorValue.setReleaseId(latestReleaseId);\n        captorValue.setRules(oldRules.getRules());\n        captorValue.setAppId(oldRules.getAppId());\n        captorValue.setClusterName(oldRules.getClusterName());\n        captorValue.setNamespaceName(oldRules.getNamespaceName());\n        captorValue.setBranchName(oldRules.getBranchName());\n        captorValue.setDataChangeCreatedBy(operator);\n        captorValue.setDataChangeLastModifiedBy(operator);\n        \n        verify(grayReleaseRuleRepository, times(1)).save(captorValue);\n        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);\n\n        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        assertNotNull(updatedRules);\n        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus());\n        assertEquals(latestReleaseId, updatedRules.getReleaseId());\n        assertEquals(oldRules.getRules(), updatedRules.getRules());\n        assertEquals(appId, updatedRules.getAppId());\n        assertEquals(clusterName, updatedRules.getClusterName());\n        assertEquals(namespaceName, updatedRules.getNamespaceName());\n        assertEquals(branchName, updatedRules.getBranchName());\n        assertEquals(operator, updatedRules.getDataChangeCreatedBy());\n        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy());\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\nimport com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\n\nclass NamespaceBranchServiceTest {\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    private final String testAppId = \"SampleApp\";\n    private final String testClusterName = \"default\";\n    private final String testNamespaceName = \"application\";\n    private final String testBranchName = \"BranchA\";\n    private final long testLatestReleaseId = 100L;\n    private final String testOperator = \"operator\";\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n    \n    @Test\n    void updateRulesReleaseIdTest() {\n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setId(1L);\n        oldRules.setAppId(testAppId);\n        oldRules.setClusterName(testClusterName);\n        oldRules.setNamespaceName(testNamespaceName);\n        oldRules.setBranchName(testBranchName);\n        oldRules.setRules(\"[]\");\n\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n                anyString(), anyString(), anyString(), anyString()\n        )).thenReturn(oldRules);\n\n        GrayReleaseRule savedRules = new GrayReleaseRule();\n        savedRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);\n        savedRules.setReleaseId(testLatestReleaseId);\n        savedRules.setRules(oldRules.getRules());\n        savedRules.setAppId(testAppId);\n        savedRules.setClusterName(testClusterName);\n        savedRules.setNamespaceName(testNamespaceName);\n        savedRules.setBranchName(testBranchName);\n        savedRules.setDataChangeCreatedBy(testOperator);\n        savedRules.setDataChangeLastModifiedBy(testOperator);\n        \n        when(grayReleaseRuleRepository.save(any(GrayReleaseRule.class))).thenReturn(savedRules);\n\n        GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(\n                testAppId, testClusterName, testNamespaceName, testBranchName, testLatestReleaseId, testOperator\n        );\n\n        assertNotNull(result, \"The result should not be null\");\n        assertEquals(savedRules.getReleaseId(), result.getReleaseId(), \"The release IDs should match\");\n        assertNotEquals(oldRules.getId(), result.getId(), \"The IDs should not match, indicating a new rule\");\n\n        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);\n    }\n}"
    ]
}