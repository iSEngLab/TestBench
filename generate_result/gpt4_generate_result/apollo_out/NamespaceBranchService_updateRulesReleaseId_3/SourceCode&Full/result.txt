Source code: 

@Transactional
public GrayReleaseRule updateRulesReleaseId(String appId, String clusterName,
                                 String namespaceName, String branchName,
                                 long latestReleaseId, String operator) {
  GrayReleaseRule oldRules = grayReleaseRuleRepository.
      findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName);

  if (oldRules == null) {
    return null;
  }

  GrayReleaseRule newRules = new GrayReleaseRule();
  newRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);
  newRules.setReleaseId(latestReleaseId);
  newRules.setRules(oldRules.getRules());
  newRules.setAppId(oldRules.getAppId());
  newRules.setClusterName(oldRules.getClusterName());
  newRules.setNamespaceName(oldRules.getNamespaceName());
  newRules.setBranchName(oldRules.getBranchName());
  newRules.setDataChangeCreatedBy(operator);
  newRules.setDataChangeLastModifiedBy(operator);

  grayReleaseRuleRepository.save(newRules);

  grayReleaseRuleRepository.delete(oldRules);

  return newRules;
}



No.1 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;
import com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;
import com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;
import org.junit.jupiter.api.*;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;

import static org.junit.jupiter.api.Assertions.*;

public class NamespaceBranchServiceTest {

    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;

    @InjectMocks
    private NamespaceBranchService namespaceBranchService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void updateRulesReleaseIdTest() {
        // GIVEN
        final String appId = "testAppId";
        final String clusterName = "testClusterName";
        final String namespaceName = "testNamespaceName";
        final String branchName = "testBranchName";
        final long latestReleaseId = 100L;
        final String operator = "operator";
        
        GrayReleaseRule oldRules = new GrayReleaseRule();
        oldRules.setAppId(appId);
        oldRules.setClusterName(clusterName);
        oldRules.setNamespaceName(namespaceName);
        oldRules.setBranchName(branchName);
        oldRules.setRules("oldRules");

        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(
                appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);
        
        // WHEN
        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(
                appId, clusterName, namespaceName, branchName, latestReleaseId, operator);

        // THEN
        assertNotNull(updatedRules, "Updated rules should not be null");
        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus(), "Branch status should be ACTIVE");
        assertEquals(latestReleaseId, updatedRules.getReleaseId(), "Release ID should match the latest release ID");
        assertEquals("oldRules", updatedRules.getRules(), "Rules should match the old rules");
        assertEquals(appId, updatedRules.getAppId(), "AppId should match");
        assertEquals(clusterName, updatedRules.getClusterName(), "ClusterName should match");
        assertEquals(namespaceName, updatedRules.getNamespaceName(), "NamespaceName should match");
        assertEquals(branchName, updatedRules.getBranchName(), "BranchName should match");
        assertEquals(operator, updatedRules.getDataChangeCreatedBy(), "DataChangeCreatedBy should match the operator");
        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy(), "DataChangeLastModifiedBy should match the operator");

        // Verify that interactions with the repository took place as expected
        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));
        verify(grayReleaseRuleRepository).delete(oldRules);
    }
} 


No.2 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;
import com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;
import com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class NamespaceBranchServiceTest {

    @InjectMocks
    private NamespaceBranchService namespaceBranchService;

    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void updateRulesReleaseIdTest() {
        String appId = "myAppId";
        String clusterName = "default";
        String namespaceName = "application";
        String branchName = "myBranch";
        long latestReleaseId = 100L;
        String operator = "testOperator";

        GrayReleaseRule oldRules = new GrayReleaseRule();
        oldRules.setAppId(appId);
        oldRules.setClusterName(clusterName);
        oldRules.setNamespaceName(namespaceName);
        oldRules.setBranchName(branchName);
        oldRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);
        oldRules.setReleaseId(99L);
        oldRules.setRules("[]");

        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(
                appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);

        GrayReleaseRule newRules = namespaceBranchService.updateRulesReleaseId(
                appId, clusterName, namespaceName, branchName, latestReleaseId, operator);

        assertNotNull(newRules);
        assertEquals(NamespaceBranchStatus.ACTIVE, newRules.getBranchStatus());
        assertEquals(latestReleaseId, newRules.getReleaseId());
        assertEquals(appId, newRules.getAppId());
        assertEquals(clusterName, newRules.getClusterName());
        assertEquals(namespaceName, newRules.getNamespaceName());
        assertEquals(branchName, newRules.getBranchName());
        assertEquals(operator, newRules.getDataChangeCreatedBy());
        assertEquals(operator, newRules.getDataChangeLastModifiedBy());


        verify(grayReleaseRuleRepository, times(1)).save(newRules);
        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);
    }
}


No.3 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;
import com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;
import com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class NamespaceBranchServiceTest {
    
    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;
    
    @InjectMocks
    private NamespaceBranchService namespaceBranchService;

    @BeforeEach
    public void setUp() {
        // Prepare test data or configure mocks before each test if necessary
    }

    @Test
    public void updateRulesReleaseIdTest() {
        // Setup test data
        String appId = "myApp";
        String clusterName = "myCluster";
        String namespaceName = "myNamespace";
        String branchName = "myBranch";
        long latestReleaseId = 100L;
        String operator = "operator";
        
        // Mock the old rules returned by the repository
        GrayReleaseRule oldRules = mock(GrayReleaseRule.class);
        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(
            appId, clusterName, namespaceName, branchName
        )).thenReturn(oldRules);

        // Execute the method to test
        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(
            appId, clusterName, namespaceName, branchName, latestReleaseId, operator
        );

        // Validate the results
        assertNotNull(updatedRules, "Updated rules should not be null");
        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus(), "Branch status should be ACTIVE");
        assertEquals(latestReleaseId, updatedRules.getReleaseId(), "Release ID should match the one provided");
        assertSame(oldRules.getRules(), updatedRules.getRules(), "Rules should match the old rules' rules");
        assertEquals(oldRules.getAppId(), updatedRules.getAppId(), "App ID should match the old rules' app ID");
        assertEquals(oldRules.getClusterName(), updatedRules.getClusterName(), "Cluster name should match the old rules' cluster name");
        assertEquals(oldRules.getNamespaceName(), updatedRules.getNamespaceName(), "Namespace name should match the old rules' namespace name");
        assertEquals(oldRules.getBranchName(), updatedRules.getBranchName(), "Branch name should match the old rules' branch name");
        assertEquals(operator, updatedRules.getDataChangeCreatedBy(), "Created by operator should match the one provided");
        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy(), "Last modified by operator should match the one provided");

        // Verify interaction with mock objects
        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));
        verify(grayReleaseRuleRepository).delete(oldRules);
    }
}


No.4 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;
import com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;
import com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;

import org.junit.jupiter.api.*;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class NamespaceBranchServiceTest {
    
    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;
    
    @InjectMocks
    private NamespaceBranchService namespaceBranchService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void updateRulesReleaseIdTest() {
        // Arrange
        String appId = "testAppId";
        String clusterName = "testClusterName";
        String namespaceName = "testNamespaceName";
        String branchName = "testBranchName";
        long latestReleaseId = 100L;
        String operator = "testOperator";
        
        GrayReleaseRule oldRules = new GrayReleaseRule();
        oldRules.setRules("oldRules");
        oldRules.setAppId(appId);
        oldRules.setClusterName(clusterName);
        oldRules.setNamespaceName(namespaceName);
        oldRules.setBranchName(branchName);
        
        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName))
            .thenReturn(oldRules);
        
        // Act
        GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);
        
        // Assert
        assertNotNull(result);
        assertEquals(latestReleaseId, result.getReleaseId());
        assertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());
        assertEquals("oldRules", result.getRules());
        assertEquals(operator, result.getDataChangeLastModifiedBy());
        assertEquals(operator, result.getDataChangeCreatedBy());

        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));
        verify(grayReleaseRuleRepository).delete(oldRules);
    }
    
    @AfterEach
    public void tearDown() {
        // Closing resources if necessary
    }
}


No.5 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;
import com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;
import com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class NamespaceBranchServiceTest {

    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;

    @InjectMocks
    private NamespaceBranchService namespaceBranchService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void updateRulesReleaseIdTest() {
        // Given
        String appId = "myApp";
        String clusterName = "default";
        String namespaceName = "application";
        String branchName = "feature-branch";
        long latestReleaseId = 100L;
        String operator = "operator";

        GrayReleaseRule oldRules = new GrayReleaseRule();
        oldRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);
        oldRules.setReleaseId(99L);
        oldRules.setRules("{}");
        oldRules.setAppId(appId);
        oldRules.setClusterName(clusterName);
        oldRules.setNamespaceName(namespaceName);
        oldRules.setBranchName(branchName);

        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(
                anyString(), anyString(), anyString(), anyString()
        )).thenReturn(oldRules);

        GrayReleaseRule expectedNewRules = new GrayReleaseRule();
        expectedNewRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);
        expectedNewRules.setReleaseId(latestReleaseId);
        expectedNewRules.setRules(oldRules.getRules());
        expectedNewRules.setAppId(appId);
        expectedNewRules.setClusterName(clusterName);
        expectedNewRules.setNamespaceName(namespaceName);
        expectedNewRules.setBranchName(branchName);
        expectedNewRules.setDataChangeCreatedBy(operator);
        expectedNewRules.setDataChangeLastModifiedBy(operator);

        // When
        GrayReleaseRule newRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);

        // Then
        assertNotNull(newRules);
        assertEquals(latestReleaseId, newRules.getReleaseId());
        assertEquals(operator, newRules.getDataChangeCreatedBy());
        assertEquals(operator, newRules.getDataChangeLastModifiedBy());
        verify(grayReleaseRuleRepository, times(1)).save(expectedNewRules);
        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);
    }
}


No.6 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;
import com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;
import com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.mockito.Mockito.*;
import static org.mockito.BDDMockito.given;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class NamespaceBranchServiceTest {

    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;

    @InjectMocks
    private NamespaceBranchService namespaceBranchService;

    private final String appId = "myAppId";
    private final String clusterName = "myClusterName";
    private final String namespaceName = "myNamespace";
    private final String branchName = "branchName";
    private final long latestReleaseId = 100L;
    private final String operator = "operator";

    private GrayReleaseRule oldRules;
    private GrayReleaseRule newRules;

    @BeforeEach
    public void setUp() {
        // set up an existing gray release rule
        oldRules = new GrayReleaseRule();
        oldRules.setId(1L);
        oldRules.setAppId(appId);
        oldRules.setClusterName(clusterName);
        oldRules.setNamespaceName(namespaceName);
        oldRules.setBranchName(branchName);
        oldRules.setRules("oldRules");
        oldRules.setReleaseId(99L);
        // new rules will not exist before the method execution
        newRules = null;

        // given statement to mimic repository behavior
        given(grayReleaseRuleRepository
                .findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName))
                .willReturn(oldRules);
    }

    @Test
    public void updateRulesReleaseIdTest() {
        // when updateRulesReleaseId is invoked with all proper parameters
        newRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);

        // then new Rules should be created with updated releaseId
        assertNotNull(newRules);
        assertEquals(NamespaceBranchStatus.ACTIVE, newRules.getBranchStatus());
        assertEquals(latestReleaseId, newRules.getReleaseId());
        assertEquals(oldRules.getRules(), newRules.getRules());
        assertEquals(oldRules.getAppId(), newRules.getAppId());
        assertEquals(oldRules.getClusterName(), newRules.getClusterName());
        assertEquals(oldRules.getNamespaceName(), newRules.getNamespaceName());
        assertEquals(oldRules.getBranchName(), newRules.getBranchName());
        assertEquals(operator, newRules.getDataChangeCreatedBy());
        assertEquals(operator, newRules.getDataChangeLastModifiedBy());

        // and old Rules should be deleted
        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);
        // and the new Rules should be saved
        verify(grayReleaseRuleRepository, times(1)).save(newRules);
    }
}


No.7 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;
import com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;
import com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class NamespaceBranchServiceTest {

    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;

    @InjectMocks
    private NamespaceBranchService namespaceBranchService;

    private final String appId = "SampleAppId";
    private final String clusterName = "default";
    private final String namespaceName = "application";
    private final String branchName = "feature-branch";
    private final long latestReleaseId = 100L;
    private final String operator = "operator";
    private GrayReleaseRule oldRules;

    @BeforeEach
    void setUp() {
        oldRules = new GrayReleaseRule();
        oldRules.setId(1L);
        oldRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);
        oldRules.setReleaseId(10L);
        oldRules.setRules("{}");
        oldRules.setAppId(appId);
        oldRules.setClusterName(clusterName);
        oldRules.setNamespaceName(namespaceName);
        oldRules.setBranchName(branchName);
        oldRules.setDataChangeCreatedBy(operator);
        oldRules.setDataChangeLastModifiedBy(operator);

        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName))
                .thenReturn(oldRules);
    }

    @Test
    public void updateRulesReleaseIdTest() {
        GrayReleaseRule newRules = new GrayReleaseRule();
        newRules.setId(2L);
        newRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);
        newRules.setReleaseId(latestReleaseId);
        newRules.setRules(oldRules.getRules());
        newRules.setAppId(appId);
        newRules.setClusterName(clusterName);
        newRules.setNamespaceName(namespaceName);
        newRules.setBranchName(branchName);
        newRules.setDataChangeCreatedBy(operator);
        newRules.setDataChangeLastModifiedBy(operator);

        when(grayReleaseRuleRepository.save(any(GrayReleaseRule.class))).thenReturn(newRules);

        GrayReleaseRule actual = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);

        assertNotNull(actual);
        assertEquals(NamespaceBranchStatus.ACTIVE, actual.getBranchStatus());
        assertEquals(latestReleaseId, actual.getReleaseId());
        assertNotNull(actual.getRules());
        assertEquals(appId, actual.getAppId());
        assertEquals(clusterName, actual.getClusterName());
        assertEquals(namespaceName, actual.getNamespaceName());
        assertEquals(branchName, actual.getBranchName());
        assertEquals(operator, actual.getDataChangeCreatedBy());
        assertEquals(operator, actual.getDataChangeLastModifiedBy());

        verify(grayReleaseRuleRepository, times(1)).save(newRules);
        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);
    }
}


No.8 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;
import com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;
import com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

public class NamespaceBranchServiceTest {

    private NamespaceBranchService namespaceBranchService;

    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        namespaceBranchService = new NamespaceBranchService(
            null, grayReleaseRuleRepository, null, null, null, null);
    }

    @Test
    public void updateRulesReleaseIdTest() {
        String appId = "myAppId";
        String clusterName = "default";
        String namespaceName = "application";
        String branchName = "myBranch";
        long latestReleaseId = 100L;
        String operator = "operator";

        GrayReleaseRule oldRules = new GrayReleaseRule();
        oldRules.setAppId(appId);
        oldRules.setClusterName(clusterName);
        oldRules.setNamespaceName(namespaceName);
        oldRules.setBranchName(branchName);
        oldRules.setRules("rule");
        
        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(
            appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);
        when(grayReleaseRuleRepository.save(any(GrayReleaseRule.class))).thenReturn(null);

        GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(
            appId, clusterName, namespaceName, branchName, latestReleaseId, operator);

        assertNotNull(result);
        assertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());
        assertEquals(latestReleaseId, result.getReleaseId());
        assertEquals(oldRules.getRules(), result.getRules());
        assertEquals(appId, result.getAppId());
        assertEquals(clusterName, result.getClusterName());
        assertEquals(namespaceName, result.getNamespaceName());
        assertEquals(branchName, result.getBranchName());
        assertEquals(operator, result.getDataChangeCreatedBy());
        assertEquals(operator, result.getDataChangeLastModifiedBy());
    }
}


No.9 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;
import com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;
import com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;

public class NamespaceBranchServiceTest {

    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;

    @InjectMocks
    private NamespaceBranchService namespaceBranchService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void updateRulesReleaseIdTest() {
        String appId = "myAppId";
        String clusterName = "default";
        String namespaceName = "application";
        String branchName = "feature-branch";
        long latestReleaseId = 100L;
        String operator = "operator";
        
        GrayReleaseRule oldRules = new GrayReleaseRule();
        oldRules.setBranchName(branchName);
        oldRules.setAppId(appId);
        oldRules.setRules("rules-content");
        
        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName))
                .thenReturn(oldRules);

        namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);

        GrayReleaseRule captorValue = new GrayReleaseRule();
        captorValue.setBranchStatus(NamespaceBranchStatus.ACTIVE);
        captorValue.setReleaseId(latestReleaseId);
        captorValue.setRules(oldRules.getRules());
        captorValue.setAppId(oldRules.getAppId());
        captorValue.setClusterName(oldRules.getClusterName());
        captorValue.setNamespaceName(oldRules.getNamespaceName());
        captorValue.setBranchName(oldRules.getBranchName());
        captorValue.setDataChangeCreatedBy(operator);
        captorValue.setDataChangeLastModifiedBy(operator);
        
        verify(grayReleaseRuleRepository, times(1)).save(captorValue);
        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);

        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);

        assertNotNull(updatedRules);
        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus());
        assertEquals(latestReleaseId, updatedRules.getReleaseId());
        assertEquals(oldRules.getRules(), updatedRules.getRules());
        assertEquals(appId, updatedRules.getAppId());
        assertEquals(clusterName, updatedRules.getClusterName());
        assertEquals(namespaceName, updatedRules.getNamespaceName());
        assertEquals(branchName, updatedRules.getBranchName());
        assertEquals(operator, updatedRules.getDataChangeCreatedBy());
        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy());
    }
}


No.10 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;
import com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;
import com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;

import org.junit.jupiter.api.*;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;

class NamespaceBranchServiceTest {

    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;

    @InjectMocks
    private NamespaceBranchService namespaceBranchService;

    private final String testAppId = "SampleApp";
    private final String testClusterName = "default";
    private final String testNamespaceName = "application";
    private final String testBranchName = "BranchA";
    private final long testLatestReleaseId = 100L;
    private final String testOperator = "operator";

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }
    
    @Test
    void updateRulesReleaseIdTest() {
        GrayReleaseRule oldRules = new GrayReleaseRule();
        oldRules.setId(1L);
        oldRules.setAppId(testAppId);
        oldRules.setClusterName(testClusterName);
        oldRules.setNamespaceName(testNamespaceName);
        oldRules.setBranchName(testBranchName);
        oldRules.setRules("[]");

        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(
                anyString(), anyString(), anyString(), anyString()
        )).thenReturn(oldRules);

        GrayReleaseRule savedRules = new GrayReleaseRule();
        savedRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);
        savedRules.setReleaseId(testLatestReleaseId);
        savedRules.setRules(oldRules.getRules());
        savedRules.setAppId(testAppId);
        savedRules.setClusterName(testClusterName);
        savedRules.setNamespaceName(testNamespaceName);
        savedRules.setBranchName(testBranchName);
        savedRules.setDataChangeCreatedBy(testOperator);
        savedRules.setDataChangeLastModifiedBy(testOperator);
        
        when(grayReleaseRuleRepository.save(any(GrayReleaseRule.class))).thenReturn(savedRules);

        GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(
                testAppId, testClusterName, testNamespaceName, testBranchName, testLatestReleaseId, testOperator
        );

        assertNotNull(result, "The result should not be null");
        assertEquals(savedRules.getReleaseId(), result.getReleaseId(), "The release IDs should match");
        assertNotEquals(oldRules.getId(), result.getId(), "The IDs should not match, indicating a new rule");

        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);
    }
}


