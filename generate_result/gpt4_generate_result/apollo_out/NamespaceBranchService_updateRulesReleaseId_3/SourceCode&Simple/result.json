{
    "project_name": "apollo",
    "file_name": "NamespaceBranchService.java",
    "relative_path": "apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/NamespaceBranchService.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.biz.service",
    "docstring": null,
    "source_code": "@Transactional\npublic GrayReleaseRule updateRulesReleaseId(String appId, String clusterName,\n                                 String namespaceName, String branchName,\n                                 long latestReleaseId, String operator) {\n  GrayReleaseRule oldRules = grayReleaseRuleRepository.\n      findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName);\n\n  if (oldRules == null) {\n    return null;\n  }\n\n  GrayReleaseRule newRules = new GrayReleaseRule();\n  newRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);\n  newRules.setReleaseId(latestReleaseId);\n  newRules.setRules(oldRules.getRules());\n  newRules.setAppId(oldRules.getAppId());\n  newRules.setClusterName(oldRules.getClusterName());\n  newRules.setNamespaceName(oldRules.getNamespaceName());\n  newRules.setBranchName(oldRules.getBranchName());\n  newRules.setDataChangeCreatedBy(operator);\n  newRules.setDataChangeLastModifiedBy(operator);\n\n  grayReleaseRuleRepository.save(newRules);\n\n  grayReleaseRuleRepository.delete(oldRules);\n\n  return newRules;\n}\n",
    "class_name": "NamespaceBranchService",
    "method_name": "updateRulesReleaseId",
    "arguments": [
        "String appId",
        "String clusterName",
        "String namespaceName",
        "String branchName",
        "long latestReleaseId",
        "String operator"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.biz.service;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class NamespaceBranchServiceTest {\n\n    private NamespaceBranchService namespaceBranchService;\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n    \n    @BeforeEach\n    void setUp() {\n        grayReleaseRuleRepository = mock(GrayReleaseRuleRepository.class);\n        namespaceBranchService = new NamespaceBranchService(null, grayReleaseRuleRepository, null, null, null, null);\n    }\n   \n    @Test\n    public void updateRulesReleaseIdTest() {\n        String appId = \"myApp\";\n        String clusterName = \"default\";\n        String namespaceName = \"application\";\n        String branchName = \"gray\";\n        long latestReleaseId = 1024L;\n        String operator = \"operator\";\n        \n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setReleaseId(1000L);\n        oldRules.setBranchName(branchName);\n        // Assume other necessary method calls and data setting for oldRules if needed\n        \n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n                appId, clusterName, namespaceName, branchName\n        )).thenReturn(oldRules);\n        \n        GrayReleaseRule newRules = namespaceBranchService.updateRulesReleaseId(\n                appId, clusterName, namespaceName, branchName, latestReleaseId, operator\n        );\n        \n        // Verification of the result\n        assertNotNull(newRules, \"New rules should not be null\");\n        assertEquals(latestReleaseId, newRules.getReleaseId(), \"Release ID should be updated\");\n        assertEquals(operator, newRules.getDataChangeCreatedBy(), \"Operator should be set correctly\");\n        assertEquals(operator, newRules.getDataChangeLastModifiedBy(), \"Last modified by should be set correctly\");\n        \n        // Verify that save and delete were called on the repository with the correct objects\n        verify(grayReleaseRuleRepository, times(1)).save(newRules);\n        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NamespaceBranchServiceTest {\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        String appId = \"myAppId\";\n        String clusterName = \"myClusterName\";\n        String namespaceName = \"myNamespaceName\";\n        String branchName = \"myBranchName\";\n        long latestReleaseId = 100L;\n        String operator = \"operator\";\n\n        // Create a mock old GrayReleaseRule\n        GrayReleaseRule oldRule = new GrayReleaseRule();\n        oldRule.setReleaseId(99L);\n        oldRule.setAppId(appId);\n        oldRule.setClusterName(clusterName);\n        oldRule.setNamespaceName(namespaceName);\n        oldRule.setBranchName(branchName);\n        // Mock that the rules existed before\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName)).thenReturn(oldRule);\n\n        // Mock the save operation on the repository\n        doAnswer(invocation -> {\n            GrayReleaseRule savedRule = invocation.getArgument(0);\n            // Ensure new rule is saved with the latest release Id and the passed operator\n            assertEquals(latestReleaseId, savedRule.getReleaseId());\n            assertEquals(operator, savedRule.getDataChangeCreatedBy());\n            assertEquals(operator, savedRule.getDataChangeLastModifiedBy());\n            // Ensure other properties are inherited from the old rule\n            assertEquals(appId, savedRule.getAppId());\n            assertEquals(clusterName, savedRule.getClusterName());\n            assertEquals(namespaceName, savedRule.getNamespaceName());\n            assertEquals(branchName, savedRule.getBranchName());\n            return null;\n        }).when(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));\n\n        // Call the method under test\n        GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        // Verify interactions\n        verify(grayReleaseRuleRepository, times(1)).findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName);\n        verify(grayReleaseRuleRepository, times(1)).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository, times(1)).delete(any(GrayReleaseRule.class));\n\n        // Assert the new rule properties. Without an actual implementation of repository logic, we can't retrieve the supposedly saved entity.\n        assertNotNull(result);\n        assertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());\n        assertEquals(latestReleaseId, result.getReleaseId());\n        assertEquals(appId, result.getAppId());\n        assertEquals(clusterName, result.getClusterName());\n        assertEquals(namespaceName, result.getNamespaceName());\n        assertEquals(branchName, result.getBranchName());\n        assertEquals(operator, result.getDataChangeCreatedBy());\n        assertEquals(operator, result.getDataChangeLastModifiedBy());\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NamespaceBranchServiceTest {\n\n    private NamespaceBranchService namespaceBranchService;\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n        namespaceBranchService = new NamespaceBranchService(null, grayReleaseRuleRepository, null, null, null, null);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // Arrange\n        String appId = \"myAppId\";\n        String clusterName = \"myClusterName\";\n        String namespaceName = \"myNamespaceName\";\n        String branchName = \"myBranchName\";\n        long latestReleaseId = 100L;\n        String operator = \"operator\";\n        \n        GrayReleaseRule oldRules = mock(GrayReleaseRule.class);\n        when(oldRules.getRules()).thenReturn(\"rules\");\n        when(oldRules.getAppId()).thenReturn(appId);\n        when(oldRules.getClusterName()).thenReturn(clusterName);\n        when(oldRules.getNamespaceName()).thenReturn(namespaceName);\n        when(oldRules.getBranchName()).thenReturn(branchName);\n        \n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);\n\n        GrayReleaseRule expectedNewRules = new GrayReleaseRule();\n        expectedNewRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);\n        expectedNewRules.setReleaseId(latestReleaseId);\n        expectedNewRules.setRules(\"rules\");\n        expectedNewRules.setAppId(appId);\n        expectedNewRules.setClusterName(clusterName);\n        expectedNewRules.setNamespaceName(namespaceName);\n        expectedNewRules.setBranchName(branchName);\n        expectedNewRules.setDataChangeCreatedBy(operator);\n        expectedNewRules.setDataChangeLastModifiedBy(operator);\n\n        // Act\n        GrayReleaseRule actualNewRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        // Assert\n        assertNotNull(actualNewRules);\n        assertEquals(NamespaceBranchStatus.ACTIVE, actualNewRules.getBranchStatus());\n        assertEquals(latestReleaseId, actualNewRules.getReleaseId());\n        assertEquals(\"rules\", actualNewRules.getRules());\n        assertEquals(appId, actualNewRules.getAppId());\n        assertEquals(clusterName, actualNewRules.getClusterName());\n        assertEquals(namespaceName, actualNewRules.getNamespaceName());\n        assertEquals(branchName, actualNewRules.getBranchName());\n        assertEquals(operator, actualNewRules.getDataChangeCreatedBy());\n        assertEquals(operator, actualNewRules.getDataChangeLastModifiedBy());\n\n        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository).delete(oldRules);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NamespaceBranchServiceTest {\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    private final String appId = \"myAppId\";\n    private final String clusterName = \"myClusterName\";\n    private final String namespaceName = \"myNamespaceName\";\n    private final String branchName = \"myBranchName\";\n    private final long latestReleaseId = 100L;\n    private final String operator = \"operator\";\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n                appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);\n\n        GrayReleaseRule updatedRule = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        assertNotNull(updatedRule);\n        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRule.getBranchStatus());\n        assertEquals(latestReleaseId, updatedRule.getReleaseId());\n        assertEquals(oldRules.getRules(), updatedRule.getRules());\n        assertEquals(oldRules.getAppId(), updatedRule.getAppId());\n        assertEquals(oldRules.getClusterName(), updatedRule.getClusterName());\n        assertEquals(oldRules.getNamespaceName(), updatedRule.getNamespaceName());\n        assertEquals(oldRules.getBranchName(), updatedRule.getBranchName());\n        assertEquals(operator, updatedRule.getDataChangeCreatedBy());\n        assertEquals(operator, updatedRule.getDataChangeLastModifiedBy());\n\n        verify(grayReleaseRuleRepository, times(1)).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);\n        verify(grayReleaseRuleRepository, times(1)).findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n                appId, clusterName, namespaceName, branchName);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NamespaceBranchServiceTest {\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // Given\n        String appId = \"myAppId\";\n        String clusterName = \"default\";\n        String namespaceName = \"application\";\n        String branchName = \"myBranch\";\n        long latestReleaseId = 100L;\n        String operator = \"operator\";\n        \n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setAppId(appId)\n                .setClusterName(clusterName)\n                .setNamespaceName(namespaceName)\n                .setBranchName(branchName);\n\n        when(grayReleaseRuleRepository\n             .findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName))\n             .thenReturn(oldRules);\n\n        // When\n        GrayReleaseRule updatedRules = \n            namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        // Then\n        assertNotNull(updatedRules, \"Updated rules should not be null.\");\n        assertEquals(latestReleaseId, updatedRules.getReleaseId(), \"Release ID should be updated.\");\n        assertEquals(appId, updatedRules.getAppId(), \"App ID should match.\");\n        assertEquals(clusterName, updatedRules.getClusterName(), \"Cluster name should match.\");\n        assertEquals(namespaceName, updatedRules.getNamespaceName(), \"Namespace name should match.\");\n        assertEquals(branchName, updatedRules.getBranchName(), \"Branch name should match.\");\n        assertEquals(operator, updatedRules.getDataChangeCreatedBy(), \"Created by should be set to the operator.\");\n        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy(), \"Modified by should be set to the operator.\");\n        \n        verify(grayReleaseRuleRepository, times(1)).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class NamespaceBranchServiceTest {\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    private final String appId = \"myAppId\";\n    private final String clusterName = \"myClusterName\";\n    private final String namespaceName = \"myNamespaceName\";\n    private final String branchName = \"myBranchName\";\n    private final long latestReleaseId = 100L;\n    private final String operator = \"operator\";\n\n    private GrayReleaseRule oldRules;\n    private GrayReleaseRule newRules;\n\n    @BeforeEach\n    public void setUp() {\n        oldRules = new GrayReleaseRule();\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        oldRules.setReleaseId(99L);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);\n\n        newRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        assertNotNull(newRules, \"New rules should not be null\");\n        assertEquals(NamespaceBranchStatus.ACTIVE, newRules.getBranchStatus(), \"Branch status should be set to ACTIVE\");\n        assertEquals(latestReleaseId, newRules.getReleaseId(), \"ReleaseId should be updated to the latest\");\n        assertEquals(oldRules.getRules(), newRules.getRules(), \"Rules should be the same as the old rules\");\n        assertEquals(operator, newRules.getDataChangeCreatedBy(), \"Operator should be set as DataChangeCreatedBy\");\n        assertEquals(operator, newRules.getDataChangeLastModifiedBy(), \"Operator should be set as DataChangeLastModifiedBy\");\n\n        verify(grayReleaseRuleRepository).save(newRules);\n        verify(grayReleaseRuleRepository).delete(oldRules);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.when;\n\npublic class NamespaceBranchServiceTest {\n\n    private NamespaceBranchService namespaceBranchService;\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @BeforeEach\n    public void setUp() {\n        grayReleaseRuleRepository = Mockito.mock(GrayReleaseRuleRepository.class);\n        namespaceBranchService = new NamespaceBranchService(null, grayReleaseRuleRepository, null, null, null, null);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        String appId = \"myApp\";\n        String clusterName = \"default\";\n        String namespaceName = \"application\";\n        String branchName = \"branch-001\";\n        long latestReleaseId = 100L;\n        String operator = \"operator\";\n        \n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setRules(\"some-rule\");\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        \n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName))\n                .thenReturn(oldRules);\n\n        when(grayReleaseRuleRepository.save(any(GrayReleaseRule.class))).thenAnswer(invocation -> invocation.getArgument(0));\n\n        GrayReleaseRule updatedRule = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        assertNotNull(updatedRule);\n        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRule.getBranchStatus());\n        assertEquals(latestReleaseId, updatedRule.getReleaseId());\n        assertEquals(oldRules.getRules(), updatedRule.getRules());\n        assertEquals(appId, updatedRule.getAppId());\n        assertEquals(clusterName, updatedRule.getClusterName());\n        assertEquals(namespaceName, updatedRule.getNamespaceName());\n        assertEquals(branchName, updatedRule.getBranchName());\n        assertEquals(operator, updatedRule.getDataChangeCreatedBy());\n        assertEquals(operator, updatedRule.getDataChangeLastModifiedBy());\n        \n        // Verify that the old rules are deleted\n        Mockito.verify(grayReleaseRuleRepository).delete(oldRules);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class NamespaceBranchServiceTest {\n\n    private NamespaceBranchService namespaceBranchService;\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @BeforeEach\n    public void setUp() {\n        grayReleaseRuleRepository = mock(GrayReleaseRuleRepository.class);\n        namespaceBranchService = new NamespaceBranchService(\n            mock(AuditService.class), grayReleaseRuleRepository, mock(ClusterService.class),\n            mock(ReleaseService.class), mock(NamespaceService.class), mock(ReleaseHistoryService.class));\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // Given\n        String appId = \"sampleAppId\";\n        String clusterName = \"default\";\n        String namespaceName = \"application\";\n        String branchName = \"feature-branch\";\n        long latestReleaseId = 100L;\n        String operator = \"operator\";\n\n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setBranchName(branchName);\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setReleaseId(50L); // just a dummy previous release id\n\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n            appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);\n\n        // When\n        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(\n            appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        // Then\n        assertNotNull(updatedRules);\n        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus());\n        assertEquals(latestReleaseId, updatedRules.getReleaseId());\n        assertEquals(operator, updatedRules.getDataChangeCreatedBy());\n        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy());\n\n        // Verify interactions\n        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository).delete(oldRules);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class NamespaceBranchServiceTest {\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // Given\n        String appId = \"myApp\";\n        String clusterName = \"default\";\n        String namespaceName = \"application\";\n        String branchName = \"feature-branch\";\n        long latestReleaseId = 100L;\n        String operator = \"testOperator\";\n\n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        oldRules.setReleaseId(99L);\n\n        GrayReleaseRule updatedRules = new GrayReleaseRule();\n        updatedRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);\n        updatedRules.setReleaseId(latestReleaseId);\n        updatedRules.setRules(oldRules.getRules());\n        updatedRules.setAppId(appId);\n        updatedRules.setClusterName(clusterName);\n        updatedRules.setNamespaceName(namespaceName);\n        updatedRules.setBranchName(branchName);\n        updatedRules.setDataChangeCreatedBy(operator);\n        updatedRules.setDataChangeLastModifiedBy(operator);\n\n        // When\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName))\n                .thenReturn(oldRules);\n        when(grayReleaseRuleRepository.save(any(GrayReleaseRule.class))).thenReturn(updatedRules);\n\n        GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        // Then\n        assertNotNull(result);\n        assertEquals(latestReleaseId, result.getReleaseId());\n        assertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());\n        assertEquals(operator, result.getDataChangeCreatedBy());\n        assertEquals(operator, result.getDataChangeLastModifiedBy());\n\n        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NamespaceBranchServiceTest {\n    \n    private NamespaceBranchService namespaceBranchService;\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n    \n    @BeforeEach\n    public void setUp() {\n        grayReleaseRuleRepository = Mockito.mock(GrayReleaseRuleRepository.class);\n        namespaceBranchService = new NamespaceBranchService(null, grayReleaseRuleRepository, null, null, null, null);\n    }\n    \n    @Test\n    public void updateRulesReleaseIdTest() {\n        // Given\n        String appId = \"TestApp\";\n        String clusterName = \"default\";\n        String namespaceName = \"application\";\n        String branchName = \"feature-123\";\n        long latestReleaseId = 100L;\n        String operator = \"operatorA\";\n        \n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        \n        Mockito.when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n            eq(appId), eq(clusterName), eq(namespaceName), eq(branchName)\n        )).thenReturn(oldRules);\n        \n        Mockito.when(grayReleaseRuleRepository.save(any(GrayReleaseRule.class))).thenAnswer(i -> i.getArguments()[0]);\n        Mockito.doNothing().when(grayReleaseRuleRepository).delete(any(GrayReleaseRule.class));\n\n        // When\n        GrayReleaseRule updatedRule = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n        \n        // Then\n        assertNotNull(updatedRule);\n        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRule.getBranchStatus());\n        assertEquals(latestReleaseId, updatedRule.getReleaseId());\n        assertEquals(oldRules.getRules(), updatedRule.getRules());\n        assertEquals(appId, updatedRule.getAppId());\n        assertEquals(clusterName, updatedRule.getClusterName());\n        assertEquals(namespaceName, updatedRule.getNamespaceName());\n        assertEquals(branchName, updatedRule.getBranchName());\n        assertEquals(operator, updatedRule.getDataChangeCreatedBy());\n        assertEquals(operator, updatedRule.getDataChangeLastModifiedBy());\n        \n        // Verify\n        Mockito.verify(grayReleaseRuleRepository).delete(oldRules);\n        Mockito.verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));\n    }\n    \n    @AfterEach\n    public void tearDown() {\n        Mockito.reset(grayReleaseRuleRepository);\n    }\n}"
    ]
}