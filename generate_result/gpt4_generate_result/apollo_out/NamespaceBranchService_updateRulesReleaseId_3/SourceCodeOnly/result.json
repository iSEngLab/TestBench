{
    "project_name": "apollo",
    "file_name": "NamespaceBranchService.java",
    "relative_path": "apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/NamespaceBranchService.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.biz.service",
    "docstring": null,
    "source_code": "@Transactional\npublic GrayReleaseRule updateRulesReleaseId(String appId, String clusterName,\n                                 String namespaceName, String branchName,\n                                 long latestReleaseId, String operator) {\n  GrayReleaseRule oldRules = grayReleaseRuleRepository.\n      findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName);\n\n  if (oldRules == null) {\n    return null;\n  }\n\n  GrayReleaseRule newRules = new GrayReleaseRule();\n  newRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);\n  newRules.setReleaseId(latestReleaseId);\n  newRules.setRules(oldRules.getRules());\n  newRules.setAppId(oldRules.getAppId());\n  newRules.setClusterName(oldRules.getClusterName());\n  newRules.setNamespaceName(oldRules.getNamespaceName());\n  newRules.setBranchName(oldRules.getBranchName());\n  newRules.setDataChangeCreatedBy(operator);\n  newRules.setDataChangeLastModifiedBy(operator);\n\n  grayReleaseRuleRepository.save(newRules);\n\n  grayReleaseRuleRepository.delete(oldRules);\n\n  return newRules;\n}\n",
    "class_name": "NamespaceBranchService",
    "method_name": "updateRulesReleaseId",
    "arguments": [
        "String appId",
        "String clusterName",
        "String namespaceName",
        "String branchName",
        "long latestReleaseId",
        "String operator"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.biz.service;\n\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.*;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport static org.mockito.Mockito.*;\n\nimport com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;\nimport com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;\nimport com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class NamespaceBranchServiceTest {\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n    \n    private final String appId = \"testApp\";\n    private final String clusterName = \"testCluster\";\n    private final String namespaceName = \"testNamespace\";\n    private final String branchName = \"testBranch\";\n    private final long latestReleaseId = 100L;\n    private final String operator = \"testOperator\";\n\n    @BeforeEach\n    public void setUp() {\n        // Create a mock of old GrayReleaseRule\n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setBranchStatus(NamespaceBranchStatus.INACTIVE);\n        oldRules.setReleaseId(50L);\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n            appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // Call the method to test\n        GrayReleaseRule newRules = namespaceBranchService.updateRulesReleaseId(\n            appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        // Verify the new GrayReleaseRule properties\n        assertNotNull(newRules, \"The returned GrayReleaseRule should not be null\");\n        assertEquals(NamespaceBranchStatus.ACTIVE, newRules.getBranchStatus(), \"The branch status should be ACTIVE\");\n        assertEquals(latestReleaseId, newRules.getReleaseId(), \"The release ID should match the latestReleaseId\");\n        assertEquals(appId, newRules.getAppId(), \"The appId should match the input appId\");\n        assertEquals(clusterName, newRules.getClusterName(), \"The clusterName should match the input clusterName\");\n        assertEquals(namespaceName, newRules.getNamespaceName(), \"The namespaceName should match the input namespaceName\");\n        assertEquals(branchName, newRules.getBranchName(), \"The branchName should match the input branchName\");\n        assertEquals(operator, newRules.getDataChangeCreatedBy(), \"The operator should match the input operator\");\n        assertEquals(operator, newRules.getDataChangeLastModifiedBy(), \"The operator should match the input operator\");\n\n        // Verify repository interaction\n        verify(grayReleaseRuleRepository).save(newRules);\n        verify(grayReleaseRuleRepository).delete(any(GrayReleaseRule.class));\n\n        // Verify no more interactions\n        verifyNoMoreInteractions(grayReleaseRuleRepository);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass GrayReleaseRuleRepositoryTest {\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        String appId = \"myApp\";\n        String clusterName = \"default\";\n        String namespaceName = \"application\";\n        String branchName = \"feature-branch\";\n        long latestReleaseId = 100L;\n        String operator = \"operatorUser\";\n\n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n                appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);\n\n        GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(\n                appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository).delete(oldRules);\n\n        assertNotNull(result);\n        assertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());\n        assertEquals(latestReleaseId, result.getReleaseId());\n        assertEquals(appId, result.getAppId());\n        assertEquals(clusterName, result.getClusterName());\n        assertEquals(namespaceName, result.getNamespaceName());\n        assertEquals(branchName, result.getBranchName());\n        assertEquals(operator, result.getDataChangeCreatedBy());\n        assertEquals(operator, result.getDataChangeLastModifiedBy());\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class NamespaceBranchServiceTest {\n\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n    private NamespaceBranchService namespaceBranchService;\n    \n    @BeforeEach\n    public void setUp() {\n        grayReleaseRuleRepository = mock(GrayReleaseRuleRepository.class);\n        namespaceBranchService = new NamespaceBranchService(grayReleaseRuleRepository);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTestWhenOldRulesExist() {\n        String appId = \"myAppId\";\n        String clusterName = \"myClusterName\";\n        String namespaceName = \"myNamespaceName\";\n        String branchName = \"myBranchName\";\n        long latestReleaseId = 100L;\n        String operator = \"operator\";\n\n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);\n\n        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n        \n        assertNotNull(updatedRules);\n        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus());\n        assertEquals(latestReleaseId, updatedRules.getReleaseId());\n        assertEquals(oldRules.getRules(), updatedRules.getRules());\n        assertEquals(operator, updatedRules.getDataChangeCreatedBy());\n        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy());\n\n        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository).delete(oldRules);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTestWhenOldRulesDoNotExist() {\n        String appId = \"myAppId\";\n        String clusterName = \"myClusterName\";\n        String namespaceName = \"myNamespaceName\";\n        String branchName = \"myBranchName\";\n        long latestReleaseId = 100L;\n        String operator = \"operator\";\n\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName)).thenReturn(null);\n\n        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        assertNull(updatedRules);\n\n        verify(grayReleaseRuleRepository, never()).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository, never()).delete(any(GrayReleaseRule.class));\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport org.junit.jupiter.api.*;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class NamespaceBranchServiceTest {\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService; // Assuming this is the service class name\n\n    private static final String appId = \"myApp\";\n    private static final String clusterName = \"myCluster\";\n    private static final String namespaceName = \"myNamespace\";\n    private static final String branchName = \"myBranch\";\n    private static final long latestReleaseId = 100L;\n    private static final String operator = \"operator\";\n    \n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // Arrange\n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        // Setup necessary old rule properties, if required, for example:\n        oldRules.setRules(\"rulesContent\");\n        \n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n                appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);\n\n        // Act\n        GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(\n                appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        // Assert\n        assertNotNull(result);\n        assertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());\n        assertEquals(latestReleaseId, result.getReleaseId());\n        assertEquals(operator, result.getDataChangeCreatedBy());\n        assertEquals(operator, result.getDataChangeLastModifiedBy());\n        assertNotNull(result.getRules());\n        assertEquals(oldRules.getRules(), result.getRules());\n        assertEquals(appId, result.getAppId());\n        assertEquals(clusterName, result.getClusterName());\n        assertEquals(namespaceName, result.getNamespaceName());\n        assertEquals(branchName, result.getBranchName());\n\n        // Verify repository interactions\n        verify(grayReleaseRuleRepository, times(1)).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass NamespaceBranchServiceTest {\n  \n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    private final String appId = \"testApp\";\n    private final String clusterName = \"testCluster\";\n    private final String namespaceName = \"testNamespace\";\n    private final String branchName = \"testBranch\";\n    private final long latestReleaseId = 100L;\n    private final String operator = \"testOperator\";\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // Arrange\n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        oldRules.setRules(\"rules\");\n\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName))\n                .thenReturn(oldRules);\n\n        // Act\n        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        // Assert\n        assertNotNull(updatedRules);\n        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus());\n        assertEquals(latestReleaseId, updatedRules.getReleaseId());\n        assertEquals(oldRules.getRules(), updatedRules.getRules());\n        assertEquals(operator, updatedRules.getDataChangeCreatedBy());\n        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy());\n\n        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository).delete(oldRules);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass NamespaceBranchServiceTest {\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // Arrange\n        String appId = \"someApp\";\n        String clusterName = \"default\";\n        String namespaceName = \"application\";\n        String branchName = \"someBranch\";\n        long latestReleaseId = 100L;\n        String operator = \"operatorUser\";\n\n        GrayReleaseRule existingRule = mock(GrayReleaseRule.class);\n        when(existingRule.getRules()).thenReturn(\"rulesContent\");\n        when(existingRule.getAppId()).thenReturn(appId);\n        when(existingRule.getClusterName()).thenReturn(clusterName);\n        when(existingRule.getNamespaceName()).thenReturn(namespaceName);\n        when(existingRule.getBranchName()).thenReturn(branchName);\n\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n                appId, clusterName, namespaceName, branchName)).thenReturn(existingRule);\n\n        // Act\n        GrayReleaseRule updatedRule = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        // Assert\n        assertNotNull(updatedRule, \"The updated rule should not be null\");\n        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRule.getBranchStatus(), \"The branch status should be ACTIVE\");\n        assertEquals(latestReleaseId, updatedRule.getReleaseId(), \"The release ID should be updated to the latest\");\n        assertEquals(\"rulesContent\", updatedRule.getRules(), \"The rules content should be copied from the existing rule\");\n        assertEquals(appId, updatedRule.getAppId(), \"The App ID should be carried over from the existing rule\");\n        assertEquals(clusterName, updatedRule.getClusterName(), \"The cluster name should be carried over from the existing rule\");\n        assertEquals(namespaceName, updatedRule.getNamespaceName(), \"The namespace name should be carried over from the existing rule\");\n        assertEquals(branchName, updatedRule.getBranchName(), \"The branch name should be carried over from the existing rule\");\n        assertEquals(operator, updatedRule.getDataChangeCreatedBy(), \"The operator should be set as the creator\");\n        assertEquals(operator, updatedRule.getDataChangeLastModifiedBy(), \"The operator should be set as the last modifier\");\n\n        verify(grayReleaseRuleRepository, times(1)).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository, times(1)).delete(existingRule);\n    }\n    \n    @AfterEach\n    public void tearDown() {\n        // clean up after each test if necessary\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport static org.mockito.Mockito.*;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class NamespaceBranchServiceTest {\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // Arrange\n        String appId = \"myAppId\";\n        String clusterName = \"myClusterName\";\n        String namespaceName = \"myNamespaceName\";\n        String branchName = \"myBranchName\";\n        long latestReleaseId = 100L;\n        String operator = \"operator\";\n\n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);\n        oldRules.setReleaseId(50L);\n        oldRules.setRules(\"rule-set-1\");\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        oldRules.setDataChangeCreatedBy(\"creator\");\n        oldRules.setDataChangeLastModifiedBy(\"modifier\");\n\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n                appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);\n\n        // Act\n        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(\n                appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        // Assert\n        assertNotNull(updatedRules);\n        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus());\n        assertEquals(latestReleaseId, updatedRules.getReleaseId());\n        assertEquals(oldRules.getRules(), updatedRules.getRules());\n        assertEquals(appId, updatedRules.getAppId());\n        assertEquals(clusterName, updatedRules.getClusterName());\n        assertEquals(namespaceName, updatedRules.getNamespaceName());\n        assertEquals(branchName, updatedRules.getBranchName());\n        assertEquals(operator, updatedRules.getDataChangeCreatedBy());\n        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy());\n\n        // Verify interactions\n        verify(grayReleaseRuleRepository).save(Mockito.any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository).delete(oldRules);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\n\npublic class NamespaceBranchServiceTest {\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        // Arrange\n        String appId = \"testApp\";\n        String clusterName = \"default\";\n        String namespaceName = \"application\";\n        String branchName = \"feature-branch\";\n        long latestReleaseId = 100L;\n        String operator = \"testOperator\";\n\n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setReleaseId(99L);\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(\n                appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);\n\n        // Act\n        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        // Assert\n        assertNotNull(updatedRules, \"Updated rules should not be null\");\n        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus(), \"Branch status should be ACTIVE\");\n        assertEquals(latestReleaseId, updatedRules.getReleaseId(), \"Release ID should be updated to the latest\");\n        assertEquals(oldRules.getRules(), updatedRules.getRules(), \"Rules should not change\");\n        assertEquals(operator, updatedRules.getDataChangeCreatedBy(), \"Created by operator should be set\");\n        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy(), \"Modified by operator should be set\");\n\n        verify(grayReleaseRuleRepository, times(1)).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\n\nclass NamespaceBranchServiceTest {\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n    \n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n    \n    @Test\n    public void updateRulesReleaseIdTest() {\n        // Arrange\n        String appId = \"someAppId\";\n        String clusterName = \"someClusterName\";\n        String namespaceName = \"someNamespaceName\";\n        String branchName = \"someBranchName\";\n        long latestReleaseId = 100L;\n        String operator = \"operator\";\n\n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        oldRules.setBranchStatus(NamespaceBranchStatus.INACTIVE); // Assume status is INACTIVE to be changed\n        oldRules.setReleaseId(50L); // Assume previous release ID\n\n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName))\n                .thenReturn(oldRules);\n\n        // Act\n        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        // Assert\n        assertNotNull(updatedRules);\n        assertEquals(latestReleaseId, updatedRules.getReleaseId());\n        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus());\n        assertEquals(operator, updatedRules.getDataChangeCreatedBy());\n        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy());\n\n        verify(grayReleaseRuleRepository).findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName);\n        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));\n        verify(grayReleaseRuleRepository).delete(oldRules);\n    }\n\n    // Add additional test methods if necessary\n}",
        "package com.ctrip.framework.apollo.biz.service;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport static org.mockito.Mockito.*;\n\npublic class NamespaceBranchServiceTest {\n\n    @InjectMocks\n    private NamespaceBranchService namespaceBranchService;\n\n    @Mock\n    private GrayReleaseRuleRepository grayReleaseRuleRepository;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void updateRulesReleaseIdTest() {\n        String appId = \"sampleApp\";\n        String clusterName = \"default\";\n        String namespaceName = \"application\";\n        String branchName = \"branch-1001\";\n        long latestReleaseId = 1002L;\n        String operator = \"operator1\";\n\n        GrayReleaseRule oldRules = new GrayReleaseRule();\n        oldRules.setId(1001L);\n        oldRules.setAppId(appId);\n        oldRules.setClusterName(clusterName);\n        oldRules.setNamespaceName(namespaceName);\n        oldRules.setBranchName(branchName);\n        oldRules.setReleaseId(1001L);\n        oldRules.setRules(\"<rules>\");\n        \n        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);\n        \n        namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);\n\n        verify(grayReleaseRuleRepository).save(argThat(newRule -> \n            newRule.getReleaseId() == latestReleaseId &&\n            newRule.getAppId().equals(appId) &&\n            newRule.getClusterName().equals(clusterName) &&\n            newRule.getNamespaceName().equals(namespaceName) &&\n            newRule.getBranchName().equals(branchName) &&\n            newRule.getDataChangeCreatedBy().equals(operator) &&\n            newRule.getDataChangeLastModifiedBy().equals(operator)\n        ));\n        \n        verify(grayReleaseRuleRepository).delete(oldRules);\n\n        assertNotNull(namespaceBranchService);\n    }\n}"
    ]
}