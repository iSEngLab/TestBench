Source code: 

@Transactional
public GrayReleaseRule updateRulesReleaseId(String appId, String clusterName,
                                 String namespaceName, String branchName,
                                 long latestReleaseId, String operator) {
  GrayReleaseRule oldRules = grayReleaseRuleRepository.
      findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName);

  if (oldRules == null) {
    return null;
  }

  GrayReleaseRule newRules = new GrayReleaseRule();
  newRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);
  newRules.setReleaseId(latestReleaseId);
  newRules.setRules(oldRules.getRules());
  newRules.setAppId(oldRules.getAppId());
  newRules.setClusterName(oldRules.getClusterName());
  newRules.setNamespaceName(oldRules.getNamespaceName());
  newRules.setBranchName(oldRules.getBranchName());
  newRules.setDataChangeCreatedBy(operator);
  newRules.setDataChangeLastModifiedBy(operator);

  grayReleaseRuleRepository.save(newRules);

  grayReleaseRuleRepository.delete(oldRules);

  return newRules;
}



No.1 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;

import com.ctrip.framework.apollo.biz.entity.GrayReleaseRule;
import com.ctrip.framework.apollo.biz.repository.GrayReleaseRuleRepository;
import com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class NamespaceBranchServiceTest {

    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;

    @InjectMocks
    private NamespaceBranchService namespaceBranchService;
    
    private final String appId = "testApp";
    private final String clusterName = "testCluster";
    private final String namespaceName = "testNamespace";
    private final String branchName = "testBranch";
    private final long latestReleaseId = 100L;
    private final String operator = "testOperator";

    @BeforeEach
    public void setUp() {
        // Create a mock of old GrayReleaseRule
        GrayReleaseRule oldRules = new GrayReleaseRule();
        oldRules.setBranchStatus(NamespaceBranchStatus.INACTIVE);
        oldRules.setReleaseId(50L);
        oldRules.setAppId(appId);
        oldRules.setClusterName(clusterName);
        oldRules.setNamespaceName(namespaceName);
        oldRules.setBranchName(branchName);

        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(
            appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);
    }

    @Test
    public void updateRulesReleaseIdTest() {
        // Call the method to test
        GrayReleaseRule newRules = namespaceBranchService.updateRulesReleaseId(
            appId, clusterName, namespaceName, branchName, latestReleaseId, operator);

        // Verify the new GrayReleaseRule properties
        assertNotNull(newRules, "The returned GrayReleaseRule should not be null");
        assertEquals(NamespaceBranchStatus.ACTIVE, newRules.getBranchStatus(), "The branch status should be ACTIVE");
        assertEquals(latestReleaseId, newRules.getReleaseId(), "The release ID should match the latestReleaseId");
        assertEquals(appId, newRules.getAppId(), "The appId should match the input appId");
        assertEquals(clusterName, newRules.getClusterName(), "The clusterName should match the input clusterName");
        assertEquals(namespaceName, newRules.getNamespaceName(), "The namespaceName should match the input namespaceName");
        assertEquals(branchName, newRules.getBranchName(), "The branchName should match the input branchName");
        assertEquals(operator, newRules.getDataChangeCreatedBy(), "The operator should match the input operator");
        assertEquals(operator, newRules.getDataChangeLastModifiedBy(), "The operator should match the input operator");

        // Verify repository interaction
        verify(grayReleaseRuleRepository).save(newRules);
        verify(grayReleaseRuleRepository).delete(any(GrayReleaseRule.class));

        // Verify no more interactions
        verifyNoMoreInteractions(grayReleaseRuleRepository);
    }
}


No.2 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import org.junit.jupiter.api.*;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class GrayReleaseRuleRepositoryTest {
    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;

    @InjectMocks
    private NamespaceBranchService namespaceBranchService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void updateRulesReleaseIdTest() {
        String appId = "myApp";
        String clusterName = "default";
        String namespaceName = "application";
        String branchName = "feature-branch";
        long latestReleaseId = 100L;
        String operator = "operatorUser";

        GrayReleaseRule oldRules = new GrayReleaseRule();
        oldRules.setAppId(appId);
        oldRules.setClusterName(clusterName);
        oldRules.setNamespaceName(namespaceName);
        oldRules.setBranchName(branchName);

        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(
                appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);

        GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(
                appId, clusterName, namespaceName, branchName, latestReleaseId, operator);

        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));
        verify(grayReleaseRuleRepository).delete(oldRules);

        assertNotNull(result);
        assertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());
        assertEquals(latestReleaseId, result.getReleaseId());
        assertEquals(appId, result.getAppId());
        assertEquals(clusterName, result.getClusterName());
        assertEquals(namespaceName, result.getNamespaceName());
        assertEquals(branchName, result.getBranchName());
        assertEquals(operator, result.getDataChangeCreatedBy());
        assertEquals(operator, result.getDataChangeLastModifiedBy());
    }
}


No.3 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class NamespaceBranchServiceTest {

    private GrayReleaseRuleRepository grayReleaseRuleRepository;
    private NamespaceBranchService namespaceBranchService;
    
    @BeforeEach
    public void setUp() {
        grayReleaseRuleRepository = mock(GrayReleaseRuleRepository.class);
        namespaceBranchService = new NamespaceBranchService(grayReleaseRuleRepository);
    }

    @Test
    public void updateRulesReleaseIdTestWhenOldRulesExist() {
        String appId = "myAppId";
        String clusterName = "myClusterName";
        String namespaceName = "myNamespaceName";
        String branchName = "myBranchName";
        long latestReleaseId = 100L;
        String operator = "operator";

        GrayReleaseRule oldRules = new GrayReleaseRule();
        oldRules.setAppId(appId);
        oldRules.setClusterName(clusterName);
        oldRules.setNamespaceName(namespaceName);
        oldRules.setBranchName(branchName);
        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);

        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);
        
        assertNotNull(updatedRules);
        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus());
        assertEquals(latestReleaseId, updatedRules.getReleaseId());
        assertEquals(oldRules.getRules(), updatedRules.getRules());
        assertEquals(operator, updatedRules.getDataChangeCreatedBy());
        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy());

        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));
        verify(grayReleaseRuleRepository).delete(oldRules);
    }

    @Test
    public void updateRulesReleaseIdTestWhenOldRulesDoNotExist() {
        String appId = "myAppId";
        String clusterName = "myClusterName";
        String namespaceName = "myNamespaceName";
        String branchName = "myBranchName";
        long latestReleaseId = 100L;
        String operator = "operator";

        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName)).thenReturn(null);

        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);

        assertNull(updatedRules);

        verify(grayReleaseRuleRepository, never()).save(any(GrayReleaseRule.class));
        verify(grayReleaseRuleRepository, never()).delete(any(GrayReleaseRule.class));
    }
}


No.4 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import org.junit.jupiter.api.*;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class NamespaceBranchServiceTest {

    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;

    @InjectMocks
    private NamespaceBranchService namespaceBranchService; // Assuming this is the service class name

    private static final String appId = "myApp";
    private static final String clusterName = "myCluster";
    private static final String namespaceName = "myNamespace";
    private static final String branchName = "myBranch";
    private static final long latestReleaseId = 100L;
    private static final String operator = "operator";
    
    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void updateRulesReleaseIdTest() {
        // Arrange
        GrayReleaseRule oldRules = new GrayReleaseRule();
        oldRules.setAppId(appId);
        oldRules.setClusterName(clusterName);
        oldRules.setNamespaceName(namespaceName);
        oldRules.setBranchName(branchName);
        // Setup necessary old rule properties, if required, for example:
        oldRules.setRules("rulesContent");
        
        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(
                appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);

        // Act
        GrayReleaseRule result = namespaceBranchService.updateRulesReleaseId(
                appId, clusterName, namespaceName, branchName, latestReleaseId, operator);

        // Assert
        assertNotNull(result);
        assertEquals(NamespaceBranchStatus.ACTIVE, result.getBranchStatus());
        assertEquals(latestReleaseId, result.getReleaseId());
        assertEquals(operator, result.getDataChangeCreatedBy());
        assertEquals(operator, result.getDataChangeLastModifiedBy());
        assertNotNull(result.getRules());
        assertEquals(oldRules.getRules(), result.getRules());
        assertEquals(appId, result.getAppId());
        assertEquals(clusterName, result.getClusterName());
        assertEquals(namespaceName, result.getNamespaceName());
        assertEquals(branchName, result.getBranchName());

        // Verify repository interactions
        verify(grayReleaseRuleRepository, times(1)).save(any(GrayReleaseRule.class));
        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);
    }
}


No.5 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import org.junit.jupiter.api.*;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class NamespaceBranchServiceTest {
  
    @InjectMocks
    private NamespaceBranchService namespaceBranchService;

    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;

    private final String appId = "testApp";
    private final String clusterName = "testCluster";
    private final String namespaceName = "testNamespace";
    private final String branchName = "testBranch";
    private final long latestReleaseId = 100L;
    private final String operator = "testOperator";

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void updateRulesReleaseIdTest() {
        // Arrange
        GrayReleaseRule oldRules = new GrayReleaseRule();
        oldRules.setAppId(appId);
        oldRules.setClusterName(clusterName);
        oldRules.setNamespaceName(namespaceName);
        oldRules.setBranchName(branchName);
        oldRules.setRules("rules");

        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName))
                .thenReturn(oldRules);

        // Act
        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);

        // Assert
        assertNotNull(updatedRules);
        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus());
        assertEquals(latestReleaseId, updatedRules.getReleaseId());
        assertEquals(oldRules.getRules(), updatedRules.getRules());
        assertEquals(operator, updatedRules.getDataChangeCreatedBy());
        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy());

        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));
        verify(grayReleaseRuleRepository).delete(oldRules);
    }
}


No.6 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import org.junit.jupiter.api.*;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class NamespaceBranchServiceTest {

    @InjectMocks
    private NamespaceBranchService namespaceBranchService;

    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void updateRulesReleaseIdTest() {
        // Arrange
        String appId = "someApp";
        String clusterName = "default";
        String namespaceName = "application";
        String branchName = "someBranch";
        long latestReleaseId = 100L;
        String operator = "operatorUser";

        GrayReleaseRule existingRule = mock(GrayReleaseRule.class);
        when(existingRule.getRules()).thenReturn("rulesContent");
        when(existingRule.getAppId()).thenReturn(appId);
        when(existingRule.getClusterName()).thenReturn(clusterName);
        when(existingRule.getNamespaceName()).thenReturn(namespaceName);
        when(existingRule.getBranchName()).thenReturn(branchName);

        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(
                appId, clusterName, namespaceName, branchName)).thenReturn(existingRule);

        // Act
        GrayReleaseRule updatedRule = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);

        // Assert
        assertNotNull(updatedRule, "The updated rule should not be null");
        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRule.getBranchStatus(), "The branch status should be ACTIVE");
        assertEquals(latestReleaseId, updatedRule.getReleaseId(), "The release ID should be updated to the latest");
        assertEquals("rulesContent", updatedRule.getRules(), "The rules content should be copied from the existing rule");
        assertEquals(appId, updatedRule.getAppId(), "The App ID should be carried over from the existing rule");
        assertEquals(clusterName, updatedRule.getClusterName(), "The cluster name should be carried over from the existing rule");
        assertEquals(namespaceName, updatedRule.getNamespaceName(), "The namespace name should be carried over from the existing rule");
        assertEquals(branchName, updatedRule.getBranchName(), "The branch name should be carried over from the existing rule");
        assertEquals(operator, updatedRule.getDataChangeCreatedBy(), "The operator should be set as the creator");
        assertEquals(operator, updatedRule.getDataChangeLastModifiedBy(), "The operator should be set as the last modifier");

        verify(grayReleaseRuleRepository, times(1)).save(any(GrayReleaseRule.class));
        verify(grayReleaseRuleRepository, times(1)).delete(existingRule);
    }
    
    @AfterEach
    public void tearDown() {
        // clean up after each test if necessary
    }
}


No.7 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import org.junit.jupiter.api.*;
import org.mockito.*;
import static org.mockito.Mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class NamespaceBranchServiceTest {

    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;

    @InjectMocks
    private NamespaceBranchService namespaceBranchService;

    @Test
    public void updateRulesReleaseIdTest() {
        // Arrange
        String appId = "myAppId";
        String clusterName = "myClusterName";
        String namespaceName = "myNamespaceName";
        String branchName = "myBranchName";
        long latestReleaseId = 100L;
        String operator = "operator";

        GrayReleaseRule oldRules = new GrayReleaseRule();
        oldRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);
        oldRules.setReleaseId(50L);
        oldRules.setRules("rule-set-1");
        oldRules.setAppId(appId);
        oldRules.setClusterName(clusterName);
        oldRules.setNamespaceName(namespaceName);
        oldRules.setBranchName(branchName);
        oldRules.setDataChangeCreatedBy("creator");
        oldRules.setDataChangeLastModifiedBy("modifier");

        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(
                appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);

        // Act
        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(
                appId, clusterName, namespaceName, branchName, latestReleaseId, operator);

        // Assert
        assertNotNull(updatedRules);
        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus());
        assertEquals(latestReleaseId, updatedRules.getReleaseId());
        assertEquals(oldRules.getRules(), updatedRules.getRules());
        assertEquals(appId, updatedRules.getAppId());
        assertEquals(clusterName, updatedRules.getClusterName());
        assertEquals(namespaceName, updatedRules.getNamespaceName());
        assertEquals(branchName, updatedRules.getBranchName());
        assertEquals(operator, updatedRules.getDataChangeCreatedBy());
        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy());

        // Verify interactions
        verify(grayReleaseRuleRepository).save(Mockito.any(GrayReleaseRule.class));
        verify(grayReleaseRuleRepository).delete(oldRules);
    }
}


No.8 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;

public class NamespaceBranchServiceTest {

    @InjectMocks
    private NamespaceBranchService namespaceBranchService;

    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void updateRulesReleaseIdTest() {
        // Arrange
        String appId = "testApp";
        String clusterName = "default";
        String namespaceName = "application";
        String branchName = "feature-branch";
        long latestReleaseId = 100L;
        String operator = "testOperator";

        GrayReleaseRule oldRules = new GrayReleaseRule();
        oldRules.setReleaseId(99L);
        oldRules.setAppId(appId);
        oldRules.setClusterName(clusterName);
        oldRules.setNamespaceName(namespaceName);
        oldRules.setBranchName(branchName);

        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(
                appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);

        // Act
        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);

        // Assert
        assertNotNull(updatedRules, "Updated rules should not be null");
        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus(), "Branch status should be ACTIVE");
        assertEquals(latestReleaseId, updatedRules.getReleaseId(), "Release ID should be updated to the latest");
        assertEquals(oldRules.getRules(), updatedRules.getRules(), "Rules should not change");
        assertEquals(operator, updatedRules.getDataChangeCreatedBy(), "Created by operator should be set");
        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy(), "Modified by operator should be set");

        verify(grayReleaseRuleRepository, times(1)).save(any(GrayReleaseRule.class));
        verify(grayReleaseRuleRepository, times(1)).delete(oldRules);
    }
}


No.9 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;

class NamespaceBranchServiceTest {

    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;

    @InjectMocks
    private NamespaceBranchService namespaceBranchService;
    
    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }
    
    @Test
    public void updateRulesReleaseIdTest() {
        // Arrange
        String appId = "someAppId";
        String clusterName = "someClusterName";
        String namespaceName = "someNamespaceName";
        String branchName = "someBranchName";
        long latestReleaseId = 100L;
        String operator = "operator";

        GrayReleaseRule oldRules = new GrayReleaseRule();
        oldRules.setAppId(appId);
        oldRules.setClusterName(clusterName);
        oldRules.setNamespaceName(namespaceName);
        oldRules.setBranchName(branchName);
        oldRules.setBranchStatus(NamespaceBranchStatus.INACTIVE); // Assume status is INACTIVE to be changed
        oldRules.setReleaseId(50L); // Assume previous release ID

        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName))
                .thenReturn(oldRules);

        // Act
        GrayReleaseRule updatedRules = namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);

        // Assert
        assertNotNull(updatedRules);
        assertEquals(latestReleaseId, updatedRules.getReleaseId());
        assertEquals(NamespaceBranchStatus.ACTIVE, updatedRules.getBranchStatus());
        assertEquals(operator, updatedRules.getDataChangeCreatedBy());
        assertEquals(operator, updatedRules.getDataChangeLastModifiedBy());

        verify(grayReleaseRuleRepository).findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName);
        verify(grayReleaseRuleRepository).save(any(GrayReleaseRule.class));
        verify(grayReleaseRuleRepository).delete(oldRules);
    }

    // Add additional test methods if necessary
}


No.10 generated result --------------------------

package com.ctrip.framework.apollo.biz.service;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.mockito.Mockito.*;

public class NamespaceBranchServiceTest {

    @InjectMocks
    private NamespaceBranchService namespaceBranchService;

    @Mock
    private GrayReleaseRuleRepository grayReleaseRuleRepository;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void updateRulesReleaseIdTest() {
        String appId = "sampleApp";
        String clusterName = "default";
        String namespaceName = "application";
        String branchName = "branch-1001";
        long latestReleaseId = 1002L;
        String operator = "operator1";

        GrayReleaseRule oldRules = new GrayReleaseRule();
        oldRules.setId(1001L);
        oldRules.setAppId(appId);
        oldRules.setClusterName(clusterName);
        oldRules.setNamespaceName(namespaceName);
        oldRules.setBranchName(branchName);
        oldRules.setReleaseId(1001L);
        oldRules.setRules("<rules>");
        
        when(grayReleaseRuleRepository.findTopByAppIdAndClusterNameAndNamespaceNameAndBranchNameOrderByIdDesc(appId, clusterName, namespaceName, branchName)).thenReturn(oldRules);
        
        namespaceBranchService.updateRulesReleaseId(appId, clusterName, namespaceName, branchName, latestReleaseId, operator);

        verify(grayReleaseRuleRepository).save(argThat(newRule -> 
            newRule.getReleaseId() == latestReleaseId &&
            newRule.getAppId().equals(appId) &&
            newRule.getClusterName().equals(clusterName) &&
            newRule.getNamespaceName().equals(namespaceName) &&
            newRule.getBranchName().equals(branchName) &&
            newRule.getDataChangeCreatedBy().equals(operator) &&
            newRule.getDataChangeLastModifiedBy().equals(operator)
        ));
        
        verify(grayReleaseRuleRepository).delete(oldRules);

        assertNotNull(namespaceBranchService);
    }
}


