{
    "project_name": "commons-lang",
    "file_name": "CompareToBuilder.java",
    "relative_path": "commons-lang/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java",
    "execute_path": "commons-lang",
    "package": "org.apache.commons.lang3.builder",
    "docstring": "/**\n     * Appends to the {@code builder} the deep comparison of\n     * two {@code boolean} arrays.\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using {@code ==}</li>\n     *  <li>Check if for {@code null}, {@code null} is less than non-{@code null}</li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(boolean, boolean)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand side array\n     * @param rhs  right-hand side array\n     * @return this\n     */",
    "source_code": "\npublic CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {\n    if (comparison != 0) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null) {\n        comparison = -1;\n        return this;\n    }\n    if (rhs == null) {\n        comparison = 1;\n        return this;\n    }\n    if (lhs.length != rhs.length) {\n        comparison = lhs.length < rhs.length ? -1 : 1;\n        return this;\n    }\n    for (int i = 0; i < lhs.length && comparison == 0; i++) {\n        append(lhs[i], rhs[i]);\n    }\n    return this;\n}\n",
    "class_name": "CompareToBuilder",
    "method_name": "append",
    "arguments": [
        "boolean[] lhs",
        "boolean[] rhs"
    ],
    "generate_test": [
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        \n        // Case where both arrays are equal\n        boolean[] lhsEqual = {true, false, true};\n        boolean[] rhsEqual = {true, false, true};\n        builder.append(lhsEqual, rhsEqual);\n        assertEquals(0, builder.toComparison());\n\n        // Case where lhs is less than rhs\n        boolean[] lhsLess = {true, false};\n        boolean[] rhsMore = {true, false, false};\n        builder = new CompareToBuilder(); // reset builder for new comparison\n        builder.append(lhsLess, rhsMore);\n        assertEquals(-1, builder.toComparison());\n\n        // Case where lhs is more than rhs\n        boolean[] lhsMore = {true, true, true};\n        boolean[] rhsLess = {true, true};\n        builder = new CompareToBuilder(); // reset builder for new comparison\n        builder.append(lhsMore, rhsLess);\n        assertEquals(1, builder.toComparison());\n\n        // Case where lhs is null and rhs is not\n        builder = new CompareToBuilder(); // reset builder for new comparison\n        builder.append(null, rhsLess);\n        assertEquals(-1, builder.toComparison());\n\n        // Case where rhs is null and lhs is not\n        builder = new CompareToBuilder(); // reset builder for new comparison\n        builder.append(lhsLess, null);\n        assertEquals(1, builder.toComparison());\n\n        // Case where both are null\n        builder = new CompareToBuilder(); // reset builder for new comparison\n        builder.append(null, null);\n        assertEquals(0, builder.toComparison());\n\n        // Case where arrays have same length but different values\n        boolean[] lhsDiff = {true, true, false};\n        boolean[] rhsDiff = {true, false, true};\n        builder = new CompareToBuilder(); // reset builder for new comparison\n        builder.append(lhsDiff, rhsDiff);\n        assertNotEquals(0, builder.toComparison());\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Equal arrays\n        boolean[] array1 = { true, false, true };\n        boolean[] array2 = { true, false, true };\n        CompareToBuilder builder1 = new CompareToBuilder();\n        builder1.append(array1, array2);\n        assertEquals(0, builder1.toComparison());\n\n        // Different arrays\n        boolean[] array3 = { true, false, true };\n        boolean[] array4 = { false, true, false };\n        CompareToBuilder builder2 = new CompareToBuilder();\n        builder2.append(array3, array4);\n        assertNotEquals(0, builder2.toComparison());\n\n\t\t// Different lengths - array1 is shorter\n        boolean[] array5 = { true, false };\n        boolean[] array6 = { true, false, false };\n        CompareToBuilder builder3 = new CompareToBuilder();\n        builder3.append(array5, array6);\n        assertTrue(builder3.toComparison() < 0);\n\n        // Different lengths - array6 is shorter\n        CompareToBuilder builder4 = new CompareToBuilder();\n        builder4.append(array6, array5);\n        assertTrue(builder4.toComparison() > 0);\n\n        // Null lhs array\n        boolean[] arrayNull = null;\n        CompareToBuilder builder5 = new CompareToBuilder();\n        builder5.append(arrayNull, array4);\n        assertTrue(builder5.toComparison() < 0);\n\n        // Null rhs array\n        CompareToBuilder builder6 = new CompareToBuilder();\n        builder6.append(array3, arrayNull);\n        assertTrue(builder6.toComparison() > 0);\n\n        // Both arrays null\n        CompareToBuilder builder7 = new CompareToBuilder();\n        builder7.append(arrayNull, arrayNull);\n        assertEquals(0, builder7.toComparison());\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        // Both arrays are null (should be considered equal)\n        CompareToBuilder builder = new CompareToBuilder();\n        boolean[] a1 = null;\n        boolean[] a2 = null;\n        builder.append(a1, a2);\n        assertEquals(0, builder.toComparison());\n\n        // Left array is null and right array is not null (left < right)\n        builder = new CompareToBuilder();\n        a1 = null;\n        a2 = new boolean[]{true, false};\n        builder.append(a1, a2);\n        assertEquals(-1, builder.toComparison());\n\n        // Left array is not null and right array is null (left > right)\n        builder = new CompareToBuilder();\n        a1 = new boolean[]{true, false};\n        a2 = null;\n        builder.append(a1, a2);\n        assertEquals(1, builder.toComparison());\n\n        // Both arrays have different lengths (comparison should not be 0)\n        builder = new CompareToBuilder();\n        a1 = new boolean[]{true, false};\n        a2 = new boolean[]{true, false, true};\n        builder.append(a1, a2);\n        assertTrue(builder.toComparison() != 0);\n\n        // Both arrays have the same length but different values\n        builder = new CompareToBuilder();\n        a1 = new boolean[]{true, false, true};\n        a2 = new boolean[]{true, true, false};\n        builder.append(a1, a2);\n        assertTrue(builder.toComparison() != 0);\n\n        // Both arrays have the same values\n        builder = new CompareToBuilder();\n        a1 = new boolean[]{true, false, true};\n        a2 = new boolean[]{true, false, true};\n        builder.append(a1, a2);\n        assertEquals(0, builder.toComparison());\n\n        // Ensure the comparison obeys the contract by comparing the same array to itself (should be equal)\n        builder = new CompareToBuilder();\n        a1 = new boolean[]{true, true, false};\n        builder.append(a1, a1);\n        assertEquals(0, builder.toComparison());\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Test when both arrays are null\n        builder = new CompareToBuilder();\n        builder.append((boolean[]) null, (boolean[]) null);\n        assertEquals(0, builder.toComparison(), \"Both null arrays should lead to a comparison of 0\");\n\n        // Test when left array is null\n        builder = new CompareToBuilder();\n        builder.append(null, new boolean[] {true, false});\n        assertEquals(-1, builder.toComparison(), \"Left null array should lead to a comparison of -1\");\n\n        // Test when right array is null\n        builder = new CompareToBuilder();\n        builder.append(new boolean[] {true, false}, null);\n        assertEquals(1, builder.toComparison(), \"Right null array should lead to a comparison of 1\");\n\n        // Test when arrays are of different lengths\n        builder = new CompareToBuilder();\n        builder.append(new boolean[] {true}, new boolean[] {true, false});\n        assertEquals(-1, builder.toComparison(), \"Different array lengths should lead to a comparison of -1 when left is shorter\");\n\n        builder = new CompareToBuilder();\n        builder.append(new boolean[] {true, false}, new boolean[] {true});\n        assertEquals(1, builder.toComparison(), \"Different array lengths should lead to a comparison of 1 when left is longer\");\n\n        // Test when arrays are equal\n        builder = new CompareToBuilder();\n        builder.append(new boolean[] {true, false}, new boolean[] {true, false});\n        assertEquals(0, builder.toComparison(), \"Equal arrays should lead to a comparison of 0\");\n\n        // Test when arrays have different values\n        builder = new CompareToBuilder();\n        builder.append(new boolean[] {false, true}, new boolean[] {true, true});\n        assertTrue(builder.toComparison() < 0, \"Different array values should lead to a comparison < 0 when left has a false where right has a true\");\n\n        builder = new CompareToBuilder();\n        builder.append(new boolean[] {true, true}, new boolean[] {true, false});\n        assertTrue(builder.toComparison() > 0, \"Different array values should lead to a comparison > 0 when left has a true where right has a false\");\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        // Setup\n        CompareToBuilder builder = new CompareToBuilder();\n\n        boolean[] lhs = new boolean[]{true, false, true};\n        boolean[] rhs = new boolean[]{true, false, true};\n        boolean[] lhsDifferentLength = new boolean[]{true, false};\n        boolean[] rhsDifferent = new boolean[]{false, true, false};\n        boolean[] lhsNull = null;\n        boolean[] rhsNull = null;\n\n        // Test with same arrays\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.toComparison(), \"Arrays are same, comparison should be 0\");\n\n        builder = new CompareToBuilder(); // Reset builder for next test\n\n        // Test with different length arrays\n        builder.append(lhs, lhsDifferentLength);\n        assertTrue(builder.toComparison() != 0, \"Arrays have different lengths, comparison should not be 0\");\n\n        builder = new CompareToBuilder(); // Reset builder for next test\n        \n        // Test with different arrays of the same length\n        builder.append(lhs, rhsDifferent);\n        assertTrue(builder.toComparison() != 0, \"Arrays have same lengths but different values, comparison should not be 0\");\n\n        builder = new CompareToBuilder(); // Reset builder for next test\n        \n        // Test with first array null \n        builder.append(lhsNull, rhs);\n        assertEquals(-1, builder.toComparison(), \"First array is null, comparison should be -1\");\n\n        builder = new CompareToBuilder(); // Reset builder for next test\n        \n        // Test with second array null \n        builder.append(lhs, rhsNull);\n        assertEquals(1, builder.toComparison(), \"Second array is null, comparison should be 1\");\n\n        builder = new CompareToBuilder(); // Reset builder for next test\n\n        // Test with both arrays null (expect them to be equal)\n        builder.append(lhsNull, rhsNull);\n        assertEquals(0, builder.toComparison(), \"Both arrays are null, comparison should be 0\");\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Setup CompareToBuilder\n        CompareToBuilder compareToBuilder = new CompareToBuilder();\n\n        // Case with both arrays null should not affect comparison\n        boolean[] lhsNull = null;\n        boolean[] rhsNull = null;\n        compareToBuilder.append(lhsNull, rhsNull);\n        assertEquals(0, compareToBuilder.toComparison());\n\n        // Case with lhs array null and rhs array not null should return -1\n        compareToBuilder = new CompareToBuilder(); // Reset builder for new comparison\n        boolean[] rhsNonNull = {true, false, true};\n        compareToBuilder.append(lhsNull, rhsNonNull);\n        assertEquals(-1, compareToBuilder.toComparison());\n\n        // Case with rhs array null and lhs array not null should return 1\n        compareToBuilder = new CompareToBuilder(); // Reset builder for new comparison\n        boolean[] lhsNonNull = {false, true, false};\n        compareToBuilder.append(lhsNonNull, rhsNull);\n        assertEquals(1, compareToBuilder.toComparison());\n\n        // Case with arrays of different lengths\n        compareToBuilder = new CompareToBuilder(); // Reset builder for new comparison\n        boolean[] lhsShorter = {true, false};\n        boolean[] rhsLonger = {true, false, true};\n        compareToBuilder.append(lhsShorter, rhsLonger);\n        assertEquals(-1, compareToBuilder.toComparison());\n\n        // Case with lhs longer than rhs\n        compareToBuilder = new CompareToBuilder(); // Reset builder for new comparison\n        boolean[] rhsShorter = {true, false};\n        compareToBuilder.append(lhsNonNull, rhsShorter);\n        assertEquals(1, compareToBuilder.toComparison());\n\n        // Case with same length arrays but different values\n        compareToBuilder = new CompareToBuilder(); // Reset builder for new comparison\n        boolean[] rhsDifferent = {true, true, false};\n        compareToBuilder.append(lhsNonNull, rhsDifferent);\n        assertNotEquals(0, compareToBuilder.toComparison());\n\n        // Case with two identical arrays\n        compareToBuilder = new CompareToBuilder(); // Reset builder for new comparison\n        boolean[] rhsSame = {false, true, false};\n        compareToBuilder.append(lhsNonNull, rhsSame);\n        assertEquals(0, compareToBuilder.toComparison());\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void testAppendBooleanArray() {\n        CompareToBuilder compareToBuilder = new CompareToBuilder();\n        \n        // Same arrays reference\n        boolean[] array1 = new boolean[] {true, false, true};\n        boolean[] array2 = array1;\n        assertEquals(0, compareToBuilder.append(array1, array2).toComparison());\n        \n        // Different arrays, same content\n        compareToBuilder = new CompareToBuilder();\n        array1 = new boolean[] {true, false, true};\n        array2 = new boolean[] {true, false, true};\n        assertEquals(0, compareToBuilder.append(array1, array2).toComparison());\n        \n        // Different arrays, different content\n        compareToBuilder = new CompareToBuilder();\n        array1 = new boolean[] {true, false, true};\n        array2 = new boolean[] {false, true, false};\n        assertNotEquals(0, compareToBuilder.append(array1, array2).toComparison());\n        \n        // Different lengths\n        compareToBuilder = new CompareToBuilder();\n        array1 = new boolean[] {true, false};\n        array2 = new boolean[] {true, false, true};\n        assertTrue(compareToBuilder.append(array1, array2).toComparison() < 0);\n        \n        // Null first array, non-null second array\n        compareToBuilder = new CompareToBuilder();\n        array1 = null;\n        array2 = new boolean[] {true, false, true};\n        assertTrue(compareToBuilder.append(array1, array2).toComparison() < 0);\n        \n        // Non-null first array, null second array\n        compareToBuilder = new CompareToBuilder();\n        array1 = new boolean[] {true, false, true};\n        array2 = null;\n        assertTrue(compareToBuilder.append(array1, array2).toComparison() > 0);\n        \n        // Both arrays null\n        compareToBuilder = new CompareToBuilder();\n        array1 = null;\n        array2 = null;\n        assertEquals(0, compareToBuilder.append(array1, array2).toComparison());\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Create instances of CompareToBuilder\n        CompareToBuilder cbEqualArrays = new CompareToBuilder();\n        CompareToBuilder cbLeftNull = new CompareToBuilder();\n        CompareToBuilder cbRightNull = new CompareToBuilder();\n        CompareToBuilder cbDifferentLengthArrays = new CompareToBuilder();\n        CompareToBuilder cbDifferentValues = new CompareToBuilder();\n\n        // Test arrays\n        boolean[] array1 = {true, false, true};\n        boolean[] array2 = {true, false, true};\n        boolean[] array3 = {false, true};\n        boolean[] array4 = {true, false, false};\n\n        // Test for equal arrays\n        cbEqualArrays.append(array1, array2);\n        assertEquals(0, cbEqualArrays.toComparison(), \"Arrays are equal but did not return 0\");\n\n        // Test for left array null\n        cbLeftNull.append(null, array2);\n        assertEquals(-1, cbLeftNull.toComparison(), \"Left array is null, should return -1\");\n\n        // Test for right array null\n        cbRightNull.append(array1, null);\n        assertEquals(1, cbRightNull.toComparison(), \"Right array is null, should return 1\");\n\n        // Test for arrays of different lengths\n        cbDifferentLengthArrays.append(array1, array3);\n        assertEquals(array1.length < array3.length ? -1 : 1, cbDifferentLengthArrays.toComparison(), \"Arrays are of different lengths\");\n\n        // Test for arrays with different values\n        cbDifferentValues.append(array1, array4);\n        assertEquals(Boolean.compare(array1[2], array4[2]), cbDifferentValues.toComparison(), \"Arrays have different values\");\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Test with same arrays.\n        boolean[] array1 = new boolean[] { true, false, true };\n        boolean[] array2 = new boolean[] { true, false, true };\n        builder.append(array1, array2);\n        assertEquals(0, builder.toComparison(), \"Arrays with the same values should be equal\");\n\n        // Test with left array null.\n        boolean[] array3 = null;\n        builder = new CompareToBuilder(); // Reset the builder\n        builder.append(array3, array2);\n        assertEquals(-1, builder.toComparison(), \"Comparing null array to non-null array should return -1\");\n\n        // Test with right array null.\n        builder = new CompareToBuilder(); // Reset the builder\n        builder.append(array1, array3);\n        assertEquals(1, builder.toComparison(), \"Comparing non-null array to null array should return 1\");\n\n        // Test with different lengths.\n        boolean[] array4 = new boolean[] { true, false };\n        builder = new CompareToBuilder(); // Reset the builder\n        builder.append(array1, array4);\n        assertEquals(1, builder.toComparison(), \"Comparing longer array to shorter array should return 1\");\n\n        boolean[] array5 = new boolean[] { true, false, true, false };\n        builder = new CompareToBuilder(); // Reset the builder\n        builder.append(array4, array5);\n        assertEquals(-1, builder.toComparison(), \"Comparing shorter array to longer array should return -1\");\n\n        // Test with different values and same lengths.\n        boolean[] array6 = new boolean[] { false, true, false };\n        builder = new CompareToBuilder(); // Reset the builder\n        builder.append(array1, array6);\n        assertEquals(1, builder.toComparison(), \"Arrays with different values should not be equal\");\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        \n        // Test equal arrays\n        boolean[] array1 = {true, false, true};\n        boolean[] array2 = {true, false, true};\n        assertEquals(0, builder.append(array1, array2).build().intValue());\n\n        // Reset builder for next comparison\n        builder = new CompareToBuilder();\n        \n        // Test lhs array is null\n        boolean[] nullArray = null;\n        assertEquals(-1, builder.append(nullArray, array2).build().intValue());\n\n        // Reset builder for next comparison\n        builder = new CompareToBuilder();\n\n        // Test rhs array is null\n        assertEquals(1, builder.append(array1, nullArray).build().intValue());\n\n        // Reset builder for next comparison\n        builder = new CompareToBuilder();\n\n        // Test arrays with different lengths\n        boolean[] shorterArray = {true};\n        boolean[] longerArray = {true, false};\n        assertEquals(-1, builder.append(shorterArray, longerArray).build().intValue());\n\n        // Reset builder for next comparison\n        builder = new CompareToBuilder();\n\n        assertEquals(1, builder.append(longerArray, shorterArray).build().intValue());\n\n        // Reset builder for next comparison\n        builder = new CompareToBuilder();\n\n        // Test lhs and rhs refer to the same array\n        assertEquals(0, builder.append(array1, array1).build().intValue());\n\n        // Reset builder for next comparison\n        builder = new CompareToBuilder();\n\n        // Test first element different\n        boolean[] array3 = {false, false, true};\n        assertEquals(-1, builder.append(array1, array3).build().intValue());\n\n        // Reset builder for next comparison\n        builder = new CompareToBuilder();\n\n        assertEquals(1, builder.append(array3, array1).build().intValue());\n    }\n}"
    ]
}