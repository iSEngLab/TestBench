{
    "project_name": "commons-lang",
    "file_name": "CompareToBuilder.java",
    "relative_path": "commons-lang/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java",
    "execute_path": "commons-lang",
    "package": "org.apache.commons.lang3.builder",
    "docstring": "/**\n     * Appends to the {@code builder} the deep comparison of\n     * two {@code byte} arrays.\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using {@code ==}</li>\n     *  <li>Check if for {@code null}, {@code null} is less than non-{@code null}</li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(byte, byte)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand side array\n     * @param rhs  right-hand side array\n     * @return this\n     */",
    "source_code": "\npublic CompareToBuilder append(final byte[] lhs, final byte[] rhs) {\n    if (comparison != 0) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null) {\n        comparison = -1;\n        return this;\n    }\n    if (rhs == null) {\n        comparison = 1;\n        return this;\n    }\n    if (lhs.length != rhs.length) {\n        comparison = lhs.length < rhs.length ? -1 : 1;\n        return this;\n    }\n    for (int i = 0; i < lhs.length && comparison == 0; i++) {\n        append(lhs[i], rhs[i]);\n    }\n    return this;\n}\n",
    "class_name": "CompareToBuilder",
    "method_name": "append",
    "arguments": [
        "byte[] lhs",
        "byte[] rhs"
    ],
    "generate_test": [
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Test equal arrays\n        byte[] array1 = {1, 2, 3};\n        byte[] array2 = {1, 2, 3};\n        builder.append(array1, array2);\n        assertEquals(0, builder.toComparison());\n\n        // Test left array lesser than right array (by length)\n        byte[] lesserArray = {1, 2};\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(lesserArray, array2);\n        assertTrue(builder.toComparison() < 0);\n\n        // Test left array greater than right array (by length)\n        byte[] greaterArray = {1, 2, 3, 4};\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(greaterArray, array2);\n        assertTrue(builder.toComparison() > 0);\n\n        // Test left array lesser than right array (by value)\n        byte[] lesserValueArray = {1, 2, 0};\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(lesserValueArray, array2);\n        assertTrue(builder.toComparison() < 0);\n\n        // Test left array greater than right array (by value)\n        byte[] greaterValueArray = {1, 2, 4};\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(greaterValueArray, array2);\n        assertTrue(builder.toComparison() > 0);\n\n        // Test lhs null array\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(null, array2);\n        assertTrue(builder.toComparison() < 0);\n\n        // Test rhs null array\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(array1, null);\n        assertTrue(builder.toComparison() > 0);\n\n        // Both lhs and rhs null should be considered equal\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(null, null);\n        assertEquals(0, builder.toComparison());\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Test comparison with byte arrays.\n        byte[] lhs = new byte[] {1, 2, 3};\n        byte[] rhs = new byte[] {1, 2, 3};\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.toComparison(), \"Arrays with the same elements should compare equal\");\n\n        lhs = new byte[] {1, 2, 3};\n        rhs = new byte[] {3, 2, 1};\n        builder = new CompareToBuilder(); // reset builder for new comparison\n        builder.append(lhs, rhs);\n        assertEquals(-1, builder.toComparison(), \"Array [1, 2, 3] should be less than [3, 2, 1]\");\n\n        lhs = new byte[] {1, 2, 3};\n        rhs = new byte[] {1, 2, 3, 4};\n        builder = new CompareToBuilder(); // reset builder for new comparison\n        builder.append(lhs, rhs);\n        assertEquals(-1, builder.toComparison(), \"Array with fewer elements should be less than longer array\");\n\n        lhs = new byte[] {1, 2, 3, 4};\n        rhs = new byte[] {1, 2, 3};\n        builder = new CompareToBuilder(); // reset builder for new comparison\n        builder.append(lhs, rhs);\n        assertEquals(1, builder.toComparison(), \"Longer array should be greater than array with fewer elements\");\n\n        lhs = null;\n        rhs = new byte[] {1, 2, 3};\n        builder = new CompareToBuilder(); // reset builder for new comparison\n        builder.append(lhs, rhs);\n        assertEquals(-1, builder.toComparison(), \"Null array should be less than non-null array\");\n\n        lhs = new byte[] {1, 2, 3};\n        rhs = null;\n        builder = new CompareToBuilder(); // reset builder for new comparison\n        builder.append(lhs, rhs);\n        assertEquals(1, builder.toComparison(), \"Non-null array should be greater than null array\");\n\n        lhs = null;\n        rhs = null;\n        builder = new CompareToBuilder(); // reset builder for new comparison\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.toComparison(), \"Two null arrays should be equal\");\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendByteArraysTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        \n        // Test when both byte arrays are equal\n        byte[] lhs = {1, 2, 3};\n        byte[] rhs = {1, 2, 3};\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.toComparison());\n        \n        // Test when left-hand byte array is less than right-hand byte array (shorter length)\n        byte[] lhsShorter = {1, 2};\n        byte[] rhsLonger = {1, 2, 3};\n        builder = new CompareToBuilder(); // reset builder for a new comparison\n        builder.append(lhsShorter, rhsLonger);\n        assertTrue(builder.toComparison() < 0);\n        \n        // Test when left-hand byte array is greater than right-hand byte array (longer length)\n        byte[] lhsLonger = {1, 2, 3, 4};\n        byte[] rhsShorter = {1, 2, 3};\n        builder = new CompareToBuilder(); // reset builder for a new comparison\n        builder.append(lhsLonger, rhsShorter);\n        assertTrue(builder.toComparison() > 0);\n        \n        // Test when arrays have same length but elements are different\n        byte[] lhsDifferent = {1, 4, 3};\n        builder = new CompareToBuilder(); // reset builder for a new comparison\n        builder.append(lhsDifferent, rhs);\n        assertTrue(builder.toComparison() > 0);\n        \n        // Test when left-hand byte array is null and right-hand byte array is not\n        builder = new CompareToBuilder(); // reset builder for a new comparison\n        builder.append(null, rhs);\n        assertTrue(builder.toComparison() < 0);\n\n        // Test when right-hand byte array is null and the left-hand byte array is not\n        builder = new CompareToBuilder(); // reset builder for a new comparison\n        builder.append(lhs, null);\n        assertTrue(builder.toComparison() > 0);\n\n        // Test when both byte arrays are null\n        builder = new CompareToBuilder(); // reset builder for a new comparison\n        builder.append(null, null);\n        assertEquals(0, builder.toComparison());\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        // Create dummy byte arrays for testing\n        byte[] lhsEmpty = {};\n        byte[] rhsEmpty = {};\n        byte[] lhs = {1, 2, 3};\n        byte[] rhs = {1, 2, 3};\n        byte[] rhsLarger = {1, 2, 3, 4};\n        byte[] rhsSmaller = {1, 2};\n        byte[] lhsLess = {1, 2, 0};\n        byte[] rhsGreater = {1, 2, 4};\n\n        // Test for same arrays\n        CompareToBuilder compareToBuilderSame = new CompareToBuilder();\n        assertEquals(0, compareToBuilderSame.append(lhs, lhs).toComparison());\n\n        // Test for equal arrays\n        CompareToBuilder compareToBuilderEqual = new CompareToBuilder();\n        assertEquals(0, compareToBuilderEqual.append(lhs, rhs).toComparison());\n\n        // Test for empty arrays\n        CompareToBuilder compareToBuilderEmpty = new CompareToBuilder();\n        assertEquals(0, compareToBuilderEmpty.append(lhsEmpty, rhsEmpty).toComparison());\n\n        // Test for lhs null, rhs not null\n        CompareToBuilder compareToBuilderLhsNull = new CompareToBuilder();\n        assertEquals(-1, compareToBuilderLhsNull.append(null, rhs).toComparison());\n\n        // Test for rhs null, lhs not null\n        CompareToBuilder compareToBuilderRhsNull = new CompareToBuilder();\n        assertEquals(1, compareToBuilderRhsNull.append(lhs, null).toComparison());\n\n        // Test for arrays of different lengths\n        CompareToBuilder compareToBuilderLength = new CompareToBuilder();\n        assertEquals(-1, compareToBuilderLength.append(lhs, rhsLarger).toComparison());\n        assertEquals(1, compareToBuilderLength.append(lhs, rhsSmaller).toComparison());\n\n        // Test for arrays with same lengths but different contents\n        CompareToBuilder compareToBuilderContent = new CompareToBuilder();\n        assertEquals(-1, compareToBuilderContent.append(lhsLess, rhs).toComparison());\n        assertEquals(1, compareToBuilderContent.append(lhs, rhsGreater).toComparison());\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    private CompareToBuilder compareToBuilder;\n\n    @BeforeEach\n    public void setUp() {\n        compareToBuilder = new CompareToBuilder();\n    }\n\n    @Test\n    public void appendTestSameArray() {\n        byte[] array1 = {1, 2, 3};\n        byte[] array1Copy = {1, 2, 3};\n        CompareToBuilder resultBuilder = compareToBuilder.append(array1, array1Copy);\n        assertEquals(0, resultBuilder.toComparison());\n    }\n\n    @Test\n    public void appendTestDifferentArraysSameLength() {\n        byte[] array1 = {1, 2, 3};\n        byte[] array2 = {1, 2, 4};\n        CompareToBuilder resultBuilder = compareToBuilder.append(array1, array2);\n        assertTrue(resultBuilder.toComparison() < 0);\n    }\n\n    @Test\n    public void appendTestDifferentArraysDifferentLengths() {\n        byte[] array1 = {1, 2, 3};\n        byte[] array2 = {1, 2, 3, 4};\n        CompareToBuilder resultBuilder = compareToBuilder.append(array1, array2);\n        assertTrue(resultBuilder.toComparison() < 0);\n    }\n\n    @Test\n    public void appendTestWithNullArrayOnLeft() {\n        byte[] array1 = null;\n        byte[] array2 = {1, 2, 3};\n        CompareToBuilder resultBuilder = compareToBuilder.append(array1, array2);\n        assertTrue(resultBuilder.toComparison() < 0);\n    }\n\n    @Test\n    public void appendTestWithNullArrayOnRight() {\n        byte[] array1 = {1, 2, 3};\n        byte[] array2 = null;\n        CompareToBuilder resultBuilder = compareToBuilder.append(array1, array2);\n        assertTrue(resultBuilder.toComparison() > 0);\n    }\n\n    @Test\n    public void appendTestWithBothNullArrays() {\n        byte[] array1 = null;\n        byte[] array2 = null;\n        CompareToBuilder resultBuilder = compareToBuilder.append(array1, array2);\n        assertEquals(0, resultBuilder.toComparison());\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        byte[] lhs = {1, 2, 3};\n        byte[] rhs = {1, 2, 3};\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.toComparison());\n\n        lhs = new byte[]{1, 2, 3};\n        rhs = new byte[]{4, 5, 6};\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() < 0);\n\n        lhs = new byte[]{4, 5, 6};\n        rhs = new byte[]{1, 2, 3};\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() > 0);\n\n        lhs = new byte[]{1, 2, 3};\n        rhs = new byte[]{1, 2, 3, 4};\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() < 0);\n\n        lhs = new byte[]{1, 2, 3, 4};\n        rhs = new byte[]{1, 2, 3};\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() > 0);\n\n        lhs = new byte[]{1, 2, 3};\n        rhs = null;\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() > 0);\n\n        lhs = null;\n        rhs = new byte[]{1, 2, 3};\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() < 0);\n\n        lhs = null;\n        rhs = null;\n        builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.toComparison());\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Equal arrays\n        byte[] byteArray1 = {1, 2, 3};\n        byte[] byteArray2 = {1, 2, 3};\n        builder.append(byteArray1, byteArray2);\n        assertEquals(0, builder.toComparison(), \"Arrays with the same contents should be equal.\");\n\n        // Different length arrays where first is shorter\n        byteArray1 = new byte[]{1, 2};\n        byteArray2 = new byte[]{1, 2, 3};\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(byteArray1, byteArray2);\n        assertEquals(-1, builder.toComparison(), \"A shorter array should be less than a longer array.\");\n\n        // Different length arrays where first is longer\n        byteArray1 = new byte[]{1, 2, 3};\n        byteArray2 = new byte[]{1, 2};\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(byteArray1, byteArray2);\n        assertEquals(1, builder.toComparison(), \"A longer array should be greater than a shorter array.\");\n\n        // Non-null first array and null second array\n        byteArray1 = new byte[]{1, 2, 3};\n        byteArray2 = null;\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(byteArray1, byteArray2);\n        assertEquals(1, builder.toComparison(), \"Non-null array should be greater than null.\");\n\n        // Null first array and non-null second array\n        byteArray1 = null;\n        byteArray2 = new byte[]{1, 2, 3};\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(byteArray1, byteArray2);\n        assertEquals(-1, builder.toComparison(), \"Null should be less than non-null array.\");\n\n        // Arrays with same length but different contents\n        byteArray1 = new byte[]{1, 2, 3};\n        byteArray2 = new byte[]{1, 2, 4};\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(byteArray1, byteArray2);\n        assertEquals(-1, builder.toComparison(), \"Array with smaller value in last element should be less than other array.\");\n\n        // Both arrays are null\n        byteArray1 = null;\n        byteArray2 = null;\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(byteArray1, byteArray2);\n        assertEquals(0, builder.toComparison(), \"Both null arrays should be equal.\");\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    private CompareToBuilder builder;\n\n    @BeforeEach\n    public void setUp() {\n        builder = new CompareToBuilder();\n    }\n\n    @Test\n    public void appendTestWithEqualArrays() {\n        byte[] lhs = {1, 2, 3};\n        byte[] rhs = {1, 2, 3};\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.toComparison(), \"Arrays with equal values should compare as equal\");\n    }\n\n    @Test\n    public void appendTestWithUnequalArrays() {\n        byte[] lhs = {1, 2, 3};\n        byte[] rhs = {1, 3, 2};\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() != 0, \"Arrays with different values should not compare as equal\");\n    }\n\n    @Test\n    public void appendTestWithNullAndNonNullArrays() {\n        byte[] lhs = null;\n        byte[] rhs = {1, 2, 3};\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() < 0, \"Null array should be considered less than a non-null array\");\n    }\n\n    @Test\n    public void appendTestWithNonNullAndNullArrays() {\n        byte[] lhs = {1, 2, 3};\n        byte[] rhs = null;\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() > 0, \"Non-null array should be considered greater than a null array\");\n    }\n\n    @Test\n    public void appendTestWithEmptyArrays() {\n        byte[] lhs = {};\n        byte[] rhs = {};\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.toComparison(), \"Two empty arrays should compare as equal\");\n    }\n\n    @Test\n    public void appendTestWithDifferentLengthArrays() {\n        byte[] lhs = {1, 2};\n        byte[] rhs = {1, 2, 3};\n        builder.append(lhs, rhs);\n        assertTrue(builder.toComparison() < 0, \"Shorter array should be considered less than a longer array\");\n    }\n\n    @Test\n    public void appendTestWithSameArrays() {\n        byte[] array = {1, 2, 3};\n        builder.append(array, array);\n        assertEquals(0, builder.toComparison(), \"Same array reference should compare as equal\");\n    }\n\n    // Additional tests can be added to cover the various types of appendable data (char[], int[], Object[], etc.).\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder compareToBuilder = new CompareToBuilder();\n\n        // Test for equal arrays\n        byte[] array1 = new byte[] {1, 2, 3};\n        byte[] array2 = new byte[] {1, 2, 3};\n        assertEquals(0, compareToBuilder.append(array1, array2).toComparison());\n\n        // Test for left array < right array\n        compareToBuilder = new CompareToBuilder(); // reset builder\n        byte[] array3 = new byte[] {1, 2};\n        byte[] array4 = new byte[] {1, 2, 3};\n        assertEquals(-1, compareToBuilder.append(array3, array4).toComparison());\n\n        // Test for left array > right array\n        compareToBuilder = new CompareToBuilder(); // reset builder\n        byte[] array5 = new byte[] {1, 2, 3, 4};\n        assertEquals(1, compareToBuilder.append(array5, array4).toComparison());\n\n        // Test when left array is null and right array is not\n        compareToBuilder = new CompareToBuilder(); // reset builder\n        assertEquals(-1, compareToBuilder.append(null, array2).toComparison());\n\n        // Test when right array is null and left array is not\n        compareToBuilder = new CompareToBuilder(); // reset builder\n        assertEquals(1, compareToBuilder.append(array1, null).toComparison());\n\n        // Test when both arrays are null\n        compareToBuilder = new CompareToBuilder(); // reset builder\n        assertEquals(0, compareToBuilder.append(null, null).toComparison());\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void testArrayEquality() {\n        byte[] array1 = {1, 2, 3};\n        byte[] array2 = {1, 2, 3};\n        CompareToBuilder builder = new CompareToBuilder();\n        \n        int comparison = builder.append(array1, array1).toComparison(); // same object\n        assertEquals(0, comparison);\n\n        builder = new CompareToBuilder();\n        comparison = builder.append(array1, array2).toComparison(); // same contents\n        assertEquals(0, comparison);\n    }\n\n    @Test\n    public void testNullArrays() {\n        byte[] array1 = null;\n        byte[] array2 = null;\n        byte[] array3 = {1, 2, 3};\n        \n        CompareToBuilder builder = new CompareToBuilder();\n        int comparison = builder.append(array1, array2).toComparison(); // both null\n        assertEquals(0, comparison);\n\n        builder = new CompareToBuilder();\n        comparison = builder.append(array1, array3).toComparison(); // lhs is null\n        assertEquals(-1, comparison);\n        \n        builder = new CompareToBuilder();\n        comparison = builder.append(array3, array1).toComparison(); // rhs is null\n        assertEquals(1, comparison);\n    }\n\n    @Test\n    public void testDifferentLengthArrays() {\n        byte[] array1 = {1, 2};\n        byte[] array2 = {1, 2, 3};\n        CompareToBuilder builder = new CompareToBuilder();\n\n        int comparison = builder.append(array1, array2).toComparison(); // lhs shorter\n        assertEquals(-1, comparison);\n\n        builder = new CompareToBuilder();\n        comparison = builder.append(array2, array1).toComparison(); // rhs shorter\n        assertEquals(1, comparison);\n    }\n\n    @Test\n    public void testArraysWithDifferentContents() {\n        byte[] array1 = {1, 2, 3};\n        byte[] array2 = {1, 2, 4};\n        CompareToBuilder builder = new CompareToBuilder();\n\n        int comparison = builder.append(array1, array2).toComparison(); // lhs < rhs\n        assertTrue(comparison < 0);\n\n        builder = new CompareToBuilder();\n        comparison = builder.append(array2, array1).toComparison(); // lhs > rhs\n        assertTrue(comparison > 0);\n    }\n}"
    ]
}