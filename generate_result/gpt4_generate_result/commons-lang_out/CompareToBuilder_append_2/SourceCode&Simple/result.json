{
    "project_name": "commons-lang",
    "file_name": "CompareToBuilder.java",
    "relative_path": "commons-lang/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java",
    "execute_path": "commons-lang",
    "package": "org.apache.commons.lang3.builder",
    "docstring": "/**\n     * Appends to the {@code builder} the deep comparison of\n     * two {@code double} arrays.\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using {@code ==}</li>\n     *  <li>Check if for {@code null}, {@code null} is less than non-{@code null}</li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(double, double)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand side array\n     * @param rhs  right-hand side array\n     * @return this\n     */",
    "source_code": "\npublic CompareToBuilder append(final double[] lhs, final double[] rhs) {\n    if (comparison != 0) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null) {\n        comparison = -1;\n        return this;\n    }\n    if (rhs == null) {\n        comparison = 1;\n        return this;\n    }\n    if (lhs.length != rhs.length) {\n        comparison = lhs.length < rhs.length ? -1 : 1;\n        return this;\n    }\n    for (int i = 0; i < lhs.length && comparison == 0; i++) {\n        append(lhs[i], rhs[i]);\n    }\n    return this;\n}\n",
    "class_name": "CompareToBuilder",
    "method_name": "append",
    "arguments": [
        "double[] lhs",
        "double[] rhs"
    ],
    "generate_test": [
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    private CompareToBuilder compareToBuilder;\n\n    @BeforeEach\n    public void setUp() {\n        compareToBuilder = new CompareToBuilder();\n    }\n\n    @Test\n    public void appendTest() {\n        double[] lhs = {1.0, 2.0, 3.0};\n        double[] rhs = {1.0, 2.0, 3.0};\n        assertEquals(0, compareToBuilder.append(lhs, rhs).build());\n\n        double[] lhsDifferent = {4.0, 5.0, 6.0};\n        double[] rhsDifferent = {1.0, 2.0, 3.0};\n        assertNotEquals(0, compareToBuilder.append(lhsDifferent, rhsDifferent).build());\n\n        double[] lhsShorter = {1.0, 2.0};\n        double[] rhsLonger = {1.0, 2.0, 3.0};\n        assertTrue(compareToBuilder.append(lhsShorter, rhsLonger).build() < 0);\n\n        lhs = null;\n        rhs = new double[]{1.0, 2.0, 3.0};\n        assertTrue(compareToBuilder.append(lhs, rhs).build() < 0);\n\n        lhs = new double[]{1.0, 2.0, 3.0};\n        rhs = null;\n        assertTrue(compareToBuilder.append(lhs, rhs).build() > 0);\n\n        lhs = null;\n        rhs = null;\n        assertEquals(0, compareToBuilder.append(lhs, rhs).build());\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    private CompareToBuilder builderUnderTest;\n    \n    @Test\n    public void appendTest() {\n        // Setup for the test\n        this.builderUnderTest = new CompareToBuilder();\n        \n        // Equal arrays test\n        double[] lhs = {1.0, 2.0, 3.0};\n        double[] rhs = {1.0, 2.0, 3.0};\n        builderUnderTest.append(lhs, rhs);\n        assertEquals(0, builderUnderTest.toComparison(), \"Arrays with the same values should compare equal\");\n        \n        // Different arrays test\n        double[] rhsDifferent = {1.0, 2.0, 4.0};\n        builderUnderTest = new CompareToBuilder(); // reset the builder\n        builderUnderTest.append(lhs, rhsDifferent);\n        assertNotEquals(0, builderUnderTest.toComparison(), \"Arrays with different values should not compare equal\");\n        \n        // Null and non-null arrays test\n        builderUnderTest = new CompareToBuilder(); // reset the builder\n        builderUnderTest.append(null, rhs);\n        assertEquals(-1, builderUnderTest.toComparison(), \"When lhs is null and rhs is not, comparison should be less than zero\");\n        \n        builderUnderTest = new CompareToBuilder(); // reset the builder\n        builderUnderTest.append(lhs, null);\n        assertEquals(1, builderUnderTest.toComparison(), \"When rhs is null and lhs is not, comparison should be greater than zero\");\n        \n        // Arrays of different lengths test\n        double[] rhsShorter = {1.0, 2.0};\n        builderUnderTest = new CompareToBuilder(); // reset the builder\n        builderUnderTest.append(lhs, rhsShorter);\n        assertTrue(builderUnderTest.toComparison() > 0, \"lhs with a longer length should be greater than a shorter rhs\");\n        \n        double[] lhsShorter = {1.0, 2.0};\n        builderUnderTest = new CompareToBuilder(); // reset the builder\n        builderUnderTest.append(lhsShorter, rhs);\n        assertTrue(builderUnderTest.toComparison() < 0, \"lhs with a shorter length should be less than a longer rhs\");\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Equal arrays\n        double[] a1 = new double[] {1.0, 2.0, 3.0};\n        double[] a2 = new double[] {1.0, 2.0, 3.0};\n        builder.append(a1, a2);\n        assertEquals(0, builder.toComparison());\n\n        // Different arrays\n        double[] b1 = new double[] {1.0, 2.0, 3.0};\n        double[] b2 = new double[] {4.0, 5.0, 6.0};\n        builder = new CompareToBuilder();\n        builder.append(b1, b2);\n        assertNotEquals(0, builder.toComparison());\n\n        // Left array is null\n        double[] c1 = null;\n        double[] c2 = new double[] {1.0, 2.0, 3.0};\n        builder = new CompareToBuilder();\n        builder.append(c1, c2);\n        assertEquals(-1, builder.toComparison());\n\n        // Right array is null\n        double[] d1 = new double[] {1.0, 2.0, 3.0};\n        double[] d2 = null;\n        builder = new CompareToBuilder();\n        builder.append(d1, d2);\n        assertEquals(1, builder.toComparison());\n\n        // Arrays are of different length\n        double[] e1 = new double[] {1.0, 2.0};\n        double[] e2 = new double[] {1.0, 2.0, 3.0};\n        builder = new CompareToBuilder();\n        builder.append(e1, e2);\n        assertEquals(-1, builder.toComparison());\n\n        double[] f1 = new double[] {1.0, 2.0, 3.0};\n        double[] f2 = new double[] {1.0, 2.0};\n        builder = new CompareToBuilder();\n        builder.append(f1, f2);\n        assertEquals(1, builder.toComparison());\n\n        // Same array (identical reference)\n        double[] g1 = new double[] {1.0, 2.0, 3.0};\n        double[] g2 = g1;\n        builder = new CompareToBuilder();\n        builder.append(g1, g2);\n        assertEquals(0, builder.toComparison());\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        // Setup builder instance for testing\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Test equal arrays\n        double[] arr1 = new double[]{1.0, 2.0, 3.0};\n        double[] arr2 = new double[]{1.0, 2.0, 3.0};\n        builder.append(arr1, arr2);\n        assertEquals(0, builder.toComparison(), \"Arrays with the same values should be equal\");\n\n        // Test left array is null\n        double[] arrNull = null;\n        builder = new CompareToBuilder(); // reset the builder\n        builder.append(arrNull, arr2);\n        assertTrue(builder.toComparison() < 0, \"When left array is null, it should be considered less than\");\n\n        // Test right array is null\n        builder = new CompareToBuilder(); // reset the builder\n        builder.append(arr1, arrNull);\n        assertTrue(builder.toComparison() > 0, \"When right array is null, it should be considered greater than\");\n\n        // Test left array is shorter\n        double[] arrShorter = new double[]{1.0, 2.0};\n        builder = new CompareToBuilder(); // reset the builder\n        builder.append(arrShorter, arr2);\n        assertTrue(builder.toComparison() < 0, \"When left array is shorter, it should be considered less than\");\n\n        // Test right array is shorter\n        builder = new CompareToBuilder(); // reset the builder\n        builder.append(arr1, arrShorter);\n        assertTrue(builder.toComparison() > 0, \"When right array is shorter, it should be considered greater than\");\n\n        // Test with different values\n        double[] arr3 = new double[]{4.0, 5.0, 6.0};\n        builder = new CompareToBuilder(); // reset the builder\n        builder.append(arr1, arr3);\n        assertTrue(builder.toComparison() != 0, \"Arrays with different values should not be considered equal\");\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        // Assume comparison starts at 0 for a fresh CompareToBuilder\n        CompareToBuilder builder = new CompareToBuilder();\n        \n        // Testing equal arrays\n        double[] bothNull = null;\n        double[] arr1 = new double[]{1.0, 2.0, 3.0};\n        double[] arr2 = new double[]{1.0, 2.0, 3.0};\n\n        assertEquals(builder, builder.append(bothNull, bothNull), \"Both arrays are null, should not affect the comparison\");\n        assertEquals(builder, builder.append(arr1, arr1), \"Same array reference, should not affect the comparison\");\n        assertEquals(builder, builder.append(arr1, arr2), \"Identical arrays, should not affect the comparison\");\n\n        // Testing different length arrays\n        double[] shorterArr = new double[]{1.0, 2.0};\n        double[] longerArr = new double[]{1.0, 2.0, 3.0, 4.0};\n\n        assertNotSame(builder, builder.append(shorterArr, longerArr), \"Different array lengths, should affect the comparison\");\n        assertTrue(builder.toComparison() < 0, \"Shorter array should yield a negative comparison result\");\n\n        // Reset comparison\n        builder = new CompareToBuilder();\n        assertNotSame(builder, builder.append(longerArr, shorterArr), \"Different array lengths, should affect the comparison\");\n        assertTrue(builder.toComparison() > 0, \"Longer array should yield a positive comparison result\");\n\n        // Testing arrays with different values\n        double[] arr3 = new double[]{1.0, 2.0, 3.1};\n        builder = new CompareToBuilder();\n        assertNotSame(builder, builder.append(arr1, arr3), \"Arrays with different values, should affect the comparison\");\n        assertTrue(builder.toComparison() != 0, \"Different values should yield a non-zero comparison result\");\n        \n        // Testing comparison against null\n        builder = new CompareToBuilder();\n        assertNotSame(builder, builder.append(null, arr1), \"Comparing null with a non-null array, should affect the comparison\");\n        assertTrue(builder.toComparison() < 0, \"Comparing null with a non-null array should yield a negative comparison result\");\n\n        builder = new CompareToBuilder();\n        assertNotSame(builder, builder.append(arr1, null), \"Comparing a non-null array with null, should affect the comparison\");\n        assertTrue(builder.toComparison() > 0, \"Comparing a non-null array with null should yield a positive comparison result\");\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        double[] array1 = {1.0, 2.0, 3.0};\n        double[] array2 = {1.0, 2.0, 3.0};\n        double[] array3 = {1.1, 2.2, 3.3};\n        double[] array4 = null;\n\n        // Test with two equal arrays\n        builder.append(array1, array2);\n        assertEquals(0, builder.toComparison(), \"Arrays with same values should compare equal\");\n\n        builder = new CompareToBuilder(); // Reset builder for next comparison\n\n        // Test with different arrays\n        builder.append(array1, array3);\n        assertTrue(builder.toComparison() != 0, \"Arrays with different values should not compare equal\");\n\n        builder = new CompareToBuilder(); // Reset builder for next comparison\n\n        // Test with first array being null\n        builder.append(array4, array2);\n        assertEquals(-1, builder.toComparison(), \"Comparing null array to non-null array should yield -1\");\n\n        builder = new CompareToBuilder(); // Reset builder for next comparison\n\n        // Test with second array being null\n        builder.append(array1, array4);\n        assertEquals(1, builder.toComparison(), \"Comparing non-null array to null array should yield 1\");\n\n        builder = new CompareToBuilder(); // Reset builder for next comparison\n\n        // Test with arrays of different lengths\n        double[] array5 = {1.0, 2.0};\n        builder.append(array1, array5);\n        assertTrue(builder.toComparison() != 0, \"Comparing arrays of different lengths should not compare equal\");\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Test for equal non-null arrays\n        double[] lhsArray = {1.0, 2.0, 3.0};\n        double[] rhsArray = {1.0, 2.0, 3.0};\n        builder.append(lhsArray, rhsArray);\n        assertEquals(0, builder.toComparison(), \"Arrays with the same values should be equal\");\n\n        // Test for non-equal non-null arrays (different values)\n        double[] rhsArrayDifferentValues = {4.0, 5.0, 6.0};\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(lhsArray, rhsArrayDifferentValues);\n        assertNotEquals(0, builder.toComparison(), \"Arrays with different values should not be equal\");\n\n        // Test for non-equal non-null arrays (different lengths)\n        double[] rhsArrayDifferentLength = {1.0, 2.0};\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(lhsArray, rhsArrayDifferentLength);\n        assertNotEquals(0, builder.toComparison(), \"Arrays with different lengths should not be equal\");\n\n        // Test when first array is null and the second is not\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(null, rhsArray);\n        assertEquals(-1, builder.toComparison(), \"Comparison should be -1 when first array is null and the second is not\");\n\n        // Test when second array is null and the first is not\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(lhsArray, null);\n        assertEquals(1, builder.toComparison(), \"Comparison should be 1 when second array is null and the first is not\");\n\n        // Test when both arrays are null\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(null, null);\n        assertEquals(0, builder.toComparison(), \"Comparison should be 0 when both arrays are null\");\n\n        // Test when arrays are the same instance\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(lhsArray, lhsArray);\n        assertEquals(0, builder.toComparison(), \"Comparison should be 0 when arrays are the same instance\");\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        \n        // Test equal arrays\n        double[] sameArray1 = {1.0, 2.0, 3.0};\n        double[] sameArray2 = {1.0, 2.0, 3.0};\n        builder.append(sameArray1, sameArray2);\n        assertEquals(0, builder.toComparison(), \"Arrays with the same values should compare equal\");\n\n        // Test different arrays\n        double[] leftArray = {1.0, 3.0, 2.0};\n        double[] rightArray = {1.0, 2.0, 3.0};\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(leftArray, rightArray);\n        assertNotEquals(0, builder.toComparison(), \"Arrays with different values should not compare equal\");\n\n        // Test left array null\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(null, rightArray);\n        assertTrue(builder.toComparison() < 0, \"null lhs array should be considered less than a non-null rhs array\");\n        \n        // Test right array null\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(leftArray, null);\n        assertTrue(builder.toComparison() > 0, \"non-null lhs array should be considered greater than a null rhs array\");\n\n        // Test both arrays null\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(null, null);\n        assertEquals(0, builder.toComparison(), \"Both lhs and rhs arrays as null should compare equal\");\n\n        // Test arrays of different length\n        double[] shorterArray = {1.0, 2.0};\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(shorterArray, sameArray1);\n        assertTrue(builder.toComparison() < 0, \"Shorter lhs array should be considered less than a longer rhs array\");\n\n        builder = new CompareToBuilder(); // reset builder\n        builder.append(sameArray1, shorterArray);\n        assertTrue(builder.toComparison() > 0, \"Longer lhs array should be considered greater than a shorter rhs array\");\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder compareToBuilder = new CompareToBuilder();\n\n        // Test with the same arrays\n        double[] lhs1 = new double[] {1.0, 2.0, 3.0};\n        double[] rhs1 = new double[] {1.0, 2.0, 3.0};\n        compareToBuilder.append(lhs1, rhs1);\n        assertEquals(0, compareToBuilder.toComparison(), \"Arrays are equal but comparison is not 0\");\n\n        // Test with left array being null\n        double[] lhs2 = null;\n        double[] rhs2 = new double[] {1.0, 2.0, 3.0};\n        compareToBuilder = new CompareToBuilder(); // reset builder\n        compareToBuilder.append(lhs2, rhs2);\n        assertTrue(compareToBuilder.toComparison() < 0, \"Left array is null so comparison should be less than 0\");\n\n        // Test with right array being null\n        double[] lhs3 = new double[] {1.0, 2.0, 3.0};\n        double[] rhs3 = null;\n        compareToBuilder = new CompareToBuilder(); // reset builder\n        compareToBuilder.append(lhs3, rhs3);\n        assertTrue(compareToBuilder.toComparison() > 0, \"Right array is null so comparison should be greater than 0\");\n\n        // Test with arrays of different lengths\n        double[] lhs4 = new double[] {1.0, 2.0, 3.0};\n        double[] rhs4 = new double[] {1.0, 2.0};\n        compareToBuilder = new CompareToBuilder(); // reset builder\n        compareToBuilder.append(lhs4, rhs4);\n        assertTrue(compareToBuilder.toComparison() > 0, \"Left array is longer so comparison should be greater than 0\");\n\n        // Test with arrays of equal lengths but different contents\n        double[] lhs5 = new double[] {1.0, 2.0, 3.0};\n        double[] rhs5 = new double[] {1.0, 2.0, 4.0};\n        compareToBuilder = new CompareToBuilder(); // reset builder\n        compareToBuilder.append(lhs5, rhs5);\n        assertTrue(compareToBuilder.toComparison() != 0, \"Arrays have different contents, comparison should not be 0\");\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n\n        // Test for equal arrays\n        double[] lhsEquals = {1.0, 2.0, 3.0};\n        double[] rhsEquals = {1.0, 2.0, 3.0};\n        builder.append(lhsEquals, rhsEquals);\n        assertEquals(0, builder.toComparison());\n\n        // Test for left side null\n        double[] lhsNull = null;\n        double[] rhsNonNull = {1.0};\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(lhsNull, rhsNonNull);\n        assertEquals(-1, builder.toComparison());\n\n        // Test for right side null\n        double[] lhsNonNull = {1.0};\n        double[] rhsNull = null;\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(lhsNonNull, rhsNull);\n        assertEquals(1, builder.toComparison());\n\n        // Test for left side shorter\n        double[] lhsShorter = {1.0};\n        double[] rhsLonger = {1.0, 2.0};\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(lhsShorter, rhsLonger);\n        assertEquals(-1, builder.toComparison());\n\n        // Test for right side shorter\n        double[] lhsLonger = {1.0, 2.0};\n        double[] rhsShorter = {1.0};\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(lhsLonger, rhsShorter);\n        assertEquals(1, builder.toComparison());\n\n        // Test for non-equal arrays, where first element decides\n        double[] lhsFirstHigher = {2.0, 1.0};\n        double[] rhsFirstLower = {1.0, 2.0};\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(lhsFirstHigher, rhsFirstLower);\n        assertEquals(1, builder.toComparison());\n\n        // Test for non-equal arrays, where subsequent element decides\n        double[] lhsSubsequentLower = {1.0, 1.0};\n        double[] rhsSubsequentHigher = {1.0, 2.0};\n        builder = new CompareToBuilder(); // Reset builder for new comparison\n        builder.append(lhsSubsequentLower, rhsSubsequentHigher);\n        assertEquals(-1, builder.toComparison());\n    }\n}"
    ]
}