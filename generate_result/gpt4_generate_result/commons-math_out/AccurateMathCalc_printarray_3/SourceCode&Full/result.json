{
    "project_name": "commons-math",
    "file_name": "AccurateMathCalc.java",
    "relative_path": "commons-math/commons-math-core/src/main/java/org/apache/commons/math4/core/jdkmath/AccurateMathCalc.java",
    "execute_path": "commons-math/commons-math-core",
    "package": "org.apache.commons.math4.core.jdkmath",
    "docstring": "/**\n     * Print an array.\n     * @param out text output stream where output should be printed\n     * @param name array name\n     * @param expectedLen expected length of the array\n     * @param array2d array data\n     */",
    "source_code": "\nstatic void printarray(PrintStream out, String name, int expectedLen, double[][] array2d) {\n    out.println(name);\n    checkLen(expectedLen, array2d.length);\n    out.println(TABLE_START_DECL + \" \");\n    int i = 0;\n    for (double[] array : array2d) { // \"double array[]\" causes PMD parsing error\n        out.print(\"        {\");\n        for (double d : array) { // assume inner array has very few entries\n            out.printf(\"%-25.25s\", format(d)); // multiple entries per line\n        }\n        out.println(\"}, // \" + i++);\n    }\n    out.println(TABLE_END_DECL);\n}\n",
    "class_name": "AccurateMathCalc",
    "method_name": "printarray",
    "arguments": [
        "PrintStream out",
        "String name",
        "int expectedLen",
        "double[][] array2d"
    ],
    "generate_test": [
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport java.io.PrintStream;\nimport java.io.ByteArrayOutputStream;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n\n    @BeforeEach\n    public void setUpStreams() {\n        // Redirect System.out to outContent stream catcher\n        System.setOut(new PrintStream(outContent));\n    }\n\n    @AfterEach\n    public void restoreStreams() {\n        // Restore back to the original System.out\n        System.setOut(originalOut);\n    }\n\n    @Test\n    public void printarrayTest() {\n        double[][] array2d = {\n            {1.0, 2.0},\n            {3.0, 4.0},\n            {5.0, 6.0}\n        };\n        String expectedOutput = \"\"\"\n                TestArray\n                {         \n                        +1.0d,                     +2.0d,                     }, // 0\n                        +3.0d,                     +4.0d,                     }, // 1\n                        +5.0d,                     +6.0d,                     }, // 2\n                };\\\\n\"\"\";\n        AccurateMathCalc.printarray(System.out, \"TestArray\", 3, array2d);\n\n        // Replace new lines and spaces to enable string comparison on any platform\n        String actualOutput = outContent.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\\\\n\").replace(\" \", \"\");\n        expectedOutput = expectedOutput.replace(\"\\r\", \"\").replace(\"\\n\", \"\\\\n\").replace(\" \", \"\");\n\n        // Assert that the actual output is equal to the expected output\n        assertEquals(expectedOutput, actualOutput);\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\npublic class AccurateMathCalcTest {\n\n    @Test\n    public void printarrayTest() {\n        // Prepare a double array to print\n        double[][] array2d = {{1.0, 2.0}, {3.0, 4.0}, {5.0, 6.0}};\n        String name = \"TestArray\";\n        int expectedLen = 3;\n        \n        // Redirect standard output to a byte array output stream\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        PrintStream ps = new PrintStream(baos);\n\n        // Call the method to test\n        AccurateMathCalc.printarray(ps, name, expectedLen, array2d);\n\n        // Convert the output stream to a string\n        String content = baos.toString();\n\n        // Expected output\n        String lineSeparator = System.lineSeparator();\n        String expectedOutput = \"TestArray\" + lineSeparator +\n                                \"    { \" + lineSeparator +\n                                \"        {+1.0d,                      +2.0d,                      }, // 0\" + lineSeparator +\n                                \"        {+3.0d,                      +4.0d,                      }, // 1\" + lineSeparator +\n                                \"        {+5.0d,                      +6.0d,                      }, // 2\" + lineSeparator +\n                                \"    };\" + lineSeparator;\n\n        // Assert the expected output\n        assertEquals(expectedOutput, content);\n        \n        // Clean up resources\n        ps.close();\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    @Test\n    public void printarrayTest() {\n        final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        final PrintStream originalOut = System.out;\n        System.setOut(new PrintStream(outContent));\n\n        try {\n            double[][] inputArray = {\n                    {1.0, 2.0, 3.0},\n                    {4.0, 5.0, 6.0},\n                    {7.0, 8.0, 9.0}\n            };\n            String arrayName = \"TestArray\";\n            int expectedLen = 3;\n\n            AccurateMathCalc.printarray(System.out, arrayName, expectedLen, inputArray);\n\n            StringBuilder expectedOutput = new StringBuilder();\n            expectedOutput.append(arrayName).append(\"\\n\");\n            expectedOutput.append(\"    { \\n\");\n            for (int i = 0; i < inputArray.length; i++) {\n                expectedOutput.append(\"        {\");\n                for (double d : inputArray[i]) {\n                    expectedOutput.append(String.format(\"%-25.25s\", AccurateMathCalc.format(d)));\n                }\n                expectedOutput.append(\"}, // \").append(i).append(\"\\n\");\n            }\n            expectedOutput.append(\"    };\\n\");\n\n            assertEquals(expectedOutput.toString(), outContent.toString());\n        } finally {\n            System.setOut(originalOut);\n        }\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.io.UnsupportedEncodingException;\n\npublic class AccurateMathCalcTest {\n\n    @Test\n    public void printarrayTest() throws UnsupportedEncodingException {\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final String charsetName = \"UTF-8\";\n\n        try (PrintStream ps = new PrintStream(baos, true, charsetName)) {\n            double[][] testArray = {{1.0, 2.0}, {3.0, 4.0}};\n            String expectedOutput = \"testArray\\n\" +\n                                    \"    { \\n\" +\n                                    \"        {+1.0d,                      +2.0d,                      }, // 0\\n\" +\n                                    \"        {+3.0d,                      +4.0d,                      }, // 1\\n\" +\n                                    \"    };\\n\";\n\n            AccurateMathCalc.printarray(ps, \"testArray\", 2, testArray);\n\n            ps.flush();\n            String actualOutput = baos.toString(charsetName);\n\n            assertEquals(expectedOutput, actualOutput, \"The outputs are not equal\");\n        }\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class AccurateMathCalcTest {\n    \n    @Test\n    public void printarrayTest() {\n        // Given\n        String arrayName = \"TestArray\";\n        int expectedLen = 2;\n        double[][] array2d = {{1.0, 2.0}, {3.0, 4.0}};\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        PrintStream ps = new PrintStream(baos);\n        \n        // Expected textual representation of the array content\n        String expectedOutput = \"TestArray\\n\" +\n                                \"    { \\n\" +\n                                \"        {+1.0d,                     +2.0d,                     }, // 0\\n\" +\n                                \"        {+3.0d,                     +4.0d,                     }, // 1\\n\" +\n                                \"    };\\n\";\n        \n        // When\n        AccurateMathCalc.printarray(ps, arrayName, expectedLen, array2d);\n        \n        // Then\n        ps.flush();\n        String actualOutput = baos.toString();\n        assertEquals(expectedOutput, actualOutput);\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\npublic class AccurateMathCalcTest {\n\n    // Helper method to capture the output of printarray()\n    private String capturePrintArrayOutput(int expectedLen, double[][] array2d) {\n        // Set up OutputStream and PrintStream to capture output\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        PrintStream originalOut = System.out;\n        System.setOut(new PrintStream(outContent));\n\n        // Call the method and capture its output\n        AccurateMathCalc.printarray(System.out, \"TestArray\", expectedLen, array2d);\n\n        // Restore the original System.out\n        System.setOut(originalOut);\n\n        // Return the output as a String\n        return outContent.toString();\n    }\n\n    @Test\n    public void printarrayTest() {\n        // Given values (modify as needed for testing)\n        String name = \"TestArray\";\n        int expectedLen = 3;\n        double[][] array2d = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n\n        // Expected output string (manually formatted to match expected behavior)\n        String expectedOutput =\n            \"TestArray\\n\" +\n            \"    { \\n\" +\n            \"        {+1.0d,                     +2.0d,                     +3.0d,                     }, // 0\\n\" +\n            \"        {+4.0d,                     +5.0d,                     +6.0d,                     }, // 1\\n\" +\n            \"        {+7.0d,                     +8.0d,                     +9.0d,                     }, // 2\\n\" +\n            \"    };\\n\";\n\n        // Execute the test case and capture the output\n        String actualOutput = capturePrintArrayOutput(expectedLen, array2d);\n\n        // Assertion using a .contains() check to ignore platform-specific newlines etc.\n        assertTrue(actualOutput.replace(\"\\r\\n\", \"\\n\").contains(expectedOutput.replace(\"\\r\\n\", \"\\n\")));\n    }\n}",
        "\npackage org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.Test;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void printarrayTest() {\n        // Prepare a stream to capture the output\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        PrintStream printStream = new PrintStream(byteArrayOutputStream);\n        \n        // Define the array to be passed to the printarray method\n        double[][] testArray = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0}\n        };\n        \n        // Expected output\n        String expectedOutput = \"testArray\\n\" + \n                                \"    { \\n\" +\n                                \"        {+1.0d,                      +2.0d,                      +3.0d,                      }, // 0\\n\" +\n                                \"        {+4.0d,                      +5.0d,                      +6.0d,                      }, // 1\\n\" +\n                                \"    };\\n\";\n        \n        // Call the method to test\n        AccurateMathCalc.printarray(printStream, \"testArray\", testArray.length, testArray);\n        \n        // Capture the output for comparison\n        printStream.flush();\n        String actualOutput = byteArrayOutputStream.toString();\n        \n        // Assert the expected output equals the actual output\n        assertEquals(expectedOutput, actualOutput, \"The output did not match the expected output.\");\n    }\n}\n",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void printarrayTest() {\n        final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        final PrintStream originalOut = System.out;\n        try {\n            System.setOut(new PrintStream(outContent));\n            double[][] array2d = {\n                {1.0, 2.0, 3.0},\n                {4.0, 5.0, 6.0},\n                {7.0, 8.0, 9.0}\n            };\n            AccurateMathCalc.printarray(System.out, \"Array2D\", array2d.length, array2d);\n            \n            String expectedOutput = \"Array2D\\n\" +\n                                    \"    { \\n\" +\n                                    \"        {+1.0d,                      +2.0d,                      +3.0d,                      }, // 0\\n\" +\n                                    \"        {+4.0d,                      +5.0d,                      +6.0d,                      }, // 1\\n\" +\n                                    \"        {+7.0d,                      +8.0d,                      +9.0d,                      }, // 2\\n\" +\n                                    \"    };\\n\";\n            assertEquals(expectedOutput, outContent.toString());\n        } finally {\n            System.setOut(originalOut);\n        }\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void printarrayTest() {\n        final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        final PrintStream originalOut = System.out;\n        System.setOut(new PrintStream(outContent));\n\n        try {\n            double[][] array2d = {\n                {1.0, 2.0},\n                {3.0, 4.0},\n                {5.0, 6.0}\n            };\n            String expectedOutput = \"testarray\\n\" +\n                                    \"    { \\n\" +\n                                    \"        {+1.0d,                      +2.0d,                      }, // 0\\n\" +\n                                    \"        {+3.0d,                      +4.0d,                      }, // 1\\n\" +\n                                    \"        {+5.0d,                      +6.0d,                      }, // 2\\n\" +\n                                    \"    };\\n\";\n\n            AccurateMathCalc.printarray(System.out, \"testarray\", 3, array2d);\n\n            assertEquals(expectedOutput, outContent.toString());\n        } finally {\n            System.setOut(originalOut);\n        }\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\npublic class AccurateMathCalcTest {\n\n    // Helper method to convert byte array output to String\n    private String convertByteArrayToString(ByteArrayOutputStream os) {\n        return os.toString().replace(\"\\r\\n\", \"\\n\"); // Normalize line-endings across different OS\n    }\n    \n    @Test\n    public void printarrayTest() {\n        // Setup ByteArrayOutputStream to capture the output\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        PrintStream printStream = new PrintStream(baos);\n\n        // Given 2D array\n        double[][] array2d = {\n            {1.0, 2.0},\n            {3.0, 4.0},\n            {5.0, 6.0}\n        };\n\n        // Expected output\n        String expected = \"myArray\\n\" +\n                \"    {\\n\" + // Note: This string should match TABLE_START_DECL in source code\n                \"        {+1.0d,                      +2.0d,                      }, // 0\\n\" + // Expected formatting\n                \"        {+3.0d,                      +4.0d,                      }, // 1\\n\" +\n                \"        {+5.0d,                      +6.0d,                      }, // 2\\n\" +\n                \"    };\\n\"; // Note: This string should match TABLE_END_DECL in source code\n\n        // Call the method under test\n        AccurateMathCalc.printarray(printStream, \"myArray\", array2d.length, array2d);\n\n        // Verify the method output with the expected string\n        String actual = convertByteArrayToString(baos);\n        assertEquals(expected, actual);\n\n        // Close PrintStream to release resources\n        printStream.close();\n    }\n}"
    ]
}