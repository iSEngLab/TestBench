Source code: 


static void printarray(PrintStream out, String name, int expectedLen, double[][] array2d) {
    out.println(name);
    checkLen(expectedLen, array2d.length);
    out.println(TABLE_START_DECL + " ");
    int i = 0;
    for (double[] array : array2d) { // "double array[]" causes PMD parsing error
        out.print("        {");
        for (double d : array) { // assume inner array has very few entries
            out.printf("%-25.25s", format(d)); // multiple entries per line
        }
        out.println("}, // " + i++);
    }
    out.println(TABLE_END_DECL);
}



No.1 generated result --------------------------

package org.apache.commons.math4.core.jdkmath;

import org.junit.jupiter.api.*;
import java.io.PrintStream;
import java.io.ByteArrayOutputStream;

import static org.junit.jupiter.api.Assertions.*;

public class AccurateMathCalcTest {
    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;

    @BeforeEach
    public void setUpStreams() {
        // Redirect System.out to outContent stream catcher
        System.setOut(new PrintStream(outContent));
    }

    @AfterEach
    public void restoreStreams() {
        // Restore back to the original System.out
        System.setOut(originalOut);
    }

    @Test
    public void printarrayTest() {
        double[][] array2d = {
            {1.0, 2.0},
            {3.0, 4.0},
            {5.0, 6.0}
        };
        String expectedOutput = """
                TestArray
                {         
                        +1.0d,                     +2.0d,                     }, // 0
                        +3.0d,                     +4.0d,                     }, // 1
                        +5.0d,                     +6.0d,                     }, // 2
                };\\n""";
        AccurateMathCalc.printarray(System.out, "TestArray", 3, array2d);

        // Replace new lines and spaces to enable string comparison on any platform
        String actualOutput = outContent.toString().replace("\r", "").replace("\n", "\\n").replace(" ", "");
        expectedOutput = expectedOutput.replace("\r", "").replace("\n", "\\n").replace(" ", "");

        // Assert that the actual output is equal to the expected output
        assertEquals(expectedOutput, actualOutput);
    }
}


No.2 generated result --------------------------

package org.apache.commons.math4.core.jdkmath;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class AccurateMathCalcTest {

    @Test
    public void printarrayTest() {
        // Prepare a double array to print
        double[][] array2d = {{1.0, 2.0}, {3.0, 4.0}, {5.0, 6.0}};
        String name = "TestArray";
        int expectedLen = 3;
        
        // Redirect standard output to a byte array output stream
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);

        // Call the method to test
        AccurateMathCalc.printarray(ps, name, expectedLen, array2d);

        // Convert the output stream to a string
        String content = baos.toString();

        // Expected output
        String lineSeparator = System.lineSeparator();
        String expectedOutput = "TestArray" + lineSeparator +
                                "    { " + lineSeparator +
                                "        {+1.0d,                      +2.0d,                      }, // 0" + lineSeparator +
                                "        {+3.0d,                      +4.0d,                      }, // 1" + lineSeparator +
                                "        {+5.0d,                      +6.0d,                      }, // 2" + lineSeparator +
                                "    };" + lineSeparator;

        // Assert the expected output
        assertEquals(expectedOutput, content);
        
        // Clean up resources
        ps.close();
    }
}


No.3 generated result --------------------------

package org.apache.commons.math4.core.jdkmath;

import org.junit.jupiter.api.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.jupiter.api.Assertions.*;

public class AccurateMathCalcTest {

    @Test
    public void printarrayTest() {
        final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
        final PrintStream originalOut = System.out;
        System.setOut(new PrintStream(outContent));

        try {
            double[][] inputArray = {
                    {1.0, 2.0, 3.0},
                    {4.0, 5.0, 6.0},
                    {7.0, 8.0, 9.0}
            };
            String arrayName = "TestArray";
            int expectedLen = 3;

            AccurateMathCalc.printarray(System.out, arrayName, expectedLen, inputArray);

            StringBuilder expectedOutput = new StringBuilder();
            expectedOutput.append(arrayName).append("\n");
            expectedOutput.append("    { \n");
            for (int i = 0; i < inputArray.length; i++) {
                expectedOutput.append("        {");
                for (double d : inputArray[i]) {
                    expectedOutput.append(String.format("%-25.25s", AccurateMathCalc.format(d)));
                }
                expectedOutput.append("}, // ").append(i).append("\n");
            }
            expectedOutput.append("    };\n");

            assertEquals(expectedOutput.toString(), outContent.toString());
        } finally {
            System.setOut(originalOut);
        }
    }
}


No.4 generated result --------------------------

package org.apache.commons.math4.core.jdkmath;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;

public class AccurateMathCalcTest {

    @Test
    public void printarrayTest() throws UnsupportedEncodingException {
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        final String charsetName = "UTF-8";

        try (PrintStream ps = new PrintStream(baos, true, charsetName)) {
            double[][] testArray = {{1.0, 2.0}, {3.0, 4.0}};
            String expectedOutput = "testArray\n" +
                                    "    { \n" +
                                    "        {+1.0d,                      +2.0d,                      }, // 0\n" +
                                    "        {+3.0d,                      +4.0d,                      }, // 1\n" +
                                    "    };\n";

            AccurateMathCalc.printarray(ps, "testArray", 2, testArray);

            ps.flush();
            String actualOutput = baos.toString(charsetName);

            assertEquals(expectedOutput, actualOutput, "The outputs are not equal");
        }
    }
}


No.5 generated result --------------------------

package org.apache.commons.math4.core.jdkmath;

import org.junit.jupiter.api.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class AccurateMathCalcTest {
    
    @Test
    public void printarrayTest() {
        // Given
        String arrayName = "TestArray";
        int expectedLen = 2;
        double[][] array2d = {{1.0, 2.0}, {3.0, 4.0}};
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);
        
        // Expected textual representation of the array content
        String expectedOutput = "TestArray\n" +
                                "    { \n" +
                                "        {+1.0d,                     +2.0d,                     }, // 0\n" +
                                "        {+3.0d,                     +4.0d,                     }, // 1\n" +
                                "    };\n";
        
        // When
        AccurateMathCalc.printarray(ps, arrayName, expectedLen, array2d);
        
        // Then
        ps.flush();
        String actualOutput = baos.toString();
        assertEquals(expectedOutput, actualOutput);
    }
}


No.6 generated result --------------------------

package org.apache.commons.math4.core.jdkmath;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class AccurateMathCalcTest {

    // Helper method to capture the output of printarray()
    private String capturePrintArrayOutput(int expectedLen, double[][] array2d) {
        // Set up OutputStream and PrintStream to capture output
        ByteArrayOutputStream outContent = new ByteArrayOutputStream();
        PrintStream originalOut = System.out;
        System.setOut(new PrintStream(outContent));

        // Call the method and capture its output
        AccurateMathCalc.printarray(System.out, "TestArray", expectedLen, array2d);

        // Restore the original System.out
        System.setOut(originalOut);

        // Return the output as a String
        return outContent.toString();
    }

    @Test
    public void printarrayTest() {
        // Given values (modify as needed for testing)
        String name = "TestArray";
        int expectedLen = 3;
        double[][] array2d = {
            {1.0, 2.0, 3.0},
            {4.0, 5.0, 6.0},
            {7.0, 8.0, 9.0}
        };

        // Expected output string (manually formatted to match expected behavior)
        String expectedOutput =
            "TestArray\n" +
            "    { \n" +
            "        {+1.0d,                     +2.0d,                     +3.0d,                     }, // 0\n" +
            "        {+4.0d,                     +5.0d,                     +6.0d,                     }, // 1\n" +
            "        {+7.0d,                     +8.0d,                     +9.0d,                     }, // 2\n" +
            "    };\n";

        // Execute the test case and capture the output
        String actualOutput = capturePrintArrayOutput(expectedLen, array2d);

        // Assertion using a .contains() check to ignore platform-specific newlines etc.
        assertTrue(actualOutput.replace("\r\n", "\n").contains(expectedOutput.replace("\r\n", "\n")));
    }
}


No.7 generated result --------------------------


package org.apache.commons.math4.core.jdkmath;

import org.junit.jupiter.api.Test;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import static org.junit.jupiter.api.Assertions.*;

public class AccurateMathCalcTest {
    @Test
    public void printarrayTest() {
        // Prepare a stream to capture the output
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        PrintStream printStream = new PrintStream(byteArrayOutputStream);
        
        // Define the array to be passed to the printarray method
        double[][] testArray = {
            {1.0, 2.0, 3.0},
            {4.0, 5.0, 6.0}
        };
        
        // Expected output
        String expectedOutput = "testArray\n" + 
                                "    { \n" +
                                "        {+1.0d,                      +2.0d,                      +3.0d,                      }, // 0\n" +
                                "        {+4.0d,                      +5.0d,                      +6.0d,                      }, // 1\n" +
                                "    };\n";
        
        // Call the method to test
        AccurateMathCalc.printarray(printStream, "testArray", testArray.length, testArray);
        
        // Capture the output for comparison
        printStream.flush();
        String actualOutput = byteArrayOutputStream.toString();
        
        // Assert the expected output equals the actual output
        assertEquals(expectedOutput, actualOutput, "The output did not match the expected output.");
    }
}



No.8 generated result --------------------------

package org.apache.commons.math4.core.jdkmath;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class AccurateMathCalcTest {
    @Test
    public void printarrayTest() {
        final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
        final PrintStream originalOut = System.out;
        try {
            System.setOut(new PrintStream(outContent));
            double[][] array2d = {
                {1.0, 2.0, 3.0},
                {4.0, 5.0, 6.0},
                {7.0, 8.0, 9.0}
            };
            AccurateMathCalc.printarray(System.out, "Array2D", array2d.length, array2d);
            
            String expectedOutput = "Array2D\n" +
                                    "    { \n" +
                                    "        {+1.0d,                      +2.0d,                      +3.0d,                      }, // 0\n" +
                                    "        {+4.0d,                      +5.0d,                      +6.0d,                      }, // 1\n" +
                                    "        {+7.0d,                      +8.0d,                      +9.0d,                      }, // 2\n" +
                                    "    };\n";
            assertEquals(expectedOutput, outContent.toString());
        } finally {
            System.setOut(originalOut);
        }
    }
}


No.9 generated result --------------------------

package org.apache.commons.math4.core.jdkmath;

import org.junit.jupiter.api.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import static org.junit.jupiter.api.Assertions.*;

public class AccurateMathCalcTest {
    @Test
    public void printarrayTest() {
        final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
        final PrintStream originalOut = System.out;
        System.setOut(new PrintStream(outContent));

        try {
            double[][] array2d = {
                {1.0, 2.0},
                {3.0, 4.0},
                {5.0, 6.0}
            };
            String expectedOutput = "testarray\n" +
                                    "    { \n" +
                                    "        {+1.0d,                      +2.0d,                      }, // 0\n" +
                                    "        {+3.0d,                      +4.0d,                      }, // 1\n" +
                                    "        {+5.0d,                      +6.0d,                      }, // 2\n" +
                                    "    };\n";

            AccurateMathCalc.printarray(System.out, "testarray", 3, array2d);

            assertEquals(expectedOutput, outContent.toString());
        } finally {
            System.setOut(originalOut);
        }
    }
}


No.10 generated result --------------------------

package org.apache.commons.math4.core.jdkmath;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class AccurateMathCalcTest {

    // Helper method to convert byte array output to String
    private String convertByteArrayToString(ByteArrayOutputStream os) {
        return os.toString().replace("\r\n", "\n"); // Normalize line-endings across different OS
    }
    
    @Test
    public void printarrayTest() {
        // Setup ByteArrayOutputStream to capture the output
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream printStream = new PrintStream(baos);

        // Given 2D array
        double[][] array2d = {
            {1.0, 2.0},
            {3.0, 4.0},
            {5.0, 6.0}
        };

        // Expected output
        String expected = "myArray\n" +
                "    {\n" + // Note: This string should match TABLE_START_DECL in source code
                "        {+1.0d,                      +2.0d,                      }, // 0\n" + // Expected formatting
                "        {+3.0d,                      +4.0d,                      }, // 1\n" +
                "        {+5.0d,                      +6.0d,                      }, // 2\n" +
                "    };\n"; // Note: This string should match TABLE_END_DECL in source code

        // Call the method under test
        AccurateMathCalc.printarray(printStream, "myArray", array2d.length, array2d);

        // Verify the method output with the expected string
        String actual = convertByteArrayToString(baos);
        assertEquals(expected, actual);

        // Close PrintStream to release resources
        printStream.close();
    }
}


