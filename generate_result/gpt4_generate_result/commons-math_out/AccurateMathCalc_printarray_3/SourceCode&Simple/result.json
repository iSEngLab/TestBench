{
    "project_name": "commons-math",
    "file_name": "AccurateMathCalc.java",
    "relative_path": "commons-math/commons-math-core/src/main/java/org/apache/commons/math4/core/jdkmath/AccurateMathCalc.java",
    "execute_path": "commons-math/commons-math-core",
    "package": "org.apache.commons.math4.core.jdkmath",
    "docstring": "/**\n     * Print an array.\n     * @param out text output stream where output should be printed\n     * @param name array name\n     * @param expectedLen expected length of the array\n     * @param array2d array data\n     */",
    "source_code": "\nstatic void printarray(PrintStream out, String name, int expectedLen, double[][] array2d) {\n    out.println(name);\n    checkLen(expectedLen, array2d.length);\n    out.println(TABLE_START_DECL + \" \");\n    int i = 0;\n    for (double[] array : array2d) { // \"double array[]\" causes PMD parsing error\n        out.print(\"        {\");\n        for (double d : array) { // assume inner array has very few entries\n            out.printf(\"%-25.25s\", format(d)); // multiple entries per line\n        }\n        out.println(\"}, // \" + i++);\n    }\n    out.println(TABLE_END_DECL);\n}\n",
    "class_name": "AccurateMathCalc",
    "method_name": "printarray",
    "arguments": [
        "PrintStream out",
        "String name",
        "int expectedLen",
        "double[][] array2d"
    ],
    "generate_test": [
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\npublic class AccurateMathCalcTest {\n\n    @Test\n    public void printarrayTest() {\n        // Set up a ByteArrayOutputStream to capture the output from PrintStream\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        PrintStream originalOut = System.out;\n        System.setOut(new PrintStream(outContent));\n\n        // Given variables (as an example, you may need to use appropriate values)\n        String arrayName = \"TestArray\";\n        int expectedLen = 2;\n        double[][] array2d = {\n                {1.1, 2.2},\n                {3.3, 4.4}\n        };\n        String expectedOutput = arrayName + \"\\n\" + AccurateMathCalc.TABLE_START_DECL + \" \\n\" +\n                \"        {1.1                     ,2.2                     }, // 0\\n\" +\n                \"        {3.3                     ,4.4                     }, // 1\\n\" +\n                AccurateMathCalc.TABLE_END_DECL + \"\\n\";\n\n        // Call the method under test\n        AccurateMathCalc.printarray(System.out, arrayName, expectedLen, array2d);\n\n        // Restore the original System.out\n        System.setOut(originalOut);\n\n        // Assert the output\n        assertEquals(expectedOutput.trim(), outContent.toString().trim());\n\n        // Alternatively, if you need to check only that the method doesn't throw exceptions:\n        // assertDoesNotThrow(() -> AccurateMathCalc.printarray(System.out, arrayName, expectedLen, array2d));\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    private final PrintStream originalOut = System.out;\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n\n    @BeforeEach\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n    }\n\n    @AfterEach\n    public void restoreStreams() {\n        System.setOut(originalOut);\n    }\n\n    @Test\n    public void printarrayTest() {\n        String name = \"TestArray\";\n        int expectedLen = 2;\n        double[][] array2d = {{1.0, 2.0}, {3.0, 4.0}};\n        \n        // The expected output string for unit testing\n        String expectedOutput = name + System.lineSeparator() +\n                                AccurateMathCalc.TABLE_START_DECL + \" \" + System.lineSeparator() +\n                                \"        {1.0                     ,2.0                     }, // 0\" + System.lineSeparator() +\n                                \"        {3.0                     ,4.0                     }, // 1\" + System.lineSeparator() +\n                                AccurateMathCalc.TABLE_END_DECL + System.lineSeparator();\n\n        AccurateMathCalc.printarray(System.out, name, expectedLen, array2d);\n\n        assertEquals(expectedOutput, outContent.toString());\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n   private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n   private final PrintStream originalOut = System.out;\n\n   @BeforeEach\n   public void setUpStreams() {\n       System.setOut(new PrintStream(outContent));\n   }\n\n   @AfterEach\n   public void restoreStreams() {\n       System.setOut(originalOut);\n   }\n\n   @Test\n   public void printarrayTest() {\n       String expectedName = \"Array2d\";\n       double[][] testArray2d = { {1.0, 2.0, 3.0}, {4.0, 5.0, 6.0} };\n       int expectedArray2dLength = 2;\n\n       // Configure static members that may be used in printarray method\n       AccurateMathCalc.TABLE_START_DECL = \"Table Start\";\n       AccurateMathCalc.TABLE_END_DECL = \"Table End\";\n\n       // Replace 'format' method return value if necessary\n       // For example, if 'format' returns a string representation of the double value\n       // AccurateMathCalcTest will extend from AccurateMathCalc to be able to mock 'format' method\n       // In the actual test, stubbing or mocking frameworks like Mockito may be used\n\n       // Call the method to test\n       AccurateMathCalc.printarray(System.out, expectedName, expectedArray2dLength, testArray2d);\n       \n       StringBuilder expectedOutput = new StringBuilder();\n       expectedOutput.append(expectedName + System.lineSeparator());\n       expectedOutput.append(AccurateMathCalc.TABLE_START_DECL + \" \" + System.lineSeparator());\n       for (int i = 0; i < testArray2d.length; i++) {\n           expectedOutput.append(\"        {\");\n           for (double d : testArray2d[i]) {\n               expectedOutput.append(String.format(\"%-25.25s\", Double.toString(d))); // assuming format() returns the string value of double\n           }\n           expectedOutput.append(\"}, // \" + i + System.lineSeparator());\n       }\n       expectedOutput.append(AccurateMathCalc.TABLE_END_DECL + System.lineSeparator());\n\n       // Validate the output\n       assertEquals(expectedOutput.toString(), outContent.toString());\n   }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    @Test\n    public void printarrayTest() {\n        // Mock the PrintStream using ByteArrayOutputStream for capturing the output\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        PrintStream mockPrintStream = new PrintStream(outContent);\n\n        // Input parameters for the printarray method\n        String name = \"TestArray\";\n        int expectedLen = 2;\n        double[][] array2d = {\n                {1.0, 2.0},\n                {3.0, 4.0}\n        };\n\n        // Expected output (formatted according to the source code's formatting logic)\n        String expectedOutput = \"TestArray\\n\" +\n                AccurateMathCalc.TABLE_START_DECL + \" \\n\" +\n                \"        {1.0                     ,2.0                     }, // 0\\n\" +\n                \"        {3.0                     ,4.0                     }, // 1\\n\" +\n                AccurateMathCalc.TABLE_END_DECL + \"\\n\";\n\n        // Call the method under test\n        AccurateMathCalc.printarray(mockPrintStream, name, expectedLen, array2d);\n\n        // Verify that the output is as expected\n        assertEquals(expectedOutput, outContent.toString());\n\n        // Close the ByteArrayOutputStream to free system resources\n        try {\n            outContent.close();\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    // Given constants referenced from the AccurateMathCalc class for the purpose of the unit test\n    private static final String TABLE_START_DECL = \"TABLE_START\";\n    private static final String TABLE_END_DECL = \"TABLE_END\";\n    \n    @Test\n    public void printarrayTest() {\n        // Set up\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        PrintStream originalOut = System.out;\n        System.setOut(new PrintStream(outContent));\n\n        // Create the array to be printed\n        double[][] array2d = { {1.1, 2.2}, {3.3, 4.4}, {5.5, 6.6} };\n        String name = \"TestArray\";\n        int expectedLen = 3;\n\n        // Call the method to test\n        AccurateMathCalc.printarray(System.out, name, expectedLen, array2d);\n\n        // Restore the original System.out\n        System.setOut(originalOut);\n\n        // Verify the contents of the print stream\n        String expectedOutput = \"TestArray\\n\" +\n                                TABLE_START_DECL + \" \\n\" +\n                                \"        {1.1                      ,2.2                      }, // 0\\n\" +\n                                \"        {3.3                      ,4.4                      }, // 1\\n\" +\n                                \"        {5.5                      ,6.6                      }, // 2\\n\" +\n                                TABLE_END_DECL + \"\\n\";\n        \n        assertEquals(expectedOutput, outContent.toString());\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final String name = \"TestArray\";\n    private final String TABLE_START_DECL = \"Table Start\";\n    private final String TABLE_END_DECL = \"Table End\";\n\n    @BeforeEach\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n    }\n\n    @AfterEach\n    public void restoreStreams() {\n        System.setOut(originalOut);\n    }\n\n    @Test\n    public void printarrayTest() {\n        // Setup\n        double[][] testArray = {\n                {1.0, 2.0},\n                {3.0, 4.0},\n                {5.0, 6.0}\n        };\n        int expectedLen = 3;\n        String expectedOutput = String.format(\n                \"%s%n%s %n        {1.0                     ,2.0                     }, // 0%n\" +\n                \"        {3.0                     ,4.0                     }, // 1%n\" +\n                \"        {5.0                     ,6.0                     }, // 2%n%s%n\",\n                name, TABLE_START_DECL, TABLE_END_DECL);\n\n        // Execute\n        AccurateMathCalc.printarray(System.out, name, expectedLen, testArray);\n\n        // Verify\n        assertEquals(expectedOutput, outContent.toString());\n    }\n\n    @Test\n    public void printarrayExceptionTest() {\n        // Setup\n        double[][] testArray = {\n                {1.0, 2.0},\n                {3.0, 4.0},\n                {5.0, 6.0}\n        };\n        int wrongLen = 2;\n\n        // Verify exception\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AccurateMathCalc.printarray(System.out, name, wrongLen, testArray);\n        });\n\n        String expectedMessage = \"Array length does not match expected length.\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n\n    @BeforeEach\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n    }\n\n    @AfterEach\n    public void restoreStreams() {\n        System.setOut(originalOut);\n    }\n\n    @Test\n    public void printarrayTest() {\n        // Prepare the test data\n        String name = \"TestArray\";\n        int expectedLen = 2;\n        double[][] array2d = { {1.0, 2.0}, {3.0, 4.0} };\n\n        // Expected output\n        String expectedOutput = \"TestArray\\n\" +\n                                \"<TABLE_START_DECL> \\n\" + // Substitute this with the actual value from the source\n                                \"        {1.0                     , 2.0                     }, // 0\\n\" +\n                                \"        {3.0                     , 4.0                     }, // 1\\n\" +\n                                \"<TABLE_END_DECL>\\n\"; // Substitute this with the actual value from the source\n\n        // Execute the method to test\n        AccurateMathCalc.printarray(System.out, name, expectedLen, array2d);\n        \n        // Replace \"<TABLE_START_DECL>\" and \"<TABLE_END_DECL>\" with the actual constants from `AccurateMathCalc`\n        String modifiedOutput = outContent.toString()\n            .replace(\"<TABLE_START_DECL>\", AccurateMathCalc.TABLE_START_DECL)\n            .replace(\"<TABLE_END_DECL>\", AccurateMathCalc.TABLE_END_DECL);\n        \n        // Assert the output\n        assertEquals(expectedOutput, modifiedOutput);\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport java.io.PrintStream;\nimport java.io.ByteArrayOutputStream;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n\n    @BeforeEach\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n    }\n\n    @AfterEach\n    public void restoreStreams() {\n        System.setOut(originalOut);\n    }\n\n    @Test\n    public void printarrayTest() {\n        // Set up test data and expected results\n        double[][] testArray = {\n            {1.1, 2.2, 3.3},\n            {4.4, 5.5, 6.6}\n        };\n        String name = \"Test Array\";\n        int expectedLen = 2; // correct expected length of the outer array\n\n        // Capture the output from the printarray method\n        AccurateMathCalc.printarray(System.out, name, expectedLen, testArray);\n\n        // Transform the output stream to a String\n        String printedContent = outContent.toString();\n\n        // Set up the expected String\n        String lineSeparator = System.lineSeparator();\n        String expectedOutput = \"Test Array\" + lineSeparator +\n                                AccurateMathCalc.TABLE_START_DECL + \" \" + lineSeparator +\n                                \"        {1.1                     ,2.2                     ,3.3                     }, // 0\" + lineSeparator +\n                                \"        {4.4                     ,5.5                     ,6.6                     }, // 1\" + lineSeparator +\n                                AccurateMathCalc.TABLE_END_DECL + lineSeparator;\n\n        // Assert that the correct content is printed\n        assertEquals(expectedOutput, printedContent, \"The output content is not as expected.\");\n\n        // Reset the outContent to clean up after the test\n        outContent.reset();\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void printarrayTest() {\n        // Given\n        String expectedName = \"Test Array\";\n        int expectedLen = 2;\n        double[][] testArray = {{1.0, 2.0}, {3.0, 4.0}};\n        String expectedOutput = \"Test Array\\n\" + \n                AccurateMathCalc.TABLE_START_DECL + \" \\n\" +\n                \"        {1.0                     ,2.0                     }, // 0\\n\" +\n                \"        {3.0                     ,4.0                     }, // 1\\n\" +\n                AccurateMathCalc.TABLE_END_DECL + \"\\n\";\n\n        // When\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        PrintStream ps = new PrintStream(baos);\n        AccurateMathCalc.printarray(ps, expectedName, expectedLen, testArray);\n        String content = baos.toString();\n\n        // Then\n        assertEquals(expectedOutput, content);\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n\n    @BeforeEach\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n    }\n\n    @AfterEach\n    public void restoreStreams() {\n        System.setOut(originalOut);\n    }\n\n    @Test\n    public void printarrayTest() {\n        String expectedName = \"Test Array\";\n        int expectedLength = 2;\n        double[][] testArray = {\n                {1.1, 2.2, 3.3},\n                {4.4, 5.5, 6.6}\n        };\n\n        AccurateMathCalc.printarray(System.out, expectedName, expectedLength, testArray);\n        \n        String expectedOutput = expectedName + System.lineSeparator() +\n                AccurateMathCalc.TABLE_START_DECL + \" \" + System.lineSeparator() +\n                \"        {1.1                     ,2.2                     ,3.3                     }, // 0\" + System.lineSeparator() +\n                \"        {4.4                     ,5.5                     ,6.6                     }, // 1\" + System.lineSeparator() +\n                AccurateMathCalc.TABLE_END_DECL + System.lineSeparator();\n\n        assertEquals(expectedOutput, outContent.toString());\n    }\n}"
    ]
}