{
    "project_name": "commons-math",
    "file_name": "AccurateMathCalc.java",
    "relative_path": "commons-math/commons-math-core/src/main/java/org/apache/commons/math4/core/jdkmath/AccurateMathCalc.java",
    "execute_path": "commons-math/commons-math-core",
    "package": "org.apache.commons.math4.core.jdkmath",
    "docstring": "/**\n     * Print an array.\n     * @param out text output stream where output should be printed\n     * @param name array name\n     * @param expectedLen expected length of the array\n     * @param array2d array data\n     */",
    "source_code": "\nstatic void printarray(PrintStream out, String name, int expectedLen, double[][] array2d) {\n    out.println(name);\n    checkLen(expectedLen, array2d.length);\n    out.println(TABLE_START_DECL + \" \");\n    int i = 0;\n    for (double[] array : array2d) { // \"double array[]\" causes PMD parsing error\n        out.print(\"        {\");\n        for (double d : array) { // assume inner array has very few entries\n            out.printf(\"%-25.25s\", format(d)); // multiple entries per line\n        }\n        out.println(\"}, // \" + i++);\n    }\n    out.println(TABLE_END_DECL);\n}\n",
    "class_name": "AccurateMathCalc",
    "method_name": "printarray",
    "arguments": [
        "PrintStream out",
        "String name",
        "int expectedLen",
        "double[][] array2d"
    ],
    "generate_test": [
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    private final static String TABLE_START_DECL = \"Table Start\";\n    private final static String TABLE_END_DECL = \"Table End\";\n\n    @Test\n    public void printarrayTest() {\n        // Setup a ByteArrayOutputStream to capture the output\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        PrintStream originalOut = System.out;\n        PrintStream printStream = new PrintStream(outContent);\n        System.setOut(printStream); // Redirect standard out to capture for testing\n\n        // Call the method to test\n        String name = \"TestArray\";\n        int expectedLen = 2;\n        double[][] array2d = new double[][]{{1.1, 2.2}, {3.3, 4.4}};\n        AccurateMathCalc.printarray(printStream, name, expectedLen, array2d);\n\n        // Construct the expected string\n        String expectedOutput = name + System.lineSeparator() +\n                                TABLE_START_DECL + \" \" + System.lineSeparator() +\n                                \"        {1.1                     ,2.2                     }, // 0\" + System.lineSeparator() +\n                                \"        {3.3                     ,4.4                     }, // 1\" + System.lineSeparator() +\n                                TABLE_END_DECL + System.lineSeparator();\n\n        // Restore the original standard out before assertions\n        System.setOut(originalOut);\n\n        // Assert the output is as expected\n        assertEquals(expectedOutput, outContent.toString());\n    }\n\n    // Stubbed method for background example, assumes correct implementation\n    static void checkLen(int expected, int actual) {\n        if (expected != actual) {\n            throw new IllegalArgumentException(\"Array length doesn't match expected length.\");\n        }\n    }\n    \n    // Stubbed method for background example, assumes correct implementation\n    static String format(double d) {\n        // This is a simple placeholder for the actual 'format' method.\n        return String.valueOf(d);\n    }\n\n    // Assume these constants are defined as part of the class since they are used in the method\n    private final static String TABLE_START_DECL = \"Table Start\";\n    private final static String TABLE_END_DECL = \"Table End\";\n    \n    // The printarray method should be part of the AccurateMathCalc class.\n    // The implementation provided in the question should be moved inside the class.\n}\n",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.PrintStream;\nimport java.io.ByteArrayOutputStream;\nimport java.util.Locale;\n\npublic class AccurateMathCalcTest {\n\n    private final static String TABLE_START_DECL = \"Table Start\";\n    private final static String TABLE_END_DECL = \"Table End\";\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    \n    @BeforeEach\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n    }\n\n    @AfterEach\n    public void restoreStreams() {\n        System.setOut(originalOut);\n    }\n\n    static void checkLen(int expectedLen, int actualLen) {\n        assertEquals(expectedLen, actualLen, \"Array length does not match expected length.\");\n    }\n\n    static String format(double d) {\n        return String.format(Locale.ENGLISH, \"%.2f\", d);\n    }\n\n    static void printarray(PrintStream out, String name, int expectedLen, double[][] array2d) {\n        out.println(name);\n        checkLen(expectedLen, array2d.length);\n        out.println(TABLE_START_DECL + \" \");\n        int i = 0;\n        for (double[] array : array2d) {\n            out.print(\"        {\");\n            for (double d : array) {\n                out.printf(\"%-25.25s\", format(d));\n            }\n            out.println(\"}, // \" + i++);\n        }\n        out.println(TABLE_END_DECL);\n    }\n\n    @Test\n    public void printarrayTest() {\n        String arrayName = \"Test Array\";\n        int expectedLen = 2;\n        double[][] testArray = {\n                {1.2345, 2.3456},\n                {3.4567, 4.5678}\n        };\n        \n        printarray(System.out, arrayName, expectedLen, testArray);\n        \n        String expectedOutput = arrayName + System.lineSeparator() +\n                TABLE_START_DECL + \" \" + System.lineSeparator() +\n                \"        {1.23                     ,2.35                     }, // 0\" + System.lineSeparator() +\n                \"        {3.46                     ,4.57                     }, // 1\" + System.lineSeparator() +\n                TABLE_END_DECL + System.lineSeparator();\n        \n        assertEquals(expectedOutput, outContent.toString());\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.Locale;\n\npublic class AccurateMathCalcTest {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n\n    @BeforeEach\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n    }\n\n    @AfterEach\n    public void restoreStreams() {\n        System.setOut(originalOut);\n    }\n\n    @Test\n    public void printarrayTest() {\n        double[][] array2d = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0}\n        };\n        String expectedName = \"TestArray\";\n        int expectedLen = 2;\n        String expectedOutput = expectedName + \"\\n\" +\n                                \"[TABLE_START_DECL]\\n\" +\n                                \"        {1.00                      , 2.00                      , 3.00                      }, // 0\\n\" +\n                                \"        {4.00                      , 5.00                      , 6.00                      }, // 1\\n\" +\n                                \"[TABLE_END_DECL]\\n\";\n\n        AccurateMathCalc.printarray(new PrintStream(outContent), expectedName, expectedLen, array2d);\n\n        assertEquals(expectedOutput, outContent.toString());\n    }\n\n    // Helper methods for the test to call, assuming they exist in the AccurateMathCalc class\n    private static final String TABLE_START_DECL = \"[TABLE_START_DECL]\";\n    private static final String TABLE_END_DECL = \"[TABLE_END_DECL]\";\n\n    static void checkLen(int expectedLen, int actualLen) {\n        if(expectedLen != actualLen) {\n            throw new IllegalArgumentException(\"Array length not as expected.\");\n        }\n    }\n\n    static String format(double d) {\n        return String.format(Locale.US, \"%.2f\", d);\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\npublic class AccurateMathCalcTest {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n\n    @BeforeEach\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n    }\n\n    @AfterEach\n    public void restoreStreams() {\n        System.setOut(originalOut);\n    }\n\n    static void checkLen(int expectedLen, int actualLen) {\n        assertEquals(expectedLen, actualLen,\n                \"Length of array does not match the expected length.\");\n    }\n\n    static String format(double value) {\n        return String.format(\"%f\", value); // This may vary based on the actual `format` method.\n    }\n\n    @Test\n    public void printarrayTest() {\n        String name = \"Test Array\";\n        int expectedLen = 2;\n        double[][] array2d = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0}\n        };\n\n        String expectedOutput = \"Test Array\\n\"\n            + \"[\\n\"\n            + \"        {1.000000                , 2.000000                , 3.000000                }, // 0\\n\"\n            + \"        {4.000000                , 5.000000                , 6.000000                }, // 1\\n\"\n            + \"]\\n\";\n\n        AccurateMathCalc.printarray(System.out, name, expectedLen, array2d);\n\n        assertEquals(expectedOutput, outContent.toString(),\n                \"The output from printarray does not match the expected output.\");\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.Locale;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.fail;\n\npublic class AccurateMathCalcTest {\n\n    @Test\n    public void printarrayTest() {\n        // Setup to capture printed output\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        PrintStream originalOut = System.out;\n        System.setOut(new PrintStream(outContent));\n\n        // Mock data to reflect realistic behavior\n        final String TABLE_START_DECL = \"<Table Start>\";\n        final String TABLE_END_DECL = \"<Table End>\";\n        try {\n            // Providing input data\n            double[][] array2d = {{1.0, 2.0}, {3.0, 4.0}};\n            int expectedLen = 2;\n            String name = \"Test Array\";\n\n            // Expected output as the method should print\n            String expectedOutput = String.format(Locale.ROOT,\n                    \"%s\\n%s \\n        {%-25.25s}, // 0\\n        {%-25.25s}, // 1\\n%s\\n\",\n                    name, TABLE_START_DECL, \"1.0\", \"3.0\", TABLE_END_DECL);\n\n            // Execute the method under test using the mocked PrintStream\n            AccurateMath.printarray(System.out, name, expectedLen, array2d);\n\n            // Assertion to check if the output is as expected\n            assertEquals(expectedOutput, outContent.toString());\n\n        } catch (Exception e) {\n            fail(\"An error occurred while testing printarray method: \" + e.getMessage());\n        } finally {\n            // Clean up\n            System.setOut(originalOut);\n        }\n    }\n    \n    // Assuming the format and checkLen methods exist as specified in the source code.\n    // They will need to be included in this test class or mocked/stubbed for the test to run successfully.\n    static String format(double value) {\n        // This is a mock implementation of the 'format' method\n        return String.format(Locale.ROOT, \"%.2f\", value);\n    }\n\n    static void checkLen(int expected, int actual) {\n        // This is a mock implementation of the 'checkLen' method\n        if (expected != actual) {\n            throw new IllegalArgumentException(\"Array length does not match expected length.\");\n        }\n    }\n\n    // Additional test cases can be added here to cover more scenarios\n    // such as different array sizes, empty arrays, etc.\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n\n    @BeforeEach\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n    }\n\n    @AfterEach\n    public void restoreStreams() {\n        System.setOut(originalOut);\n    }\n\n    @Test\n    public void printarrayTest() {\n        // Given\n        String name = \"TestArray\";\n        int expectedLen = 2;\n        double[][] array2d = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0}\n        };\n        \n        String expectedOutput = \"TestArray\\n\" + \n                                \"<TABLE START DECL\" + \" >\\n\" + \n                                \"        {1.0                     ,2.0                     ,3.0                     }, // 0\\n\" + \n                                \"        {4.0                     ,5.0                     ,6.0                     }, // 1\\n\" + \n                                \"<TABLE END DECL>\\n\";\n        \n        // When\n        AccurateMathCalc.printarray(System.out, name, expectedLen, array2d);\n        \n        // Then\n        assertEquals(expectedOutput, outContent.toString());\n\n        // Restore System.out print stream\n        System.setOut(originalOut);\n    }\n\n    // Assuming AccurateMathCalc.printarray is using these constants\n    // These should be defined in AccurateMathCalc class if required\n    static final String TABLE_START_DECL = \"<TABLE START DECL\";\n    static final String TABLE_END_DECL = \"<TABLE END DECL>\";\n\n    // Assuming AccurateMathCalc.printarray is using this method\n    // This should be defined in AccurateMathCalc class if required\n    static String format(double d) {\n        // This is just an example to match the output. The actual implementation\n        // might be different in the real AccurateMathCalc class.\n        return String.format(\"%-25s\", String.valueOf(d));\n    }\n\n    static void checkLen(int expectedLen, int actualLen) {\n        if (expectedLen != actualLen) {\n            throw new IllegalArgumentException(\"Array length does not match expected length.\");\n        }\n    }\n    \n    // Your AccurateMathCalc class content or other required methods should be here\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\npublic class AccurateMathCalcTest {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n\n    @BeforeEach\n    public void setupStreams() {\n        System.setOut(new PrintStream(outContent));\n    }\n\n    @AfterEach\n    public void restoreStreams() {\n        System.setOut(System.out);\n    }\n\n    static final String TABLE_START_DECL = \"TABLE_START\";\n    static final String TABLE_END_DECL = \"TABLE_END\";\n\n    static void printarray(PrintStream out, String name, int expectedLen, double[][] array2d) {\n        out.println(name);\n        checkLen(expectedLen, array2d.length);\n        out.println(TABLE_START_DECL + \" \");\n        int i = 0;\n        for (double[] array : array2d) {\n            out.print(\"        {\");\n            for (double d : array) {\n                out.printf(\"%-25.25s\", format(d));\n            }\n            out.println(\"}, // \" + i++);\n        }\n        out.println(TABLE_END_DECL);\n    }\n\n    private static String format(double d) {\n        return String.format(\"%f\", d);\n    }\n\n    private static void checkLen(int expected, int actual) {\n        if (expected != actual) {\n            throw new IllegalArgumentException(\"Length mismatch: Expected \" + expected + \", got \" + actual);\n        }\n    }\n\n    @Test\n    public void printarrayTest() {\n        double[][] testData = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0}\n        };\n\n        // Expected print output\n        String expectedOutput = \"TestArray\\n\" + \n                                TABLE_START_DECL + \" \\n\" +\n                                \"        {1.000000                    ,2.000000                    ,3.000000                    }, // 0\\n\" +\n                                \"        {4.000000                    ,5.000000                    ,6.000000                    }, // 1\\n\" +\n                                TABLE_END_DECL + \"\\n\";\n        \n        // Use the custom ByteArrayOutputStream to capture print output\n        printarray(new PrintStream(outContent), \"TestArray\", 2, testData);\n\n        // Check if the expected output String matches the actual output from printarray\n        assertEquals(expectedOutput, outContent.toString());\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n\n    @BeforeEach\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n    }\n\n    @AfterEach\n    public void restoreStreams() {\n        System.setOut(originalOut);\n    }\n\n    @Test\n    public void printarrayTest() {\n        String expectedOutput = \"ArrayName\\n\" +\n                                \"TABLE_START_DECL \\n\" +\n                                \"        {0.0                     , }, // 0\\n\" +\n                                \"        {1.0                     , 2.0                     , }, // 1\\n\" +\n                                \"TABLE_END_DECL\\n\";\n        double[][] testArray = {{0.0}, {1.0, 2.0}};\n        AccurateMathCalc.printarray(System.out, \"ArrayName\", testArray.length, testArray);\n        assertEquals(expectedOutput, outContent.toString());\n    }\n    \n    // Helper method to mimic the 'TABLE_START_DECL' and 'TABLE_END_DECL' constants\n    private static final String TABLE_START_DECL = \"TABLE_START_DECL\";\n    private static final String TABLE_END_DECL = \"TABLE_END_DECL\";\n\n    // Helper method to mimic the 'checkLen' method behavior\n    private static void checkLen(int expectedLen, int actualLen) {\n        if (expectedLen != actualLen) {\n            throw new IllegalArgumentException(\"Array length mismatch\");\n        }\n    }\n\n    // Helper method to mimic the 'format' method behavior\n    private static String format(double d) {\n        return String.valueOf(d);\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n\n    @BeforeEach\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n    }\n\n    @AfterEach\n    public void restoreStreams() {\n        System.setOut(originalOut);\n    }\n\n    @Test\n    public void printarrayTest() {\n        String expectedName = \"Array Name\";\n        int expectedLen = 2;\n        double[][] array2d = {{3.14159, 2.71828}, {1.41421, 1.61803}};\n        String expectedOutput = expectedName + \"\\n\" +\n                                AccurateMathCalc.TABLE_START_DECL + \" \\n\" +\n                                \"        {3.14                      ,2.72                      }, // 0\\n\" +\n                                \"        {1.41                      ,1.62                      }, // 1\\n\" +\n                                AccurateMathCalc.TABLE_END_DECL + \"\\n\";\n\n        // Call the method to test\n        AccurateMathCalc.printarray(System.out, expectedName, expectedLen, array2d);\n\n        // Assert the output\n        assertEquals(expectedOutput, outContent.toString());\n    }\n    \n    // Assuming there are corresponding static members for TABLE_START_DECL and TABLE_END_DECL\n    // as well as the format and checkLen methods involved in the printarray implementation.\n    \n    // Helper method for formatting doubles\n    private static String format(double d) {\n        // Assuming this returns a formatted string for the double value\n        // Replace with actual formatting logic if needed\n        return String.format(\"%.2f\", d);\n    }\n    \n    private static void checkLen(int expectedLen, int actualLen) {\n        if (expectedLen != actualLen) {\n            throw new IllegalArgumentException(\"Length mismatch: expected \" + expectedLen + \", got \" + actualLen);\n        }\n    }\n    \n    private static final String TABLE_START_DECL = \"Table Start\";\n    private static final String TABLE_END_DECL = \"Table End\";\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n\n    private static final String TABLE_START_DECL = \"Table Start\"; // Replace with actual table start declaration\n    private static final String TABLE_END_DECL = \"Table End\"; // Replace with actual table end declaration\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n\n    @BeforeEach\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n    }\n\n    @AfterEach\n    public void restoreStreams() {\n        System.setOut(originalOut);\n    }\n\n    @Test\n    public void printarrayTest() {\n        String name = \"Test Array\";\n        int expectedLen = 2;\n        double[][] array2d = {{1.0, 2.0}, {3.0, 4.0}};\n        \n        AccurateMathCalc.printarray(System.out, name, expectedLen, array2d);\n        \n        String expectedOutput = String.join(\n            System.lineSeparator(),\n            name,\n            TABLE_START_DECL + \" \",\n            \"        {1.0                     , 2.0                     }, // 0\",\n            \"        {3.0                     , 4.0                     }, // 1\",\n            TABLE_END_DECL + System.lineSeparator()\n        );\n        assertEquals(expectedOutput, outContent.toString());\n    }\n\n    // Auxiliary method (assuming it's part of AccurateMathCalc)\n    private static String format(double d) {\n        return String.format(\"%f\", d);\n    }\n\n    // This is how the checkLen method might look (assuming it's part of AccurateMathCalc); this method might throw an exception if the check fails\n    private static void checkLen(int expected, int actual) {\n        if (expected != actual) {\n            throw new IllegalArgumentException(\"Array length does not match the expected length.\");\n        }\n    }\n    \n    // Stand-in for printarray method if it's part of another class (e.g., AccurateMathCalc)\n    static void printarray(PrintStream out, String name, int expectedLen, double[][] array2d) {\n        // Implementation of the method, the same as provided in the original question\n    }\n}"
    ]
}