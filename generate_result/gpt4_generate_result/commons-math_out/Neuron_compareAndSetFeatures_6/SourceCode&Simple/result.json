{
    "project_name": "commons-math",
    "file_name": "Neuron.java",
    "relative_path": "commons-math/commons-math-neuralnet/src/main/java/org/apache/commons/math4/neuralnet/Neuron.java",
    "execute_path": "commons-math/commons-math-neuralnet",
    "package": "org.apache.commons.math4.neuralnet",
    "docstring": "/**\n     * Tries to atomically update the neuron's features.\n     * Update will be performed only if the expected values match the\n     * current values.<br>\n     * In effect, when concurrent threads call this method, the state\n     * could be modified by one, so that it does not correspond to the\n     * the state assumed by another.\n     * Typically, a caller {@link #getFeatures() retrieves the current state},\n     * and uses it to compute the new state.\n     * During this computation, another thread might have done the same\n     * thing, and updated the state: If the current thread were to proceed\n     * with its own update, it would overwrite the new state (which might\n     * already have been used by yet other threads).\n     * To prevent this, the method does not perform the update when a\n     * concurrent modification has been detected, and returns {@code false}.\n     * When this happens, the caller should fetch the new current state,\n     * redo its computation, and call this method again.\n     *\n     * @param expect Current values of the features, as assumed by the caller.\n     * Update will never succeed if the contents of this array does not match\n     * the values returned by {@link #getFeatures()}.\n     * @param update Features's new values.\n     * @return {@code true} if the update was successful, {@code false}\n     * otherwise.\n     * @throws IllegalArgumentException if the length of {@code update} is\n     * not the same as specified in the {@link #Neuron(long,double[])\n     * constructor}.\n     */",
    "source_code": "\npublic boolean compareAndSetFeatures(double[] expect,\n                                     double[] update) {\n    if (update.length != size) {\n        throw new NeuralNetException(NeuralNetException.SIZE_MISMATCH,\n                                     update.length, size);\n    }\n\n    // Get the internal reference. Note that this must not be a copy;\n    // otherwise the \"compareAndSet\" below will always fail.\n    final double[] current = features.get();\n    if (!containSameValues(current, expect)) {\n        // Some other thread already modified the state.\n        return false;\n    }\n\n    // Increment attempt counter.\n    numberOfAttemptedUpdates.incrementAndGet();\n\n    if (features.compareAndSet(current, update.clone())) {\n        // The current thread could atomically update the state (attempt succeeded).\n        numberOfSuccessfulUpdates.incrementAndGet();\n        return true;\n    } else {\n        // Some other thread came first (attempt failed).\n        return false;\n    }\n}\n",
    "class_name": "Neuron",
    "method_name": "compareAndSetFeatures",
    "arguments": [
        "double[] expect",
        "double[] update"
    ],
    "generate_test": [
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class NeuronTest {\n\n    private Neuron neuron;\n    private double[] initialFeatures;\n    private long identifier;\n    private int size;\n\n    @BeforeEach\n    public void setUp() {\n        identifier = 1L;\n        size = 3;\n        initialFeatures = new double[]{1.0, 2.0, 3.0};\n        neuron = new Neuron(identifier, initialFeatures);\n    }\n\n    @Test\n    public void compareAndSetFeaturesTest() {\n        // Mocked expect and update arrays\n        double[] expect = {1.0, 2.0, 3.0};\n        double[] update = {4.0, 5.0, 6.0};\n\n        // Check initial state\n        assertArrayEquals(initialFeatures, neuron.getFeatures(), \"Initial features must match provided array.\");\n\n        // Case 1: Successful compareAndSetFeatures operation\n        assertTrue(neuron.compareAndSetFeatures(expect, update), \"compareAndSetFeatures should return true when expected features match current features.\");\n        assertArrayEquals(update, neuron.getFeatures(), \"Features should be updated after successful compareAndSetFeatures operation.\");\n\n        // Case 2: Unsuccessful compareAndSetFeatures operation due to mismatched expect array\n        double[] mismatchedExpect = {1.0, 2.0, 9.0};\n        assertFalse(neuron.compareAndSetFeatures(mismatchedExpect, update), \"compareAndSetFeatures should return false when expected features do not match current features.\");\n\n        // Case 3: Ensure method throws the expected exception when update length does not match neuron size\n        double[] wrongSizeUpdate = {1.0, 2.0};\n        NeuralNetException thrown = assertThrows(NeuralNetException.class, () -> {\n            neuron.compareAndSetFeatures(expect, wrongSizeUpdate);\n        }, \"NeuralNetException should be thrown when the update array size does not match the neuron size.\");\n\n        assertEquals(NeuralNetException.SIZE_MISMATCH, thrown.getMessage(), \"NeuralNetException should have a message indicating size mismatch.\");\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.concurrent.atomic.AtomicLong;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n\n    private Neuron neuron;\n    private double[] initialFeatures;\n    private final long identifier = 1;\n    private final int featureSize = 3;\n\n    @BeforeEach\n    public void setUp() {\n        initialFeatures = new double[]{0.1, 0.2, 0.3};\n        neuron = new Neuron(identifier, initialFeatures);\n    }\n\n    @Test\n    public void compareAndSetFeaturesTest() {\n        double[] expect = {0.1, 0.2, 0.3};\n        double[] update = {0.4, 0.5, 0.6};\n        double[] wrongSizeUpdate = {0.4, 0.5};\n        double[] wrongValues = {0.7, 0.8, 0.9};\n\n        // Test size mismatch exception\n        NeuralNetException exception = assertThrows(NeuralNetException.class, () -> {\n            neuron.compareAndSetFeatures(expect, wrongSizeUpdate);\n        });\n        assertEquals(NeuralNetException.SIZE_MISMATCH, exception.getErrorCode());\n        assertEquals(wrongSizeUpdate.length, exception.getWrongSize());\n\n        // Test successful compare and set\n        assertTrue(neuron.compareAndSetFeatures(expect, update));\n        assertArrayEquals(update, neuron.getFeatures());\n\n        // Test failed compare and set because of different expected values\n        assertFalse(neuron.compareAndSetFeatures(wrongValues, update));\n\n        // Test successful number of attempts increment\n        assertEquals(2, neuron.getNumberOfAttemptedUpdates());\n        \n        // Test successful number of successful updates increment\n        assertEquals(1, neuron.getNumberOfSuccessfulUpdates());\n\n        // Since `features` is an AtomicReference, if we'd like to test the thread-safety of\n        // compareAndSetFeatures method, we would need to create a multi-threaded test\n        // that asserts the atomicity property. This is not done here as it is beyond the scope\n        // of this unit test example.\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class NeuronTest {\n    \n    @Test\n    public void compareAndSetFeaturesTest() {\n        // Initialize values for the test\n        final int size = 3;\n        double[] initialFeatures = new double[]{1.0, 2.0, 3.0};\n        long identifier = 1L;\n\n        // Create a Neuron instance\n        Neuron neuron = new Neuron(identifier, initialFeatures);\n\n        // Set the expected and update values for the test\n        double[] expect = new double[]{1.0, 2.0, 3.0};\n        double[] update = new double[]{4.0, 5.0, 6.0};\n\n        // Set a wrong sized update array\n        double[] wrongSizeUpdate = new double[]{7.0, 8.0};\n\n        // Test for size mismatch exception\n        Exception exception = assertThrows(NeuralNetException.class, () -> {\n            neuron.compareAndSetFeatures(expect, wrongSizeUpdate);\n        });\n        String expectedMessage = \"Size mismatch\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage));\n\n        // Test successful compareAndSetFeatures\n        assertTrue(neuron.compareAndSetFeatures(expect, update));\n        assertArrayEquals(update, neuron.getFeatures());\n        assertEquals(1, neuron.getNumberOfAttemptedUpdates());\n        assertEquals(1, neuron.getNumberOfSuccessfulUpdates());\n\n        // Test failed compareAndSetFeatures due to different expected values\n        double[] newExpect = new double[]{1.0, 2.0, 4.0};\n        assertFalse(neuron.compareAndSetFeatures(newExpect, update));\n        // The features state should not have been changed\n        assertArrayEquals(update, neuron.getFeatures());\n        assertEquals(2, neuron.getNumberOfAttemptedUpdates());\n        // No new successful update, it should remain 1\n        assertEquals(1, neuron.getNumberOfSuccessfulUpdates());\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.apache.commons.math4.neuralnet.internal.NeuralNetException;\nimport org.junit.jupiter.api.*;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.concurrent.atomic.AtomicLong;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    private Neuron neuron;\n    private double[] initialFeatures = {1.0, 2.0, 3.0};\n    private long identifier = 1234L;\n\n    @BeforeEach\n    public void setUp() {\n        neuron = new Neuron(identifier, initialFeatures);\n    }\n\n    @Test\n    public void compareAndSetFeatures_SizeMismatch_ThrowsException() {\n        double[] expect = {1.0, 2.0, 3.0};\n        double[] update = {4.0, 5.0}; // Update array with size different from 'size'.\n\n        Exception exception = assertThrows(NeuralNetException.class, () -> {\n            neuron.compareAndSetFeatures(expect, update);\n        });\n\n        String expectedMessage = \"Size mismatch: expected 3 but got 2\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n\n    @Test\n    public void compareAndSetFeatures_FeaturesDoNotMatch_ReturnsFalse() {\n        double[] expect = {1.0, 2.0, 3.1}; // A different value in 'expect'.\n        double[] update = {4.0, 5.0, 6.0};\n\n        assertFalse(neuron.compareAndSetFeatures(expect, update));\n    }\n\n    @Test\n    public void compareAndSetFeatures_SuccessfulAtomicUpdate_ReturnsTrue() {\n        double[] expect = {1.0, 2.0, 3.0}; // The same as initial features.\n        double[] update = {4.0, 5.0, 6.0};\n\n        assertTrue(neuron.compareAndSetFeatures(expect, update));\n        assertArrayEquals(update, neuron.getFeatures()); // Verify update is successful.\n    }\n\n    @Test\n    public void compareAndSetFeatures_FailedDueToConcurrentModification_ReturnsFalse() {\n        double[] expect = {1.0, 2.0, 3.0}; // The same as initial features.\n        double[] update = {4.0, 5.0, 6.0};\n\n        // Simulate concurrent modification by updating the features before CAS operation.\n        neuron.compareAndSetFeatures(expect, new double[] {7.0, 8.0, 9.0});\n\n        // Now perform CAS with the original expected value, which should fail.\n        assertFalse(neuron.compareAndSetFeatures(expect, update));\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class NeuronTest {\n    private Neuron neuron;\n    private final long identifier = 1L;\n    private final int size = 3;\n    private final double[] initialFeatures = new double[]{0.1, 0.2, 0.3};\n\n    @BeforeEach\n    public void setUp() {\n        neuron = new Neuron(identifier, initialFeatures);\n    }\n\n    @Test\n    public void compareAndSetFeaturesTest_SuccessfulUpdate() {\n        double[] expectedFeatures = initialFeatures.clone();\n        double[] newFeatures = new double[]{0.4, 0.5, 0.6};\n        assertTrue(neuron.compareAndSetFeatures(expectedFeatures, newFeatures));\n        assertArrayEquals(newFeatures, neuron.getFeatures());\n        assertEquals(1, neuron.getNumberOfAttemptedUpdates());\n        assertEquals(1, neuron.getNumberOfSuccessfulUpdates());\n    }\n\n    @Test\n    public void compareAndSetFeaturesTest_FailedUpdateDueToSizeMismatch() {\n        double[] expectedFeatures = initialFeatures.clone();\n        double[] newFeatures = new double[]{0.4, 0.5};\n        Exception exception = assertThrows(NeuralNetException.class, () ->\n                neuron.compareAndSetFeatures(expectedFeatures, newFeatures)\n        );\n        String expectedMessage = \"Size mismatch: \" + newFeatures.length + \" instead of \" + size;\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n\n    @Test\n    public void compareAndSetFeaturesTest_FailedUpdateDueToDifferentFeatures() {\n        double[] expectedFeatures = new double[]{0.9, 0.8, 0.7}; // intentionally wrong values\n        double[] newFeatures = new double[]{0.4, 0.5, 0.6};\n        assertFalse(neuron.compareAndSetFeatures(expectedFeatures, newFeatures));\n        assertArrayEquals(initialFeatures, neuron.getFeatures());\n        assertEquals(1, neuron.getNumberOfAttemptedUpdates());\n        assertEquals(0, neuron.getNumberOfSuccessfulUpdates());\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.concurrent.atomic.AtomicLong;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    \n    private Neuron neuron;\n    private AtomicReference<double[]> features;\n    private AtomicLong numberOfAttemptedUpdates;\n    private AtomicLong numberOfSuccessfulUpdates;\n    private final long identifier = 1L;\n    private final int size = 3;\n\n    @BeforeEach\n    public void setUp() {\n        features = new AtomicReference<>(new double[]{0.1, 0.2, 0.3});\n        numberOfAttemptedUpdates = new AtomicLong(0);\n        numberOfSuccessfulUpdates = new AtomicLong(0);\n        neuron = new Neuron(identifier, features.get());\n    }\n    \n    @Test\n    public void compareAndSetFeaturesTest() {\n        double[] expect = {0.1, 0.2, 0.3};\n        double[] update = {0.4, 0.5, 0.6};\n\n        // Ensure initial state is as expected\n        assertArrayEquals(expect, neuron.getFeatures(), \"Initial features should match expected values.\");\n\n        // Test for successful compareAndSet\n        assertTrue(neuron.compareAndSetFeatures(expect, update), \"compareAndSet should return true on matching expect.\");\n\n        // Verify the features were updated\n        assertArrayEquals(update, neuron.getFeatures(), \"Features should have been updated.\");\n\n        // Test for returned number of updates\n        assertEquals(1, neuron.getNumberOfAttemptedUpdates(), \"Number of attempted updates should increment.\");\n        assertEquals(1, neuron.getNumberOfSuccessfulUpdates(), \"Number of successful updates should increment.\");\n\n        // Test for size mismatch exception\n        double[] wrongSizeUpdate = {0.7, 0.8}; // Wrong size array\n        Throwable exception = assertThrows(NeuralNetException.class, () -> {\n            neuron.compareAndSetFeatures(expect, wrongSizeUpdate);\n        }, \"Size mismatch should throw NeuralNetException.\");\n\n        assertNotNull(exception.getMessage(), \"NeuralNetException should have a message.\");\n\n        // Test for unsuccessful compareAndSet on unexpected current state\n        double[] newExpect = {0.1, 0.2, 0.3}; // Restoring expected to the original values\n        assertFalse(neuron.compareAndSetFeatures(newExpect, update), \"compareAndSet should return false on non-matching expect.\");\n\n        // No updates should have occurred in unsuccessful compareAndSet\n        assertEquals(2, neuron.getNumberOfAttemptedUpdates(), \"Unsuccessful update should still increment attempted updates.\");\n        assertEquals(1, neuron.getNumberOfSuccessfulUpdates(), \"Unsuccessful update should not increment successful updates.\");\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.concurrent.atomic.AtomicLong;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    private Neuron neuron;\n    private double[] initialFeatures;\n    \n    @BeforeEach\n    public void setUp() {\n        // Assuming these are initialized properly in the Neuron constructor\n        long identifier = 12345;\n        int size = 5;\n        initialFeatures = new double[]{0.1, 0.2, 0.3, 0.4, 0.5};\n\n        neuron = new Neuron(identifier, initialFeatures);\n    }\n    \n    @Test\n    public void compareAndSetFeaturesTest() {\n        // References to compare with the Neuron features\n        double[] expectedFeatures = new double[]{0.1, 0.2, 0.3, 0.4, 0.5};\n        double[] newFeatures = new double[]{0.5, 0.4, 0.3, 0.2, 0.1};\n\n        // Success scenario: updating with the correct expected value\n        assertTrue(neuron.compareAndSetFeatures(expectedFeatures, newFeatures));\n\n        // Verify that the features have been updated and the number of attempts incremented\n        assertArrayEquals(newFeatures, neuron.getFeatures());\n        assertEquals(1, neuron.getNumberOfAttemptedUpdates());\n        assertEquals(1, neuron.getNumberOfSuccessfulUpdates());\n\n        // Failure scenario: updating with the incorrect expected value (should return false)\n        assertFalse(neuron.compareAndSetFeatures(expectedFeatures, newFeatures));\n\n        // Verify that the features have not been updated and the number of attempts incremented\n        assertArrayEquals(newFeatures, neuron.getFeatures()); // Features remain unchanged\n        assertEquals(2, neuron.getNumberOfAttemptedUpdates()); // Attempt counter incremented\n        assertEquals(1, neuron.getNumberOfSuccessfulUpdates()); // Success counter unchanged\n\n        // Exception scenario: attempting to update with an array of a different size\n        double[] incorrectSizeFeatures = new double[]{0.1, 0.2};\n\n        // Since no exception handling is explicit in the above JAVA Source Code, we expect\n        // a NeuralNetException to be thrown due to size mismatch.\n        assertThrows(NeuralNetException.class, () -> {\n            neuron.compareAndSetFeatures(newFeatures, incorrectSizeFeatures);\n        });\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class NeuronTest {\n\n    @Test\n    public void compareAndSetFeaturesTest() {\n        // Assuming default constructor and identifiers, size are properly initialized.\n        long identifier = 1L;\n        int size = 3;\n        double[] initialFeatures = new double[] {1.0, 2.0, 3.0};\n\n        Neuron neuron = new Neuron(identifier, initialFeatures);\n\n        // Test case where update fails due to size mismatch\n        double[] updateWithSizeMismatch = new double[] {4.0, 5.0, 6.0, 7.0};\n        Exception exception = assertThrows(NeuralNetException.class, () -> {\n            neuron.compareAndSetFeatures(initialFeatures, updateWithSizeMismatch);\n        });\n        assertTrue(exception.getMessage().contains(\"SIZE_MISMATCH\"));\n\n        // Test case where update fails because expected values do not match current features\n        double[] expectMismatch = new double[] {1.1, 2.1, 3.1};\n        assertFalse(neuron.compareAndSetFeatures(expectMismatch, initialFeatures));\n\n        // Test case where update is successful\n        double[] updateSuccess = new double[] {4.0, 5.0, 6.0};\n        assertTrue(neuron.compareAndSetFeatures(initialFeatures, updateSuccess));\n        assertArrayEquals(updateSuccess, neuron.getFeatures());\n\n        // Check the number of attempted and successful updates\n        assertEquals(1L, neuron.getNumberOfAttemptedUpdates());\n        assertEquals(1L, neuron.getNumberOfSuccessfulUpdates());\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        // Assuming there are constructors and methods that properly handle the initialization of a neuron.\n        long identifier = 1;\n        double[] initialFeatures = {1.0, 2.0, 3.0};\n        Neuron neuron = new Neuron(identifier, initialFeatures);\n\n        double[] expectFeatures = {1.0, 2.0, 3.0};\n        double[] updateFeatures = {4.0, 5.0, 6.0};\n\n        // Test the scenario where expected features match the current features of the neuron.\n        assertTrue(neuron.compareAndSetFeatures(expectFeatures, updateFeatures));\n        assertArrayEquals(updateFeatures, neuron.getFeatures());\n\n        // Test the scenario where expected features do not match the current features of the neuron.\n        double[] newExpectFeatures = {7.0, 8.0, 9.0};\n        assertFalse(neuron.compareAndSetFeatures(newExpectFeatures, updateFeatures));\n\n        // Expect NeuralNetException when size mismatches\n        double[] mismatchedUpdateFeatures = {10.0, 11.0}; // size is smaller than neuron size\n        Exception exception = assertThrows(NeuralNetException.class, () -> {\n            neuron.compareAndSetFeatures(expectFeatures, mismatchedUpdateFeatures);\n        });\n        String expectedMessage = NeuralNetException.SIZE_MISMATCH;\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage));\n\n        // Check counters\u2019 correctness\n        assertEquals(1, neuron.getNumberOfSuccessfulUpdates());\n        assertEquals(2, neuron.getNumberOfAttemptedUpdates());\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class NeuronTest {\n\n    @Test\n    public void compareAndSetFeaturesTest() {\n        // given\n        long identifier = 123L;\n        double[] initialFeatures = new double[] {1.0, 2.0, 3.0};\n        int size = initialFeatures.length;\n        Neuron neuron = new Neuron(identifier, initialFeatures);\n\n        // when\n        double[] expect = {1.0, 2.0, 3.0};\n        double[] update = {4.0, 5.0, 6.0};\n        \n        // then\n        assertTrue(neuron.compareAndSetFeatures(expect, update), \"Should succeed as the expected values match the current features.\");\n\n        // Validate the update\n        assertArrayEquals(update, neuron.getFeatures(), \"The features should have been updated.\");\n        assertEquals(1, neuron.getNumberOfAttemptedUpdates(), \"The number of attempted updates should be incremented.\");\n        assertEquals(1, neuron.getNumberOfSuccessfulUpdates(), \"The number of successful updates should be incremented.\");\n        \n        // Expect failure due to expected values not matching the current features\n        double[] newExpect = {1.0, 2.0, 3.0};\n        double[] newUpdate = {7.0, 8.0, 9.0};\n\n        assertFalse(neuron.compareAndSetFeatures(newExpect, newUpdate), \"Should fail as the expected values do not match current features anymore.\");\n        \n        // Validate no update occurred\n        assertArrayEquals(update, neuron.getFeatures(), \"The features should not have been updated.\");\n        assertEquals(2, neuron.getNumberOfAttemptedUpdates(), \"The number of attempted updates should be incremented again.\");\n        assertEquals(1, neuron.getNumberOfSuccessfulUpdates(), \"The number of successful updates should not increment after a failed attempt.\");\n\n        // Check that SIZE_MISMATCH exception is thrown\n        double[] sizeMismatchUpdate = {10.0, 11.0};\n        \n        NeuralNetException thrown = assertThrows(\n            NeuralNetException.class,\n            () -> neuron.compareAndSetFeatures(expect, sizeMismatchUpdate),\n            \"Expected compareAndSetFeatures to throw, but it didn't\"\n        );\n\n        assertTrue(thrown.getMessage().contains(\"SIZE_MISMATCH\"), \"The exception message should contain 'SIZE_MISMATCH'\");\n    }\n}"
    ]
}