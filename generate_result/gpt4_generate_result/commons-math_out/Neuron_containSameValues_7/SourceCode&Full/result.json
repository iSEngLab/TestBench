{
    "project_name": "commons-math",
    "file_name": "Neuron.java",
    "relative_path": "commons-math/commons-math-neuralnet/src/main/java/org/apache/commons/math4/neuralnet/Neuron.java",
    "execute_path": "commons-math/commons-math-neuralnet",
    "package": "org.apache.commons.math4.neuralnet",
    "docstring": "/**\n     * Checks whether the contents of both arrays is the same.\n     *\n     * @param current Current values.\n     * @param expect Expected values.\n     * @throws IllegalArgumentException if the length of {@code expect}\n     * is not the same as specified in the {@link #Neuron(long,double[])\n     * constructor}.\n     * @return {@code true} if the arrays contain the same values.\n     */",
    "source_code": "\nprivate boolean containSameValues(double[] current,\n                                  double[] expect) {\n    if (expect.length != size) {\n        throw new NeuralNetException(NeuralNetException.SIZE_MISMATCH,\n                                     expect.length, size);\n    }\n\n    for (int i = 0; i < size; i++) {\n        if (!Precision.equals(current[i], expect[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
    "class_name": "Neuron",
    "method_name": "containSameValues",
    "arguments": [
        "double[] current",
        "double[] expect"
    ],
    "generate_test": [
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.apache.commons.math4.neuralnet.internal.NeuralNetException;\n\npublic class NeuronTest {\n\n    private static final double EPSILON = 1e-6;\n\n    @Test\n    public void containSameValuesTest() {\n        // Create a neuron with 3 features\n        Neuron neuron = new Neuron(1L, new double[]{0.1, 0.2, 0.3});\n\n        // Test for equal arrays\n        double[] current = new double[]{0.1, 0.2, 0.3};\n        double[] expectEqual = new double[]{0.1, 0.2, 0.3};\n        assertTrue(neuron.compareAndSetFeatures(current, expectEqual), \"Arrays with the same values should return true\");\n\n        // Test for unequal arrays\n        double[] expectUnequal = new double[]{0.1, 0.2, 0.4};\n        assertFalse(neuron.compareAndSetFeatures(current, expectUnequal), \"Arrays with different values should return false\");\n\n        // Test for arrays different in size\n        double[] expectDifferentSize = new double[]{0.1, 0.2};\n        Exception exception = assertThrows(NeuralNetException.class, () -> {\n            neuron.compareAndSetFeatures(current, expectDifferentSize);\n        });\n        String expectedMessage = \"Size mismatch\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage), \"Arrays of different sizes should throw NeuralNetException with 'Size mismatch' message\");\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.apache.commons.math4.neuralnet.internal.NeuralNetException;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Mockito.when;\n\npublic class NeuronTest {\n\n    @Test\n    public void containSameValuesTest() {\n        // Given\n        double[] current = { 1.0, 2.0, 3.0 };\n        double[] expect = { 1.0, 2.0, 3.0 };\n        \n        // Mock the Neuron object with a given size\n        Neuron mockedNeuron = Mockito.mock(Neuron.class);\n        when(mockedNeuron.getSize()).thenReturn(current.length); // assuming getSize() is accessible within the scope\n        when(mockedNeuron.containSameValues(any(double[].class), any(double[].class))).thenCallRealMethod();\n\n        // When and Then: No Exception and correct boolean value\n        assertDoesNotThrow(() -> mockedNeuron.containSameValues(current, expect));\n        assertTrue(mockedNeuron.containSameValues(current, expect));\n        \n        // Given: case where values are not equal\n        double[] expectNotSame = { 1.0, 2.0, 4.0 };\n        \n        // When and Then: correct boolean value\n        assertFalse(mockedNeuron.containSameValues(current, expectNotSame));\n        \n        // Given: case where sizes are not same, expecting exception\n        double[] wrongSizeExpect = { 1.0, 2.0 };\n\n        // When and Then: throw NeuralNetException due to size mismatch\n        NeuralNetException thrown = assertThrows(NeuralNetException.class, () -> {\n            mockedNeuron.containSameValues(current, wrongSizeExpect);\n        });\n        assertEquals(NeuralNetException.SIZE_MISMATCH, thrown.getErrorCode());\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.apache.commons.math4.neuralnet.internal.NeuralNetException;\nimport org.apache.commons.numbers.core.Precision;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    \n    @Test\n    public void containSameValuesTest() {\n        // Assuming we can update Neuron to provide a testing hook for 'containSameValues'. If not, we need to use reflection.\n        Neuron neuron = new Neuron(1L, new double[]{0.1, 0.2, 0.3});\n        \n        // Successful match case\n        assertTrue(neuron.compareAndSetFeatures(new double[]{0.1, 0.2, 0.3}, new double[]{0.1, 0.2, 0.3}));\n        \n        // Unsuccessful match because of a value difference\n        assertFalse(neuron.compareAndSetFeatures(new double[]{0.1, 0.2, 0.4}, new double[]{0.1, 0.2, 0.3}));\n        \n        // Unsuccessful match because of size mismatch, expected to throw an exception\n        Exception exception = assertThrows(NeuralNetException.class, () -> {\n            neuron.compareAndSetFeatures(new double[]{0.1, 0.2}, new double[]{0.1, 0.2, 0.3});\n        });\n\n        String expectedMessage = \"Size mismatch\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.apache.commons.numbers.core.Precision;\nimport org.apache.commons.math4.neuralnet.internal.NeuralNetException;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    \n    // A helper method to create a Neuron with arbitrary data for testing purpose\n    private Neuron createTestNeuron(int size) {\n        double[] features = new double[size];\n        // Populate features with arbitrary values\n        for (int i = 0; i < size; i++) {\n            features[i] = i * 0.5;\n        }\n        return new Neuron(1L, features);\n    }\n    \n    @Test\n    public void containSameValuesTest() {\n        Neuron neuron = createTestNeuron(5);\n        \n        // Case where both arrays contain the same values\n        double[] current = {0.0, 0.5, 1.0, 1.5, 2.0};\n        double[] expect = {0.0, 0.5, 1.0, 1.5, 2.0};\n        assertTrue(neuron.containSameValues(current, expect), \"Arrays with the same values should result in true\");\n        \n        // Case where the arrays contain different values\n        double[] differentExpect = {0.0, 0.5, 1.0, 1.5, 3.0};\n        assertFalse(neuron.containSameValues(current, differentExpect), \"Arrays with different values should result in false\");\n        \n        // Case where the expected array has different size (should throw an exception)\n        double[] sizeMismatchExpect = {0.0, 0.5, 1.0};\n        Exception exception = assertThrows(NeuralNetException.class, () -> {\n            neuron.containSameValues(current, sizeMismatchExpect);\n        }, \"A size mismatch should throw a NeuralNetException\");\n        \n        // Optionally check the specific message or type of NeuralNetException if required\n        String expectedMessage = \"Size mismatch\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage), \"Exception message should indicate size mismatch\");\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.apache.commons.math4.neuralnet.internal.NeuralNetException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void containSameValuesTest() {\n        final int size = 3;\n        Neuron neuron = new Neuron(1L, new double[] {1.0, 2.0, 3.0});\n        \n        // Test equality case\n        assertTrue(neuron.containSameValues(new double[]{1.0, 2.0, 3.0}, new double[]{1.0, 2.0, 3.0}),\n                \"Arrays with the same values should return true\");\n        \n        // Test inequality case\n        assertFalse(neuron.containSameValues(new double[]{1.0, 2.0, 3.0}, new double[]{1.0, 2.0, 4.0}),\n                \"Arrays with different values should return false\");\n        \n        // Test size mismatch exception\n        Exception sizeMismatchException = assertThrows(NeuralNetException.class,\n                () -> neuron.containSameValues(new double[]{1.0, 2.0, 3.0}, new double[]{1.0, 2.0}),\n                \"Size mismatch should throw NeuralNetException\");\n        assertTrue(sizeMismatchException.getMessage().contains(\"SIZE_MISMATCH\"),\n                \"Exception message must contain 'SIZE_MISMATCH'\");\n        \n        // Test precision equality with a small difference allowed by Precision.equals()\n        assertTrue(neuron.containSameValues(new double[]{1.0, 2.0, 3.0}, new double[]{1.0, 2.0, 3.0 + Precision.EPSILON}),\n                \"Arrays with values within precision range should return true\");\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.apache.commons.math4.neuralnet.internal.NeuralNetException;\nimport org.apache.commons.numbers.core.Precision;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n\n    @Test\n    public void containSameValuesTest() {\n        // create a neuron with an identifier and initial feature set\n        Neuron neuron = new Neuron(1L, new double[] {1.0, 2.0, 3.0});\n\n        double[] currentValues = neuron.getFeatures();\n        double[] sameValues = new double[] {1.0, 2.0, 3.0};\n        double[] differentValues = new double[] {1.0, 2.0, 4.0};\n\n        // test for arrays containing the same values\n        boolean result = neuron.compareAndSetFeatures(currentValues, sameValues);\n        assertTrue(result, \"Expected sameValues to be considered equal to currentValues.\");\n\n        // test for arrays containing different values\n        result = neuron.compareAndSetFeatures(currentValues, differentValues);\n        assertFalse(result, \"Expected differentValues to be considered not equal to currentValues.\");\n        \n        // test for arrays with mismatched size\n        double[] mismatchedSizeValues = new double[] {1.0, 2.0};\n        Exception exception = assertThrows(NeuralNetException.class, () -> {\n            neuron.compareAndSetFeatures(currentValues, mismatchedSizeValues);\n        });\n        String expectedMessage = \"Size mismatch: expected \" + neuron.getSize() + \" but got \" + mismatchedSizeValues.length;\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage), \"Expected an exception with 'Size mismatch' message.\");\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.apache.commons.numbers.core.Precision;\nimport org.apache.commons.math4.neuralnet.internal.NeuralNetException;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    private Neuron neuron;\n\n    // Setup a common neuron object for testing\n    @BeforeEach\n    public void setUp() {\n        double[] initialFeatures = new double[]{0.1, 0.2, 0.3};\n        long identifier = 1L;\n        neuron = new Neuron(identifier, initialFeatures);\n    }\n\n    @Test\n    public void containSameValuesTest() {\n        // Test with same values\n        double[] current = {0.1, 0.2, 0.3};\n        double[] expect = {0.1, 0.2, 0.3};\n        assertTrue(neuron.compareAndSetFeatures(expect, current));\n\n        // Test with different values\n        double[] differentExpect = {0.1, 0.5, 0.3};\n        assertFalse(neuron.compareAndSetFeatures(differentExpect, current));\n\n        // Test with precision differences within tolerance\n        double[] preciseExpect = {0.1 + 1e-10, 0.2 - 1e-10, 0.3};\n        assertTrue(neuron.compareAndSetFeatures(preciseExpect, current));\n\n        // Test for size mismatch - should throw NeuralNetException\n        double[] wrongSize = {0.1, 0.2};\n        Exception exception = assertThrows(NeuralNetException.class, () -> {\n            neuron.compareAndSetFeatures(wrongSize, current);\n        });\n        String expectedMessage = \"SIZE_MISMATCH\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.apache.commons.numbers.core.Precision;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n\n    @Test\n    public void containSameValuesTest() {\n        double[] initialFeatures = {1.0, 2.0, 3.0};\n        Neuron neuron = new Neuron(1L, initialFeatures);\n        \n        // Test that the method works when both arrays are identical\n        assertTrue(neuron.containSameValues(new double[]{1.0, 2.0, 3.0}, initialFeatures),\n                   \"Arrays should contain identical double values\");\n\n        // Test that the method returns false when arrays are different\n        assertFalse(neuron.containSameValues(new double[]{1.1, 2.0, 3.0}, initialFeatures),\n                    \"Arrays should not be considered identical with differing double values\");\n\n        // Test that the method throws an exception when array sizes differ\n        double[] differentSizeArray = {1.0, 2.0};\n        Exception exception = assertThrows(NeuralNetException.class, () -> {\n            neuron.containSameValues(differentSizeArray, initialFeatures);\n        });\n        assertTrue(exception.getMessage().contains(\"SIZE_MISMATCH\"),\n                   \"NeuralNetException should contain SIZE_MISMATCH error message\");\n\n        // Test that Precision.equals is used correctly by using similar but not exactly identical numbers\n        assertTrue(neuron.containSameValues(new double[]{1.0 + Precision.EPSILON, 2.0, 3.0}, initialFeatures),\n                   \"Arrays should contain double values considered equal within the bounds of Precision\");\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.apache.commons.math4.neuralnet.internal.NeuralNetException;\nimport org.apache.commons.numbers.core.Precision;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    \n    static final double EPSILON = 1e-6;\n    Neuron neuron;\n\n    @BeforeEach\n    public void setUp() {\n        // Create a neuron with an identifier and some features for test usage\n        neuron = new Neuron(1L, new double[] {1.0, 2.0, 3.0});\n    }\n\n    @Test\n    public void containSameValuesTest() {\n        double[] currentValues = {1.0, 2.0, 3.0};\n        double[] expectedValues = {1.0, 2.0, 3.0};\n\n        // Test for expected positive case\n        assertTrue(neuron.containSameValues(currentValues, expectedValues), \"Arrays with same values should return true\");\n\n        // Test for negative case with different values\n        double[] differentValues = {1.1, 2.1, 3.1};\n        assertFalse(neuron.containSameValues(currentValues, differentValues), \"Arrays with different values should return false\");\n\n        // Test near values within Precision EPSILON range to test for true\n        double[] nearValues = {1.0 + EPSILON/2, 2.0 - EPSILON/2, 3.0};\n        assertTrue(neuron.containSameValues(currentValues, nearValues), \"Arrays with values near EPSILON should return true\");\n\n        // Test for exception when the sizes mismatch\n        double[] sizeMismatchValues = {1.0, 2.0};\n        Exception sizeMismatchException = assertThrows(NeuralNetException.class, () -> {\n            neuron.containSameValues(currentValues, sizeMismatchValues);\n        }, \"Size mismatch should throw NeuralNetException\");\n        \n        assertTrue(sizeMismatchException.getMessage().contains(NeuralNetException.SIZE_MISMATCH), \"Exception message should show size mismatch error\");\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.apache.commons.math4.neuralnet.internal.NeuralNetException;\nimport org.apache.commons.numbers.core.Precision;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n\n    private static final double EPSILON = 1e-6; // Tolerance for comparing double values\n\n    // Helper method to invoke the private method 'containSameValues' via reflection.\n    private boolean invokeContainSameValues(Neuron neuron, double[] current, double[] expect) throws Exception {\n        java.lang.reflect.Method method = Neuron.class.getDeclaredMethod(\"containSameValues\", double[].class, double[].class);\n        method.setAccessible(true);\n        return (boolean) method.invoke(neuron, current, expect);\n    }\n\n    @Test\n    public void containSameValuesTest() {\n        // Create a neuron with initial features.\n        double[] initialFeatures = {0.1, 0.2, 0.3};\n        Neuron neuron = new Neuron(1, initialFeatures);\n        \n        // Test with same values.\n        double[] currentFeatures = {0.1, 0.2, 0.3};\n        double[] expectedFeatures = {0.1, 0.2, 0.3};\n        boolean result = false;\n        \n        try {\n            result = invokeContainSameValues(neuron, currentFeatures, expectedFeatures);\n        } catch (Exception e) {\n            fail(\"Reflection invocation failed\", e);\n        }\n        \n        assertTrue(result, \"containSameValues should return true when both arrays have the same values.\");\n\n        // Test with different values.\n        double[] wrongFeatures = {0.1, 0.25, 0.3};\n        \n        try {\n            result = invokeContainSameValues(neuron, currentFeatures, wrongFeatures);\n        } catch (Exception e) {\n            fail(\"Reflection invocation failed\", e);\n        }\n\n        assertFalse(result, \"containSameValues should return false when arrays have different values.\");\n        \n        // Test with different size values.\n        double[] differentSizeFeatures = {0.1, 0.2};\n        Exception exception = assertThrows(NeuralNetException.class, () -> {\n            invokeContainSameValues(neuron, currentFeatures, differentSizeFeatures);\n        });\n\n        String expectedMessage = \"Size mismatch: Attempt to compare arrays of different sizes.\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}"
    ]
}