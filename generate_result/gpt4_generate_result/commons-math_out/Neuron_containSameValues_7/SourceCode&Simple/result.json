{
    "project_name": "commons-math",
    "file_name": "Neuron.java",
    "relative_path": "commons-math/commons-math-neuralnet/src/main/java/org/apache/commons/math4/neuralnet/Neuron.java",
    "execute_path": "commons-math/commons-math-neuralnet",
    "package": "org.apache.commons.math4.neuralnet",
    "docstring": "/**\n     * Checks whether the contents of both arrays is the same.\n     *\n     * @param current Current values.\n     * @param expect Expected values.\n     * @throws IllegalArgumentException if the length of {@code expect}\n     * is not the same as specified in the {@link #Neuron(long,double[])\n     * constructor}.\n     * @return {@code true} if the arrays contain the same values.\n     */",
    "source_code": "\nprivate boolean containSameValues(double[] current,\n                                  double[] expect) {\n    if (expect.length != size) {\n        throw new NeuralNetException(NeuralNetException.SIZE_MISMATCH,\n                                     expect.length, size);\n    }\n\n    for (int i = 0; i < size; i++) {\n        if (!Precision.equals(current[i], expect[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
    "class_name": "Neuron",
    "method_name": "containSameValues",
    "arguments": [
        "double[] current",
        "double[] expect"
    ],
    "generate_test": [
        "package org.apache.commons.math4.neuralnet;\n\nimport org.apache.commons.math4.neuralnet.internal.NeuralNetException;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.apache.commons.numbers.core.Precision;\n\npublic class NeuronTest {\n\n    @Test\n    public void containSameValuesTest() {\n        // Instantiate a Neuron object with a specific size.\n        int size = 3;\n        double[] initialFeatures = new double[]{1.0, 2.0, 3.0};\n        Neuron neuron = new Neuron(1L, initialFeatures);\n\n        // Case where both arrays contain the same values.\n        double[] current = new double[]{1.0, 2.0, 3.0};\n        double[] expect = new double[]{1.0, 2.0, 3.0};\n        assertTrue(neuron.containSameValues(current, expect), \"Arrays with the same values should return true.\");\n\n        // Case where the arrays contain different values.\n        double[] differentExpect = new double[]{1.0, 2.0, 4.0};\n        assertFalse(neuron.containSameValues(current, differentExpect), \"Arrays with different values should return false.\");\n\n        // Case where expect array has a different size, expecting an exception.\n        double[] wrongSizeExpect = new double[]{1.0, 2.0};\n        Exception exception = assertThrows(NeuralNetException.class, () -> neuron.containSameValues(current, wrongSizeExpect),\n                                           \"Size mismatch should throw a NeuralNetException.\");\n\n        String expectedMessage = \"SIZE_MISMATCH\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage), \"Exception message should contain \" + expectedMessage);\n    }\n\n    // The class below is a stub needed for compilation of the test above\n    // and should be replaced with the actual implementation of Neuron.\n    public class Neuron {\n        final private long identifier;\n        final private int size;\n        final private AtomicReference<double[]> features;\n        final private AtomicLong numberOfAttemptedUpdates;\n        final private AtomicLong numberOfSuccessfulUpdates;\n\n        public Neuron(long identifier, double[] features) {\n            this.size = features.length;\n            this.identifier = identifier;\n            this.features = new AtomicReference<>(features);\n            this.numberOfAttemptedUpdates = new AtomicLong(0);\n            this.numberOfSuccessfulUpdates = new AtomicLong(0);\n        }\n\n        public synchronized Neuron copy() {\n            return new Neuron(this.identifier, this.features.get());\n        }\n\n        public long getIdentifier() {\n            return this.identifier;\n        }\n\n        public int getSize() {\n            return this.size;\n        }\n\n        public double[] getFeatures() {\n            return this.features.get();\n        }\n\n        public boolean compareAndSetFeatures(double[] expect, double[] update) {\n            // Dummy implementation\n            return true;\n        }\n\n        public long getNumberOfAttemptedUpdates() {\n            return this.numberOfAttemptedUpdates.get();\n        }\n\n        public long getNumberOfSuccessfulUpdates() {\n            return this.numberOfSuccessfulUpdates.get();\n        }\n\n        private boolean containSameValues(double[] current, double[] expect) {\n            if (expect.length != size) {\n                throw new NeuralNetException(NeuralNetException.SIZE_MISMATCH,\n                                             expect.length, size);\n            }\n\n            for (int i = 0; i < size; i++) {\n                if (!Precision.equals(current[i], expect[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.apache.commons.numbers.core.Precision;\nimport org.apache.commons.math4.neuralnet.internal.NeuralNetException;\n\npublic class NeuronTest {\n    @Test\n    public void containSameValuesTest() {\n        // Create a neuron with an identifier and initial feature set\n        long identifier = 1L;\n        double[] initialFeatures = {0.1, 0.2, 0.3};\n        Neuron neuron = new Neuron(identifier, initialFeatures);\n\n        // Test for matching arrays\n        double[] matchingFeatures = {0.1, 0.2, 0.3};\n        assertTrue(neuron.containSameValues(initialFeatures, matchingFeatures),\n                \"The arrays should be reported as having the same values.\");\n\n        // Test for non-matching arrays\n        double[] nonMatchingFeatures = {0.1, 0.2, 0.4};\n        assertFalse(neuron.containSameValues(initialFeatures, nonMatchingFeatures),\n                \"The arrays should be reported as not having the same values.\");\n\n        // Test for size mismatch exception\n        double[] differentSizeFeatures = {0.1, 0.2};\n\n        Exception exception = assertThrows(NeuralNetException.class, () -> {\n            neuron.containSameValues(initialFeatures, differentSizeFeatures);\n        });\n\n        String expectedMessage = NeuralNetException.SIZE_MISMATCH;\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage),\n                \"NeuralNetException should be thrown with SIZE_MISMATCH error.\");\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.Test;\nimport org.apache.commons.numbers.core.Precision;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n\n    @Test\n    public void containSameValuesTest() {\n        // Given\n        long identifier = 1L;\n        double[] initialFeatures = {1.0, 2.0, 3.0};\n        Neuron neuron = new Neuron(identifier, initialFeatures);\n\n        double[] current = {1.0, 2.0, 3.0};\n        double[] expectSame = {1.0, 2.0, 3.0};\n        double[] expectDiff = {3.0, 2.0, 1.0};\n        double[] expectSizeMismatch = {1.0, 2.0};\n\n        // When and Then\n        assertTrue(neuron.containSameValues(current, expectSame), \"Arrays with the same values should result in true\");\n        assertFalse(neuron.containSameValues(current, expectDiff), \"Arrays with different values should result in false\");\n        \n        // Testing the size mismatch exception\n        Exception exception = assertThrows(NeuralNetException.class, () -> {\n            neuron.containSameValues(current, expectSizeMismatch);\n        });\n\n        String expectedMessage = \"Size mismatch\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage), \"Exception message should contain 'Size mismatch'\");\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.apache.commons.numbers.core.Precision;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    \n    private Neuron neuron;\n    \n    @BeforeEach\n    public void setUp() {\n        neuron = new Neuron(1L, new double[]{1.0, 2.0, 3.0});\n    }\n    \n    @Test\n    public void containSameValuesTest_ValuesMatch() {\n        assertDoesNotThrow(() -> {\n            assertTrue(neuron.containSameValues(new double[]{1.0, 2.0, 3.0}, new double[]{1.0, 2.0, 3.0}));\n        });\n    }\n\n    @Test\n    public void containSameValuesTest_ValuesDontMatch() {\n        assertDoesNotThrow(() -> {\n            assertFalse(neuron.containSameValues(new double[]{1.0, 2.0, 3.0}, new double[]{1.0, 2.1, 3.0}));\n        });\n    }\n\n    @Test\n    public void containSameValuesTest_ExceptionThrown() {\n        Exception exception = assertThrows(NeuralNetException.class, () -> {\n            neuron.containSameValues(new double[]{1.0, 2.0, 3.0}, new double[]{1.0, 2.0});\n        });\n        assertTrue(exception.getMessage().contains(\"SIZE_MISMATCH\"));\n    }\n\n    @Test\n    public void containSameValuesTest_PrecisionMismatchWithinThreshold() {\n        assertDoesNotThrow(() -> {\n            double delta = 1e-5;\n            Precision.setEqualityThreshold(delta);\n            assertTrue(neuron.containSameValues(new double[]{1.0, 2.0, 3.0}, new double[]{1.0 + delta/2, 2.0, 3.0}));\n        });\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.apache.commons.math4.neuralnet.internal.NeuralNetException;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    private Neuron neuron;\n    private double[] testFeatures = new double[]{1.0, 2.0, 3.0};\n\n    @BeforeEach\n    public void setup() {\n        neuron = new Neuron(1L, testFeatures);\n    }\n\n    @Test\n    public void containSameValuesTestDifferentLength() {\n        double[] current = {1.0, 2.0, 3.0};\n        double[] expect = {1.0, 2.0};\n\n        Exception exception = assertThrows(NeuralNetException.class, () -> {\n            neuron.compareAndSetFeatures(current, expect);\n        });\n\n        String expectedMessage = \"SIZE_MISMATCH\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n\n    @Test\n    public void containSameValuesTestDifferentValues() {\n        double[] current = {1.0, 2.0, 3.0};\n        double[] expect = {1.0, 2.0, 4.0}; // Different value on purpose\n\n        assertFalse(neuron.compareAndSetFeatures(current, expect));\n    }\n\n    @Test\n    public void containSameValuesTestSameValues() {\n        double[] current = {1.0, 2.0, 3.0};\n        double[] expect = {1.0, 2.0, 3.0};\n\n        assertTrue(neuron.compareAndSetFeatures(current, expect));\n    }\n\n    @Test\n    public void containSameValuesTestPrecision() {\n        // Assuming Precision.equals is true for very close values\n        double[] current = {1.0, 2.0, 3.0};\n        double[] expect = {1.0 + 1e-10, 2.0 - 1e-10, 3.0 + 1e-10};\n\n        assertTrue(neuron.compareAndSetFeatures(current, expect));\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.apache.commons.numbers.core.Precision;\nimport org.mockito.Mockito;\n\npublic class NeuronTest {\n    // The size and identifier used to create a test Neuron instance\n    private final int size = 5;\n    private final long identifier = 1L;\n\n    @Test\n    public void containSameValuesTest() {\n        // Create a Neuron instance with a given size and identifier\n        double[] initialFeatures = new double[] {0.5, 1.5, 2.5, 3.5, 4.5};\n        Neuron neuron = new Neuron(identifier, initialFeatures);\n\n        // Test case where both arrays have the same values\n        double[] current = new double[] {0.5, 1.5, 2.5, 3.5, 4.5};\n        double[] expect = new double[] {0.5, 1.5, 2.5, 3.5, 4.5};\n        boolean result = neuron.compareAndSetFeatures(current, expect);\n        assertTrue(result, \"The arrays have the same values but were not recognized as such\");\n\n        // Test case where arrays have different values\n        current = new double[] {0.5, 1.5, 2.5, 3.5, 4.5};\n        expect = new double[] {0.5, 1.6, 2.6, 3.5, 4.5};\n        result = neuron.compareAndSetFeatures(current, expect);\n        assertFalse(result, \"The arrays have different values but were incorrectly recognized as the same\");\n\n        // Test case for throwing an exception due to different sizes\n        current = new double[] {0.5, 1.5, 2.5, 3.5, 4.5};\n        expect = new double[] {0.5, 1.5, 2.5};\n        Exception exception = assertThrows(NeuralNetException.class, () -> {\n            neuron.compareAndSetFeatures(current, expect);\n        });\n        String expectedMessage = \"Size mismatch: expected length \"\n                                 + expect.length + \" but was \" + size;\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage), \"Expected size mismatch NeuralNetException was not thrown\");\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.apache.commons.numbers.core.Precision;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n\n    private static Neuron neuron;\n    private static double[] features;\n\n    @BeforeAll\n    public static void setUp() {\n        features = new double[] {1.0, 2.0, 3.0};\n        neuron = new Neuron(1L, features);\n    }\n\n    @Test\n    public void containSameValuesTest_ValuesAreEqual() throws Exception {\n        double[] expectedFeatures = new double[] {1.0, 2.0, 3.0};\n        assertTrue(invokeContainSameValues(neuron.getFeatures(), expectedFeatures), \n                   \"The arrays contain the same values, but were not recognized as such.\");\n    }\n\n    @Test\n    public void containSameValuesTest_ValuesAreNotEqual() throws Exception {\n        double[] expectedFeatures = new double[] {1.0, 2.1, 3.0};\n        assertFalse(invokeContainSameValues(neuron.getFeatures(), expectedFeatures),\n                    \"The arrays do not contain the same values, but were incorrectly recognized as matching.\");\n    }\n\n    @Test\n    public void containSameValuesTest_SizeMismatch() throws Exception {\n        double[] expectedFeatures = new double[] {1.0, 2.0};\n        Exception exception = assertThrows(NeuralNetException.class, () -> {\n            invokeContainSameValues(neuron.getFeatures(), expectedFeatures);\n        });\n        String expectedMessage = \"Size mismatch: expected \" + expectedFeatures.length + \" but was \" + neuron.getSize();\n        assertTrue(exception.getMessage().contains(expectedMessage));\n    }\n\n    // Private helper method to invoke the private method containSameValues using reflection\n    private boolean invokeContainSameValues(double[] current, double[] expect) throws Exception {\n        var method = Neuron.class.getDeclaredMethod(\"containSameValues\", double[].class, double[].class);\n        method.setAccessible(true);\n        return (boolean) method.invoke(neuron, current, expect);\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n\n    @Test\n    public void containSameValuesTest() {\n        long identifier = 1L;\n        double[] initialFeatures = {1.0, 2.0, 3.0};\n        Neuron neuron = new Neuron(identifier, initialFeatures);\n\n        double[] sameAsInitial = {1.0, 2.0, 3.0};\n        double[] differentFromInitial = {1.1, 2.2, 3.3};\n        double[] differentSize = {1.0, 2.0};\n\n        // Case 1: Arrays with same values\n        assertTrue(neuron.containSameValues(initialFeatures, sameAsInitial), \"Should return true for arrays with same values\");\n\n        // Case 2: Arrays with different values\n        assertFalse(neuron.containSameValues(initialFeatures, differentFromInitial), \"Should return false for arrays with different values\");\n\n        // Case 3: Arrays of different sizes\n        NeuralNetException exception = assertThrows(NeuralNetException.class, () -> neuron.containSameValues(initialFeatures, differentSize),\n                \"Should throw NeuralNetException for size mismatch\");\n\n        assertEquals(NeuralNetException.SIZE_MISMATCH, exception.getCode());\n        assertEquals(differentSize.length, exception.getArgument());\n        assertEquals(initialFeatures.length, neuron.getSize());\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.Test;\nimport org.apache.commons.math4.neuralnet.internal.NeuralNetException;\nimport org.apache.commons.numbers.core.Precision;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    private class NeuronMock extends Neuron {\n        public NeuronMock(long identifier, double[] features) {\n            super(identifier, features);\n        }\n        \n        public boolean containSameValuesMock(double[] current, double[] expect) {\n            return containSameValues(current, expect);\n        }\n    }\n    \n    @Test\n    public void containSameValuesTest() {\n        NeuronMock neuron = new NeuronMock(1L, new double[]{0.5, 1.5, 2.5});\n        double[] currentValues = {0.5, 1.5, 2.5};\n        double[] expectedValues = {0.5, 1.5, 2.5};\n        \n        // Test for equality with same values\n        assertTrue(neuron.containSameValuesMock(currentValues, expectedValues), \"Arrays should contain the same values\");\n        \n        // Test for inequality with different values\n        expectedValues[2] = 3.5;\n        assertFalse(neuron.containSameValuesMock(currentValues, expectedValues), \"Arrays should not contain the same values\");\n        \n        // Test for throwing exception with different sizes\n        expectedValues = new double[]{0.5, 1.5}; // short one element\n        NeuralNetException thrown = assertThrows(\n            NeuralNetException.class, \n            () -> neuron.containSameValuesMock(currentValues, expectedValues), \n            \"Exception should be thrown due to size mismatch\"\n        );\n        \n        assertTrue(thrown.getMessage().contains(\"SIZE_MISMATCH\"));\n    }\n}",
        "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.apache.commons.math4.neuralnet.internal.NeuralNetException;\nimport org.apache.commons.numbers.core.Precision;\n\nimport java.lang.reflect.Method;\n\npublic class NeuronTest {\n\n    @Test\n    public void containSameValuesTest() {\n        try {\n            // Obtain the method containSameValues, which is private, using reflection\n            Method method = Neuron.class.getDeclaredMethod(\"containSameValues\", double[].class, double[].class);\n            method.setAccessible(true);\n\n            // Create a neuron with dummy identifier and expected features\n            long dummyIdentifier = 123L;\n            double[] features = {1.0, 2.0, 3.0};\n            Neuron neuron = new Neuron(dummyIdentifier, features);\n\n            // Test case for equal size and equal values\n            double[] currentValues = {1.0, 2.0, 3.0};\n            double[] expectedValues = {1.0, 2.0, 3.0};\n            assertTrue((boolean) method.invoke(neuron, currentValues, expectedValues),\n                       \"Arrays with identical values should return true\");\n\n            // Test case for equal size but different values\n            double[] differentValues = {1.1, 2.0, 3.0};\n            assertFalse((boolean) method.invoke(neuron, currentValues, differentValues),\n                        \"Arrays with different values should return false\");\n\n            // Test case for size mismatch\n            double[] mismatchedSize = {1.0, 2.0};\n            assertThrows(NeuralNetException.class, \n                         () -> method.invoke(neuron, currentValues, mismatchedSize),\n                         \"Size mismatch should throw NeuralNetException\");\n\n        } catch (Exception e) {\n            fail(\"Reflective method access failed: \" + e.getMessage());\n        }\n    }\n}"
    ]
}