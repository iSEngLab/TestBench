{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compare the specified object with this entry for equality.\n     *\n     * @param o Object.\n     * @return {@code true} if the given object is also a map entry and\n     * the two entries represent the same mapping.\n     */",
    "source_code": "\n@Override\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (!(o instanceof Pair)) {\n        return false;\n    } else {\n        Pair<?, ?> oP = (Pair<?, ?>) o;\n        return (key == null ?\n                oP.key == null :\n                key.equals(oP.key)) &&\n            (value == null ?\n             oP.value == null :\n             value.equals(oP.value));\n    }\n}\n",
    "class_name": "Pair",
    "method_name": "equals",
    "arguments": [
        "Object o"
    ],
    "generate_test": [
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair1Copy = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key2\", \"value2\");\n        Pair<String, String> pairWithNullKey = new Pair<>(null, \"value1\");\n        Pair<String, String> pairWithNullValue = new Pair<>(\"key1\", null);\n        Pair<String, String> pairWithNullKeyAndValue = new Pair<>(null, null);\n\n        // Test for equality with itself\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself\");\n\n        // Test for equality with another Pair with the same key and value\n        assertTrue(pair1.equals(pair1Copy), \"Pairs with identical key and value should be equal\");\n\n        // Test for inequality with a Pair with different key and value\n        assertFalse(pair1.equals(pair2), \"Pairs with different keys and values should not be equal\");\n\n        // Test for inequality with a Pair with a null key\n        assertFalse(pair1.equals(pairWithNullKey), \"Pairs with a non-null key should not be equal to a Pair with a null key\");\n\n        // Test for inequality with a Pair with a null value\n        assertFalse(pair1.equals(pairWithNullValue), \"Pairs with a non-null value should not be equal to a Pair with a null value\");\n\n        // Test equality of Pairs with null keys and values\n        assertTrue(pairWithNullKeyAndValue.equals(pairWithNullKeyAndValue), \"Pairs with null keys and values should be equal\");\n\n        // Test for inequality with null\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null\");\n\n        // Test for inequality with an object of a different type\n        assertFalse(pair1.equals(\"String\"), \"Pair should not be equal to an object of a different type\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    \n    @Test\n    public void equalsTest() {\n        // Create two pairs that should be equal\n        Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n\n        // Create two pairs that are different\n        Pair<Integer, String> pair3 = new Pair<>(2, \"two\");\n        Pair<Integer, String> pair4 = new Pair<>(1, \"two\");\n\n        // Null key and value pairs\n        Pair<Object, Object> nullPair1 = new Pair<>(null, null);\n        Pair<Object, Object> nullPair2 = new Pair<>(null, null);\n\n        // Null key and non-null value pairs\n        Pair<Object, String> nullKeyPair1 = new Pair<>(null, \"three\");\n        Pair<Object, String> nullKeyPair2 = new Pair<>(null, \"three\");\n\n        // Non-null key and null value pairs\n        Pair<Integer, Object> nullValuePair1 = new Pair<>(3, null);\n        Pair<Integer, Object> nullValuePair2 = new Pair<>(3, null);\n\n        // Assert that the same pair is equal to itself\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself\");\n\n        // Assert that two pairs with the same key and value are equal\n        assertTrue(pair1.equals(pair2), \"Two pairs with the same key and value should be equal\");\n\n        // Assert that two pairs with different keys are not equal\n        assertFalse(pair1.equals(pair3), \"Two pairs with different keys should not be equal\");\n\n        // Assert that two pairs with the same key but different values are not equal\n        assertFalse(pair1.equals(pair4), \"Two pairs with the same key but different values should not be equal\");\n\n        // Assert that two null pairs are equal\n        assertTrue(nullPair1.equals(nullPair2), \"Two null pairs should be equal\");\n\n        // Assert that two pairs with null keys are equal\n        assertTrue(nullKeyPair1.equals(nullKeyPair2), \"Two pairs with null keys should be equal\");\n\n        // Assert that two pairs with null values are equal\n        assertTrue(nullValuePair1.equals(nullValuePair2), \"Two pairs with null values should be equal\");\n\n        // Assert that a pair is not equal to null\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null\");\n\n        // Assert that a pair is not equal to an object of a different type\n        assertFalse(pair1.equals(new Object()), \"Pair should not be equal to an object of a different type\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n\n        // Check reflexivity\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself\");\n\n        // Check symmetry\n        assertTrue(pair1.equals(pair2) && pair2.equals(pair1), \"Pairs should be equal to each other\");\n\n        // Check null comparison\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null\");\n\n        // Check different class comparison\n        assertFalse(pair1.equals(new Object()), \"Pair should not be equal to an object of a different class\");\n\n        // Check pairs with different keys\n        Pair<String, String> pairDifferentKey = new Pair<>(\"key2\", \"value1\");\n        assertFalse(pair1.equals(pairDifferentKey), \"Pairs with different keys should not be equal\");\n\n        // Check pairs with different values\n        Pair<String, String> pairDifferentValue = new Pair<>(\"key1\", \"value2\");\n        assertFalse(pair1.equals(pairDifferentValue), \"Pairs with different values should not be equal\");\n\n        // Check pair with null key and value\n        Pair<String, String> nullKeyPair1 = new Pair<>(null, \"value1\");\n        Pair<String, String> nullKeyPair2 = new Pair<>(null, \"value1\");\n        assertTrue(nullKeyPair1.equals(nullKeyPair2), \"Pairs with null keys should be equal\");\n\n        Pair<String, String> nullValuePair1 = new Pair<>(\"key1\", null);\n        Pair<String, String> nullValuePair2 = new Pair<>(\"key1\", null);\n        assertTrue(nullValuePair1.equals(nullValuePair2), \"Pairs with null values should be equal\");\n\n        // Check pairs with one of the keys null\n        Pair<String, String> pairWithNullKey = new Pair<>(null, \"value1\");\n        assertFalse(pair1.equals(pairWithNullKey), \"Pairs with one null key should not be equal\");\n\n        // Check pairs with one of the values null\n        Pair<String, String> pairWithNullValue = new Pair<>(\"key1\", null);\n        assertFalse(pair1.equals(pairWithNullValue), \"Pairs with one null value should not be equal\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    \n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = Pair.create(\"key1\", \"value1\");\n        Pair<String, String> pair2 = Pair.create(\"key1\", \"value1\");\n        Pair<String, String> pair3 = Pair.create(\"key3\", \"value3\");\n        Pair<String, String> pairNullKey = Pair.create(null, \"value1\");\n        Pair<String, String> pairNullValue = Pair.create(\"key1\", null);\n        Pair<String, String> pairNullBoth = Pair.create(null, null);\n\n        // reflexive test\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself.\");\n        \n        // symmetric test\n        assertTrue(pair1.equals(pair2), \"Pair1 should be equal to Pair2.\");\n        assertTrue(pair2.equals(pair1), \"Pair2 should be equal to Pair1.\");\n        \n        // null key and value tests\n        assertFalse(pair1.equals(pairNullKey), \"Pairs with different keys should not be equal.\");\n        assertFalse(pairNullKey.equals(pair1), \"Pairs with different keys should not be equal.\");\n        assertFalse(pair1.equals(pairNullValue), \"Pairs with different values should not be equal.\");\n        assertFalse(pairNullValue.equals(pair1), \"Pairs with different values should not be equal.\");\n        assertFalse(pairNullKey.equals(pairNullValue), \"Pairs with different keys or values should not be equal.\");\n        assertTrue(pairNullBoth.equals(pairNullBoth), \"Pair with both key and value as null should be equal to itself.\");\n\n        // consistency test\n        assertTrue(pair1.equals(pair2), \"Pair1 should consistently be equal to Pair2.\");\n        assertTrue(pair2.equals(pair1), \"Pair2 should consistently be equal to Pair1.\");\n        \n        // null test\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null.\");\n        \n        // test with different values\n        assertFalse(pair1.equals(pair3), \"Pairs with different key/values should not be equal.\");\n        assertFalse(pair3.equals(pair1), \"Pairs with different key/values should not be equal.\");\n\n        // test with different object\n        assertFalse(pair1.equals(new Object()), \"Pair should not be equal to a different type of object.\");\n        \n        // transitive test\n        Pair<String, String> pairTransitive = Pair.create(\"key1\", \"value1\");\n        assertTrue(pair1.equals(pair2), \"Transitive test: Pair1 should be equal to Pair2.\");\n        assertTrue(pair2.equals(pairTransitive), \"Transitive test: Pair2 should be equal to PairTransitive.\");\n        assertTrue(pair1.equals(pairTransitive), \"Transitive test: Pair1 should be equal to PairTransitive.\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test for two Pairs with the same key and value\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        assertTrue(pair1.equals(pair2));\n\n        // Test for two Pairs with different keys\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value1\");\n        assertFalse(pair1.equals(pair3));\n\n        // Test for two Pairs with different values\n        Pair<String, String> pair4 = new Pair<>(\"key1\", \"value2\");\n        assertFalse(pair1.equals(pair4));\n\n        // Test for a Pair compared to null\n        assertFalse(pair1.equals(null));\n\n        // Test for a Pair compared to itself\n        assertTrue(pair1.equals(pair1));\n\n        // Test for a Pair compared to an object of a different type\n        Object differentTypeObject = new Object();\n        assertFalse(pair1.equals(differentTypeObject));\n\n        // Test for Pairs with null key or value\n        Pair<String, String> pairWithNullKey = new Pair<>(null, \"value\");\n        Pair<String, String> pairWithNullValue = new Pair<>(\"key\", null);\n        Pair<String, String> pairWithBothNull = new Pair<>(null, null);\n        assertFalse(pair1.equals(pairWithNullKey));\n        assertFalse(pair1.equals(pairWithNullValue));\n        assertTrue(pairWithNullKey.equals(pairWithBothNull));\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value2\");\n        Pair<String, String> pairNullKey = new Pair<>(null, \"value1\");\n        Pair<String, String> pairNullValue = new Pair<>(\"key1\", null);\n        Pair<String, String> pairBothNull = new Pair<>(null, null);\n\n        assertTrue(pair1.equals(pair1), \"A pair should be equal to itself.\");\n        assertTrue(pair1.equals(pair2), \"Pairs with the same keys and values should be equal.\");\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys or values should not be equal.\");\n        assertFalse(pair1.equals(null), \"A pair should not be equal to null.\");\n        assertFalse(pair1.equals(\"Not a pair\"), \"A pair should not be equal to an object of a different type.\");\n        \n        assertTrue(pairNullKey.equals(new Pair<>(null, \"value1\")), \"Pairs with null keys and same values should be equal.\");\n        assertFalse(pairNullKey.equals(new Pair<>(null, \"value2\")), \"Pairs with null keys and different values should not be equal.\");\n\n        assertTrue(pairNullValue.equals(new Pair<>(\"key1\", null)), \"Pairs with null values and the same keys should be equal.\");\n        assertFalse(pairNullValue.equals(new Pair<>(\"key2\", null)), \"Pairs with null values and different keys should not be equal.\");\n        \n        assertTrue(pairBothNull.equals(new Pair<>(null, null)), \"Pairs with both key and value as null should be equal to another pair with both key and value as null.\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value2\");\n        Pair<String, String> pair4 = new Pair<>(null, \"value1\");\n        Pair<String, String> pair5 = new Pair<>(\"key1\", null);\n        Pair<String, String> pair6 = new Pair<>(null, null);\n\n        // Test reflexivity\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself\");\n\n        // Test symmetry\n        assertTrue(pair1.equals(pair2), \"Pairs with same key and value should be equal\");\n        assertTrue(pair2.equals(pair1), \"Pairs with same key and value should be equal\");\n\n        // Test transitivity\n        if (pair1.equals(pair2) && pair2.equals(pair3)) {\n            assertTrue(pair1.equals(pair3), \"Transitivity of equals failed\");\n        }\n\n        // Test null comparison\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null\");\n\n        // Test against different types\n        assertFalse(pair1.equals(new Object()), \"Pair should not be equal to an object of a different type\");\n\n        // Test pairs with different keys\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys should not be equal\");\n\n        // Test differentiating on null key\n        assertFalse(pair1.equals(pair4), \"Pairs with and without null keys should not be equal\");\n\n        // Test differentiating on null value\n        assertFalse(pair1.equals(pair5), \"Pairs with and without null values should not be equal\");\n\n        // Test both null key and value\n        assertTrue(pair6.equals(new Pair<>(null, null)), \"Pairs with both null keys and null values should be equal\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    \n    @Test\n    public void equalsTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"first\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"first\");\n        Pair<Integer, String> pair3 = new Pair<>(2, \"second\");\n        Pair<Integer, String> pair4 = new Pair<>(null, \"first\");\n        Pair<Integer, String> pair5 = new Pair<>(1, null);\n        Pair<Integer, String> pair6 = new Pair<>(null, null);\n\n        // Positive test cases\n        assertTrue(pair1.equals(pair2), \"Pairs with same key and value should be equal.\");\n\n        // Negative test cases\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys should not be equal.\");\n        assertFalse(pair1.equals(pair4), \"Pairs with null key in one should not be equal.\");\n        assertFalse(pair1.equals(pair5), \"Pairs with null value in one should not be equal.\");\n        assertFalse(pair1.equals(null), \"Pair compared with null should not be equal.\");\n        assertFalse(pair1.equals(new Object()), \"Pair compared with non-pair object should not be equal.\");\n\n        // Test with nulls in pairs\n        assertTrue(pair4.equals(new Pair<Integer, String>(null, \"first\")),\n            \"Pairs with same value and null key should be equal.\");\n        assertTrue(pair5.equals(new Pair<Integer, String>(1, null)),\n            \"Pairs with same key and null value should be equal.\");\n\n        // Test reflexivity, symmetry, and transitivity\n        assertTrue(pair1.equals(pair1), \"Reflexivity: Pair should be equal to itself.\");\n        assertTrue(pair2.equals(pair1), \"Symmetry: If pair1 equals pair2, then pair2 should equal pair1.\");\n        \n        Pair<Integer, String> pair2Copy = new Pair<>(1, \"first\");\n        assertTrue(pair1.equals(pair2) && pair2.equals(pair2Copy) && pair1.equals(pair2Copy),\n            \"Transitivity: If pair1 equals pair2 and pair2 equals pair2Copy, then pair1 should equal pair2Copy.\");\n\n        // Test null values equal to each other\n        assertTrue(pair6.equals(new Pair<>(null, null)),\n            \"Pairs with both keys and values as null should be equal.\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value2\");\n        Pair<String, String> pair4 = null;\n        Pair<String, String> pairWithNullKey = new Pair<>(null, \"value1\");\n        Pair<String, String> pairWithNullValue = new Pair<>(\"key1\", null);\n        Pair<String, String> pairWithBothNull = new Pair<>(null, null);\n        Pair<String, String> anotherPairWithNullKey = new Pair<>(null, \"value2\");\n        Pair<String, String> anotherPairWithNullValue = new Pair<>(\"key2\", null);\n        Object nonPairObject = new Object();\n\n        // Testing reflexivity - a pair should equal itself\n        assertTrue(pair1.equals(pair1));\n\n        // Testing symmetry and transitivity - two pairs with the same content should be equal\n        assertTrue(pair1.equals(pair2) && pair2.equals(pair1));\n\n        // Testing null comparison - comparing a pair to null should return false\n        assertFalse(pair1.equals(pair4));\n\n        // Testing inequality - pairs with different keys or values should not be equal\n        assertFalse(pair1.equals(pair3));\n        assertFalse(pairWithNullKey.equals(pair1));\n        assertFalse(pairWithNullValue.equals(pair1));\n\n        // Comparing pairs where one has a null key\n        assertFalse(pairWithNullKey.equals(anotherPairWithNullKey));\n\n        // Comparing pairs where one has a null value\n        assertFalse(pairWithNullValue.equals(anotherPairWithNullValue));\n\n        // Comparing pairs where both key and value are null\n        assertTrue(pairWithBothNull.equals(new Pair<>(null, null)));\n\n        // Comparing a pair to an object of another class should return false\n        assertFalse(pair1.equals(nonPairObject));\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test equal pairs with non-null key and value\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"value\");\n        assertTrue(pair1.equals(pair2));\n        assertTrue(pair2.equals(pair1));\n\n        // Test equal pairs with null key and non-null value\n        Pair<String, String> pairWithNullKey1 = new Pair<>(null, \"value\");\n        Pair<String, String> pairWithNullKey2 = new Pair<>(null, \"value\");\n        assertTrue(pairWithNullKey1.equals(pairWithNullKey2));\n        assertTrue(pairWithNullKey2.equals(pairWithNullKey1));\n\n        // Test equal pairs with non-null key and null value\n        Pair<String, String> pairWithNullValue1 = new Pair<>(\"key\", null);\n        Pair<String, String> pairWithNullValue2 = new Pair<>(\"key\", null);\n        assertTrue(pairWithNullValue1.equals(pairWithNullValue2));\n        assertTrue(pairWithNullValue2.equals(pairWithNullValue1));\n\n        // Test equal pairs with null key and null value\n        Pair<String, String> pairWithNullKeyAndValue1 = new Pair<>(null, null);\n        Pair<String, String> pairWithNullKeyAndValue2 = new Pair<>(null, null);\n        assertTrue(pairWithNullKeyAndValue1.equals(pairWithNullKeyAndValue2));\n        assertTrue(pairWithNullKeyAndValue2.equals(pairWithNullKeyAndValue1));\n\n        // Test non-equal pairs due to different keys\n        Pair<String, String> pairWithDifferentKey = new Pair<>(\"differentKey\", \"value\");\n        assertFalse(pair1.equals(pairWithDifferentKey));\n\n        // Test non-equal pairs due to different values\n        Pair<String, String> pairWithDifferentValue = new Pair<>(\"key\", \"differentValue\");\n        assertFalse(pair1.equals(pairWithDifferentValue));\n\n        // Test non-equal pairs when one has null key\n        Pair<String, String> pairWithKey1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pairWithNullKey3 = new Pair<>(null, \"value\");\n        assertFalse(pairWithKey1.equals(pairWithNullKey3));\n\n        // Test non-equal pairs when one has null value\n        Pair<String, String> pairWithValue1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pairWithNullValue3 = new Pair<>(\"key\", null);\n        assertFalse(pairWithValue1.equals(pairWithNullValue3));\n\n        // Test equality with self\n        assertTrue(pair1.equals(pair1));\n\n        // Test equality with non-Pair object\n        Object differentClassObject = new Object();\n        assertFalse(pair1.equals(differentClassObject));\n\n        // Test equality with null\n        assertFalse(pair1.equals(null));\n    }\n}"
    ]
}