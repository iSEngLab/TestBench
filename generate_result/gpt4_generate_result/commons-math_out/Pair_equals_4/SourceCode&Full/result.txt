Source code: 


@Override
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (!(o instanceof Pair)) {
        return false;
    } else {
        Pair<?, ?> oP = (Pair<?, ?>) o;
        return (key == null ?
                oP.key == null :
                key.equals(oP.key)) &&
            (value == null ?
             oP.value == null :
             value.equals(oP.value));
    }
}



No.1 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {
    @Test
    public void equalsTest() {
        Pair<String, String> pair1 = new Pair<>("key1", "value1");
        Pair<String, String> pair1Copy = new Pair<>("key1", "value1");
        Pair<String, String> pair2 = new Pair<>("key2", "value2");
        Pair<String, String> pairWithNullKey = new Pair<>(null, "value1");
        Pair<String, String> pairWithNullValue = new Pair<>("key1", null);
        Pair<String, String> pairWithNullKeyAndValue = new Pair<>(null, null);

        // Test for equality with itself
        assertTrue(pair1.equals(pair1), "Pair should be equal to itself");

        // Test for equality with another Pair with the same key and value
        assertTrue(pair1.equals(pair1Copy), "Pairs with identical key and value should be equal");

        // Test for inequality with a Pair with different key and value
        assertFalse(pair1.equals(pair2), "Pairs with different keys and values should not be equal");

        // Test for inequality with a Pair with a null key
        assertFalse(pair1.equals(pairWithNullKey), "Pairs with a non-null key should not be equal to a Pair with a null key");

        // Test for inequality with a Pair with a null value
        assertFalse(pair1.equals(pairWithNullValue), "Pairs with a non-null value should not be equal to a Pair with a null value");

        // Test equality of Pairs with null keys and values
        assertTrue(pairWithNullKeyAndValue.equals(pairWithNullKeyAndValue), "Pairs with null keys and values should be equal");

        // Test for inequality with null
        assertFalse(pair1.equals(null), "Pair should not be equal to null");

        // Test for inequality with an object of a different type
        assertFalse(pair1.equals("String"), "Pair should not be equal to an object of a different type");
    }
}


No.2 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {
    
    @Test
    public void equalsTest() {
        // Create two pairs that should be equal
        Pair<Integer, String> pair1 = new Pair<>(1, "one");
        Pair<Integer, String> pair2 = new Pair<>(1, "one");

        // Create two pairs that are different
        Pair<Integer, String> pair3 = new Pair<>(2, "two");
        Pair<Integer, String> pair4 = new Pair<>(1, "two");

        // Null key and value pairs
        Pair<Object, Object> nullPair1 = new Pair<>(null, null);
        Pair<Object, Object> nullPair2 = new Pair<>(null, null);

        // Null key and non-null value pairs
        Pair<Object, String> nullKeyPair1 = new Pair<>(null, "three");
        Pair<Object, String> nullKeyPair2 = new Pair<>(null, "three");

        // Non-null key and null value pairs
        Pair<Integer, Object> nullValuePair1 = new Pair<>(3, null);
        Pair<Integer, Object> nullValuePair2 = new Pair<>(3, null);

        // Assert that the same pair is equal to itself
        assertTrue(pair1.equals(pair1), "Pair should be equal to itself");

        // Assert that two pairs with the same key and value are equal
        assertTrue(pair1.equals(pair2), "Two pairs with the same key and value should be equal");

        // Assert that two pairs with different keys are not equal
        assertFalse(pair1.equals(pair3), "Two pairs with different keys should not be equal");

        // Assert that two pairs with the same key but different values are not equal
        assertFalse(pair1.equals(pair4), "Two pairs with the same key but different values should not be equal");

        // Assert that two null pairs are equal
        assertTrue(nullPair1.equals(nullPair2), "Two null pairs should be equal");

        // Assert that two pairs with null keys are equal
        assertTrue(nullKeyPair1.equals(nullKeyPair2), "Two pairs with null keys should be equal");

        // Assert that two pairs with null values are equal
        assertTrue(nullValuePair1.equals(nullValuePair2), "Two pairs with null values should be equal");

        // Assert that a pair is not equal to null
        assertFalse(pair1.equals(null), "Pair should not be equal to null");

        // Assert that a pair is not equal to an object of a different type
        assertFalse(pair1.equals(new Object()), "Pair should not be equal to an object of a different type");
    }
}


No.3 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {

    @Test
    public void equalsTest() {
        Pair<String, String> pair1 = new Pair<>("key1", "value1");
        Pair<String, String> pair2 = new Pair<>("key1", "value1");

        // Check reflexivity
        assertTrue(pair1.equals(pair1), "Pair should be equal to itself");

        // Check symmetry
        assertTrue(pair1.equals(pair2) && pair2.equals(pair1), "Pairs should be equal to each other");

        // Check null comparison
        assertFalse(pair1.equals(null), "Pair should not be equal to null");

        // Check different class comparison
        assertFalse(pair1.equals(new Object()), "Pair should not be equal to an object of a different class");

        // Check pairs with different keys
        Pair<String, String> pairDifferentKey = new Pair<>("key2", "value1");
        assertFalse(pair1.equals(pairDifferentKey), "Pairs with different keys should not be equal");

        // Check pairs with different values
        Pair<String, String> pairDifferentValue = new Pair<>("key1", "value2");
        assertFalse(pair1.equals(pairDifferentValue), "Pairs with different values should not be equal");

        // Check pair with null key and value
        Pair<String, String> nullKeyPair1 = new Pair<>(null, "value1");
        Pair<String, String> nullKeyPair2 = new Pair<>(null, "value1");
        assertTrue(nullKeyPair1.equals(nullKeyPair2), "Pairs with null keys should be equal");

        Pair<String, String> nullValuePair1 = new Pair<>("key1", null);
        Pair<String, String> nullValuePair2 = new Pair<>("key1", null);
        assertTrue(nullValuePair1.equals(nullValuePair2), "Pairs with null values should be equal");

        // Check pairs with one of the keys null
        Pair<String, String> pairWithNullKey = new Pair<>(null, "value1");
        assertFalse(pair1.equals(pairWithNullKey), "Pairs with one null key should not be equal");

        // Check pairs with one of the values null
        Pair<String, String> pairWithNullValue = new Pair<>("key1", null);
        assertFalse(pair1.equals(pairWithNullValue), "Pairs with one null value should not be equal");
    }
}


No.4 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {
    
    @Test
    public void equalsTest() {
        Pair<String, String> pair1 = Pair.create("key1", "value1");
        Pair<String, String> pair2 = Pair.create("key1", "value1");
        Pair<String, String> pair3 = Pair.create("key3", "value3");
        Pair<String, String> pairNullKey = Pair.create(null, "value1");
        Pair<String, String> pairNullValue = Pair.create("key1", null);
        Pair<String, String> pairNullBoth = Pair.create(null, null);

        // reflexive test
        assertTrue(pair1.equals(pair1), "Pair should be equal to itself.");
        
        // symmetric test
        assertTrue(pair1.equals(pair2), "Pair1 should be equal to Pair2.");
        assertTrue(pair2.equals(pair1), "Pair2 should be equal to Pair1.");
        
        // null key and value tests
        assertFalse(pair1.equals(pairNullKey), "Pairs with different keys should not be equal.");
        assertFalse(pairNullKey.equals(pair1), "Pairs with different keys should not be equal.");
        assertFalse(pair1.equals(pairNullValue), "Pairs with different values should not be equal.");
        assertFalse(pairNullValue.equals(pair1), "Pairs with different values should not be equal.");
        assertFalse(pairNullKey.equals(pairNullValue), "Pairs with different keys or values should not be equal.");
        assertTrue(pairNullBoth.equals(pairNullBoth), "Pair with both key and value as null should be equal to itself.");

        // consistency test
        assertTrue(pair1.equals(pair2), "Pair1 should consistently be equal to Pair2.");
        assertTrue(pair2.equals(pair1), "Pair2 should consistently be equal to Pair1.");
        
        // null test
        assertFalse(pair1.equals(null), "Pair should not be equal to null.");
        
        // test with different values
        assertFalse(pair1.equals(pair3), "Pairs with different key/values should not be equal.");
        assertFalse(pair3.equals(pair1), "Pairs with different key/values should not be equal.");

        // test with different object
        assertFalse(pair1.equals(new Object()), "Pair should not be equal to a different type of object.");
        
        // transitive test
        Pair<String, String> pairTransitive = Pair.create("key1", "value1");
        assertTrue(pair1.equals(pair2), "Transitive test: Pair1 should be equal to Pair2.");
        assertTrue(pair2.equals(pairTransitive), "Transitive test: Pair2 should be equal to PairTransitive.");
        assertTrue(pair1.equals(pairTransitive), "Transitive test: Pair1 should be equal to PairTransitive.");
    }
}


No.5 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {
    @Test
    public void equalsTest() {
        // Test for two Pairs with the same key and value
        Pair<String, String> pair1 = new Pair<>("key1", "value1");
        Pair<String, String> pair2 = new Pair<>("key1", "value1");
        assertTrue(pair1.equals(pair2));

        // Test for two Pairs with different keys
        Pair<String, String> pair3 = new Pair<>("key2", "value1");
        assertFalse(pair1.equals(pair3));

        // Test for two Pairs with different values
        Pair<String, String> pair4 = new Pair<>("key1", "value2");
        assertFalse(pair1.equals(pair4));

        // Test for a Pair compared to null
        assertFalse(pair1.equals(null));

        // Test for a Pair compared to itself
        assertTrue(pair1.equals(pair1));

        // Test for a Pair compared to an object of a different type
        Object differentTypeObject = new Object();
        assertFalse(pair1.equals(differentTypeObject));

        // Test for Pairs with null key or value
        Pair<String, String> pairWithNullKey = new Pair<>(null, "value");
        Pair<String, String> pairWithNullValue = new Pair<>("key", null);
        Pair<String, String> pairWithBothNull = new Pair<>(null, null);
        assertFalse(pair1.equals(pairWithNullKey));
        assertFalse(pair1.equals(pairWithNullValue));
        assertTrue(pairWithNullKey.equals(pairWithBothNull));
    }
}


No.6 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {
    @Test
    public void equalsTest() {
        Pair<String, String> pair1 = new Pair<>("key1", "value1");
        Pair<String, String> pair2 = new Pair<>("key1", "value1");
        Pair<String, String> pair3 = new Pair<>("key2", "value2");
        Pair<String, String> pairNullKey = new Pair<>(null, "value1");
        Pair<String, String> pairNullValue = new Pair<>("key1", null);
        Pair<String, String> pairBothNull = new Pair<>(null, null);

        assertTrue(pair1.equals(pair1), "A pair should be equal to itself.");
        assertTrue(pair1.equals(pair2), "Pairs with the same keys and values should be equal.");
        assertFalse(pair1.equals(pair3), "Pairs with different keys or values should not be equal.");
        assertFalse(pair1.equals(null), "A pair should not be equal to null.");
        assertFalse(pair1.equals("Not a pair"), "A pair should not be equal to an object of a different type.");
        
        assertTrue(pairNullKey.equals(new Pair<>(null, "value1")), "Pairs with null keys and same values should be equal.");
        assertFalse(pairNullKey.equals(new Pair<>(null, "value2")), "Pairs with null keys and different values should not be equal.");

        assertTrue(pairNullValue.equals(new Pair<>("key1", null)), "Pairs with null values and the same keys should be equal.");
        assertFalse(pairNullValue.equals(new Pair<>("key2", null)), "Pairs with null values and different keys should not be equal.");
        
        assertTrue(pairBothNull.equals(new Pair<>(null, null)), "Pairs with both key and value as null should be equal to another pair with both key and value as null.");
    }
}


No.7 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {

    @Test
    public void equalsTest() {
        Pair<String, String> pair1 = new Pair<>("key1", "value1");
        Pair<String, String> pair2 = new Pair<>("key1", "value1");
        Pair<String, String> pair3 = new Pair<>("key2", "value2");
        Pair<String, String> pair4 = new Pair<>(null, "value1");
        Pair<String, String> pair5 = new Pair<>("key1", null);
        Pair<String, String> pair6 = new Pair<>(null, null);

        // Test reflexivity
        assertTrue(pair1.equals(pair1), "Pair should be equal to itself");

        // Test symmetry
        assertTrue(pair1.equals(pair2), "Pairs with same key and value should be equal");
        assertTrue(pair2.equals(pair1), "Pairs with same key and value should be equal");

        // Test transitivity
        if (pair1.equals(pair2) && pair2.equals(pair3)) {
            assertTrue(pair1.equals(pair3), "Transitivity of equals failed");
        }

        // Test null comparison
        assertFalse(pair1.equals(null), "Pair should not be equal to null");

        // Test against different types
        assertFalse(pair1.equals(new Object()), "Pair should not be equal to an object of a different type");

        // Test pairs with different keys
        assertFalse(pair1.equals(pair3), "Pairs with different keys should not be equal");

        // Test differentiating on null key
        assertFalse(pair1.equals(pair4), "Pairs with and without null keys should not be equal");

        // Test differentiating on null value
        assertFalse(pair1.equals(pair5), "Pairs with and without null values should not be equal");

        // Test both null key and value
        assertTrue(pair6.equals(new Pair<>(null, null)), "Pairs with both null keys and null values should be equal");
    }
}


No.8 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {
    
    @Test
    public void equalsTest() {
        Pair<Integer, String> pair1 = new Pair<>(1, "first");
        Pair<Integer, String> pair2 = new Pair<>(1, "first");
        Pair<Integer, String> pair3 = new Pair<>(2, "second");
        Pair<Integer, String> pair4 = new Pair<>(null, "first");
        Pair<Integer, String> pair5 = new Pair<>(1, null);
        Pair<Integer, String> pair6 = new Pair<>(null, null);

        // Positive test cases
        assertTrue(pair1.equals(pair2), "Pairs with same key and value should be equal.");

        // Negative test cases
        assertFalse(pair1.equals(pair3), "Pairs with different keys should not be equal.");
        assertFalse(pair1.equals(pair4), "Pairs with null key in one should not be equal.");
        assertFalse(pair1.equals(pair5), "Pairs with null value in one should not be equal.");
        assertFalse(pair1.equals(null), "Pair compared with null should not be equal.");
        assertFalse(pair1.equals(new Object()), "Pair compared with non-pair object should not be equal.");

        // Test with nulls in pairs
        assertTrue(pair4.equals(new Pair<Integer, String>(null, "first")),
            "Pairs with same value and null key should be equal.");
        assertTrue(pair5.equals(new Pair<Integer, String>(1, null)),
            "Pairs with same key and null value should be equal.");

        // Test reflexivity, symmetry, and transitivity
        assertTrue(pair1.equals(pair1), "Reflexivity: Pair should be equal to itself.");
        assertTrue(pair2.equals(pair1), "Symmetry: If pair1 equals pair2, then pair2 should equal pair1.");
        
        Pair<Integer, String> pair2Copy = new Pair<>(1, "first");
        assertTrue(pair1.equals(pair2) && pair2.equals(pair2Copy) && pair1.equals(pair2Copy),
            "Transitivity: If pair1 equals pair2 and pair2 equals pair2Copy, then pair1 should equal pair2Copy.");

        // Test null values equal to each other
        assertTrue(pair6.equals(new Pair<>(null, null)),
            "Pairs with both keys and values as null should be equal.");
    }
}


No.9 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {
    @Test
    public void equalsTest() {
        Pair<String, String> pair1 = new Pair<>("key1", "value1");
        Pair<String, String> pair2 = new Pair<>("key1", "value1");
        Pair<String, String> pair3 = new Pair<>("key2", "value2");
        Pair<String, String> pair4 = null;
        Pair<String, String> pairWithNullKey = new Pair<>(null, "value1");
        Pair<String, String> pairWithNullValue = new Pair<>("key1", null);
        Pair<String, String> pairWithBothNull = new Pair<>(null, null);
        Pair<String, String> anotherPairWithNullKey = new Pair<>(null, "value2");
        Pair<String, String> anotherPairWithNullValue = new Pair<>("key2", null);
        Object nonPairObject = new Object();

        // Testing reflexivity - a pair should equal itself
        assertTrue(pair1.equals(pair1));

        // Testing symmetry and transitivity - two pairs with the same content should be equal
        assertTrue(pair1.equals(pair2) && pair2.equals(pair1));

        // Testing null comparison - comparing a pair to null should return false
        assertFalse(pair1.equals(pair4));

        // Testing inequality - pairs with different keys or values should not be equal
        assertFalse(pair1.equals(pair3));
        assertFalse(pairWithNullKey.equals(pair1));
        assertFalse(pairWithNullValue.equals(pair1));

        // Comparing pairs where one has a null key
        assertFalse(pairWithNullKey.equals(anotherPairWithNullKey));

        // Comparing pairs where one has a null value
        assertFalse(pairWithNullValue.equals(anotherPairWithNullValue));

        // Comparing pairs where both key and value are null
        assertTrue(pairWithBothNull.equals(new Pair<>(null, null)));

        // Comparing a pair to an object of another class should return false
        assertFalse(pair1.equals(nonPairObject));
    }
}


No.10 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {
    @Test
    public void equalsTest() {
        // Test equal pairs with non-null key and value
        Pair<String, String> pair1 = new Pair<>("key", "value");
        Pair<String, String> pair2 = new Pair<>("key", "value");
        assertTrue(pair1.equals(pair2));
        assertTrue(pair2.equals(pair1));

        // Test equal pairs with null key and non-null value
        Pair<String, String> pairWithNullKey1 = new Pair<>(null, "value");
        Pair<String, String> pairWithNullKey2 = new Pair<>(null, "value");
        assertTrue(pairWithNullKey1.equals(pairWithNullKey2));
        assertTrue(pairWithNullKey2.equals(pairWithNullKey1));

        // Test equal pairs with non-null key and null value
        Pair<String, String> pairWithNullValue1 = new Pair<>("key", null);
        Pair<String, String> pairWithNullValue2 = new Pair<>("key", null);
        assertTrue(pairWithNullValue1.equals(pairWithNullValue2));
        assertTrue(pairWithNullValue2.equals(pairWithNullValue1));

        // Test equal pairs with null key and null value
        Pair<String, String> pairWithNullKeyAndValue1 = new Pair<>(null, null);
        Pair<String, String> pairWithNullKeyAndValue2 = new Pair<>(null, null);
        assertTrue(pairWithNullKeyAndValue1.equals(pairWithNullKeyAndValue2));
        assertTrue(pairWithNullKeyAndValue2.equals(pairWithNullKeyAndValue1));

        // Test non-equal pairs due to different keys
        Pair<String, String> pairWithDifferentKey = new Pair<>("differentKey", "value");
        assertFalse(pair1.equals(pairWithDifferentKey));

        // Test non-equal pairs due to different values
        Pair<String, String> pairWithDifferentValue = new Pair<>("key", "differentValue");
        assertFalse(pair1.equals(pairWithDifferentValue));

        // Test non-equal pairs when one has null key
        Pair<String, String> pairWithKey1 = new Pair<>("key", "value");
        Pair<String, String> pairWithNullKey3 = new Pair<>(null, "value");
        assertFalse(pairWithKey1.equals(pairWithNullKey3));

        // Test non-equal pairs when one has null value
        Pair<String, String> pairWithValue1 = new Pair<>("key", "value");
        Pair<String, String> pairWithNullValue3 = new Pair<>("key", null);
        assertFalse(pairWithValue1.equals(pairWithNullValue3));

        // Test equality with self
        assertTrue(pair1.equals(pair1));

        // Test equality with non-Pair object
        Object differentClassObject = new Object();
        assertFalse(pair1.equals(differentClassObject));

        // Test equality with null
        assertFalse(pair1.equals(null));
    }
}


