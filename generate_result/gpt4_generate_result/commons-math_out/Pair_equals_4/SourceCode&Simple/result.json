{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compare the specified object with this entry for equality.\n     *\n     * @param o Object.\n     * @return {@code true} if the given object is also a map entry and\n     * the two entries represent the same mapping.\n     */",
    "source_code": "\n@Override\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (!(o instanceof Pair)) {\n        return false;\n    } else {\n        Pair<?, ?> oP = (Pair<?, ?>) o;\n        return (key == null ?\n                oP.key == null :\n                key.equals(oP.key)) &&\n            (value == null ?\n             oP.value == null :\n             value.equals(oP.value));\n    }\n}\n",
    "class_name": "Pair",
    "method_name": "equals",
    "arguments": [
        "Object o"
    ],
    "generate_test": [
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    \n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value2\");\n        Pair<String, String> pair4 = new Pair<>(null, \"value1\");\n        Pair<String, String> pair5 = new Pair<>(\"key1\", null);\n        Pair<String, String> pair6 = new Pair<>(null, null);\n\n        assertEquals(pair1, pair2, \"Two pairs with the same key and value should be equal.\");\n        assertNotEquals(pair1, pair3, \"Two pairs with different keys and values should not be equal.\");\n        assertNotEquals(pair1, pair4, \"Two pairs with the first key null should not be equal.\");\n        assertNotEquals(pair1, pair5, \"Two pairs with the first value null should not be equal.\");\n        assertNotEquals(pair4, pair5, \"Two pairs with only one null key/value should not be equal.\");\n        assertEquals(pair4, new Pair<>(null, \"value1\"), \"Two pairs with same null key and same value should be equal.\");\n        assertEquals(pair5, new Pair<>(\"key1\", null), \"Two pairs with same key and null values should be equal.\");\n        assertEquals(pair6, new Pair<>(null, null), \"Two pairs with null keys and values should be equal.\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void equalsTest() {\n        // Create some pairs to test\n        Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair3 = new Pair<>(2, \"two\");\n        Pair<Integer, String> pairWithNullKey = new Pair<>(null, \"three\");\n        Pair<Integer, String> pairWithNullValue = new Pair<>(3, null);\n        Pair<Integer, String> pairWithBothNull = new Pair<>(null, null);\n        \n        // Test for reflexivity\n        assertTrue(pair1.equals(pair1));\n        \n        // Test for symmetry\n        assertTrue(pair1.equals(pair2));\n        assertTrue(pair2.equals(pair1));\n        \n        // Test for transitivity\n        Pair<Integer, String> pair2Clone = new Pair<>(1, \"one\");\n        assertTrue(pair1.equals(pair2) && pair2.equals(pair2Clone) && pair1.equals(pair2Clone));\n        \n        // Test for nulls\n        assertFalse(pair1.equals(null));\n        \n        // Test for inequality\n        assertFalse(pair1.equals(pair3));\n        assertFalse(pair1.equals(pairWithNullKey));\n        assertFalse(pair1.equals(pairWithNullValue));\n        assertFalse(pair1.equals(pairWithBothNull));\n        \n        // Test for consistency\n        assertTrue(pair1.equals(pair2));\n        assertTrue(pair1.equals(pair2)); // Multiple calls return the same result\n        \n        // Test equals with different object types\n        Object dummyObject = new Object();\n        assertFalse(pair1.equals(dummyObject));\n        \n        // Test for two pairs with null fields\n        assertTrue(pairWithBothNull.equals(new Pair<>(null, null)));\n        \n        // Test with one null key and value\n        assertFalse(pairWithNullKey.equals(pairWithNullValue));\n        assertTrue(pairWithNullKey.equals(new Pair<>(null, \"three\")));\n        assertTrue(pairWithNullValue.equals(new Pair<>(3, null)));\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void equalsTest() {\n        // Create pairs\n        Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair3 = new Pair<>(2, \"two\");\n        Pair<Integer, String> pairNullKey = new Pair<>(null, \"one\");\n        Pair<Integer, String> pairNullValue = new Pair<>(1, null);\n        Pair<Integer, String> pairNullBoth = new Pair<>(null, null);\n\n        // Test equality with the same object\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself.\");\n\n        // Test equality with another object that has the same key and value\n        assertTrue(pair1.equals(pair2), \"Pairs with the same key and value should be equal.\");\n\n        // Test inequality with another object that has different key and value\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys and values should not be equal.\");\n\n        // Test inequality with null\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null.\");\n\n        // Test inequality with an object of different type\n        assertFalse(pair1.equals(\"A String\"), \"Pair should not be equal to an object of a different type.\");\n\n        // Test equality with null key\n        assertFalse(pair1.equals(pairNullKey), \"Pairs should not be equal if one has a null key and the other doesn't.\");\n\n        // Test equality with null value\n        assertFalse(pair1.equals(pairNullValue), \"Pairs should not be equal if one has a null value and the other doesn't.\");\n\n        // Test equality with null key and value\n        assertTrue(pairNullBoth.equals(new Pair<>(null, null)), \"Pairs with both null key and value should be equal.\");\n\n        // Test non-equality with other pair that has a null key and non-null value\n        assertFalse(pairNullKey.equals(pairNullValue), \"Pairs should not be equal if one has a null key and the other has a null value, but different non-null counterpart values.\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void equalsTest() {\n        // Create two pairs with the same key-value pairs\n        Pair<Integer, String> pair1 = new Pair<>(1, \"apple\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"apple\");\n\n        // Create a third pair with different key-value\n        Pair<Integer, String> pair3 = new Pair<>(2, \"banana\");\n\n        // Test equality between same pairs\n        assertTrue(pair1.equals(pair2), \"Pairs with same key-value should be equal\");\n        \n        // Test equality with itself\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself\");\n\n        // Test equality between different pairs\n        assertFalse(pair1.equals(pair3), \"Pairs with different key-value should not be equal\");\n\n        // Test against null\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null\");\n\n        // Test against another object type\n        Object differentObject = new Object();\n        assertFalse(pair1.equals(differentObject), \"Pair should not be equal to a different type of object\");\n\n        // Test with first key being null\n        Pair<Object, String> pairWithNullKey = new Pair<>(null, \"apple\");\n        assertFalse(pairWithNullKey.equals(pair1), \"Pair with null key should not be equal to Pair with non-null key\");\n\n        // Test with both keys being null\n        Pair<Object, String> anotherPairWithNullKey = new Pair<>(null, \"apple\");\n        assertTrue(pairWithNullKey.equals(anotherPairWithNullKey), \"Pairs with null keys should be considered equal\");\n\n        // Test with first value being null \n        Pair<Integer, String> pairWithNullValue = new Pair<>(1, null);\n        assertFalse(pairWithNullValue.equals(pair1), \"Pair with null value should not be equal to Pair with non-null value\");\n\n        // Test with both values being null\n        Pair<Integer, String> anotherPairWithNullValue = new Pair<>(1, null);\n        assertTrue(pairWithNullValue.equals(anotherPairWithNullValue), \"Pairs with null values should be considered equal\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Create two pairs with the same key and value\n        Pair<String, Integer> pair1 = new Pair<>(\"key1\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"key1\", 1);\n\n        // Test equality of pairs with the same content\n        assertEquals(pair1, pair2, \"Pairs with the same key and value should be equal\");\n\n        // Test inequality with different key\n        Pair<String, Integer> pair3 = new Pair<>(\"key2\", 1);\n        assertNotEquals(pair1, pair3, \"Pairs with different keys should not be equal\");\n\n        // Test inequality with different value\n        Pair<String, Integer> pair4 = new Pair<>(\"key1\", 2);\n        assertNotEquals(pair1, pair4, \"Pairs with different values should not be equal\");\n\n        // Test inequality with null key in one pair\n        Pair<String, Integer> pair5 = new Pair<>(null, 1);\n        assertNotEquals(pair1, pair5, \"Pairs with one null key should not be equal\");\n        \n        // Test equality with null keys in both pairs\n        Pair<String, Integer> pair6 = new Pair<>(null, 1);\n        assertEquals(pair5, pair6, \"Pairs with both null keys should be equal\");\n        \n        // Test inequality with null value in one pair\n        Pair<String, Integer> pair7 = new Pair<>(\"key1\", null);\n        assertNotEquals(pair1, pair7, \"Pairs with one null value should not be equal\");\n\n        // Test equality with null values in both pairs\n        Pair<String, Integer> pair8 = new Pair<>(\"key1\", null);\n        assertEquals(pair7, pair8, \"Pairs with both null values should be equal\");\n\n        // Test equality with both key and value as null\n        Pair<String, Integer> pair9 = new Pair<>(null, null);\n        Pair<String, Integer> pair10 = new Pair<>(null, null);\n        assertEquals(pair9, pair10, \"Pairs with both null key and value should be equal\");\n\n        // Test inequality with different object type\n        String nonPairObject = \"NonPairObject\";\n        assertNotEquals(pair1, nonPairObject, \"Pair should not be equal to an object of a different type\");\n\n        // Test equality with itself\n        assertEquals(pair1, pair1, \"Pair should be equal to itself\");\n\n        // Test equality with a new pair with the same content generated from static create method\n        Pair<String, Integer> pair11 = Pair.create(\"key1\", 1);\n        assertEquals(pair1, pair11, \"Pair should be equal to another pair with the same content created using static create method\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void equalsTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair3 = new Pair<>(2, \"two\");\n        Pair<Integer, String> pair4 = new Pair<>(1, null);\n        Pair<Integer, String> pair5 = new Pair<>(null, \"one\");\n        Pair<Integer, String> pair6 = new Pair<>(null, null);\n        \n        // Reflexivity: for any non-null reference value x, x.equals(x) should return true.\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself\");\n\n        // Symmetry: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true.\n        assertTrue(pair1.equals(pair2) && pair2.equals(pair1), \"Pairs should be equal and symmetric\");\n\n        // Transitivity: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.\n        Pair<Integer, String> transitivePair = new Pair<>(1, \"one\");\n        assertTrue(pair1.equals(pair2) && pair2.equals(transitivePair) && pair1.equals(transitivePair), \"Equality should be transitive\");\n\n        // Consistency: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false.\n        assertTrue(pair1.equals(pair2), \"First check\");\n        assertTrue(pair1.equals(pair2), \"Consistent check should give the same result\");\n\n        // For any non-null reference value x, x.equals(null) should return false.\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null\");\n\n        // Check inequality with different key\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys should not be equal\");\n\n        // Check inequality with different value\n        assertFalse(pair1.equals(pair4), \"Pairs with different values should not be equal\");\n\n        // Check equality with same key and both values are null\n        assertTrue(pair4.equals(new Pair<>(1, null)), \"Pairs with same keys and both values as null should be equal\");\n\n        // Check inequality with null key and value\n        assertFalse(pair5.equals(pair6), \"Pairs with different key or value even if null should not be equal\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value2\");\n\n        // Test for equality with the same object\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself\");\n\n        // Test for equality with an identical object\n        assertTrue(pair1.equals(pair2), \"Identical pairs should be considered equal\");\n\n        // Test for inequality with a different object\n        assertFalse(pair1.equals(pair3), \"Different pairs should not be considered equal\");\n\n        // Test for inequality with null\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null\");\n\n        // Test for inequality with an object of another class\n        assertFalse(pair1.equals(\"A String\"), \"Pair should not be equal to an object of a different class\");\n\n        // Test inequality where only one property differs\n        Pair<String, String> pairWithDifferentKey = new Pair<>(\"key3\", \"value1\");\n        Pair<String, String> pairWithDifferentValue = new Pair<>(\"key1\", \"value3\");\n\n        assertFalse(pair1.equals(pairWithDifferentKey), \"Pairs with different keys should not be considered equal\");\n        assertFalse(pair1.equals(pairWithDifferentValue), \"Pairs with different values should not be considered equal\");\n\n        // Test with null properties (keys and values)\n        Pair<String, String> pairWithNullKey = new Pair<>(null, \"value1\");\n        Pair<String, String> pairWithNullValue = new Pair<>(\"key1\", null);\n        Pair<String, String> pairWithBothNull = new Pair<>(null, null);\n\n        assertFalse(pair1.equals(pairWithNullKey), \"Pairs should not be equal if one key is null\");\n        assertFalse(pair1.equals(pairWithNullValue), \"Pairs should not be equal if one value is null\");\n        assertTrue(pairWithNullKey.equals(pairWithBothNull), \"Pairs should be equal if both keys are null\");\n\n        // Test with both null properties\n        assertTrue(pairWithBothNull.equals(new Pair<>(null, null)), \"Pairs with both key and value as null should be equal\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, Integer> pair1 = new Pair<>(\"key1\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"key1\", 1);\n        Pair<String, Integer> pair3 = new Pair<>(\"key2\", 2);\n        Pair<String, Integer> pairWithNullKey = new Pair<>(null, 1);\n        Pair<String, Integer> pairWithNullValue = new Pair<>(\"key1\", null);\n        Pair<String, Integer> pairNullKeyNullValue = new Pair<>(null, null);\n\n        // Test equality for pairs with the same keys and values\n        assertTrue(pair1.equals(pair2), \"Two pairs with the same key and value should be equal.\");\n\n        // Test inequality for different keys and values\n        assertFalse(pair1.equals(pair3), \"Two pairs with different keys or values should not be equal.\");\n\n        // Test against null\n        assertFalse(pair1.equals(null), \"A pair should not be equal to null.\");\n\n        // Test for different object type\n        assertFalse(pair1.equals(new Object()), \"A pair should not be equal to an object of a different type.\");\n        \n        // Test reflexivity\n        assertTrue(pair1.equals(pair1), \"A pair should be equal to itself.\");\n        \n        // Test symmetry\n        assertTrue(pair2.equals(pair1), \"Equality should be symmetric.\");\n\n        // Test transitivity\n        Pair<String, Integer> pair2Clone = new Pair<>(\"key1\", 1);\n        assertTrue(pair1.equals(pair2) && pair2.equals(pair2Clone) && pair1.equals(pair2Clone), \"Equality should be transitive.\");\n\n        // Test pairs with null key\n        assertFalse(pair1.equals(pairWithNullKey), \"Pairs should not be equal if one has a null key and the other does not.\");\n        assertTrue(pairWithNullKey.equals(new Pair<>(null, 1)), \"Two pairs with null keys and the same values should be equal.\");\n\n        // Test pairs with null value\n        assertFalse(pair1.equals(pairWithNullValue), \"Pairs should not be equal if one has a null value and the other does not.\");\n        assertTrue(pairWithNullValue.equals(new Pair<>(\"key1\", null)), \"Two pairs with the same keys and null values should be equal.\");\n\n        // Test pair with null key and value\n        assertTrue(pairNullKeyNullValue.equals(new Pair<>(null, null)), \"Two pairs with both null keys and values should be equal.\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    \n    @Test\n    public void equalsTest() {\n        Pair<String, Integer> pair1 = new Pair<>(\"key1\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"key1\", 1);\n        Pair<String, Integer> pair3 = new Pair<>(\"key2\", 2);\n        Pair<String, Integer> pair4 = new Pair<>(null, 1);\n        Pair<String, Integer> pair5 = new Pair<>(\"key1\", null);\n        Pair<String, Integer> pair6 = new Pair<>(null, null);\n        \n        // Testing self comparison\n        assertTrue(pair1.equals(pair1), \"A pair should be equal to itself.\");\n        \n        // Testing equality with another object that has the same key and value\n        assertTrue(pair1.equals(pair2), \"Pairs with the same key and value should be equal.\");\n        \n        // Testing inequality with another object that has different key and/or value\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys and/or values should not be equal.\");\n        \n        // Testing comparison with null\n        assertFalse(pair1.equals(null), \"A pair should not be equal to null.\");\n        \n        // Testing comparison with a different type\n        assertFalse(pair1.equals(\"A String\"), \"A pair should not be equal to an object of a different type.\");\n        \n        // Testing comparison with pairs having null keys\n        assertFalse(pair4.equals(pair1), \"Pairs with one having null key and the other non-null key should not be equal.\");\n        assertTrue(pair4.equals(pair4), \"Pairs with null keys should be equal.\");\n        \n        // Testing comparison with pairs having null values\n        assertFalse(pair5.equals(pair1), \"Pairs with one having null value and the other non-null value should not be equal.\");\n        assertTrue(pair5.equals(pair5), \"Pairs with null values should be equal.\");\n        \n        // Testing comparison with pair having both key and value as null\n        assertTrue(pair6.equals(pair6), \"Pairs with both key and value as null should be equal.\");\n        assertFalse(pair6.equals(pair1), \"Pairs with one having null key and value and the other with non-null key and value should not be equal.\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    \n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"first\", \"second\");\n        Pair<String, String> pair2 = new Pair<>(\"first\", \"second\");\n        Pair<String, String> pair3 = new Pair<>(\"different\", \"second\");\n        Pair<String, String> pair4 = new Pair<>(null, \"second\");\n        Pair<String, String> pair5 = new Pair<>(\"first\", null);\n        Pair<String, String> pair6 = new Pair<>(null, null);\n        Pair<String, String> pair7 = null;\n\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself.\");\n        assertTrue(pair1.equals(pair2), \"Pair with same values should be equal.\");\n        assertFalse(pair1.equals(pair3), \"Pair with different keys should not be equal.\");\n        assertFalse(pair1.equals(pair4), \"Pair with null key should not be equal to pair with non-null key.\");\n        assertFalse(pair1.equals(pair5), \"Pair with null value should not be equal to pair with non-null value.\");\n        assertFalse(pair4.equals(pair1), \"Pair with non-null key should not be equal to pair with null key.\");\n        assertFalse(pair5.equals(pair1), \"Pair with non-null value should not be equal to pair with null value.\");\n        assertTrue(pair6.equals(pair6), \"Pair with both null key and value should be equal to itself.\");\n        assertFalse(pair1.equals(pair7), \"Pair should not be equal to null.\");\n        assertFalse(pair1.equals(new Object()), \"Pair should not be equal to an object of a different type.\");\n    }\n}"
    ]
}