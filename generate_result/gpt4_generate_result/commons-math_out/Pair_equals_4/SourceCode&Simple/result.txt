Source code: 


@Override
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (!(o instanceof Pair)) {
        return false;
    } else {
        Pair<?, ?> oP = (Pair<?, ?>) o;
        return (key == null ?
                oP.key == null :
                key.equals(oP.key)) &&
            (value == null ?
             oP.value == null :
             value.equals(oP.value));
    }
}



No.1 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {
    
    @Test
    public void equalsTest() {
        Pair<String, String> pair1 = new Pair<>("key1", "value1");
        Pair<String, String> pair2 = new Pair<>("key1", "value1");
        Pair<String, String> pair3 = new Pair<>("key2", "value2");
        Pair<String, String> pair4 = new Pair<>(null, "value1");
        Pair<String, String> pair5 = new Pair<>("key1", null);
        Pair<String, String> pair6 = new Pair<>(null, null);

        assertEquals(pair1, pair2, "Two pairs with the same key and value should be equal.");
        assertNotEquals(pair1, pair3, "Two pairs with different keys and values should not be equal.");
        assertNotEquals(pair1, pair4, "Two pairs with the first key null should not be equal.");
        assertNotEquals(pair1, pair5, "Two pairs with the first value null should not be equal.");
        assertNotEquals(pair4, pair5, "Two pairs with only one null key/value should not be equal.");
        assertEquals(pair4, new Pair<>(null, "value1"), "Two pairs with same null key and same value should be equal.");
        assertEquals(pair5, new Pair<>("key1", null), "Two pairs with same key and null values should be equal.");
        assertEquals(pair6, new Pair<>(null, null), "Two pairs with null keys and values should be equal.");
    }
}


No.2 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {

    @Test
    public void equalsTest() {
        // Create some pairs to test
        Pair<Integer, String> pair1 = new Pair<>(1, "one");
        Pair<Integer, String> pair2 = new Pair<>(1, "one");
        Pair<Integer, String> pair3 = new Pair<>(2, "two");
        Pair<Integer, String> pairWithNullKey = new Pair<>(null, "three");
        Pair<Integer, String> pairWithNullValue = new Pair<>(3, null);
        Pair<Integer, String> pairWithBothNull = new Pair<>(null, null);
        
        // Test for reflexivity
        assertTrue(pair1.equals(pair1));
        
        // Test for symmetry
        assertTrue(pair1.equals(pair2));
        assertTrue(pair2.equals(pair1));
        
        // Test for transitivity
        Pair<Integer, String> pair2Clone = new Pair<>(1, "one");
        assertTrue(pair1.equals(pair2) && pair2.equals(pair2Clone) && pair1.equals(pair2Clone));
        
        // Test for nulls
        assertFalse(pair1.equals(null));
        
        // Test for inequality
        assertFalse(pair1.equals(pair3));
        assertFalse(pair1.equals(pairWithNullKey));
        assertFalse(pair1.equals(pairWithNullValue));
        assertFalse(pair1.equals(pairWithBothNull));
        
        // Test for consistency
        assertTrue(pair1.equals(pair2));
        assertTrue(pair1.equals(pair2)); // Multiple calls return the same result
        
        // Test equals with different object types
        Object dummyObject = new Object();
        assertFalse(pair1.equals(dummyObject));
        
        // Test for two pairs with null fields
        assertTrue(pairWithBothNull.equals(new Pair<>(null, null)));
        
        // Test with one null key and value
        assertFalse(pairWithNullKey.equals(pairWithNullValue));
        assertTrue(pairWithNullKey.equals(new Pair<>(null, "three")));
        assertTrue(pairWithNullValue.equals(new Pair<>(3, null)));
    }
}


No.3 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {

    @Test
    public void equalsTest() {
        // Create pairs
        Pair<Integer, String> pair1 = new Pair<>(1, "one");
        Pair<Integer, String> pair2 = new Pair<>(1, "one");
        Pair<Integer, String> pair3 = new Pair<>(2, "two");
        Pair<Integer, String> pairNullKey = new Pair<>(null, "one");
        Pair<Integer, String> pairNullValue = new Pair<>(1, null);
        Pair<Integer, String> pairNullBoth = new Pair<>(null, null);

        // Test equality with the same object
        assertTrue(pair1.equals(pair1), "Pair should be equal to itself.");

        // Test equality with another object that has the same key and value
        assertTrue(pair1.equals(pair2), "Pairs with the same key and value should be equal.");

        // Test inequality with another object that has different key and value
        assertFalse(pair1.equals(pair3), "Pairs with different keys and values should not be equal.");

        // Test inequality with null
        assertFalse(pair1.equals(null), "Pair should not be equal to null.");

        // Test inequality with an object of different type
        assertFalse(pair1.equals("A String"), "Pair should not be equal to an object of a different type.");

        // Test equality with null key
        assertFalse(pair1.equals(pairNullKey), "Pairs should not be equal if one has a null key and the other doesn't.");

        // Test equality with null value
        assertFalse(pair1.equals(pairNullValue), "Pairs should not be equal if one has a null value and the other doesn't.");

        // Test equality with null key and value
        assertTrue(pairNullBoth.equals(new Pair<>(null, null)), "Pairs with both null key and value should be equal.");

        // Test non-equality with other pair that has a null key and non-null value
        assertFalse(pairNullKey.equals(pairNullValue), "Pairs should not be equal if one has a null key and the other has a null value, but different non-null counterpart values.");
    }
}


No.4 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {

    @Test
    public void equalsTest() {
        // Create two pairs with the same key-value pairs
        Pair<Integer, String> pair1 = new Pair<>(1, "apple");
        Pair<Integer, String> pair2 = new Pair<>(1, "apple");

        // Create a third pair with different key-value
        Pair<Integer, String> pair3 = new Pair<>(2, "banana");

        // Test equality between same pairs
        assertTrue(pair1.equals(pair2), "Pairs with same key-value should be equal");
        
        // Test equality with itself
        assertTrue(pair1.equals(pair1), "Pair should be equal to itself");

        // Test equality between different pairs
        assertFalse(pair1.equals(pair3), "Pairs with different key-value should not be equal");

        // Test against null
        assertFalse(pair1.equals(null), "Pair should not be equal to null");

        // Test against another object type
        Object differentObject = new Object();
        assertFalse(pair1.equals(differentObject), "Pair should not be equal to a different type of object");

        // Test with first key being null
        Pair<Object, String> pairWithNullKey = new Pair<>(null, "apple");
        assertFalse(pairWithNullKey.equals(pair1), "Pair with null key should not be equal to Pair with non-null key");

        // Test with both keys being null
        Pair<Object, String> anotherPairWithNullKey = new Pair<>(null, "apple");
        assertTrue(pairWithNullKey.equals(anotherPairWithNullKey), "Pairs with null keys should be considered equal");

        // Test with first value being null 
        Pair<Integer, String> pairWithNullValue = new Pair<>(1, null);
        assertFalse(pairWithNullValue.equals(pair1), "Pair with null value should not be equal to Pair with non-null value");

        // Test with both values being null
        Pair<Integer, String> anotherPairWithNullValue = new Pair<>(1, null);
        assertTrue(pairWithNullValue.equals(anotherPairWithNullValue), "Pairs with null values should be considered equal");
    }
}


No.5 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {
    @Test
    public void equalsTest() {
        // Create two pairs with the same key and value
        Pair<String, Integer> pair1 = new Pair<>("key1", 1);
        Pair<String, Integer> pair2 = new Pair<>("key1", 1);

        // Test equality of pairs with the same content
        assertEquals(pair1, pair2, "Pairs with the same key and value should be equal");

        // Test inequality with different key
        Pair<String, Integer> pair3 = new Pair<>("key2", 1);
        assertNotEquals(pair1, pair3, "Pairs with different keys should not be equal");

        // Test inequality with different value
        Pair<String, Integer> pair4 = new Pair<>("key1", 2);
        assertNotEquals(pair1, pair4, "Pairs with different values should not be equal");

        // Test inequality with null key in one pair
        Pair<String, Integer> pair5 = new Pair<>(null, 1);
        assertNotEquals(pair1, pair5, "Pairs with one null key should not be equal");
        
        // Test equality with null keys in both pairs
        Pair<String, Integer> pair6 = new Pair<>(null, 1);
        assertEquals(pair5, pair6, "Pairs with both null keys should be equal");
        
        // Test inequality with null value in one pair
        Pair<String, Integer> pair7 = new Pair<>("key1", null);
        assertNotEquals(pair1, pair7, "Pairs with one null value should not be equal");

        // Test equality with null values in both pairs
        Pair<String, Integer> pair8 = new Pair<>("key1", null);
        assertEquals(pair7, pair8, "Pairs with both null values should be equal");

        // Test equality with both key and value as null
        Pair<String, Integer> pair9 = new Pair<>(null, null);
        Pair<String, Integer> pair10 = new Pair<>(null, null);
        assertEquals(pair9, pair10, "Pairs with both null key and value should be equal");

        // Test inequality with different object type
        String nonPairObject = "NonPairObject";
        assertNotEquals(pair1, nonPairObject, "Pair should not be equal to an object of a different type");

        // Test equality with itself
        assertEquals(pair1, pair1, "Pair should be equal to itself");

        // Test equality with a new pair with the same content generated from static create method
        Pair<String, Integer> pair11 = Pair.create("key1", 1);
        assertEquals(pair1, pair11, "Pair should be equal to another pair with the same content created using static create method");
    }
}


No.6 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {

    @Test
    public void equalsTest() {
        Pair<Integer, String> pair1 = new Pair<>(1, "one");
        Pair<Integer, String> pair2 = new Pair<>(1, "one");
        Pair<Integer, String> pair3 = new Pair<>(2, "two");
        Pair<Integer, String> pair4 = new Pair<>(1, null);
        Pair<Integer, String> pair5 = new Pair<>(null, "one");
        Pair<Integer, String> pair6 = new Pair<>(null, null);
        
        // Reflexivity: for any non-null reference value x, x.equals(x) should return true.
        assertTrue(pair1.equals(pair1), "Pair should be equal to itself");

        // Symmetry: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true.
        assertTrue(pair1.equals(pair2) && pair2.equals(pair1), "Pairs should be equal and symmetric");

        // Transitivity: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.
        Pair<Integer, String> transitivePair = new Pair<>(1, "one");
        assertTrue(pair1.equals(pair2) && pair2.equals(transitivePair) && pair1.equals(transitivePair), "Equality should be transitive");

        // Consistency: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false.
        assertTrue(pair1.equals(pair2), "First check");
        assertTrue(pair1.equals(pair2), "Consistent check should give the same result");

        // For any non-null reference value x, x.equals(null) should return false.
        assertFalse(pair1.equals(null), "Pair should not be equal to null");

        // Check inequality with different key
        assertFalse(pair1.equals(pair3), "Pairs with different keys should not be equal");

        // Check inequality with different value
        assertFalse(pair1.equals(pair4), "Pairs with different values should not be equal");

        // Check equality with same key and both values are null
        assertTrue(pair4.equals(new Pair<>(1, null)), "Pairs with same keys and both values as null should be equal");

        // Check inequality with null key and value
        assertFalse(pair5.equals(pair6), "Pairs with different key or value even if null should not be equal");
    }
}


No.7 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class PairTest {
    @Test
    public void equalsTest() {
        Pair<String, String> pair1 = new Pair<>("key1", "value1");
        Pair<String, String> pair2 = new Pair<>("key1", "value1");
        Pair<String, String> pair3 = new Pair<>("key2", "value2");

        // Test for equality with the same object
        assertTrue(pair1.equals(pair1), "Pair should be equal to itself");

        // Test for equality with an identical object
        assertTrue(pair1.equals(pair2), "Identical pairs should be considered equal");

        // Test for inequality with a different object
        assertFalse(pair1.equals(pair3), "Different pairs should not be considered equal");

        // Test for inequality with null
        assertFalse(pair1.equals(null), "Pair should not be equal to null");

        // Test for inequality with an object of another class
        assertFalse(pair1.equals("A String"), "Pair should not be equal to an object of a different class");

        // Test inequality where only one property differs
        Pair<String, String> pairWithDifferentKey = new Pair<>("key3", "value1");
        Pair<String, String> pairWithDifferentValue = new Pair<>("key1", "value3");

        assertFalse(pair1.equals(pairWithDifferentKey), "Pairs with different keys should not be considered equal");
        assertFalse(pair1.equals(pairWithDifferentValue), "Pairs with different values should not be considered equal");

        // Test with null properties (keys and values)
        Pair<String, String> pairWithNullKey = new Pair<>(null, "value1");
        Pair<String, String> pairWithNullValue = new Pair<>("key1", null);
        Pair<String, String> pairWithBothNull = new Pair<>(null, null);

        assertFalse(pair1.equals(pairWithNullKey), "Pairs should not be equal if one key is null");
        assertFalse(pair1.equals(pairWithNullValue), "Pairs should not be equal if one value is null");
        assertTrue(pairWithNullKey.equals(pairWithBothNull), "Pairs should be equal if both keys are null");

        // Test with both null properties
        assertTrue(pairWithBothNull.equals(new Pair<>(null, null)), "Pairs with both key and value as null should be equal");
    }
}


No.8 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {
    @Test
    public void equalsTest() {
        Pair<String, Integer> pair1 = new Pair<>("key1", 1);
        Pair<String, Integer> pair2 = new Pair<>("key1", 1);
        Pair<String, Integer> pair3 = new Pair<>("key2", 2);
        Pair<String, Integer> pairWithNullKey = new Pair<>(null, 1);
        Pair<String, Integer> pairWithNullValue = new Pair<>("key1", null);
        Pair<String, Integer> pairNullKeyNullValue = new Pair<>(null, null);

        // Test equality for pairs with the same keys and values
        assertTrue(pair1.equals(pair2), "Two pairs with the same key and value should be equal.");

        // Test inequality for different keys and values
        assertFalse(pair1.equals(pair3), "Two pairs with different keys or values should not be equal.");

        // Test against null
        assertFalse(pair1.equals(null), "A pair should not be equal to null.");

        // Test for different object type
        assertFalse(pair1.equals(new Object()), "A pair should not be equal to an object of a different type.");
        
        // Test reflexivity
        assertTrue(pair1.equals(pair1), "A pair should be equal to itself.");
        
        // Test symmetry
        assertTrue(pair2.equals(pair1), "Equality should be symmetric.");

        // Test transitivity
        Pair<String, Integer> pair2Clone = new Pair<>("key1", 1);
        assertTrue(pair1.equals(pair2) && pair2.equals(pair2Clone) && pair1.equals(pair2Clone), "Equality should be transitive.");

        // Test pairs with null key
        assertFalse(pair1.equals(pairWithNullKey), "Pairs should not be equal if one has a null key and the other does not.");
        assertTrue(pairWithNullKey.equals(new Pair<>(null, 1)), "Two pairs with null keys and the same values should be equal.");

        // Test pairs with null value
        assertFalse(pair1.equals(pairWithNullValue), "Pairs should not be equal if one has a null value and the other does not.");
        assertTrue(pairWithNullValue.equals(new Pair<>("key1", null)), "Two pairs with the same keys and null values should be equal.");

        // Test pair with null key and value
        assertTrue(pairNullKeyNullValue.equals(new Pair<>(null, null)), "Two pairs with both null keys and values should be equal.");
    }
}


No.9 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {
    
    @Test
    public void equalsTest() {
        Pair<String, Integer> pair1 = new Pair<>("key1", 1);
        Pair<String, Integer> pair2 = new Pair<>("key1", 1);
        Pair<String, Integer> pair3 = new Pair<>("key2", 2);
        Pair<String, Integer> pair4 = new Pair<>(null, 1);
        Pair<String, Integer> pair5 = new Pair<>("key1", null);
        Pair<String, Integer> pair6 = new Pair<>(null, null);
        
        // Testing self comparison
        assertTrue(pair1.equals(pair1), "A pair should be equal to itself.");
        
        // Testing equality with another object that has the same key and value
        assertTrue(pair1.equals(pair2), "Pairs with the same key and value should be equal.");
        
        // Testing inequality with another object that has different key and/or value
        assertFalse(pair1.equals(pair3), "Pairs with different keys and/or values should not be equal.");
        
        // Testing comparison with null
        assertFalse(pair1.equals(null), "A pair should not be equal to null.");
        
        // Testing comparison with a different type
        assertFalse(pair1.equals("A String"), "A pair should not be equal to an object of a different type.");
        
        // Testing comparison with pairs having null keys
        assertFalse(pair4.equals(pair1), "Pairs with one having null key and the other non-null key should not be equal.");
        assertTrue(pair4.equals(pair4), "Pairs with null keys should be equal.");
        
        // Testing comparison with pairs having null values
        assertFalse(pair5.equals(pair1), "Pairs with one having null value and the other non-null value should not be equal.");
        assertTrue(pair5.equals(pair5), "Pairs with null values should be equal.");
        
        // Testing comparison with pair having both key and value as null
        assertTrue(pair6.equals(pair6), "Pairs with both key and value as null should be equal.");
        assertFalse(pair6.equals(pair1), "Pairs with one having null key and value and the other with non-null key and value should not be equal.");
    }
}


No.10 generated result --------------------------

package org.apache.commons.math4.legacy.core;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class PairTest {
    
    @Test
    public void equalsTest() {
        Pair<String, String> pair1 = new Pair<>("first", "second");
        Pair<String, String> pair2 = new Pair<>("first", "second");
        Pair<String, String> pair3 = new Pair<>("different", "second");
        Pair<String, String> pair4 = new Pair<>(null, "second");
        Pair<String, String> pair5 = new Pair<>("first", null);
        Pair<String, String> pair6 = new Pair<>(null, null);
        Pair<String, String> pair7 = null;

        assertTrue(pair1.equals(pair1), "Pair should be equal to itself.");
        assertTrue(pair1.equals(pair2), "Pair with same values should be equal.");
        assertFalse(pair1.equals(pair3), "Pair with different keys should not be equal.");
        assertFalse(pair1.equals(pair4), "Pair with null key should not be equal to pair with non-null key.");
        assertFalse(pair1.equals(pair5), "Pair with null value should not be equal to pair with non-null value.");
        assertFalse(pair4.equals(pair1), "Pair with non-null key should not be equal to pair with null key.");
        assertFalse(pair5.equals(pair1), "Pair with non-null value should not be equal to pair with null value.");
        assertTrue(pair6.equals(pair6), "Pair with both null key and value should be equal to itself.");
        assertFalse(pair1.equals(pair7), "Pair should not be equal to null.");
        assertFalse(pair1.equals(new Object()), "Pair should not be equal to an object of a different type.");
    }
}


