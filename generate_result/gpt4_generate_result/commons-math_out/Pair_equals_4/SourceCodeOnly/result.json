{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compare the specified object with this entry for equality.\n     *\n     * @param o Object.\n     * @return {@code true} if the given object is also a map entry and\n     * the two entries represent the same mapping.\n     */",
    "source_code": "\n@Override\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (!(o instanceof Pair)) {\n        return false;\n    } else {\n        Pair<?, ?> oP = (Pair<?, ?>) o;\n        return (key == null ?\n                oP.key == null :\n                key.equals(oP.key)) &&\n            (value == null ?\n             oP.value == null :\n             value.equals(oP.value));\n    }\n}\n",
    "class_name": "Pair",
    "method_name": "equals",
    "arguments": [
        "Object o"
    ],
    "generate_test": [
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Pair<K, V> {\n    private K key;\n    private V value;\n    \n    // Assume we have a constructor and other relevant methods here\n    \n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (!(o instanceof Pair)) {\n            return false;\n        } else {\n            Pair<?, ?> oP = (Pair<?, ?>) o;\n            return (key == null ?\n                    oP.key == null :\n                    key.equals(oP.key)) &&\n                (value == null ?\n                 oP.value == null :\n                 value.equals(oP.value));\n        }\n    }\n    \n    // Getters and Setters for key and value, if necessary, for testing purposes.\n}\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair3 = new Pair<>(\"differentKey\", \"value\");\n        Pair<String, String> pair4 = new Pair<>(\"key\", \"differentValue\");\n        Pair<String, String> pair5 = new Pair<>(null, \"value\");\n        Pair<String, String> pair6 = new Pair<>(\"key\", null);\n        Pair<String, String> pair7 = new Pair<>(null, null);\n        \n        // Test for equality with same object\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself.\");\n        \n        // Test for equality with different object but same values\n        assertTrue(pair1.equals(pair2), \"Pairs with the same key and value should be equal.\");\n        \n        // Test for inequality with different keys\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys should not be equal.\");\n        \n        // Test for inequality with different values\n        assertFalse(pair1.equals(pair4), \"Pairs with different values should not be equal.\");\n        \n        // Test for equality with null key in one of the pairs\n        assertFalse(pair1.equals(pair5), \"Pairs with null key and non-null key should not be equal.\");\n        \n        // Test for equality with null value in one of the pairs\n        assertFalse(pair1.equals(pair6), \"Pairs with null value and non-null value should not be equal.\");\n        \n        // Test for equality with both pairs having null keys and values\n        assertTrue(pair7.equals(pair7), \"Pairs with both null key and value should be equal.\");\n        \n        // Test for equality with one pair having null key and value with non-null key and value pair\n        assertFalse(pair1.equals(pair7), \"Pair with non-null key and value should not be equal to pair with null key and value.\");\n        \n        // Test for inequality with non-Pair object\n        assertFalse(pair1.equals(new Object()), \"Pair should not be equal to a non-Pair object.\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Pair<K, V> {\n    private K key;\n    private V value;\n\n    public Pair(K key, V value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        // provided implementation\n    }\n\n    // ... rest of Pair class (hashCode, getters, etc.) ...\n}\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair3 = new Pair<>(2, \"two\");\n        Pair<Integer, String> pair4 = new Pair<>(null, \"one\");\n        Pair<Integer, String> pair5 = new Pair<>(1, null);\n        Pair<Integer, String> pair6 = new Pair<>(null, null);\n\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself.\");\n        assertTrue(pair1.equals(pair2), \"Pairs with same key and value should be equal.\");\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys should not be equal.\");\n        assertFalse(pair1.equals(pair4), \"Pairs with different keys should not be equal.\");\n        assertFalse(pair1.equals(pair5), \"Pairs with different values should not be equal.\");\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null.\");\n        assertFalse(pair1.equals(new Object()), \"Pair should not be equal to an object of a different class.\");\n        assertTrue(pair4.equals(new Pair<>(null, \"one\")), \"Pairs with null keys and same values should be equal.\");\n        assertTrue(pair5.equals(new Pair<>(1, null)), \"Pairs with the same key and null values should be equal.\");\n        assertTrue(pair6.equals(new Pair<>(null, null)), \"Pairs with null keys and null values should be equal.\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pairDifferentKey = new Pair<>(\"key2\", \"value1\");\n        Pair<String, String> pairDifferentValue = new Pair<>(\"key1\", \"value2\");\n        Pair<String, String> pairDifferentBoth = new Pair<>(\"key2\", \"value2\");\n        Pair<String, String> pairNullKey = new Pair<>(null, \"value1\");\n        Pair<String, String> pairNullValue = new Pair<>(\"key1\", null);\n        Pair<String, String> pairNullBoth = new Pair<>(null, null);\n\n        // Test equality and non-equality\n        assertTrue(pair1.equals(pair1), \"Pair should be equal to itself\");\n        assertTrue(pair1.equals(pair2), \"Pairs with the same key and value should be equal\");\n        \n        assertFalse(pair1.equals(pairDifferentKey), \"Pairs with different keys should not be equal\");\n        assertFalse(pair1.equals(pairDifferentValue), \"Pairs with different values should not be equal\");\n        assertFalse(pair1.equals(pairDifferentBoth), \"Pairs with different keys and values should not be equal\");\n        \n        // Test null key and/or value\n        assertFalse(pair1.equals(pairNullKey), \"Pair with a null key should not be equal to pair with non-null key\");\n        assertFalse(pair1.equals(pairNullValue), \"Pair with a null value should not be equal to pair with non-null value\");\n        assertFalse(pairNullKey.equals(pairNullValue), \"Pairs with different null properties should not be equal\");\n        \n        assertTrue(pairNullKey.equals(new Pair<>(null, \"value1\")), \"Pairs with same null key should be equal\");\n        assertTrue(pairNullValue.equals(new Pair<>(\"key1\", null)), \"Pairs with same null value should be equal\");\n        assertTrue(pairNullBoth.equals(new Pair<>(null, null)), \"Pairs with both null key and value should be equal\");\n        \n        // Test against non-Pair objects\n        assertFalse(pair1.equals(null), \"Pair should not be equal to null\");\n        assertFalse(pair1.equals(\"A string\"), \"Pair should not be equal to a string\");\n    }\n    \n    private static class Pair<K, V> {\n        private K key;\n        private V value;\n\n        public Pair(K key, V value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) {\n                return true;\n            }\n            if (!(o instanceof Pair)) {\n                return false;\n            } else {\n                Pair<?, ?> oP = (Pair<?, ?>) o;\n                return (key == null ?\n                        oP.key == null :\n                        key.equals(oP.key)) &&\n                       (value == null ?\n                        oP.value == null :\n                        value.equals(oP.value));\n            }\n        }\n\n        // Other methods of the Pair class...\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    private static class Pair<K, V> {\n        private K key;\n        private V value;\n\n        public Pair(K key, V value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) {\n                return true;\n            }\n            if (!(o instanceof Pair)) {\n                return false;\n            } else {\n                Pair<?, ?> oP = (Pair<?, ?>) o;\n                return (key == null ?\n                        oP.key == null :\n                        key.equals(oP.key)) &&\n                       (value == null ?\n                        oP.value == null :\n                        value.equals(oP.value));\n            }\n        }\n\n        // hashCode and other methods are not shown for brevity.\n    }\n\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair3 = new Pair<>(\"differentKey\", \"value\");\n        Pair<String, String> pair4 = new Pair<>(\"key\", \"differentValue\");\n        Pair<String, String> pair5 = null;\n\n        // Test for same reference\n        assertTrue(pair1.equals(pair1), \"A pair should be equal to itself.\");\n\n        // Test for equal objects\n        assertTrue(pair1.equals(pair2), \"Pairs with the same key and value should be equal.\");\n\n        // Test for different keys\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys should not be equal.\");\n\n        // Test for different values\n        assertFalse(pair1.equals(pair4), \"Pairs with different values should not be equal.\");\n\n        // Test with null\n        assertFalse(pair1.equals(pair5), \"Pairs should not be equal to null.\");\n\n        // Test against different class/object type\n        assertFalse(pair1.equals(new Object()), \"Pairs should not be equal to a different type of object.\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, Integer> pair1 = new Pair<>(\"key1\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"key1\", 1);\n        Pair<String, Integer> pair3 = new Pair<>(\"key2\", 2);\n        Pair<String, Integer> pair4 = new Pair<>(null, 1);\n        Pair<String, Integer> pair5 = new Pair<>(\"key1\", null);\n        Pair<String, Integer> pair6 = new Pair<>(null, null);\n\n        // Test for reflexivity\n        assertTrue(pair1.equals(pair1));\n\n        // Test for symmetry\n        assertTrue(pair1.equals(pair2) && pair2.equals(pair1));\n\n        // Test for transitivity\n        if(pair1.equals(pair2) && pair2.equals(pair3)){\n            assertTrue(pair1.equals(pair3));\n        }\n\n        // Test for null comparison\n        assertFalse(pair1.equals(null));\n\n        // Test for different objects comparison\n        assertFalse(pair1.equals(\"Not A Pair\"));\n\n        // Test with different keys\n        assertFalse(pair1.equals(pair3));\n\n        // Test with at least one null key\n        assertFalse(pair4.equals(pair1));\n        assertFalse(pair1.equals(pair4));\n\n        // Test with at least one null value\n        assertFalse(pair5.equals(pair1));\n        assertFalse(pair1.equals(pair5));\n\n        // Test with both null key and value\n        assertTrue(pair6.equals(new Pair<>(null, null)));\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Pair<K, V> {\n    K key;\n    V value;\n    \n    // Constructor, getters, and other methods are not shown for brevity\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (!(o instanceof Pair)) {\n            return false;\n        } else {\n            Pair<?, ?> oP = (Pair<?, ?>) o;\n            return (key == null ?\n                    oP.key == null :\n                    key.equals(oP.key)) &&\n                (value == null ?\n                 oP.value == null :\n                 value.equals(oP.value));\n        }\n    }\n}\n\npublic class PairTest {\n\n    @Test\n    public void equalsTest() {\n        Pair<Integer, String> pair1 = new Pair<>();\n        Pair<Integer, String> pair2 = new Pair<>();\n        Pair<Integer, String> pair3 = new Pair<>();\n        pair1.key = 1;\n        pair1.value = \"One\";\n        pair2.key = 1;\n        pair2.value = \"One\";\n        pair3.key = 2;\n        pair3.value = \"Two\";\n\n        // Test reflexive property\n        assertTrue(pair1.equals(pair1));\n\n        // Test symmetric property\n        assertTrue(pair1.equals(pair2) && pair2.equals(pair1));\n\n        // Test transitive property\n        Pair<Integer, String> pair4 = new Pair<>();\n        pair4.key = 1;\n        pair4.value = \"One\";\n        assertTrue(pair1.equals(pair2) && pair2.equals(pair4) && pair1.equals(pair4));\n\n        // Test both null keys and values\n        Pair<Object, Object> nullPair1 = new Pair<>();\n        Pair<Object, Object> nullPair2 = new Pair<>();\n        assertTrue(nullPair1.equals(nullPair2) && nullPair2.equals(nullPair1));\n\n        // Test unequal pairs\n        assertFalse(pair1.equals(pair3));\n        assertFalse(pair1.equals(null));\n        assertFalse(pair1.equals(new Object()));\n\n        // Test different keys\n        pair2.key = 2;\n        assertFalse(pair1.equals(pair2));\n\n        // Reset key and test different values\n        pair2.key = 1;\n        pair2.value = \"Two\";\n        assertFalse(pair1.equals(pair2));\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Pair<K,V> {\n    private K key;\n    private V value;\n\n    // Assume there are constructors, getters, and setters here for key and value.\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (!(o instanceof Pair)) {\n            return false;\n        } else {\n            Pair<?, ?> oP = (Pair<?, ?>) o;\n            return (key == null ?\n                    oP.key == null :\n                    key.equals(oP.key)) &&\n                (value == null ?\n                 oP.value == null :\n                 value.equals(oP.value));\n        }\n    }\n\n    // hashCode method would be here (not shown for brevity).\n}\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value2\");\n        Pair<String, String> pair4 = new Pair<>(null, \"value1\");\n        Pair<String, String> pair5 = new Pair<>(\"key1\", null);\n        Pair<String, String> pair6 = new Pair<>(null, null);\n\n        // Test equality and non-equality.\n        assertTrue(pair1.equals(pair2), \"Pairs with the same key and value should be equal.\");\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys and values should not be equal.\");\n        \n        // Test against null and different type.\n        assertFalse(pair1.equals(null), \"Pair compared with null should not be equal.\");\n        assertFalse(pair1.equals(\"A String\"), \"Pair compared with a different type should not be equal.\");\n        \n        // Test with null key and/or value.\n        assertFalse(pair1.equals(pair4), \"Pairs with different keys should not be equal.\");\n        assertFalse(pair1.equals(pair5), \"Pairs with different values should not be equal.\");\n        assertTrue(pair4.equals(new Pair<>(null, \"value1\")), \"Pairs with the same key (null) and same value should be equal.\");\n        assertTrue(pair5.equals(new Pair<>(\"key1\", null)), \"Pairs with the same key and same value (null) should be equal.\");\n        assertTrue(pair6.equals(new Pair<>(null, null)), \"Pairs with both key and value as null should be equal.\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value1\");\n        Pair<String, String> pair4 = new Pair<>(\"key1\", \"value2\");\n        Pair<String, String> pairWithNullKey = new Pair<>(null, \"value1\");\n        Pair<String, String> pairWithNullValue = new Pair<>(\"key1\", null);\n        Object differentObject = new Object();\n\n        // Test for reflexivity\n        assertTrue(pair1.equals(pair1));\n\n        // Test for null comparison\n        assertFalse(pair1.equals(null));\n\n        // Test for symmetry\n        assertTrue(pair1.equals(pair2));\n        assertTrue(pair2.equals(pair1));\n\n        // Test for transitivity\n        Pair<String, String> pair2Copy = new Pair<>(\"key1\", \"value1\");\n        assertTrue(pair2.equals(pair2Copy));\n        assertTrue(pair1.equals(pair2Copy));\n\n        // Test for non-equality with different keys\n        assertFalse(pair1.equals(pair3));\n\n        // Test for non-equality with different values\n        assertFalse(pair1.equals(pair4));\n\n        // Test for comparison with null key\n        assertFalse(pairWithNullKey.equals(pair1));\n        assertTrue(pairWithNullKey.equals(new Pair<>(null, \"value1\")));\n\n        // Test for comparison with null value\n        assertFalse(pairWithNullValue.equals(pair1));\n        assertTrue(pairWithNullValue.equals(new Pair<>(\"key1\", null)));\n\n        // Test for non-equality with an object of a different type\n        assertFalse(pair1.equals(differentObject));\n\n        // Test for comparison with a pair having both null key and value\n        Pair<String, String> nullPair = new Pair<>(null, null);\n        assertTrue(nullPair.equals(new Pair<>(null, null)));\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Pair<K, V> { // Assuming there is a Pair class as per the given equals() method\n    private K key;\n    private V value;\n\n    public Pair(K key, V value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    // equals() method would go here\n}\n\npublic class PairTest {\n\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair3 = new Pair<>(\"diffKey\", \"value\");\n        Pair<String, String> pair4 = new Pair<>(\"key\", \"diffValue\");\n        Pair<String, String> pair5 = null;\n        Pair<Object, Object> pair6 = new Pair<>(null, null);\n        \n        assertAll(\"Test Pair equals method\",\n            () -> assertEquals(pair1, pair2, \"Identical pairs should be equal\"),\n            () -> assertNotEquals(pair1, pair3, \"Pairs with different keys should not be equal\"),\n            () -> assertNotEquals(pair1, pair4, \"Pairs with different values should not be equal\"),\n            () -> assertNotEquals(pair1, pair5, \"Pair compared with null should not be equal\"),\n            () -> assertNotEquals(pair1, new Object(), \"Pair compared with a non-pair object should not be equal\"),\n            () -> assertTrue(pair6.equals(new Pair<>(null, null)), \"Pairs with null keys and values should be equal\"),\n            () -> assertFalse(pair6.equals(new Pair<>(\"key\", null)), \"Pairs with null and non-null keys should not be equal\"),\n            () -> assertFalse(pair6.equals(new Pair<>(null, \"value\")), \"Pairs with null and non-null values should not be equal\")\n        );\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n// Assuming there is a Pair class defined somewhere in the package that includes the provided equals method\npublic class PairTest {\n\n    private static class Pair<K, V> {\n        private K key;\n        private V value;\n\n        public Pair(K key, V value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) {\n                return true;\n            }\n            if (!(o instanceof Pair)) {\n                return false;\n            } else {\n                Pair<?, ?> oP = (Pair<?, ?>) o;\n                return (key == null ?\n                        oP.key == null :\n                        key.equals(oP.key)) &&\n                    (value == null ?\n                     oP.value == null :\n                     value.equals(oP.value));\n            }\n        }\n    }\n\n    @Test\n    public void equalsTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"value1\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"value1\");\n        Pair<Integer, String> pair3 = new Pair<>(2, \"value2\");\n        Pair<Integer, String> pair4 = null;\n        Pair<Integer, String> pair5 = new Pair<>(null, null);\n        Pair<Integer, String> pair6 = new Pair<>(null, \"value1\");\n        Pair<Integer, String> pair7 = new Pair<>(1, null);\n\n        assertTrue(pair1.equals(pair2), \"Pairs with the same key and value should be equal.\");\n        assertFalse(pair1.equals(pair3), \"Pairs with different keys or values should not be equal.\");\n        assertFalse(pair1.equals(pair4), \"Pair compared with null should not be equal.\");\n        assertFalse(pair4 instanceof Pair, \"null is not an instance of Pair.\");\n        assertTrue(pair5.equals(new Pair<>(null, null)), \"Pairs with both null key and value should be equal.\");\n        assertFalse(pair6.equals(pair5), \"Pairs with different keys should not be equal.\");\n        assertFalse(pair7.equals(pair5), \"Pairs with different values should not be equal.\");\n        assertNotEquals(pair1, new Object(), \"Pair should not be equal to an object of a different type.\");\n    }\n}"
    ]
}