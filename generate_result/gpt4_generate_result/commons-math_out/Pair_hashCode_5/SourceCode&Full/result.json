{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compute a hash code.\n     *\n     * @return the hash code value.\n     */",
    "source_code": "\n@Override\npublic int hashCode() {\n    int result = key == null ? 0 : key.hashCode();\n\n    final int h = value == null ? 0 : value.hashCode();\n    result = 37 * result + h ^ (h >>> 16);\n\n    return result;\n}\n",
    "class_name": "Pair",
    "method_name": "hashCode",
    "arguments": [],
    "generate_test": [
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create two pairs with the same key-value and check their hash codes are the same.\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"value\");\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash codes should be equal for equal pairs\");\n\n        // Create a pair with null key and null value and check the hash code.\n        Pair<Object, Object> nullPair = new Pair<>(null, null);\n        assertEquals(0, nullPair.hashCode(), \"Hash code should be 0 for Pair with null key and value\");\n\n        // Change the value while keeping the same key and check the hash codes are different.\n        Pair<String, String> pairDiffValue = new Pair<>(\"key\", \"differentValue\");\n        assertNotEquals(pair1.hashCode(), pairDiffValue.hashCode(), \"Hash codes should be different for pairs with different values\");\n\n        // Change the key while keeping the same value and check the hash codes are different.\n        Pair<String, String> pairDiffKey = new Pair<>(\"differentKey\", \"value\");\n        assertNotEquals(pair1.hashCode(), pairDiffKey.hashCode(), \"Hash codes should be different for pairs with different keys\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        String key1 = \"key\";\n        String value1 = \"value\";\n        Pair<String, String> pair1 = new Pair<>(key1, value1);\n        \n        // Test with non-null key and value\n        int expectedHashCode1 = 37 * key1.hashCode() + value1.hashCode() ^ (value1.hashCode() >>> 16);\n        assertEquals(expectedHashCode1, pair1.hashCode(), \"hashCode does not match expected value with non-null key and value\");\n        \n        // Test with null key and non-null value\n        Pair<String, String> pair2 = new Pair<>(null, value1);\n        int expectedHashCode2 = 37 * 0 + value1.hashCode() ^ (value1.hashCode() >>> 16);\n        assertEquals(expectedHashCode2, pair2.hashCode(), \"hashCode does not match expected value with null key and non-null value\");\n\n        // Test with non-null key and null value\n        Pair<String, String> pair3 = new Pair<>(key1, null);\n        int expectedHashCode3 = 37 * key1.hashCode() + 0 ^ (0 >>> 16);\n        assertEquals(expectedHashCode3, pair3.hashCode(), \"hashCode does not match expected value with non-null key and null value\");\n        \n        // Test with null key and null value\n        Pair<String, String> pair4 = new Pair<>(null, null);\n        int expectedHashCode4 = 37 * 0 + 0 ^ (0 >>> 16);\n        assertEquals(expectedHashCode4, pair4.hashCode(), \"hashCode does not match expected value with null key and null value\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create two pairs with equal keys and values\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"value\");\n\n        // Create two pairs with null keys and different values\n        Pair<String, String> pairNullKey1 = new Pair<>(null, \"value1\");\n        Pair<String, String> pairNullKey2 = new Pair<>(null, \"value2\");\n\n        // Create two pairs with different keys and null values\n        Pair<String, String> pairNullValue1 = new Pair<>(\"key1\", null);\n        Pair<String, String> pairNullValue2 = new Pair<>(\"key2\", null);\n\n        // Create two pairs with null keys and null values\n        Pair<String, String> pairBothNull1 = new Pair<>(null, null);\n        Pair<String, String> pairBothNull2 = new Pair<>(null, null);\n\n        // Assert that hashCode is consistent and works as expected\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash codes should be equal for equal pairs\");\n\n        // Assert that pairs with null keys can still calculate different hashCodes\n        assertNotEquals(pairNullKey1.hashCode(), pairNullKey2.hashCode(), \"Hash codes should be different for pairs with null keys and different values\");\n\n        // Assert that pairs with null values can still calculate different hashCodes\n        assertNotEquals(pairNullValue1.hashCode(), pairNullValue2.hashCode(), \"Hash codes should be different for pairs with different keys and null values\");\n\n        // Assert that pairs with both key and value as null have the same hashCode\n        assertEquals(pairBothNull1.hashCode(), pairBothNull2.hashCode(), \"Hash codes should be equal for pairs with both key and value as null\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Case 1: Both key and value are null\n        Pair<Object, Object> pairNullNull = new Pair<>(null, null);\n        assertEquals(0, pairNullNull.hashCode(), \"Hash code should be 0 when both key and value are null\");\n\n        // Case 2: Key is null and value is non-null\n        String value = \"value\";\n        Pair<Object, Object> pairNullValue = new Pair<>(null, value);\n        int expectedHashCodeNullValue = value.hashCode() ^ (value.hashCode() >>> 16);\n        assertEquals(expectedHashCodeNullValue, pairNullValue.hashCode(), \"Hash code should be calculated with only value hash when key is null\");\n\n        // Case 3: Key is non-null and value is null\n        String key = \"key\";\n        Pair<Object, Object> pairKeyValueNull = new Pair<>(key, null);\n        int expectedHashCodeKeyValueNull = 37 * key.hashCode();\n        assertEquals(expectedHashCodeKeyValueNull, pairKeyValueNull.hashCode(), \"Hash code should be calculated with only key hash when value is null\");\n\n        // Case 4: Both key and value are non-null\n        String anotherValue = \"anotherValue\";\n        Pair<String, String> pairKeyAndValue = new Pair<>(key, anotherValue);\n        int expectedHashCodeKeyAndValue = 37 * key.hashCode() + anotherValue.hashCode() ^ (anotherValue.hashCode() >>> 16);\n        assertEquals(expectedHashCodeKeyAndValue, pairKeyAndValue.hashCode(), \"Hash code should be calculated with both key and value hashes when both are non-null\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class PairTest {\n    \n    @Test\n    public void hashCodeTest() {\n        Pair<String, String> pairWithNulls = new Pair<>(null, null);\n        assertEquals(0, pairWithNulls.hashCode(), \"Hashcode should be 0 for pair with nulls\");\n\n        String key1 = \"key\";\n        String value1 = \"value\";\n        Pair<String, String> pair1 = new Pair<>(key1, value1);\n        int expectedHash1 = 37 * key1.hashCode() + (value1.hashCode() ^ (value1.hashCode() >>> 16));\n        assertEquals(expectedHash1, pair1.hashCode(), \"Hashcode should match computed value for pair1\");\n        \n        String key2 = \"anotherKey\";\n        String value2 = \"anotherValue\";\n        Pair<String, String> pair2 = new Pair<>(key2, value2);\n        int expectedHash2 = 37 * key2.hashCode() + (value2.hashCode() ^ (value2.hashCode() >>> 16));\n        assertEquals(expectedHash2, pair2.hashCode(), \"Hashcode should match computed value for pair2\");\n        \n        // Test with same values to ensure consistency\n        Pair<String, String> pair1Copy = new Pair<>(key1, value1);\n        assertEquals(pair1.hashCode(), pair1Copy.hashCode(), \"Hashcodes of to identical pairs should be the same\");\n        \n        // Test with different values to ensure different hashcodes\n        assertNotEquals(pair1.hashCode(), pair2.hashCode(), \"Hashcodes of two different pairs should not be the same\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    \n    @Test\n    public void hashCodeTest() {\n        // Create pairs with null keys and values, and check if their hash codes are 0\n        Pair<Object, Object> pairWithNulls = new Pair<>(null, null);\n        assertEquals(0, pairWithNulls.hashCode(), \"Hash code should be 0 for pair with nulls\");\n\n        // Create pairs with non-null keys and null values, check hash codes\n        Pair<String, Object> pairWithNonNullKey = new Pair<>(\"key\", null);\n        assertEquals(\"key\".hashCode(), pairWithNonNullKey.hashCode(), \"Hash code should match the key hash when value is null\");\n\n        // Create pairs with null keys and non-null values, check hash codes\n        Pair<Object, String> pairWithNonNullValue = new Pair<>(null, \"value\");\n        int expectedValueHash = \"value\".hashCode() + (\"value\".hashCode() >>> 16);\n        assertEquals(expectedValueHash, pairWithNonNullValue.hashCode(), \"Hash code should match the adjusted value hash when key is null\");\n\n        // Create pairs with non-null keys and values, check hash codes\n        Pair<String, String> pairWithNonNulls = new Pair<>(\"key\", \"value\");\n        int expectedHash = 37 * \"key\".hashCode() + \"value\".hashCode() ^ (\"value\".hashCode() >>> 16);\n        assertEquals(expectedHash, pairWithNonNulls.hashCode(), \"Hash code should be calculated as specified by hashCode method\");\n\n        // Ensure consistency of hash code across invocations with same object\n        assertEquals(pairWithNonNulls.hashCode(), pairWithNonNulls.hashCode(), \"Hash code should be consistent across invocations\");\n\n        // Test hash code with different pairs having same contents\n        Pair<String, String> equivalentPair = new Pair<>(\"key\", \"value\");\n        assertEquals(pairWithNonNulls.hashCode(), equivalentPair.hashCode(), \"Hash code should be the same for equivalent pairs\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value2\");\n        Pair<String, String> pairNullKey = new Pair<>(null, \"value\");\n        Pair<String, String> pairNullValue = new Pair<>(\"key\", null);\n        Pair<String, String> pairNullBoth = new Pair<>(null, null);\n\n        // Test same key-value pairs have the same hash code\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Pairs with same key-value should have same hash code\");\n\n        // Test different key-value pairs could (not necessarily) have different hash codes\n        assertNotEquals(pair1.hashCode(), pair3.hashCode(), \"Pairs with different key-value should (in general, but not necessarily) have different hash codes\");\n\n        // Test pairs with null keys\n        assertNotEquals(pair1.hashCode(), pairNullKey.hashCode(), \"Pairs with null key should have different hash code from non-null key pair\");\n\n        // Test pairs with null values\n        assertNotEquals(pair1.hashCode(), pairNullValue.hashCode(), \"Pairs with null value should have different hash code from non-null value pair\");\n\n        // Test pairs with null keys and null values\n        assertNotEquals(pairNullKey.hashCode(), pairNullBoth.hashCode(), \"Pairs with null key should have different hash code from pair with both null key and value\");\n\n        // Additional checks can be made if necessary\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        String key = \"key\";\n        String value = \"value\";\n        Pair<String, String> pair = new Pair<>(key, value);\n        \n        int expectedHashCode = 37 * key.hashCode() + (value.hashCode() ^ (value.hashCode() >>> 16));\n        assertEquals(expectedHashCode, pair.hashCode(), \"Hash codes should match.\");\n        \n        Pair<String, String> pairWithNullKey = new Pair<>(null, value);\n        expectedHashCode = 37 * 0 + (value.hashCode() ^ (value.hashCode() >>> 16));\n        assertEquals(expectedHashCode, pairWithNullKey.hashCode(), \"Hash code should match when key is null.\");\n        \n        Pair<String, String> pairWithNullValue = new Pair<>(key, null);\n        expectedHashCode = 37 * key.hashCode() + (0 ^ (0 >>> 16));\n        assertEquals(expectedHashCode, pairWithNullValue.hashCode(), \"Hash code should match when value is null.\");\n        \n        Pair<String, String> pairWithNullKeyAndValue = new Pair<>(null, null);\n        expectedHashCode = 37 * 0 + (0 ^ (0 >>> 16));\n        assertEquals(expectedHashCode, pairWithNullKeyAndValue.hashCode(), \"Hash code should match when both key and value are null.\");\n\n        // Adding a test to make sure that two pairs with same key and value have the same hash code\n        Pair<String, String> equalPair = new Pair<>(key, value);\n        assertEquals(pair.hashCode(), equalPair.hashCode(), \"Hash codes of equal pairs should match.\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void hashCodeTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n\n        // Test for the same key-value pairs (should result in the same hash code)\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash codes should be the same for equal pairs\");\n\n        // Test with null key\n        Pair<String, String> pairWithNullKey = new Pair<>(null, \"value1\");\n        Pair<String, String> anotherPairWithNullKey = new Pair<>(null, \"value1\");\n        assertEquals(pairWithNullKey.hashCode(), anotherPairWithNullKey.hashCode(), \"Hash codes should be the same for pairs with null keys\");\n\n        // Test with null value\n        Pair<String, String> pairWithNullValue = new Pair<>(\"key1\", null);\n        Pair<String, String> anotherPairWithNullValue = new Pair<>(\"key1\", null);\n        assertEquals(pairWithNullValue.hashCode(), anotherPairWithNullValue.hashCode(), \"Hash codes should be the same for pairs with null values\");\n\n        // Test with both null key and value\n        Pair<String, String> pairWithBothNull = new Pair<>(null, null);\n        Pair<String, String> anotherPairWithBothNull = new Pair<>(null, null);\n        assertEquals(pairWithBothNull.hashCode(), anotherPairWithBothNull.hashCode(), \"Hash codes should be the same for pairs with both key and value as null\");\n\n        // Test for different pairs\n        Pair<String, String> differentPair = new Pair<>(\"key2\", \"value2\");\n        assertNotEquals(pair1.hashCode(), differentPair.hashCode(), \"Hash codes should be different for different pairs\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void hashCodeTest() {\n        // Test with both key and value as null\n        Pair<Object, Object> pairNull = new Pair<>(null, null);\n        assertEquals(0, pairNull.hashCode(), \"Hashcode for null key and null value should be 0.\");\n\n        // Test with non-null key and null value\n        String key = \"key\";\n        int keyHashCode = key.hashCode();\n        Pair<Object, Object> pairWithNullValue = new Pair<>(key, null);\n        assertEquals(37 * keyHashCode, pairWithNullValue.hashCode(), \"Incorrect hashcode for non-null key and null value.\");\n\n        // Test with null key and non-null value\n        String value = \"value\";\n        int valueHashCode = value.hashCode();\n        Pair<Object, Object> pairWithNullKey = new Pair<>(null, value);\n        int expectedHashWithNullKey = 37 * 0 + valueHashCode ^ (valueHashCode >>> 16);\n        assertEquals(expectedHashWithNullKey, pairWithNullKey.hashCode(), \"Incorrect hashcode for null key and non-null value.\");\n\n        // Test with non-null key and non-null value\n        Pair<Object, Object> pairNonNull = new Pair<>(key, value);\n        int expectedHash = 37 * keyHashCode + valueHashCode ^ (valueHashCode >>> 16);\n        assertEquals(expectedHash, pairNonNull.hashCode(), \"Incorrect hashcode for non-null key and non-null value.\");\n\n        // Test with two pairs having the same key and value\n        Pair<Object, Object> pairSameAsNonNull = new Pair<>(key, value);\n        assertEquals(pairNonNull.hashCode(), pairSameAsNonNull.hashCode(), \"Hashcodes should be equal for pairs with equal keys and values.\");\n\n        // Test with two pairs having different keys and same value\n        String differentKey = \"differentKey\";\n        Pair<Object, Object> pairDifferentKey = new Pair<>(differentKey, value);\n        assertNotEquals(pairNonNull.hashCode(), pairDifferentKey.hashCode(), \"Hashcodes should not be equal for pairs with different keys.\");\n\n        // Test with two pairs having same key and different values\n        String differentValue = \"differentValue\";\n        Pair<Object, Object> pairDifferentValue = new Pair<>(key, differentValue);\n        assertNotEquals(pairNonNull.hashCode(), pairDifferentValue.hashCode(), \"Hashcodes should not be equal for pairs with different values.\");\n    }\n}"
    ]
}