{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compute a hash code.\n     *\n     * @return the hash code value.\n     */",
    "source_code": "\n@Override\npublic int hashCode() {\n    int result = key == null ? 0 : key.hashCode();\n\n    final int h = value == null ? 0 : value.hashCode();\n    result = 37 * result + h ^ (h >>> 16);\n\n    return result;\n}\n",
    "class_name": "Pair",
    "method_name": "hashCode",
    "arguments": [],
    "generate_test": [
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create two pairs with same key and value to confirm their hashcodes are the same\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", 123);\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 123);\n        \n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hashcodes should be identical for equal pairs\");\n\n        // Create a third pair with a different key or value to verify it has a different hashcode\n        Pair<String, Integer> pair3 = new Pair<>(\"differentKey\", 123);\n        assertNotEquals(pair1.hashCode(), pair3.hashCode(), \"Hashcodes should be different for different pairs\");\n\n        // Create a fourth pair with null key and value to confirm that it handles nulls correctly\n        Pair<String, Integer> pair4 = new Pair<>(null, null);\n        assertDoesNotThrow(() -> pair4.hashCode(), \"Hashcode computation should handle null values without throwing an exception\");\n\n        // Test with different value and same key\n        Pair<String, Integer> pair5 = new Pair<>(\"key\", 999);\n        assertNotEquals(pair1.hashCode(), pair5.hashCode(), \"Hashcodes should be different when the value differs\");\n\n        // Test with null key and non-null value\n        Pair<String, Integer> pair6 = new Pair<>(null, 123);\n        assertNotEquals(pair1.hashCode(), pair6.hashCode(), \"Hashcodes should be different when the key is null\");\n\n        // Test with non-null key and null value\n        Pair<String, Integer> pair7 = new Pair<>(\"key\", null);\n        assertNotEquals(pair1.hashCode(), pair7.hashCode(), \"Hashcodes should be different when the value is null\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    \n    @Test\n    public void hashCodeTest() {\n        // Case 1: key and value are both null\n        Pair<Object, Object> nullPair = new Pair<>(null, null);\n        assertEquals(0, nullPair.hashCode(), \"Hashcode should be 0 for Pair with null key and value.\");\n\n        // Case 2: key is not null but value is null\n        Pair<String, Object> keyOnlyPair = new Pair<>(\"key\", null);\n        assertEquals(\"key\".hashCode(), keyOnlyPair.hashCode(), \"Hashcode should match key.hashCode() when value is null.\");\n\n        // Case 3: key is null but value is not null\n        Pair<Object, String> valueOnlyPair = new Pair<>(null, \"value\");\n        int expectedHashCode = 37 * 0 + \"value\".hashCode() ^ (\"value\".hashCode() >>> 16);\n        assertEquals(expectedHashCode, valueOnlyPair.hashCode(), \"Hashcode calculation did not match expected result when key is null.\");\n\n        // Case 4: both key and value are not null\n        Pair<String, String> keyValuePair = new Pair<>(\"key\", \"value\");\n        int keyHashCode = \"key\".hashCode();\n        int valueHashCode = \"value\".hashCode();\n        expectedHashCode = 37 * keyHashCode + valueHashCode ^ (valueHashCode >>> 16);\n        assertEquals(expectedHashCode, keyValuePair.hashCode(), \"Hashcode calculation did not match expected result with non-null key and value.\");\n\n        // Case 5: two pairs with the same key and value should have the same hashcode\n        Pair<String, String> keyValuePair2 = new Pair<>(\"key\", \"value\");\n        assertEquals(keyValuePair.hashCode(), keyValuePair2.hashCode(), \"Hashcode should be consistent for pairs with the same key and value.\");\n\n        // Additional tests can be added to verify hashCode contract compliance such as consistency, equal objects must have the same hashCode etc.\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Integer key1 = 123;\n        String value1 = \"testValue\";\n        Pair<Integer, String> pair1 = new Pair<>(key1, value1);\n\n        Integer key2 = 123;\n        String value2 = \"testValue\";\n        Pair<Integer, String> pair2 = new Pair<>(key2, value2);\n\n        Integer key3 = 456;\n        String value3 = \"testValueDifferent\";\n        Pair<Integer, String> pair3 = new Pair<>(key3, value3);\n\n        // Test equal hashCodes for equal pairs\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash codes should be equal for equal pairs.\");\n\n        // Test unequal hashCodes for different pairs\n        assertNotEquals(pair1.hashCode(), pair3.hashCode(), \"Hash codes should not be equal for different pairs.\");\n\n        // Testing edge cases\n        Pair<Integer, String> pairWithNullKey = new Pair<>(null, value1);\n        Pair<Integer, String> pairWithNullValue = new Pair<>(key1, null);\n        Pair<Integer, String> pairWithNullKeyAndValue = new Pair<>(null, null);\n\n        assertNotNull(pairWithNullKey.hashCode(), \"Hash code should handle null key correctly.\");\n        assertNotNull(pairWithNullValue.hashCode(), \"Hash code should handle null value correctly.\");\n        assertNotNull(pairWithNullKeyAndValue.hashCode(), \"Hash code should handle both null key and value correctly.\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    \n    @Test\n    public void hashCodeTest() {\n        // Create two pairs with the same key-value pairs\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", 42);\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 42);\n        \n        // Create a pair with a different key\n        Pair<String, Integer> pairDifferentKey = new Pair<>(\"differentKey\", 42);\n        \n        // Create a pair with a different value\n        Pair<String, Integer> pairDifferentValue = new Pair<>(\"key\", 24);\n        \n        // Create a pair with null key\n        Pair<String, Integer> pairNullKey = new Pair<>(null, 42);\n        \n        // Create a pair with null value\n        Pair<String, Integer> pairNullValue = new Pair<>(\"key\", null);\n        \n        // Create a pair with both key and value as null\n        Pair<String, Integer> pairNullKeyNullValue = new Pair<>(null, null);\n\n        // Check that hashCode is the same for the same key-value pairs\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash codes should be identical for identical key-value pairs\");\n        \n        // Check that hashCode is different for different keys\n        assertNotEquals(pair1.hashCode(), pairDifferentKey.hashCode(), \"Hash codes should be different for different keys\");\n        \n        // Check that hashCode is different for different values\n        assertNotEquals(pair1.hashCode(), pairDifferentValue.hashCode(), \"Hash codes should be different for different values\");\n        \n        // Check hashCode handling for null key\n        assertFalse(pair1.hashCode() == pairNullKey.hashCode(), \"Hash codes should handle null keys properly\");\n        \n        // Check hashCode handling for null value\n        assertFalse(pair1.hashCode() == pairNullValue.hashCode(), \"Hash codes should handle null values properly\");\n        \n        // Check hashCode for both null key and value\n        assertEquals(pairNullKeyNullValue.hashCode(), 0, \"Hash code for both null key and value should be zero\");\n\n        // If Pair operates with any Comparable types, we could create a test pairing\n        // different kinds of Comparable types together, like String and Integer.\n        // This would verify the generality of the hashCode method for different type parameters.\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Case 1: Both key and value are null\n        Pair<Object, Object> nullPair = new Pair<>(null, null);\n        assertEquals(0, nullPair.hashCode(), \"Hashcode should be 0 when both key and value are null\");\n\n        // Case 2: Key is non-null, value is null\n        String key = \"key\";\n        Pair<String, Object> keyOnlyPair = new Pair<>(key, null);\n        assertEquals(key.hashCode(), keyOnlyPair.hashCode(), \"Hashcode should be equal to key's hashcode when value is null\");\n\n        // Case 3: Key is null, value is non-null\n        String value = \"value\";\n        Pair<Object, String> valueOnlyPair = new Pair<>(null, value);\n        // The expected hashCode calculation based on the source code\n        int expectedHashCode = 37 * 0 + value.hashCode() ^ (value.hashCode() >>> 16);\n        assertEquals(expectedHashCode, valueOnlyPair.hashCode(), \"Hashcode should be calculated correctly when key is null\");\n\n        // Case 4: Both key and value are non-null\n        String key2 = \"key2\";\n        String value2 = \"value2\";\n        Pair<String, String> bothPair = new Pair<>(key2, value2);\n        // The expected hashCode calculation based on the source code\n        expectedHashCode = 37 * key2.hashCode() + value2.hashCode() ^ (value2.hashCode() >>> 16);\n        assertEquals(expectedHashCode, bothPair.hashCode(), \"Hashcode should be calculated correctly when both key and value are non-null\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // given\n        Pair<String, String> pair1 = new Pair<>(\"Key1\", \"Value1\");\n        Pair<String, String> pair2 = new Pair<>(\"Key1\", \"Value1\");\n        Pair<String, String> pair3 = new Pair<>(\"Key2\", \"Value2\");\n\n        // when\n        int hashCode1 = pair1.hashCode();\n        int hashCode2 = pair2.hashCode();\n        int hashCode3 = pair3.hashCode();\n\n        // then\n        assertEquals(hashCode1, hashCode2, \"HashCodes should be equal for equal pairs\");\n        \n        // It's not strictly required for unequal pairs to have different hash codes,\n        // but we assume they are different for this particular implementation\n        assertNotEquals(hashCode1, hashCode3, \"HashCode should be different for non-equal pairs\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void hashCodeTest() {\n        // Test with non-null key and value\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        \n        // Test with the same key and value (equals pairs should have the same hash code)\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash code should be the same for equal pairs\");\n        \n        // Test with different key and/or value\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value1\");\n        Pair<String, String> pair4 = new Pair<>(\"key1\", \"value2\");\n        \n        // Assuming that different pairs generally have different hash codes\n        assertNotEquals(pair1.hashCode(), pair3.hashCode(), \"Hash code should be different for different pairs\");\n        assertNotEquals(pair1.hashCode(), pair4.hashCode(), \"Hash code should be different for different pairs\");\n\n        // Test with null key and non-null value\n        Pair<String, String> pairWithNullKey = new Pair<>(null, \"value1\");\n        assertNotEquals(0, pairWithNullKey.hashCode(), \"Hash code should not be zero for pair with null key but non-null value\");\n\n        // Test with null value and non-null key\n        Pair<String, String> pairWithNullValue = new Pair<>(\"key1\", null);\n        assertNotEquals(0, pairWithNullValue.hashCode(), \"Hash code should not be zero for pair with non-null key but null value\");\n\n        // Test with null key and null value\n        Pair<String, String> pairWithNullKeyAndValue = new Pair<>(null, null);\n        \n        // Hash code for null key and value logically could be zero, but let's verify\n        assertEquals(0, pairWithNullKeyAndValue.hashCode(), \"Hash code should be zero for pair with null key and null value\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create pairs with same key and value, expecting same hash code\n        Pair<Integer, String> pair1 = new Pair<>(1, \"One\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"One\");\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash codes should be equal for identical pairs\");\n\n        // Create pair with null key and value, expecting hash code calculation to handle nulls\n        Pair<Object, Object> nullPair = new Pair<>(null, null);\n        assertEquals(0, nullPair.hashCode(), \"Hash code should be zero for null key and null value\");\n\n        // Create pairs with same key but different values, expecting different hash codes\n        Pair<Integer, String> pair3 = new Pair<>(1, \"Two\");\n        assertNotEquals(pair1.hashCode(), pair3.hashCode(), \"Hash codes should be different for pairs with different values\");\n\n        // Create pairs with different keys but same values, expecting different hash codes\n        Pair<Integer, String> pair4 = new Pair<>(2, \"One\");\n        assertNotEquals(pair1.hashCode(), pair4.hashCode(), \"Hash codes should be different for pairs with different keys\");\n\n        // Create pairs with different key and value, expecting different hash codes\n        Pair<Integer, String> pair5 = new Pair<>(2, \"Two\");\n        assertNotEquals(pair1.hashCode(), pair5.hashCode(), \"Hash codes should be different for completely different pairs\");\n        \n        // Additional test for pair with non-null key and null value\n        Pair<Integer, String> pairWithNullValue = new Pair<>(1, null);\n        Pair<Integer, String> anotherPairWithNullValue = new Pair<>(1, null);\n        assertEquals(pairWithNullValue.hashCode(), anotherPairWithNullValue.hashCode(), \"Hash codes should be equal for pairs with non-null keys and null values\");\n\n        // Additional test for pair with null key and non-null value\n        Pair<Integer, String> pairWithNullKey = new Pair<>(null, \"One\");\n        Pair<Integer, String> anotherPairWithNullKey = new Pair<>(null, \"One\");\n        assertEquals(pairWithNullKey.hashCode(), anotherPairWithNullKey.hashCode(), \"Hash codes should be equal for pairs with null keys and non-null values\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create two pairs with the same key and value to test if their hashcodes are equal\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", 123);\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 123);\n        \n        // Create another pair with a different key and/or value to test if their hashcode is not equal\n        Pair<String, Integer> pair3 = new Pair<>(\"differentKey\", 456);\n\n        // Assert that the hash codes of the same objects are the same\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash codes should be equal for equal objects\");\n\n        // Assert that the hash code is different for objects that are not equal\n        assertNotEquals(pair1.hashCode(), pair3.hashCode(), \"Hash codes should not be equal for non-equal objects\");\n\n        // Edge case tests\n        Pair<String, Integer> pairWithNullKey = new Pair<>(null, 123);\n        Pair<String, Integer> pairWithNullValue = new Pair<>(\"key\", null);\n        Pair<String, Integer> pairWithBothNull = new Pair<>(null, null);\n\n        // Assert that the hash code is handling null keys and values\n        assertNotNull(pairWithNullKey.hashCode(), \"Hash code should handle null key\");\n        assertNotNull(pairWithNullValue.hashCode(), \"Hash code should handle null value\");\n        assertNotNull(pairWithBothNull.hashCode(), \"Hash code should handle both null key and value\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class PairTest {\n\n    @Test\n    public void hashCodeTest() {\n        // Create a few pairs to test the hashCode method implementation\n        Pair<String, String> pairWithBothNonNull = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pairWithNullKey = new Pair<>(null, \"value\");\n        Pair<String, String> pairWithNullValue = new Pair<>(\"key\", null);\n        Pair<String, String> pairWithBothNull = new Pair<>(null, null);\n        \n        // Calculate expected hash codes\n        int expectedHashCodeNonNull = 37 * (\"key\".hashCode()) + (\"value\".hashCode() ^ (\"value\".hashCode() >>> 16));\n        int expectedHashCodeNullKey = 37 * (0) + (\"value\".hashCode() ^ (\"value\".hashCode() >>> 16));\n        int expectedHashCodeNullValue = 37 * (\"key\".hashCode()) + (0);\n        int expectedHashCodeBothNull = 0;\n        \n        // Assert that the calculated hash codes match the expected ones\n        assertEquals(expectedHashCodeNonNull, pairWithBothNonNull.hashCode(), \"Hash code should match for non-null key and value.\");\n        assertEquals(expectedHashCodeNullKey, pairWithNullKey.hashCode(), \"Hash code should match for null key.\");\n        assertEquals(expectedHashCodeNullValue, pairWithNullValue.hashCode(), \"Hash code should match for null value.\");\n        assertEquals(expectedHashCodeBothNull, pairWithBothNull.hashCode(), \"Hash code should match for null key and value.\");\n    }\n}"
    ]
}