{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compute a hash code.\n     *\n     * @return the hash code value.\n     */",
    "source_code": "\n@Override\npublic int hashCode() {\n    int result = key == null ? 0 : key.hashCode();\n\n    final int h = value == null ? 0 : value.hashCode();\n    result = 37 * result + h ^ (h >>> 16);\n\n    return result;\n}\n",
    "class_name": "Pair",
    "method_name": "hashCode",
    "arguments": [],
    "generate_test": [
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    private static final class Pair<K, V> {\n        private K key;\n        private V value;\n\n        public Pair(K key, V value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        @Override\n        public int hashCode() {\n            int result = key == null ? 0 : key.hashCode();\n            final int h = value == null ? 0 : value.hashCode();\n            result = 37 * result + h ^ (h >>> 16);\n            return result;\n        }\n    }\n\n    @Test\n    public void hashCodeTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pair2 = new Pair<>(\"key1\", \"value1\");\n        Pair<String, String> pairNull = new Pair<>(null, null);\n        Pair<String, String> pair3 = new Pair<>(\"key2\", \"value2\");\n\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash codes should be equal for equal pairs\");\n        assertNotEquals(pair1.hashCode(), pair3.hashCode(), \"Hash codes should not be equal for different pairs\");\n        assertEquals(pairNull.hashCode(), 0, \"Hash code should be 0 for null key and value\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Pair<K, V> {\n    private K key;\n    private V value;\n\n    public Pair(K key, V value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = key == null ? 0 : key.hashCode();\n\n        final int h = value == null ? 0 : value.hashCode();\n        result = 37 * result + h ^ (h >>> 16);\n\n        return result;\n    }\n    \n    // getters, setters, equals and other methods if necessary\n}\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<String, Integer> pairWithNonNullKeyAndValue = new Pair<>(\"key\", 42);\n        Pair<String, Integer> pairWithNullKey = new Pair<>(null, 42);\n        Pair<String, Integer> pairWithNullValue = new Pair<>(\"key\", null);\n        Pair<String, Integer> pairWithNullKeyAndNullValue = new Pair<>(null, null);\n\n        // Assuming key and value have proper hashCode methods, their hashCodes are consistent\n        int expectedHashCodeNonNullKeyAndValue = \"key\".hashCode() + 37 * 42;\n        int expectedHashCodeNullKey = 37 * 42;\n        int expectedHashCodeNullValue = \"key\".hashCode();\n        int expectedHashCodeNullKeyAndNullValue = 0;\n\n        assertEquals(expectedHashCodeNonNullKeyAndValue, pairWithNonNullKeyAndValue.hashCode());\n        assertEquals(expectedHashCodeNullKey, pairWithNullKey.hashCode());\n        assertEquals(expectedHashCodeNullValue, pairWithNullValue.hashCode());\n        assertEquals(expectedHashCodeNullKeyAndNullValue, pairWithNullKeyAndNullValue.hashCode());\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    static class Pair {\n        private Object key;\n        private Object value;\n        \n        public Pair(Object key, Object value) {\n            this.key = key;\n            this.value = value;\n        }\n        \n        @Override\n        public int hashCode() {\n            int result = key == null ? 0 : key.hashCode();\n            final int h = value == null ? 0 : value.hashCode();\n            result = 37 * result + h ^ (h >>> 16);\n            return result;\n        }        \n    }\n    \n    @Test\n    public void hashCodeTest() {\n        Pair pairNullNull = new Pair(null, null);\n        Pair pairKeyNull = new Pair(\"key\", null);\n        Pair pairNullValue = new Pair(null, \"value\");\n        Pair pairKeyValue = new Pair(\"key\", \"value\");\n\n        assertEquals(0, pairNullNull.hashCode(), \"Hash code for (null, null) should be zero.\");\n\n        int expectedHashKeyNull = \"key\".hashCode();\n        assertEquals(expectedHashKeyNull, pairKeyNull.hashCode(), \"Hash code for (\\\"key\\\", null) mismatch.\");\n\n        int expectedHashNullValue = 37 * (\"value\".hashCode() ^ (\"value\".hashCode() >>> 16));\n        assertEquals(expectedHashNullValue, pairNullValue.hashCode(), \"Hash code for (null, \\\"value\\\") mismatch.\");\n\n        int resultForKey = \"key\".hashCode();\n        int resultForValue = \"value\".hashCode();\n        int combinedHash = 37 * resultForKey + (resultForValue ^ (resultForValue >>> 16));\n        assertEquals(combinedHash, pairKeyValue.hashCode(), \"Hash code for (\\\"key\\\", \\\"value\\\") mismatch.\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    static class Pair<K, V> {\n        final K key;\n        final V value;\n\n        Pair(K key, V value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        @Override\n        public int hashCode() {\n            int result = key == null ? 0 : key.hashCode();\n            final int h = value == null ? 0 : value.hashCode();\n            result = 37 * result + h ^ (h >>> 16);\n            return result;\n        }\n    }\n    \n    @Test\n    public void hashCodeTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair3 = new Pair<>(\"differentKey\", \"value\");\n        Pair<String, String> pairWithNullKey = new Pair<>(null, \"value\");\n        Pair<String, String> pairWithNullValue = new Pair<>(\"key\", null);\n        Pair<String, String> pairWithNulls = new Pair<>(null, null);\n\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hash codes should be equal for equal pairs\");\n        assertNotEquals(pair1.hashCode(), pair3.hashCode(), \"Hash codes should be different for different pairs\");\n        assertNotEquals(pair1.hashCode(), pairWithNullKey.hashCode(), \"Hash codes should be different when one key is null\");\n        assertNotEquals(pair1.hashCode(), pairWithNullValue.hashCode(), \"Hash codes should be different when one value is null\");\n        assertNotEquals(pairWithNullKey.hashCode(), pairWithNullValue.hashCode(), \"Hash codes should be different for pairs with different null fields\");\n        assertEquals(pairWithNulls.hashCode(), pairWithNulls.hashCode(), \"Hash codes should be equal for the same pair even with nulls\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    @Test\n    public void hashCodeTest() {\n        // Assume there is a Pair class with a constructor that takes two objects,\n        // 'key' and 'value', which correspond to the fields used in the hashCode method\n\n        // Test with both key and value as null\n        Pair nullPair = new Pair(null, null);\n        assertEquals(0, nullPair.hashCode());\n\n        // Test with key as null and value as non-null\n        Pair keyNullPair = new Pair(null, \"TestValue\");\n        assertEquals(\"TestValue\".hashCode(), keyNullPair.hashCode());\n\n        // Test with key as non-null and value as null\n        Pair valueNullPair = new Pair(\"TestKey\", null);\n        assertEquals(\"TestKey\".hashCode(), valueNullPair.hashCode());\n\n        // Test with both key and value as non-null\n        Pair nonNullPair = new Pair(\"TestKey\", \"TestValue\");\n        int expectedHashCode = 37 * \"TestKey\".hashCode() + (\"TestValue\".hashCode() ^ (\"TestValue\".hashCode() >>> 16));\n        assertEquals(expectedHashCode, nonNullPair.hashCode());\n\n        // Test for consistency (calling hashCode multiple times should return the same value)\n        int initialHashCode = nonNullPair.hashCode();\n        assertEquals(initialHashCode, nonNullPair.hashCode());\n    }\n}\n\n// Assume there's a Pair class stub that will be tested (just a rough example for the context of the test case)\nclass Pair {\n    private final Object key;\n    private final Object value;\n\n    Pair(Object key, Object value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = key == null ? 0 : key.hashCode();\n\n        final int h = value == null ? 0 : value.hashCode();\n        result = 37 * result + h ^ (h >>> 16);\n\n        return result;\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Pair {\n    Object key;\n    Object value;\n\n    public Pair(Object key, Object value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = key == null ? 0 : key.hashCode();\n        final int h = value == null ? 0 : value.hashCode();\n        result = 37 * result + h ^ (h >>> 16);\n        return result;\n    }\n}\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Given\n        Pair pairWithNulls = new Pair(null, null);\n        Pair pairWithSameObjects = new Pair(\"key\", \"value\");\n        Pair pairWithSameObjectsDifferentOrder = new Pair(\"value\", \"key\");\n        Pair sameAsPairWithSameObjects = new Pair(\"key\", \"value\");\n\n        // When\n        int hashCodeWithNulls = pairWithNulls.hashCode();\n        int hashCodeWithSameObjects = pairWithSameObjects.hashCode();\n        int hashCodeWithSameObjectsDifferentOrder = pairWithSameObjectsDifferentOrder.hashCode();\n        int hashCodeSameAsPairWithSameObjects = sameAsPairWithSameObjects.hashCode();\n\n        // Then\n        assertEquals(hashCodeWithNulls, 0, \"Hash code for null key and value should be 0.\");\n        assertNotEquals(hashCodeWithSameObjects, hashCodeWithSameObjectsDifferentOrder, \"Hash codes should be different when the key and value order are different.\");\n        assertEquals(hashCodeWithSameObjects, hashCodeSameAsPairWithSameObjects, \"Hash codes should be the same for pairs with the same key and value.\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Test with both key and value as null\n        Pair pairNull = new Pair(null, null);\n        assertEquals(0, pairNull.hashCode(), \"Hash code should be 0 when both key and value are null\");\n\n        // Test with non-null key and null value\n        Pair pairWithKey = new Pair(\"key\", null);\n        assertEquals(\"key\".hashCode(), pairWithKey.hashCode(), \"Hash code should match key's hashCode when value is null\");\n\n        // Test with null key and non-null value\n        Pair pairWithValue = new Pair(null, \"value\");\n        int expectedHashWithValue = 37 * 0 + \"value\".hashCode() ^ (\"value\".hashCode() >>> 16);\n        assertEquals(expectedHashWithValue, pairWithValue.hashCode(), \"Hash code should be calculated using value when key is null\");\n\n        // Test with non-null key and value\n        Pair pairWithBoth = new Pair(\"key\", \"value\");\n        int expectedHashWithBoth = 37 * \"key\".hashCode() + \"value\".hashCode() ^ (\"value\".hashCode() >>> 16);\n        assertEquals(expectedHashWithBoth, pairWithBoth.hashCode(), \"Hash code should be calculated using both key and value\");\n        \n        // Test with equivalent pairs (they should have the same hash code)\n        Pair pair1 = new Pair(\"key\", \"value\");\n        Pair pair2 = new Pair(\"key\", \"value\");\n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Equivalent pairs should have the same hash code\");\n    }\n\n    // Assuming Pair is a class with key and value properties\n    private static class Pair {\n        private Object key;\n        private Object value;\n\n        public Pair(Object key, Object value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        @Override\n        public int hashCode() {\n            int result = key == null ? 0 : key.hashCode();\n            final int h = value == null ? 0 : value.hashCode();\n            result = 37 * result + h ^ (h >>> 16);\n            return result;\n        }\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair2 = new Pair<>(\"key\", \"value\");\n        Pair<String, String> pair3 = new Pair<>(null, \"value\");\n        Pair<String, String> pair4 = new Pair<>(\"key\", null);\n        Pair<String, String> pair5 = new Pair<>(null, null);\n        \n        assertEquals(pair1.hashCode(), pair2.hashCode(), \"Hashcodes should be equal for equal pairs.\");\n        \n        assertNotEquals(pair1.hashCode(), pair3.hashCode(), \"Hashcodes should be not equal for different keys.\");\n        assertNotEquals(pair1.hashCode(), pair4.hashCode(), \"Hashcodes should be not equal for different values.\");\n        \n        assertNotNull(pair1.hashCode(), \"Hashcode should not be null for non-null pairs.\");\n        \n        assertEquals(0, pair5.hashCode(), \"Hashcode should be 0 for pair with null key and value.\");\n    }\n}\n\nclass Pair<K, V> {\n    private K key;\n    private V value;\n\n    public Pair(K key, V value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = key == null ? 0 : key.hashCode();\n\n        final int h = value == null ? 0 : value.hashCode();\n        result = 37 * result + h ^ (h >>> 16);\n\n        return result;\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n\n    private static class Pair {\n        private Object key;\n        private Object value;\n\n        public Pair(Object key, Object value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        @Override\n        public int hashCode() {\n            int result = key == null ? 0 : key.hashCode();\n\n            final int h = value == null ? 0 : value.hashCode();\n            result = 37 * result + h ^ (h >>> 16);\n\n            return result;\n        }\n    }\n\n    @Test\n    public void hashCodeTest() {\n        Pair pairWithNull = new Pair(null, null);\n        assertEquals(0, pairWithNull.hashCode(), \"Hash code for pair with nulls should be 0.\");\n\n        Pair pairWithObjects = new Pair(\"key\", \"value\");\n        int expectedHashCode = \"key\".hashCode();\n        int valueHashCode = \"value\".hashCode();\n        expectedHashCode = 37 * expectedHashCode + valueHashCode ^ (valueHashCode >>> 16);\n        assertEquals(expectedHashCode, pairWithObjects.hashCode(), \"Hash code did not match expected value for pair with objects.\");\n\n        Pair samePairWithObjects = new Pair(\"key\", \"value\");\n        assertEquals(pairWithObjects.hashCode(), samePairWithObjects.hashCode(), \"Hash codes for identical pairs should be the same.\");\n\n        Pair differentKeyPair = new Pair(\"newKey\", \"value\");\n        assertNotEquals(pairWithObjects.hashCode(), differentKeyPair.hashCode(), \"Hash codes for pairs with different keys should not be the same.\");\n\n        Pair differentValuePair = new Pair(\"key\", \"newValue\");\n        assertNotEquals(pairWithObjects.hashCode(), differentValuePair.hashCode(), \"Hash codes for pairs with different values should not be the same.\");\n    }\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Pair<K, V> {\n    K key;\n    V value;\n\n    // Constructor, getters and setters are assumed to be present\n\n    @Override\n    public int hashCode() {\n        int result = key == null ? 0 : key.hashCode();\n    \n        final int h = value == null ? 0 : value.hashCode();\n        result = 37 * result + h ^ (h >>> 16);\n    \n        return result;\n    }\n}\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<String, String> pairWithBothValues = new Pair<>();\n        pairWithBothValues.key = \"key\";\n        pairWithBothValues.value = \"value\";\n        int expectedHashWithBothValues = 37 * \"key\".hashCode() + \"value\".hashCode() ^ (\"value\".hashCode() >>> 16);\n        assertEquals(expectedHashWithBothValues, pairWithBothValues.hashCode());\n\n        Pair<String, String> pairWithNullKey = new Pair<>();\n        pairWithNullKey.key = null;\n        pairWithNullKey.value = \"value\";\n        int expectedHashWithNullKey = 37 * 0 + \"value\".hashCode() ^ (\"value\".hashCode() >>> 16);\n        assertEquals(expectedHashWithNullKey, pairWithNullKey.hashCode());\n\n        Pair<String, String> pairWithNullValue = new Pair<>();\n        pairWithNullValue.key = \"key\";\n        pairWithNullValue.value = null;\n        int expectedHashWithNullValue = 37 * \"key\".hashCode();\n        assertEquals(expectedHashWithNullValue, pairWithNullValue.hashCode());\n\n        Pair<String, String> pairWithBothNull = new Pair<>();\n        pairWithBothNull.key = null;\n        pairWithBothNull.value = null;\n        int expectedHashWithBothNull = 0;\n        assertEquals(expectedHashWithBothNull, pairWithBothNull.hashCode());\n    }\n}"
    ]
}