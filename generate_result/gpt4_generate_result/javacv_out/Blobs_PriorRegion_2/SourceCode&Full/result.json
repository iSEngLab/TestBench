{
    "project_name": "javacv",
    "file_name": "Blobs.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/Blobs.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": null,
    "source_code": "// Determine the prior (lower number) region that meets the desired conditions\npublic static int PriorRegion(int Parent, int Color, double MinArea, double MaxArea, int Label)\n{\n    double DParent = (double) Parent; \n    double DColor = (double) Color; if(DColor > 0) DColor = 1;\n    \n    int i;\n    for(i = Label; i >= 0; i--)\n    {\n        double [] Region = RegionData[i];\n        double ThisParent = Region[BLOBPARENT];\n        double ThisColor = Region[BLOBCOLOR];\n        if(DParent >= 0 && DParent != ThisParent) continue;\n        if(DColor >= 0 && DColor != ThisColor) continue;\n        if(Region[BLOBAREA] < MinArea || Region[BLOBAREA] > MaxArea) continue;  \n        break;      // We have a match!\n    }\n    if(i < 0) i = -1;   // Use -1 to flag that there was no match\n    return i;\n}\n",
    "class_name": "Blobs",
    "method_name": "PriorRegion",
    "arguments": [
        "int Parent",
        "int Color",
        "double MinArea",
        "double MaxArea",
        "int Label"
    ],
    "generate_test": [
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void PriorRegionTest() {\n        // Setup test data\n        double[][] regionData = new double[][] {\n            {0, 0, 0, 100}, // Label 0\n            {1, 1, 1, 150}, // Label 1\n            {2, 2, 1, 200}, // Label 2\n            {3, 3, 0, 250}, // Label 3\n        };\n        Blobs.RegionData = regionData;\n        Blobs.MaxLabel = regionData.length - 1;\n\n        // Define the test parameters\n        int parent = -1;  // Ignored, since we pass -1.\n        int color = 1;    // Only '1' colors will be considered.\n        double minArea = 100; // Minimum area.\n        double maxArea = 200; // Maximum area.\n        int label = 3;    // Starting label.\n\n        // Call the method under test\n        int result = Blobs.PriorRegion(parent, color, minArea, maxArea, label);\n\n        // Assert that the result is the label of the region prior to the starting label\n        // satisfying the given color, minArea, and maxArea conditions, which should be label 2.\n        assertEquals(2, result, \"The PriorRegion method did not return the expected label.\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    \n    // This setup method initializes the data that will be used in the test case.\n    @BeforeEach\n    public void setUp() {\n        // Set up test data for RegionData array assuming a static size for demonstration purposes.\n        Blobs.RegionData = new double[Blobs.BLOBTOTALCOUNT][Blobs.BLOBDATACOUNT];\n        // Sample data for regions - this has to be set based on test requirements\n        // Here, we assume three regions with different attributes\n        Blobs.RegionData[0] = new double[] {0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};  // Base region\n        Blobs.RegionData[1] = new double[] {1, 0, 1, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};  // Region 1 (color: 1, area: 80)\n        Blobs.RegionData[2] = new double[] {2, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}; // Region 2 (color: 0, area: 120)\n        Blobs.MaxLabel = 2; // Set the maximum label to the highest index in use.\n    }\n    \n    @Test\n    public void PriorRegionTest() {\n        // Set Parent, Color, MinArea, MaxArea, and Label to find a specific region.\n        int parent = 0;\n        int color = 1; // Assuming black is 0 and white is 1\n        double minArea = 60;\n        double maxArea = 100;\n        int label = 2; // Start the search from the highest label\n\n        // Expect to find a prior region matching our criteria (Region 1, label == 1)\n        int expectedRegionLabel = 1;\n\n        // Call the PriorRegion method with the parameters set above.\n        int resultRegionLabel = Blobs.PriorRegion(parent, color, minArea, maxArea, label);\n\n        // Assert that the PriorRegion method returns the correct region label\n        assertEquals(expectedRegionLabel, resultRegionLabel, \"The method should find the prior region with label 1.\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n\n    @BeforeEach\n    public void setUp() {\n        // Initialize Blobs.RegionData with some test data\n        Blobs.RegionData = new double[][] {\n                {0, 0, 0.0, 100.0}, // Label 0\n                {1, 0, 0.0, 300.0}, // Label 1\n                {2, 0, 0.0, 500.0}, // Label 2\n                {3, 0, 0.0, 200.0}, // Label 3\n                {4, 1, 1.0, 450.0}  // Label 4\n        };\n        // Set the maximum label index to work with the initialized test data\n        Blobs.MaxLabel = 4;\n    }\n\n    @Test\n    public void PriorRegionTest() {\n        // Test to find a lower number region with specific color and area range.\n        int testParent = -1; // Ignored (-1)\n        int testColor = 0;\n        double testMinArea = 250.0;\n        double testMaxArea = 400.0;\n        int testLabel = 3;\n\n        // Expected to find region 1 (due to area constraints of the test data)\n        int expectedLabel = 1;\n        int result = Blobs.PriorRegion(testParent, testColor, testMinArea, testMaxArea, testLabel);\n        assertEquals(expectedLabel, result, \"Failed to find correct prior region with specified color and area\");\n\n        // Test to ensure no match if no region meets the criteria.\n        testMinArea = 600.0;\n        expectedLabel = -1; // No match\n        result = Blobs.PriorRegion(testParent, testColor, testMinArea, testMaxArea, testLabel);\n        assertEquals(expectedLabel, result, \"Should return -1 when no prior region matches the criteria\");\n\n        // Test matching with specific parent and color ignored\n        testParent = 0;\n        testMinArea = 0.0;\n        testMaxArea = 1000.0;\n        testColor = -1; // Ignored (-1)\n        // Expected to find region 2 as it is the immediate prior label with same parent\n        expectedLabel = 2; \n        result = Blobs.PriorRegion(testParent, testColor, testMinArea, testMaxArea, testLabel);\n        assertEquals(expectedLabel, result, \"Failed to select prior region by parent ignoring color\");\n        \n        // Test with label index starting from outside the range\n        testLabel = 10;\n        // Expected to index to the highest valid region label, which is 4\n        expectedLabel = 4;\n        result = Blobs.PriorRegion(testParent, testColor, testMinArea, testMaxArea, testLabel);\n        assertEquals(expectedLabel, result, \"Should adjust start label to highest valid region when starting out of range\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n\n    @BeforeEach\n    public void setUp() {\n        // Set up test data for region analysis (each region has 14 data points)\n        Blobs.RegionData[0] = new double[] {0, -1, 1, 100, 10, 50, 50, 2500, 2500, 50, 0, 10, 0, 10}; // Border Region\n        Blobs.RegionData[1] = new double[] {1, 0, 1, 200, 20, 100, 100, 10000, 10000, 200, 10, 20, 10, 20};\n        Blobs.RegionData[2] = new double[] {2, 0, 0, 300, 30, 150, 150, 22500, 22500, 150, 20, 30, 20, 30};\n        Blobs.RegionData[3] = new double[] {3, 1, 1, 400, 40, 200, 200, 40000, 40000, 200, 30, 40, 30, 40};\n        Blobs.MaxLabel = 3; // Indicate how many labels are populated in RegionData\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Reset RegionData and MaxLabel for each test\n        Blobs.RegionData = new double[Blobs.BLOBTOTALCOUNT][Blobs.BLOBDATACOUNT];\n        Blobs.MaxLabel = 0;\n    }\n\n    @Test\n    public void PriorRegionTest() {\n        // Test finding a prior region without filtering by parent or color\n        int result = Blobs.PriorRegion(-1, -1, 100, 400, 3);\n        assertEquals(2, result, \"PriorRegion should return label 2\");\n\n        // Test finding a prior region with specific parent filtering\n        result = Blobs.PriorRegion(0, -1, 100, 400, 3);\n        assertEquals(2, result, \"PriorRegion should return label 2 with parent 0\");\n\n        // Test finding a prior region with specific color filtering\n        result = Blobs.PriorRegion(-1, 1, 100, 400, 3);\n        assertEquals(3, result, \"PriorRegion should return label 3 with color 1\");\n\n        // Test finding a prior region with area filtering\n        result = Blobs.PriorRegion(-1, -1, 250, 350, 3);\n        assertEquals(2, result, \"PriorRegion should return label 2 with area between 250 and 350\");\n\n        // Test when there is no prior region that satisfies the conditions\n        result = Blobs.PriorRegion(-1, -1, 500, 600, 3);\n        assertEquals(-1, result, \"PriorRegion should return -1 when no regions satisfy the conditions\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @BeforeEach\n    void setUp() {\n        // Initialize RegionData with dummy data\n        Blobs.MaxLabel = 3;\n        Blobs.RegionData[0] = new double[] {0, 1, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};  // Parent 1 Color Black Area 150\n        Blobs.RegionData[1] = new double[] {1, 2, 1, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};  // Parent 2 Color White Area 200\n        Blobs.RegionData[2] = new double[] {2, 1, 0, 300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};  // Parent 1 Color Black Area 300\n        Blobs.RegionData[3] = new double[] {3, 3, 1, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};  // Parent 3 Color White Area 100\n    }\n\n    @Test\n    public void PriorRegionTest() {\n        int parent = 1;\n        int color = 0;\n        double minArea = 100;\n        double maxArea = 250;\n        int startLabel = 2;\n\n        // Call the method under test\n        int result = Blobs.PriorRegion(parent, color, minArea, maxArea, startLabel);\n\n        // The expected result is the label of the region that matches the criteria just before the start label.\n        int expected = 0;\n\n        // Assert the result is as expected\n        assertEquals(expected, result, \"The PriorRegion method did not return the correct region label.\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void PriorRegionTest() {\n        // Set up predefined region data\n        Blobs.RegionData[0] = new double[] {0, 0, 0, 10}; // Label, Parent, Color, Area\n        Blobs.RegionData[1] = new double[] {1, 0, 1, 50};\n        Blobs.RegionData[2] = new double[] {2, 0, 1, 100};\n        Blobs.RegionData[3] = new double[] {3, 0, 0, 150};\n        Blobs.RegionData[4] = new double[] {4, 1, 1, 70};\n        Blobs.MaxLabel = 4;\n\n        // PriorRegion with all parameters satisfying the corresponding region\n        int region1 = Blobs.PriorRegion(0, 1, 30, 150, 4);\n        assertEquals(2, region1, \"Expected region index is 2\");\n\n        // PriorRegion with no prior region satisfying area constraints\n        int region2 = Blobs.PriorRegion(-1, -1, 300, 500, 4);\n        assertEquals(-1, region2, \"Expected no matching region, should return -1\");\n\n        // PriorRegion with specific parent and color constraints \n        int region3 = Blobs.PriorRegion(1, 1, 30, 150, 4);\n        assertEquals(4, region3, \"Expected region index with specific parent and color is 4\");\n\n        // PriorRegion with specific color constraint but ignoring parent\n        int region4 = Blobs.PriorRegion(-1, 0, 30, 150, 4);\n        assertEquals(3, region4, \"Expected region index with specific color ignoring parent is 3\");\n\n        // PriorRegion starting from a label that doesn't exist\n        int region5 = Blobs.PriorRegion(-1, -1, 30, 150, 10);\n        assertEquals(-1, region5, \"Expected no matching region starting from non-existing label, should return -1\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    Blobs blobs;\n\n    @BeforeEach\n    public void setup() {\n        blobs = new Blobs();\n        Blobs.MaxLabel = 5; // Assume there are 5 regions for testing\n        // Populate the RegionData with test data\n        Blobs.RegionData[0] = new double[]{0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        Blobs.RegionData[1] = new double[]{1, 2, 1, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        Blobs.RegionData[2] = new double[]{2, 2, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        Blobs.RegionData[3] = new double[]{3, 0, 1, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        Blobs.RegionData[4] = new double[]{4, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        Blobs.RegionData[5] = new double[]{5, 1, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    }\n\n    @Test\n    public void PriorRegionTest() {\n        // Test to get a matching region based on conditions\n        assertEquals(2, Blobs.PriorRegion(-1, -1, 10, 20, 3));\n        // Test to return -1 if no matching region is found\n        assertEquals(-1, Blobs.PriorRegion(-1, -1, 100, 200, 5));\n        // Test to match when exact parent and color are given\n        assertEquals(4, Blobs.PriorRegion(1, 0, 10, 30, 5));\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n\n    @BeforeEach\n    public void setup() {\n        // Initialize the region data for testing with arbitrary values.\n        Blobs.MaxLabel = 3;\n\n        for (int i = 0; i <= Blobs.MaxLabel; i++) {\n            Blobs.RegionData[i][Blobs.BLOBLABEL] = i;\n            Blobs.RegionData[i][Blobs.BLOBPARENT] = (i % 2 == 0) ? 1 : 2;  // Alternating parents for testing.\n            Blobs.RegionData[i][Blobs.BLOBCOLOR] = (i % 2 == 0) ? 1 : 0;   // Alternating colors for testing.\n            Blobs.RegionData[i][Blobs.BLOBAREA] = 10 * (i + 1);            // Increasing area for testing.\n        }\n    }\n\n    @Test\n    public void PriorRegionTest() {\n        // Given a parent of 1, color of 1, min area of 20, max area of 40, and starting label of 3\n        // we expect to find the region with label index 2 that satisfies these conditions.\n        int parent = 1;\n        int color = 1;\n        double minArea = 20;\n        double maxArea = 40;\n        int label = 3;\n\n        int result = Blobs.PriorRegion(parent, color, minArea, maxArea, label);\n\n        assertEquals(2, result, \"PriorRegion should return the index of the valid prior region.\");\n\n        // Test with no match\n        parent = 1;\n        color = -1; // Ignoring color\n        minArea = 100;\n        maxArea = 200;\n        label = 3;\n\n        result = Blobs.PriorRegion(parent, color, minArea, maxArea, label);\n\n        assertEquals(-1, result, \"PriorRegion should return -1 when no valid region is found.\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void PriorRegionTest() {\n        // Let's create some sample region data that will be used by the PriorRegion method.\n        // This is just sample data and in real-world scenarios, it would be generated during the Blob Analysis process.\n        Blobs.RegionData = new double[][]{\n                {0, -1, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // Blob 0, typically border or the background\n                {1, 0, 1, 250, 0, 0, 0, 0, 0, 0, 10, 20, 10, 20}, // Blob 1\n                {2, 0, 0, 100, 0, 0, 0, 0, 0, 0, 30, 40, 30, 40}, // Blob 2\n                {3, 0, 0, 300, 0, 0, 0, 0, 0, 0, 50, 60, 50, 60}, // Blob 3\n                {4, 0, 1, 200, 0, 0, 0, 0, 0, 0, 70, 80, 70, 80}  // Blob 4\n        };\n\n        // Assume Label index starts from 4 and goes down to 0.\n        // Assume MaxLabel has been calculated properly before PriorRegion call.\n        Blobs.MaxLabel = 4;\n        \n        // Test to find previous region with Color = 1, MinArea = 100, MaxArea = 300, starting from Label = 4\n        int result = Blobs.PriorRegion(-1, 1, 100, 300, 4);\n        assertEquals(4, result, \"Should find Blob 4 as the prior region.\");\n\n        // Test to find previous region ignoring Color, with MinArea = 100, MaxArea = 300, starting from Label = 4\n        result = Blobs.PriorRegion(-1, -1, 100, 300, 4);\n        assertEquals(3, result, \"Should find Blob 3 as the prior region.\");\n\n        // Test to ensure region with area smaller than MinArea is not returned\n        result = Blobs.PriorRegion(-1, 0, 150, 300, 4);\n        assertEquals(3, result, \"Should find Blob 3 as the prior region, skipping Blob 2 due to area.\");\n\n        // Test to ensure region with area greater than MaxArea is not returned\n        result = Blobs.PriorRegion(-1, 0, 50, 250, 4);\n        assertEquals(2, result, \"Should find Blob 2 as the prior region, skipping Blob 3 due to area.\");\n\n        // Test when there is no region meeting the criteria\n        result = Blobs.PriorRegion(-1, 1, 500, 1000, 4);\n        assertEquals(-1, result, \"Should return -1 as there is no prior region meeting the criteria.\");\n\n        // Test when Label index is out of bounds of the region data\n        result = Blobs.PriorRegion(-1, 1, 100, 300, 5);\n        assertEquals(-1, result, \"Should return -1 as the starting Label is out of bounds.\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    \n    // Setup for the test; initializing conditions and RegionData with mock data\n    @BeforeAll\n    public static void setup() {\n        Blobs.MaxLabel = 5; // Example max label for test regions\n        for (int i = 0; i <= Blobs.MaxLabel; i++) {\n            Blobs.RegionData[i][Blobs.BLOBLABEL] = i;\n            Blobs.RegionData[i][Blobs.BLOBPARENT] = i % 2; // Even index has parent 0, odd index has parent 1\n            Blobs.RegionData[i][Blobs.BLOBCOLOR] = (i < 3) ? 0 : 1; // Index < 3 has color 0, otherwise color 1\n            Blobs.RegionData[i][Blobs.BLOBAREA] = 10 * (i + 1); // Area increases with index\n        }\n    }\n    \n    @Test\n    public void PriorRegion_NoMatch() {\n        // Define the parameters (Parent, Color, MinArea, MaxArea, Label) for the test\n        int parent = -1; // Set to -1 to ignore parent check\n        int color = -1;  // Set to -1 to ignore color check\n        double minArea = 1000;\n        double maxArea = 5000;\n        int label = 5;\n        \n        // Call the method in question\n        int result = Blobs.PriorRegion(parent, color, minArea, maxArea, label);\n        \n        // Verify the result; expecting -1 because no region matches the extremely high minArea\n        assertEquals(-1, result, \"Should return -1 as no region matches the area criteria\");\n    }\n\n    @Test\n    public void PriorRegion_ValidMatch() {\n        // Define the parameters (Parent, Color, MinArea, MaxArea, Label) for the test\n        int parent = 1; // We want to match regions with parent 1\n        int color = 1;  // We want to match regions with color 1\n        double minArea = 20;\n        double maxArea = 50;\n        int label = 5;   // Start search from label 5\n        \n        // Call the method in question\n        int result = Blobs.PriorRegion(parent, color, minArea, maxArea, label);\n        \n        // Verify the result; expecting to match the region with label 3 since it meets the criteria and is prior to the starting label\n        assertEquals(3, result, \"Should return label 3 as it matches all the given criteria\");\n    }\n\n    @Test\n    public void PriorRegion_ValidMatchAtFirstRegion() {\n        // Define the parameters (Parent, Color, MinArea, MaxArea, Label) for the test\n        int parent = 0;\n        int color = 0;\n        double minArea = 10; // Match starting at the smallest area\n        double maxArea = 15;\n        int label = 2;       // Start search from label 2\n        \n        // Call the method in question\n        int result = Blobs.PriorRegion(parent, color, minArea, maxArea, label);\n        \n        // Verify the result; expecting to find the match at label 0 because it is the first valid region before label 2 that matches criteria\n        assertEquals(0, result, \"Should return label 0 as the first region matching the criteria\");\n    }\n}"
    ]
}