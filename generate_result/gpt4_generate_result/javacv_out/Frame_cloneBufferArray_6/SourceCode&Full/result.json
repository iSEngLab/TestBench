{
    "project_name": "javacv",
    "file_name": "Frame.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/Frame.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**\n     * This private method takes a buffer array as input and returns a deep copy.\n     * It is assumed that all buffers in the input array are of the same subclass.\n     *\n     * @param srcBuffers - Buffer array to be cloned\n     * @param clonedBuffers - Buffer array to fill with clones\n     * @return Opaque object to store\n     *\n     *  @author Extension proposed by Dragos Dutu\n     */",
    "source_code": "\nprivate static Pointer cloneBufferArray(Buffer[] srcBuffers, Buffer[] clonedBuffers) {\n    Pointer opaque = null;\n\n    if (srcBuffers != null && srcBuffers.length > 0) {\n        int totalCapacity = 0;\n        for (int i = 0; i < srcBuffers.length; i++) {\n            srcBuffers[i].rewind();\n            totalCapacity += srcBuffers[i].capacity();\n        }\n\n        /*\n         * In order to optimize the transfer we need a type check.\n         *\n         * Most CPUs support hardware memory transfer for different data\n         * types, so it's faster to copy more bytes at once rather\n         * than one byte per iteration as in case of ByteBuffer.\n         *\n         * For example, Intel CPUs support MOVSB (byte transfer), MOVSW\n         * (word transfer), MOVSD (double word transfer), MOVSS (32 bit\n         * scalar single precision floating point), MOVSQ (quad word\n         * transfer) and so on...\n         *\n         * Type checking may be improved by changing the order in\n         * which a buffer is checked against. If it's likely that the\n         * expected buffer is of type \"ShortBuffer\", then it should be\n         * checked at first place.\n         *\n         */\n\n        if (srcBuffers[0] instanceof ByteBuffer) {\n            BytePointer pointer = new BytePointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((ByteBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof ShortBuffer) {\n            ShortPointer pointer = new ShortPointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((ShortBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof IntBuffer) {\n            IntPointer pointer = new IntPointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((IntBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof LongBuffer) {\n            LongPointer pointer = new LongPointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((LongBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof FloatBuffer) {\n            FloatPointer pointer = new FloatPointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((FloatBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof DoubleBuffer) {\n            DoublePointer pointer = new DoublePointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((DoubleBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        }\n\n        for (int i = 0; i < srcBuffers.length; i++) {\n            srcBuffers[i].rewind();\n            clonedBuffers[i].rewind();\n        }\n    }\n\n    if (opaque != null) {\n        opaque.retainReference();\n    }\n    return opaque;\n}\n",
    "class_name": "Frame",
    "method_name": "cloneBufferArray",
    "arguments": [
        "Buffer srcBuffers",
        "Buffer clonedBuffers"
    ],
    "generate_test": [
        "package org.bytedeco.javacv;\n\nimport java.nio.*;\nimport org.bytedeco.javacpp.*;\nimport static org.bytedeco.javacpp.Pointer.*;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneBufferArrayTest() {\n        // Test cloning of ByteBuffer array\n        ByteBuffer[] sourceByteBuffers = new ByteBuffer[]{ByteBuffer.allocateDirect(10), ByteBuffer.allocateDirect(10)};\n        ByteBuffer[] clonedByteBuffers = new ByteBuffer[sourceByteBuffers.length];\n        BytePointer byteOpaque = (BytePointer) Frame.cloneBufferArray(sourceByteBuffers, clonedByteBuffers);\n\n        assertNotNull(byteOpaque);\n        for (int i = 0; i < sourceByteBuffers.length; i++) {\n            assertNotNull(clonedByteBuffers[i]);\n            assertEquals(sourceByteBuffers[i].capacity(), clonedByteBuffers[i].capacity());\n        }\n\n        // Test cloning of ShortBuffer array\n        ShortBuffer[] sourceShortBuffers = new ShortBuffer[]{ShortBuffer.allocate(10), ShortBuffer.allocate(10)};\n        ShortBuffer[] clonedShortBuffers = new ShortBuffer[sourceShortBuffers.length];\n        ShortPointer shortOpaque = (ShortPointer) Frame.cloneBufferArray(sourceShortBuffers, clonedShortBuffers);\n\n        assertNotNull(shortOpaque);\n        for (int i = 0; i < sourceShortBuffers.length; i++) {\n            assertNotNull(clonedShortBuffers[i]);\n            assertEquals(sourceShortBuffers[i].capacity(), clonedShortBuffers[i].capacity());\n        }\n        \n        // Test cloning of IntBuffer array\n        IntBuffer[] sourceIntBuffers = new IntBuffer[]{IntBuffer.allocate(10), IntBuffer.allocate(10)};\n        IntBuffer[] clonedIntBuffers = new IntBuffer[sourceIntBuffers.length];\n        IntPointer intOpaque = (IntPointer) Frame.cloneBufferArray(sourceIntBuffers, clonedIntBuffers);\n\n        assertNotNull(intOpaque);\n        for (int i = 0; i < sourceIntBuffers.length; i++) {\n            assertNotNull(clonedIntBuffers[i]);\n            assertEquals(sourceIntBuffers[i].capacity(), clonedIntBuffers[i].capacity());\n        }\n        \n        // Test for null source buffer\n        Pointer nullOpaque = Frame.cloneBufferArray(null, null);\n        assertNull(nullOpaque);\n        \n        // Clean up native memory\n        byteOpaque.releaseReference();\n        shortOpaque.releaseReference();\n        intOpaque.releaseReference();\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport java.nio.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneBufferArrayTest() {\n        // Prepare input buffers\n        int bufferSize = 5;\n        ByteBuffer srcByteBuffer = ByteBuffer.allocateDirect(bufferSize).put(new byte[]{1, 2, 3, 4, 5});\n        srcByteBuffer.rewind(); // rewind after putting data\n        Buffer[] srcBuffers = new Buffer[]{srcByteBuffer};\n\n        // Prepare output buffers\n        Buffer[] clonedBuffers = new Buffer[srcBuffers.length];\n        \n        // Execute the cloneBufferArray method\n        Pointer opaque = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n\n        // Perform checks\n        assertNotNull(opaque, \"Opaque pointer should not be null.\");\n        assertEquals(clonedBuffers.length, srcBuffers.length, \"Cloned buffers should have the same length as source buffers.\");\n        \n        // Verify buffer contents have been cloned correctly\n        ByteBuffer clonedByteBuffer = (ByteBuffer) clonedBuffers[0];\n        assertEquals(srcByteBuffer.capacity(), clonedByteBuffer.capacity(), \"Cloned buffer should have the same capacity as the source buffer.\");\n        for(int i = 0; i < srcByteBuffer.capacity(); i++) {\n            assertEquals(srcByteBuffer.get(i), clonedByteBuffer.get(i), \"Buffer element at index \" + i + \" should be equal.\");\n        }\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport java.nio.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneBufferArrayTest() {\n        // Create a source ByteBuffer with sample data\n        ByteBuffer byteBuffer = ByteBuffer.allocateDirect(10);\n        byteBuffer.put(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n\n        // Create a source ByteBuffer array\n        Buffer[] srcBuffers = new Buffer[]{byteBuffer};\n\n        // Create a cloned ByteBuffer array to hold the result\n        Buffer[] clonedBuffers = new Buffer[srcBuffers.length];\n\n        // Call the method under test\n        Pointer resultPointer = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n\n        // Verify that the source and cloned ByteBuffer are not the same instance\n        assertNotSame(srcBuffers[0], clonedBuffers[0]);\n\n        // Verify that the content of the original and cloned buffer are equal\n        ByteBuffer clonedByteBuffer = (ByteBuffer) clonedBuffers[0];\n        byteBuffer.rewind();\n        clonedByteBuffer.rewind();\n        for (int i = 0; i < byteBuffer.capacity(); i++) {\n            assertEquals(byteBuffer.get(i), clonedByteBuffer.get(i));\n        }\n\n        // Verify that the position and limit of the buffers are correctly set\n        assertEquals(0, byteBuffer.position());\n        assertEquals(10, byteBuffer.limit());\n\n        assertEquals(0, clonedByteBuffer.position());\n        assertEquals(10, clonedByteBuffer.limit());\n\n        // Verify that the resultPointer is not null\n        assertNotNull(resultPointer);\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.nio.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneBufferArrayTest() {\n        ByteBuffer srcByteBuffer = ByteBuffer.allocateDirect(50);\n        for (int i = 0; i < srcByteBuffer.capacity(); i++) {\n            srcByteBuffer.put(i, (byte)(i * 2));\n        }\n        ByteBuffer[] srcBuffers = {srcByteBuffer};\n\n        ByteBuffer[] clonedBuffers = new ByteBuffer[srcBuffers.length];\n        \n        Pointer opaque = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n        \n        assertNotNull(opaque, \"Opaque pointer should not be null\");\n        assertTrue(opaque instanceof BytePointer, \"Opaque pointer should be of type BytePointer\");\n\n        assertEquals(srcBuffers.length, clonedBuffers.length, \"Cloned buffers array length should match srcBuffers\");\n\n        srcBuffers[0].rewind();\n        clonedBuffers[0].rewind();\n        \n        for (int i = 0; i < srcBuffers[0].capacity(); i++) {\n            assertEquals(srcBuffers[0].get(i), clonedBuffers[0].get(i), \"Buffer elements should match after cloning\");\n        }\n        \n        // Cleanup\n        ((Pointer[])opaque)[0].releaseReference();\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport java.nio.*;\nimport org.bytedeco.javacpp.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    Frame frame = new Frame();\n\n    @Test\n    public void cloneBufferArrayTest() {\n        // Setup source and destination buffer arrays for testing.\n        ByteBuffer srcByteBuffer = ByteBuffer.allocateDirect(10).order(ByteOrder.nativeOrder());\n        for (int i = 0; i < srcByteBuffer.capacity(); i++) {\n            srcByteBuffer.put(i, (byte)i);\n        }\n        Buffer[] srcBuffers = new Buffer[] { srcByteBuffer };\n        Buffer[] clonedBuffers = new Buffer[srcBuffers.length];\n\n        // Call the method to be tested.\n        Pointer opaque = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n\n        // Check properties of the returned opaque pointer.\n        assertNotNull(opaque, \"The returned opaque pointer should not be null.\");\n        assertTrue(opaque instanceof BytePointer, \"The returned opaque pointer should be an instance of BytePointer.\");\n\n        // Check that the cloned buffer array has the correct length.\n        assertEquals(srcBuffers.length, clonedBuffers.length, \"The cloned buffer array should have the same length as the source buffer array.\");\n\n        // Check the content of the cloned buffer.\n        ByteBuffer clonedByteBuffer = (ByteBuffer)clonedBuffers[0];\n        assertNotNull(clonedByteBuffer, \"The cloned ByteBuffer should not be null.\");\n        assertEquals(srcByteBuffer.capacity(), clonedByteBuffer.capacity(), \"The cloned ByteBuffer should have the same capacity as the source ByteBuffer.\");\n\n        srcByteBuffer.rewind();\n        clonedByteBuffer.rewind();\n        for (int i = 0; i < srcByteBuffer.capacity(); i++) {\n            assertEquals(srcByteBuffer.get(i), clonedByteBuffer.get(i), \"The cloned ByteBuffer should have the same content as the source ByteBuffer.\");\n        }\n\n        // Clean up references.\n        if (opaque instanceof BytePointer) {\n            ((BytePointer)opaque).releaseReference();\n        }\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport java.nio.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n\n    @Test\n    public void cloneBufferArrayTest() {\n        // Prepare data for testing buffer cloning\n        int bufferSize = 5; // assume a small buffer size for simplicity\n        ByteBuffer originalByteBuffer = ByteBuffer.allocate(bufferSize);\n        ShortBuffer originalShortBuffer = ShortBuffer.allocate(bufferSize);\n        // Fill buffers with test data\n        for (int i = 0; i < bufferSize; i++) {\n            originalByteBuffer.put((byte) i);\n            originalShortBuffer.put((short) (i * 2));\n        }\n        Buffer[] srcBuffers = new Buffer[] {\n            originalByteBuffer,\n            originalShortBuffer\n        };\n        Buffer[] clonedBuffers = new Buffer[srcBuffers.length];\n\n        // Perform the cloning operation\n        Pointer resultPointer = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n\n        // Assertions\n        assertNotNull(resultPointer, \"The result of cloneBufferArray should not be null\");\n\n        // Check the types and contents of the cloned buffers\n        // ByteBuffer\n        assertTrue(clonedBuffers[0] instanceof ByteBuffer, \"The first cloned buffer should be a ByteBuffer\");\n        ByteBuffer clonedByteBuffer = (ByteBuffer) clonedBuffers[0];\n        assertEquals(originalByteBuffer.capacity(), clonedByteBuffer.capacity(), \"Capacities of original and cloned ByteBuffer should match\");\n        for (int i = 0; i < bufferSize; i++) {\n            assertEquals(originalByteBuffer.get(i), clonedByteBuffer.get(i), \"Contents of original and cloned ByteBuffer should match\");\n        }\n\n        // ShortBuffer\n        assertTrue(clonedBuffers[1] instanceof ShortBuffer, \"The second cloned buffer should be a ShortBuffer\");\n        ShortBuffer clonedShortBuffer = (ShortBuffer) clonedBuffers[1];\n        assertEquals(originalShortBuffer.capacity(), clonedShortBuffer.capacity(), \"Capacities of original and cloned ShortBuffer should match\");\n        for (int i = 0; i < bufferSize; i++) {\n            assertEquals(originalShortBuffer.get(i), clonedShortBuffer.get(i), \"Contents of original and cloned ShortBuffer should match\");\n        }\n\n        // Ensure that the original buffers have been rewound\n        assertEquals(0, originalByteBuffer.position(), \"The original ByteBuffer should have been rewound\");\n        assertEquals(0, originalShortBuffer.position(), \"The original ShortBuffer should have been rewound\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport java.nio.ByteBuffer;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneBufferArrayTest() {\n        // Prepare the source buffers\n        ByteBuffer originalBuffer1 = ByteBuffer.allocateDirect(10); // Allocate a direct byte buffer\n        ByteBuffer originalBuffer2 = ByteBuffer.allocateDirect(20);\n        for (byte i = 0; i < originalBuffer1.capacity(); i++) originalBuffer1.put(i, i); // Populate the buffers\n        for (byte i = 0; i < originalBuffer2.capacity(); i++) originalBuffer2.put(i, i);\n        Buffer[] srcBuffers = new Buffer[] {originalBuffer1, originalBuffer2}; // Array of source buffers\n\n        // Prepare the buffer that will hold the cloned buffers\n        Buffer[] clonedBuffers = new Buffer[srcBuffers.length];\n\n        // Clone the buffer array\n        Pointer opaque = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n\n        // Test assertions\n        assertNotNull(opaque, \"The opaque pointer should not be null after cloning.\");\n        assertEquals(srcBuffers.length, clonedBuffers.length, \"The cloned buffer array should have the same length as the source.\");\n\n        for (int i = 0; i < srcBuffers.length; i++) {\n            ByteBuffer srcBuffer = (ByteBuffer) srcBuffers[i];\n            ByteBuffer clonedBuffer = (ByteBuffer) clonedBuffers[i];\n\n            assertEquals(srcBuffer.capacity(), clonedBuffer.capacity(), \"The capacities of source and cloned buffers should match.\");\n            for (int j = 0; j < srcBuffer.capacity(); j++) {\n                assertEquals(srcBuffer.get(j), clonedBuffer.get(j), \"Element mismatch at position \" + j + \" in buffer \" + i);\n            }\n        }\n        \n        // Clean up to prevent memory leaks\n        if (opaque instanceof Pointer) {\n            ((Pointer) opaque).deallocate();\n        }\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport java.nio.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.bytedeco.javacpp.BytePointer;\nimport org.bytedeco.javacpp.Pointer;\n\npublic class FrameTest {\n\n    @Test\n    public void cloneBufferArrayTest() {\n        // Test cloning of ByteBuffer array\n        ByteBuffer[] sourceByteBuffers = new ByteBuffer[]{\n                ByteBuffer.allocateDirect(10).put((byte)1),\n                ByteBuffer.allocateDirect(20).put((byte)2)\n        };\n        ByteBuffer[] clonedByteBuffers = new ByteBuffer[sourceByteBuffers.length];\n        Pointer clonedBytePointer = Frame.cloneBufferArray(sourceByteBuffers, clonedByteBuffers);\n\n        assertNotNull(clonedBytePointer);\n        assertEquals(sourceByteBuffers.length, clonedByteBuffers.length);\n        for (int i = 0; i < sourceByteBuffers.length; i++) {\n            sourceByteBuffers[i].flip();\n            clonedByteBuffers[i].flip();\n            assertEquals(sourceByteBuffers[i], clonedByteBuffers[i]);\n        }\n\n        // Test cloning of ShortBuffer array\n        ShortBuffer[] sourceShortBuffers = new ShortBuffer[]{\n                ShortBuffer.allocate(10).put((short)10),\n                ShortBuffer.allocate(20).put((short)20)\n        };\n        ShortBuffer[] clonedShortBuffers = new ShortBuffer[sourceShortBuffers.length];\n        Pointer clonedShortPointer = Frame.cloneBufferArray(sourceShortBuffers, clonedShortBuffers);\n\n        assertNotNull(clonedShortPointer);\n        assertEquals(sourceShortBuffers.length, clonedShortBuffers.length);\n        for (int i = 0; i < sourceShortBuffers.length; i++) {\n            sourceShortBuffers[i].flip();\n            clonedShortBuffers[i].flip();\n            assertEquals(sourceShortBuffers[i], clonedShortBuffers[i]);\n        }\n\n        // Test cloning of IntBuffer array\n        IntBuffer[] sourceIntBuffers = new IntBuffer[]{\n                IntBuffer.allocate(10).put(100),\n                IntBuffer.allocate(20).put(200)\n        };\n        IntBuffer[] clonedIntBuffers = new IntBuffer[sourceIntBuffers.length];\n        Pointer clonedIntPointer = Frame.cloneBufferArray(sourceIntBuffers, clonedIntBuffers);\n\n        assertNotNull(clonedIntPointer);\n        assertEquals(sourceIntBuffers.length, clonedIntBuffers.length);\n        for (int i = 0; i < sourceIntBuffers.length; i++) {\n            sourceIntBuffers[i].flip();\n            clonedIntBuffers[i].flip();\n            assertEquals(sourceIntBuffers[i], clonedIntBuffers[i]);\n        }\n\n        // Always a good habit to release resources (just for demonstration, usually done in @AfterEach or @AfterAll in real tests)\n        clonedBytePointer.releaseReference();\n        clonedShortPointer.releaseReference();\n        clonedIntPointer.releaseReference();\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport java.nio.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n\n    @Test\n    public void cloneBufferArrayTest() {\n        // Prepare the Buffers for the test\n        ByteBuffer originalByteBuffer = ByteBuffer.allocateDirect(10);\n        originalByteBuffer.put(new byte[10]);\n        Buffer[] srcBuffers = new Buffer[] { originalByteBuffer };\n        Buffer[] clonedBuffers = new Buffer[srcBuffers.length];\n\n        // Call the method to test\n        Pointer resultPointer = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n\n        // Assertions and validations\n        assertNotNull(resultPointer, \"The result should not be null.\");\n        assertNotNull(clonedBuffers[0], \"The cloned buffer should not be null.\");\n        assertTrue(clonedBuffers[0] instanceof ByteBuffer, \"The cloned buffer should be an instance of ByteBuffer.\");\n        assertEquals(originalByteBuffer.capacity(), clonedBuffers[0].capacity(), \"The capacities of the buffers should be equal.\");\n        assertEquals(originalByteBuffer.limit(), clonedBuffers[0].limit(), \"The limits of the buffers should be equal.\");\n\n        originalByteBuffer.rewind();\n        ((ByteBuffer) clonedBuffers[0]).rewind(); // Cast is required because Buffer doesn't have the get() method we need\n\n        // Compare buffer contents\n        byte[] srcByteArray = new byte[originalByteBuffer.capacity()];\n        originalByteBuffer.get(srcByteArray);\n        byte[] clonedByteArray = new byte[((ByteBuffer) clonedBuffers[0]).capacity()];\n        ((ByteBuffer) clonedBuffers[0]).get(clonedByteArray);\n        assertArrayEquals(srcByteArray, clonedByteArray, \"The content of buffers should be equal.\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport org.junit.jupiter.api.Test;\nimport java.nio.ByteBuffer;\nimport java.nio.ShortBuffer;\nimport java.nio.IntBuffer;\n\npublic class FrameTest {\n\n    @Test\n    public void cloneBufferArrayTest() {\n        // Setup Buffers to test\n        ByteBuffer byteBuffer = ByteBuffer.allocate(5);\n        byteBuffer.put(new byte[]{1, 2, 3, 4, 5});\n        ShortBuffer shortBuffer = ShortBuffer.allocate(5);\n        shortBuffer.put(new short[]{1, 2, 3, 4, 5});\n        IntBuffer intBuffer = IntBuffer.allocate(5);\n        intBuffer.put(new int[]{1, 2, 3, 4, 5});\n\n        // Array containing various buffer types\n        Buffer[] srcBuffers = new Buffer[]{byteBuffer, shortBuffer, intBuffer};\n        Buffer[] clonedBuffers = new Buffer[srcBuffers.length];\n\n        // Test the cloning method for ByteBuffers\n        Pointer bytePointer = Frame.cloneBufferArray(new Buffer[]{byteBuffer}, clonedBuffers);\n        assertNotNull(bytePointer);\n        ByteBuffer clonedByteBuffer = (ByteBuffer) clonedBuffers[0];\n        assertNotNull(clonedByteBuffer);\n        assertEquals(byteBuffer.capacity(), clonedByteBuffer.capacity());\n        for (int i = 0; i < byteBuffer.capacity(); i++) {\n            assertEquals(byteBuffer.get(i), clonedByteBuffer.get(i));\n        }\n\n        // Test the cloning method for ShortBuffers\n        Pointer shortPointer = Frame.cloneBufferArray(new Buffer[]{shortBuffer}, clonedBuffers);\n        assertNotNull(shortPointer);\n        ShortBuffer clonedShortBuffer = (ShortBuffer) clonedBuffers[0];\n        assertNotNull(clonedShortBuffer);\n        assertEquals(shortBuffer.capacity(), clonedShortBuffer.capacity());\n        for (int i = 0; i < shortBuffer.capacity(); i++) {\n            assertEquals(shortBuffer.get(i), clonedShortBuffer.get(i));\n        }\n\n        // Test the cloning method for IntBuffers\n        Pointer intPointer = Frame.cloneBufferArray(new Buffer[]{intBuffer}, clonedBuffers);\n        assertNotNull(intPointer);\n        IntBuffer clonedIntBuffer = (IntBuffer) clonedBuffers[0];\n        assertNotNull(clonedIntBuffer);\n        assertEquals(intBuffer.capacity(), clonedIntBuffer.capacity());\n        for (int i = 0; i < intBuffer.capacity(); i++) {\n            assertEquals(intBuffer.get(i), clonedIntBuffer.get(i));\n        }\n    }\n}"
    ]
}