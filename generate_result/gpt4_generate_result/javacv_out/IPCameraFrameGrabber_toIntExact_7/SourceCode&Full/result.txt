Source code: 


private static int toIntExact(long value) {
    if ((int) value != value) {
        throw new ArithmeticException("integer overflow");
    }
    return (int) value;
}



No.1 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    
    // Test for success on a value that can be precisely represented as an int
    @Test
    public void toIntExactSuccessTest() {
        long withinIntRange = 1234567890L;
        assertEquals((int) withinIntRange, IPCameraFrameGrabber.toIntExact(withinIntRange), 
            "Conversion of long within int range did not succeed as expected.");
    }
    
    // Test for expected exception on a value that cannot be represented as an int
    @Test
    public void toIntExactOverflowTest() {
        long outsideIntRange = ((long) Integer.MAX_VALUE) + 1;
        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact(outsideIntRange);
        }, "ArithmeticException was expected due to integer overflow, but was not thrown.");
    }
}


No.2 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    @Test
    public void toIntExactTest() {
        // Test with a value that does not cause overflow
        int expected = 123456;
        long value = 123456L;
        assertEquals(expected, IPCameraFrameGrabber.toIntExact(value),
                "The toIntExact method should return the int value when there's no overflow");

        // Test with a maximum int value that does not cause overflow
        expected = Integer.MAX_VALUE;
        value = (long) Integer.MAX_VALUE;
        assertEquals(expected, IPCameraFrameGrabber.toIntExact(value),
                "The toIntExact method should return the int value when there's no overflow");

        // Test with a value that causes overflow
        value = ((long) Integer.MAX_VALUE) + 1;
        Exception exception = assertThrows(ArithmeticException.class,
                () -> IPCameraFrameGrabber.toIntExact(value),
                "The toIntExact method should throw ArithmeticException when overflow occurs");

        String expectedMessage = "integer overflow";
        String actualMessage = exception.getMessage();
        assertTrue(actualMessage.contains(expectedMessage),
                "Exception message must contain the expected overflow message");

        // Test with a minimum int value that does not cause overflow
        expected = Integer.MIN_VALUE;
        value = (long) Integer.MIN_VALUE;
        assertEquals(expected, IPCameraFrameGrabber.toIntExact(value),
                "The toIntExact method should return the int value when there's no overflow");

        // Test with a value that causes underflow
        value = ((long) Integer.MIN_VALUE) - 1;
        exception = assertThrows(ArithmeticException.class,
                () -> IPCameraFrameGrabber.toIntExact(value),
                "The toIntExact method should throw ArithmeticException when underflow occurs");

        actualMessage = exception.getMessage();
        assertTrue(actualMessage.contains(expectedMessage),
                "Exception message must contain the expected underflow message");
    }
}


No.3 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class IPCameraFrameGrabberTest {
    
    // Utility method to access the private method 'toIntExact'
    private static int toIntExact(long value) {
        try {
            java.lang.reflect.Method method = IPCameraFrameGrabber.class.getDeclaredMethod("toIntExact", long.class);
            method.setAccessible(true);
            return (Integer) method.invoke(null, value);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void toIntExactTestWithinIntRange() {
        // Test with a value within the int range.
        long inRangeValue = 100L;
        assertEquals(100, toIntExact(inRangeValue), "The value should be properly cast to int.");
    }

    @Test
    public void toIntExactTestAtIntBoundary() {
        // Test with the maximum int value.
        long intMaxValue = Integer.MAX_VALUE;
        assertEquals(Integer.MAX_VALUE, toIntExact(intMaxValue), "The maximum int value should not overflow.");

        // Test with the minimum int value.
        long intMinValue = Integer.MIN_VALUE;
        assertEquals(Integer.MIN_VALUE, toIntExact(intMinValue), "The minimum int value should not overflow.");
    }

    @Test
    public void toIntExactTestOverflow() {
        // Test with a value just above the int range to check for the overflow exception.
        long overflowValue = ((long) Integer.MAX_VALUE) + 1;
        assertThrows(ArithmeticException.class, () -> toIntExact(overflowValue), "Overflow should throw an ArithmeticException.");

        // Test with a value just below the int range to check for the overflow exception.
        long underflowValue = ((long) Integer.MIN_VALUE) - 1;
        assertThrows(ArithmeticException.class, () -> toIntExact(underflowValue), "Underflow should throw an ArithmeticException.");
    }
}


No.4 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    // Since the method is private, it needs to be accessed via reflection or by adding a testing seam
    // For the sake of this exercise, I'm assuming a public or package-private access has been given for testing.

    @Test
    public void toIntExactTestWithValidInput() {
        assertEquals(0, IPCameraFrameGrabber.toIntExact(0L));
        assertEquals(42, IPCameraFrameGrabber.toIntExact(42L));
        assertEquals(-42, IPCameraFrameGrabber.toIntExact(-42L));
        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE));
        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE));
    }

    @Test
    public void toIntExactTestWithOverflow() {
        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE + 1);
        });

        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE - 1);
        });
    }
}


No.5 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {

    // Assuming toIntExact is a method within IPCameraFrameGrabber 
    // and can be accessed in the test context
    // (e.g., it has package-private access).
    // If it's private, it should not be tested directly or should be made package-private.
    
    @Test
    public void toIntExactTest() {
        assertAll("toIntExact should correctly convert long values to int or throw",
            // Test case with a value that fits into an int
            () -> assertEquals(42, IPCameraFrameGrabber.toIntExact(42L), "toIntExact should return the same int value for a long that fits within int range"),
            // Test case with the maximum int value
            () -> assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE), "toIntExact should return the same value for the maximum int as long"),
            // Test case with the minimum int value
            () -> assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE), "toIntExact should return the same value for the minimum int as long"),
            // Test case that should throw an ArithmeticException due to overflow - value too large
            () -> assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE + 1), "toIntExact should throw ArithmeticException when long value is too large to fit into an int range"),
            // Test case that should throw an ArithmeticException due to underflow - value too small
            () -> assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE - 1), "toIntExact should throw ArithmeticException when long value is too small to fit into an int range")
        );
    }
}


No.6 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    @Test
    public void toIntExactTest() {
        // Test for values that fit within int range
        assertEquals(0, IPCameraFrameGrabber.toIntExact(0L));
        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE));
        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE));

        // Test for values that overflow int range
        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE + 1);
        });

        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE - 1);
        });

        // Test for large long values outside the int range
        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE);
        });

        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact(Long.MIN_VALUE);
        });
    }
}


No.7 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {

    @Test
    public void toIntExactTest() {

        // Case where conversion is successful
        assertEquals(0, IPCameraFrameGrabber.toIntExact(0L), "Conversion of 0L should succeed");
        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE), "Conversion of max int value should succeed");
        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE), "Conversion of min int value should succeed");

        // Case where conversion should fail due to overflow
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE + 1), "Conversion should overflow and fail");
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE - 1), "Conversion should underflow and fail");
        
        // Additional tests could be written to cover more edge cases if necessary
    }
}



No.8 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {

    // Inner class to access private methods of IPCameraFrameGrabber for testing
    static class TestFrameGrabber extends IPCameraFrameGrabber {
        public TestFrameGrabber() throws Exception {
            // Dummy URL is passed since we are testing a static utility method.
            super("http://127.0.0.1", -1, -1, null);
        }

        public static int callToIntExact(long value) {
            // This static method accesses the private static method in IPCameraFrameGrabber
            return toIntExact(value);
        }
    }

    @Test
    public void toIntExactTest() {
        // Test for a value that does not cause overflow
        assertEquals(0, TestFrameGrabber.callToIntExact(0L));
        assertEquals(Integer.MAX_VALUE, TestFrameGrabber.callToIntExact((long) Integer.MAX_VALUE));
        assertEquals(Integer.MIN_VALUE, TestFrameGrabber.callToIntExact((long) Integer.MIN_VALUE));

        // Test for value that overflows an int should throw ArithmeticException
        Throwable overflowException = assertThrows(ArithmeticException.class, () -> {
            TestFrameGrabber.callToIntExact((long) Integer.MAX_VALUE + 1);
        });
        assertEquals("integer overflow", overflowException.getMessage());

        // Test for negative value that overflows an int should also throw ArithmeticException
        Throwable underflowException = assertThrows(ArithmeticException.class, () -> {
            TestFrameGrabber.callToIntExact((long) Integer.MIN_VALUE - 1);
        });
        assertEquals("integer overflow", underflowException.getMessage());
    }
}


No.9 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {

    // Assuming we have an inner class for the purpose of test so that we can access the private method.
    // If the method toIntExact was not private, we would simply call it directly on IPCameraFrameGrabber class.
    private static class IPCameraFrameGrabberForTest extends IPCameraFrameGrabber {
        public static int toIntExactPublic(long value) {
            return IPCameraFrameGrabber.toIntExact(value);
        }
    }

    @Test
    public void toIntExactTest() {
        // Test for cases without overflow.
        assertEquals(0, IPCameraFrameGrabberForTest.toIntExactPublic(0), "toIntExact should return 0 for input 0.");
        assertEquals(42, IPCameraFrameGrabberForTest.toIntExactPublic(42), "toIntExact should return 42 for input 42.");
        assertEquals(-42, IPCameraFrameGrabberForTest.toIntExactPublic(-42), "toIntExact should return -42 for input -42.");
        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabberForTest.toIntExactPublic(Integer.MAX_VALUE), 
                     "toIntExact should return Integer.MAX_VALUE for input Integer.MAX_VALUE.");

        // Test for cases with overflow.
        ArithmeticException exception;

        exception = assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabberForTest.toIntExactPublic((long) Integer.MAX_VALUE + 1));
        assertEquals("integer overflow", exception.getMessage(), 
                     "toIntExact should throw an exception for integer overflow when input is greater than Integer.MAX_VALUE.");
        
        exception = assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabberForTest.toIntExactPublic((long) Integer.MIN_VALUE - 1));
        assertEquals("integer overflow", exception.getMessage(), 
                     "toIntExact should throw an exception for integer overflow when input is less than Integer.MIN_VALUE.");
    }
}



No.10 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    
    // Helper method to invoke the private toIntExact method using reflection.
    private static int callToIntExact(long value) throws Exception {
        java.lang.reflect.Method method = IPCameraFrameGrabber.class.getDeclaredMethod("toIntExact", long.class);
        method.setAccessible(true);
        return (int) method.invoke(null, value);
    }
    
    @Test
    public void toIntExactWithinIntRange() {
        assertAll("toIntExact for values within int range",
            () -> assertEquals(0, callToIntExact(0L)),
            () -> assertEquals(Integer.MAX_VALUE, callToIntExact((long) Integer.MAX_VALUE)),
            () -> assertEquals(Integer.MIN_VALUE, callToIntExact((long) Integer.MIN_VALUE))
        );
    }

    @Test
    public void toIntExactOutsideIntRange() {
        assertAll("toIntExact throws ArithmeticException for values outside of int range",
            () -> assertThrows(ArithmeticException.class, () -> callToIntExact(((long) Integer.MAX_VALUE) + 1)),
            () -> assertThrows(ArithmeticException.class, () -> callToIntExact(((long) Integer.MIN_VALUE) - 1))
        );
    }
}


