{
    "project_name": "javacv",
    "file_name": "IPCameraFrameGrabber.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/IPCameraFrameGrabber.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**\n     * Returns the value of the {@code long} argument;\n     * throwing an exception if the value overflows an {@code int}.\n     *\n     * @param value the long value\n     * @return the argument as an int\n     * @throws ArithmeticException if the {@code argument} overflows an int\n     * @see <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toIntExact-long-\">Java 8 Implementation</a>\n     */",
    "source_code": "\nprivate static int toIntExact(long value) {\n    if ((int) value != value) {\n        throw new ArithmeticException(\"integer overflow\");\n    }\n    return (int) value;\n}\n",
    "class_name": "IPCameraFrameGrabber",
    "method_name": "toIntExact",
    "arguments": [
        "long value"
    ],
    "generate_test": [
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n\n    @Test\n    public void toIntExactTest() {\n        // Test case where no exception should occur\n        assertEquals(1000, IPCameraFrameGrabber.toIntExact(1000L), \"The toIntExact method should properly convert long to int when no overflow occurs\");\n\n        // Test case where an overflow should cause an exception\n        assertThrows(ArithmeticException.class, () -> {\n            IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE);\n        }, \"The toIntExact method should throw an ArithmeticException in case of integer overflow\");\n\n        // Test case where a negative overflow should cause an exception\n        assertThrows(ArithmeticException.class, () -> {\n            IPCameraFrameGrabber.toIntExact(Long.MIN_VALUE);\n        }, \"The toIntExact method should throw an ArithmeticException in case of negative integer overflow\");\n\n        // Test case where the maximum int value is passed\n        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long)Integer.MAX_VALUE), \"The toIntExact method should properly handle the maximum int value\");\n\n        // Test case where the minimum int value is passed\n        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long)Integer.MIN_VALUE), \"The toIntExact method should properly handle the minimum int value\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class IPCameraFrameGrabberTest {\n\n    @Test\n    public void toIntExactTest() {\n        assertEquals(0, IPCameraFrameGrabber.toIntExact(0L), \"toIntExact should successfully convert zero long to int\");\n        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact(Integer.MAX_VALUE), \"toIntExact should successfully convert Integer.MAX_VALUE\");\n\n        // Boundary testing\n        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact(Integer.MIN_VALUE), \"toIntExact should successfully convert Integer.MIN_VALUE\");\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE + 1), \"toIntExact should throw exception on integer overflow\");\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE - 1), \"toIntExact should throw exception on integer underflow\");\n\n        // Testing with a simple positive and negative integer\n        assertEquals(123, IPCameraFrameGrabber.toIntExact(123L), \"toIntExact should successfully convert 123L to int\");\n        assertEquals(-123, IPCameraFrameGrabber.toIntExact(-123L), \"toIntExact should successfully convert -123L to int\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n\n    // Private method toIntExact from IPCameraFrameGrabber should be made accessible\n    // through reflection for testing as it is not available to other classes.\n    // However, the structure of the test class does not match the provided context.\n    // Instead, below is a completed version of the test that could be used within IPCameraFrameGrabber\n    // assuming toIntExact method is made accessible (public, package-private or protected).\n\n    @Test\n    public void toIntExactTest() {\n        // Test for a value within integer range\n        assertEquals(0, IPCameraFrameGrabber.toIntExact(0L));\n        assertEquals(123, IPCameraFrameGrabber.toIntExact(123L));\n        assertEquals(-123, IPCameraFrameGrabber.toIntExact(-123L));\n\n        // Test for the maximum and minimum integer values\n        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE));\n        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE));\n\n        // Test for a value that causes an overflow\n        Exception exception = assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE));\n        assertTrue(exception.getMessage().contains(\"integer overflow\"));\n\n        // Test for a value that causes an underflow\n        exception = assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(Long.MIN_VALUE));\n        assertTrue(exception.getMessage().contains(\"integer overflow\"));\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n    @Test\n    public void toIntExactTest() {\n        // Test with a value that can be cast to int without issues\n        assertEquals(42, IPCameraFrameGrabber.toIntExact(42L), \"toIntExact should convert the long 42 to int 42\");\n\n        // Test with the maximum int value, which should not cause an exception\n        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long)Integer.MAX_VALUE), \"toIntExact should convert the maximum int value without throwing\");\n\n        // Test with the minimum int value, which should not cause an exception\n        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long)Integer.MIN_VALUE), \"toIntExact should convert the minimum int value without throwing\");\n\n        // Test with a value that is too large to be cast to an int without overflow\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE), \"toIntExact should throw an ArithmeticException with a value too large for int\");\n\n        // Test with a value that is too small to be cast to an int without overflow\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(Long.MIN_VALUE), \"toIntExact should throw an ArithmeticException with a value too small for int\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n\n    @Test\n    public void toIntExactTest() {\n        // Test case where no exception should be thrown and the proper int is returned\n        assertEquals(0, IPCameraFrameGrabber.toIntExact(0L), \"Zero long value did not convert to expected int value.\");\n        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE), \"Max int value did not convert to expected int value.\");\n        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE), \"Min int value did not convert to expected int value.\");\n\n        // Test case that should throw an ArithmeticException because the long is too large for an int\n        assertThrows(ArithmeticException.class, () -> {\n            IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE + 1);\n        }, \"Expected an ArithmeticException due to integer overflow.\");\n\n        // Test case that should throw an ArithmeticException because the long is too small for an int\n        assertThrows(ArithmeticException.class, () -> {\n            IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE - 1);\n        }, \"Expected an ArithmeticException due to integer underflow.\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n    @Test\n    public void toIntExactWhenWithinIntRangeThenSuccess() {\n        // Case for valid conversion where value is within int range\n        long withinRangeValue = Integer.MAX_VALUE; // Max int value\n        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact(withinRangeValue));\n    }\n    \n    @Test\n    public void toIntExactWhenOutsideIntRangeThenException() {\n        // Case for invalid conversion where value is outside of int range\n        long outsideRangeValue = ((long) Integer.MAX_VALUE) + 1; // Just outside max int value\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(outsideRangeValue));\n    }\n    \n    @Test\n    public void toIntExactWhenMinimumIntRangeThenSuccess() {\n        // Case for valid conversion where value is minimum int value\n        long minimumIntegerValue = Integer.MIN_VALUE;\n        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact(minimumIntegerValue));\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n\n    @Test\n    public void toIntExactWithinRange() {\n        // Test a value within int range, no exception should be thrown\n        long value = 1234567890L;\n        assertEquals((int) value, IPCameraFrameGrabber.toIntExact(value));\n    }\n    \n    @Test\n    public void toIntExactAtIntBoundary() {\n        // Test the boundary conditions for int range\n        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE));\n        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE));\n    }\n\n    @Test\n    public void toIntExactOutsideRange() {\n        // Test a value outside the int range, should throw ArithmeticException\n        long valueTooLarge = ((long) Integer.MAX_VALUE) + 1;\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(valueTooLarge));\n\n        long valueTooSmall = ((long) Integer.MIN_VALUE) - 1;\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(valueTooSmall));\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n\n    @Test\n    public void toIntExactTest() {\n        assertEquals(0, IPCameraFrameGrabber.toIntExact(0L));\n        assertEquals(123, IPCameraFrameGrabber.toIntExact(123L));\n        assertEquals(-123, IPCameraFrameGrabber.toIntExact(-123L));\n        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact(Integer.MAX_VALUE));\n\n        // Test boundary conditions around the positive limit of int range\n        assertDoesNotThrow(() -> IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE));\n        Exception positiveOverflowException = assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE + 1L));\n        assertEquals(\"integer overflow\", positiveOverflowException.getMessage());\n\n        // Test boundary conditions around the negative limit of int range\n        assertDoesNotThrow(() -> IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE));\n        Exception negativeOverflowException = assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE - 1L));\n        assertEquals(\"integer overflow\", negativeOverflowException.getMessage());\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n    \n    @Test\n    public void toIntExactTest() {\n        // Test a value that does not cause integer overflow\n        assertEquals(1000, IPCameraFrameGrabber.toIntExact(1000L), \"toIntExact should return the int value of the long when there is no overflow\");\n\n        // Test the maximum int value that should not cause overflow\n        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE),\n                \"toIntExact should return the int value when input is the max int value\");\n\n        // Test a value that does cause integer overflow\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(((long) Integer.MAX_VALUE) + 1),\n                \"toIntExact should throw an ArithmeticException when there is an integer overflow\");\n\n        // Test the minimum int value that should not cause overflow\n        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE),\n                \"toIntExact should return the int value when input is the min int value\");\n\n        // Test a value below the minimum int value which should cause integer overflow\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(((long) Integer.MIN_VALUE) - 1),\n                \"toIntExact should throw an ArithmeticException when the value is less than Integer.MIN_VALUE\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n\n    @Test\n    public void toIntExactTest() {\n        // Test for a value that fits within the int range\n        assertEquals(123, IPCameraFrameGrabber.toIntExact(123L), \"toIntExact should convert the same value for fitting long\");\n\n        // Test for the maximum int value (should not throw)\n        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE), \"toIntExact should convert the maximum int value correctly\");\n\n        // Test for the minimum int value (should not throw)\n        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE), \"toIntExact should convert the minimum int value correctly\");\n\n        // Test for a value that does not fit within the int range (should throw)\n        assertThrows(ArithmeticException.class, () -> {\n            IPCameraFrameGrabber.toIntExact(((long) Integer.MAX_VALUE) + 1);\n        }, \"toIntExact should throw an exception on integer overflow\");\n\n        // Test for a value that is less than the int range (should throw)\n        assertThrows(ArithmeticException.class, () -> {\n            IPCameraFrameGrabber.toIntExact(((long) Integer.MIN_VALUE) - 1);\n        }, \"toIntExact should throw an exception on integer underflow\");\n    }\n}"
    ]
}