Source code: 


private static int toIntExact(long value) {
    if ((int) value != value) {
        throw new ArithmeticException("integer overflow");
    }
    return (int) value;
}



No.1 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {

    @Test
    public void toIntExactTest() {
        // Test case where no exception should occur
        assertEquals(1000, IPCameraFrameGrabber.toIntExact(1000L), "The toIntExact method should properly convert long to int when no overflow occurs");

        // Test case where an overflow should cause an exception
        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE);
        }, "The toIntExact method should throw an ArithmeticException in case of integer overflow");

        // Test case where a negative overflow should cause an exception
        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact(Long.MIN_VALUE);
        }, "The toIntExact method should throw an ArithmeticException in case of negative integer overflow");

        // Test case where the maximum int value is passed
        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long)Integer.MAX_VALUE), "The toIntExact method should properly handle the maximum int value");

        // Test case where the minimum int value is passed
        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long)Integer.MIN_VALUE), "The toIntExact method should properly handle the minimum int value");
    }
}


No.2 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class IPCameraFrameGrabberTest {

    @Test
    public void toIntExactTest() {
        assertEquals(0, IPCameraFrameGrabber.toIntExact(0L), "toIntExact should successfully convert zero long to int");
        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact(Integer.MAX_VALUE), "toIntExact should successfully convert Integer.MAX_VALUE");

        // Boundary testing
        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact(Integer.MIN_VALUE), "toIntExact should successfully convert Integer.MIN_VALUE");
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE + 1), "toIntExact should throw exception on integer overflow");
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE - 1), "toIntExact should throw exception on integer underflow");

        // Testing with a simple positive and negative integer
        assertEquals(123, IPCameraFrameGrabber.toIntExact(123L), "toIntExact should successfully convert 123L to int");
        assertEquals(-123, IPCameraFrameGrabber.toIntExact(-123L), "toIntExact should successfully convert -123L to int");
    }
}


No.3 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {

    // Private method toIntExact from IPCameraFrameGrabber should be made accessible
    // through reflection for testing as it is not available to other classes.
    // However, the structure of the test class does not match the provided context.
    // Instead, below is a completed version of the test that could be used within IPCameraFrameGrabber
    // assuming toIntExact method is made accessible (public, package-private or protected).

    @Test
    public void toIntExactTest() {
        // Test for a value within integer range
        assertEquals(0, IPCameraFrameGrabber.toIntExact(0L));
        assertEquals(123, IPCameraFrameGrabber.toIntExact(123L));
        assertEquals(-123, IPCameraFrameGrabber.toIntExact(-123L));

        // Test for the maximum and minimum integer values
        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE));
        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE));

        // Test for a value that causes an overflow
        Exception exception = assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE));
        assertTrue(exception.getMessage().contains("integer overflow"));

        // Test for a value that causes an underflow
        exception = assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(Long.MIN_VALUE));
        assertTrue(exception.getMessage().contains("integer overflow"));
    }
}


No.4 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    @Test
    public void toIntExactTest() {
        // Test with a value that can be cast to int without issues
        assertEquals(42, IPCameraFrameGrabber.toIntExact(42L), "toIntExact should convert the long 42 to int 42");

        // Test with the maximum int value, which should not cause an exception
        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long)Integer.MAX_VALUE), "toIntExact should convert the maximum int value without throwing");

        // Test with the minimum int value, which should not cause an exception
        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long)Integer.MIN_VALUE), "toIntExact should convert the minimum int value without throwing");

        // Test with a value that is too large to be cast to an int without overflow
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE), "toIntExact should throw an ArithmeticException with a value too large for int");

        // Test with a value that is too small to be cast to an int without overflow
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(Long.MIN_VALUE), "toIntExact should throw an ArithmeticException with a value too small for int");
    }
}


No.5 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {

    @Test
    public void toIntExactTest() {
        // Test case where no exception should be thrown and the proper int is returned
        assertEquals(0, IPCameraFrameGrabber.toIntExact(0L), "Zero long value did not convert to expected int value.");
        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE), "Max int value did not convert to expected int value.");
        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE), "Min int value did not convert to expected int value.");

        // Test case that should throw an ArithmeticException because the long is too large for an int
        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE + 1);
        }, "Expected an ArithmeticException due to integer overflow.");

        // Test case that should throw an ArithmeticException because the long is too small for an int
        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE - 1);
        }, "Expected an ArithmeticException due to integer underflow.");
    }
}


No.6 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    @Test
    public void toIntExactWhenWithinIntRangeThenSuccess() {
        // Case for valid conversion where value is within int range
        long withinRangeValue = Integer.MAX_VALUE; // Max int value
        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact(withinRangeValue));
    }
    
    @Test
    public void toIntExactWhenOutsideIntRangeThenException() {
        // Case for invalid conversion where value is outside of int range
        long outsideRangeValue = ((long) Integer.MAX_VALUE) + 1; // Just outside max int value
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(outsideRangeValue));
    }
    
    @Test
    public void toIntExactWhenMinimumIntRangeThenSuccess() {
        // Case for valid conversion where value is minimum int value
        long minimumIntegerValue = Integer.MIN_VALUE;
        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact(minimumIntegerValue));
    }
}


No.7 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {

    @Test
    public void toIntExactWithinRange() {
        // Test a value within int range, no exception should be thrown
        long value = 1234567890L;
        assertEquals((int) value, IPCameraFrameGrabber.toIntExact(value));
    }
    
    @Test
    public void toIntExactAtIntBoundary() {
        // Test the boundary conditions for int range
        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE));
        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE));
    }

    @Test
    public void toIntExactOutsideRange() {
        // Test a value outside the int range, should throw ArithmeticException
        long valueTooLarge = ((long) Integer.MAX_VALUE) + 1;
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(valueTooLarge));

        long valueTooSmall = ((long) Integer.MIN_VALUE) - 1;
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(valueTooSmall));
    }
}


No.8 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {

    @Test
    public void toIntExactTest() {
        assertEquals(0, IPCameraFrameGrabber.toIntExact(0L));
        assertEquals(123, IPCameraFrameGrabber.toIntExact(123L));
        assertEquals(-123, IPCameraFrameGrabber.toIntExact(-123L));
        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact(Integer.MAX_VALUE));

        // Test boundary conditions around the positive limit of int range
        assertDoesNotThrow(() -> IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE));
        Exception positiveOverflowException = assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE + 1L));
        assertEquals("integer overflow", positiveOverflowException.getMessage());

        // Test boundary conditions around the negative limit of int range
        assertDoesNotThrow(() -> IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE));
        Exception negativeOverflowException = assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE - 1L));
        assertEquals("integer overflow", negativeOverflowException.getMessage());
    }
}


No.9 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    
    @Test
    public void toIntExactTest() {
        // Test a value that does not cause integer overflow
        assertEquals(1000, IPCameraFrameGrabber.toIntExact(1000L), "toIntExact should return the int value of the long when there is no overflow");

        // Test the maximum int value that should not cause overflow
        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE),
                "toIntExact should return the int value when input is the max int value");

        // Test a value that does cause integer overflow
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(((long) Integer.MAX_VALUE) + 1),
                "toIntExact should throw an ArithmeticException when there is an integer overflow");

        // Test the minimum int value that should not cause overflow
        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE),
                "toIntExact should return the int value when input is the min int value");

        // Test a value below the minimum int value which should cause integer overflow
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(((long) Integer.MIN_VALUE) - 1),
                "toIntExact should throw an ArithmeticException when the value is less than Integer.MIN_VALUE");
    }
}


No.10 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {

    @Test
    public void toIntExactTest() {
        // Test for a value that fits within the int range
        assertEquals(123, IPCameraFrameGrabber.toIntExact(123L), "toIntExact should convert the same value for fitting long");

        // Test for the maximum int value (should not throw)
        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE), "toIntExact should convert the maximum int value correctly");

        // Test for the minimum int value (should not throw)
        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE), "toIntExact should convert the minimum int value correctly");

        // Test for a value that does not fit within the int range (should throw)
        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact(((long) Integer.MAX_VALUE) + 1);
        }, "toIntExact should throw an exception on integer overflow");

        // Test for a value that is less than the int range (should throw)
        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact(((long) Integer.MIN_VALUE) - 1);
        }, "toIntExact should throw an exception on integer underflow");
    }
}


