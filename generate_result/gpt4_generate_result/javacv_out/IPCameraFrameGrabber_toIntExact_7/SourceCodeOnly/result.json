{
    "project_name": "javacv",
    "file_name": "IPCameraFrameGrabber.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/IPCameraFrameGrabber.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**\n     * Returns the value of the {@code long} argument;\n     * throwing an exception if the value overflows an {@code int}.\n     *\n     * @param value the long value\n     * @return the argument as an int\n     * @throws ArithmeticException if the {@code argument} overflows an int\n     * @see <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toIntExact-long-\">Java 8 Implementation</a>\n     */",
    "source_code": "\nprivate static int toIntExact(long value) {\n    if ((int) value != value) {\n        throw new ArithmeticException(\"integer overflow\");\n    }\n    return (int) value;\n}\n",
    "class_name": "IPCameraFrameGrabber",
    "method_name": "toIntExact",
    "arguments": [
        "long value"
    ],
    "generate_test": [
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n    \n    private static int toIntExact(long value) {\n        if ((int) value != value) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n        return (int) value;\n    }\n\n    @Test\n    public void toIntExactTestWithinIntegerRange() {\n        // Test case where the long value is within the integer range\n        long longValueWithinIntRange = Integer.MAX_VALUE;\n        assertEquals((int) longValueWithinIntRange, IPCameraFrameGrabberTest.toIntExact(longValueWithinIntRange));\n    }\n\n    @Test\n    public void toIntExactTestAtIntegerBoundary() {\n        // Test case for the boundary condition of the integer range\n        long longValueAtIntBoundary = Integer.MIN_VALUE;\n        assertEquals((int) longValueAtIntBoundary, IPCameraFrameGrabberTest.toIntExact(longValueAtIntBoundary));\n    }\n\n    @Test\n    public void toIntExactTestOverflow() {\n        // Test case where the long value causes overflow and should throw ArithmeticException\n        long longValueOutsideIntRange = Long.MAX_VALUE;\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabberTest.toIntExact(longValueOutsideIntRange));\n    }\n\n    @Test\n    public void toIntExactTestUnderflow() {\n        // Test case where the long value causes underflow and should throw ArithmeticException\n        long longValueBelowIntRange = Long.MIN_VALUE;\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabberTest.toIntExact(longValueBelowIntRange));\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n    @Test\n    public void toIntExactTest() {\n        // Test for no overflow\n        long valueWithinIntRange = 1234567890L; // within int range\n        assertEquals((int) valueWithinIntRange, IPCameraFrameGrabber.toIntExact(valueWithinIntRange));\n\n        // Test for overflow exception\n        long valueOverflowIntRange = (long) Integer.MAX_VALUE + 1; // just above int range\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(valueOverflowIntRange));\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n\n    @Test\n    public void toIntExactWithinRangeTest() {\n        assertEquals(0, toIntExact(0L));\n        assertEquals(12345, toIntExact(12345L));\n        assertEquals(-12345, toIntExact(-12345L));\n        assertEquals(Integer.MAX_VALUE, toIntExact((long) Integer.MAX_VALUE));\n        assertEquals(Integer.MIN_VALUE, toIntExact((long) Integer.MIN_VALUE));\n    }\n\n    @Test\n    public void toIntExactOverflowTest() {\n        assertThrows(ArithmeticException.class, () -> toIntExact((long) Integer.MAX_VALUE + 1));\n        assertThrows(ArithmeticException.class, () -> toIntExact((long) Integer.MIN_VALUE - 1));\n        assertThrows(ArithmeticException.class, () -> toIntExact(Long.MAX_VALUE));\n        assertThrows(ArithmeticException.class, () -> toIntExact(Long.MIN_VALUE));\n    }\n\n    private static int toIntExact(long value) {\n        if ((int) value != value) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n        return (int) value;\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n    private static int toIntExact(long value) {\n        if ((int) value != value) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n        return (int) value;\n    }\n\n    @Test\n    public void toIntExactWithinIntRangeShouldSucceed() {\n        assertEquals(0, toIntExact(0L), \"Zero long value should convert to zero int value.\");\n        assertEquals(123, toIntExact(123L), \"Positive long value within int range should convert to the same int value.\");\n        assertEquals(-123, toIntExact(-123L), \"Negative long value within int range should convert to the same int value.\");\n        assertEquals(Integer.MAX_VALUE, toIntExact((long)Integer.MAX_VALUE), \"Max int value should be exactly representable.\");\n        assertEquals(Integer.MIN_VALUE, toIntExact((long)Integer.MIN_VALUE), \"Min int value should be exactly representable.\");\n    }\n\n    @Test\n    public void toIntExactOutsideIntRangeShouldThrowException() {\n        assertThrows(ArithmeticException.class, () -> toIntExact(((long)Integer.MAX_VALUE) + 1), \"Long value above int range should throw exception.\");\n        assertThrows(ArithmeticException.class, () -> toIntExact(((long)Integer.MIN_VALUE) - 1), \"Long value below int range should throw exception.\");\n        assertThrows(ArithmeticException.class, () -> toIntExact(Long.MAX_VALUE), \"Long.MAX_VALUE should throw exception.\");\n        assertThrows(ArithmeticException.class, () -> toIntExact(Long.MIN_VALUE), \"Long.MIN_VALUE should throw exception.\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n\n    @Test\n    public void toIntExactTest() {\n        // Test case for a value that can be exactly cast to int\n        long valueWithinIntRange = 1000L;\n        assertEquals(1000, IPCameraFrameGrabber.toIntExact(valueWithinIntRange), \"Conversion to int should be exact\");\n\n        // Test case for a value that causes overflow and thus should throw an ArithmeticException\n        long valueOutsideIntRange = (long)Integer.MAX_VALUE + 1;\n        assertThrows(ArithmeticException.class, () -> {\n            IPCameraFrameGrabber.toIntExact(valueOutsideIntRange);\n        }, \"Should throw an ArithmeticException for integer overflow\");\n    }\n    \n    // Assuming toIntExact is a method within IPCameraFrameGrabber class\n    private static class IPCameraFrameGrabber {\n        private static int toIntExact(long value) {\n            if ((int) value != value) {\n                throw new ArithmeticException(\"integer overflow\");\n            }\n            return (int) value;\n        }\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n\n    @Test\n    public void toIntExactTest() {\n        // Test for normal conversion without overflow\n        assertEquals(100, IPCameraFrameGrabber.toIntExact(100L), \"toIntExact should convert small long values to int\");\n\n        // Test for integer overflow conditions\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE), \"toIntExact should throw an exception on overflow when converting large long values to int\");\n\n        // You may want to verify the overflow with a negative value too\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(Long.MIN_VALUE), \"toIntExact should throw an exception on underflow when converting large negative long values to int\");\n\n        // Test for the \"intValue == value\" condition with the maximum int value (at the edge of overflow)\n        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE), \"toIntExact should correctly convert the maximum int value\");\n\n        // Test for the \"intValue == value\" condition with the minimum int value (at the edge of underflow)\n        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE), \"toIntExact should correctly convert the minimum int value\");\n    }\n\n    // Utility method must be static to be called from within the static context of the test\n    private static int toIntExact(long value) {\n        if ((int) value != value) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n        return (int) value;\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n\n    // assuming this method to be tested is part of the IPCameraFrameGrabberTest class\n    private static int toIntExact(long value) {\n        if ((int) value != value) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n        return (int) value;\n    }\n\n    @Test\n    public void toIntExactTest() {\n        // Test case where no exception should be thrown\n        assertEquals(0, toIntExact(0L));\n        assertEquals(123, toIntExact(123L));\n        assertEquals(-123, toIntExact(-123L));\n        assertEquals(Integer.MAX_VALUE, toIntExact((long) Integer.MAX_VALUE));\n        assertEquals(Integer.MIN_VALUE, toIntExact((long) Integer.MIN_VALUE));\n\n        // Test case where an ArithmeticException should be thrown\n        long valueTooBigForInt = ((long) Integer.MAX_VALUE) + 1;\n        long valueTooSmallForInt = ((long) Integer.MIN_VALUE) - 1;\n\n        assertThrows(ArithmeticException.class, () -> toIntExact(valueTooBigForInt));\n        assertThrows(ArithmeticException.class, () -> toIntExact(valueTooSmallForInt));\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n\n    private static int toIntExact(long value) {\n        if ((int) value != value) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n        return (int) value;\n    }\n\n    @Test\n    public void toIntExactTest() {\n        // Test for a value that does not cause overflow\n        long valueWithinIntRange = 12345678L;\n        assertEquals(12345678, toIntExact(valueWithinIntRange));\n\n        // Test for integer overflow\n        long valueOutsideIntRange = 1L << 32; // This is equivalent to 2^32\n        Exception exception = assertThrows(ArithmeticException.class, () -> toIntExact(valueOutsideIntRange));\n        String expectedMessage = \"integer overflow\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage));\n        \n        // Test for negative value that does not cause overflow\n        long negativeValueWithinIntRange = -12345678L;\n        assertEquals(-12345678, toIntExact(negativeValueWithinIntRange));\n        \n        // Test for conversion of integer minimum and maximum values\n        assertEquals(Integer.MIN_VALUE, toIntExact((long)Integer.MIN_VALUE));\n        assertEquals(Integer.MAX_VALUE, toIntExact((long)Integer.MAX_VALUE));\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n\n    // Assuming the method 'toIntExact' is made public for testing purposes\n    // and it is located in the IPCameraFrameGrabber class. If not, adjust the method reference accordingly.\n\n    @Test\n    public void toIntExactWithinIntegerRangeTest() {\n        // Test with a value within the integer range\n        long value = Integer.MAX_VALUE;\n        assertEquals((int) value, IPCameraFrameGrabber.toIntExact(value));\n    }\n\n    @Test\n    public void toIntExactAtIntegerBoundaryTest() {\n        // Test with a value at the boundary of integer range\n        long value = Integer.MAX_VALUE;\n        assertEquals(value, IPCameraFrameGrabber.toIntExact(value));\n    }\n\n    @Test\n    public void toIntExactBeyondIntegerRangeTest() {\n        // Test with a value beyond the integer range that should cause an exception\n        long value = (long) Integer.MAX_VALUE + 1;\n        assertThrows(ArithmeticException.class, () -> {\n            IPCameraFrameGrabber.toIntExact(value);\n        });\n    }\n\n    @Test\n    public void toIntExactNegativeWithinRangeTest() {\n        // Test with a negative value within the integer range\n        long value = Integer.MIN_VALUE;\n        assertEquals((int) value, IPCameraFrameGrabber.toIntExact(value));\n    }\n\n    @Test\n    public void toIntExactNegativeBeyondRangeTest() {\n        // Test with a negative value beyond the integer range that should cause an exception\n        long value = (long) Integer.MIN_VALUE - 1;\n        assertThrows(ArithmeticException.class, () -> {\n            IPCameraFrameGrabber.toIntExact(value);\n        });\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class IPCameraFrameGrabberTest {\n\n    private static int toIntExact(long value) {\n        if ((int) value != value) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n        return (int) value;\n    }\n\n    @Test\n    public void toIntExactTest() {\n        // Test for a value within the int range\n        assertEquals(100, toIntExact(100L), \"The conversion of 100L should be correct\");\n\n        // Test for the maximum int value\n        assertEquals(Integer.MAX_VALUE, toIntExact((long) Integer.MAX_VALUE), \"The conversion of MAX_VALUE should be correct\");\n\n        // Test for the minimum int value\n        assertEquals(Integer.MIN_VALUE, toIntExact((long) Integer.MIN_VALUE), \"The conversion of MIN_VALUE should be correct\");\n\n        // Test for integer overflow\n        assertThrows(ArithmeticException.class, () -> toIntExact((long) Integer.MAX_VALUE + 1), \"Should throw an exception for integer overflow\");\n\n        // Test for integer underflow\n        assertThrows(ArithmeticException.class, () -> toIntExact((long) Integer.MIN_VALUE - 1), \"Should throw an exception for integer underflow\");\n    }\n}"
    ]
}