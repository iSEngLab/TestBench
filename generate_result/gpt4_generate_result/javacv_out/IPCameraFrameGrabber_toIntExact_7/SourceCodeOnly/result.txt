Source code: 


private static int toIntExact(long value) {
    if ((int) value != value) {
        throw new ArithmeticException("integer overflow");
    }
    return (int) value;
}



No.1 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    
    private static int toIntExact(long value) {
        if ((int) value != value) {
            throw new ArithmeticException("integer overflow");
        }
        return (int) value;
    }

    @Test
    public void toIntExactTestWithinIntegerRange() {
        // Test case where the long value is within the integer range
        long longValueWithinIntRange = Integer.MAX_VALUE;
        assertEquals((int) longValueWithinIntRange, IPCameraFrameGrabberTest.toIntExact(longValueWithinIntRange));
    }

    @Test
    public void toIntExactTestAtIntegerBoundary() {
        // Test case for the boundary condition of the integer range
        long longValueAtIntBoundary = Integer.MIN_VALUE;
        assertEquals((int) longValueAtIntBoundary, IPCameraFrameGrabberTest.toIntExact(longValueAtIntBoundary));
    }

    @Test
    public void toIntExactTestOverflow() {
        // Test case where the long value causes overflow and should throw ArithmeticException
        long longValueOutsideIntRange = Long.MAX_VALUE;
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabberTest.toIntExact(longValueOutsideIntRange));
    }

    @Test
    public void toIntExactTestUnderflow() {
        // Test case where the long value causes underflow and should throw ArithmeticException
        long longValueBelowIntRange = Long.MIN_VALUE;
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabberTest.toIntExact(longValueBelowIntRange));
    }
}


No.2 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    @Test
    public void toIntExactTest() {
        // Test for no overflow
        long valueWithinIntRange = 1234567890L; // within int range
        assertEquals((int) valueWithinIntRange, IPCameraFrameGrabber.toIntExact(valueWithinIntRange));

        // Test for overflow exception
        long valueOverflowIntRange = (long) Integer.MAX_VALUE + 1; // just above int range
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(valueOverflowIntRange));
    }
}


No.3 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {

    @Test
    public void toIntExactWithinRangeTest() {
        assertEquals(0, toIntExact(0L));
        assertEquals(12345, toIntExact(12345L));
        assertEquals(-12345, toIntExact(-12345L));
        assertEquals(Integer.MAX_VALUE, toIntExact((long) Integer.MAX_VALUE));
        assertEquals(Integer.MIN_VALUE, toIntExact((long) Integer.MIN_VALUE));
    }

    @Test
    public void toIntExactOverflowTest() {
        assertThrows(ArithmeticException.class, () -> toIntExact((long) Integer.MAX_VALUE + 1));
        assertThrows(ArithmeticException.class, () -> toIntExact((long) Integer.MIN_VALUE - 1));
        assertThrows(ArithmeticException.class, () -> toIntExact(Long.MAX_VALUE));
        assertThrows(ArithmeticException.class, () -> toIntExact(Long.MIN_VALUE));
    }

    private static int toIntExact(long value) {
        if ((int) value != value) {
            throw new ArithmeticException("integer overflow");
        }
        return (int) value;
    }
}


No.4 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {
    private static int toIntExact(long value) {
        if ((int) value != value) {
            throw new ArithmeticException("integer overflow");
        }
        return (int) value;
    }

    @Test
    public void toIntExactWithinIntRangeShouldSucceed() {
        assertEquals(0, toIntExact(0L), "Zero long value should convert to zero int value.");
        assertEquals(123, toIntExact(123L), "Positive long value within int range should convert to the same int value.");
        assertEquals(-123, toIntExact(-123L), "Negative long value within int range should convert to the same int value.");
        assertEquals(Integer.MAX_VALUE, toIntExact((long)Integer.MAX_VALUE), "Max int value should be exactly representable.");
        assertEquals(Integer.MIN_VALUE, toIntExact((long)Integer.MIN_VALUE), "Min int value should be exactly representable.");
    }

    @Test
    public void toIntExactOutsideIntRangeShouldThrowException() {
        assertThrows(ArithmeticException.class, () -> toIntExact(((long)Integer.MAX_VALUE) + 1), "Long value above int range should throw exception.");
        assertThrows(ArithmeticException.class, () -> toIntExact(((long)Integer.MIN_VALUE) - 1), "Long value below int range should throw exception.");
        assertThrows(ArithmeticException.class, () -> toIntExact(Long.MAX_VALUE), "Long.MAX_VALUE should throw exception.");
        assertThrows(ArithmeticException.class, () -> toIntExact(Long.MIN_VALUE), "Long.MIN_VALUE should throw exception.");
    }
}


No.5 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {

    @Test
    public void toIntExactTest() {
        // Test case for a value that can be exactly cast to int
        long valueWithinIntRange = 1000L;
        assertEquals(1000, IPCameraFrameGrabber.toIntExact(valueWithinIntRange), "Conversion to int should be exact");

        // Test case for a value that causes overflow and thus should throw an ArithmeticException
        long valueOutsideIntRange = (long)Integer.MAX_VALUE + 1;
        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact(valueOutsideIntRange);
        }, "Should throw an ArithmeticException for integer overflow");
    }
    
    // Assuming toIntExact is a method within IPCameraFrameGrabber class
    private static class IPCameraFrameGrabber {
        private static int toIntExact(long value) {
            if ((int) value != value) {
                throw new ArithmeticException("integer overflow");
            }
            return (int) value;
        }
    }
}


No.6 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {

    @Test
    public void toIntExactTest() {
        // Test for normal conversion without overflow
        assertEquals(100, IPCameraFrameGrabber.toIntExact(100L), "toIntExact should convert small long values to int");

        // Test for integer overflow conditions
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE), "toIntExact should throw an exception on overflow when converting large long values to int");

        // You may want to verify the overflow with a negative value too
        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(Long.MIN_VALUE), "toIntExact should throw an exception on underflow when converting large negative long values to int");

        // Test for the "intValue == value" condition with the maximum int value (at the edge of overflow)
        assertEquals(Integer.MAX_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE), "toIntExact should correctly convert the maximum int value");

        // Test for the "intValue == value" condition with the minimum int value (at the edge of underflow)
        assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact((long) Integer.MIN_VALUE), "toIntExact should correctly convert the minimum int value");
    }

    // Utility method must be static to be called from within the static context of the test
    private static int toIntExact(long value) {
        if ((int) value != value) {
            throw new ArithmeticException("integer overflow");
        }
        return (int) value;
    }
}


No.7 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {

    // assuming this method to be tested is part of the IPCameraFrameGrabberTest class
    private static int toIntExact(long value) {
        if ((int) value != value) {
            throw new ArithmeticException("integer overflow");
        }
        return (int) value;
    }

    @Test
    public void toIntExactTest() {
        // Test case where no exception should be thrown
        assertEquals(0, toIntExact(0L));
        assertEquals(123, toIntExact(123L));
        assertEquals(-123, toIntExact(-123L));
        assertEquals(Integer.MAX_VALUE, toIntExact((long) Integer.MAX_VALUE));
        assertEquals(Integer.MIN_VALUE, toIntExact((long) Integer.MIN_VALUE));

        // Test case where an ArithmeticException should be thrown
        long valueTooBigForInt = ((long) Integer.MAX_VALUE) + 1;
        long valueTooSmallForInt = ((long) Integer.MIN_VALUE) - 1;

        assertThrows(ArithmeticException.class, () -> toIntExact(valueTooBigForInt));
        assertThrows(ArithmeticException.class, () -> toIntExact(valueTooSmallForInt));
    }
}


No.8 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {

    private static int toIntExact(long value) {
        if ((int) value != value) {
            throw new ArithmeticException("integer overflow");
        }
        return (int) value;
    }

    @Test
    public void toIntExactTest() {
        // Test for a value that does not cause overflow
        long valueWithinIntRange = 12345678L;
        assertEquals(12345678, toIntExact(valueWithinIntRange));

        // Test for integer overflow
        long valueOutsideIntRange = 1L << 32; // This is equivalent to 2^32
        Exception exception = assertThrows(ArithmeticException.class, () -> toIntExact(valueOutsideIntRange));
        String expectedMessage = "integer overflow";
        String actualMessage = exception.getMessage();
        assertTrue(actualMessage.contains(expectedMessage));
        
        // Test for negative value that does not cause overflow
        long negativeValueWithinIntRange = -12345678L;
        assertEquals(-12345678, toIntExact(negativeValueWithinIntRange));
        
        // Test for conversion of integer minimum and maximum values
        assertEquals(Integer.MIN_VALUE, toIntExact((long)Integer.MIN_VALUE));
        assertEquals(Integer.MAX_VALUE, toIntExact((long)Integer.MAX_VALUE));
    }
}


No.9 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IPCameraFrameGrabberTest {

    // Assuming the method 'toIntExact' is made public for testing purposes
    // and it is located in the IPCameraFrameGrabber class. If not, adjust the method reference accordingly.

    @Test
    public void toIntExactWithinIntegerRangeTest() {
        // Test with a value within the integer range
        long value = Integer.MAX_VALUE;
        assertEquals((int) value, IPCameraFrameGrabber.toIntExact(value));
    }

    @Test
    public void toIntExactAtIntegerBoundaryTest() {
        // Test with a value at the boundary of integer range
        long value = Integer.MAX_VALUE;
        assertEquals(value, IPCameraFrameGrabber.toIntExact(value));
    }

    @Test
    public void toIntExactBeyondIntegerRangeTest() {
        // Test with a value beyond the integer range that should cause an exception
        long value = (long) Integer.MAX_VALUE + 1;
        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact(value);
        });
    }

    @Test
    public void toIntExactNegativeWithinRangeTest() {
        // Test with a negative value within the integer range
        long value = Integer.MIN_VALUE;
        assertEquals((int) value, IPCameraFrameGrabber.toIntExact(value));
    }

    @Test
    public void toIntExactNegativeBeyondRangeTest() {
        // Test with a negative value beyond the integer range that should cause an exception
        long value = (long) Integer.MIN_VALUE - 1;
        assertThrows(ArithmeticException.class, () -> {
            IPCameraFrameGrabber.toIntExact(value);
        });
    }
}


No.10 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class IPCameraFrameGrabberTest {

    private static int toIntExact(long value) {
        if ((int) value != value) {
            throw new ArithmeticException("integer overflow");
        }
        return (int) value;
    }

    @Test
    public void toIntExactTest() {
        // Test for a value within the int range
        assertEquals(100, toIntExact(100L), "The conversion of 100L should be correct");

        // Test for the maximum int value
        assertEquals(Integer.MAX_VALUE, toIntExact((long) Integer.MAX_VALUE), "The conversion of MAX_VALUE should be correct");

        // Test for the minimum int value
        assertEquals(Integer.MIN_VALUE, toIntExact((long) Integer.MIN_VALUE), "The conversion of MIN_VALUE should be correct");

        // Test for integer overflow
        assertThrows(ArithmeticException.class, () -> toIntExact((long) Integer.MAX_VALUE + 1), "Should throw an exception for integer overflow");

        // Test for integer underflow
        assertThrows(ArithmeticException.class, () -> toIntExact((long) Integer.MIN_VALUE - 1), "Should throw an exception for integer underflow");
    }
}


