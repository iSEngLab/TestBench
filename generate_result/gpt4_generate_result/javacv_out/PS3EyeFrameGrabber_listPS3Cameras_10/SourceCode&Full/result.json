{
    "project_name": "javacv",
    "file_name": "PS3EyeFrameGrabber.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/PS3EyeFrameGrabber.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/** Ask the driver for all installed PS3 cameras. Resulting array is sorted in order of camera index.\n     *  Its size is defined by CLCamera.cameraCount().\n     * \n     * @return array of camera unique uuids or null if there is no PS3 camera\n     */",
    "source_code": "\npublic static String[] listPS3Cameras() {\n    int no = getCameraCount();\n    String[] uuids;\n    if (no > 0) {\n        uuids = new String[no];\n        for (--no; no >=0; no--) { uuids[no] = CLCamera.cameraUUID(no); }\n        return uuids;\n    }\n    return null;\n}\n",
    "class_name": "PS3EyeFrameGrabber",
    "method_name": "listPS3Cameras",
    "arguments": [],
    "generate_test": [
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class PS3EyeFrameGrabberTest {\n\n    @Test\n    public void listPS3CamerasTest() {\n        // Mock of the CLCamera class\n        CLCamera mockCamera = mock(CLCamera.class);\n        \n        // Assume there are 2 cameras connected for the purpose of this test\n        when(mockCamera.cameraCount()).thenReturn(2);\n        when(mockCamera.cameraUUID(0)).thenReturn(\"UUID-0\");\n        when(mockCamera.cameraUUID(1)).thenReturn(\"UUID-1\");\n        \n        // Static mock methods.\n        // Since we can't directly mock static methods with Mockito, we assume\n        // that these methods are wired to use our mockCamera under the hood.\n        \n        // Inject mock\n        // This is a pseudo-code as Mockito doesn't support static method mocking directly.\n        // In actual use, PowerMockito or JMockit, or other ways to inject the mock (like dependency injection)\n        // would be required for the static method `getCameraCount`.\n        // CLCamera.setMockInstance(mockCamera); // Pseudo-code\n        \n        String[] cameraList = PS3EyeFrameGrabber.listPS3Cameras();\n\n        // Using assertions to check if the method returns the correct values\n        assertNotNull(cameraList, \"The camera list should not be null when cameras are present\");\n        assertEquals(2, cameraList.length, \"The camera list should contain two camera UUIDs.\");\n        assertEquals(\"UUID-0\", cameraList[0], \"The first camera UUID should match.\");\n        assertEquals(\"UUID-1\", cameraList[1], \"The second camera UUID should match.\");\n    }\n\n    // Additional tests could be added here, such as:\n    // - Testing with no cameras connected\n    // - Testing the handling of CLCamera exceptions\n}",
        "package org.bytedeco.javacv;\n\nimport org.bytedeco.javacv.PS3EyeFrameGrabber;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class PS3EyeFrameGrabberTest {\n\n    @BeforeEach\n    public void setUp() {\n        // Mock static methods of CLCamera here\n    }\n\n    @Test\n    public void listPS3CamerasTest() {\n        // Assuming positive number of cameras\n        final int cameraCount = 3;\n        mockStatic(CLCamera.class);\n        when(CLCamera.cameraCount()).thenReturn(cameraCount);\n        for(int i = 0; i < cameraCount; i++) {\n            when(CLCamera.cameraUUID(i)).thenReturn(\"UUID\" + i);\n        }\n\n        String[] actualUUIDs = PS3EyeFrameGrabber.listPS3Cameras();\n        assertNotNull(actualUUIDs, \"Camera UUIDs should not be null\");\n        assertEquals(cameraCount, actualUUIDs.length, \"Camera UUIDs array length should match camera count\");\n        for(int i = 0; i < cameraCount; i++) {\n            assertEquals(\"UUID\" + i, actualUUIDs[i], \"Camera UUID should match mocked UUID\");\n        }\n\n        // Assuming zero cameras\n        when(CLCamera.cameraCount()).thenReturn(0);\n        assertNull(PS3EyeFrameGrabber.listPS3Cameras(), \"Camera UUIDs should be null when there are no cameras\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.MockedStatic;\nimport org.mockito.Mockito;\n\npublic class PS3EyeFrameGrabberTest {\n\n    private static MockedStatic<CLCamera> mockedCLCamera;\n\n    @BeforeAll\n    public static void setUpClass() {\n        mockedCLCamera = Mockito.mockStatic(CLCamera.class);\n    }\n\n    @AfterAll\n    public static void tearDownClass() {\n        mockedCLCamera.close();\n    }\n\n    @Test\n    public void listPS3CamerasTest() {\n        // Prepare our expectations\n        final int cameraCount = 3;\n        final String[] cameraUUIDs = new String[]{\"uuid-0\", \"uuid-1\", \"uuid-2\"};\n        \n        // Mock 'getCameraCount()' and 'cameraUUID()' static methods\n        mockedCLCamera.when(CLCamera::cameraCount).thenReturn(cameraCount);\n        for (int i = 0; i < cameraCount; i++) {\n            final int idx = i;\n            mockedCLCamera.when(() -> CLCamera.cameraUUID(idx)).thenReturn(cameraUUIDs[idx]);\n        }\n        \n        // Call the method under test\n        String[] resultUUIDs = PS3EyeFrameGrabber.listPS3Cameras();\n        \n        // Assertions - we expect to get back the same UUIDs that we've setup\n        assertNotNull(resultUUIDs, \"The result should not be null when cameras are present\");\n        assertArrayEquals(cameraUUIDs, resultUUIDs, \"The UUIDs should match the expected values\");\n    }\n\n    @Test\n    public void listPS3Cameras_NoCamerasTest() {\n        // Prepare our expectations for no cameras\n        final int cameraCount = 0;\n        \n        // Mock 'getCameraCount()' and return 0 to simulate no cameras present\n        mockedCLCamera.when(CLCamera::cameraCount).thenReturn(cameraCount);\n        \n        // Call the method under test\n        String[] resultUUIDs = PS3EyeFrameGrabber.listPS3Cameras();\n        \n        // Assertions - we expect to get null when no cameras are present\n        assertNull(resultUUIDs, \"The result should be null when no cameras are present\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class PS3EyeFrameGrabberTest {\n\n    @Test\n    public void listPS3CamerasTest() {\n        // Mock the static methods in CLCamera\n        CLCamera mockCamera = mock(CLCamera.class);\n        when(mockCamera.cameraCount()).thenReturn(2);\n        when(mockCamera.cameraUUID(0)).thenReturn(\"UUID_0\");\n        when(mockCamera.cameraUUID(1)).thenReturn(\"UUID_1\");\n\n        // Call the method to test\n        String[] cameraList = PS3EyeFrameGrabber.listPS3Cameras();\n\n        // Verify that the method calls are as expected\n        verify(mockCamera).cameraCount();\n        \n        if (cameraList != null) {\n            verify(mockCamera).cameraUUID(0);\n            verify(mockCamera).cameraUUID(1);\n        }\n\n        // Assert the result is as expected\n        assertNotNull(cameraList, \"Camera list should not be null\");\n        assertArrayEquals(new String[] {\"UUID_0\", \"UUID_1\"}, cameraList, \"Camera UUIDs do not match expected values\");\n    }\n\n    // Run the static block in PS3EyeFrameGrabber to set up mocks for the class\n    static {\n        // Replace actual static methods with mocks/spies\n        try {\n            mockStaticPartial(CLCamera.class, \"cameraCount\", \"cameraUUID\");\n        } catch (Exception e) {\n            fail(\"Failed to mock static methods in CLCamera\", e);\n        }\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class PS3EyeFrameGrabberTest {\n    \n    @BeforeEach\n    void setUp() {\n        // Mock the CLCamera static methods.\n        CLCamera mockedCLCamera = mock(CLCamera.class);\n        when(mockedCLCamera.cameraCount()).thenReturn(2); // Assume 2 cameras connected\n        when(mockedCLCamera.cameraUUID(0)).thenReturn(\"CameraUUID0\");\n        when(mockedCLCamera.cameraUUID(1)).thenReturn(\"CameraUUID1\");\n        \n        // Set up the static mocks for CLCamera with the mocked object\n        CLCamera.setMock(mockedCLCamera);\n    }\n\n    @AfterEach\n    void tearDown() {\n        // Clear the mocked statics to avoid side effects on other tests\n        CLCamera.clearMock();\n    }\n\n    @Test\n    public void listPS3CamerasTest() {\n        // Expected values\n        String[] expectedUuids = {\"CameraUUID0\", \"CameraUUID1\"};\n\n        // Actual values returned from listPS3Cameras method\n        String[] actualUuids = PS3EyeFrameGrabber.listPS3Cameras();\n\n        // Assert the returned array contains all expected UUIDs\n        assertArrayEquals(expectedUuids, actualUuids, \"The uuids of the PS3 cameras should match the expected values.\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class PS3EyeFrameGrabberTest {\n    \n    @Test\n    public void listPS3CamerasTest() {\n        // Assuming CLCamera.cameraCount and CLCamera.cameraUUID are static methods within CLCamera\n        CLCamera mockedCLCamera = mock(CLCamera.class);\n        when(mockedCLCamera.cameraCount()).thenReturn(3);\n        when(mockedCLCamera.cameraUUID(0)).thenReturn(\"uuid1\");\n        when(mockedCLCamera.cameraUUID(1)).thenReturn(\"uuid2\");\n        when(mockedCLCamera.cameraUUID(2)).thenReturn(\"uuid3\");\n\n        // Actual test starts here\n        String[] expectedUUIDs = {\"uuid1\", \"uuid2\", \"uuid3\"};\n        String[] actualUUIDs = PS3EyeFrameGrabber.listPS3Cameras();\n        \n        assertNotNull(actualUUIDs, \"The list of camera UUIDs should not be null.\");\n        assertEquals(expectedUUIDs.length, actualUUIDs.length, \"The number of camera UUIDs should match the expected count.\");\n\n        for (int i = 0; i < expectedUUIDs.length; i++) {\n            assertEquals(expectedUUIDs[i], actualUUIDs[i], String.format(\"The UUID at index %d should match the expected UUID.\", i));\n        }\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PS3EyeFrameGrabberTest {\n\n    @Test\n    public void listPS3CamerasTest() {\n        // Assume that there are no cameras connected. The method should return null.\n        assertNull(PS3EyeFrameGrabber.listPS3Cameras(), \"The list of PS3 cameras should be null when no cameras are connected.\");\n\n        // If mocking the behavior of getCameraCount and cameraUUID was possible, you could set up scenarios like:\n        // when(getCameraCount()).thenReturn(1);\n        // when(cameraUUID(0)).thenReturn(\"UUID-1234\");\n        // and then test as follows:\n        // String[] cameras = PS3EyeFrameGrabber.listPS3Cameras();\n        // assertNotNull(cameras, \"The list of PS3 cameras should not be null when cameras are connected.\");\n        // assertEquals(1, cameras.length, \"There should be one camera connected.\");\n        // assertEquals(\"UUID-1234\", cameras[0], \"The camera UUID should match the expected value.\");\n    }\n\n    // Other test methods can be added here to cover more cases.\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\n// Additional imports may be needed if actually using a mocking framework\n\npublic class PS3EyeFrameGrabberTest {\n    \n    @Test\n    public void listPS3CamerasShouldReturnNonNullForNonZeroCameras() {\n        // Arrange\n        int expectedCameraCount = 3;\n        // Assuming we are able to mock static methods with Mockito or similar framework\n        CLCamera mockedCLCamera = mock(CLCamera.class);\n\n        // Stub the getCameraCount and cameraUUID methods\n        when(mockedCLCamera.cameraCount()).thenReturn(expectedCameraCount);\n        for (int i = 0; i < expectedCameraCount; i++) {\n            when(mockedCLCamera.cameraUUID(i)).thenReturn(\"UUID\" + i);\n        }\n\n        // Act\n        String[] cameraUUIDs = PS3EyeFrameGrabber.listPS3Cameras();\n\n        // Assert\n        assertNotNull(cameraUUIDs, \"Camera list should not be null\");\n        assertEquals(expectedCameraCount, cameraUUIDs.length, \"Camera list should have correct number of elements\");\n        for (int i = 0; i < expectedCameraCount; i++) {\n            assertEquals(\"UUID\" + i, cameraUUIDs[i], \"Camera UUIDs should match expected values\");\n        }\n    }\n\n    @Test\n    public void listPS3CamerasShouldReturnNullForZeroCameras() {\n        // Arrange\n        // Assuming we are able to mock static methods with Mockito or similar framework\n        CLCamera mockedCLCamera = mock(CLCamera.class);\n\n        // Stub the getCameraCount method\n        when(mockedCLCamera.cameraCount()).thenReturn(0);\n\n        // Act\n        String[] cameraUUIDs = PS3EyeFrameGrabber.listPS3Cameras();\n\n        // Assert\n        assertNull(cameraUUIDs, \"Camera list should be null for zero cameras\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport cl.eye.CLCamera;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PS3EyeFrameGrabberTest {\n    @Test\n    public void listPS3CamerasTest() {\n        // Setup mocks for CLCamera to simulate camera count and UUIDs\n        CLCamera mockCLCamera = mock(CLCamera.class);\n\n        // Test case: No cameras connected\n        when(mockCLCamera.cameraCount()).thenReturn(0);\n        assertEquals(null, PS3EyeFrameGrabber.listPS3Cameras(), \"Should return null when no cameras are connected\");\n\n        // Test case: One camera connected\n        when(mockCLCamera.cameraCount()).thenReturn(1);\n        when(mockCLCamera.cameraUUID(0)).thenReturn(\"UUID-12345\");\n        String[] expectedSingleCamera = new String[]{\"UUID-12345\"};\n        assertArrayEquals(expectedSingleCamera, PS3EyeFrameGrabber.listPS3Cameras(), \"Should return a single UUID in the array\");\n\n        // Test case: Multiple cameras connected, for example, two cameras\n        when(mockCLCamera.cameraCount()).thenReturn(2);\n        when(mockCLCamera.cameraUUID(0)).thenReturn(\"UUID-12345\");\n        when(mockCLCamera.cameraUUID(1)).thenReturn(\"UUID-67890\");\n        String[] expectedMultipleCameras = new String[]{\"UUID-12345\", \"UUID-67890\"};\n        assertArrayEquals(expectedMultipleCameras, PS3EyeFrameGrabber.listPS3Cameras(), \"Should return an array of UUIDs for multiple cameras\");\n    }\n    \n    //Additional setup to link the mocked CLCamera with the PS3EyeFrameGrabber\n    @BeforeEach\n    public void before(){\n        CLCamera mockCLCamera = Mockito.mock(CLCamera.class);\n        Mockito.mockStatic(CLCamera.class);\n        // Mute the real methods\n        Mockito.when(CLCamera.cameraCount()).thenCallRealMethod();\n        Mockito.when(CLCamera.cameraUUID(Mockito.anyInt())).thenCallRealMethod();\n        // Use mock instead\n        Mockito.when(CLCamera.cameraUUID(Mockito.anyInt())).then(invocation -> {\n            Integer cameraIndex = invocation.getArgument(0, Integer.class);\n            return mockCLCamera.cameraUUID(cameraIndex);\n        });\n        Mockito.when(CLCamera.cameraCount()).then(invocation -> mockCLCamera.cameraCount());\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class PS3EyeFrameGrabberTest {\n\n    @Test\n    public void testListPS3CamerasReturnsUUIDsWhenCamerasArePresent() {\n        // Arrange\n        CLCamera mockedCLCamera = mock(CLCamera.class);\n        when(mockedCLCamera.cameraCount()).thenReturn(2); // Assume 2 cameras are connected\n        when(mockedCLCamera.cameraUUID(0)).thenReturn(\"UUID-0\");\n        when(mockedCLCamera.cameraUUID(1)).thenReturn(\"UUID-1\");\n        PS3EyeFrameGrabber.camera = mockedCLCamera; // Static assignment for the purpose of the test\n\n        // Act\n        String[] cameraUUIDs = PS3EyeFrameGrabber.listPS3Cameras();\n\n        // Assert\n        assertNotNull(cameraUUIDs);\n        assertEquals(2, cameraUUIDs.length);\n        assertEquals(\"UUID-0\", cameraUUIDs[0]);\n        assertEquals(\"UUID-1\", cameraUUIDs[1]);\n        \n        // Clean-up (not strictly necessary for statics in this mock-based example, but good practice)\n        PS3EyeFrameGrabber.camera = null;\n    }\n\n    @Test\n    public void testListPS3CamerasReturnsNullWhenNoCamerasAvailable() {\n        // Arrange\n        CLCamera mockedCLCamera = mock(CLCamera.class);\n        when(mockedCLCamera.cameraCount()).thenReturn(0); // Assume no cameras are connected\n        PS3EyeFrameGrabber.camera = mockedCLCamera; // Static assignment for the purpose of the test\n\n        // Act\n        String[] cameraUUIDs = PS3EyeFrameGrabber.listPS3Cameras();\n\n        // Assert\n        assertNull(cameraUUIDs);\n        \n        // Clean-up (not strictly necessary for statics in this mock-based example, but good practice)\n        PS3EyeFrameGrabber.camera = null;\n    }\n}"
    ]
}