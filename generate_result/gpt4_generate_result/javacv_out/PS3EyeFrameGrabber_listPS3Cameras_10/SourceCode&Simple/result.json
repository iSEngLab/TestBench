{
    "project_name": "javacv",
    "file_name": "PS3EyeFrameGrabber.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/PS3EyeFrameGrabber.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/** Ask the driver for all installed PS3 cameras. Resulting array is sorted in order of camera index.\n     *  Its size is defined by CLCamera.cameraCount().\n     * \n     * @return array of camera unique uuids or null if there is no PS3 camera\n     */",
    "source_code": "\npublic static String[] listPS3Cameras() {\n    int no = getCameraCount();\n    String[] uuids;\n    if (no > 0) {\n        uuids = new String[no];\n        for (--no; no >=0; no--) { uuids[no] = CLCamera.cameraUUID(no); }\n        return uuids;\n    }\n    return null;\n}\n",
    "class_name": "PS3EyeFrameGrabber",
    "method_name": "listPS3Cameras",
    "arguments": [],
    "generate_test": [
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class PS3EyeFrameGrabberTest {\n\n    @Test\n    public void listPS3CamerasTest() {\n        // Mock the static CLCamera class behavior\n        mockStatic(CLCamera.class);\n\n        // Define the behavior of getCameraCount and cameraUUID\n        when(CLCamera.getCameraCount()).thenReturn(3);\n        when(CLCamera.cameraUUID(0)).thenReturn(\"UUID0\");\n        when(CLCamera.cameraUUID(1)).thenReturn(\"UUID1\");\n        when(CLCamera.cameraUUID(2)).thenReturn(\"UUID2\");\n\n        // Call the method to test\n        String[] cameras = PS3EyeFrameGrabber.listPS3Cameras();\n\n        // Verify results\n        assertNotNull(cameras); // ensure it's not null\n        assertEquals(3, cameras.length); // check we have 3 camera UUIDs\n        assertEquals(\"UUID0\", cameras[0]); // check each UUID matches expected result\n        assertEquals(\"UUID1\", cameras[1]);\n        assertEquals(\"UUID2\", cameras[2]);\n\n        // Test the scenario where there are no cameras\n        when(CLCamera.getCameraCount()).thenReturn(0);\n        cameras = PS3EyeFrameGrabber.listPS3Cameras();\n        assertNull(cameras); // expect null when there are no cameras\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class PS3EyeFrameGrabberTest {\n\n    @Test\n    public void listPS3CamerasTest() {\n        // Assuming the test environment is set up to use Mockito for mocking static methods\n        // and PS3EyeFrameGrabber.getCameraCount() is static.\n        try(MockedStatic<PS3EyeFrameGrabber> mocked = mockStatic(PS3EyeFrameGrabber.class)) {\n            // Define the behavior of the getCameraCount static method\n            mocked.when(PS3EyeFrameGrabber::getCameraCount).thenReturn(3);\n            // Assume that CLCamera.cameraUUID(int) is static as well\n            // and the uuids are mocked for consistent testing\n            try(MockedStatic<CLCamera> mockedCamera = mockStatic(CLCamera.class)) {\n                mockedCamera.when(() -> CLCamera.cameraUUID(0)).thenReturn(\"uuid0\");\n                mockedCamera.when(() -> CLCamera.cameraUUID(1)).thenReturn(\"uuid1\");\n                mockedCamera.when(() -> CLCamera.cameraUUID(2)).thenReturn(\"uuid2\");\n\n                // Call the method to be tested\n                String[] cameraList = PS3EyeFrameGrabber.listPS3Cameras();\n\n                // Verify the expected results\n                assertNotNull(cameraList, \"Camera list should not be null\");\n                assertEquals(3, cameraList.length, \"Camera list should have 3 entries\");\n                assertEquals(\"uuid0\", cameraList[0], \"First camera UUID should be 'uuid0'\");\n                assertEquals(\"uuid1\", cameraList[1], \"Second camera UUID should be 'uuid1'\");\n                assertEquals(\"uuid2\", cameraList[2], \"Third camera UUID should be 'uuid2'\");\n            }\n        }\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class PS3EyeFrameGrabberTest {\n    // Assuming that CLCamera class with cameraUUID method and getCameraCount method is mockable\n    @Test\n    public void listPS3CamerasTest() {\n        // Prepare the mock environment\n        CLCamera mockCamera = mock(CLCamera.class);\n        when(mockCamera.cameraUUID(0)).thenReturn(\"UUID-0\");\n        when(mockCamera.cameraUUID(1)).thenReturn(\"UUID-1\");\n        when(PS3EyeFrameGrabber.getCameraCount()).thenReturn(2);\n\n        // Actual test starts here\n        String[] expectedUuids = new String[] {\"UUID-0\", \"UUID-1\"};\n        String[] actualUuids = PS3EyeFrameGrabber.listPS3Cameras();\n        \n        assertNotNull(actualUuids, \"The list of camera UUIDs should not be null when cameras are present\");\n        assertEquals(expectedUuids.length, actualUuids.length, \"The number of camera UUIDs returned was not as expected\");\n        assertArrayEquals(expectedUuids, actualUuids, \"The camera UUIDs returned did not match the expected UUIDs\");\n        \n        // Test with 0 cameras\n        when(PS3EyeFrameGrabber.getCameraCount()).thenReturn(0);\n        assertNull(PS3EyeFrameGrabber.listPS3Cameras(), \"The list of camera UUIDs should be null when no cameras are present\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class PS3EyeFrameGrabberTest {\n\n    // Assuming the CLCamera class looks similar to something like this for mocking\n    static class CLCamera {\n        public static String cameraUUID(int index) {\n            return \"MockUUID\" + index;\n        }\n    }\n\n    @Test\n    public void listPS3CamerasTest() {\n        // Mock the static methods in CLCamera\n        mockStatic(CLCamera.class);\n\n        // Prepare the expected values for the camera UUIDs\n        String[] expectedUUIDs = new String[]{\"MockUUID0\", \"MockUUID1\"};\n\n        // Define the behavior for the getCameraCount static method to return 2\n        when(PS3EyeFrameGrabber.getCameraCount()).thenReturn(2);\n\n        // Define the behavior for the cameraUUID static method\n        when(CLCamera.cameraUUID(0)).thenReturn(\"MockUUID0\");\n        when(CLCamera.cameraUUID(1)).thenReturn(\"MockUUID1\");\n\n        // Call the method to test\n        String[] actualUUIDs = PS3EyeFrameGrabber.listPS3Cameras();\n\n        // Verify the interaction with the mock\n        verifyStatic(CLCamera.class, times(1));\n        PS3EyeFrameGrabber.getCameraCount();\n\n        verifyStatic(CLCamera.class, times(1));\n        CLCamera.cameraUUID(0);\n        verifyStatic(CLCamera.class, times(1));\n        CLCamera.cameraUUID(1);\n\n        // Assert the expected UUIDs are returned\n        assertArrayEquals(expectedUUIDs, actualUUIDs);\n\n        // Test the case where there are no cameras\n        when(PS3EyeFrameGrabber.getCameraCount()).thenReturn(0);\n        assertNull(PS3EyeFrameGrabber.listPS3Cameras(), \"Camera list should be null when no cameras are present\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.AfterAll;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class PS3EyeFrameGrabberTest {\n\n    // BeforeAll and AfterAll annotations could be used to setup and teardown mock or required resources\n\n    @Test\n    public void listPS3CamerasTest() {\n        // Assuming getCameraCount and cameraUUID are static methods that can be mocked\n        // Mocking static methods (assuming CLCamera is a class that we're allowed to mock)\n        int mockCameraCount = 3;\n        String[] mockUuids = {\"UUID1\", \"UUID2\", \"UUID3\"};\n\n        // Mock static methods of CLCamera\n        CLCamera mockCLCamera = mock(CLCamera.class);\n        when(CLCamera.getCameraCount()).thenReturn(mockCameraCount);\n        when(CLCamera.cameraUUID(0)).thenReturn(mockUuids[0]);\n        when(CLCamera.cameraUUID(1)).thenReturn(mockUuids[1]);\n        when(CLCamera.cameraUUID(2)).thenReturn(mockUuids[2]);\n\n        // Call the method under test\n        String[] actualUuids = PS3EyeFrameGrabber.listPS3Cameras();\n\n        // Verify the result\n        assertNotNull(actualUuids, \"The returned UUID array should not be null when camera count is greater than zero\");\n        assertEquals(mockCameraCount, actualUuids.length, \"The number of UUIDs should match the camera count\");\n        assertArrayEquals(mockUuids, actualUuids, \"The UUIDs array should match the mocked UUIDs\");\n\n        // Test with no cameras\n        when(CLCamera.getCameraCount()).thenReturn(0);\n        actualUuids = PS3EyeFrameGrabber.listPS3Cameras();\n        assertNull(actualUuids, \"The returned UUID array should be null when camera count is zero\");\n    }\n\n    // If any resources are opened in @BeforeAll, they should be closed here\n    @AfterAll\n    public static void tearDown() {\n        // Teardown mocks or other resources if needed\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class PS3EyeFrameGrabberTest {\n\n    @Test\n    public void listPS3CamerasTest() {\n        // Mock the CLCamera to return predefined UUIDs and camera count\n        CLCamera mockCLCamera = mock(CLCamera.class);\n        when(mockCLCamera.cameraUUID(0)).thenReturn(\"uuid-123\");\n        when(mockCLCamera.cameraUUID(1)).thenReturn(\"uuid-456\");\n        when(PS3EyeFrameGrabber.getCameraCount()).thenReturn(2);\n\n        // Execute the method to test\n        String[] cameraUuids = PS3EyeFrameGrabber.listPS3Cameras();\n\n        // Verify the expected results\n        assertNotNull(cameraUuids, \"The returned array should not be null\");\n        assertEquals(2, cameraUuids.length, \"The returned array should contain 2 elements\");\n        assertEquals(\"uuid-123\", cameraUuids[0], \"The first UUID should be 'uuid-123'\");\n        assertEquals(\"uuid-456\", cameraUuids[1], \"The second UUID should be 'uuid-456'\");\n        \n        // Test the scenario where no cameras are available\n        when(PS3EyeFrameGrabber.getCameraCount()).thenReturn(0);\n        cameraUuids = PS3EyeFrameGrabber.listPS3Cameras();\n        assertNull(cameraUuids, \"The returned array should be null when there are no cameras\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport cl.eye.CLCamera;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PS3EyeFrameGrabberTest {\n    \n    // Mock the CLCamera since it's an external dependency, \n    // and we're not testing it directly\n    @BeforeEach\n    public void setUp() {\n        CLCamera mockCLCamera = mock(CLCamera.class);\n        when(mockCLCamera.cameraUUID(0)).thenReturn(\"uuid-0\");\n        when(mockCLCamera.cameraUUID(1)).thenReturn(\"uuid-1\");\n        // continue for however many cameras you want to mock\n    }\n\n    @Test\n    public void listPS3CamerasTest_returnsCameraUUIDs() {\n        // Assume 'getCameraCount()' is a static method of PS3EyeFrameGrabber\n        // and stub it to return a fixed number, for example, 2 cameras.\n        when(PS3EyeFrameGrabber.getCameraCount()).thenReturn(2);\n\n        String[] cameraUUIDs = PS3EyeFrameGrabber.listPS3Cameras();\n\n        assertNotNull(cameraUUIDs, \"Camera UUIDs should not be null\");\n        assertEquals(2, cameraUUIDs.length, \"Should return UUIDs for 2 cameras\");\n        assertEquals(\"uuid-0\", cameraUUIDs[0], \"First UUID should match mock\");\n        assertEquals(\"uuid-1\", cameraUUIDs[1], \"Second UUID should match mock\");\n    }\n\n    @Test\n    public void listPS3CamerasTest_returnsNullWhenNoCameras() {\n        // Stub 'getCameraCount()' to return 0 indicating no cameras are connected.\n        when(PS3EyeFrameGrabber.getCameraCount()).thenReturn(0);\n\n        String[] cameraUUIDs = PS3EyeFrameGrabber.listPS3Cameras();\n\n        assertNull(cameraUUIDs, \"Should return null when no cameras are available\");\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class PS3EyeFrameGrabberTest {\n\n    @Test\n    public void listPS3CamerasTest() {\n        // Mocking the static method getCameraCount and cameraUUID\n        int mockCameraCount = 3;\n        PS3EyeFrameGrabber frameGrabber = mock(PS3EyeFrameGrabber.class);\n        when(frameGrabber.getCameraCount()).thenReturn(mockCameraCount);\n        when(frameGrabber.cameraUUID(0)).thenReturn(\"UUID-0\");\n        when(frameGrabber.cameraUUID(1)).thenReturn(\"UUID-1\");\n        when(frameGrabber.cameraUUID(2)).thenReturn(\"UUID-2\");\n\n        // Perform the actual call to the listPS3Cameras static method\n        String[] cameraList = PS3EyeFrameGrabber.listPS3Cameras();\n\n        // Assert that the list contains the correct UUIDs\n        assertNotNull(cameraList, \"Camera list should not be null\");\n        assertEquals(mockCameraCount, cameraList.length, \"Camera list size should match the camera count\");\n        assertEquals(\"UUID-0\", cameraList[0], \"Camera UUID at index 0 should match\");\n        assertEquals(\"UUID-1\", cameraList[1], \"Camera UUID at index 1 should match\");\n        assertEquals(\"UUID-2\", cameraList[2], \"Camera UUID at index 2 should match\");\n\n        // Verify the interactions with the mocks\n        verify(frameGrabber, times(1)).getCameraCount();\n        verify(frameGrabber, times(1)).cameraUUID(0);\n        verify(frameGrabber, times(1)).cameraUUID(1);\n        verify(frameGrabber, times(1)).cameraUUID(2);\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.*;\nimport static org.mockito.Mockito.*;\n\npublic class PS3EyeFrameGrabberTest {\n\n    @Test\n    public void listPS3CamerasTest() {\n        // Mock the CLCamera static methods since they interact with external hardware\n        CLCamera mockedCLCamera = mock(CLCamera.class);\n        when(CLCamera.cameraUUID(0)).thenReturn(\"UUID_0\");\n        when(CLCamera.cameraUUID(1)).thenReturn(\"UUID_1\");\n\n        // mock the static method getCameraCount\n        PS3EyeFrameGrabber frameGrabber = mock(PS3EyeFrameGrabber.class);\n        when(frameGrabber.getCameraCount()).thenReturn(2);\n\n        // Test with more than 0 cameras\n        String[] cameras = frameGrabber.listPS3Cameras();\n        assertThat(\"The camera list should not be null when there are cameras\", cameras, is(notNullValue()));\n        assertThat(\"The camera list should have the same number of elements as camera count\", cameras.length, is(2));\n        assertThat(\"The first camera UUID should match\", cameras[0], is(\"UUID_0\"));\n        assertThat(\"The second camera UUID should match\", cameras[1], is(\"UUID_1\"));\n\n        // Test with 0 cameras\n        when(frameGrabber.getCameraCount()).thenReturn(0);\n        cameras = frameGrabber.listPS3Cameras();\n        assertNull(\"The camera list should be null when there are no cameras\", cameras);\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\n\nimport static org.bytedeco.javacv.PS3EyeFrameGrabber.getCameraCount;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PS3EyeFrameGrabberTest {\n\n    @Test\n    public void listPS3CamerasTest() {\n        // Mock the CLCamera class\n        CLCamera cameraMock = mock(CLCamera.class);\n        \n        // Mock the behavior of the camera count and UUIDs when cameras are present\n        when(CLCamera.cameraUUID(0)).thenReturn(\"UUID0\");\n        when(CLCamera.cameraUUID(1)).thenReturn(\"UUID1\");\n        when(getCameraCount()).thenReturn(2);\n\n        // Test for the case when cameras are present\n        String[] cameras = PS3EyeFrameGrabber.listPS3Cameras();\n        assertNotNull(cameras, \"Camera list should not be null\");\n        assertEquals(2, cameras.length, \"Camera list length should match the number of cameras\");\n        assertEquals(\"UUID0\", cameras[0], \"First camera UUID should match\");\n        assertEquals(\"UUID1\", cameras[1], \"Second camera UUID should match\");\n\n        // Mock the behavior when no cameras are present\n        when(getCameraCount()).thenReturn(0);\n\n        // Test for the case when no cameras are present\n        cameras = PS3EyeFrameGrabber.listPS3Cameras();\n        assertNull(cameras, \"Camera list should be null when there are no cameras\");\n    }\n}"
    ]
}