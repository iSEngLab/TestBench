Source code: 


public static String desEncrypt(String data, String key, String iv) throws Exception {
    //update-begin-author:taoyan date:2022-5-23 for:VUEN-1084 【vue3】online表单测试发现的新问题 6、解密报错 ---解码失败应该把异常抛出去，在外面处理
    byte[] encrypted1 = Base64.decode(data);

    Cipher cipher = Cipher.getInstance("AES/CBC/NoPadding");
    SecretKeySpec keyspec = new SecretKeySpec(key.getBytes(), "AES");
    IvParameterSpec ivspec = new IvParameterSpec(iv.getBytes());

    cipher.init(Cipher.DECRYPT_MODE, keyspec, ivspec);

    byte[] original = cipher.doFinal(encrypted1);
    String originalString = new String(original);
    //加密解码后的字符串会出现\u0000
    return originalString.replaceAll("\\u0000", "");
    //update-end-author:taoyan date:2022-5-23 for:VUEN-1084 【vue3】online表单测试发现的新问题 6、解密报错 ---解码失败应该把异常抛出去，在外面处理
}



No.1 generated result --------------------------

package org.jeecg.common.util.encryption;

import org.apache.shiro.codec.Base64;
import org.junit.jupiter.api.Test;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import static org.junit.jupiter.api.Assertions.*;

public class AesEncryptUtilTest {

    @Test
    public void desEncryptTest() throws Exception {
        // Given
        String originalData = "UnitTestString";
        String key = "1234567812345678"; // AES key size (128 bit, 192 bit, 256 bit) - for tests 128 bit
        String iv = "1234567812345678"; // AES block size (16 bytes)

        // Encrypt data first. The provided source code only includes a method for decryption, assumed that an encryption method exists
        String encryptedData = AesEncryptUtil.encrypt(originalData, key, iv);

        // When
        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);

        // Then
        assertEquals(originalData, decryptedData, "The decrypted data should match the original data.");
    }
}


No.2 generated result --------------------------

package org.jeecg.common.util.encryption;

import org.junit.jupiter.api.Test;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.apache.shiro.codec.Base64;
import java.nio.charset.StandardCharsets;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class AesEncryptUtilTest {
    @Test
    public void desEncryptTest() {
        String key = "1234567890123456"; // 16 bytes key for AES
        String iv = "1234567890123456"; // 16 bytes IV for AES
        String originalData = "secret data";
        
        try {
            // Encrypt the data
            String encryptedData = AesEncryptUtil.encrypt(originalData, key, iv);
            // Now test decryption
            String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);
            
            assertEquals(originalData, decryptedData.replaceAll("\\u0000", ""), 
                "Decrypted data should be equal to the original data");

        } catch (Exception e) {
            e.printStackTrace();
            fail("Exception should not be thrown");
        }
    }

    // Optional: Adding a test for the exception scenario
    @Test
    public void desEncryptTestWithException() {
        String key = "wrong_key_size"; // Incorrect key size
        String iv = "1234567890123456"; // 16 bytes IV for AES
        String encryptedData = "someEncryptedBase64String";

        // Expect an exception to be thrown due to wrong key size
        Exception exception = assertThrows(Exception.class, () -> {
            AesEncryptUtil.desEncrypt(encryptedData, key, iv);
        });

        String expectedMessage = "Invalid AES key length";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage),
                "Exception message should contain the correct error about key length");
    }
}


No.3 generated result --------------------------

package org.jeecg.common.util.encryption;

import org.apache.shiro.codec.Base64;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AesEncryptUtilTest {

    @Test
    public void desEncryptTest() throws Exception {
        // Data to be encrypted
        String originalData = "Hello, World!";
        // Encryption Key (Ensure the key length is compatible with AES encryption)
        String key = "1234567890123456"; // This is a dummy key, replace with actual key
        // Initialization Vector (Must be 16 bytes long)
        String iv = "1234567890123456"; // This is a dummy IV, replace with actual IV
        
        // Encrypt data
        String encryptedData = AesEncryptUtil.encrypt(originalData, key, iv);
        
        // Perform Base64 encoding on the encrypted data to simulate data transfer
        String base64EncryptedData = Base64.encodeToString(encryptedData.getBytes());
        
        // Decrypt the data back
        String decryptedData = AesEncryptUtil.desEncrypt(base64EncryptedData, key, iv);
        
        // Verify that the decrypted data matches the original data
        assertEquals(originalData, decryptedData);
    }
}


No.4 generated result --------------------------

package org.jeecg.common.util.encryption;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AesEncryptUtilTest {

    @Test
    public void desEncryptTest() throws Exception {
        // Given
        String input = "Some encrypted text";
        String key = "1234567890123456"; // Assume key and iv are 16 bytes long
        String iv = "1234567890123456";
        
        // Encrypt the text (to obtain a base for decryption)
        String encryptedData = AesEncryptUtil.encrypt(input, key, iv);
        
        // When
        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);
        
        // Then
        assertEquals(input, decryptedData, "The decrypted text should be equal to the original text");
    }
}


No.5 generated result --------------------------

package org.jeecg.common.util.encryption;

import org.apache.shiro.codec.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class AesEncryptUtilTest {
    
    @Test
    public void desEncryptTest() throws Exception {
        // Given
        final String inputString = "Hello World!";
        final String key = "1234567890123456"; // A dummy 16-byte key
        final String iv = "1234567890123456"; // A dummy 16-byte IV
        
        // Encrypt the string, we assume the 'encrypt' method is correctly implemented and works as the opposite of 'desEncrypt'
        String encryptedData = AesEncryptUtil.encrypt(inputString, key, iv); 

        // When
        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);

        // Then
        assertEquals(inputString, decryptedData, "The decrypted string should match the original string");
    }
}


No.6 generated result --------------------------

package org.jeecg.common.util.encryption;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AesEncryptUtilTest {
    
    private static final String KEY = "1234567890123456"; // Example key (must be 16 bytes)
    private static final String IV = "1234567890123456"; // Example IV (must be 16 bytes)
    
    @Test
    public void desEncryptTest() throws Exception {
        String dataToEncrypt = "Hello, World!";
        // Assuming there's a working 'encrypt' method in AesEncryptUtil
        String encryptedData = AesEncryptUtil.encrypt(dataToEncrypt, KEY, IV);
        assertNotNull(encryptedData, "Encrypted data should not be null");
        
        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, KEY, IV);
        assertNotNull(decryptedData, "Decrypted data should not be null");
        assertEquals(dataToEncrypt, decryptedData, "The decrypted data should match the original");
    }
}


No.7 generated result --------------------------

package org.jeecg.common.util.encryption;

import org.apache.shiro.codec.Base64;
import org.junit.jupiter.api.Test;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class AesEncryptUtilTest {

    @Test
    public void desEncryptTest() throws Exception {
        // Arrange
        String key = "0123456789abcdef"; // Key must be of length 16, 24, or 32 bytes
        String iv = "abcdef9876543210";  // IV must be 16 bytes long
        String originalData = "Hello World!";
        String encryptedData = AesEncryptUtil.encrypt(originalData, key, iv);

        // Act
        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);

        // Assert
        assertEquals(originalData, decryptedData.replaceAll("[\\u0000]", ""));

        // Assert exception throwing on illegal arguments (like short key or IV)
        String shortKey = "short";
        String shortIV = "short";
        assertThrows(Exception.class, () -> AesEncryptUtil.desEncrypt(encryptedData, shortKey, iv));
        assertThrows(Exception.class, () -> AesEncryptUtil.desEncrypt(encryptedData, key, shortIV));
    }
}


No.8 generated result --------------------------

package org.jeecg.common.util.encryption;

import org.apache.shiro.codec.Base64;
import org.junit.jupiter.api.Test;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class AesEncryptUtilTest {

    @Test
    public void desEncryptTest() throws Exception {
        // Given
        String inputString = "TestString";
        String key = "1234567890123456"; // Example key, should be 16 bytes
        String iv = "1234567890123456"; // Example IV, should be 16 bytes

        // First, encrypt the inputString to get the encrypted data
        Cipher cipher = Cipher.getInstance("AES/CBC/NoPadding");
        SecretKeySpec keyspec = new SecretKeySpec(key.getBytes(), "AES");
        IvParameterSpec ivspec = new IvParameterSpec(iv.getBytes());
        cipher.init(Cipher.ENCRYPT_MODE, keyspec, ivspec);

        byte[] encryptedDataBytes = cipher.doFinal(inputString.getBytes());
        String encryptedData = Base64.encodeToString(encryptedDataBytes);

        // When
        String result = AesEncryptUtil.desEncrypt(encryptedData, key, iv);

        // Then
        assertEquals(inputString.replaceAll("\\s+$", ""), result, "The decrypted string does not match the original");

        // Additionally, test for an exception when bad input is provided
        String badInput = "NotBase64Encoded";
        assertThrows(Exception.class, () -> AesEncryptUtil.desEncrypt(badInput, key, iv), "Expected an exception to be thrown when input is not Base64 encoded");
    }
}


No.9 generated result --------------------------

package org.jeecg.common.util.encryption;

import org.apache.shiro.codec.Base64;
import org.junit.jupiter.api.Test;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class AesEncryptUtilTest {
    @Test
    public void desEncryptTest() throws Exception {
        // Given
        String key = "1234567890123456"; // 16-byte length key for AES
        String iv = "abcdefghabcdefgh"; // 16-byte length initialization vector
        String dataToEncrypt = "Hello, World!";
        String encryptedData = Base64.encodeToString(dataToEncrypt.getBytes());

        // When
        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);

        // Then
        assertEquals(dataToEncrypt, decryptedData);
    }
}


No.10 generated result --------------------------

package org.jeecg.common.util.encryption;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AesEncryptUtilTest {

    // Constants to be used for the key and IV. Their size and values would depend
    // on the encryption algorithm requirements.
    private static final String KEY = "1234567890123456"; // 16-byte key for AES
    private static final String IV = "1234567890123456"; // 16-byte IV for AES
    
    @Test
    public void desEncryptTest() throws Exception {
        String inputString = "Hello World!";
        String key = KEY;
        String iv = IV;
        
        // Perform encryption then decryption to test the full cycle
        String encryptedData = AesEncryptUtil.encrypt(inputString, key, iv);
        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);
        
        // Assertions
        // The decrypted data should match the original input
        assertEquals(inputString, decryptedData);
        
        // Verify that encrypting a blank string doesn't cause an error
        encryptedData = AesEncryptUtil.encrypt("", key, iv);
        decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);
        assertEquals("", decryptedData);

        // If there are known issues (such as padding problems), you might want to add 
        // specific tests for those cases as well. 
    }
}


