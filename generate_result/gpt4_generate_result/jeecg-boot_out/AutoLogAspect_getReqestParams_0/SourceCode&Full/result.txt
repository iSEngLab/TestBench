Source code: 


private String getReqestParams(HttpServletRequest request, JoinPoint joinPoint) {
    String httpMethod = request.getMethod();
    String params = "";
    if (CommonConstant.HTTP_POST.equals(httpMethod) || CommonConstant.HTTP_PUT.equals(httpMethod) || CommonConstant.HTTP_PATCH.equals(httpMethod)) {
        Object[] paramsArray = joinPoint.getArgs();
        // java.lang.IllegalStateException: It is illegal to call this method if the current request is not in asynchronous mode (i.e. isAsyncStarted() returns false)
        //  https://my.oschina.net/mengzhang6/blog/2395893
        Object[] arguments  = new Object[paramsArray.length];
        for (int i = 0; i < paramsArray.length; i++) {
            if (paramsArray[i] instanceof BindingResult || paramsArray[i] instanceof ServletRequest || paramsArray[i] instanceof ServletResponse || paramsArray[i] instanceof MultipartFile) {
                //ServletRequest不能序列化，从入参里排除，否则报异常：java.lang.IllegalStateException: It is illegal to call this method if the current request is not in asynchronous mode (i.e. isAsyncStarted() returns false)
                //ServletResponse不能序列化 从入参里排除，否则报异常：java.lang.IllegalStateException: getOutputStream() has already been called for this response
                continue;
            }
            arguments[i] = paramsArray[i];
        }
        //update-begin-author:taoyan date:20200724 for:日志数据太长的直接过滤掉
        PropertyFilter profilter = new PropertyFilter() {
            @Override
            public boolean apply(Object o, String name, Object value) {
                int length = 500;
                if(value!=null && value.toString().length()>length){
                    return false;
                }
                return true;
            }
        };
        params = JSONObject.toJSONString(arguments, profilter);
        //update-end-author:taoyan date:20200724 for:日志数据太长的直接过滤掉
    } else {
        MethodSignature signature = (MethodSignature) joinPoint.getSignature();
        Method method = signature.getMethod();
        // 请求的方法参数值
        Object[] args = joinPoint.getArgs();
        // 请求的方法参数名称
        LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer();
        String[] paramNames = u.getParameterNames(method);
        if (args != null && paramNames != null) {
            for (int i = 0; i < args.length; i++) {
                params += "  " + paramNames[i] + ": " + args[i];
            }
        }
    }
    return params;
}



No.1 generated result --------------------------

package org.jeecg.common.aspect;

import org.aspectj.lang.JoinPoint;
import org.junit.jupiter.api.*;
import javax.servlet.http.HttpServletRequest;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class AutoLogAspectTest {
    
    @Test
    public void getReqestParamsTest() {
        // Given
        AutoLogAspect autoLogAspect = new AutoLogAspect();
        HttpServletRequest mockRequest = mock(HttpServletRequest.class);
        JoinPoint mockJoinPoint = mock(JoinPoint.class);
        MethodSignature mockMethodSignature = mock(MethodSignature.class);
        when(mockRequest.getMethod()).thenReturn("GET");
        when(mockJoinPoint.getSignature()).thenReturn(mockMethodSignature);
        when(mockMethodSignature.getMethod()).thenReturn(String.class.getMethods()[0]);
        LocalVariableTableParameterNameDiscoverer mockNameDiscoverer = mock(LocalVariableTableParameterNameDiscoverer.class);
        String[] paramsNames = new String[] {"arg1", "arg2"};
        Object[] args = new Object[] {"value1", "value2"};
        when(mockNameDiscoverer.getParameterNames(any())).thenReturn(paramsNames);
        when(mockJoinPoint.getArgs()).thenReturn(args);

        // Mock static factories/methods
        // More advanced approach may be needed for static mocking with pure JUnit/Mockito.
        // One way is by using PowerMockito but an easier one was used in the response.
        String expectedParams = "  arg1: value1  arg2: value2";

        // When
        String actualParams = autoLogAspect.getReqestParams(mockRequest, mockJoinPoint);

        // Then
        assertEquals(expectedParams, actualParams);
    }
}


No.2 generated result --------------------------

package org.jeecg.common.aspect;

import org.aspectj.lang.JoinPoint;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.mock.web.MockHttpServletRequest;
import javax.servlet.http.HttpServletRequest;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class AutoLogAspectTest {

    private AutoLogAspect autoLogAspect;
    private HttpServletRequest request;
    private JoinPoint joinPoint;

    @BeforeEach
    void setUp() {
        autoLogAspect = new AutoLogAspect();
        request = new MockHttpServletRequest();
        joinPoint = mock(JoinPoint.class);
    }

    @Test
    void getReqestParamsTestForGetMethod() {
        // Arrange
        when(request.getMethod()).thenReturn("GET");
        when(joinPoint.getArgs()).thenReturn(new Object[] {"param1Value", "param2Value"});
        when(joinPoint.getSignature()).thenReturn(mock(JoinPoint.Signature.class));
        
        // Act
        String params = autoLogAspect.getReqestParams(request, joinPoint);

        // Assert
        assertTrue(params.contains("param1Value"));
        assertTrue(params.contains("param2Value"));
    }

    @Test
    void getReqestParamsTestForPostMethod() {
        // Arrange
        when(request.getMethod()).thenReturn("POST");
        Object[] args = new Object[]{"{\"key\":\"value\"}", new MockHttpServletRequest()};
        when(joinPoint.getArgs()).thenReturn(args);
        
        // Act
        String params = autoLogAspect.getReqestParams(request, joinPoint);

        // Assert that params does not contain HttpServletRequest object
        assertFalse(params.contains("MockHttpServletRequest"));
        assertTrue(params.contains("{\"key\":\"value\"}"));
    }
}


No.3 generated result --------------------------

package org.jeecg.common.aspect;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.reflect.MethodSignature;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.multipart.MultipartFile;
import javax.servlet.http.HttpServletRequest;

import java.lang.reflect.Method;

public class AutoLogAspectTest {
    private AutoLogAspect autoLogAspect;

    @Mock
    private HttpServletRequest request;

    @Mock
    private JoinPoint joinPoint;

    @Mock
    private MethodSignature methodSignature;

    @Mock
    private Method method;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        autoLogAspect = new AutoLogAspect();
    }

    @Test
    public void getReqestParamsTest() {
        // Mock HttpServletRequest to return a specific HTTP method when getMethod is called
        when(request.getMethod()).thenReturn("POST");

        // Prepare an array of arguments that would be passed to the JoinPoint
        Object[] args = new Object[]{ new Object(), new MultipartFile(){} }; // including a mock MultipartFile to simulate an excluded argument

        // Mock JoinPoint to return our prepared arguments when getArgs is called
        when(joinPoint.getArgs()).thenReturn(args);

        // Mock method signature and method to provide method parameter names
        when(joinPoint.getSignature()).thenReturn(methodSignature);
        when(methodSignature.getMethod()).thenReturn(method);
        when(method.getName()).thenReturn("testMethod");

        LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer();
        when(u.getParameterNames(any(Method.class))).thenReturn(new String[] { "arg1" });

        // Execute the method with the mocked request and JoinPoint
        String result = autoLogAspect.getReqestParams(request, joinPoint);
        
        // Asserts go here based on expected behavior:
        // 1. Verify that result is not null.
        // 2. Verify that result contains serialized arguments that are not excluded.
        assertNotNull(result, "Result should not be null");
        assertFalse(result.contains("MultipartFile"), "Result should not contain non-serializable MultipartFile");
        
        // If there's a specific format or content expected, assert the expected string
        // For example, we might expect a JSON string without the excluded MultipartFile.
        // However, without more context we cannot assert this.
    }
}


No.4 generated result --------------------------

package org.jeecg.common.aspect;

import org.aspectj.lang.JoinPoint;
import org.junit.jupiter.api.*;
import org.mockito.Mockito;

import javax.servlet.http.HttpServletRequest;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

public class AutoLogAspectTest {

    @Test
    public void getReqestParamsTest() {
        // Create an instance of the class that we want to test
        AutoLogAspect autoLogAspect = new AutoLogAspect();

        // Mock the HttpServletRequest and JoinPoint
        HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);
        JoinPoint mockJoinPoint = Mockito.mock(JoinPoint.class);

        // Mock the behavior of the HttpServletRequest to return the desired HTTP method when getMethod is called
        when(mockRequest.getMethod()).thenReturn("GET");

        // Mock the behavior of the JoinPoint to return an array of objects when getArgs is called
        Object[] args = new Object[]{"arg1", 123, true};
        when(mockJoinPoint.getArgs()).thenReturn(args);

        // Mock the MethodSignature and the reflected method
        MethodSignature mockMethodSignature = Mockito.mock(MethodSignature.class);
        when(mockJoinPoint.getSignature()).thenReturn(mockMethodSignature);
        java.lang.reflect.Method mockMethod = Mockito.mock(java.lang.reflect.Method.class);
        when(mockMethodSignature.getMethod()).thenReturn(mockMethod);

        // Mock the behavior of the method that returns the names of the parameters to simulate parameter discovery
        LocalVariableTableParameterNameDiscoverer mockParamNameDiscoverer = Mockito.mock(LocalVariableTableParameterNameDiscoverer.class);
        when(mockParamNameDiscoverer.getParameterNames(mockMethod))
                .thenReturn(new String[]{"param1", "param2", "param3"});
        
        // Inject the mock LocalVariableTableParameterNameDiscoverer into the aspect
        autoLogAspect.setU(mockParamNameDiscoverer);

        // Call the method that we are testing
        String params = autoLogAspect.getReqestParams(mockRequest, mockJoinPoint);

        // Verify the output
        String expectedParams = "  param1: arg1  param2: 123  param3: true";
        assertEquals(expectedParams, params, "The params did not match the expected value.");
    }
}


No.5 generated result --------------------------

package org.jeecg.common.aspect;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.reflect.MethodSignature;
import org.junit.jupiter.api.*;
import org.mockito.Mockito;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

import javax.servlet.http.HttpServletRequest;

public class AutoLogAspectTest {
    private AutoLogAspect autoLogAspect;
    private HttpServletRequest request;
    private JoinPoint joinPoint;
    private MethodSignature methodSignature;
    private Method method;

    @BeforeEach
    public void setUp() throws Exception {
        autoLogAspect = new AutoLogAspect();
        request = Mockito.mock(HttpServletRequest.class);
        joinPoint = Mockito.mock(JoinPoint.class);
        methodSignature = Mockito.mock(MethodSignature.class);
        method = AutoLogAspect.class.getDeclaredMethod("getReqestParams", HttpServletRequest.class, JoinPoint.class);

        when(joinPoint.getSignature()).thenReturn(methodSignature);
        when(methodSignature.getMethod()).thenReturn(method);
    }

    @Test
    public void getReqestParamsTest_POST() throws NoSuchMethodException {
        // Mock an HTTP POST request
        when(request.getMethod()).thenReturn("POST");
        Object[] args = new Object[] {"arg1", 123, true};
        when(joinPoint.getArgs()).thenReturn(args);

        // Call getReqestParams method
        String params = autoLogAspect.getReqestParams(request, joinPoint);

        // Assert non-empty String is returned
        assertTrue(params.length() > 0);
    }

    @Test
    public void getReqestParamsTest_GET() throws NoSuchMethodException {
        // Mock an HTTP GET request
        when(request.getMethod()).thenReturn("GET");
        Object[] args = new Object[] {"arg1", 123, true};
        String[] paramNames = new String[] {"param1", "param2", "param3"};
        when(joinPoint.getArgs()).thenReturn(args);
        LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer();
        when(u.getParameterNames(method)).thenReturn(paramNames);

        // Call getReqestParams method
        String params = autoLogAspect.getReqestParams(request, joinPoint);

        // Assert non-empty String is returned
        assertTrue(params.contains("param1: arg1"));
        assertTrue(params.contains("param2: 123"));
        assertTrue(params.contains("param3: true"));
    }

    @AfterEach
    public void tearDown() {
        autoLogAspect = null;
        request = null;
        joinPoint = null;
        methodSignature = null;
        method = null;
    }
}


No.6 generated result --------------------------

package org.jeecg.common.aspect;

import org.aspectj.lang.JoinPoint;
import org.junit.jupiter.api.*;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.mock.web.MockHttpServletRequest;

import javax.servlet.http.HttpServletRequest;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class AutoLogAspectTest {

    private AutoLogAspect autoLogAspect;

    @Mock
    private JoinPoint joinPoint;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        autoLogAspect = new AutoLogAspect();
    }

    @Test
    public void getReqestParamsTest() {
        HttpServletRequest request = new MockHttpServletRequest();

        // Mock HTTP method and JoinPoint behavior
        when(request.getMethod()).thenReturn(CommonConstant.HTTP_GET);

        // Mock obtaining method signature and method from JoinPoint
        MethodSignature signature = mock(MethodSignature.class);
        when(joinPoint.getSignature()).thenReturn(signature);
        Method method = mock(Method.class);
        when(signature.getMethod()).thenReturn(method);

        // Mock method parameter handling
        Object[] args = new Object[] { "value1", 123, true };
        when(joinPoint.getArgs()).thenReturn(args);
        LocalVariableTableParameterNameDiscoverer u = mock(LocalVariableTableParameterNameDiscoverer.class);
        String[] paramNames = new String[] { "param1", "param2", "param3" };
        when(u.getParameterNames(method)).thenReturn(paramNames);
        
        // Call the method to test
        String params = autoLogAspect.getReqestParams(request, joinPoint);
        
        // Check that the returned string matches the expected value
        assertEquals("  param1: value1  param2: 123  param3: true", params);
        
        // Verify that the mocks were called with the expected values
        verify(request).getMethod();
        verify(joinPoint).getSignature();
        verify(signature).getMethod();
        verify(joinPoint).getArgs();
        verify(u).getParameterNames(method);
    }
}


No.7 generated result --------------------------

package org.jeecg.common.aspect;

import org.aspectj.lang.JoinPoint;
import org.junit.jupiter.api.*;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import static org.mockito.Mockito.*;

import javax.servlet.http.HttpServletRequest;

@RunWith(MockitoJUnitRunner.class)
public class AutoLogAspectTest {
    
    @InjectMocks
    private AutoLogAspect autoLogAspect;  // The class under test

    @Mock
    private HttpServletRequest request;

    @Mock
    private JoinPoint joinPoint;

    @BeforeEach
    public void setUp() {
        // Configure the mocks with common behavior if needed
    }

    @Test
    public void getReqestParamsTest() {
        // Arrange
        String httpMethod = "GET";
        String[] paramNames = {"param1", "param2"};
        Object[] args = {"value1", "value2"};
        when(request.getMethod()).thenReturn(httpMethod);
        when(joinPoint.getArgs()).thenReturn(args);
        MethodSignature signature = mock(MethodSignature.class);
        Method method = mock(Method.class);
        when(joinPoint.getSignature()).thenReturn(signature);
        when(signature.getMethod()).thenReturn(method);
        LocalVariableTableParameterNameDiscoverer u = mock(LocalVariableTableParameterNameDiscoverer.class);
        when(u.getParameterNames(method)).thenReturn(paramNames);
        autoLogAspect = new AutoLogAspect() {
            @Override
            LocalVariableTableParameterNameDiscoverer getLocalVariableTableParameterNameDiscoverer() {
                return u; // Return the mock
            }
        };

        // Act
        String params = autoLogAspect.getReqestParams(request, joinPoint);

        // Assert
        String expectedParams = "  param1: value1  param2: value2";
        assertEquals(expectedParams, params);
    }

    private LocalVariableTableParameterNameDiscoverer getLocalVariableTableParameterNameDiscoverer() {
        // Mock implementation for testing purposes
        return new LocalVariableTableParameterNameDiscoverer();
    }
}


No.8 generated result --------------------------

package org.jeecg.common.aspect;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.reflect.MethodSignature;
import org.junit.jupiter.api.*;
import org.mockito.Mockito;
import org.springframework.mock.web.MockHttpServletRequest;

import javax.servlet.http.HttpServletRequest;
import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class AutoLogAspectTest {
    
    private AutoLogAspect autoLogAspect;
    private MockHttpServletRequest request;
    private JoinPoint joinPoint;
    private MethodSignature methodSignature;
    private Method method;

    @BeforeEach
    public void setUp() {
        autoLogAspect = new AutoLogAspect();
        request = new MockHttpServletRequest();
        joinPoint = Mockito.mock(JoinPoint.class);
        methodSignature = Mockito.mock(MethodSignature.class);
        method = Mockito.mock(Method.class);
    }

    @Test
    public void getReqestParamsTest_GET_Method() throws NoSuchMethodException {
        // Setup request method to GET
        request.setMethod("GET");
        when(joinPoint.getSignature()).thenReturn(methodSignature);
        when(methodSignature.getMethod()).thenReturn(method);
        when(method.getName()).thenReturn("testMethod");

        String[] paramNames = {"param1", "param2"};
        Object[] paramsValues = {"value1", "value2"};
        when(joinPoint.getArgs()).thenReturn(paramsValues);
        LocalVariableTableParameterNameDiscoverer u = Mockito.mock(LocalVariableTableParameterNameDiscoverer.class);
        when(u.getParameterNames(method)).thenReturn(paramNames);

        // Use reflection to invoke the private method
        String result = autoLogAspect.getReqestParams(request,joinPoint);

        // Expected format for GET: " paramName1: paramValue1  paramName2: paramValue2"
        String expectedParams = "  param1: value1  param2: value2";
        assertEquals(expectedParams, result);
    }

    @Test
    public void getReqestParamsTest_POST_Method() {
        // Setup request method to POST, PUT or PATCH
        request.setMethod("POST");
        Object[] args = new Object[0]; // assuming no arguments just for simplicity in the test case

        when(joinPoint.getArgs()).thenReturn(args);

        // Use reflection to invoke the private method
        String result = autoLogAspect.getReqestParams(request,joinPoint);

        // Expected format for POST/PUT/PATCH is JSON, but no arguments result in empty JSON array
        String expectedParams = "[]";
        assertEquals(expectedParams, result);
    }

    // Additional test cases can be added for different methods (PUT, PATCH) and scenarios (presence of BindingResult, ServletRequest, etc.)

    @AfterEach
    public void tearDown() {
        autoLogAspect = null;
        request = null;
        joinPoint = null;
        methodSignature = null;
        method = null;
    }
}


No.9 generated result --------------------------

package org.jeecg.common.aspect;

import org.aspectj.lang.JoinPoint;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import javax.servlet.http.HttpServletRequest;

public class AutoLogAspectTest {

    @Test
    public void getReqestParamsTest() {
        // Create mock objects
        HttpServletRequest mockRequest = mock(HttpServletRequest.class);
        JoinPoint mockJoinPoint = mock(JoinPoint.class);

        // Define return values for the mocks
        when(mockRequest.getMethod()).thenReturn(CommonConstant.HTTP_POST);
        Object[] args = { "param1Value", "param2Value", new BindingResult(){} };
        when(mockJoinPoint.getArgs()).thenReturn(args);

        // Instantiate class to test
        AutoLogAspect autoLogAspect = new AutoLogAspect();

        // Call getReqestParams to get the result 
        String resultParams = autoLogAspect.getReqestParams(mockRequest, mockJoinPoint);

        // Verify expected results - the actual assertion will depend on the getReqestParams logic
        // Here we are assuming that BindingResult will be filtered out and not included in the params string
        assertEquals("[\"param1Value\",\"param2Value\"]", resultParams);

        // Additionally, verify that methods on the mocks were called
        verify(mockRequest).getMethod();
        verify(mockJoinPoint).getArgs();

        // Note: In a full test, we might include other scenarios, such as different HTTP methods, input types, etc.
    }
}


No.10 generated result --------------------------

package org.jeecg.common.aspect;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.reflect.MethodSignature;
import org.junit.jupiter.api.*;
import org.mockito.Mockito;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import javax.servlet.http.HttpServletRequest;
import java.lang.reflect.Method;

public class AutoLogAspectTest {

    @Test
    public void getReqestParamsTest() throws Exception {
        // Mock HttpServletRequest
        HttpServletRequest request = mock(HttpServletRequest.class);
        when(request.getMethod()).thenReturn(CommonConstant.HTTP_POST);

        // Mock JoinPoint
        JoinPoint joinPoint = mock(JoinPoint.class);
        Object[] args = new Object[]{"param1", "param2"};
        when(joinPoint.getArgs()).thenReturn(args);

        // Mock MethodSignature and Method
        MethodSignature signature = mock(MethodSignature.class);
        when(joinPoint.getSignature()).thenReturn(signature);
        Method method = AutoLogAspect.class.getDeclaredMethod("getReqestParams", HttpServletRequest.class, JoinPoint.class);
        when(signature.getMethod()).thenReturn(method);

        // Set up the LocalVariableTableParameterNameDiscoverer mock to return parameter names
        LocalVariableTableParameterNameDiscoverer u = Mockito.mock(LocalVariableTableParameterNameDiscoverer.class);
        String[] paramNames = new String[]{"arg1", "arg2"};
        Mockito.when(u.getParameterNames(method)).thenReturn(paramNames);

        // Instantiate the AutoLogAspect class to test
        AutoLogAspect aspect = new AutoLogAspect();
        aspect.u = u; // Use the mocked LocalVariableTableParameterNameDiscoverer in the aspect

        // Call the method to test
        String params = aspect.getReqestParams(request, joinPoint);

        // Assert results (we don't perform serialization in the test so we assert only the structure)
        String expected = "  arg1: param1  arg2: param2";
        assertEquals(expected, params);
    }
}


