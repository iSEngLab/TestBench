{
    "project_name": "jeecg-boot",
    "file_name": "DictAspect.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/aspect/DictAspect.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.aspect",
    "docstring": "/**\n     * \u672c\u65b9\u6cd5\u9488\u5bf9\u8fd4\u56de\u5bf9\u8c61\u4e3aResult \u7684IPage\u7684\u5206\u9875\u5217\u8868\u6570\u636e\u8fdb\u884c\u52a8\u6001\u5b57\u5178\u6ce8\u5165\n     * \u5b57\u5178\u6ce8\u5165\u5b9e\u73b0 \u901a\u8fc7\u5bf9\u5b9e\u4f53\u7c7b\u6dfb\u52a0\u6ce8\u89e3@dict \u6765\u6807\u8bc6\u9700\u8981\u7684\u5b57\u5178\u5185\u5bb9,\u5b57\u5178\u5206\u4e3a\u5355\u5b57\u5178code\u5373\u53ef \uff0ctable\u5b57\u5178 code table text\u914d\u5408\u4f7f\u7528\u4e0e\u539f\u6765jeecg\u7684\u7528\u6cd5\u76f8\u540c\n     * \u793a\u4f8b\u4e3aSysUser   \u5b57\u6bb5\u4e3asex \u6dfb\u52a0\u4e86\u6ce8\u89e3@Dict(dicCode = \"sex\") \u4f1a\u5728\u5b57\u5178\u670d\u52a1\u7acb\u9a6c\u67e5\u51fa\u6765\u5bf9\u5e94\u7684text \u7136\u540e\u5728\u8bf7\u6c42list\u7684\u65f6\u5019\u5c06\u8fd9\u4e2a\u5b57\u5178text\uff0c\u5df2\u5b57\u6bb5\u540d\u79f0\u52a0_dictText\u5f62\u5f0f\u8fd4\u56de\u5230\u524d\u7aef\n     * \u4f8b\u8f93\u5165\u5f53\u524d\u8fd4\u56de\u503c\u7684\u5c31\u4f1a\u591a\u51fa\u4e00\u4e2asex_dictText\u5b57\u6bb5\n     * {\n     *      sex:1,\n     *      sex_dictText:\"\u7537\"\n     * }\n     * \u524d\u7aef\u76f4\u63a5\u53d6\u503csext_dictText\u5728table\u91cc\u9762\u65e0\u9700\u518d\u8fdb\u884c\u524d\u7aef\u7684\u5b57\u5178\u8f6c\u6362\u4e86\n     *  customRender:function (text) {\n     *               if(text==1){\n     *                 return \"\u7537\";\n     *               }else if(text==2){\n     *                 return \"\u5973\";\n     *               }else{\n     *                 return text;\n     *               }\n     *             }\n     *             \u76ee\u524dvue\u662f\u8fd9\u4e48\u8fdb\u884c\u5b57\u5178\u6e32\u67d3\u5230table\u4e0a\u7684\u591a\u4e86\u5c31\u5f88\u9ebb\u70e6\u4e86 \u8fd9\u4e2a\u76f4\u63a5\u5728\u670d\u52a1\u7aef\u6e32\u67d3\u5b8c\u6210\u524d\u7aef\u53ef\u4ee5\u76f4\u63a5\u7528\n     * @param result\n     */",
    "source_code": "\nprivate Object parseDictText(Object result) {\n    if (result instanceof Result) {\n        if (((Result) result).getResult() instanceof IPage) {\n            List<JSONObject> items = new ArrayList<>();\n\n            //step.1 \u7b5b\u9009\u51fa\u52a0\u4e86 Dict \u6ce8\u89e3\u7684\u5b57\u6bb5\u5217\u8868\n            List<Field> dictFieldList = new ArrayList<>();\n            // \u5b57\u5178\u6570\u636e\u5217\u8868\uff0c key = \u5b57\u5178code\uff0cvalue=\u6570\u636e\u5217\u8868\n            Map<String, List<String>> dataListMap = new HashMap<>(5);\n            //\u53d6\u51fa\u7ed3\u679c\u96c6\n            List<Object> records=((IPage) ((Result) result).getResult()).getRecords();\n            //update-begin--Author:zyf -- Date:20220606 ----for\uff1a\u3010VUEN-1230\u3011 \u5224\u65ad\u662f\u5426\u542b\u6709\u5b57\u5178\u6ce8\u89e3,\u6ca1\u6709\u6ce8\u89e3\u8fd4\u56de-----\n            Boolean hasDict= checkHasDict(records);\n            if(!hasDict){\n                return result;\n            }\n\n            log.debug(\" __ \u8fdb\u5165\u5b57\u5178\u7ffb\u8bd1\u5207\u9762 DictAspect \u2014\u2014 \" );\n            //update-end--Author:zyf -- Date:20220606 ----for\uff1a\u3010VUEN-1230\u3011 \u5224\u65ad\u662f\u5426\u542b\u6709\u5b57\u5178\u6ce8\u89e3,\u6ca1\u6709\u6ce8\u89e3\u8fd4\u56de-----\n            for (Object record : records) {\n                String json=\"{}\";\n                try {\n                    //update-begin--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                    //\u89e3\u51b3@JsonFormat\u6ce8\u89e3\u89e3\u6790\u4e0d\u4e86\u7684\u95ee\u9898\u8be6\u89c1SysAnnouncement\u7c7b\u7684@JsonFormat\n                     json = objectMapper.writeValueAsString(record);\n                    //update-end--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                } catch (JsonProcessingException e) {\n                    log.error(\"json\u89e3\u6790\u5931\u8d25\"+e.getMessage(),e);\n                }\n                //update-begin--Author:scott -- Date:20211223 ----for\uff1a\u3010issues/3303\u3011restcontroller\u8fd4\u56dejson\u6570\u636e\u540ekey\u987a\u5e8f\u9519\u4e71 -----\n                JSONObject item = JSONObject.parseObject(json, Feature.OrderedField);\n                //update-end--Author:scott -- Date:20211223 ----for\uff1a\u3010issues/3303\u3011restcontroller\u8fd4\u56dejson\u6570\u636e\u540ekey\u987a\u5e8f\u9519\u4e71 -----\n\n                //update-begin--Author:scott -- Date:20190603 ----for\uff1a\u89e3\u51b3\u7ee7\u627f\u5b9e\u4f53\u5b57\u6bb5\u65e0\u6cd5\u7ffb\u8bd1\u95ee\u9898------\n                //for (Field field : record.getClass().getDeclaredFields()) {\n                // \u904d\u5386\u6240\u6709\u5b57\u6bb5\uff0c\u628a\u5b57\u5178Code\u53d6\u51fa\u6765\uff0c\u653e\u5230 map \u91cc\n                for (Field field : oConvertUtils.getAllFields(record)) {\n                    String value = item.getString(field.getName());\n                    if (oConvertUtils.isEmpty(value)) {\n                        continue;\n                    }\n                //update-end--Author:scott  -- Date:20190603 ----for\uff1a\u89e3\u51b3\u7ee7\u627f\u5b9e\u4f53\u5b57\u6bb5\u65e0\u6cd5\u7ffb\u8bd1\u95ee\u9898------\n                    if (field.getAnnotation(Dict.class) != null) {\n                        if (!dictFieldList.contains(field)) {\n                            dictFieldList.add(field);\n                        }\n                        String code = field.getAnnotation(Dict.class).dicCode();\n                        String text = field.getAnnotation(Dict.class).dicText();\n                        String table = field.getAnnotation(Dict.class).dictTable();\n\n                        List<String> dataList;\n                        String dictCode = code;\n                        if (!StringUtils.isEmpty(table)) {\n                            dictCode = String.format(\"%s,%s,%s\", table, text, code);\n                        }\n                        dataList = dataListMap.computeIfAbsent(dictCode, k -> new ArrayList<>());\n                        this.listAddAllDeduplicate(dataList, Arrays.asList(value.split(\",\")));\n                    }\n                    //date\u7c7b\u578b\u9ed8\u8ba4\u8f6c\u6362string\u683c\u5f0f\u5316\u65e5\u671f\n                    //update-begin--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                    //if (JAVA_UTIL_DATE.equals(field.getType().getName())&&field.getAnnotation(JsonFormat.class)==null&&item.get(field.getName())!=null){\n                        //SimpleDateFormat aDate=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n                        // item.put(field.getName(), aDate.format(new Date((Long) item.get(field.getName()))));\n                    //}\n                    //update-end--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                }\n                items.add(item);\n            }\n\n            //step.2 \u8c03\u7528\u7ffb\u8bd1\u65b9\u6cd5\uff0c\u4e00\u6b21\u6027\u7ffb\u8bd1\n            Map<String, List<DictModel>> translText = this.translateAllDict(dataListMap);\n\n            //step.3 \u5c06\u7ffb\u8bd1\u7ed3\u679c\u586b\u5145\u5230\u8fd4\u56de\u7ed3\u679c\u91cc\n            for (JSONObject record : items) {\n                for (Field field : dictFieldList) {\n                    String code = field.getAnnotation(Dict.class).dicCode();\n                    String text = field.getAnnotation(Dict.class).dicText();\n                    String table = field.getAnnotation(Dict.class).dictTable();\n\n                    String fieldDictCode = code;\n                    if (!StringUtils.isEmpty(table)) {\n                        fieldDictCode = String.format(\"%s,%s,%s\", table, text, code);\n                    }\n\n                    String value = record.getString(field.getName());\n                    if (oConvertUtils.isNotEmpty(value)) {\n                        List<DictModel> dictModels = translText.get(fieldDictCode);\n                        if(dictModels==null || dictModels.size()==0){\n                            continue;\n                        }\n\n                        String textValue = this.translDictText(dictModels, value);\n                        log.debug(\" \u5b57\u5178Val : \" + textValue);\n                        log.debug(\" __\u7ffb\u8bd1\u5b57\u5178\u5b57\u6bb5__ \" + field.getName() + CommonConstant.DICT_TEXT_SUFFIX + \"\uff1a \" + textValue);\n\n                        // TODO-sun \u6d4b\u8bd5\u8f93\u51fa\uff0c\u5f85\u5220\n                        log.debug(\" ---- dictCode: \" + fieldDictCode);\n                        log.debug(\" ---- value: \" + value);\n                        log.debug(\" ----- text: \" + textValue);\n                        log.debug(\" ---- dictModels: \" + JSON.toJSONString(dictModels));\n\n                        record.put(field.getName() + CommonConstant.DICT_TEXT_SUFFIX, textValue);\n                    }\n                }\n            }\n\n            ((IPage) ((Result) result).getResult()).setRecords(items);\n        }\n\n    }\n    return result;\n}\n",
    "class_name": "DictAspect",
    "method_name": "parseDictText",
    "arguments": [
        "Object result"
    ],
    "generate_test": [
        "package org.jeecg.common.aspect;\n\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.jeecg.common.api.CommonAPI;\nimport org.jeecg.common.api.vo.Result;\nimport org.jeecg.common.system.vo.DictModel;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.Mockito.when;\n\npublic class DictAspectTest {\n\n    @Mock\n    private CommonAPI commonApi;\n    @Mock\n    private RedisTemplate<String, Object> redisTemplate;\n    @Mock\n    private ObjectMapper objectMapper;\n    @Mock\n    private IPage page;\n\n    private DictAspect dictAspect;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        dictAspect = new DictAspect();\n        dictAspect.commonApi = commonApi;\n        dictAspect.redisTemplate = redisTemplate;\n        dictAspect.objectMapper = objectMapper;\n    }\n\n    @Test\n    public void parseDictTextTest() {\n        // Assume\n        Result<Object> result = new Result<>();\n        result.setResult(page);\n        List<Object> records = new ArrayList<>();\n        records.add(\"RecordData\"); // Add your record data here. It needs to be well-formed for the test.\n        when(page.getRecords()).thenReturn(records);\n        when(commonApi.translateManyDict(anyString(), anyString())).thenReturn(new HashMap<>());\n        when(redisTemplate.hasKey(anyString())).thenReturn(false); // No cache hits for simplicity\n\n        // Execute the method under test\n        Object actualResult = dictAspect.parseDictText(result);\n\n        // Assert\n        assertEquals(result, actualResult, \"Expected result should be equal to actual result after running parseDictText\");\n    }\n}",
        "package org.jeecg.common.aspect;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport com.alibaba.fastjson.JSONObject;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport org.jeecg.common.api.vo.Result;\nimport org.jeecg.common.system.vo.DictModel;\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\npublic class DictAspectTest {\n\n    @Test\n    public void parseDictTextTest() {\n        // Given\n        Result<?> mockResult = mock(Result.class);\n        IPage<?> mockPage = mock(IPage.class);\n        List<Object> fakeRecords = new ArrayList<>();\n        fakeRecords.add(new Object()); // Pretend this object has Dict annotations\n        List<JSONObject> mockRecordItems = new ArrayList<>();\n        Field mockField = mock(Field.class);\n        Dict mockDictAnnotation = mock(Dict.class);\n\n        DictAspect aspect = Mockito.spy(new DictAspect());\n        Map<String, List<DictModel>> fakeTranslationMap = new HashMap<>();\n        fakeTranslationMap.put(\"mockDictCode\", new ArrayList<>());\n\n        when(mockResult.getResult()).thenReturn(mockPage);\n        when(mockPage.getRecords()).thenReturn(fakeRecords);\n        doReturn(true).when(aspect).checkHasDict(fakeRecords);\n        when(mockField.getAnnotation(Dict.class)).thenReturn(mockDictAnnotation);\n        when(mockDictAnnotation.dicCode()).thenReturn(\"mockDictCode\");\n        when(mockField.getName()).thenReturn(\"mockFieldName\");\n        doReturn(fakeTranslationMap).when(aspect).translateAllDict(any());\n        doNothing().when(aspect).listAddAllDeduplicate(any(), any());\n        doReturn(new ArrayList<>(List.of(mockField))).when(aspect, \"getAllFields\", any());\n\n        // When\n        Object result = aspect.parseDictText(mockResult);\n\n        // Then\n        verify(mockResult, times(1)).getResult();\n        verify(mockPage, times(1)).getRecords();\n        verify(aspect, times(1)).checkHasDict(fakeRecords);\n        verify(mockField, atLeastOnce()).getAnnotation(Dict.class);\n        assertSame(mockResult, result, \"The result should be the same as the input when there are no actual Dict annotations.\");\n    }\n}",
        "package org.jeecg.common.aspect;\n\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport org.jeecg.common.api.CommonAPI;\nimport org.jeecg.common.api.vo.Result;\nimport org.jeecg.common.system.vo.DictModel;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\nimport org.springframework.test.util.ReflectionTestUtils;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DictAspectTest {\n\n    private DictAspect dictAspect;\n    private CommonAPI commonAPI;\n\n    @BeforeEach\n    public void setUp() {\n        dictAspect = new DictAspect();\n        commonAPI = Mockito.mock(CommonAPI.class);\n        ReflectionTestUtils.setField(dictAspect, \"commonApi\", commonAPI);\n    }\n\n    @Test\n    public void parseDictTextTest() {\n        // Arrange\n        Result<IPage> result = new Result<>();\n        IPage page = Mockito.mock(IPage.class);\n        // Assume that we have a simple record with a Dictionary-annotated field.\n        JSONObject record = new JSONObject();\n        record.put(\"status\", \"1\");\n\n        // Mock IPage behavior\n        when(page.getRecords()).thenReturn(Arrays.asList(record));\n        result.setResult(page);\n\n        // Assume that the common API returns a mapping for the \"status\" field\n        DictModel dictModel = new DictModel(\"1\", \"Active\");\n        when(commonAPI.translateDict(any(), any())).thenReturn(\"Active\");\n        Map<String, List<DictModel>> translationMap = new HashMap<>();\n        translationMap.put(\"status\", Arrays.asList(dictModel));\n\n        System.setProperty(\"org.slf4j.simpleLogger.defaultLogLevel\", \"debug\");\n\n        // Act\n        Object modifiedResult = dictAspect.parseDictText(result);\n\n        // Assert\n        assertTrue(modifiedResult instanceof Result);\n        Result<IPage> returnedResult = (Result<IPage>) modifiedResult;\n        IPage<?> returnedPage = returnedResult.getResult();\n        assertNotNull(returnedPage);\n\n        List<?> records = returnedPage.getRecords();\n        assertNotNull(records);\n        assertFalse(records.isEmpty());\n\n        JSONObject modifiedRecord = (JSONObject) records.get(0);\n        assertNotNull(modifiedRecord.getString(\"status_dictText\"));\n        assertEquals(\"Active\", modifiedRecord.getString(\"status_dictText\"));\n    }\n}",
        "package org.jeecg.common.aspect;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport org.jeecg.common.api.vo.Result;\nimport org.jeecg.common.system.vo.DictModel;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\n\nimport static org.mockito.Mockito.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass DictAspectTest {\n    private DictAspect dictAspect;\n    \n    @Mock\n    private IPage<Object> iPage;\n\n    @Mock\n    private Result<?> result;\n\n    @Mock\n    private RedisTemplate<String, Object> redisTemplate;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n        dictAspect = new DictAspect();\n        dictAspect.redisTemplate = redisTemplate;\n    }\n\n    @Test\n    public void testParseDictText_validResult() {\n        // Mock the result and page behavior\n        List<Object> records = new ArrayList<>();\n        // Assume the record is JSONObject\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"name\", \"John Doe\");\n        records.add(jsonObject);\n\n        when(iPage.getRecords()).thenReturn(records);\n        when(result.getResult()).thenReturn(iPage);\n\n        // Mock checkHasDict method to return true as we are expecting dict annotations\n        when(dictAspect.checkHasDict(records)).thenReturn(true);\n\n        // Mock translateAllDict method to return an empty translation text map\n        // as we are not focusing on the translation part in this test\n        when(dictAspect.translateAllDict(any())).thenReturn(new HashMap<>());\n\n        // Act\n        Object finalResult = dictAspect.parseDictText(result);\n\n        // Assert\n        assertNotNull(finalResult);\n        assertTrue(finalResult instanceof Result);\n        IPage<?> pageResult = ((IPage<?>) ((Result<?>) finalResult).getResult());\n        assertNotNull(pageResult);\n        List<?> recordsResult = pageResult.getRecords();\n        assertNotNull(recordsResult);\n        assertFalse(recordsResult.isEmpty());\n        assertEquals(1, recordsResult.size());\n        assertTrue(recordsResult.get(0) instanceof JSONObject);\n        JSONObject record = (JSONObject) recordsResult.get(0);\n        assertEquals(\"John Doe\", record.getString(\"name\"));\n    }\n\n    @Test\n    public void testParseDictText_nullResult() {\n        // Pass null to the method\n        Object finalResult = dictAspect.parseDictText(null);\n\n        // Assert that the null input leads to null output\n        assertNull(finalResult);\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Cleaning up resources\n        dictAspect = null;\n    }\n}",
        "package org.jeecg.common.aspect;\n\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DictAspectTest {\n\n    private DictAspect dictAspect;\n\n    @Mock\n    private ObjectMapper objectMapper;\n\n    @Mock\n    private CommonAPI commonApi;\n\n    @Mock\n    private IPage<Object> iPage;\n\n    @Mock\n    private RedisTemplate<String, String> redisTemplate;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.initMocks(this);\n        dictAspect = new DictAspect();\n        dictAspect.commonApi = commonApi;\n        dictAspect.objectMapper = objectMapper;\n        dictAspect.redisTemplate = redisTemplate;\n    }\n\n    @Test\n    public void parseDictTextTest() {\n        try {\n            Result<?> mockResult = new Result<>();\n            List<Object> mockRecords = new ArrayList<>();\n            JSONObject mockRecord = new JSONObject();\n            // Assuming \"status\" is a field with Dict annotation in the record class\n            mockRecord.put(\"status\", \"1\");\n            mockRecords.add(mockRecord);\n\n            when(iPage.getRecords()).thenReturn(mockRecords);\n            mockResult.setResult(iPage);\n\n            String jsonString = mockRecord.toJSONString();\n            when(objectMapper.writeValueAsString(any(Object.class))).thenReturn(jsonString);\n\n            DictModel mockDictModel = new DictModel(\"1\", \"Active\");\n            List<DictModel> mockDictModels = new ArrayList<>();\n            mockDictModels.add(mockDictModel);\n\n            when(commonApi.translateManyDict(anyString(), anyString())).thenReturn(mockDictModels);\n\n            Object result = dictAspect.parseDictText(mockResult);\n\n            JSONObject jsonResult = ((IPage) ((Result) result).getResult()).getRecords().get(0);\n            assertEquals(\"Active\", jsonResult.getString(\"status_dictText\"));\n        } catch (Exception e) {\n            fail(\"Caught exception during parseDictTextTest: \" + e.getMessage());\n        }\n    }\n}",
        "package org.jeecg.common.aspect;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport org.jeecg.common.api.vo.Result;\nimport org.jeecg.common.system.vo.DictModel;\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport java.lang.reflect.Field;\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n\npublic class DictAspectTest {\n\n    @Mock\n    private CommonAPI commonApi;\n\n    @Mock\n    private RedisTemplate<String, Object> redisTemplate;\n\n    @InjectMocks\n    private DictAspect dictAspect;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void parseDictTextTest() {\n        // Mock the dependencies's behavior\n        when(commonApi.translateManyDict(any(String.class), any(String.class)))\n                .thenReturn(new HashMap<>());\n        when(redisTemplate.hasKey(any(String.class)))\n                .thenReturn(false); // Here you should specify the expected behavior depending on your test\n\n        // Arrange: Create a Result object with an IPage containing dummy data that should be converted by the parseDictText method.\n        Result<IPage> result = new Result<>();\n        result.setResult(Mockito.mock(IPage.class)); // Replace with actual mocked IPage containing records that have fields annotated with @Dict\n        when(result.getResult().getRecords()).thenReturn(Collections.singletonList(new DummyRecordWithDict())); // DummyRecordWithDict should be replaced with an actual test object containing @Dict annotations\n\n        // Add @Dict annotation to the dummy field\n        Field fieldWithDict = DummyRecordWithDict.class.getDeclaredField(\"dummyField\");\n        fieldWithDict.setAccessible(true);\n        Dict annotation = Mockito.mock(Dict.class);\n        when(annotation.dicCode()).thenReturn(\"dummyCode\");\n        when(fieldWithDict.getAnnotation(Dict.class)).thenReturn(annotation);\n\n        // Act: Execute the method to be tested\n        Object modifiedResult = dictAspect.parseDictText(result);\n\n        // Assert: Check whether the annotations and mocking behaved as expected and if the method's functionality is correct\n        assertTrue(modifiedResult instanceof Result);\n\n        // The following assert should be adapted to fit the expected result format\n        // For example, check if the dict text was properly added to the `items` and if the `records` were updated in the `IPage`\n        // You should replace `expectedValue` with the actual expected value based on your dummy data and mocked behavior\n        JSONObject expectedJson = new JSONObject();\n        expectedJson.put(\"dummyField\" + CommonConstant.DICT_TEXT_SUFFIX, \"expectedValue\");\n        assertEquals(expectedJson, ((Result) modifiedResult).getResult().getRecords().get(0));\n    }\n    \n    // Dummy class to represent a record that would normally be passed to the parseDictText method\n    // This class needs to be replaced with a meaningful class corresponding to your actual implementation\n    static class DummyRecordWithDict {\n        @Dict(dicCode = \"dummyCode\")\n        private String dummyField = \"dummyFieldValue\";\n        // Getters and setters\n    }\n}",
        "package org.jeecg.common.aspect;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.jeecg.common.api.CommonAPI;\nimport org.jeecg.common.api.vo.Result;\nimport org.jeecg.modules.system.entity.SysUser;\nimport org.junit.runner.RunWith;\nimport org.mockito.junit.MockitoJUnitRunner;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class DictAspectTest {\n\n    @Mock\n    private CommonAPI commonApi;\n    @Mock\n    private RedisTemplate redisTemplate;\n    @Mock\n    private ObjectMapper objectMapper;\n    @InjectMocks\n    private DictAspect dictAspect;\n\n    @Test\n    public void parseDictTextTest() throws Exception {\n        Result<IPage> mockResult = mock(Result.class);\n        IPage mockPage = mock(IPage.class);\n        List<SysUser> recordsList = new ArrayList<>();\n        SysUser user = new SysUser();\n        user.setSex(\"1\");\n        recordsList.add(user);\n        \n        when(mockResult.getResult()).thenReturn(mockPage);\n        when(mockPage.getRecords()).thenReturn(recordsList);\n        \n        Object resultPassedToParseDictText = mockResult;\n\n        String json = \"{\\\"sex\\\":\\\"1\\\"}\";\n        when(objectMapper.writeValueAsString(any(SysUser.class))).thenReturn(json);\n        \n        // Assuming translateAllDict and other methods to be mocked accordingly\n        \n        Object finalResult = dictAspect.parseDictText(resultPassedToParseDictText);\n        \n        // Verify that returned object is the same as what we passed in\n        assertSame(mockResult, finalResult);\n        \n        // Additional assertions and verifications can be added here\n    }\n}",
        "package org.jeecg.common.aspect;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport org.jeecg.common.api.vo.Result;\nimport org.jeecg.common.system.vo.DictModel;\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class DictAspectTest {\n    \n    @InjectMocks\n    private DictAspect dictAspect;\n\n    @Mock\n    private CommonAPI commonApi;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void parseDictTextTest() {\n        // Given\n        IPage pageMock = mock(IPage.class);\n        List<Object> records = new ArrayList<>();\n        records.add(new MockRecord()); // MockRecord should be a mock object with a Dict annotation\n        \n        Result<IPage> result = new Result<>();\n        result.setResult(pageMock);\n        \n        when(pageMock.getRecords()).thenReturn(records);\n        when(commonApi.translateDict(anyString(), anyString())).thenReturn(\"Mock Text\");\n        \n        // When\n        Object actualResult = dictAspect.parseDictText(result);\n        \n        // Then\n        assertNotNull(actualResult, \"The result should not be null.\");\n        Result<?> actualResultCasted = (Result<?>) actualResult;\n        assertTrue(actualResultCasted.getResult() instanceof IPage);\n\n        List<?> actualRecords = ((IPage) actualResultCasted.getResult()).getRecords();\n        assertFalse(actualRecords.isEmpty(), \"The records list should not be empty.\");\n        \n        JSONObject actualRecord = (JSONObject) actualRecords.get(0);\n        assertNotNull(actualRecord.getString(\"mockField_dictText\"), \"The dictionary text should have been added to the field.\");\n        assertEquals(\"Mock Text\", actualRecord.getString(\"mockField_dictText\"), \"The dictionary text should match the mock response.\");\n    }\n    \n    // Replace with an actual class that is used in your application with Dict annotations\n    private static class MockRecord {\n        @Dict(dicCode = \"mock_dict_code\")\n        private String mockField;\n        \n        // Getter and setter for mockField\n        public String getMockField() {\n            return mockField;\n        }\n\n        public void setMockField(String mockField) {\n            this.mockField = mockField;\n        }\n    }\n}",
        "package org.jeecg.common.aspect;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport static org.mockito.Mockito.*;\n\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.jeecg.common.api.CommonAPI;\nimport org.jeecg.common.api.vo.Result;\nimport org.jeecg.common.system.vo.DictModel;\nimport org.junit.runner.RunWith;\nimport org.mockito.junit.MockitoJUnitRunner;\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class DictAspectTest {\n    \n    @InjectMocks\n    private DictAspect dictAspect;\n    \n    @Mock\n    private CommonAPI commonApi;\n    \n    @Mock\n    private RedisTemplate<String, Object> redisTemplate;\n    \n    @Mock\n    private ObjectMapper objectMapper;\n    \n    @BeforeEach\n    public void setUp() {\n        // Initialize any necessary setup here, e.g. mocked commonApi return values, etc.\n    }\n    \n    @Test\n    public void parseDictTextTest() {\n        // Assuming we have predefined a Result<IPage> instance with appropriate mocks\n        Result<IPage> inputResult = mock(Result.class);\n        IPage page = mock(IPage.class);\n        \n        // Use when().thenReturn() to provide mock behaviors\n        \n        List<Object> records = new ArrayList<>(); // Replace with actual mocked records if needed\n        when(inputResult.getResult()).thenReturn(page);\n        when(page.getRecords()).thenReturn(records);\n\n        // Assuming the tested method uses a mocked commonApi method translateAllDict\n        when(commonApi.translateAllDict(any(Map.class)))\n            .thenReturn(Collections.singletonMap(\"dicCode\", Collections.singletonList(new DictModel(\"1\", \"One\"))));\n\n        \n        Object result = dictAspect.parseDictText(inputResult);\n        \n        // Assumptions and Assertions\n        // ...\n\n        assertNotNull(result, \"The result should not be null.\");\n        assertTrue(result instanceof Result, \"The result should be an instance of Result.\");\n\n        // Assume there would be additional checks on the modified content of 'result'\n        // depending on how 'parseDictText' transforms the input 'Result'\n        // ...\n\n        // This part needs to be filled with actual test cases related to the specific implementation scenarios\n    }\n    \n    @AfterEach\n    public void tearDown() {\n        // Perform any necessary cleanup after tests are run, if needed\n    }\n}",
        "package org.jeecg.common.aspect;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport org.jeecg.common.api.vo.Result;\n\nimport java.util.*;\n\npublic class DictAspectTest {\n\n    private DictAspect dictAspect;\n    private CommonAPI commonApiMock;\n\n    @BeforeEach\n    public void setUp() {\n        dictAspect = new DictAspect();\n        commonApiMock = Mockito.mock(CommonAPI.class);\n        dictAspect.commonApi = commonApiMock;\n    }\n\n    @Test\n    public void parseDictTextTest() {\n        // Mock IPage\n        IPage pageMock = Mockito.mock(IPage.class);\n        List<Object> records = new ArrayList<>();\n\n        // Create a sample record with a \"Dict\" annotation\n        Map<String, Object> record = new HashMap<>();\n        record.put(\"status\", \"1\"); // Assume \"1\" indicates active status\n\n        records.add(record);\n        when(pageMock.getRecords()).thenReturn(records);\n\n        // Mock the Result object\n        Result<IPage> result = new Result<>();\n        result.setResult(pageMock);\n\n        // Mock the common API translate method \n        when(commonApiMock.translateDict(\"status\", \"1\")).thenReturn(\"Active\");\n\n        // Prepare the expected JSONObject after dict translation\n        JSONObject expectedItem = new JSONObject();\n        expectedItem.put(\"status\", \"1\");\n        expectedItem.put(\"status_dictText\", \"Active\"); // Assume the suffix is \"_dictText\"\n\n        // Invoke the method to test\n        Result actualResult = (Result) dictAspect.parseDictText(result);\n\n        // Verify the records\n        assertNotNull(actualResult);\n        assertTrue(actualResult.getResult() instanceof IPage);\n        IPage actualPage = (IPage) actualResult.getResult();\n        assertNotNull(actualPage.getRecords());\n        assertFalse(actualPage.getRecords().isEmpty());\n        assertEquals(expectedItem.toJSONString(), actualPage.getRecords().get(0).toString());\n    }\n\n    // Additional clean up if necessary\n    @AfterEach\n    public void tearDown() {\n        // Cleanup resources if needed\n    }\n}"
    ]
}