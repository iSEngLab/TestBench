Source code: 


public Map<String, SelectSqlInfo> parse() throws JSQLParserException {
    // 1. 创建解析器
    CCJSqlParserManager mgr = new CCJSqlParserManager();
    // 2. 使用解析器解析sql生成具有层次结构的java类
    Statement stmt = mgr.parse(new StringReader(this.sql));
    if (stmt instanceof Select) {
        Select selectStatement = (Select) stmt;
        SelectBody selectBody = selectStatement.getSelectBody();
        this.parsedSql = selectBody.toString();
        // 3. 解析select查询sql的信息
        if (selectBody instanceof PlainSelect) {
            PlainSelect plainSelect = (PlainSelect) selectBody;
            // 4. 合并 fromItems
            List<FromItem> fromItems = new ArrayList<>();
            fromItems.add(plainSelect.getFromItem());
            // 4.1 处理join的表
            List<Join> joins = plainSelect.getJoins();
            if (joins != null) {
                joins.forEach(join -> fromItems.add(join.getRightItem()));
            }
            // 5. 处理 fromItems
            for (FromItem fromItem : fromItems) {
                // 5.1 通过表名的方式from
                if (fromItem instanceof Table) {
                    this.addSqlInfoByTable((Table) fromItem);
                }
                // 5.2 通过子查询的方式from
                else if (fromItem instanceof SubSelect) {
                    this.handleSubSelect((SubSelect) fromItem);
                }
            }
            // 6. 解析 selectFields
            List<SelectItem> selectItems = plainSelect.getSelectItems();
            for (SelectItem selectItem : selectItems) {
                // 6.1 查询的是全部字段
                if (selectItem instanceof AllColumns) {
                    // 当 selectItem 为 AllColumns 时，fromItem 必定为 Table
                    String tableName = plainSelect.getFromItem(Table.class).getName();
                    // 此处必定不为空，因为在解析 fromItem 时，已经将表名添加到 allTableMap 中
                    SelectSqlInfo sqlInfo = this.allTableMap.get(tableName);
                    assert sqlInfo != null;
                    // 设置为查询全部字段
                    sqlInfo.setSelectAll(true);
                    sqlInfo.setSelectFields(null);
                    sqlInfo.setRealSelectFields(null);
                }
                // 6.2 查询的是带表别名（ u.* )的全部字段
                else if (selectItem instanceof AllTableColumns) {
                    AllTableColumns allTableColumns = (AllTableColumns) selectItem;
                    String aliasName = allTableColumns.getTable().getName();
                    // 通过别名获取表名
                    String tableName = this.tableAliasMap.get(aliasName);
                    if (tableName == null) {
                        tableName = aliasName;
                    }
                    SelectSqlInfo sqlInfo = this.allTableMap.get(tableName);
                    // 如果此处为空，则说明该字段是通过子查询获取的，所以可以不处理，只有实际表才需要处理
                    if (sqlInfo != null) {
                        // 设置为查询全部字段
                        sqlInfo.setSelectAll(true);
                        sqlInfo.setSelectFields(null);
                        sqlInfo.setRealSelectFields(null);
                    }
                }
                // 6.3 各种字段表达式处理
                else if (selectItem instanceof SelectExpressionItem) {
                    SelectExpressionItem selectExpressionItem = (SelectExpressionItem) selectItem;
                    Expression expression = selectExpressionItem.getExpression();
                    Alias alias = selectExpressionItem.getAlias();
                    this.handleExpression(expression, alias, plainSelect.getFromItem());
                }
            }
        } else {
            log.warn("暂时尚未处理该类型的 SelectBody: {}", selectBody.getClass().getName());
            throw new JeecgBootException("暂时尚未处理该类型的 SelectBody");
        }
    } else {
        // 非 select 查询sql，不做处理
        throw new JeecgBootException("非 select 查询sql，不做处理");
    }
    return this.allTableMap;
}



No.1 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import net.sf.jsqlparser.JSQLParserException;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class JSqlParserAllTableManagerTest {

    @Test
    public void parseTest() {
        // Setup the SQL string to test.
        String sql = "SELECT a.field1, b.field2 FROM table1 a JOIN table2 b ON a.id=b.fk_id";
        
        // Create an instance of the JSqlParserAllTableManager with the SQL string.
        JSqlParserAllTableManager manager = new JSqlParserAllTableManager(sql);
        
        try {
            // Execute the parse method.
            Map<String, SelectSqlInfo> result = manager.parse();
            
            // Assertions to ensure the parsing is as expected.
            assertNotNull(result, "Resulting map should not be null.");
            
            // Assert the presence of the expected tables within the parsing result.
            assertTrue(result.containsKey("table1"), "Map should contain an entry for table1.");
            assertTrue(result.containsKey("table2"), "Map should contain an entry for table2.");
            
            // Additional assertions could check more detailed aspects such as selected fields,
            // table aliases, joins, etc. Mocking may be required to test private and internal
            // method calls and behaviors.

        } catch (JSQLParserException e) {
            // Catching the JSQLParserException to fail the test in case of parsing error.
            fail("Parsing failed with the exception: " + e.getMessage());
        } catch (JeecgBootException e) {
            // Catching the custom exception to handle known parse failure scenarios.
            // Additional assertions based on the expected behavior when an exception is thrown.
            fail("Custom exception occurred: " + e.getMessage());
        }
    }

    // Additional tests can be written to check different parts of the SQL parsing logic.
    // For example, handling sub-selects, expressions, aliases, and more complex SQL structures.

    // ...

}


No.2 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.statement.select.Select;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class JSqlParserAllTableManagerTest {
    
    private JSqlParserAllTableManager manager;

    @BeforeEach
    public void setUp() {
        // Setup code if needed, assuming passing SQL is part of the constructor
        manager = new JSqlParserAllTableManager("SELECT * FROM table_name");
    }

    @Test
    public void parseTest() {
        // Assuming the SQL query is correct and parse() is expected to run without exceptions
        assertDoesNotThrow(() -> {
            Map<String, SelectSqlInfo> result = manager.parse();
            assertNotNull(result);
            assertFalse(result.isEmpty());
            // Specific test assertions should be added here based on assumptions
            // about the input SQL and expected parse results. For example:
            SelectSqlInfo info = result.get("table_name");
            assertNotNull(info);
            assertTrue(info.isSelectAll());
            assertNull(info.getSelectFields());
            assertNull(info.getRealSelectFields());
        });

        // To test the exception handling, if needed
        JSqlParserAllTableManager managerWithBadSql = new JSqlParserAllTableManager("BAD SQL");
        assertThrows(JSQLParserException.class, managerWithBadSql::parse);
    }
}


No.3 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.parser.CCJSqlParserManager;
import net.sf.jsqlparser.statement.select.Select;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class JSqlParserAllTableManagerTest {

    @Test
    public void parseTest() throws JSQLParserException {
        // given
        String selectSql = "SELECT * FROM users";
        JSqlParserAllTableManager parserManager = new JSqlParserAllTableManager(selectSql);

        // when
        Map<String, SelectSqlInfo> result = parserManager.parse();

        // then
        assertNotNull(result);
        assertEquals(1, result.size());
        assertTrue(result.containsKey("users"));
        
        SelectSqlInfo selectSqlInfo = result.get("users");
        assertNotNull(selectSqlInfo);
        assertTrue(selectSqlInfo.isSelectAll());
        assertNull(selectSqlInfo.getSelectFields());
        assertNull(selectSqlInfo.getRealSelectFields());
    }
}


No.4 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import net.sf.jsqlparser.JSQLParserException;
import java.util.Map;

public class JSqlParserAllTableManagerTest {

    private JSqlParserAllTableManager manager;

    @BeforeEach
    public void setUp() {
        // This would typically be set to a valid SQL select statement for the test
        String sql = "SELECT * FROM users";
        manager = new JSqlParserAllTableManager(sql);
    }

    @Test
    public void parseTest() throws JSQLParserException {
        // Given
        String expectedTableName = "users";
        boolean expectedSelectAll = true;

        // When
        Map<String, SelectSqlInfo> result = manager.parse();

        // Then
        assertTrue(result.containsKey(expectedTableName), "Result should contain the table name.");
        SelectSqlInfo selectSqlInfo = result.get(expectedTableName);

        assertNotNull(selectSqlInfo, "SelectSqlInfo should not be null for the expected table.");
        assertEquals(expectedSelectAll, selectSqlInfo.isSelectAll(), "SelectAll should be true, as the SQL contains 'SELECT *'.");

        // Additional assertions could be added to verify more details
        // depending on the implementation details of SelectSqlInfo and the SQL given
        // For example, if the SQL had WHERE conditions, JOINs, GROUP BYs, specific columns selected, etc.
    }
}


No.5 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import net.sf.jsqlparser.JSQLParserException;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Map;

public class JSqlParserAllTableManagerTest {

    @Test
    public void parseTest() {
        // Given
        String selectSql = "SELECT * FROM users";
        JSqlParserAllTableManager manager = new JSqlParserAllTableManager(selectSql);

        // When
        Map<String, SelectSqlInfo> result = null;
        try {
            result = manager.parse();
        } catch (JSQLParserException e) {
            fail("Parsing failed with JSQLParserException: " + e.getMessage());
        }

        // Then
        assertNotNull(result, "The result map should not be null");
        assertTrue(result.containsKey("users"), "The result map should contain key 'users'");
        
        SelectSqlInfo selectSqlInfo = result.get("users");
        assertNotNull(selectSqlInfo, "SelectSqlInfo for 'users' should not be null");
        assertTrue(selectSqlInfo.isSelectAll(), "'selectAll' should be true for 'users'");
        assertNull(selectSqlInfo.getSelectFields(), "'selectFields' should be null when 'selectAll' is true");
        assertNull(selectSqlInfo.getRealSelectFields(), "'realSelectFields' should be null when 'selectAll' is true");

        // Optionally, more assertions can be added to test other aspects of the parsed SQL such as alias handling, subselects, expression handling, etc.
    }
}


No.6 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.parser.CCJSqlParserManager;
import net.sf.jsqlparser.statement.select.Select;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class JSqlParserAllTableManagerTest {

    @Test
    public void parseTest() {
        String sampleSql = "SELECT * FROM my_table";
        JSqlParserAllTableManager parser = new JSqlParserAllTableManager(sampleSql);
        try {
            Map<String, SelectSqlInfo> result = parser.parse();
            assertNotNull(result, "The result should not be null.");
            assertFalse(result.isEmpty(), "The result map should not be empty.");

            // Assertions depend on the implementation of the `addSqlInfoByTable` method
            // and other parser methods which are not present in the provided context.
            // These lines below are placeholders and should be adapted accordingly.
            assertTrue(result.containsKey("my_table"), "The result map should contain an entry for 'my_table'.");
            SelectSqlInfo info = result.get("my_table");
            assertNotNull(info, "SelectSqlInfo for 'my_table' should not be null.");
            assertTrue(info.isSelectAll(), "'my_table' should have selectAll set to true.");

        } catch (JSQLParserException e) {
            fail("Parsing failed with an exception: " + e.getMessage());
        }
    }
}


No.7 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.expression.Alias;
import net.sf.jsqlparser.parser.CCJSqlParserManager;
import net.sf.jsqlparser.schema.Table;
import net.sf.jsqlparser.statement.Statement;
import net.sf.jsqlparser.statement.select.PlainSelect;
import net.sf.jsqlparser.statement.select.Select;
import net.sf.jsqlparser.statement.select.SelectBody;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.StringReader;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class JSqlParserAllTableManagerTest {

    @InjectMocks
    private JSqlParserAllTableManager jSqlParserAllTableManager;

    @Mock
    private CCJSqlParserManager mgr;

    private final String testSql = "SELECT * FROM my_table";

    @BeforeEach
    public void setUp() throws JSQLParserException {
        MockitoAnnotations.openMocks(this);
        Statement selectStatement = new Select();
        SelectBody selectBody = new PlainSelect();
        ((Select) selectStatement).setSelectBody(selectBody);

        when(mgr.parse(new StringReader(testSql))).thenReturn(selectStatement);
        jSqlParserAllTableManager = new JSqlParserAllTableManager(testSql);
    }

    @Test
    public void parseTest() throws JSQLParserException {
        // Given an SQL query string
        String inputSql = testSql;
        Map<String, SelectSqlInfo> expectedResult = Map.of("my_table", new SelectSqlInfo());

        // Mock the behavior of the method (assume there are methods for mapping)
        doNothing().when(jSqlParserAllTableManager).addSqlInfoByTable(any(Table.class));

        // When the parse method is invoked
        Map<String, SelectSqlInfo> actualResult = jSqlParserAllTableManager.parse();

        // Then verify it produces the expected output
        assertNotNull(actualResult, "The parsing result should not be null");
        assertFalse(actualResult.isEmpty(), "The parsing result should not be empty");
        assertEquals(expectedResult.size(), actualResult.size(), "The parsing result size should match the expected result size");

        // Additional detailed checks can be done on 'actualResult' if necessary
    }
}


No.8 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.expression.Alias;
import net.sf.jsqlparser.expression.Expression;
import net.sf.jsqlparser.schema.Table;
import net.sf.jsqlparser.statement.select.SubSelect;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class JSqlParserAllTableManagerTest {
    
    private JSqlParserAllTableManager parser;
    private final String sampleSql = "SELECT * FROM myTable";

    @BeforeEach
    public void setup() {
        parser = new JSqlParserAllTableManager(sampleSql);
    }

    @Test
    public void parseTest() throws JSQLParserException {
        Map<String, SelectSqlInfo> result = parser.parse();
        assertNotNull(result, "The result should not be null.");
        
        // Check if 'myTable' is present in the allTableMap after parse.
        assertTrue(result.containsKey("myTable"), "'myTable' should be present in allTableMap.");
        
        // Get the SelectSqlInfo for 'myTable'
        SelectSqlInfo selectSqlInfo = result.get("myTable");
        assertNotNull(selectSqlInfo, "SelectSqlInfo for 'myTable' should not be null.");
        
        // Since the SQL query is "SELECT * FROM myTable", we expect selectAll to be true.
        assertTrue(selectSqlInfo.isSelectAll(), "The 'selectAll' flag should be true for 'myTable'.");
        
        // Expecting that no specific select fields are set, due to "SELECT *"
        assertNull(selectSqlInfo.getSelectFields(), "The 'selectFields' should be null for 'myTable'.");
        assertNull(selectSqlInfo.getRealSelectFields(), "The 'realSelectFields' should be null for 'myTable'.");
    }
}


No.9 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import net.sf.jsqlparser.JSQLParserException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.AfterEach;

import static org.junit.jupiter.api.Assertions.*;

public class JSqlParserAllTableManagerTest {
    private JSqlParserAllTableManager parserManager;

    @BeforeEach
    public void setUp() {
        String testSql = "SELECT * FROM table_name";
        parserManager = new JSqlParserAllTableManager(testSql);
    }

    @Test
    public void parseTest() {
        // Expected outcomes
        String expectedTableName = "table_name";

        try {
            Map<String, SelectSqlInfo> result = parserManager.parse();
            assertNotNull(result, "The result map should not be null");

            // Check if the table is correctly parsed
            assertTrue(result.containsKey(expectedTableName), "The result map should contain the expected table name");

            // Perform additional checks, such as validating the properties of the SelectSqlInfo object
            SelectSqlInfo selectSqlInfo = result.get(expectedTableName);
            assertNotNull(selectSqlInfo, "The SelectSqlInfo object for the expected table name should not be null");
            assertTrue(selectSqlInfo.isSelectAll(), "The select all field should be true");

        } catch (JSQLParserException e) {
            fail("Parsing should not throw an exception");
        }
    }

    @AfterEach
    public void tearDown() {
        parserManager = null;
    }
}


No.10 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import org.junit.jupiter.api.*;
import net.sf.jsqlparser.JSQLParserException;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

public class JSqlParserAllTableManagerTest {
    
    private JSqlParserAllTableManager manager;
    private static final String VALID_SELECT_SQL = "SELECT * FROM my_table";
    private static final String INVALID_SELECT_SQL = "This is not a valid SQL";

    @BeforeEach
    public void setUp() {
        manager = new JSqlParserAllTableManager(VALID_SELECT_SQL);
    }

    @Test
    public void parseValidSelectSqlTest() {
        assertDoesNotThrow(() -> {
            Map<String, SelectSqlInfo> result = manager.parse();
            assertNotNull(result, "Resulting Map should not be null.");
            assertFalse(result.isEmpty(), "Resulting Map should not be empty.");
            assertTrue(result.containsKey("my_table"), "Resulting Map should have 'my_table' as a key.");
        });
    }

    @Test
    public void parseInvalidSelectSqlTest() {
        manager = new JSqlParserAllTableManager(INVALID_SELECT_SQL);
        assertThrows(JSQLParserException.class, () -> manager.parse(),
                     "Parsing an invalid SQL should throw a JSQLParserException.");
    }
}


