Source code: 


public Map<String, SelectSqlInfo> parse() throws JSQLParserException {
    // 1. 创建解析器
    CCJSqlParserManager mgr = new CCJSqlParserManager();
    // 2. 使用解析器解析sql生成具有层次结构的java类
    Statement stmt = mgr.parse(new StringReader(this.sql));
    if (stmt instanceof Select) {
        Select selectStatement = (Select) stmt;
        SelectBody selectBody = selectStatement.getSelectBody();
        this.parsedSql = selectBody.toString();
        // 3. 解析select查询sql的信息
        if (selectBody instanceof PlainSelect) {
            PlainSelect plainSelect = (PlainSelect) selectBody;
            // 4. 合并 fromItems
            List<FromItem> fromItems = new ArrayList<>();
            fromItems.add(plainSelect.getFromItem());
            // 4.1 处理join的表
            List<Join> joins = plainSelect.getJoins();
            if (joins != null) {
                joins.forEach(join -> fromItems.add(join.getRightItem()));
            }
            // 5. 处理 fromItems
            for (FromItem fromItem : fromItems) {
                // 5.1 通过表名的方式from
                if (fromItem instanceof Table) {
                    this.addSqlInfoByTable((Table) fromItem);
                }
                // 5.2 通过子查询的方式from
                else if (fromItem instanceof SubSelect) {
                    this.handleSubSelect((SubSelect) fromItem);
                }
            }
            // 6. 解析 selectFields
            List<SelectItem> selectItems = plainSelect.getSelectItems();
            for (SelectItem selectItem : selectItems) {
                // 6.1 查询的是全部字段
                if (selectItem instanceof AllColumns) {
                    // 当 selectItem 为 AllColumns 时，fromItem 必定为 Table
                    String tableName = plainSelect.getFromItem(Table.class).getName();
                    // 此处必定不为空，因为在解析 fromItem 时，已经将表名添加到 allTableMap 中
                    SelectSqlInfo sqlInfo = this.allTableMap.get(tableName);
                    assert sqlInfo != null;
                    // 设置为查询全部字段
                    sqlInfo.setSelectAll(true);
                    sqlInfo.setSelectFields(null);
                    sqlInfo.setRealSelectFields(null);
                }
                // 6.2 查询的是带表别名（ u.* )的全部字段
                else if (selectItem instanceof AllTableColumns) {
                    AllTableColumns allTableColumns = (AllTableColumns) selectItem;
                    String aliasName = allTableColumns.getTable().getName();
                    // 通过别名获取表名
                    String tableName = this.tableAliasMap.get(aliasName);
                    if (tableName == null) {
                        tableName = aliasName;
                    }
                    SelectSqlInfo sqlInfo = this.allTableMap.get(tableName);
                    // 如果此处为空，则说明该字段是通过子查询获取的，所以可以不处理，只有实际表才需要处理
                    if (sqlInfo != null) {
                        // 设置为查询全部字段
                        sqlInfo.setSelectAll(true);
                        sqlInfo.setSelectFields(null);
                        sqlInfo.setRealSelectFields(null);
                    }
                }
                // 6.3 各种字段表达式处理
                else if (selectItem instanceof SelectExpressionItem) {
                    SelectExpressionItem selectExpressionItem = (SelectExpressionItem) selectItem;
                    Expression expression = selectExpressionItem.getExpression();
                    Alias alias = selectExpressionItem.getAlias();
                    this.handleExpression(expression, alias, plainSelect.getFromItem());
                }
            }
        } else {
            log.warn("暂时尚未处理该类型的 SelectBody: {}", selectBody.getClass().getName());
            throw new JeecgBootException("暂时尚未处理该类型的 SelectBody");
        }
    } else {
        // 非 select 查询sql，不做处理
        throw new JeecgBootException("非 select 查询sql，不做处理");
    }
    return this.allTableMap;
}



No.1 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import org.junit.jupiter.api.*;
import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.statement.select.Select;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

public class JSqlParserAllTableManagerTest {

    @Test
    public void parseTest() throws JSQLParserException {
        // Given
        JSqlParserAllTableManager manager = new JSqlParserAllTableManager("SELECT * FROM my_table");
        
        // When
        Map<String, SelectSqlInfo> result = manager.parse();
        
        // Then
        assertNotNull(result, "The result should not be null");
        assertTrue(result.containsKey("my_table"), "The result should contain key 'my_table'");
        
        SelectSqlInfo selectSqlInfo = result.get("my_table");
        assertNotNull(selectSqlInfo, "The selectSqlInfo should not be null");
        assertTrue(selectSqlInfo.isSelectAll(), "The selectSqlInfo should indicate selection of all columns");
        assertNull(selectSqlInfo.getSelectFields(), "The selectFields should be null when selecting all columns");
        assertNull(selectSqlInfo.getRealSelectFields(), "The realSelectFields should be null when selecting all columns");
        
        // Add additional assertions as needed to test various parts of the parse method
    }
}


No.2 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import org.junit.jupiter.api.*;
import net.sf.jsqlparser.JSQLParserException;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

public class JSqlParserAllTableManagerTest {
    private JSqlParserAllTableManager manager;

    @BeforeEach
    public void setUp() {
        manager = new JSqlParserAllTableManager();
        // Assuming there is a method in JSqlParserAllTableManager to set the SQL
        manager.setSql("SELECT * FROM my_table");
    }

    @Test
    public void parseTest() throws JSQLParserException {
        Map<String, SelectSqlInfo> sqlInfoMap = manager.parse();

        assertNotNull(sqlInfoMap, "The result of parse method should not be null.");
        assertTrue(sqlInfoMap.containsKey("my_table"), "The map should contain a key for 'my_table'.");

        SelectSqlInfo selectSqlInfo = sqlInfoMap.get("my_table");
        assertNotNull(selectSqlInfo, "SelectSqlInfo for 'my_table' should not be null.");
        assertTrue(selectSqlInfo.isSelectAll(), "SelectSqlInfo should be set to select all fields.");
        assertNull(selectSqlInfo.getSelectFields(), "SelectFields should be null when selecting all fields.");
        assertNull(selectSqlInfo.getRealSelectFields(), "RealSelectFields should be null when selecting all fields.");
    }

    @AfterEach
    public void tearDown() {
        // clean up after test if needed
    }
}


No.3 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.statement.Statement;
import net.sf.jsqlparser.statement.select.Select;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Map;

public class JSqlParserAllTableManagerTest {

    private JSqlParserAllTableManager instance;

    @BeforeEach
    public void setUp() {
        String sql = "SELECT * FROM my_table";
        instance = new JSqlParserAllTableManager(sql);
    }

    @Test
    public void parseTest() {
        try {
            Map<String, SelectSqlInfo> result = instance.parse();
            assertNotNull(result, "The result map should not be null.");
            assertFalse(result.isEmpty(), "The result map should not be empty.");

            SelectSqlInfo info = result.get("my_table");
            assertNotNull(info, "SelectSqlInfo for 'my_table' should not be null.");
            assertTrue(info.isSelectAll(), "SelectSqlInfo isSelectAll should return true when selecting with *.");
            assertNull(info.getSelectFields(), "SelectSqlInfo getSelectFields should be null when selecting with *.");
            assertNull(info.getRealSelectFields(), "SelectSqlInfo getRealSelectFields should be null when selecting with *.");

        } catch (JSQLParserException e) {
            fail("Parsing threw an unexpected JSQLParserException.");
        }
    }

    // Add additional test methods if necessary...
    
    @AfterEach
    public void tearDown() {
        // Perform any necessary cleanup
    }
}


No.4 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.parser.CCJSqlParserManager;
import net.sf.jsqlparser.statement.Statement;
import net.sf.jsqlparser.statement.select.Select;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

class JSqlParserAllTableManagerTest {

  @Test
  public void parseTest() throws JSQLParserException {
    // Given
    String sampleSql = "SELECT * FROM users";
    JSqlParserAllTableManager manager = new JSqlParserAllTableManager(sampleSql);

    // When
    Map<String, SelectSqlInfo> result = manager.parse();

    // Then
    assertNotNull(result, "The result should not be null.");
    
    // Assuming SelectSqlInfo behaves correctly and there's a way to verify its state:
    SelectSqlInfo usersInfo = result.get("users");
    assertNotNull(usersInfo, "SelectSqlInfo for 'users' should not be null.");
    assertTrue(usersInfo.isSelectAll(), "The SelectSqlInfo should indicate select all is true for the 'users' table.");
  }
}


No.5 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.parser.CCJSqlParserManager;

import java.io.StringReader;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class JSqlParserAllTableManagerTest {

    @Test
    public void parseTest() throws JSQLParserException {
        // Instantiate the class to be tested
        JSqlParserAllTableManager parserAllTableManager = new JSqlParserAllTableManager();

        // Set up the SQL query to be tested
        String sql = "SELECT * FROM my_table";
        parserAllTableManager.sql = sql;

        // Mock the CCJSqlParserManager and its behavior
        CCJSqlParserManager manager = mock(CCJSqlParserManager.class);
        when(manager.parse(new StringReader(sql))).thenReturn(new Select()); // Assume we're getting a Select object back

        // Inject the mocked manager into the class via reflection or some setter method if available
        // Use reflection to set the private field 'mgr' with the mocked 'manager'
        Field parserManagerField = JSqlParserAllTableManager.class.getDeclaredField("mgr");
        parserManagerField.setAccessible(true);
        parserManagerField.set(parserAllTableManager, manager);

        // Perform the actual test
        Map<String, SelectSqlInfo> result = parserAllTableManager.parse();

        // Assertions
        assertNotNull(result, "Result map should not be null");
        assertTrue(result.containsKey("my_table"), "Result map should contain key 'my_table' for the from table");

        // Verify that the manager's 'parse' method was called with the correct SQL reader
        verify(manager).parse(new StringReader(sql));
    }
}


No.6 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import net.sf.jsqlparser.JSQLParserException;
import java.util.Map;

public class JSqlParserAllTableManagerTest {
    
    private JSqlParserAllTableManager manager;

    @BeforeEach
    public void setUp() {
        String sql = "SELECT * FROM my_table";
        manager = new JSqlParserAllTableManager(sql);
    }

    @Test
    public void parseTest() {
        try {
            Map<String, SelectSqlInfo> result = manager.parse();
            assertNotNull(result, "The result should not be null");
            
            SelectSqlInfo sqlInfo = result.get("my_table");
            assertNotNull(sqlInfo, "The sqlInfo for 'my_table' should not be null");
            assertTrue(sqlInfo.isSelectAll(), "The 'selectAll' flag for 'my_table' should be true");

            // Additional assertions could be added here based on the expected behavior 
            // of the SelectSqlInfo object and the database schema
            
        } catch (JSQLParserException e) {
            fail("Parsing failed with an exception: " + e.getMessage());
        }
    }
}


No.7 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.statement.Statement;
import net.sf.jsqlparser.statement.select.Select;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Map;
import org.mockito.*;

public class JSqlParserAllTableManagerTest {

    @Test
    public void parseTest() throws JSQLParserException {
        // Given
        String sql = "SELECT * FROM table_name";
        JSqlParserAllTableManager manager = Mockito.mock(JSqlParserAllTableManager.class);
        Mockito.when(manager.parse()).thenCallRealMethod();
        Mockito.doCallRealMethod().when(manager).setSql(Mockito.anyString());
        Mockito.when(manager.getSql()).thenReturn(sql);

        // When
        manager.setSql(sql);
        Map<String, SelectSqlInfo> result = manager.parse();

        // Then
        assertNotNull(result, "The result should not be null.");
        assertTrue(result.containsKey("table_name"), "The result map should have the key 'table_name'.");
        SelectSqlInfo info = result.get("table_name");
        assertNotNull(info, "The SelectSqlInfo for 'table_name' should not be null.");
        assertTrue(info.isSelectAll(), "The SelectSqlInfo should have 'selectAll' as true for '*'.");
    }

    // Additional setup for other helper methods and mock behaviors would be needed
    // depending on the parsing logic within your `JSqlParserAllTableManager` class.
}


No.8 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.parser.CCJSqlParserManager;
import net.sf.jsqlparser.statement.Statement;
import net.sf.jsqlparser.statement.select.Select;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.Mock;

import java.io.StringReader;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class JSqlParserAllTableManagerTest {

    @Mock
    private CCJSqlParserManager mockParserManager;
    
    @Mock
    private Select mockSelect;
    
    // Assuming SelectSqlInfo is a class representing parsed SQL information
    @Mock
    private SelectSqlInfo mockSelectSqlInfo;

    @InjectMocks
    private JSqlParserAllTableManager parserAllTableManager = new JSqlParserAllTableManager();

    @Test
    public void parseTest() throws JSQLParserException {
        // Given
        String sql = "SELECT * FROM my_table";
        parserAllTableManager.sql = sql;
        
        when(mockParserManager.parse(new StringReader(sql))).thenReturn(mockSelect);
        
        // Assumed method structure within JSqlParserAllTableManager
        doNothing().when(parserAllTableManager).addSqlInfoByTable(any());
        doNothing().when(parserAllTableManager).handleSubSelect(any());
        doNothing().when(parserAllTableManager).handleExpression(any(), any(), any());
        when(mockSelect.getSelectBody()).thenReturn(any());
        
        // Assume that allTableMap is properly instantiated within the class
        parserAllTableManager.allTableMap.put("my_table", mockSelectSqlInfo);

        // When
        Map<String, SelectSqlInfo> result = parserAllTableManager.parse();
        
        // Then
        assertNotNull(result, "The result should not be null.");
        assertTrue(result.containsKey("my_table"), "The result map should contain the key for 'my_table'.");
        
        // Verify that the parserManager.parse method was called once with the given SQL Reader
        verify(mockParserManager).parse(any(StringReader.class));
        // Verify that other mocked methods were called as needed
        // Note: The actual verification will depend on the structure and expectations of mocked methods
        // e.g. verify(parserAllTableManager).addSqlInfoByTable(any());
    }
}


No.9 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import org.junit.jupiter.api.*;
import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.parser.CCJSqlParserManager;
import net.sf.jsqlparser.statement.Select;
import net.sf.jsqlparser.statement.Statement;
import static org.junit.jupiter.api.Assertions.*;
import java.io.StringReader;
import java.util.Map;

public class JSqlParserAllTableManagerTest {

    private static final String VALID_SELECT_SQL = "SELECT * FROM table_name";
    // Assuming the 'parse()' method belongs to the class called 'SqlParserManager'.
    private SqlParserManager sqlParserManager;

    @BeforeEach
    public void setup() {
        sqlParserManager = new SqlParserManager();
        // Assuming 'sqlParserManager' requires a SQL string to be set for proper functioning.
        sqlParserManager.setSql(VALID_SELECT_SQL);
    }

    @Test
    public void parseTest() {
        // We will perform the test with a simple SELECT * FROM table_name query
        Map<String, SelectSqlInfo> resultMap = null;
        try {
            resultMap = sqlParserManager.parse();
        } catch (JSQLParserException e) {
            fail("JSQLParserException should not be thrown for a valid SQL");
        }
        
        assertNotNull(resultMap, "The result map should not be null");

        // Assuming 'SelectSqlInfo' contains the details of the parsed SQL.
        SelectSqlInfo selectSqlInfo = resultMap.get("table_name");
        assertNotNull(selectSqlInfo, "There should be SelectSqlInfo for 'table_name'");
        assertTrue(selectSqlInfo.isSelectAll(), "The select should indicate selection of all columns");

        // Add more assertions here based on what the SelectSqlInfo object and other classes provide
        // For the sake of this demonstration, let's assume it is enough to check if select all columns is true
    }
    
    // More tests could be added to check different branches of the parse function such as aliases
    // sub-selects, different types of select items, joins, where conditions, etc.
}


No.10 generated result --------------------------

package org.jeecg.common.util.sqlparse;

import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.parser.CCJSqlParserManager;
import net.sf.jsqlparser.statement.Statement;
import net.sf.jsqlparser.statement.select.PlainSelect;
import net.sf.jsqlparser.statement.select.Select;
import net.sf.jsqlparser.statement.select.SelectBody;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import java.io.StringReader;
import java.util.Map;

public class JSqlParserAllTableManagerTest {

    private JSqlParserAllTableManager manager;
    private String validSelectSql = "SELECT * FROM my_table";
    private String invalidSql = "UPDATE my_table SET column = 'value'";

    @BeforeEach
    public void setUp() {
        manager = new JSqlParserAllTableManager(validSelectSql);
    }
    
    @Test
    public void parseTest_ValidSelect_ShouldPass() throws JSQLParserException {
        Map<String, SelectSqlInfo> result = manager.parse();
        assertNotNull(result);
        assertTrue(result.containsKey("my_table"), "Map should contain key 'my_table'");
        
        // Further assertions can be made depending on the structure of SelectSqlInfo
        // For example:
        SelectSqlInfo info = result.get("my_table");
        assertNotNull(info);
        assertTrue(info.isSelectAll(), "Should indicate selection of all columns");
    }

    @Test
    public void parseTest_InvalidSql_ShouldThrowException() {
        // Set up a manager with invalid SQL
        JSqlParserAllTableManager managerWithInvalidSql = new JSqlParserAllTableManager(invalidSql);
        assertThrows(JeecgBootException.class, managerWithInvalidSql::parse, "Parsing invalid SQL should throw an exception");
    }

    // You can add more tests for different scenarios, such as:
    // - A query with joins
    // - A select with specific columns
    // - Selections with subqueries
    // - Select with alias and table columns
}


