{
    "project_name": "jeecg-boot",
    "file_name": "JdbcSecurityUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/security/JdbcSecurityUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.util.security",
    "docstring": "/**\n     * \u6821\u9a8csql\u662f\u5426\u6709\u7279\u5b9a\u7684key\n     * @param jdbcUrl\n     * @return\n     */",
    "source_code": "\npublic static void validate(String jdbcUrl){\n    if(oConvertUtils.isEmpty(jdbcUrl)){\n        return;\n    }\n    String urlConcatChar = \"?\";\n    if(jdbcUrl.indexOf(urlConcatChar)<0){\n        return;\n    }\n    String argString = jdbcUrl.substring(jdbcUrl.indexOf(urlConcatChar)+1);\n    String[] keyAndValues = argString.split(\"&\");\n    for(String temp: keyAndValues){\n        String key = temp.split(\"=\")[0];\n        for(String prop: notAllowedProps){\n            if(prop.equalsIgnoreCase(key)){\n                throw new JeecgBootException(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010\"+key+\"\u3011\");\n            }\n        }\n    }\n}\n",
    "class_name": "JdbcSecurityUtil",
    "method_name": "validate",
    "arguments": [
        "String jdbcUrl"
    ],
    "generate_test": [
        "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    \n    private static final String[] notAllowedProps = {\"user\", \"password\", \"host\"};\n    // Assuming JeecgBootException is a RuntimeException for simplicity\n    private static class JeecgBootException extends RuntimeException {\n        public JeecgBootException(String message) {\n            super(message);\n        }\n    }\n    \n    private static class oConvertUtils {\n        public static boolean isEmpty(String s) {\n            return s == null || s.isEmpty();\n        }\n    }\n\n    @Test\n    public void validateTest() {\n        String safeJdbcUrl = \"jdbc:database://localhost:3306/somedb?useSSL=false\";\n        String riskyJdbcUrl = \"jdbc:database://localhost:3306/somedb?useSSL=false&user=root\";\n\n        // Test should pass with no exceptions for a safe URL\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(safeJdbcUrl));\n\n        // Test should throw an exception for a risky URL due to the 'user' property\n        Exception exception = assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(riskyJdbcUrl));\n        assertTrue(exception.getMessage().contains(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010user\u3011\"));\n\n        // Test should not throw an exception when URL is null or empty\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(null));\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"\"));\n\n        // Test should not throw an exception when URL does not have any properties\n        String noPropertiesJdbcUrl = \"jdbc:database://localhost:3306/somedb\";\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(noPropertiesJdbcUrl));\n    }\n}",
        "package org.jeecg.common.util.security;\n\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n\n    @Test\n    public void validateTest_ValidUrl_NoExceptionThrown() {\n        // Assuming the existence of a method 'validate' and the input does not contain not allowed properties\n        String validJdbcUrl = \"jdbc:mysql://localhost:3306/mydatabase?user=root&password=pass\";\n\n        // Expect no exception to be thrown\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(validJdbcUrl));\n    }\n\n    @Test\n    public void validateTest_EmptyUrl_NoExceptionThrown() {\n        String emptyJdbcUrl = \"\";\n\n        // Expect no exception to be thrown for an empty URL\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(emptyJdbcUrl));\n    }\n\n    @Test\n    public void validateTest_UrlWithNotAllowedProps_ExceptionThrown() {\n        // Assuming 'notAllowedProps' contains \"user\"\n        String invalidJdbcUrl = \"jdbc:mysql://localhost:3306/mydatabase?user=root&password=pass\";\n\n        // Expect a JeecgBootException to be thrown\n        Exception exception = assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(invalidJdbcUrl));\n        assertTrue(exception.getMessage().contains(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\"));\n    }\n    \n    @Test\n    public void validateTest_UrlWithoutQuestionMark_NoExceptionThrown() {\n        String jdbcUrlWithoutQuestionMark = \"jdbc:mysql://localhost:3306/mydatabase\";\n\n        // Expect no exception to be thrown for a URL without a question mark\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(jdbcUrlWithoutQuestionMark));\n    }\n\n    // Add more test cases as needed...\n}\n",
        "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n\n    private static final String[] notAllowedProps = {\"user\", \"pass\"};\n\n    private static void validate(final String jdbcUrl) {\n        if(jdbcUrl == null || jdbcUrl.trim().isEmpty()){\n            return;\n        }\n        String urlConcatChar = \"?\";\n        if(jdbcUrl.indexOf(urlConcatChar)<0){\n            return;\n        }\n        String argString = jdbcUrl.substring(jdbcUrl.indexOf(urlConcatChar)+1);\n        String[] keyAndValues = argString.split(\"&\");\n        for(String temp: keyAndValues){\n            String key = temp.split(\"=\")[0];\n            for(String prop: notAllowedProps){\n                if(prop.equalsIgnoreCase(key)){\n                    throw new RuntimeException(\"Connection string contains disallowed property: \" + key);\n                }\n            }\n        }\n    }\n\n    @Test\n    public void validateTest_shouldPassForSafeUrl() {\n        String safeJdbcUrl = \"jdbc:mysql://localhost/testDatabase?allowPublicKeyRetrieval=true\";\n        assertDoesNotThrow(() -> validate(safeJdbcUrl));\n    }\n\n    @Test\n    public void validateTest_shouldThrowExceptionForDisallowedProperty() {\n        String dangerousJdbcUrl = \"jdbc:mysql://localhost/testDatabase?user=root&password=root\";\n        Exception exception = assertThrows(RuntimeException.class, () -> validate(dangerousJdbcUrl));\n        assertTrue(exception.getMessage().contains(\"Connection string contains disallowed property\"));\n    }\n\n    @Test\n    public void validateTest_shouldReturnEarlyForEmptyUrl() {\n        String emptyJdbcUrl = \"\";\n        assertDoesNotThrow(() -> validate(emptyJdbcUrl));\n    }\n\n    @Test\n    public void validateTest_shouldReturnEarlyForNullUrl() {\n        String nullJdbcUrl = null;\n        assertDoesNotThrow(() -> validate(nullJdbcUrl));\n    }\n\n    @Test\n    public void validateTest_shouldReturnEarlyForUrlWithoutParams() {\n        String jdbcUrlWithoutParams = \"jdbc:mysql://localhost/testDatabase\";\n        assertDoesNotThrow(() -> validate(jdbcUrlWithoutParams));\n    }\n}",
        "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    \n    // Assuming the existence of the static array notAllowedProps for testing purposes.\n    private static final String[] notAllowedProps = {\"user\", \"password\"};\n\n    @Test\n    public void validateTest() {\n        // Test with an empty JDBC URL\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"\"));\n\n        // Test with a JDBC URL that has no argument sections\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"jdbc:mysql://localhost\"));\n\n        // Test with a JDBC URL that has safe properties\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"jdbc:mysql://localhost?autoReconnect=true\"));\n\n        // Test with a JDBC URL that has disallowed property - expecting an exception\n        Exception exception = assertThrows(JeecgBootException.class, () -> {\n            JdbcSecurityUtil.validate(\"jdbc:mysql://localhost?user=root&password=root\");\n        });\n        assertTrue(exception.getMessage().contains(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\"));\n\n        // Test with a JDBC URL that has mixed properties\n        Exception mixedException = assertThrows(JeecgBootException.class, () -> {\n            JdbcSecurityUtil.validate(\"jdbc:mysql://localhost?autoReconnect=true&user=root\");\n        });\n        assertTrue(mixedException.getMessage().contains(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\"));\n\n        // Test with a JDBC URL that has case-insensitive disallowed property\n        Exception caseInsensitiveException = assertThrows(JeecgBootException.class, () -> {\n            JdbcSecurityUtil.validate(\"jdbc:mysql://localhost?USER=root\");\n        });\n        assertTrue(caseInsensitiveException.getMessage().contains(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\"));\n    }\n\n    // Example of implementing the validate method for context. It's not part of the test class\n    public static void validate(String jdbcUrl) {\n        // Implementation example for oConvertUtils.isEmpty\n        if(jdbcUrl == null || jdbcUrl.trim().isEmpty()) {\n            return;\n        }\n        String urlConcatChar = \"?\";\n        if (jdbcUrl.indexOf(urlConcatChar) < 0) {\n            return;\n        }\n        String argString = jdbcUrl.substring(jdbcUrl.indexOf(urlConcatChar) + 1);\n        String[] keyAndValues = argString.split(\"&\");\n        for (String temp : keyAndValues) {\n            String key = temp.split(\"=\")[0];\n            for (String prop : notAllowedProps) {\n                if (prop.equalsIgnoreCase(key)) {\n                    throw new JeecgBootException(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010\" + key + \"\u3011\");\n                }\n            }\n        }\n    }\n}",
        "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    \n    // Assuming notAllowedProps is a static member of the class that validate method belongs to\n    private static final String[] notAllowedProps = {\"user\", \"password\"};\n\n    @Test\n    public void validateTest_EmptyUrl() {\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"\"));\n    }\n\n    @Test\n    public void validateTest_NullUrl() {\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(null));\n    }\n\n    @Test\n    public void validateTest_NoQuestionMark() {\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"jdbc:mysql://localhost/testdb\"));\n    }\n\n    @Test\n    public void validateTest_AllowedProperty() {\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"jdbc:mysql://localhost/testdb?prop=value\"));\n    }\n\n    @Test\n    public void validateTest_NotAllowedProperty_UpperCase() {\n        assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(\"jdbc:mysql://localhost/testdb?USER=root\"));\n    }\n\n    @Test\n    public void validateTest_NotAllowedProperty() {\n        assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(\"jdbc:mysql://localhost/testdb?password=secret\"));\n    }\n\n    // The actual implementation of JdbcSecurityUtil would need to be included\n    public static class JdbcSecurityUtil {\n        public static void validate(String jdbcUrl){\n            // ... implementation as given\n        }\n    }\n\n    // Mock the JeecgBootException for the purpose of this example\n    public static class JeecgBootException extends RuntimeException {\n        public JeecgBootException(String message) {\n            super(message);\n        }\n    }\n}",
        "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n\n    // Assuming 'oConvertUtils.isEmpty' checks if the string is null or empty, and\n    // 'notAllowedProps' is a static String array containing restricted properties.\n    // Also assuming 'JeecgBootException' is a custom exception defined elsewhere.\n    // You'll need to fill the appropriate values or add stubs/mocks for them.\n\n    private static final String[] notAllowedProps = {\"password\", \"user\", \"ssl\"};\n    \n    @Test\n    public void validJdbcUrlShouldNotThrowException() {\n        String validJdbcUrl = \"jdbc:mysql://localhost:3306/mydb?useSSL=false\";\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(validJdbcUrl));\n    }\n\n    @Test\n    public void jdbcUrlWithNotAllowedPropShouldThrowException() {\n        String invalidJdbcUrl = \"jdbc:mysql://localhost:3306/mydb?password=secret\";\n        assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(invalidJdbcUrl));\n    }\n\n    @Test\n    public void jdbcUrlShouldReturnForNullOrEmpty() {\n        // Assuming oConvertUtils.isEmpty will return true for null/empty strings\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(null));\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"\"));\n    }\n\n    @Test\n    public void jdbcUrlShouldReturnForMissingUrlConcatChar() {\n        // Assuming '?' is the required character to split the URL string\n        String jdbcUrlWithoutQuestionMark = \"jdbc:mysql://localhost:3306/mydb\";\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(jdbcUrlWithoutQuestionMark));\n    }\n}",
        "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n\n    private static final String[] notAllowedProps = {\"user\", \"password\"};\n\n    @Test\n    public void validateValidJdbcUrl() {\n        String validJdbcUrl = \"jdbc:mysql://localhost:3306/sampleDB?useSSL=false\";\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(validJdbcUrl));\n    }\n\n    @Test\n    public void validateEmptyJdbcUrl() {\n        String emptyJdbcUrl = \"\";\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(emptyJdbcUrl));\n    }\n\n    @Test\n    public void validateNullJdbcUrl() {\n        String nullJdbcUrl = null;\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(nullJdbcUrl));\n    }\n\n    @Test\n    public void validateJdbcUrlWithoutArgs() {\n        String urlWithoutArgs = \"jdbc:mysql://localhost:3306/sampleDB\";\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(urlWithoutArgs));\n    }\n\n    @Test\n    public void validateJdbcUrlWithNotAllowedProp() {\n        String invalidJdbcUrl = \"jdbc:mysql://localhost:3306/sampleDB?user=root&password=secret\";\n        Exception exception = assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(invalidJdbcUrl));\n        assertTrue(exception.getMessage().contains(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\"));\n    }\n}",
        "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n\n    // Assuming there's a static notAllowedProps array in the source code that we can access\n    private static final String[] notAllowedProps = {\"user\", \"password\"};\n\n    @Test\n    public void validateTest() {\n        // Test case with empty jdbcUrl\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"\"));\n        \n        // Test case without urlConcatChar\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"jdbc:mysql://localhost:3306/mydb\"));\n\n        // Test case with allowed properties\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"jdbc:mysql://localhost:3306/mydb?useSSL=false&requireSSL=false\"));\n\n        // Test case with not allowed props\n        String key = notAllowedProps[0]; // could be \"user\" or \"password\", as per the provided notAllowedProps\n        Exception exception = assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(\"jdbc:mysql://localhost:3306/mydb?\"+key+\"=root\"));\n        assertTrue(exception.getMessage().contains(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010\" + key + \"\u3011\"));\n\n        // Add additional tests for different scenarios, if necessary\n    }\n}",
        "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    // Assuming \"oConvertUtils.isEmpty\" checks if the string is null or empty\n    // and \"notAllowedProps\" is an array of strings that are not allowed in the JDBC URL\n\n    private static final String[] notAllowedProps = {\"user\", \"password\", \"ssl\"}; // Example of not allowed properties\n    \n    // Method to simulate static methods for this test example (since the original methods are not provided)\n    private static boolean isEmpty(String jdbcUrl) {\n        return jdbcUrl == null || jdbcUrl.isEmpty();\n    }\n    \n    // Replacement for the JeecgBootException for the purpose of this test\n    private static class JeecgBootException extends RuntimeException {\n        public JeecgBootException(String message) {\n            super(message);\n        }\n    }\n    \n    // The validate method under test adapted for this test context\n    public static void validate(String jdbcUrl) {\n        if(isEmpty(jdbcUrl)){\n            return;\n        }\n        String urlConcatChar = \"?\";\n        if(jdbcUrl.indexOf(urlConcatChar)<0){\n            return;\n        }\n        String argString = jdbcUrl.substring(jdbcUrl.indexOf(urlConcatChar)+1);\n        String[] keyAndValues = argString.split(\"&\");\n        for(String temp: keyAndValues){\n            String key = temp.split(\"=\")[0];\n            for(String prop: notAllowedProps){\n                if(prop.equalsIgnoreCase(key)){\n                    throw new JeecgBootException(\"Connection URL has security risk with key: \u3010\"+key+\"\u3011\");\n                }\n            }\n        }\n    }\n    \n    // The actual test case\n    @Test\n    public void validateTest() {\n        // Test for empty or null JDBC URL\n        assertDoesNotThrow(() -> validate(null));\n        assertDoesNotThrow(() -> validate(\"\"));\n\n        // Test for a JDBC URL with no parameters (missing urlConcatChar)\n        assertDoesNotThrow(() -> validate(\"jdbc:mysql://localhost:3306/exampleDb\"));\n\n        // Test for a JDBC URL that contains a non-allowed property\n        JeecgBootException thrownException = assertThrows(JeecgBootException.class, () -> validate(\"jdbc:mysql://localhost:3306/exampleDb?user=root&password=root\"));\n        assertTrue(thrownException.getMessage().contains(\"Connection URL has security risk with key: \u3010user\u3011\"));\n        \n        // Test for a valid JDBC URL with no non-allowed properties\n        assertDoesNotThrow(() -> validate(\"jdbc:mysql://localhost:3306/exampleDb?useSSL=false\"));\n    }\n}",
        "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n\n    @Test\n    public void validateTest() {\n        String safeJdbcUrl = \"jdbc:mysql://localhost:3306/testDB?useSSL=false\";\n        String riskyJdbcUrl = \"jdbc:mysql://localhost:3306/testDB?useSSL=false&serverTimezone=UTC\";\n        \n        // Assuming 'oConvertUtils.isEmpty' checks if the string is null or empty\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(null));\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(\"\"));\n        \n        // Test case for safe url, no exception should be thrown\n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(safeJdbcUrl));\n        \n        // Test case for risky url with not allowed property (assuming 'serverTimezone' is in `notAllowedProps`)\n        Exception exception = assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(riskyJdbcUrl));\n        \n        // Verify that the exception message is correct\n        assertTrue(exception.getMessage().contains(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\"));\n    }\n    \n    // Add more tests if necessary, for example, testing different edge cases and invalid inputs\n}"
    ]
}