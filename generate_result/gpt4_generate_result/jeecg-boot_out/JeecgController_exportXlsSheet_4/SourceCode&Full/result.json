{
    "project_name": "jeecg-boot",
    "file_name": "JeecgController.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/base/controller/JeecgController.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.system.base.controller",
    "docstring": "/**\n     * \u6839\u636e\u6bcf\u9875sheet\u6570\u91cf\u5bfc\u51fa\u591asheet\n     *\n     * @param request\n     * @param object \u5b9e\u4f53\u7c7b\n     * @param clazz \u5b9e\u4f53\u7c7bclass\n     * @param title \u6807\u9898\n     * @param exportFields \u5bfc\u51fa\u5b57\u6bb5\u81ea\u5b9a\u4e49\n     * @param pageNum \u6bcf\u4e2asheet\u7684\u6570\u636e\u6761\u6570\n     * @param request\n     */",
    "source_code": "\nprotected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title,String exportFields,Integer pageNum) {\n    // Step.1 \u7ec4\u88c5\u67e5\u8be2\u6761\u4ef6\n    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());\n    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n    // Step.2 \u8ba1\u7b97\u5206\u9875sheet\u6570\u636e\n    double total = service.count();\n    int count = (int)Math.ceil(total/pageNum);\n    //update-begin-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.3  \u8fc7\u6ee4\u9009\u4e2d\u6570\u636e\n    String selections = request.getParameter(\"selections\");\n    if (oConvertUtils.isNotEmpty(selections)) {\n        List<String> selectionList = Arrays.asList(selections.split(\",\"));\n        queryWrapper.in(\"id\",selectionList);\n    }\n    //update-end-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.4 \u591asheet\u5904\u7406\n    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();\n    for (int i = 1; i <=count ; i++) {\n        Page<T> page = new Page<T>(i, pageNum);\n        IPage<T> pageList = service.page(page, queryWrapper);\n        List<T> exportList = pageList.getRecords();\n        Map<String, Object> map = new HashMap<>(5);\n        ExportParams exportParams=new ExportParams(title + \"\u62a5\u8868\", \"\u5bfc\u51fa\u4eba:\" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload());\n        exportParams.setType(ExcelType.XSSF);\n        //map.put(\"title\",exportParams);\n        //\u8868\u683cTitle\n        map.put(NormalExcelConstants.PARAMS,exportParams);\n        //\u8868\u683c\u5bf9\u5e94\u5b9e\u4f53\n        map.put(NormalExcelConstants.CLASS,clazz);\n        //\u6570\u636e\u96c6\u5408\n        map.put(NormalExcelConstants.DATA_LIST, exportList);\n        listMap.add(map);\n    }\n    // Step.4 AutoPoi \u5bfc\u51faExcel\n    ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());\n    //\u6b64\u5904\u8bbe\u7f6e\u7684filename\u65e0\u6548 ,\u524d\u7aef\u4f1a\u91cd\u66f4\u65b0\u8bbe\u7f6e\u4e00\u4e0b\n    mv.addObject(NormalExcelConstants.FILE_NAME, title);\n    mv.addObject(NormalExcelConstants.MAP_LIST, listMap);\n    return mv;\n}\n",
    "class_name": "JeecgController",
    "method_name": "exportXlsSheet",
    "arguments": [
        "HttpServletRequest request",
        "T object",
        "Class<T> clazz",
        "String title",
        "String exportFields",
        "Integer pageNum"
    ],
    "generate_test": [
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport org.springframework.web.servlet.ModelAndView;\nimport java.util.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JeecgControllerTest {\n\n    private MockHttpServletRequest request;\n    private JeecgController<Object, IService<Object>> controller;\n\n    @BeforeEach\n    void setUp() {\n        request = new MockHttpServletRequest();\n        controller = new JeecgController<>();\n        controller.service = new IService<Object>() {\n            @Override\n            public int count() {\n                return 100; // Mock the total count\n            }\n            \n            @Override\n            public Page<Object> page(Page<Object> page, QueryWrapper<Object> queryWrapper) {\n                return new Page<>(page.getCurrent(), page.getSize(), 100); // Mock the pagination with the total number of records\n            }\n            // ... other methods\n        };\n        // Mock other necessary dependencies or behaviors in the controller\n    }\n\n    @Test\n    public void exportXlsSheetTest() {\n        // Arrange\n        Object object = new Object(); // Replace with a real object if necessary\n        Class<Object> clazz = Object.class; // Replace with a real class if necessary\n        String title = \"Test Title\";\n        String exportFields = \"id,name\";\n        Integer pageNum = 10;\n        \n        // Set request parameters if needed\n        request.addParameter(\"page\", \"1\");\n\n        // Act\n        ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n\n        // Assert\n        assertNotNull(result, \"ModelAndView should not be null\");\n        assertEquals(\"Test Title\", result.getModelMap().getAttribute(NormalExcelConstants.FILE_NAME), \"File name does not match\");\n        List<Map<String, Object>> listMap = (List<Map<String, Object>>) result.getModelMap().getAttribute(NormalExcelConstants.MAP_LIST);\n        assertNotNull(listMap, \"List map should not be null\");\n        assertTrue(listMap.size() > 0, \"List map should have at least one element\");\n\n        // Additional assertions as needed to verify the correct behavior\n    }\n    \n    @AfterEach\n    void tearDown() {\n        // Clean up after each test if necessary\n    }\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.Test;\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport org.jeecg.common.system.vo.LoginUser;\nimport org.apache.shiro.subject.Subject;\nimport org.apache.shiro.SecurityUtils;\nimport org.mockito.MockedStatic;\nimport org.mockito.Mockito;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport org.mockito.ArgumentMatchers;\nimport java.util.List;\nimport java.util.Map;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class JeecgControllerTest {\n\n    @Test\n    public void exportXlsSheetTest() {\n        // Create necessary mock objects\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        JeecgBaseConfig jeecgBaseConfig = mock(JeecgBaseConfig.class);\n        IService service = mock(IService.class);\n        JeecgController controller = new JeecgController() {\n            {\n                this.jeecgBaseConfig = jeecgBaseConfig;\n                this.service = service;\n            }\n        };\n\n        // Prepare some test data\n        Object testObject = new Object();\n        Class<Object> clazz = Object.class;\n        String title = \"TestTitle\";\n        String exportFields = \"id,name\";\n        Integer pageNum = 10;\n\n        // Mock the static method call\n        try (MockedStatic<SecurityUtils> mocked = Mockito.mockStatic(SecurityUtils.class)) {\n            Subject subject = mock(Subject.class);\n            mocked.when(SecurityUtils::getSubject).thenReturn(subject);\n            when(subject.getPrincipal()).thenReturn(new LoginUser());\n\n            // Assume total record count is 23\n            when(service.count()).thenReturn(23L);\n\n            // Mock page method to return some data\n            Page mockPage = new Page(pageNum, pageNum);\n            IPage<Object> mockIPage = mock(IPage.class);\n            when(mockIPage.getRecords()).thenReturn(List.of(new Object(), new Object()));\n            when(service.page(ArgumentMatchers.eq(mockPage), ArgumentMatchers.any())).thenReturn(mockIPage);\n\n            // Execute the method to test\n            ModelAndView modelAndView = controller.exportXlsSheet(request, testObject, clazz, title, exportFields, pageNum);\n\n            assertNotNull(modelAndView);\n            assertEquals(modelAndView.getView().getClass(), JeecgEntityExcelView.class);\n\n            // Verify that the model contains necessary attributes\n            assertNotNull(modelAndView.getModel().get(NormalExcelConstants.FILE_NAME));\n            assertNotNull(modelAndView.getModel().get(NormalExcelConstants.MAP_LIST));\n\n            // As per logic, it should create 3 sheets because 23 records with 10 records per sheet requires 3 sheets\n            List<Map<String, Object>> mapList = (List<Map<String, Object>>) modelAndView.getModel().get(NormalExcelConstants.MAP_LIST);\n            assertNotNull(mapList);\n            assertEquals(3, mapList.size());\n        }\n    }\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.HashMap;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass JeecgControllerTest {\n\n    // Assume that JeecgController is modified to be public for testing purpose\n    JeecgController<Object, IService<Object>> controller;\n\n    IService<Object> service; // Mock service interface\n    JeecgBaseConfig jeecgBaseConfig; // Mock JeecgBaseConfig\n\n    @BeforeEach\n    void setUp() {\n        // Initialize the controller and mocks before each test\n        service = mock(IService.class);\n        jeecgBaseConfig = mock(JeecgBaseConfig.class);\n\n        controller = new JeecgController<>();\n        controller.service = service;\n        controller.jeecgBaseConfig = jeecgBaseConfig;\n    }\n\n    @Test\n    public void exportXlsSheetTest() {\n        // Given\n        HttpServletRequest request = new MockHttpServletRequest();\n        Object object = new Object();\n        Class<Object> clazz = Object.class;\n        String title = \"TestSheet\";\n        String exportFields = \"field1,field2\";\n        Integer pageNum = 10;\n\n        // Mocking service calls\n        when(service.count()).thenReturn(20L); // total of 20 items in the service\n\n        // Mocking JeecgBaseConfig path\n        JeecgBaseConfig.JeecgBasePathConfig pathConfig = mock(JeecgBaseConfig.JeecgBasePathConfig.class);\n        when(jeecgBaseConfig.getPath()).thenReturn(pathConfig);\n        when(pathConfig.getUpload()).thenReturn(\"uploadPath/\");\n\n        // Act\n        ModelAndView mv = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n\n        // Assert\n        assertNotNull(mv);\n        assertEquals(\"TestSheet\", mv.getModel().get(NormalExcelConstants.FILE_NAME));\n        assertNotNull(mv.getModel().get(NormalExcelConstants.MAP_LIST)); // Ensure that the list of maps is present\n\n        // Check the size to ensure pagination is handled properly, 20 items with 10 items per page should result in 2 pages\n        assertEquals(2, ((java.util.List) mv.getModel().get(NormalExcelConstants.MAP_LIST)).size());\n        verify(service).count(); // Verify if service.count() method is called\n    }\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.jeecg.common.system.vo.LoginUser;\nimport org.jeecgframework.poi.excel.def.NormalExcelConstants;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.when;\n\npublic class JeecgControllerTest {\n    private JeecgController jeecgController;\n    private HttpServletRequest request;\n    private LoginUser loginUser;\n    private IService service;\n\n    @BeforeEach\n    public void setUp() {\n        service = Mockito.mock(IService.class);\n        jeecgController = new JeecgController() {\n            {\n                this.service = JeecgControllerTest.this.service;\n            }\n\n            // We need to override this method to avoid SecurityUtils.getSubject() which\n            // will not work in the test environment\n            protected LoginUser getLoginUser() {\n                return loginUser;\n            }\n        };\n\n        loginUser = new LoginUser();\n        loginUser.setRealname(\"Test User\");\n        request = new MockHttpServletRequest();\n    }\n\n    @Test\n    public void exportXlsSheetTest() {\n        // mock the service.count() method to return a specific number of entities\n        when(service.count()).thenReturn(100L);\n\n        // For the purpose of this test, let's assume we want a page size of 10\n        int pageSize = 10;\n        String title = \"TestTitle\";\n        Class entityClass = Object.class; // or any other entity class\n\n        ModelAndView result = jeecgController.exportXlsSheet(request, new Object(), entityClass, title, null, pageSize);\n\n        // Assertions\n        assertNotNull(result, \"The returned ModelAndView should not be null.\");\n        assertNotNull(result.getModel(), \"The model of ModelAndView should not be null.\");\n\n        // Extract the list map from the ModelAndView model\n        List<Map<String, Object>> listMap = (List<Map<String, Object>>) result.getModel().get(NormalExcelConstants.MAP_LIST);\n        assertNotNull(listMap, \"The list map should not be null.\");\n        assertTrue(listMap.size() > 0, \"The list map should have at least one entry.\");\n\n        // Check for a given sheet's data in the list map\n        Map<String, Object> sheetMap = listMap.get(0); // Checking the first sheet as an example\n        assertNotNull(sheetMap, \"The sheet map should not be null.\");\n        assertEquals(title + \"\u62a5\u8868\", ((org.jeecgframework.poi.excel.entity.ExportParams) sheetMap.get(NormalExcelConstants.PARAMS)).getTitle(), \"The title of the exported sheet should match.\");\n        assertEquals(entityClass, sheetMap.get(NormalExcelConstants.CLASS), \"The class of the exported sheet should match.\");\n        assertNotNull(sheetMap.get(NormalExcelConstants.DATA_LIST), \"The data list for the sheet should not be null.\");\n    }\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport org.jeecg.config.JeecgBaseConfig;\nimport org.apache.shiro.subject.Subject;\nimport org.apache.shiro.util.ThreadContext;\n\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\nclass JeecgControllerTest {\n\n    private JeecgController<Object, IService<Object>> controller;\n    @Mock\n    private IService<Object> service;\n    @Mock\n    private JeecgBaseConfig jeecgBaseConfig;\n    @Mock\n    private Subject subject;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n        controller = new JeecgController<>() {\n            {\n                this.service = JeecgControllerTest.this.service;\n                this.jeecgBaseConfig = JeecgControllerTest.this.jeecgBaseConfig;\n            }\n        };\n        ThreadContext.bind(subject);\n    }\n\n    @AfterEach\n    void tearDown() {\n        ThreadContext.unbindSubject();\n    }\n\n    @Test\n    public void exportXlsSheetTest() {\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        Class<Object> clazz = Object.class;\n        String title = \"TestTitle\";\n        String exportFields = \"field1,field2,field3\";\n        Integer pageNum = 10;\n\n        when(service.count()).thenReturn(100L);\n\n        List<Object> mockedList = new ArrayList<>();\n        for(int i = 0; i < pageNum; i++) {\n            mockedList.add(new Object());\n        }\n\n        when(service.page(any(), any())).thenAnswer(invocation -> {\n            com.baomidou.mybatisplus.extension.plugins.pagination.Page<Object> page = invocation.getArgument(0);\n            return new com.baomidou.mybatisplus.extension.plugins.pagination.Page<>(\n                page.getCurrent(), page.getSize(), 100L).setRecords(mockedList);\n        });\n\n        LoginUser mockUser = mock(LoginUser.class);\n        when(mockUser.getRealname()).thenReturn(\"MockUser\");\n        when(subject.getPrincipal()).thenReturn(mockUser);\n\n        when(jeecgBaseConfig.getPath()).thenReturn(new JeecgBaseConfig.PathConfig());\n\n        ModelAndView mv = controller.exportXlsSheet(request, new Object(), clazz, title, exportFields, pageNum);\n\n        assertNotNull(mv, \"The ModelAndView should not be null\");\n        assertEquals(JeecgEntityExcelView.class, mv.getView().getClass(), \"View class should be JeecgEntityExcelView\");\n        List<?> mapList = (List<?>) mv.getModel().get(NormalExcelConstants.MAP_LIST);\n        assertNotNull(mapList, \"MAP_LIST should not be null\");\n        assertFalse(mapList.isEmpty(), \"MAP_LIST should not be empty\");\n        assertEquals(10, mapList.size(), \"MAP_LIST should contain 10 maps for the 10 pages\");\n\n        // Here you could add more assertions for different attributes of ModelAndView that are expected\n        // as per the logic in the `exportXlsSheet` method.\n    }\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class JeecgControllerTest {\n    \n    @Mock\n    private HttpServletRequest request;\n    \n    @Mock\n    private JeecgController<Object, IService<Object>> controller;\n    \n    @InjectMocks\n    private JeecgController<Object, IService<Object>> controllerUnderTest;\n    \n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n        controller = spy(new JeecgController<>());\n    }\n    \n    @Test\n    public void exportXlsSheetTest() {\n        // Prepare the data and mock the necessary methods\n        Object testObject = new Object();\n        Class<Object> clazz = Object.class;\n        String title = \"Test Title\";\n        String exportFields = \"id,name\";\n        Integer pageNum = 10;\n        Map<String, String[]> parameterMap = new HashMap<>();\n        \n        // Mock the request.getParameterMap() to return an empty map\n        when(request.getParameterMap()).thenReturn(parameterMap);\n        \n        // Mock method calls that are used in the exportXlsSheet\n        when(request.getParameter(\"selections\")).thenReturn(\"1,2,3\");\n        \n        // Call the method under test\n        ModelAndView mv = controller.exportXlsSheet(request, testObject, clazz, title, exportFields, pageNum);\n        \n        // Verify the method was called\n        verify(controller, times(1)).exportXlsSheet(request, testObject, clazz, title, exportFields, pageNum);\n        \n        // Test for ModelAndView not being null\n        assertNotNull(mv, \"The ModelAndView should not be null\");\n        \n        // Test for correct view name\n        assertTrue(mv.getView() instanceof JeecgEntityExcelView, \"View should be an instance of JeecgEntityExcelView\");\n        \n        // Assert other model attributes\n        assertEquals(title, mv.getModel().get(NormalExcelConstants.FILE_NAME), \"The title does not match with the FILE_NAME attribute\");\n        assertNotNull(mv.getModel().get(NormalExcelConstants.MAP_LIST), \"The MAP_LIST attribute should be present within the model\");\n    }\n    \n    @AfterEach\n    void tearDown() {\n        MockitoAnnotations.clearAllCaches();\n    }\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class JeecgControllerTest {\n\n    @InjectMocks\n    private JeecgController jeecgController;\n\n    @Mock\n    private HttpServletRequest request;\n\n    // Assuming a hypothetical class 'Entity' being used as T in the test\n    private Class<Entity> clazz = Entity.class;\n    private String title = \"Test Sheet\";\n    private String exportFields = \"id,name,description\";\n    private Integer pageNum = 10;\n    private Entity entity = new Entity();  // Replace 'Entity' with the actual entity class name\n\n    @BeforeEach\n    public void setUp() {\n        // Mock the required parameters or session attributes if needed\n        when(request.getParameterMap()).thenReturn(new HashMap<>());\n    }\n\n    @Test\n    public void exportXlsSheetTest() {\n        // Mock behavior of 'Service.count()' method called in 'exportXlsSheet()'\n        when(service.count()).thenReturn(100L); // assuming there are 100 records\n\n        ModelAndView result = jeecgController.exportXlsSheet(request, entity, clazz, title, exportFields, pageNum);\n\n        assertNotNull(result, \"The model and view should not be null\");\n\n        // Verify some expected results like model attribute presence\n        assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME), \"File name should match the title\");\n        assertNotNull(result.getModel().get(NormalExcelConstants.MAP_LIST), \"Map list should not be null\");\n        assertEquals(10, ((java.util.List<?>) result.getModel().get(NormalExcelConstants.MAP_LIST)).size(), \"There should be 10 sheets\");\n\n        // Additional assertions and verifications can be made based on what is expected to be included in the ModelAndView\n        // ...\n    }\n\n     // Assuming a class exists that is used as the type 'Entity' for the 'JeecgController'\n     // Simply serves as a placeholder for the generic T\n     private static class Entity {\n         // Fields, constructors, and methods for the hypothetical entity would go here\n     }\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.ArgumentMatchers.*;\nimport static org.mockito.Mockito.when;\n\npublic class JeecgControllerTest {\n\n    private JeecgController jeecgController;\n    private MockHttpServletRequest request;\n    \n    // Assuming service and jeecgBaseConfig are dependencies that need to be mocked\n    private IService service;\n    private JeecgBaseConfig jeecgBaseConfig;\n\n    @BeforeEach\n    public void setUp() {\n        // Initialize the controller and mock objects\n        service = Mockito.mock(IService.class);\n        jeecgBaseConfig = Mockito.mock(JeecgBaseConfig.class);\n        jeecgController = new JeecgController<Object, IService<Object>>() {};\n        request = new MockHttpServletRequest();\n\n        // Mock the service and jeecgBaseConfig responses as appropriate\n        // Assuming count method returns a fixed count of 50 for this test\n        when(service.count()).thenReturn(50L);\n\n        // Mocking JeecgBaseConfig response\n        JeecgBaseConfig.PathConfig pathConfig = new JeecgBaseConfig.PathConfig();\n        pathConfig.setUpload(\"some/upload/path\");\n        when(jeecgBaseConfig.getPath()).thenReturn(pathConfig);\n        \n        // Setting protected fields using reflection\n        ReflectionTestUtils.setField(jeecgController, \"service\", service);\n        ReflectionTestUtils.setField(jeecgController, \"jeecgBaseConfig\", jeecgBaseConfig);\n    }\n\n    @Test\n    public void exportXlsSheetTest() {\n        // Setup the parameters for the `exportXlsSheet` method\n        Object object = new Object();\n        Class<Object> clazz = Object.class;\n        String title = \"Test Title\";\n        String exportFields = \"field1,field2\";\n        Integer pageNum = 10;\n\n        // Setup the expected results for the export\n        Map<String, Object> expectedExportParams = new HashMap<>();\n        expectedExportParams.put(\"title\", title);\n        // Rest of the expected parameters...\n\n        // Call the method under test\n        ModelAndView mv = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n\n        // Assertions\n        assertNotNull(mv, \"ModelAndView should not be null\");\n        assertEquals(\"Test Title\u62a5\u8868\", ((ExportParams)mv.getModel().get(NormalExcelConstants.PARAMS)).getTitle(), \"Title should match\");\n        assertEquals(clazz, mv.getModel().get(NormalExcelConstants.CLASS), \"Class parameter should match\");\n        assertTrue(mv.getModel().get(NormalExcelConstants.MAP_LIST) instanceof java.util.List, \"Map List should be a list\");\n        \n        // Verify MAP_LIST size based on mock count and pageNum\n        assertEquals(5, ((java.util.List<?>) mv.getModel().get(NormalExcelConstants.MAP_LIST)).size(), \"The MAP_LIST should contain 5 maps based on the mocked total count and pageNum\");\n    }\n\n    // Clean up after test case\n    @AfterEach\n    public void tearDown() {\n        jeecgController = null;\n        request = null;\n        service = null;\n        jeecgBaseConfig = null;\n    }\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.mockito.Mockito.when;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class JeecgControllerTest {\n\n    @Mock\n    private HttpServletRequest request;\n    @Mock\n    private JeecgBaseConfig jeecgBaseConfig;\n    @Mock\n    private IService service;\n\n    private JeecgController controller;\n    private final String title = \"SheetTitle\";\n    private final Integer pageNum = 10;\n\n    @BeforeEach\n    public void setUp() {\n        controller = new JeecgController() {{\n            this.service = JeecgControllerTest.this.service;\n            this.jeecgBaseConfig = JeecgControllerTest.this.jeecgBaseConfig;\n        }};\n    }\n\n    @Test\n    public void exportXlsSheetTest() {\n        when(service.count()).thenReturn(100L); // Assuming total count to be 100 for test\n        when(jeecgBaseConfig.getPath()).thenReturn(new JeecgBaseConfig.PathConfig() {{\n            setUpload(\"TestPath\");\n        }});\n\n        ModelAndView mv = controller.exportXlsSheet(request, new Object(), Object.class, title, null, pageNum);\n        assertNotNull(mv, \"ModelAndView should not be null\");\n        assertEquals(\"SheetTitle\", mv.getModel().get(NormalExcelConstants.FILE_NAME), \"The file name should be 'SheetTitle'\");\n\n        // Assertions to check if the properties are set correctly\n        assertNotNull(mv.getModel().get(NormalExcelConstants.MAP_LIST), \"The map list should not be null\");\n        assertTrue(mv.getModel().get(NormalExcelConstants.MAP_LIST) instanceof List, \"The map list should be of type List\");\n\n        // Check the contents of the first MAP_LIST entry to confirm sheet settings\n        List<Map<String, Object>> mapList = (List<Map<String, Object>>) mv.getModel().get(NormalExcelConstants.MAP_LIST);\n        assertFalse(mapList.isEmpty(), \"The map list should not be empty\");\n        Map<String, Object> firstMap = mapList.get(0);\n\n        assertEquals(Object.class, firstMap.get(NormalExcelConstants.CLASS), \"The class should be Object class\");\n        assertNotNull(firstMap.get(NormalExcelConstants.DATA_LIST), \"The data list should not be null\");\n        assertTrue(firstMap.get(NormalExcelConstants.DATA_LIST) instanceof List, \"The data list should be of type List\");\n    }\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport org.springframework.web.servlet.ModelAndView;\nimport java.util.HashMap;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JeecgControllerTest {\n\n    // Assuming there's a mock service and config that is used by the controller\n    private IService mockService;\n    private JeecgBaseConfig jeecgBaseConfig;\n    private JeecgController controller;\n\n    @BeforeEach\n    void setUp() {\n        mockService = mock(IService.class);\n        jeecgBaseConfig = new JeecgBaseConfig();\n        controller = new JeecgController();\n        // Injecting mocks into our controller\n        controller.service = mockService;\n        controller.jeecgBaseConfig = jeecgBaseConfig;\n    }\n\n    @Test\n    public void exportXlsSheetTest() {\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        Integer pageNum = 10;\n        String title = \"TestTitle\";\n        Class<Object> clazz = Object.class;\n\n        // Setting up mock behavior\n        when(mockService.count()).thenReturn(100L); // Let's assume 100 records in total\n\n        // Execute the method to test\n        ModelAndView mv = controller.exportXlsSheet(request, new Object(), clazz, title, null, pageNum);\n\n        // Assertions\n        assertNotNull(mv, \"ModelAndView should not be null\");\n        assertEquals(\"TestTitle\", mv.getModel().get(NormalExcelConstants.FILE_NAME), \"Title does not match\");\n\n        @SuppressWarnings(\"unchecked\")\n        // Ensure we have the correct amount of sheets generated\n        java.util.List<HashMap<String, Object>> listMap = (java.util.List<HashMap<String, Object>>) mv.getModel().get(NormalExcelConstants.MAP_LIST);\n        assertNotNull(listMap, \"List of maps should not be null\");\n        int expectedSheetCount = (int) Math.ceil(100.0 / pageNum);\n        assertEquals(expectedSheetCount, listMap.size(), \"Number of sheets is not as expected\");\n\n        // Additional checks can be performed such as:\n        // - Ensure the size of the export list in each map is correct\n        // - Validate 'exportParams' and other attributes within each map\n        // - Test with different 'pageNum' values\n    }\n\n    @AfterEach\n    void tearDown() {\n        // Cleanup resources if needed\n    }\n}"
    ]
}