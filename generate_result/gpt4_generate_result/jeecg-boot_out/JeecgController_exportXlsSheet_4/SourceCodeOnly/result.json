{
    "project_name": "jeecg-boot",
    "file_name": "JeecgController.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/base/controller/JeecgController.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.system.base.controller",
    "docstring": "/**\n     * \u6839\u636e\u6bcf\u9875sheet\u6570\u91cf\u5bfc\u51fa\u591asheet\n     *\n     * @param request\n     * @param object \u5b9e\u4f53\u7c7b\n     * @param clazz \u5b9e\u4f53\u7c7bclass\n     * @param title \u6807\u9898\n     * @param exportFields \u5bfc\u51fa\u5b57\u6bb5\u81ea\u5b9a\u4e49\n     * @param pageNum \u6bcf\u4e2asheet\u7684\u6570\u636e\u6761\u6570\n     * @param request\n     */",
    "source_code": "\nprotected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title,String exportFields,Integer pageNum) {\n    // Step.1 \u7ec4\u88c5\u67e5\u8be2\u6761\u4ef6\n    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());\n    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n    // Step.2 \u8ba1\u7b97\u5206\u9875sheet\u6570\u636e\n    double total = service.count();\n    int count = (int)Math.ceil(total/pageNum);\n    //update-begin-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.3  \u8fc7\u6ee4\u9009\u4e2d\u6570\u636e\n    String selections = request.getParameter(\"selections\");\n    if (oConvertUtils.isNotEmpty(selections)) {\n        List<String> selectionList = Arrays.asList(selections.split(\",\"));\n        queryWrapper.in(\"id\",selectionList);\n    }\n    //update-end-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.4 \u591asheet\u5904\u7406\n    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();\n    for (int i = 1; i <=count ; i++) {\n        Page<T> page = new Page<T>(i, pageNum);\n        IPage<T> pageList = service.page(page, queryWrapper);\n        List<T> exportList = pageList.getRecords();\n        Map<String, Object> map = new HashMap<>(5);\n        ExportParams exportParams=new ExportParams(title + \"\u62a5\u8868\", \"\u5bfc\u51fa\u4eba:\" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload());\n        exportParams.setType(ExcelType.XSSF);\n        //map.put(\"title\",exportParams);\n        //\u8868\u683cTitle\n        map.put(NormalExcelConstants.PARAMS,exportParams);\n        //\u8868\u683c\u5bf9\u5e94\u5b9e\u4f53\n        map.put(NormalExcelConstants.CLASS,clazz);\n        //\u6570\u636e\u96c6\u5408\n        map.put(NormalExcelConstants.DATA_LIST, exportList);\n        listMap.add(map);\n    }\n    // Step.4 AutoPoi \u5bfc\u51faExcel\n    ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());\n    //\u6b64\u5904\u8bbe\u7f6e\u7684filename\u65e0\u6548 ,\u524d\u7aef\u4f1a\u91cd\u66f4\u65b0\u8bbe\u7f6e\u4e00\u4e0b\n    mv.addObject(NormalExcelConstants.FILE_NAME, title);\n    mv.addObject(NormalExcelConstants.MAP_LIST, listMap);\n    return mv;\n}\n",
    "class_name": "JeecgController",
    "method_name": "exportXlsSheet",
    "arguments": [
        "HttpServletRequest request",
        "T object",
        "Class<T> clazz",
        "String title",
        "String exportFields",
        "Integer pageNum"
    ],
    "generate_test": [
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JeecgControllerTest {\n\n    @InjectMocks\n    private GenericController genericController;\n\n    @Mock\n    private SomeEntityService service; // Assuming there is a service to be mocked\n\n    @Mock\n    private HttpServletRequest request;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void exportXlsSheetTest() {\n        // Arrange\n        SomeEntity object = new SomeEntity(); // Replace with the correct object type\n        Class<SomeEntity> clazz = SomeEntity.class; // Replace with the correct class type\n        String title = \"Test Title\";\n        String exportFields = \"field1,field2,field3\";\n        Integer pageNum = 10;\n        \n        // Mocking HttpServletRequest to provide necessary parameters\n        when(request.getParameterMap()).thenReturn(new HashMap<>());\n        when(request.getParameter(\"selections\")).thenReturn(\"1,2,3\");\n\n        // Mocking the service layer to return expected counts / entities\n        when(service.count()).thenReturn(100.0);\n\n        // Mocking the page to simulate service.page() call\n        IPage<SomeEntity> pageList = mock(IPage.class);\n        when(pageList.getRecords()).thenReturn(Arrays.asList(new SomeEntity(), new SomeEntity()));\n        when(service.page(any(Page.class), any(QueryWrapper.class))).thenReturn(pageList);\n\n        // Act\n        ModelAndView result = genericController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n\n        // Assert\n        assertNotNull(result, \"The ModelAndView result should not be null\");\n        assertEquals(\"jeecgEntityExcelView\", result.getViewName(), \"The View name should match the expected Excel view\");\n        assertNotNull(result.getModel().get(NormalExcelConstants.FILE_NAME), \"The File name should be present in model\");\n        assertNotNull(result.getModel().get(NormalExcelConstants.MAP_LIST), \"The MAP_LIST should be present in model\");\n        assertTrue(result.getModel().get(NormalExcelConstants.MAP_LIST) instanceof List, \"The MAP_LIST should be a List type\");\n        assertFalse(((List)result.getModel().get(NormalExcelConstants.MAP_LIST)).isEmpty(), \"The MAP_LIST should not be empty\");\n    }\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.jeecg.common.aspect.annotation.QueryGenerator;\nimport org.jeecg.common.system.vo.LoginUser;\nimport org.jeecg.config.JeecgBaseConfig;\nimport org.jeecg.modules.jeecgboot.service.ICommonService;\nimport org.apache.shiro.SecurityUtils;\nimport org.apache.shiro.subject.Subject;\nimport org.jeecg.common.system.query.QueryWrapper;\nimport org.jeecg.common.util.oConvertUtils;\nimport org.jeecgframework.poi.excel.entity.ExportParams;\nimport org.jeecgframework.poi.excel.entity.enmus.ExcelType;\nimport org.jeecgframework.poi.excel.view.JeecgEntityExcelView;\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.web.servlet.ModelAndView;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class JeecgControllerTest {\n\n    @Mock\n    protected HttpServletRequest request;\n\n    @Mock\n    protected ICommonService service;\n\n    @Mock\n    protected QueryGenerator queryGenerator;\n\n    @Mock\n    protected SecurityUtils securityUtils;\n\n    @Mock\n    protected JeecgBaseConfig jeecgBaseConfig;\n\n    @Mock\n    protected LoginUser loginUser;\n\n    @Mock\n    protected Subject subject;\n\n    @InjectMocks\n    private ExportController exportController;\n\n    @Test\n    public void exportXlsSheetTest() {\n        // Assume T is a class representing a generic entity\n        Class<T> clazz = T.class; // Replace T.class with the actual class\n        String title = \"TestTitle\";\n        String exportFields = \"name,age\";\n        Integer pageNum = 10;\n        String selections = \"1,2,3\";\n\n        when(request.getParameterMap()).thenReturn(new HashMap<>());\n        when(request.getParameter(\"selections\")).thenReturn(selections);\n        when(securityUtils.getSubject()).thenReturn(subject);\n        when(subject.getPrincipal()).thenReturn(loginUser);\n        when(loginUser.getRealname()).thenReturn(\"TestUser\");\n        when(jeecgBaseConfig.getPath()).thenReturn(mock(JeecgBaseConfig.PathConfig.class));\n        when(jeecgBaseConfig.getPath().getUpload()).thenReturn(\"upload\");\n        when(service.count()).thenReturn(100.0);\n\n        Map<String, Object> paramMap = new HashMap<>();\n        QueryWrapper<T> queryWrapper = new QueryWrapper<>();\n        when(queryGenerator.initQueryWrapper(any(), any())).thenReturn(queryWrapper);\n\n        Page<T> page = new Page<>(1, pageNum);\n        IPage<T> pageList = mock(IPage.class);\n        when(service.page(any(Page.class), any(QueryWrapper.class))).thenReturn(pageList);\n        when(pageList.getRecords()).thenReturn(Collections.singletonList(mock(T.class)));\n\n        ModelAndView mv = exportController.exportXlsSheet(request, mock(T.class), clazz, title, exportFields, pageNum);\n\n        assertNotNull(mv);\n        assertEquals(JeecgEntityExcelView.class, mv.getView().getClass());\n        assertEquals(title, mv.getModel().get(NormalExcelConstants.FILE_NAME));\n        List<Map<String, Object>> listMap = (List<Map<String, Object>>) mv.getModel().get(NormalExcelConstants.MAP_LIST);\n        assertNotNull(listMap);\n        assertFalse(listMap.isEmpty());\n        for (Map<String, Object> map : listMap) {\n            assertEquals(clazz, map.get(NormalExcelConstants.CLASS));\n            assertNotNull(map.get(NormalExcelConstants.DATA_LIST));\n            assertEquals(\"TestTitle\u62a5\u8868\", ((ExportParams) map.get(NormalExcelConstants.PARAMS)).getTitle());\n        }\n    }\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.jeecg.common.system.query.QueryGenerator;\nimport org.jeecg.common.system.vo.LoginUser;\nimport org.apache.shiro.SecurityUtils;\nimport org.jeecgframework.poi.excel.entity.ExportParams;\nimport org.jeecgframework.poi.excel.entity.enmus.ExcelType;\nimport org.jeecgframework.poi.excel.view.JeecgEntityExcelView;\nimport org.springframework.web.servlet.ModelAndView;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport com.baomidou.mybatisplus.extension.service.IService;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class JeecgControllerTest {\n    @Test\n    public void exportXlsSheetTest() {\n        // Assuming T is some entity class\n        class TestEntity {}\n\n        // Mock HttpServletRequest\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        // Mock the T class\n        TestEntity object = new TestEntity();\n        // Mock the clazz\n        Class<TestEntity> clazz = TestEntity.class;\n        // Mock the IService\n        IService<TestEntity> service = mock(IService.class);\n        // Mock the SecurityUtils\n        SecurityUtils securityUtils = mock(SecurityUtils.class);\n        LoginUser loginUser = new LoginUser();\n        loginUser.setRealname(\"Mock User\");\n        when(securityUtils.getSubject().getPrincipal()).thenReturn(loginUser);\n        when(service.count()).thenReturn(100L);\n\n        // Controller initialization\n        JeecgTestController controller = new JeecgTestController();\n        controller.setService(service);\n\n        String title = \"Test\";\n        String exportFields = \"id,name\";\n        Integer pageNum = 10;\n\n        // Call the method we want to test\n        ModelAndView mv = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n\n        // Verify the returned ModelAndView\n        assertNotNull(mv);\n        assertEquals(JeecgEntityExcelView.class, mv.getView().getClass());\n\n        // You can add more detailed assertions here, such as checking if the model contains accurate data\n        assertEquals(title, mv.getModel().get(NormalExcelConstants.FILE_NAME));\n        List<Map<String, Object>> listMap = (List<Map<String, Object>>) mv.getModel().get(NormalExcelConstants.MAP_LIST);\n        assertNotNull(listMap);\n        assertEquals(10, listMap.size());\n\n        for (Map<String, Object> map : listMap) {\n            ExportParams params = (ExportParams) map.get(NormalExcelConstants.PARAMS);\n            assertNotNull(params);\n            assertEquals(title + \"\u62a5\u8868\", params.getTitle());\n            assertEquals(\"\u5bfc\u51fa\u4eba:\" + loginUser.getRealname(), params.getSecondTitle());\n        }\n    }\n    \n    // Inner class for the JeecgTestController to be tested\n    // Note: This is a simplified assumed controller for the exportXlsSheet method to be tested.\n    class JeecgTestController {\n        private IService<TestEntity> service;\n        \n        public void setService(IService<TestEntity> service) {\n            this.service = service;\n        }\n\n        public ModelAndView exportXlsSheet(HttpServletRequest request, TestEntity object, Class<TestEntity> clazz, String title, String exportFields, Integer pageNum) {\n            // The method's implementation remains the same as provided above\n            // ...\n        }\n    }\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.springframework.web.servlet.ModelAndView;\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.*;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JeecgControllerTest {\n\n    private JeecgController controller; // Assuming there's a JeecgController class to be tested\n    private HttpServletRequest request;\n    private Object service; // Assuming service is defined and appropriate mock setups are done elsewhere\n\n    @BeforeEach\n    public void setUp() {\n        controller = new JeecgController();\n        request = mock(HttpServletRequest.class);\n        service = mock(Object.class); // Should be the actual type of the service\n\n        // Mock setups for the request or other dependencies required by the controller\n        // For instance:\n        // when(request.getParameterMap()).thenReturn(new HashMap<String, String[]>());\n        // when(service.count()).thenReturn(100L); // Assuming service.count() should return a Long type\n    }\n\n    @Test\n    public void exportXlsSheetTest() {\n        // Assumptions for the test inputs. These should be customized to match real parameters and behavior\n        Class clazz = String.class; // Just a placeholder, should be the actual class of T\n        String title = \"TestTitle\";\n        String exportFields = \"id,name\"; // Based on the actual fields needed to be exported\n        int pageNum = 10;\n        \n        // Mocking the HttpServletRequest behaviors for parameters if required\n        Map<String, String[]> parameterMap = new HashMap<>();\n        parameterMap.put(\"selections\", new String[]{\"1\", \"2\"});\n        when(request.getParameterMap()).thenReturn(parameterMap);\n        when(request.getParameter(\"selections\")).thenReturn(\"1,2\");\n\n        LoginUser sysUser = new LoginUser();\n        sysUser.setRealname(\"MockUser\");\n        \n        // Mock the security context to return the mocked `sysUser`\n        // E.g., SecurityUtils.getSubject().getPrincipal() can return `sysUser`\n\n        // Call the method under test\n        ModelAndView mv = controller.exportXlsSheet(request, new Object(), clazz, title, exportFields, pageNum);\n\n        // Assertions to verify the results\n        assertNotNull(mv, \"ModelAndView should not be null\");\n        assertEquals(title, mv.getModel().get(NormalExcelConstants.FILE_NAME), \"The file name should match the expected title\");\n        List<Map<String, Object>> listMap = (List<Map<String, Object>>) mv.getModel().get(NormalExcelConstants.MAP_LIST);\n        assertNotNull(listMap, \"The list of maps should not be null\");\n        assertFalse(listMap.isEmpty(), \"The list of maps should not be empty\");\n\n        // Further assertions can be made based on expected behavior like\n        // checking the content of the maps inside listMap for correctness, or\n        // verifying that the expected methods on the mocked 'service' were called with the right arguments.\n    }\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.jeecg.common.system.query.QueryGenerator;\nimport org.jeecg.common.system.vo.LoginUser;\nimport org.jeecgframework.poi.excel.entity.ExportParams;\nimport org.jeecgframework.poi.excel.entity.enmus.ExcelType;\nimport org.jeecgframework.poi.excel.entity.vo.NormalExcelConstants;\nimport org.jeecgframework.poi.excel.view.JeecgEntityExcelView;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport org.apache.shiro.SecurityUtils;\nimport org.apache.shiro.subject.Subject;\nimport org.apache.shiro.util.ThreadContext;\nimport org.jeecg.common.system.base.service.JeecgService;\nimport org.springframework.web.servlet.ModelAndView;\n\npublic class JeecgControllerTest {\n    \n    @Test\n    public void exportXlsSheetTest() {\n        // Arrange\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        JeecgService service = mock(JeecgService.class);\n        LoginUser loginUser = new LoginUser();\n        \n        ExportController exportController = new ExportController();\n        exportController.setService(service);\n        \n        Subject subject = mock(Subject.class);\n        ThreadContext.bind(subject);\n        when(subject.getPrincipal()).thenReturn(loginUser);\n        \n        Integer pageNum = 10;\n        String title = \"Test Report\";\n        String exportFields = \"id,name\";\n        Object myEntityClassInstance = new Object(); // Replace with actual class instance\n        Class<?> myEntityClass = myEntityClassInstance.getClass();\n        \n        double totalCount = 100.0;\n        when(service.count()).thenReturn((long)totalCount);\n        when(request.getParameterMap()).thenReturn(new HashMap<String,String[]>());\n        \n        // Assume this method initializes the wrapper with the necessary configuration\n        QueryWrapper<?> queryWrapper = QueryGenerator.initQueryWrapper(myEntityClassInstance, request.getParameterMap());\n\n        // Loop to mock the service.page call\n        int pageCount = (int)Math.ceil(totalCount / pageNum);\n        for (int i = 1; i <= pageCount; i++) {\n            Page<?> page = new Page<>(i, pageNum);\n            IPage<?> pageList = mock(IPage.class);\n            when(pageList.getRecords()).thenReturn(Arrays.asList(myEntityClassInstance)); // Stubbing to return a list with the dummy entity instance\n            when(service.page(page, queryWrapper)).thenReturn(pageList);\n        }\n        \n        // Act\n        ModelAndView result = exportController.exportXlsSheet(request, myEntityClassInstance, myEntityClass, title, exportFields, pageNum);\n        \n        // Assert\n        assertNotNull(result, \"ModelAndView should not be null\");\n        assertEquals(JeecgEntityExcelView.class, result.getView().getClass(), \"View should be an instance of JeecgEntityExcelView\");\n        assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME), \"The title in the ModelAndView does not match\");\n    }\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.web.servlet.ModelAndView;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\n\n// Assuming the following additional imports representing the mocked environment\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class JeecgControllerTest {\n\n    // Assuming the existence of a class that implements an interface for the service\n    @Mock\n    private YourServiceClass<T> service;\n\n    @Mock\n    private HttpServletRequest request;\n\n    @Mock\n    private SecurityUtils securityUtils; // Mock of the SecurityUtils class\n\n    // Assuming a class that implements a LoginUser interface\n    @Mock\n    private LoginUser sysUser;\n\n    @InjectMocks\n    private YourControllerClass<T> controller;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void exportXlsSheetTest() {\n        // Step 1: Mock the dependencies and the behavior\n        when(request.getParameterMap()).thenReturn(new HashMap<String, String[]>());\n        when(request.getParameter(\"selections\")).thenReturn(\"1,2,3\");\n\n        when(SecurityUtils.getSubject().getPrincipal()).thenReturn(sysUser);\n        when(sysUser.getRealname()).thenReturn(\"Test User\");\n\n        when(service.count()).thenReturn(30.0);\n\n        QueryWrapper<T> queryWrapper = new QueryWrapper<>();\n        List<T> mockedList = Arrays.asList(mock(T.class), mock(T.class), mock(T.class));\n        Page<T> mockPage = new Page<>(1, 10);\n        IPage<T> mockPageList = mock(IPage.class);\n        when(mockPageList.getRecords()).thenReturn(mockedList);\n\n        when(service.page(any(Page.class), any(QueryWrapper.class))).thenReturn(mockPageList);\n        \n        // Step 2: Call the method to be tested\n        ModelAndView result = controller.exportXlsSheet(request, mock(T.class), T.class, \"Test Title\", \"id,name,age\", 10);\n        \n        // Step 3: Assertions to test method's correctness\n        assertNotNull(result);\n        assertEquals(\"Test Title\", result.getModel().get(NormalExcelConstants.FILE_NAME));\n\n        List<Map<String, Object>> listMap = (List<Map<String, Object>>) result.getModel().get(NormalExcelConstants.MAP_LIST);\n        assertNotNull(listMap);\n        assertFalse(listMap.isEmpty());\n\n        Map<String, Object> dataMap = listMap.get(0);\n        assertNotNull(dataMap.get(NormalExcelConstants.PARAMS));\n        assertEquals(T.class, dataMap.get(NormalExcelConstants.CLASS));\n        assertEquals(mockedList, dataMap.get(NormalExcelConstants.DATA_LIST));\n    }\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.springframework.web.servlet.ModelAndView;\n\npublic class JeecgControllerTest {\n\n    private JeecgController controller;\n    private MockHttpServletRequest request;\n    private final int DEFAULT_PAGE_NUM = 10;\n    \n    @BeforeEach\n    public void setUp() {\n        // initialize controller and request objects as needed\n        controller = new JeecgController(); // Assuming a controller named JeecgController exists\n        request = new MockHttpServletRequest();\n    }\n\n    @Test\n    public void exportXlsSheetTest() {\n        // Setting up the request and required parameters\n\n        String title = \"Test Title\";\n        String exportFields = \"id,name\";\n        Integer pageNum = DEFAULT_PAGE_NUM;\n        request.addParameter(\"page\", \"1\"); // Example parameter\n        request.addParameter(\"pageSize\", String.valueOf(pageNum));\n        request.addParameter(\"selections\", \"1,2,3\"); // Example selected IDs\n        \n        // Call the exportXlsSheet method with mock parameters\n        ModelAndView mv = controller.exportXlsSheet(request, new YourEntity(), YourEntity.class, title, exportFields, pageNum);\n        \n        // Assertions to verify the ModelAndView object is set up correctly\n        assertNotNull(mv, \"ModelAndView should not be null\");\n        assertEquals(\"Export View Name Here\", mv.getViewName(), \"View name should match the expected export view\");\n        assertNotNull(mv.getModel().get(NormalExcelConstants.MAP_LIST), \"MAP_LIST should be present in the model\");\n        assertTrue(mv.getModel().get(NormalExcelConstants.MAP_LIST) instanceof List, \"MAP_LIST should be of type List\");\n        // Add more assertions as needed to test other aspects of the response\n        \n        // Additional test cases could be written to handle different scenarios, e.g., no results, exception cases, etc.\n    }\n    \n    // Add @AfterEach or @AfterAll if cleanup is needed.\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.springframework.web.servlet.ModelAndView;\nimport javax.servlet.http.HttpServletRequest;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JeecgControllerTest {\n\n    @Test\n    public void exportXlsSheetTest() {\n        // Mock dependencies and objects required for the test\n        HttpServletRequest mockRequest = mock(HttpServletRequest.class);\n        Object serviceMock = mock(Object.class);\n        Class clazz = Object.class;\n        String title = \"TestTitle\";\n        String exportFields = \"field1,field2,field3\";\n        Integer pageNum = 10;\n        \n        // Mock calls and return values that would be used/needed in the method\n        when(mockRequest.getParameterMap()).thenReturn(new java.util.HashMap<>());\n        when(mockRequest.getParameter(\"selections\")).thenReturn(\"1,2,3\");\n        when(serviceMock.count()).thenReturn(100L); // Assuming the service has a count method returning long\n        \n        // Create an instance of the controller (or the class that contains the exportXlsSheet method)\n        JeecgController controller = new JeecgController(); // Assuming a default constructor\n        \n        // Execute the method to test\n        ModelAndView mv = controller.exportXlsSheet(mockRequest, new Object(), clazz, title, exportFields, pageNum);\n        \n        // Perform assertions to validate the outcome\n        assertNotNull(mv, \"The ModelAndView should not be null\");\n        assertEquals(\"TestTitle\", mv.getModel().get(NormalExcelConstants.FILE_NAME), \"The file name should match the title\");\n        assertTrue(mv.getModel().get(NormalExcelConstants.MAP_LIST) instanceof List, \"The map list should be a list\");\n        List<Map<String, Object>> listMap = (List<Map<String, Object>>) mv.getModel().get(NormalExcelConstants.MAP_LIST);\n        assertFalse(listMap.isEmpty(), \"The listMap should not be empty\");\n        assertEquals(10, listMap.size(), \"The list should have as many entries as sheets\");\n        \n        // Additional assertions on the map contents can be performed here\n    }\n\n    // This inner class is a placeholder. You must replace it with the actual class that you are testing.\n    private class JeecgController {\n        protected ModelAndView exportXlsSheet(HttpServletRequest request, Object object, Class clazz, String title, String exportFields, Integer pageNum) {\n            // Implementation of the method.\n            return new ModelAndView();\n        }\n    }\n\n    // Replace this placeholder with the actual constants class that needs to be used in the test.\n    private static class NormalExcelConstants {\n        public static final String FILE_NAME = \"filename\";\n        public static final String MAP_LIST = \"mapList\";\n    }\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.springframework.web.servlet.ModelAndView;\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.List;\nimport java.util.Map;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JeecgControllerTest {\n    @Test\n    public void exportXlsSheetTest() {\n        // Assuming `JeecgController` is the class where `exportXlsSheet` method is defined\n        JeecgController controller = new JeecgController();\n\n        // Mock dependencies and objects\n        HttpServletRequest mockRequest = mock(HttpServletRequest.class);\n        JeecgService<T> mockService = mock(JeecgService.class);\n        LoginUser mockUser = mock(LoginUser.class);\n        SecurityUtils mockSecurityUtils = mock(SecurityUtils.class);\n        when(SecurityUtils.getSubject().getPrincipal()).thenReturn(mockUser);\n\n        // Mock behavior of service and request\n        when(mockService.count()).thenReturn(100L); // Assume service count will return 100\n        when(mockRequest.getParameterMap()).thenReturn(new HashMap<>()); // Assume parameterMap is empty\n        when(mockRequest.getParameter(\"selections\")).thenReturn(\"1,2,3\"); // Assume selections are \"1,2,3\"\n\n        // Mocked class to test\n        Class<T> clazz = (Class<T>) mock(Class.class);\n        String title = \"TestTitle\";\n        String exportFields = \"field1,field2\";\n        Integer pageNum = 10;\n\n        // Call the method to test\n        ModelAndView result = controller.exportXlsSheet(mockRequest, mock(T.class), clazz, title, exportFields, pageNum);\n\n        // Verify the result\n        assertNotNull(result);\n        assertEquals(\"JeecgEntityExcelView\", result.getView().getClass().getSimpleName());\n        \n        // Check the model map content\n        Map<String, Object> modelMap = result.getModel();\n        assertTrue(modelMap.containsKey(NormalExcelConstants.FILE_NAME));\n        assertTrue(modelMap.containsKey(NormalExcelConstants.MAP_LIST));\n        \n        // Further assertions can be made depending on the expected behavior\n        // For instance, you might want to check if the file name is as expected\n        assertEquals(title, modelMap.get(NormalExcelConstants.FILE_NAME));\n        \n        // Verify if the list of maps contains the data\n        List<Map<String, Object>> listMap = (List<Map<String, Object>>) modelMap.get(NormalExcelConstants.MAP_LIST);\n        assertNotNull(listMap);\n        assertFalse(listMap.isEmpty());\n        \n        // Depending on the logic, you might want to verify the contents of the map in depth\n    }\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class JeecgControllerTest {\n\n    @Test\n    public void exportXlsSheetTest() {\n        // Mock the dependencies of the method to exportXlsSheet\n        JeecgController controller = spy(new JeecgController());\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        Object object = new Object(); // Replace with actual 'object' needed for the test\n        Class clazz = Object.class; // Replace with actual class used in the test\n        String title = \"Test Title\";\n        String exportFields = \"id,name\"; // Modify as per the actual fields \n        Integer pageNum = 10; // or any appropriate page number\n        LoginUser loginUser = mock(LoginUser.class); // Replace with appropriate mocked LoginUser\n        when(loginUser.getRealname()).thenReturn(\"Test User\");\n\n        // Mocking static method SecurityUtils.getSubject().getPrincipal()\n        Subject mockSubject = mock(Subject.class);\n        PowerMockito.mockStatic(SecurityUtils.class);\n        when(SecurityUtils.getSubject()).thenReturn(mockSubject);\n        when(mockSubject.getPrincipal()).thenReturn(loginUser);\n\n        // Mocking the service call for counting total elements\n        Service service = mock(Service.class);\n        when(service.count()).thenReturn(100L); // or any appropriate count\n        controller.service = service; // Presuming there's a service attribute in JeecgController\n\n        // Partial mocking of the controller to return mock data for the service.page call\n        when(controller.page(any(Page.class), any(QueryWrapper.class))).thenReturn(mock(IPage.class));\n\n        // Actual call to the method to test\n        ModelAndView modelAndView = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n\n        // Assertions to verify the results\n        assertNotNull(modelAndView);\n        assertEquals(\"jeecgEntityExcelView\", modelAndView.getViewName());\n\n        // Verify that the model contains necessary attributes\n        assertTrue(modelAndView.getModel().containsKey(NormalExcelConstants.FILE_NAME));\n        assertTrue(modelAndView.getModel().containsKey(NormalExcelConstants.MAP_LIST));\n\n        // Add the test checks that are specific to your system\n        // For example, if you wish to check the contents of the list, you could retrieve the list and perform assertions on it\n        // This is an abstract example since the actual implementation details and checks will be specific to your requirement\n    }\n}"
    ]
}