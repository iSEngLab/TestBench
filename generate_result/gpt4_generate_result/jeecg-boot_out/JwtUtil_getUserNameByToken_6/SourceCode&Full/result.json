{
    "project_name": "jeecg-boot",
    "file_name": "JwtUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/util/JwtUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.system.util",
    "docstring": "/**\n\t * \u6839\u636erequest\u4e2d\u7684token\u83b7\u53d6\u7528\u6237\u8d26\u53f7\n\t * \n\t * @param request\n\t * @return\n\t * @throws JeecgBootException\n\t */",
    "source_code": "\npublic static String getUserNameByToken(HttpServletRequest request) throws JeecgBootException {\n\tString accessToken = request.getHeader(\"X-Access-Token\");\n\tString username = getUsername(accessToken);\n\tif (oConvertUtils.isEmpty(username)) {\n\t\tthrow new JeecgBootException(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\");\n\t}\n\treturn username;\n}\n",
    "class_name": "JwtUtil",
    "method_name": "getUserNameByToken",
    "arguments": [
        "HttpServletRequest request"
    ],
    "generate_test": [
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.when;\nimport javax.servlet.http.HttpServletRequest;\nimport org.jeecg.common.exception.JeecgBootException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JwtUtilTest {\n\n    @Test\n    public void getUserNameByTokenTest_WhenUsernameIsPresent() {\n        // Arrange\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(\"dummyToken\");\n\n        // Assume 'getUsername' static method will return a non-null/non-empty username for the 'dummyToken'\n        String expectedUsername = \"testUser\";\n        Mockito.mockStatic(JwtUtil.class);\n        when(JwtUtil.getUsername(\"dummyToken\")).thenReturn(expectedUsername);\n\n        // Act\n        String actualUsername = JwtUtil.getUserNameByToken(request);\n\n        // Assert\n        assertEquals(expectedUsername, actualUsername, \"The username should match the expected value.\");\n    }\n\n    @Test\n    public void getUserNameByTokenTest_WhenUsernameIsEmpty() {\n        // Arrange\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(\"dummyToken\");\n\n        // Assume 'getUsername' static method will return a null/empty username for the 'dummyToken'\n        Mockito.mockStatic(JwtUtil.class);\n        when(JwtUtil.getUsername(\"dummyToken\")).thenReturn(null);\n\n        // Act and Assert\n        assertThrows(JeecgBootException.class, () -> JwtUtil.getUserNameByToken(request), \n            \"Should throw JeecgBootException when username is not found.\");\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.when;\n\npublic class JwtUtilTest {\n    \n    private HttpServletRequest request;\n    private final String sampleToken = \"Bearer TestToken\";\n    private final String sampleUsername = \"TestUser\";\n\n    @BeforeEach\n    public void setup() {\n        request = Mockito.mock(HttpServletRequest.class);\n    }\n\n    @Test\n    public void getUserNameByTokenTest() {\n        // Mock the HttpServletRequest to return a specific header value\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(sampleToken);\n\n        // Stub the JwtUtil.getUsername() method to return a specific username for the mocked token\n        Mockito.mockStatic(JwtUtil.class);\n        Mockito.when(JwtUtil.getUsername(sampleToken)).thenReturn(sampleUsername);\n\n        // Call the method under test and assert the expected username is returned\n        try {\n            String username = JwtUtil.getUserNameByToken(request);\n            assertEquals(sampleUsername, username, \"Expected username was not returned\");\n        } catch (JeecgBootException e) {\n            fail(\"JeecgBootException should not be thrown with a valid token\");\n        }\n    }\n\n    @Test\n    public void getUserNameByTokenTestThrowsExceptionWhenTokenInvalid() {\n        // Mock the HttpServletRequest to return a specific header value\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(sampleToken);\n\n        // Stub the JwtUtil.getUsername() method to return null for the mocked token, simulating an invalid token\n        Mockito.mockStatic(JwtUtil.class);\n        Mockito.when(JwtUtil.getUsername(sampleToken)).thenReturn(null);\n\n        // Call the method under test and assert an exception is thrown\n        assertThrows(JeecgBootException.class, () -> {\n            JwtUtil.getUserNameByToken(request);\n        }, \"JeecgBootException was expected to be thrown with an invalid token\");\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport javax.servlet.http.HttpServletRequest;\n\npublic class JwtUtilTest {\n\n    @Test\n    public void getUserNameByTokenTest() throws JeecgBootException {\n        // Mock HttpServletRequest\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        \n        // Define the token we expect to receive in the header\n        String expectedToken = \"dummyToken\";\n        String expectedUsername = \"testUser\";\n\n        // When getHeader is called with \"X-Access-Token\", return the expectedToken\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(expectedToken);\n        \n        // Assuming JwtUtil.getUsername() is correctly implemented and returning expectedUsername for the expectedToken\n        String username = JwtUtil.getUserNameByToken(request);\n\n        // Verify getHeader was called\n        verify(request).getHeader(\"X-Access-Token\");\n        \n        // Assert that the returned username is as expected\n        assertEquals(expectedUsername, username);\n    }\n\n    @Test\n    public void getUserNameByTokenTest_throwsException() {\n        // Mock HttpServletRequest\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        \n        // When getHeader is called with \"X-Access-Token\", return null to simulate no token provided\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(null);\n\n        // Assert that the JeecgBootException is thrown\n        Exception exception = assertThrows(JeecgBootException.class, () -> {\n            JwtUtil.getUserNameByToken(request);\n        });\n\n        // Verify that the message of the thrown exception is as expected\n        String expectedMessage = \"\u672a\u83b7\u53d6\u5230\u7528\u6237\";\n        String actualMessage = exception.getMessage();\n        \n        assertEquals(expectedMessage, actualMessage);\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.when;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() {\n        // Create a mock HttpServletRequest instance\n        HttpServletRequest requestMock = Mockito.mock(HttpServletRequest.class);\n\n        // Create a valid token for the test\n        String testUsername = \"testUser\";\n        String testSecret = \"testSecret\";\n        String validToken = JwtUtil.sign(testUsername, testSecret);\n\n        // Mock the behavior of getting token from the request header\n        when(requestMock.getHeader(\"X-Access-Token\")).thenReturn(validToken);\n\n        // Assert the correct username is retrieved from the token\n        try {\n            String extractedUsername = JwtUtil.getUserNameByToken(requestMock);\n            assertNotNull(extractedUsername, \"Username should not be null\");\n            assertEquals(testUsername, extractedUsername, \"Extracted username should match testUsername\");\n        } catch (JeecgBootException e) {\n            fail(\"Should not throw an exception for a valid token\");\n        }\n\n        // Test scenario with invalid token causing a JeecgBootException to be thrown\n        String invalidToken = \"invalidToken\";\n        when(requestMock.getHeader(\"X-Access-Token\")).thenReturn(invalidToken);\n        assertThrows(JeecgBootException.class, () -> JwtUtil.getUserNameByToken(requestMock), \"Should throw JeecgBootException for invalid token\");\n    }\n}",
        "### JUNIT Test case:\npackage org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() {\n        String expectedUsername = \"testUser\";\n        String mockToken = JwtUtil.sign(expectedUsername, \"testSecret\");\n\n        HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);\n        Mockito.when(mockRequest.getHeader(\"X-Access-Token\")).thenReturn(mockToken);\n\n        String actualUsername = null;\n        try {\n            actualUsername = JwtUtil.getUserNameByToken(mockRequest);\n        } catch (JeecgBootException e) {\n            fail(\"Exception should not be thrown\");\n        }\n\n        assertNotNull(actualUsername, \"The username should not be null\");\n        assertEquals(expectedUsername, actualUsername, \"The username should match the expected username\");\n    }\n\n    @Test\n    public void getUserNameByTokenWhenUsernameIsEmptyTest() {\n        String mockToken = \"\";\n\n        HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);\n        Mockito.when(mockRequest.getHeader(\"X-Access-Token\")).thenReturn(mockToken);\n\n        Exception exception = assertThrows(JeecgBootException.class, () -> {\n            JwtUtil.getUserNameByToken(mockRequest);\n        });\n\n        String expectedMessage = \"\u672a\u83b7\u53d6\u5230\u7528\u6237\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage), \"The exception message should contain the expected text\");\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() {\n        // Mock the HttpServletRequest\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        // Define the token and username we expect to test\n        String expectedToken = \"someTokenValue\";\n        String expectedUsername = \"testUser\";\n        \n        // When JwtUtil.getUsername is called with expectedToken, return expectedUsername\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(expectedToken);\n        doReturn(expectedUsername).when(JwtUtil.class);\n        JwtUtil.getUsername(expectedToken);\n\n        // Test getUserNameByToken with the mocked request\n        try {\n            String actualUsername = JwtUtil.getUserNameByToken(request);\n            assertEquals(expectedUsername, actualUsername, \"The username should match the expected value\");\n        } catch (JeecgBootException e) {\n            fail(\"JeecgBootException should not be thrown when the username is obtained correctly\");\n        }\n\n        // Now, test for the case where the token does not yield a username.\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(expectedToken);\n        doReturn(null).when(JwtUtil.class);\n        JwtUtil.getUsername(expectedToken);\n        \n        // Expect the custom exception to be thrown because of a missing user\n        assertThrows(JeecgBootException.class, () -> JwtUtil.getUserNameByToken(request),\n                \"JeecgBootException should be thrown when the username cannot be obtained\");\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport javax.servlet.http.HttpServletRequest;\nimport org.jeecg.common.exception.JeecgBootException;\n\npublic class JwtUtilTest {\n\n    @Test\n    public void getUserNameByTokenTest() {\n        HttpServletRequest mockRequest = mock(HttpServletRequest.class);\n        // Assume the token is valid and associated with the username \"testUser\"\n        String fakeToken = \"fakeTokenWithUsernameTestUser\";\n        String expectedUsername = \"testUser\";\n\n        when(mockRequest.getHeader(\"X-Access-Token\")).thenReturn(fakeToken);\n        \n        // Mock the static method 'getUsername' to return the expected username associated with the token\n        try (MockedStatic<JwtUtil> mockedStatic = mockStatic(JwtUtil.class)) {\n            mockedStatic.when(() -> JwtUtil.getUsername(fakeToken)).thenReturn(expectedUsername);\n\n            // Test for the valid case\n            String actualUsername = JwtUtil.getUserNameByToken(mockRequest);\n            assertEquals(expectedUsername, actualUsername, \"The username should match the expected value\");\n\n            // Test for the case when the username is not retrieved\n            mockedStatic.when(() -> JwtUtil.getUsername(fakeToken)).thenReturn(null);\n            assertThrows(JeecgBootException.class, () -> JwtUtil.getUserNameByToken(mockRequest),\n                \"A JeecgBootException should be thrown when the username cannot be retrieved\");\n        }\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.when;\n\npublic class JwtUtilTest {\n\n    @Test\n    public void getUserNameByTokenTest() throws JeecgBootException {\n        // Mock HttpServletRequest\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        // Define the expected username and token for testing\n        final String expectedUsername = \"testUser\";\n        final String mockToken = \"mockedToken\";\n        \n        // When JwtUtil.getUsername is called with the mockToken, it should return expectedUsername\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(mockToken);\n        Mockito.mockStatic(JwtUtil.class);\n        Mockito.when(JwtUtil.getUsername(mockToken)).thenReturn(expectedUsername);\n        \n        // When oConvertUtils.isEmpty is called with any String, return false (as the expectedUsername is not empty)\n        Mockito.mockStatic(oConvertUtils.class);\n        Mockito.when(oConvertUtils.isEmpty(expectedUsername)).thenReturn(false);\n\n        // Call the actual method with the mocked request\n        String resultUsername = JwtUtil.getUserNameByToken(request);\n        \n        // Assert the result is as expected\n        assertEquals(expectedUsername, resultUsername, \"The username should be the expected one.\");\n    }\n\n    @Test\n    public void getUserNameByTokenWhenTokenIsEmptyTest() {\n        // Mock HttpServletRequest\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        // Define an empty token for testing\n        final String mockToken = \"\";\n\n        // When JwtUtil.getUsername is called with the mockToken, it should return null\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(mockToken);\n        Mockito.mockStatic(JwtUtil.class);\n        Mockito.when(JwtUtil.getUsername(mockToken)).thenReturn(null);\n\n        // oConvertUtils.isEmpty should return true for null\n        Mockito.mockStatic(oConvertUtils.class);\n        Mockito.when(oConvertUtils.isEmpty(null)).thenReturn(true);\n\n        // Execute the method and expect an exception\n        assertThrows(JeecgBootException.class, () -> JwtUtil.getUserNameByToken(request),\n                \"A JeecgBootException should be thrown when the username is not found.\");\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.when;\n\npublic class JwtUtilTest {\n\n    HttpServletRequest mockRequest;\n    String testToken;\n    String expectedUsername;\n\n    @BeforeEach\n    void setUp() {\n        // Mock HttpServletRequest\n        mockRequest = Mockito.mock(HttpServletRequest.class);\n        \n        // Define expected values and behavior\n        expectedUsername = \"testUser\";\n        testToken = JwtUtil.sign(expectedUsername, \"testSecret\");\n        when(mockRequest.getHeader(\"X-Access-Token\")).thenReturn(testToken);\n    }\n\n    @Test\n    public void getUserNameByTokenTest() {\n        // Mock the situation where the token is obtained from the request\n        String actualUsername = null;\n        try {\n            actualUsername = JwtUtil.getUserNameByToken(mockRequest);\n        } catch (JeecgBootException e) {\n            assertNull(e, \"JeecgBootException should not be thrown\");\n        }\n\n        // Verify that the correct username is retrieved from the token\n        assertEquals(expectedUsername, actualUsername, \"The username retrieved from the token should match the expected value\");\n    }\n\n    @Test\n    public void getUserNameByTokenThrowsExceptionTest() {\n        // Mock the situation where the token is not in request\n        when(mockRequest.getHeader(\"X-Access-Token\")).thenReturn(null);\n\n        // Verify that JeecgBootException is thrown when token is not found\n        assertThrows(JeecgBootException.class, () -> JwtUtil.getUserNameByToken(mockRequest), \"JeecgBootException should be thrown when token is not found\");\n    }\n\n    @AfterEach\n    void tearDown() {\n        // Cleanup\n        mockRequest = null;\n        testToken = null;\n        expectedUsername = null;\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.mockito.Mockito;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.when;\n\npublic class JwtUtilTest {\n\n    private HttpServletRequest request;\n\n    @BeforeEach\n    void setUp() {\n        request = Mockito.mock(HttpServletRequest.class);\n    }\n\n    @Test\n    public void getUserNameByTokenTestWithValidToken() {\n        // Arrange: Create a valid token for the test\n        String expectedUsername = \"testUser\";\n        String token = JwtUtil.sign(expectedUsername, \"testSecret\");\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(token);\n\n        // Act: Get Username by token\n        String actualUsername = null;\n        try {\n            actualUsername = JwtUtil.getUserNameByToken(request);\n        } catch (JeecgBootException e) {\n            fail(\"Unexpected exception: \" + e.getMessage());\n        }\n                \n        // Assert: Check if the username retrieved matches the expected one\n        assertEquals(expectedUsername, actualUsername, \"The username should match the one encoded in the token\");\n    }\n\n    @Test\n    public void getUserNameByTokenTestWithInvalidToken() {\n        // Arrange: Use an invalid token format\n        String invalidToken = \"invalidToken\";\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(invalidToken);\n\n        // Assert: Expecting JeecgBootException because the token cannot be decoded\n        assertThrows(JeecgBootException.class, () -> {\n            JwtUtil.getUserNameByToken(request);\n        }, \"A JeecgBootException should be thrown when token is invalid\");\n    }\n\n    @Test\n    public void getUserNameByTokenTestWithNullToken() {\n        // Arrange: No token provided in the request\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(null);\n\n        // Assert: Expecting JeecgBootException because the token is missing\n        assertThrows(JeecgBootException.class, () -> {\n            JwtUtil.getUserNameByToken(request);\n        }, \"A JeecgBootException should be thrown when token is null\");\n    }\n}"
    ]
}