{
    "project_name": "jeecg-boot",
    "file_name": "JwtUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/util/JwtUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.system.util",
    "docstring": "/**\n\t * \u6839\u636erequest\u4e2d\u7684token\u83b7\u53d6\u7528\u6237\u8d26\u53f7\n\t * \n\t * @param request\n\t * @return\n\t * @throws JeecgBootException\n\t */",
    "source_code": "\npublic static String getUserNameByToken(HttpServletRequest request) throws JeecgBootException {\n\tString accessToken = request.getHeader(\"X-Access-Token\");\n\tString username = getUsername(accessToken);\n\tif (oConvertUtils.isEmpty(username)) {\n\t\tthrow new JeecgBootException(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\");\n\t}\n\treturn username;\n}\n",
    "class_name": "JwtUtil",
    "method_name": "getUserNameByToken",
    "arguments": [
        "HttpServletRequest request"
    ],
    "generate_test": [
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\npublic class JwtUtilTest {\n    private HttpServletRequest request;\n    \n    @BeforeEach\n    public void setUp() {\n        // Mockito setup to mock the HttpServletRequest\n        request = mock(HttpServletRequest.class);\n    }\n    \n    @Test\n    public void getUserNameByTokenTest_validToken() {\n        // Assume getUsername(accessToken) returns a non-empty username\n        String expectedUsername = \"testUser\";\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(\"dummyToken\");\n        when(JwtUtil.getUsername(\"dummyToken\")).thenReturn(expectedUsername);\n        \n        String actualUsername = JwtUtil.getUserNameByToken(request);\n        assertEquals(expectedUsername, actualUsername);\n    }\n    \n    @Test\n    public void getUserNameByTokenTest_invalidToken() {\n        // Assume getUsername(accessToken) returns an empty username or null\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(\"invalidToken\");\n        when(JwtUtil.getUsername(\"invalidToken\")).thenReturn(null);\n        \n        JeecgBootException exception = assertThrows(JeecgBootException.class, () -> {\n            JwtUtil.getUserNameByToken(request);\n        });\n        \n        assertEquals(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\", exception.getMessage());\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.Mockito;\nimport javax.servlet.http.HttpServletRequest;\n\npublic class JwtUtilTest {\n\n    @Test\n    public void getUserNameByTokenTest() {\n        String token = \"dummyToken\";\n        String expectedUsername = \"testUser\";\n\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        Mockito.when(request.getHeader(\"X-Access-Token\")).thenReturn(token);\n        Mockito.when(JwtUtil.getUsername(token)).thenReturn(expectedUsername);\n\n        try {\n            String actualUsername = JwtUtil.getUserNameByToken(request);\n            assertEquals(expectedUsername, actualUsername, \"Username should match the expected one.\");\n        } catch (JeecgBootException e) {\n            fail(\"Should not throw JeecgBootException when username is valid\");\n        }\n    }\n\n    @Test\n    public void getUserNameByTokenWhenTokenEmptyTest() {\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        Mockito.when(request.getHeader(\"X-Access-Token\")).thenReturn(null);\n\n        Exception exception = assertThrows(JeecgBootException.class, () -> {\n            JwtUtil.getUserNameByToken(request);\n        });\n\n        String expectedMessage = \"\u672a\u83b7\u53d6\u5230\u7528\u6237\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage), \"Exception message should be as expected.\");\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\npublic class JwtUtilTest {\n\n    @Test\n    public void getUserNameByTokenTest() throws JeecgBootException {\n        // Mock HttpServletRequest\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(\"mocked-token\");\n\n        // We need to mock the static methods in JwtUtil class\n        try (MockedStatic<JwtUtil> theMock = mockStatic(JwtUtil.class)) {\n            theMock.when(() -> JwtUtil.getUsername(\"mocked-token\")).thenReturn(\"mocked-username\");\n\n            // Test when the username is retrieved successfully\n            assertEquals(\"mocked-username\", JwtUtil.getUserNameByToken(request));\n\n            // Test when the username is null \n            theMock.when(() -> JwtUtil.getUsername(\"mocked-token\")).thenReturn(null);\n            assertThrows(JeecgBootException.class, () -> JwtUtil.getUserNameByToken(request), \"\u672a\u83b7\u53d6\u5230\u7528\u6237\");\n\n            // Test when the username is empty\n            theMock.when(() -> JwtUtil.getUsername(\"mocked-token\")).thenReturn(\"\");\n            assertThrows(JeecgBootException.class, () -> JwtUtil.getUserNameByToken(request), \"\u672a\u83b7\u53d6\u5230\u7528\u6237\");\n        }\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.when;\nimport static org.junit.jupiter.api.Assertions.*;\nimport javax.servlet.http.HttpServletRequest;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() {\n        // Arrange\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        final String tokenHeader = \"X-Access-Token\";\n        final String accessToken = \"dummyAccessToken\";\n        final String expectedUsername = \"testUser\";\n        \n        when(request.getHeader(tokenHeader)).thenReturn(accessToken);\n        when(JwtUtil.getUsername(accessToken)).thenReturn(expectedUsername);\n        // Mockito static methods need to use mockStatic\n        try (MockedStatic<oConvertUtils> mockedUtils = Mockito.mockStatic(oConvertUtils.class)) {\n            mockedUtils.when(() -> oConvertUtils.isEmpty(expectedUsername)).thenReturn(false);\n        \n            // Act\n            String username = JwtUtil.getUserNameByToken(request);\n        \n            // Assert\n            assertNotNull(username);\n            assertEquals(expectedUsername, username);\n        } catch (JeecgBootException e) {\n            fail(\"Exception should not have been thrown\");\n        }\n    }\n    \n    @Test\n    public void getUserNameByTokenExceptionTest() {\n        // Arrange\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        final String tokenHeader = \"X-Access-Token\";\n        final String accessToken = \"invalidToken\";\n        \n        when(request.getHeader(tokenHeader)).thenReturn(accessToken);\n        when(JwtUtil.getUsername(accessToken)).thenReturn(null);\n        // Mockito static methods need to use mockStatic\n        try (MockedStatic<oConvertUtils> mockedUtils = Mockito.mockStatic(oConvertUtils.class)) {\n            mockedUtils.when(() -> oConvertUtils.isEmpty(null)).thenReturn(true);\n        \n            // Act & Assert\n            assertThrows(JeecgBootException.class, () -> {\n                JwtUtil.getUserNameByToken(request);\n            });\n        }\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.springframework.mock.web.MockHttpServletRequest;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() {\n        // Create a mock HttpServletRequest\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        String expectedUsername = \"testUser\";\n        String token = JwtUtil.sign(expectedUsername, \"secret\");\n\n        // Set the expected header with the token\n        request.addHeader(\"X-Access-Token\", token);\n\n        // Test getUserNameByToken method\n        String result = null;\n        try {\n            result = JwtUtil.getUserNameByToken(request);\n        } catch (JeecgBootException e) {\n            fail(\"Exception should not be thrown: \" + e.getMessage());\n        }\n\n        // Assert that the result is as expected\n        assertNotNull(result, \"Resulting username should not be null\");\n        assertEquals(expectedUsername, result, \"The resulting username should match the expected username\");\n    }\n\n    @Test\n    public void getUserNameByTokenTest_withNoToken() {\n        // Create a mock HttpServletRequest without setting a token\n        MockHttpServletRequest request = new MockHttpServletRequest();\n\n        // Check if the correct exception is thrown when token is missing\n        Exception exception = assertThrows(JeecgBootException.class, () -> {\n            JwtUtil.getUserNameByToken(request);\n        });\n\n        // Assert the message of the thrown exception\n        String expectedMessage = \"\u672a\u83b7\u53d6\u5230\u7528\u6237\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage), \"Exception message should contain the text indicating that the user was not found\");\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() {\n        // Arrange\n        HttpServletRequest mockRequest = mock(HttpServletRequest.class);\n        final String testToken = \"testToken\";\n        final String testUsername = \"testUser\";\n        when(mockRequest.getHeader(\"X-Access-Token\")).thenReturn(testToken);\n        when(JwtUtil.getUsername(testToken)).thenReturn(testUsername);\n        \n        // Act\n        String username = null;\n        JeecgBootException thrownException = null;\n        try {\n            username = JwtUtil.getUserNameByToken(mockRequest);\n        } catch (JeecgBootException e) {\n            thrownException = e;\n        }\n\n        // Assert\n        assertNotNull(username, \"The username should not be null\");\n        assertNull(thrownException, \"No exception should be thrown when the username is found\");\n        assertEquals(testUsername, username, \"The username retrieved should be equal to the expected test username\");\n        \n        // Test when username is not found (exception case)\n        when(JwtUtil.getUsername(testToken)).thenReturn(null);\n        assertThrows(JeecgBootException.class, () -> JwtUtil.getUserNameByToken(mockRequest), \"JeecgBootException should be thrown when the username cannot be retrieved\");\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.springframework.mock.web.MockHttpServletRequest;\n\npublic class JwtUtilTest {\n\n    @Test\n    public void getUserNameByTokenTest() {\n        // Arrange\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        String expectedUsername = \"testUser\";\n        String token = JwtUtil.sign(expectedUsername, \"secret\");\n        request.addHeader(\"X-Access-Token\", token);\n\n        // Act & Assert\n        String actualUsername = null;\n        try {\n            actualUsername = JwtUtil.getUserNameByToken(request);\n        } catch (JeecgBootException e) {\n            fail(\"Exception should not be thrown\");\n        }\n\n        assertEquals(expectedUsername, actualUsername, \"The username should be equal to the expected username\");\n    }\n\n    @Test\n    public void getUserNameByTokenTest_whenTokenIsInvalid_thenExceptionIsThrown() {\n        // Arrange\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        request.addHeader(\"X-Access-Token\", \"invalidToken\");\n\n        // Act & Assert\n        Exception exception = assertThrows(JeecgBootException.class, () -> {\n            JwtUtil.getUserNameByToken(request);\n        });\n\n        String expectedMessage = \"\u672a\u83b7\u53d6\u5230\u7528\u6237\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage), \"Exception message should contain the expected message\");\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport javax.servlet.http.HttpServletRequest;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest_ValidToken() {\n        //Arrange\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        String expectedUsername = \"testUser\";\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(\"validToken\");\n        Mockito.mockStatic(JwtUtil.class);\n        when(JwtUtil.getUsername(\"validToken\")).thenReturn(expectedUsername);\n\n        //Act\n        String actualUsername = JwtUtil.getUserNameByToken(request);\n\n        //Assert\n        assertEquals(expectedUsername, actualUsername);\n    }\n\n    @Test\n    public void getUserNameByTokenTest_InvalidToken_ThrowsException() {\n        //Arrange\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(\"invalidToken\");\n        Mockito.mockStatic(JwtUtil.class);\n        when(JwtUtil.getUsername(\"invalidToken\")).thenReturn(\"\");\n\n        // Act & Assert\n        assertThrows(JeecgBootException.class, () -> {\n            JwtUtil.getUserNameByToken(request);\n        });\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\npublic class JwtUtilTest {\n    private HttpServletRequest request;\n    private final String mockToken = \"mocked-token\";\n    private final String mockUsername = \"mockUsername\";\n\n    @BeforeEach\n    public void setUp() {\n        request = Mockito.mock(HttpServletRequest.class);\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(mockToken);\n        JwtUtil.sign(mockUsername, \"mockSecret\"); // In a real scenario, you may need to set real secret\n    }\n\n    @Test\n    public void getUserNameByTokenTest_ValidToken_ExpectUsername() throws JeecgBootException {\n        // Assuming getUsername would return a valid username for a valid token\n        when(JwtUtil.getUsername(mockToken)).thenReturn(mockUsername);\n\n        String retrievedUsername = JwtUtil.getUserNameByToken(request);\n        assertEquals(mockUsername, retrievedUsername, \"Should return the same username that was signed in the token\");\n    }\n    \n    @Test\n    public void getUserNameByTokenTest_EmptyUsername_ExpectException() {\n        // Assuming getUsername would return an empty string or null for an invalid or expired token\n        when(JwtUtil.getUsername(mockToken)).thenReturn(\"\");\n\n        JeecgBootException thrown = assertThrows(JeecgBootException.class, () -> {\n            JwtUtil.getUserNameByToken(request);\n        }, \"JeecgBootException was expected\");\n\n        assertEquals(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\", thrown.getMessage(), \"The exception message should match the expected one.\");\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport javax.servlet.http.HttpServletRequest;\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.when;\n\npublic class JwtUtilTest {\n    \n    private final String VALID_TOKEN = \"ValidToken\";\n    private final String VALID_USERNAME = \"ValidUsername\";\n    private final String INVALID_TOKEN = \"InvalidToken\";\n    private HttpServletRequest request;\n\n    @BeforeEach\n    public void setUp() {\n        // Mock the HttpServletRequest\n        request = Mockito.mock(HttpServletRequest.class);\n    }\n\n    @Test\n    public void getUserNameByToken_ValidToken_ReturnsUsername() {\n        // Arrange\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(VALID_TOKEN);\n        Mockito.mockStatic(JwtUtil.class);\n        when(JwtUtil.getUsername(VALID_TOKEN)).thenReturn(VALID_USERNAME);\n\n        // Act\n        String username = \"\";\n        try {\n            username = JwtUtil.getUserNameByToken(request);\n        } catch (JeecgBootException e) {\n            fail(\"Exception should not be thrown for a valid token.\");\n        }\n\n        // Assert\n        assertEquals(VALID_USERNAME, username);\n    }\n\n    @Test\n    public void getUserNameByToken_InvalidToken_ThrowsException() {\n        // Arrange\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(INVALID_TOKEN);\n        Mockito.mockStatic(JwtUtil.class);\n        when(JwtUtil.getUsername(INVALID_TOKEN)).thenReturn(null);\n\n        // Act and Assert\n        Exception exception = assertThrows(JeecgBootException.class, () -> {\n            JwtUtil.getUserNameByToken(request);\n        });\n\n        String expectedMessage = \"\u672a\u83b7\u53d6\u5230\u7528\u6237\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}"
    ]
}