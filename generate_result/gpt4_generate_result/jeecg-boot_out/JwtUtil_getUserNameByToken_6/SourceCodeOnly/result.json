{
    "project_name": "jeecg-boot",
    "file_name": "JwtUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/util/JwtUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.system.util",
    "docstring": "/**\n\t * \u6839\u636erequest\u4e2d\u7684token\u83b7\u53d6\u7528\u6237\u8d26\u53f7\n\t * \n\t * @param request\n\t * @return\n\t * @throws JeecgBootException\n\t */",
    "source_code": "\npublic static String getUserNameByToken(HttpServletRequest request) throws JeecgBootException {\n\tString accessToken = request.getHeader(\"X-Access-Token\");\n\tString username = getUsername(accessToken);\n\tif (oConvertUtils.isEmpty(username)) {\n\t\tthrow new JeecgBootException(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\");\n\t}\n\treturn username;\n}\n",
    "class_name": "JwtUtil",
    "method_name": "getUserNameByToken",
    "arguments": [
        "HttpServletRequest request"
    ],
    "generate_test": [
        "package org.jeecg.common.system.util;\n\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.jeecg.common.util.oConvertUtils;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.mockito.Mockito.*;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() {\n        // Mock the HttpServletRequest\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        \n        // Define the accessToken and the expected username\n        String accessToken = \"testToken123\";\n        String expectedUsername = \"testUser\";\n\n        // Mock the getHeader method to return the accessToken when \"X-Access-Token\" is requested\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(accessToken);\n\n        // Mock the getUsername static method to return the expectedUsername when accessToken is passed\n        JwtUtil util = mock(JwtUtil.class);\n        when(util.getUsername(accessToken)).thenReturn(expectedUsername);\n\n        // Assume oConvertUtils.isEmpty returns false for a non-empty string\n        when(oConvertUtils.isEmpty(expectedUsername)).thenReturn(false);\n        \n        // Call the method to test\n        try {\n            String username = JwtUtil.getUserNameByToken(request);\n\n            // Validate the result\n            assertEquals(expectedUsername, username, \"The username should match the expected value\");\n        } catch (JeecgBootException e) {\n            fail(\"The method should not have thrown an exception: \" + e.getMessage());\n        }\n    }\n\n    @Test\n    public void getUserNameByTokenTestThrowsException() {\n        // Mock the HttpServletRequest\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        \n        // Define the accessToken and return null for the username to simulate an invalid token or user not found\n        String accessToken = \"invalidToken123\";\n        \n        // Mock the getHeader method to return the accessToken when \"X-Access-Token\" is requested\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(accessToken);\n\n        // Mock the getUsername static method to return null when accessToken is passed\n        JwtUtil util = mock(JwtUtil.class);\n        when(util.getUsername(accessToken)).thenReturn(null);\n        \n        // Assume oConvertUtils.isEmpty returns true for a null string\n        when(oConvertUtils.isEmpty(null)).thenReturn(true);\n\n        // Call the method to test and expect an exception\n        Exception exception = assertThrows(JeecgBootException.class, () -> {\n            JwtUtil.getUserNameByToken(request);\n        });\n\n        // Validate the exception message\n        assertEquals(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\", exception.getMessage(), \"The exception message should match the expected message\");\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\npublic class JwtUtilTest {\n\n    @Test\n    public void getUserNameByTokenSuccessfulTest() {\n        // Create a mock HttpServletRequest\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        \n        // Stub the getHeader method to return a fake access token\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(\"fakeAccessToken\");\n        \n        // Stub the getUsername static method\n        // Assuming getUsername is a static method of the class containing getUserNameByToken\n        // And assuming we have a way to mock static methods (e.g., using Mockito's mockStatic)\n        try (var mocked = mockStatic(JwtUtil.class)) {\n            mocked.when(() -> JwtUtil.getUsername(\"fakeAccessToken\")).thenReturn(\"TestUser\");\n            \n            // Test the actual method\n            String username = JwtUtil.getUserNameByToken(request);\n\n            // Verify the result\n            assertEquals(\"TestUser\", username);\n        }\n    }\n\n    @Test\n    public void getUserNameByTokenThrowsExceptionTest() {\n        // Create a mock HttpServletRequest\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        \n        // Stub the getHeader method to return null or an empty access token\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(null);\n        \n        // Stub the getUsername static method to return an empty string\n        try (var mocked = mockStatic(JwtUtil.class)) {\n            mocked.when(() -> JwtUtil.getUsername(null)).thenReturn(\"\");\n            \n            // Test the method\n            JeecgBootException exception = assertThrows(JeecgBootException.class, () -> {\n                JwtUtil.getUserNameByToken(request);\n            });\n            \n            // Verify the exception message\n            assertEquals(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\", exception.getMessage());\n        }\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport javax.servlet.http.HttpServletRequest;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.when;\n\npublic class JwtUtilTest {\n\n    @Test\n    public void getUserNameByTokenTest() {\n        // Mock HttpServletRequest\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        // Define input and expected result\n        String accessToken = \"testAccessToken\";\n        String expectedUsername = \"testUser\";\n\n        // When \"X-Access-Token\" header is requested, return the test access token\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(accessToken);\n\n        // Mock the static method getUsername - assuming a method can be mocked/expected result is set (this may require PowerMockito to handle the static method if it's from another utility class)\n        String actualUsername = JwtUtil.getUserNameByToken(request);\n\n        // Verify the result\n        assertEquals(expectedUsername, actualUsername, \"The username should be equal to the expected username.\");\n    }\n    \n    @Test\n    public void getUserNameByTokenWhenTokenInvalidTest() {\n        // Mock HttpServletRequest\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n\n        // When \"X-Access-Token\" header is requested, return null or empty indicating an invalid or missing token\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(null);\n\n        // Assert that the JeecgBootException is thrown due to the invalid token\n        Exception exception = assertThrows(JeecgBootException.class, () -> {\n            JwtUtil.getUserNameByToken(request);\n        });\n\n        // Verify the exception message\n        String expectedMessage = \"\u672a\u83b7\u53d6\u5230\u7528\u6237\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage), \"The exception message should contain the expected text.\");\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport javax.servlet.http.HttpServletRequest;\nimport org.mockito.Mockito;\nimport org.jeecg.common.exception.JeecgBootException;\n\npublic class JwtUtilTest {\n    \n    @Test\n    public void getUserNameByTokenTest() {\n        HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);\n        Mockito.when(mockRequest.getHeader(\"X-Access-Token\")).thenReturn(\"testToken\");\n\n        // Simulate the getUsername static method behavior\n        // Here we assume there is a static method JwtUtil.getUsername that is used \n        // in the getUserNameByToken method. You will need to create a mock for \n        // this static method if it's not directly testable or under your control.\n        String expectedUsername = \"testUser\";\n        // Assuming JwtUtil has a static method 'getUsername' that is to be mocked\n        Mockito.when(JwtUtil.getUsername(\"testToken\")).thenReturn(expectedUsername);\n\n        String result = JwtUtil.getUserNameByToken(mockRequest);\n\n        assertEquals(expectedUsername, result);\n    }\n\n    @Test\n    public void getUserNameByTokenWhenUsernameIsEmptyTest() {\n        HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);\n        Mockito.when(mockRequest.getHeader(\"X-Access-Token\")).thenReturn(\"emptyToken\");\n\n        // Again, simulating the getUsername method but returning an empty string this time\n        Mockito.when(JwtUtil.getUsername(\"emptyToken\")).thenReturn(\"\");\n\n        Exception exception = assertThrows(JeecgBootException.class, () -> {\n            JwtUtil.getUserNameByToken(mockRequest);\n        });\n\n        String expectedMessage = \"\u672a\u83b7\u53d6\u5230\u7528\u6237\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.springframework.mock.web.MockHttpServletRequest;\n\npublic class JwtUtilTest {\n\n    // Assuming we also have a mock method for mockGetUsername\n    private static String mockGetUsername(String accessToken) {\n        // this method should mimic the actual getUsername() behavior\n        if(\"knownToken\".equals(accessToken)) {\n            return \"testUser\";\n        } else {\n            return null;\n        }\n    }\n\n    // Replace getUsername method call with the mock method within the unit test\n    public static String getUserNameByToken(HttpServletRequest request) throws JeecgBootException {\n        String accessToken = request.getHeader(\"X-Access-Token\");\n        String username = mockGetUsername(accessToken);\n        if(username == null || username.isEmpty()) {\n            throw new JeecgBootException(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\");\n        }\n        return username;\n    }\n\n    @Test\n    public void getUserNameByTokenTestValidToken() {\n        // Setup\n        String expectedUsername = \"testUser\";\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        request.addHeader(\"X-Access-Token\", \"knownToken\");\n\n        // Execution\n        String actualUsername = getUserNameByToken(request);\n\n        // Verification\n        assertEquals(expectedUsername, actualUsername, \"Expected username to match the actual username\");\n    }\n\n    @Test\n    public void getUserNameByTokenTestInvalidToken() {\n        // Setup\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        request.addHeader(\"X-Access-Token\", \"unknownToken\");\n\n        // Execution & Verification\n        JeecgBootException exception = assertThrows(JeecgBootException.class, () -> {\n            getUserNameByToken(request);\n        }, \"Expected JeecgBootException to be thrown\");\n\n        // Verify the exception message\n        assertEquals(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\", exception.getMessage(), \"Exception message should match the expected message\");\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport javax.servlet.http.HttpServletRequest;\nimport org.mockito.Mockito;\n\npublic class JwtUtilTest {\n\n    @Test\n    public void getUserNameByTokenTest_WhenUsernameIsNotEmpty() {\n        // Arrange\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        Mockito.when(request.getHeader(\"X-Access-Token\")).thenReturn(\"validToken\");\n        Mockito.when(JwtUtil.getUsername(\"validToken\")).thenReturn(\"expectedUsername\");\n        Mockito.when(JwtUtil.oConvertUtils.isEmpty(\"expectedUsername\")).thenReturn(false);\n\n        // Act\n        String result = JwtUtil.getUserNameByToken(request);\n\n        // Assert\n        assertEquals(\"expectedUsername\", result);\n    }\n\n    @Test\n    public void getUserNameByTokenTest_WhenUsernameIsEmpty() {\n        // Arrange\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        Mockito.when(request.getHeader(\"X-Access-Token\")).thenReturn(\"invalidToken\");\n        Mockito.when(JwtUtil.getUsername(\"invalidToken\")).thenReturn(\"\");\n        Mockito.when(JwtUtil.oConvertUtils.isEmpty(\"\")).thenReturn(true);\n\n        // Act & Assert\n        JeecgBootException thrownException = assertThrows(JeecgBootException.class, () -> {\n            JwtUtil.getUserNameByToken(request);\n        });\n        assertEquals(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\", thrownException.getMessage());\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.jeecg.common.util.oConvertUtils;\nimport org.junit.jupiter.api.*;\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JwtUtilTest {\n\n    @Test\n    public void getUserNameByTokenTest() {\n        // Create a mock HttpServletRequest\n        HttpServletRequest request = mock(HttpServletRequest.class);\n\n        // Define the behavior of request.getHeader for \"X-Access-Token\" to return a valid token\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(\"validToken\");\n\n        // Define a static method stub for getUsername to return a username when presented with a \"validToken\"\n        mockStatic(JwtUtil.class);\n        when(JwtUtil.getUsername(\"validToken\")).thenReturn(\"TestUser\");\n\n        // Test for a valid username\n        assertDoesNotThrow(() -> {\n            String username = JwtUtil.getUserNameByToken(request);\n            assertNotNull(username);\n            assertEquals(\"TestUser\", username);\n        });\n\n        // Define the behavior of request.getHeader to return null for a missing token\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(null);\n\n        // Test for exception when token is not present or invalid\n        JeecgBootException thrownException = assertThrows(JeecgBootException.class, () -> {\n            JwtUtil.getUserNameByToken(request);\n        });\n\n        // Assert that the message of the thrown exception is as expected\n        assertEquals(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\", thrownException.getMessage());\n    }\n    \n    // Helper static method mocked to simulate JwtUtil.getUsername\n    private static String getUsername(String accessToken) {\n        // This method should return a username associated with the accessToken\n        // Placeholder method for testing; in actual case, it will communicate with JWT library or user service\n        if (\"validToken\".equals(accessToken)) {\n            return \"TestUser\";\n        } else {\n            return null;\n        }\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\nimport javax.servlet.http.HttpServletRequest;\n\npublic class JwtUtilTest {\n\n    @Test\n    public void getUserNameByTokenValidTokenTest() {\n        // Arrange\n        HttpServletRequest mockRequest = mock(HttpServletRequest.class);\n        String expectedUsername = \"testUser\";\n        String validAccessToken = \"validToken\";\n\n        when(mockRequest.getHeader(\"X-Access-Token\")).thenReturn(validAccessToken);\n        // Here we're assuming 'getUsername' is a static method on some class (which is not shown in the given Java source code)\n        // We will need to use PowerMockito or some other mechanism to mock this static method since Mockito does not support static methods for versions before 3.4.0.\n        // For Mockito 3.4.0 and newer, we can use Mockito.mockStatic.\n        // Assuming it is on a class called AccessTokenProcessor for the sake of this example:\n        try (MockedStatic<AccessTokenProcessor> mockedStatic = mockStatic(AccessTokenProcessor.class)) {\n            mockedStatic.when(() -> AccessTokenProcessor.getUsername(validAccessToken)).thenReturn(expectedUsername);\n\n            // Act\n            String actualUsername = JwtUtil.getUserNameByToken(mockRequest);\n\n            // Assert\n            assertEquals(expectedUsername, actualUsername);\n        }\n    }\n\n    @Test\n    public void getUserNameByTokenInvalidTokenTest() {\n        // Arrange\n        HttpServletRequest mockRequest = mock(HttpServletRequest.class);\n        String invalidAccessToken = \"invalidToken\";\n\n        when(mockRequest.getHeader(\"X-Access-Token\")).thenReturn(invalidAccessToken);\n        // Assuming 'getUsername' is a static method on a class called AccessTokenProcessor\n        try (MockedStatic<AccessTokenProcessor> mockedStatic = mockStatic(AccessTokenProcessor.class)) {\n            mockedStatic.when(() -> AccessTokenProcessor.getUsername(invalidAccessToken)).thenReturn(null);\n\n            // Act & Assert\n            assertThrows(JeecgBootException.class, () -> JwtUtil.getUserNameByToken(mockRequest));\n        }\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\npublic class JwtUtilTest {\n\n    @Mock\n    private HttpServletRequest request;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void getUserNameByTokenTestValidToken() {\n        // Arrange\n        String validToken = \"validToken123\";\n        String expectedUsername = \"testUser\";\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(validToken);\n        when(JwtUtil.getUsername(validToken)).thenReturn(expectedUsername);\n\n        // Act\n        String username = JwtUtil.getUserNameByToken(request);\n\n        // Assert\n        assertEquals(expectedUsername, username);\n    }\n\n    @Test\n    public void getUserNameByTokenTestInvalidToken() {\n        // Arrange\n        String invalidToken = \"invalidToken123\";\n        when(request.getHeader(\"X-Access-Token\")).thenReturn(invalidToken);\n        when(JwtUtil.getUsername(invalidToken)).thenReturn(\"\");\n\n        // Act and Assert\n        assertThrows(JeecgBootException.class, () -> {\n            JwtUtil.getUserNameByToken(request);\n        });\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport javax.servlet.http.HttpServletRequest;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() {\n        // Mock HttpServletRequest\n        HttpServletRequest mockRequest = mock(HttpServletRequest.class);\n        when(mockRequest.getHeader(\"X-Access-Token\")).thenReturn(\"mockedAccessToken\");\n\n        // Assuming the existence of JwtUtil method getUsername() and mocking its behavior\n        JwtUtil mockJwtUtil = mock(JwtUtil.class);\n        when(mockJwtUtil.getUsername(\"mockedAccessToken\")).thenReturn(\"mockedUser\");\n\n        // When username is retrieved successfully\n        String expectedUsername = \"mockedUser\";\n        try {\n            String result = JwtUtil.getUserNameByToken(mockRequest);\n            assertEquals(expectedUsername, result, \"The user name should match the expected value\");\n        } catch (JeecgBootException e) {\n            fail(\"Should not throw an exception when username is found\");\n        }\n\n        // When username is not found and an exception is expected\n        when(mockJwtUtil.getUsername(\"mockedAccessToken\")).thenReturn(\"\"); // or return null for a null check\n        assertThrows(JeecgBootException.class, () -> JwtUtil.getUserNameByToken(mockRequest), \"Should throw a JeecgBootException when username is empty\");\n    }\n}"
    ]
}