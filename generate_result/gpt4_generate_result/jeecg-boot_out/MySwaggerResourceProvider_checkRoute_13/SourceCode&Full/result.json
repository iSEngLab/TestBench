{
    "project_name": "jeecg-boot",
    "file_name": "MySwaggerResourceProvider.java",
    "relative_path": "jeecg-boot/jeecg-server-cloud/jeecg-cloud-gateway/src/main/java/org/jeecg/handler/swagger/MySwaggerResourceProvider.java",
    "execute_path": "jeecg-boot/jeecg-server-cloud",
    "package": "org.jeecg.handler.swagger",
    "docstring": "/**\n     * \u68c0\u6d4bnacos\u4e2d\u662f\u5426\u6709\u5065\u5eb7\u5b9e\u4f8b\n     * @param routeId\n     * @return\n     */",
    "source_code": "\nprivate Boolean checkRoute(String routeId) {\n    Boolean hasRoute = false;\n    try {\n        //\u4fee\u590d\u4f7f\u7528\u5e26\u547d\u540d\u7a7a\u95f4\u542f\u52a8\u7f51\u5173swagger\u770b\u4e0d\u5230\u63a5\u53e3\u6587\u6863\u7684\u95ee\u9898\n        Properties properties=new Properties();\n        properties.setProperty(\"serverAddr\",serverAddr);\n        if(namespace!=null && !\"\".equals(namespace)){\n            log.info(\"nacos.discovery.namespace = {}\", namespace);\n            properties.setProperty(\"namespace\",namespace);\n        }\n        if(username!=null && !\"\".equals(username)){\n            properties.setProperty(\"username\",username);\n        }\n        if(password!=null && !\"\".equals(password)){\n            properties.setProperty(\"password\",password);\n        }\n        //\u3010issues/5115\u3011\u56e0swagger\u6587\u6863\u5bfc\u81f4gateway\u5185\u5b58\u6ea2\u51fa\n        if (this.naming == null) {\n            this.naming = NamingFactory.createNamingService(properties);\n        }\n        log.info(\" config.group : {}\", group);\n        List<Instance> list = this.naming.selectInstances(routeId, group , true);\n        if (ObjectUtil.isNotEmpty(list)) {\n            hasRoute = true;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return hasRoute;\n}\n",
    "class_name": "MySwaggerResourceProvider",
    "method_name": "checkRoute",
    "arguments": [
        "String routeId"
    ],
    "generate_test": [
        "package org.jeecg.handler.swagger;\n\nimport com.alibaba.nacos.api.naming.NamingService;\nimport com.alibaba.nacos.api.naming.pojo.Instance;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport org.springframework.cloud.gateway.route.Route;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport reactor.core.publisher.Flux;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MySwaggerResourceProviderTest {\n\n    private MySwaggerResourceProvider provider;\n    private RouteLocator routeLocator;\n    private NamingService namingService;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        routeLocator = Mockito.mock(RouteLocator.class);\n        namingService = Mockito.mock(NamingService.class);\n        provider = new MySwaggerResourceProvider(routeLocator);\n        provider.naming = namingService;\n\n        // Mocks for the test context\n        provider.serverAddr = \"localhost\";\n        provider.namespace = \"test-namespace\";\n        provider.username = \"test-username\";\n        provider.password = \"test-password\";\n    }\n\n    @Test\n    public void checkRouteTest() {\n        String routeId = \"test-route\";\n        String group = \"DEFAULT_GROUP\";\n\n        // Assume naming service returns a healthy instance list when the correct parameters are passed\n        List<Instance> instances = Arrays.asList(new Instance());\n        try {\n            when(namingService.selectInstances(routeId, group, true)).thenReturn(instances);\n        } catch (Exception e) {\n            fail(e.getMessage());\n        }\n\n        // Call the actual method\n        Boolean hasRoute = provider.checkRoute(routeId);\n\n        // Validate results\n        assertTrue(hasRoute, \"The method should return true when instances are available\");\n\n        // Ensure that naming service is called with the right parameters\n        try {\n            verify(namingService).selectInstances(routeId, group, true);\n        } catch (Exception e) {\n            fail(e.getMessage());\n        }\n\n        // Test for no instances scenario\n        try {\n            when(namingService.selectInstances(routeId, group, true)).thenReturn(Collections.emptyList());\n            hasRoute = provider.checkRoute(routeId);\n            assertFalse(hasRoute, \"The method should return false when no instances are available\");\n        } catch (Exception e) {\n            fail(e.getMessage());\n        }\n    }\n}",
        "package org.jeecg.handler.swagger;\n\nimport com.alibaba.nacos.api.naming.NamingService;\nimport com.alibaba.nacos.api.naming.pojo.Instance;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport java.util.ArrayList;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.Mockito.anyString;\n\npublic class MySwaggerResourceProviderTest {\n\n    private MySwaggerResourceProvider provider;\n    private NamingService namingService;\n    private RouteLocator routeLocator;\n\n    @BeforeEach\n    public void setUp() {\n        routeLocator = Mockito.mock(RouteLocator.class);\n        namingService = Mockito.mock(NamingService.class);\n        provider = new MySwaggerResourceProvider(routeLocator) {\n            @Override\n            protected NamingService getNamingService() {\n                return namingService;\n            }\n        };\n    }\n\n    @Test\n    public void checkRouteShouldReturnTrueWhenListNotEmpty() throws Exception {\n        // Mock behavior of NamingService\n        List<Instance> instances = new ArrayList<>();\n        instances.add(Mockito.mock(Instance.class)); // Add mock instance to the list\n        when(namingService.selectInstances(anyString(), anyString(), Mockito.eq(true))).thenReturn(instances);\n\n        // Call the method checkRoute and assert the result\n        Boolean result = provider.checkRoute(\"validRouteId\");\n        assertTrue(result, \"The method checkRoute should return true for non-empty instance list\");\n    }\n\n    @Test\n    public void checkRouteShouldReturnFalseWhenListEmpty() throws Exception {\n        // Mock behavior of NamingService\n        when(namingService.selectInstances(anyString(), anyString(), Mockito.eq(true))).thenReturn(new ArrayList<>());\n\n        // Call the method checkRoute and assert the result\n        Boolean result = provider.checkRoute(\"invalidRouteId\");\n        assertFalse(result, \"The method checkRoute should return false for an empty instance list\");\n    }\n\n    @Test\n    public void checkRouteShouldHandleExceptionGracefully() throws Exception {\n        // Mock behavior of NamingService to throw an exception\n        when(namingService.selectInstances(anyString(), anyString(), Mockito.eq(true))).thenThrow(new RuntimeException(\"Test exception\"));\n\n        // Call the method checkRoute and assert the result\n        Boolean result = provider.checkRoute(\"exceptionRouteId\");\n        assertFalse(result, \"The method checkRoute should return false when an exception occurs\");\n    }\n\n    // Add a method to retrieve the mock naming service for testing purpose\n    private class MySwaggerResourceProvider extends org.jeecg.handler.swagger.MySwaggerResourceProvider {\n        public MySwaggerResourceProvider(RouteLocator routeLocator) {\n            super(routeLocator);\n        }\n\n        @Override\n        protected NamingService getNamingService() {\n            return namingService; // Return the mock naming service\n        }\n    }\n}",
        "package org.jeecg.handler.swagger;\n\nimport com.alibaba.nacos.api.naming.NamingService;\nimport com.alibaba.nacos.api.naming.pojo.Instance;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport java.util.ArrayList;\nimport java.util.Properties;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MySwaggerResourceProviderTest {\n    \n    private MySwaggerResourceProvider mySwaggerResourceProvider;\n    private NamingService namingService;\n    private RouteLocator routeLocator;\n    \n    @BeforeEach\n    public void setUp() {\n        // Mockito setup for dependent components\n        routeLocator = Mockito.mock(RouteLocator.class);\n        namingService = Mockito.mock(NamingService.class);\n        \n        mySwaggerResourceProvider = new MySwaggerResourceProvider(routeLocator);\n        mySwaggerResourceProvider.naming = namingService; // Assuming we can directly set this for the test case\n    }\n\n    @Test\n    public void checkRouteTest() throws Exception {\n        // Given\n        String routeId = \"test_route\";\n        String group = \"DEFAULT_GROUP\";\n        Instance instance = new Instance();\n        instance.setInstanceId(\"test_instance\");\n\n        // Configure the mock behavior for namingService.selectInstances\n        ArrayList<Instance> instances = new ArrayList<>();\n        instances.add(instance);\n        when(namingService.selectInstances(routeId, group, true)).thenReturn(instances);\n        \n        // When the checkRoute method is called\n        Boolean result = mySwaggerResourceProvider.checkRoute(routeId);\n\n        // Then the result should be true because the list is not empty\n        assertTrue(result, \"The route check should return true when instances are present.\");\n\n        // Verify that selectInstances was called with the correct parameters\n        verify(namingService, times(1)).selectInstances(routeId, group, true);\n    }\n\n    // Additional tests could be included for exception handling and scenarios where\n    // no instances are returned, but that implementation is dependent on the logic not provided (namingService behavior, etc.)\n}",
        "package org.jeecg.handler.swagger;\n\nimport com.alibaba.nacos.api.naming.NamingService;\nimport com.alibaba.nacos.api.naming.pojo.Instance;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.ArgumentMatchers.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Properties;\n\npublic class MySwaggerResourceProviderTest {\n\n    private MySwaggerResourceProvider mySwaggerResourceProvider;\n    private NamingService namingServiceMock;\n\n    @BeforeEach\n    public void setup() {\n        namingServiceMock = Mockito.mock(NamingService.class);\n        mySwaggerResourceProvider = new MySwaggerResourceProvider(null) {\n            public NamingService getNamingService() {\n                return namingServiceMock; // Use mock instead of actual NamingService\n            }\n        };\n        mySwaggerResourceProvider.serverAddr = \"testServerAddr\";\n        mySwaggerResourceProvider.namespace = \"testNamespace\";\n        mySwaggerResourceProvider.group = \"testGroup\";\n    }\n\n    @Test\n    public void checkRouteTest_noInstanceFound_returnsFalse() throws Exception {\n        // Arrange\n        when(namingServiceMock.selectInstances(anyString(), anyString(), anyBoolean())).thenReturn(Collections.emptyList());\n\n        // Act\n        boolean result = mySwaggerResourceProvider.checkRoute(\"testRouteId\");\n\n        // Assert\n        assertFalse(result, \"Expected checkRoute to return false when no instances are found\");\n    }\n\n    @Test\n    public void checkRouteTest_instancesFound_returnsTrue() throws Exception {\n        // Arrange\n        List<Instance> instances = Collections.singletonList(Mockito.mock(Instance.class));\n        when(namingServiceMock.selectInstances(anyString(), anyString(), anyBoolean())).thenReturn(instances);\n\n        // Act\n        boolean result = mySwaggerResourceProvider.checkRoute(\"testRouteId\");\n\n        // Assert\n        assertTrue(result, \"Expected checkRoute to return true when instances are found\");\n    }\n\n    @Test\n    public void checkRouteTest_ThrowsException_returnsFalse() throws Exception {\n        // Arrange\n        when(namingServiceMock.selectInstances(anyString(), anyString(), anyBoolean())).thenThrow(new RuntimeException(\"Test exception\"));\n\n        // Act and Assert\n        assertFalse(mySwaggerResourceProvider.checkRoute(\"testRouteId\"),\n                     \"Expected checkRoute to return false when an exception is thrown\");\n    }\n}",
        "package org.jeecg.handler.swagger;\n\nimport com.alibaba.nacos.api.naming.NamingService;\nimport com.alibaba.nacos.api.naming.pojo.Instance;\nimport org.junit.jupiter.api.*;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport org.springframework.cloud.gateway.route.Route;\n\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.stream.Collectors;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MySwaggerResourceProviderTest {\n\n    private MySwaggerResourceProvider provider;\n    private RouteLocator routeLocator;\n    private NamingService namingService;\n\n    @BeforeEach\n    public void setup() {\n        routeLocator = mock(RouteLocator.class);\n        namingService = mock(NamingService.class);\n        properties.setProperty(\"serverAddr\", \"testServerAddr\");\n        Properties properties = new Properties();\n        provider = new MySwaggerResourceProvider(routeLocator) {\n            @Override\n            public NamingService getNaming() {\n                // Override for testing purposes to return the mock naming service\n                return namingService;\n            }\n        };\n    }\n\n    @Test\n    public void checkRouteTest() {\n        String routeId = \"testRoute\";\n        String groupName = \"DEFAULT_GROUP\";\n        List<Instance> instances = Collections.singletonList(new Instance());\n\n        when(routeLocator.getRoutes()).thenReturn(Flux.just(\n            Route.async().id(routeId).uri(URI.create(\"lb://SERVICE-ID\")).build()\n        ));\n\n        try {\n            // Mock the behavior of namingService.selectInstances to return our list of instances\n            when(namingService.selectInstances(routeId, groupName, true)).thenReturn(instances);\n\n            // Calling the actual checkRoute method\n            Boolean result = provider.checkRoute(routeId);\n\n            // Verify if the selectInstances was called with expected arguments\n            verify(namingService).selectInstances(routeId, groupName, true);\n\n            // Assertions\n            assertTrue(result, \"The route is expected to be valid, but it was not.\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            fail(\"An exception should not have been thrown\");\n        }\n    }\n}",
        "package org.jeecg.handler.swagger;\n\nimport com.alibaba.nacos.api.exception.NacosException;\nimport com.alibaba.nacos.api.naming.NamingService;\nimport com.alibaba.nacos.api.naming.pojo.Instance;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\n\nimport static org.mockito.ArgumentMatchers.anyBoolean;\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Properties;\n\npublic class MySwaggerResourceProviderTest {\n\n    private MySwaggerResourceProvider mySwaggerResourceProvider;\n    private NamingService namingServiceMock;\n\n    @BeforeEach\n    public void setUp() throws NacosException {\n        // Create a Mock NamingService\n        namingServiceMock = Mockito.mock(NamingService.class);\n        \n        // Prepare the MySwaggerResourceProvider instance with mocked properties and NamingService\n        mySwaggerResourceProvider = new MySwaggerResourceProvider(null) {\n            {\n                setServerAddr(\"localhost\");\n                setNamespace(\"namespace\");\n                setGroup(\"group\");\n                setUsername(\"username\");\n                setPassword(\"password\");\n                setNaming(namingServiceMock);\n            }\n            // Mock the NamingService creation to return our mock\n            @Override\n            protected NamingService createNamingService(Properties properties) {\n                return namingServiceMock;\n            }\n            // Getters and setters for private fields in MySwaggerResourceProvider\n            public void setServerAddr(String serverAddr) {\n                this.serverAddr = serverAddr;\n            }\n            public void setNamespace(String namespace) {\n                this.namespace = namespace;\n            }\n            public void setGroup(String group) {\n                this.group = group;\n            }\n            public void setUsername(String username) {\n                this.username = username;\n            }\n            public void setPassword(String password) {\n                this.password = password;\n            }\n            public void setNaming(NamingService naming) {\n                this.naming = naming;\n            }\n        };\n    }\n\n    @Test\n    public void checkRouteTestHealthyInstance() throws NacosException {\n        String routeId = \"testRoute\";\n        List<Instance> healthyInstances = Collections.singletonList(new Instance());\n\n        // Configure the mock to return a healthy list of instances\n        when(namingServiceMock.selectInstances(routeId, \"group\", true)).thenReturn(healthyInstances);\n\n        // Call the actual method to test\n        boolean result = mySwaggerResourceProvider.checkRoute(routeId);\n\n        // Verify result\n        assertTrue(result, \"checkRoute should return true for healthy instances\");\n\n        // Verify interaction with the mocked NamingService\n        verify(namingServiceMock).selectInstances(routeId, \"group\", true);\n    }\n\n    @Test\n    public void checkRouteTestNoHealthyInstance() throws NacosException {\n        String routeId = \"testRoute\";\n        \n        // Configure the mock to return an empty list of instances\n        when(namingServiceMock.selectInstances(routeId, \"group\", true)).thenReturn(Collections.emptyList());\n\n        // Call the actual method to test\n        boolean result = mySwaggerResourceProvider.checkRoute(routeId);\n\n        // Verify result\n        assertFalse(result, \"checkRoute should return false for no healthy instances\");\n\n        // Verify interaction with the mocked NamingService\n        verify(namingServiceMock).selectInstances(routeId, \"group\", true);\n    }\n\n    @Test\n    public void checkRouteTestThrowsException() throws NacosException {\n        String routeId = \"testRoute\";\n\n        // Configure the mock to throw an exception\n        when(namingServiceMock.selectInstances(anyString(), anyString(), anyBoolean())).thenThrow(NacosException.class);\n\n        // Call the actual method to test expecting no exceptions\n        boolean result = mySwaggerResourceProvider.checkRoute(routeId);\n\n        // Verify result\n        assertFalse(result, \"checkRoute should return false when an exception is thrown\");\n\n        // Verify interaction with the mocked NamingService\n        verify(namingServiceMock).selectInstances(routeId, \"group\", true);\n    }\n}",
        "package org.jeecg.handler.swagger;\n\nimport com.alibaba.nacos.api.naming.NamingFactory;\nimport com.alibaba.nacos.api.naming.NamingService;\nimport com.alibaba.nacos.api.naming.pojo.Instance;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.MockedStatic;\nimport org.mockito.Mockito;\nimport static org.mockito.ArgumentMatchers.*;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Properties;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class MySwaggerResourceProviderTest {\n    \n    private MySwaggerResourceProvider mySwaggerResourceProvider;\n    private NamingService namingService;\n\n    @BeforeEach\n    public void setUp() {\n        RouteLocator routeLocator = mock(RouteLocator.class);\n        mySwaggerResourceProvider = new MySwaggerResourceProvider(routeLocator);\n        namingService = mock(NamingService.class);\n        mySwaggerResourceProvider.naming = namingService;\n    }\n\n    @Test\n    public void checkRouteTest_validRoute_returnsTrue() {\n        String routeId = \"test-route\";\n        String group = \"DEFAULT_GROUP\";\n        \n        // Return a non-empty list to simulate a healthy instance\n        List<Instance> instances = Arrays.asList(mock(Instance.class));\n        \n        try (MockedStatic<NamingFactory> mockedNamingFactory = Mockito.mockStatic(NamingFactory.class)) {\n            mockedNamingFactory.when(() -> NamingFactory.createNamingService(any(Properties.class))).thenReturn(namingService);\n            \n            when(namingService.selectInstances(routeId, group, true)).thenReturn(instances);\n            \n            boolean result = mySwaggerResourceProvider.checkRoute(routeId);\n            \n            assertTrue(result, \"The route should be considered valid when instances are found\");\n        } catch (Exception e) {\n            fail(\"An unexpected exception occurred: \" + e.getMessage());\n        }\n    }\n\n    @Test\n    public void checkRouteTest_invalidRoute_returnsFalse() {\n        String routeId = \"invalid-route\";\n        String group = \"DEFAULT_GROUP\";\n        \n        // Return an empty list to simulate no healthy instance\n        List<Instance> instances = Collections.emptyList();\n        \n        try (MockedStatic<NamingFactory> mockedNamingFactory = Mockito.mockStatic(NamingFactory.class)) {\n            mockedNamingFactory.when(() -> NamingFactory.createNamingService(any(Properties.class))).thenReturn(namingService);\n\n            when(namingService.selectInstances(routeId, group, true)).thenReturn(instances);\n            \n            boolean result = mySwaggerResourceProvider.checkRoute(routeId);\n            \n            assertFalse(result, \"The route should be considered invalid when no instances are found\");\n        } catch (Exception e) {\n            fail(\"An unexpected exception occurred: \" + e.getMessage());\n        }\n    }\n}",
        "package org.jeecg.handler.swagger;\n\nimport com.alibaba.nacos.api.naming.NamingService;\nimport com.alibaba.nacos.api.naming.pojo.Instance;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport org.springframework.cloud.gateway.route.Route;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport org.springframework.core.env.Environment;\nimport reactor.core.publisher.Flux;\n\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Properties;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MySwaggerResourceProviderTest {\n\n    private MySwaggerResourceProvider provider;\n    private RouteLocator routeLocator;\n    private NamingService namingService;\n    private Environment environment;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        routeLocator = mock(RouteLocator.class);\n        namingService = mock(NamingService.class);\n        environment = mock(Environment.class);\n        \n        // Initializing the required values for the provider\n        when(environment.getProperty(\"spring.cloud.nacos.discovery.server-addr\")).thenReturn(\"localhost\");\n        when(environment.getProperty(\"spring.cloud.nacos.discovery.namespace\")).thenReturn(null);\n        when(environment.getProperty(\"spring.cloud.nacos.config.group\")).thenReturn(\"DEFAULT_GROUP\");\n        when(environment.getProperty(\"spring.cloud.nacos.discovery.username\")).thenReturn(null);\n        when(environment.getProperty(\"spring.cloud.nacos.discovery.password\")).thenReturn(null);\n        when(environment.getProperty(\"spring.application.name\")).thenReturn(\"gateway\");\n\n        provider = new MySwaggerResourceProvider(routeLocator) {\n            // Override methods as necessary to avoid actual remote calls during unit testing\n            @Override\n            protected NamingService createNamingService(Properties properties) {\n                return namingService;\n            }\n\n            @Override\n            protected Environment getEnvironment() {\n                return environment;\n            }\n        };\n\n        // Mocking the routeLocator and namingService behaviors\n        when(routeLocator.getRoutes()).thenReturn(Flux.just(Route.async().id(\"route1\").uri(URI.create(\"http://example.com\")).build()));\n        when(namingService.selectInstances(\"route1\", \"DEFAULT_GROUP\", true)).thenReturn(Collections.singletonList(new Instance()));\n\n        // As this method is private in the source code, it's necessary to either test it indirectly or use reflection to access it.\n    }\n\n    @Test\n    public void checkRouteTest() throws Exception {\n        // Assuming we have a method to test our private method checkRoute, for example, a public version for the sake of testing\n        assertTrue(provider.checkRoute(\"route1\"));\n    }\n}",
        "package org.jeecg.handler.swagger;\n\nimport com.alibaba.nacos.api.exception.NacosException;\nimport com.alibaba.nacos.api.naming.NamingService;\nimport com.alibaba.nacos.api.naming.pojo.Instance;\nimport org.junit.jupiter.api.*;\nimport org.mockito.MockedStatic;\nimport org.mockito.Mockito;\nimport org.springframework.cloud.gateway.route.RouteLocator;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Properties;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.ArgumentMatchers.*;\nimport static org.mockito.Mockito.*;\n\npublic class MySwaggerResourceProviderTest {\n\n    private MySwaggerResourceProvider resourceProvider;\n    private NamingService namingService;\n    private RouteLocator routeLocator;\n    private final String serverAddr = \"TEST_SERVER\";\n    private final String namespace = \"TEST_NAMESPACE\";\n    private final String group = \"TEST_GROUP\";\n    private final String username = \"TEST_USER\";\n    private final String password = \"TEST_PASS\";\n    private final String routeId = \"TEST_ROUTE\";\n    \n    @BeforeEach\n    public void setUp() {\n        routeLocator = mock(RouteLocator.class);\n        namingService = mock(NamingService.class);\n\n        resourceProvider = new MySwaggerResourceProvider(routeLocator);\n        setField(resourceProvider, \"serverAddr\", serverAddr);\n        setField(resourceProvider, \"namespace\", namespace);\n        setField(resourceProvider, \"group\", group);\n        setField(resourceProvider, \"username\", username);\n        setField(resourceProvider, \"password\", password);\n\n        // Here we need a method to set a private field. We can use reflection or create a helper method in test.\n        // This code assumes you have a helper method 'setField' available for setting private fields.\n    }\n\n    @Test\n    public void checkRouteTest_withHealthyInstances() throws NacosException {\n        List<Instance> healthyInstances = Collections.singletonList(mock(Instance.class));\n\n        try (MockedStatic<NamingFactory> mockedNamingFactory = Mockito.mockStatic(NamingFactory.class)) {\n            mockedNamingFactory.when(() -> NamingFactory.createNamingService(any(Properties.class)))\n                .thenReturn(namingService);\n            \n            when(namingService.selectInstances(routeId, group, true)).thenReturn(healthyInstances);\n\n            boolean result = resourceProvider.checkRoute(routeId);\n            assertTrue(result, \"The checkRoute method should return true when healthy instances are found.\");\n        }\n    }\n\n    @Test\n    public void checkRouteTest_withoutHealthyInstances() throws NacosException {\n        try (MockedStatic<NamingFactory> mockedNamingFactory = Mockito.mockStatic(NamingFactory.class)) {\n            mockedNamingFactory.when(() -> NamingFactory.createNamingService(any(Properties.class)))\n                .thenReturn(namingService);\n            \n            when(namingService.selectInstances(routeId, group, true)).thenReturn(Collections.emptyList());\n\n            boolean result = resourceProvider.checkRoute(routeId);\n            assertFalse(result, \"The checkRoute method should return false when no healthy instances are found.\");\n        }\n    }\n\n    @Test\n    public void checkRouteTest_withException() throws NacosException {\n        try (MockedStatic<NamingFactory> mockedNamingFactory = Mockito.mockStatic(NamingFactory.class)) {\n            mockedNamingFactory.when(() -> NamingFactory.createNamingService(any(Properties.class)))\n                .thenReturn(namingService);\n            \n            when(namingService.selectInstances(routeId, group, true)).thenThrow(new NacosException());\n\n            boolean result = resourceProvider.checkRoute(routeId);\n            assertFalse(result, \"The checkRoute method should return false when an exception occurs.\");\n        }\n    }\n    \n    // Helper method to set value of a private field via reflection\n    private void setField(Object target, String fieldName, Object value) {\n        try {\n            java.lang.reflect.Field field = target.getClass().getDeclaredField(fieldName);\n            field.setAccessible(true);\n            field.set(target, value);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n}",
        "package org.jeecg.handler.swagger;\n\nimport com.alibaba.nacos.api.naming.NamingService;\nimport com.alibaba.nacos.api.naming.pojo.Instance;\nimport org.junit.jupiter.api.*;\nimport static org.mockito.Mockito.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Properties;\n\npublic class MySwaggerResourceProviderTest {\n\n    private MySwaggerResourceProvider mySwaggerResourceProvider;\n    private NamingService mockNamingService;\n    \n    @BeforeEach\n    public void setUp() throws Exception {\n        mockNamingService = mock(NamingService.class);\n        mySwaggerResourceProvider = new MySwaggerResourceProvider(null); // pass null since routeLocator is not used in checkRoute method\n\n        // Reflectively setting the namingService field in MySwaggerResourceProvider\n        Field namingField = MySwaggerResourceProvider.class.getDeclaredField(\"naming\");\n        namingField.setAccessible(true);\n        namingField.set(mySwaggerResourceProvider, mockNamingService);\n    }\n    \n    @Test\n    public void checkRouteTestHealthyInstance() throws Exception {\n        String routeId = \"test-route\";\n        String group = \"DEFAULT_GROUP\";\n        List<Instance> instanceList = new ArrayList<>();\n        instanceList.add(new Instance()); // Add a healthy instance\n\n        when(mockNamingService.selectInstances(routeId, group, true)).thenReturn(instanceList);\n\n        // Call the method we want to test\n        Boolean result = mySwaggerResourceProvider.checkRoute(routeId);\n\n        assertTrue(result, \"The route should have a healthy instance\");\n    }\n\n    @Test\n    public void checkRouteTestUnhealthyInstance() throws Exception {\n        String routeId = \"test-route\";\n        String group = \"DEFAULT_GROUP\";\n\n        when(mockNamingService.selectInstances(routeId, group, true)).thenReturn(new ArrayList<>());\n\n        // Call the method we want to test\n        Boolean result = mySwaggerResourceProvider.checkRoute(routeId);\n\n        assertFalse(result, \"The route should not have any healthy instance\");\n    }\n}"
    ]
}