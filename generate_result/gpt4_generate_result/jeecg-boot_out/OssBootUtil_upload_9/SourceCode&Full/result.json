{
    "project_name": "jeecg-boot",
    "file_name": "OssBootUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/oss/OssBootUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.util.oss",
    "docstring": "/**\n     * \u4e0a\u4f20\u6587\u4ef6\u81f3\u963f\u91cc\u4e91 OSS\n     * \u6587\u4ef6\u4e0a\u4f20\u6210\u529f,\u8fd4\u56de\u6587\u4ef6\u5b8c\u6574\u8bbf\u95ee\u8def\u5f84\n     * \u6587\u4ef6\u4e0a\u4f20\u5931\u8d25,\u8fd4\u56de null\n     *\n     * @param file    \u5f85\u4e0a\u4f20\u6587\u4ef6\n     * @param fileDir \u6587\u4ef6\u4fdd\u5b58\u76ee\u5f55\n     * @return oss \u4e2d\u7684\u76f8\u5bf9\u6587\u4ef6\u8def\u5f84\n     */",
    "source_code": "\npublic static String upload(FileItemStream file, String fileDir) {\n    String filePath = null;\n    initOss(endPoint, accessKeyId, accessKeySecret);\n    StringBuilder fileUrl = new StringBuilder();\n    try {\n        String suffix = file.getName().substring(file.getName().lastIndexOf('.'));\n        String fileName = UUID.randomUUID().toString().replace(\"-\", \"\") + suffix;\n        if (!fileDir.endsWith(SymbolConstant.SINGLE_SLASH)) {\n            fileDir = fileDir.concat(SymbolConstant.SINGLE_SLASH);\n        }\n        fileDir = StrAttackFilter.filter(fileDir);\n        fileUrl = fileUrl.append(fileDir + fileName);\n        if (oConvertUtils.isNotEmpty(staticDomain) && staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n            filePath = staticDomain + SymbolConstant.SINGLE_SLASH + fileUrl;\n        } else {\n            filePath = \"https://\" + bucketName + \".\" + endPoint + SymbolConstant.SINGLE_SLASH + fileUrl;\n        }\n        PutObjectResult result = ossClient.putObject(bucketName, fileUrl.toString(), file.openStream());\n        // \u8bbe\u7f6e\u6743\u9650(\u516c\u5f00\u8bfb)\n        ossClient.setBucketAcl(bucketName, CannedAccessControlList.PublicRead);\n        if (result != null) {\n            log.info(\"------OSS\u6587\u4ef6\u4e0a\u4f20\u6210\u529f------\" + fileUrl);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n    return filePath;\n}\n",
    "class_name": "OssBootUtil",
    "method_name": "upload",
    "arguments": [
        "FileItemStream file",
        "String fileDir"
    ],
    "generate_test": [
        "package org.jeecg.common.util.oss;\n\nimport com.aliyun.oss.OSSClient;\nimport com.aliyun.oss.model.PutObjectResult;\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class OssBootUtilTest {\n\n    @Mock\n    private OSSClient ossClientMock;\n\n    @Mock\n    private FileItemStream fileItemStreamMock;\n\n    @InjectMocks\n    private OssBootUtil ossBootUtilMock; // Assuming we need to test a non-static method or we adapt the method for testing\n\n    @BeforeEach\n    public void setup() throws Exception {\n        // Initialize OssBootUtil with mocked fields\n        OssBootUtil.setEndPoint(\"test.endpoint\");\n        OssBootUtil.setAccessKeyId(\"testAccessKeyId\");\n        OssBootUtil.setAccessKeySecret(\"testAccessKeySecret\");\n        OssBootUtil.setBucketName(\"testBucketName\");\n        OssBootUtil.setStaticDomain(\"testStaticDomain\");\n\n        // Prepare the file item stream\n        when(fileItemStreamMock.getName()).thenReturn(\"testFile.txt\");\n        ByteArrayInputStream bais = new ByteArrayInputStream(\"fileContent\".getBytes());\n        when(fileItemStreamMock.openStream()).thenReturn(bais);\n\n        // Mock putObject to return a result\n        PutObjectResult putObjectResultMock = mock(PutObjectResult.class);\n        when(ossClientMock.putObject(anyString(), anyString(), any(InputStream.class))).thenReturn(putObjectResultMock);\n    }\n\n    @Test\n    public void uploadTest() throws Exception {\n        // Mocking OssBootUtil static behavior (if the method is static)\n        OssBootUtil.setOssClient(ossClientMock);\n\n        String fileDir = \"uploads/\";\n\n        // Call the method we are testing\n        String result = OssBootUtil.upload(fileItemStreamMock, fileDir);\n\n        // Verify the interactions with the mocked OSSClient\n        verify(ossClientMock).putObject(eq(\"testBucketName\"), anyString(), any(InputStream.class));\n        verify(ossClientMock).setBucketAcl(eq(\"testBucketName\"), eq(com.aliyun.oss.model.CannedAccessControlList.PublicRead));\n\n        // Assertions\n        assertNotNull(result, \"The result should not be null on successful upload.\");\n        assertTrue(result.contains(\"https://testBucketName.test.endpoint/uploads/\"), \"The file path should be correct.\");\n    }\n\n    // Add additional tests for error cases and edge cases if needed.\n\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.apache.commons.fileupload.FileItemHeaders;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n\n    @Mock\n    private FileItemStream fileItemStream;\n\n    @Mock\n    private FileItemHeaders fileItemHeaders;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n        // Assuming these are set elsewhere in your test configuration\n        OssBootUtil.setEndPoint(\"oss-test-endpoint\");\n        OssBootUtil.setAccessKeyId(\"test-access-key-id\");\n        OssBootUtil.setAccessKeySecret(\"test-access-key-secret\");\n        OssBootUtil.setBucketName(\"test-bucket\");\n        OssBootUtil.setStaticDomain(\"https://test-static-domain.com\");\n        \n        // Initialize OSS Client with mock settings\n        // Please note that this might require further mocking of the underlying OSSClient\n        OssBootUtil.initOss(OssBootUtil.getEndPoint(), OssBootUtil.getAccessKeyId(), OssBootUtil.getAccessKeySecret());\n    }\n    \n    @Test\n    public void uploadTest() {\n        try {\n            when(fileItemStream.getName()).thenReturn(\"test.txt\");\n            when(fileItemStream.openStream()).thenReturn(new ByteArrayInputStream(\"test-content\".getBytes()));\n            when(fileItemStream.getHeaders()).thenReturn(fileItemHeaders);\n            \n            String fileDir = \"test-dir/\";\n            String uploadedPath = OssBootUtil.upload(fileItemStream, fileDir);\n\n            assertNotNull(uploadedPath, \"The return path should not be null\");\n            assertTrue(uploadedPath.startsWith(\"https://test-static-domain.com/test-dir\"));\n        } catch (Exception e) {\n            fail(\"Exception should not be thrown during test: \" + e.getMessage());\n        }\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.UUID;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.ArgumentMatchers.*;\nimport static org.mockito.Mockito.*;\n\npublic class OssBootUtilTest {\n\n    @Test\n    public void uploadTest() throws IOException {\n        // Mock the FileItemStream\n        FileItemStream fileItemStream = mock(FileItemStream.class);\n        InputStream inputStream = mock(InputStream.class);\n\n        // Returned when fileItemStream.getName() and fileItemStream.openStream() are called\n        when(fileItemStream.getName()).thenReturn(\"testfile.jpg\");\n        when(fileItemStream.openStream()).thenReturn(inputStream);\n\n        // Mock static methods and fields\n        String endPoint = \"test.endpoint.com\";\n        String accessKeyId = \"testAccessKeyId\";\n        String accessKeySecret = \"testAccessKeySecret\";\n        String bucketName = \"testBucket\";\n        String staticDomain = \"https://static.domain.com\";\n        \n        // Setting up static variables (normally, you'd do that before the test)\n        // Suppose these static setters exist\n        OssBootUtil.setEndPoint(endPoint);\n        OssBootUtil.setAccessKeyId(accessKeyId);\n        OssBootUtil.setAccessKeySecret(accessKeySecret);\n        OssBootUtil.setBucketName(bucketName);\n        OssBootUtil.setStaticDomain(staticDomain);\n        \n        OssBootUtil.initOss(endPoint, accessKeyId, accessKeySecret);\n        \n        // Mock the OSSClient and the PutObjectResult\n        OSSClient ossClient = mock(OSSClient.class);\n        PutObjectResult putObjectResult = mock(PutObjectResult.class);\n        \n        // Assume we have a field to set the OSSClient possibly for testing\n        OssBootUtil.setOssClient(ossClient); // Assuming this setter exists\n        \n        // Mock the behavior when ossClient.putObject and ossClient.setBucketAcl are called\n        when(ossClient.putObject(eq(bucketName), anyString(), any(InputStream.class))).thenReturn(putObjectResult);\n        doNothing().when(ossClient).setBucketAcl(eq(bucketName), any());\n\n        // Set a mocked random UUID to control the generated file name\n        UUID uuid = UUID.randomUUID();\n        String mockedUUID = uuid.toString().replace(\"-\", \"\");\n        TestUtils.mockStatic(UUID.class);\n        Mockito.when(UUID.randomUUID()).thenReturn(uuid);\n\n        // The directory to upload the file to, ends with a slash\n        String fileDir = \"uploads/\";\n        // Call upload method\n        String result = OssBootUtil.upload(fileItemStream, fileDir);\n\n        // Verify the result is as expected\n        // For example, if static domain is used, expecting the result to have it\n        String expectedFileName = mockedUUID + \".jpg\";\n        String expected = staticDomain + \"/uploads/\" + expectedFileName;\n        assertEquals(expected, result);\n\n        // Verify putObject was called with expected parameters\n        verify(ossClient).putObject(eq(bucketName), eq(\"uploads/\" + expectedFileName), any(InputStream.class));\n\n        // Verify setBucketAcl was called to set the file as public\n        verify(ossClient).setBucketAcl(bucketName, CannedAccessControlList.PublicRead);\n\n        // Cleanup (Close InputStream if opened)\n        verify(inputStream, atLeastOnce()).close();\n    }\n    \n    // Test Utilities (may/n't exist, it's conceptual), to mock static behaviors\n    static class TestUtils {\n        public static void mockStatic(Class<?> clazz){\n            // Mock static methods here\n        }\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport com.aliyun.oss.OSSClient;\nimport com.aliyun.oss.model.PutObjectResult;\nimport org.apache.commons.fileupload.FileItemStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.UUID;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\n@ExtendWith(MockitoExtension.class)\npublic class OssBootUtilTest {\n\n    @Mock\n    private OSSClient ossClient;\n    \n    @Mock\n    private FileItemStream fileItemStream;\n    \n    @Mock\n    private PutObjectResult putObjectResult;\n\n    @InjectMocks\n    private OssBootUtil ossBootUtil;\n\n    private static final String TEST_FILE_DIR = \"test-dir/\";\n    private static final String TEST_ENDPOINT = \"oss-cn-hangzhou.aliyuncs.com\";\n    private static final String TEST_BUCKET = \"test-bucket\";\n    private static final String TEST_ORIGINAL_FILENAME = \"test.jpg\";\n    private static final String TEST_STATIC_DOMAIN = \"https://static.example.com\";\n\n    @BeforeEach\n    public void setUp() {\n        OssBootUtil.setEndPoint(TEST_ENDPOINT);\n        OssBootUtil.setBucketName(TEST_BUCKET);\n        OssBootUtil.setStaticDomain(TEST_STATIC_DOMAIN);\n    }\n\n    @Test\n    public void uploadTest() throws IOException {\n        // Mock the fileItemStream behavior\n        when(fileItemStream.getName()).thenReturn(TEST_ORIGINAL_FILENAME);\n        when(fileItemStream.openStream()).thenReturn(mock(InputStream.class));\n\n        // Mock UUID generation to have deterministic file names\n        final String uuid = UUID.randomUUID().toString().replace(\"-\", \"\");\n        mockStatic(UUID.class);\n        when(UUID.randomUUID()).thenReturn(java.util.UUID.fromString(uuid));\n\n        // Mock the OssClient for unit testing\n        when(ossClient.putObject(eq(TEST_BUCKET), anyString(), any(InputStream.class))).thenReturn(putObjectResult);\n        \n        // Actual test call\n        String uploadedFilePath = OssBootUtil.upload(fileItemStream, TEST_FILE_DIR);\n\n        // Assert the returned file path is correct\n        assertNotNull(uploadedFilePath);\n        assertTrue(uploadedFilePath.startsWith(TEST_STATIC_DOMAIN));\n        assertTrue(uploadedFilePath.contains(TEST_FILE_DIR));\n        assertTrue(uploadedFilePath.endsWith(\".jpg\"));\n\n        // Verify that OssClient putObject was called with expected parameters\n        String expectedFileName = uuid + \".jpg\";\n        String expectedFileKey = TEST_FILE_DIR + expectedFileName;\n        verify(ossClient).putObject(TEST_BUCKET, expectedFileKey, fileItemStream.openStream());\n\n        // Verify the bucket ACL was set to PublicRead\n        verify(ossClient).setBucketAcl(TEST_BUCKET, com.aliyun.oss.model.CannedAccessControlList.PublicRead);\n\n        // Verify logging (here mocking logging would be an option)\n    }\n\n    // Alternatively, if additional tests are needed, you can add them below\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class OssBootUtilTest {\n\n    private static final String TEST_ENDPOINT = \"oss-cn-test.aliyuncs.com\";\n    private static final String TEST_ACCESS_KEY_ID = \"testAccessKeyId\";\n    private static final String TEST_ACCESS_KEY_SECRET = \"testAccessKeySecret\";\n    private static final String TEST_BUCKET_NAME = \"test-bucket\";\n    private static final String TEST_STATIC_DOMAIN = \"https://static.example.com\";\n    private static final String TEST_FILE_DIR = \"uploads/\";\n    private static final String TEST_FILE_NAME = \"testfile.txt\";\n\n    @BeforeEach\n    public void setup() {\n        OssBootUtil.setEndPoint(TEST_ENDPOINT);\n        OssBootUtil.setAccessKeyId(TEST_ACCESS_KEY_ID);\n        OssBootUtil.setAccessKeySecret(TEST_ACCESS_KEY_SECRET);\n        OssBootUtil.setBucketName(TEST_BUCKET_NAME);\n        OssBootUtil.setStaticDomain(TEST_STATIC_DOMAIN);\n    }\n\n    @Test\n    public void uploadTest() throws Exception {\n        // Create a mock OSSClient to prevent actual network calls\n        OSSClient mockOssClient = Mockito.mock(OSSClient.class);\n        // Mock the behavior of the putObject method to return a new PutObjectResult\n        when(mockOssClient.putObject(anyString(), anyString(), Mockito.any(InputStream.class))).thenReturn(new PutObjectResult());\n\n        // Use reflection to set the private static ossClient field in OssBootUtil to our mock\n        java.lang.reflect.Field ossClientField = OssBootUtil.class.getDeclaredField(\"ossClient\");\n        ossClientField.setAccessible(true);\n        ossClientField.set(null, mockOssClient);\n\n        // Create a FileItemStream mock to simulate file upload\n        FileItemStream mockFileItemStream = mock(FileItemStream.class);\n        when(mockFileItemStream.getName()).thenReturn(TEST_FILE_NAME);\n        when(mockFileItemStream.openStream()).thenReturn(new ByteArrayInputStream(\"File content\".getBytes()));\n\n        // Perform the upload\n        String returnedPath = OssBootUtil.upload(mockFileItemStream, TEST_FILE_DIR);\n\n        // Verify the upload path is not null and follows the expected pattern\n        assertNotNull(returnedPath, \"Returned path should not be null\");\n        assertTrue(returnedPath.startsWith(TEST_STATIC_DOMAIN), \"Returned path should start with the static domain\");\n        assertTrue(returnedPath.contains(TEST_FILE_DIR), \"Returned path should contain the file directory\");\n\n        // Reset the ossClient field to null after the test\n        ossClientField.set(null, null);\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Cleanup or reset any static variables or configurations if necessary\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport com.aliyun.oss.OSSClient;\nimport com.aliyun.oss.model.PutObjectResult;\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.Mockito.*;\n\npublic class OssBootUtilTest {\n\n    private OSSClient ossClient;\n    private FileItemStream fileItemStream;\n\n    @BeforeEach\n    public void setUp() {\n        ossClient = mock(OSSClient.class);\n        fileItemStream = mock(FileItemStream.class);\n        OssBootUtil.setEndPoint(\"test.endpoint\");\n        OssBootUtil.setAccessKeyId(\"testAccessKeyId\");\n        OssBootUtil.setAccessKeySecret(\"testAccessKeySecret\");\n        OssBootUtil.setBucketName(\"testBucket\");\n        OssBootUtil.setStaticDomain(null); // assuming no static domain is set for the purposes of this test\n        OssBootUtil.initOss(OssBootUtil.getEndPoint(), OssBootUtil.getAccessKeyId(), OssBootUtil.getAccessKeySecret());\n\n        // Use Mockito to stub the OSS client methods we call within our upload function.\n        when(ossClient.putObject(anyString(), anyString(), any(InputStream.class))).thenReturn(new PutObjectResult());\n        // Simulate setting the ACL without actually interacting with the OSS.\n        doNothing().when(ossClient).setBucketAcl(anyString(), any());\n    }\n\n    @Test\n     public void uploadTest() {\n        String testName = \"test.txt\";\n        String testContent = \"Test content\";\n        String fileDir = \"/upload/dir/\";\n        ByteArrayInputStream testInputStream = new ByteArrayInputStream(testContent.getBytes());\n\n        try {\n            when(fileItemStream.getName()).thenReturn(testName);\n            when(fileItemStream.openStream()).thenReturn(testInputStream);\n\n            String uploadedPath = OssBootUtil.upload(fileItemStream, fileDir);\n\n            assertNotNull(uploadedPath);\n            assertTrue(uploadedPath.contains(testName));\n            assertTrue(uploadedPath.startsWith(\"https://testBucket.test.endpoint/upload/dir/\"));\n            assertTrue(uploadedPath.contains(\".txt\"));\n\n            // Verify that putObject was called once with expected parameters\n            verify(ossClient, times(1)).putObject(eq(\"testBucket\"), contains(\"/upload/dir/\"), any(InputStream.class));\n            verify(ossClient, times(1)).setBucketAcl(eq(\"testBucket\"), any());\n\n        } catch (Exception e) {\n            fail(\"Exception should not be thrown in a successful upload test\", e);\n        }\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport com.aliyun.oss.OSSClient;\nimport com.aliyun.oss.model.PutObjectResult;\nimport java.io.ByteArrayInputStream;\n\npublic class OssBootUtilTest {\n\n    private static OSSClient mockOssClient;\n\n    @BeforeAll\n    public static void init() {\n        mockOssClient = mock(OSSClient.class);\n        OssBootUtil.setOssClient(mockOssClient); // Let's assume there is a setter for OSSClient\n    }\n    \n    @Test\n    public void uploadTest() {\n        // Assuming values for endpoints, keys, etc. are set in OssBootUtil before this test.\n        String expectedUrl = \"expected URL after upload\";\n        String fileDir = \"dir/\";\n        FileItemStream fileItemStream = mock(FileItemStream.class);\n        \n        when(fileItemStream.getName()).thenReturn(\"test.jpg\");\n        when(fileItemStream.openStream()).thenReturn(new ByteArrayInputStream(new byte[10]));\n        \n        PutObjectResult result = new PutObjectResult(); // Mock result object\n        \n        when(mockOssClient.putObject(anyString(), anyString(), any())).thenReturn(result);\n        \n        // Call the method to test\n        String url = OssBootUtil.upload(fileItemStream, fileDir);\n        \n        // Verify upload was attempted and the URL is formatted correctly\n        assertNotNull(url, \"The upload method should return a URL.\");\n        assertTrue(url.startsWith(\"https://\"), \"The URL should start with https://.\");\n        assertTrue(url.endsWith(\"/\" + fileDir + \"test.jpg\"), \"The URL should end with the directory and file name.\");\n\n        // Let's verify that putObject was called with the expected values\n       verify(mockOssClient).putObject(eq(OssBootUtil.getBucketName()), contains(fileDir), any());\n    }\n    \n    @AfterAll\n    public static void tearDown() {\n        // Optionally, clean up resources or reset mocks if necessary\n        reset(mockOssClient);\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.apache.commons.fileupload.FileItemHeaders;\nimport org.junit.jupiter.api.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n    private static final String TEST_ENDPOINT = \"oss-test-endpoint\";\n    private static final String TEST_ACCESS_KEY_ID = \"testAccessKeyId\";\n    private static final String TEST_ACCESS_KEY_SECRET = \"testAccessKeySecret\";\n    private static final String TEST_BUCKET_NAME = \"test-bucket\";\n    private static final String TEST_STATIC_DOMAIN = \"https://test-static-domain\";\n    private static final String TEST_FILE_DIR = \"test/dir\";\n    private static final String TEST_FILE_NAME = \"file.txt\";\n    \n    @Test\n    public void uploadTest() {\n        // Mock dependencies\n        FileItemStream fileItemStream = mock(FileItemStream.class);\n        when(fileItemStream.getName()).thenReturn(TEST_FILE_NAME);\n        when(fileItemStream.openStream()).thenReturn(new ByteArrayInputStream(\"file content\".getBytes(StandardCharsets.UTF_8)));\n        \n        // Set the static fields\n        OssBootUtil.setEndPoint(TEST_ENDPOINT);\n        OssBootUtil.setAccessKeyId(TEST_ACCESS_KEY_ID);\n        OssBootUtil.setAccessKeySecret(TEST_ACCESS_KEY_SECRET);\n        OssBootUtil.setBucketName(TEST_BUCKET_NAME);\n        OssBootUtil.setStaticDomain(null); // Set to null to test standard path creation\n        \n        // Partial mock of the OssBootUtil to avoid real OSS interactions\n        OssBootUtil ossBootUtil = spy(OssBootUtil.class);\n        \n        // Mock the putObject result\n        PutObjectResult putObjectResult = mock(PutObjectResult.class);\n        when(ossBootUtil.upload(any(FileItemStream.class), anyString())).thenReturn(\"https://\" + TEST_BUCKET_NAME + \".\" + TEST_ENDPOINT + \"/\" + TEST_FILE_DIR + \"/\" + TEST_FILE_NAME);\n        \n        // Perform the upload operation\n        String result = ossBootUtil.upload(fileItemStream, TEST_FILE_DIR);\n        \n        // Verify the simulated upload interaction actually took place\n        verify(ossBootUtil).upload(fileItemStream, TEST_FILE_DIR);\n        \n        // Verify result format\n        assertNotNull(result);\n        assertTrue(result.startsWith(\"https://\"));\n        assertTrue(result.contains(TEST_BUCKET_NAME));\n        assertTrue(result.contains(TEST_FILE_DIR));\n        assertTrue(result.endsWith(TEST_FILE_NAME));\n        \n        // Clean up if necessary (not required for this mock example)\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n\n    @Mock\n    private FileItemStream file;\n\n    @Mock\n    private static OSSClient ossClient;\n    \n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void uploadTest() throws Exception {\n        // Setup\n        OssBootUtil.setEndPoint(\"test.endpoint\");\n        OssBootUtil.setAccessKeyId(\"testAccessKeyId\");\n        OssBootUtil.setAccessKeySecret(\"testAccessKeySecret\");\n        OssBootUtil.setBucketName(\"testBucket\");\n        OssBootUtil.setStaticDomain(\"https://test.domain\");\n\n        InputStream dummyStream = new ByteArrayInputStream(\"testContent\".getBytes());\n        when(file.getName()).thenReturn(\"test.txt\");\n        when(file.openStream()).thenReturn(dummyStream);\n        when(ossClient.putObject(eq(\"testBucket\"), any(String.class), eq(dummyStream)))\n            .thenReturn(new PutObjectResult()); // Mock successful upload response\n\n        // Mocking static methods should be done using the corresponding mocking libraries/methods\n        // This is pseudo-code and should be replaced with actual mocking technique\n        mockStatic(OssBootUtil.class);\n\n        // Act\n        String result = OssBootUtil.upload(file, \"test/file/dir\");\n\n        // Assert\n        assertNotNull(result);\n        String expectedPrefix = \"https://test.domain/test/file/dir\";\n        assertTrue(result.startsWith(expectedPrefix), \"Resulting path did not start with the expected domain and directory.\");\n        \n        // Verify interactions with mock objects\n        verify(ossClient).putObject(eq(\"testBucket\"), any(String.class), eq(dummyStream));\n        verify(file).openStream();\n        \n        // Unmock the static methods after test execution\n        // This is necessary when mocking static methods to avoid state issues in other tests\n        unmockStatic(OssBootUtil.class); // This needs to be replaced with the actual unmocking method\n    }\n    \n    @AfterEach\n    public void tearDown() throws Exception {\n        // Cleanup any resources after tests are complete\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.Mockito.doReturn;\n\npublic class OssBootUtilTest {\n    private static final String SAMPLE_BUCKET_NAME = \"test-bucket\";\n    private static final String SAMPLE_ENDPOINT = \"oss-test.aliyuncs.com\";\n    private static final String SAMPLE_STATIC_DOMAIN = \"static.example.com\";\n    \n    @Test\n    public void uploadTest() {\n        // Setup\n        OssBootUtil.setEndPoint(SAMPLE_ENDPOINT);\n        OssBootUtil.setBucketName(SAMPLE_BUCKET_NAME);\n        OssBootUtil.setAccessKeyId(\"ACCESSKEYID\");\n        OssBootUtil.setAccessKeySecret(\"ACCESSKEYSECRET\");\n        OssBootUtil.setStaticDomain(SAMPLE_STATIC_DOMAIN);\n        \n        OSSClient mockOssClient = mock(OSSClient.class);\n        PutObjectResult mockResult = mock(PutObjectResult.class);\n        FileItemStream mockFileItemStream = mock(FileItemStream.class);\n        \n        // When the constructor of OSSClient is called, then return the mock OssClient\n        doReturn(mockOssClient).when(mock(OSSClient.class));\n\n        // When certain methods are called on the mock, then return appropriate responses\n        when(mockOssClient.putObject(eq(SAMPLE_BUCKET_NAME), any(String.class), any(InputStream.class))).thenReturn(mockResult);\n        when(mockFileItemStream.getName()).thenReturn(\"testfile.txt\");\n        when(mockFileItemStream.openStream()).thenReturn(new ByteArrayInputStream(\"file content\".getBytes()));\n        \n        // Call the method under test\n        String fileDir = \"uploads/\";\n        String result = OssBootUtil.upload(mockFileItemStream, fileDir);\n\n        // Assertions\n        assertNotNull(result, \"Resulting file path should not be null\");\n        assertTrue(result.startsWith(\"https://\" + SAMPLE_BUCKET_NAME + \".\" + SAMPLE_ENDPOINT + \"/uploads/\"), \"Resulting file path should start with https and bucket endpoint\");\n        assertTrue(result.endsWith(\".txt\"), \"Resulting file path should end with the file extension .txt\");\n        \n        // Verify interactions\n        Mockito.verify(mockOssClient).putObject(eq(SAMPLE_BUCKET_NAME), any(String.class), any(InputStream.class));\n    }\n}"
    ]
}