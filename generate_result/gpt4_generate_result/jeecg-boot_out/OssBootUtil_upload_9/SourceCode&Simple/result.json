{
    "project_name": "jeecg-boot",
    "file_name": "OssBootUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/oss/OssBootUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.util.oss",
    "docstring": "/**\n     * \u4e0a\u4f20\u6587\u4ef6\u81f3\u963f\u91cc\u4e91 OSS\n     * \u6587\u4ef6\u4e0a\u4f20\u6210\u529f,\u8fd4\u56de\u6587\u4ef6\u5b8c\u6574\u8bbf\u95ee\u8def\u5f84\n     * \u6587\u4ef6\u4e0a\u4f20\u5931\u8d25,\u8fd4\u56de null\n     *\n     * @param file    \u5f85\u4e0a\u4f20\u6587\u4ef6\n     * @param fileDir \u6587\u4ef6\u4fdd\u5b58\u76ee\u5f55\n     * @return oss \u4e2d\u7684\u76f8\u5bf9\u6587\u4ef6\u8def\u5f84\n     */",
    "source_code": "\npublic static String upload(FileItemStream file, String fileDir) {\n    String filePath = null;\n    initOss(endPoint, accessKeyId, accessKeySecret);\n    StringBuilder fileUrl = new StringBuilder();\n    try {\n        String suffix = file.getName().substring(file.getName().lastIndexOf('.'));\n        String fileName = UUID.randomUUID().toString().replace(\"-\", \"\") + suffix;\n        if (!fileDir.endsWith(SymbolConstant.SINGLE_SLASH)) {\n            fileDir = fileDir.concat(SymbolConstant.SINGLE_SLASH);\n        }\n        fileDir = StrAttackFilter.filter(fileDir);\n        fileUrl = fileUrl.append(fileDir + fileName);\n        if (oConvertUtils.isNotEmpty(staticDomain) && staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n            filePath = staticDomain + SymbolConstant.SINGLE_SLASH + fileUrl;\n        } else {\n            filePath = \"https://\" + bucketName + \".\" + endPoint + SymbolConstant.SINGLE_SLASH + fileUrl;\n        }\n        PutObjectResult result = ossClient.putObject(bucketName, fileUrl.toString(), file.openStream());\n        // \u8bbe\u7f6e\u6743\u9650(\u516c\u5f00\u8bfb)\n        ossClient.setBucketAcl(bucketName, CannedAccessControlList.PublicRead);\n        if (result != null) {\n            log.info(\"------OSS\u6587\u4ef6\u4e0a\u4f20\u6210\u529f------\" + fileUrl);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n    return filePath;\n}\n",
    "class_name": "OssBootUtil",
    "method_name": "upload",
    "arguments": [
        "FileItemStream file",
        "String fileDir"
    ],
    "generate_test": [
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n\n    @Test\n    public void uploadTest() throws Exception {\n        String expectedEndpoint = \"oss-endpoint\";\n        String expectedAccessKeyId = \"access-key-id\";\n        String expectedAccessKeySecret = \"access-key-secret\";\n        String expectedBucketName = \"bucket-name\";\n        String expectedStaticDomain = null; // Assume there is no static domain configured.\n        String fileDir = \"test-directory/\";\n        String fileName = \"test.txt\";\n        String fileContent = \"This is a test file content\";\n\n        // Set up the OSS client and other static fields\n        OssBootUtil.setEndPoint(expectedEndpoint);\n        OssBootUtil.setAccessKeyId(expectedAccessKeyId);\n        OssBootUtil.setAccessKeySecret(expectedAccessKeySecret);\n        OssBootUtil.setBucketName(expectedBucketName);\n        OssBootUtil.setStaticDomain(expectedStaticDomain);\n        \n        // Mock the FileItemStream\n        FileItemStream fileItemStream = Mockito.mock(FileItemStream.class);\n        Mockito.when(fileItemStream.getName()).thenReturn(fileName);\n        Mockito.when(fileItemStream.openStream()).thenReturn(new ByteArrayInputStream(fileContent.getBytes()));\n\n        // Mock the OSS client and PutObjectResult\n        OSSClient mockOssClient = Mockito.mock(OSSClient.class);\n        PutObjectResult mockPutObjectResult = Mockito.mock(PutObjectResult.class);\n\n        // Assuming putObject returns a non-null result for a successful upload.\n        Mockito.when(mockPutObjectResult.getETag()).thenReturn(\"mockETag\");\n        Mockito.when(mockOssClient.putObject(eq(expectedBucketName), any(String.class), any(InputStream.class)))\n                .thenReturn(mockPutObjectResult);\n\n        // Replace the static ossClient in the OssBootUtil with the mock\n        ReflectionTestUtils.setField(OssBootUtil.class, \"ossClient\", mockOssClient);\n\n        // Perform the upload\n        String resultPath = OssBootUtil.upload(fileItemStream, fileDir);\n\n        // Verify results and interactions\n        assertNotNull(resultPath);\n        assertTrue(resultPath.contains(expectedBucketName));\n        assertTrue(resultPath.contains(expectedEndpoint));\n        assertTrue(resultPath.contains(fileDir));\n\n        // Verify that the object was put to the OSS\n        Mockito.verify(mockOssClient).putObject(eq(expectedBucketName), any(String.class), any(InputStream.class));\n\n        // Verify that the file URL is using HTTPS protocol\n        assertTrue(resultPath.startsWith(\"https://\"));\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\n\npublic class OssBootUtilTest {\n\n    // Make sure to have the required static values initialized if needed\n    static {\n        OssBootUtil.setEndPoint(\"example-endpoint\");\n        OssBootUtil.setAccessKeyId(\"example-access-key-id\");\n        OssBootUtil.setAccessKeySecret(\"example-access-key-secret\");\n        OssBootUtil.setBucketName(\"example-bucket-name\");\n        OssBootUtil.setStaticDomain(\"example-static-domain\");\n    }\n\n    @Mock\n    private FileItemStream fileItemStream;\n    @Mock\n    private OssBootUtil ossBootUtil;\n    \n    @BeforeEach\n    public void setUp() throws Exception {\n        MockitoAnnotations.initMocks(this);\n        \n        when(fileItemStream.getName()).thenReturn(\"test.txt\");\n        when(fileItemStream.openStream()).thenReturn(new ByteArrayInputStream(\"Test Content\".getBytes()));\n        \n        // Mocking the static methods if needed using the relevant mocking framework like Mockito\n    }\n    \n    @Test\n    public void uploadTest() throws Exception {\n        // Assuming that the upload method has been mocked and is returning a valid result\n        String fileDir = \"test-dir/\";\n        String expectedPath = \"https://\" + OssBootUtil.getBucketName() + \".\" +  OssBootUtil.getEndPoint() + \"/\" + fileDir + \"test-file-name\";\n        \n        when(OssBootUtil.upload(fileItemStream, fileDir)).thenReturn(expectedPath);\n        \n        String resultPath = OssBootUtil.upload(fileItemStream, fileDir);\n        \n        assertNotNull(resultPath, \"The upload should return a non-null file path\");\n        assertTrue(resultPath.startsWith(\"https://\"), \"The upload should return a URL starting with https://\");\n        assertEquals(expectedPath, resultPath, \"The uploaded file path does not match the expected path\");\n        \n        // Verify interaction with the mock if required\n        verify(fileItemStream).getName();\n        verify(fileItemStream).openStream();\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.ByteArrayInputStream;\nimport java.nio.charset.StandardCharsets;\n\npublic class OssBootUtilTest {\n\n    private static final String TEST_FILE_DIR = \"testDir/\";\n    private static final String TEST_FILE_NAME = \"test.txt\";\n    private static final String TEST_FILE_CONTENT = \"Test content\";\n    private static final String TEST_BUCKET_NAME = \"test-bucket\";\n    private static final String TEST_END_POINT = \"oss-test.aliyuncs.com\";\n    \n    // Mocks\n    private static OSSClient mockOssClient;\n    private static FileItemStream mockFileItemStream;\n\n    @BeforeAll\n    public static void setUpClass() {\n        // Mock initialization\n        mockOssClient = Mockito.mock(OSSClient.class);\n        mockFileItemStream = Mockito.mock(FileItemStream.class);\n        \n        // Set static fields\n        OssBootUtil.setEndPoint(TEST_END_POINT);\n        OssBootUtil.setBucketName(TEST_BUCKET_NAME);\n        \n        // Assume the initOss method sets the internal OSSClient\n        OssBootUtil.initOss(TEST_END_POINT, \"accessKeyId\", \"accessKeySecret\");\n    }\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        // Configure the mock FileItemStream\n        Mockito.when(mockFileItemStream.openStream()).thenReturn(new ByteArrayInputStream(TEST_FILE_CONTENT.getBytes(StandardCharsets.UTF_8)));\n        Mockito.when(mockFileItemStream.getName()).thenReturn(TEST_FILE_NAME);\n    }\n\n    @Test\n    public void uploadTest() {\n        // Prepare return objects for the mock\n        PutObjectResult mockResult = Mockito.mock(PutObjectResult.class);\n        \n        // Define behavior of the OSS client\n        Mockito.when(mockOssClient.putObject(Mockito.eq(TEST_BUCKET_NAME), Mockito.anyString(), Mockito.any(ByteArrayInputStream.class))).thenReturn(mockResult);\n        \n        // Test the upload method\n        String result = OssBootUtil.upload(mockFileItemStream, TEST_FILE_DIR);\n        \n        // Verify the result\n        assertNotNull(result, \"The result should not be null\");\n        assertTrue(result.contains(TEST_FILE_DIR), \"The result should contain the file directory\");\n        assertTrue(result.contains(TEST_END_POINT), \"The result should contain the endpoint\");\n        assertTrue(result.contains(TEST_FILE_NAME.substring(TEST_FILE_NAME.lastIndexOf('.'))), \"The result should contain the generated file extension\");\n        assertTrue(result.startsWith(\"https://\"), \"The result should start with https://\");\n        \n        // Verify interactions\n        Mockito.verify(mockOssClient).putObject(Mockito.anyString(), Mockito.anyString(), Mockito.any());\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Clean up after each test\n        Mockito.reset(mockOssClient);\n        Mockito.reset(mockFileItemStream);\n    }\n\n    @AfterAll\n    public static void tearDownClass() {\n        // Clean up after all tests are complete\n        OssBootUtil.setOssClient(null);\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport com.aliyun.oss.OSSClient;\nimport com.aliyun.oss.model.PutObjectResult;\nimport java.io.InputStream;\nimport java.util.UUID;\n\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n\n    private static OSSClient mockOssClient;\n    private static PutObjectResult mockPutObjectResult;\n    private static FileItemStream mockFileItemStream;\n    private static InputStream mockInputStream;\n\n    @BeforeAll\n    public static void setUp() {\n        mockOssClient = mock(OSSClient.class);\n        mockPutObjectResult = mock(PutObjectResult.class);\n        mockFileItemStream = mock(FileItemStream.class);\n        mockInputStream = mock(InputStream.class);\n\n        // Assume these static values are properly set for test\n        OssBootUtil.setEndPoint(\"oss-test-endpoint\");\n        OssBootUtil.setAccessKeyId(\"testAccessKeyId\");\n        OssBootUtil.setAccessKeySecret(\"testAccessKeySecret\");\n        OssBootUtil.setBucketName(\"test-bucket\");\n        OssBootUtil.setStaticDomain(\"https://test-static-domain.com\");\n\n        when(OssBootUtil.getOssClient()).thenReturn(mockOssClient);\n        when(mockFileItemStream.getName()).thenReturn(\"testfile.txt\");\n        when(mockFileItemStream.openStream()).thenReturn(mockInputStream);\n        when(mockOssClient.putObject(anyString(), anyString(), any(InputStream.class))).thenReturn(mockPutObjectResult);\n    }\n\n    @Test\n    public void uploadTest() {\n        String fileDir = \"/test/dir/\";\n        String expectedFileDir = StrAttackFilter.filter(fileDir);\n        String expectedFileName = UUID.randomUUID().toString().replace(\"-\", \"\") + \".txt\";\n        String expectedFileUrl = expectedFileDir + expectedFileName;\n        String expectedResult = \"https://test-static-domain.com\" + SymbolConstant.SINGLE_SLASH + expectedFileUrl;\n\n        String result = OssBootUtil.upload(mockFileItemStream, fileDir);\n\n        assertNotNull(result);\n        assertEquals(expectedResult, result);\n\n        // Verify that the OSSClient is used to put the object as expected\n        Mockito.verify(mockOssClient).putObject(\"test-bucket\", expectedFileUrl, mockInputStream);\n    }\n\n    @AfterAll\n    public static void tearDown() {\n        // Cleanup resources if necessary\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport com.aliyun.oss.*;\nimport com.aliyun.oss.model.*;\nimport org.apache.commons.fileupload.FileItemStream;\nimport java.io.*;\n\npublic class OssBootUtilTest {\n    private static final String END_POINT = \"test-endpoint\";\n    private static final String ACCESS_KEY_ID = \"test-access-key-id\";\n    private static final String ACCESS_KEY_SECRET = \"test-access-key-secret\";\n    private static final String BUCKET_NAME = \"test-bucket\";\n    private static final String STATIC_DOMAIN = \"http://test-static-domain.com\";\n    private static final String FILE_DIR = \"test-dir/\";\n    private static final String FILE_NAME = \"test.txt\";\n    private static final String MIME_TYPE = \"text/plain\";\n\n    private OSSClient ossClient;\n    private FileItemStream fileItemStream;\n    private InputStream inputStream;\n    private PutObjectResult putObjectResult;\n\n    @BeforeEach\n    public void setUp() throws IOException {\n        ossClient = mock(OSSClient.class);\n        fileItemStream = mock(FileItemStream.class);\n        inputStream = new ByteArrayInputStream(\"test content\".getBytes());\n        putObjectResult = mock(PutObjectResult.class);\n\n        OssBootUtil.setEndPoint(END_POINT);\n        OssBootUtil.setAccessKeyId(ACCESS_KEY_ID);\n        OssBootUtil.setAccessKeySecret(ACCESS_KEY_SECRET);\n        OssBootUtil.setBucketName(BUCKET_NAME);\n        OssBootUtil.setStaticDomain(STATIC_DOMAIN);\n\n        when(fileItemStream.getName()).thenReturn(FILE_NAME);\n        when(fileItemStream.openStream()).thenReturn(inputStream);\n        when(ossClient.putObject(eq(BUCKET_NAME), anyString(), any(InputStream.class))).thenReturn(putObjectResult);\n        \n        // Set the ossClient in your OssBootUtil to use the mock\n        // Ideally, we would have a method or a way to inject this mock into OssBootUtil,\n        // such as OssBootUtil.setOssClient(ossClient); otherwise, reflection will be needed.\n    }\n\n    @Test\n    public void uploadTest() {\n        String expectedUrl = STATIC_DOMAIN + \"/\" + FILE_DIR + \"generated-file-name.txt\";\n        // We need to simulate the generation of the UUID, so let's assume the generated UUID is\n        // \"123e4567-e89b-12d3-a456-426614174000\" and after replacing the hyphens it will be \"123e4567e89b12d3a456426614174000\".\n        // The actual implementation would use UUID.randomUUID().\n        String generatedFileName = \"123e4567e89b12d3a456426614174000.txt\";\n\n        try {\n            String resultPath = OssBootUtil.upload(fileItemStream, FILE_DIR);\n\n            assertNotNull(resultPath, \"The result path should not be null\");\n            assertTrue(resultPath.endsWith(generatedFileName), \"The result path should end with the generated file name\");\n            assertEquals(expectedUrl, resultPath, \"The expected URL should match the result path\");\n        } catch (IOException e) {\n            e.printStackTrace();\n            fail(\"IOException should not be thrown during the test\");\n        }\n\n        verify(ossClient, times(1)).putObject(eq(BUCKET_NAME), endsWith(generatedFileName), any(InputStream.class));\n    }\n\n    @AfterEach\n    void tearDown() throws IOException {\n        inputStream.close();\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.io.ByteArrayInputStream;\nimport java.nio.charset.StandardCharsets;\n\npublic class OssBootUtilTest {\n\n    private static final String TEST_DIR = \"test_directory/\";\n    private static final String TEST_FILE_NAME = \"test.txt\";\n    private static final String TEST_BUCKET_NAME = \"test-bucket\";\n\n    @BeforeAll\n    public static void setup() {\n        OssBootUtil.setEndPoint(\"endpoint.example.com\");\n        OssBootUtil.setAccessKeyId(\"testAccessKeyId\");\n        OssBootUtil.setAccessKeySecret(\"testAccessKeySecret\");\n        OssBootUtil.setBucketName(TEST_BUCKET_NAME);\n        OssBootUtil.setStaticDomain(\"https://static.example.com\");\n    }\n\n    @Test\n    public void uploadTest() throws Exception {\n        // Mock FileItemStream and OSSClient\n        FileItemStream fileItemStream = mock(FileItemStream.class);\n        OSSClient ossClient = mock(OSSClient.class);\n\n        // Setup FileItemStream to return a known file name and a ByteArrayInputStream (representing file data)\n        when(fileItemStream.getName()).thenReturn(TEST_FILE_NAME);\n        when(fileItemStream.openStream()).thenReturn(new ByteArrayInputStream(\"File content\".getBytes(StandardCharsets.UTF_8)));\n\n        // Mock the static OSSClient inside OssBootUtil\n        OssBootUtil.initOss(OssBootUtil.getEndPoint(), OssBootUtil.getAccessKeyId(), \n            OssBootUtil.getAccessKeySecret());\n        OssBootUtil.ossClient = ossClient;\n\n        // Mock successful putObject call\n        PutObjectResult result = new PutObjectResult();\n        when(ossClient.putObject(eq(TEST_BUCKET_NAME), anyString(), any())).thenReturn(result);\n\n        // Perform the upload\n        String filePath = OssBootUtil.upload(fileItemStream, TEST_DIR);\n\n        // Assertions\n        assertNotNull(filePath);\n        assertFalse(filePath.isEmpty());\n        if (OssBootUtil.getStaticDomain() != null && OssBootUtil.getStaticDomain().toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n            assertTrue(filePath.startsWith(OssBootUtil.getStaticDomain() + SymbolConstant.SINGLE_SLASH));\n        } else {\n            assertTrue(filePath.startsWith(\"https://\" + OssBootUtil.getBucketName() + \".\" + OssBootUtil.getEndPoint() + SymbolConstant.SINGLE_SLASH));\n        }\n\n        // Verify that the file was put into the bucket\n        verify(ossClient).putObject(eq(TEST_BUCKET_NAME), anyString(), any());\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\n\nimport com.aliyun.oss.OSSClient;\nimport com.aliyun.oss.model.PutObjectResult;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\n\npublic class OssBootUtilTest {\n\n    @Mock\n    private OSSClient mockOssClient;\n\n    @Mock\n    private FileItemStream mockFileItemStream;\n\n    @Mock\n    private PutObjectResult mockPutObjectResult;\n\n    // Initialize mocks before each test\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void uploadTest() throws Exception {\n        // Prepare test data\n        String fileDir = \"test-dir/\";\n        String fileName = \"test-file.txt\";\n        String fileContent = \"Test file content\";\n        String expectedFilePath = \"https://\" + OssBootUtil.getBucketName() + \".\" + OssBootUtil.getEndPoint() + \"/\" + fileDir + \"testfile.txt\";\n\n        // Set up the mock behavior\n        when(mockFileItemStream.getName()).thenReturn(fileName);\n        when(mockFileItemStream.openStream()).thenReturn(new ByteArrayInputStream(fileContent.getBytes()));\n        when(mockOssClient.putObject(anyString(), anyString(), any(InputStream.class))).thenReturn(mockPutObjectResult);\n\n        // Use reflection to inject the mocked OSSClient into the static OssBootUtil class\n        ReflectionTestUtils.setField(OssBootUtil.class, \"ossClient\", mockOssClient);\n\n        // Call the method under test\n        String result = OssBootUtil.upload(mockFileItemStream, fileDir);\n\n        // Verify the interaction with the mocked OSSClient\n        verify(mockOssClient, times(1)).putObject(eq(OssBootUtil.getBucketName()), anyString(), any(InputStream.class));\n        verify(mockOssClient, times(1)).setBucketAcl(eq(OssBootUtil.getBucketName()), eq(CannedAccessControlList.PublicRead));\n\n        // Assert that the result is as expected\n        assertNotNull(result);\n        assertEquals(expectedFilePath, result);\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\n\nclass MockFileItemStream implements FileItemStream {\n    @Override\n    public InputStream openStream() {\n        // Mock InputStream.\n        return new ByteArrayInputStream(\"Mock Content\".getBytes());\n    }\n    // Other required overrides would go here.\n    // Implementations can be left empty or mock behavior added as needed for the test.\n    @Override\n    public String getContentType() {\n        return null;\n    }\n    @Override\n    public String getName() {\n        return \"test.txt\";\n    }\n    @Override\n    public String getFieldName() {\n        return null;\n    }\n    @Override\n    public boolean isFormField() {\n        return false;\n    }\n    @Override\n    public java.io.OutputStream getOutputStream() {\n        return null;\n    }\n}\n\npublic class OssBootUtilTest {\n    private static final String FAKE_ENDPOINT = \"oss-fake-endpoint.aliyuncs.com\";\n    private static final String FAKE_ACCESS_KEY_ID = \"fakeAccessKeyId\";\n    private static final String FAKE_ACCESS_KEY_SECRET = \"fakeAccessKeySecret\";\n    private static final String FAKE_BUCKET_NAME = \"fake-bucket-name\";\n    private static final String STATIC_DOMAIN = \"https://fake-static-domain.com\";\n    private static final String FILE_DIR = \"directory/\";\n\n    private OSSClient mockedOssClient;\n\n    @BeforeEach\n    public void setup() {\n        // Assuming static setters are public as the context does not define it clearly\n        OssBootUtil.setEndPoint(FAKE_ENDPOINT);\n        OssBootUtil.setAccessKeyId(FAKE_ACCESS_KEY_ID);\n        OssBootUtil.setAccessKeySecret(FAKE_ACCESS_KEY_SECRET);\n        OssBootUtil.setBucketName(FAKE_BUCKET_NAME);\n        OssBootUtil.setStaticDomain(STATIC_DOMAIN);\n\n        mockedOssClient = Mockito.mock(OSSClient.class);\n        // Assuming there is a public static setter or alternative method to set the internal ossClient instance\n        OssBootUtil.setOssClient(mockedOssClient);\n    }\n\n    @Test\n    public void uploadTest() throws Exception {\n        // Arrange\n        FileItemStream fileItemStream = new MockFileItemStream();\n\n        PutObjectResult putObjectResult = Mockito.mock(PutObjectResult.class);\n        when(mockedOssClient.putObject(eq(FAKE_BUCKET_NAME), anyString(), any(InputStream.class))).thenReturn(putObjectResult);\n\n        // Act\n        String result = OssBootUtil.upload(fileItemStream, FILE_DIR);\n\n        // Assert\n        assertNotNull(result, \"The result should not be null.\");\n        assertTrue(result.startsWith(STATIC_DOMAIN), \"The result should start with the static domain.\");\n        assertTrue(result.contains(FILE_DIR), \"The result should contain the file directory.\");\n        verify(mockedOssClient, times(1)).putObject(eq(FAKE_BUCKET_NAME), anyString(), any(InputStream.class));\n        verify(mockedOssClient, times(1)).setBucketAcl(eq(FAKE_BUCKET_NAME), eq(CannedAccessControlList.PublicRead));\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Do any necessary cleanup after tests\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.*;\n\nimport com.aliyun.oss.model.PutObjectResult;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n\n    private static final String TEST_FILE_DIR = \"test_directory/\";\n    private static final String TEST_FILE_NAME = \"example.txt\";\n\n    @Test\n    public void uploadTest() throws Exception {\n        // Prepare a test file input stream and its name\n        FileItemStream fileItemStream = Mockito.mock(FileItemStream.class);\n        InputStream fileContentStream = new ByteArrayInputStream(\"Test content\".getBytes(StandardCharsets.UTF_8));\n        \n        when(fileItemStream.getName()).thenReturn(TEST_FILE_NAME);\n        when(fileItemStream.openStream()).thenReturn(fileContentStream);\n\n        // Mock the static methods in OssBootUtil that are used in the upload method\n        OssBootUtil.setEndPoint(\"oss-test.example.com\");\n        OssBootUtil.setAccessKeyId(\"testAccessKeyId\");\n        OssBootUtil.setAccessKeySecret(\"testAccessKeySecret\");\n        OssBootUtil.setBucketName(\"testBucket\");\n        OssBootUtil.setStaticDomain(\"https://static.example.com\");\n\n        OSSClient mockOssClient = Mockito.mock(OSSClient.class);\n        OssBootUtil.ossClient = mockOssClient; // Assuming ossClient can be accessed directly for testing purposes\n\n        PutObjectResult mockPutObjectResult = Mockito.mock(PutObjectResult.class);\n        when(mockOssClient.putObject(anyString(), anyString(), any(InputStream.class))).thenReturn(mockPutObjectResult);\n\n        // Call the method under test\n        String resultFilePath = OssBootUtil.upload(fileItemStream, TEST_FILE_DIR);\n\n        assertNotNull(resultFilePath, \"The result file path should not be null\");\n\n        // Verify that the putObject was called with the correct bucket name and file stream\n        verify(mockOssClient).putObject(eq(OssBootUtil.getBucketName()), anyString(), eq(fileContentStream));\n\n        // Check if the file path is correctly constructed\n        assertTrue(resultFilePath.startsWith(\"https://static.example.com/test_directory/\"), \"The file path should start with the static domain followed by the directory\");\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.junit.jupiter.api.*;\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.mockito.Mockito;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\nimport org.mockito.MockedStatic;\nimport org.mockito.Mockito;\n\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.util.UUID;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n\n    @Test\n    public void uploadTest() {\n        // Arrange\n        String expectedSuffix = \".txt\"; // This would be read from the FileItemStream in reality\n        String fileDir = \"uploads\";\n        String staticDomain = \"https://example.com\";\n        String endpoint = \"oss-endpoint\";\n        String bucketName = \"my-bucket\";\n\n        // Mock UUID and suffix extraction from file name\n        UUID mockUUID = UUID.randomUUID();\n        String expectedFileName = mockUUID.toString().replace(\"-\", \"\") + expectedSuffix;\n        try (MockedStatic<UUID> mockedUuid = Mockito.mockStatic(UUID.class)) {\n            mockedUuid.when(UUID::randomUUID).thenReturn(mockUUID);\n\n            // Mock initOss to set the static variables of the utility class\n            OssBootUtil.setBucketName(bucketName);\n            OssBootUtil.setEndPoint(endpoint);\n            OssBootUtil.setStaticDomain(staticDomain);\n\n            // Mock the creation of the file URL\n            FileItemStream fileItemStream = Mockito.mock(FileItemStream.class);\n            when(fileItemStream.getName()).thenReturn(\"file\" + expectedSuffix);\n            when(fileItemStream.openStream()).thenReturn(new InputStream() {\n                public int read() {\n                    return -1; // End of stream\n                }\n            });\n\n            // Act\n            String result = OssBootUtil.upload(fileItemStream, fileDir);\n\n            // Assert\n            String expectedPath = staticDomain + \"/\" + fileDir + \"/\" + expectedFileName;\n            assertEquals(expectedPath, result, \"The resulting file path should match the expected one.\");\n        } catch (Exception e) {\n            fail(\"Exception should not be thrown in test\");\n        }\n    }\n}"
    ]
}