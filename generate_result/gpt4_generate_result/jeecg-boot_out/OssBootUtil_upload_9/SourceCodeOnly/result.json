{
    "project_name": "jeecg-boot",
    "file_name": "OssBootUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/oss/OssBootUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.util.oss",
    "docstring": "/**\n     * \u4e0a\u4f20\u6587\u4ef6\u81f3\u963f\u91cc\u4e91 OSS\n     * \u6587\u4ef6\u4e0a\u4f20\u6210\u529f,\u8fd4\u56de\u6587\u4ef6\u5b8c\u6574\u8bbf\u95ee\u8def\u5f84\n     * \u6587\u4ef6\u4e0a\u4f20\u5931\u8d25,\u8fd4\u56de null\n     *\n     * @param file    \u5f85\u4e0a\u4f20\u6587\u4ef6\n     * @param fileDir \u6587\u4ef6\u4fdd\u5b58\u76ee\u5f55\n     * @return oss \u4e2d\u7684\u76f8\u5bf9\u6587\u4ef6\u8def\u5f84\n     */",
    "source_code": "\npublic static String upload(FileItemStream file, String fileDir) {\n    String filePath = null;\n    initOss(endPoint, accessKeyId, accessKeySecret);\n    StringBuilder fileUrl = new StringBuilder();\n    try {\n        String suffix = file.getName().substring(file.getName().lastIndexOf('.'));\n        String fileName = UUID.randomUUID().toString().replace(\"-\", \"\") + suffix;\n        if (!fileDir.endsWith(SymbolConstant.SINGLE_SLASH)) {\n            fileDir = fileDir.concat(SymbolConstant.SINGLE_SLASH);\n        }\n        fileDir = StrAttackFilter.filter(fileDir);\n        fileUrl = fileUrl.append(fileDir + fileName);\n        if (oConvertUtils.isNotEmpty(staticDomain) && staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n            filePath = staticDomain + SymbolConstant.SINGLE_SLASH + fileUrl;\n        } else {\n            filePath = \"https://\" + bucketName + \".\" + endPoint + SymbolConstant.SINGLE_SLASH + fileUrl;\n        }\n        PutObjectResult result = ossClient.putObject(bucketName, fileUrl.toString(), file.openStream());\n        // \u8bbe\u7f6e\u6743\u9650(\u516c\u5f00\u8bfb)\n        ossClient.setBucketAcl(bucketName, CannedAccessControlList.PublicRead);\n        if (result != null) {\n            log.info(\"------OSS\u6587\u4ef6\u4e0a\u4f20\u6210\u529f------\" + fileUrl);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n    return filePath;\n}\n",
    "class_name": "OssBootUtil",
    "method_name": "upload",
    "arguments": [
        "FileItemStream file",
        "String fileDir"
    ],
    "generate_test": [
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport java.io.InputStream;\nimport java.nio.file.Paths;\nimport java.util.UUID;\n\npublic class OssBootUtilTest {\n    \n    private static final String END_POINT = \"oss-example-endpoint.com\";\n    private static final String ACCESS_KEY_ID = \"testAccessKeyId\";\n    private static final String ACCESS_KEY_SECRET = \"testAccessKeySecret\";\n    private static final String STATIC_DOMAIN = \"http://static.example.com\";\n    private static final String BUCKET_NAME = \"test-bucket\";\n    private static final String FILE_DIR = \"test/dir/\";\n    \n    private FileItemStream fileItemStream;\n    private InputStream inputStream;\n\n    @BeforeEach\n    void setUp() throws Exception {\n        fileItemStream = mock(FileItemStream.class);\n        inputStream = mock(InputStream.class);\n\n        // Assume these static methods are part of the unit under test and need to be stubbed.\n        OssBootUtil.initOss(END_POINT, ACCESS_KEY_ID, ACCESS_KEY_SECRET);\n        OssBootUtil.setBucketAcl(anyString(), any());\n        \n        // Mock the file item stream and input stream.\n        when(fileItemStream.getName()).thenReturn(\"test.txt\");\n        when(fileItemStream.openStream()).thenReturn(inputStream);\n        \n        // Assume the StrAttackFilter returns the input string without changes.\n        when(StrAttackFilter.filter(FILE_DIR)).thenReturn(FILE_DIR);\n    }\n    \n    @Test\n    public void uploadTest() {\n        // Assume file upload result\n        PutObjectResult putObjectResult = new PutObjectResult();\n        when(OssBootUtil.ossClient.putObject(eq(BUCKET_NAME), anyString(), eq(inputStream))).thenReturn(putObjectResult);\n        \n        // Attempt to upload the file\n        String filePath = OssBootUtil.upload(fileItemStream, FILE_DIR);\n        \n        // Validate the returned file path is not null\n        assertNotNull(filePath, \"The file path should not be null after a successful upload.\");\n        \n        // Validate the correct file path format is returned.\n        // This check assumes usage of static domain when available and proper path concatenation.\n        String expectedPrefix = STATIC_DOMAIN.startsWith(\"http\") ? STATIC_DOMAIN : \"https://\" + BUCKET_NAME + \".\" + END_POINT;\n        String expectedPath = expectedPrefix + \"/\" + FILE_DIR;\n        assertTrue(filePath.startsWith(expectedPath), \"The file path should start with the expected prefix and directory.\");\n        \n        // Validate the file path contains the generated UUID as file name\n        String expectedFileNamePart = filePath.substring(expectedPath.length());\n        assertTrue(Paths.get(expectedFileNamePart).getFileName().toString().matches(\"[0-9a-f]{32}\\\\.txt\"), \"The file name in the file path should be a UUID with the correct suffix.\");\n        \n        // Optionally, check the log output or other side effects if required by the test situation.\n    }\n    \n    @AfterEach\n    void tearDown() throws Exception {\n        // Close the InputStream or clean up any other resources if necessary\n        if (inputStream != null) {\n            inputStream.close();\n        }\n    }\n}\n",
        "package org.jeecg.common.util.oss;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport com.aliyun.oss.OSS;\nimport com.aliyun.oss.OSSClient;\nimport com.aliyun.oss.model.CannedAccessControlList;\nimport com.aliyun.oss.model.PutObjectResult;\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.*;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.UUID;\n\n@ExtendWith(MockitoExtension.class)\npublic class OssBootUtilTest {\n\n    @Mock\n    private OSS ossClient;\n\n    @Mock\n    private FileItemStream fileItemStream;\n\n    @InjectMocks\n    private OssBootUtil ossBootUtil;\n\n    private String endPoint = \"test.endpoint.com\";\n    private String accessKeyId = \"testAccessKeyId\";\n    private String accessKeySecret = \"testAccessKeySecret\";\n    private String staticDomain = \"http://teststaticdomain.com\";\n    private String bucketName = \"testbucket\";\n    private String fileDir = \"/testdir/\";\n\n    @BeforeEach\n    public void setUp() throws IOException {\n        OssBootUtil.initOss(endPoint, accessKeyId, accessKeySecret);\n        OssBootUtil.staticDomain = staticDomain;\n        OssBootUtil.bucketName = bucketName;\n\n        // Configure FileItemStream\n        when(fileItemStream.getName()).thenReturn(\"testfile.txt\");\n        InputStream fileContent = new ByteArrayInputStream(\"File content\".getBytes());\n        when(fileItemStream.openStream()).thenReturn(fileContent);\n    }\n\n    @Test\n    public void uploadTest() throws IOException {\n        // Configure OSSClient to return a non-null result.\n        PutObjectResult putObjectResult = new PutObjectResult();\n        when(ossClient.putObject(eq(bucketName), anyString(), any(InputStream.class))).thenReturn(putObjectResult);\n\n        String uploadedFile = OssBootUtil.upload(fileItemStream, fileDir);\n\n        assertNotNull(uploadedFile, \"The uploaded file path should not be null\");\n        assertTrue(uploadedFile.startsWith(staticDomain) || uploadedFile.startsWith(\"https://\"), \"The uploaded file path should start with the static domain or https protocol.\");\n        verify(ossClient).setBucketAcl(eq(bucketName), eq(CannedAccessControlList.PublicRead));\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport static org.mockito.Mockito.*;\nimport java.io.*;\nimport java.util.UUID;\n\nimport com.aliyun.oss.OSSClient;\nimport com.aliyun.oss.model.PutObjectResult;\nimport com.aliyun.oss.model.CannedAccessControlList;\n\npublic class OssBootUtilTest {\n\n    // Let's assume that we've also mocked the necessary OSS components.\n    private static String endPoint = \"fake-end-point\";\n    private static String accessKeyId = \"fake-access-key-id\";\n    private static String accessKeySecret = \"fake-access-key-secret\";\n    private static String staticDomain = \"fake-static-domain\";\n    private static String bucketName = \"fake-bucket-name\";\n    \n    @Test\n    public void uploadTest() throws IOException {\n        // Mock the FileItemStream to return a fake filename\n        FileItemStream file = mock(FileItemStream.class);\n        when(file.getName()).thenReturn(\"test.txt\");\n        \n        // Mock the InputStream returned by file.openStream()\n        InputStream inputStream = new ByteArrayInputStream(\"file content\".getBytes());\n        when(file.openStream()).thenReturn(inputStream);\n        \n        // Mock the OSS Client\n        OSSClient ossClient = mock(OSSClient.class);\n        // Mock a response from the putObject method\n        when(ossClient.putObject(anyString(), anyString(), any(InputStream.class)))\n                .thenReturn(new PutObjectResult());\n        \n        // Mock initOss method and StrAttackFilter.filter method\n        // Since we don't have their implementations, we'll just assume they are successfully setting up the OSS client\n        OssBootUtil.initOss(endPoint, accessKeyId, accessKeySecret);\n        when(StrAttackFilter.filter(anyString())).thenAnswer(i -> i.getArguments()[0]);\n        \n        // Mock the upload call and verify the result\n        String fileDir = \"some/dir/\";\n        String result = OssBootUtil.upload(file, fileDir);\n        \n        // We'll assume that result should not be null, so test it\n        assertNotNull(result);\n        \n        // Verify interaction with mocked objects\n        verify(file).openStream(); // Verify file.openStream() was called\n        verify(ossClient).putObject(anyString(), anyString(), any(InputStream.class)); // Verify putObject was called on the ossClient\n        // Verify that setBucketAcl was called with the expected bucket name and ACL setting\n        verify(ossClient).setBucketAcl(eq(bucketName), eq(CannedAccessControlList.PublicRead));\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport java.io.InputStream;\n\npublic class OssBootUtilTest {\n\n    @Test\n    public void uploadTest() {\n        // Assuming OssBootUtil class contains the upload method\n        // And assuming there are necessary static members like endPoint, accessKeyId, etc.\n\n        // Mock necessary components for the test.\n        FileItemStream mockFileItemStream = mock(FileItemStream.class);\n        String testFileDir = \"test-directory\";\n        \n        // Assuming StrAttackFilter, oConvertUtils etc. are available and used in the test.\n        try {\n            // Setup mock file stream and name\n            when(mockFileItemStream.getName()).thenReturn(\"test-file.jpg\");\n            when(mockFileItemStream.openStream()).thenReturn(mock(InputStream.class));\n            \n            // Call the method under test with the mock and directory\n            String result = OssBootUtil.upload(mockFileItemStream, testFileDir);\n            \n            // Verify the result is not null\n            assertNotNull(result, \"Uploaded file path should not be null\");\n            \n            // Verify that the correct file path format is returned (based on Java source code logic)\n            String expectedPrefix = \"https://\" + \"bucketName\" + \".\" + \"endPoint\" + \"/\"; // Replace with actual static values\n            String expectedSuffix = \".jpg\"; // This should match the suffix of the test data setup above\n            assertTrue(result.startsWith(expectedPrefix), \"Result should start with the expected prefix: \" + expectedPrefix);\n            assertTrue(result.endsWith(expectedSuffix), \"Result should end with the expected suffix: \" + expectedSuffix);\n            \n            // Verify that the result includes the file directory\n            assertTrue(result.contains(testFileDir), \"Result should contain the test file directory\");\n            \n            // Additional checks could be made to ensure correct handling\n            // of corner cases, exception handling, etc.\n        } catch (Exception e) {\n            fail(\"Unexpected exception occurred: \" + e.getMessage());\n        }\n        \n        // Any additional test scenarios and verifications as required.\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport com.aliyun.oss.OSS;\nimport com.aliyun.oss.model.CannedAccessControlList;\nimport com.aliyun.oss.model.PutObjectResult;\n\nimport java.io.*;\n\npublic class OssBootUtilTest {\n    \n    // Assuming these are the static mocks needed for the test\n    private static final String endPoint = \"oss-endpoint\";\n    private static final String accessKeyId = \"access-key-id\";\n    private static final String accessKeySecret = \"access-key-secret\";\n    private static final String staticDomain = \"static-domain\";\n    private static final String bucketName = \"bucket-name\";\n    \n    @Test\n    public void uploadTest() {\n        // Arrange\n        FileItemStream file = mock(FileItemStream.class);\n        String fileDir = \"/example/path/\";\n        \n        // Assume initOss is a static method to initialize OSS which needs to be mocked\n        OssBootUtil.initOss(endPoint, accessKeyId, accessKeySecret);\n        \n        // Assume we use a mock OSS client\n        OSS ossClient = mock(OSS.class);\n        when(ossClient.putObject(anyString(), anyString(), any(InputStream.class))).thenReturn(new PutObjectResult());\n        // Assume OssBootUtil has a static reference to the OSS client that we are mocking here\n        ReflectionTestUtils.setField(OssBootUtil.class, \"ossClient\", ossClient);\n        \n        when(file.getName()).thenReturn(\"testfile.txt\");\n        when(file.openStream()).thenReturn(new ByteArrayInputStream(\"fileContent\".getBytes()));\n        // Assume StrAttackFilter.filter is a static method that needs to be mocked\n        String filteredFileDir = StrAttackFilter.filter(fileDir);\n        \n        // Full URL should be either with the static domain or constructed from bucket + endpoint\n        String expectedFilePath = \"https://\" + bucketName + \".\" + endPoint + fileDir + \"generatedFileName.txt\";\n        \n        // Act\n        String result = OssBootUtil.upload(file, fileDir);\n        \n        // Assert\n        assertNotNull(result, \"File path should not be null\");\n        assertTrue(result.startsWith(\"https://\"), \"File path should start with https://\");\n        assertEquals(expectedFilePath, result, \"The file path is not as expected.\");\n        \n        // Verify interaction with the mocked ossClient\n        verify(ossClient).putObject(eq(bucketName), contains(fileDir), any(InputStream.class));\n        verify(ossClient).setBucketAcl(eq(bucketName), eq(CannedAccessControlList.PublicRead));\n        // Add other necessary verifications here\n        \n        // Clean up mocks if necessary\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport com.aliyun.oss.OSSClient;\nimport com.aliyun.oss.model.CannedAccessControlList;\nimport com.aliyun.oss.model.PutObjectResult;\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.UUID;\n\n@ExtendWith(MockitoExtension.class)\npublic class OssBootUtilTest {\n\n    @Mock\n    private OSSClient ossClient;\n    @Mock\n    private PutObjectResult putObjectResult;\n\n    @InjectMocks\n    private OssBootUtil ossBootUtil;\n    \n    // Mock FileItemStream to simulate file input.\n    @Mock\n    private FileItemStream fileItemStream;\n    @Mock \n    private InputStream inputStream;\n\n    @BeforeEach\n    public void setUp() throws IOException {\n        // Configuring the behaviour for the mock objects\n        when(fileItemStream.getName()).thenReturn(\"testfile.jpg\");\n        when(fileItemStream.openStream()).thenReturn(inputStream);\n        when(ossClient.putObject(any(String.class), any(String.class), any(InputStream.class))).thenReturn(putObjectResult);\n    }\n\n    @Test\n    public void uploadTest() {\n        String fileDir = \"test/dir/\";\n        String endPoint = \"oss-test.aliyuncs.com\";\n        String accessKeyId = \"testAccessKeyId\";\n        String accessKeySecret = \"testAccessKeySecret\";\n        String bucketName = \"test-bucket\";\n        String staticDomain = \"https://test-domain.com\";\n        \n        OssBootUtil.initOss(endPoint, accessKeyId, accessKeySecret, bucketName, staticDomain); // Assume this initializes the static variables used in the method\n\n        // Execute the upload method\n        String uploadedFilePath = OssBootUtil.upload(fileItemStream, fileDir);\n\n        // Assertions\n        assertNotNull(uploadedFilePath, \"Uploaded file path should not be null\");\n        assertTrue(uploadedFilePath.startsWith(staticDomain) || uploadedFilePath.startsWith(\"https://\"),\n                \"Uploaded file path should start with the static domain or default https format\");\n\n        // Verify that the OSS client had its putObject method called once\n        verify(ossClient, times(1)).putObject(eq(bucketName), contains(fileDir), eq(inputStream));\n        // Verify that the OSS client set the bucket ACL to public read once\n        verify(ossClient, times(1)).setBucketAcl(eq(bucketName), eq(CannedAccessControlList.PublicRead));\n    }\n\n    // This is just an example. The actual OssBootUtil class may need to have methods like initOss or constants adjusted to be tested correctly.\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.UUID;\nimport java.nio.file.Files;\nimport java.io.File;\nimport java.io.IOException;\n\npublic class OssBootUtilTest {\n\n    private static final String bucketName = \"example-bucket\";\n    private static final String endPoint = \"oss-example-endpoint.com\";\n    private static final String accessKeyId = \"test-access-key-id\";\n    private static final String accessKeySecret = \"test-access-key-secret\";\n    private static final String staticDomain = \"https://static.example.com\";\n\n    private FileItemStream testFileItemStream;\n    private String testFileDir;\n    private String expectedFileUrl;\n    \n    @BeforeEach\n    public void setUp() throws IOException {\n        // Mock FileItemStream (you would replace this with your actual mock)\n        testFileItemStream = new FileItemStreamImpl(new File(\"testfile.txt\"), \"testfile.txt\", \"text/plain\", Files.newInputStream(Paths.get(\"testfile.txt\")), false);\n        \n        // Define the file directory\n        testFileDir = \"test/dir/\";\n        \n        // Assuming that the StrAttackFilter simply returns the input\n        // and SymbolConstant.SINGLE_SLASH corresponds to \"/\"\n        \n        // Construct the expected file URL\n        String fileName = UUID.randomUUID().toString().replace(\"-\", \"\") + \".txt\";\n        String fileDirFiltered = testFileDir;  // Assuming no changes after filtering for simplicity\n        if (!fileDirFiltered.endsWith(\"/\")) {\n            fileDirFiltered += \"/\";\n        }\n        expectedFileUrl = staticDomain + \"/\" + fileDirFiltered + fileName;\n    }\n\n    @Test\n    public void uploadTest() {\n        // Mock the static methods `initOss`, `oConvertUtils.isNotEmpty`, and interactions with `ossClient`\n        // For example: \n        // PowerMockito.mockStatic(OssBootUtil.class);\n\n        // Mock the conditions inside the upload method\n        // PowerMockito.when(oConvertUtils.isNotEmpty(staticDomain)).thenReturn(true);\n        // PowerMockito.when(staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)).thenReturn(true);\n        \n        // After setting up the mocks, we'd call the method under test\n        String result = OssBootUtil.upload(testFileItemStream, testFileDir);\n        \n        // Check the result\n        assertNotNull(result, \"The result should not be null\");\n        assertEquals(expectedFileUrl, result, \"The expected URL should match the returned URL\");\n    }\n}\n\n/**\n * This class is a placeholder for what might be an actual implementation of FileItemStream for the test.\n */\nclass FileItemStreamImpl implements FileItemStream {\n    private File file;\n    private String name;\n    private String contentType;\n    private InputStream stream;\n    private boolean formField;\n    \n    public FileItemStreamImpl(File file, String name, String contentType, InputStream stream, boolean formField) {\n        this.file = file;\n        this.name = name;\n        this.contentType = contentType;\n        this.stream = stream;\n        this.formField = formField;\n    }\n    \n    @Override\n    public InputStream openStream() throws IOException {\n        return stream;\n    }\n    \n    @Override\n    public String getName() {\n        return name;\n    }\n    \n    @Override\n    public String getContentType() {\n        return contentType;\n    }\n\n    // The rest of the FileItemStream interface methods would be implemented or stubbed out here\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\nimport java.io.*;\nimport java.util.UUID;\n\npublic class OssBootUtilTest {\n\n    // Sample constants\n    private static final String TEST_DIR = \"/test/dir/\";\n    private static final String END_POINT = \"oss.example.com\";\n    private static final String ACCESS_KEY_ID = \"accessKeyId\";\n    private static final String ACCESS_KEY_SECRET = \"accessKeySecret\";\n    private static final String BUCKET_NAME = \"bucket-name\";\n    private static final String STATIC_DOMAIN = \"http://static.example.com\";\n\n    // Mocked file stream to simulate file for upload\n    private FileItemStream mockFileItemStream;\n    // Mocked ossClient to simulate interaction with the OSS SDK\n    private OSSClient mockOssClient;\n    \n    @BeforeEach\n    public void setup() {\n        mockFileItemStream = Mockito.mock(FileItemStream.class);\n        mockOssClient = Mockito.mock(OSSClient.class);\n        // Setup for static methods\n        PowerMockito.mockStatic(OssBootUtil.class);\n        PowerMockito.doNothing().when(OssBootUtil.class);\n        OssBootUtil.initOss(Mockito.anyString(), Mockito.anyString(), Mockito.anyString());\n        \n        when(mockFileItemStream.getName()).thenReturn(\"testFile.txt\");\n        when(mockFileItemStream.openStream()).thenReturn(new ByteArrayInputStream(new byte[10]));\n    }\n    \n    @Test\n    public void uploadTest() {\n        try {\n            // Assume these are static variables in your OssBootUtil class\n            Whitebox.setInternalState(OssBootUtil.class, \"endPoint\", END_POINT);\n            Whitebox.setInternalState(OssBootUtil.class, \"accessKeyId\", ACCESS_KEY_ID);\n            Whitebox.setInternalState(OssBootUtil.class, \"accessKeySecret\", ACCESS_KEY_SECRET);\n            Whitebox.setInternalState(OssBootUtil.class, \"bucketName\", BUCKET_NAME);\n            Whitebox.setInternalState(OssBootUtil.class, \"staticDomain\", STATIC_DOMAIN);\n            Whitebox.setInternalState(OssBootUtil.class, \"ossClient\", mockOssClient);\n            \n            // Mock a successful response from the OSS client\n            PutObjectResult mockResult = Mockito.mock(PutObjectResult.class);\n            when(mockOssClient.putObject(Mockito.eq(BUCKET_NAME), Mockito.anyString(), Mockito.any(InputStream.class))).thenReturn(mockResult);\n            \n            // Run the method under test\n            String resultPath = OssBootUtil.upload(mockFileItemStream, TEST_DIR);\n            \n            // Verify behaviors and assert expectations\n            \n            assertNotNull(resultPath, \"The returned file path should not be null when upload is successful\");\n            assertTrue(resultPath.startsWith(STATIC_DOMAIN) || resultPath.startsWith(\"https://\" + BUCKET_NAME + \".\" + END_POINT), \"The file path should be prefixed correctly\");\n\n            verify(mockOssClient, Mockito.times(1)).putObject(Mockito.eq(BUCKET_NAME), Mockito.anyString(), Mockito.any(InputStream.class));\n            verify(mockOssClient, Mockito.times(1)).setBucketAcl(Mockito.eq(BUCKET_NAME), Mockito.eq(CannedAccessControlList.PublicRead));\n\n        } catch (IOException e) {\n            fail(\"Unexpected IOException: \" + e.getMessage());\n        }\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport java.io.*;\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\n\n// Assuming there are additional static imports for methods like initOss, StrAttackFilter, etc.\n\npublic class OssBootUtilTest {\n\n    @Mock\n    private FileItemStream fileItemStream;\n\n    @Mock\n    private PutObjectResult putObjectResult;\n\n    @InjectMocks\n    private static OssBootUtil ossBootUtil;\n\n    private static String endPoint = \"endpoint.example.com\";\n    private static String accessKeyId = \"ACCESS_KEY_ID\";\n    private static String accessKeySecret = \"ACCESS_KEY_SECRET\";\n    private static String staticDomain = \"https://static.example.com\";\n    private static String bucketName = \"bucket-name\";\n    \n    // SymbolConstant and CommonConstant need to be accessible here, either imported or hardcoded\n    private static final String SINGLE_SLASH = \"/\"; \n\n    @BeforeAll\n    static void setUpBeforeClass() {\n        MockitoAnnotations.openMocks(OssBootUtilTest.class);\n    }\n\n    @Test\n    public void uploadTest() throws IOException {\n        String fileDir = \"files\";\n        String expectedUrl = \"https://\" + bucketName + \".\" + endPoint + \"/files/\";\n        String fileName = \"file.jpg\";\n        InputStream fileInputStream = new ByteArrayInputStream(\"file content\".getBytes());\n\n        when(fileItemStream.getName()).thenReturn(fileName);\n        when(fileItemStream.openStream()).thenReturn(fileInputStream);\n        when(ossClient.putObject(eq(bucketName), anyString(), any(InputStream.class))).thenReturn(putObjectResult);\n\n        initOss(endPoint, accessKeyId, accessKeySecret);\n        OssBootUtil.initOssClient(); // Assuming this is how you initialize your ossClient instance\n\n        String fileUploadPath = OssBootUtil.upload(fileItemStream, fileDir);\n\n        assertNotNull(fileUploadPath);\n        assertTrue(fileUploadPath.startsWith(expectedUrl));\n\n        verify(fileItemStream).getName();\n        verify(fileItemStream).openStream();\n        verify(ossClient).putObject(eq(bucketName), contains(fileDir), any(InputStream.class));\n        verify(ossClient).setBucketAcl(eq(bucketName), eq(CannedAccessControlList.PublicRead));\n    }\n}",
        "package org.jeecg.common.util.oss;\n\n// Import statements for JUnit and potential mocking libraries\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.IOException;\n\npublic class OssBootUtilTest {\n\n    @Test\n    public void uploadTest() {\n        // Setting up the mocked FileItemStream\n        FileItemStream file = mock(FileItemStream.class);\n        // Mock the file name to test the method behavior\n        when(file.getName()).thenReturn(\"testFile.txt\");\n\n        // Mock the OSS client methods (This depends on the actual implementation)\n        OssClient ossClient = mock(OssClient.class);\n        PutObjectResult result = mock(PutObjectResult.class);\n        when(ossClient.putObject(anyString(), anyString(), any())).thenReturn(result);\n        doNothing().when(ossClient).setBucketAcl(anyString(), any(CannedAccessControlList.class));\n\n        // Assuming there are static utility methods that need to be mocked\n        Mockito.mockStatic(StrAttackFilter.class);\n        Mockito.mockStatic(oConvertUtils.class);\n\n        when(StrAttackFilter.filter(anyString())).thenAnswer(invocation -> invocation.getArguments()[0]);\n        when(oConvertUtils.isNotEmpty(anyString())).thenReturn(true);\n        \n        // Define constants involved in the method\n        String fileDir = \"uploads/\";\n        String endPoint = \"oss.example.com\";\n        String accessKeyId = \"testAccessKey\";\n        String accessKeySecret = \"testSecret\";\n        String staticDomain = \"http://static.example.com\";\n        String bucketName = \"testBucket\";\n        // Constants from SymbolConstant and CommonConstant need to be defined in the actual test context\n        String SINGLE_SLASH = \"/\";\n        String STR_HTTP = \"http\";\n\n        // Expected result\n        String expectedFilePath = \"http://\" + staticDomain + SINGLE_SLASH + fileDir + fileNameReplacement;\n\n        // Call the method under test\n        String resultFilePath = OssBootUtil.upload(file, fileDir);\n\n        // Verify that the methods are called with the expected arguments\n        verify(ossClient).putObject(eq(bucketName), contains(fileDir), any());\n        verify(ossClient).setBucketAcl(eq(bucketName), eq(CannedAccessControlList.PublicRead));\n\n        // Assertions\n        assertNotNull(resultFilePath, \"The returned file path should not be null\");\n        assertEquals(expectedFilePath, resultFilePath, \"The returned file path did not match the expected value\");\n\n        // Make sure that the log is being called as expected\n        verifyStatic(log.info(\"------OSS\u6587\u4ef6\u4e0a\u4f20\u6210\u529f------\" + fileUrl));\n    }\n}"
    ]
}