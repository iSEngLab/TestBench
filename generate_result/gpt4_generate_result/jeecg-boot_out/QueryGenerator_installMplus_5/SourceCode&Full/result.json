{
    "project_name": "jeecg-boot",
    "file_name": "QueryGenerator.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/query/QueryGenerator.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.system.query",
    "docstring": "/**\n\t * \u7ec4\u88c5Mybatis Plus \u67e5\u8be2\u6761\u4ef6\n\t * <p>\u4f7f\u7528\u6b64\u65b9\u6cd5 \u9700\u8981\u6709\u5982\u4e0b\u51e0\u70b9\u6ce8\u610f:   \n\t * <br>1.\u4f7f\u7528QueryWrapper \u800c\u975eLambdaQueryWrapper;\n\t * <br>2.\u5b9e\u4f8b\u5316QueryWrapper\u65f6\u4e0d\u53ef\u5c06\u5b9e\u4f53\u4f20\u5165\u53c2\u6570   \n\t * <br>\u9519\u8bef\u793a\u4f8b:\u5982QueryWrapper<JeecgDemo> queryWrapper = new QueryWrapper<JeecgDemo>(jeecgDemo);\n\t * <br>\u6b63\u786e\u793a\u4f8b:QueryWrapper<JeecgDemo> queryWrapper = new QueryWrapper<JeecgDemo>();\n\t * <br>3.\u4e5f\u53ef\u4ee5\u4e0d\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u76f4\u63a5\u8c03\u7528 {@link #initQueryWrapper}\u76f4\u63a5\u83b7\u53d6\u5b9e\u4f8b\n\t */",
    "source_code": "\nprivate static void installMplus(QueryWrapper<?> queryWrapper,Object searchObj,Map<String, String[]> parameterMap) {\n\t\n\t/*\n\t * \u6ce8\u610f:\u6743\u9650\u67e5\u8be2\u7531\u524d\u7aef\u914d\u7f6e\u6570\u636e\u89c4\u5219 \u5f53\u4e00\u4e2a\u4eba\u6709\u591a\u4e2a\u6240\u5c5e\u90e8\u95e8\u65f6\u5019 \u53ef\u4ee5\u5728\u89c4\u5219\u914d\u7f6e\u5305\u542b\u6761\u4ef6 orgCode \u5305\u542b #{sys_org_code}\n\t\u4f46\u662f\u4e0d\u652f\u6301\u5728\u81ea\u5b9a\u4e49SQL\u4e2d\u5199orgCode in #{sys_org_code} \n\t\u5f53\u4e00\u4e2a\u4eba\u53ea\u6709\u4e00\u4e2a\u90e8\u95e8 \u5c31\u76f4\u63a5\u914d\u7f6e\u7b49\u4e8e\u6761\u4ef6: orgCode \u7b49\u4e8e #{sys_org_code} \u6216\u8005\u914d\u7f6e\u81ea\u5b9a\u4e49SQL: orgCode = '#{sys_org_code}'\n\t*/\n\t\n\t//\u533a\u95f4\u6761\u4ef6\u7ec4\u88c5 \u6a21\u7cca\u67e5\u8be2 \u9ad8\u7ea7\u67e5\u8be2\u7ec4\u88c5 \u7b80\u5355\u6392\u5e8f \u6743\u9650\u67e5\u8be2\n\tPropertyDescriptor[] origDescriptors = PropertyUtils.getPropertyDescriptors(searchObj);\n\tMap<String,SysPermissionDataRuleModel> ruleMap = getRuleMap();\n\t\n\t//\u6743\u9650\u89c4\u5219\u81ea\u5b9a\u4e49SQL\u8868\u8fbe\u5f0f\n\tfor (String c : ruleMap.keySet()) {\n\t\tif(oConvertUtils.isNotEmpty(c) && c.startsWith(SQL_RULES_COLUMN)){\n\t\t\tqueryWrapper.and(i ->i.apply(getSqlRuleValue(ruleMap.get(c).getRuleValue())));\n\t\t}\n\t}\n\t\n\tString name, type, column;\n\t// update-begin--Author:taoyan  Date:20200923 for\uff1aissues/1671 \u5982\u679c\u5b57\u6bb5\u52a0\u6ce8\u89e3\u4e86@TableField(exist = false),\u4e0d\u8d70DB\u67e5\u8be2-------\n\t//\u5b9a\u4e49\u5b9e\u4f53\u5b57\u6bb5\u548c\u6570\u636e\u5e93\u5b57\u6bb5\u540d\u79f0\u7684\u6620\u5c04 \u9ad8\u7ea7\u67e5\u8be2\u4e2d \u53ea\u80fd\u83b7\u53d6\u5b9e\u4f53\u5b57\u6bb5 \u5982\u679c\u8bbe\u7f6eTableField\u6ce8\u89e3 \u90a3\u4e48\u67e5\u8be2\u6761\u4ef6\u4f1a\u51fa\u95ee\u9898\n\tMap<String,String> fieldColumnMap = new HashMap<>(5);\n\tfor (int i = 0; i < origDescriptors.length; i++) {\n\t\t//aliasName = origDescriptors[i].getName();  mybatis  \u4e0d\u5b58\u5728\u5b9e\u4f53\u5c5e\u6027 \u4e0d\u7528\u5904\u7406\u522b\u540d\u7684\u60c5\u51b5\n\t\tname = origDescriptors[i].getName();\n\t\ttype = origDescriptors[i].getPropertyType().toString();\n\t\ttry {\n\t\t\tif (judgedIsUselessField(name)|| !PropertyUtils.isReadable(searchObj, name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tObject value = PropertyUtils.getSimpleProperty(searchObj, name);\n\t\t\tcolumn = ReflectHelper.getTableFieldName(searchObj.getClass(), name);\n\t\t\tif(column==null){\n\t\t\t\t//column\u4e3anull\u53ea\u6709\u4e00\u79cd\u60c5\u51b5 \u90a3\u5c31\u662f \u6dfb\u52a0\u4e86\u6ce8\u89e3@TableField(exist = false) \u540e\u7eed\u90fd\u4e0d\u7528\u5904\u7406\u4e86\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfieldColumnMap.put(name,column);\n\t\t\t//\u6570\u636e\u6743\u9650\u67e5\u8be2\n\t\t\tif(ruleMap.containsKey(name)) {\n\t\t\t\taddRuleToQueryWrapper(ruleMap.get(name), column, origDescriptors[i].getPropertyType(), queryWrapper);\n\t\t\t}\n\t\t\t//\u533a\u95f4\u67e5\u8be2\n\t\t\tdoIntervalQuery(queryWrapper, parameterMap, type, name, column);\n\t\t\t//\u5224\u65ad\u5355\u503c  \u53c2\u6570\u5e26\u4e0d\u540c\u6807\u8bc6\u5b57\u7b26\u4e32 \u8d70\u4e0d\u540c\u7684\u67e5\u8be2\n\t\t\t//TODO \u8fd9\u79cd\u524d\u540e\u5e26\u9017\u53f7\u7684\u652f\u6301\u5206\u5272\u540e\u6a21\u7cca\u67e5\u8be2(\u591a\u9009\u5b57\u6bb5\u67e5\u8be2\u751f\u6548) \u793a\u4f8b\uff1a,1,3,\n\t\t\tif (null != value && value.toString().startsWith(COMMA) && value.toString().endsWith(COMMA)) {\n\t\t\t\tString multiLikeval = value.toString().replace(\",,\", COMMA);\n\t\t\t\tString[] vals = multiLikeval.substring(1, multiLikeval.length()).split(COMMA);\n\t\t\t\tfinal String field = oConvertUtils.camelToUnderline(column);\n\t\t\t\tif(vals.length>1) {\n\t\t\t\t\tqueryWrapper.and(j -> {\n                           log.info(\"---\u67e5\u8be2\u8fc7\u6ee4\u5668\uff0cQuery\u89c4\u5219---field:{}, rule:{}, value:{}\", field, \"like\", vals[0]);\n\t\t\t\t\t\tj = j.like(field,vals[0]);\n\t\t\t\t\t\tfor (int k=1;k<vals.length;k++) {\n\t\t\t\t\t\t\tj = j.or().like(field,vals[k]);\n\t\t\t\t\t\t\tlog.info(\"---\u67e5\u8be2\u8fc7\u6ee4\u5668\uff0cQuery\u89c4\u5219 .or()---field:{}, rule:{}, value:{}\", field, \"like\", vals[k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//return j;\n\t\t\t\t\t});\n\t\t\t\t}else {\n\t\t\t\t\tlog.info(\"---\u67e5\u8be2\u8fc7\u6ee4\u5668\uff0cQuery\u89c4\u5219---field:{}, rule:{}, value:{}\", field, \"like\", vals[0]);\n\t\t\t\t\tqueryWrapper.and(j -> j.like(field,vals[0]));\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\t//\u6839\u636e\u53c2\u6570\u503c\u5e26\u4ec0\u4e48\u5173\u952e\u5b57\u7b26\u4e32\u5224\u65ad\u8d70\u4ec0\u4e48\u7c7b\u578b\u7684\u67e5\u8be2\n\t\t\t\tQueryRuleEnum rule = convert2Rule(value);\n\t\t\t\tvalue = replaceValue(rule,value);\n\t\t\t\t// add -begin \u6dfb\u52a0\u5224\u65ad\u4e3a\u5b57\u7b26\u4e32\u65f6\u8bbe\u4e3a\u5168\u6a21\u7cca\u67e5\u8be2\n\t\t\t\t//if( (rule==null || QueryRuleEnum.EQ.equals(rule)) && \"class java.lang.String\".equals(type)) {\n\t\t\t\t\t// \u53ef\u4ee5\u8bbe\u7f6e\u5de6\u53f3\u6a21\u7cca\u6216\u5168\u6a21\u7cca\uff0c\u56e0\u4eba\u800c\u5f02\n\t\t\t\t\t//rule = QueryRuleEnum.LIKE;\n\t\t\t\t//}\n\t\t\t\t// add -end \u6dfb\u52a0\u5224\u65ad\u4e3a\u5b57\u7b26\u4e32\u65f6\u8bbe\u4e3a\u5168\u6a21\u7cca\u67e5\u8be2\n\t\t\t\taddEasyQuery(queryWrapper, column, rule, value);\n\t\t\t}\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\t}\n\t// \u6392\u5e8f\u903b\u8f91 \u5904\u7406\n\tdoMultiFieldsOrder(queryWrapper, parameterMap, fieldColumnMap);\n\t\t\t\n\t//\u9ad8\u7ea7\u67e5\u8be2\n\tdoSuperQuery(queryWrapper, parameterMap, fieldColumnMap);\n\t// update-end--Author:taoyan  Date:20200923 for\uff1aissues/1671 \u5982\u679c\u5b57\u6bb5\u52a0\u6ce8\u89e3\u4e86@TableField(exist = false),\u4e0d\u8d70DB\u67e5\u8be2-------\n\t\n}\n",
    "class_name": "QueryGenerator",
    "method_name": "installMplus",
    "arguments": [
        "QueryWrapper<> queryWrapper",
        "Object searchObj",
        "Map<String, String> parameterMap"
    ],
    "generate_test": [
        "package org.jeecg.common.system.query;\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.junit.jupiter.api.*;\nimport java.beans.PropertyDescriptor;\nimport java.util.HashMap;\nimport java.util.Map;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QueryGeneratorTest {\n    @Test\n    public void installMplusTest() throws Exception {\n        // Prepare an object for the search (assuming a search object class exists and is called 'TestSearchObject')\n        TestSearchObject searchObj = new TestSearchObject();\n        // Set search criteria on the object (just for example purposes)\n        searchObj.setName(\"exampleName\");\n        \n        // Prepare parameterMap (populate with relevant test parameters)\n        Map<String, String[]> parameterMap = new HashMap<>();\n        \n        // Prepare the query wrapper that will be used in the method\n        QueryWrapper<TestSearchObject> queryWrapper = new QueryWrapper<>();\n        \n        // Obtain the Method object for the private static installMplus method\n        java.lang.reflect.Method method = QueryGenerator.class.getDeclaredMethod(\"installMplus\", QueryWrapper.class, Object.class, Map.class);\n        // Set accessible as true to bypass the \"private\" access modifier\n        method.setAccessible(true);\n        \n        // Invoke installMplus with our test objects\n        method.invoke(null, queryWrapper, searchObj, parameterMap);\n        \n        // Verify outcomes from queryWrapper (using assertions)\n        // For positive cases\n        assertTrue(queryWrapper.getSqlSegment().contains(\"exampleName\"), \"QueryWrapper does not contain the correct query segment.\");\n        \n        // For negative cases (making sure that improper segments are not present)\n        assertFalse(queryWrapper.getSqlSegment().contains(\"<unwanted segment>\"), \"QueryWrapper contains an incorrect query segment.\");\n        \n        // You might want to add further assertions depending on the behavior of installMplus and your specific test cases\n    }\n    \n    // Mock search object class defined for testing purposes\n    // Replace this with the actual search object class if it exists\n    public static class TestSearchObject {\n        private String name;\n        \n        public String getName() {\n            return name;\n        }\n        \n        public void setName(String name) {\n            this.name = name;\n        }\n        \n        // Assuming there is a 'getPropertyDescriptors' method in the real search class.\n        // This mock will always return an array with a single descriptor for the 'name' property.\n        public static PropertyDescriptor[] getPropertyDescriptors(Object obj) {\n            try {\n                return new PropertyDescriptor[] {new PropertyDescriptor(\"name\", TestSearchObject.class)};\n            }\n            catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n}",
        "package org.jeecg.common.system.query;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.HashMap;\n\n// Note: This test class is incomplete and will not function without additional modifications.\npublic class QueryGeneratorTest {\n\n    // Placeholder class to act as the searchObj and parameterMap in the method call.\n    private static class SearchObject {}\n\n    @Test\n    public void installMplusTest() {\n        // Dummy objects to fulfill parameter requirements for the method invocation.\n        QueryWrapper<SearchObject> queryWrapper = new QueryWrapper<>();\n        SearchObject searchObj = new SearchObject();\n        HashMap<String, String[]> parameterMap = new HashMap<>();\n\n        // Because installMplus is private and relies on many external elements,\n        // we will use reflection to access and test the method or adjust the test strategy\n        // based on the actual design and behavior of the public API that uses this method.\n\n        // Here you would write the code necessary to set up your test environment,\n        // possibly populating the parameterMap, and then invoking the installMplus\n        // method either directly or by testing the method that uses it.\n\n        // Assertions would be made here based on expected changes to the QueryWrapper\n        // after installMplus is executed with the provided searchObj and parameterMap.\n\n        // Example assuming we have a public method that under-the-hood calls installMplus:\n        // QueryGenerator.initQueryWrapper(searchObj, parameterMap);\n        // assertNotNull(queryWrapper); // Example assertion\n    }\n}",
        "package org.jeecg.common.system.query;\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport org.junit.jupiter.api.*;\nimport org.jeecg.common.system.vo.LoginUser;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\npublic class QueryGeneratorTest {\n    private static class MockEntity {\n        private String name;\n        private Integer age;\n\n        public String getName() {\n            return name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n\n        public Integer getAge() {\n            return age;\n        }\n\n        public void setAge(Integer age) {\n            this.age = age;\n        }\n    }\n\n    private QueryWrapper<MockEntity> queryWrapper;\n    private MockEntity searchObj;\n    private Map<String, String[]> parameterMap;\n\n    @BeforeEach\n    public void setUp() {\n        queryWrapper = new QueryWrapper<>();\n        searchObj = new MockEntity();\n        searchObj.setName(\"testName\");\n        searchObj.setAge(25);\n        parameterMap = new HashMap<>();\n\n        // Mock parameterMap values if needed for more complex scenarios\n        // parameterMap.put(\"name\", new String[]{\"testName\"});\n        // parameterMap.put(\"age\", new String[]{\"25\"});\n    }\n\n    @Test\n    public void installMplusTest() {\n        QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap);\n        assertNotNull(queryWrapper);\n        // more assertions to validate queryWrapper contents\n    }\n}",
        "package org.jeecg.common.system.query;\n\nimport org.junit.jupiter.api.*;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport java.util.HashMap;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QueryGeneratorTest {\n    \n    // Create a dummy search object class for test purposes\n    static class DummySearchObj {}\n\n    @Test\n    public void installMplusTest() {\n        // Prepare test data\n        DummySearchObj searchObj = new DummySearchObj();\n        QueryWrapper<?> queryWrapper = new QueryWrapper<>();\n        HashMap<String, String[]> parameterMap = new HashMap<>();\n        \n        // Simulate calling the installMplus method\n        QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap);\n        \n        // Add assertions here to verify the correct behavior of installMplus...\n        // Since installMplus does not return a value and the method is private, its behavior is difficult to verify without access to all its side effects.\n        // One potential test could be to mock the data rules and test if queryWrapper is modified correctly.\n        // However, with the method being private and the lack of return value, it is not testable in a typical unit test sense.\n        \n        // Examples (note: these will not work due to privacy and lack of context):\n        // assertTrue(queryWrapper.getExpression().getNormal());\n        // assertEquals(expected, queryWrapper.getSqlSegment());\n\n        // Simply assert that the method completed without exceptions for this placeholder test\n        assertTrue(true, \"Method completed without exceptions.\");\n    }\n}",
        "package org.jeecg.common.system.query;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class QueryGeneratorTest {\n\n    public static class ExampleSearch {\n        // Example fields that might be used for searching\n        // These should match with your search object fields\n        private String name;\n        private String description;\n\n        // Getters and setters for each field would be here\n        // ...\n    }\n\n    @Test\n    public void installMplusTest() {\n        // Setup a dummy search object (should match your search object structure)\n        ExampleSearch searchObj = new ExampleSearch();\n        // Setup parameters for testing, if any\n        Map<String, String[]> parameterMap = new HashMap<>();\n\n        // Setup the actual QueryWrapper instance\n        QueryWrapper<ExampleSearch> queryWrapper = new QueryWrapper<>();\n\n        // Wrap the method call to ensure no exceptions, adjust if you expect exceptions\n        assertDoesNotThrow(() -> {\n            QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap);\n        });\n\n        // Perform actual assertions, e.g., ensuring the QueryWrapper has been manipulated as expected\n        // This highly depends on the logic within the installMplus method, and what it's supposed to do\n        // Assertions here need to be designed based on the expected outcomes of installMplus\n    }\n}",
        "package org.jeecg.common.system.query;\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport org.junit.jupiter.api.Test;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QueryGeneratorTest {\n\n    @Test\n    public void installMplusTest() {\n        // Create a mock QueryWrapper instance\n        QueryWrapper<?> queryWrapper = new QueryWrapper<>();\n        \n        // Create a mock search object, e.g., an instance of a hypothetical entity class\n        Object searchObj = new Object(); // Should be replaced with a real search object\n\n        // Create a mock parameter map\n        Map<String, String[]> parameterMap = new HashMap<>();\n\n        // Try to install Mplus -- this is the method under test\n        Throwable exception = assertDoesNotThrow(() ->\n                QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap),\n                \"installMplus should not throw any exceptions\"\n        );\n\n        // Assuming no output check, as no behavior or transformation is provided to be verified\n        assertNull(exception, \"Method executed without exceptions\");\n    }\n}",
        "package org.jeecg.common.system.query;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class QueryGeneratorTest {\n    \n    private static class SearchObject {\n        // NOTE: Simplified example search object. Adjust fields accordingly\n    }\n    \n    @Test\n    public void installMplusTest() {\n        // Instantiate the QueryWrapper and SearchObject with sample data\n        QueryWrapper<SearchObject> queryWrapper = new QueryWrapper<>();\n        SearchObject searchObj = new SearchObject();\n\n        // Create a mock parameter map (adjust the mock data as necessary)\n        Map<String, String[]> parameterMap = new HashMap<>();\n        parameterMap.put(\"testKey\", new String[]{\"testValue\"});\n\n        // Invoke the installMplus method\n        QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap);\n\n        // Validate that the QueryWrapper has been modified as expected\n        // Note: This will depend on your search object and would need appropriate checks here\n        // For example, if a condition has been added to the QueryWrapper, you could assert true\n        assertTrue(queryWrapper.getExpression().getNormal().size() > 0, \"QueryWrapper should have conditions set by installMplus\");\n    }\n}",
        "package org.jeecg.common.system.query;\n\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.beanutils.PropertyUtilsBean;\nimport org.junit.jupiter.api.*;\nimport org.junit.runner.RunWith;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport static org.mockito.Mockito.*;\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\n\nimport java.beans.PropertyDescriptor;\nimport java.lang.reflect.Method;\nimport java.util.HashMap;\nimport java.util.Map;\n\n// Note: MockitoExtension is used here to showcase possible mocking of static methods.\n// It requires Mockito version 3.4.0 or higher. Including this for the example, but you could use other mocking frameworks if necessary.\n@RunWith(MockitoExtension.class)\npublic class QueryGeneratorTest {\n    \n    // Mocked object for property descriptors, typically you would replace this with a concrete class matching the one used in the `installMplus` method.\n    Object searchObj = new Object();\n\n    // Here we are assuming a map for the test - you would populate it with the fields you expect to query on.\n    Map<String, String[]> parameterMap = new HashMap<>();\n    \n    QueryWrapper<Object> queryWrapper = new QueryWrapper<>();\n\n    @BeforeEach\n    public void beforeEach() throws Exception {\n        PropertyDescriptor pd = mock(PropertyDescriptor.class);\n        when(pd.getName()).thenReturn(\"testProperty\");\n        when(pd.getPropertyType()).thenReturn(Class.forName(\"java.lang.String\"));\n\n        PropertyUtilsBean propertyUtilsBean = mock(PropertyUtilsBean.class);\n        when(propertyUtilsBean.getPropertyDescriptors(searchObj)).thenReturn(new PropertyDescriptor[]{pd});\n        when(propertyUtilsBean.isReadable(searchObj, \"testProperty\")).thenReturn(true);\n        when(propertyUtilsBean.getSimpleProperty(searchObj, \"testProperty\")).thenReturn(\"testValue\");\n\n        // You would need to adjust the mocking to match the static methods used in your source code.\n        when(PropertyUtils.getPropertyDescriptors(searchObj)).thenReturn(new PropertyDescriptor[]{pd});\n        when(PropertyUtils.isReadable(searchObj, \"testProperty\")).thenReturn(true);\n        when(PropertyUtils.getSimpleProperty(searchObj, \"testProperty\")).thenReturn(\"testValue\");\n    }\n\n    @Test\n    public void installMplusTest() throws Exception {\n        // Here, using reflection to call private method during the test (if you haven't changed the method visibility)\n        Method installMplus = QueryGenerator.class.getDeclaredMethod(\"installMplus\", QueryWrapper.class, Object.class, Map.class);\n        installMplus.setAccessible(true);\n\n        // Calling the private method with reflection. We pass the prepared queryWrapper, searchObj and parameterMap.\n        installMplus.invoke(null, queryWrapper, searchObj, parameterMap);\n\n        // Perform assertions here to check the conditions of the test pass.\n        // For example, you could verify that 'queryWrapper' now contains the expected conditions set by 'installMplus'\n        assertFalse(queryWrapper.isEmptyOfWhere(), \"QueryWrapper should have conditions defined after installMplus method execution.\");\n    }\n}",
        "package org.jeecg.common.system.query;\n\nimport org.junit.jupiter.api.*;\nimport org.springframework.beans.BeanUtils;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class QueryGeneratorTest {\n    @Test\n    public void installMplusTest() {\n        // Create a mock QueryWrapper and mock SearchObject\n        QueryWrapper<Object> queryWrapper = mock(QueryWrapper.class);\n        Object searchObj = mock(Object.class);\n        \n        // Setup a dummy parameterMap, emulating a real parameter map that might be passed\n        Map<String, String[]> parameterMap = new LinkedHashMap<>();\n        parameterMap.put(\"testParam\", new String[]{\"testValue\"});\n        \n        // Call the method under test\n        QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap);\n        \n        // Since QueryGenerator.installMplus() is void, we verify that certain methods are called\n        // However, the actual logic is complex and might require a more detailed setup and assertions\n        verify(queryWrapper, atLeastOnce()).eq(anyString(), any());\n        \n        // Following assertions will depend on the content of the installMplus method and the mock setup.\n        // One should create relevant mocks or spies and assertions to ensure the method behavior is as expected.\n    }\n}",
        "package org.jeecg.common.system.query;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\n\nimport java.util.HashMap;\n\npublic class QueryGeneratorTest {\n    @Test\n    public void installMplusTest() {\n        QueryWrapper<?> queryWrapper = new QueryWrapper<>();\n        Object searchObj = new Object();\n        HashMap<String, String[]> parameterMap = new HashMap<>();\n\n        // Assuming that the getRuleMap method returns an empty map for testing purposes\n        MockedStatic<QueryGenerator> mocked = Mockito.mockStatic(QueryGenerator.class);\n        mocked.when(QueryGenerator::getRuleMap).thenReturn(new HashMap<>());\n\n        // Assuming that PropertyUtils and ReflectHelper also provide mock behaviour\n        // Here, we are not going into details of how the object properties are obtained\n        // For the actual test, Mocks should be written for all external dependencies used within `installMplus`\n\n        QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap);\n\n        // Add assertions to check for expected outcomes of the method execution\n        // Assertions depend on what the method is supposed to do\n        // For example, if we know a specific queryWrapper condition should be set:\n        // assertNotNull(queryWrapper);\n        // assertTrue(queryWrapper.getExpression().contains(\"your_expected_condition\"));\n\n        // Make sure to properly release the mock after use\n        mocked.close();\n    }\n}"
    ]
}