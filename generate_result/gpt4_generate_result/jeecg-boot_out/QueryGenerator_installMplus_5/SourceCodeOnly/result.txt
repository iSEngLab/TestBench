Source code: 


private static void installMplus(QueryWrapper<?> queryWrapper,Object searchObj,Map<String, String[]> parameterMap) {
	
	/*
	 * 注意:权限查询由前端配置数据规则 当一个人有多个所属部门时候 可以在规则配置包含条件 orgCode 包含 #{sys_org_code}
	但是不支持在自定义SQL中写orgCode in #{sys_org_code} 
	当一个人只有一个部门 就直接配置等于条件: orgCode 等于 #{sys_org_code} 或者配置自定义SQL: orgCode = '#{sys_org_code}'
	*/
	
	//区间条件组装 模糊查询 高级查询组装 简单排序 权限查询
	PropertyDescriptor[] origDescriptors = PropertyUtils.getPropertyDescriptors(searchObj);
	Map<String,SysPermissionDataRuleModel> ruleMap = getRuleMap();
	
	//权限规则自定义SQL表达式
	for (String c : ruleMap.keySet()) {
		if(oConvertUtils.isNotEmpty(c) && c.startsWith(SQL_RULES_COLUMN)){
			queryWrapper.and(i ->i.apply(getSqlRuleValue(ruleMap.get(c).getRuleValue())));
		}
	}
	
	String name, type, column;
	// update-begin--Author:taoyan  Date:20200923 for：issues/1671 如果字段加注解了@TableField(exist = false),不走DB查询-------
	//定义实体字段和数据库字段名称的映射 高级查询中 只能获取实体字段 如果设置TableField注解 那么查询条件会出问题
	Map<String,String> fieldColumnMap = new HashMap<>(5);
	for (int i = 0; i < origDescriptors.length; i++) {
		//aliasName = origDescriptors[i].getName();  mybatis  不存在实体属性 不用处理别名的情况
		name = origDescriptors[i].getName();
		type = origDescriptors[i].getPropertyType().toString();
		try {
			if (judgedIsUselessField(name)|| !PropertyUtils.isReadable(searchObj, name)) {
				continue;
			}

			Object value = PropertyUtils.getSimpleProperty(searchObj, name);
			column = ReflectHelper.getTableFieldName(searchObj.getClass(), name);
			if(column==null){
				//column为null只有一种情况 那就是 添加了注解@TableField(exist = false) 后续都不用处理了
				continue;
			}
			fieldColumnMap.put(name,column);
			//数据权限查询
			if(ruleMap.containsKey(name)) {
				addRuleToQueryWrapper(ruleMap.get(name), column, origDescriptors[i].getPropertyType(), queryWrapper);
			}
			//区间查询
			doIntervalQuery(queryWrapper, parameterMap, type, name, column);
			//判断单值  参数带不同标识字符串 走不同的查询
			//TODO 这种前后带逗号的支持分割后模糊查询(多选字段查询生效) 示例：,1,3,
			if (null != value && value.toString().startsWith(COMMA) && value.toString().endsWith(COMMA)) {
				String multiLikeval = value.toString().replace(",,", COMMA);
				String[] vals = multiLikeval.substring(1, multiLikeval.length()).split(COMMA);
				final String field = oConvertUtils.camelToUnderline(column);
				if(vals.length>1) {
					queryWrapper.and(j -> {
                           log.info("---查询过滤器，Query规则---field:{}, rule:{}, value:{}", field, "like", vals[0]);
						j = j.like(field,vals[0]);
						for (int k=1;k<vals.length;k++) {
							j = j.or().like(field,vals[k]);
							log.info("---查询过滤器，Query规则 .or()---field:{}, rule:{}, value:{}", field, "like", vals[k]);
						}
						//return j;
					});
				}else {
					log.info("---查询过滤器，Query规则---field:{}, rule:{}, value:{}", field, "like", vals[0]);
					queryWrapper.and(j -> j.like(field,vals[0]));
				}
			}else {
				//根据参数值带什么关键字符串判断走什么类型的查询
				QueryRuleEnum rule = convert2Rule(value);
				value = replaceValue(rule,value);
				// add -begin 添加判断为字符串时设为全模糊查询
				//if( (rule==null || QueryRuleEnum.EQ.equals(rule)) && "class java.lang.String".equals(type)) {
					// 可以设置左右模糊或全模糊，因人而异
					//rule = QueryRuleEnum.LIKE;
				//}
				// add -end 添加判断为字符串时设为全模糊查询
				addEasyQuery(queryWrapper, column, rule, value);
			}
			
		} catch (Exception e) {
			log.error(e.getMessage(), e);
		}
	}
	// 排序逻辑 处理
	doMultiFieldsOrder(queryWrapper, parameterMap, fieldColumnMap);
			
	//高级查询
	doSuperQuery(queryWrapper, parameterMap, fieldColumnMap);
	// update-end--Author:taoyan  Date:20200923 for：issues/1671 如果字段加注解了@TableField(exist = false),不走DB查询-------
	
}



No.1 generated result --------------------------

package org.jeecg.common.system.query;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import org.springframework.beans.PropertyDescriptor;
import org.springframework.beans.BeanUtils;
import java.util.HashMap;
import java.util.Map;

public class QueryGeneratorTest {

    private QueryGenerator queryGenerator; // Assuming QueryGenerator is the class where installMplus is defined.

    @BeforeEach
    public void setUp() {
        // Initialize necessary objects (requires actual implementations)
        queryGenerator = new QueryGenerator();
    }

    @Test
    public void installMplusTest() {
        // Define a dummy implementation for the required objects
        QueryWrapper<?> queryWrapper = new QueryWrapper<Object>(); // Replace with appropriate implementation
        Object searchObj = new Object(); // Replace with mock implementation specific to your use case
        Map<String, String[]> parameterMap = new HashMap<>();

        // Set up your parameterMap and searchObj as needed for specific test conditions

        // Assuming we have a way to access the installMplus method, either through making it package-private or using reflection
        // queryGenerator.installMplus(queryWrapper, searchObj, parameterMap); // Uncomment when installMplus is accessible

        // Now assert that your queryWrapper object has been modified as expected
        // Assertions will highly depend on the outputs of installMplus, e.g.:
        // assertTrue(queryWrapper.getSomething().equals("ExpectedValue"));
        // assertEquals(expectedValue, queryWrapper.getCondition());
        
        // Assertions and verifications would be added here based on the expected state of queryWrapper after calling installMplus
        // For example, if installMplus added filters based on rules, ensure they exist
    }

    // More tests could be added to cover different scenarios, edge cases, and possible input variations

    @AfterEach
    public void tearDown() {
        // Cleanup resources, if any
    }
}


No.2 generated result --------------------------

package org.jeecg.common.system.query;

import org.junit.jupiter.api.*;
import org.mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class QueryGeneratorTest {

    private QueryWrapper<?> queryWrapper;
    private Object searchObj;
    private Map<String, String[]> parameterMap;
    private QueryGenerator queryGenerator;

    @BeforeEach
    public void setUp() {
        // Create or mock the required parameters for installMplus method
        queryWrapper = mock(QueryWrapper.class);
        searchObj = mock(Object.class);
        parameterMap = mock(Map.class);
        
        // Assuming QueryGenerator is a class that exposes installMplus method publicly
        queryGenerator = new QueryGenerator();
        
        // Mock further dependencies, interactions and set up the test scenario...
    }

    @Test
    public void installMplusTest() {
        // Set up the testing environment with specific data/rules
        // Example: when(...).thenReturn(...);
        
        // Call the method under test with the mocked parameters
        queryGenerator.installMplus(queryWrapper, searchObj, parameterMap);

        // Verify the behavior - For example, check that queryWrapper has expected methods called
        // Example: verify(queryWrapper).and(...);
        
        // Assertions to verify the expected outcomes of the method execution
        // Example: assertNotNull(...);
    }
}


No.3 generated result --------------------------

package org.jeecg.common.system.query;

import org.junit.jupiter.api.*;
import org.mockito.*;
import org.springframework.test.util.ReflectionTestUtils;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class QueryGeneratorTest {

    @Test
    public void installMplusTest() {
        // Setup stubbed objects and parameters
        QueryWrapper<?> mockQueryWrapper = mock(QueryWrapper.class);
        Object mockSearchObj = new Object(); // Replace with actual object type
        Map<String, String[]> mockParameterMap = new HashMap<>();
        Map<String, SysPermissionDataRuleModel> mockRuleMap = new HashMap<>(); // Assuming this is stubbed appropriately
        
        // Stub the static method getRuleMap used in installMplus
        QueryGenerator queryGenerator = Mockito.mock(QueryGenerator.class);
        Mockito.when(queryGenerator.getRuleMap()).thenReturn(mockRuleMap);
        
        try {
            // Use reflection to make the private method accessible
            Method installMplus = QueryGenerator.class.getDeclaredMethod("installMplus", 
                    QueryWrapper.class, Object.class, Map.class);
            installMplus.setAccessible(true);
            
            // Invoke the private method with the mock objects as parameters
            installMplus.invoke(null, mockQueryWrapper, mockSearchObj, mockParameterMap);
            
            // The assertions depend on what we are expecting to verify with this test.
            // Since we have no specific behavior to verify (as no output or specific interaction is defined),
            // let's verify that the installMplus method does not throw an exception.
            assertTrue(true, "Method executed without exceptions.");
        } catch (Exception e) {
            // If any reflection related exception occurs, the test should fail
            fail("Failed to invoke installMplus method using reflection: " + e.getMessage());
        }
        
        // Add any specific assertions here, using Mockito.verify() to check interactions
        // For example: verify(mockQueryWrapper).and(...);
    }
}


No.4 generated result --------------------------

package org.jeecg.common.system.query;

import org.junit.jupiter.api.*;
import org.mockito.*;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;
import java.beans.PropertyDescriptor;
import java.util.HashMap;
import java.util.Map;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@RunWith(MockitoJUnitRunner.class)
public class QueryGeneratorTest {
    
    @Mock
    private QueryWrapper<?> mockQueryWrapper;

    @Mock
    private Object mockSearchObj;

    @Mock
    private Map<String, String[]> mockParameterMap;
    
    // This is a stub method representing the actual implementation
    @BeforeEach
    public void setUp() {
        // Set up mocks and stubbing before tests
        when(mockSearchObj.getClass()).thenReturn(Object.class);
        PropertyDescriptor[] propertyDescriptors = new PropertyDescriptor[0];
        when(PropertyUtils.getPropertyDescriptors(mockSearchObj)).thenReturn(propertyDescriptors);
        when(QueryGenerator.getRuleMap()).thenReturn(new HashMap<>()); // Assuming that getRuleMap is a static method in QueryGenerator
    }
    
    @Test
    public void installMplusTest() {
        // Perform any additional setup required for the test
        // For example, stubbing the getSqlRuleValue method if it is a static method in the QueryGenerator
        // when(QueryGenerator.getSqlRuleValue(anyString())).thenReturn(...);

        // Act - call the method under test
        QueryGenerator.installMplus(mockQueryWrapper, mockSearchObj, mockParameterMap);

        // Assert - verify that the expected interactions with the mockQueryWrapper occurred
        // Verify that the installMplus correctly uses mockQueryWrapper;
        // for example, if installMplus is supposed to add a condition to the wrapper, we can verify that it does:
        // verify(mockQueryWrapper, atLeastOnce()).and(...);

        // We might also check that the method does not throw exceptions in a given scenario
        assertDoesNotThrow(() -> QueryGenerator.installMplus(mockQueryWrapper, mockSearchObj, mockParameterMap));
    }
    
    // Additional helper methods or test cases might follow...
    
}



No.5 generated result --------------------------

package org.jeecg.common.system.query;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import org.apache.commons.beanutils.PropertyUtils;
import java.beans.PropertyDescriptor;
import java.util.HashMap;
import java.util.Map;

public class QueryGeneratorTest {

    @Test
    public void installMplusTest() {
        // Given
        QueryWrapper<?> queryWrapper = new QueryWrapper<>();
        Object searchObj = new Object(); // Mock or create instance with expected properties
        Map<String, String[]> parameterMap = new HashMap<>();
        
        // Initialize the searchObj and parameterMap with relevant data for the test
        // e.g. searchObj could have properties and values reflective of what the actual method would operate on
        // and parameterMap could have keys and values that are expected to be used by the method.
        
        // When
        // Call the static installMplus method with the objects created above.
        // Since the method is private, we may consider making it package-private or using reflection to test it if necessary.
        // QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap);
        
        // Then
        // Here you would assert the state of the queryWrapper to ensure it has been modified as expected.
        // However, without knowing what getRuleMap, addRuleToQueryWrapper, doIntervalQuery, and convert2Rule etc. do,
        // it is difficult to assert specific conditions.
        // You could also possibly capture logs and assert certain expected logging happened.
        // Assertions might look like:
        // assertEquals(expectedValue, actualValue); // For comparing actual to expected values
        // assertTrue(queryWrapper.getSomething().contains(expectedCondition)); // For condition checking

        // Alternatively, due to lack of context, a 'fail' statement can be added to indicate where test logic needs implementing.
        fail("Test case incomplete: Unable to create assertions without knowledge of expected behavior.");
    }
}


No.6 generated result --------------------------

package org.jeecg.common.system.query;

import org.junit.jupiter.api.*;
import org.mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.HashMap;
import java.util.Map;

public class QueryGeneratorTest {

    @Test
    public void installMplusTest() {
        // Setup mock objects and any needed test data
        QueryWrapper<?> mockQueryWrapper = Mockito.mock(QueryWrapper.class);
        Object mockSearchObj = Mockito.mock(Object.class);
        Map<String, String[]> parameterMap = new HashMap<>();
        Map<String, SysPermissionDataRuleModel> ruleMap = new HashMap<>();
        
        // Assume getRuleMap is a static method that needs to be mocked
        MockedStatic<QueryGenerator> mockedQueryGenerator = Mockito.mockStatic(QueryGenerator.class);
        mockedQueryGenerator.when(QueryGenerator::getRuleMap).thenReturn(ruleMap);
        
        // mocking the getSqlRuleValue, assuming it's a static method in QueryGenerator
        // if not, this would have to be adjusted
        mockedQueryGenerator.when(() -> QueryGenerator.getSqlRuleValue(anyString())).thenAnswer(i -> "mock SQL expression");

        // Setup any additional mocks for classes/methods called within installMplus
        
        // Execute the method under test
        QueryGenerator.installMplus(mockQueryWrapper, mockSearchObj, parameterMap);
        
        // Verify the interactions
        // Add verifications for method calls on mockQueryWrapper to ensure proper methods are being invoked
        // For example:
        // verify(mockQueryWrapper).and(...);
        // You will need to mock additional behavior and verify these interactions depending on the code path taken within installMplus
        
        // Assertions - Assert final states or interactions
        // Add assertions here if any state is expected to change as a result of the method call, or if any particular interactions are expected

        // Finalize the mock
        mockedQueryGenerator.close();
    }
}


No.7 generated result --------------------------

package org.jeecg.common.system.query;

import org.jeecg.common.system.query.QueryGenerator;
import org.jeecg.common.system.query.QueryWrapper;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;

public class QueryGeneratorTest {

    private static class MockSearchObj {
        // Mock properties as per the real searchObj
    }
    
    private static class SysPermissionDataRuleModel {
        // Mock implementation as needed for testing purposes
        public String getRuleValue() { 
            return "mockValue"; 
        }
    }
    
    @Test
    public void installMplusTest() {
        // GIVEN
        QueryWrapper<MockSearchObj> queryWrapper = new QueryWrapper<>();
        MockSearchObj searchObj = new MockSearchObj();
        Map<String,String[]> parameterMap = new HashMap<>();
        
        // Example of mocked parameters if needed
        parameterMap.put("key1", new String[]{"value1"});
        parameterMap.put("key2", new String[]{"value2", "value3"});

        // Part of the logic in `installMplus` retrieves rules which we need to mock
        Map<String, SysPermissionDataRuleModel> ruleMap = new HashMap<>();
        ruleMap.put("ruleKey", new SysPermissionDataRuleModel());
        // We have to design `getRuleMap()` to be testable, possibly by injecting a mock or using a protected method for setting it
        
        // WHEN
        QueryGenerator.installMplus(queryWrapper, searchObj, parameterMap);
        
        // THEN
        // Here we need assertions that verify the outcome of `installMplus`.
        // Since we do not have the actual implementation details of `QueryGenerator` or dependent classes,
        // we cannot write concrete assertions. Instead, we would mock behaviors and verify interactions.
        // For example:
        // assertEquals(expectedValue, queryWrapper.getConditions(), "Conditions should match expected value");
        
        // If the installMplus method impacts the mockSearchObj or parameterMap, we should assert the expected state of these objects too.
        // For example:
        // assertEquals(expectedState, searchObj.someMethod(), "MockSearchObj's someMethod should return the expected state.");
    }
    
    // Setup the mock for getRuleMap method - if possible within the context of your test environment
    private static Map<String, SysPermissionDataRuleModel> getRuleMap() {
        // mock implementation
        return new HashMap<>();
    }
    
    @BeforeEach
    public void setUp() {
        // You can setup common objects required before each test if necessary
    }

    @AfterEach
    public void tearDown() {
        // Clean up resources or reset shared references if needed
    }
}


No.8 generated result --------------------------

package org.jeecg.common.system.query;

import org.junit.jupiter.api.*;
import org.mockito.Mockito;
import static org.mockito.ArgumentMatchers.any;
import static org.junit.jupiter.api.Assertions.*;

import java.util.HashMap;
import java.util.Map;

public class QueryGeneratorTest {
    @Test
    public void installMplusTest() {
        // Assuming QueryWrapper, SysPermissionDataRuleModel, and QueryGenerator classes exist
        
        QueryWrapper<?> mockQueryWrapper = Mockito.mock(QueryWrapper.class);
        Object searchObj = Mockito.mock(Object.class); // Ideally, use a real instance or a specific class that extends Object
        Map<String, String[]> parameterMap = new HashMap<>();
        Map<String, SysPermissionDataRuleModel> ruleMap = new HashMap<>();
        SysPermissionDataRuleModel ruleModel = Mockito.mock(SysPermissionDataRuleModel.class);
        
        // Setup test data and mock behavior as necessary
        String[] parameterValues = {"testValue"};
        parameterMap.put("testKey", parameterValues);
        ruleMap.put("ruleKey", ruleModel);
        Mockito.when(ruleModel.getRuleValue()).thenReturn("Some SQL Expression");
        
        // Call the method to be tested
        QueryGenerator.installMplus(mockQueryWrapper, searchObj, parameterMap);
        
        // Verify behaviors or interactions
        Mockito.verify(mockQueryWrapper, Mockito.times(1)).and(any());
        // Additional assertions can be done here depending on the behavior of installMplus
        
        // Assert result (This will vary based on what installMplus changes or outputs. Here we assume it updates the QueryWrapper state)
        // Example: assertEquals(expectedCondition, mockQueryWrapper.someStateCheckingMethod());
    }
}


No.9 generated result --------------------------

package org.jeecg.common.system.query;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.HashMap;
import java.util.Map;

public class QueryGeneratorTest {

    @Test
    public void installMplusTest() {
        // Arrange
        // Here we are creating mock objects and example data to test the `installMplus` method.
        // Due to the private nature of `installMplus`, for the sake of this example, we are assuming
        // it's now package-private or we're using ReflectionTestUtils to make it accessible.
        
        QueryWrapper<?> mockQueryWrapper = createMockQueryWrapper(); // Implement method to create a mock QueryWrapper
        Object mockSearchObj = createMockSearchObj(); // Implement method to create a mock Search Object
        Map<String, String[]> mockParameterMap = createMockParameterMap(); // Implement method to create a mock Parameter Map
        // Assuming a static method `setRuleMap` to preset the rules for testing - otherwise, you would need to mock the method call as well.
        Map<String,SysPermissionDataRuleModel> ruleMap = createRuleMap(); // Implement method to create a set of data rules
        ReflectionTestUtils.setField(SomeClassContainingInstallMplusMethod.class, "ruleMap", ruleMap);
        
        // Act
        // You may need to use ReflectionTestUtils if installMplus remains private 
        // ReflectionTestUtils.invokeMethod(targetObject, "installMplus", mockQueryWrapper, mockSearchObj, mockParameterMap);
        SomeClassContainingInstallMplusMethod.installMplus(mockQueryWrapper, mockSearchObj, mockParameterMap);
        
        // Assert
        // Here you would assert the expected changes to the QueryWrapper
        // You'll need to decide how to assert these changes based on the actual interactions within the installMplus method
        verifyQueryWrapperChanges(mockQueryWrapper); // Implement method to verify the QueryWrapper has been modified as expected
        assertNotNull(mockQueryWrapper); // This is a trivial example, replace it with actual assertions
    }
    
    // Helper methods to implement based on your actual test setup
    private QueryWrapper<?> createMockQueryWrapper() {
        // Implementation here
        return null; // Replace with actual mock wrapper
    }
    
    private Object createMockSearchObj() {
        // Implementation here
        return null; // Replace with actual mock object
    }
    
    private Map<String, String[]> createMockParameterMap() {
        // Implementation here
        return new HashMap<>(); // Replace with actual parameter map
    }

    private Map<String, SysPermissionDataRuleModel> createRuleMap() {
        // Implementation here
        return new HashMap<>(); // Replace with actual rule map
    }
    
    private void verifyQueryWrapperChanges(QueryWrapper<?> queryWrapper) {
        // Implement verification logic here based on expected mutations to the wrapper based on your test inputs
    }
}


No.10 generated result --------------------------

package org.jeecg.common.system.query;

import org.junit.jupiter.api.*;
import org.mockito.*;
import static org.mockito.Mockito.*;
import java.beans.PropertyDescriptor;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

public class QueryGeneratorTest {

    @Test
    public void installMplusTest() {
        // Assume QueryGenerator can be instantiated or accessed
        QueryGenerator queryGenerator = new QueryGenerator();

        // Mocking the dependencies this method would require
        QueryWrapper<?> queryWrapper = mock(QueryWrapper.class);
        Object searchObj = mock(Object.class);
        Map<String, String[]> parameterMap = new HashMap<>();

        // Assuming SysPermissionDataRuleModel and ReflectHelper are available to use
        Map<String, SysPermissionDataRuleModel> ruleMap = new HashMap<>();
        SysPermissionDataRuleModel ruleModel = new SysPermissionDataRuleModel();
        ruleModel.setRuleValue("testRuleValue");

        String propertyName = "testProperty";
        ruleMap.put(propertyName, ruleModel);

        // Mocking PropertyDescriptor behavior
        PropertyDescriptor descriptor = mock(PropertyDescriptor.class);
        when(descriptor.getName()).thenReturn(propertyName);
        when(descriptor.getPropertyType()).thenReturn(String.class);
        PropertyDescriptor[] descriptors = new PropertyDescriptor[]{descriptor};

        when(searchObj.getClass()).thenReturn(Object.class);

        // Assuming ReflectHelper methods are available and can be stubbed
        when(ReflectHelper.getTableFieldName(Object.class, propertyName)).thenReturn(propertyName);

        // When PropertyUtils methods are called, we define their behaviors
        try {
            when(PropertyUtils.getPropertyDescriptors(searchObj)).thenReturn(descriptors);
            when(PropertyUtils.getSimpleProperty(searchObj, propertyName)).thenReturn("testValue");
        } catch (Exception e) {
            e.printStackTrace();
            fail("Mocking failure for PropertyUtils");
        }

        // Call the method to test
        // Assuming static methods judgedIsUselessField, addRuleToQueryWrapper, doIntervalQuery, convert2Rule,
        // replaceValue, addEasyQuery, doMultiFieldsOrder, and doSuperQuery are properly handled in testing
        queryGenerator.installMplus(queryWrapper, searchObj, parameterMap);

        // Verify the interactions or state changes as expected
        // Due to the static and private methods involved, this test may require substantial redesign or mocking tools like PowerMock
        verify(queryWrapper, times(1)).and(any());
    }
}


