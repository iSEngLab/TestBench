{
    "project_name": "jeecg-boot",
    "file_name": "SensitiveInfoUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/desensitization/util/SensitiveInfoUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.desensitization.util",
    "docstring": "/**\n     * \u5904\u7406\u6570\u636e \u83b7\u53d6\u52a0\u5bc6\u540e\u7684\u6570\u636e \u6216\u662f\u683c\u5f0f\u5316\u540e\u7684\u6570\u636e\n     * @param data \u5b57\u7b26\u4e32\n     * @param sensitiveEnum \u7c7b\u578b\n     * @return \u5904\u7406\u540e\u7684\u5b57\u7b26\u4e32\n     */",
    "source_code": "\npublic static String getEncodeData(String data, SensitiveEnum sensitiveEnum){\n    String result;\n    switch (sensitiveEnum){\n        case ENCODE:\n            try {\n                result = AesEncryptUtil.encrypt(data);\n            } catch (Exception exception) {\n                log.error(\"\u6570\u636e\u52a0\u5bc6\u9519\u8bef\", exception.getMessage());\n                result = data;\n            }\n            break;\n        case CHINESE_NAME:\n            result = chineseName(data);\n            break;\n        case ID_CARD:\n            result = idCardNum(data);\n            break;\n        case FIXED_PHONE:\n            result = fixedPhone(data);\n            break;\n        case MOBILE_PHONE:\n            result = mobilePhone(data);\n            break;\n        case ADDRESS:\n            result = address(data, 3);\n            break;\n        case EMAIL:\n            result = email(data);\n            break;\n        case BANK_CARD:\n            result = bankCard(data);\n            break;\n        case CNAPS_CODE:\n            result = cnapsCode(data);\n            break;\n        default:\n            result = data;\n    }\n    return result;\n}\n",
    "class_name": "SensitiveInfoUtil",
    "method_name": "getEncodeData",
    "arguments": [
        "String data",
        "SensitiveEnum sensitiveEnum"
    ],
    "generate_test": [
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        assertEquals(\"\u674e**\", SensitiveInfoUtil.getEncodeData(\"\u674e\u56db\", SensitiveEnum.CHINESE_NAME), \"Chinese name encoding failed\");\n        assertEquals(\"*************5762\", SensitiveInfoUtil.getEncodeData(\"123456789012345762\", SensitiveEnum.ID_CARD), \"ID card encoding failed\");\n        assertEquals(\"****1234\", SensitiveInfoUtil.getEncodeData(\"028881231234\", SensitiveEnum.FIXED_PHONE), \"Fixed phone encoding failed\");\n        assertEquals(\"138******1234\", SensitiveInfoUtil.getEncodeData(\"138001381234\", SensitiveEnum.MOBILE_PHONE), \"Mobile phone encoding failed\");\n        assertEquals(\"\u5317\u4eac\u5e02\u6d77\u6dc0\u533a****\", SensitiveInfoUtil.getEncodeData(\"\u5317\u4eac\u5e02\u6d77\u6dc0\u533a\u5b66\u9662\u8def\", SensitiveEnum.ADDRESS), \"Address encoding failed\");\n        assertEquals(\"g**@163.com\", SensitiveInfoUtil.getEncodeData(\"grace@163.com\", SensitiveEnum.EMAIL), \"Email encoding failed\");\n        assertEquals(\"6222600**********1234\", SensitiveInfoUtil.getEncodeData(\"62226001234567891234\", SensitiveEnum.BANK_CARD), \"Bank card encoding failed\");\n        assertEquals(\"12********\", SensitiveInfoUtil.getEncodeData(\"1234567890\", SensitiveEnum.CNAPS_CODE), \"CNAPS code encoding failed\");\n        \n        // For ENCODE type, since the encryption can be varied and is not idempotent, we cannot assert the exact result.\n        // Therefore, we need to make sure that it does not return the original data.\n        String originalData = \"Sensitive Data\";\n        String encodedData = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.ENCODE);\n        assertNotNull(encodedData, \"Encode result should not be null\");\n        assertNotEquals(originalData, encodedData, \"Encoded data should not be the same as original\");\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.jeecg.common.desensitization.enums.SensitiveEnum;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        String originalData = \"John Doe\";\n\n        // Test for ENCODE case\n        String encodedData = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.ENCODE);\n        assertNotNull(encodedData);\n        assertNotEquals(originalData, encodedData, \"Encoded data should not match the original\");\n\n        // Test for CHINESE_NAME case\n        String chineseNameProcessed = SensitiveInfoUtil.getEncodeData(\"\u5f20\u4e09\", SensitiveEnum.CHINESE_NAME);\n        assertEquals(\"\u5f20**\", chineseNameProcessed);\n\n        // Test for ID_CARD case\n        String idCardProcessed = SensitiveInfoUtil.getEncodeData(\"123456789012345\", SensitiveEnum.ID_CARD);\n        assertEquals(\"***********2345\", idCardProcessed);\n\n        // Test for FIXED_PHONE case\n        String fixedPhoneProcessed = SensitiveInfoUtil.getEncodeData(\"01012345678\", SensitiveEnum.FIXED_PHONE);\n        assertEquals(\"******5678\", fixedPhoneProcessed);\n\n        // Test for MOBILE_PHONE case\n        String mobilePhoneProcessed = SensitiveInfoUtil.getEncodeData(\"13812345678\", SensitiveEnum.MOBILE_PHONE);\n        assertEquals(\"138****5678\", mobilePhoneProcessed);\n\n        // Test for ADDRESS case\n        String addressProcessed = SensitiveInfoUtil.getEncodeData(\"\u5317\u4eac\u5e02\u6d77\u6dc0\u533a\u5b66\u9662\u8def\", SensitiveEnum.ADDRESS);\n        assertEquals(\"\u5317\u4eac\u5e02\u6d77\u6dc0\u533a***\", addressProcessed);\n\n        // Test for EMAIL case\n        String emailProcessed = SensitiveInfoUtil.getEncodeData(\"example@mail.com\", SensitiveEnum.EMAIL);\n        assertEquals(\"e**@mail.com\", emailProcessed);\n\n        // Test for BANK_CARD case\n        String bankCardProcessed = SensitiveInfoUtil.getEncodeData(\"6222021234567890\", SensitiveEnum.BANK_CARD);\n        assertEquals(\"622202******7890\", bankCardProcessed);\n\n        // Test for CNAPS_CODE case\n        String cnapsCodeProcessed = SensitiveInfoUtil.getEncodeData(\"102100099996\", SensitiveEnum.CNAPS_CODE);\n        assertEquals(\"10**********\", cnapsCodeProcessed);\n\n        // Test for unsupported case\n        String unsupportedDataProcessed = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.UNSUPPORTED);\n        assertEquals(originalData, unsupportedDataProcessed);\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        // Assuming AesEncryptUtil.encrypt(...) works correctly and logs are in place.\n\n        // Test ENCODE case\n        String dataToEncode = \"TestStringToEncode\";\n        String encodedData = SensitiveInfoUtil.getEncodeData(dataToEncode, SensitiveEnum.ENCODE);\n        assertNotNull(encodedData, \"Encoded data should not be null.\");\n        assertTrue(!dataToEncode.equals(encodedData), \"Encoded data should not match the original.\");\n\n        // Test CHINESE_NAME case\n        String chineseName = \"\u738b\u5c0f\u660e\";\n        String encodedChineseName = SensitiveInfoUtil.getEncodeData(chineseName, SensitiveEnum.CHINESE_NAME);\n        assertEquals(\"\u738b**\", encodedChineseName, \"Chinese name encoding should only show the first character followed by asterisks.\");\n\n        // Test ID_CARD case\n        String idCard = \"123456789012345678\";\n        String encodedIdCard = SensitiveInfoUtil.getEncodeData(idCard, SensitiveEnum.ID_CARD);\n        assertEquals(\"***************5678\", encodedIdCard, \"ID card encoding should only show the last four digits.\");\n\n        // Add more tests for other enum cases as needed for thorough testing\n        // ...\n\n        // Test default case\n        String defaultData = \"DefaultData\";\n        String resultForDefault = SensitiveInfoUtil.getEncodeData(defaultData, null); // intentionally sending null\n        assertEquals(defaultData, resultForDefault, \"Default case should return the data unchanged.\");\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.jeecg.common.desensitization.enums.SensitiveEnum;\nimport org.junit.jupiter.api.*;\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.Mockito.mockStatic;\nimport static org.mockito.Mockito.when;\nimport org.mockito.MockedStatic;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        String sampleData = \"TestData\";\n        \n        try (MockedStatic<AesEncryptUtil> mockedAesEncryptUtil = mockStatic(AesEncryptUtil.class)) {\n            mockedAesEncryptUtil.when(() -> AesEncryptUtil.encrypt(anyString())).thenReturn(\"EncryptedData\");\n\n            // Test for ENCODE\n            String encodedData = SensitiveInfoUtil.getEncodeData(sampleData, SensitiveEnum.ENCODE);\n            assertEquals(\"EncryptedData\", encodedData);\n\n            // Assuming the behavior of internal private methods like `chineseName`, `idCardNum`, etc.\n            // If they return the original data for testing purposes.\n            \n            // Test for CHINESE_NAME\n            String chineseName = SensitiveInfoUtil.getEncodeData(sampleData, SensitiveEnum.CHINESE_NAME);\n            assertEquals(sampleData, chineseName);\n            \n            // Test for ID_CARD\n            String idCardData = SensitiveInfoUtil.getEncodeData(sampleData, SensitiveEnum.ID_CARD);\n            assertEquals(sampleData, idCardData);\n            \n            // Test for FIXED_PHONE\n            String fixedPhoneData = SensitiveInfoUtil.getEncodeData(sampleData, SensitiveEnum.FIXED_PHONE);\n            assertEquals(sampleData, fixedPhoneData);\n            \n            // Test for MOBILE_PHONE\n            String mobilePhoneData = SensitiveInfoUtil.getEncodeData(sampleData, SensitiveEnum.MOBILE_PHONE);\n            assertEquals(sampleData, mobilePhoneData);\n            \n            // Test for ADDRESS\n            String addressData = SensitiveInfoUtil.getEncodeData(sampleData, SensitiveEnum.ADDRESS);\n            assertEquals(sampleData, addressData);\n            \n            // Test for EMAIL\n            String emailData = SensitiveInfoUtil.getEncodeData(sampleData, SensitiveEnum.EMAIL);\n            assertEquals(sampleData, emailData);\n            \n            // Test for BANK_CARD\n            String bankCardData = SensitiveInfoUtil.getEncodeData(sampleData, SensitiveEnum.BANK_CARD);\n            assertEquals(sampleData, bankCardData);\n            \n            // Test for CNAPS_CODE\n            String cnapsCodeData = SensitiveInfoUtil.getEncodeData(sampleData, SensitiveEnum.CNAPS_CODE);\n            assertEquals(sampleData, cnapsCodeData);\n            \n            // Test for DEFAULT\n            String defaultData = SensitiveInfoUtil.getEncodeData(sampleData, null);\n            assertEquals(sampleData, defaultData);\n        }\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.jeecg.common.desensitization.enums.SensitiveEnum;\nimport org.jeecg.common.util.encryption.AesEncryptUtil;\nimport org.junit.jupiter.api.*;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        // Mock AesEncryptUtil.encrypt since it's a static method from another class\n        AesEncryptUtil mockAesEncryptUtil = mock(AesEncryptUtil.class);\n        when(mockAesEncryptUtil.encrypt(anyString())).thenReturn(\"encryptedData\");\n\n        String data = \"testdata\";\n        String encodedData = SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.ENCODE);\n        assertEquals(\"encryptedData\", encodedData);\n\n        // Given hypothetical expected behavior of the private methods\n        // Since they are private and static, we cannot invoke them directly, and we assume our expected behaviors are correct\n        String chineseNameData = \"\u674e**\";\n        String idCardData = \"***************1234\";\n        String fixedPhoneData = \"****5678\";\n        String mobilePhoneData = \"123******4567\";\n        String addressData = \"\u5317\u4eac\u5e02\u6d77\u6dc0\u533a****\";\n        String emailData = \"e***@example.com\";\n        String bankCardData = \"123456******7890\";\n        String cnapsCodeData = \"12********\";\n\n        assertEquals(chineseNameData, SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.CHINESE_NAME));\n        assertEquals(idCardData, SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.ID_CARD));\n        assertEquals(fixedPhoneData, SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.FIXED_PHONE));\n        assertEquals(mobilePhoneData, SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.MOBILE_PHONE));\n        assertEquals(addressData, SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.ADDRESS));\n        assertEquals(emailData, SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.EMAIL));\n        assertEquals(bankCardData, SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.BANK_CARD));\n        assertEquals(cnapsCodeData, SensitiveInfoUtil.getEncodeData(data, SensitiveEnum.CNAPS_CODE));\n        assertEquals(data, SensitiveInfoUtil.getEncodeData(data, null)); // default case should return input data\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        // Given a sample data for each sensitive enum type\n        String originalChineseName = \"\u5f20\u4e09\";\n        String originalIdCard = \"1234567812345678\";\n        String originalFixedPhone = \"01012345678\";\n        String originalMobilePhone = \"13800138000\";\n        String originalAddress = \"\u5317\u4eac\u5e02\u6d77\u6dc0\u533a\u67d0\u67d0\u8857\u9053\";\n        String originalEmail = \"example@example.com\";\n        String originalBankCard = \"6222000011112222\";\n        String originalCnapsCode = \"102100009999\";\n\n        // Test for ENCODE case\n        String expectedEncoded = \"ENCODED\";\n        String actualEncoded = SensitiveInfoUtil.getEncodeData(originalIdCard, SensitiveEnum.ENCODE);\n        assertNotNull(actualEncoded);\n        // Please note this test assumes that the AesEncryptUtil.encrypt method is functional\n        // In real unit tests, you would usually mock dependencies to return controlled outputs\n        assertNotEquals(originalIdCard, actualEncoded); // We expect the encrypted data not to match the original\n\n        // Test for CHINESE_NAME case\n        String expectedChineseName = \"\u5f20**\";\n        assertEquals(expectedChineseName, SensitiveInfoUtil.getEncodeData(originalChineseName, SensitiveEnum.CHINESE_NAME));\n\n        // Test for ID_CARD case\n        String expectedIdCard = \"************5678\";\n        assertEquals(expectedIdCard, SensitiveInfoUtil.getEncodeData(originalIdCard, SensitiveEnum.ID_CARD));\n\n        // Test for FIXED_PHONE case\n        String expectedFixedPhone = \"********5678\";\n        assertEquals(expectedFixedPhone, SensitiveInfoUtil.getEncodeData(originalFixedPhone, SensitiveEnum.FIXED_PHONE));\n\n        // Test for MOBILE_PHONE case\n        String expectedMobilePhone = \"138****8000\";\n        assertEquals(expectedMobilePhone, SensitiveInfoUtil.getEncodeData(originalMobilePhone, SensitiveEnum.MOBILE_PHONE));\n\n        // Test for ADDRESS case\n        String expectedAddress = \"\u5317\u4eac\u5e02\u6d77\u6dc0\u533a****\";\n        assertEquals(expectedAddress, SensitiveInfoUtil.getEncodeData(originalAddress, SensitiveEnum.ADDRESS));\n\n        // Test for EMAIL case\n        String expectedEmail = \"e*************@example.com\";\n        assertEquals(expectedEmail, SensitiveInfoUtil.getEncodeData(originalEmail, SensitiveEnum.EMAIL));\n\n        // Test for BANK_CARD case\n        String expectedBankCard = \"622200******2222\";\n        assertEquals(expectedBankCard, SensitiveInfoUtil.getEncodeData(originalBankCard, SensitiveEnum.BANK_CARD));\n\n        // Test for CNAPS_CODE case\n        String expectedCnapsCode = \"10********\";\n        assertEquals(expectedCnapsCode, SensitiveInfoUtil.getEncodeData(originalCnapsCode, SensitiveEnum.CNAPS_CODE));\n\n        // Test for default case\n        String expectedDefault = \"Default Data\";\n        assertEquals(expectedDefault, SensitiveInfoUtil.getEncodeData(expectedDefault, null));\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.jeecg.common.desensitization.enums.SensitiveEnum;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotEquals;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        // Assuming AesEncryptUtil.encrypt always returns a fixed encrypted string for testing\n        String originalData = \"testData\";\n        String encryptedData = \"encTestData\"; // Mocked result\n        String chineseNameResult = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.CHINESE_NAME);\n        String idCardResult = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.ID_CARD);\n        String fixedPhoneResult = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.FIXED_PHONE);\n        String mobilePhoneResult = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.MOBILE_PHONE);\n        String addressResult = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.ADDRESS);\n        String emailResult = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.EMAIL);\n        String bankCardResult = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.BANK_CARD);\n        String cnapsCodeResult = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.CNAPS_CODE);\n        String defaultResult = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.DEFAULT);\n\n        // Test encoding\n        assertEquals(encryptedData, SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.ENCODE));\n\n        // Test other sensitive information processing\n        assertEquals(\"t*******\", chineseNameResult);\n        assertEquals(\"*******a\", idCardResult);\n        assertEquals(\"******ta\", fixedPhoneResult);\n        assertEquals(\"tes******ta\", mobilePhoneResult);\n        assertEquals(\"t*******a\", addressResult);\n        assertEquals(\"t**@****ta\", emailResult);\n        assertEquals(\"test****ta\", bankCardResult);\n        assertEquals(\"te*******\", cnapsCodeResult);\n\n        // Test default handling (no processing)\n        assertEquals(originalData, defaultResult);\n\n        // Verify that the sensitive info is not equal to the original, indicating it was transformed\n        assertNotEquals(originalData, chineseNameResult);\n        assertNotEquals(originalData, idCardResult);\n        assertNotEquals(originalData, fixedPhoneResult);\n        assertNotEquals(originalData, mobilePhoneResult);\n        assertNotEquals(originalData, addressResult);\n        assertNotEquals(originalData, emailResult);\n        assertNotEquals(originalData, bankCardResult);\n        assertNotEquals(originalData, cnapsCodeResult);\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        assertEquals(SensitiveInfoUtil.getEncodeData(null, SensitiveEnum.ENCODE), null);\n        assertEquals(SensitiveInfoUtil.getEncodeData(\"\", SensitiveEnum.ENCODE), \"\");\n        \n        // Let's assume \"encrypt\" method replaces characters with '*'\n        String encryptedData = \"********************\";  // Placeholder for the encrypted data\n        assertEquals(SensitiveInfoUtil.getEncodeData(\"myData\", SensitiveEnum.ENCODE), encryptedData);\n\n        assertEquals(SensitiveInfoUtil.getEncodeData(\"\u5f20\u4e09\", SensitiveEnum.CHINESE_NAME), \"\u5f20**\");\n        assertEquals(SensitiveInfoUtil.getEncodeData(\"123456789012345678\", SensitiveEnum.ID_CARD), \"**************5678\");\n        assertEquals(SensitiveInfoUtil.getEncodeData(\"01012345678\", SensitiveEnum.FIXED_PHONE), \"****12345678\");\n        assertEquals(SensitiveInfoUtil.getEncodeData(\"13112341234\", SensitiveEnum.MOBILE_PHONE), \"131****1234\");\n        assertEquals(SensitiveInfoUtil.getEncodeData(\"\u5317\u4eac\u5e02\u6d77\u6dc0\u533a\u4e0a\u5730\u5341\u885710\u53f7\", SensitiveEnum.ADDRESS), \"\u5317\u4eac\u5e02\u6d77\u6dc0\u533a\u4e0a\u5730***\");\n        assertEquals(SensitiveInfoUtil.getEncodeData(\"gao123@163.com\", SensitiveEnum.EMAIL), \"g**@163.com\");\n        assertEquals(SensitiveInfoUtil.getEncodeData(\"6222600123456789\", SensitiveEnum.BANK_CARD), \"622260******6789\");\n        assertEquals(SensitiveInfoUtil.getEncodeData(\"102100000125\", SensitiveEnum.CNAPS_CODE), \"10*********\");\n\n        // It's important to pass valid encrypted data to the assertion in case the encryption logic is complex.\n        // The below assertion is commented out due to the encryption method being external and not mocked here.\n        // Assuming that we have a correct encrypted string, we would uncomment and modify this assertion.\n        // assertEquals(SensitiveInfoUtil.getEncodeData(\"mySensitiveData\", SensitiveEnum.ENCODE), \"<correct_encoded_value>\");\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.jeecg.common.desensitization.enums.SensitiveEnum;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        // ENCODE Test\n        String originalData = \"Data to be encoded\";\n        String encodedData = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.ENCODE);\n        assertNotEquals(originalData, encodedData, \"Encoded data should not match the original data.\");\n\n        // CHINESE_NAME Test\n        String chineseName = \"\u5f20\u4e09\";\n        String encodedChineseName = SensitiveInfoUtil.getEncodeData(chineseName, SensitiveEnum.CHINESE_NAME);\n        assertEquals(\"\u5f20**\", encodedChineseName, \"Chinese name encoding doesn't match expected output.\");\n\n        // ID_CARD Test\n        String idCard = \"123456789012345678\";\n        String encodedIdCard = SensitiveInfoUtil.getEncodeData(idCard, SensitiveEnum.ID_CARD);\n        assertEquals(\"***************5678\", encodedIdCard, \"ID card encoding doesn't match expected output.\");\n        \n        // FIXED_PHONE Test\n        String fixedPhone = \"12345678\";\n        String encodedFixedPhone = SensitiveInfoUtil.getEncodeData(fixedPhone, SensitiveEnum.FIXED_PHONE);\n        assertEquals(\"****5678\", encodedFixedPhone, \"Fixed phone encoding doesn't match expected output.\");\n        \n        // MOBILE_PHONE Test\n        String mobilePhone = \"12345678901\";\n        String encodedMobilePhone = SensitiveInfoUtil.getEncodeData(mobilePhone, SensitiveEnum.MOBILE_PHONE);\n        assertEquals(\"123****8901\", encodedMobilePhone, \"Mobile phone encoding doesn't match expected output.\");\n        \n        // ADDRESS Test\n        String address = \"Some Location Address\";\n        String encodedAddress = SensitiveInfoUtil.getEncodeData(address, SensitiveEnum.ADDRESS);\n        assertEquals(\"Some Location Add***\", encodedAddress, \"Address encoding doesn't match expected output.\");\n        \n        // EMAIL Test\n        String email = \"example@test.com\";\n        String encodedEmail = SensitiveInfoUtil.getEncodeData(email, SensitiveEnum.EMAIL);\n        assertEquals(\"e**@test.com\", encodedEmail, \"Email encoding doesn't match expected output.\");\n        \n        // BANK_CARD Test\n        String bankCard = \"6222002017061234567\";\n        String encodedBankCard = SensitiveInfoUtil.getEncodeData(bankCard, SensitiveEnum.BANK_CARD);\n        assertEquals(\"622200**********4567\", encodedBankCard, \"Bank card encoding doesn't match expected output.\");\n        \n        // CNAPS_CODE Test\n        String cnapsCode = \"1234567890\";\n        String encodedCnapsCode = SensitiveInfoUtil.getEncodeData(cnapsCode, SensitiveEnum.CNAPS_CODE);\n        assertEquals(\"12********\", encodedCnapsCode, \"CNAPS code encoding doesn't match expected output.\");\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.jeecg.common.desensitization.enums.SensitiveEnum;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        assertEquals(\"\u674e**\", SensitiveInfoUtil.getEncodeData(\"\u674e\u56db\", SensitiveEnum.CHINESE_NAME));\n        assertEquals(\"*************5762\", SensitiveInfoUtil.getEncodeData(\"123456789012345762\", SensitiveEnum.ID_CARD));\n        assertEquals(\"****1234\", SensitiveInfoUtil.getEncodeData(\"01012341234\", SensitiveEnum.FIXED_PHONE));\n        assertEquals(\"138******1234\", SensitiveInfoUtil.getEncodeData(\"138001001234\", SensitiveEnum.MOBILE_PHONE));\n        assertEquals(\"\u5317\u4eac\u5e02\u6d77\u6dc0\u533a****\", SensitiveInfoUtil.getEncodeData(\"\u5317\u4eac\u5e02\u6d77\u6dc0\u533a\u4e0a\u5730\u5341\u885710\u53f7\", SensitiveEnum.ADDRESS));\n        assertEquals(\"g**@163.com\", SensitiveInfoUtil.getEncodeData(\"good@163.com\", SensitiveEnum.EMAIL));\n        assertEquals(\"6222600**********1234\", SensitiveInfoUtil.getEncodeData(\"62226001234567891234\", SensitiveEnum.BANK_CARD));\n        assertEquals(\"12********\", SensitiveInfoUtil.getEncodeData(\"123456\", SensitiveEnum.CNAPS_CODE));\n\n        // Test for default case when sensitiveEnum is not matched with any case\n        assertEquals(\"nonSensitiveData\", SensitiveInfoUtil.getEncodeData(\"nonSensitiveData\", null));\n\n        // Additional hypothetical test case for the ENCODE case\n        // NOTE: To test the ENCODE case properly, you will need to have the AesEncryptUtil properly set up \n        // and configure any necessary prerequisites such as encryption keys, etc.\n        // As the encrypt method and implementation details are not provided, the test is commented out.\n        \n        // String originalData = \"Sensitive data to be encrypted\";\n        // String encryptedData = AesEncryptUtil.encrypt(originalData); // Hypothetical expected functionality\n        // assertEquals(encryptedData, SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.ENCODE));\n    }\n}"
    ]
}