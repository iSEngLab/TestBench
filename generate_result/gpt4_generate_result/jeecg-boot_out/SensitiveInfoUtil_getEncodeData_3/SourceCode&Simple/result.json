{
    "project_name": "jeecg-boot",
    "file_name": "SensitiveInfoUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/desensitization/util/SensitiveInfoUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.desensitization.util",
    "docstring": "/**\n     * \u5904\u7406\u6570\u636e \u83b7\u53d6\u52a0\u5bc6\u540e\u7684\u6570\u636e \u6216\u662f\u683c\u5f0f\u5316\u540e\u7684\u6570\u636e\n     * @param data \u5b57\u7b26\u4e32\n     * @param sensitiveEnum \u7c7b\u578b\n     * @return \u5904\u7406\u540e\u7684\u5b57\u7b26\u4e32\n     */",
    "source_code": "\npublic static String getEncodeData(String data, SensitiveEnum sensitiveEnum){\n    String result;\n    switch (sensitiveEnum){\n        case ENCODE:\n            try {\n                result = AesEncryptUtil.encrypt(data);\n            } catch (Exception exception) {\n                log.error(\"\u6570\u636e\u52a0\u5bc6\u9519\u8bef\", exception.getMessage());\n                result = data;\n            }\n            break;\n        case CHINESE_NAME:\n            result = chineseName(data);\n            break;\n        case ID_CARD:\n            result = idCardNum(data);\n            break;\n        case FIXED_PHONE:\n            result = fixedPhone(data);\n            break;\n        case MOBILE_PHONE:\n            result = mobilePhone(data);\n            break;\n        case ADDRESS:\n            result = address(data, 3);\n            break;\n        case EMAIL:\n            result = email(data);\n            break;\n        case BANK_CARD:\n            result = bankCard(data);\n            break;\n        case CNAPS_CODE:\n            result = cnapsCode(data);\n            break;\n        default:\n            result = data;\n    }\n    return result;\n}\n",
    "class_name": "SensitiveInfoUtil",
    "method_name": "getEncodeData",
    "arguments": [
        "String data",
        "SensitiveEnum sensitiveEnum"
    ],
    "generate_test": [
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n\n    // Example test data\n    private static final String TEST_DATA = \"Sensitive Data\";\n    private static final String ENCRYPTED_DATA = \"Encrypted Data\";\n    private static final String CHINESE_NAME_RESULT = \"Desensitized Chinese Name\";\n    \n    // Mocking the AesEncryptUtil.encrypt method behavior using a static block\n    static {\n        try {\n            // Assuming myEncryptMethod is a mocked method that returns the encrypted data\n            org.mockito.Mockito.when(AesEncryptUtil.encrypt(TEST_DATA)).thenReturn(ENCRYPTED_DATA);\n        } catch (Exception e) {\n            // Exception handle (if any)\n        }\n    }\n\n    @Test\n    public void getEncodeDataTest() {\n        // Test ENCODE case\n        String encodedResult = SensitiveInfoUtil.getEncodeData(TEST_DATA, SensitiveEnum.ENCODE);\n        assertEquals(ENCRYPTED_DATA, encodedResult, \"The ENCODE case should return encrypted data\");\n\n        // Test CHINESE_NAME case\n        String chineseNameResult = SensitiveInfoUtil.getEncodeData(TEST_DATA, SensitiveEnum.CHINESE_NAME);\n        assertEquals(CHINESE_NAME_RESULT, chineseNameResult, \"The CHINESE_NAME case should return desensitized Chinese name\");\n\n        // Add more assertions for each case as necessary based on the expected behavior of each method\n        \n        // Test for logging and exception handling\n        // Assuming 'data' is unchanged when there's an encryption error\n        String exceptionResult = SensitiveInfoUtil.getEncodeData(TEST_DATA, SensitiveEnum.ENCODE);\n        assertEquals(TEST_DATA, exceptionResult, \"In case of exception, the original data should be returned\");\n\n        // Test for default case (no encoding/sanitization)\n        String defaultResult = SensitiveInfoUtil.getEncodeData(TEST_DATA, null); // Assuming passing null results in default case\n        assertEquals(TEST_DATA, defaultResult, \"The default case should return the original data\");\n    }\n\n    // Add more test methods for various scenarios, including edge cases and error handling\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jeecg.common.desensitization.enums.SensitiveEnum;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        String originalData = \"testData\";\n        String encodedData = AesEncryptUtil.encrypt(originalData); // Assume this is a static method that returns an encrypted version of the input.\n        String encodedFallbackData = originalData; // In case of encryption error, the same data is returned.\n        \n        // Test the ENCODE case\n        SensitiveEnum encodeSensitiveEnum = SensitiveEnum.ENCODE;\n        try {\n            String result = SensitiveInfoUtil.getEncodeData(originalData, encodeSensitiveEnum);\n            assertEquals(encodedData, result, \"Encoded data should match the expected encrypted string.\");\n        } catch (Exception e) {\n            fail(\"Should not throw exception during encoding\");\n        }\n\n        // Assuming there are similar static methods for other sensitive data types, e.g., chineseName(), idCardNum(), etc.\n\n        // Test for error handling in ENCODE case\n        // Mock or simulate an Exception from AesEncryptUtil.encrypt() and check if it returns original data\n        // Here we'll just directly test the fallback scenario\n        // In a real scenario, mocking frameworks such as Mockito could be used to simulate exceptions.\n        try {\n            String errorResult = SensitiveInfoUtil.getEncodeData(originalData, encodeSensitiveEnum);\n            assertEquals(encodedFallbackData, errorResult, \"In case of encryption error, original data should be returned.\");\n        } catch (Exception e) {\n            fail(\"Should handle encryption exception and not throw further.\");\n        }\n        \n        // Similar test cases can be added for other branches of the switch statement\n        // For each sensitiveEnum type such as CHINESE_NAME, ID_CARD, etc.\n        // Below is a sample for CHINESE_NAME\n\n        // Test the CHINESE_NAME case\n        SensitiveEnum chineseNameSensitiveEnum = SensitiveEnum.CHINESE_NAME;\n        String desensitizedChineseName = \"Zhang *\"; // Assuming chineseName method returns this desensitized name\n        String resultChineseName = SensitiveInfoUtil.getEncodeData(\"Zhang San\", chineseNameSensitiveEnum);\n        assertEquals(desensitizedChineseName, resultChineseName, \"Desensitized Chinese name should match the expected value.\");\n        \n        // ... Additional test cases for ID_CARD, FIXED_PHONE, etc.\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.jeecg.common.desensitization.enums.SensitiveEnum;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        // Assuming AesEncryptUtil.encrypt returns a base64 encoded string\n        String originalData = \"testData\";\n        String encryptedData = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.ENCODE);\n        assertNotNull(encryptedData, \"The encrypted data should not be null.\");\n\n        // Assuming chineseName method masks all characters but the last one\n        String chineseName = \"\u5f20\u4e09\";\n        String maskedChineseName = SensitiveInfoUtil.getEncodeData(chineseName, SensitiveEnum.CHINESE_NAME);\n        assertEquals(\"\u5f20*\", maskedChineseName);\n\n        // Similarly assuming idCardNum masks all digits but the last four\n        String idCard = \"123456789012345678\";\n        String maskedIdCard = SensitiveInfoUtil.getEncodeData(idCard, SensitiveEnum.ID_CARD);\n        assertEquals(\"*************5678\", maskedIdCard);\n\n        // Continue for each case in the switch statement with assumed behavior\n        // Fixed Phone, Mobile Phone, Address, Email, Bank Card, CNAPS Code...\n        \n        // Example for another case: Mobile Phone\n        String mobilePhone = \"12345678901\";\n        String maskedMobilePhone = SensitiveInfoUtil.getEncodeData(mobilePhone, SensitiveEnum.MOBILE_PHONE);\n        assertEquals(\"123****8901\", maskedMobilePhone);\n        \n        // You should continue writing assertions for the rest \n        // of the sensitive data types following their masking rules.\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jeecg.common.desensitization.enums.SensitiveEnum;\nimport org.jeecg.common.util.encryption.AesEncryptUtil;\n\nimport org.mockito.Mockito;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        String originalData = \"testData\";\n        String encryptedData = \"encryptedData\";\n        \n        // Mock the static method AesEncryptUtil.encrypt\n        AesEncryptUtil mockAesEncryptUtil = Mockito.mock(AesEncryptUtil.class);\n        try {\n            Mockito.when(mockAesEncryptUtil.encrypt(originalData)).thenReturn(encryptedData);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        \n        // Test ENCODE case\n        String resultEncode = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.ENCODE);\n        assertEquals(encryptedData, resultEncode, \"ENCODE should return encrypted data\");\n\n        // Test other enum cases with corresponding expected results\n        String resultChineseName = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.CHINESE_NAME);\n        assertEquals(\"ExpectedChineseName\", resultChineseName, \"CHINESE_NAME should return transformed data\");\n\n        String resultIdCard = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.ID_CARD);\n        assertEquals(\"ExpectedIdCard\", resultIdCard, \"ID_CARD should return transformed data\");\n\n        String resultFixedPhone = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.FIXED_PHONE);\n        assertEquals(\"ExpectedFixedPhone\", resultFixedPhone, \"FIXED_PHONE should return transformed data\");\n\n        String resultMobilePhone = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.MOBILE_PHONE);\n        assertEquals(\"ExpectedMobilePhone\", resultMobilePhone, \"MOBILE_PHONE should return transformed data\");\n\n        String resultAddress = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.ADDRESS);\n        assertEquals(\"ExpectedAddress\", resultAddress, \"ADDRESS should return transformed data\");\n\n        String resultEmail = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.EMAIL);\n        assertEquals(\"ExpectedEmail\", resultEmail, \"EMAIL should return transformed data\");\n\n        String resultBankCard = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.BANK_CARD);\n        assertEquals(\"ExpectedBankCard\", resultBankCard, \"BANK_CARD should return transformed data\");\n\n        String resultCnapsCode = SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.CNAPS_CODE);\n        assertEquals(\"ExpectedCnapsCode\", resultCnapsCode, \"CNAPS_CODE should return transformed data\");\n\n        // Test default case\n        String resultDefault = SensitiveInfoUtil.getEncodeData(originalData, null);\n        assertEquals(originalData, resultDefault, \"Default should return the original data\");\n\n        // Add tests for exceptions if appropriate (e.g., when encryption fails)\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    \n    @Test\n    public void getEncodeDataTest() {\n        // Assume AesEncryptUtil.encrypt method would work as expected\n        String rawData = \"testData\";\n        String encryptedData = \"encryptedData\";\n        \n        // Test for ENCODE case\n        assertEquals(encryptedData, SensitiveInfoUtil.getEncodeData(rawData, SensitiveEnum.ENCODE), \"The encrypted data does not match the expected output.\");\n        \n        // Test case for handling exception during encryption\n        // This implies that if an exception is thrown, the raw data should be returned\n        // The test doesn't actually invoke a method that throws an exception\n        // but rather assumes the behavior as if an exception was thrown.\n        assertEquals(rawData, SensitiveInfoUtil.getEncodeData(rawData, SensitiveEnum.ENCODE), \"The raw data should be returned in case of encryption error.\");\n        \n        // Tests for other SensitiveEnum types would go here, e.g.:\n        String chineseNameEncoded = \"NameEncoded\"; // assuming encoded value for demonstration\n        assertEquals(chineseNameEncoded, SensitiveInfoUtil.getEncodeData(\"John Doe\", SensitiveEnum.CHINESE_NAME), \"The chinese name encoding does not match the expected output.\");\n        \n        // ... and so on for ID_CARD, FIXED_PHONE, etc.\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport org.jeecg.common.desensitization.enums.SensitiveEnum;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        // Setup the test data and expected results\n        final String rawData = \"rawData\";\n        final String encodedData = \"encodedData\";\n        final String chineseName = \"\u738b\u5c0f\u660e\";\n        final String encodedChineseName = \"\u738b*\u660e\";\n        final String idCard = \"123456789012345678\";\n        final String encodedIdCard = \"123***********5678\";\n\n        // Mock the encryption and other static utilities as needed\n        AesEncryptUtil mockAesEncryptUtil = mock(AesEncryptUtil.class);\n        when(mockAesEncryptUtil.encrypt(rawData)).thenReturn(encodedData);\n        // ... additional mocking of methods like `chineseName`, `idCardNum`, etc\n\n        // Perform the test with ENCODE enum\n        String resultForEncode = SensitiveInfoUtil.getEncodeData(rawData, SensitiveEnum.ENCODE);\n        assertEquals(encodedData, resultForEncode, \"The encoded data does not match the expected result.\");\n\n        // Perform the test with CHINESE_NAME enum\n        String resultForChineseName = SensitiveInfoUtil.getEncodeData(chineseName, SensitiveEnum.CHINESE_NAME);\n        assertEquals(encodedChineseName, resultForChineseName, \"The Chinese name encoding does not match the expected result.\");\n\n        // Perform the test with ID_CARD enum\n        String resultForIdCard = SensitiveInfoUtil.getEncodeData(idCard, SensitiveEnum.ID_CARD);\n        assertEquals(encodedIdCard, resultForIdCard, \"The ID card encoding does not match the expected result.\");\n\n        // ... additional assertions for other enum types as needed\n\n        // Verify necessary interactions with the mocks\n        verify(mockAesEncryptUtil).encrypt(rawData);\n        // ... additional verifications as per requirements\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        // Assuming AesEncryptUtil.encrypt(), and other private methods have their own test scenarios.\n        String originalData = \"testData\";\n        String encryptedData = \"encryptedData\"; // This should result from calling AesEncryptUtil.encrypt(originalData), mocked\n        String processedData; // Used for other SensitiveEnum cases\n        \n        // ENCODE case\n        try {\n            processedData = AesEncryptUtil.encrypt(originalData); // Mock actual encryption functionality\n        } catch (Exception e) {\n            processedData = originalData;\n        }\n        assertEquals(encryptedData, SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.ENCODE));\n\n        // CHINESE_NAME case\n        processedData = \"ProcessedName\"; // Expected result of processing\n        assertEquals(processedData, SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.CHINESE_NAME));\n\n        // Rest of the cases, assuming that methods like chineseName(originalData) return a constant \"ProcessedName\",\n        // and similarly for other cases.\n        // ID_CARD case\n        processedData = \"ProcessedIdCard\";\n        assertEquals(processedData, SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.ID_CARD));\n\n        // FIXED_PHONE case\n        processedData = \"ProcessedFixedPhone\";\n        assertEquals(processedData, SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.FIXED_PHONE));\n\n        // MOBILE_PHONE case\n        processedData = \"ProcessedMobilePhone\";\n        assertEquals(processedData, SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.MOBILE_PHONE));\n\n        // ADDRESS case\n        processedData = \"ProcessedAddress\";\n        assertEquals(processedData, SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.ADDRESS));\n\n        // EMAIL case\n        processedData = \"ProcessedEmail\";\n        assertEquals(processedData, SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.EMAIL));\n\n        // BANK_CARD case\n        processedData = \"ProcessedBankCard\";\n        assertEquals(processedData, SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.BANK_CARD));\n\n        // CNAPS_CODE case\n        processedData = \"ProcessedCnapsCode\";\n        assertEquals(processedData, SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.CNAPS_CODE));\n\n        // DEFAULT case (non-existing enum for default path)\n        assertEquals(originalData, SensitiveInfoUtil.getEncodeData(originalData, null)); // Here `null` is used to trigger the default case\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jeecg.common.desensitization.enums.SensitiveEnum;\nimport org.mockito.Mockito;\nimport org.jeecg.common.util.encryption.AesEncryptUtil;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        try {\n            // Assume AesEncryptUtil.encrypt() is a static method, we shall mock it\n            Mockito.mockStatic(AesEncryptUtil.class);\n            Mockito.when(AesEncryptUtil.encrypt(\"data\")).thenReturn(\"encryptedData\");\n\n            // ENCODE case - successful encryption\n            String encodeResult = SensitiveInfoUtil.getEncodeData(\"data\", SensitiveEnum.ENCODE);\n            assertEquals(\"encryptedData\", encodeResult);\n\n            // ENCODE case - encryption exception\n            Mockito.when(AesEncryptUtil.encrypt(\"data\")).thenThrow(new Exception(\"Encryption Exception\"));\n            encodeResult = SensitiveInfoUtil.getEncodeData(\"data\", SensitiveEnum.ENCODE);\n            assertEquals(\"data\", encodeResult); // Should return the original data if encryption fails\n\n            // CHINESE_NAME, ID_CARD, FIXED_PHONE, MOBILE_PHONE, ADDRESS,\n            // EMAIL, BANK_CARD, CNAPS_CODE cases could be tested similarly\n            // assuming we have the implementations for chineseName, idCardNum, etc.\n\n            // For instance, testing CHINESE_NAME case\n            // String chineseNameResult = SensitiveInfoUtil.getEncodeData(\"John Doe\", SensitiveEnum.CHINESE_NAME);\n            // assertEquals(\"ExpectedResultAfterChineseNameMethod\", chineseNameResult);\n\n            // DEFAULT case\n            String defaultResult = SensitiveInfoUtil.getEncodeData(\"defaultData\", SensitiveEnum.UNKNOWN);\n            assertEquals(\"defaultData\", defaultResult);\n\n        } catch (Exception e) {\n            fail(\"An exception should not have been thrown: \" + e.getMessage());\n        }\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        final String testData = \"Sensitive Data\";\n        final String encryptedData = \"Encrypted Data\";\n        final SensitiveEnum encodeEnum = SensitiveEnum.ENCODE;\n        final SensitiveEnum otherEnum = SensitiveEnum.CHINESE_NAME;\n\n        // Assume AesEncryptUtil.encrypt() statically returns \"Encrypted Data\" for the test\n        AesEncryptUtil mockAesEncryptUtil = mock(AesEncryptUtil.class);\n        when(mockAesEncryptUtil.encrypt(testData)).thenReturn(encryptedData);\n\n        // Test for ENCODE case\n        String resultEncode = SensitiveInfoUtil.getEncodeData(testData, encodeEnum);\n        assertEquals(encryptedData, resultEncode, \"The encoded data should match the encrypted data\");\n\n        // Test for an alternative case\n        String resultOther = SensitiveInfoUtil.getEncodeData(testData, otherEnum);\n        // Assuming that the chineseName(testData) method returns testData modified in a specific way\n        // Replace `expectedChineseName` with the expected output after processing `testData` using chineseName(testData) method.\n        final String expectedChineseName = \"Mock Chinese Name\";\n        assertEquals(expectedChineseName, resultOther, \"The processed data should match the expected Chinese name\");\n\n        // Test for Default case\n        final SensitiveEnum defaultEnum = SensitiveEnum.UNKNOWN;\n        String resultDefault = SensitiveInfoUtil.getEncodeData(testData, defaultEnum);\n        assertEquals(testData, resultDefault, \"The default case should return the original data\");\n        \n        // Restore original static AesEncryptUtil\n        reset(mockAesEncryptUtil);\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.function.Executable;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.Mockito;\n\npublic class SensitiveInfoUtilTest {\n\n    @BeforeEach\n    public void setUp() {\n        // Set up any required mock behaviors before each test\n        // For example, mocking AesEncryptUtil if needed\n    }\n\n    @Test\n    public void getEncodeDataTest() {\n        // Test encoding with ENCODE type\n        String originalData = \"TestData\";\n        String encodedData = \"EncodedData\";\n        Mockito.mockStatic(AesEncryptUtil.class);\n        Mockito.when(AesEncryptUtil.encrypt(originalData)).thenReturn(encodedData);\n\n        assertEquals(encodedData, SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.ENCODE));\n\n        // Test handling exception during encryption\n        Mockito.when(AesEncryptUtil.encrypt(originalData)).thenThrow(new RuntimeException(\"Encryption error\"));\n        assertEquals(originalData, SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.ENCODE));\n\n        // Test CHINESE_NAME case\n        // Assuming that the `chineseName` method returns some kind of obfuscated name\n        String obfuscatedChineseName = \"X**\";\n        assertEquals(obfuscatedChineseName, SensitiveInfoUtil.getEncodeData(\"Xiaoming\", SensitiveEnum.CHINESE_NAME));\n\n        // The following tests are similar concepts for the other enum types,\n        // assuming that we have predefined the obfuscated outputs for these methods as well\n\n        // Test ID_CARD case\n        String obfuscatedIdCard = \"**************5762\";\n        assertEquals(obfuscatedIdCard, SensitiveInfoUtil.getEncodeData(\"123456789012345762\", SensitiveEnum.ID_CARD));\n\n        // Test FIXED_PHONE case\n        String obfuscatedFixedPhone = \"021-****1234\";\n        assertEquals(obfuscatedFixedPhone, SensitiveInfoUtil.getEncodeData(\"021-12341234\", SensitiveEnum.FIXED_PHONE));\n\n        // Test MOBILE_PHONE case\n        String obfuscatedMobilePhone = \"138****1234\";\n        assertEquals(obfuscatedMobilePhone, SensitiveInfoUtil.getEncodeData(\"13812341234\", SensitiveEnum.MOBILE_PHONE));\n\n        // And so on for the other cases...\n\n        // Test default case (no encoding or obfuscation)\n        String defaultData = \"DefaultData\";\n        assertEquals(defaultData, SensitiveInfoUtil.getEncodeData(defaultData, SensitiveEnum.UNKNOWN));\n    }\n}\n"
    ]
}