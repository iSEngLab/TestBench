{
    "project_name": "jeecg-boot",
    "file_name": "SensitiveInfoUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/desensitization/util/SensitiveInfoUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.desensitization.util",
    "docstring": "/**\n     * \u5904\u7406\u6570\u636e \u83b7\u53d6\u52a0\u5bc6\u540e\u7684\u6570\u636e \u6216\u662f\u683c\u5f0f\u5316\u540e\u7684\u6570\u636e\n     * @param data \u5b57\u7b26\u4e32\n     * @param sensitiveEnum \u7c7b\u578b\n     * @return \u5904\u7406\u540e\u7684\u5b57\u7b26\u4e32\n     */",
    "source_code": "\npublic static String getEncodeData(String data, SensitiveEnum sensitiveEnum){\n    String result;\n    switch (sensitiveEnum){\n        case ENCODE:\n            try {\n                result = AesEncryptUtil.encrypt(data);\n            } catch (Exception exception) {\n                log.error(\"\u6570\u636e\u52a0\u5bc6\u9519\u8bef\", exception.getMessage());\n                result = data;\n            }\n            break;\n        case CHINESE_NAME:\n            result = chineseName(data);\n            break;\n        case ID_CARD:\n            result = idCardNum(data);\n            break;\n        case FIXED_PHONE:\n            result = fixedPhone(data);\n            break;\n        case MOBILE_PHONE:\n            result = mobilePhone(data);\n            break;\n        case ADDRESS:\n            result = address(data, 3);\n            break;\n        case EMAIL:\n            result = email(data);\n            break;\n        case BANK_CARD:\n            result = bankCard(data);\n            break;\n        case CNAPS_CODE:\n            result = cnapsCode(data);\n            break;\n        default:\n            result = data;\n    }\n    return result;\n}\n",
    "class_name": "SensitiveInfoUtil",
    "method_name": "getEncodeData",
    "arguments": [
        "String data",
        "SensitiveEnum sensitiveEnum"
    ],
    "generate_test": [
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    \n    @Test\n    public void getEncodeDataTest() {\n        String originalData = \"Original Data\";\n        String encryptedData = \"Encrypted Data\";\n        \n        // Mocking AesEncryptUtil.encrypt to return specific value for testing purposes\n        // Assuming 'AesEncryptUtil.encrypt' has been properly mocked somewhere to return \"Encrypted Data\" \n        \n        assertEquals(encryptedData, SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.ENCODE));\n        assertEquals(\"Li**\", SensitiveInfoUtil.getEncodeData(\"Lili\", SensitiveEnum.CHINESE_NAME));\n        assertEquals(\"123************34\", SensitiveInfoUtil.getEncodeData(\"123456789012345678\", SensitiveEnum.ID_CARD));\n        assertEquals(\"010-****-1234\", SensitiveInfoUtil.getEncodeData(\"010-1234-1234\", SensitiveEnum.FIXED_PHONE));\n        assertEquals(\"138****1234\", SensitiveInfoUtil.getEncodeData(\"13812341234\", SensitiveEnum.MOBILE_PHONE));\n        assertEquals(\"SomePlace*****\", SensitiveInfoUtil.getEncodeData(\"SomePlace 123 Street\", SensitiveEnum.ADDRESS));\n        assertEquals(\"e****@example.com\", SensitiveInfoUtil.getEncodeData(\"email@example.com\", SensitiveEnum.EMAIL));\n        assertEquals(\"6222***********1234\", SensitiveInfoUtil.getEncodeData(\"62221234123412341234\", SensitiveEnum.BANK_CARD));\n        assertEquals(\"1020*******12\", SensitiveInfoUtil.getEncodeData(\"10203040506012\", SensitiveEnum.CNAPS_CODE));\n        \n        // Assert that default case returns the data unchanged\n        assertEquals(originalData, SensitiveInfoUtil.getEncodeData(originalData, SensitiveEnum.UNKNOWN));\n        \n        // Please note that the actual encrypted data, and desensitized info like Chinese names,\n        // ID cards, etc. will depend on the actual implementation of the methods and utilities\n        // called within the `getEncodeData` method, which are not provided here. Therefore, you'll\n        // need to mock or implement these utilities to complete the test case suitably.\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        String rawString = \"Raw Data\";\n        \n        // Assuming AesEncryptUtil.encrypt() correctly encodes the raw data.\n        // This would need to be a mock or a valid static response for a pre-set value.\n        String encodedString = \"Encoded Data\";\n        \n        // Encode case\n        assertEquals(encodedString, SensitiveInfoUtil.getEncodeData(rawString, SensitiveEnum.ENCODE));\n\n        // Test other enum cases assuming the corresponding methods return the manipulated string.\n        // The tests should ideally mock the behavior of these methods.\n        \n        // Chinese Name case\n        String expectedChineseName = \"****\";\n        assertEquals(expectedChineseName, SensitiveInfoUtil.getEncodeData(rawString, SensitiveEnum.CHINESE_NAME));\n        \n        // ID Card case\n        String expectedIdCard = \"ID Card Hidden\";\n        assertEquals(expectedIdCard, SensitiveInfoUtil.getEncodeData(rawString, SensitiveEnum.ID_CARD));\n        \n        // ... and so on for each enum value with their expected results.\n        \n        // Default case\n        assertEquals(rawString, SensitiveInfoUtil.getEncodeData(rawString, SensitiveEnum.UNKNOWN));\n\n        // Error case\n        // Depending on how AesEncryptUtil.encrypt() handles errors, you could check for the raw string.\n        // For this, you would need to force the error either with invalid input or mock an exception.\n        // Here is an example of handling an error case if AesEncryptUtil.encrypt() throws an exception.\n        String errorInput = \"Error Inducing Input\";\n        assertEquals(errorInput, SensitiveInfoUtil.getEncodeData(errorInput, SensitiveEnum.ENCODE));\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class SensitiveInfoUtilTest {\n    // Assuming AesEncryptUtil is an external utility that's hard to test, we'll mock it.\n    private static AesEncryptUtil aesEncryptUtilMock;\n\n    @BeforeAll\n    static void setUp() {\n        aesEncryptUtilMock = mock(AesEncryptUtil.class);\n    }\n    \n    @BeforeEach\n    void setUpEach() throws Exception {\n        // We'll return the same string prefixed with \"ENCRYPTED_\" for illustration purposes.\n        when(aesEncryptUtilMock.encrypt(anyString())).thenReturn(\"ENCRYPTED_\" + anyString());\n    }\n\n    @Test\n    public void getEncodeDataTest() {\n        // Mock the behavior of AesEncryptUtil.encrypt\n        String testData = \"Test Data\";\n        try {\n            Mockito.when(AesEncryptUtil.encrypt(testData)).thenReturn(\"EncryptedData\");\n        } catch (Exception e) {\n            fail(\"Encrypt util threw an exception\");\n        }\n        \n        // Test ENCODE case\n        assertEquals(\"EncryptedData\", SensitiveInfoUtil.getEncodeData(testData, SensitiveEnum.ENCODE));\n        \n        // Test CHINESE_NAME case with a given name example.\n        assertEquals(\"NamePresentedAsChineseCharacters\", SensitiveInfoUtil.getEncodeData(\"John Doe\", SensitiveEnum.CHINESE_NAME));\n        \n        // Test ID_CARD case with a mock ID card.\n        assertEquals(\"IDCardNumber\", SensitiveInfoUtil.getEncodeData(\"1234567890\", SensitiveEnum.ID_CARD));\n        \n        // Test FIXED_PHONE case with a phone number\n        assertEquals(\"FixedPhoneNumber\", SensitiveInfoUtil.getEncodeData(\"12345678\", SensitiveEnum.FIXED_PHONE));\n        \n        // Test MOBILE_PHONE case with a phone number\n        assertEquals(\"EncryptedMobilePhone\", SensitiveInfoUtil.getEncodeData(\"9876543210\", SensitiveEnum.MOBILE_PHONE));\n        \n        // Test ADDRESS case with a mock address\n        assertEquals(\"HiddenAddressDetail\", SensitiveInfoUtil.getEncodeData(\"123 Main St\", SensitiveEnum.ADDRESS));\n        \n        // Test EMAIL case with an example email.\n        assertEquals(\"EmailEncryption\", SensitiveInfoUtil.getEncodeData(\"example@example.com\", SensitiveEnum.EMAIL));\n        \n        // Test BANK_CARD case with a mock bank card number.\n        assertEquals(\"BankCardEncryption\", SensitiveInfoUtil.getEncodeData(\"1234567890123456\", SensitiveEnum.BANK_CARD));\n        \n        // Test CNAPS_CODE case with a mock CNAPS code.\n        assertEquals(\"CNAPSCodeEncryption\", SensitiveInfoUtil.getEncodeData(\"123456\", SensitiveEnum.CNAPS_CODE));\n        \n        // Test the default case\n        assertEquals(\"DefaultData\", SensitiveInfoUtil.getEncodeData(\"DefaultData\", null));\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n\n    // Template to create test cases for other enum cases\n    private void testEnumCase(String input, SensitiveEnum sensitiveEnum, String expectedOutput) {\n        String result = SensitiveInfoUtil.getEncodeData(input, sensitiveEnum);\n        assertEquals(expectedOutput, result);\n    }\n\n    @Test\n    public void getEncodeDataTest() {\n        // Test with ENCODE enum case\n        String originalData = \"some data to be encoded\";\n        String expectedEncodedData = \"expected encoded result\"; // This should be the result of AesEncryptUtil.encrypt(originalData);\n        testEnumCase(originalData, SensitiveEnum.ENCODE, expectedEncodedData);\n\n        // Test other cases assuming their methods (e.g., chineseName, idCardNum) return the string \"mocked result\"\n        // You should replace \"mocked result\" with the actual expected output from each method\n        testEnumCase(\"Chinese Name\", SensitiveEnum.CHINESE_NAME, \"mocked result\");\n        testEnumCase(\"ID Card Number\", SensitiveEnum.ID_CARD, \"mocked result\");\n        testEnumCase(\"Fixed Phone Number\", SensitiveEnum.FIXED_PHONE, \"mocked result\");\n        testEnumCase(\"Mobile Phone Number\", SensitiveEnum.MOBILE_PHONE, \"mocked result\");\n        testEnumCase(\"Address\", SensitiveEnum.ADDRESS, \"mocked result\");\n        testEnumCase(\"Email\", SensitiveEnum.EMAIL, \"mocked result\");\n        testEnumCase(\"Bank Card Number\", SensitiveEnum.BANK_CARD, \"mocked result\");\n        testEnumCase(\"CNAPS Code\", SensitiveEnum.CNAPS_CODE, \"mocked result\");\n        \n        // Test default case\n        String defaultCaseData = \"default case data\";\n        testEnumCase(defaultCaseData, null, defaultCaseData);\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.*;\n\npublic class SensitiveInfoUtilTest {\n\n    private static final String TEST_DATA = \"<TEST_INPUT>\";\n    \n    @BeforeEach\n    public void setUp() {\n        // Set up any required mock behavior, particularly if you need to mock the AesEncryptUtil.encrypt method\n        AesEncryptUtil mockAesEncryptUtil = mock(AesEncryptUtil.class);\n        Mockito.when(mockAesEncryptUtil.encrypt(TEST_DATA)).thenReturn(\"<MOCK_RESULT>\");\n    }\n    \n    @Test\n    public void getEncodeDataTest() {\n        // Test for ENCODE case\n        String encodedData = SensitiveInfoUtil.getEncodeData(TEST_DATA, SensitiveEnum.ENCODE);\n        assertEquals(\"<EXPECTED_RESULT>\", encodedData);\n\n        // Add assertions for other SensitiveEnum cases here\n\n        // Test for CHINESE_NAME case\n        String chineseName = SensitiveInfoUtil.getEncodeData(TEST_DATA, SensitiveEnum.CHINESE_NAME);\n        assertEquals(\"<EXPECTED_RESULT>\", chineseName);\n\n        // ... continue with other assertions ...\n    }\n\n    // Methods to add required mock behavior or additional helpers can be added here\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        // Assuming AesEncryptUtil.encrypt method is correct and log is properly initialized.\n        // Since AesEncryptUtil.encrypt is not provided, we will treat it as a black box and assume it works as expected.\n        // Testing ENCODE scenario with a dummy data\n        String plainText = \"plainTextData\";\n        String encodedText = SensitiveInfoUtil.getEncodeData(plainText, SensitiveEnum.ENCODE);\n        // Check that the encoded text is not null and not the same as the plain text since it should have been encrypted\n        assertNotNull(encodedText, \"Encoded text should not be null\");\n        assertNotEquals(plainText, encodedText, \"Encoded text should not match the plain text\");\n        \n        // Testing CHINESE_NAME case\n        String chineseName = \"\u5f20\u4e09\";\n        // Assuming chineseName method is correctly implemented\n        String maskedChineseName = SensitiveInfoUtil.getEncodeData(chineseName, SensitiveEnum.CHINESE_NAME);\n        assertEquals(\"\u5f20*\", maskedChineseName, \"Masked Chinese name should show first character and mask others\");\n        \n        // Continue with other enum cases as needed, making similar assumptions as above\n        // For example, assuming idCardNum masks all but the last four characters\n        String idCard = \"123456789012345678\";\n        String maskedIdCard = SensitiveInfoUtil.getEncodeData(idCard, SensitiveEnum.ID_CARD);\n        assertEquals(\"************5678\", maskedIdCard, \"Masked ID card should show only last four characters\");\n        \n        // Add additional cases as appropriate\n        // ...\n    \n        // Testing the DEFAULT case where no action should be taken\n        String defaultData = \"defaultData\";\n        String defaultResult = SensitiveInfoUtil.getEncodeData(defaultData, SensitiveEnum.UNKNOWN);\n        // Assuming UNKNOWN is not a defined enum constant and would trigger the default case\n        assertEquals(defaultData, defaultResult, \"Default case should return the original data\");\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        String nonSensitiveData = \"nonSensitiveData\";\n        String sensitiveData = \"sensitiveData\";\n        String encryptedData = \"encryptedData\"; // You might want to replace this with a real encrypted string\n        String dataToBeEncoded = \"DataToBeEncoded\";\n        \n        // Assuming AesEncryptUtil is mockable/overridable and log is properly initialized in the production code.\n\n        // Test for ENCODE case\n        // Mock AesEncryptUtil to return `encryptedData` when it gets `sensitiveData`\n        // This step assumes that the mocking framework allows for such interactions.\n        // AesEncryptUtil.encrypt(sensitiveData) returns encryptedData\n        \n        String resultEncode = SensitiveInfoUtil.getEncodeData(sensitiveData, SensitiveEnum.ENCODE);\n        assertEquals(encryptedData, resultEncode);\n\n        // Test for the default case\n        String resultDefault = SensitiveInfoUtil.getEncodeData(nonSensitiveData, SensitiveEnum.DEFAULT);\n        assertEquals(nonSensitiveData, resultDefault);\n\n        // Add more assertions for other SensitiveEnum cases if necessary.\n        // For example, for CHINESE_NAME:\n        // String resultChineseName = SensitiveInfoUtil.getEncodeData(dataToBeEncoded, SensitiveEnum.CHINESE_NAME);\n        // assertEquals(expectedChineseName, resultChineseName);\n\n        // ... repeat this for ID_CARD, FIXED_PHONE, etc.,\n        // each time mocking the appropriate method if necessary,\n        // and then asserting the expected vs. actual result.\n        \n        // Test error handling\n        // Mock AesEncryptUtil to throw an exception when attempting to encrypt\n        // This step would simulate the encryption failure and log the error\n        \n        // AesEncryptUtil.encrypt(data) throws new Exception(\"encryption error\")\n        \n        // Given the Exception, verify the log error was called, and data is returned as-is\n        String resultEncodeError = SensitiveInfoUtil.getEncodeData(dataToBeEncoded, SensitiveEnum.ENCODE);\n        assertEquals(dataToBeEncoded, resultEncodeError);\n        \n        // Verify log.error was called with the correct parameters\n        // This would generally involve verifying the mock of the log object, which is not shown here.\n        \n        // Note: The data strings, expected results, and mock implementations would need to be adapted\n        // to fit the test environment and data being handled. Since there is no actual\n        // AesEncryptUtil code or other required methods (chineseName, idCardNum, etc.) shown,\n        // I've made assumptions about their behavior for the sake of providing a complete test case.\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n\n    // Example of a mock method for AesEncryptUtil.encrypt()\n    // This should be replaced with the actual encryption method or mock object response\n    private static String mockEncrypt(String data) {\n        return \"encrypted_\" + data;\n    }\n\n    @Test\n    public void getEncodeDataTest() {\n        // Test for ENCODE case using a mock encryption method\n        assertEquals(\"encrypted_data\", SensitiveInfoUtil.getEncodeData(\"data\", SensitiveEnum.ENCODE));\n\n        // Add tests for other cases as well, assuming we have those methods defined.\n        // For instance, if the `chineseName` method anonymizes all but the last character:\n        assertEquals(\"\u5f20*\", SensitiveInfoUtil.getEncodeData(\"\u5f20\u4e09\", SensitiveEnum.CHINESE_NAME));\n\n        // Continuing with other SensitiveEnum cases\n        // Assuming `idCardNum` hides all but the last four digits:\n        assertEquals(\"************1234\", SensitiveInfoUtil.getEncodeData(\"1234567890121234\", SensitiveEnum.ID_CARD));\n\n        // And so on for other enums. Mock results need to be replaced with actual expected results.\n        // ...\n\n        // Finally, test the default case\n        assertEquals(\"defaultData\", SensitiveInfoUtil.getEncodeData(\"defaultData\", SensitiveEnum.OTHER));\n    }\n\n    // Additional utility methods and setup/teardown methods, if necessary\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        String originalData = \"SensitiveData\";\n        String encryptedData = \"EncryptedData\";\n        String maskedData = \"****Data\";\n        \n        // Mock AesEncryptUtil to return a fixed encrypted string when encrypt is called\n        AesEncryptUtil mockAesEncryptUtil = Mockito.mock(AesEncryptUtil.class);\n        when(mockAesEncryptUtil.encrypt(originalData)).thenReturn(encryptedData);\n        \n        // Test for ENCODE case\n        assertEquals(encryptedData, SensitiveInfoUtils.getEncodeData(originalData, SensitiveEnum.ENCODE));\n        \n        // Test for CHINESE_NAME case\n        assertEquals(maskedData, SensitiveInfoUtils.getEncodeData(originalData, SensitiveEnum.CHINESE_NAME));\n        \n        // Test for ID_CARD case\n        assertEquals(maskedData, SensitiveInfoUtils.getEncodeData(originalData, SensitiveEnum.ID_CARD));\n        \n        // Add more test cases to cover all the enum values\n        \n        // Test for FIXED_PHONE case\n        assertEquals(maskedData, SensitiveInfoUtils.getEncodeData(originalData, SensitiveEnum.FIXED_PHONE));\n        \n        // Test for MOBILE_PHONE case\n        assertEquals(maskedData, SensitiveInfoUtils.getEncodeData(originalData, SensitiveEnum.MOBILE_PHONE));\n        \n        // Test for ADDRESS case\n        assertEquals(maskedData, SensitiveInfoUtils.getEncodeData(originalData, SensitiveEnum.ADDRESS));\n        \n        // Test for EMAIL case\n        assertEquals(maskedData, SensitiveInfoUtils.getEncodeData(originalData, SensitiveEnum.EMAIL));\n        \n        // Test for BANK_CARD case\n        assertEquals(maskedData, SensitiveInfoUtils.getEncodeData(originalData, SensitiveEnum.BANK_CARD));\n        \n        // Test for CNAPS_CODE case\n        assertEquals(maskedData, SensitiveInfoUtils.getEncodeData(originalData, SensitiveEnum.CNAPS_CODE));\n        \n        // Test default case handling\n        assertEquals(originalData, SensitiveInfoUtils.getEncodeData(originalData, SensitiveEnum.DEFAULT));\n        \n        // Verify that AesEncryptUtil.encrypt was called once with the original data\n        Mockito.verify(mockAesEncryptUtil).encrypt(originalData);\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        String testString = \"TestData123\";\n        String encryptedData = \"\"; // You will need an actual encrypted string here\n        \n        // Assuming AesEncryptUtil.encrypt() works as expected and you've initialized it\n        try {\n            encryptedData = AesEncryptUtil.encrypt(testString);\n        } catch (Exception e) {\n            fail(\"Encryption failed\", e);\n        }\n        \n        // Check for ENCODE case\n        String encodeResult = SensitiveInfoUtil.getEncodeData(testString, SensitiveEnum.ENCODE);\n        assertEquals(encryptedData, encodeResult, \"The encoded data should match the expected encryption\");\n\n        // Add more tests for different cases if necessary, for example:\n        \n        // Check for CHINESE_NAME case\n        String chineseNameMasked = SensitiveInfoUtil.chineseName(\"\u5f20\u4e09\");\n        assertEquals(chineseNameMasked, SensitiveInfoUtil.getEncodeData(\"\u5f20\u4e09\", SensitiveEnum.CHINESE_NAME), \"The Chinese name data should be masked as per the logic in chineseName method\");\n\n        // ...similarly for ID_CARD, FIXED_PHONE, etc.\n\n        // Just examples, not actual implementations\n        // Check for default case where no encoding should happen\n        String defaultResult = SensitiveInfoUtil.getEncodeData(testString, SensitiveEnum.UNKNOWN);\n        assertEquals(testString, defaultResult, \"The default case should return the original data\");\n    }\n}"
    ]
}