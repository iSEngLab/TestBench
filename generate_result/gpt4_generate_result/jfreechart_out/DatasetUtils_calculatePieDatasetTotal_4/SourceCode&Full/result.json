{
    "project_name": "jfreechart",
    "file_name": "DatasetUtils.java",
    "relative_path": "jfreechart/src/main/java/org/jfree/data/general/DatasetUtils.java",
    "execute_path": "jfreechart",
    "package": "org.jfree.data.general",
    "docstring": "/**\n     * Calculates the total of all the values in a {@link PieDataset}.  If\n     * the dataset contains negative or {@code null} values, they are\n     * ignored.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The total.\n     */",
    "source_code": "\npublic static double calculatePieDatasetTotal(PieDataset dataset) {\n    Args.nullNotPermitted(dataset, \"dataset\");\n    List keys = dataset.getKeys();\n    double totalValue = 0;\n    Iterator iterator = keys.iterator();\n    while (iterator.hasNext()) {\n        Comparable current = (Comparable) iterator.next();\n        if (current != null) {\n            Number value = dataset.getValue(current);\n            double v = 0.0;\n            if (value != null) {\n                v = value.doubleValue();\n            }\n            if (v > 0) {\n                totalValue = totalValue + v;\n            }\n        }\n    }\n    return totalValue;\n}\n",
    "class_name": "DatasetUtils",
    "method_name": "calculatePieDatasetTotal",
    "arguments": [
        "PieDataset dataset"
    ],
    "generate_test": [
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.KeyedValues;\nimport org.jfree.data.DefaultKeyedValues;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"A\", 1.0);\n        data.addValue(\"B\", 2.0);\n        data.addValue(\"C\", 3.0);\n        data.addValue(\"D\", 4.0);\n        data.addValue(\"E\", null);\n        data.addValue(\"F\", -1.0);\n        data.addValue(\"G\", Double.NaN);\n\n        PieDataset dataset = new DefaultPieDataset(data);\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n        assertEquals(10.0, total, \"The total should be 10.0, ignoring null, negative, and NaN values.\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.KeyedValues;\nimport java.util.Arrays;\n\nclass MockPieDataset implements PieDataset {\n    private KeyedValues values;\n\n    public MockPieDataset(KeyedValues values) {\n        this.values = values;\n    }\n\n    @Override\n    public Comparable getKey(int index) {\n        return values.getKey(index);\n    }\n\n    @Override\n    public int getIndex(Comparable key) {\n        return values.getIndex(key);\n    }\n\n    @Override\n    public List getKeys() {\n        return values.getKeys();\n    }\n\n    @Override\n    public Number getValue(Comparable key) {\n        return values.getValue(key);\n    }\n\n    @Override\n    public int getItemCount() {\n        return values.getItemCount();\n    }\n\n    @Override\n    public Number getValue(int item) {\n        return values.getValue(item);\n    }\n    \n    // Other methods are not used for this test so they can throw \n    // UnsupportedOperationException\n    // ...\n}\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Create a mock KeyedValues dataset for testing\n        KeyedValues values = new KeyedValues() {\n            private Double[] data = new Double[] { 5.0, 3.0, -1.0, 7.0, null };\n            private String[] keys = {\"A\", \"B\", \"C\", \"D\", \"E\"};\n            \n            @Override\n            public Comparable getKey(int index) {\n                return keys[index];\n            }\n            \n            @Override\n            public int getIndex(Comparable key) {\n                return Arrays.asList(keys).indexOf(key);\n            }\n            \n            @Override\n            public List getKeys() {\n                return Arrays.asList(keys);\n            }\n            \n            @Override\n            public Number getValue(Comparable key) {\n                int index = getIndex(key);\n                return index >= 0 ? getValue(index) : null;\n            }\n            \n            @Override\n            public Number getValue(int item) {\n                return data[item];\n            }\n            \n            @Override\n            public int getItemCount() {\n                return data.length;\n            }\n        };\n        PieDataset dataset = new MockPieDataset(values);\n        \n        double expectedTotal = 15.0; // 5.0 + 3.0 + 7.0 (ignoring -1.0 and null)\n        double calculatedTotal = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(expectedTotal, calculatedTotal, 0.0000001, \n                \"The total pie dataset value should be calculated correctly.\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.general.DefaultPieDataset;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category 1\", 5.0);\n        dataset.setValue(\"Category 2\", 9.0);\n        dataset.setValue(\"Category 3\", null);\n        dataset.setValue(\"Category 4\", 3.0);\n\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(17.0, total, 0.0000001d, \"The total should be 17.0\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category 1\", 10.0);\n        dataset.setValue(\"Category 2\", 20.0);\n        dataset.setValue(\"Category 3\", 30.0);\n        dataset.setValue(\"Category 4\", 40.0);\n\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(100.0, total, 0.0000001,\n            \"The total of the pie dataset values should be 100.0.\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.jfree.data.KeyedValues;\nimport org.jfree.data.DefaultKeyedValues;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatasetUtilsTest {\n\n    static class MockPieDataset implements PieDataset {\n        DefaultKeyedValues data;\n\n        public MockPieDataset(DefaultKeyedValues data) {\n            this.data = data;\n        }\n\n        @Override\n        public Comparable getKey(int index) {\n            return this.data.getKey(index);\n        }\n\n        @Override\n        public int getItemCount() {\n            return this.data.getItemCount();\n        }\n\n        @Override\n        public Number getValue(Comparable key) {\n            return this.data.getValue(key);\n        }\n\n        @Override\n        public int getIndex(Comparable key) {\n            return this.data.getIndex(key);\n        }\n\n        @Override\n        public List getKeys() {\n            return this.data.getKeys();\n        }\n\n        @Override\n        public Number getValue(int item) {\n            return this.data.getValue(item);\n        }\n    }\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        DefaultKeyedValues dataValues = new DefaultKeyedValues();\n        dataValues.addValue(\"Category 1\", 5.0);\n        dataValues.addValue(\"Category 2\", 9.0);\n        dataValues.addValue(\"Category 3\", null); // Should be ignored in the total\n        dataValues.addValue(\"Category 4\", 3.0);\n        dataValues.addValue(\"Category 5\", -1.0); // Negative, should be ignored\n\n        MockPieDataset dataset = new MockPieDataset(dataValues);\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n        assertEquals(5.0 + 9.0 + 3.0, total, 1.0e-10, \n                     \"The total should ignore null and negative values\");\n    }\n} ",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.KeyedValues;\nimport java.util.Arrays;\nimport java.util.List;\n\nclass MockPieDataset implements PieDataset {\n    private List<Comparable> keys;\n    private List<Number> values;\n\n    public MockPieDataset(Comparable[] keys, Number[] values) {\n        this.keys = Arrays.asList(keys);\n        this.values = Arrays.asList(values);\n    }\n\n    @Override\n    public int getItemCount() {\n        return keys.size();\n    }\n\n    @Override\n    public Number getValue(int item) {\n        return values.get(item);\n    }\n\n    @Override\n    public Comparable getKey(int item) {\n        return keys.get(item);\n    }\n\n    @Override\n    public int getIndex(Comparable key) {\n        return keys.indexOf(key);\n    }\n\n    @Override\n    public List getKeys() {\n        return keys;\n    }\n\n    @Override\n    public Number getValue(Comparable key) {\n        int index = getIndex(key);\n        if (index < 0) {\n            return null;\n        }\n        return getValue(index);\n    }\n}\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        MockPieDataset dataset = new MockPieDataset(\n            new Comparable[] {\"Category 1\", \"Category 2\", \"Category 3\"},\n            new Number[] {10.0, 5.0, 15.0}\n        );\n\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(30.0, total, \"The total should be 30.0\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.*;\n\nclass DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category A\", 1.0);\n        dataset.setValue(\"Category B\", 3.0);\n        dataset.setValue(\"Category C\", 5.0);\n\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(9.0, total, \"The total of all the values in the PieDataset should be 9.0\");\n\n        // Test with a null value\n        dataset.setValue(\"Category D\", null);\n        total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(9.0, total, \"The total should ignore null values and remain 9.0\");\n\n        // Test with a negative value\n        dataset.setValue(\"Category E\", -1.0);\n        total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(9.0, total, \"The total should ignore negative values and remain 9.0\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.general.DefaultPieDataset;\nimport org.jfree.data.general.PieDataset;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category 1\", 5.0);\n        dataset.setValue(\"Category 2\", 4.0);\n        dataset.setValue(\"Category 3\", 3.0);\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(12.0, total, 0.0000001);\n    }\n\n    @Test\n    public void calculatePieDatasetTotalWithNullsTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category 1\", 5.0);\n        dataset.setValue(\"Category 2\", null);\n        dataset.setValue(\"Category 3\", 3.0);\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(8.0, total, 0.0000001);\n    }\n\n    @Test\n    public void calculatePieDatasetTotalWithNegativesTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category 1\", -5.0);\n        dataset.setValue(\"Category 2\", 4.0);\n        dataset.setValue(\"Category 3\", -3.0);\n        dataset.setValue(\"Category 4\", 2.0);\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(6.0, total, 0.0000001);\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.KeyedValues;\nimport org.jfree.data.DefaultKeyedValues;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Create a sample pie dataset\n        DefaultKeyedValues keyedValues = new DefaultKeyedValues();\n        keyedValues.addValue(\"Category 1\", 10.0);\n        keyedValues.addValue(\"Category 2\", 20.0);\n        keyedValues.addValue(\"Category 3\", 30.0);\n        keyedValues.addValue(\"Category 4\", null); // this value should be ignored\n        keyedValues.addValue(\"Category 5\", -5.0); // negative value should be ignored\n\n        // Create a pie dataset with the sample values\n        DefaultPieDataset pieDataset = new DefaultPieDataset(keyedValues);\n\n        // Call the method under test\n        double total = DatasetUtils.calculatePieDatasetTotal(pieDataset);\n\n        // Verify the result\n        assertEquals(60.0, total, \"The total should sum up positive values only.\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport org.jfree.data.KeyedValues;\nimport org.jfree.data.UnknownKeyException;\nimport org.mockito.Mockito;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Create a mock PieDataset\n        PieDataset mockDataset = Mockito.mock(PieDataset.class);\n\n        // Define the behavior of the getKeys() method\n        List<Comparable> keys = Arrays.asList(\"A\", \"B\", \"C\");\n        when(mockDataset.getKeys()).thenReturn(keys);\n\n        // Define the behavior of the getValue() method\n        when(mockDataset.getValue(\"A\")).thenReturn(1);\n        when(mockDataset.getValue(\"B\")).thenReturn(2);\n        when(mockDataset.getValue(\"C\")).thenReturn(3);\n\n        // Test the calculatePieDatasetTotal() method\n        double total = DatasetUtils.calculatePieDatasetTotal(mockDataset);\n\n        // Assert that the total is calculated correctly\n        assertEquals(6.0, total, 0.000001);\n    }\n\n    @Test\n    public void calculatePieDatasetTotalWithNullValue() {\n        // Create a mock PieDataset\n        PieDataset mockDataset = Mockito.mock(PieDataset.class);\n\n        // Define the behavior of the getKeys() method\n        List<Comparable> keys = Arrays.asList(\"A\", \"B\", \"C\");\n        when(mockDataset.getKeys()).thenReturn(keys);\n\n        // Define the behavior of the getValue() method\n        when(mockDataset.getValue(\"A\")).thenReturn(1);\n        when(mockDataset.getValue(\"B\")).thenReturn(null);\n        when(mockDataset.getValue(\"C\")).thenReturn(3);\n\n        // Test the calculatePieDatasetTotal() method\n        double total = DatasetUtils.calculatePieDatasetTotal(mockDataset);\n\n        // Assert that the total is calculated correctly\n        // the null value should be treated as zero\n        assertEquals(4.0, total, 0.000001);\n    }\n\n    @Test\n    public void calculatePieDatasetTotalWithNegativeValue() {\n        // Create a mock PieDataset\n        PieDataset mockDataset = Mockito.mock(PieDataset.class);\n\n        // Define the behavior of the getKeys() method\n        List<Comparable> keys = Arrays.asList(\"A\", \"B\", \"C\");\n        when(mockDataset.getKeys()).thenReturn(keys);\n\n        // Define the behavior of the getValue() method\n        when(mockDataset.getValue(\"A\")).thenReturn(1);\n        when(mockDataset.getValue(\"B\")).thenReturn(-2); // Negative values are ignored\n        when(mockDataset.getValue(\"C\")).thenReturn(3);\n\n        // Test the calculatePieDatasetTotal() method\n        double total = DatasetUtils.calculatePieDatasetTotal(mockDataset);\n\n        // Assert that the total is calculated correctly\n        // the negative value should be ignored\n        assertEquals(4.0, total, 0.000001);\n    }\n\n    @Test\n    public void calculatePieDatasetTotalWithEmptyDataset() {\n        // Create a mock PieDataset\n        PieDataset mockDataset = Mockito.mock(PieDataset.class);\n\n        // Define the behavior of the getKeys() method\n        when(mockDataset.getKeys()).thenReturn(Collections.emptyList());\n\n        // Test the calculatePieDatasetTotal() method\n        double total = DatasetUtils.calculatePieDatasetTotal(mockDataset);\n\n        // Assert that the total is 0.0 for an empty dataset\n        assertEquals(0.0, total, 0.000001);\n    }\n\n    @Test\n    public void calculatePieDatasetTotalWithNonExistentKey() {\n        // Create a mock PieDataset\n        PieDataset mockDataset = Mockito.mock(PieDataset.class);\n\n        // Define the behavior of the getKeys() and getValue() methods\n        List<Comparable> keys = Arrays.asList(\"A\", \"B\", \"C\", \"D\");\n        when(mockDataset.getKeys()).thenReturn(keys);\n        when(mockDataset.getValue(\"A\")).thenReturn(1);\n        when(mockDataset.getValue(\"B\")).thenReturn(2);\n        when(mockDataset.getValue(\"C\")).thenReturn(3);\n        when(mockDataset.getValue(\"D\")).thenThrow(new UnknownKeyException(\"Key not found\"));\n\n        // Test the calculatePieDatasetTotal() method\n        double total = DatasetUtils.calculatePieDatasetTotal(mockDataset);\n\n        // Assert that the total excludes the value for the non-existent key\n        assertEquals(6.0, total, 0.000001);\n    }\n}"
    ]
}