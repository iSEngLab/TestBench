{
    "project_name": "jfreechart",
    "file_name": "DatasetUtils.java",
    "relative_path": "jfreechart/src/main/java/org/jfree/data/general/DatasetUtils.java",
    "execute_path": "jfreechart",
    "package": "org.jfree.data.general",
    "docstring": "/**\n     * Calculates the total of all the values in a {@link PieDataset}.  If\n     * the dataset contains negative or {@code null} values, they are\n     * ignored.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The total.\n     */",
    "source_code": "\npublic static double calculatePieDatasetTotal(PieDataset dataset) {\n    Args.nullNotPermitted(dataset, \"dataset\");\n    List keys = dataset.getKeys();\n    double totalValue = 0;\n    Iterator iterator = keys.iterator();\n    while (iterator.hasNext()) {\n        Comparable current = (Comparable) iterator.next();\n        if (current != null) {\n            Number value = dataset.getValue(current);\n            double v = 0.0;\n            if (value != null) {\n                v = value.doubleValue();\n            }\n            if (v > 0) {\n                totalValue = totalValue + v;\n            }\n        }\n    }\n    return totalValue;\n}\n",
    "class_name": "DatasetUtils",
    "method_name": "calculatePieDatasetTotal",
    "arguments": [
        "PieDataset dataset"
    ],
    "generate_test": [
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Create a mock PieDataset\n        PieDataset mockDataset = new DefaultPieDataset();\n        ((DefaultPieDataset) mockDataset).setValue(\"Category 1\", 2.5);\n        ((DefaultPieDataset) mockDataset).setValue(\"Category 2\", 3.5);\n        ((DefaultPieDataset) mockDataset).setValue(\"Category 3\", 4.0);\n\n        // Test the calculatePieDatasetTotal method\n        double result = DatasetUtils.calculatePieDatasetTotal(mockDataset);\n\n        // Assert that the result is as expected\n        assertEquals(10.0, result, 0.0000001, \"The total of the dataset should equal 10.0\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.jfree.data.KeyedValues;\nimport org.jfree.data.general.DefaultKeyedValues;\nimport org.jfree.data.general.PieDataset;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatasetUtilsTest {\n    \n    private static class MockPieDataset implements PieDataset {\n        private KeyedValues values;\n\n        public MockPieDataset(KeyedValues values) {\n            this.values = values;\n        }\n\n        @Override\n        public int getItemCount() {\n            return values.getItemCount();\n        }\n\n        @Override\n        public Number getValue(int item) {\n            return values.getValue(item);\n        }\n\n        @Override\n        public Comparable getKey(int item) {\n            return values.getKey(item);\n        }\n\n        @Override\n        public int getIndex(Comparable key) {\n            return values.getIndex(key);\n        }\n\n        @Override\n        public List getKeys() {\n            return values.getKeys();\n        }\n\n        @Override\n        public Number getValue(Comparable key) {\n            return values.getValue(key);\n        }\n\n        @Override\n        public void addChangeListener(DatasetChangeListener listener) {\n        }\n\n        @Override\n        public void removeChangeListener(DatasetChangeListener listener) {\n        }\n\n        @Override\n        public DatasetGroup getGroup() {\n            return new DatasetGroup();\n        }\n\n        @Override\n        public void setGroup(DatasetGroup group) {\n        }\n    }\n    \n    @Test\n    public void calculatePieDatasetTotalTest() {\n        DefaultKeyedValues values = new DefaultKeyedValues();\n        values.addValue(\"A\", 1.0);\n        values.addValue(\"B\", 2.0);\n        values.addValue(\"C\", 3.0);\n        MockPieDataset dataset = new MockPieDataset(values);\n        \n        double result = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(6.0, result, \"The total of the pie dataset values should be 6.0\");\n    }\n    \n    @Test\n    public void calculatePieDatasetTotalWithNegativeValuesTest() {\n        DefaultKeyedValues values = new DefaultKeyedValues();\n        values.addValue(\"A\", -1.0);\n        values.addValue(\"B\", 2.0);\n        values.addValue(\"C\", -3.0);\n        MockPieDataset dataset = new MockPieDataset(values);\n        \n        double result = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(2.0, result, \"The total of the pie dataset values should only consider positive values, which is 2.0\");\n    }\n    \n    @Test\n    public void calculatePieDatasetTotalWithNullValuesTest() {\n        DefaultKeyedValues values = new DefaultKeyedValues();\n        values.addValue(\"A\", null);\n        values.addValue(\"B\", 2.0);\n        values.addValue(\"C\", null);\n        MockPieDataset dataset = new MockPieDataset(values);\n        \n        double result = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(2.0, result, \"The total of the pie dataset values should ignore nulls and result in 2.0\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.*;\nimport java.util.Arrays;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.when;\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Create a mock PieDataset\n        PieDataset mockDataset = Mockito.mock(PieDataset.class);\n        // Stubbing the getKeys method to return a list of keys\n        when(mockDataset.getKeys()).thenReturn(Arrays.asList(\"Category 1\", \"Category 2\", \"Category 3\"));\n        // Stubbing the getValue method to return values for the keys\n        when(mockDataset.getValue(\"Category 1\")).thenReturn(10);\n        when(mockDataset.getValue(\"Category 2\")).thenReturn(20);\n        when(mockDataset.getValue(\"Category 3\")).thenReturn(30);\n        \n        // Act: execute the method to test\n        double totalValue = DatasetUtils.calculatePieDatasetTotal(mockDataset);\n        \n        // Assert: verify that the result is as expected\n        assertEquals(60.0, totalValue, \"The total value of the PieDataset should be equal to the sum of the values of its elements.\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\nimport java.util.List;\nimport org.jfree.data.KeyedValues;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\npublic class DatasetUtilsTest {\n    private PieDataset dataset;\n\n    @BeforeEach\n    public void setUp() {\n        dataset = Mockito.mock(PieDataset.class);\n        List<Comparable> keys = Arrays.asList(\"A\", \"B\", \"C\");\n        Mockito.when(dataset.getKeys()).thenReturn(keys);\n        Mockito.when(dataset.getValue(\"A\")).thenReturn(1.0);\n        Mockito.when(dataset.getValue(\"B\")).thenReturn(2.0);\n        Mockito.when(dataset.getValue(\"C\")).thenReturn(3.0);\n    }\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(6.0, total, \"The total should be the sum of all the positive values in the dataset.\");\n    }\n\n    @Test\n    public void calculatePieDatasetTotalWithNullValuesTest() {\n        Mockito.when(dataset.getValue(\"C\")).thenReturn(null);\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(3.0, total, \"The total should only sum the non-null and positive values in the dataset.\");\n    }\n\n    @Test\n    public void calculatePieDatasetTotalWithNegativeValuesTest() {\n        Mockito.when(dataset.getValue(\"B\")).thenReturn(-2.0);\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(1.0, total, \"Negative values should be ignored when calculating the total.\");\n    }\n\n    @Test\n    public void calculatePieDatasetTotalWithNoValuesTest() {\n        Mockito.when(dataset.getKeys()).thenReturn(Arrays.asList());\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(0.0, total, \"An empty dataset should result in a total of 0.0.\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.jfree.data.general.DefaultPieDataset;\nimport org.jfree.data.general.PieDataset;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Create a dataset with known total\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category 1\", 5.0);\n        dataset.setValue(\"Category 2\", 3.0);\n        dataset.setValue(\"Category 3\", 8.0);\n        dataset.setValue(\"Category 4\", 6.0);\n\n        // Calculate the total using the method under test\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n        // Assert that the total is as expected\n        assertEquals(22.0, total, \"The total should be 22.0\");\n\n        // Add another value to test if the method handles new data\n        dataset.setValue(\"Category 5\", 4.0);\n\n        // Recalculate the total with the new data\n        double newTotal = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n        // Assert that the new total is as expected\n        assertEquals(26.0, newTotal, \"The total should be 26.0 with the additional category\");\n\n        // Test with a null value in the dataset\n        dataset.setValue(\"Category 6\", null);\n\n        // Recalculate the total with the null value\n        double totalWithNull = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n        // Assert that the total is unchanged by the null value\n        assertEquals(26.0, totalWithNull, \"The total should still be 26.0 when a category has a null value\");\n        \n        // Test with a negative value in the dataset (expecting it to be ignored)\n        dataset.setValue(\"Category 7\", -2.0);\n\n        // Recalculate the total with the negative value\n        double totalWithNegative = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n        // Assert that the total is unchanged by the negative value\n        assertEquals(26.0, totalWithNegative, \"The total should still be 26.0 when a category has a negative value\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.general.*;\n\nclass MockPieDataset implements PieDataset {\n    private double[] values;\n    private Comparable[] keys;\n    \n    MockPieDataset(double[] values, Comparable[] keys) {\n        this.values = values;\n        this.keys = keys;\n    }\n\n    public int getItemCount() {\n        return values.length;\n    }\n\n    public Number getValue(int item) {\n        return values[item];\n    }\n\n    public Comparable getKey(int item) {\n        return keys[item];\n    }\n\n    public int getIndex(Comparable key) {\n        for (int i = 0; i < keys.length; i++) {\n            if (keys[i].equals(key)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public List getKeys() {\n        return java.util.Arrays.asList(keys);\n    }\n\n    public Number getValue(Comparable key) {\n        int index = getIndex(key);\n        if (index < 0) {\n            throw new IllegalArgumentException(\"Key not found\");\n        }\n        return getValue(index);\n    }\n}\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        double[] values = new double[]{1.0, 2.0, 3.0};\n        Comparable[] keys = new Comparable[]{\"A\", \"B\", \"C\"};\n        MockPieDataset dataset = new MockPieDataset(values, keys);\n        double result = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(6.0, result, \"The total should be the sum of all the positive values in the dataset\");\n        \n        // Testing with negative and zero values\n        double[] valuesWithNegativeAndZero = new double[]{1.0, -2.0, 0.0};\n        MockPieDataset datasetWithNegativeAndZero = new MockPieDataset(valuesWithNegativeAndZero, keys);\n        double resultWithNegativeAndZero = DatasetUtils.calculatePieDatasetTotal(datasetWithNegativeAndZero);\n        assertEquals(1.0, resultWithNegativeAndZero, \"The total should only include the positive values in the dataset\");\n\n        // Testing with null values\n        double[] valuesWithNulls = new double[]{1.0, Double.NaN, 3.0};\n        MockPieDataset datasetWithNulls = new MockPieDataset(valuesWithNulls, keys);\n        double resultWithNulls = DatasetUtils.calculatePieDatasetTotal(datasetWithNulls);\n        assertEquals(4.0, resultWithNulls, \"The total should ignore the NaN values\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.Mockito;\nimport java.util.Arrays;\n\npublic class DatasetUtilsTest {\n    private PieDataset mockDataset;\n\n    @BeforeEach\n    public void setUp() {\n        mockDataset = Mockito.mock(PieDataset.class);\n    }\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Create keys and mock the dataset to return these keys\n        Comparable key1 = \"Category 1\";\n        Comparable key2 = \"Category 2\";\n        Comparable key3 = \"Category 3\";\n        java.util.List<Comparable> keys = Arrays.asList(key1, key2, key3);\n        Mockito.when(mockDataset.getKeys()).thenReturn(keys);\n        \n        // Mock the dataset to return some values associated with the keys\n        Mockito.when(mockDataset.getValue(key1)).thenReturn(5.0);\n        Mockito.when(mockDataset.getValue(key2)).thenReturn(10.0);\n        Mockito.when(mockDataset.getValue(key3)).thenReturn(15.0);\n        \n        // Call the method under test\n        double total = DatasetUtils.calculatePieDatasetTotal(mockDataset);\n        \n        // Verify result (5.0 + 10.0 + 15.0 = 30.0)\n        assertEquals(30.0, total, \"The total should be the sum of all dataset values.\");\n    }\n    \n    @Test\n    public void calculatePieDatasetTotalWithNullKeyTest() {\n        // Create keys including null and mock the dataset to return these keys\n        Comparable key1 = \"Category 1\";\n        Comparable key2 = null; // Null key\n        Comparable key3 = \"Category 3\";\n        java.util.List<Comparable> keys = Arrays.asList(key1, key2, key3);\n        Mockito.when(mockDataset.getKeys()).thenReturn(keys);\n        \n        // Mock the dataset to return some values associated with the keys\n        Mockito.when(mockDataset.getValue(key1)).thenReturn(5.0);\n        // No value mocked for key2 as it is null\n        Mockito.when(mockDataset.getValue(key3)).thenReturn(15.0);\n        \n        // Call the method under test\n        double total = DatasetUtils.calculatePieDatasetTotal(mockDataset);\n        \n        // Verify result should ignore the null key\n        assertEquals(20.0, total, \"The total should be the sum of non-null dataset values.\");\n    }\n\n    @Test\n    public void calculatePieDatasetTotalWithNullValueTest() {\n        // Create keys and mock the dataset to return these keys\n        Comparable key1 = \"Category 1\";\n        Comparable key2 = \"Category 2\";\n        Comparable key3 = \"Category 3\";\n        java.util.List<Comparable> keys = Arrays.asList(key1, key2, key3);\n        Mockito.when(mockDataset.getKeys()).thenReturn(keys);\n        \n        // Mock the dataset to return some values associated with the keys, including a null value\n        Mockito.when(mockDataset.getValue(key1)).thenReturn(5.0);\n        Mockito.when(mockDataset.getValue(key2)).thenReturn(null); // Null value\n        Mockito.when(mockDataset.getValue(key3)).thenReturn(15.0);\n        \n        // Call the method under test\n        double total = DatasetUtils.calculatePieDatasetTotal(mockDataset);\n        \n        // Verify result should ignore the null value\n        assertEquals(20.0, total, \"The total should be the sum of non-null dataset values.\");\n    }\n    \n    @Test\n    public void calculatePieDatasetTotalWithNegativeValuesTest() {\n        // Create keys and mock the dataset to return these keys\n        Comparable key1 = \"Category 1\";\n        Comparable key2 = \"Category 2\";\n        Comparable key3 = \"Category 3\";\n        java.util.List<Comparable> keys = Arrays.asList(key1, key2, key3);\n        Mockito.when(mockDataset.getKeys()).thenReturn(keys);\n        \n        // Mock the dataset to return some values associated with the keys, including negative values\n        Mockito.when(mockDataset.getValue(key1)).thenReturn(5.0);\n        Mockito.when(mockDataset.getValue(key2)).thenReturn(-10.0); // Negative value\n        Mockito.when(mockDataset.getValue(key3)).thenReturn(15.0);\n        \n        // Call the method under test\n        double total = DatasetUtils.calculatePieDatasetTotal(mockDataset);\n        \n        // Verify result should ignore negative values\n        assertEquals(20.0, total, \"The total should be the sum of positive dataset values.\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass MockPieDataset implements PieDataset {\n    private List<Comparable> keys;\n    private List<Number> values;\n    \n    public MockPieDataset() {\n        keys = new ArrayList<>();\n        values = new ArrayList<>();\n    }\n    \n    public void addValue(Comparable key, Number value) {\n        keys.add(key);\n        values.add(value);\n    }\n    \n    @Override\n    public Number getValue(Comparable key) {\n        int index = keys.indexOf(key);\n        if (index < 0) {\n            return null;\n        }\n        return values.get(index);\n    }\n    \n    @Override\n    public List getKeys() {\n        return new ArrayList<>(keys);\n    }\n    \n    // Methods not used in the test case are omitted for brevity\n}\n\npublic class DatasetUtilsTest {\n    \n    private static final double DELTA = 1e-15;\n    \n    @Test\n    public void calculatePieDatasetTotalTest() {\n        MockPieDataset dataset = new MockPieDataset();\n        dataset.addValue(\"Category 1\", 5.0);\n        dataset.addValue(\"Category 2\", 3.0);\n        dataset.addValue(\"Category 3\", 2.0);\n        \n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        \n        assertEquals(10.0, total, DELTA, \"The total should sum up all the positive values in the PieDataset.\");\n    }\n\n    @Test\n    public void calculatePieDatasetTotalWithNullValuesTest() {\n        MockPieDataset dataset = new MockPieDataset();\n        dataset.addValue(\"Category 1\", 5.0);\n        dataset.addValue(\"Category 2\", null);\n        dataset.addValue(\"Category 3\", 2.0);\n        \n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        \n        assertEquals(7.0, total, DELTA, \"The total should sum up all the non-null positive values in the PieDataset.\");\n    }\n\n    @Test\n    public void calculatePieDatasetTotalWithNegativeValuesTest() {\n        MockPieDataset dataset = new MockPieDataset();\n        dataset.addValue(\"Category 1\", -5.0);\n        dataset.addValue(\"Category 2\", 3.0);\n        dataset.addValue(\"Category 3\", -2.0);\n        \n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        \n        assertEquals(3.0, total, DELTA, \"The total should sum up all the positive values and ignore negatives in the PieDataset.\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Arrays;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class DatasetUtilsTest {\n    \n    @Mock\n    private PieDataset mockDataset;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Given\n        Comparable key1 = \"Category 1\";\n        Comparable key2 = \"Category 2\";\n        Comparable key3 = \"Category 3\";\n        when(mockDataset.getKeys()).thenReturn(Arrays.asList(key1, key2, key3));\n        when(mockDataset.getValue(key1)).thenReturn(10.0);\n        when(mockDataset.getValue(key2)).thenReturn(20.0);\n        when(mockDataset.getValue(key3)).thenReturn(30.0);\n\n        // When\n        double result = DatasetUtils.calculatePieDatasetTotal(mockDataset);\n\n        // Then\n        assertEquals(60.0, result, \"The calculated total value should be the sum of all values in the dataset.\");\n    }\n    \n    @Test\n    public void calculatePieDatasetTotalWithNullValuesTest() {\n        // Given\n        Comparable key1 = \"Category 1\";\n        Comparable key2 = \"Category 2\";\n        Comparable key3 = \"Category 3\";\n        when(mockDataset.getKeys()).thenReturn(Arrays.asList(key1, key2, key3));\n        when(mockDataset.getValue(key1)).thenReturn(null); // null value should be treated as 0\n        when(mockDataset.getValue(key2)).thenReturn(20.0);\n        when(mockDataset.getValue(key3)).thenReturn(null); // null value should be treated as 0\n\n        // When\n        double result = DatasetUtils.calculatePieDatasetTotal(mockDataset);\n\n        // Then\n        assertEquals(20.0, result, \"The calculated total value should only include non-null values.\");\n    }\n    \n    @Test\n    public void calculatePieDatasetTotalWithNegativeValuesTest() {\n        // Given\n        Comparable key1 = \"Category 1\";\n        Comparable key2 = \"Category 2\";\n        Comparable key3 = \"Category 3\";\n        when(mockDataset.getKeys()).thenReturn(Arrays.asList(key1, key2, key3));\n        when(mockDataset.getValue(key1)).thenReturn(10.0);\n        when(mockDataset.getValue(key2)).thenReturn(-20.0); // negative values should be ignored\n        when(mockDataset.getValue(key3)).thenReturn(30.0);\n\n        // When\n        double result = DatasetUtils.calculatePieDatasetTotal(mockDataset);\n\n        // Then\n        assertEquals(40.0, result, \"The calculated total value should ignore negative values.\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.KeyedValues;\nimport org.jfree.data.general.DefaultPieDataset;\nimport org.jfree.data.general.PieDataset;\nimport java.util.Arrays;\nimport java.util.List;\n\nclass MockPieDataset extends DefaultPieDataset {\n    public MockPieDataset() {\n        setValue(\"Category 1\", 2.0);\n        setValue(\"Category 2\", 3.0);\n        setValue(\"Category 3\", null);\n        setValue(\"Category 4\", -1.0);\n        setValue(\"Category 5\", 5.0);\n    }\n}\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        PieDataset dataset = new MockPieDataset();\n        double result = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(10.0, result, \"The total of the positive values should be 10\");\n    }\n\n    @Test\n    public void calculatePieDatasetTotalWithNullDatasetTest() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            DatasetUtils.calculatePieDatasetTotal(null);\n        });\n        assertTrue(exception.getMessage().contains(\"Null 'dataset' argument.\"));\n    }\n\n    @Test\n    public void calculatePieDatasetTotalWithEmptyDatasetTest() {\n        PieDataset emptyDataset = new DefaultPieDataset();\n        double result = DatasetUtils.calculatePieDatasetTotal(emptyDataset);\n        assertEquals(0.0, result, \"The total of an empty dataset should be 0\");\n    }\n}"
    ]
}