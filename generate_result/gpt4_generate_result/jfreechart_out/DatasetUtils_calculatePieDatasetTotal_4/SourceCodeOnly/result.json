{
    "project_name": "jfreechart",
    "file_name": "DatasetUtils.java",
    "relative_path": "jfreechart/src/main/java/org/jfree/data/general/DatasetUtils.java",
    "execute_path": "jfreechart",
    "package": "org.jfree.data.general",
    "docstring": "/**\n     * Calculates the total of all the values in a {@link PieDataset}.  If\n     * the dataset contains negative or {@code null} values, they are\n     * ignored.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The total.\n     */",
    "source_code": "\npublic static double calculatePieDatasetTotal(PieDataset dataset) {\n    Args.nullNotPermitted(dataset, \"dataset\");\n    List keys = dataset.getKeys();\n    double totalValue = 0;\n    Iterator iterator = keys.iterator();\n    while (iterator.hasNext()) {\n        Comparable current = (Comparable) iterator.next();\n        if (current != null) {\n            Number value = dataset.getValue(current);\n            double v = 0.0;\n            if (value != null) {\n                v = value.doubleValue();\n            }\n            if (v > 0) {\n                totalValue = totalValue + v;\n            }\n        }\n    }\n    return totalValue;\n}\n",
    "class_name": "DatasetUtils",
    "method_name": "calculatePieDatasetTotal",
    "arguments": [
        "PieDataset dataset"
    ],
    "generate_test": [
        "package org.jfree.data.general;\n\nimport org.jfree.data.general.PieDataset;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.DefaultPieDataset;\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Create a dataset\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category 1\", 10.0);\n        dataset.setValue(\"Category 2\", 20.0);\n        dataset.setValue(\"Category 3\", 30.0);\n\n        // Calculate the expected total\n        double expectedTotal = 10.0 + 20.0 + 30.0;\n\n        // Call the method under test\n        double actualTotal = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n        // Assert that the calculated total is as expected\n        assertEquals(expectedTotal, actualTotal, \"The total calculated from pie dataset should match expected total.\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport static org.mockito.Mockito.*;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.*;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Arrange\n        PieDataset mockDataset = mock(PieDataset.class);\n        List<Comparable> keys = Arrays.asList(\"Category1\", \"Category2\", \"Category3\");\n        when(mockDataset.getKeys()).thenReturn(keys);\n        \n        // Use these values for the mocked return values of getValue\n        when(mockDataset.getValue(\"Category1\")).thenReturn(10.0);\n        when(mockDataset.getValue(\"Category2\")).thenReturn(20.0);\n        when(mockDataset.getValue(\"Category3\")).thenReturn(30.0);\n        \n        // Act\n        double total = DatasetUtils.calculatePieDatasetTotal(mockDataset);\n        \n        // Assert\n        double expectedTotal = 60.0; // Sum of the values above\n        assertEquals(expectedTotal, total, \"The calculated total should match the sum of all values.\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.DefaultPieDataset;\nimport org.jfree.data.PieDataset;\nimport java.util.List;\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Create a dataset for the test\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category 1\", 20.0);\n        dataset.setValue(\"Category 2\", 30.0);\n        dataset.setValue(\"Category 3\", 50.0);\n\n        // Calculate the total using the method under test\n        double total = DatasetUtilities.calculatePieDatasetTotal(dataset);\n\n        // Check the result (total should be 100.0)\n        assertEquals(100.0, total, 0.000001, \"The total value of the pie dataset should be 100.0\");\n\n        // Test with a null value to ensure Args.nullNotPermitted throws an appropriate exception\n        assertThrows(IllegalArgumentException.class, () -> {\n            DatasetUtilities.calculatePieDatasetTotal(null);\n        }, \"Passing null dataset should throw an IllegalArgumentException.\");\n\n        // Test with a dataset containing a null key; such keys should be ignored in the total calculation\n        dataset.setValue(null, 10.0);\n        total = DatasetUtilities.calculatePieDatasetTotal(dataset);\n        assertEquals(100.0, total, 0.000001, \"The total value of the pie dataset with a null key should still be 100.0\");\n\n        // Test with a dataset containing a negative value; such values should be ignored in the total calculation\n        dataset.setValue(\"Category Negative\", -20.0);\n        total = DatasetUtilities.calculatePieDatasetTotal(dataset);\n        assertEquals(100.0, total, 0.000001, \"The total value of the pie dataset with a negative value should still be 100.0\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Create a mock PieDataset\n        PieDataset mockDataset = Mockito.mock(PieDataset.class);\n        List<Comparable> keys = new ArrayList<>();\n        Comparable key1 = \"Category 1\";\n        Comparable key2 = \"Category 2\";\n        Comparable key3 = \"Category 3\";\n\n        // Adding some keys\n        keys.add(key1);\n        keys.add(key2);\n        keys.add(key3);\n        \n        // When getKeys is called, return the keys list\n        Mockito.when(mockDataset.getKeys()).thenReturn(keys);\n        \n        // Assigning values to keys\n        Mockito.when(mockDataset.getValue(key1)).thenReturn(10.0);\n        Mockito.when(mockDataset.getValue(key2)).thenReturn(20.0);\n        Mockito.when(mockDataset.getValue(key3)).thenReturn(30.0);\n        \n        // Call the method under test\n        double result = DatasetUtils.calculatePieDatasetTotal(mockDataset);\n        \n        // Verify the result\n        assertEquals(60.0, result, \"The total of the pie dataset values should be 60.0\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.mockito.Mockito.*;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Mock the PieDataset using Mockito\n        PieDataset dataset = mock(PieDataset.class);\n        \n        // Define the behavior of the getKeys method\n        List<Comparable> keys = Arrays.asList(\"Category 1\", \"Category 2\", \"Category 3\");\n        when(dataset.getKeys()).thenReturn(keys);\n        \n        // Define the behavior for the getValue method for different keys\n        when(dataset.getValue(\"Category 1\")).thenReturn(10.0);\n        when(dataset.getValue(\"Category 2\")).thenReturn(20.0);\n        when(dataset.getValue(\"Category 3\")).thenReturn(30.0);\n        \n        // Call the method under test\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        \n        // Verify that the total is correctly calculated\n        assertEquals(60.0, total, 0.0000001, \"The total should be the sum of all positive dataset values.\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.general.PieDataset;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\n\n// Mock implementation for PieDataset as it is not provided in the snippet\nclass MockPieDataset implements PieDataset {\n    @Override\n    public Comparable getKey(int index) {\n        return null;\n    }\n\n    @Override\n    public int getItemCount() {\n        return 0;\n    }\n\n    @Override\n    public List getKeys() {\n        return Arrays.asList(\"Key1\", \"Key2\", \"Key3\");\n    }\n\n    @Override\n    public Number getValue(Comparable key) {\n        if (\"Key1\".equals(key)) return 10;\n        if (\"Key2\".equals(key)) return 20;\n        if (\"Key3\".equals(key)) return 30;\n        return null;\n    }\n\n    @Override\n    public int getIndex(Comparable key) {\n        return 0;\n    }\n\n    // Other methods would go here...\n\n    @Override\n    public void addChangeListener(DatasetChangeListener listener) {\n        // Not implemented for the mock\n    }\n\n    @Override\n    public void removeChangeListener(DatasetChangeListener listener) {\n        // Not implemented for the mock\n    }\n\n    @Override\n    public DatasetGroup getGroup() {\n        return null;\n    }\n\n    @Override\n    public void setGroup(DatasetGroup group) {\n        // Not implemented for the mock\n    }\n}\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        PieDataset dataset = new MockPieDataset();\n\n        double result = DatasetUtils.calculatePieDatasetTotal(dataset);\n        // Check if the sum of the dataset entries is equal to 10+20+30 = 60.\n        assertEquals(60.0, result, \"The calculated total of the PieDataset should be 60\");\n        \n        // Add more tests if necessary, for example:\n        // - Testing with a dataset containing null values\n        // - Testing with a dataset containing negative values\n        // - Testing with an empty dataset\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Create a mock dataset\n        PieDataset dataset = new DefaultPieDataset();\n        ((DefaultPieDataset) dataset).setValue(\"Category 1\", 10.0);\n        ((DefaultPieDataset) dataset).setValue(\"Category 2\", 20.0);\n        ((DefaultPieDataset) dataset).setValue(\"Category 3\", 30.0);\n        \n        // Perform the calculation\n        double total = DatasetUtilities.calculatePieDatasetTotal(dataset);\n        \n        // Assert the total is as expected\n        assertEquals(60.0, total, \"The total of the pie dataset should be 60.0.\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.general.DefaultPieDataset;\nimport org.jfree.data.general.PieDataset;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"CategoryA\", 10.0);\n        dataset.setValue(\"CategoryB\", 20.0);\n        dataset.setValue(\"CategoryC\", 30.0);\n        dataset.setValue(\"CategoryD\", 40.0); // Assume this is the correct way to add values in this example dataset\n\n        double expectedTotal = 10 + 20 + 30 + 40; // Total should be the sum of all the numbers\n        double actualTotal = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n        assertEquals(expectedTotal, actualTotal, \"The calculated total of the pie dataset should be correct.\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport org.jfree.data.DefaultPieDataset;\nimport org.jfree.data.general.DatasetUtils;\n\npublic class DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Create a pie dataset\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        \n        // Add some values\n        dataset.setValue(\"Category 1\", 5.0);\n        dataset.setValue(\"Category 2\", 3.0);\n        dataset.setValue(\"Category 3\", 8.0);\n\n        // Calculate the total value of dataset\n        assertEquals(16.0, DatasetUtils.calculatePieDatasetTotal(dataset), \"The total should be 16.0\");\n\n        // Test with negative values\n        dataset.setValue(\"Category 4\", -2.0);\n        assertEquals(16.0, DatasetUtils.calculatePieDatasetTotal(dataset), \"Negative values should be ignored, total should remain 16.0\");\n\n        // Test with null values\n        dataset.setValue(\"Category 5\", null);\n        assertEquals(16.0, DatasetUtils.calculatePieDatasetTotal(dataset), \"Null values should be ignored, total should remain 16.0\");\n\n        // Test with dataset that contains negative and zero values only\n        DefaultPieDataset datasetNegativeAndZero = new DefaultPieDataset();\n        datasetNegativeAndZero.setValue(\"Category 1\", -5.0);\n        datasetNegativeAndZero.setValue(\"Category 2\", 0.0);\n        assertEquals(0.0, DatasetUtils.calculatePieDatasetTotal(datasetNegativeAndZero), \"Total of only negative and zero values should be 0.0\");\n\n        // Test with all zero values\n        DefaultPieDataset datasetAllZero = new DefaultPieDataset();\n        datasetAllZero.setValue(\"Category 1\", 0.0);\n        assertEquals(0.0, DatasetUtils.calculatePieDatasetTotal(datasetAllZero), \"Total of all zero values should be 0.0\");\n\n        // Test with empty dataset\n        DefaultPieDataset emptyDataset = new DefaultPieDataset();\n        assertEquals(0.0, DatasetUtils.calculatePieDatasetTotal(emptyDataset), \"Total of empty dataset should be 0.0\");\n\n        // Test with null dataset, should throw IllegalArgumentException\n        assertThrows(IllegalArgumentException.class, () -> {\n            DatasetUtils.calculatePieDatasetTotal(null);\n        }, \"Method should throw IllegalArgumentException if dataset argument is null\");\n    }\n}",
        "package org.jfree.data.general;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport org.jfree.data.general.DefaultPieDataset;\n\nclass DatasetUtilsTest {\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category 1\", 5.0);\n        dataset.setValue(\"Category 2\", 3.0);\n        dataset.setValue(\"Category 3\", 8.0);\n\n        double expectedTotal = 16.0; // 5.0 + 3.0 + 8.0 = 16.0\n        double actualTotal = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n        assertEquals(expectedTotal, actualTotal, \"The calculated total should be the sum of all the positive values in the PieDataset.\");\n    }\n}"
    ]
}