{
    "project_name": "jfreechart",
    "file_name": "JSONUtils.java",
    "relative_path": "jfreechart/src/main/java/org/jfree/data/json/JSONUtils.java",
    "execute_path": "jfreechart",
    "package": "org.jfree.data.json",
    "docstring": "/**\n     * Returns a string containing the data in JSON format.  The format is\n     * an array of arrays, where each sub-array represents one data value.\n     * The sub-array should contain two items, first the item key as a string\n     * and second the item value as a number.  For example:\n     * {@code [[\"Key A\", 1.0], [\"Key B\", 2.0]]}\n     * <br><br>\n     * Note that this method can be used with instances of {@link PieDataset}.\n     * \n     * @param data  the data ({@code null} not permitted).\n     * \n     * @return A string in JSON format. \n     */",
    "source_code": "\npublic static String writeKeyedValues(KeyedValues data) {\n    Args.nullNotPermitted(data, \"data\");\n    StringWriter sw = new StringWriter();\n    try {\n        writeKeyedValues(data, sw);\n    } catch (IOException ex) {\n        throw new RuntimeException(ex);\n    }\n    return sw.toString();\n}\n",
    "class_name": "JSONUtils",
    "method_name": "writeKeyedValues",
    "arguments": [
        "KeyedValues data"
    ],
    "generate_test": [
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.IOException;\nimport java.util.Arrays;\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues mockKeyedValues = new KeyedValues() {\n            @Override\n            public Number getValue(Comparable key) {\n                switch (key.toString()) {\n                    case \"Key1\":\n                        return 10;\n                    case \"Key2\":\n                        return 20;\n                    default:\n                        return null;\n                }\n            }\n\n            @Override\n            public Comparable getKey(int index) {\n                if (index == 0) {\n                    return \"Key1\";\n                } else if (index == 1) {\n                    return \"Key2\";\n                } else {\n                    throw new IndexOutOfBoundsException(\"Invalid index\");\n                }\n            }\n\n            @Override\n            public int getIndex(Comparable key) {\n                switch (key.toString()) {\n                    case \"Key1\":\n                        return 0;\n                    case \"Key2\":\n                        return 1;\n                    default:\n                        return -1;\n                }\n            }\n\n            @Override\n            public List getKeys() {\n                return Arrays.asList(\"Key1\", \"Key2\");\n            }\n\n            @Override\n            public Number getValue(int index) {\n                if (index == 0) {\n                    return 10;\n                } else if (index == 1) {\n                    return 20;\n                } else {\n                    throw new IndexOutOfBoundsException(\"Invalid index\");\n                }\n            }\n\n            @Override\n            public int getItemCount() {\n                return 2;\n            }\n        };\n\n        // The expected JSON result\n        String expectedJSON = \"[[\\\"Key1\\\", 10], [\\\"Key2\\\", 20]]\";\n\n        // Generate the JSON from the KeyedValues\n        String json = JSONUtils.writeKeyedValues(mockKeyedValues);\n        \n        // Assert that the generated JSON matches the expected result\n        assertEquals(expectedJSON, json, \"The generated JSON does not match the expected JSON.\");\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.jfree.data.DefaultKeyedValues;\nimport org.jfree.chart.util.Args;\n\nimport java.io.StringWriter;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest() {\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"Key A\", 1.0);\n        data.addValue(\"Key B\", 2.0);\n        \n        String expectedJson = \"[[\\\"Key A\\\", 1.0], [\\\"Key B\\\", 2.0]]\";\n        \n        StringWriter sw = new StringWriter();\n        try {\n            JSONUtils.writeKeyedValues(data, sw);\n        } catch (Exception e) {\n            fail(\"Exception should not be thrown: \" + e.getMessage());\n        }\n\n        assertEquals(expectedJson, sw.toString());\n        \n        Args.nullNotPermitted(null, \"data\"); // Intended to throw IllegalArgumentException for null data\n        Exception thrownException = assertThrows(IllegalArgumentException.class, () -> {\n            JSONUtils.writeKeyedValues(null);\n        });\n        assertTrue(thrownException.getMessage().contains(\"Null 'data' argument.\"));\n    }\n}",
        "package org.jfree.data.json;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport org.jfree.chart.util.Args;\nimport org.jfree.data.DefaultKeyedValues;\nimport org.junit.jupiter.api.Test;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // create an instance of KeyedValues with sample data\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"Key A\", 1.0);\n        data.addValue(\"Key B\", 2.0);\n        data.addValue(\"Key C\", 3.0);\n\n        // expected JSON string\n        String expected = \"[[\\\"Key A\\\", 1.0], [\\\"Key B\\\", 2.0], [\\\"Key C\\\", 3.0]]\";\n\n        // perform test\n        String jsonOutput = JSONUtils.writeKeyedValues(data);\n\n        // verify the jsonOutput matches the expected string\n        assertEquals(expected, jsonOutput);\n    }\n\n    @Test\n    public void writeKeyedValuesWithNullDataTest() {\n        // verify that passing null data throws IllegalArgumentException\n        assertThrows(IllegalArgumentException.class, () -> {\n            JSONUtils.writeKeyedValues(null);\n        });\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.jfree.data.KeyedValues;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.Mockito;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a mocked KeyedValues\n        KeyedValues data = Mockito.mock(KeyedValues.class);\n        \n        // Define the keys and values\n        List<Comparable> keys = Arrays.asList(\"Key A\", \"Key B\");\n        Number[] values = {1.0, 2.0};\n        \n        // Stub the mock to return the keys and corresponding values\n        Mockito.when(data.getKeys()).thenReturn(keys);\n        Mockito.when(data.getValue(\"Key A\")).thenReturn(values[0]);\n        Mockito.when(data.getValue(\"Key B\")).thenReturn(values[1]);\n        \n        // Call the method under test\n        String json = JSONUtils.writeKeyedValues(data);\n\n        // Expected JSON result\n        String expectedJson = \"[[\\\"Key A\\\", 1.0], [\\\"Key B\\\", 2.0]]\";\n\n        // Assert that the result is as expected\n        assertEquals(expectedJson, json, \"The JSON output was not as expected.\");\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.jfree.data.DefaultKeyedValues;\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create an instance of KeyedValues with some test data\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"Key A\", 1.0);\n        data.addValue(\"Key B\", 2.0);\n        data.addValue(\"Key C\", 3.0);\n\n        // The expected JSON output for the test data\n        String expected = \"[[\\\"Key A\\\", 1.0], [\\\"Key B\\\", 2.0], [\\\"Key C\\\", 3.0]]\";\n\n        // Invoke the method under test\n        String jsonOutput = JSONUtils.writeKeyedValues(data);\n\n        // Assert that the JSON output is as expected\n        assertEquals(expected, jsonOutput, \"The JSON output should match the expected string.\");\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.jfree.data.DefaultKeyedValues;\nimport org.mockito.Mockito;\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a mock KeyedValues object\n        KeyedValues data = Mockito.mock(KeyedValues.class);\n        Mockito.when(data.getKeys()).thenReturn(java.util.Arrays.asList(\"Key1\", \"Key2\"));\n        Mockito.when(data.getValue(\"Key1\")).thenReturn(5);\n        Mockito.when(data.getValue(\"Key2\")).thenReturn(10);\n\n        // Call the method under test\n        String jsonOutput = JSONUtils.writeKeyedValues(data);\n\n        // Define the expected JSON output\n        String expectedJson = \"[[\\\"Key1\\\", 5], [\\\"Key2\\\", 10]]\";\n\n        // Assert that the output from the method matches the expected JSON output\n        assertEquals(expectedJson, jsonOutput);\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.StringWriter;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class JSONUtilsTest {\n\n    // We create a mock implementation of KeyedValues for testing purposes\n    private static class MockKeyedValues implements KeyedValues {\n        private final List<Comparable> keys = Arrays.asList(\"Key1\", \"Key2\");\n        private final List<Number> values = Arrays.asList(5, 10);\n\n        @Override\n        public Number getValue(Comparable key) {\n            int index = keys.indexOf(key);\n            return values.get(index);\n        }\n\n        @Override\n        public Comparable getKey(int index) {\n            return keys.get(index);\n        }\n\n        @Override\n        public int getIndex(Comparable key) {\n            return keys.indexOf(key);\n        }\n\n        @Override\n        public List getKeys() {\n            return keys;\n        }\n\n        @Override\n        public Number getValue(int index) {\n            return values.get(index);\n        }\n\n        @Override\n        public int getItemCount() {\n            return keys.size();\n        }\n    }\n\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues data = new MockKeyedValues();\n\n        String jsonResult = JSONUtils.writeKeyedValues(data);\n\n        String expectedJson = \"[[\\\"Key1\\\", 5], [\\\"Key2\\\", 10]]\";\n        assertEquals(expectedJson, jsonResult, \"The JSON output does not match the expected string.\");\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport org.jfree.data.DefaultKeyedValues;\nimport java.util.Arrays;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // Test with a non-empty KeyedValues instance\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"Key 1\", 100);\n        data.addValue(\"Key 2\", 200);\n        String jsonResult = JSONUtils.writeKeyedValues(data);\n        assertEquals(\"[[\\\"Key 1\\\",100],[\\\"Key 2\\\",200]]\", jsonResult);\n\n        // Test with an empty KeyedValues instance\n        data = new DefaultKeyedValues();\n        jsonResult = JSONUtils.writeKeyedValues(data);\n        assertEquals(\"[]\", jsonResult);\n\n        // Test with a null KeyedValues instance\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            JSONUtils.writeKeyedValues(null);\n        });\n        assertEquals(\"The 'data' argument must not be null.\", exception.getMessage());\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.DefaultKeyedValues;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a KeyedValues instance with sample data\n        DefaultKeyedValues keyedValues = new DefaultKeyedValues();\n        keyedValues.addValue(\"Key A\", 1.0);\n        keyedValues.addValue(\"Key B\", 2.0);\n        keyedValues.addValue(\"Key C\", null); // Including a null value to test proper handling\n\n        String jsonResult = JSONUtils.writeKeyedValues(keyedValues);\n\n        // Expected JSON output\n        String expectedJson = \"[[\\\"Key A\\\", 1.0], [\\\"Key B\\\", 2.0], [\\\"Key C\\\", null]]\";\n\n        // Assert that the JSON output from writeKeyedValues() matches the expected JSON String\n        assertEquals(expectedJson, jsonResult);\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.when;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues dataMock = Mockito.mock(KeyedValues.class);\n        List<Comparable<?>> keyList = new ArrayList<>();\n        keyList.add(\"Key1\");\n        keyList.add(\"Key2\");\n\n        when(dataMock.getKeys()).thenReturn(keyList);\n        when(dataMock.getValue(\"Key1\")).thenReturn(10.5);\n        when(dataMock.getValue(\"Key2\")).thenReturn(23.7);\n\n        String jsonResult = JSONUtils.writeKeyedValues(dataMock);\n        String expectedJson = \"[[\\\"Key1\\\", 10.5], [\\\"Key2\\\", 23.7]]\";\n        \n        assertNotNull(jsonResult, \"The result should not be null.\");\n        assertEquals(expectedJson, jsonResult, \"The JSON output is not as expected.\");\n    }\n}"
    ]
}