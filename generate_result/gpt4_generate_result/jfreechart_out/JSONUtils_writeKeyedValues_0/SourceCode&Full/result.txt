Source code: 


public static String writeKeyedValues(KeyedValues data) {
    Args.nullNotPermitted(data, "data");
    StringWriter sw = new StringWriter();
    try {
        writeKeyedValues(data, sw);
    } catch (IOException ex) {
        throw new RuntimeException(ex);
    }
    return sw.toString();
}



No.1 generated result --------------------------

package org.jfree.data.json;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.io.IOException;
import java.util.Arrays;

public class JSONUtilsTest {

    @Test
    public void writeKeyedValuesTest() {
        KeyedValues mockKeyedValues = new KeyedValues() {
            @Override
            public Number getValue(Comparable key) {
                switch (key.toString()) {
                    case "Key1":
                        return 10;
                    case "Key2":
                        return 20;
                    default:
                        return null;
                }
            }

            @Override
            public Comparable getKey(int index) {
                if (index == 0) {
                    return "Key1";
                } else if (index == 1) {
                    return "Key2";
                } else {
                    throw new IndexOutOfBoundsException("Invalid index");
                }
            }

            @Override
            public int getIndex(Comparable key) {
                switch (key.toString()) {
                    case "Key1":
                        return 0;
                    case "Key2":
                        return 1;
                    default:
                        return -1;
                }
            }

            @Override
            public List getKeys() {
                return Arrays.asList("Key1", "Key2");
            }

            @Override
            public Number getValue(int index) {
                if (index == 0) {
                    return 10;
                } else if (index == 1) {
                    return 20;
                } else {
                    throw new IndexOutOfBoundsException("Invalid index");
                }
            }

            @Override
            public int getItemCount() {
                return 2;
            }
        };

        // The expected JSON result
        String expectedJSON = "[[\"Key1\", 10], [\"Key2\", 20]]";

        // Generate the JSON from the KeyedValues
        String json = JSONUtils.writeKeyedValues(mockKeyedValues);
        
        // Assert that the generated JSON matches the expected result
        assertEquals(expectedJSON, json, "The generated JSON does not match the expected JSON.");
    }
}


No.2 generated result --------------------------

package org.jfree.data.json;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import org.jfree.data.DefaultKeyedValues;
import org.jfree.chart.util.Args;

import java.io.StringWriter;
import java.util.Arrays;
import java.util.List;

public class JSONUtilsTest {

    @Test
    public void writeKeyedValuesTest() {
        DefaultKeyedValues data = new DefaultKeyedValues();
        data.addValue("Key A", 1.0);
        data.addValue("Key B", 2.0);
        
        String expectedJson = "[[\"Key A\", 1.0], [\"Key B\", 2.0]]";
        
        StringWriter sw = new StringWriter();
        try {
            JSONUtils.writeKeyedValues(data, sw);
        } catch (Exception e) {
            fail("Exception should not be thrown: " + e.getMessage());
        }

        assertEquals(expectedJson, sw.toString());
        
        Args.nullNotPermitted(null, "data"); // Intended to throw IllegalArgumentException for null data
        Exception thrownException = assertThrows(IllegalArgumentException.class, () -> {
            JSONUtils.writeKeyedValues(null);
        });
        assertTrue(thrownException.getMessage().contains("Null 'data' argument."));
    }
}


No.3 generated result --------------------------

package org.jfree.data.json;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.jfree.chart.util.Args;
import org.jfree.data.DefaultKeyedValues;
import org.junit.jupiter.api.Test;

public class JSONUtilsTest {
    @Test
    public void writeKeyedValuesTest() {
        // create an instance of KeyedValues with sample data
        DefaultKeyedValues data = new DefaultKeyedValues();
        data.addValue("Key A", 1.0);
        data.addValue("Key B", 2.0);
        data.addValue("Key C", 3.0);

        // expected JSON string
        String expected = "[[\"Key A\", 1.0], [\"Key B\", 2.0], [\"Key C\", 3.0]]";

        // perform test
        String jsonOutput = JSONUtils.writeKeyedValues(data);

        // verify the jsonOutput matches the expected string
        assertEquals(expected, jsonOutput);
    }

    @Test
    public void writeKeyedValuesWithNullDataTest() {
        // verify that passing null data throws IllegalArgumentException
        assertThrows(IllegalArgumentException.class, () -> {
            JSONUtils.writeKeyedValues(null);
        });
    }
}


No.4 generated result --------------------------

package org.jfree.data.json;

import org.jfree.data.KeyedValues;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import org.mockito.Mockito;
import java.util.Arrays;
import java.util.List;

public class JSONUtilsTest {

    @Test
    public void writeKeyedValuesTest() {
        // Create a mocked KeyedValues
        KeyedValues data = Mockito.mock(KeyedValues.class);
        
        // Define the keys and values
        List<Comparable> keys = Arrays.asList("Key A", "Key B");
        Number[] values = {1.0, 2.0};
        
        // Stub the mock to return the keys and corresponding values
        Mockito.when(data.getKeys()).thenReturn(keys);
        Mockito.when(data.getValue("Key A")).thenReturn(values[0]);
        Mockito.when(data.getValue("Key B")).thenReturn(values[1]);
        
        // Call the method under test
        String json = JSONUtils.writeKeyedValues(data);

        // Expected JSON result
        String expectedJson = "[[\"Key A\", 1.0], [\"Key B\", 2.0]]";

        // Assert that the result is as expected
        assertEquals(expectedJson, json, "The JSON output was not as expected.");
    }
}


No.5 generated result --------------------------

package org.jfree.data.json;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import org.jfree.data.DefaultKeyedValues;

public class JSONUtilsTest {

    @Test
    public void writeKeyedValuesTest() {
        // Create an instance of KeyedValues with some test data
        DefaultKeyedValues data = new DefaultKeyedValues();
        data.addValue("Key A", 1.0);
        data.addValue("Key B", 2.0);
        data.addValue("Key C", 3.0);

        // The expected JSON output for the test data
        String expected = "[[\"Key A\", 1.0], [\"Key B\", 2.0], [\"Key C\", 3.0]]";

        // Invoke the method under test
        String jsonOutput = JSONUtils.writeKeyedValues(data);

        // Assert that the JSON output is as expected
        assertEquals(expected, jsonOutput, "The JSON output should match the expected string.");
    }
}


No.6 generated result --------------------------

package org.jfree.data.json;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import org.jfree.data.DefaultKeyedValues;
import org.mockito.Mockito;

public class JSONUtilsTest {

    @Test
    public void writeKeyedValuesTest() {
        // Create a mock KeyedValues object
        KeyedValues data = Mockito.mock(KeyedValues.class);
        Mockito.when(data.getKeys()).thenReturn(java.util.Arrays.asList("Key1", "Key2"));
        Mockito.when(data.getValue("Key1")).thenReturn(5);
        Mockito.when(data.getValue("Key2")).thenReturn(10);

        // Call the method under test
        String jsonOutput = JSONUtils.writeKeyedValues(data);

        // Define the expected JSON output
        String expectedJson = "[[\"Key1\", 5], [\"Key2\", 10]]";

        // Assert that the output from the method matches the expected JSON output
        assertEquals(expectedJson, jsonOutput);
    }
}


No.7 generated result --------------------------

package org.jfree.data.json;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.io.StringWriter;
import java.util.Arrays;
import java.util.List;

public class JSONUtilsTest {

    // We create a mock implementation of KeyedValues for testing purposes
    private static class MockKeyedValues implements KeyedValues {
        private final List<Comparable> keys = Arrays.asList("Key1", "Key2");
        private final List<Number> values = Arrays.asList(5, 10);

        @Override
        public Number getValue(Comparable key) {
            int index = keys.indexOf(key);
            return values.get(index);
        }

        @Override
        public Comparable getKey(int index) {
            return keys.get(index);
        }

        @Override
        public int getIndex(Comparable key) {
            return keys.indexOf(key);
        }

        @Override
        public List getKeys() {
            return keys;
        }

        @Override
        public Number getValue(int index) {
            return values.get(index);
        }

        @Override
        public int getItemCount() {
            return keys.size();
        }
    }

    @Test
    public void writeKeyedValuesTest() {
        KeyedValues data = new MockKeyedValues();

        String jsonResult = JSONUtils.writeKeyedValues(data);

        String expectedJson = "[[\"Key1\", 5], [\"Key2\", 10]]";
        assertEquals(expectedJson, jsonResult, "The JSON output does not match the expected string.");
    }
}


No.8 generated result --------------------------

package org.jfree.data.json;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.jfree.data.DefaultKeyedValues;
import java.util.Arrays;

public class JSONUtilsTest {
    @Test
    public void writeKeyedValuesTest() {
        // Test with a non-empty KeyedValues instance
        DefaultKeyedValues data = new DefaultKeyedValues();
        data.addValue("Key 1", 100);
        data.addValue("Key 2", 200);
        String jsonResult = JSONUtils.writeKeyedValues(data);
        assertEquals("[[\"Key 1\",100],[\"Key 2\",200]]", jsonResult);

        // Test with an empty KeyedValues instance
        data = new DefaultKeyedValues();
        jsonResult = JSONUtils.writeKeyedValues(data);
        assertEquals("[]", jsonResult);

        // Test with a null KeyedValues instance
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            JSONUtils.writeKeyedValues(null);
        });
        assertEquals("The 'data' argument must not be null.", exception.getMessage());
    }
}


No.9 generated result --------------------------

package org.jfree.data.json;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import org.jfree.data.DefaultKeyedValues;
import java.util.Arrays;
import java.util.List;

public class JSONUtilsTest {

    @Test
    public void writeKeyedValuesTest() {
        // Create a KeyedValues instance with sample data
        DefaultKeyedValues keyedValues = new DefaultKeyedValues();
        keyedValues.addValue("Key A", 1.0);
        keyedValues.addValue("Key B", 2.0);
        keyedValues.addValue("Key C", null); // Including a null value to test proper handling

        String jsonResult = JSONUtils.writeKeyedValues(keyedValues);

        // Expected JSON output
        String expectedJson = "[[\"Key A\", 1.0], [\"Key B\", 2.0], [\"Key C\", null]]";

        // Assert that the JSON output from writeKeyedValues() matches the expected JSON String
        assertEquals(expectedJson, jsonResult);
    }
}


No.10 generated result --------------------------

package org.jfree.data.json;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.List;

public class JSONUtilsTest {

    @Test
    public void writeKeyedValuesTest() {
        KeyedValues dataMock = Mockito.mock(KeyedValues.class);
        List<Comparable<?>> keyList = new ArrayList<>();
        keyList.add("Key1");
        keyList.add("Key2");

        when(dataMock.getKeys()).thenReturn(keyList);
        when(dataMock.getValue("Key1")).thenReturn(10.5);
        when(dataMock.getValue("Key2")).thenReturn(23.7);

        String jsonResult = JSONUtils.writeKeyedValues(dataMock);
        String expectedJson = "[[\"Key1\", 10.5], [\"Key2\", 23.7]]";
        
        assertNotNull(jsonResult, "The result should not be null.");
        assertEquals(expectedJson, jsonResult, "The JSON output is not as expected.");
    }
}


