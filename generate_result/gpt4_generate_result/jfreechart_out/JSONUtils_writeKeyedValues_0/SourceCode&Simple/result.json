{
    "project_name": "jfreechart",
    "file_name": "JSONUtils.java",
    "relative_path": "jfreechart/src/main/java/org/jfree/data/json/JSONUtils.java",
    "execute_path": "jfreechart",
    "package": "org.jfree.data.json",
    "docstring": "/**\n     * Returns a string containing the data in JSON format.  The format is\n     * an array of arrays, where each sub-array represents one data value.\n     * The sub-array should contain two items, first the item key as a string\n     * and second the item value as a number.  For example:\n     * {@code [[\"Key A\", 1.0], [\"Key B\", 2.0]]}\n     * <br><br>\n     * Note that this method can be used with instances of {@link PieDataset}.\n     * \n     * @param data  the data ({@code null} not permitted).\n     * \n     * @return A string in JSON format. \n     */",
    "source_code": "\npublic static String writeKeyedValues(KeyedValues data) {\n    Args.nullNotPermitted(data, \"data\");\n    StringWriter sw = new StringWriter();\n    try {\n        writeKeyedValues(data, sw);\n    } catch (IOException ex) {\n        throw new RuntimeException(ex);\n    }\n    return sw.toString();\n}\n",
    "class_name": "JSONUtils",
    "method_name": "writeKeyedValues",
    "arguments": [
        "KeyedValues data"
    ],
    "generate_test": [
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.DefaultKeyedValues;\nimport java.io.IOException;\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a mock KeyedValues instance\n        KeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"Key1\", 1);\n        data.addValue(\"Key2\", 2);\n        data.addValue(\"Key3\", 3);\n        \n        // Call the method under test\n        String json = JSONUtils.writeKeyedValues(data);\n\n        // Validate the output JSON string (simple illustration; actual assertion may differ)\n        assertNotNull(json, \"The JSON output should not be null\");\n        assertFalse(json.isEmpty(), \"The JSON output should not be empty\");\n        // Perform any specific assertions that make sense for your JSON structure\n        assertTrue(json.contains(\"\\\"Key1\\\":1\"), \"JSON should contain the key-value pair for 'Key1'\");\n        assertTrue(json.contains(\"\\\"Key2\\\":2\"), \"JSON should contain the key-value pair for 'Key2'\");\n        assertTrue(json.contains(\"\\\"Key3\\\":3\"), \"JSON should contain the key-value pair for 'Key3'\");\n\n        // Verify that the string is a well-formed JSON snippet,\n        // using an appropriate JSON parsing library/method if necessary.\n        // For example:\n        /*\n        try {\n            Object obj = new JSONParser().parse(json);\n            assertTrue(obj instanceof JSONObject, \"The output should be a valid JSON object\");\n        } catch (ParseException e) {\n            fail(\"The output should be a valid JSON string\");\n        }\n        */\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class JSONUtilsTest {\n    \n    @Mock\n    private KeyedValues keyedValuesMock;\n\n    @Test\n    public void writeKeyedValuesTest() {\n        // Given\n        when(keyedValuesMock.getItemCount()).thenReturn(2);\n        when(keyedValuesMock.getKey(0)).thenReturn(\"key1\");\n        when(keyedValuesMock.getValue(0)).thenReturn(10);\n        when(keyedValuesMock.getKey(1)).thenReturn(\"key2\");\n        when(keyedValuesMock.getValue(1)).thenReturn(20);\n\n        // When\n        String result = JSONUtils.writeKeyedValues(keyedValuesMock);\n\n        // Then\n        assertNotNull(result, \"The result should not be null\");\n        String expectedJson = \"{\\\"key1\\\":10,\\\"key2\\\":20}\";\n        assertEquals(expectedJson, result, \"The resulting JSON does not match the expected JSON\");\n        \n        // Verify that the correct methods were called on the mock\n        verify(keyedValuesMock, times(1)).getItemCount();\n        verify(keyedValuesMock, times(1)).getKey(0);\n        verify(keyedValuesMock, times(1)).getValue(0);\n        verify(keyedValuesMock, times(1)).getKey(1);\n        verify(keyedValuesMock, times(1)).getValue(1);\n        verifyNoMoreInteractions(keyedValuesMock);\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.jfree.data.KeyedValues;\nimport org.jfree.data.general.DefaultKeyedValues;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        DefaultKeyedValues keyedValues = new DefaultKeyedValues();\n        keyedValues.addValue(\"key1\", 1);\n        keyedValues.addValue(\"key2\", 2);\n        keyedValues.addValue(\"key3\", 3);\n\n        String result = JSONUtils.writeKeyedValues(keyedValues);\n        assertNotNull(result, \"The result should not be null.\");\n        assertFalse(result.isEmpty(), \"The result should not be empty.\");\n        // Assuming the format of the JSON could be:\n        // {\"key1\":1,\"key2\":2,\"key3\":3}\n        String expectedJson = \"{\\\"key1\\\":1,\\\"key2\\\":2,\\\"key3\\\":3}\";\n        assertEquals(expectedJson, result, \"The JSON representation of the KeyedValues is incorrect.\");\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a mock KeyedValues object\n        KeyedValues mockData = mock(KeyedValues.class);\n        \n        // Define behavior for the mock object\n        when(mockData.getItemCount()).thenReturn(2);\n        when(mockData.getKey(0)).thenReturn(\"Key1\");\n        when(mockData.getValue(0)).thenReturn(10);\n        when(mockData.getKey(1)).thenReturn(\"Key2\");\n        when(mockData.getValue(1)).thenReturn(20);\n        \n        // Call the method under test\n        String result = JSONUtils.writeKeyedValues(mockData);\n        \n        // Verify the result\n        String expectedJson = \"{\\\"Key1\\\":10,\\\"Key2\\\":20}\"; // Assuming JSON is written in this specific format\n        assertEquals(expectedJson, result, \"The JSON output is not as expected.\");\n        \n        // Verify that mock object methods are called\n        verify(mockData, times(1)).getItemCount();\n        verify(mockData, times(1)).getKey(0);\n        verify(mockData, times(1)).getValue(0);\n        verify(mockData, times(1)).getKey(1);\n        verify(mockData, times(1)).getValue(1);\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.DefaultKeyedValues;\nimport java.io.IOException;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues keyedValues = new DefaultKeyedValues();\n        keyedValues.addValue(\"Key1\", 10);\n        keyedValues.addValue(\"Key2\", 20);\n        keyedValues.addValue(\"Key3\", 30);\n\n        String jsonResult = JSONUtils.writeKeyedValues(keyedValues);\n        assertNotNull(jsonResult, \"The jsonResult should not be null\");\n        \n        String expectedJson = \"{\\\"Key1\\\":10,\\\"Key2\\\":20,\\\"Key3\\\":30}\";\n        assertEquals(expectedJson, jsonResult, \"JSON output not as expected.\");\n    }\n    \n    @Test\n    public void writeKeyedValuesWithNullDataTest() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            JSONUtils.writeKeyedValues(null);\n        });\n\n        String expectedMessage = \"data\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage), \"Exception should contain the null parameter name.\");\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.DefaultKeyedValues;\nimport java.io.IOException;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a mock KeyedValues instance with some values\n        DefaultKeyedValues keyedValues = new DefaultKeyedValues();\n        keyedValues.addValue(\"Key1\", 1);\n        keyedValues.addValue(\"Key2\", 2);\n        keyedValues.addValue(\"Key3\", 3);\n        \n        // Expected string result after writing the keyed values (Use the expected JSON format)\n        String expectedJson = \"{ \\\"Key1\\\": 1, \\\"Key2\\\": 2, \\\"Key3\\\": 3 }\";\n\n        // Call the method under test\n        String jsonResult = JSONUtils.writeKeyedValues(keyedValues);\n        \n        // Test if the result is as expected\n        assertNotNull(jsonResult, \"The result should not be null.\");\n        assertEquals(expectedJson, jsonResult, \"The JSON output is not as expected.\");\n    }\n\n    @Test\n    public void writeKeyedValuesWithNullInputTest() {\n        // Assert that a NullPointerException is thrown when passing null to writeKeyedValues\n        assertThrows(NullPointerException.class, () -> {\n            JSONUtils.writeKeyedValues(null);\n        }, \"Expected NullPointerException for a null input\");\n    }\n\n    // Add more tests if necessary\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.IOException;\nimport org.jfree.data.DefaultKeyedValues;\nimport java.util.Arrays;\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a mock KeyedValues object\n        DefaultKeyedValues keyedValues = new DefaultKeyedValues();\n        keyedValues.addValue(\"Key1\", 10);\n        keyedValues.addValue(\"Key2\", 20);\n        keyedValues.addValue(\"Key3\", 30);\n        \n        // Act: call the method under test\n        String jsonOutput = JSONUtils.writeKeyedValues(keyedValues);\n\n        // Assert: verify the JSON output is as expected\n        String expectedJson = \"[{\\\"Key1\\\":10,\\\"Key2\\\":20,\\\"Key3\\\":30}]\"; // Hypothetical expected JSON format\n        assertEquals(expectedJson, jsonOutput, \"The JSON output should match the expected JSON format.\");\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.jfree.data.DefaultKeyedValues;\nimport java.io.IOException;\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a keyed values object with test data\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"Key1\", 1);\n        data.addValue(\"Key2\", 2);\n        \n        // Expected JSON representation of the keyed values\n        String expected = \"{\\\"Key1\\\":1,\\\"Key2\\\":2}\";\n        \n        // Actual JSON representation from JSONUtils\n        String actual = JSONUtils.writeKeyedValues(data);\n        \n        // Assert that the actual JSON matches the expected JSON\n        assertEquals(expected, actual, \"The JSON output should match the expected output.\");\n    }\n\n    // Additional test for writeKeyedValues method to check for null input\n    // The method is expected to throw IllegalArgumentException when null is passed\n    @Test\n    public void writeKeyedValuesNullTest() {\n        // Assert that an exception is thrown when null data is passed\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            JSONUtils.writeKeyedValues(null);\n        }, \"An IllegalArgumentException should be thrown when null data is passed.\");\n        \n        // Assert that the exception message is as expected\n        assertEquals(\"Argument 'data' should not be null.\", exception.getMessage(), \"Exception message should match the expected message.\");\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.mockito.Mockito;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.when;\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a mock KeyedValues object\n        KeyedValues keyedValues = Mockito.mock(KeyedValues.class);\n\n        // Define the behavior of the KeyedValues mock\n        when(keyedValues.getItemCount()).thenReturn(2);\n        when(keyedValues.getKey(0)).thenReturn(\"Key1\");\n        when(keyedValues.getValue(0)).thenReturn(10.5);\n        when(keyedValues.getKey(1)).thenReturn(\"Key2\");\n        when(keyedValues.getValue(1)).thenReturn(20.75);\n\n        // Expected JSON string result based on the provided mock data\n        String expectedJSON = \"[{\\\"Key1\\\":10.5},{\\\"Key2\\\":20.75}]\";\n\n        // Invoke the method under test with the mock\n        String actualJSON = JSONUtils.writeKeyedValues(keyedValues);\n\n        // Assert that the actual JSON string matches the expected result\n        assertEquals(expectedJSON, actualJSON,\n                \"The serialized JSON string does not match the expected output.\");\n    }\n}",
        "package org.jfree.data.json;\n\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest() {\n        // Mock the KeyedValues interface\n        KeyedValues data = mock(KeyedValues.class);\n        \n        // Define behavior for the mocked interface methods as needed for the test\n        // Below, we are simply assuming that there is one key-value pair where the key is \"key1\" and its corresponding value is 5.0\n        when(data.getKey(0)).thenReturn(\"key1\");\n        when(data.getValue(0)).thenReturn(5.0);\n        when(data.getItemCount()).thenReturn(1);\n        \n        // Define the expected result String, which would be the JSON representation of the keyed values\n        // This might change depending on the actual implementation of writeKeyedValues()\n        String expectedOutput = \"{\\\"key1\\\":5.0}\";\n        \n        // Call the static method that we're testing\n        String actualOutput = JSONUtils.writeKeyedValues(data);\n        \n        // Assert that the actualOutput is as expected\n        assertEquals(expectedOutput, actualOutput, \"The JSON representation of the KeyedValues is not correct.\");\n        \n        // Optionally, you can also verify that methods are called on the mocked object\n        verify(data).getKey(0);\n        verify(data).getValue(0);\n        verify(data).getItemCount();\n    }\n}"
    ]
}