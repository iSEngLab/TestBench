{
    "project_name": "jfreechart",
    "file_name": "JSONUtils.java",
    "relative_path": "jfreechart/src/main/java/org/jfree/data/json/JSONUtils.java",
    "execute_path": "jfreechart",
    "package": "org.jfree.data.json",
    "docstring": "/**\n     * Returns a string containing the data in JSON format.  The format is\n     * an array of arrays, where each sub-array represents one data value.\n     * The sub-array should contain two items, first the item key as a string\n     * and second the item value as a number.  For example:\n     * {@code [[\"Key A\", 1.0], [\"Key B\", 2.0]]}\n     * <br><br>\n     * Note that this method can be used with instances of {@link PieDataset}.\n     * \n     * @param data  the data ({@code null} not permitted).\n     * \n     * @return A string in JSON format. \n     */",
    "source_code": "\npublic static String writeKeyedValues(KeyedValues data) {\n    Args.nullNotPermitted(data, \"data\");\n    StringWriter sw = new StringWriter();\n    try {\n        writeKeyedValues(data, sw);\n    } catch (IOException ex) {\n        throw new RuntimeException(ex);\n    }\n    return sw.toString();\n}\n",
    "class_name": "JSONUtils",
    "method_name": "writeKeyedValues",
    "arguments": [
        "KeyedValues data"
    ],
    "generate_test": [
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.IOException;\nimport org.jfree.data.general.KeyedValues;\nimport java.io.StringWriter;\n\nimport static org.mockito.Mockito.*;\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest_NotNullData() throws IOException {\n        // Mock the KeyedValues interface\n        KeyedValues mockedData = mock(KeyedValues.class);\n        \n        // Set up the behavior of the mock as needed for the test\n        // For example, when writing the values, the StringWriter should receive some output\n        // This will depend on the actual implementation\n        // When(mockedData.someMethod()).thenReturn(someValue);\n\n        StringWriter sw = new StringWriter();\n        String expectedOutput = \"{\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\"}\"; // This is just an example\n        sw.write(expectedOutput);\n\n        // Now you would pass the mock to the method\n        String output = JSONUtils.writeKeyedValues(mockedData);\n\n        // Assert that the output matches the expected output\n        assertEquals(expectedOutput, output, \"The output string should match the expected JSON output.\");\n    }\n    \n    @Test\n    public void writeKeyedValuesTest_NullData() {\n        // Pass null to the method and assert that a NullPointerException is thrown\n        NullPointerException thrown = assertThrows(NullPointerException.class, () -> {\n            JSONUtils.writeKeyedValues(null);\n        }, \"A NullPointerException should be thrown when data is null.\");\n        \n        assertEquals(\"data\", thrown.getMessage(), \"The exception message should identify the null parameter.\");\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass KeyedValuesMock implements KeyedValues {\n    // You may need to implement methods of KeyedValues (mocked data for the test)\n    @Override\n    public Number getValue(int index) {\n        // Return a mock value\n        return 10;\n    }\n\n    @Override\n    public Comparable getKey(int index) {\n        // Return a mock key\n        return \"Key\" + index;\n    }\n\n    // Include other methods that you need to mock\n}\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest() {\n        // Given: Setup test data and mocks\n        KeyedValues data = new KeyedValuesMock();\n        String expectedOutput = \"\"; // Assume this is the expected String result from writeKeyedValues\n\n        // When: Call the method under test\n        String result = JSONUtils.writeKeyedValues(data);\n\n        // Then: Verify the result is as expected\n        assertEquals(expectedOutput, result, \"The output should match the expected JSON string.\");\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // Mock KeyedValues to return some predefined values\n        KeyedValues keyedValues = Mockito.mock(KeyedValues.class);\n        Mockito.when(keyedValues.getKeys()).thenReturn(Arrays.asList(\"key1\", \"key2\"));\n        Mockito.when(keyedValues.getValue(\"key1\")).thenReturn(5.0);\n        Mockito.when(keyedValues.getValue(\"key2\")).thenReturn(10.0);\n        \n        // Call the method under test\n        String jsonOutput = JSONUtils.writeKeyedValues(keyedValues);\n        \n        // Verify the output\n        assertNotNull(jsonOutput, \"The output should not be null\");\n        String expectedOutput = \"{\\\"key1\\\":5.0,\\\"key2\\\":10.0}\";\n        assertEquals(expectedOutput, jsonOutput, \"The JSON output does not match the expected output\");\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.IOException;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a mock KeyedValues object for the test\n        KeyedValues data = Mockito.mock(KeyedValues.class);\n\n        // Set up the mock to return expected values\n        Mockito.when(data.getItemCount()).thenReturn(2);\n        Mockito.when(data.getKey(0)).thenReturn(\"key1\");\n        Mockito.when(data.getValue(0)).thenReturn(100);\n        Mockito.when(data.getKey(1)).thenReturn(\"key2\");\n        Mockito.when(data.getValue(1)).thenReturn(200);\n\n        // Call the method to test\n        String jsonString = JSONUtils.writeKeyedValues(data);\n\n        // Verify the method call to data\n        Mockito.verify(data, Mockito.times(1)).getItemCount();\n        Mockito.verify(data, Mockito.times(1)).getKey(0);\n        Mockito.verify(data, Mockito.times(1)).getValue(0);\n        Mockito.verify(data, Mockito.times(1)).getKey(1);\n        Mockito.verify(data, Mockito.times(1)).getValue(1);\n\n        // Expected JSON representation of the keyed values\n        String expectedJson = \"[{\\\"key\\\":\\\"key1\\\",\\\"value\\\":100},{\\\"key\\\":\\\"key2\\\",\\\"value\\\":200}]\";\n\n        // Assert that the JSON representation matches the expected output\n        assertEquals(expectedJson, jsonString);\n    }\n}",
        "package org.jfree.data.json;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport org.junit.jupiter.api.Test;\nimport java.io.IOException;\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"Key1\", 123);\n        data.addValue(\"Key2\", 456);\n        \n        // Act\n        String jsonOutput = JSONUtils.writeKeyedValues(data);\n\n        // Assert the expected JSON string (assuming correct JSON format)\n        assertEquals(\"{\\\"Key1\\\":123,\\\"Key2\\\":456}\", jsonOutput);\n    }\n\n    @Test\n    public void writeKeyedValuesTestWithNullShouldThrowException() {\n        // Assert that passing null should result in an IllegalArgumentException\n        assertThrows(IllegalArgumentException.class, () -> {\n            JSONUtils.writeKeyedValues(null);\n        });\n    }\n\n    // More tests can be written to cover additional edge cases and scenarios,\n    // such as empty data, large amounts of data, or special characters in keys.\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.io.IOException;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // Arrange\n        KeyedValues keyedValuesMock = new KeyedValues() {\n            @Override\n            public Number getValue(Comparable key) {\n                return key.equals(\"someKey\") ? 42 : null;\n            }\n\n            @Override\n            public Comparable getKey(int index) {\n                return index == 0 ? \"someKey\" : null;\n            }\n\n            @Override\n            public int getKeyIndex(Comparable key) {\n                return key.equals(\"someKey\") ? 0 : -1;\n            }\n\n            @Override\n            public List getKeys() {\n                return Collections.singletonList(\"someKey\");\n            }\n\n            @Override\n            public int getItemCount() {\n                return 1;\n            } \n\n            // Implement other methods if required\n        };\n\n        // Act\n        String result = JSONUtils.writeKeyedValues(keyedValuesMock);\n\n        // Assert\n        String expectedString = \"{\\\"someKey\\\":42}\";\n        assertNotNull(result, \"The result should not be null\");\n        assertEquals(expectedString, result, \"The result should match the expected JSON string.\");\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport org.jfree.data.KeyedValues;\nimport java.io.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest() {\n        // Mock the KeyedValues interface as we do not have the actual implementation details here\n        KeyedValues mockData = new KeyedValues() {\n            @Override\n            public Number getValue(int index) {\n                return null;\n            }\n\n            @Override\n            public Comparable getKey(int index) {\n                return null;\n            }\n\n            @Override\n            public int getIndex(Comparable key) {\n                return 0;\n            }\n\n            @Override\n            public List getKeys() {\n                return null;\n            }\n\n            @Override\n            public Number getValue(Comparable key) {\n                return null;\n            }\n\n            @Override\n            public int getItemCount() {\n                return 0;\n            }\n        };\n\n        // Test for null data argument. Should throw an IllegalArgumentException according to the source code\n        IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> JSONUtils.writeKeyedValues(null));\n        assertEquals(\"data\", thrown.getMessage());\n\n        // Test with mocked data. Here, we are assuming that the JSONUtils.writeKeyedValues method calls a \n        // method that writes \"mockedResult\" to the StringWriter for our mockData.\n        String expected = \"mockedResult\";\n        String actual = JSONUtils.writeKeyedValues(mockData);\n\n        assertEquals(expected, actual, \"The method did not return the expected JSON.\");\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.jfree.data.KeyedValues;\nimport org.junit.jupiter.api.Test;\nimport java.io.StringWriter;\nimport java.io.IOException;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a mock KeyedValues instance\n        KeyedValues mockedData = mock(KeyedValues.class);\n\n        // Define the behavior of the mocked KeyedValues object\n        // when method(s) are called. This usually includes defining\n        // what values are returned or what interactions are expected.\n        // For example:\n        // when(mockedData.getItemCount()).thenReturn(<some_value>);\n        // when(mockedData.getKey(<some_index>)).thenReturn(<some_key>);\n        // when(mockedData.getValue(<some_key>)).thenReturn(<some_value>);\n        // You should replace <some_value>, <some_index>, and <some_key> with actual values as per your testing scenario.\n\n        // Call the method under test\n        String result = JSONUtils.writeKeyedValues(mockedData);\n\n        // Perform necessary assertions to check the result\n        assertNotNull(result, \"The result should not be null\");\n\n        // Depending on what the writeKeyedValues(data, writer) is supposed to do,\n        // you would add assertions here to check if the result is formatted correctly.\n        // For example, if it's expected to return a JSON string, you can assert that:\n        // assertTrue(result.startsWith(\"{\") && result.endsWith(\"}\"), \"Result should be enclosed in braces\");\n        // More specific assertions can be made based on the actual content of the returned string.\n\n        // Verify that the interactions with the mockedData occurred as expected.\n        // verify(mockedData).getItemCount();\n        // verify(mockedData).getKey(<some_index>);\n        // verify(mockedData).getValue(<some_key>);\n        // The above verifications should match the interactions you expect during the test.\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"Key1\", 1);\n        data.addValue(\"Key2\", \"Test\");\n        data.addValue(\"Key3\", 3.14);\n        \n        String expected = \"{\\\"Key1\\\":1,\\\"Key2\\\":\\\"Test\\\",\\\"Key3\\\":3.14}\";\n        String actual = JSONUtils.writeKeyedValues(data);\n        \n        assertNotNull(actual, \"The result should not be null.\");\n        assertEquals(expected, actual, \"The JSON output does not match the expected string.\");\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.IOException;\n\npublic class JSONUtilsTest {\n\n    @Test\n    public void writeKeyedValuesTest() {\n        // Assuming KeyedValues is a class with predefined data that can be verified\n        // and there exists a method JSONUtils.writeKeyedValues(KeyedValues data, Writer writer)\n        KeyedValues mockedData = new KeyedValues();\n        mockedData.setValue(\"key1\", 123);\n        mockedData.setValue(\"key2\", \"value2\");\n\n        // Assuming that an appropriate toString() method is implemented returning JSON\n        String expectedJson = \"{\\\"key1\\\":123,\\\"key2\\\":\\\"value2\\\"}\";\n\n        // Perform the actual test\n        String actualJson = JSONUtils.writeKeyedValues(mockedData);\n\n        // Verify the result\n        assertEquals(expectedJson, actualJson, \"The JSON output does not match the expected JSON.\");\n    }\n\n    // Your KeyedValues mocked implementation for the test purpose\n    // In a real scenario, this would be replaced with an actual implementation or mock\n    private static class KeyedValues {\n        // A simple map to store keyed data, this should actually be present in your KeyedValues class\n        private final Map<String, Object> dataMap = new HashMap<>();\n\n        public void setValue(String key, Object value) {\n            dataMap.put(key, value);\n        }\n\n        @Override\n        public String toString() {\n            // Mocked JSON conversion, in actual use, it may be more complex\n            return dataMap.entrySet().stream()\n                    .map(entry -> \"\\\"\" + entry.getKey() + \"\\\":\" + (entry.getValue() instanceof String ? \"\\\"\" + entry.getValue() + \"\\\"\" : entry.getValue()))\n                    .collect(Collectors.joining(\",\", \"{\", \"}\"));\n        }\n    }\n}"
    ]
}