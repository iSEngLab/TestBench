{
    "project_name": "zxing",
    "file_name": "BitArray.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/common/BitArray.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.common",
    "docstring": "/**\n   * @param from first bit to check\n   * @return index of first bit that is set, starting from the given index, or size if none are set\n   *  at or beyond this given index\n   * @see #getNextUnset(int)\n   */",
    "source_code": "\npublic int getNextSet(int from) {\n  if (from >= size) {\n    return size;\n  }\n  int bitsOffset = from / 32;\n  int currentBits = bits[bitsOffset];\n  // mask off lesser bits first\n  currentBits &= -(1 << (from & 0x1F));\n  while (currentBits == 0) {\n    if (++bitsOffset == bits.length) {\n      return size;\n    }\n    currentBits = bits[bitsOffset];\n  }\n  int result = (bitsOffset * 32) + Integer.numberOfTrailingZeros(currentBits);\n  return Math.min(result, size);\n}\n",
    "class_name": "BitArray",
    "method_name": "getNextSet",
    "arguments": [
        "int from"
    ],
    "generate_test": [
        "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitArrayTest {\n\n    @Test\n    public void getNextSetTest() {\n        // Given a BitArray with some bits set\n        BitArray bitArray = new BitArray(64);\n        bitArray.set(3);\n        bitArray.set(5);\n        bitArray.set(29);\n        bitArray.set(30);\n        bitArray.set(60);\n\n        // Verify getNextSet returns the correct index of the next set bit\n        assertEquals(3, bitArray.getNextSet(0), \"Next set bit after index 0 should be at 3\");\n        assertEquals(5, bitArray.getNextSet(4), \"Next set bit after index 4 should be at 5\");\n        assertEquals(29, bitArray.getNextSet(6), \"Next set bit after index 6 should be at 29\");\n        assertEquals(30, bitArray.getNextSet(29), \"Next set bit after index 29 should be at 30\");\n\n        // Given that the next set bit is out of bounds (beyond size), it should return size\n        assertEquals(64, bitArray.getNextSet(61), \"Next set bit after index 61 should be 64 (out of bounds)\");\n        assertEquals(64, bitArray.getNextSet(64), \"Next set bit after index 64 should be 64 (out of bounds)\");\n    }\n}",
        "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitArrayTest {\n\n    @Test\n    public void getNextSetTest() {\n        BitArray bitArray = new BitArray(64);\n        \n        // Initially, all bits are unset. getNextSet should return the size (64) for any valid index.\n        assertEquals(64, bitArray.getNextSet(0));\n        assertEquals(64, bitArray.getNextSet(32));\n        assertEquals(64, bitArray.getNextSet(63));\n        \n        // Set a single bit and check if the getNextSet gives the correct index.\n        bitArray.set(10); // Set the bit at index 10\n        assertEquals(10, bitArray.getNextSet(0));\n        assertEquals(10, bitArray.getNextSet(10));\n        assertEquals(64, bitArray.getNextSet(11));\n        \n        // Set another bit further along and test the two segments.\n        bitArray.set(50); // Set the bit at index 50\n        assertEquals(10, bitArray.getNextSet(0));\n        assertEquals(50, bitArray.getNextSet(11));\n        assertEquals(50, bitArray.getNextSet(40));\n        assertEquals(64, bitArray.getNextSet(51));\n        \n        // Set a bit at the last possible index in the array.\n        bitArray.set(63);\n        assertEquals(63, bitArray.getNextSet(51));\n        assertEquals(63, bitArray.getNextSet(63));\n        \n        // Test with index out of bounds.\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> bitArray.getNextSet(64));\n    }\n}",
        "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitArrayTest {\n\n    @Test\n    public void getNextSetTest() {\n        // Initialize a BitArray with a specific size\n        BitArray bitArray = new BitArray(64);\n\n        // Set some bits in the BitArray\n        bitArray.set(0);\n        bitArray.set(5);\n        bitArray.set(36);\n\n        // Test finding the next set bit when it exists\n        assertEquals(0, bitArray.getNextSet(0), \"First set bit from index 0 should be at index 0\");\n        assertEquals(5, bitArray.getNextSet(1), \"Next set bit from index 1 should be at index 5\");\n        assertEquals(36, bitArray.getNextSet(6), \"Next set bit from index 6 should be at index 36\");\n\n        // Test that it returns the size of the BitArray when no next set bit exists\n        assertEquals(64, bitArray.getNextSet(37), \"Next set bit from index 37 should return the size 64 when not found\");\n\n        // Set the last possible bit\n        bitArray.set(63);\n        // Test that getNextSet returns the last bit when requested\n        assertEquals(63, bitArray.getNextSet(37), \"Next set bit from index 37 should be at index 63 after setting last bit\");\n    }\n}",
        "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitArrayTest {\n    @Test\n    public void getNextSetTest() {\n        BitArray bitArray;\n\n        // Test with an empty BitArray\n        bitArray = new BitArray(0);\n        assertEquals(0, bitArray.getNextSet(0));\n\n        // Test where all bits are unset\n        bitArray = new BitArray(32);\n        assertEquals(32, bitArray.getNextSet(0));\n\n        // Test with some bits set\n        bitArray = new BitArray(new int[]{0xFFFF0000, 0xFFFF0000}, 64);\n        assertEquals(16, bitArray.getNextSet(0));\n\n        // Test where the search starts after the last set bit\n        assertEquals(64, bitArray.getNextSet(48));\n\n        // Test where the search starts at the position of the last set bit\n        bitArray.set(63);\n        assertEquals(63, bitArray.getNextSet(62));\n\n        // Test getting the next set bit after a certain index\n        bitArray = new BitArray(new int[] {0x0, 0xF0FF1000}, 64);\n        assertEquals(36, bitArray.getNextSet(32));\n\n        // Test with no set bits after the given index\n        bitArray = new BitArray(new int[]{0x0, 0xA0000000}, 64);\n        assertEquals(64, bitArray.getNextSet(57));\n\n        // Test with the last bit set in the array\n        bitArray = new BitArray(new int[]{0x0, 0x80000000}, 64);\n        assertEquals(63, bitArray.getNextSet(32));\n    }\n}",
        "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitArrayTest {\n    @Test\n    public void getNextSetTest() {\n        // Case: empty BitArray\n        BitArray emptyBitArray = new BitArray();\n        assertEquals(emptyBitArray.getSize(), emptyBitArray.getNextSet(0));\n\n        // Case: BitArray with no set bits should return size for any index\n        BitArray noSetBits = new BitArray(32);\n        assertEquals(noSetBits.getSize(), noSetBits.getNextSet(0));\n        assertEquals(noSetBits.getSize(), noSetBits.getNextSet(31));\n\n        // Case: BitArray with set bits\n        BitArray bitArray = new BitArray(64);\n        bitArray.set(32);\n        assertEquals(32, bitArray.getNextSet(0));\n        assertEquals(32, bitArray.getNextSet(32));\n        assertEquals(64, bitArray.getNextSet(33));\n\n        // Case: Check the last bit\n        bitArray.set(63);\n        assertEquals(32, bitArray.getNextSet(0));\n        assertEquals(63, bitArray.getNextSet(33));\n\n        // Case: Check out of bounds\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> bitArray.getNextSet(64));\n    }\n}",
        "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitArrayTest {\n    @Test\n    public void getNextSetTest() {\n        \n        // Create a BitArray and set some bits\n        int size = 64;\n        BitArray bitArray = new BitArray(size);\n        bitArray.set(3);\n        bitArray.set(36);\n        bitArray.set(48);\n        \n        // Test different scenarios\n        assertEquals(3, bitArray.getNextSet(0)); // First set bit is at index 3\n        assertEquals(36, bitArray.getNextSet(4)); // Next after 3 is at index 36\n        assertEquals(48, bitArray.getNextSet(37)); // Next after 36 is at index 48\n        assertEquals(size, bitArray.getNextSet(49)); // No set bits after index 48\n        assertEquals(size, bitArray.getNextSet(64)); // Start index >= size\n        \n        // Edge cases\n        assertEquals(size, bitArray.getNextSet(size)); // From index equals size\n        assertEquals(3, bitArray.getNextSet(3)); // The \"from\" index itself is set\n        \n        // Set a bit at the end and test\n        bitArray.set(63);\n        assertEquals(63, bitArray.getNextSet(49)); // Next after 48 is now at index 63\n        assertEquals(size, bitArray.getNextSet(64)); // Still returns size when starting from index >= actual size\n    }\n}",
        "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitArrayTest {\n    @Test\n    public void getNextSetTest() {\n        // Here we need to create a test case to check the functionality of getNextSet\n        \n        // Let's start with an empty BitArray and check if the next set bit is size\n        BitArray emptyBitArray = new BitArray(32);\n        assertEquals(32, emptyBitArray.getNextSet(0), \"Next set bit of an empty array at start should be size.\");\n\n        // Now let's test a non-empty BitArray\n        int size = 64;\n        BitArray bitArray = new BitArray(size);\n        // Set some bits\n        bitArray.set(3);\n        bitArray.set(36);\n        bitArray.set(63);\n\n        // Testing the first set bit from the start\n        assertEquals(3, bitArray.getNextSet(0), \"Next set bit from index 0 should be 3.\");\n\n        // Testing next set bit from a position after a set bit\n        assertEquals(36, bitArray.getNextSet(4), \"Next set bit from index 4 should be 36.\");\n\n        // Testing next set bit from a position that is a set bit itself\n        assertEquals(36, bitArray.getNextSet(36), \"Next set bit from index 36 should be 36.\");\n\n        // Testing next set bit after the last set bit\n        assertEquals(63, bitArray.getNextSet(37), \"Next set bit from index 37 should be 63.\");\n\n        // Testing next set bit when there's no more set bits\n        assertEquals(64, bitArray.getNextSet(64), \"Next set bit from index 64 should be size (64).\");\n\n        // Testing out of range index for next set bit\n        assertEquals(64, bitArray.getNextSet(100), \"Next set bit from index 100 should be size (64).\");\n\n        // Testing for an exact position of the set bit\n        assertEquals(63, bitArray.getNextSet(63), \"Next set bit from index 63 should be 63.\");\n\n        // Testing for no set bit\n        assertEquals(size, bitArray.getNextSet(size), \"Next set bit from index equal to size should be size.\");\n\n        // Testing with a complex case where bits are set, unset, and then set again\n        BitArray complexBitArray = new BitArray(size);\n        complexBitArray.set(1);\n        complexBitArray.set(2);\n        complexBitArray.flip(1); // Unset bit index 1\n        complexBitArray.set(30);\n        assertEquals(30, complexBitArray.getNextSet(0), \"Next set bit from index 0 should be 30 after flipping bit index 1.\");\n    }\n}",
        "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class BitArrayTest {\n    @Test\n    public void getNextSetTest() {\n        // Create a BitArray with a certain size\n        BitArray bitArray = new BitArray(64);\n        // Set some bits\n        bitArray.set(5);\n        bitArray.set(32);\n        bitArray.set(50);\n\n        // Test various scenarios\n        assertEquals(5, bitArray.getNextSet(0), \n            \"First set bit after index 0 should be 5.\");\n        assertEquals(32, bitArray.getNextSet(6), \n            \"First set bit after index 6 should be 32.\");\n        assertEquals(50, bitArray.getNextSet(33), \n            \"First set bit after index 33 should be 50.\");\n        assertEquals(64, bitArray.getNextSet(51), \n            \"There are no set bits after index 50, so return the size.\");\n        assertEquals(64, bitArray.getNextSet(64), \n            \"No set bits at or beyond the size of the array, return the size.\");\n    }\n}",
        "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class BitArrayTest {\n    @Test\n    public void getNextSetTest() {\n        BitArray bitArray = new BitArray(64);\n\n        // All bits are initially unset, so getNextSet from 0 should return size (64)\n        assertEquals(64, bitArray.getNextSet(0));\n        \n        // Set a bit and test that getNextSet returns the correct index\n        bitArray.set(10);\n        assertEquals(10, bitArray.getNextSet(0));\n\n        // Test that getNextSet returns the correct index after the set bit\n        assertEquals(64, bitArray.getNextSet(11));\n\n        // Test that getNextSet returns the size if starting from an index >= size\n        assertEquals(64, bitArray.getNextSet(65));\n        \n        // Set another bit further on and test getNextSet with an index before it\n        bitArray.set(50);\n        assertEquals(50, bitArray.getNextSet(11));\n\n        // Edge case: set the last bit, and ensure it finds it\n        bitArray.set(63);\n        assertEquals(63, bitArray.getNextSet(51));\n\n        // Test that getNextSet returns the correct index in case of consecutive set bits\n        bitArray.set(30);\n        bitArray.set(31);\n        assertEquals(30, bitArray.getNextSet(29));\n        assertEquals(30, bitArray.getNextSet(30));\n        assertEquals(31, bitArray.getNextSet(31));\n    }\n}",
        "package com.google.zxing.common;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitArrayTest {\n    \n    @Test\n    public void getNextSetTest() {\n        // Create a bit array with a size of 100 and set some bits\n        BitArray bitArray = new BitArray(100);\n        bitArray.set(10);\n        bitArray.set(20);\n        bitArray.set(30);\n        \n        // Test for a bit set before the first set bit\n        assertEquals(10, bitArray.getNextSet(0), \"Next set bit should be at index 10.\");\n\n        // Test for the next set bit at the position of the first set bit\n        assertEquals(10, bitArray.getNextSet(10), \"Next set bit after index 10 should be 10 itself.\");\n\n        // Test for a bit in between two set bits\n        assertEquals(20, bitArray.getNextSet(11), \"Next set bit after index 11 should be 20.\");\n\n        // Test for the last set bit\n        assertEquals(30, bitArray.getNextSet(21), \"Next set bit after index 21 should be 30.\");\n\n        // Test for a bit set after the last set bit\n        assertEquals(100, bitArray.getNextSet(31), \"Should return the size of bit array as it's beyond last set bit.\");\n\n        // Test for a bit set at the boundary of the bit array's size\n        assertEquals(100, bitArray.getNextSet(100), \"Should return the size of bit array when start index equals size.\");\n        \n        // Test with an index beyond the BitArray's size\n        assertEquals(100, bitArray.getNextSet(101), \"Should return the size of bit array when start index is beyond size.\");\n\n        // Add more tests here if necessary\n    }\n}"
    ]
}