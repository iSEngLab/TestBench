{
    "project_name": "zxing",
    "file_name": "Decoder.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/decoder/Decoder.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.decoder",
    "docstring": "/**\n   * Gets the character (or string) corresponding to the passed code in the given table\n   *\n   * @param table the table used\n   * @param code the code of the character\n   */",
    "source_code": "\nprivate static String getCharacter(Table table, int code) {\n  switch (table) {\n    case UPPER:\n      return UPPER_TABLE[code];\n    case LOWER:\n      return LOWER_TABLE[code];\n    case MIXED:\n      return MIXED_TABLE[code];\n    case PUNCT:\n      return PUNCT_TABLE[code];\n    case DIGIT:\n      return DIGIT_TABLE[code];\n    default:\n      // Should not reach here.\n      throw new IllegalStateException(\"Bad table\");\n  }\n}\n",
    "class_name": "Decoder",
    "method_name": "getCharacter",
    "arguments": [
        "Table table",
        "int code"
    ],
    "generate_test": [
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n\n    @Test\n    public void getCharacterTest() {\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 2));\n        assertEquals(\"a\", Decoder.getCharacter(Decoder.Table.LOWER, 2));\n        assertEquals(\"\\1\", Decoder.getCharacter(Decoder.Table.MIXED, 2));\n        assertEquals(\"\\r\", Decoder.getCharacter(Decoder.Table.PUNCT, 1));\n        assertEquals(\"0\", Decoder.getCharacter(Decoder.Table.DIGIT, 2));\n\n        // Testing the default switch case by trying to get a character from a non-existing table\n        Exception exception = assertThrows(IllegalStateException.class, () -> {\n            Decoder.getCharacter(null, 2);\n        });\n\n        String expectedMessage = \"Bad table\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n\n    @Test\n    public void getCharacterTest() {\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 2));\n        assertEquals(\"a\", Decoder.getCharacter(Decoder.Table.LOWER, 2));\n        assertEquals(\"\\1\", Decoder.getCharacter(Decoder.Table.MIXED, 2));\n        assertEquals(\"FLG(n)\", Decoder.getCharacter(Decoder.Table.PUNCT, 0));\n        assertEquals(\"0\", Decoder.getCharacter(Decoder.Table.DIGIT, 2));\n\n        // Test out of range indices and expect an exception for each table\n        assertThrows(ArrayIndexOutOfBoundsException.class,\n                     () -> Decoder.getCharacter(Decoder.Table.UPPER, -1));\n        assertThrows(ArrayIndexOutOfBoundsException.class,\n                     () -> Decoder.getCharacter(Decoder.Table.UPPER, Decoder.UPPER_TABLE.length));\n\n        assertThrows(ArrayIndexOutOfBoundsException.class,\n                     () -> Decoder.getCharacter(Decoder.Table.LOWER, -1));\n        assertThrows(ArrayIndexOutOfBoundsException.class,\n                     () -> Decoder.getCharacter(Decoder.Table.LOWER, Decoder.LOWER_TABLE.length));\n\n        assertThrows(ArrayIndexOutOfBoundsException.class,\n                     () -> Decoder.getCharacter(Decoder.Table.MIXED, -1));\n        assertThrows(ArrayIndexOutOfBoundsException.class,\n                     () -> Decoder.getCharacter(Decoder.Table.MIXED, Decoder.MIXED_TABLE.length));\n\n        assertThrows(ArrayIndexOutOfBoundsException.class,\n                     () -> Decoder.getCharacter(Decoder.Table.PUNCT, -1));\n        assertThrows(ArrayIndexOutOfBoundsException.class,\n                     () -> Decoder.getCharacter(Decoder.Table.PUNCT, Decoder.PUNCT_TABLE.length));\n\n        assertThrows(ArrayIndexOutOfBoundsException.class,\n                     () -> Decoder.getCharacter(Decoder.Table.DIGIT, -1));\n        assertThrows(ArrayIndexOutOfBoundsException.class,\n                     () -> Decoder.getCharacter(Decoder.Table.DIGIT, Decoder.DIGIT_TABLE.length));\n\n        // Test invalid table, should throw IllegalStateException\n        assertThrows(IllegalStateException.class,\n                     () -> Decoder.getCharacter(null, 0));\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n    \n    @Test\n    public void getCharacterTest() {\n        // UPPER table test cases\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 2));\n        assertEquals(\"Z\", Decoder.getCharacter(Decoder.Table.UPPER, 28));\n        \n        // LOWER table test cases\n        assertEquals(\"a\", Decoder.getCharacter(Decoder.Table.LOWER, 2));\n        assertEquals(\"z\", Decoder.getCharacter(Decoder.Table.LOWER, 28));\n        \n        // MIXED table test cases\n        assertEquals(\"@\", Decoder.getCharacter(Decoder.Table.MIXED, 21));\n        assertEquals(\"\\177\", Decoder.getCharacter(Decoder.Table.MIXED, 27));\n        \n        // PUNCT table test cases\n        assertEquals(\"!\", Decoder.getCharacter(Decoder.Table.PUNCT, 6));\n        assertEquals(\"}\", Decoder.getCharacter(Decoder.Table.PUNCT, 30));\n        \n        // DIGIT table test cases\n        assertEquals(\"0\", Decoder.getCharacter(Decoder.Table.DIGIT, 2));\n        assertEquals(\"9\", Decoder.getCharacter(Decoder.Table.DIGIT, 11));\n        \n        // Testing illegal argument\n        Exception exception = assertThrows(IllegalStateException.class, () -> {\n            Decoder.getCharacter(Decoder.Table.valueOf(\"BINARY\"), 0);\n        });\n        assertTrue(exception.getMessage().contains(\"Bad table\"));\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n\n    @Test\n    public void getCharacterTest() {\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 2));\n        assertEquals(\"a\", Decoder.getCharacter(Decoder.Table.LOWER, 2));\n        assertEquals(\"\\1\", Decoder.getCharacter(Decoder.Table.MIXED, 2));\n        assertEquals(\"!\", Decoder.getCharacter(Decoder.Table.PUNCT, 6));\n        assertEquals(\"0\", Decoder.getCharacter(Decoder.Table.DIGIT, 2));\n        assertThrows(IllegalStateException.class, () -> Decoder.getCharacter(Decoder.Table.BINARY, 2)); // BINARY table is not defined in the getCharacter method, so passes an illegal argument.\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass DecoderTest {\n    @Test\n    void getCharacterTest_UPPER() {\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 2));\n        assertEquals(\"Z\", Decoder.getCharacter(Decoder.Table.UPPER, 28));\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> Decoder.getCharacter(Decoder.Table.UPPER, 40));\n        assertThrows(IllegalStateException.class, () -> Decoder.getCharacter(Decoder.Table.BINARY, 1));\n    }\n\n    @Test\n    void getCharacterTest_LOWER() {\n        assertEquals(\"a\", Decoder.getCharacter(Decoder.Table.LOWER, 2));\n        assertEquals(\"z\", Decoder.getCharacter(Decoder.Table.LOWER, 28));\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> Decoder.getCharacter(Decoder.Table.LOWER, 40));\n    }\n\n    @Test\n    void getCharacterTest_MIXED() {\n        assertEquals(\" \", Decoder.getCharacter(Decoder.Table.MIXED, 1));\n        assertEquals(\"@\", Decoder.getCharacter(Decoder.Table.MIXED, 21));\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> Decoder.getCharacter(Decoder.Table.MIXED, 40));\n    }\n\n    @Test\n    void getCharacterTest_PUNCT() {\n        assertEquals(\"!\", Decoder.getCharacter(Decoder.Table.PUNCT, 6));\n        assertEquals(\"}\", Decoder.getCharacter(Decoder.Table.PUNCT, 34));\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> Decoder.getCharacter(Decoder.Table.PUNCT, 40));\n    }\n\n    @Test\n    void getCharacterTest_DIGIT() {\n        assertEquals(\"0\", Decoder.getCharacter(Decoder.Table.DIGIT, 2));\n        assertEquals(\"9\", Decoder.getCharacter(Decoder.Table.DIGIT, 11));\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> Decoder.getCharacter(Decoder.Table.DIGIT, 40));\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n\n    @Test\n    public void getCharacterTest() {\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 2), \"UPPER_TABLE should return 'A' for code 2\");\n        assertEquals(\"a\", Decoder.getCharacter(Decoder.Table.LOWER, 2), \"LOWER_TABLE should return 'a' for code 2\");\n        assertEquals(\"@\", Decoder.getCharacter(Decoder.Table.MIXED, 21), \"MIXED_TABLE should return '@' for code 21\");\n        assertEquals(\"#\", Decoder.getCharacter(Decoder.Table.PUNCT, 8), \"PUNCT_TABLE should return '#' for code 8\");\n        assertEquals(\"0\", Decoder.getCharacter(Decoder.Table.DIGIT, 2), \"DIGIT_TABLE should return '0' for code 2\");\n\n        assertThrows(IllegalStateException.class, () -> Decoder.getCharacter(null, 2), \"Expecting IllegalStateException for null table\");\n\n        // Testing edge cases with boundaries of table indices\n        assertEquals(\" \", Decoder.getCharacter(Decoder.Table.UPPER, 1), \"UPPER_TABLE should return ' ' (space) for code 1\");\n        assertEquals(\"CTRL_BS\", Decoder.getCharacter(Decoder.Table.UPPER, Decoder.UPPER_TABLE.length - 1), \"UPPER_TABLE should return 'CTRL_BS' for the last code\");\n\n        assertEquals(\" \", Decoder.getCharacter(Decoder.Table.LOWER, 1), \"LOWER_TABLE should return ' ' (space) for code 1\");\n        assertEquals(\"CTRL_BS\", Decoder.getCharacter(Decoder.Table.LOWER, Decoder.LOWER_TABLE.length - 1), \"LOWER_TABLE should return 'CTRL_BS' for the last code\");\n\n        assertEquals(\" \", Decoder.getCharacter(Decoder.Table.MIXED, 1), \"MIXED_TABLE should return ' ' (space) for code 1\");\n        assertEquals(\"CTRL_BS\", Decoder.getCharacter(Decoder.Table.MIXED, Decoder.MIXED_TABLE.length - 1), \"MIXED_TABLE should return 'CTRL_BS' for the last code\");\n\n        assertEquals(\"\\r\", Decoder.getCharacter(Decoder.Table.PUNCT, 1), \"PUNCT_TABLE should return '\\\\r' (carriage return) for code 1\");\n        assertEquals(\"CTRL_UL\", Decoder.getCharacter(Decoder.Table.PUNCT, Decoder.PUNCT_TABLE.length - 1), \"PUNCT_TABLE should return 'CTRL_UL' for the last code\");\n\n        assertEquals(\" \", Decoder.getCharacter(Decoder.Table.DIGIT, 1), \"DIGIT_TABLE should return ' ' (space) for code 1\");\n        assertEquals(\"CTRL_US\", Decoder.getCharacter(Decoder.Table.DIGIT, Decoder.DIGIT_TABLE.length - 1), \"DIGIT_TABLE should return 'CTRL_US' for the last code\");\n\n        // Out of bounds access should throw an exception\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> Decoder.getCharacter(Decoder.Table.UPPER, Decoder.UPPER_TABLE.length), \"Expecting ArrayIndexOutOfBoundsException for code outside of UPPER_TABLE range\");\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> Decoder.getCharacter(Decoder.Table.LOWER, -1), \"Expecting ArrayIndexOutOfBoundsException for negative code index\");\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class DecoderTest {\n\n    @Test\n    public void getCharacterTest() {\n        String upperCharacter = Decoder.getCharacter(Decoder.Table.UPPER, 2);\n        assertEquals(\"A\", upperCharacter);\n\n        String lowerCharacter = Decoder.getCharacter(Decoder.Table.LOWER, 2);\n        assertEquals(\"a\", lowerCharacter);\n\n        String mixedCharacter = Decoder.getCharacter(Decoder.Table.MIXED, 2);\n        assertEquals(\"\\1\", mixedCharacter); // Assuming \"\\1\" is allowed in the context of this test\n\n        String punctCharacter = Decoder.getCharacter(Decoder.Table.PUNCT, 2);\n        assertEquals(\"\\r\\n\", punctCharacter);\n\n        String digitCharacter = Decoder.getCharacter(Decoder.Table.DIGIT, 2);\n        assertEquals(\"0\", digitCharacter);\n\n        // Test for out-of-bounds access\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n            Decoder.getCharacter(Decoder.Table.DIGIT, -1);\n        });\n\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n            Decoder.getCharacter(Decoder.Table.DIGIT, 100);\n        });\n\n        // Test for IllegalStateException on default case\n        assertThrows(IllegalStateException.class, () -> {\n            Decoder.getCharacter(null, 2);\n        });\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n\n    @Test\n    public void getCharacterTest() {\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 2));\n        assertEquals(\"a\", Decoder.getCharacter(Decoder.Table.LOWER, 2));\n        assertEquals(\"@\", Decoder.getCharacter(Decoder.Table.MIXED, 21));\n        assertEquals(\"$\", Decoder.getCharacter(Decoder.Table.PUNCT, 9));\n        assertEquals(\"2\", Decoder.getCharacter(Decoder.Table.DIGIT, 2));\n\n        Exception exception;\n\n        // Testing lower bound edge case\n        exception = assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n            Decoder.getCharacter(Decoder.Table.UPPER, -1);\n        });\n        assertTrue(exception instanceof ArrayIndexOutOfBoundsException);\n\n        // Testing upper bound edge case\n        exception = assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n            Decoder.getCharacter(Decoder.Table.UPPER, Decoder.UPPER_TABLE.length);\n        });\n        assertTrue(exception instanceof ArrayIndexOutOfBoundsException);\n\n        // Testing with invalid table case\n        exception = assertThrows(IllegalStateException.class, () -> {\n            // There is no \"BINARY\" case in getCharacter, so we expect an exception.\n            Decoder.getCharacter(Decoder.Table.BINARY, 1);\n        });\n        assertEquals(\"Bad table\", exception.getMessage());\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n\n    @Test\n    public void getCharacterTest() {\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 2));\n        assertEquals(\"a\", Decoder.getCharacter(Decoder.Table.LOWER, 2));\n        assertEquals(\"\\1\", Decoder.getCharacter(Decoder.Table.MIXED, 2));\n        assertEquals(\"\\r\", Decoder.getCharacter(Decoder.Table.PUNCT, 1));\n        assertEquals(\"0\", Decoder.getCharacter(Decoder.Table.DIGIT, 2));\n        assertThrows(IllegalStateException.class, () -> Decoder.getCharacter(null, 2));\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n    \n    @Test\n    public void getCharacterTest() {\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 2));\n        assertEquals(\"a\", Decoder.getCharacter(Decoder.Table.LOWER, 2));\n        assertEquals(\"@\", Decoder.getCharacter(Decoder.Table.MIXED, 21));\n        assertEquals(\"?\", Decoder.getCharacter(Decoder.Table.PUNCT, 22));\n        assertEquals(\"5\", Decoder.getCharacter(Decoder.Table.DIGIT, 5));\n\n        Exception exception = assertThrows(IllegalStateException.class, () -> {\n            Decoder.getCharacter(null, 1);\n        });\n        String expectedMessage = \"Bad table\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}"
    ]
}