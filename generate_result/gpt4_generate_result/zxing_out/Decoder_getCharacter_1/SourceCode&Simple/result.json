{
    "project_name": "zxing",
    "file_name": "Decoder.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/decoder/Decoder.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.decoder",
    "docstring": "/**\n   * Gets the character (or string) corresponding to the passed code in the given table\n   *\n   * @param table the table used\n   * @param code the code of the character\n   */",
    "source_code": "\nprivate static String getCharacter(Table table, int code) {\n  switch (table) {\n    case UPPER:\n      return UPPER_TABLE[code];\n    case LOWER:\n      return LOWER_TABLE[code];\n    case MIXED:\n      return MIXED_TABLE[code];\n    case PUNCT:\n      return PUNCT_TABLE[code];\n    case DIGIT:\n      return DIGIT_TABLE[code];\n    default:\n      // Should not reach here.\n      throw new IllegalStateException(\"Bad table\");\n  }\n}\n",
    "class_name": "Decoder",
    "method_name": "getCharacter",
    "arguments": [
        "Table table",
        "int code"
    ],
    "generate_test": [
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n\n    // Initialize constant tables if required\n    private static final String UPPER_TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    private static final String LOWER_TABLE = \"abcdefghijklmnopqrstuvwxyz\";\n    private static final String MIXED_TABLE = \"+-*/\\\\<=>[] .\";\n    private static final String PUNCT_TABLE = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\n    private static final String DIGIT_TABLE = \"0123456789\";\n\n    @Test\n    public void getCharacterTest() {\n        assertEquals('A', Decoder.getCharacter(Decoder.Table.UPPER, 0), \n            \"Should return 'A' for UPPER table with code 0\");\n        assertEquals('a', Decoder.getCharacter(Decoder.Table.LOWER, 0), \n            \"Should return 'a' for LOWER table with code 0\");\n        assertEquals('+', Decoder.getCharacter(Decoder.Table.MIXED, 0), \n            \"Should return '+' for MIXED table with code 0\");\n        assertEquals('!', Decoder.getCharacter(Decoder.Table.PUNCT, 0), \n            \"Should return '!' for PUNCT table with code 0\");\n        assertEquals('0', Decoder.getCharacter(Decoder.Table.DIGIT, 0), \n            \"Should return '0' for DIGIT table with code 0\");\n\n        // Testing for indexes outside the bounds of the tables\n        Exception exception;\n        exception = assertThrows(IllegalArgumentException.class, () -> Decoder.getCharacter(Decoder.Table.UPPER, -1),\n            \"Should throw IllegalArgumentException for invalid code\");\n        exception = assertThrows(IllegalArgumentException.class, () -> Decoder.getCharacter(Decoder.Table.UPPER, UPPER_TABLE.length()),\n            \"Should throw IllegalArgumentException for code out of table bounds\");\n\n        // Testing the default case when an invalid table is passed\n        exception = assertThrows(IllegalStateException.class, () -> Decoder.getCharacter(null, 0),\n            \"Should throw IllegalStateException for bad table\");\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n\n    // Since the tables are not actually provided in the JAVA Source Code you gave, \n    // I will stub out non-existent tables with dummy values.\n    // In reality, these tables would be filled with actual characters.\n    static {\n        Decoder.UPPER_TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ      \"; // 26 letters of the alphabet + padding\n        Decoder.LOWER_TABLE = \"abcdefghijklmnopqrstuvwxyz      \"; // Same here for lowercase\n        Decoder.MIXED_TABLE = \"0123456789&*,-./:+?               \"; // Some special characters + padding\n        Decoder.PUNCT_TABLE = \";<>@[\\\\]_`~!\\\"#%'()*.                \"; // Punctuation marks + padding\n        Decoder.DIGIT_TABLE = \"0123456789                      \"; // Digits + padding\n    }\n\n    @Test\n    public void getCharacterTest() {\n        // Now I'm filling in the places with <FILL> tags.\n        assertEquals('A', Decoder.getCharacter(Decoder.Table.UPPER, 0));\n        assertEquals('a', Decoder.getCharacter(Decoder.Table.LOWER, 0));\n        assertEquals('0', Decoder.getCharacter(Decoder.Table.MIXED, 0));\n        assertEquals(';', Decoder.getCharacter(Decoder.Table.PUNCT, 0));\n        assertEquals('0', Decoder.getCharacter(Decoder.Table.DIGIT, 0));\n\n        // Test with other indices\n        assertEquals('B', Decoder.getCharacter(Decoder.Table.UPPER, 1));\n        assertEquals('b', Decoder.getCharacter(Decoder.Table.LOWER, 1));\n        assertEquals('1', Decoder.getCharacter(Decoder.Table.MIXED, 1));\n        assertEquals('>', Decoder.getCharacter(Decoder.Table.PUNCT, 1));\n        assertEquals('1', Decoder.getCharacter(Decoder.Table.DIGIT, 1));\n\n        // Test out of bounds - expect ArrayIndexOutOfBoundsException or similar\n        assertThrows(IndexOutOfBoundsException.class, () -> {\n            Decoder.getCharacter(Decoder.Table.UPPER, 30); // Assuming the tables have less than 30 characters\n        });\n        \n        // Test invalid table - IllegalStateException as per the default case\n        assertThrows(IllegalStateException.class, () -> {\n            Decoder.getCharacter(null, 0);\n        });\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n    \n    static final private String UPPER_TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    static final private String LOWER_TABLE = \"abcdefghijklmnopqrstuvwxyz\";\n    static final private String MIXED_TABLE = \"+-*/=:\";\n    static final private String PUNCT_TABLE = \"!@#\";\n    static final private String DIGIT_TABLE = \"0123456789\";\n\n    @Test\n    public void getCharacterTest() {\n        // Assuming fixed content for the static tables for the purpose of this test\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 0));\n        assertEquals(\"a\", Decoder.getCharacter(Decoder.Table.LOWER, 0));\n        assertEquals(\"+\", Decoder.getCharacter(Decoder.Table.MIXED, 0));\n        assertEquals(\"!\", Decoder.getCharacter(Decoder.Table.PUNCT, 0));\n        assertEquals(\"0\", Decoder.getCharacter(Decoder.Table.DIGIT, 0));\n        \n        // Test for index out of range or invalid index\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> Decoder.getCharacter(Decoder.Table.UPPER, UPPER_TABLE.length()));\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> Decoder.getCharacter(Decoder.Table.LOWER, LOWER_TABLE.length()));\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> Decoder.getCharacter(Decoder.Table.MIXED, MIXED_TABLE.length()));\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> Decoder.getCharacter(Decoder.Table.PUNCT, PUNCT_TABLE.length()));\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> Decoder.getCharacter(Decoder.Table.DIGIT, DIGIT_TABLE.length()));\n\n        // Test for invalid table\n        assertThrows(IllegalStateException.class, () -> Decoder.getCharacter(null, 0));\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n    // Assuming that the tables are being initialized with some example data\n    static {\n        Decoder.UPPER_TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        Decoder.LOWER_TABLE = \"abcdefghijklmnopqrstuvwxyz\";\n        Decoder.MIXED_TABLE = \"+-*/=^\";\n        Decoder.PUNCT_TABLE = \"!@#%&\";\n        Decoder.DIGIT_TABLE = \"0123456789\";\n    }\n\n    @Test\n    public void getCharacterTest() {\n        // Test cases for UPPER table\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 0));\n        assertEquals(\"B\", Decoder.getCharacter(Decoder.Table.UPPER, 1));\n        \n        // Test cases for LOWER table\n        assertEquals(\"a\", Decoder.getCharacter(Decoder.Table.LOWER, 0));\n        assertEquals(\"b\", Decoder.getCharacter(Decoder.Table.LOWER, 1));\n        \n        // Test cases for MIXED table\n        assertEquals(\"+\", Decoder.getCharacter(Decoder.Table.MIXED, 0));\n        assertEquals(\"-\", Decoder.getCharacter(Decoder.Table.MIXED, 1));\n        \n        // Test cases for PUNCT table\n        assertEquals(\"!\", Decoder.getCharacter(Decoder.Table.PUNCT, 0));\n        assertEquals(\"@\", Decoder.getCharacter(Decoder.Table.PUNCT, 1));\n        \n        // Test cases for DIGIT table\n        assertEquals(\"0\", Decoder.getCharacter(Decoder.Table.DIGIT, 0));\n        assertEquals(\"1\", Decoder.getCharacter(Decoder.Table.DIGIT, 1));\n        \n        // Test invalid code handling\n        Exception exception = assertThrows(IllegalStateException.class, () -> {\n            Decoder.getCharacter(Decoder.Table.UPPER, -1);\n        });\n        String expectedMessage = \"Bad table\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage));\n        \n        // Test invalid table handling by passing a non-existing enum value (assuming it's possible)\n        // Note: Depending on how the Decoder class is written and if the enum is public or private,\n        // it might not be possible to add a new non-existing enum value to it for this test.\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n    \n    // Assuming static initializer blocks that initialize tables for test context\n    static {\n        Decoder.UPPER_TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        Decoder.LOWER_TABLE = \"abcdefghijklmnopqrstuvwxyz\";\n        Decoder.MIXED_TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n        Decoder.DIGIT_TABLE = \"0123456789\";\n        Decoder.PUNCT_TABLE = \"!@#&()\u2013[{}]:;',?/*\";\n    }\n    \n    @Test\n    public void getCharacterTest() {\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 0),\n                \"The character from the UPPER table with code 0 should be 'A'\");\n        assertEquals(\"a\", Decoder.getCharacter(Decoder.Table.LOWER, 0),\n                \"The character from the LOWER table with code 0 should be 'a'\");\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.MIXED, 0),\n                \"The character from the MIXED table with code 0 should be 'A'\");\n        assertEquals(\"0\", Decoder.getCharacter(Decoder.Table.DIGIT, 0),\n                \"The character from the DIGIT table with code 0 should be '0'\");\n        assertEquals(\"!\", Decoder.getCharacter(Decoder.Table.PUNCT, 0),\n                \"The character from the PUNCT table with code 0 should be '!'\");\n        \n        // Test for an invalid code value which is outside the range of the UPPER table\n        Exception exception = assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n            Decoder.getCharacter(Decoder.Table.UPPER, 26);\n        });\n        String expectedMessage = \"Index 26 out of bounds for length 26\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage),\n                \"Should throw an ArrayIndexOutOfBoundsException for a code value outside the UPPER table range.\");\n        \n        // Test for an invalid table which should throw IllegalStateException.\n        IllegalStateException illegalStateException = assertThrows(IllegalStateException.class, () -> {\n            Decoder.getCharacter(null, 0);\n        });\n        assertEquals(\"Bad table\", illegalStateException.getMessage(),\n                \"Should throw an IllegalStateException when passed a null table.\");\n    }\n}",
        "// Assume the tables are initialized to some values, for test purposes let's initialize them with some dummy data\nstatic {\n    UPPER_TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    LOWER_TABLE = \"abcdefghijklmnopqrstuvwxyz\";\n    MIXED_TABLE = \"0123456789&:,.=+-*/\";\n    PUNCT_TABLE = \";<>@[\\\\]_`~!\\\"\\r\\t,%?()-'\";\n    DIGIT_TABLE = \"0123456789\";\n}\n\n@Test\npublic void getCharacterTest() {\n    assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 0));\n    assertEquals(\"a\", Decoder.getCharacter(Decoder.Table.LOWER, 0));\n    assertEquals(\"0\", Decoder.getCharacter(Decoder.Table.MIXED, 0));\n    assertEquals(\";\", Decoder.getCharacter(Decoder.Table.PUNCT, 0));\n    assertEquals(\"0\", Decoder.getCharacter(Decoder.Table.DIGIT, 0));\n\n    assertThrows(IllegalStateException.class, () -> {\n        Decoder.getCharacter(null, 0);\n    });\n\n    int upperTableLength = UPPER_TABLE.length();\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n        Decoder.getCharacter(Decoder.Table.UPPER, upperTableLength);\n    });\n\n    int lowerTableLength = LOWER_TABLE.length();\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n        Decoder.getCharacter(Decoder.Table.LOWER, lowerTableLength);\n    });\n\n    int mixedTableLength = MIXED_TABLE.length();\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n        Decoder.getCharacter(Decoder.Table.MIXED, mixedTableLength);\n    });\n\n    int punctTableLength = PUNCT_TABLE.length();\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n        Decoder.getCharacter(Decoder.Table.PUNCT, punctTableLength);\n    });\n\n    int digitTableLength = DIGIT_TABLE.length();\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n        Decoder.getCharacter(Decoder.Table.DIGIT, digitTableLength);\n    });\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n\n    @Test\n    public void getCharacterTest() {\n        // Assuming dummy string data for each table for testing purpose\n        Decoder.UPPER_TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        Decoder.LOWER_TABLE = \"abcdefghijklmnopqrstuvwxyz\";\n        Decoder.MIXED_TABLE = \"+-*/= $%\";\n        Decoder.PUNCT_TABLE = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_\";\n        Decoder.DIGIT_TABLE = \"0123456789\";\n\n        // Test for UPPER table\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 0));\n        assertEquals(\"Z\", Decoder.getCharacter(Decoder.Table.UPPER, 25));\n\n        // Test for LOWER table\n        assertEquals(\"a\", Decoder.getCharacter(Decoder.Table.LOWER, 0));\n        assertEquals(\"z\", Decoder.getCharacter(Decoder.Table.LOWER, 25));\n\n        // Test for MIXED table\n        assertEquals(\"+\", Decoder.getCharacter(Decoder.Table.MIXED, 0));\n        assertEquals(\"%\", Decoder.getCharacter(Decoder.Table.MIXED, 5));\n\n        // Test for PUNCT table\n        assertEquals(\"!\", Decoder.getCharacter(Decoder.Table.PUNCT, 0));\n        assertEquals(\"_\", Decoder.getCharacter(Decoder.Table.PUNCT, 20));\n\n        // Test for DIGIT table\n        assertEquals(\"0\", Decoder.getCharacter(Decoder.Table.DIGIT, 0));\n        assertEquals(\"9\", Decoder.getCharacter(Decoder.Table.DIGIT, 9));\n\n        // Test for invalid table, expecting an exception\n        assertThrows(IllegalStateException.class, () -> {\n            Decoder.getCharacter(null, 0);\n        });\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n    \n    private static Decoder.Table[] tables;\n    private static String[] upperTableFake, lowerTableFake, mixedTableFake, punctTableFake, digitTableFake;\n    \n    @BeforeAll\n    public static void setUpClass() {\n        // Fake tables are created since actual table data is not provided\n        upperTableFake = new String[]{\"A\", \"B\", \"C\", \"D\"};\n        lowerTableFake = new String[]{\"a\", \"b\", \"c\", \"d\"};\n        mixedTableFake = new String[]{\"@\", \"#\", \"$\", \"%\"};\n        punctTableFake = new String[]{\".\", \",\", \"!\", \"?\"};\n        digitTableFake = new String[]{\"0\", \"1\", \"2\", \"3\"};\n        \n        // Assuming the Decoder class has public accessors for the tables\n        // If those don't exist, this test needs to be adapted to however the Decoder class provides access\n        Decoder.setUPPER_TABLE(upperTableFake);\n        Decoder.setLOWER_TABLE(lowerTableFake);\n        Decoder.setMIXED_TABLE(mixedTableFake);\n        Decoder.setPUNCT_TABLE(punctTableFake);\n        Decoder.setDIGIT_TABLE(digitTableFake);\n        \n        // Initialize all available tables\n        tables = Decoder.Table.values();\n    }\n\n    @Test\n    public void getCharacterTest() {\n        // Test for UPPER table\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 0));\n        assertEquals(\"D\", Decoder.getCharacter(Decoder.Table.UPPER, 3));\n        \n        // Test for LOWER table\n        assertEquals(\"a\", Decoder.getCharacter(Decoder.Table.LOWER, 0));\n        assertEquals(\"d\", Decoder.getCharacter(Decoder.Table.LOWER, 3));\n        \n        // Test for MIXED table\n        assertEquals(\"@\", Decoder.getCharacter(Decoder.Table.MIXED, 0));\n        assertEquals(\"%\", Decoder.getCharacter(Decoder.Table.MIXED, 3));\n        \n        // Test for PUNCT table\n        assertEquals(\".\", Decoder.getCharacter(Decoder.Table.PUNCT, 0));\n        assertEquals(\"?\", Decoder.getCharacter(Decoder.Table.PUNCT, 3));\n        \n        // Test for DIGIT table\n        assertEquals(\"0\", Decoder.getCharacter(Decoder.Table.DIGIT, 0));\n        assertEquals(\"3\", Decoder.getCharacter(Decoder.Table.DIGIT, 3));\n        \n        // Test for illegal argument\n        Exception exception = assertThrows(IllegalStateException.class, () -> {\n            Decoder.getCharacter(null, 0);\n        });\n        String expectedMessage = \"Bad table\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n    \n    // Assuming these tables are initialized appropriately elsewhere in the code.\n    // These must be initialized before running the tests.\n    static {\n        Decoder.UPPER_TABLE = new String[] { \"A\", \"B\", \"C\", \"D\", \"E\" }; // ...\n        Decoder.LOWER_TABLE = new String[] { \"a\", \"b\", \"c\", \"d\", \"e\" }; // ...\n        Decoder.MIXED_TABLE = new String[] { \"@\", \"#\", \"$\", \"%\", \"&\" }; // ...\n        Decoder.PUNCT_TABLE = new String[] { \".\", \",\", \":\", \";\", \"!\" }; // ...\n        Decoder.DIGIT_TABLE = new String[] { \"0\", \"1\", \"2\", \"3\", \"4\" }; // ...\n    }\n\n    @Test\n    public void getCharacterTest() {\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 0));\n        assertEquals(\"b\", Decoder.getCharacter(Decoder.Table.LOWER, 1));\n        assertEquals(\"$\", Decoder.getCharacter(Decoder.Table.MIXED, 2));\n        assertEquals(\";\", Decoder.getCharacter(Decoder.Table.PUNCT, 3));\n        assertEquals(\"4\", Decoder.getCharacter(Decoder.Table.DIGIT, 4));\n        \n        // Test for an invalid table case, expecting IllegalStateException\n        assertThrows(IllegalStateException.class, () -> {\n            Decoder.getCharacter(null, 0);\n        });\n        \n        // Test for out-of-bounds code indices, assuming tables have a size of 5 for this example\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n            Decoder.getCharacter(Decoder.Table.UPPER, 5);\n        });\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n    private static final String[] UPPER_TABLE = {\"A\", \"B\", \"C\", \"D\"};\n    private static final String[] LOWER_TABLE = {\"a\", \"b\", \"c\", \"d\"};\n    private static final String[] MIXED_TABLE = {\"@\", \"#\", \"$\", \"%\"};\n    private static final String[] PUNCT_TABLE = {\",\", \".\", \"!\", \"?\"};\n    private static final String[] DIGIT_TABLE = {\"0\", \"1\", \"2\", \"3\"};\n\n    // We need to make the getCharacter() method and the Table enum 'package-private' or 'public' \n    // in order to test it.\n    \n    @Test\n    public void getCharacterTest() {\n        assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 0), \"UPPER table index 0 should return 'A'\");\n        assertEquals(\"b\", Decoder.getCharacter(Decoder.Table.LOWER, 1), \"LOWER table index 1 should return 'b'\");\n        assertEquals(\"$\", Decoder.getCharacter(Decoder.Table.MIXED, 2), \"MIXED table index 2 should return '$'\");\n        assertEquals(\"!\", Decoder.getCharacter(Decoder.Table.PUNCT, 3), \"PUNCT table index 3 should return '!'\");\n        assertEquals(\"1\", Decoder.getCharacter(Decoder.Table.DIGIT, 1), \"DIGIT table index 1 should return '1'\");\n        \n        // Now test for the exceptions - for the case where the code is out of bounds for the given table.\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> Decoder.getCharacter(Decoder.Table.UPPER, 100),\n            \"Shoud throw ArrayIndexOutOfBoundsException for an invalid index\");\n        \n        // Option for testing code which is not part of enum\n        assertThrows(IllegalStateException.class, () -> Decoder.getCharacter(null, 0),\n            \"Should throw IllegalStateException for null table\");\n    }\n}"
    ]
}