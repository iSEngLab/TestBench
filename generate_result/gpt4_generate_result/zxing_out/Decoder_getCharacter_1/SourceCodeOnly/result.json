{
    "project_name": "zxing",
    "file_name": "Decoder.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/decoder/Decoder.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.decoder",
    "docstring": "/**\n   * Gets the character (or string) corresponding to the passed code in the given table\n   *\n   * @param table the table used\n   * @param code the code of the character\n   */",
    "source_code": "\nprivate static String getCharacter(Table table, int code) {\n  switch (table) {\n    case UPPER:\n      return UPPER_TABLE[code];\n    case LOWER:\n      return LOWER_TABLE[code];\n    case MIXED:\n      return MIXED_TABLE[code];\n    case PUNCT:\n      return PUNCT_TABLE[code];\n    case DIGIT:\n      return DIGIT_TABLE[code];\n    default:\n      // Should not reach here.\n      throw new IllegalStateException(\"Bad table\");\n  }\n}\n",
    "class_name": "Decoder",
    "method_name": "getCharacter",
    "arguments": [
        "Table table",
        "int code"
    ],
    "generate_test": [
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n\n    private static final String[] UPPER_TABLE = {\"A\", \"B\", \"C\"}; // Mock data for UPPER_TABLE\n    private static final String[] LOWER_TABLE = {\"a\", \"b\", \"c\"}; // Mock data for LOWER_TABLE\n    private static final String[] MIXED_TABLE = {\"@\", \"#\", \"$\"}; // Mock data for MIXED_TABLE\n    private static final String[] PUNCT_TABLE = {\".\", \",\", \"!\"}; // Mock data for PUNCT_TABLE\n    private static final String[] DIGIT_TABLE = {\"0\", \"1\", \"2\"}; // Mock data for DIGIT_TABLE\n    \n    // Assuming an enum is defined like this\n    private enum Table {\n        UPPER,\n        LOWER,\n        MIXED,\n        PUNCT,\n        DIGIT\n    }\n\n    private static String getCharacter(Table table, int code) {\n        switch (table) {\n            case UPPER:\n                return UPPER_TABLE[code];\n            case LOWER:\n                return LOWER_TABLE[code];\n            case MIXED:\n                return MIXED_TABLE[code];\n            case PUNCT:\n                return PUNCT_TABLE[code];\n            case DIGIT:\n                return DIGIT_TABLE[code];\n            default:\n                // Should not reach here.\n                throw new IllegalStateException(\"Bad table\");\n        }\n    }\n\n    @Test\n    public void getCharacterTest() {\n        assertEquals(\"A\", getCharacter(Table.UPPER, 0));\n        assertEquals(\"b\", getCharacter(Table.LOWER, 1));\n        assertEquals(\"@\", getCharacter(Table.MIXED, 0));\n        assertEquals(\",\", getCharacter(Table.PUNCT, 1));\n        assertEquals(\"1\", getCharacter(Table.DIGIT, 1));\n\n        // Test beyond the array boundary\n        Exception exception = assertThrows(ArrayIndexOutOfBoundsException.class, () ->\n                getCharacter(Table.UPPER, UPPER_TABLE.length));\n        // Additionally, testing illegal table usage\n        assertThrows(IllegalStateException.class, () ->\n                getCharacter(null, 0));\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n\n    private static final String[] UPPER_TABLE = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"};\n    private static final String[] LOWER_TABLE = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"};\n    private static final String[] MIXED_TABLE = {\"@\", \"#\", \"$\", \"%\", \"&\", \"*\", \"+\"};\n    private static final String[] PUNCT_TABLE = {\".\", \",\", \":\", \";\", \"!\", \"\\\"\", \"'\"};\n    private static final String[] DIGIT_TABLE = {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"};\n\n    // Assume we have an enum Table with constants UPPER, LOWER, MIXED, PUNCT, DIGIT.\n    private enum Table {\n        UPPER, LOWER, MIXED, PUNCT, DIGIT\n    }\n\n    private static String getCharacter(Table table, int code) {\n        switch (table) {\n            case UPPER:\n                return UPPER_TABLE[code];\n            case LOWER:\n                return LOWER_TABLE[code];\n            case MIXED:\n                return MIXED_TABLE[code];\n            case PUNCT:\n                return PUNCT_TABLE[code];\n            case DIGIT:\n                return DIGIT_TABLE[code];\n            default:\n                // Should not reach here.\n                throw new IllegalStateException(\"Bad table\");\n        }\n    }\n\n    @Test\n    public void getCharacterTest() {\n        assertEquals(\"A\", getCharacter(Table.UPPER, 0));\n        assertEquals(\"b\", getCharacter(Table.LOWER, 1));\n        assertEquals(\"$\", getCharacter(Table.MIXED, 2));\n        assertEquals(\":\", getCharacter(Table.PUNCT, 2));\n        assertEquals(\"3\", getCharacter(Table.DIGIT, 3));\n        assertThrows(IllegalStateException.class, () -> getCharacter(null, 0));\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n    private static final String[] UPPER_TABLE = { \"A\", \"B\", \"C\" }; // Mock table for demonstration\n    private static final String[] LOWER_TABLE = { \"a\", \"b\", \"c\" }; // Mock table for demonstration\n    private static final String[] MIXED_TABLE = { \"@\", \"#\", \"$\" }; // Mock table for demonstration\n    private static final String[] PUNCT_TABLE = { \"!\", \"?\", \".\" }; // Mock table for demonstration\n    private static final String[] DIGIT_TABLE = { \"0\", \"1\", \"2\" }; // Mock table for demonstration\n\n    @Test\n    public void getCharacterTest() {\n        // Mock enum for demonstration\n        enum Table {\n            UPPER, LOWER, MIXED, PUNCT, DIGIT\n        }\n\n        // Test cases for the UPPER_TABLE\n        assertEquals(\"A\", Decoder.getCharacter(Table.UPPER, 0));\n        assertEquals(\"B\", Decoder.getCharacter(Table.UPPER, 1));\n\n        // Test cases for the LOWER_TABLE\n        assertEquals(\"a\", Decoder.getCharacter(Table.LOWER, 0));\n        assertEquals(\"b\", Decoder.getCharacter(Table.LOWER, 1));\n\n        // Test cases for the MIXED_TABLE\n        assertEquals(\"@\", Decoder.getCharacter(Table.MIXED, 0));\n        assertEquals(\"#\", Decoder.getCharacter(Table.MIXED, 1));\n\n        // Test cases for the PUNCT_TABLE\n        assertEquals(\"!\", Decoder.getCharacter(Table.PUNCT, 0));\n        assertEquals(\"?\", Decoder.getCharacter(Table.PUNCT, 1));\n\n        // Test cases for the DIGIT_TABLE\n        assertEquals(\"0\", Decoder.getCharacter(Table.DIGIT, 0));\n        assertEquals(\"1\", Decoder.getCharacter(Table.DIGIT, 1));\n\n        // Test invalid code\n        Exception exception = assertThrows(IllegalStateException.class, () -> {\n            Decoder.getCharacter(Table.UPPER, -1);\n        });\n        assertEquals(\"Bad table\", exception.getMessage());\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Table {\n    static final Table UPPER = new Table();\n    static final Table LOWER = new Table();\n    static final Table MIXED = new Table();\n    static final Table PUNCT = new Table();\n    static final Table DIGIT = new Table();\n    // ...\n}\n\npublic class DecoderTest {\n\n    // Assuming existence of actual tables for example purpose\n    private static final String[] UPPER_TABLE = {\"A\", \"B\", \"C\"};\n    private static final String[] LOWER_TABLE = {\"a\", \"b\", \"c\"};\n    private static final String[] MIXED_TABLE = {\"@\", \"#\", \"$\"};\n    private static final String[] PUNCT_TABLE = {\".\", \",\", \";\"};\n    private static final String[] DIGIT_TABLE = {\"0\", \"1\", \"2\"};\n    \n    // Sample implementation to match context\n    // Note that in real scenarios, getCharacter should not be private.\n    private static String getCharacter(Table table, int code) {\n      switch (table) {\n        case UPPER:\n          return UPPER_TABLE[code];\n        case LOWER:\n          return LOWER_TABLE[code];\n        case MIXED:\n          return MIXED_TABLE[code];\n        case PUNCT:\n          return PUNCT_TABLE[code];\n        case DIGIT:\n          return DIGIT_TABLE[code];\n        default:\n          throw new IllegalStateException(\"Bad table\");\n      }\n    }\n    \n    @Test\n    public void getCharacterTest() {\n        assertEquals(\"A\", getCharacter(Table.UPPER, 0));\n        assertEquals(\"b\", getCharacter(Table.LOWER, 1));\n        assertEquals(\"@\", getCharacter(Table.MIXED, 0));\n        assertEquals(\".\", getCharacter(Table.PUNCT, 0));\n        assertEquals(\"1\", getCharacter(Table.DIGIT, 1));\n\n        Exception exception = assertThrows(IllegalStateException.class, () -> {\n            getCharacter(null, 0);\n        });\n        assertEquals(\"Bad table\", exception.getMessage());\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass DecoderTest {\n    @Test\n    public void getCharacterUpperCaseTest() {\n        assertEquals(\"A\", Decoder.getCharacter(Table.UPPER, 0)); // Assuming that UPPER_TABLE[0] = \"A\"\n    }\n\n    @Test\n    public void getCharacterLowerCaseTest() {\n        assertEquals(\"a\", Decoder.getCharacter(Table.LOWER, 0)); // Assuming that LOWER_TABLE[0] = \"a\"\n    }\n\n    @Test\n    public void getCharacterMixedCaseTest() {\n        assertEquals(\"@\", Decoder.getCharacter(Table.MIXED, 0)); // Assuming that MIXED_TABLE[0] = \"@\"\n    }\n\n    @Test\n    public void getCharacterPunctCaseTest() {\n        assertEquals(\"!\", Decoder.getCharacter(Table.PUNCT, 0)); // Assuming that PUNCT_TABLE[0] = \"!\"\n    }\n\n    @Test\n    public void getCharacterDigitCaseTest() {\n        assertEquals(\"0\", Decoder.getCharacter(Table.DIGIT, 0)); // Assuming that DIGIT_TABLE[0] = \"0\"\n    }\n\n    @Test\n    public void getCharacterInvalidTableTest() {\n        Exception exception = assertThrows(IllegalStateException.class, () -> {\n            Decoder.getCharacter(null, 0);\n        });\n        assertEquals(\"Bad table\", exception.getMessage());\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n\n    private static final String[] UPPER_TABLE = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"};\n    private static final String[] LOWER_TABLE = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n    private static final String[] MIXED_TABLE = {\" \", \"!\", \"\\\"\", \"#\", \"$\", \"%\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \"-\", \".\", \"/\", \":\", \";\", \"<\", \"=\", \">\", \"?\", \"@\", \"[\", \"\\\\\", \"]\", \"^\", \"_\", \"`\", \"{\", \"|\", \"}\", \"~\",};\n    private static final String[] PUNCT_TABLE = {\"\\r\", \"\\r\\n\", \". \", \", \", \": \", \"!\", \"\\\"\", \"#\", \"$\", \"%\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \"-\", \".\", \"/\", \":\", \";\", \"<\", \"=\", \">\", \"?\", \"@\", \"[\", \"\\\\\", \"]\", \"^\", \"_\"};\n    private static final String[] DIGIT_TABLE = {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \",\", \".\"};\n\n    @Test\n    public void getCharacterTest() {\n        assertEquals(\"A\", getCharacter(Table.UPPER, 0));\n        assertEquals(\"a\", getCharacter(Table.LOWER, 0));\n        assertEquals(\" \", getCharacter(Table.MIXED, 0));\n        assertEquals(\"\\r\", getCharacter(Table.PUNCT, 0));\n        assertEquals(\"0\", getCharacter(Table.DIGIT, 0));\n        Exception exception = assertThrows(IllegalStateException.class, () -> {\n            getCharacter(null, 0);\n        });\n        assertEquals(\"Bad table\", exception.getMessage());\n    }\n\n    private static String getCharacter(Table table, int code) {\n        switch (table) {\n            case UPPER:\n                return UPPER_TABLE[code];\n            case LOWER:\n                return LOWER_TABLE[code];\n            case MIXED:\n                return MIXED_TABLE[code];\n            case PUNCT:\n                return PUNCT_TABLE[code];\n            case DIGIT:\n                return DIGIT_TABLE[code];\n            default:\n                // Should not reach here.\n                throw new IllegalStateException(\"Bad table\");\n        }\n    }\n\n    enum Table {\n        UPPER, LOWER, MIXED, PUNCT, DIGIT\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n\n    // Assuming these are the tables defined somewhere in the code\n    private static final char[] UPPER_TABLE = {'A', 'B', 'C', 'D', 'E'};\n    private static final char[] LOWER_TABLE = {'a', 'b', 'c', 'd', 'e'};\n    private static final char[] MIXED_TABLE = {'@', '#', '$', '%', '^'};\n    private static final char[] PUNCT_TABLE = {'.', ',', '!', '?', ':'};\n    private static final char[] DIGIT_TABLE = {'0', '1', '2', '3', '4'};\n\n    // Assuming 'Table' is an enum defined like this\n    private enum Table {\n        UPPER, LOWER, MIXED, PUNCT, DIGIT\n    }\n\n    @Test\n    public void getCharacterTest() {\n        assertEquals('A', Decoder.getCharacter(Table.UPPER, 0));\n        assertEquals('b', Decoder.getCharacter(Table.LOWER, 1));\n        assertEquals('$', Decoder.getCharacter(Table.MIXED, 2));\n        assertEquals('!', Decoder.getCharacter(Table.PUNCT, 3));\n        assertEquals('4', Decoder.getCharacter(Table.DIGIT, 4));\n\n        assertThrows(IllegalStateException.class, () -> Decoder.getCharacter(null, 0));\n    }\n\n    // I assumed 'Decoder' is a class that contains the method 'getCharacter'\n    // and made it static to align with how it's being used in the test method.\n    private static class Decoder {\n        private static String getCharacter(Table table, int code) {\n            switch (table) {\n                case UPPER:\n                    return String.valueOf(UPPER_TABLE[code]);\n                case LOWER:\n                    return String.valueOf(LOWER_TABLE[code]);\n                case MIXED:\n                    return String.valueOf(MIXED_TABLE[code]);\n                case PUNCT:\n                    return String.valueOf(PUNCT_TABLE[code]);\n                case DIGIT:\n                    return String.valueOf(DIGIT_TABLE[code]);\n                default:\n                    // Should not reach here.\n                    throw new IllegalStateException(\"Bad table\");\n            }\n        }\n    }\n}\n",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass DecoderTest {\n    \n    private static final String[] UPPER_TABLE = // ... initialize this array as required\n    private static final String[] LOWER_TABLE = // ... initialize this array as required\n    private static final String[] MIXED_TABLE = // ... initialize this array as required\n    private static final String[] PUNCT_TABLE = // ... initialize this array as required\n    private static final String[] DIGIT_TABLE = // ... initialize this array as required\n\n    // Using a hypothetical Table enum based on the switch cases\n    private enum Table {\n        UPPER,\n        LOWER,\n        MIXED,\n        PUNCT,\n        DIGIT\n    }\n    \n    @Test\n    public void getCharacterTest() {\n        int testCode = 0; // replace with an appropriate index if required\n        assertEquals(UPPER_TABLE[testCode], Decoder.getCharacter(Table.UPPER, testCode));\n        assertEquals(LOWER_TABLE[testCode], Decoder.getCharacter(Table.LOWER, testCode));\n        assertEquals(MIXED_TABLE[testCode], Decoder.getCharacter(Table.MIXED, testCode));\n        assertEquals(PUNCT_TABLE[testCode], Decoder.getCharacter(Table.PUNCT, testCode));\n        assertEquals(DIGIT_TABLE[testCode], Decoder.getCharacter(Table.DIGIT, testCode));\n        \n        // Assuming 'getCharacter' is a static method in a class named 'Decoder'\n        // Testing for the default case to throw an IllegalStateException\n        assertThrows(IllegalStateException.class, () -> Decoder.getCharacter(null, testCode), \"Expected getCharacter to throw an exception for a bad table\");\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n\n    private static final String[] UPPER_TABLE = {\"A\", \"B\", \"C\", \"D\", \"E\"};\n    private static final String[] LOWER_TABLE = {\"a\", \"b\", \"c\", \"d\", \"e\"};\n    private static final String[] MIXED_TABLE = {\"@\", \"#\", \"$\", \"%\", \"^\"};\n    private static final String[] PUNCT_TABLE = {\".\", \",\", \"!\", \"?\", \";\"};\n    private static final String[] DIGIT_TABLE = {\"0\", \"1\", \"2\", \"3\", \"4\"};\n\n    enum Table {\n        UPPER, LOWER, MIXED, PUNCT, DIGIT\n    }\n\n    private static String getCharacter(Table table, int code) {\n        switch (table) {\n            case UPPER:\n                return UPPER_TABLE[code];\n            case LOWER:\n                return LOWER_TABLE[code];\n            case MIXED:\n                return MIXED_TABLE[code];\n            case PUNCT:\n                return PUNCT_TABLE[code];\n            case DIGIT:\n                return DIGIT_TABLE[code];\n            default:\n                throw new IllegalStateException(\"Bad table\");\n        }\n    }\n\n    @Test\n    public void getCharacterTest() {\n        assertEquals(\"A\", getCharacter(Table.UPPER, 0));\n        assertEquals(\"b\", getCharacter(Table.LOWER, 1));\n        assertEquals(\"$\", getCharacter(Table.MIXED, 2));\n        assertEquals(\"?\", getCharacter(Table.PUNCT, 3));\n        assertEquals(\"4\", getCharacter(Table.DIGIT, 4));\n        \n        // Test the bounds of the table\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> getCharacter(Table.UPPER, -1));\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> getCharacter(Table.UPPER, UPPER_TABLE.length));\n        // Test invalid table\n        assertThrows(IllegalStateException.class, () -> getCharacter(null, 0));\n    }\n}",
        "package com.google.zxing.aztec.decoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecoderTest {\n\n    private static final String[] UPPER_TABLE = {\"A\", \"B\", \"C\"}; // Example entries\n    private static final String[] LOWER_TABLE = {\"a\", \"b\", \"c\"}; // Example entries\n    private static final String[] MIXED_TABLE = {\"@\", \"#\", \"$\"}; // Example entries\n    private static final String[] PUNCT_TABLE = {\".\", \",\", \"?\"}; // Example entries\n    private static final String[] DIGIT_TABLE = {\"0\", \"1\", \"2\"}; // Example entries\n\n    private static String getCharacter(Table table, int code) {\n        switch (table) {\n            case UPPER:\n                return UPPER_TABLE[code];\n            case LOWER:\n                return LOWER_TABLE[code];\n            case MIXED:\n                return MIXED_TABLE[code];\n            case PUNCT:\n                return PUNCT_TABLE[code];\n            case DIGIT:\n                return DIGIT_TABLE[code];\n            default:\n                // Should not reach here.\n                throw new IllegalStateException(\"Bad table\");\n        }\n    }\n\n    @Test\n    public void getCharacterTest() {\n        assertEquals(\"A\", getCharacter(Table.UPPER, 0));\n        assertEquals(\"b\", getCharacter(Table.LOWER, 1));\n        assertEquals(\"@\", getCharacter(Table.MIXED, 0));\n        assertEquals(\",\", getCharacter(Table.PUNCT, 1));\n        assertEquals(\"1\", getCharacter(Table.DIGIT, 1));\n\n        Exception exception = assertThrows(IllegalStateException.class, () -> {\n            getCharacter(null, 0);\n        });\n        assertEquals(\"Bad table\", exception.getMessage());\n    }\n\n    // Mock of the Table enum for testing purposes.\n    private enum Table {\n        UPPER,\n        LOWER,\n        MIXED,\n        PUNCT,\n        DIGIT\n    }\n}"
    ]
}