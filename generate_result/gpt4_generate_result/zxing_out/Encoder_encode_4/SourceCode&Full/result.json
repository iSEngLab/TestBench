{
    "project_name": "zxing",
    "file_name": "Encoder.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/encoder/Encoder.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.encoder",
    "docstring": "/**\n   * Encodes the given string content as an Aztec symbol\n   *\n   * @param data input data string\n   * @param minECCPercent minimal percentage of error check words (According to ISO/IEC 24778:2008,\n   *                      a minimum of 23% + 3 words is recommended)\n   * @param userSpecifiedLayers if non-zero, a user-specified value for the number of layers\n   * @param charset character set in which to encode string using ECI; if null, no ECI code\n   *                will be inserted, and the string must be encodable as ISO/IEC 8859-1\n   *                (Latin-1), the default encoding of the symbol.\n   * @return Aztec symbol matrix with metadata\n   */",
    "source_code": "\npublic static AztecCode encode(String data, int minECCPercent, int userSpecifiedLayers, Charset charset) {\n  byte[] bytes = data.getBytes(null != charset ? charset : StandardCharsets.ISO_8859_1);\n  return encode(bytes, minECCPercent, userSpecifiedLayers, charset);\n}\n",
    "class_name": "Encoder",
    "method_name": "encode",
    "arguments": [
        "String data",
        "int minECCPercent",
        "int userSpecifiedLayers",
        "Charset charset"
    ],
    "generate_test": [
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.charset.Charset;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String testData = \"Test Data\";\n        int minECCPercent = 25;\n        int userSpecifiedLayers = 2;\n\n        // Test encoding with default ISO_8859_1 charset\n        AztecCode aztecCodeISO = Encoder.encode(testData, minECCPercent, userSpecifiedLayers, StandardCharsets.ISO_8859_1);\n        assertNotNull(aztecCodeISO);\n        assertTrue(aztecCodeISO.isCompact());\n        assertNotNull(aztecCodeISO.getMatrix());\n        \n        // Test encoding with a user-specified charset (UTF-8)\n        Charset utf8Charset = StandardCharsets.UTF_8;\n        AztecCode aztecCodeUTF8 = Encoder.encode(testData, minECCPercent, userSpecifiedLayers, utf8Charset);\n        assertNotNull(aztecCodeUTF8);\n        assertTrue(aztecCodeUTF8.isCompact());\n        assertNotNull(aztecCodeUTF8.getMatrix());\n\n        // Test encoding with invalid ECC percentage (should throw an exception)\n        assertThrows(IllegalArgumentException.class, () -> {\n            Encoder.encode(testData, -1, userSpecifiedLayers, StandardCharsets.ISO_8859_1);\n        });\n\n        // Test encoding with invalid user-specified layers (should throw an exception)\n        assertThrows(IllegalArgumentException.class, () -> {\n            Encoder.encode(testData, minECCPercent, -10, StandardCharsets.ISO_8859_1);\n        });\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport com.google.zxing.common.BitMatrix;\nimport java.nio.charset.StandardCharsets;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String testData = \"This is an example!\";\n        int minECCPercent = 25;\n        int userSpecifiedLayers = 2;\n        Charset charset = StandardCharsets.UTF_8;\n        \n        // When encoding with specified parameters\n        AztecCode aztecCode = Encoder.encode(testData, minECCPercent, userSpecifiedLayers, charset);\n        \n        // We expect a non-null AztecCode result\n        assertNotNull(aztecCode);\n        \n        // Verify properties of AztecCode\n        assertFalse(aztecCode.isCompact()); // Should be false because userSpecifiedLayers > 0 this is for non-compact Aztec codes\n        assertEquals(userSpecifiedLayers, aztecCode.getLayers()); // The number of layers should match what was specified\n\n        BitMatrix matrix = aztecCode.getMatrix();\n        assertNotNull(matrix); // Ensure the matrix isn't null\n        assertTrue(matrix.getWidth() > 0); // Verify there is a valid width\n        assertTrue(matrix.getHeight() > 0); // Verify there is a valid height\n\n        // Roundtrip test: we encode then decode the data, and we expect to retrieve the original input data.\n        // Note that the actual encoding/decoding logic is not provided and should be implemented separately.\n        // String decodedData = decodeAztecCode(aztecCode); // This would be a hypothetical method to decode the Aztec code\n        // assertEquals(testData, decodedData);  // Compare the original test data with the decoded data\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.charset.Charset;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String data = \"This is a test string.\";\n        int minECCPercent = Encoder.DEFAULT_EC_PERCENT;\n        int userSpecifiedLayers = Encoder.DEFAULT_AZTEC_LAYERS;\n        Charset charset = StandardCharsets.UTF_8; // Use UTF-8 for testing charset input\n\n        // Create AztecCode using the encode method with the provided Charset\n        AztecCode aztecCodeWithCharset = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n\n        // Verify that the AztecCode is not null\n        assertNotNull(aztecCodeWithCharset, \"AztecCode should not be null\");\n        \n        // Verify that the matrix size is greater than 0\n        assertTrue(aztecCodeWithCharset.getSize() > 0, \"AztecCode size should be greater than 0\");\n        \n        // Create AztecCode using the encode method with default ISO_8859_1 encoding\n        AztecCode aztecCodeDefaultEncoding = Encoder.encode(data, minECCPercent, userSpecifiedLayers);\n\n        // Verify that the result of both encodings are identical\n        assertEquals(aztecCodeWithCharset, aztecCodeDefaultEncoding, \"AztecCode generated with Charset should be equal to AztecCode with default encoding\");\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport com.google.zxing.common.BitMatrix;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.DisplayName;\n\nimport java.nio.charset.StandardCharsets;\nimport java.nio.charset.Charset;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    @DisplayName(\"Test encoding with default character set and default layers\")\n    public void encodeTest() {\n        String data = \"Test string for encoding\";\n        int minECCPercent = Encoder.DEFAULT_EC_PERCENT;\n        int userSpecifiedLayers = Encoder.DEFAULT_AZTEC_LAYERS;\n        Charset charset = StandardCharsets.ISO_8859_1;\n        \n        AztecCode aztecCode = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n        \n        // Assert the basic meta info of the generated Aztec code\n        assertNotNull(aztecCode);\n        assertTrue(aztecCode.isCompact());\n        assertTrue(aztecCode.getSize() > 0);\n        assertTrue(aztecCode.getLayers() > 0);\n        assertTrue(aztecCode.getCodeWords() > 0);\n        \n        // Assert the Aztec matrix itself is not null\n        BitMatrix matrix = aztecCode.getMatrix();\n        assertNotNull(matrix);\n\n        // Additional checks (e.g., ensure the matrix size is correct, layers are as expected, etc.)\n        // These are beyond the scope of a simple example but should be included in real tests.\n    }\n    \n    // Add more tests here for different scenarios, charset, ECC percentages, and layer configurations.\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.Test;\nimport java.nio.charset.StandardCharsets;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\npublic class EncoderTest {\n\n    @Test\n    public void encodeTest() {\n        // Test encoding with default settings\n        String data = \"This is a test message\";\n        AztecCode defaultAztecCode = Encoder.encode(data);\n        assertNotNull(defaultAztecCode, \"Encoded AztecCode should not be null\");\n        assertEquals(false, defaultAztecCode.isCompact(), \"Default encoded AztecCode should not be compact\");\n        \n        // Test encoding with specific error correction percentage and layer\n        int minECCPercent = 50;\n        int userSpecifiedLayers = 2;\n        AztecCode specifiedAztecCode = Encoder.encode(data, minECCPercent, userSpecifiedLayers);\n        assertNotNull(specifiedAztecCode, \"Encoded AztecCode with specified settings should not be null\");\n        assertEquals(minECCPercent, specifiedAztecCode.getLayers(), \"Encoded AztecCode should match specified minimal error correction percentage\");\n\n        // Test encoding with a specified charset\n        Charset charset = StandardCharsets.UTF_8;\n        AztecCode charsetAztecCode = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n        assertNotNull(charsetAztecCode, \"Encoded AztecCode with specified charset should not be null\");\n        assertEquals(charset, charsetAztecCode.getCharset(), \"Encoded AztecCode should match specified charset\");\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport com.google.zxing.common.BitMatrix;\n\nimport org.junit.jupiter.api.Test;\nimport java.nio.charset.StandardCharsets;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String data = \"This is a test string\";\n        int minECCPercent = Encoder.DEFAULT_EC_PERCENT;\n        int userSpecifiedLayers = Encoder.DEFAULT_AZTEC_LAYERS; // We'll use the default for layers\n\n        // Case 1: Encoding with default charset, which should be ISO_8859_1\n        AztecCode aztecCode1 = Encoder.encode(data, minECCPercent, userSpecifiedLayers);\n        assertNotNull(aztecCode1, \"AztecCode should not be null\");\n        BitMatrix matrix1 = aztecCode1.getMatrix();\n        assertNotNull(matrix1, \"BitMatrix should not be null\");\n        int size1 = matrix1.getWidth();\n        assertTrue(size1 > 0, \"Size of matrix should be greater than zero\");\n\n        // Case 2: Encoding with a specified charset, UTF-8 in this case\n        AztecCode aztecCode2 = Encoder.encode(data, minECCPercent, userSpecifiedLayers, StandardCharsets.UTF_8);\n        assertNotNull(aztecCode2, \"AztecCode should not be null when using UTF-8\");\n        BitMatrix matrix2 = aztecCode2.getMatrix();\n        assertNotNull(matrix2, \"BitMatrix should not be null when using UTF-8\");\n        int size2 = matrix2.getWidth();\n        assertTrue(size2 > 0, \"Size of matrix should be greater than zero with UTF-8\");\n\n        // If necessary, additional assertions can be added to validate the correctness\n        // of the encoded data, error correction levels, layers used etc.\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.Test;\nimport java.nio.charset.StandardCharsets;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String testData = \"Test Data\"; // Input data for encoding\n        int minECCPercent = 25; // Minimal percentage of error check words\n        int userSpecifiedLayers = 2; // User-specified layers for the Aztec code\n        Charset charset = StandardCharsets.UTF_8; // Charset for encoding\n\n        // Expected results (exact result is complex and depends on encode method implementation)\n        AztecCode expectedAztecCode = null; // Assuming we have an expected AztecCode object\n\n        // Act\n        AztecCode resultAztecCode = Encoder.encode(testData, minECCPercent, userSpecifiedLayers, charset);\n\n        // Assert\n        assertNotNull(resultAztecCode);\n        assertTrue(resultAztecCode.isCompact());\n        assertEquals(expectedAztecCode.getSize(), resultAztecCode.getSize());\n        assertEquals(expectedAztecCode.getLayers(), resultAztecCode.getLayers());\n        assertEquals(expectedAztecCode.getCodeWords(), resultAztecCode.getCodeWords());\n        assertNotNull(resultAztecCode.getMatrix());\n        \n        // Additional checks for binary matrix patterns are possible but would require\n        // knowledge of internal structure and expected output.\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport java.nio.charset.StandardCharsets;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n\n    @Test\n    public void encodeTest() {\n        String data = \"Test data\";\n        int minECCPercent = Encoder.DEFAULT_EC_PERCENT;\n        int userSpecifiedLayers = Encoder.DEFAULT_AZTEC_LAYERS;\n        Charset charset = StandardCharsets.UTF_8;\n\n        // Test encoding with a specified charset\n        AztecCode aztecCode = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n        assertNotNull(aztecCode, \"AztecCode object should not be null\");\n        assertTrue(aztecCode.isValid(), \"Encoded aztec code should be valid\");\n\n        // Test encoding with the default ISO_8859_1 charset\n        aztecCode = Encoder.encode(data, minECCPercent, userSpecifiedLayers);\n        assertNotNull(aztecCode, \"AztecCode object should not be null\");\n        assertTrue(aztecCode.isValid(), \"Encoded aztec code should be valid\");\n\n        // Test encoding with default error correction and layer values\n        aztecCode = Encoder.encode(data);\n        assertNotNull(aztecCode, \"AztecCode object should not be null\");\n        assertTrue(aztecCode.isValid(), \"Encoded aztec code should be valid\");\n\n        // Additional edge cases and error conditions should also be tested\n        // (not shown here due to lack of full context)\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport java.nio.charset.StandardCharsets;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n// Note that the actual implementation of AztecCode and expected results would need to be known to fully implement this test.\n// For example's sake, assume that `AztecCode` has a `toString` or similar method that can be used for assertions.\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String data = \"Test data\";\n        int minECCPercent = Encoder.DEFAULT_EC_PERCENT;\n        int userSpecifiedLayers = Encoder.DEFAULT_AZTEC_LAYERS;\n\n        // Example of how the test could be completed by validating essential properties:\n        // However, the appropriate assertions depend upon the behavior and structure of the AztecCode object.\n        AztecCode aztecCode = Encoder.encode(data, minECCPercent, userSpecifiedLayers, StandardCharsets.ISO_8859_1);\n        \n        assertNotNull(aztecCode, \"Encoded AztecCode should not be null.\");\n        \n        // Assume there are methods to verify the properties of the AztecCode.\n        // These methods are made up for this example and would need to replace with actual methods of AztecCode.\n        \n        assertEquals(minECCPercent, aztecCode.getECCPercent(), \"Error correction percentage must match the input value.\");\n        assertEquals(userSpecifiedLayers, aztecCode.getLayers(), \"Number of layers must match the input value.\");\n        \n        // Assuming there is a getMatrix method that returns the BitMatrix and it is the primary content of AztecCode\n        assertNotNull(aztecCode.getMatrix(), \"AztecCode matrix should not be null.\");\n        \n        // Assuming that the size of the matrix can be an indicator of successful encoding\n        assertTrue(aztecCode.getSize() > 0, \"AztecCode matrix size should be greater than zero.\");\n        \n        // If there is a known expected matrix result for certain inputs, use the following assertion method.\n        // This requires knowledge of expected BitMatrix (expectedMatrix) for the given input data.\n        // BitMatrix expectedMatrix = ...; (define expected result)\n        // assertEquals(expectedMatrix, aztecCode.getMatrix(), \"Encoded matrix must match the expected matrix.\");\n        \n        // If AztecCode has a method to get the raw data, we can check if it matches the input\n        // assertEquals(data, new String(aztecCode.getRawData(), StandardCharsets.ISO_8859_1), \"Decoded data must match encoded data.\");\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.charset.UnsupportedCharsetException;\n\npublic class EncoderTest {\n    \n    @Test\n    public void encodeTestWithStandardCharset() {\n        String data = \"Test Data\";\n        int minECCPercent = 25;\n        int userSpecifiedLayers = 2;\n        Charset charset = StandardCharsets.ISO_8859_1;\n        \n        AztecCode aztecCode = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n        \n        assertNotNull(aztecCode);\n        assertTrue(aztecCode.isCompact());\n        assertEquals(userSpecifiedLayers, aztecCode.getLayers());\n        assertNotNull(aztecCode.getMatrix());\n    }\n\n    @Test\n    public void encodeTestWithDefaultSettings() {\n        String data = \"Default Settings\";\n        AztecCode aztecCode = Encoder.encode(data);\n        \n        assertNotNull(aztecCode);\n        assertFalse(aztecCode.isCompact());\n        assertEquals(Encoder.DEFAULT_ECC_PERCENT, aztecCode.getCodeWords());\n    }\n\n    @Test\n    public void encodeTestWithMinimumECCPercent() {\n        String data = \"Minimum ECC\";\n        int minECCPercent = Encoder.DEFAULT_EC_PERCENT; \n        AztecCode aztecCode = Encoder.encode(data, minECCPercent, Encoder.DEFAULT_AZTEC_LAYERS);\n        \n        assertNotNull(aztecCode);\n        assertEquals(minECCPercent, aztecCode.getCodeWords());\n    }\n\n    @Test\n    public void encodeTestWithUserSpecifiedLayers() {\n        String data = \"User Layers\";\n        int userSpecifiedLayers = 3;\n        AztecCode aztecCode = Encoder.encode(data, Encoder.DEFAULT_EC_PERCENT, userSpecifiedLayers);\n        \n        assertNotNull(aztecCode);\n        assertEquals(userSpecifiedLayers, aztecCode.getLayers());\n    }\n\n    @Test\n    public void encodeTestWithUnsupportedCharset() {\n        String data = \"Unsupported Charset\";\n        int minECCPercent = 30;\n        int userSpecifiedLayers = 4;\n\n        assertThrows(UnsupportedCharsetException.class, () -> {\n            Encoder.encode(data, minECCPercent, userSpecifiedLayers, StandardCharsets.UTF_16);\n        });\n    }\n}"
    ]
}