{
    "project_name": "zxing",
    "file_name": "MathUtils.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/common/detector/MathUtils.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.common.detector",
    "docstring": "/**\n   * @param aX point A x coordinate\n   * @param aY point A y coordinate\n   * @param bX point B x coordinate\n   * @param bY point B y coordinate\n   * @return Euclidean distance between points A and B\n   */",
    "source_code": "\npublic static float distance(int aX, int aY, int bX, int bY) {\n  double xDiff = aX - bX;\n  double yDiff = aY - bY;\n  return (float) Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n}\n",
    "class_name": "MathUtils",
    "method_name": "distance",
    "arguments": [
        "int aX",
        "int aY",
        "int bX",
        "int bY"
    ],
    "generate_test": [
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class MathUtilsTest {\n\n    @Test\n    public void distanceTest() {\n        // Test with same points\n        assertEquals(0.0f, MathUtils.distance(0, 0, 0, 0), \"Distance between the same points should be zero.\");\n\n        // Test with points on the x-axis\n        assertEquals(5.0f, MathUtils.distance(0, 0, 5, 0), \"Distance between two points on the x-axis.\");\n\n        // Test with points on the y-axis\n        assertEquals(5.0f, MathUtils.distance(0, 0, 0, 5), \"Distance between two points on the y-axis.\");\n\n        // Test with points on opposite quadrants\n        assertEquals(Math.sqrt(2), MathUtils.distance(-1, 0, 0, 1), \"Distance between points on opposite quadrants.\");\n\n        // Test with large values\n        assertEquals(14142135.5f, MathUtils.distance(10000000, 0, 0, 10000000), \"Distance between points with large values.\");\n\n        // Test with negative coordinates\n        assertEquals(5.0f, MathUtils.distance(-3, 0, -8, 0), \"Distance between two points with negative coordinates.\");\n\n        // Test with mix of positive and negative coordinates\n        assertEquals(Math.sqrt(50), MathUtils.distance(-1, -4, 6, 1), \"Distance with mix of positive and negative coordinates.\");\n    }\n\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n\n    @Test\n    public void distanceTest() {\n        // Test with zero distance\n        assertEquals(0, MathUtils.distance(0, 0, 0, 0), \"Distance between the same points should be zero.\");\n\n        // Test with positive coordinates\n        assertEquals(5, MathUtils.distance(0, 0, 3, 4), \"Distance between (0,0) and (3,4) should be 5.\");\n\n        // Test with negative coordinates\n        assertEquals(5, MathUtils.distance(-1, -1, -4, -3), \"Distance between (-1,-1) and (-4,-3) should be 5.\");\n\n        // Test with mixed coordinates\n        assertEquals((float) Math.sqrt(2), MathUtils.distance(1, 1, 0, 0), \"Distance between (1,1) and (0,0) should be sqrt(2).\");\n        \n        // Test with large coordinates\n        assertEquals((float) Math.sqrt(8*8 + 6*6), MathUtils.distance(1000, 2000, 1008, 2006), \"Distance between large coordinates should be calculated correctly.\");\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class MathUtilsTest {\n\n    @Test\n    public void distanceTest() {\n        // Test cases with integer coordinates\n        assertEquals(5.0f, MathUtils.distance(0, 0, 3, 4), 0.001, \"Distance between points (0,0) and (3,4) should be 5.0\");\n        assertEquals(13.0f, MathUtils.distance(0, 0, 5, 12), 0.001, \"Distance between points (0,0) and (5,12) should be 13.0\");\n        assertEquals(0.0f, MathUtils.distance(2, 3, 2, 3), 0.001, \"Distance between the same points (2,3) should be 0.0\");\n        \n        // Test case with negative coordinates\n        assertEquals(5.0f, MathUtils.distance(-3, -4, 0, 0), 0.001, \"Distance between points (-3,-4) and (0,0) should be 5.0\");\n\n        // Test case with mixed positive and negative coordinates\n        assertEquals(7.81025f, MathUtils.distance(-3, -4, 4, 4), 0.001, \"Distance between points (-3,-4) and (4,4) should be approximately 7.81\");\n    }\n\n    // Additional test methods for other MathUtils functions could be added here.\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n\n    @Test\n    public void distanceTest() {\n        // Test cases for distance function with integer parameters\n        assertEquals(5.0, MathUtils.distance(0, 0, 3, 4), 0.0001, \"Distance between points (0,0) and (3,4) should be 5.0\");\n        assertEquals(0.0, MathUtils.distance(1, 1, 1, 1), 0.0001, \"Distance between the same points (1,1) and (1,1) should be 0.0\");\n        assertEquals(13.0, MathUtils.distance(-5, 1, 8, 5), 0.0001, \"Distance between points (-5,1) and (8,5) should be 13.0\");\n        assertEquals(MathUtils.distance(10, 20, 10, 20), MathUtils.distance(20, 10, 20, 10), 0.0001, \"Distance between points with swapped coordinates should be the same\");\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n\n    @Test\n    public void distanceTest() {\n        // Testing distance between two points with positive coordinates\n        assertEquals(5.0f, MathUtils.distance(0, 0, 3, 4), \"Distance between points (0,0) and (3,4) should be 5\");\n\n        // Testing distance between two points with one point having negative coordinates\n        assertEquals((float) Math.sqrt(41), MathUtils.distance(-1, -2, 4, 4), \"Distance between points (-1,-2) and (4,4) should be sqrt(41)\");\n\n        // Testing distance between two points with both points having negative coordinates\n        assertEquals((float) Math.sqrt(2), MathUtils.distance(-1, -1, -2, -2), \"Distance between points (-1,-1) and (-2,-2) should be sqrt(2)\");\n\n        // Testing distance between the same points\n        assertEquals(0.0f, MathUtils.distance(5, 5, 5, 5), \"Distance between the same points (5,5) and (5,5) should be 0\");\n\n        // Testing distance with larger coordinates values\n        assertEquals(10.0f, MathUtils.distance(1000, 1000, 1006, 1008), \"Distance between points (1000,1000) and (1006,1008) should be 10\");\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class MathUtilsTest {\n\n    private static final float DELTA = 0.001f;\n\n    @Test\n    public void distanceTest() {\n        // Test with positive coordinates\n        assertEquals(5.0, MathUtils.distance(0, 0, 3, 4), DELTA, \"Incorrect distance for positive coordinates\");\n\n        // Test with one point at the origin\n        assertEquals(1.0, MathUtils.distance(0, 0, 0, 1), DELTA, \"Incorrect distance with one point at the origin\");\n\n        // Test with negative coordinates\n        assertEquals(Math.sqrt(2), MathUtils.distance(-1, -1, 0, 0), DELTA, \"Incorrect distance for negative coordinates\");\n\n        // Test with both points having the same coordinates (distance should be zero)\n        assertEquals(0.0, MathUtils.distance(2, 3, 2, 3), DELTA, \"Distance between identical coordinates should be zero\");\n\n        // Test with points on a horizontal line (same y-coordinate)\n        assertEquals(7.0, MathUtils.distance(1, 5, 8, 5), DELTA, \"Incorrect distance for points on a horizontal line\");\n\n        // Test with points on a vertical line (same x-coordinate)\n        assertEquals(7.0, MathUtils.distance(6, 2, 6, 9), DELTA, \"Incorrect distance for points on a vertical line\");\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n\n    @Test\n    public void distanceTest() {\n        // Case 1: Points at the same location\n        assertEquals(0.0f, MathUtils.distance(0, 0, 0, 0), \"Distance between identical points should be zero.\");\n\n        // Case 2: Points on horizontal line\n        assertEquals(5.0f, MathUtils.distance(0, 0, 5, 0), \"Distance between (0,0) and (5,0) should be 5.\");\n\n        // Case 3: Points on vertical line\n        assertEquals(10.0f, MathUtils.distance(0, 0, 0, 10), \"Distance between (0,0) and (0,10) should be 10.\");\n\n        // Case 4: Points on diagonal line\n        assertEquals((float) Math.sqrt(2.0), MathUtils.distance(0, 0, 1, 1), \"Distance between (0,0) and (1,1) should be sqrt(2).\");\n\n        // Case 5: Points with negative coordinates\n        assertEquals((float) Math.sqrt(8.0), MathUtils.distance(-1, -2, 1, 0), \"Distance between (-1,-2) and (1,0) should be sqrt(8).\");\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n\n    @Test\n    public void distanceTest() {\n        // Test with positive coordinates\n        assertEquals(5.0f, MathUtils.distance(0, 0, 3, 4), \"The distance between (0,0) and (3,4) should be 5.0\");\n\n        // Test with a point and itself\n        assertEquals(0.0f, MathUtils.distance(1, 1, 1, 1), \"The distance between (1,1) and itself should be 0.0\");\n        \n        // Test with negative coordinates\n        assertEquals(Math.sqrt(2), MathUtils.distance(-1, -1, 0, 0), \"The distance between (-1,-1) and (0,0) should be sqrt(2)\");\n        \n        // Test with large numbers\n        assertEquals(Math.sqrt(2000000), MathUtils.distance(1000, 0, -1000, 0), \"The distance between (1000,0) and (-1000,0) should be sqrt(2000000)\");\n        \n        // Test with different x and y scales\n        assertEquals(Math.sqrt(109), MathUtils.distance(3, 7, -7, 3), \"The distance between (3,7) and (-7,3) should be sqrt(109)\");\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class MathUtilsTest {\n\n    private static final float DELTA = 0.0001f;\n\n    @Test\n    public void distanceTest() {\n        // Test with two points (0,0) and (3,4). Should return 5.\n        assertEquals(5.0f, MathUtils.distance(0, 0, 3, 4), DELTA, \"Distance between points (0,0) and (3,4)\");\n\n        // Test with two points (0,0) and (0,0). Should return 0.\n        assertEquals(0.0f, MathUtils.distance(0, 0, 0, 0), DELTA, \"Distance between the same points should be zero\");\n\n        // Test with negative coordinates (positive distance).\n        assertEquals(5.0f, MathUtils.distance(-3, -4, 0, 0), DELTA, \"Distance between points (-3,-4) and (0,0)\");\n\n        // Test when one pair of points has the same coordinates (horizontal line).\n        assertEquals(10.0f, MathUtils.distance(0, 0, 10, 0), DELTA, \"Distance between points on a horizontal line\");\n\n        // Test when one pair of points has the same coordinates (vertical line).\n        assertEquals(10.0f, MathUtils.distance(0, 0, 0, 10), DELTA, \"Distance between points on a vertical line\");\n\n        // Additional test for coverage (non-Zero non-integer distance).\n        assertEquals((float) Math.sqrt(2), MathUtils.distance(1, 1, 2, 2), DELTA, \"Distance between diagonal points (1,1) and (2,2)\");\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Arrange: Define some coordinates and the expected distance\n        int aX = 0, aY = 0;\n        int bX = 3, bY = 4;\n        float expectedDistance = 5.0f; // The expected distance between the points (0,0) and (3,4) is 5 units\n\n        // Act: Compute the distance using the method under test\n        float actualDistance = MathUtils.distance(aX, aY, bX, bY);\n\n        // Assert: Verify the method returns the correct distance\n        assertEquals(expectedDistance, actualDistance, \"The distance calculation is incorrect\");\n    }\n}"
    ]
}