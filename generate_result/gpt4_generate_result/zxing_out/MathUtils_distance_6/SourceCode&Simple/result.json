{
    "project_name": "zxing",
    "file_name": "MathUtils.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/common/detector/MathUtils.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.common.detector",
    "docstring": "/**\n   * @param aX point A x coordinate\n   * @param aY point A y coordinate\n   * @param bX point B x coordinate\n   * @param bY point B y coordinate\n   * @return Euclidean distance between points A and B\n   */",
    "source_code": "\npublic static float distance(int aX, int aY, int bX, int bY) {\n  double xDiff = aX - bX;\n  double yDiff = aY - bY;\n  return (float) Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n}\n",
    "class_name": "MathUtils",
    "method_name": "distance",
    "arguments": [
        "int aX",
        "int aY",
        "int bX",
        "int bY"
    ],
    "generate_test": [
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Given points (0,0) and (3,4), known distance is 5 (from the Pythagorean theorem)\n        assertEquals(5.0f, MathUtils.distance(0, 0, 3, 4), 0.001, \"Distance between points (0,0) and (3,4) should be 5\");\n\n        // Test with negative coordinates\n        assertEquals(5.0f, MathUtils.distance(-3, -4, 0, 0), 0.001, \"Distance between points (-3,-4) and (0,0) should be 5\");\n\n        // Test where both x and y differences are zero\n        assertEquals(0.0f, MathUtils.distance(2, 3, 2, 3), 0.001, \"Distance between points (2,3) and (2,3) should be 0\");\n        \n        // Test with different values which result in a non-integer distance\n        float expectedDistance = (float) Math.sqrt(2 * 2 + 1 * 1);\n        assertEquals(expectedDistance, MathUtils.distance(1, 1, 3, 2), 0.001, \"Distance between points (1,1) and (3,2) should match the expected result\");\n\n        // Test with larger values to ensure there's no overflow\n        assertEquals(10.0f, MathUtils.distance(1000, 1000, 1006, 1008), 0.001, \"Distance between points (1000,1000) and (1006,1008) should be approximately 10\");\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Test data\n        int ax = 0, ay = 0; // point A coordinates\n        int bx = 3, by = 4; // point B coordinates\n        \n        // Expected distance between point A (0,0) and B (3,4) - Pythagorean theorem\n        float expectedDistance = 5.0f;\n        \n        // Calculate distance using the method under test\n        float actualDistance = MathUtils.distance(ax, ay, bx, by);\n        \n        // Assert that the calculated distance is as expected, with a delta to allow for floating-point rounding errors\n        assertEquals(expectedDistance, actualDistance, 0.0001, \"The distance calculation did not match the expected result.\");\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n\n    @Test\n    public void distanceTest() {\n        // Test case with points at origin\n        assertEquals(0.0f, MathUtils.distance(0, 0, 0, 0), \"Distance between same points should be 0\");\n\n        // Test case with points on positive x-axis\n        assertEquals(5.0f, MathUtils.distance(0, 0, 5, 0), \"Distance between (0, 0) and (5, 0) should be 5\");\n\n        // Test case with points on positive y-axis\n        assertEquals(10.0f, MathUtils.distance(0, 0, 0, 10), \"Distance between (0, 0) and (0, 10) should be 10\");\n\n        // Test case with points on both x and y axis\n        assertEquals((float) Math.sqrt(18), MathUtils.distance(1, 2, 4, 5), \"Distance between (1, 2) and (4, 5) should be sqrt(18)\");\n\n        // Test case with negative coordinates\n        assertEquals((float) Math.sqrt(8), MathUtils.distance(-1, -2, 1, 0), \"Distance between (-1, -2) and (1, 0) should be sqrt(8)\");\n\n        // Test case for non-zero points resulting in non-integer distance\n        float expected = (float) Math.sqrt(2);\n        assertEquals(expected, MathUtils.distance(1, 1, 2, 2), \"Distance between (1, 1) and (2, 2) should be sqrt(2)\");\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n\n    @Test\n    public void distanceTest() {\n        // Test 1: Distance between same points should be 0\n        assertEquals(0f, MathUtils.distance(0, 0, 0, 0), \"Distance between identical points should be zero.\");\n\n        // Test 2: Distance between two specific points (3,4) and (0,0) should be 5\n        assertEquals(5f, MathUtils.distance(3, 4, 0, 0), \"Distance between (3, 4) and (0, 0) should be 5.\");\n\n        // Additional Test 3: Negative coordinates\n        assertEquals((float) Math.sqrt(17), MathUtils.distance(-1, -2, 2, 1), \"Distance calculation is incorrect for negative coordinates.\");\n\n        // Additional Test 4: Non-integer result\n        assertEquals((float) Math.sqrt(8), MathUtils.distance(1, 2, 3, 4), \"Distance calculation is incorrect for non-integer result.\");\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Test data\n        int aX = 3, aY = 4, bX = 0, bY = 0;\n\n        // Expected distance using the Pythagorean theorem\n        float expected = 5.0f;\n\n        // Call the method under test\n        float actual = MathUtils.distance(aX, aY, bX, bY);\n\n        // Assert that the actual distance matches the expected distance\n        assertEquals(expected, actual, \"The distance calculation did not return the expected result.\");\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Given points A(0, 0) and B(3, 4), the distance should be 5\n        assertEquals(5.0f, MathUtils.distance(0, 0, 3, 4), \"Distance between (0,0) and (3,4) should be 5\");\n        \n        // Test with negative coordinates\n        assertEquals(7.810249675906654f, MathUtils.distance(-3, -4, 4, 1), \"Distance between (-3,-4) and (4,1) should be approximately 7.81\");\n\n        // Test for both points being the same, expecting the distance to be 0\n        assertEquals(0f, MathUtils.distance(2, 2, 2, 2), \"Distance between identical points should be 0\");\n\n        // Test with larger values\n        assertEquals(111803.398875f, MathUtils.distance(100000, 0, 0, 100000), \"Distance between (100000,0) and (0,100000) should be approximately 111803.39\");\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Test with known values\n        assertEquals(5.0f, MathUtils.distance(0, 0, 3, 4), 0.0001f, \"Distance between points (0,0) and (3,4) should be 5.0\");\n        assertEquals(0.0f, MathUtils.distance(5, 5, 5, 5), 0.0001f, \"Distance between identical points should be 0.0\");\n        assertEquals(1.0f, MathUtils.distance(-1, 0, 0, 0), 0.0001f, \"Distance between points (-1,0) and (0,0) should be 1.0\");\n        \n        // Testing for a float return with a non-zero decimal\n        assertEquals(7.0711f, MathUtils.distance(1, 1, 6, 6), 0.0001f, \"Distance between points (1,1) and (6,6) should be approximately 7.0711\");\n        \n        // Testing negative coordinates\n        assertEquals(8.0623f, MathUtils.distance(-4, -3, 4, 3), 0.0001f, \"Distance between points (-4,-3) and (4,3) should be approximately 8.0623\");\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Test the distance method for various points\n        assertEquals(5.0f, MathUtils.distance(0, 0, 3, 4), \"Distance between points (0,0) and (3,4) should be 5.0\");\n        assertEquals(0.0f, MathUtils.distance(0, 0, 0, 0), \"Distance between points (0,0) and (0,0) should be 0.0\");\n        assertEquals(13.0f, MathUtils.distance(5, 12, 0, 0), \"Distance between points (5,12) and (0,0) should be 13.0\");\n        \n        // Test with negative coordinates\n        assertEquals(5.0f, MathUtils.distance(-3, -4, 0, 0), \"Distance between points (-3,-4) and (0,0) should be 5.0\");\n        \n        // Test with different datatype inputs (this may not compile if the method doesn't support different data types)\n        // If the method only accepts integer parameters, these tests should be removed or modified accordingly.\n        assertEquals(7.0710678118654755f, MathUtils.distance(1.0f, 1.0f, -5.0f, -5.0f), \"Distance between points (1,1) and (-5,-5) should be approximately 7.07\");\n        assertEquals(11.180339887498949f, MathUtils.distance(-10, 10, 0, -1), \"Distance between points (-10,10) and (0,-1) should be approximately 11.18\");\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Test for same points\n        assertEquals(0.0f, MathUtils.distance(0, 0, 0, 0), 0.001, \"Distance between same points should be 0\");\n        \n        // Test for points on the x-axis\n        assertEquals(1.0f, MathUtils.distance(0, 0, 1, 0), 0.001, \"Distance between (0,0) and (1,0) should be 1\");\n        \n        // Test for points on the y-axis\n        assertEquals(1.0f, MathUtils.distance(0, 0, 0, 1), 0.001, \"Distance between (0,0) and (0,1) should be 1\");\n        \n        // Test for points on different coordinates\n        assertEquals(Math.sqrt(2), MathUtils.distance(0, 0, 1, 1), 0.001, \"Distance between (0,0) and (1,1) should be sqrt(2)\");\n        \n        // Test for negative coordinates\n        assertEquals(Math.sqrt(8), MathUtils.distance(-1, -1, 1, 1), 0.001, \"Distance between (-1,-1) and (1,1) should be sqrt(8)\");\n        \n        // Test with large values\n        assertEquals(Math.sqrt(20000), MathUtils.distance(100, 100, -100, -100), 0.001, \"Distance between (100,100) and (-100,-100) should be sqrt(20000)\");\n    }\n}",
        "package com.google.zxing.common.detector;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MathUtilsTest {\n    @Test\n    public void distanceTest() {\n        // Test 1: Distance between the same point should be 0\n        assertEquals(0f, MathUtils.distance(0, 0, 0, 0), \"Distance between the same point should be zero.\");\n\n        // Test 2: Distance between two different points\n        assertEquals(5f, MathUtils.distance(0, 0, 3, 4), \"Distance between points (0,0) and (3,4) should be 5.\");\n\n        // Test 3: Negative coordinates\n        assertEquals((float) Math.sqrt(2), MathUtils.distance(-1, -1, 0, 0), \"Distance between points (-1,-1) and (0,0) should be sqrt(2).\");\n\n        // Test 4: Points on a line\n        assertEquals(10f, MathUtils.distance(10, 5, 0, 5), \"Distance between points (10,5) and (0,5) should be 10.\");\n\n        // Test 5: Large integers\n        assertEquals((float) Math.sqrt(200000000), MathUtils.distance(10000, 0, 0, 10000), \"Distance using large integers.\");\n        \n        // Test 6: Floating-point precision\n        assertNotEquals(1.4142135f, MathUtils.distance(0, 0, 1, 1), \"Precision check for diagonal distance.\");\n        assertEquals((float) Math.sqrt(2), MathUtils.distance(0, 0, 1, 1), \"Check with correct precision for diagonal distance.\");\n    }\n}"
    ]
}