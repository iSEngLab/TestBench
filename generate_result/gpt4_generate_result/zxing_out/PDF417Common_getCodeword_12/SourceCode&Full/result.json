{
    "project_name": "zxing",
    "file_name": "PDF417Common.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/pdf417/PDF417Common.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.pdf417",
    "docstring": "/**\n   * @param symbol encoded symbol to translate to a codeword\n   * @return the codeword corresponding to the symbol.\n   */",
    "source_code": "\npublic static int getCodeword(int symbol) {\n  int i = Arrays.binarySearch(SYMBOL_TABLE, symbol & 0x3FFFF);\n  if (i < 0) {\n    return -1;\n  }\n  return (CODEWORD_TABLE[i] - 1) % NUMBER_OF_CODEWORDS;\n}\n",
    "class_name": "PDF417Common",
    "method_name": "getCodeword",
    "arguments": [
        "int symbol"
    ],
    "generate_test": [
        "package com.google.zxing.pdf417;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PDF417CommonTest {\n\n    @Test\n    public void getCodewordTest() {\n        // Symbol from the SYMBOL_TABLE to test for a known codeword\n        int symbolInTable = PDF417Common.SYMBOL_TABLE[0];\n        int expectedCodeword = (PDF417Common.CODEWORD_TABLE[0] - 1) % PDF417Common.NUMBER_OF_CODEWORDS;\n        assertEquals(expectedCodeword, PDF417Common.getCodeword(symbolInTable));\n\n        // Symbol not in the SYMBOL_TABLE to test for a -1 codeword\n        int symbolNotInTable = 0x1025f; // Arbitrary choice outside the SYMBOL_TABLE\n        assertEquals(-1, PDF417Common.getCodeword(symbolNotInTable));\n        \n        // Testing the boundary condition (the last index of SYMBOL_TABLE)\n        int lastSymbolIndex = PDF417Common.SYMBOL_TABLE.length - 1;\n        int lastSymbol = PDF417Common.SYMBOL_TABLE[lastSymbolIndex];\n        int expectedLastCodeword = (PDF417Common.CODEWORD_TABLE[lastSymbolIndex] - 1) % PDF417Common.NUMBER_OF_CODEWORDS;\n        assertEquals(expectedLastCodeword, PDF417Common.getCodeword(lastSymbol));\n    }\n}",
        "package com.google.zxing.pdf417;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PDF417CommonTest {\n\n    @Test\n    public void getCodewordTest() {\n        // Test recognized symbols\n        assertEquals(2627, PDF417Common.getCodeword(PDF417Common.SYMBOL_TABLE[0]), \"Codeword for first symbol should match\");\n        assertEquals(1700, PDF417Common.getCodeword(PDF417Common.SYMBOL_TABLE[PDF417Common.SYMBOL_TABLE.length - 1]), \"Codeword for last symbol should match\");\n        \n        // Test boundaries of SYMBOL_TABLE\n        assertEquals(-1, PDF417Common.getCodeword(Integer.MIN_VALUE), \"Codeword should be -1 for a value below the SYMBOL_TABLE range\");\n        assertEquals(-1, PDF417Common.getCodeword(Integer.MAX_VALUE), \"Codeword should be -1 for a value above the SYMBOL_TABLE range\");\n\n        // Test an arbitrary symbol that is not in the SYMBOL_TABLE (assuming 123456 is not a valid symbol in the table)\n        assertEquals(-1, PDF417Common.getCodeword(123456), \"Codeword should be -1 for a symbol not in the SYMBOL_TABLE\");\n\n        // Test a known symbol within the SYMBOL_TABLE (we pick an arbitrary one for this test)\n        // Note: Since the symbol chosen is random and not actually from the SYMBOL_TABLE,\n        // you would need to replace 'randomSymbol' with an actual symbol from the SYMBOL_TABLE\n        // and 'expectedCodeword' with the corresponding codeword from the CODEWORD_TABLE.\n        // int randomSymbol = <actual_symbol_from_SYMBOL_TABLE>;\n        // int expectedCodeword = <corresponding_codeword_from_CODEWORD_TABLE>;\n        // assertEquals(expectedCodeword, PDF417Common.getCodeword(randomSymbol), \"Codeword should match the expected value for the known symbol\");\n    }\n}",
        "package com.google.zxing.pdf417;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotEquals;\n\npublic class PDF417CommonTest {\n\n    @Test\n    public void getCodewordTest() {\n        // Test known symbols that should return valid codewords.\n        assertEquals(2627, PDF417Common.getCodeword(PDF417Common.SYMBOL_TABLE[0]));\n        assertEquals(900, PDF417Common.getCodeword(PDF417Common.SYMBOL_TABLE[350]));\n\n        // Test known symbols at the end of the SYMBOL_TABLE.\n        assertEquals(1700, PDF417Common.getCodeword(PDF417Common.SYMBOL_TABLE[PDF417Common.SYMBOL_TABLE.length - 1]));\n\n        // Test a symbol that does not exist in the SYMBOL_TABLE (should return -1).\n        assertEquals(-1, PDF417Common.getCodeword(-1));\n\n        // Test a symbol that is on the boundary of what could exist in the SYMBOL_TABLE.\n        assertEquals(-1, PDF417Common.getCodeword(PDF417Common.NUMBER_OF_CODEWORDS));\n        \n        // Test a symbol that should be masked and found in the SYMBOL_TABLE.\n        assertEquals(2627, PDF417Common.getCodeword(PDF417Common.SYMBOL_TABLE[0] | 0xC0000));\n\n        // Test valid symbol but not in the SYMBOL_TABLE (should also return -1).\n        assertNotEquals(-1, PDF417Common.getCodeword(0x1025e)); // The first symbol in the table.\n        assertEquals(-1, PDF417Common.getCodeword(0x1025f)); // Close to a valid symbol but not valid.\n    }\n}",
        "package com.google.zxing.pdf417;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PDF417CommonTest {\n\n    @Test\n    public void getCodewordTest() {\n        // Test valid symbols present in SYMBOL_TABLE\n        assertEquals(PDF417Common.getCodeword(0x1025e), 2627 % PDF417Common.NUMBER_OF_CODEWORDS);\n        assertEquals(PDF417Common.getCodeword(0x1035c), 1035 % PDF417Common.NUMBER_OF_CODEWORDS);\n        assertEquals(PDF417Common.getCodeword(0x10822), 82 % PDF417Common.NUMBER_OF_CODEWORDS);\n\n        // Test invalid symbol (not present in SYMBOL_TABLE)\n        assertEquals(PDF417Common.getCodeword(0x99999), -1);\n\n        // Test edge cases: min and max values in SYMBOL_TABLE\n        assertEquals(PDF417Common.getCodeword(0x1813a), 1813 % PDF417Common.NUMBER_OF_CODEWORDS);\n        assertEquals(PDF417Common.getCodeword(0x1f7d4), 3197 % PDF417Common.NUMBER_OF_CODEWORDS);\n\n        // Test symbol masked with 0x3FFFF\n        assertEquals(PDF417Common.getCodeword(0x123456), PDF417Common.getCodeword(0x34356));\n    }\n}",
        "package com.google.zxing.pdf417;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PDF417CommonTest {\n\n    @Test\n    public void getCodewordTest() {\n        // Test for expected codewords\n        assertEquals(2627, PDF417Common.getCodeword(0x1025e));\n        assertEquals(1819, PDF417Common.getCodeword(0x1027a));\n        assertEquals(902, PDF417Common.getCodeword(0x10422));\n        \n        // Test for symbol not in symbol table (should return -1)\n        assertEquals(-1, PDF417Common.getCodeword(0x12345));\n        \n        // Test for symbol that wraps around the number of codewords (should module and subtract 1)\n        // Assuming wrapping symbol 0x10b8e should wrap around\n        int codewordForWrapSymbol = PDF417Common.getCodeword(0x10b8e);\n        int expectedCodeword = (PDF417Common.CODEWORD_TABLE[642] - 1) % PDF417Common.NUMBER_OF_CODEWORDS;\n        assertEquals(expectedCodeword, codewordForWrapSymbol);\n    }\n}",
        "package com.google.zxing.pdf417;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PDF417CommonTest {\n    @Test\n    public void getCodewordTest() {\n        // Assuming SYMBOL_TABLE and CODEWORD_TABLE are visible within this test context\n        int symbolInTable = PDF417Common.SYMBOL_TABLE[10]; // Assumed to be part of the SYMBOL_TABLE\n        int codeword = PDF417Common.getCodeword(symbolInTable);\n        int expectedCodeword = (PDF417Common.CODEWORD_TABLE[10] - 1) % PDF417Common.NUMBER_OF_CODEWORDS;\n        assertEquals(expectedCodeword, codeword, \"The codeword did not match the expected value\");\n\n        // Test a symbol not in the table\n        int symbolNotInTable = 0xABCDE; // Assumed not to be part of the SYMBOL_TABLE\n        int invalidCodeword = PDF417Common.getCodeword(symbolNotInTable);\n        assertEquals(-1, invalidCodeword, \"Lookup of a symbol not in the CODEWORD_TABLE should return -1\");\n    }\n}",
        "package com.google.zxing.pdf417;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PDF417CommonTest {\n    @Test\n    public void getCodewordTest() {\n        // Test valid symbols from SYMBOL_TABLE matching a codeword\n        assertEquals(PDF417Common.getCodeword(PDF417Common.SYMBOL_TABLE[0]), (PDF417Common.CODEWORD_TABLE[0] - 1) % PDF417Common.NUMBER_OF_CODEWORDS);\n        assertEquals(PDF417Common.getCodeword(PDF417Common.SYMBOL_TABLE[100]), (PDF417Common.CODEWORD_TABLE[100] - 1) % PDF417Common.NUMBER_OF_CODEWORDS);\n        assertEquals(PDF417Common.getCodeword(PDF417Common.SYMBOL_TABLE[500]), (PDF417Common.CODEWORD_TABLE[500] - 1) % PDF417Common.NUMBER_OF_CODEWORDS);\n\n        // Test out-of-range symbol which is not in the SYMBOL_TABLE\n        assertEquals(PDF417Common.getCodeword(0xAAAAAA), -1);\n        // Test another out-of-range symbol\n        assertEquals(PDF417Common.getCodeword(0xFFFFFF), -1);\n        // Test negative symbol\n        assertEquals(PDF417Common.getCodeword(-1), -1);\n    }\n}",
        "package com.google.zxing.pdf417;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PDF417CommonTest {\n    @Test\n    public void getCodewordTest() {\n        // Test with a valid symbol that exists in SYMBOL_TABLE\n        int symbolExists = 0x1025e;\n        int expectedCodeword = (PDF417Common.CODEWORD_TABLE[0] - 1) % PDF417Common.NUMBER_OF_CODEWORDS;\n        assertEquals(expectedCodeword, PDF417Common.getCodeword(symbolExists));\n\n        // Test with an invalid symbol that does not exist in SYMBOL_TABLE\n        int symbolNotExists = 0x99999;\n        int expectedInvalidCodeword = -1;\n        assertEquals(expectedInvalidCodeword, PDF417Common.getCodeword(symbolNotExists));\n\n        // Test with corner case: the last symbol in SYMBOL_TABLE\n        int lastSymbol = PDF417Common.SYMBOL_TABLE[PDF417Common.SYMBOL_TABLE.length - 1];\n        int expectedLastCodeword = (PDF417Common.CODEWORD_TABLE[PDF417Common.SYMBOL_TABLE.length - 1] - 1) % PDF417Common.NUMBER_OF_CODEWORDS;\n        assertEquals(expectedLastCodeword, PDF417Common.getCodeword(lastSymbol));\n        \n        // Test with corner case: the first symbol in SYMBOL_TABLE\n        int firstSymbol = PDF417Common.SYMBOL_TABLE[0];\n        int expectedFirstCodeword = (PDF417Common.CODEWORD_TABLE[0] - 1) % PDF417Common.NUMBER_OF_CODEWORDS;\n        assertEquals(expectedFirstCodeword, PDF417Common.getCodeword(firstSymbol));\n    }\n}",
        "package com.google.zxing.pdf417;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PDF417CommonTest {\n    @Test\n    public void getCodewordTest() {\n        // Test existing symbol codeword mapping\n        assertEquals(2627, PDF417Common.getCodeword(PDF417Common.SYMBOL_TABLE[0]));\n        assertEquals(1819, PDF417Common.getCodeword(PDF417Common.SYMBOL_TABLE[1]));\n        // Test non-existing symbol which should return -1\n        assertEquals(-1, PDF417Common.getCodeword(PDF417Common.SYMBOL_TABLE[0] + 1));\n        // Test maximum valid symbol which should be within the codeword table\n        assertEquals(PDF417Common.getCodeword(PDF417Common.SYMBOL_TABLE[PDF417Common.SYMBOL_TABLE.length - 1]),\n                     PDF417Common.CODEWORD_TABLE[PDF417Common.SYMBOL_TABLE.length - 1]);\n        // Test symbol outside the maximum range which should return -1\n        assertEquals(-1, PDF417Common.getCodeword(0x3FFFF + 1));\n    }\n}",
        "package com.google.zxing.pdf417;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class PDF417CommonTest {\n\n    @Test\n    public void getCodewordTest() {\n        // Existing symbol from SYMBOL_TABLE should return correct codeword\n        assertEquals(2627, PDF417Common.getCodeword(PDF417Common.SYMBOL_TABLE[0]));\n        // Non-existing symbol should return -1\n        assertEquals(-1, PDF417Common.getCodeword(123456));\n        // Check edge cases: first and last symbols\n        assertEquals(2627, PDF417Common.getCodeword(PDF417Common.SYMBOL_TABLE[0]));\n        assertEquals(1700, PDF417Common.getCodeword(PDF417Common.SYMBOL_TABLE[PDF417Common.SYMBOL_TABLE.length - 1]));\n        // SYMBOL_TABLE constraint (0x3FFFF) should be applied\n        assertEquals(PDF417Common.getCodeword(0x3FFFF), PDF417Common.getCodeword(0x7FFFF));\n    }\n}"
    ]
}