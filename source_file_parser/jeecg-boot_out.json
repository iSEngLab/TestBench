[
    {
        "project_name": "jeecg-boot",
        "file_name": "AutoLogAspect.java",
        "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/aspect/AutoLogAspect.java",
        "execute_path": "jeecg-boot",
        "package": "org.jeecg.common.aspect",
        "docstring": "/**\n     * @Description: \u83b7\u53d6\u8bf7\u6c42\u53c2\u6570\n     * @author: scott\n     * @date: 2020/4/16 0:10\n     * @param request:  request\n     * @param joinPoint:  joinPoint\n     * @Return: java.lang.String\n     */",
        "source_code": "\nprivate String getReqestParams(HttpServletRequest request, JoinPoint joinPoint) {\n    String httpMethod = request.getMethod();\n    String params = \"\";\n    if (CommonConstant.HTTP_POST.equals(httpMethod) || CommonConstant.HTTP_PUT.equals(httpMethod) || CommonConstant.HTTP_PATCH.equals(httpMethod)) {\n        Object[] paramsArray = joinPoint.getArgs();\n        // java.lang.IllegalStateException: It is illegal to call this method if the current request is not in asynchronous mode (i.e. isAsyncStarted() returns false)\n        //  https://my.oschina.net/mengzhang6/blog/2395893\n        Object[] arguments  = new Object[paramsArray.length];\n        for (int i = 0; i < paramsArray.length; i++) {\n            if (paramsArray[i] instanceof BindingResult || paramsArray[i] instanceof ServletRequest || paramsArray[i] instanceof ServletResponse || paramsArray[i] instanceof MultipartFile) {\n                //ServletRequest\u4e0d\u80fd\u5e8f\u5217\u5316\uff0c\u4ece\u5165\u53c2\u91cc\u6392\u9664\uff0c\u5426\u5219\u62a5\u5f02\u5e38\uff1ajava.lang.IllegalStateException: It is illegal to call this method if the current request is not in asynchronous mode (i.e. isAsyncStarted() returns false)\n                //ServletResponse\u4e0d\u80fd\u5e8f\u5217\u5316 \u4ece\u5165\u53c2\u91cc\u6392\u9664\uff0c\u5426\u5219\u62a5\u5f02\u5e38\uff1ajava.lang.IllegalStateException: getOutputStream() has already been called for this response\n                continue;\n            }\n            arguments[i] = paramsArray[i];\n        }\n        //update-begin-author:taoyan date:20200724 for:\u65e5\u5fd7\u6570\u636e\u592a\u957f\u7684\u76f4\u63a5\u8fc7\u6ee4\u6389\n        PropertyFilter profilter = new PropertyFilter() {\n            @Override\n            public boolean apply(Object o, String name, Object value) {\n                int length = 500;\n                if(value!=null && value.toString().length()>length){\n                    return false;\n                }\n                return true;\n            }\n        };\n        params = JSONObject.toJSONString(arguments, profilter);\n        //update-end-author:taoyan date:20200724 for:\u65e5\u5fd7\u6570\u636e\u592a\u957f\u7684\u76f4\u63a5\u8fc7\u6ee4\u6389\n    } else {\n        MethodSignature signature = (MethodSignature) joinPoint.getSignature();\n        Method method = signature.getMethod();\n        // \u8bf7\u6c42\u7684\u65b9\u6cd5\u53c2\u6570\u503c\n        Object[] args = joinPoint.getArgs();\n        // \u8bf7\u6c42\u7684\u65b9\u6cd5\u53c2\u6570\u540d\u79f0\n        LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer();\n        String[] paramNames = u.getParameterNames(method);\n        if (args != null && paramNames != null) {\n            for (int i = 0; i < args.length; i++) {\n                params += \"  \" + paramNames[i] + \": \" + args[i];\n            }\n        }\n    }\n    return params;\n}\n",
        "class_name": "AutoLogAspect",
        "method_name": "getReqestParams",
        "argument_name": [
            "HttpServletRequest request",
            "JoinPoint joinPoint"
        ],
        "full_context": "package org.jeecg.common.aspect;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.alibaba.fastjson.serializer.PropertyFilter;\nimport org.apache.shiro.SecurityUtils;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.jeecg.common.api.dto.LogDTO;\nimport org.jeecg.common.api.vo.Result;\nimport org.jeecg.common.aspect.annotation.AutoLog;\nimport org.jeecg.common.constant.CommonConstant;\nimport org.jeecg.common.constant.enums.ModuleType;\nimport org.jeecg.common.constant.enums.OperateTypeEnum;\nimport org.jeecg.modules.base.service.BaseCommonService;\nimport org.jeecg.common.system.vo.LoginUser;\nimport org.jeecg.common.util.IpUtils;\nimport org.jeecg.common.util.SpringContextUtils;\nimport org.jeecg.common.util.oConvertUtils;\nimport org.springframework.core.LocalVariableTableParameterNameDiscoverer;\nimport org.springframework.stereotype.Component;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.multipart.MultipartFile;\nimport javax.annotation.Resource;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport java.lang.reflect.Method;\nimport java.util.Date;\n\n\n/**\n * \u7cfb\u7edf\u65e5\u5fd7\uff0c\u5207\u9762\u5904\u7406\u7c7b\n *\n * @Author scott\n * @email jeecgos@163.com\n * @Date 2018\u5e741\u670814\u65e5\n */\n@Aspect\n@Component\npublic class AutoLogAspect {\n\n    @Resource\n    private BaseCommonService baseCommonService;\n\n    @Pointcut(\"@annotation(org.jeecg.common.aspect.annotation.AutoLog)\")\n    public void logPointCut() {\n\n    }\n\n    @Around(\"logPointCut()\")\n    public Object around(ProceedingJoinPoint point) throws Throwable {\n        long beginTime = System.currentTimeMillis();\n        //\u6267\u884c\u65b9\u6cd5\n        Object result = point.proceed();\n        //\u6267\u884c\u65f6\u957f(\u6beb\u79d2)\n        long time = System.currentTimeMillis() - beginTime;\n\n        //\u4fdd\u5b58\u65e5\u5fd7\n        saveSysLog(point, time, result);\n\n        return result;\n    }\n\n    private void saveSysLog(ProceedingJoinPoint joinPoint, long time, Object obj) {\n        MethodSignature signature = (MethodSignature) joinPoint.getSignature();\n        Method method = signature.getMethod();\n\n        LogDTO dto = new LogDTO();\n        AutoLog syslog = method.getAnnotation(AutoLog.class);\n        if(syslog != null){\n            //update-begin-author:taoyan date:\n            String content = syslog.value();\n            if(syslog.module()== ModuleType.ONLINE){\n                content = getOnlineLogContent(obj, content);\n            }\n            //\u6ce8\u89e3\u4e0a\u7684\u63cf\u8ff0,\u64cd\u4f5c\u65e5\u5fd7\u5185\u5bb9\n            dto.setLogType(syslog.logType());\n            dto.setLogContent(content);\n        }\n\n        //\u8bf7\u6c42\u7684\u65b9\u6cd5\u540d\n        String className = joinPoint.getTarget().getClass().getName();\n        String methodName = signature.getName();\n        dto.setMethod(className + \".\" + methodName + \"()\");\n\n\n        //\u8bbe\u7f6e\u64cd\u4f5c\u7c7b\u578b\n        if (CommonConstant.LOG_TYPE_2 == dto.getLogType()) {\n            dto.setOperateType(getOperateType(methodName, syslog.operateType()));\n        }\n\n        //\u83b7\u53d6request\n        HttpServletRequest request = SpringContextUtils.getHttpServletRequest();\n        //\u8bf7\u6c42\u7684\u53c2\u6570\n        dto.setRequestParam(getReqestParams(request,joinPoint));\n        //\u8bbe\u7f6eIP\u5730\u5740\n        dto.setIp(IpUtils.getIpAddr(request));\n        //\u83b7\u53d6\u767b\u5f55\u7528\u6237\u4fe1\u606f\n        LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n        if(sysUser!=null){\n            dto.setUserid(sysUser.getUsername());\n            dto.setUsername(sysUser.getRealname());\n\n        }\n        //\u8017\u65f6\n        dto.setCostTime(time);\n        dto.setCreateTime(new Date());\n        //\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\n        baseCommonService.addLog(dto);\n    }\n\n\n    /**\n     * \u83b7\u53d6\u64cd\u4f5c\u7c7b\u578b\n     */\n    private int getOperateType(String methodName,int operateType) {\n        if (operateType > 0) {\n            return operateType;\n        }\n        //update-begin---author:wangshuai ---date:20220331  for\uff1a\u963f\u91cc\u4e91\u4ee3\u7801\u626b\u63cf\u89c4\u8303(\u4e0d\u5141\u8bb8\u4efb\u4f55\u9b54\u6cd5\u503c\u51fa\u73b0\u5728\u4ee3\u7801\u4e2d)------------\n        return OperateTypeEnum.getTypeByMethodName(methodName);\n        //update-end---author:wangshuai ---date:20220331  for\uff1a\u963f\u91cc\u4e91\u4ee3\u7801\u626b\u63cf\u89c4\u8303(\u4e0d\u5141\u8bb8\u4efb\u4f55\u9b54\u6cd5\u503c\u51fa\u73b0\u5728\u4ee3\u7801\u4e2d)------------\n    }\n\n    /**\n     * @Description: \u83b7\u53d6\u8bf7\u6c42\u53c2\u6570\n     * @author: scott\n     * @date: 2020/4/16 0:10\n     * @param request:  request\n     * @param joinPoint:  joinPoint\n     * @Return: java.lang.String\n     */\n    private String getReqestParams(HttpServletRequest request, JoinPoint joinPoint) {\n        String httpMethod = request.getMethod();\n        String params = \"\";\n        if (CommonConstant.HTTP_POST.equals(httpMethod) || CommonConstant.HTTP_PUT.equals(httpMethod) || CommonConstant.HTTP_PATCH.equals(httpMethod)) {\n            Object[] paramsArray = joinPoint.getArgs();\n            // java.lang.IllegalStateException: It is illegal to call this method if the current request is not in asynchronous mode (i.e. isAsyncStarted() returns false)\n            //  https://my.oschina.net/mengzhang6/blog/2395893\n            Object[] arguments  = new Object[paramsArray.length];\n            for (int i = 0; i < paramsArray.length; i++) {\n                if (paramsArray[i] instanceof BindingResult || paramsArray[i] instanceof ServletRequest || paramsArray[i] instanceof ServletResponse || paramsArray[i] instanceof MultipartFile) {\n                    //ServletRequest\u4e0d\u80fd\u5e8f\u5217\u5316\uff0c\u4ece\u5165\u53c2\u91cc\u6392\u9664\uff0c\u5426\u5219\u62a5\u5f02\u5e38\uff1ajava.lang.IllegalStateException: It is illegal to call this method if the current request is not in asynchronous mode (i.e. isAsyncStarted() returns false)\n                    //ServletResponse\u4e0d\u80fd\u5e8f\u5217\u5316 \u4ece\u5165\u53c2\u91cc\u6392\u9664\uff0c\u5426\u5219\u62a5\u5f02\u5e38\uff1ajava.lang.IllegalStateException: getOutputStream() has already been called for this response\n                    continue;\n                }\n                arguments[i] = paramsArray[i];\n            }\n            //update-begin-author:taoyan date:20200724 for:\u65e5\u5fd7\u6570\u636e\u592a\u957f\u7684\u76f4\u63a5\u8fc7\u6ee4\u6389\n            PropertyFilter profilter = new PropertyFilter() {\n                @Override\n                public boolean apply(Object o, String name, Object value) {\n                    int length = 500;\n                    if(value!=null && value.toString().length()>length){\n                        return false;\n                    }\n                    return true;\n                }\n            };\n            params = JSONObject.toJSONString(arguments, profilter);\n            //update-end-author:taoyan date:20200724 for:\u65e5\u5fd7\u6570\u636e\u592a\u957f\u7684\u76f4\u63a5\u8fc7\u6ee4\u6389\n        } else {\n            MethodSignature signature = (MethodSignature) joinPoint.getSignature();\n            Method method = signature.getMethod();\n            // \u8bf7\u6c42\u7684\u65b9\u6cd5\u53c2\u6570\u503c\n            Object[] args = joinPoint.getArgs();\n            // \u8bf7\u6c42\u7684\u65b9\u6cd5\u53c2\u6570\u540d\u79f0\n            LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer();\n            String[] paramNames = u.getParameterNames(method);\n            if (args != null && paramNames != null) {\n                for (int i = 0; i < args.length; i++) {\n                    params += \"  \" + paramNames[i] + \": \" + args[i];\n                }\n            }\n        }\n        return params;\n    }\n\n    /**\n     * online\u65e5\u5fd7\u5185\u5bb9\u62fc\u63a5\n     * @param obj\n     * @param content\n     * @return\n     */\n    private String getOnlineLogContent(Object obj, String content){\n        if (Result.class.isInstance(obj)){\n            Result res = (Result)obj;\n            String msg = res.getMessage();\n            String tableName = res.getOnlTable();\n            if(oConvertUtils.isNotEmpty(tableName)){\n                content+=\",\u8868\u540d:\"+tableName;\n            }\n            if(res.isSuccess()){\n                content+= \",\"+(oConvertUtils.isEmpty(msg)?\"\u64cd\u4f5c\u6210\u529f\":msg);\n            }else{\n                content+= \",\"+(oConvertUtils.isEmpty(msg)?\"\u64cd\u4f5c\u5931\u8d25\":msg);\n            }\n        }\n        return content;\n    }\n\n\n    /*    private void saveSysLog(ProceedingJoinPoint joinPoint, long time, Object obj) {\n        MethodSignature signature = (MethodSignature) joinPoint.getSignature();\n        Method method = signature.getMethod();\n\n        SysLog sysLog = new SysLog();\n        AutoLog syslog = method.getAnnotation(AutoLog.class);\n        if(syslog != null){\n            //update-begin-author:taoyan date:\n            String content = syslog.value();\n            if(syslog.module()== ModuleType.ONLINE){\n                content = getOnlineLogContent(obj, content);\n            }\n            //\u6ce8\u89e3\u4e0a\u7684\u63cf\u8ff0,\u64cd\u4f5c\u65e5\u5fd7\u5185\u5bb9\n            sysLog.setLogContent(content);\n            sysLog.setLogType(syslog.logType());\n        }\n\n        //\u8bf7\u6c42\u7684\u65b9\u6cd5\u540d\n        String className = joinPoint.getTarget().getClass().getName();\n        String methodName = signature.getName();\n        sysLog.setMethod(className + \".\" + methodName + \"()\");\n\n\n        //\u8bbe\u7f6e\u64cd\u4f5c\u7c7b\u578b\n        if (sysLog.getLogType() == CommonConstant.LOG_TYPE_2) {\n            sysLog.setOperateType(getOperateType(methodName, syslog.operateType()));\n        }\n\n        //\u83b7\u53d6request\n        HttpServletRequest request = SpringContextUtils.getHttpServletRequest();\n        //\u8bf7\u6c42\u7684\u53c2\u6570\n        sysLog.setRequestParam(getReqestParams(request,joinPoint));\n\n        //\u8bbe\u7f6eIP\u5730\u5740\n        sysLog.setIp(IPUtils.getIpAddr(request));\n\n        //\u83b7\u53d6\u767b\u5f55\u7528\u6237\u4fe1\u606f\n        LoginUser sysUser = (LoginUser)SecurityUtils.getSubject().getPrincipal();\n        if(sysUser!=null){\n            sysLog.setUserid(sysUser.getUsername());\n            sysLog.setUsername(sysUser.getRealname());\n\n        }\n        //\u8017\u65f6\n        sysLog.setCostTime(time);\n        sysLog.setCreateTime(new Date());\n        //\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\n        sysLogService.save(sysLog);\n    }*/\n}\n",
        "simple_context": "package org.jeecg.common.aspect;\n\nimport com.alibaba.fastjson.JSONObject;\n\nimport com.alibaba.fastjson.serializer.PropertyFilter;\n\nimport org.apache.shiro.SecurityUtils;\n\nimport org.aspectj.lang.JoinPoint;\n\nimport org.aspectj.lang.ProceedingJoinPoint;\n\nimport org.aspectj.lang.annotation.Around;\n\nimport org.aspectj.lang.annotation.Aspect;\n\nimport org.aspectj.lang.annotation.Pointcut;\n\nimport org.aspectj.lang.reflect.MethodSignature;\n\nimport org.jeecg.common.api.dto.LogDTO;\n\nimport org.jeecg.common.api.vo.Result;\n\nimport org.jeecg.common.aspect.annotation.AutoLog;\n\nimport org.jeecg.common.constant.CommonConstant;\n\nimport org.jeecg.common.constant.enums.ModuleType;\n\nimport org.jeecg.common.constant.enums.OperateTypeEnum;\n\nimport org.jeecg.modules.base.service.BaseCommonService;\n\nimport org.jeecg.common.system.vo.LoginUser;\n\nimport org.jeecg.common.util.IpUtils;\n\nimport org.jeecg.common.util.SpringContextUtils;\n\nimport org.jeecg.common.util.oConvertUtils;\n\nimport org.springframework.core.LocalVariableTableParameterNameDiscoverer;\n\nimport org.springframework.stereotype.Component;\n\nimport org.springframework.validation.BindingResult;\n\nimport org.springframework.web.multipart.MultipartFile;\n\nimport javax.annotation.Resource;\n\nimport javax.servlet.ServletRequest;\n\nimport javax.servlet.ServletResponse;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport java.lang.reflect.Method;\n\nimport java.util.Date;\n\npublic class AutoLogAspect {\n    private BaseCommonService baseCommonService;\n    public  logPointCut();\n    public Object around(ProceedingJoinPoint point)throws Throwable;\n    private  saveSysLog(ProceedingJoinPoint joinPoint, long time, Object obj);\n    private int getOperateType(String methodName, int operateType);\n    private String getReqestParams(HttpServletRequest request, JoinPoint joinPoint);\n    private String getOnlineLogContent(Object obj, String content);\n}\n\n"
    },
    {
        "project_name": "jeecg-boot",
        "file_name": "DictAspect.java",
        "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/aspect/DictAspect.java",
        "execute_path": "jeecg-boot",
        "package": "org.jeecg.common.aspect",
        "docstring": "/**\n     * \u672c\u65b9\u6cd5\u9488\u5bf9\u8fd4\u56de\u5bf9\u8c61\u4e3aResult \u7684IPage\u7684\u5206\u9875\u5217\u8868\u6570\u636e\u8fdb\u884c\u52a8\u6001\u5b57\u5178\u6ce8\u5165\n     * \u5b57\u5178\u6ce8\u5165\u5b9e\u73b0 \u901a\u8fc7\u5bf9\u5b9e\u4f53\u7c7b\u6dfb\u52a0\u6ce8\u89e3@dict \u6765\u6807\u8bc6\u9700\u8981\u7684\u5b57\u5178\u5185\u5bb9,\u5b57\u5178\u5206\u4e3a\u5355\u5b57\u5178code\u5373\u53ef \uff0ctable\u5b57\u5178 code table text\u914d\u5408\u4f7f\u7528\u4e0e\u539f\u6765jeecg\u7684\u7528\u6cd5\u76f8\u540c\n     * \u793a\u4f8b\u4e3aSysUser   \u5b57\u6bb5\u4e3asex \u6dfb\u52a0\u4e86\u6ce8\u89e3@Dict(dicCode = \"sex\") \u4f1a\u5728\u5b57\u5178\u670d\u52a1\u7acb\u9a6c\u67e5\u51fa\u6765\u5bf9\u5e94\u7684text \u7136\u540e\u5728\u8bf7\u6c42list\u7684\u65f6\u5019\u5c06\u8fd9\u4e2a\u5b57\u5178text\uff0c\u5df2\u5b57\u6bb5\u540d\u79f0\u52a0_dictText\u5f62\u5f0f\u8fd4\u56de\u5230\u524d\u7aef\n     * \u4f8b\u8f93\u5165\u5f53\u524d\u8fd4\u56de\u503c\u7684\u5c31\u4f1a\u591a\u51fa\u4e00\u4e2asex_dictText\u5b57\u6bb5\n     * {\n     *      sex:1,\n     *      sex_dictText:\"\u7537\"\n     * }\n     * \u524d\u7aef\u76f4\u63a5\u53d6\u503csext_dictText\u5728table\u91cc\u9762\u65e0\u9700\u518d\u8fdb\u884c\u524d\u7aef\u7684\u5b57\u5178\u8f6c\u6362\u4e86\n     *  customRender:function (text) {\n     *               if(text==1){\n     *                 return \"\u7537\";\n     *               }else if(text==2){\n     *                 return \"\u5973\";\n     *               }else{\n     *                 return text;\n     *               }\n     *             }\n     *             \u76ee\u524dvue\u662f\u8fd9\u4e48\u8fdb\u884c\u5b57\u5178\u6e32\u67d3\u5230table\u4e0a\u7684\u591a\u4e86\u5c31\u5f88\u9ebb\u70e6\u4e86 \u8fd9\u4e2a\u76f4\u63a5\u5728\u670d\u52a1\u7aef\u6e32\u67d3\u5b8c\u6210\u524d\u7aef\u53ef\u4ee5\u76f4\u63a5\u7528\n     * @param result\n     */",
        "source_code": "\nprivate Object parseDictText(Object result) {\n    if (result instanceof Result) {\n        if (((Result) result).getResult() instanceof IPage) {\n            List<JSONObject> items = new ArrayList<>();\n\n            //step.1 \u7b5b\u9009\u51fa\u52a0\u4e86 Dict \u6ce8\u89e3\u7684\u5b57\u6bb5\u5217\u8868\n            List<Field> dictFieldList = new ArrayList<>();\n            // \u5b57\u5178\u6570\u636e\u5217\u8868\uff0c key = \u5b57\u5178code\uff0cvalue=\u6570\u636e\u5217\u8868\n            Map<String, List<String>> dataListMap = new HashMap<>(5);\n            //\u53d6\u51fa\u7ed3\u679c\u96c6\n            List<Object> records=((IPage) ((Result) result).getResult()).getRecords();\n            //update-begin--Author:zyf -- Date:20220606 ----for\uff1a\u3010VUEN-1230\u3011 \u5224\u65ad\u662f\u5426\u542b\u6709\u5b57\u5178\u6ce8\u89e3,\u6ca1\u6709\u6ce8\u89e3\u8fd4\u56de-----\n            Boolean hasDict= checkHasDict(records);\n            if(!hasDict){\n                return result;\n            }\n\n            log.debug(\" __ \u8fdb\u5165\u5b57\u5178\u7ffb\u8bd1\u5207\u9762 DictAspect \u2014\u2014 \" );\n            //update-end--Author:zyf -- Date:20220606 ----for\uff1a\u3010VUEN-1230\u3011 \u5224\u65ad\u662f\u5426\u542b\u6709\u5b57\u5178\u6ce8\u89e3,\u6ca1\u6709\u6ce8\u89e3\u8fd4\u56de-----\n            for (Object record : records) {\n                String json=\"{}\";\n                try {\n                    //update-begin--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                    //\u89e3\u51b3@JsonFormat\u6ce8\u89e3\u89e3\u6790\u4e0d\u4e86\u7684\u95ee\u9898\u8be6\u89c1SysAnnouncement\u7c7b\u7684@JsonFormat\n                     json = objectMapper.writeValueAsString(record);\n                    //update-end--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                } catch (JsonProcessingException e) {\n                    log.error(\"json\u89e3\u6790\u5931\u8d25\"+e.getMessage(),e);\n                }\n                //update-begin--Author:scott -- Date:20211223 ----for\uff1a\u3010issues/3303\u3011restcontroller\u8fd4\u56dejson\u6570\u636e\u540ekey\u987a\u5e8f\u9519\u4e71 -----\n                JSONObject item = JSONObject.parseObject(json, Feature.OrderedField);\n                //update-end--Author:scott -- Date:20211223 ----for\uff1a\u3010issues/3303\u3011restcontroller\u8fd4\u56dejson\u6570\u636e\u540ekey\u987a\u5e8f\u9519\u4e71 -----\n\n                //update-begin--Author:scott -- Date:20190603 ----for\uff1a\u89e3\u51b3\u7ee7\u627f\u5b9e\u4f53\u5b57\u6bb5\u65e0\u6cd5\u7ffb\u8bd1\u95ee\u9898------\n                //for (Field field : record.getClass().getDeclaredFields()) {\n                // \u904d\u5386\u6240\u6709\u5b57\u6bb5\uff0c\u628a\u5b57\u5178Code\u53d6\u51fa\u6765\uff0c\u653e\u5230 map \u91cc\n                for (Field field : oConvertUtils.getAllFields(record)) {\n                    String value = item.getString(field.getName());\n                    if (oConvertUtils.isEmpty(value)) {\n                        continue;\n                    }\n                //update-end--Author:scott  -- Date:20190603 ----for\uff1a\u89e3\u51b3\u7ee7\u627f\u5b9e\u4f53\u5b57\u6bb5\u65e0\u6cd5\u7ffb\u8bd1\u95ee\u9898------\n                    if (field.getAnnotation(Dict.class) != null) {\n                        if (!dictFieldList.contains(field)) {\n                            dictFieldList.add(field);\n                        }\n                        String code = field.getAnnotation(Dict.class).dicCode();\n                        String text = field.getAnnotation(Dict.class).dicText();\n                        String table = field.getAnnotation(Dict.class).dictTable();\n\n                        List<String> dataList;\n                        String dictCode = code;\n                        if (!StringUtils.isEmpty(table)) {\n                            dictCode = String.format(\"%s,%s,%s\", table, text, code);\n                        }\n                        dataList = dataListMap.computeIfAbsent(dictCode, k -> new ArrayList<>());\n                        this.listAddAllDeduplicate(dataList, Arrays.asList(value.split(\",\")));\n                    }\n                    //date\u7c7b\u578b\u9ed8\u8ba4\u8f6c\u6362string\u683c\u5f0f\u5316\u65e5\u671f\n                    //update-begin--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                    //if (JAVA_UTIL_DATE.equals(field.getType().getName())&&field.getAnnotation(JsonFormat.class)==null&&item.get(field.getName())!=null){\n                        //SimpleDateFormat aDate=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n                        // item.put(field.getName(), aDate.format(new Date((Long) item.get(field.getName()))));\n                    //}\n                    //update-end--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                }\n                items.add(item);\n            }\n\n            //step.2 \u8c03\u7528\u7ffb\u8bd1\u65b9\u6cd5\uff0c\u4e00\u6b21\u6027\u7ffb\u8bd1\n            Map<String, List<DictModel>> translText = this.translateAllDict(dataListMap);\n\n            //step.3 \u5c06\u7ffb\u8bd1\u7ed3\u679c\u586b\u5145\u5230\u8fd4\u56de\u7ed3\u679c\u91cc\n            for (JSONObject record : items) {\n                for (Field field : dictFieldList) {\n                    String code = field.getAnnotation(Dict.class).dicCode();\n                    String text = field.getAnnotation(Dict.class).dicText();\n                    String table = field.getAnnotation(Dict.class).dictTable();\n\n                    String fieldDictCode = code;\n                    if (!StringUtils.isEmpty(table)) {\n                        fieldDictCode = String.format(\"%s,%s,%s\", table, text, code);\n                    }\n\n                    String value = record.getString(field.getName());\n                    if (oConvertUtils.isNotEmpty(value)) {\n                        List<DictModel> dictModels = translText.get(fieldDictCode);\n                        if(dictModels==null || dictModels.size()==0){\n                            continue;\n                        }\n\n                        String textValue = this.translDictText(dictModels, value);\n                        log.debug(\" \u5b57\u5178Val : \" + textValue);\n                        log.debug(\" __\u7ffb\u8bd1\u5b57\u5178\u5b57\u6bb5__ \" + field.getName() + CommonConstant.DICT_TEXT_SUFFIX + \"\uff1a \" + textValue);\n\n                        // TODO-sun \u6d4b\u8bd5\u8f93\u51fa\uff0c\u5f85\u5220\n                        log.debug(\" ---- dictCode: \" + fieldDictCode);\n                        log.debug(\" ---- value: \" + value);\n                        log.debug(\" ----- text: \" + textValue);\n                        log.debug(\" ---- dictModels: \" + JSON.toJSONString(dictModels));\n\n                        record.put(field.getName() + CommonConstant.DICT_TEXT_SUFFIX, textValue);\n                    }\n                }\n            }\n\n            ((IPage) ((Result) result).getResult()).setRecords(items);\n        }\n\n    }\n    return result;\n}\n",
        "class_name": "DictAspect",
        "method_name": "parseDictText",
        "argument_name": [
            "Object result"
        ],
        "full_context": "package org.jeecg.common.aspect;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport com.alibaba.fastjson.parser.Feature;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.jeecg.common.api.CommonAPI;\nimport org.jeecg.common.api.vo.Result;\nimport org.jeecg.common.aspect.annotation.Dict;\nimport org.jeecg.common.constant.CommonConstant;\nimport org.jeecg.common.system.vo.DictModel;\nimport org.jeecg.common.util.oConvertUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\n\nimport java.lang.reflect.Field;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\n/**\n * @Description: \u5b57\u5178aop\u7c7b\n * @Author: dangzhenghui\n * @Date: 2019-3-17 21:50\n * @Version: 1.0\n */\n@Aspect\n@Component\n@Slf4j\npublic class DictAspect {\n    @Lazy\n    @Autowired\n    private CommonAPI commonApi;\n    @Autowired\n    public RedisTemplate redisTemplate;\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    private static final String JAVA_UTIL_DATE = \"java.util.Date\";\n\n    /**\n     * \u5b9a\u4e49\u5207\u70b9Pointcut\n     */\n    @Pointcut(\"execution(public * org.jeecg.modules..*.*Controller.*(..)) || @annotation(org.jeecg.common.aspect.annotation.AutoDict)\")\n    public void excudeService() {\n    }\n\n    @Around(\"excudeService()\")\n    public Object doAround(ProceedingJoinPoint pjp) throws Throwable {\n    \tlong time1=System.currentTimeMillis();\t\n        Object result = pjp.proceed();\n        long time2=System.currentTimeMillis();\n        log.debug(\"\u83b7\u53d6JSON\u6570\u636e \u8017\u65f6\uff1a\"+(time2-time1)+\"ms\");\n        long start=System.currentTimeMillis();\n        result=this.parseDictText(result);\n        long end=System.currentTimeMillis();\n        log.debug(\"\u6ce8\u5165\u5b57\u5178\u5230JSON\u6570\u636e  \u8017\u65f6\"+(end-start)+\"ms\");\n        return result;\n    }\n\n    /**\n     * \u672c\u65b9\u6cd5\u9488\u5bf9\u8fd4\u56de\u5bf9\u8c61\u4e3aResult \u7684IPage\u7684\u5206\u9875\u5217\u8868\u6570\u636e\u8fdb\u884c\u52a8\u6001\u5b57\u5178\u6ce8\u5165\n     * \u5b57\u5178\u6ce8\u5165\u5b9e\u73b0 \u901a\u8fc7\u5bf9\u5b9e\u4f53\u7c7b\u6dfb\u52a0\u6ce8\u89e3@dict \u6765\u6807\u8bc6\u9700\u8981\u7684\u5b57\u5178\u5185\u5bb9,\u5b57\u5178\u5206\u4e3a\u5355\u5b57\u5178code\u5373\u53ef \uff0ctable\u5b57\u5178 code table text\u914d\u5408\u4f7f\u7528\u4e0e\u539f\u6765jeecg\u7684\u7528\u6cd5\u76f8\u540c\n     * \u793a\u4f8b\u4e3aSysUser   \u5b57\u6bb5\u4e3asex \u6dfb\u52a0\u4e86\u6ce8\u89e3@Dict(dicCode = \"sex\") \u4f1a\u5728\u5b57\u5178\u670d\u52a1\u7acb\u9a6c\u67e5\u51fa\u6765\u5bf9\u5e94\u7684text \u7136\u540e\u5728\u8bf7\u6c42list\u7684\u65f6\u5019\u5c06\u8fd9\u4e2a\u5b57\u5178text\uff0c\u5df2\u5b57\u6bb5\u540d\u79f0\u52a0_dictText\u5f62\u5f0f\u8fd4\u56de\u5230\u524d\u7aef\n     * \u4f8b\u8f93\u5165\u5f53\u524d\u8fd4\u56de\u503c\u7684\u5c31\u4f1a\u591a\u51fa\u4e00\u4e2asex_dictText\u5b57\u6bb5\n     * {\n     *      sex:1,\n     *      sex_dictText:\"\u7537\"\n     * }\n     * \u524d\u7aef\u76f4\u63a5\u53d6\u503csext_dictText\u5728table\u91cc\u9762\u65e0\u9700\u518d\u8fdb\u884c\u524d\u7aef\u7684\u5b57\u5178\u8f6c\u6362\u4e86\n     *  customRender:function (text) {\n     *               if(text==1){\n     *                 return \"\u7537\";\n     *               }else if(text==2){\n     *                 return \"\u5973\";\n     *               }else{\n     *                 return text;\n     *               }\n     *             }\n     *             \u76ee\u524dvue\u662f\u8fd9\u4e48\u8fdb\u884c\u5b57\u5178\u6e32\u67d3\u5230table\u4e0a\u7684\u591a\u4e86\u5c31\u5f88\u9ebb\u70e6\u4e86 \u8fd9\u4e2a\u76f4\u63a5\u5728\u670d\u52a1\u7aef\u6e32\u67d3\u5b8c\u6210\u524d\u7aef\u53ef\u4ee5\u76f4\u63a5\u7528\n     * @param result\n     */\n    private Object parseDictText(Object result) {\n        if (result instanceof Result) {\n            if (((Result) result).getResult() instanceof IPage) {\n                List<JSONObject> items = new ArrayList<>();\n\n                //step.1 \u7b5b\u9009\u51fa\u52a0\u4e86 Dict \u6ce8\u89e3\u7684\u5b57\u6bb5\u5217\u8868\n                List<Field> dictFieldList = new ArrayList<>();\n                // \u5b57\u5178\u6570\u636e\u5217\u8868\uff0c key = \u5b57\u5178code\uff0cvalue=\u6570\u636e\u5217\u8868\n                Map<String, List<String>> dataListMap = new HashMap<>(5);\n                //\u53d6\u51fa\u7ed3\u679c\u96c6\n                List<Object> records=((IPage) ((Result) result).getResult()).getRecords();\n                //update-begin--Author:zyf -- Date:20220606 ----for\uff1a\u3010VUEN-1230\u3011 \u5224\u65ad\u662f\u5426\u542b\u6709\u5b57\u5178\u6ce8\u89e3,\u6ca1\u6709\u6ce8\u89e3\u8fd4\u56de-----\n                Boolean hasDict= checkHasDict(records);\n                if(!hasDict){\n                    return result;\n                }\n\n                log.debug(\" __ \u8fdb\u5165\u5b57\u5178\u7ffb\u8bd1\u5207\u9762 DictAspect \u2014\u2014 \" );\n                //update-end--Author:zyf -- Date:20220606 ----for\uff1a\u3010VUEN-1230\u3011 \u5224\u65ad\u662f\u5426\u542b\u6709\u5b57\u5178\u6ce8\u89e3,\u6ca1\u6709\u6ce8\u89e3\u8fd4\u56de-----\n                for (Object record : records) {\n                    String json=\"{}\";\n                    try {\n                        //update-begin--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                        //\u89e3\u51b3@JsonFormat\u6ce8\u89e3\u89e3\u6790\u4e0d\u4e86\u7684\u95ee\u9898\u8be6\u89c1SysAnnouncement\u7c7b\u7684@JsonFormat\n                         json = objectMapper.writeValueAsString(record);\n                        //update-end--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                    } catch (JsonProcessingException e) {\n                        log.error(\"json\u89e3\u6790\u5931\u8d25\"+e.getMessage(),e);\n                    }\n                    //update-begin--Author:scott -- Date:20211223 ----for\uff1a\u3010issues/3303\u3011restcontroller\u8fd4\u56dejson\u6570\u636e\u540ekey\u987a\u5e8f\u9519\u4e71 -----\n                    JSONObject item = JSONObject.parseObject(json, Feature.OrderedField);\n                    //update-end--Author:scott -- Date:20211223 ----for\uff1a\u3010issues/3303\u3011restcontroller\u8fd4\u56dejson\u6570\u636e\u540ekey\u987a\u5e8f\u9519\u4e71 -----\n\n                    //update-begin--Author:scott -- Date:20190603 ----for\uff1a\u89e3\u51b3\u7ee7\u627f\u5b9e\u4f53\u5b57\u6bb5\u65e0\u6cd5\u7ffb\u8bd1\u95ee\u9898------\n                    //for (Field field : record.getClass().getDeclaredFields()) {\n                    // \u904d\u5386\u6240\u6709\u5b57\u6bb5\uff0c\u628a\u5b57\u5178Code\u53d6\u51fa\u6765\uff0c\u653e\u5230 map \u91cc\n                    for (Field field : oConvertUtils.getAllFields(record)) {\n                        String value = item.getString(field.getName());\n                        if (oConvertUtils.isEmpty(value)) {\n                            continue;\n                        }\n                    //update-end--Author:scott  -- Date:20190603 ----for\uff1a\u89e3\u51b3\u7ee7\u627f\u5b9e\u4f53\u5b57\u6bb5\u65e0\u6cd5\u7ffb\u8bd1\u95ee\u9898------\n                        if (field.getAnnotation(Dict.class) != null) {\n                            if (!dictFieldList.contains(field)) {\n                                dictFieldList.add(field);\n                            }\n                            String code = field.getAnnotation(Dict.class).dicCode();\n                            String text = field.getAnnotation(Dict.class).dicText();\n                            String table = field.getAnnotation(Dict.class).dictTable();\n\n                            List<String> dataList;\n                            String dictCode = code;\n                            if (!StringUtils.isEmpty(table)) {\n                                dictCode = String.format(\"%s,%s,%s\", table, text, code);\n                            }\n                            dataList = dataListMap.computeIfAbsent(dictCode, k -> new ArrayList<>());\n                            this.listAddAllDeduplicate(dataList, Arrays.asList(value.split(\",\")));\n                        }\n                        //date\u7c7b\u578b\u9ed8\u8ba4\u8f6c\u6362string\u683c\u5f0f\u5316\u65e5\u671f\n                        //update-begin--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                        //if (JAVA_UTIL_DATE.equals(field.getType().getName())&&field.getAnnotation(JsonFormat.class)==null&&item.get(field.getName())!=null){\n                            //SimpleDateFormat aDate=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n                            // item.put(field.getName(), aDate.format(new Date((Long) item.get(field.getName()))));\n                        //}\n                        //update-end--Author:zyf -- Date:20220531 ----for\uff1a\u3010issues/#3629\u3011 DictAspect Jackson\u5e8f\u5217\u5316\u62a5\u9519-----\n                    }\n                    items.add(item);\n                }\n\n                //step.2 \u8c03\u7528\u7ffb\u8bd1\u65b9\u6cd5\uff0c\u4e00\u6b21\u6027\u7ffb\u8bd1\n                Map<String, List<DictModel>> translText = this.translateAllDict(dataListMap);\n\n                //step.3 \u5c06\u7ffb\u8bd1\u7ed3\u679c\u586b\u5145\u5230\u8fd4\u56de\u7ed3\u679c\u91cc\n                for (JSONObject record : items) {\n                    for (Field field : dictFieldList) {\n                        String code = field.getAnnotation(Dict.class).dicCode();\n                        String text = field.getAnnotation(Dict.class).dicText();\n                        String table = field.getAnnotation(Dict.class).dictTable();\n\n                        String fieldDictCode = code;\n                        if (!StringUtils.isEmpty(table)) {\n                            fieldDictCode = String.format(\"%s,%s,%s\", table, text, code);\n                        }\n\n                        String value = record.getString(field.getName());\n                        if (oConvertUtils.isNotEmpty(value)) {\n                            List<DictModel> dictModels = translText.get(fieldDictCode);\n                            if(dictModels==null || dictModels.size()==0){\n                                continue;\n                            }\n\n                            String textValue = this.translDictText(dictModels, value);\n                            log.debug(\" \u5b57\u5178Val : \" + textValue);\n                            log.debug(\" __\u7ffb\u8bd1\u5b57\u5178\u5b57\u6bb5__ \" + field.getName() + CommonConstant.DICT_TEXT_SUFFIX + \"\uff1a \" + textValue);\n\n                            // TODO-sun \u6d4b\u8bd5\u8f93\u51fa\uff0c\u5f85\u5220\n                            log.debug(\" ---- dictCode: \" + fieldDictCode);\n                            log.debug(\" ---- value: \" + value);\n                            log.debug(\" ----- text: \" + textValue);\n                            log.debug(\" ---- dictModels: \" + JSON.toJSONString(dictModels));\n\n                            record.put(field.getName() + CommonConstant.DICT_TEXT_SUFFIX, textValue);\n                        }\n                    }\n                }\n\n                ((IPage) ((Result) result).getResult()).setRecords(items);\n            }\n\n        }\n        return result;\n    }\n\n    /**\n     * list \u53bb\u91cd\u6dfb\u52a0\n     */\n    private void listAddAllDeduplicate(List<String> dataList, List<String> addList) {\n        // \u7b5b\u9009\u51fadataList\u4e2d\u6ca1\u6709\u7684\u6570\u636e\n        List<String> filterList = addList.stream().filter(i -> !dataList.contains(i)).collect(Collectors.toList());\n        dataList.addAll(filterList);\n    }\n\n    /**\n     * \u4e00\u6b21\u6027\u628a\u6240\u6709\u7684\u5b57\u5178\u90fd\u7ffb\u8bd1\u4e86\n     * 1.  \u6240\u6709\u7684\u666e\u901a\u6570\u636e\u5b57\u5178\u7684\u6240\u6709\u6570\u636e\u53ea\u6267\u884c\u4e00\u6b21SQL\n     * 2.  \u8868\u5b57\u5178\u76f8\u540c\u7684\u6240\u6709\u6570\u636e\u53ea\u6267\u884c\u4e00\u6b21SQL\n     * @param dataListMap\n     * @return\n     */\n    private Map<String, List<DictModel>> translateAllDict(Map<String, List<String>> dataListMap) {\n        // \u7ffb\u8bd1\u540e\u7684\u5b57\u5178\u6587\u672c\uff0ckey=dictCode\n        Map<String, List<DictModel>> translText = new HashMap<>(5);\n        // \u9700\u8981\u7ffb\u8bd1\u7684\u6570\u636e\uff08\u6709\u4e9b\u53ef\u4ee5\u4eceredis\u7f13\u5b58\u4e2d\u83b7\u53d6\uff0c\u5c31\u4e0d\u8d70\u6570\u636e\u5e93\u67e5\u8be2\uff09\n        List<String> needTranslData = new ArrayList<>();\n        //step.1 \u5148\u901a\u8fc7redis\u4e2d\u83b7\u53d6\u7f13\u5b58\u5b57\u5178\u6570\u636e\n        for (String dictCode : dataListMap.keySet()) {\n            List<String> dataList = dataListMap.get(dictCode);\n            if (dataList.size() == 0) {\n                continue;\n            }\n            // \u8868\u5b57\u5178\u9700\u8981\u7ffb\u8bd1\u7684\u6570\u636e\n            List<String> needTranslDataTable = new ArrayList<>();\n            for (String s : dataList) {\n                String data = s.trim();\n                if (data.length() == 0) {\n                    continue; //\u8df3\u8fc7\u5faa\u73af\n                }\n                if (dictCode.contains(\",\")) {\n                    String keyString = String.format(\"sys:cache:dictTable::SimpleKey [%s,%s]\", dictCode, data);\n                    if (redisTemplate.hasKey(keyString)) {\n                        try {\n                            String text = oConvertUtils.getString(redisTemplate.opsForValue().get(keyString));\n                            List<DictModel> list = translText.computeIfAbsent(dictCode, k -> new ArrayList<>());\n                            list.add(new DictModel(data, text));\n                        } catch (Exception e) {\n                            log.warn(e.getMessage());\n                        }\n                    } else if (!needTranslDataTable.contains(data)) {\n                        // \u53bb\u91cd\u6dfb\u52a0\n                        needTranslDataTable.add(data);\n                    }\n                } else {\n                    String keyString = String.format(\"sys:cache:dict::%s:%s\", dictCode, data);\n                    if (redisTemplate.hasKey(keyString)) {\n                        try {\n                            String text = oConvertUtils.getString(redisTemplate.opsForValue().get(keyString));\n                            List<DictModel> list = translText.computeIfAbsent(dictCode, k -> new ArrayList<>());\n                            list.add(new DictModel(data, text));\n                        } catch (Exception e) {\n                            log.warn(e.getMessage());\n                        }\n                    } else if (!needTranslData.contains(data)) {\n                        // \u53bb\u91cd\u6dfb\u52a0\n                        needTranslData.add(data);\n                    }\n                }\n\n            }\n            //step.2 \u8c03\u7528\u6570\u636e\u5e93\u7ffb\u8bd1\u8868\u5b57\u5178\n            if (needTranslDataTable.size() > 0) {\n                String[] arr = dictCode.split(\",\");\n                String table = arr[0], text = arr[1], code = arr[2];\n                String values = String.join(\",\", needTranslDataTable);\n                log.debug(\"translateDictFromTableByKeys.dictCode:\" + dictCode);\n                log.debug(\"translateDictFromTableByKeys.values:\" + values);\n                List<DictModel> texts = commonApi.translateDictFromTableByKeys(table, text, code, values);\n                log.debug(\"translateDictFromTableByKeys.result:\" + texts);\n                List<DictModel> list = translText.computeIfAbsent(dictCode, k -> new ArrayList<>());\n                list.addAll(texts);\n\n                // \u505a redis \u7f13\u5b58\n                for (DictModel dict : texts) {\n                    String redisKey = String.format(\"sys:cache:dictTable::SimpleKey [%s,%s]\", dictCode, dict.getValue());\n                    try {\n                        // update-begin-author:taoyan date:20211012 for: \u5b57\u5178\u8868\u7ffb\u8bd1\u6ce8\u89e3\u7f13\u5b58\u672a\u66f4\u65b0 issues/3061\n                        // \u4fdd\u75595\u5206\u949f\n                        redisTemplate.opsForValue().set(redisKey, dict.getText(), 300, TimeUnit.SECONDS);\n                        // update-end-author:taoyan date:20211012 for: \u5b57\u5178\u8868\u7ffb\u8bd1\u6ce8\u89e3\u7f13\u5b58\u672a\u66f4\u65b0 issues/3061\n                    } catch (Exception e) {\n                        log.warn(e.getMessage(), e);\n                    }\n                }\n            }\n        }\n\n        //step.3 \u8c03\u7528\u6570\u636e\u5e93\u8fdb\u884c\u7ffb\u8bd1\u666e\u901a\u5b57\u5178\n        if (needTranslData.size() > 0) {\n            List<String> dictCodeList = Arrays.asList(dataListMap.keySet().toArray(new String[]{}));\n            // \u5c06\u4e0d\u5305\u542b\u9017\u53f7\u7684\u5b57\u5178code\u7b5b\u9009\u51fa\u6765\uff0c\u56e0\u4e3a\u5e26\u9017\u53f7\u7684\u662f\u8868\u5b57\u5178\uff0c\u800c\u4e0d\u662f\u666e\u901a\u7684\u6570\u636e\u5b57\u5178\n            List<String> filterDictCodes = dictCodeList.stream().filter(key -> !key.contains(\",\")).collect(Collectors.toList());\n            String dictCodes = String.join(\",\", filterDictCodes);\n            String values = String.join(\",\", needTranslData);\n            log.debug(\"translateManyDict.dictCodes:\" + dictCodes);\n            log.debug(\"translateManyDict.values:\" + values);\n            Map<String, List<DictModel>> manyDict = commonApi.translateManyDict(dictCodes, values);\n            log.debug(\"translateManyDict.result:\" + manyDict);\n            for (String dictCode : manyDict.keySet()) {\n                List<DictModel> list = translText.computeIfAbsent(dictCode, k -> new ArrayList<>());\n                List<DictModel> newList = manyDict.get(dictCode);\n                list.addAll(newList);\n\n                // \u505a redis \u7f13\u5b58\n                for (DictModel dict : newList) {\n                    String redisKey = String.format(\"sys:cache:dict::%s:%s\", dictCode, dict.getValue());\n                    try {\n                        redisTemplate.opsForValue().set(redisKey, dict.getText());\n                    } catch (Exception e) {\n                        log.warn(e.getMessage(), e);\n                    }\n                }\n            }\n        }\n        return translText;\n    }\n\n    /**\n     * \u5b57\u5178\u503c\u66ff\u6362\u6587\u672c\n     *\n     * @param dictModels\n     * @param values\n     * @return\n     */\n    private String translDictText(List<DictModel> dictModels, String values) {\n        List<String> result = new ArrayList<>();\n\n        // \u5141\u8bb8\u591a\u4e2a\u9017\u53f7\u5206\u9694\uff0c\u5141\u8bb8\u4f20\u6570\u7ec4\u5bf9\u8c61\n        String[] splitVal = values.split(\",\");\n        for (String val : splitVal) {\n            String dictText = val;\n            for (DictModel dict : dictModels) {\n                if (val.equals(dict.getValue())) {\n                    dictText = dict.getText();\n                    break;\n                }\n            }\n            result.add(dictText);\n        }\n        return String.join(\",\", result);\n    }\n\n    /**\n     *  \u7ffb\u8bd1\u5b57\u5178\u6587\u672c\n     * @param code\n     * @param text\n     * @param table\n     * @param key\n     * @return\n     */\n    @Deprecated\n    private String translateDictValue(String code, String text, String table, String key) {\n    \tif(oConvertUtils.isEmpty(key)) {\n    \t\treturn null;\n    \t}\n        StringBuffer textValue=new StringBuffer();\n        String[] keys = key.split(\",\");\n        for (String k : keys) {\n            String tmpValue = null;\n            log.debug(\" \u5b57\u5178 key : \"+ k);\n            if (k.trim().length() == 0) {\n                continue; //\u8df3\u8fc7\u5faa\u73af\n            }\n            //update-begin--Author:scott -- Date:20210531 ----for\uff1a !56 \u4f18\u5316\u5fae\u670d\u52a1\u5e94\u7528\u4e0b\u5b58\u5728\u8868\u5b57\u6bb5\u9700\u8981\u5b57\u5178\u7ffb\u8bd1\u65f6\u52a0\u8f7d\u7f13\u6162\u95ee\u9898-----\n            if (!StringUtils.isEmpty(table)){\n                log.debug(\"--DictAspect------dicTable=\"+ table+\" ,dicText= \"+text+\" ,dicCode=\"+code);\n                String keyString = String.format(\"sys:cache:dictTable::SimpleKey [%s,%s,%s,%s]\",table,text,code,k.trim());\n                    if (redisTemplate.hasKey(keyString)){\n                    try {\n                        tmpValue = oConvertUtils.getString(redisTemplate.opsForValue().get(keyString));\n                    } catch (Exception e) {\n                        log.warn(e.getMessage());\n                    }\n                }else {\n                    tmpValue= commonApi.translateDictFromTable(table,text,code,k.trim());\n                }\n            }else {\n                String keyString = String.format(\"sys:cache:dict::%s:%s\",code,k.trim());\n                if (redisTemplate.hasKey(keyString)){\n                    try {\n                        tmpValue = oConvertUtils.getString(redisTemplate.opsForValue().get(keyString));\n                    } catch (Exception e) {\n                       log.warn(e.getMessage());\n                    }\n                }else {\n                    tmpValue = commonApi.translateDict(code, k.trim());\n                }\n            }\n            //update-end--Author:scott -- Date:20210531 ----for\uff1a !56 \u4f18\u5316\u5fae\u670d\u52a1\u5e94\u7528\u4e0b\u5b58\u5728\u8868\u5b57\u6bb5\u9700\u8981\u5b57\u5178\u7ffb\u8bd1\u65f6\u52a0\u8f7d\u7f13\u6162\u95ee\u9898-----\n\n            if (tmpValue != null) {\n                if (!\"\".equals(textValue.toString())) {\n                    textValue.append(\",\");\n                }\n                textValue.append(tmpValue);\n            }\n\n        }\n        return textValue.toString();\n    }\n\n    /**\n     * \u68c0\u6d4b\u8fd4\u56de\u7ed3\u679c\u96c6\u4e2d\u662f\u5426\u5305\u542bDict\u6ce8\u89e3\n     * @param records\n     * @return\n     */\n    private Boolean checkHasDict(List<Object> records){\n        if(oConvertUtils.isNotEmpty(records) && records.size()>0){\n            for (Field field : oConvertUtils.getAllFields(records.get(0))) {\n                if (oConvertUtils.isNotEmpty(field.getAnnotation(Dict.class))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n}\n",
        "simple_context": "package org.jeecg.common.aspect;\n\nimport com.alibaba.fastjson.JSON;\n\nimport com.alibaba.fastjson.JSONObject;\n\nimport com.alibaba.fastjson.parser.Feature;\n\nimport com.baomidou.mybatisplus.core.metadata.IPage;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.aspectj.lang.ProceedingJoinPoint;\n\nimport org.aspectj.lang.annotation.Around;\n\nimport org.aspectj.lang.annotation.Aspect;\n\nimport org.aspectj.lang.annotation.Pointcut;\n\nimport org.jeecg.common.api.CommonAPI;\n\nimport org.jeecg.common.api.vo.Result;\n\nimport org.jeecg.common.aspect.annotation.Dict;\n\nimport org.jeecg.common.constant.CommonConstant;\n\nimport org.jeecg.common.system.vo.DictModel;\n\nimport org.jeecg.common.util.oConvertUtils;\n\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport org.springframework.context.annotation.Lazy;\n\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport org.springframework.stereotype.Component;\n\nimport org.springframework.util.StringUtils;\n\nimport java.lang.reflect.Field;\n\nimport java.util;\n\nimport java.util.concurrent.TimeUnit;\n\nimport java.util.stream.Collectors;\n\npublic class DictAspect {\n    private CommonAPI commonApi;\n    public RedisTemplate redisTemplate;\n    private ObjectMapper objectMapper;\n    static final private String JAVA_UTIL_DATE;\n    public  excudeService();\n    public Object doAround(ProceedingJoinPoint pjp)throws Throwable;\n    private Object parseDictText(Object result);\n    private  listAddAllDeduplicate(List<String> dataList, List<String> addList);\n    private Map<String, List<DictModel>> translateAllDict(Map<String, List<String>> dataListMap);\n    private String translDictText(List<DictModel> dictModels, String values);\n    private String translateDictValue(String code, String text, String table, String key);\n    private Boolean checkHasDict(List<Object> records);\n}\n\n"
    },
    {
        "project_name": "jeecg-boot",
        "file_name": "SensitiveInfoUtil.java",
        "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/desensitization/util/SensitiveInfoUtil.java",
        "execute_path": "jeecg-boot",
        "package": "org.jeecg.common.desensitization.util",
        "docstring": "/**\n     * \u5904\u7406\u5d4c\u5957\u5bf9\u8c61\n     * @param obj \u65b9\u6cd5\u8fd4\u56de\u503c\n     * @param entity \u5b9e\u4f53class\n     * @param isEncode \u662f\u5426\u52a0\u5bc6\uff08true: \u52a0\u5bc6\u64cd\u4f5c / false:\u89e3\u5bc6\u64cd\u4f5c\uff09\n     * @throws IllegalAccessException\n     */",
        "source_code": "\npublic static void handleNestedObject(Object obj, Class entity, boolean isEncode) throws IllegalAccessException {\n    Field[] fields = obj.getClass().getDeclaredFields();\n    for (Field field : fields) {\n        if(field.getType().isPrimitive()){\n            continue;\n        }\n        if(field.getType().equals(entity)){\n            // \u5bf9\u8c61\u91cc\u9762\u662f\u5b9e\u4f53\n            field.setAccessible(true);\n            Object nestedObject = field.get(obj);\n            handlerObject(nestedObject, isEncode);\n            break;\n        }else{\n            // \u5bf9\u8c61\u91cc\u9762\u662fList<\u5b9e\u4f53>\n            if(field.getGenericType() instanceof ParameterizedType){\n                ParameterizedType pt = (ParameterizedType)field.getGenericType();\n                if(pt.getRawType().equals(List.class)){\n                    if(pt.getActualTypeArguments()[0].equals(entity)){\n                        field.setAccessible(true);\n                        Object nestedObject = field.get(obj);\n                        handleList(nestedObject, entity, isEncode);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "class_name": "SensitiveInfoUtil",
        "method_name": "handleNestedObject",
        "argument_name": [
            "Object obj",
            "Class entity",
            "boolean isEncode"
        ],
        "full_context": "package org.jeecg.common.desensitization.util;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.jeecg.common.desensitization.annotation.SensitiveField;\nimport org.jeecg.common.desensitization.enums.SensitiveEnum;\nimport org.jeecg.common.util.encryption.AesEncryptUtil;\nimport org.jeecg.common.util.oConvertUtils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * \u654f\u611f\u4fe1\u606f\u5904\u7406\u5de5\u5177\u7c7b\n * @author taoYan\n * @date 2022/4/20 18:01\n **/\n@Slf4j\npublic class SensitiveInfoUtil {\n\n    /**\n     * \u5904\u7406\u5d4c\u5957\u5bf9\u8c61\n     * @param obj \u65b9\u6cd5\u8fd4\u56de\u503c\n     * @param entity \u5b9e\u4f53class\n     * @param isEncode \u662f\u5426\u52a0\u5bc6\uff08true: \u52a0\u5bc6\u64cd\u4f5c / false:\u89e3\u5bc6\u64cd\u4f5c\uff09\n     * @throws IllegalAccessException\n     */\n    public static void handleNestedObject(Object obj, Class entity, boolean isEncode) throws IllegalAccessException {\n        Field[] fields = obj.getClass().getDeclaredFields();\n        for (Field field : fields) {\n            if(field.getType().isPrimitive()){\n                continue;\n            }\n            if(field.getType().equals(entity)){\n                // \u5bf9\u8c61\u91cc\u9762\u662f\u5b9e\u4f53\n                field.setAccessible(true);\n                Object nestedObject = field.get(obj);\n                handlerObject(nestedObject, isEncode);\n                break;\n            }else{\n                // \u5bf9\u8c61\u91cc\u9762\u662fList<\u5b9e\u4f53>\n                if(field.getGenericType() instanceof ParameterizedType){\n                    ParameterizedType pt = (ParameterizedType)field.getGenericType();\n                    if(pt.getRawType().equals(List.class)){\n                        if(pt.getActualTypeArguments()[0].equals(entity)){\n                            field.setAccessible(true);\n                            Object nestedObject = field.get(obj);\n                            handleList(nestedObject, entity, isEncode);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * \u5904\u7406Object\n     * @param obj \u65b9\u6cd5\u8fd4\u56de\u503c\n     * @param isEncode \u662f\u5426\u52a0\u5bc6\uff08true: \u52a0\u5bc6\u64cd\u4f5c / false:\u89e3\u5bc6\u64cd\u4f5c\uff09\n     * @return\n     * @throws IllegalAccessException\n     */\n    public static Object handlerObject(Object obj, boolean isEncode) throws IllegalAccessException {\n        if (oConvertUtils.isEmpty(obj)) {\n            return obj;\n        }\n        long startTime=System.currentTimeMillis();\n        log.debug(\" obj --> \"+ obj.toString());\n        \n        // \u5224\u65ad\u662f\u4e0d\u662f\u4e00\u4e2a\u5bf9\u8c61\n        Field[] fields = obj.getClass().getDeclaredFields();\n        for (Field field : fields) {\n            boolean isSensitiveField = field.isAnnotationPresent(SensitiveField.class);\n            if(isSensitiveField){\n                // \u5fc5\u987b\u6709SensitiveField\u6ce8\u89e3 \u624d\u4f5c\u5904\u7406\n                if(field.getType().isAssignableFrom(String.class)){\n                    //\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u7c7b\u578b \u624d\u4f5c\u5904\u7406\n                    field.setAccessible(true);\n                    String realValue = (String) field.get(obj);\n                    if(realValue==null || \"\".equals(realValue)){\n                        continue;\n                    }\n                    SensitiveField sf = field.getAnnotation(SensitiveField.class);\n                    if(isEncode==true){\n                        //\u52a0\u5bc6\n                        String value = SensitiveInfoUtil.getEncodeData(realValue,  sf.type());\n                        field.set(obj, value);\n                    }else{\n                        //\u89e3\u5bc6\u53ea\u5904\u7406 encode\u7c7b\u578b\u7684\n                        if(sf.type().equals(SensitiveEnum.ENCODE)){\n                            String value = SensitiveInfoUtil.getDecodeData(realValue);\n                            field.set(obj, value);\n                        }\n                    }\n                }\n            }\n        }\n        //long endTime=System.currentTimeMillis();\n        //log.info((isEncode ? \"\u52a0\u5bc6\u64cd\u4f5c\uff0c\" : \"\u89e3\u5bc6\u64cd\u4f5c\uff0c\") + \"\u5f53\u524d\u7a0b\u5e8f\u8017\u65f6\uff1a\" + (endTime - startTime) + \"ms\");\n        return obj;\n    }\n\n    /**\n     * \u5904\u7406 List<\u5b9e\u4f53>\n     * @param obj\n     * @param entity\n     * @param isEncode\uff08true: \u52a0\u5bc6\u64cd\u4f5c / false:\u89e3\u5bc6\u64cd\u4f5c\uff09\n     */\n    public static void handleList(Object obj, Class entity, boolean isEncode){\n        List list = (List)obj;\n        if(list.size()>0){\n            Object first = list.get(0);\n            if(first.getClass().equals(entity)){\n                for(int i=0; i<list.size(); i++){\n                    Object temp = list.get(i);\n                    try {\n                        handlerObject(temp, isEncode);\n                    } catch (IllegalAccessException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n\n\n    /**\n     * \u5904\u7406\u6570\u636e \u83b7\u53d6\u89e3\u5bc6\u540e\u7684\u6570\u636e\n     * @param data\n     * @return\n     */\n    public static String getDecodeData(String data){\n        String result = null;\n        try {\n            result = AesEncryptUtil.desEncrypt(data);\n        } catch (Exception exception) {\n            log.debug(\"\u6570\u636e\u89e3\u5bc6\u9519\u8bef\uff0c\u539f\u6570\u636e:\"+data);\n        }\n        //\u89e3\u51b3debug\u6a21\u5f0f\u4e0b\uff0c\u52a0\u89e3\u5bc6\u5931\u6548\u5bfc\u81f4\u4e2d\u6587\u88ab\u89e3\u5bc6\u53d8\u6210\u7a7a\u7684\u95ee\u9898\n        if(oConvertUtils.isEmpty(result) && oConvertUtils.isNotEmpty(data)){\n            result = data;\n        }\n        return result;\n    }\n\n    /**\n     * \u5904\u7406\u6570\u636e \u83b7\u53d6\u52a0\u5bc6\u540e\u7684\u6570\u636e \u6216\u662f\u683c\u5f0f\u5316\u540e\u7684\u6570\u636e\n     * @param data \u5b57\u7b26\u4e32\n     * @param sensitiveEnum \u7c7b\u578b\n     * @return \u5904\u7406\u540e\u7684\u5b57\u7b26\u4e32\n     */\n    public static String getEncodeData(String data, SensitiveEnum sensitiveEnum){\n        String result;\n        switch (sensitiveEnum){\n            case ENCODE:\n                try {\n                    result = AesEncryptUtil.encrypt(data);\n                } catch (Exception exception) {\n                    log.error(\"\u6570\u636e\u52a0\u5bc6\u9519\u8bef\", exception.getMessage());\n                    result = data;\n                }\n                break;\n            case CHINESE_NAME:\n                result = chineseName(data);\n                break;\n            case ID_CARD:\n                result = idCardNum(data);\n                break;\n            case FIXED_PHONE:\n                result = fixedPhone(data);\n                break;\n            case MOBILE_PHONE:\n                result = mobilePhone(data);\n                break;\n            case ADDRESS:\n                result = address(data, 3);\n                break;\n            case EMAIL:\n                result = email(data);\n                break;\n            case BANK_CARD:\n                result = bankCard(data);\n                break;\n            case CNAPS_CODE:\n                result = cnapsCode(data);\n                break;\n            default:\n                result = data;\n        }\n        return result;\n    }\n\n\n    /**\n     * [\u4e2d\u6587\u59d3\u540d] \u53ea\u663e\u793a\u7b2c\u4e00\u4e2a\u6c49\u5b57\uff0c\u5176\u4ed6\u9690\u85cf\u4e3a2\u4e2a\u661f\u53f7\n     * @param fullName \u5168\u540d\n     * @return <\u4f8b\u5b50\uff1a\u674e**>\n     */\n    private static String chineseName(String fullName) {\n        if (oConvertUtils.isEmpty(fullName)) {\n            return \"\";\n        }\n        return formatRight(fullName, 1);\n    }\n\n    /**\n     * [\u4e2d\u6587\u59d3\u540d] \u53ea\u663e\u793a\u7b2c\u4e00\u4e2a\u6c49\u5b57\uff0c\u5176\u4ed6\u9690\u85cf\u4e3a2\u4e2a\u661f\u53f7\n     * @param familyName \u59d3\n     * @param firstName \u540d\n     * @return <\u4f8b\u5b50\uff1a\u674e**>\n     */\n    private static String chineseName(String familyName, String firstName) {\n        if (oConvertUtils.isEmpty(familyName) || oConvertUtils.isEmpty(firstName)) {\n            return \"\";\n        }\n        return chineseName(familyName + firstName);\n    }\n\n    /**\n     * [\u8eab\u4efd\u8bc1\u53f7] \u663e\u793a\u6700\u540e\u56db\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5171\u8ba118\u4f4d\u6216\u800515\u4f4d\u3002\n     * @param id \u8eab\u4efd\u8bc1\u53f7\n     * @return <\u4f8b\u5b50\uff1a*************5762>\n     */\n    private static String idCardNum(String id) {\n        if (oConvertUtils.isEmpty(id)) {\n            return \"\";\n        }\n        return formatLeft(id, 4);\n\n    }\n\n    /**\n     * [\u56fa\u5b9a\u7535\u8bdd] \u540e\u56db\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\n     * @param num \u56fa\u5b9a\u7535\u8bdd\n     * @return <\u4f8b\u5b50\uff1a****1234>\n     */\n    private static String fixedPhone(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        return formatLeft(num, 4);\n    }\n\n    /**\n     * [\u624b\u673a\u53f7\u7801] \u524d\u4e09\u4f4d\uff0c\u540e\u56db\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\n     * @param num \u624b\u673a\u53f7\u7801\n     * @return <\u4f8b\u5b50:138******1234>\n     */\n    private static String mobilePhone(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int len = num.length();\n        if(len<11){\n            return num;\n        }\n        return formatBetween(num, 3, 4);\n    }\n\n    /**\n     * [\u5730\u5740] \u53ea\u663e\u793a\u5230\u5730\u533a\uff0c\u4e0d\u663e\u793a\u8be6\u7ec6\u5730\u5740\uff1b\u6211\u4eec\u8981\u5bf9\u4e2a\u4eba\u4fe1\u606f\u589e\u5f3a\u4fdd\u62a4\n     * @param address \u5730\u5740\n     * @param sensitiveSize \u654f\u611f\u4fe1\u606f\u957f\u5ea6\n     * @return <\u4f8b\u5b50\uff1a\u5317\u4eac\u5e02\u6d77\u6dc0\u533a****>\n     */\n    private static String address(String address, int sensitiveSize) {\n        if (oConvertUtils.isEmpty(address)) {\n            return \"\";\n        }\n        int len = address.length();\n        if(len<sensitiveSize){\n            return address;\n        }\n        return formatRight(address, sensitiveSize);\n    }\n\n    /**\n     * [\u7535\u5b50\u90ae\u7bb1] \u90ae\u7bb1\u524d\u7f00\u4ec5\u663e\u793a\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u524d\u7f00\u5176\u4ed6\u9690\u85cf\uff0c\u7528\u661f\u53f7\u4ee3\u66ff\uff0c@\u53ca\u540e\u9762\u7684\u5730\u5740\u663e\u793a\n     * @param email \u7535\u5b50\u90ae\u7bb1\n     * @return <\u4f8b\u5b50:g**@163.com>\n     */\n    private static String email(String email) {\n        if (oConvertUtils.isEmpty(email)) {\n            return \"\";\n        }\n        int index = email.indexOf(\"@\");\n        if (index <= 1){\n            return email;\n        }\n        String begin = email.substring(0, 1);\n        String end = email.substring(index);\n        String stars = \"**\";\n        return begin + stars + end;\n    }\n\n    /**\n     * [\u94f6\u884c\u5361\u53f7] \u524d\u516d\u4f4d\uff0c\u540e\u56db\u4f4d\uff0c\u5176\u4ed6\u7528\u661f\u53f7\u9690\u85cf\u6bcf\u4f4d1\u4e2a\u661f\u53f7\n     * @param cardNum \u94f6\u884c\u5361\u53f7\n     * @return <\u4f8b\u5b50:6222600**********1234>\n     */\n    private static String bankCard(String cardNum) {\n        if (oConvertUtils.isEmpty(cardNum)) {\n            return \"\";\n        }\n        return formatBetween(cardNum, 6, 4);\n    }\n\n    /**\n     * [\u516c\u53f8\u5f00\u6237\u94f6\u884c\u8054\u53f7] \u516c\u53f8\u5f00\u6237\u94f6\u884c\u8054\u884c\u53f7,\u663e\u793a\u524d\u4e24\u4f4d\uff0c\u5176\u4ed6\u7528\u661f\u53f7\u9690\u85cf\uff0c\u6bcf\u4f4d1\u4e2a\u661f\u53f7\n     * @param code \u516c\u53f8\u5f00\u6237\u94f6\u884c\u8054\u53f7\n     * @return <\u4f8b\u5b50:12********>\n     */\n    private static String cnapsCode(String code) {\n        if (oConvertUtils.isEmpty(code)) {\n            return \"\";\n        }\n        return formatRight(code, 2);\n    }\n\n\n    /**\n     * \u5c06\u53f3\u8fb9\u7684\u683c\u5f0f\u5316\u6210*\n     * @param str \u5b57\u7b26\u4e32\n     * @param reservedLength \u4fdd\u7559\u957f\u5ea6\n     * @return \u683c\u5f0f\u5316\u540e\u7684\u5b57\u7b26\u4e32\n     */\n    private static String formatRight(String str, int reservedLength){\n        String name = str.substring(0, reservedLength);\n        String stars = String.join(\"\", Collections.nCopies(str.length()-reservedLength, \"*\"));\n        return name + stars;\n    }\n\n    /**\n     * \u5c06\u5de6\u8fb9\u7684\u683c\u5f0f\u5316\u6210*\n     * @param str \u5b57\u7b26\u4e32\n     * @param reservedLength \u4fdd\u7559\u957f\u5ea6\n     * @return \u683c\u5f0f\u5316\u540e\u7684\u5b57\u7b26\u4e32\n     */\n    private static String formatLeft(String str, int reservedLength){\n        int len = str.length();\n        String show = str.substring(len-reservedLength);\n        String stars = String.join(\"\", Collections.nCopies(len-reservedLength, \"*\"));\n        return stars + show;\n    }\n\n    /**\n     * \u5c06\u4e2d\u95f4\u7684\u683c\u5f0f\u5316\u6210*\n     * @param str \u5b57\u7b26\u4e32\n     * @param beginLen \u5f00\u59cb\u4fdd\u7559\u957f\u5ea6\n     * @param endLen \u7ed3\u5c3e\u4fdd\u7559\u957f\u5ea6\n     * @return \u683c\u5f0f\u5316\u540e\u7684\u5b57\u7b26\u4e32\n     */\n    private static String formatBetween(String str, int beginLen, int endLen){\n        int len = str.length();\n        String begin = str.substring(0, beginLen);\n        String end = str.substring(len-endLen);\n        String stars = String.join(\"\", Collections.nCopies(len-beginLen-endLen, \"*\"));\n        return begin + stars + end;\n    }\n\n}\n",
        "simple_context": "package org.jeecg.common.desensitization.util;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.jeecg.common.desensitization.annotation.SensitiveField;\n\nimport org.jeecg.common.desensitization.enums.SensitiveEnum;\n\nimport org.jeecg.common.util.encryption.AesEncryptUtil;\n\nimport org.jeecg.common.util.oConvertUtils;\n\nimport java.lang.reflect.Field;\n\nimport java.lang.reflect.ParameterizedType;\n\nimport java.util.Collections;\n\nimport java.util.List;\n\npublic class SensitiveInfoUtil {\n    static public  handleNestedObject(Object obj, Class entity, boolean isEncode)throws IllegalAccessException;\n    static public Object handlerObject(Object obj, boolean isEncode)throws IllegalAccessException;\n    static public  handleList(Object obj, Class entity, boolean isEncode);\n    static public String getDecodeData(String data);\n    static public String getEncodeData(String data, SensitiveEnum sensitiveEnum);\n    static private String chineseName(String fullName);\n    static private String chineseName(String familyName, String firstName);\n    static private String idCardNum(String id);\n    static private String fixedPhone(String num);\n    static private String mobilePhone(String num);\n    static private String address(String address, int sensitiveSize);\n    static private String email(String email);\n    static private String bankCard(String cardNum);\n    static private String cnapsCode(String code);\n    static private String formatRight(String str, int reservedLength);\n    static private String formatLeft(String str, int reservedLength);\n    static private String formatBetween(String str, int beginLen, int endLen);\n}\n\n"
    },
    {
        "project_name": "jeecg-boot",
        "file_name": "SensitiveInfoUtil.java",
        "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/desensitization/util/SensitiveInfoUtil.java",
        "execute_path": "jeecg-boot",
        "package": "org.jeecg.common.desensitization.util",
        "docstring": "/**\n     * \u5904\u7406\u6570\u636e \u83b7\u53d6\u52a0\u5bc6\u540e\u7684\u6570\u636e \u6216\u662f\u683c\u5f0f\u5316\u540e\u7684\u6570\u636e\n     * @param data \u5b57\u7b26\u4e32\n     * @param sensitiveEnum \u7c7b\u578b\n     * @return \u5904\u7406\u540e\u7684\u5b57\u7b26\u4e32\n     */",
        "source_code": "\npublic static String getEncodeData(String data, SensitiveEnum sensitiveEnum){\n    String result;\n    switch (sensitiveEnum){\n        case ENCODE:\n            try {\n                result = AesEncryptUtil.encrypt(data);\n            } catch (Exception exception) {\n                log.error(\"\u6570\u636e\u52a0\u5bc6\u9519\u8bef\", exception.getMessage());\n                result = data;\n            }\n            break;\n        case CHINESE_NAME:\n            result = chineseName(data);\n            break;\n        case ID_CARD:\n            result = idCardNum(data);\n            break;\n        case FIXED_PHONE:\n            result = fixedPhone(data);\n            break;\n        case MOBILE_PHONE:\n            result = mobilePhone(data);\n            break;\n        case ADDRESS:\n            result = address(data, 3);\n            break;\n        case EMAIL:\n            result = email(data);\n            break;\n        case BANK_CARD:\n            result = bankCard(data);\n            break;\n        case CNAPS_CODE:\n            result = cnapsCode(data);\n            break;\n        default:\n            result = data;\n    }\n    return result;\n}\n",
        "class_name": "SensitiveInfoUtil",
        "method_name": "getEncodeData",
        "argument_name": [
            "String data",
            "SensitiveEnum sensitiveEnum"
        ],
        "full_context": "package org.jeecg.common.desensitization.util;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.jeecg.common.desensitization.annotation.SensitiveField;\nimport org.jeecg.common.desensitization.enums.SensitiveEnum;\nimport org.jeecg.common.util.encryption.AesEncryptUtil;\nimport org.jeecg.common.util.oConvertUtils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * \u654f\u611f\u4fe1\u606f\u5904\u7406\u5de5\u5177\u7c7b\n * @author taoYan\n * @date 2022/4/20 18:01\n **/\n@Slf4j\npublic class SensitiveInfoUtil {\n\n    /**\n     * \u5904\u7406\u5d4c\u5957\u5bf9\u8c61\n     * @param obj \u65b9\u6cd5\u8fd4\u56de\u503c\n     * @param entity \u5b9e\u4f53class\n     * @param isEncode \u662f\u5426\u52a0\u5bc6\uff08true: \u52a0\u5bc6\u64cd\u4f5c / false:\u89e3\u5bc6\u64cd\u4f5c\uff09\n     * @throws IllegalAccessException\n     */\n    public static void handleNestedObject(Object obj, Class entity, boolean isEncode) throws IllegalAccessException {\n        Field[] fields = obj.getClass().getDeclaredFields();\n        for (Field field : fields) {\n            if(field.getType().isPrimitive()){\n                continue;\n            }\n            if(field.getType().equals(entity)){\n                // \u5bf9\u8c61\u91cc\u9762\u662f\u5b9e\u4f53\n                field.setAccessible(true);\n                Object nestedObject = field.get(obj);\n                handlerObject(nestedObject, isEncode);\n                break;\n            }else{\n                // \u5bf9\u8c61\u91cc\u9762\u662fList<\u5b9e\u4f53>\n                if(field.getGenericType() instanceof ParameterizedType){\n                    ParameterizedType pt = (ParameterizedType)field.getGenericType();\n                    if(pt.getRawType().equals(List.class)){\n                        if(pt.getActualTypeArguments()[0].equals(entity)){\n                            field.setAccessible(true);\n                            Object nestedObject = field.get(obj);\n                            handleList(nestedObject, entity, isEncode);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * \u5904\u7406Object\n     * @param obj \u65b9\u6cd5\u8fd4\u56de\u503c\n     * @param isEncode \u662f\u5426\u52a0\u5bc6\uff08true: \u52a0\u5bc6\u64cd\u4f5c / false:\u89e3\u5bc6\u64cd\u4f5c\uff09\n     * @return\n     * @throws IllegalAccessException\n     */\n    public static Object handlerObject(Object obj, boolean isEncode) throws IllegalAccessException {\n        if (oConvertUtils.isEmpty(obj)) {\n            return obj;\n        }\n        long startTime=System.currentTimeMillis();\n        log.debug(\" obj --> \"+ obj.toString());\n        \n        // \u5224\u65ad\u662f\u4e0d\u662f\u4e00\u4e2a\u5bf9\u8c61\n        Field[] fields = obj.getClass().getDeclaredFields();\n        for (Field field : fields) {\n            boolean isSensitiveField = field.isAnnotationPresent(SensitiveField.class);\n            if(isSensitiveField){\n                // \u5fc5\u987b\u6709SensitiveField\u6ce8\u89e3 \u624d\u4f5c\u5904\u7406\n                if(field.getType().isAssignableFrom(String.class)){\n                    //\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u7c7b\u578b \u624d\u4f5c\u5904\u7406\n                    field.setAccessible(true);\n                    String realValue = (String) field.get(obj);\n                    if(realValue==null || \"\".equals(realValue)){\n                        continue;\n                    }\n                    SensitiveField sf = field.getAnnotation(SensitiveField.class);\n                    if(isEncode==true){\n                        //\u52a0\u5bc6\n                        String value = SensitiveInfoUtil.getEncodeData(realValue,  sf.type());\n                        field.set(obj, value);\n                    }else{\n                        //\u89e3\u5bc6\u53ea\u5904\u7406 encode\u7c7b\u578b\u7684\n                        if(sf.type().equals(SensitiveEnum.ENCODE)){\n                            String value = SensitiveInfoUtil.getDecodeData(realValue);\n                            field.set(obj, value);\n                        }\n                    }\n                }\n            }\n        }\n        //long endTime=System.currentTimeMillis();\n        //log.info((isEncode ? \"\u52a0\u5bc6\u64cd\u4f5c\uff0c\" : \"\u89e3\u5bc6\u64cd\u4f5c\uff0c\") + \"\u5f53\u524d\u7a0b\u5e8f\u8017\u65f6\uff1a\" + (endTime - startTime) + \"ms\");\n        return obj;\n    }\n\n    /**\n     * \u5904\u7406 List<\u5b9e\u4f53>\n     * @param obj\n     * @param entity\n     * @param isEncode\uff08true: \u52a0\u5bc6\u64cd\u4f5c / false:\u89e3\u5bc6\u64cd\u4f5c\uff09\n     */\n    public static void handleList(Object obj, Class entity, boolean isEncode){\n        List list = (List)obj;\n        if(list.size()>0){\n            Object first = list.get(0);\n            if(first.getClass().equals(entity)){\n                for(int i=0; i<list.size(); i++){\n                    Object temp = list.get(i);\n                    try {\n                        handlerObject(temp, isEncode);\n                    } catch (IllegalAccessException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n\n\n    /**\n     * \u5904\u7406\u6570\u636e \u83b7\u53d6\u89e3\u5bc6\u540e\u7684\u6570\u636e\n     * @param data\n     * @return\n     */\n    public static String getDecodeData(String data){\n        String result = null;\n        try {\n            result = AesEncryptUtil.desEncrypt(data);\n        } catch (Exception exception) {\n            log.debug(\"\u6570\u636e\u89e3\u5bc6\u9519\u8bef\uff0c\u539f\u6570\u636e:\"+data);\n        }\n        //\u89e3\u51b3debug\u6a21\u5f0f\u4e0b\uff0c\u52a0\u89e3\u5bc6\u5931\u6548\u5bfc\u81f4\u4e2d\u6587\u88ab\u89e3\u5bc6\u53d8\u6210\u7a7a\u7684\u95ee\u9898\n        if(oConvertUtils.isEmpty(result) && oConvertUtils.isNotEmpty(data)){\n            result = data;\n        }\n        return result;\n    }\n\n    /**\n     * \u5904\u7406\u6570\u636e \u83b7\u53d6\u52a0\u5bc6\u540e\u7684\u6570\u636e \u6216\u662f\u683c\u5f0f\u5316\u540e\u7684\u6570\u636e\n     * @param data \u5b57\u7b26\u4e32\n     * @param sensitiveEnum \u7c7b\u578b\n     * @return \u5904\u7406\u540e\u7684\u5b57\u7b26\u4e32\n     */\n    public static String getEncodeData(String data, SensitiveEnum sensitiveEnum){\n        String result;\n        switch (sensitiveEnum){\n            case ENCODE:\n                try {\n                    result = AesEncryptUtil.encrypt(data);\n                } catch (Exception exception) {\n                    log.error(\"\u6570\u636e\u52a0\u5bc6\u9519\u8bef\", exception.getMessage());\n                    result = data;\n                }\n                break;\n            case CHINESE_NAME:\n                result = chineseName(data);\n                break;\n            case ID_CARD:\n                result = idCardNum(data);\n                break;\n            case FIXED_PHONE:\n                result = fixedPhone(data);\n                break;\n            case MOBILE_PHONE:\n                result = mobilePhone(data);\n                break;\n            case ADDRESS:\n                result = address(data, 3);\n                break;\n            case EMAIL:\n                result = email(data);\n                break;\n            case BANK_CARD:\n                result = bankCard(data);\n                break;\n            case CNAPS_CODE:\n                result = cnapsCode(data);\n                break;\n            default:\n                result = data;\n        }\n        return result;\n    }\n\n\n    /**\n     * [\u4e2d\u6587\u59d3\u540d] \u53ea\u663e\u793a\u7b2c\u4e00\u4e2a\u6c49\u5b57\uff0c\u5176\u4ed6\u9690\u85cf\u4e3a2\u4e2a\u661f\u53f7\n     * @param fullName \u5168\u540d\n     * @return <\u4f8b\u5b50\uff1a\u674e**>\n     */\n    private static String chineseName(String fullName) {\n        if (oConvertUtils.isEmpty(fullName)) {\n            return \"\";\n        }\n        return formatRight(fullName, 1);\n    }\n\n    /**\n     * [\u4e2d\u6587\u59d3\u540d] \u53ea\u663e\u793a\u7b2c\u4e00\u4e2a\u6c49\u5b57\uff0c\u5176\u4ed6\u9690\u85cf\u4e3a2\u4e2a\u661f\u53f7\n     * @param familyName \u59d3\n     * @param firstName \u540d\n     * @return <\u4f8b\u5b50\uff1a\u674e**>\n     */\n    private static String chineseName(String familyName, String firstName) {\n        if (oConvertUtils.isEmpty(familyName) || oConvertUtils.isEmpty(firstName)) {\n            return \"\";\n        }\n        return chineseName(familyName + firstName);\n    }\n\n    /**\n     * [\u8eab\u4efd\u8bc1\u53f7] \u663e\u793a\u6700\u540e\u56db\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\u3002\u5171\u8ba118\u4f4d\u6216\u800515\u4f4d\u3002\n     * @param id \u8eab\u4efd\u8bc1\u53f7\n     * @return <\u4f8b\u5b50\uff1a*************5762>\n     */\n    private static String idCardNum(String id) {\n        if (oConvertUtils.isEmpty(id)) {\n            return \"\";\n        }\n        return formatLeft(id, 4);\n\n    }\n\n    /**\n     * [\u56fa\u5b9a\u7535\u8bdd] \u540e\u56db\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\n     * @param num \u56fa\u5b9a\u7535\u8bdd\n     * @return <\u4f8b\u5b50\uff1a****1234>\n     */\n    private static String fixedPhone(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        return formatLeft(num, 4);\n    }\n\n    /**\n     * [\u624b\u673a\u53f7\u7801] \u524d\u4e09\u4f4d\uff0c\u540e\u56db\u4f4d\uff0c\u5176\u4ed6\u9690\u85cf\n     * @param num \u624b\u673a\u53f7\u7801\n     * @return <\u4f8b\u5b50:138******1234>\n     */\n    private static String mobilePhone(String num) {\n        if (oConvertUtils.isEmpty(num)) {\n            return \"\";\n        }\n        int len = num.length();\n        if(len<11){\n            return num;\n        }\n        return formatBetween(num, 3, 4);\n    }\n\n    /**\n     * [\u5730\u5740] \u53ea\u663e\u793a\u5230\u5730\u533a\uff0c\u4e0d\u663e\u793a\u8be6\u7ec6\u5730\u5740\uff1b\u6211\u4eec\u8981\u5bf9\u4e2a\u4eba\u4fe1\u606f\u589e\u5f3a\u4fdd\u62a4\n     * @param address \u5730\u5740\n     * @param sensitiveSize \u654f\u611f\u4fe1\u606f\u957f\u5ea6\n     * @return <\u4f8b\u5b50\uff1a\u5317\u4eac\u5e02\u6d77\u6dc0\u533a****>\n     */\n    private static String address(String address, int sensitiveSize) {\n        if (oConvertUtils.isEmpty(address)) {\n            return \"\";\n        }\n        int len = address.length();\n        if(len<sensitiveSize){\n            return address;\n        }\n        return formatRight(address, sensitiveSize);\n    }\n\n    /**\n     * [\u7535\u5b50\u90ae\u7bb1] \u90ae\u7bb1\u524d\u7f00\u4ec5\u663e\u793a\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u524d\u7f00\u5176\u4ed6\u9690\u85cf\uff0c\u7528\u661f\u53f7\u4ee3\u66ff\uff0c@\u53ca\u540e\u9762\u7684\u5730\u5740\u663e\u793a\n     * @param email \u7535\u5b50\u90ae\u7bb1\n     * @return <\u4f8b\u5b50:g**@163.com>\n     */\n    private static String email(String email) {\n        if (oConvertUtils.isEmpty(email)) {\n            return \"\";\n        }\n        int index = email.indexOf(\"@\");\n        if (index <= 1){\n            return email;\n        }\n        String begin = email.substring(0, 1);\n        String end = email.substring(index);\n        String stars = \"**\";\n        return begin + stars + end;\n    }\n\n    /**\n     * [\u94f6\u884c\u5361\u53f7] \u524d\u516d\u4f4d\uff0c\u540e\u56db\u4f4d\uff0c\u5176\u4ed6\u7528\u661f\u53f7\u9690\u85cf\u6bcf\u4f4d1\u4e2a\u661f\u53f7\n     * @param cardNum \u94f6\u884c\u5361\u53f7\n     * @return <\u4f8b\u5b50:6222600**********1234>\n     */\n    private static String bankCard(String cardNum) {\n        if (oConvertUtils.isEmpty(cardNum)) {\n            return \"\";\n        }\n        return formatBetween(cardNum, 6, 4);\n    }\n\n    /**\n     * [\u516c\u53f8\u5f00\u6237\u94f6\u884c\u8054\u53f7] \u516c\u53f8\u5f00\u6237\u94f6\u884c\u8054\u884c\u53f7,\u663e\u793a\u524d\u4e24\u4f4d\uff0c\u5176\u4ed6\u7528\u661f\u53f7\u9690\u85cf\uff0c\u6bcf\u4f4d1\u4e2a\u661f\u53f7\n     * @param code \u516c\u53f8\u5f00\u6237\u94f6\u884c\u8054\u53f7\n     * @return <\u4f8b\u5b50:12********>\n     */\n    private static String cnapsCode(String code) {\n        if (oConvertUtils.isEmpty(code)) {\n            return \"\";\n        }\n        return formatRight(code, 2);\n    }\n\n\n    /**\n     * \u5c06\u53f3\u8fb9\u7684\u683c\u5f0f\u5316\u6210*\n     * @param str \u5b57\u7b26\u4e32\n     * @param reservedLength \u4fdd\u7559\u957f\u5ea6\n     * @return \u683c\u5f0f\u5316\u540e\u7684\u5b57\u7b26\u4e32\n     */\n    private static String formatRight(String str, int reservedLength){\n        String name = str.substring(0, reservedLength);\n        String stars = String.join(\"\", Collections.nCopies(str.length()-reservedLength, \"*\"));\n        return name + stars;\n    }\n\n    /**\n     * \u5c06\u5de6\u8fb9\u7684\u683c\u5f0f\u5316\u6210*\n     * @param str \u5b57\u7b26\u4e32\n     * @param reservedLength \u4fdd\u7559\u957f\u5ea6\n     * @return \u683c\u5f0f\u5316\u540e\u7684\u5b57\u7b26\u4e32\n     */\n    private static String formatLeft(String str, int reservedLength){\n        int len = str.length();\n        String show = str.substring(len-reservedLength);\n        String stars = String.join(\"\", Collections.nCopies(len-reservedLength, \"*\"));\n        return stars + show;\n    }\n\n    /**\n     * \u5c06\u4e2d\u95f4\u7684\u683c\u5f0f\u5316\u6210*\n     * @param str \u5b57\u7b26\u4e32\n     * @param beginLen \u5f00\u59cb\u4fdd\u7559\u957f\u5ea6\n     * @param endLen \u7ed3\u5c3e\u4fdd\u7559\u957f\u5ea6\n     * @return \u683c\u5f0f\u5316\u540e\u7684\u5b57\u7b26\u4e32\n     */\n    private static String formatBetween(String str, int beginLen, int endLen){\n        int len = str.length();\n        String begin = str.substring(0, beginLen);\n        String end = str.substring(len-endLen);\n        String stars = String.join(\"\", Collections.nCopies(len-beginLen-endLen, \"*\"));\n        return begin + stars + end;\n    }\n\n}\n",
        "simple_context": "package org.jeecg.common.desensitization.util;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.jeecg.common.desensitization.annotation.SensitiveField;\n\nimport org.jeecg.common.desensitization.enums.SensitiveEnum;\n\nimport org.jeecg.common.util.encryption.AesEncryptUtil;\n\nimport org.jeecg.common.util.oConvertUtils;\n\nimport java.lang.reflect.Field;\n\nimport java.lang.reflect.ParameterizedType;\n\nimport java.util.Collections;\n\nimport java.util.List;\n\npublic class SensitiveInfoUtil {\n    static public  handleNestedObject(Object obj, Class entity, boolean isEncode)throws IllegalAccessException;\n    static public Object handlerObject(Object obj, boolean isEncode)throws IllegalAccessException;\n    static public  handleList(Object obj, Class entity, boolean isEncode);\n    static public String getDecodeData(String data);\n    static public String getEncodeData(String data, SensitiveEnum sensitiveEnum);\n    static private String chineseName(String fullName);\n    static private String chineseName(String familyName, String firstName);\n    static private String idCardNum(String id);\n    static private String fixedPhone(String num);\n    static private String mobilePhone(String num);\n    static private String address(String address, int sensitiveSize);\n    static private String email(String email);\n    static private String bankCard(String cardNum);\n    static private String cnapsCode(String code);\n    static private String formatRight(String str, int reservedLength);\n    static private String formatLeft(String str, int reservedLength);\n    static private String formatBetween(String str, int beginLen, int endLen);\n}\n\n"
    },
    {
        "project_name": "jeecg-boot",
        "file_name": "JeecgController.java",
        "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/base/controller/JeecgController.java",
        "execute_path": "jeecg-boot",
        "package": "org.jeecg.common.system.base.controller",
        "docstring": "/**\n     * \u6839\u636e\u6bcf\u9875sheet\u6570\u91cf\u5bfc\u51fa\u591asheet\n     *\n     * @param request\n     * @param object \u5b9e\u4f53\u7c7b\n     * @param clazz \u5b9e\u4f53\u7c7bclass\n     * @param title \u6807\u9898\n     * @param exportFields \u5bfc\u51fa\u5b57\u6bb5\u81ea\u5b9a\u4e49\n     * @param pageNum \u6bcf\u4e2asheet\u7684\u6570\u636e\u6761\u6570\n     * @param request\n     */",
        "source_code": "\nprotected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title,String exportFields,Integer pageNum) {\n    // Step.1 \u7ec4\u88c5\u67e5\u8be2\u6761\u4ef6\n    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());\n    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n    // Step.2 \u8ba1\u7b97\u5206\u9875sheet\u6570\u636e\n    double total = service.count();\n    int count = (int)Math.ceil(total/pageNum);\n    //update-begin-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.3  \u8fc7\u6ee4\u9009\u4e2d\u6570\u636e\n    String selections = request.getParameter(\"selections\");\n    if (oConvertUtils.isNotEmpty(selections)) {\n        List<String> selectionList = Arrays.asList(selections.split(\",\"));\n        queryWrapper.in(\"id\",selectionList);\n    }\n    //update-end-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.4 \u591asheet\u5904\u7406\n    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();\n    for (int i = 1; i <=count ; i++) {\n        Page<T> page = new Page<T>(i, pageNum);\n        IPage<T> pageList = service.page(page, queryWrapper);\n        List<T> exportList = pageList.getRecords();\n        Map<String, Object> map = new HashMap<>(5);\n        ExportParams exportParams=new ExportParams(title + \"\u62a5\u8868\", \"\u5bfc\u51fa\u4eba:\" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload());\n        exportParams.setType(ExcelType.XSSF);\n        //map.put(\"title\",exportParams);\n        //\u8868\u683cTitle\n        map.put(NormalExcelConstants.PARAMS,exportParams);\n        //\u8868\u683c\u5bf9\u5e94\u5b9e\u4f53\n        map.put(NormalExcelConstants.CLASS,clazz);\n        //\u6570\u636e\u96c6\u5408\n        map.put(NormalExcelConstants.DATA_LIST, exportList);\n        listMap.add(map);\n    }\n    // Step.4 AutoPoi \u5bfc\u51faExcel\n    ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());\n    //\u6b64\u5904\u8bbe\u7f6e\u7684filename\u65e0\u6548 ,\u524d\u7aef\u4f1a\u91cd\u66f4\u65b0\u8bbe\u7f6e\u4e00\u4e0b\n    mv.addObject(NormalExcelConstants.FILE_NAME, title);\n    mv.addObject(NormalExcelConstants.MAP_LIST, listMap);\n    return mv;\n}\n",
        "class_name": "JeecgController",
        "method_name": "exportXlsSheet",
        "argument_name": [
            "HttpServletRequest request",
            "T object",
            "Class<T> clazz",
            "String title",
            "String exportFields",
            "Integer pageNum"
        ],
        "full_context": "package org.jeecg.common.system.base.controller;\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.shiro.SecurityUtils;\nimport org.jeecg.common.api.vo.Result;\nimport org.jeecg.common.system.query.QueryGenerator;\nimport org.jeecg.common.system.vo.LoginUser;\nimport org.jeecg.common.util.oConvertUtils;\nimport org.jeecg.config.JeecgBaseConfig;\nimport org.jeecgframework.poi.excel.ExcelImportUtil;\nimport org.jeecgframework.poi.excel.def.NormalExcelConstants;\nimport org.jeecgframework.poi.excel.entity.ExportParams;\nimport org.jeecgframework.poi.excel.entity.ImportParams;\nimport org.jeecgframework.poi.excel.entity.enmus.ExcelType;\nimport org.jeecgframework.poi.excel.view.JeecgEntityExcelView;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.multipart.MultipartHttpServletRequest;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.annotation.Resource;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.*;\n\n/**\n * @Description: Controller\u57fa\u7c7b\n * @Author: dangzhenghui@163.com\n * @Date: 2019-4-21 8:13\n * @Version: 1.0\n */\n@Slf4j\npublic class JeecgController<T, S extends IService<T>> {\n    /**issues/2933 JeecgController\u6ce8\u5165service\u65f6\u6539\u7528protected\u4fee\u9970\uff0c\u80fd\u907f\u514d\u91cd\u590d\u5f15\u7528service*/\n    @Autowired\n    protected S service;\n    @Resource\n    private JeecgBaseConfig jeecgBaseConfig;\n    \n    /**\n     * \u5bfc\u51faexcel\n     *\n     * @param request\n     */\n    protected ModelAndView exportXls(HttpServletRequest request, T object, Class<T> clazz, String title) {\n        // Step.1 \u7ec4\u88c5\u67e5\u8be2\u6761\u4ef6\n        QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());\n        LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n\n        // \u8fc7\u6ee4\u9009\u4e2d\u6570\u636e\n        String selections = request.getParameter(\"selections\");\n        if (oConvertUtils.isNotEmpty(selections)) {\n            List<String> selectionList = Arrays.asList(selections.split(\",\"));\n            queryWrapper.in(\"id\",selectionList);\n        }\n        // Step.2 \u83b7\u53d6\u5bfc\u51fa\u6570\u636e\n        List<T> exportList = service.list(queryWrapper);\n\n        // Step.3 AutoPoi \u5bfc\u51faExcel\n        ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());\n        //\u6b64\u5904\u8bbe\u7f6e\u7684filename\u65e0\u6548 ,\u524d\u7aef\u4f1a\u91cd\u66f4\u65b0\u8bbe\u7f6e\u4e00\u4e0b\n        mv.addObject(NormalExcelConstants.FILE_NAME, title);\n        mv.addObject(NormalExcelConstants.CLASS, clazz);\n        //update-begin--Author:liusq  Date:20210126 for\uff1a\u56fe\u7247\u5bfc\u51fa\u62a5\u9519\uff0cImageBasePath\u672a\u8bbe\u7f6e--------------------\n        ExportParams exportParams=new ExportParams(title + \"\u62a5\u8868\", \"\u5bfc\u51fa\u4eba:\" + sysUser.getRealname(), title);\n        exportParams.setImageBasePath(jeecgBaseConfig.getPath().getUpload());\n        //update-end--Author:liusq  Date:20210126 for\uff1a\u56fe\u7247\u5bfc\u51fa\u62a5\u9519\uff0cImageBasePath\u672a\u8bbe\u7f6e----------------------\n        mv.addObject(NormalExcelConstants.PARAMS,exportParams);\n        mv.addObject(NormalExcelConstants.DATA_LIST, exportList);\n        return mv;\n    }\n    /**\n     * \u6839\u636e\u6bcf\u9875sheet\u6570\u91cf\u5bfc\u51fa\u591asheet\n     *\n     * @param request\n     * @param object \u5b9e\u4f53\u7c7b\n     * @param clazz \u5b9e\u4f53\u7c7bclass\n     * @param title \u6807\u9898\n     * @param exportFields \u5bfc\u51fa\u5b57\u6bb5\u81ea\u5b9a\u4e49\n     * @param pageNum \u6bcf\u4e2asheet\u7684\u6570\u636e\u6761\u6570\n     * @param request\n     */\n    protected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title,String exportFields,Integer pageNum) {\n        // Step.1 \u7ec4\u88c5\u67e5\u8be2\u6761\u4ef6\n        QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());\n        LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n        // Step.2 \u8ba1\u7b97\u5206\u9875sheet\u6570\u636e\n        double total = service.count();\n        int count = (int)Math.ceil(total/pageNum);\n        //update-begin-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n        // Step.3  \u8fc7\u6ee4\u9009\u4e2d\u6570\u636e\n        String selections = request.getParameter(\"selections\");\n        if (oConvertUtils.isNotEmpty(selections)) {\n            List<String> selectionList = Arrays.asList(selections.split(\",\"));\n            queryWrapper.in(\"id\",selectionList);\n        }\n        //update-end-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n        // Step.4 \u591asheet\u5904\u7406\n        List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();\n        for (int i = 1; i <=count ; i++) {\n            Page<T> page = new Page<T>(i, pageNum);\n            IPage<T> pageList = service.page(page, queryWrapper);\n            List<T> exportList = pageList.getRecords();\n            Map<String, Object> map = new HashMap<>(5);\n            ExportParams exportParams=new ExportParams(title + \"\u62a5\u8868\", \"\u5bfc\u51fa\u4eba:\" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload());\n            exportParams.setType(ExcelType.XSSF);\n            //map.put(\"title\",exportParams);\n            //\u8868\u683cTitle\n            map.put(NormalExcelConstants.PARAMS,exportParams);\n            //\u8868\u683c\u5bf9\u5e94\u5b9e\u4f53\n            map.put(NormalExcelConstants.CLASS,clazz);\n            //\u6570\u636e\u96c6\u5408\n            map.put(NormalExcelConstants.DATA_LIST, exportList);\n            listMap.add(map);\n        }\n        // Step.4 AutoPoi \u5bfc\u51faExcel\n        ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());\n        //\u6b64\u5904\u8bbe\u7f6e\u7684filename\u65e0\u6548 ,\u524d\u7aef\u4f1a\u91cd\u66f4\u65b0\u8bbe\u7f6e\u4e00\u4e0b\n        mv.addObject(NormalExcelConstants.FILE_NAME, title);\n        mv.addObject(NormalExcelConstants.MAP_LIST, listMap);\n        return mv;\n    }\n\n\n    /**\n     * \u6839\u636e\u6743\u9650\u5bfc\u51faexcel\uff0c\u4f20\u5165\u5bfc\u51fa\u5b57\u6bb5\u53c2\u6570\n     *\n     * @param request\n     */\n    protected ModelAndView exportXls(HttpServletRequest request, T object, Class<T> clazz, String title,String exportFields) {\n        ModelAndView mv = this.exportXls(request,object,clazz,title);\n        mv.addObject(NormalExcelConstants.EXPORT_FIELDS,exportFields);\n        return mv;\n    }\n\n    /**\n     * \u83b7\u53d6\u5bf9\u8c61ID\n     *\n     * @return\n     */\n    private String getId(T item) {\n        try {\n            return PropertyUtils.getProperty(item, \"id\").toString();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    /**\n     * \u901a\u8fc7excel\u5bfc\u5165\u6570\u636e\n     *\n     * @param request\n     * @param response\n     * @return\n     */\n    protected Result<?> importExcel(HttpServletRequest request, HttpServletResponse response, Class<T> clazz) {\n        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n        Map<String, MultipartFile> fileMap = multipartRequest.getFileMap();\n        for (Map.Entry<String, MultipartFile> entity : fileMap.entrySet()) {\n            // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u5bf9\u8c61\n            MultipartFile file = entity.getValue();\n            ImportParams params = new ImportParams();\n            params.setTitleRows(2);\n            params.setHeadRows(1);\n            params.setNeedSave(true);\n            try {\n                List<T> list = ExcelImportUtil.importExcel(file.getInputStream(), clazz, params);\n                //update-begin-author:taoyan date:20190528 for:\u6279\u91cf\u63d2\u5165\u6570\u636e\n                long start = System.currentTimeMillis();\n                service.saveBatch(list);\n                //400\u6761 saveBatch\u6d88\u8017\u65f6\u95f41592\u6beb\u79d2  \u5faa\u73af\u63d2\u5165\u6d88\u8017\u65f6\u95f41947\u6beb\u79d2\n                //1200\u6761  saveBatch\u6d88\u8017\u65f6\u95f43687\u6beb\u79d2 \u5faa\u73af\u63d2\u5165\u6d88\u8017\u65f6\u95f45212\u6beb\u79d2\n                log.info(\"\u6d88\u8017\u65f6\u95f4\" + (System.currentTimeMillis() - start) + \"\u6beb\u79d2\");\n                //update-end-author:taoyan date:20190528 for:\u6279\u91cf\u63d2\u5165\u6570\u636e\n                return Result.ok(\"\u6587\u4ef6\u5bfc\u5165\u6210\u529f\uff01\u6570\u636e\u884c\u6570\uff1a\" + list.size());\n            } catch (Exception e) {\n                //update-begin-author:taoyan date:20211124 for: \u5bfc\u5165\u6570\u636e\u91cd\u590d\u589e\u52a0\u63d0\u793a\n                String msg = e.getMessage();\n                log.error(msg, e);\n                if(msg!=null && msg.indexOf(\"Duplicate entry\")>=0){\n                    return Result.error(\"\u6587\u4ef6\u5bfc\u5165\u5931\u8d25:\u6709\u91cd\u590d\u6570\u636e\uff01\");\n                }else{\n                    return Result.error(\"\u6587\u4ef6\u5bfc\u5165\u5931\u8d25:\" + e.getMessage());\n                }\n                //update-end-author:taoyan date:20211124 for: \u5bfc\u5165\u6570\u636e\u91cd\u590d\u589e\u52a0\u63d0\u793a\n            } finally {\n                try {\n                    file.getInputStream().close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return Result.error(\"\u6587\u4ef6\u5bfc\u5165\u5931\u8d25\uff01\");\n    }\n}\n",
        "simple_context": "package org.jeecg.common.system.base.controller;\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\n\nimport com.baomidou.mybatisplus.core.metadata.IPage;\n\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\n\nimport com.baomidou.mybatisplus.extension.service.IService;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.apache.commons.beanutils.PropertyUtils;\n\nimport org.apache.shiro.SecurityUtils;\n\nimport org.jeecg.common.api.vo.Result;\n\nimport org.jeecg.common.system.query.QueryGenerator;\n\nimport org.jeecg.common.system.vo.LoginUser;\n\nimport org.jeecg.common.util.oConvertUtils;\n\nimport org.jeecg.config.JeecgBaseConfig;\n\nimport org.jeecgframework.poi.excel.ExcelImportUtil;\n\nimport org.jeecgframework.poi.excel.def.NormalExcelConstants;\n\nimport org.jeecgframework.poi.excel.entity.ExportParams;\n\nimport org.jeecgframework.poi.excel.entity.ImportParams;\n\nimport org.jeecgframework.poi.excel.entity.enmus.ExcelType;\n\nimport org.jeecgframework.poi.excel.view.JeecgEntityExcelView;\n\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport org.springframework.web.multipart.MultipartFile;\n\nimport org.springframework.web.multipart.MultipartHttpServletRequest;\n\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.annotation.Resource;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport java.io.IOException;\n\nimport java.util;\n\npublic class JeecgController {\n    protected S service;\n    private JeecgBaseConfig jeecgBaseConfig;\n    protected ModelAndView exportXls(HttpServletRequest request, T object, Class<T> clazz, String title);\n    protected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title, String exportFields, Integer pageNum);\n    protected ModelAndView exportXls(HttpServletRequest request, T object, Class<T> clazz, String title, String exportFields);\n    private String getId(T item);\n    protected Result<> importExcel(HttpServletRequest request, HttpServletResponse response, Class<T> clazz);\n}\n\n"
    },
    {
        "project_name": "jeecg-boot",
        "file_name": "QueryGenerator.java",
        "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/query/QueryGenerator.java",
        "execute_path": "jeecg-boot",
        "package": "org.jeecg.common.system.query",
        "docstring": "/**\n\t * \u7ec4\u88c5Mybatis Plus \u67e5\u8be2\u6761\u4ef6\n\t * <p>\u4f7f\u7528\u6b64\u65b9\u6cd5 \u9700\u8981\u6709\u5982\u4e0b\u51e0\u70b9\u6ce8\u610f:   \n\t * <br>1.\u4f7f\u7528QueryWrapper \u800c\u975eLambdaQueryWrapper;\n\t * <br>2.\u5b9e\u4f8b\u5316QueryWrapper\u65f6\u4e0d\u53ef\u5c06\u5b9e\u4f53\u4f20\u5165\u53c2\u6570   \n\t * <br>\u9519\u8bef\u793a\u4f8b:\u5982QueryWrapper<JeecgDemo> queryWrapper = new QueryWrapper<JeecgDemo>(jeecgDemo);\n\t * <br>\u6b63\u786e\u793a\u4f8b:QueryWrapper<JeecgDemo> queryWrapper = new QueryWrapper<JeecgDemo>();\n\t * <br>3.\u4e5f\u53ef\u4ee5\u4e0d\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u76f4\u63a5\u8c03\u7528 {@link #initQueryWrapper}\u76f4\u63a5\u83b7\u53d6\u5b9e\u4f8b\n\t */",
        "source_code": "\nprivate static void installMplus(QueryWrapper<?> queryWrapper,Object searchObj,Map<String, String[]> parameterMap) {\n\t\n\t/*\n\t * \u6ce8\u610f:\u6743\u9650\u67e5\u8be2\u7531\u524d\u7aef\u914d\u7f6e\u6570\u636e\u89c4\u5219 \u5f53\u4e00\u4e2a\u4eba\u6709\u591a\u4e2a\u6240\u5c5e\u90e8\u95e8\u65f6\u5019 \u53ef\u4ee5\u5728\u89c4\u5219\u914d\u7f6e\u5305\u542b\u6761\u4ef6 orgCode \u5305\u542b #{sys_org_code}\n\t\u4f46\u662f\u4e0d\u652f\u6301\u5728\u81ea\u5b9a\u4e49SQL\u4e2d\u5199orgCode in #{sys_org_code} \n\t\u5f53\u4e00\u4e2a\u4eba\u53ea\u6709\u4e00\u4e2a\u90e8\u95e8 \u5c31\u76f4\u63a5\u914d\u7f6e\u7b49\u4e8e\u6761\u4ef6: orgCode \u7b49\u4e8e #{sys_org_code} \u6216\u8005\u914d\u7f6e\u81ea\u5b9a\u4e49SQL: orgCode = '#{sys_org_code}'\n\t*/\n\t\n\t//\u533a\u95f4\u6761\u4ef6\u7ec4\u88c5 \u6a21\u7cca\u67e5\u8be2 \u9ad8\u7ea7\u67e5\u8be2\u7ec4\u88c5 \u7b80\u5355\u6392\u5e8f \u6743\u9650\u67e5\u8be2\n\tPropertyDescriptor[] origDescriptors = PropertyUtils.getPropertyDescriptors(searchObj);\n\tMap<String,SysPermissionDataRuleModel> ruleMap = getRuleMap();\n\t\n\t//\u6743\u9650\u89c4\u5219\u81ea\u5b9a\u4e49SQL\u8868\u8fbe\u5f0f\n\tfor (String c : ruleMap.keySet()) {\n\t\tif(oConvertUtils.isNotEmpty(c) && c.startsWith(SQL_RULES_COLUMN)){\n\t\t\tqueryWrapper.and(i ->i.apply(getSqlRuleValue(ruleMap.get(c).getRuleValue())));\n\t\t}\n\t}\n\t\n\tString name, type, column;\n\t// update-begin--Author:taoyan  Date:20200923 for\uff1aissues/1671 \u5982\u679c\u5b57\u6bb5\u52a0\u6ce8\u89e3\u4e86@TableField(exist = false),\u4e0d\u8d70DB\u67e5\u8be2-------\n\t//\u5b9a\u4e49\u5b9e\u4f53\u5b57\u6bb5\u548c\u6570\u636e\u5e93\u5b57\u6bb5\u540d\u79f0\u7684\u6620\u5c04 \u9ad8\u7ea7\u67e5\u8be2\u4e2d \u53ea\u80fd\u83b7\u53d6\u5b9e\u4f53\u5b57\u6bb5 \u5982\u679c\u8bbe\u7f6eTableField\u6ce8\u89e3 \u90a3\u4e48\u67e5\u8be2\u6761\u4ef6\u4f1a\u51fa\u95ee\u9898\n\tMap<String,String> fieldColumnMap = new HashMap<>(5);\n\tfor (int i = 0; i < origDescriptors.length; i++) {\n\t\t//aliasName = origDescriptors[i].getName();  mybatis  \u4e0d\u5b58\u5728\u5b9e\u4f53\u5c5e\u6027 \u4e0d\u7528\u5904\u7406\u522b\u540d\u7684\u60c5\u51b5\n\t\tname = origDescriptors[i].getName();\n\t\ttype = origDescriptors[i].getPropertyType().toString();\n\t\ttry {\n\t\t\tif (judgedIsUselessField(name)|| !PropertyUtils.isReadable(searchObj, name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tObject value = PropertyUtils.getSimpleProperty(searchObj, name);\n\t\t\tcolumn = ReflectHelper.getTableFieldName(searchObj.getClass(), name);\n\t\t\tif(column==null){\n\t\t\t\t//column\u4e3anull\u53ea\u6709\u4e00\u79cd\u60c5\u51b5 \u90a3\u5c31\u662f \u6dfb\u52a0\u4e86\u6ce8\u89e3@TableField(exist = false) \u540e\u7eed\u90fd\u4e0d\u7528\u5904\u7406\u4e86\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfieldColumnMap.put(name,column);\n\t\t\t//\u6570\u636e\u6743\u9650\u67e5\u8be2\n\t\t\tif(ruleMap.containsKey(name)) {\n\t\t\t\taddRuleToQueryWrapper(ruleMap.get(name), column, origDescriptors[i].getPropertyType(), queryWrapper);\n\t\t\t}\n\t\t\t//\u533a\u95f4\u67e5\u8be2\n\t\t\tdoIntervalQuery(queryWrapper, parameterMap, type, name, column);\n\t\t\t//\u5224\u65ad\u5355\u503c  \u53c2\u6570\u5e26\u4e0d\u540c\u6807\u8bc6\u5b57\u7b26\u4e32 \u8d70\u4e0d\u540c\u7684\u67e5\u8be2\n\t\t\t//TODO \u8fd9\u79cd\u524d\u540e\u5e26\u9017\u53f7\u7684\u652f\u6301\u5206\u5272\u540e\u6a21\u7cca\u67e5\u8be2(\u591a\u9009\u5b57\u6bb5\u67e5\u8be2\u751f\u6548) \u793a\u4f8b\uff1a,1,3,\n\t\t\tif (null != value && value.toString().startsWith(COMMA) && value.toString().endsWith(COMMA)) {\n\t\t\t\tString multiLikeval = value.toString().replace(\",,\", COMMA);\n\t\t\t\tString[] vals = multiLikeval.substring(1, multiLikeval.length()).split(COMMA);\n\t\t\t\tfinal String field = oConvertUtils.camelToUnderline(column);\n\t\t\t\tif(vals.length>1) {\n\t\t\t\t\tqueryWrapper.and(j -> {\n                           log.info(\"---\u67e5\u8be2\u8fc7\u6ee4\u5668\uff0cQuery\u89c4\u5219---field:{}, rule:{}, value:{}\", field, \"like\", vals[0]);\n\t\t\t\t\t\tj = j.like(field,vals[0]);\n\t\t\t\t\t\tfor (int k=1;k<vals.length;k++) {\n\t\t\t\t\t\t\tj = j.or().like(field,vals[k]);\n\t\t\t\t\t\t\tlog.info(\"---\u67e5\u8be2\u8fc7\u6ee4\u5668\uff0cQuery\u89c4\u5219 .or()---field:{}, rule:{}, value:{}\", field, \"like\", vals[k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//return j;\n\t\t\t\t\t});\n\t\t\t\t}else {\n\t\t\t\t\tlog.info(\"---\u67e5\u8be2\u8fc7\u6ee4\u5668\uff0cQuery\u89c4\u5219---field:{}, rule:{}, value:{}\", field, \"like\", vals[0]);\n\t\t\t\t\tqueryWrapper.and(j -> j.like(field,vals[0]));\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\t//\u6839\u636e\u53c2\u6570\u503c\u5e26\u4ec0\u4e48\u5173\u952e\u5b57\u7b26\u4e32\u5224\u65ad\u8d70\u4ec0\u4e48\u7c7b\u578b\u7684\u67e5\u8be2\n\t\t\t\tQueryRuleEnum rule = convert2Rule(value);\n\t\t\t\tvalue = replaceValue(rule,value);\n\t\t\t\t// add -begin \u6dfb\u52a0\u5224\u65ad\u4e3a\u5b57\u7b26\u4e32\u65f6\u8bbe\u4e3a\u5168\u6a21\u7cca\u67e5\u8be2\n\t\t\t\t//if( (rule==null || QueryRuleEnum.EQ.equals(rule)) && \"class java.lang.String\".equals(type)) {\n\t\t\t\t\t// \u53ef\u4ee5\u8bbe\u7f6e\u5de6\u53f3\u6a21\u7cca\u6216\u5168\u6a21\u7cca\uff0c\u56e0\u4eba\u800c\u5f02\n\t\t\t\t\t//rule = QueryRuleEnum.LIKE;\n\t\t\t\t//}\n\t\t\t\t// add -end \u6dfb\u52a0\u5224\u65ad\u4e3a\u5b57\u7b26\u4e32\u65f6\u8bbe\u4e3a\u5168\u6a21\u7cca\u67e5\u8be2\n\t\t\t\taddEasyQuery(queryWrapper, column, rule, value);\n\t\t\t}\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\t}\n\t// \u6392\u5e8f\u903b\u8f91 \u5904\u7406\n\tdoMultiFieldsOrder(queryWrapper, parameterMap, fieldColumnMap);\n\t\t\t\n\t//\u9ad8\u7ea7\u67e5\u8be2\n\tdoSuperQuery(queryWrapper, parameterMap, fieldColumnMap);\n\t// update-end--Author:taoyan  Date:20200923 for\uff1aissues/1671 \u5982\u679c\u5b57\u6bb5\u52a0\u6ce8\u89e3\u4e86@TableField(exist = false),\u4e0d\u8d70DB\u67e5\u8be2-------\n\t\n}\n",
        "class_name": "QueryGenerator",
        "method_name": "installMplus",
        "argument_name": [
            "QueryWrapper<> queryWrapper",
            "Object searchObj",
            "Map<String, String> parameterMap"
        ],
        "full_context": "package org.jeecg.common.system.query;\n\nimport java.beans.PropertyDescriptor;\nimport java.io.UnsupportedEncodingException;\nimport java.lang.reflect.Field;\nimport java.math.BigDecimal;\nimport java.net.URLDecoder;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.*;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.jeecg.common.constant.CommonConstant;\nimport org.jeecg.common.constant.DataBaseConstant;\nimport org.jeecg.common.constant.SymbolConstant;\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.jeecg.common.system.util.JeecgDataAutorUtils;\nimport org.jeecg.common.system.util.JwtUtil;\nimport org.jeecg.common.system.util.SqlConcatUtil;\nimport org.jeecg.common.system.vo.SysPermissionDataRuleModel;\nimport org.jeecg.common.util.*;\nimport org.springframework.util.NumberUtils;\n\nimport com.alibaba.fastjson.JSON;\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\n\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * @Description: \u67e5\u8be2\u751f\u6210\u5668\n * @author: jeecg-boot\n */\n@Slf4j\npublic class QueryGenerator {\n\tpublic static final String SQL_RULES_COLUMN = \"SQL_RULES_COLUMN\";\n\n\tprivate static final String BEGIN = \"_begin\";\n\tprivate static final String END = \"_end\";\n\t/**\n\t * \u6570\u5b57\u7c7b\u578b\u5b57\u6bb5\uff0c\u62fc\u63a5\u6b64\u540e\u7f00 \u63a5\u53d7\u591a\u503c\u53c2\u6570\n\t */\n\tprivate static final String MULTI = \"_MultiString\";\n\tprivate static final String STAR = \"*\";\n\tprivate static final String COMMA = \",\";\n\t/**\n\t * \u67e5\u8be2 \u9017\u53f7\u8f6c\u4e49\u7b26 \u76f8\u5f53\u4e8e\u4e00\u4e2a\u9017\u53f7\u3010\u4f5c\u5e9f\u3011\n\t */\n\tpublic static final String QUERY_COMMA_ESCAPE = \"++\";\n\tprivate static final String NOT_EQUAL = \"!\";\n\t/**\u9875\u9762\u5e26\u6709\u89c4\u5219\u503c\u67e5\u8be2\uff0c\u7a7a\u683c\u4f5c\u4e3a\u5206\u9694\u7b26*/\n\tprivate static final String QUERY_SEPARATE_KEYWORD = \" \";\n\t/**\u9ad8\u7ea7\u67e5\u8be2\u524d\u7aef\u4f20\u6765\u7684\u53c2\u6570\u540d*/\n\tprivate static final String SUPER_QUERY_PARAMS = \"superQueryParams\";\n\t/** \u9ad8\u7ea7\u67e5\u8be2\u524d\u7aef\u4f20\u6765\u7684\u62fc\u63a5\u65b9\u5f0f\u53c2\u6570\u540d */\n\tprivate static final String SUPER_QUERY_MATCH_TYPE = \"superQueryMatchType\";\n\t/** \u5355\u5f15\u53f7 */\n\tpublic static final String SQL_SQ = \"'\";\n\t/**\u6392\u5e8f\u5217*/\n\tprivate static final String ORDER_COLUMN = \"column\";\n\t/**\u6392\u5e8f\u65b9\u5f0f*/\n\tprivate static final String ORDER_TYPE = \"order\";\n\tprivate static final String ORDER_TYPE_ASC = \"ASC\";\n\n\t/**mysql \u6a21\u7cca\u67e5\u8be2\u4e4b\u7279\u6b8a\u5b57\u7b26\u4e0b\u5212\u7ebf \uff08_\u3001\\\uff09*/\n\tpublic static final String LIKE_MYSQL_SPECIAL_STRS = \"_,%\";\n\n\t/**\u65e5\u671f\u683c\u5f0f\u5316yyyy-MM-dd*/\n\tpublic static final String YYYY_MM_DD = \"yyyy-MM-dd\";\n\n\t/**to_date*/\n\tpublic static final String TO_DATE = \"to_date\";\n\n\t/**\u65f6\u95f4\u683c\u5f0f\u5316 */\n\tprivate static final ThreadLocal<SimpleDateFormat> LOCAL = new ThreadLocal<SimpleDateFormat>();\n\tprivate static SimpleDateFormat getTime(){\n\t\tSimpleDateFormat time = LOCAL.get();\n\t\tif(time == null){\n\t\t\ttime = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n            LOCAL.set(time);\n\t\t}\n\t\treturn time;\n\t}\n\t\n\t/**\n\t * \u83b7\u53d6\u67e5\u8be2\u6761\u4ef6\u6784\u9020\u5668QueryWrapper\u5b9e\u4f8b \u901a\u7528\u67e5\u8be2\u6761\u4ef6\u5df2\u88ab\u5c01\u88c5\u5b8c\u6210\n\t * @param searchObj \u67e5\u8be2\u5b9e\u4f53\n\t * @param parameterMap request.getParameterMap()\n\t * @return QueryWrapper\u5b9e\u4f8b\n\t */\n\tpublic static <T> QueryWrapper<T> initQueryWrapper(T searchObj,Map<String, String[]> parameterMap){\n\t\tlong start = System.currentTimeMillis();\n\t\tQueryWrapper<T> queryWrapper = new QueryWrapper<T>();\n\t\tinstallMplus(queryWrapper, searchObj, parameterMap);\n\t\tlog.debug(\"---\u67e5\u8be2\u6761\u4ef6\u6784\u9020\u5668\u521d\u59cb\u5316\u5b8c\u6210,\u8017\u65f6:\"+(System.currentTimeMillis()-start)+\"\u6beb\u79d2----\");\n\t\treturn queryWrapper;\n\t}\n\n\t/**\n\t * \u7ec4\u88c5Mybatis Plus \u67e5\u8be2\u6761\u4ef6\n\t * <p>\u4f7f\u7528\u6b64\u65b9\u6cd5 \u9700\u8981\u6709\u5982\u4e0b\u51e0\u70b9\u6ce8\u610f:   \n\t * <br>1.\u4f7f\u7528QueryWrapper \u800c\u975eLambdaQueryWrapper;\n\t * <br>2.\u5b9e\u4f8b\u5316QueryWrapper\u65f6\u4e0d\u53ef\u5c06\u5b9e\u4f53\u4f20\u5165\u53c2\u6570   \n\t * <br>\u9519\u8bef\u793a\u4f8b:\u5982QueryWrapper<JeecgDemo> queryWrapper = new QueryWrapper<JeecgDemo>(jeecgDemo);\n\t * <br>\u6b63\u786e\u793a\u4f8b:QueryWrapper<JeecgDemo> queryWrapper = new QueryWrapper<JeecgDemo>();\n\t * <br>3.\u4e5f\u53ef\u4ee5\u4e0d\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u76f4\u63a5\u8c03\u7528 {@link #initQueryWrapper}\u76f4\u63a5\u83b7\u53d6\u5b9e\u4f8b\n\t */\n\tprivate static void installMplus(QueryWrapper<?> queryWrapper,Object searchObj,Map<String, String[]> parameterMap) {\n\t\t\n\t\t/*\n\t\t * \u6ce8\u610f:\u6743\u9650\u67e5\u8be2\u7531\u524d\u7aef\u914d\u7f6e\u6570\u636e\u89c4\u5219 \u5f53\u4e00\u4e2a\u4eba\u6709\u591a\u4e2a\u6240\u5c5e\u90e8\u95e8\u65f6\u5019 \u53ef\u4ee5\u5728\u89c4\u5219\u914d\u7f6e\u5305\u542b\u6761\u4ef6 orgCode \u5305\u542b #{sys_org_code}\n\t\t\u4f46\u662f\u4e0d\u652f\u6301\u5728\u81ea\u5b9a\u4e49SQL\u4e2d\u5199orgCode in #{sys_org_code} \n\t\t\u5f53\u4e00\u4e2a\u4eba\u53ea\u6709\u4e00\u4e2a\u90e8\u95e8 \u5c31\u76f4\u63a5\u914d\u7f6e\u7b49\u4e8e\u6761\u4ef6: orgCode \u7b49\u4e8e #{sys_org_code} \u6216\u8005\u914d\u7f6e\u81ea\u5b9a\u4e49SQL: orgCode = '#{sys_org_code}'\n\t\t*/\n\t\t\n\t\t//\u533a\u95f4\u6761\u4ef6\u7ec4\u88c5 \u6a21\u7cca\u67e5\u8be2 \u9ad8\u7ea7\u67e5\u8be2\u7ec4\u88c5 \u7b80\u5355\u6392\u5e8f \u6743\u9650\u67e5\u8be2\n\t\tPropertyDescriptor[] origDescriptors = PropertyUtils.getPropertyDescriptors(searchObj);\n\t\tMap<String,SysPermissionDataRuleModel> ruleMap = getRuleMap();\n\t\t\n\t\t//\u6743\u9650\u89c4\u5219\u81ea\u5b9a\u4e49SQL\u8868\u8fbe\u5f0f\n\t\tfor (String c : ruleMap.keySet()) {\n\t\t\tif(oConvertUtils.isNotEmpty(c) && c.startsWith(SQL_RULES_COLUMN)){\n\t\t\t\tqueryWrapper.and(i ->i.apply(getSqlRuleValue(ruleMap.get(c).getRuleValue())));\n\t\t\t}\n\t\t}\n\t\t\n\t\tString name, type, column;\n\t\t// update-begin--Author:taoyan  Date:20200923 for\uff1aissues/1671 \u5982\u679c\u5b57\u6bb5\u52a0\u6ce8\u89e3\u4e86@TableField(exist = false),\u4e0d\u8d70DB\u67e5\u8be2-------\n\t\t//\u5b9a\u4e49\u5b9e\u4f53\u5b57\u6bb5\u548c\u6570\u636e\u5e93\u5b57\u6bb5\u540d\u79f0\u7684\u6620\u5c04 \u9ad8\u7ea7\u67e5\u8be2\u4e2d \u53ea\u80fd\u83b7\u53d6\u5b9e\u4f53\u5b57\u6bb5 \u5982\u679c\u8bbe\u7f6eTableField\u6ce8\u89e3 \u90a3\u4e48\u67e5\u8be2\u6761\u4ef6\u4f1a\u51fa\u95ee\u9898\n\t\tMap<String,String> fieldColumnMap = new HashMap<>(5);\n\t\tfor (int i = 0; i < origDescriptors.length; i++) {\n\t\t\t//aliasName = origDescriptors[i].getName();  mybatis  \u4e0d\u5b58\u5728\u5b9e\u4f53\u5c5e\u6027 \u4e0d\u7528\u5904\u7406\u522b\u540d\u7684\u60c5\u51b5\n\t\t\tname = origDescriptors[i].getName();\n\t\t\ttype = origDescriptors[i].getPropertyType().toString();\n\t\t\ttry {\n\t\t\t\tif (judgedIsUselessField(name)|| !PropertyUtils.isReadable(searchObj, name)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tObject value = PropertyUtils.getSimpleProperty(searchObj, name);\n\t\t\t\tcolumn = ReflectHelper.getTableFieldName(searchObj.getClass(), name);\n\t\t\t\tif(column==null){\n\t\t\t\t\t//column\u4e3anull\u53ea\u6709\u4e00\u79cd\u60c5\u51b5 \u90a3\u5c31\u662f \u6dfb\u52a0\u4e86\u6ce8\u89e3@TableField(exist = false) \u540e\u7eed\u90fd\u4e0d\u7528\u5904\u7406\u4e86\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfieldColumnMap.put(name,column);\n\t\t\t\t//\u6570\u636e\u6743\u9650\u67e5\u8be2\n\t\t\t\tif(ruleMap.containsKey(name)) {\n\t\t\t\t\taddRuleToQueryWrapper(ruleMap.get(name), column, origDescriptors[i].getPropertyType(), queryWrapper);\n\t\t\t\t}\n\t\t\t\t//\u533a\u95f4\u67e5\u8be2\n\t\t\t\tdoIntervalQuery(queryWrapper, parameterMap, type, name, column);\n\t\t\t\t//\u5224\u65ad\u5355\u503c  \u53c2\u6570\u5e26\u4e0d\u540c\u6807\u8bc6\u5b57\u7b26\u4e32 \u8d70\u4e0d\u540c\u7684\u67e5\u8be2\n\t\t\t\t//TODO \u8fd9\u79cd\u524d\u540e\u5e26\u9017\u53f7\u7684\u652f\u6301\u5206\u5272\u540e\u6a21\u7cca\u67e5\u8be2(\u591a\u9009\u5b57\u6bb5\u67e5\u8be2\u751f\u6548) \u793a\u4f8b\uff1a,1,3,\n\t\t\t\tif (null != value && value.toString().startsWith(COMMA) && value.toString().endsWith(COMMA)) {\n\t\t\t\t\tString multiLikeval = value.toString().replace(\",,\", COMMA);\n\t\t\t\t\tString[] vals = multiLikeval.substring(1, multiLikeval.length()).split(COMMA);\n\t\t\t\t\tfinal String field = oConvertUtils.camelToUnderline(column);\n\t\t\t\t\tif(vals.length>1) {\n\t\t\t\t\t\tqueryWrapper.and(j -> {\n                            log.info(\"---\u67e5\u8be2\u8fc7\u6ee4\u5668\uff0cQuery\u89c4\u5219---field:{}, rule:{}, value:{}\", field, \"like\", vals[0]);\n\t\t\t\t\t\t\tj = j.like(field,vals[0]);\n\t\t\t\t\t\t\tfor (int k=1;k<vals.length;k++) {\n\t\t\t\t\t\t\t\tj = j.or().like(field,vals[k]);\n\t\t\t\t\t\t\t\tlog.info(\"---\u67e5\u8be2\u8fc7\u6ee4\u5668\uff0cQuery\u89c4\u5219 .or()---field:{}, rule:{}, value:{}\", field, \"like\", vals[k]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//return j;\n\t\t\t\t\t\t});\n\t\t\t\t\t}else {\n\t\t\t\t\t\tlog.info(\"---\u67e5\u8be2\u8fc7\u6ee4\u5668\uff0cQuery\u89c4\u5219---field:{}, rule:{}, value:{}\", field, \"like\", vals[0]);\n\t\t\t\t\t\tqueryWrapper.and(j -> j.like(field,vals[0]));\n\t\t\t\t\t}\n\t\t\t\t}else {\n\t\t\t\t\t//\u6839\u636e\u53c2\u6570\u503c\u5e26\u4ec0\u4e48\u5173\u952e\u5b57\u7b26\u4e32\u5224\u65ad\u8d70\u4ec0\u4e48\u7c7b\u578b\u7684\u67e5\u8be2\n\t\t\t\t\tQueryRuleEnum rule = convert2Rule(value);\n\t\t\t\t\tvalue = replaceValue(rule,value);\n\t\t\t\t\t// add -begin \u6dfb\u52a0\u5224\u65ad\u4e3a\u5b57\u7b26\u4e32\u65f6\u8bbe\u4e3a\u5168\u6a21\u7cca\u67e5\u8be2\n\t\t\t\t\t//if( (rule==null || QueryRuleEnum.EQ.equals(rule)) && \"class java.lang.String\".equals(type)) {\n\t\t\t\t\t\t// \u53ef\u4ee5\u8bbe\u7f6e\u5de6\u53f3\u6a21\u7cca\u6216\u5168\u6a21\u7cca\uff0c\u56e0\u4eba\u800c\u5f02\n\t\t\t\t\t\t//rule = QueryRuleEnum.LIKE;\n\t\t\t\t\t//}\n\t\t\t\t\t// add -end \u6dfb\u52a0\u5224\u65ad\u4e3a\u5b57\u7b26\u4e32\u65f6\u8bbe\u4e3a\u5168\u6a21\u7cca\u67e5\u8be2\n\t\t\t\t\taddEasyQuery(queryWrapper, column, rule, value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.error(e.getMessage(), e);\n\t\t\t}\n\t\t}\n\t\t// \u6392\u5e8f\u903b\u8f91 \u5904\u7406\n\t\tdoMultiFieldsOrder(queryWrapper, parameterMap, fieldColumnMap);\n\t\t\t\t\n\t\t//\u9ad8\u7ea7\u67e5\u8be2\n\t\tdoSuperQuery(queryWrapper, parameterMap, fieldColumnMap);\n\t\t// update-end--Author:taoyan  Date:20200923 for\uff1aissues/1671 \u5982\u679c\u5b57\u6bb5\u52a0\u6ce8\u89e3\u4e86@TableField(exist = false),\u4e0d\u8d70DB\u67e5\u8be2-------\n\t\t\n\t}\n\n\n\t/**\n\t * \u533a\u95f4\u67e5\u8be2\n\t * @param queryWrapper query\u5bf9\u8c61\n\t * @param parameterMap \u53c2\u6570map\n\t * @param type         \u5b57\u6bb5\u7c7b\u578b\n\t * @param filedName    \u5b57\u6bb5\u540d\u79f0\n\t * @param columnName   \u5217\u540d\u79f0\n\t */\n\tprivate static void doIntervalQuery(QueryWrapper<?> queryWrapper, Map<String, String[]> parameterMap, String type, String filedName, String columnName) throws ParseException {\n\t\t// \u6dfb\u52a0 \u5224\u65ad\u662f\u5426\u6709\u533a\u95f4\u503c\n\t\tString endValue = null,beginValue = null;\n\t\tif (parameterMap != null && parameterMap.containsKey(filedName + BEGIN)) {\n\t\t\tbeginValue = parameterMap.get(filedName + BEGIN)[0].trim();\n\t\t\taddQueryByRule(queryWrapper, columnName, type, beginValue, QueryRuleEnum.GE);\n\n\t\t}\n\t\tif (parameterMap != null && parameterMap.containsKey(filedName + END)) {\n\t\t\tendValue = parameterMap.get(filedName + END)[0].trim();\n\t\t\taddQueryByRule(queryWrapper, columnName, type, endValue, QueryRuleEnum.LE);\n\t\t}\n\t\t//\u591a\u503c\u67e5\u8be2\n\t\tif (parameterMap != null && parameterMap.containsKey(filedName + MULTI)) {\n\t\t\tendValue = parameterMap.get(filedName + MULTI)[0].trim();\n\t\t\taddQueryByRule(queryWrapper, columnName.replace(MULTI,\"\"), type, endValue, QueryRuleEnum.IN);\n\t\t}\n\t}\n\t\n\tprivate static void doMultiFieldsOrder(QueryWrapper<?> queryWrapper,Map<String, String[]> parameterMap, Map<String,String> fieldColumnMap) {\n\t\tSet<String> allFields = fieldColumnMap.keySet();\n\t\tString column=null,order=null;\n\t\tif(parameterMap!=null&& parameterMap.containsKey(ORDER_COLUMN)) {\n\t\t\tcolumn = parameterMap.get(ORDER_COLUMN)[0];\n\t\t}\n\t\tif(parameterMap!=null&& parameterMap.containsKey(ORDER_TYPE)) {\n\t\t\torder = parameterMap.get(ORDER_TYPE)[0];\n\t\t}\n        log.debug(\"\u6392\u5e8f\u89c4\u5219>>\u5217:\" + column + \",\u6392\u5e8f\u65b9\u5f0f:\" + order);\n\n\t\t//update-begin-author:scott date:2022-11-07 for:\u907f\u514d\u7528\u6237\u81ea\u5b9a\u4e49\u8868\u65e0\u9ed8\u8ba4\u5b57\u6bb5{\u521b\u5efa\u65f6\u95f4}\uff0c\u5bfc\u81f4\u6392\u5e8f\u62a5\u9519\n\t\t//TODO \u907f\u514d\u7528\u6237\u81ea\u5b9a\u4e49\u8868\u65e0\u9ed8\u8ba4\u5b57\u6bb5\u521b\u5efa\u65f6\u95f4\uff0c\u5bfc\u81f4\u6392\u5e8f\u62a5\u9519\n\t\tif(DataBaseConstant.CREATE_TIME.equals(column) && !fieldColumnMap.containsKey(DataBaseConstant.CREATE_TIME)){\n\t\t\tcolumn = \"id\";\n\t\t\tlog.warn(\"\u68c0\u6d4b\u5230\u5b9e\u4f53\u91cc\u6ca1\u6709\u5b57\u6bb5createTime\uff0c\u6539\u6210\u91c7\u7528ID\u6392\u5e8f\uff01\");\n\t\t}\n\t\t//update-end-author:scott date:2022-11-07 for:\u907f\u514d\u7528\u6237\u81ea\u5b9a\u4e49\u8868\u65e0\u9ed8\u8ba4\u5b57\u6bb5{\u521b\u5efa\u65f6\u95f4}\uff0c\u5bfc\u81f4\u6392\u5e8f\u62a5\u9519\n\t\t\n\t\tif (oConvertUtils.isNotEmpty(column) && oConvertUtils.isNotEmpty(order)) {\n\t\t\t//\u5b57\u5178\u5b57\u6bb5\uff0c\u53bb\u6389\u5b57\u5178\u7ffb\u8bd1\u6587\u672c\u540e\u7f00\n\t\t\tif(column.endsWith(CommonConstant.DICT_TEXT_SUFFIX)) {\n\t\t\t\tcolumn = column.substring(0, column.lastIndexOf(CommonConstant.DICT_TEXT_SUFFIX));\n\t\t\t}\n\n\t\t\t//update-begin-author:taoyan date:2022-5-16 for: issues/3676 \u83b7\u53d6\u7cfb\u7edf\u7528\u6237\u5217\u8868\u65f6\uff0c\u4f7f\u7528SQL\u6ce8\u5165\u751f\u6548\n\t\t\t//\u5224\u65adcolumn\u662f\u4e0d\u662f\u5f53\u524d\u5b9e\u4f53\u7684\n\t\t\tlog.debug(\"\u5f53\u524d\u5b57\u6bb5\u6709\uff1a\"+ allFields);\n\t\t\tif (!allColumnExist(column, allFields)) {\n\t\t\t\tthrow new JeecgBootException(\"\u8bf7\u6ce8\u610f\uff0c\u5c06\u8981\u6392\u5e8f\u7684\u5217\u5b57\u6bb5\u4e0d\u5b58\u5728\uff1a\" + column);\n\t\t\t}\n\t\t\t//update-end-author:taoyan date:2022-5-16 for: issues/3676 \u83b7\u53d6\u7cfb\u7edf\u7528\u6237\u5217\u8868\u65f6\uff0c\u4f7f\u7528SQL\u6ce8\u5165\u751f\u6548\n\n\t\t\t//update-begin-author:scott date:2022-10-10 for:\u3010jeecg-boot/issues/I5FJU6\u3011doMultiFieldsOrder() \u591a\u5b57\u6bb5\u6392\u5e8f\u65b9\u6cd5\u5b58\u5728\u95ee\u9898\n\t\t\t//\u591a\u5b57\u6bb5\u6392\u5e8f\u65b9\u6cd5\u6ca1\u6709\u8bfb\u53d6 MybatisPlus \u6ce8\u89e3 @TableField \u91cc value \u7684\u503c\n\t\t\tif (column.contains(\",\")) {\n\t\t\t\tList<String> columnList = Arrays.asList(column.split(\",\"));\n\t\t\t\tString columnStrNew = columnList.stream().map(c -> fieldColumnMap.get(c)).collect(Collectors.joining(\",\"));\n\t\t\t\tif (oConvertUtils.isNotEmpty(columnStrNew)) {\n\t\t\t\t\tcolumn = columnStrNew;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tcolumn = fieldColumnMap.get(column);\n\t\t\t}\n\t\t\t//update-end-author:scott date:2022-10-10 for:\u3010jeecg-boot/issues/I5FJU6\u3011doMultiFieldsOrder() \u591a\u5b57\u6bb5\u6392\u5e8f\u65b9\u6cd5\u5b58\u5728\u95ee\u9898\n\n\t\t\t//SQL\u6ce8\u5165check\n\t\t\tSqlInjectionUtil.filterContent(column);\n\n\t\t\t//update-begin--Author:scott  Date:20210531 for\uff1a36 \u591a\u6761\u4ef6\u6392\u5e8f\u65e0\u6548\u95ee\u9898\u4fee\u6b63-------\n\t\t\t// \u6392\u5e8f\u89c4\u5219\u4fee\u6539\n\t\t\t// \u5c06\u73b0\u6709\u6392\u5e8f _ \u524d\u7aef\u4f20\u9012\u6392\u5e8f\u6761\u4ef6{....,column: 'column1,column2',order: 'desc'} \u7ffb\u8bd1\u6210sql \"column1,column2 desc\"\n\t\t\t// \u4fee\u6539\u4e3a _ \u524d\u7aef\u4f20\u9012\u6392\u5e8f\u6761\u4ef6{....,column: 'column1,column2',order: 'desc'} \u7ffb\u8bd1\u6210sql \"column1 desc,column2 desc\"\n\t\t\tif (order.toUpperCase().indexOf(ORDER_TYPE_ASC)>=0) {\n\t\t\t\tqueryWrapper.orderByAsc(SqlInjectionUtil.getSqlInjectSortFields(column.split(\",\")));\n\t\t\t} else {\n\t\t\t\tqueryWrapper.orderByDesc(SqlInjectionUtil.getSqlInjectSortFields(column.split(\",\")));\n\t\t\t}\n\t\t\t//update-end--Author:scott  Date:20210531 for\uff1a36 \u591a\u6761\u4ef6\u6392\u5e8f\u65e0\u6548\u95ee\u9898\u4fee\u6b63-------\n\t\t}\n\t}\n\n\t//update-begin-author:taoyan date:2022-5-23 for: issues/3676 \u83b7\u53d6\u7cfb\u7edf\u7528\u6237\u5217\u8868\u65f6\uff0c\u4f7f\u7528SQL\u6ce8\u5165\u751f\u6548\n\t/**\n\t * \u591a\u5b57\u6bb5\u6392\u5e8f \u5224\u65ad\u6240\u4f20\u5b57\u6bb5\u662f\u5426\u5b58\u5728\n\t * @return\n\t */\n\tprivate static boolean allColumnExist(String columnStr, Set<String> allFields){\n\t\tboolean exist = true;\n\t\tif(columnStr.indexOf(COMMA)>=0){\n\t\t\tString[] arr = columnStr.split(COMMA);\n\t\t\tfor(String column: arr){\n\t\t\t\tif(!allFields.contains(column)){\n\t\t\t\t\texist = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\texist = allFields.contains(columnStr);\n\t\t}\n\t\treturn exist;\n\t}\n\t//update-end-author:taoyan date:2022-5-23 for: issues/3676 \u83b7\u53d6\u7cfb\u7edf\u7528\u6237\u5217\u8868\u65f6\uff0c\u4f7f\u7528SQL\u6ce8\u5165\u751f\u6548\n\t\n\t/**\n\t * \u9ad8\u7ea7\u67e5\u8be2\n\t * @param queryWrapper \u67e5\u8be2\u5bf9\u8c61\n\t * @param parameterMap \u53c2\u6570\u5bf9\u8c61\n\t * @param fieldColumnMap \u5b9e\u4f53\u5b57\u6bb5\u548c\u6570\u636e\u5e93\u5217\u5bf9\u5e94\u7684map\n\t */\n\tprivate static void doSuperQuery(QueryWrapper<?> queryWrapper,Map<String, String[]> parameterMap, Map<String,String> fieldColumnMap) {\n\t\tif(parameterMap!=null&& parameterMap.containsKey(SUPER_QUERY_PARAMS)){\n\t\t\tString superQueryParams = parameterMap.get(SUPER_QUERY_PARAMS)[0];\n\t\t\tString superQueryMatchType = parameterMap.get(SUPER_QUERY_MATCH_TYPE) != null ? parameterMap.get(SUPER_QUERY_MATCH_TYPE)[0] : MatchTypeEnum.AND.getValue();\n            MatchTypeEnum matchType = MatchTypeEnum.getByValue(superQueryMatchType);\n            // update-begin--Author:sunjianlei  Date:20200325 for\uff1a\u9ad8\u7ea7\u67e5\u8be2\u7684\u6761\u4ef6\u8981\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u9632\u6b62\u548c\u7528\u6237\u7684\u5176\u4ed6\u6761\u4ef6\u51b2\u7a81 -------\n            try {\n                superQueryParams = URLDecoder.decode(superQueryParams, \"UTF-8\");\n                List<QueryCondition> conditions = JSON.parseArray(superQueryParams, QueryCondition.class);\n                if (conditions == null || conditions.size() == 0) {\n                    return;\n                }\n\t\t\t\t// update-begin-author:sunjianlei date:20220119 for: \u3010JTC-573\u3011 \u8fc7\u6ee4\u7a7a\u6761\u4ef6\u67e5\u8be2\uff0c\u9632\u6b62 sql \u62fc\u63a5\u591a\u4f59\u7684 and\n\t\t\t\tList<QueryCondition> filterConditions = conditions.stream().filter(\n\t\t\t\t\t\trule -> oConvertUtils.isNotEmpty(rule.getField())\n\t\t\t\t\t\t\t\t&& oConvertUtils.isNotEmpty(rule.getRule())\n\t\t\t\t\t\t\t\t&& oConvertUtils.isNotEmpty(rule.getVal())\n\t\t\t\t).collect(Collectors.toList());\n\t\t\t\tif (filterConditions.size() == 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// update-end-author:sunjianlei date:20220119 for: \u3010JTC-573\u3011 \u8fc7\u6ee4\u7a7a\u6761\u4ef6\u67e5\u8be2\uff0c\u9632\u6b62 sql \u62fc\u63a5\u591a\u4f59\u7684 and\n                log.debug(\"---\u9ad8\u7ea7\u67e5\u8be2\u53c2\u6570-->\" + filterConditions);\n\n                queryWrapper.and(andWrapper -> {\n                    for (int i = 0; i < filterConditions.size(); i++) {\n                        QueryCondition rule = filterConditions.get(i);\n                        if (oConvertUtils.isNotEmpty(rule.getField())\n                                && oConvertUtils.isNotEmpty(rule.getRule())\n                                && oConvertUtils.isNotEmpty(rule.getVal())) {\n\n                            log.debug(\"SuperQuery ==> \" + rule.toString());\n\n                            //update-begin-author:taoyan date:20201228 for: \u3010\u9ad8\u7ea7\u67e5\u8be2\u3011 oracle \u65e5\u671f\u7b49\u4e8e\u67e5\u8be2\u62a5\u9519\n\t\t\t\t\t\t\tObject queryValue = rule.getVal();\n                            if(\"date\".equals(rule.getType())){\n\t\t\t\t\t\t\t\tqueryValue = DateUtils.str2Date(rule.getVal(),DateUtils.date_sdf.get());\n\t\t\t\t\t\t\t}else if(\"datetime\".equals(rule.getType())){\n\t\t\t\t\t\t\t\tqueryValue = DateUtils.str2Date(rule.getVal(), DateUtils.datetimeFormat.get());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// update-begin--author:sunjianlei date:20210702 for\uff1a\u3010/issues/I3VR8E\u3011\u9ad8\u7ea7\u67e5\u8be2\u6ca1\u6709\u7c7b\u578b\u8f6c\u6362\uff0c\u67e5\u8be2\u53c2\u6570\u90fd\u662f\u5b57\u7b26\u4e32\u7c7b\u578b ----\n\t\t\t\t\t\t\tString dbType = rule.getDbType();\n\t\t\t\t\t\t\tif (oConvertUtils.isNotEmpty(dbType)) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tString valueStr = String.valueOf(queryValue);\n\t\t\t\t\t\t\t\t\tswitch (dbType.toLowerCase().trim()) {\n\t\t\t\t\t\t\t\t\t\tcase \"int\":\n\t\t\t\t\t\t\t\t\t\t\tqueryValue = Integer.parseInt(valueStr);\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"bigdecimal\":\n\t\t\t\t\t\t\t\t\t\t\tqueryValue = new BigDecimal(valueStr);\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"short\":\n\t\t\t\t\t\t\t\t\t\t\tqueryValue = Short.parseShort(valueStr);\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"long\":\n\t\t\t\t\t\t\t\t\t\t\tqueryValue = Long.parseLong(valueStr);\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"float\":\n\t\t\t\t\t\t\t\t\t\t\tqueryValue = Float.parseFloat(valueStr);\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"double\":\n\t\t\t\t\t\t\t\t\t\t\tqueryValue = Double.parseDouble(valueStr);\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"boolean\":\n\t\t\t\t\t\t\t\t\t\t\tqueryValue = Boolean.parseBoolean(valueStr);\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n                                        default:\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\t\tlog.error(\"\u9ad8\u7ea7\u67e5\u8be2\u503c\u8f6c\u6362\u5931\u8d25\uff1a\", e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// update-begin--author:sunjianlei date:20210702 for\uff1a\u3010/issues/I3VR8E\u3011\u9ad8\u7ea7\u67e5\u8be2\u6ca1\u6709\u7c7b\u578b\u8f6c\u6362\uff0c\u67e5\u8be2\u53c2\u6570\u90fd\u662f\u5b57\u7b26\u4e32\u7c7b\u578b ----\n                            addEasyQuery(andWrapper, fieldColumnMap.get(rule.getField()), QueryRuleEnum.getByValue(rule.getRule()), queryValue);\n\t\t\t\t\t\t\t//update-end-author:taoyan date:20201228 for: \u3010\u9ad8\u7ea7\u67e5\u8be2\u3011 oracle \u65e5\u671f\u7b49\u4e8e\u67e5\u8be2\u62a5\u9519\n\n                            // \u5982\u679c\u62fc\u63a5\u65b9\u5f0f\u662fOR\uff0c\u5c31\u62fc\u63a5OR\n                            if (MatchTypeEnum.OR == matchType && i < (filterConditions.size() - 1)) {\n                                andWrapper.or();\n                            }\n                        }\n                    }\n                    //return andWrapper;\n                });\n            } catch (UnsupportedEncodingException e) {\n                log.error(\"--\u9ad8\u7ea7\u67e5\u8be2\u53c2\u6570\u8f6c\u7801\u5931\u8d25\uff1a\" + superQueryParams, e);\n            } catch (Exception e) {\n                log.error(\"--\u9ad8\u7ea7\u67e5\u8be2\u62fc\u63a5\u5931\u8d25\uff1a\" + e.getMessage());\n                e.printStackTrace();\n            }\n            // update-end--Author:sunjianlei  Date:20200325 for\uff1a\u9ad8\u7ea7\u67e5\u8be2\u7684\u6761\u4ef6\u8981\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u9632\u6b62\u548c\u7528\u6237\u7684\u5176\u4ed6\u6761\u4ef6\u51b2\u7a81 -------\n\t\t}\n\t\t//log.info(\" superQuery getCustomSqlSegment: \"+ queryWrapper.getCustomSqlSegment());\n\t}\n\t/**\n\t * \u6839\u636e\u6240\u4f20\u7684\u503c \u8f6c\u5316\u6210\u5bf9\u5e94\u7684\u6bd4\u8f83\u65b9\u5f0f\n\t * \u652f\u6301><= like in !\n\t * @param value\n\t * @return\n\t */\n\tpublic static QueryRuleEnum convert2Rule(Object value) {\n\t\t// \u907f\u514d\u7a7a\u6570\u636e\n\t\t// update-begin-author:taoyan date:20210629 for: \u67e5\u8be2\u6761\u4ef6\u8f93\u5165\u7a7a\u683c\u5bfc\u81f4return null\u540e\u7eed\u5224\u65ad\u5bfc\u81f4\u629b\u51fanull\u5f02\u5e38\n\t\tif (value == null) {\n\t\t\treturn QueryRuleEnum.EQ;\n\t\t}\n\t\tString val = (value + \"\").toString().trim();\n\t\tif (val.length() == 0) {\n\t\t\treturn QueryRuleEnum.EQ;\n\t\t}\n\t\t// update-end-author:taoyan date:20210629 for: \u67e5\u8be2\u6761\u4ef6\u8f93\u5165\u7a7a\u683c\u5bfc\u81f4return null\u540e\u7eed\u5224\u65ad\u5bfc\u81f4\u629b\u51fanull\u5f02\u5e38\n\t\tQueryRuleEnum rule =null;\n\n\t\t//update-begin--Author:scott  Date:20190724 for\uff1ainitQueryWrapper\u7ec4\u88c5sql\u67e5\u8be2\u6761\u4ef6\u9519\u8bef #284-------------------\n\t\t//TODO \u6b64\u5904\u89c4\u5219\uff0c\u53ea\u9002\u7528\u4e8e le lt ge gt\n\t\t// step 2 .>= =<\n        int length2 = 2;\n        int length3 = 3;\n\t\tif (rule == null && val.length() >= length3) {\n\t\t\tif(QUERY_SEPARATE_KEYWORD.equals(val.substring(length2, length3))){\n\t\t\t\trule = QueryRuleEnum.getByValue(val.substring(0, 2));\n\t\t\t}\n\t\t}\n\t\t// step 1 .> <\n\t\tif (rule == null && val.length() >= length2) {\n\t\t\tif(QUERY_SEPARATE_KEYWORD.equals(val.substring(1, length2))){\n\t\t\t\trule = QueryRuleEnum.getByValue(val.substring(0, 1));\n\t\t\t}\n\t\t}\n\t\t//update-end--Author:scott  Date:20190724 for\uff1ainitQueryWrapper\u7ec4\u88c5sql\u67e5\u8be2\u6761\u4ef6\u9519\u8bef #284---------------------\n\n\t\t// step 3 like\n\t\t//update-begin-author:taoyan for: /issues/3382 \u9ed8\u8ba4\u5e26*\u5c31\u8d70\u6a21\u7cca\uff0c\u4f46\u662f\u5982\u679c\u53ea\u6709\u4e00\u4e2a*\uff0c\u90a3\u4e48\u8d70\u7b49\u4e8e\u67e5\u8be2\n\t\tif(rule == null && val.equals(STAR)){\n\t\t\trule = QueryRuleEnum.EQ;\n\t\t}\n\t\t//update-end-author:taoyan for: /issues/3382  \u9ed8\u8ba4\u5e26*\u5c31\u8d70\u6a21\u7cca\uff0c\u4f46\u662f\u5982\u679c\u53ea\u6709\u4e00\u4e2a*\uff0c\u90a3\u4e48\u8d70\u7b49\u4e8e\u67e5\u8be2\n\t\tif (rule == null && val.contains(STAR)) {\n\t\t\tif (val.startsWith(STAR) && val.endsWith(STAR)) {\n\t\t\t\trule = QueryRuleEnum.LIKE;\n\t\t\t} else if (val.startsWith(STAR)) {\n\t\t\t\trule = QueryRuleEnum.LEFT_LIKE;\n\t\t\t} else if(val.endsWith(STAR)){\n\t\t\t\trule = QueryRuleEnum.RIGHT_LIKE;\n\t\t\t}\n\t\t}\n\n\t\t// step 4 in\n\t\tif (rule == null && val.contains(COMMA)) {\n\t\t\t//TODO in \u67e5\u8be2\u8fd9\u91cc\u5e94\u8be5\u6709\u4e2abug  \u5982\u679c\u4e00\u5b57\u6bb5\u672c\u8eab\u5c31\u662f\u591a\u9009 \u6b64\u65f6\u7528in\u67e5\u8be2 \u672a\u5fc5\u80fd\u67e5\u8be2\u51fa\u6765\n\t\t\trule = QueryRuleEnum.IN;\n\t\t}\n\t\t// step 5 != \n\t\tif(rule == null && val.startsWith(NOT_EQUAL)){\n\t\t\trule = QueryRuleEnum.NE;\n\t\t}\n\t\t// step 6 xx+xx+xx \u8fd9\u79cd\u60c5\u51b5\u9002\u7528\u4e8e\u5982\u679c\u60f3\u8981\u7528\u9017\u53f7\u4f5c\u7cbe\u786e\u67e5\u8be2 \u4f46\u662f\u7cfb\u7edf\u9ed8\u8ba4\u9017\u53f7\u8d70in \u6240\u4ee5\u53ef\u4ee5\u7528++\u66ff\u6362\u3010\u6b64\u903b\u8f91\u4f5c\u5e9f\u3011\n\t\tif(rule == null && val.indexOf(QUERY_COMMA_ESCAPE)>0){\n\t\t\trule = QueryRuleEnum.EQ_WITH_ADD;\n\t\t}\n\n\t\t//update-begin--Author:taoyan  Date:20201229 for\uff1ainitQueryWrapper\u7ec4\u88c5sql\u67e5\u8be2\u6761\u4ef6\u9519\u8bef #284---------------------\n\t\t//\u7279\u6b8a\u5904\u7406\uff1aOracle\u7684\u8868\u8fbe\u5f0fto_date('xxx','yyyy-MM-dd')\u542b\u6709\u9017\u53f7\uff0c\u4f1a\u88ab\u8bc6\u522b\u4e3ain\u67e5\u8be2\uff0c\u8f6c\u4e3a\u7b49\u4e8e\u67e5\u8be2\n\t\tif(rule == QueryRuleEnum.IN && val.indexOf(YYYY_MM_DD)>=0 && val.indexOf(TO_DATE)>=0){\n\t\t\trule = QueryRuleEnum.EQ;\n\t\t}\n\t\t//update-end--Author:taoyan  Date:20201229 for\uff1ainitQueryWrapper\u7ec4\u88c5sql\u67e5\u8be2\u6761\u4ef6\u9519\u8bef #284---------------------\n\n\t\treturn rule != null ? rule : QueryRuleEnum.EQ;\n\t}\n\t\n\t/**\n\t * \u66ff\u6362\u6389\u5173\u952e\u5b57\u5b57\u7b26\n\t * \n\t * @param rule\n\t * @param value\n\t * @return\n\t */\n\tprivate static Object replaceValue(QueryRuleEnum rule, Object value) {\n\t\tif (rule == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (! (value instanceof String)){\n\t\t\treturn value;\n\t\t}\n\t\tString val = (value + \"\").toString().trim();\n\t\t//update-begin-author:taoyan date:20220302 for: \u67e5\u8be2\u6761\u4ef6\u7684\u503c\u4e3a\u7b49\u53f7\uff08=\uff09bug #3443\n\t\tif(QueryRuleEnum.EQ.getValue().equals(val)){\n\t\t\treturn val;\n\t\t}\n\t\t//update-end-author:taoyan date:20220302 for: \u67e5\u8be2\u6761\u4ef6\u7684\u503c\u4e3a\u7b49\u53f7\uff08=\uff09bug #3443\n\t\tif (rule == QueryRuleEnum.LIKE) {\n\t\t\tvalue = val.substring(1, val.length() - 1);\n\t\t\t//mysql \u6a21\u7cca\u67e5\u8be2\u4e4b\u7279\u6b8a\u5b57\u7b26\u4e0b\u5212\u7ebf \uff08_\u3001\\\uff09\n\t\t\tvalue = specialStrConvert(value.toString());\n\t\t} else if (rule == QueryRuleEnum.LEFT_LIKE || rule == QueryRuleEnum.NE) {\n\t\t\tvalue = val.substring(1);\n\t\t\t//mysql \u6a21\u7cca\u67e5\u8be2\u4e4b\u7279\u6b8a\u5b57\u7b26\u4e0b\u5212\u7ebf \uff08_\u3001\\\uff09\n\t\t\tvalue = specialStrConvert(value.toString());\n\t\t} else if (rule == QueryRuleEnum.RIGHT_LIKE) {\n\t\t\tvalue = val.substring(0, val.length() - 1);\n\t\t\t//mysql \u6a21\u7cca\u67e5\u8be2\u4e4b\u7279\u6b8a\u5b57\u7b26\u4e0b\u5212\u7ebf \uff08_\u3001\\\uff09\n\t\t\tvalue = specialStrConvert(value.toString());\n\t\t} else if (rule == QueryRuleEnum.IN) {\n\t\t\tvalue = val.split(\",\");\n\t\t} else if (rule == QueryRuleEnum.EQ_WITH_ADD) {\n\t\t\tvalue = val.replaceAll(\"\\\\+\\\\+\", COMMA);\n\t\t}else {\n\t\t\t//update-begin--Author:scott  Date:20190724 for\uff1ainitQueryWrapper\u7ec4\u88c5sql\u67e5\u8be2\u6761\u4ef6\u9519\u8bef #284-------------------\n\t\t\tif(val.startsWith(rule.getValue())){\n\t\t\t\t//TODO \u6b64\u5904\u903b\u8f91\u5e94\u8be5\u6ce8\u91ca\u6389-> \u5982\u679c\u67e5\u8be2\u5185\u5bb9\u4e2d\u5e26\u6709\u67e5\u8be2\u5339\u914d\u89c4\u5219\u7b26\u53f7\uff0c\u5c31\u4f1a\u88ab\u622a\u53d6\u7684\uff08\u6bd4\u5982\uff1a>=\u60a8\u597d\uff09\n\t\t\t\tvalue = val.replaceFirst(rule.getValue(),\"\");\n\t\t\t}else if(val.startsWith(rule.getCondition()+QUERY_SEPARATE_KEYWORD)){\n\t\t\t\tvalue = val.replaceFirst(rule.getCondition()+QUERY_SEPARATE_KEYWORD,\"\").trim();\n\t\t\t}\n\t\t\t//update-end--Author:scott  Date:20190724 for\uff1ainitQueryWrapper\u7ec4\u88c5sql\u67e5\u8be2\u6761\u4ef6\u9519\u8bef #284-------------------\n\t\t}\n\t\treturn value;\n\t}\n\t\n\tprivate static void addQueryByRule(QueryWrapper<?> queryWrapper,String name,String type,String value,QueryRuleEnum rule) throws ParseException {\n\t\tif(oConvertUtils.isNotEmpty(value)) {\n\t\t\t//update-begin--Author:sunjianlei  Date:20220104 for\uff1a\u3010JTC-409\u3011\u4fee\u590d\u9017\u53f7\u5206\u5272\u60c5\u51b5\u4e0b\u6ca1\u6709\u8f6c\u6362\u7c7b\u578b\uff0c\u5bfc\u81f4\u7c7b\u578b\u4e25\u683c\u7684\u6570\u636e\u5e93\u67e5\u8be2\u62a5\u9519 -------------------\n\t\t\t// \u9488\u5bf9\u6570\u5b57\u7c7b\u578b\u5b57\u6bb5\uff0c\u591a\u503c\u67e5\u8be2\n\t\t\tif(value.contains(COMMA)){\n\t\t\t\tObject[] temp = Arrays.stream(value.split(COMMA)).map(v -> {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn QueryGenerator.parseByType(v, type, rule);\n\t\t\t\t\t} catch (ParseException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\treturn v;\n\t\t\t\t\t}\n\t\t\t\t}).toArray();\n\t\t\t\taddEasyQuery(queryWrapper, name, rule, temp);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tObject temp = QueryGenerator.parseByType(value, type, rule);\n\t\t\taddEasyQuery(queryWrapper, name, rule, temp);\n\t\t\t//update-end--Author:sunjianlei  Date:20220104 for\uff1a\u3010JTC-409\u3011\u4fee\u590d\u9017\u53f7\u5206\u5272\u60c5\u51b5\u4e0b\u6ca1\u6709\u8f6c\u6362\u7c7b\u578b\uff0c\u5bfc\u81f4\u7c7b\u578b\u4e25\u683c\u7684\u6570\u636e\u5e93\u67e5\u8be2\u62a5\u9519 -------------------\n\t\t}\n\t}\n\n\t/**\n\t * \u6839\u636e\u7c7b\u578b\u8f6c\u6362\u7ed9\u5b9a\u7684\u503c\n\t * @param value\n\t * @param type\n\t * @param rule\n\t * @return\n\t * @throws ParseException\n\t */\n\tprivate static Object parseByType(String value, String type, QueryRuleEnum rule) throws ParseException {\n\t\tObject temp;\n\t\tswitch (type) {\n\t\t\tcase \"class java.lang.Integer\":\n\t\t\t\ttemp =  Integer.parseInt(value);\n\t\t\t\tbreak;\n\t\t\tcase \"class java.math.BigDecimal\":\n\t\t\t\ttemp =  new BigDecimal(value);\n\t\t\t\tbreak;\n\t\t\tcase \"class java.lang.Short\":\n\t\t\t\ttemp =  Short.parseShort(value);\n\t\t\t\tbreak;\n\t\t\tcase \"class java.lang.Long\":\n\t\t\t\ttemp =  Long.parseLong(value);\n\t\t\t\tbreak;\n\t\t\tcase \"class java.lang.Float\":\n\t\t\t\ttemp =   Float.parseFloat(value);\n\t\t\t\tbreak;\n\t\t\tcase \"class java.lang.Double\":\n\t\t\t\ttemp =  Double.parseDouble(value);\n\t\t\t\tbreak;\n\t\t\tcase \"class java.util.Date\":\n\t\t\t\ttemp = getDateQueryByRule(value, rule);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\ttemp = value;\n\t\t\t\tbreak;\n\t\t}\n\t\treturn temp;\n\t}\n\t\n\t/**\n\t * \u83b7\u53d6\u65e5\u671f\u7c7b\u578b\u7684\u503c\n\t * @param value\n\t * @param rule\n\t * @return\n\t * @throws ParseException\n\t */\n\tprivate static Date getDateQueryByRule(String value,QueryRuleEnum rule) throws ParseException {\n\t\tDate date = null;\n\t\tint length = 10;\n\t\tif(value.length()==length) {\n\t\t\tif(rule==QueryRuleEnum.GE) {\n\t\t\t\t//\u6bd4\u8f83\u5927\u4e8e\n\t\t\t\tdate = getTime().parse(value + \" 00:00:00\");\n\t\t\t}else if(rule==QueryRuleEnum.LE) {\n\t\t\t\t//\u6bd4\u8f83\u5c0f\u4e8e\n\t\t\t\tdate = getTime().parse(value + \" 23:59:59\");\n\t\t\t}\n\t\t\t//TODO \u65e5\u671f\u7c7b\u578b\u6bd4\u8f83\u7279\u6b8a \u53ef\u80fdoracle\u4e0b\u4e0d\u4e00\u5b9a\u597d\u4f7f\n\t\t}\n\t\tif(date==null) {\n\t\t\tdate = getTime().parse(value);\n\t\t}\n\t\treturn date;\n\t}\n\t\n\t/**\n\t  * \u6839\u636e\u89c4\u5219\u8d70\u4e0d\u540c\u7684\u67e5\u8be2\n\t * @param queryWrapper QueryWrapper\n\t * @param name         \u5b57\u6bb5\u540d\u5b57\n\t * @param rule         \u67e5\u8be2\u89c4\u5219\n\t * @param value        \u67e5\u8be2\u6761\u4ef6\u503c\n\t */\n\tpublic static void addEasyQuery(QueryWrapper<?> queryWrapper, String name, QueryRuleEnum rule, Object value) {\n\t\tif (name==null || value == null || rule == null || oConvertUtils.isEmpty(value)) {\n\t\t\treturn;\n\t\t}\n\t\tname = oConvertUtils.camelToUnderline(name);\n\t\tlog.debug(\"---\u9ad8\u7ea7\u67e5\u8be2 Query\u89c4\u5219---field:{} , rule:{} , value:{}\",name,rule.getValue(),value);\n\t\tswitch (rule) {\n\t\tcase GT:\n\t\t\tqueryWrapper.gt(name, value);\n\t\t\tbreak;\n\t\tcase GE:\n\t\t\tqueryWrapper.ge(name, value);\n\t\t\tbreak;\n\t\tcase LT:\n\t\t\tqueryWrapper.lt(name, value);\n\t\t\tbreak;\n\t\tcase LE:\n\t\t\tqueryWrapper.le(name, value);\n\t\t\tbreak;\n\t\tcase EQ:\n\t\tcase EQ_WITH_ADD:\n\t\t\tqueryWrapper.eq(name, value);\n\t\t\tbreak;\n\t\tcase NE:\n\t\t\tqueryWrapper.ne(name, value);\n\t\t\tbreak;\n\t\tcase IN:\n\t\t\tif(value instanceof String) {\n\t\t\t\tqueryWrapper.in(name, (Object[])value.toString().split(COMMA));\n\t\t\t}else if(value instanceof String[]) {\n\t\t\t\tqueryWrapper.in(name, (Object[]) value);\n\t\t\t}\n\t\t\t//update-begin-author:taoyan date:20200909 for:\u3010bug\u3011in \u7c7b\u578b\u591a\u503c\u67e5\u8be2 \u4e0d\u9002\u914dpostgresql #1671\n\t\t\telse if(value.getClass().isArray()) {\n\t\t\t\tqueryWrapper.in(name, (Object[])value);\n\t\t\t}else {\n\t\t\t\tqueryWrapper.in(name, value);\n\t\t\t}\n\t\t\t//update-end-author:taoyan date:20200909 for:\u3010bug\u3011in \u7c7b\u578b\u591a\u503c\u67e5\u8be2 \u4e0d\u9002\u914dpostgresql #1671\n\t\t\tbreak;\n\t\tcase LIKE:\n\t\t\tqueryWrapper.like(name, value);\n\t\t\tbreak;\n\t\tcase LEFT_LIKE:\n\t\t\tqueryWrapper.likeLeft(name, value);\n\t\t\tbreak;\n\t\tcase RIGHT_LIKE:\n\t\t\tqueryWrapper.likeRight(name, value);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tlog.info(\"--\u67e5\u8be2\u89c4\u5219\u672a\u5339\u914d\u5230---\");\n\t\t\tbreak;\n\t\t}\n\t}\n\t/**\n\t * \n\t * @param name\n\t * @return\n\t */\n\tprivate static boolean judgedIsUselessField(String name) {\n\t\treturn \"class\".equals(name) || \"ids\".equals(name)\n\t\t\t\t|| \"page\".equals(name) || \"rows\".equals(name)\n\t\t\t\t|| \"sort\".equals(name) || \"order\".equals(name);\n\t}\n\n\t\n\n\t/**\n\t * \u83b7\u53d6\u8bf7\u6c42\u5bf9\u5e94\u7684\u6570\u636e\u6743\u9650\u89c4\u5219 TODO \u76f8\u540c\u5217\u6743\u9650\u591a\u4e2a \u6709\u95ee\u9898\n\t * @return\n\t */\n\tpublic static Map<String, SysPermissionDataRuleModel> getRuleMap() {\n\t\tMap<String, SysPermissionDataRuleModel> ruleMap = new HashMap<>(5);\n\t\tList<SysPermissionDataRuleModel> list = null;\n\t\t//update-begin-author:taoyan date:2023-6-1 for:QQYUN-5441 \u3010\u7b80\u6d41\u3011\u83b7\u53d6\u591a\u4e2a\u7528\u6237/\u90e8\u95e8/\u89d2\u8272 \u8bbe\u7f6e\u90e8\u95e8\u67e5\u8be2 \u62a5\u9519\n\t\ttry {\n\t\t\tlist = JeecgDataAutorUtils.loadDataSearchConditon();\n\t\t}catch (Exception e){\n\t\t\tlog.error(\"\u6839\u636erequest\u5bf9\u8c61\u83b7\u53d6\u6743\u9650\u6570\u636e\u5931\u8d25\uff0c\u53ef\u80fd\u662f\u5b9a\u65f6\u4efb\u52a1\u4e2d\u6267\u884c\u7684\u3002\", e);\n\t\t}\n\t\t//update-end-author:taoyan date:2023-6-1 for:QQYUN-5441 \u3010\u7b80\u6d41\u3011\u83b7\u53d6\u591a\u4e2a\u7528\u6237/\u90e8\u95e8/\u89d2\u8272 \u8bbe\u7f6e\u90e8\u95e8\u67e5\u8be2 \u62a5\u9519\n\t\tif(list != null&&list.size()>0){\n\t\t\tif(list.get(0)==null){\n\t\t\t\treturn ruleMap;\n\t\t\t}\n\t\t\tfor (SysPermissionDataRuleModel rule : list) {\n\t\t\t\tString column = rule.getRuleColumn();\n\t\t\t\tif(QueryRuleEnum.SQL_RULES.getValue().equals(rule.getRuleConditions())) {\n\t\t\t\t\tcolumn = SQL_RULES_COLUMN+rule.getId();\n\t\t\t\t}\n\t\t\t\truleMap.put(column, rule);\n\t\t\t}\n\t\t}\n\t\treturn ruleMap;\n\t}\n\t\n\tprivate static void addRuleToQueryWrapper(SysPermissionDataRuleModel dataRule, String name, Class propertyType, QueryWrapper<?> queryWrapper) {\n\t\tQueryRuleEnum rule = QueryRuleEnum.getByValue(dataRule.getRuleConditions());\n\t\tif(rule.equals(QueryRuleEnum.IN) && ! propertyType.equals(String.class)) {\n\t\t\tString[] values = dataRule.getRuleValue().split(\",\");\n\t\t\tObject[] objs = new Object[values.length];\n\t\t\tfor (int i = 0; i < values.length; i++) {\n\t\t\t\tobjs[i] = NumberUtils.parseNumber(values[i], propertyType);\n\t\t\t}\n\t\t\taddEasyQuery(queryWrapper, name, rule, objs);\n\t\t}else {\n\t\t\tif (propertyType.equals(String.class)) {\n\t\t\t\taddEasyQuery(queryWrapper, name, rule, converRuleValue(dataRule.getRuleValue()));\n\t\t\t}else if (propertyType.equals(Date.class)) {\n\t\t\t\tString dateStr =converRuleValue(dataRule.getRuleValue());\n                int length = 10;\n\t\t\t\tif(dateStr.length()==length){\n\t\t\t\t\taddEasyQuery(queryWrapper, name, rule, DateUtils.str2Date(dateStr,DateUtils.date_sdf.get()));\n\t\t\t\t}else{\n\t\t\t\t\taddEasyQuery(queryWrapper, name, rule, DateUtils.str2Date(dateStr,DateUtils.datetimeFormat.get()));\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\taddEasyQuery(queryWrapper, name, rule, NumberUtils.parseNumber(dataRule.getRuleValue(), propertyType));\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static String converRuleValue(String ruleValue) {\n\t\tString value = JwtUtil.getUserSystemData(ruleValue,null);\n\t\treturn value!= null ? value : ruleValue;\n\t}\n\n\t/**\n\t* @author: scott\n\t* @Description: \u53bb\u6389\u503c\u524d\u540e\u5355\u5f15\u53f7\n\t* @date: 2020/3/19 21:26\n\t* @param ruleValue: \n\t* @Return: java.lang.String\n\t*/\n\tpublic static String trimSingleQuote(String ruleValue) {\n\t\tif (oConvertUtils.isEmpty(ruleValue)) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (ruleValue.startsWith(QueryGenerator.SQL_SQ)) {\n\t\t\truleValue = ruleValue.substring(1);\n\t\t}\n\t\tif (ruleValue.endsWith(QueryGenerator.SQL_SQ)) {\n\t\t\truleValue = ruleValue.substring(0, ruleValue.length() - 1);\n\t\t}\n\t\treturn ruleValue;\n\t}\n\t\n\tpublic static String getSqlRuleValue(String sqlRule){\n\t\ttry {\n\t\t\tSet<String> varParams = getSqlRuleParams(sqlRule);\n\t\t\tfor(String var:varParams){\n\t\t\t\tString tempValue = converRuleValue(var);\n\t\t\t\tsqlRule = sqlRule.replace(\"#{\"+var+\"}\",tempValue);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\t\treturn sqlRule;\n\t}\n\t\n\t/**\n\t * \u83b7\u53d6sql\u4e2d\u7684#{key} \u8fd9\u4e2akey\u7ec4\u6210\u7684set\n\t */\n\tpublic static Set<String> getSqlRuleParams(String sql) {\n\t\tif(oConvertUtils.isEmpty(sql)){\n\t\t\treturn null;\n\t\t}\n\t\tSet<String> varParams = new HashSet<String>();\n\t\tString regex = \"\\\\#\\\\{\\\\w+\\\\}\";\n\t\t\n\t\tPattern p = Pattern.compile(regex);\n\t\tMatcher m = p.matcher(sql);\n\t\twhile(m.find()){\n\t\t\tString var = m.group();\n\t\t\tvarParams.add(var.substring(var.indexOf(\"{\")+1,var.indexOf(\"}\")));\n\t\t}\n\t\treturn varParams;\n\t}\n\t\n\t/**\n\t * \u83b7\u53d6\u67e5\u8be2\u6761\u4ef6 \n\t * @param field\n\t * @param alias\n\t * @param value\n\t * @param isString\n\t * @return\n\t */\n\tpublic static String getSingleQueryConditionSql(String field,String alias,Object value,boolean isString) {\n\t\treturn SqlConcatUtil.getSingleQueryConditionSql(field, alias, value, isString,null);\n\t}\n\t\n\t/**\n\t *   \u6839\u636e\u6743\u9650\u76f8\u5173\u914d\u7f6e\u751f\u6210\u76f8\u5173\u7684SQL \u8bed\u53e5\n\t * @param clazz\n\t * @return\n\t */\n\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n\tpublic static String installAuthJdbc(Class<?> clazz) {\n\t\tStringBuffer sb = new StringBuffer();\n\t\t//\u6743\u9650\u67e5\u8be2\n\t\tMap<String,SysPermissionDataRuleModel> ruleMap = getRuleMap();\n\t\tPropertyDescriptor[] origDescriptors = PropertyUtils.getPropertyDescriptors(clazz);\n\t\tString sqlAnd = \" and \";\n\t\tfor (String c : ruleMap.keySet()) {\n\t\t\tif(oConvertUtils.isNotEmpty(c) && c.startsWith(SQL_RULES_COLUMN)){\n\t\t\t\tsb.append(sqlAnd+getSqlRuleValue(ruleMap.get(c).getRuleValue()));\n\t\t\t}\n\t\t}\n\t\tString name, column;\n\t\tfor (int i = 0; i < origDescriptors.length; i++) {\n\t\t\tname = origDescriptors[i].getName();\n\t\t\tif (judgedIsUselessField(name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(ruleMap.containsKey(name)) {\n\t\t\t\tcolumn = ReflectHelper.getTableFieldName(clazz, name);\n\t\t\t\tif(column==null){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tSysPermissionDataRuleModel dataRule = ruleMap.get(name);\n\t\t\t\tQueryRuleEnum rule = QueryRuleEnum.getByValue(dataRule.getRuleConditions());\n\t\t\t\tClass propType = origDescriptors[i].getPropertyType();\n\t\t\t\tboolean isString = propType.equals(String.class);\n\t\t\t\tObject value;\n\t\t\t\tif(isString) {\n\t\t\t\t\tvalue = converRuleValue(dataRule.getRuleValue());\n\t\t\t\t}else {\n\t\t\t\t\tvalue = NumberUtils.parseNumber(dataRule.getRuleValue(),propType);\n\t\t\t\t}\n\t\t\t\tString filedSql = SqlConcatUtil.getSingleSqlByRule(rule, oConvertUtils.camelToUnderline(column), value,isString);\n\t\t\t\tsb.append(sqlAnd+filedSql);\n\t\t\t}\n\t\t}\n\t\tlog.info(\"query auth sql is:\"+sb.toString());\n\t\treturn sb.toString();\n\t}\n\t\n\t/**\n\t  * \u6839\u636e\u6743\u9650\u76f8\u5173\u914d\u7f6e \u7ec4\u88c5mp\u9700\u8981\u7684\u6743\u9650\n\t * @param queryWrapper\n\t * @param clazz\n\t * @return\n\t */\n\tpublic static void installAuthMplus(QueryWrapper<?> queryWrapper,Class<?> clazz) {\n\t\t//\u6743\u9650\u67e5\u8be2\n\t\tMap<String,SysPermissionDataRuleModel> ruleMap = getRuleMap();\n\t\tPropertyDescriptor[] origDescriptors = PropertyUtils.getPropertyDescriptors(clazz);\n\t\tfor (String c : ruleMap.keySet()) {\n\t\t\tif(oConvertUtils.isNotEmpty(c) && c.startsWith(SQL_RULES_COLUMN)){\n\t\t\t\tqueryWrapper.and(i ->i.apply(getSqlRuleValue(ruleMap.get(c).getRuleValue())));\n\t\t\t}\n\t\t}\n\t\tString name, column;\n\t\tfor (int i = 0; i < origDescriptors.length; i++) {\n\t\t\tname = origDescriptors[i].getName();\n\t\t\tif (judgedIsUselessField(name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcolumn = ReflectHelper.getTableFieldName(clazz, name);\n\t\t\tif(column==null){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(ruleMap.containsKey(name)) {\n\t\t\t\taddRuleToQueryWrapper(ruleMap.get(name), column, origDescriptors[i].getPropertyType(), queryWrapper);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * \u8f6c\u6362sql\u4e2d\u7684\u7cfb\u7edf\u53d8\u91cf\n\t * @param sql\n\t * @return\n\t */\n\tpublic static String convertSystemVariables(String sql){\n\t\treturn getSqlRuleValue(sql);\n\t}\n\n\t/**\n\t * \u83b7\u53d6\u7cfb\u7edf\u6570\u636e\u5e93\u7c7b\u578b\n\t */\n\tprivate static String getDbType(){\n\t\treturn CommonUtils.getDatabaseType();\n\t}\n\n\t/**\n\t * mysql \u6a21\u7cca\u67e5\u8be2\u4e4b\u7279\u6b8a\u5b57\u7b26\u4e0b\u5212\u7ebf \uff08_\u3001\\\uff09\n\t *\n\t * @param value:\n\t * @Return: java.lang.String\n\t */\n\tprivate static String specialStrConvert(String value) {\n\t\tif (DataBaseConstant.DB_TYPE_MYSQL.equals(getDbType()) || DataBaseConstant.DB_TYPE_MARIADB.equals(getDbType())) {\n\t\t\tString[] specialStr = QueryGenerator.LIKE_MYSQL_SPECIAL_STRS.split(\",\");\n\t\t\tfor (String str : specialStr) {\n\t\t\t\tif (value.indexOf(str) !=-1) {\n\t\t\t\t\tvalue = value.replace(str, \"\\\\\" + str);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n}\n",
        "simple_context": "package org.jeecg.common.system.query;\n\nimport java.beans.PropertyDescriptor;\n\nimport java.io.UnsupportedEncodingException;\n\nimport java.lang.reflect.Field;\n\nimport java.math.BigDecimal;\n\nimport java.net.URLDecoder;\n\nimport java.text.ParseException;\n\nimport java.text.SimpleDateFormat;\n\nimport java.util;\n\nimport java.util.regex.Matcher;\n\nimport java.util.regex.Pattern;\n\nimport java.util.stream.Collectors;\n\nimport org.apache.commons.beanutils.PropertyUtils;\n\nimport org.jeecg.common.constant.CommonConstant;\n\nimport org.jeecg.common.constant.DataBaseConstant;\n\nimport org.jeecg.common.constant.SymbolConstant;\n\nimport org.jeecg.common.exception.JeecgBootException;\n\nimport org.jeecg.common.system.util.JeecgDataAutorUtils;\n\nimport org.jeecg.common.system.util.JwtUtil;\n\nimport org.jeecg.common.system.util.SqlConcatUtil;\n\nimport org.jeecg.common.system.vo.SysPermissionDataRuleModel;\n\nimport org.jeecg.common.util;\n\nimport org.springframework.util.NumberUtils;\n\nimport com.alibaba.fastjson.JSON;\n\nimport com.baomidou.mybatisplus.annotation.TableField;\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\n\nimport lombok.extern.slf4j.Slf4j;\n\npublic class QueryGenerator {\n    static public final String SQL_RULES_COLUMN;\n    static final private String BEGIN;\n    static final private String END;\n    static final private String MULTI;\n    static final private String STAR;\n    static final private String COMMA;\n    static public final String QUERY_COMMA_ESCAPE;\n    static final private String NOT_EQUAL;\n    static final private String QUERY_SEPARATE_KEYWORD;\n    static final private String SUPER_QUERY_PARAMS;\n    static final private String SUPER_QUERY_MATCH_TYPE;\n    static public final String SQL_SQ;\n    static final private String ORDER_COLUMN;\n    static final private String ORDER_TYPE;\n    static final private String ORDER_TYPE_ASC;\n    static public final String LIKE_MYSQL_SPECIAL_STRS;\n    static public final String YYYY_MM_DD;\n    static public final String TO_DATE;\n    static final private ThreadLocal<SimpleDateFormat> LOCAL;\n    static private SimpleDateFormat getTime();\n    static public QueryWrapper<T> initQueryWrapper(T searchObj, Map<String, String> parameterMap);\n    static private  installMplus(QueryWrapper<> queryWrapper, Object searchObj, Map<String, String> parameterMap);\n    static private  doIntervalQuery(QueryWrapper<> queryWrapper, Map<String, String> parameterMap, String type, String filedName, String columnName)throws ParseException;\n    static private  doMultiFieldsOrder(QueryWrapper<> queryWrapper, Map<String, String> parameterMap, Map<String, String> fieldColumnMap);\n    static private boolean allColumnExist(String columnStr, Set<String> allFields);\n    static private  doSuperQuery(QueryWrapper<> queryWrapper, Map<String, String> parameterMap, Map<String, String> fieldColumnMap);\n    static public QueryRuleEnum convert2Rule(Object value);\n    static private Object replaceValue(QueryRuleEnum rule, Object value);\n    static private  addQueryByRule(QueryWrapper<> queryWrapper, String name, String type, String value, QueryRuleEnum rule)throws ParseException;\n    static private Object parseByType(String value, String type, QueryRuleEnum rule)throws ParseException;\n    static private Date getDateQueryByRule(String value, QueryRuleEnum rule)throws ParseException;\n    static public  addEasyQuery(QueryWrapper<> queryWrapper, String name, QueryRuleEnum rule, Object value);\n    static private boolean judgedIsUselessField(String name);\n    static public Map<String, SysPermissionDataRuleModel> getRuleMap();\n    static private  addRuleToQueryWrapper(SysPermissionDataRuleModel dataRule, String name, Class propertyType, QueryWrapper<> queryWrapper);\n    static public String converRuleValue(String ruleValue);\n    static public String trimSingleQuote(String ruleValue);\n    static public String getSqlRuleValue(String sqlRule);\n    static public Set<String> getSqlRuleParams(String sql);\n    static public String getSingleQueryConditionSql(String field, String alias, Object value, boolean isString);\n    static public String installAuthJdbc(Class<> clazz);\n    static public  installAuthMplus(QueryWrapper<> queryWrapper, Class<> clazz);\n    static public String convertSystemVariables(String sql);\n    static private String getDbType();\n    static private String specialStrConvert(String value);\n}\n\n"
    },
    {
        "project_name": "jeecg-boot",
        "file_name": "JwtUtil.java",
        "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/util/JwtUtil.java",
        "execute_path": "jeecg-boot",
        "package": "org.jeecg.common.system.util",
        "docstring": "/**\n\t * \u6839\u636erequest\u4e2d\u7684token\u83b7\u53d6\u7528\u6237\u8d26\u53f7\n\t * \n\t * @param request\n\t * @return\n\t * @throws JeecgBootException\n\t */",
        "source_code": "\npublic static String getUserNameByToken(HttpServletRequest request) throws JeecgBootException {\n\tString accessToken = request.getHeader(\"X-Access-Token\");\n\tString username = getUsername(accessToken);\n\tif (oConvertUtils.isEmpty(username)) {\n\t\tthrow new JeecgBootException(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\");\n\t}\n\treturn username;\n}\n",
        "class_name": "JwtUtil",
        "method_name": "getUserNameByToken",
        "argument_name": [
            "HttpServletRequest request"
        ],
        "full_context": "package org.jeecg.common.system.util;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.JWTVerifier;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.exceptions.JWTDecodeException;\nimport com.auth0.jwt.interfaces.DecodedJWT;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.google.common.base.Joiner;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.Date;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.shiro.SecurityUtils;\nimport org.jeecg.common.api.vo.Result;\nimport org.jeecg.common.constant.CommonConstant;\nimport org.jeecg.common.constant.DataBaseConstant;\nimport org.jeecg.common.constant.SymbolConstant;\nimport org.jeecg.common.constant.TenantConstant;\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.jeecg.common.system.vo.LoginUser;\nimport org.jeecg.common.system.vo.SysUserCacheInfo;\nimport org.jeecg.common.util.DateUtils;\nimport org.jeecg.common.util.SpringContextUtils;\nimport org.jeecg.common.util.oConvertUtils;\n\n/**\n * @Author Scott\n * @Date 2018-07-12 14:23\n * @Desc JWT\u5de5\u5177\u7c7b\n **/\n@Slf4j\npublic class JwtUtil {\n\n\t/**Token\u6709\u6548\u671f\u4e3a7\u5929\uff08Token\u5728reids\u4e2d\u7f13\u5b58\u65f6\u95f4\u4e3a\u4e24\u500d\uff09*/\n\tpublic static final long EXPIRE_TIME = (7 * 12) * 60 * 60 * 1000;\n\tstatic final String WELL_NUMBER = SymbolConstant.WELL_NUMBER + SymbolConstant.LEFT_CURLY_BRACKET;\n\n    /**\n     *\n     * @param response\n     * @param code\n     * @param errorMsg\n     */\n    public static void responseError(ServletResponse response, Integer code, String errorMsg) {\n\t\tHttpServletResponse httpServletResponse = (HttpServletResponse) response;\n\t\t// issues/I4YH95\u6d4f\u89c8\u5668\u663e\u793a\u4e71\u7801\u95ee\u9898\n\t\thttpServletResponse.setHeader(\"Content-type\", \"text/html;charset=UTF-8\");\n        Result jsonResult = new Result(code, errorMsg);\n\t\tjsonResult.setSuccess(false);\n        OutputStream os = null;\n        try {\n            os = httpServletResponse.getOutputStream();\n\t\t\thttpServletResponse.setCharacterEncoding(\"UTF-8\");\n\t\t\thttpServletResponse.setStatus(code);\n            os.write(new ObjectMapper().writeValueAsString(jsonResult).getBytes(\"UTF-8\"));\n            os.flush();\n            os.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n\t/**\n\t * \u6821\u9a8ctoken\u662f\u5426\u6b63\u786e\n\t *\n\t * @param token  \u5bc6\u94a5\n\t * @param secret \u7528\u6237\u7684\u5bc6\u7801\n\t * @return \u662f\u5426\u6b63\u786e\n\t */\n\tpublic static boolean verify(String token, String username, String secret) {\n\t\ttry {\n\t\t\t// \u6839\u636e\u5bc6\u7801\u751f\u6210JWT\u6548\u9a8c\u5668\n\t\t\tAlgorithm algorithm = Algorithm.HMAC256(secret);\n\t\t\tJWTVerifier verifier = JWT.require(algorithm).withClaim(\"username\", username).build();\n\t\t\t// \u6548\u9a8cTOKEN\n\t\t\tDecodedJWT jwt = verifier.verify(token);\n\t\t\treturn true;\n\t\t} catch (Exception exception) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * \u83b7\u5f97token\u4e2d\u7684\u4fe1\u606f\u65e0\u9700secret\u89e3\u5bc6\u4e5f\u80fd\u83b7\u5f97\n\t *\n\t * @return token\u4e2d\u5305\u542b\u7684\u7528\u6237\u540d\n\t */\n\tpublic static String getUsername(String token) {\n\t\ttry {\n\t\t\tDecodedJWT jwt = JWT.decode(token);\n\t\t\treturn jwt.getClaim(\"username\").asString();\n\t\t} catch (JWTDecodeException e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * \u751f\u6210\u7b7e\u540d,5min\u540e\u8fc7\u671f\n\t *\n\t * @param username \u7528\u6237\u540d\n\t * @param secret   \u7528\u6237\u7684\u5bc6\u7801\n\t * @return \u52a0\u5bc6\u7684token\n\t */\n\tpublic static String sign(String username, String secret) {\n\t\tDate date = new Date(System.currentTimeMillis() + EXPIRE_TIME);\n\t\tAlgorithm algorithm = Algorithm.HMAC256(secret);\n\t\t// \u9644\u5e26username\u4fe1\u606f\n\t\treturn JWT.create().withClaim(\"username\", username).withExpiresAt(date).sign(algorithm);\n\n\t}\n\n\t/**\n\t * \u6839\u636erequest\u4e2d\u7684token\u83b7\u53d6\u7528\u6237\u8d26\u53f7\n\t * \n\t * @param request\n\t * @return\n\t * @throws JeecgBootException\n\t */\n\tpublic static String getUserNameByToken(HttpServletRequest request) throws JeecgBootException {\n\t\tString accessToken = request.getHeader(\"X-Access-Token\");\n\t\tString username = getUsername(accessToken);\n\t\tif (oConvertUtils.isEmpty(username)) {\n\t\t\tthrow new JeecgBootException(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\");\n\t\t}\n\t\treturn username;\n\t}\n\t\n\t/**\n\t  *  \u4ecesession\u4e2d\u83b7\u53d6\u53d8\u91cf\n\t * @param key\n\t * @return\n\t */\n\tpublic static String getSessionData(String key) {\n\t\t//${myVar}%\n\t\t//\u5f97\u5230${} \u540e\u9762\u7684\u503c\n\t\tString moshi = \"\";\n\t\tString wellNumber = WELL_NUMBER;\n\n\t\tif(key.indexOf(SymbolConstant.RIGHT_CURLY_BRACKET)!=-1){\n\t\t\t moshi = key.substring(key.indexOf(\"}\")+1);\n\t\t}\n\t\tString returnValue = null;\n\t\tif (key.contains(wellNumber)) {\n\t\t\tkey = key.substring(2,key.indexOf(\"}\"));\n\t\t}\n\t\tif (oConvertUtils.isNotEmpty(key)) {\n\t\t\tHttpSession session = SpringContextUtils.getHttpServletRequest().getSession();\n\t\t\treturnValue = (String) session.getAttribute(key);\n\t\t}\n\t\t//\u7ed3\u679c\u52a0\u4e0a${} \u540e\u9762\u7684\u503c\n\t\tif(returnValue!=null){returnValue = returnValue + moshi;}\n\t\treturn returnValue;\n\t}\n\t\n\t/**\n\t  * \u4ece\u5f53\u524d\u7528\u6237\u4e2d\u83b7\u53d6\u53d8\u91cf\n\t * @param key\n\t * @param user\n\t * @return\n\t */\n\tpublic static String getUserSystemData(String key, SysUserCacheInfo user) {\n\t\t//1.\u4f18\u5148\u83b7\u53d6 SysUserCacheInfo\n\t\tif(user==null) {\n\t\t\ttry {\n\t\t\t\tuser = JeecgDataAutorUtils.loadUserInfo();\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.warn(\"\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u5f02\u5e38\uff1a\" + e.getMessage());\n\t\t\t}\n\t\t}\n\t\t//2.\u901a\u8fc7shiro\u83b7\u53d6\u767b\u5f55\u7528\u6237\u4fe1\u606f\n\t\tLoginUser sysUser = null;\n\t\ttry {\n\t\t\tsysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n\t\t} catch (Exception e) {\n\t\t\tlog.warn(\"SecurityUtils.getSubject() \u83b7\u53d6\u7528\u6237\u4fe1\u606f\u5f02\u5e38\uff1a\" + e.getMessage());\n\t\t}\n\n\t\t//#{sys_user_code}%\n\t\tString moshi = \"\";\n        String wellNumber = WELL_NUMBER;\n\t\tif(key.indexOf(SymbolConstant.RIGHT_CURLY_BRACKET)!=-1){\n\t\t\t moshi = key.substring(key.indexOf(\"}\")+1);\n\t\t}\n\t\tString returnValue = null;\n\t\t//\u9488\u5bf9\u7279\u6b8a\u6807\u793a\u5904\u7406#{sysOrgCode}\uff0c\u5224\u65ad\u66ff\u6362\n\t\tif (key.contains(wellNumber)) {\n\t\t\tkey = key.substring(2,key.indexOf(\"}\"));\n\t\t} else {\n\t\t\tkey = key;\n\t\t}\n\t\t//\u66ff\u6362\u4e3a\u5f53\u524d\u7cfb\u7edf\u65f6\u95f4(\u5e74\u6708\u65e5)\n\t\tif (key.equals(DataBaseConstant.SYS_DATE)|| key.toLowerCase().equals(DataBaseConstant.SYS_DATE_TABLE)) {\n\t\t\treturnValue = DateUtils.formatDate();\n\t\t}\n\t\t//\u66ff\u6362\u4e3a\u5f53\u524d\u7cfb\u7edf\u65f6\u95f4\uff08\u5e74\u6708\u65e5\u65f6\u5206\u79d2\uff09\n\t\telse if (key.equals(DataBaseConstant.SYS_TIME)|| key.toLowerCase().equals(DataBaseConstant.SYS_TIME_TABLE)) {\n\t\t\treturnValue = DateUtils.now();\n\t\t}\n\t\t//\u6d41\u7a0b\u72b6\u6001\u9ed8\u8ba4\u503c\uff08\u9ed8\u8ba4\u672a\u53d1\u8d77\uff09\n\t\telse if (key.equals(DataBaseConstant.BPM_STATUS)|| key.toLowerCase().equals(DataBaseConstant.BPM_STATUS_TABLE)) {\n\t\t\treturnValue = \"1\";\n\t\t}\n\n\t\t//\u540e\u53f0\u4efb\u52a1\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u5f02\u5e38\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u4e2d\u65ad\n\t\tif(sysUser==null && user==null){\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t//\u66ff\u6362\u4e3a\u7cfb\u7edf\u767b\u5f55\u7528\u6237\u5e10\u53f7\n\t\tif (key.equals(DataBaseConstant.SYS_USER_CODE)|| key.toLowerCase().equals(DataBaseConstant.SYS_USER_CODE_TABLE)) {\n\t\t\tif(user==null) {\n\t\t\t\treturnValue = sysUser.getUsername();\n\t\t\t}else {\n\t\t\t\treturnValue = user.getSysUserCode();\n\t\t\t}\n\t\t}\n\t\t//\u66ff\u6362\u4e3a\u7cfb\u7edf\u767b\u5f55\u7528\u6237\u771f\u5b9e\u540d\u5b57\n\t\telse if (key.equals(DataBaseConstant.SYS_USER_NAME)|| key.toLowerCase().equals(DataBaseConstant.SYS_USER_NAME_TABLE)) {\n\t\t\tif(user==null) {\n\t\t\t\treturnValue = sysUser.getRealname();\n\t\t\t}else {\n\t\t\t\treturnValue = user.getSysUserName();\n\t\t\t}\n\t\t}\n\t\t\n\t\t//\u66ff\u6362\u4e3a\u7cfb\u7edf\u7528\u6237\u767b\u5f55\u6240\u4f7f\u7528\u7684\u673a\u6784\u7f16\u7801\n\t\telse if (key.equals(DataBaseConstant.SYS_ORG_CODE)|| key.toLowerCase().equals(DataBaseConstant.SYS_ORG_CODE_TABLE)) {\n\t\t\tif(user==null) {\n\t\t\t\treturnValue = sysUser.getOrgCode();\n\t\t\t}else {\n\t\t\t\treturnValue = user.getSysOrgCode();\n\t\t\t}\n\t\t}\n\t\t//\u66ff\u6362\u4e3a\u7cfb\u7edf\u7528\u6237\u6240\u62e5\u6709\u7684\u6240\u6709\u673a\u6784\u7f16\u7801\n\t\telse if (key.equals(DataBaseConstant.SYS_MULTI_ORG_CODE)|| key.toLowerCase().equals(DataBaseConstant.SYS_MULTI_ORG_CODE_TABLE)) {\n\t\t\tif(user==null){\n\t\t\t\t//TODO \u6682\u65f6\u4f7f\u7528\u7528\u6237\u767b\u5f55\u90e8\u95e8\uff0c\u5b58\u5728\u903b\u8f91\u7f3a\u9677\uff0c\u4e0d\u662f\u7528\u6237\u6240\u62e5\u6709\u7684\u90e8\u95e8\n\t\t\t\treturnValue = sysUser.getOrgCode();\n\t\t\t}else{\n\t\t\t\tif(user.isOneDepart()) {\n\t\t\t\t\treturnValue = user.getSysMultiOrgCode().get(0);\n\t\t\t\t}else {\n\t\t\t\t\treturnValue = Joiner.on(\",\").join(user.getSysMultiOrgCode());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//update-begin-author:taoyan date:20210330 for:\u591a\u79df\u6237ID\u4f5c\u4e3a\u7cfb\u7edf\u53d8\u91cf\n\t\telse if (key.equals(TenantConstant.TENANT_ID) || key.toLowerCase().equals(TenantConstant.TENANT_ID_TABLE)){\n\t\t\ttry {\n\t\t\t\treturnValue = SpringContextUtils.getHttpServletRequest().getHeader(CommonConstant.TENANT_ID);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.warn(\"\u83b7\u53d6\u7cfb\u7edf\u79df\u6237\u5f02\u5e38\uff1a\" + e.getMessage());\n\t\t\t}\n\t\t}\n\t\t//update-end-author:taoyan date:20210330 for:\u591a\u79df\u6237ID\u4f5c\u4e3a\u7cfb\u7edf\u53d8\u91cf\n\t\tif(returnValue!=null){returnValue = returnValue + moshi;}\n\t\treturn returnValue;\n\t}\n\t\n//\tpublic static void main(String[] args) {\n//\t\t String token = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NjUzMzY1MTMsInVzZXJuYW1lIjoiYWRtaW4ifQ.xjhud_tWCNYBOg_aRlMgOdlZoWFFKB_givNElHNw3X0\";\n//\t\t System.out.println(JwtUtil.getUsername(token));\n//\t}\n}\n",
        "simple_context": "package org.jeecg.common.system.util;\n\nimport com.auth0.jwt.JWT;\n\nimport com.auth0.jwt.JWTVerifier;\n\nimport com.auth0.jwt.algorithms.Algorithm;\n\nimport com.auth0.jwt.exceptions.JWTDecodeException;\n\nimport com.auth0.jwt.interfaces.DecodedJWT;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport com.google.common.base.Joiner;\n\nimport java.io.IOException;\n\nimport java.io.OutputStream;\n\nimport java.util.Date;\n\nimport javax.servlet.ServletResponse;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport javax.servlet.http.HttpSession;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.apache.shiro.SecurityUtils;\n\nimport org.jeecg.common.api.vo.Result;\n\nimport org.jeecg.common.constant.CommonConstant;\n\nimport org.jeecg.common.constant.DataBaseConstant;\n\nimport org.jeecg.common.constant.SymbolConstant;\n\nimport org.jeecg.common.constant.TenantConstant;\n\nimport org.jeecg.common.exception.JeecgBootException;\n\nimport org.jeecg.common.system.vo.LoginUser;\n\nimport org.jeecg.common.system.vo.SysUserCacheInfo;\n\nimport org.jeecg.common.util.DateUtils;\n\nimport org.jeecg.common.util.SpringContextUtils;\n\nimport org.jeecg.common.util.oConvertUtils;\n\npublic class JwtUtil {\n    static public final long EXPIRE_TIME;\n    static final String WELL_NUMBER;\n    static public  responseError(ServletResponse response, Integer code, String errorMsg);\n    static public boolean verify(String token, String username, String secret);\n    static public String getUsername(String token);\n    static public String sign(String username, String secret);\n    static public String getUserNameByToken(HttpServletRequest request)throws JeecgBootException;\n    static public String getSessionData(String key);\n    static public String getUserSystemData(String key, SysUserCacheInfo user);\n}\n\n"
    },
    {
        "project_name": "jeecg-boot",
        "file_name": "AesEncryptUtil.java",
        "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/encryption/AesEncryptUtil.java",
        "execute_path": "jeecg-boot",
        "package": "org.jeecg.common.util.encryption",
        "docstring": "/**\n     * \u89e3\u5bc6\u65b9\u6cd5\n     * @param data \u8981\u89e3\u5bc6\u7684\u6570\u636e\n     * @param key  \u89e3\u5bc6key\n     * @param iv \u89e3\u5bc6iv\n     * @return \u89e3\u5bc6\u7684\u7ed3\u679c\n     * @throws Exception\n     */",
        "source_code": "\npublic static String desEncrypt(String data, String key, String iv) throws Exception {\n    //update-begin-author:taoyan date:2022-5-23 for:VUEN-1084 \u3010vue3\u3011online\u8868\u5355\u6d4b\u8bd5\u53d1\u73b0\u7684\u65b0\u95ee\u9898 6\u3001\u89e3\u5bc6\u62a5\u9519 ---\u89e3\u7801\u5931\u8d25\u5e94\u8be5\u628a\u5f02\u5e38\u629b\u51fa\u53bb\uff0c\u5728\u5916\u9762\u5904\u7406\n    byte[] encrypted1 = Base64.decode(data);\n\n    Cipher cipher = Cipher.getInstance(\"AES/CBC/NoPadding\");\n    SecretKeySpec keyspec = new SecretKeySpec(key.getBytes(), \"AES\");\n    IvParameterSpec ivspec = new IvParameterSpec(iv.getBytes());\n\n    cipher.init(Cipher.DECRYPT_MODE, keyspec, ivspec);\n\n    byte[] original = cipher.doFinal(encrypted1);\n    String originalString = new String(original);\n    //\u52a0\u5bc6\u89e3\u7801\u540e\u7684\u5b57\u7b26\u4e32\u4f1a\u51fa\u73b0\\u0000\n    return originalString.replaceAll(\"\\\\u0000\", \"\");\n    //update-end-author:taoyan date:2022-5-23 for:VUEN-1084 \u3010vue3\u3011online\u8868\u5355\u6d4b\u8bd5\u53d1\u73b0\u7684\u65b0\u95ee\u9898 6\u3001\u89e3\u5bc6\u62a5\u9519 ---\u89e3\u7801\u5931\u8d25\u5e94\u8be5\u628a\u5f02\u5e38\u629b\u51fa\u53bb\uff0c\u5728\u5916\u9762\u5904\u7406\n}\n",
        "class_name": "AesEncryptUtil",
        "method_name": "desEncrypt",
        "argument_name": [
            "String data",
            "String key",
            "String iv"
        ],
        "full_context": "package org.jeecg.common.util.encryption;\n\nimport org.apache.shiro.codec.Base64;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\n/**\n * @Description: AES \u52a0\u5bc6\n * @author: jeecg-boot\n * @date: 2022/3/30 11:48\n */\npublic class AesEncryptUtil {\n\n    /**\n     * \u4f7f\u7528AES-128-CBC\u52a0\u5bc6\u6a21\u5f0f key\u548civ\u53ef\u4ee5\u76f8\u540c\n     */\n    private static String KEY = EncryptedString.key;\n    private static String IV = EncryptedString.iv;\n\n    /**\n     * \u52a0\u5bc6\u65b9\u6cd5\n     * @param data  \u8981\u52a0\u5bc6\u7684\u6570\u636e\n     * @param key \u52a0\u5bc6key\n     * @param iv \u52a0\u5bc6iv\n     * @return \u52a0\u5bc6\u7684\u7ed3\u679c\n     * @throws Exception\n     */\n    public static String encrypt(String data, String key, String iv) throws Exception {\n        try {\n\n            //\"\u7b97\u6cd5/\u6a21\u5f0f/\u8865\u7801\u65b9\u5f0f\"NoPadding PkcsPadding\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/NoPadding\");\n            int blockSize = cipher.getBlockSize();\n\n            byte[] dataBytes = data.getBytes();\n            int plaintextLength = dataBytes.length;\n            if (plaintextLength % blockSize != 0) {\n                plaintextLength = plaintextLength + (blockSize - (plaintextLength % blockSize));\n            }\n\n            byte[] plaintext = new byte[plaintextLength];\n            System.arraycopy(dataBytes, 0, plaintext, 0, dataBytes.length);\n\n            SecretKeySpec keyspec = new SecretKeySpec(key.getBytes(), \"AES\");\n            IvParameterSpec ivspec = new IvParameterSpec(iv.getBytes());\n\n            cipher.init(Cipher.ENCRYPT_MODE, keyspec, ivspec);\n            byte[] encrypted = cipher.doFinal(plaintext);\n\n            return Base64.encodeToString(encrypted);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    /**\n     * \u89e3\u5bc6\u65b9\u6cd5\n     * @param data \u8981\u89e3\u5bc6\u7684\u6570\u636e\n     * @param key  \u89e3\u5bc6key\n     * @param iv \u89e3\u5bc6iv\n     * @return \u89e3\u5bc6\u7684\u7ed3\u679c\n     * @throws Exception\n     */\n    public static String desEncrypt(String data, String key, String iv) throws Exception {\n        //update-begin-author:taoyan date:2022-5-23 for:VUEN-1084 \u3010vue3\u3011online\u8868\u5355\u6d4b\u8bd5\u53d1\u73b0\u7684\u65b0\u95ee\u9898 6\u3001\u89e3\u5bc6\u62a5\u9519 ---\u89e3\u7801\u5931\u8d25\u5e94\u8be5\u628a\u5f02\u5e38\u629b\u51fa\u53bb\uff0c\u5728\u5916\u9762\u5904\u7406\n        byte[] encrypted1 = Base64.decode(data);\n\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/NoPadding\");\n        SecretKeySpec keyspec = new SecretKeySpec(key.getBytes(), \"AES\");\n        IvParameterSpec ivspec = new IvParameterSpec(iv.getBytes());\n\n        cipher.init(Cipher.DECRYPT_MODE, keyspec, ivspec);\n\n        byte[] original = cipher.doFinal(encrypted1);\n        String originalString = new String(original);\n        //\u52a0\u5bc6\u89e3\u7801\u540e\u7684\u5b57\u7b26\u4e32\u4f1a\u51fa\u73b0\\u0000\n        return originalString.replaceAll(\"\\\\u0000\", \"\");\n        //update-end-author:taoyan date:2022-5-23 for:VUEN-1084 \u3010vue3\u3011online\u8868\u5355\u6d4b\u8bd5\u53d1\u73b0\u7684\u65b0\u95ee\u9898 6\u3001\u89e3\u5bc6\u62a5\u9519 ---\u89e3\u7801\u5931\u8d25\u5e94\u8be5\u628a\u5f02\u5e38\u629b\u51fa\u53bb\uff0c\u5728\u5916\u9762\u5904\u7406\n    }\n\n    /**\n     * \u4f7f\u7528\u9ed8\u8ba4\u7684key\u548civ\u52a0\u5bc6\n     * @param data\n     * @return\n     * @throws Exception\n     */\n    public static String encrypt(String data) throws Exception {\n        return encrypt(data, KEY, IV);\n    }\n\n    /**\n     * \u4f7f\u7528\u9ed8\u8ba4\u7684key\u548civ\u89e3\u5bc6\n     * @param data\n     * @return\n     * @throws Exception\n     */\n    public static String desEncrypt(String data) throws Exception {\n        return desEncrypt(data, KEY, IV);\n    }\n\n\n\n//    /**\n//     * \u6d4b\u8bd5\n//     */\n//    public static void main(String args[]) throws Exception {\n//        String test1 = \"sa\";\n//        String test =new String(test1.getBytes(),\"UTF-8\");\n//        String data = null;\n//        String key =  KEY;\n//        String iv = IV;\n//        // /g2wzfqvMOeazgtsUVbq1kmJawROa6mcRAzwG1/GeJ4=\n//        data = encrypt(test, key, iv);\n//        System.out.println(\"\u6570\u636e\uff1a\"+test);\n//        System.out.println(\"\u52a0\u5bc6\uff1a\"+data);\n//        String jiemi =desEncrypt(data, key, iv).trim();\n//        System.out.println(\"\u89e3\u5bc6\uff1a\"+jiemi);\n//    }\n\n}\n",
        "simple_context": "package org.jeecg.common.util.encryption;\n\nimport org.apache.shiro.codec.Base64;\n\nimport javax.crypto.Cipher;\n\nimport javax.crypto.spec.IvParameterSpec;\n\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AesEncryptUtil {\n    static private String KEY;\n    static private String IV;\n    static public String encrypt(String data, String key, String iv)throws Exception;\n    static public String desEncrypt(String data, String key, String iv)throws Exception;\n    static public String encrypt(String data)throws Exception;\n    static public String desEncrypt(String data)throws Exception;\n}\n\n"
    },
    {
        "project_name": "jeecg-boot",
        "file_name": "SsrfFileTypeFilter.java",
        "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/filter/SsrfFileTypeFilter.java",
        "execute_path": "jeecg-boot",
        "package": "org.jeecg.common.util.filter",
        "docstring": "/**\n     * \u83b7\u5f97\u6587\u4ef6\u5934\u90e8\u5b57\u7b26\u4e32\n     *\n     * @param src\n     * @return\n     */",
        "source_code": "\nprivate static String bytesToHexString(byte[] src) {\n    StringBuilder stringBuilder = new StringBuilder();\n    if (src == null || src.length <= 0) {\n        return null;\n    }\n    for (int i = 0; i < src.length; i++) {\n        int v = src[i] & 0xFF;\n        String hv = Integer.toHexString(v);\n        if (hv.length() < 2) {\n            stringBuilder.append(0);\n        }\n        stringBuilder.append(hv);\n    }\n    return stringBuilder.toString();\n}\n",
        "class_name": "SsrfFileTypeFilter",
        "method_name": "bytesToHexString",
        "argument_name": [
            "byte[] src"
        ],
        "full_context": "package org.jeecg.common.util.filter;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\n\n/**\n * @Description: \u6821\u9a8c\u6587\u4ef6\u654f\u611f\u540e\u7f00\n * @author: lsq\n * @date: 2023\u5e7409\u670812\u65e5 15:29\n */\n@Slf4j\npublic class SsrfFileTypeFilter {\n\n    /**\n     * \u5141\u8bb8\u64cd\u4f5c\u6587\u4ef6\u7c7b\u578b\u767d\u540d\u5355\n     */\n    private final static List<String> FILE_TYPE_WHITE_LIST = new ArrayList<>();\n    /**\u521d\u59cb\u5316\u6587\u4ef6\u5934\u7c7b\u578b\uff0c\u4e0d\u591f\u7684\u81ea\u884c\u8865\u5145*/\n    final static HashMap<String, String> FILE_TYPE_MAP = new HashMap<>();\n    static {\n        //\u56fe\u7247\u6587\u4ef6\n        FILE_TYPE_WHITE_LIST.add(\"jpg\");\n        FILE_TYPE_WHITE_LIST.add(\"jpeg\");\n        FILE_TYPE_WHITE_LIST.add(\"png\");\n        FILE_TYPE_WHITE_LIST.add(\"gif\");\n        FILE_TYPE_WHITE_LIST.add(\"bmp\");\n        FILE_TYPE_WHITE_LIST.add(\"svg\");\n        FILE_TYPE_WHITE_LIST.add(\"ico\");\n\n        //\u6587\u672c\u6587\u4ef6\n        FILE_TYPE_WHITE_LIST.add(\"txt\");\n        FILE_TYPE_WHITE_LIST.add(\"doc\");\n        FILE_TYPE_WHITE_LIST.add(\"docx\");\n        FILE_TYPE_WHITE_LIST.add(\"pdf\");\n        FILE_TYPE_WHITE_LIST.add(\"csv\");\n//        FILE_TYPE_WHITE_LIST.add(\"xml\");\n\n        //\u97f3\u89c6\u9891\u6587\u4ef6\n        FILE_TYPE_WHITE_LIST.add(\"mp4\");\n        FILE_TYPE_WHITE_LIST.add(\"avi\");\n        FILE_TYPE_WHITE_LIST.add(\"mov\");\n        FILE_TYPE_WHITE_LIST.add(\"wmv\");\n        FILE_TYPE_WHITE_LIST.add(\"mp3\");\n        FILE_TYPE_WHITE_LIST.add(\"wav\");\n\n        //\u8868\u683c\u6587\u4ef6\n        FILE_TYPE_WHITE_LIST.add(\"xls\");\n        FILE_TYPE_WHITE_LIST.add(\"xlsx\");\n\n        //\u538b\u7f29\u6587\u4ef6\n        FILE_TYPE_WHITE_LIST.add(\"zip\");\n        FILE_TYPE_WHITE_LIST.add(\"rar\");\n        FILE_TYPE_WHITE_LIST.add(\"7z\");\n        FILE_TYPE_WHITE_LIST.add(\"tar\");\n\n        //\u8bbe\u7f6e\u7981\u6b62\u6587\u4ef6\u7684\u5934\u90e8\u6807\u8bb0\n        FILE_TYPE_MAP.put(\"3c25402070616765206c\", \"jsp\");\n        FILE_TYPE_MAP.put(\"3c3f7068700a0a2f2a2a0a202a205048\", \"php\");\n        FILE_TYPE_MAP.put(\"cafebabe0000002e0041\", \"class\");\n        FILE_TYPE_MAP.put(\"494e5345525420494e54\", \"sql\");\n       /* fileTypeMap.put(\"ffd8ffe000104a464946\", \"jpg\");\n        fileTypeMap.put(\"89504e470d0a1a0a0000\", \"png\");\n        fileTypeMap.put(\"47494638396126026f01\", \"gif\");\n        fileTypeMap.put(\"49492a00227105008037\", \"tif\");\n        fileTypeMap.put(\"424d228c010000000000\", \"bmp\");\n        fileTypeMap.put(\"424d8240090000000000\", \"bmp\");\n        fileTypeMap.put(\"424d8e1b030000000000\", \"bmp\");\n        fileTypeMap.put(\"41433130313500000000\", \"dwg\");\n        fileTypeMap.put(\"3c21444f435459504520\", \"html\");\n        fileTypeMap.put(\"3c21646f637479706520\", \"htm\");\n        fileTypeMap.put(\"48544d4c207b0d0a0942\", \"css\");\n        fileTypeMap.put(\"696b2e71623d696b2e71\", \"js\");\n        fileTypeMap.put(\"7b5c727466315c616e73\", \"rtf\");\n        fileTypeMap.put(\"38425053000100000000\", \"psd\");\n        fileTypeMap.put(\"46726f6d3a203d3f6762\", \"eml\");\n        fileTypeMap.put(\"d0cf11e0a1b11ae10000\", \"doc\");\n        fileTypeMap.put(\"5374616E64617264204A\", \"mdb\");\n        fileTypeMap.put(\"252150532D41646F6265\", \"ps\");\n        fileTypeMap.put(\"255044462d312e350d0a\", \"pdf\");\n        fileTypeMap.put(\"2e524d46000000120001\", \"rmvb\");\n        fileTypeMap.put(\"464c5601050000000900\", \"flv\");\n        fileTypeMap.put(\"00000020667479706d70\", \"mp4\");\n        fileTypeMap.put(\"49443303000000002176\", \"mp3\");\n        fileTypeMap.put(\"000001ba210001000180\", \"mpg\");\n        fileTypeMap.put(\"3026b2758e66cf11a6d9\", \"wmv\");\n        fileTypeMap.put(\"52494646e27807005741\", \"wav\");\n        fileTypeMap.put(\"52494646d07d60074156\", \"avi\");\n        fileTypeMap.put(\"4d546864000000060001\", \"mid\");\n        fileTypeMap.put(\"504b0304140000000800\", \"zip\");\n        fileTypeMap.put(\"526172211a0700cf9073\", \"rar\");\n        fileTypeMap.put(\"235468697320636f6e66\", \"ini\");\n        fileTypeMap.put(\"504b03040a0000000000\", \"jar\");\n        fileTypeMap.put(\"4d5a9000030000000400\", \"exe\");\n        fileTypeMap.put(\"3c25402070616765206c\", \"jsp\");\n        fileTypeMap.put(\"4d616e69666573742d56\", \"mf\");\n        fileTypeMap.put(\"3c3f786d6c2076657273\", \"xml\");\n        fileTypeMap.put(\"494e5345525420494e54\", \"sql\");\n        fileTypeMap.put(\"7061636b616765207765\", \"java\");\n        fileTypeMap.put(\"406563686f206f66660d\", \"bat\");\n        fileTypeMap.put(\"1f8b0800000000000000\", \"gz\");\n        fileTypeMap.put(\"6c6f67346a2e726f6f74\", \"properties\");\n        fileTypeMap.put(\"cafebabe0000002e0041\", \"class\");\n        fileTypeMap.put(\"49545346030000006000\", \"chm\");\n        fileTypeMap.put(\"04000000010000001300\", \"mxp\");\n        fileTypeMap.put(\"504b0304140006000800\", \"docx\");\n        fileTypeMap.put(\"6431303a637265617465\", \"torrent\");\n        fileTypeMap.put(\"6D6F6F76\", \"mov\");\n        fileTypeMap.put(\"FF575043\", \"wpd\");\n        fileTypeMap.put(\"CFAD12FEC5FD746F\", \"dbx\");\n        fileTypeMap.put(\"2142444E\", \"pst\");\n        fileTypeMap.put(\"AC9EBD8F\", \"qdf\");\n        fileTypeMap.put(\"E3828596\", \"pwl\");\n        fileTypeMap.put(\"2E7261FD\", \"ram\");*/\n    }\n\n    /**\n     * @param fileName\n     * @return String\n     * @description \u901a\u8fc7\u6587\u4ef6\u540e\u7f00\u540d\u83b7\u53d6\u6587\u4ef6\u7c7b\u578b\n     */\n    private static String getFileTypeBySuffix(String fileName) {\n        return fileName.substring(fileName.lastIndexOf(\".\") + 1, fileName.length());\n    }\n\n\n    /**\n     * \u4e0b\u8f7d\u6587\u4ef6\u7c7b\u578b\u8fc7\u6ee4\n     *\n     * @param filePath\n     */\n    public static void checkDownloadFileType(String filePath) throws IOException {\n        //\u6587\u4ef6\u540e\u7f00\n        String suffix = getFileTypeBySuffix(filePath);\n        log.info(\"suffix:{}\", suffix);\n        boolean isAllowExtension = FILE_TYPE_WHITE_LIST.contains(suffix.toLowerCase());\n        //\u662f\u5426\u5141\u8bb8\u4e0b\u8f7d\u7684\u6587\u4ef6\n        if (!isAllowExtension) {\n            throw new IOException(\"\u4e0b\u8f7d\u5931\u8d25\uff0c\u5b58\u5728\u975e\u6cd5\u6587\u4ef6\u7c7b\u578b\uff1a\" + suffix);\n        }\n    }\n\n\n    /**\n     * \u4e0a\u4f20\u6587\u4ef6\u7c7b\u578b\u8fc7\u6ee4\n     *\n     * @param file\n     */\n    public static void checkUploadFileType(MultipartFile file) throws Exception {\n        //\u83b7\u53d6\u6587\u4ef6\u771f\u662f\u540e\u7f00\n        String suffix = getFileType(file);\n\n        log.info(\"suffix:{}\", suffix);\n        boolean isAllowExtension = FILE_TYPE_WHITE_LIST.contains(suffix.toLowerCase());\n        //\u662f\u5426\u5141\u8bb8\u4e0b\u8f7d\u7684\u6587\u4ef6\n        if (!isAllowExtension) {\n            throw new Exception(\"\u4e0a\u4f20\u5931\u8d25\uff0c\u5b58\u5728\u975e\u6cd5\u6587\u4ef6\u7c7b\u578b\uff1a\" + suffix);\n        }\n    }\n\n    /**\n     * \u901a\u8fc7\u8bfb\u53d6\u6587\u4ef6\u5934\u90e8\u83b7\u5f97\u6587\u4ef6\u7c7b\u578b\n     *\n     * @param file\n     * @return \u6587\u4ef6\u7c7b\u578b\n     * @throws Exception\n     */\n\n    private static String getFileType(MultipartFile file) throws Exception {\n        //update-begin-author:liusq date:20230404 for: [issue/4672]\u65b9\u6cd5\u9020\u6210\u7684\u6587\u4ef6\u88ab\u5360\u7528\uff0c\u6ce8\u91ca\u6389\u6b64\u65b9\u6cd5tomcat\u5c31\u80fd\u81ea\u52a8\u6e05\u7406\u6389\u4e34\u65f6\u6587\u4ef6\n        String fileExtendName = null;\n        InputStream is = null;\n        try {\n            //is = new FileInputStream(file);\n            is = file.getInputStream();\n            byte[] b = new byte[10];\n            is.read(b, 0, b.length);\n            String fileTypeHex = String.valueOf(bytesToHexString(b));\n            Iterator<String> keyIter = FILE_TYPE_MAP.keySet().iterator();\n            while (keyIter.hasNext()) {\n                String key = keyIter.next();\n                // \u9a8c\u8bc1\u524d5\u4e2a\u5b57\u7b26\u6bd4\u8f83\n                if (key.toLowerCase().startsWith(fileTypeHex.toLowerCase().substring(0, 5))\n                        || fileTypeHex.toLowerCase().substring(0, 5).startsWith(key.toLowerCase())) {\n                    fileExtendName = FILE_TYPE_MAP.get(key);\n                    break;\n                }\n            }\n            log.info(\"-----\u83b7\u53d6\u5230\u7684\u6307\u5b9a\u6587\u4ef6\u7c7b\u578b------\"+fileExtendName);\n            // \u5982\u679c\u4e0d\u662f\u4e0a\u8ff0\u7c7b\u578b\uff0c\u5219\u5224\u65ad\u6269\u5c55\u540d\n            if (StringUtils.isBlank(fileExtendName)) {\n                String fileName = file.getOriginalFilename();\n                // \u5982\u679c\u65e0\u6269\u5c55\u540d\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u4e32\n                if (-1 == fileName.indexOf(\".\")) {\n                    return \"\";\n                }\n                // \u5982\u679c\u6709\u6269\u5c55\u540d\uff0c\u5219\u8fd4\u56de\u6269\u5c55\u540d\n                return getFileTypeBySuffix(fileName);\n            }\n            log.info(\"-----\u6700\u7d42\u7684\u6587\u4ef6\u7c7b\u578b------\"+fileExtendName);\n            is.close();\n            return fileExtendName;\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n            return \"\";\n        }finally {\n            if (is != null) {\n                is.close();\n            }\n        }\n        //update-end-author:liusq date:20230404 for: [issue/4672]\u65b9\u6cd5\u9020\u6210\u7684\u6587\u4ef6\u88ab\u5360\u7528\uff0c\u6ce8\u91ca\u6389\u6b64\u65b9\u6cd5tomcat\u5c31\u80fd\u81ea\u52a8\u6e05\u7406\u6389\u4e34\u65f6\u6587\u4ef6\n    }\n\n    /**\n     * \u83b7\u5f97\u6587\u4ef6\u5934\u90e8\u5b57\u7b26\u4e32\n     *\n     * @param src\n     * @return\n     */\n    private static String bytesToHexString(byte[] src) {\n        StringBuilder stringBuilder = new StringBuilder();\n        if (src == null || src.length <= 0) {\n            return null;\n        }\n        for (int i = 0; i < src.length; i++) {\n            int v = src[i] & 0xFF;\n            String hv = Integer.toHexString(v);\n            if (hv.length() < 2) {\n                stringBuilder.append(0);\n            }\n            stringBuilder.append(hv);\n        }\n        return stringBuilder.toString();\n    }\n}\n",
        "simple_context": "package org.jeecg.common.util.filter;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.apache.commons.lang3.StringUtils;\n\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.IOException;\n\nimport java.io.InputStream;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.Iterator;\n\nimport java.util.List;\n\npublic class SsrfFileTypeFilter {\n    static final private List<String> FILE_TYPE_WHITE_LIST;\n    static final HashMap<String, String> FILE_TYPE_MAP;\n    static private String getFileTypeBySuffix(String fileName);\n    static public  checkDownloadFileType(String filePath)throws IOException;\n    static public  checkUploadFileType(MultipartFile file)throws Exception;\n    static private String getFileType(MultipartFile file)throws Exception;\n    static private String bytesToHexString(byte[] src);\n}\n\n"
    },
    {
        "project_name": "jeecg-boot",
        "file_name": "OssBootUtil.java",
        "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/oss/OssBootUtil.java",
        "execute_path": "jeecg-boot",
        "package": "org.jeecg.common.util.oss",
        "docstring": "/**\n     * \u4e0a\u4f20\u6587\u4ef6\u81f3\u963f\u91cc\u4e91 OSS\n     * \u6587\u4ef6\u4e0a\u4f20\u6210\u529f,\u8fd4\u56de\u6587\u4ef6\u5b8c\u6574\u8bbf\u95ee\u8def\u5f84\n     * \u6587\u4ef6\u4e0a\u4f20\u5931\u8d25,\u8fd4\u56de null\n     *\n     * @param file    \u5f85\u4e0a\u4f20\u6587\u4ef6\n     * @param fileDir \u6587\u4ef6\u4fdd\u5b58\u76ee\u5f55\n     * @return oss \u4e2d\u7684\u76f8\u5bf9\u6587\u4ef6\u8def\u5f84\n     */",
        "source_code": "\npublic static String upload(FileItemStream file, String fileDir) {\n    String filePath = null;\n    initOss(endPoint, accessKeyId, accessKeySecret);\n    StringBuilder fileUrl = new StringBuilder();\n    try {\n        String suffix = file.getName().substring(file.getName().lastIndexOf('.'));\n        String fileName = UUID.randomUUID().toString().replace(\"-\", \"\") + suffix;\n        if (!fileDir.endsWith(SymbolConstant.SINGLE_SLASH)) {\n            fileDir = fileDir.concat(SymbolConstant.SINGLE_SLASH);\n        }\n        fileDir = StrAttackFilter.filter(fileDir);\n        fileUrl = fileUrl.append(fileDir + fileName);\n        if (oConvertUtils.isNotEmpty(staticDomain) && staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n            filePath = staticDomain + SymbolConstant.SINGLE_SLASH + fileUrl;\n        } else {\n            filePath = \"https://\" + bucketName + \".\" + endPoint + SymbolConstant.SINGLE_SLASH + fileUrl;\n        }\n        PutObjectResult result = ossClient.putObject(bucketName, fileUrl.toString(), file.openStream());\n        // \u8bbe\u7f6e\u6743\u9650(\u516c\u5f00\u8bfb)\n        ossClient.setBucketAcl(bucketName, CannedAccessControlList.PublicRead);\n        if (result != null) {\n            log.info(\"------OSS\u6587\u4ef6\u4e0a\u4f20\u6210\u529f------\" + fileUrl);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n    return filePath;\n}\n",
        "class_name": "OssBootUtil",
        "method_name": "upload",
        "argument_name": [
            "FileItemStream file",
            "String fileDir"
        ],
        "full_context": "package org.jeecg.common.util.oss;\n\nimport com.aliyun.oss.ClientConfiguration;\nimport com.aliyun.oss.OSSClient;\nimport com.aliyun.oss.common.auth.DefaultCredentialProvider;\nimport com.aliyun.oss.model.CannedAccessControlList;\nimport com.aliyun.oss.model.OSSObject;\nimport com.aliyun.oss.model.PutObjectResult;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.fileupload.FileItemStream;\nimport org.jeecg.common.constant.CommonConstant;\nimport org.jeecg.common.constant.SymbolConstant;\nimport org.jeecg.common.util.CommonUtils;\nimport org.jeecg.common.util.filter.SsrfFileTypeFilter;\nimport org.jeecg.common.util.filter.StrAttackFilter;\nimport org.jeecg.common.util.oConvertUtils;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.BufferedInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.net.URLDecoder;\nimport java.util.Date;\nimport java.util.UUID;\n\n/**\n * @Description: \u963f\u91cc\u4e91 oss \u4e0a\u4f20\u5de5\u5177\u7c7b(\u9ad8\u4f9d\u8d56\u7248)\n * @Date: 2019/5/10\n * @author: jeecg-boot\n */\n@Slf4j\npublic class OssBootUtil {\n\n    private static String endPoint;\n    private static String accessKeyId;\n    private static String accessKeySecret;\n    private static String bucketName;\n    private static String staticDomain;\n\n    public static void setEndPoint(String endPoint) {\n        OssBootUtil.endPoint = endPoint;\n    }\n\n    public static void setAccessKeyId(String accessKeyId) {\n        OssBootUtil.accessKeyId = accessKeyId;\n    }\n\n    public static void setAccessKeySecret(String accessKeySecret) {\n        OssBootUtil.accessKeySecret = accessKeySecret;\n    }\n\n    public static void setBucketName(String bucketName) {\n        OssBootUtil.bucketName = bucketName;\n    }\n\n    public static void setStaticDomain(String staticDomain) {\n        OssBootUtil.staticDomain = staticDomain;\n    }\n\n    public static String getStaticDomain() {\n        return staticDomain;\n    }\n\n    public static String getEndPoint() {\n        return endPoint;\n    }\n\n    public static String getAccessKeyId() {\n        return accessKeyId;\n    }\n\n    public static String getAccessKeySecret() {\n        return accessKeySecret;\n    }\n\n    public static String getBucketName() {\n        return bucketName;\n    }\n\n    public static OSSClient getOssClient() {\n        return ossClient;\n    }\n\n    /**\n     * oss \u5de5\u5177\u5ba2\u6237\u7aef\n     */\n    private static OSSClient ossClient = null;\n\n    /**\n     * \u4e0a\u4f20\u6587\u4ef6\u81f3\u963f\u91cc\u4e91 OSS\n     * \u6587\u4ef6\u4e0a\u4f20\u6210\u529f,\u8fd4\u56de\u6587\u4ef6\u5b8c\u6574\u8bbf\u95ee\u8def\u5f84\n     * \u6587\u4ef6\u4e0a\u4f20\u5931\u8d25,\u8fd4\u56de null\n     *\n     * @param file    \u5f85\u4e0a\u4f20\u6587\u4ef6\n     * @param fileDir \u6587\u4ef6\u4fdd\u5b58\u76ee\u5f55\n     * @return oss \u4e2d\u7684\u76f8\u5bf9\u6587\u4ef6\u8def\u5f84\n     */\n    public static String upload(MultipartFile file, String fileDir,String customBucket) throws Exception {\n        //update-begin-author:liusq date:20210809 for: \u8fc7\u6ee4\u4e0a\u4f20\u6587\u4ef6\u7c7b\u578b\n        SsrfFileTypeFilter.checkUploadFileType(file);\n        //update-end-author:liusq date:20210809 for: \u8fc7\u6ee4\u4e0a\u4f20\u6587\u4ef6\u7c7b\u578b\n\n        String filePath = null;\n        initOss(endPoint, accessKeyId, accessKeySecret);\n        StringBuilder fileUrl = new StringBuilder();\n        String newBucket = bucketName;\n        if(oConvertUtils.isNotEmpty(customBucket)){\n            newBucket = customBucket;\n        }\n        try {\n            //\u5224\u65ad\u6876\u662f\u5426\u5b58\u5728,\u4e0d\u5b58\u5728\u5219\u521b\u5efa\u6876\n            if(!ossClient.doesBucketExist(newBucket)){\n                ossClient.createBucket(newBucket);\n            }\n            // \u83b7\u53d6\u6587\u4ef6\u540d\n            String orgName = file.getOriginalFilename();\n            if(\"\" == orgName){\n              orgName=file.getName();\n            }\n            orgName = CommonUtils.getFileName(orgName);\n            String fileName = orgName.indexOf(\".\")==-1\n                              ?orgName + \"_\" + System.currentTimeMillis()\n                              :orgName.substring(0, orgName.lastIndexOf(\".\")) + \"_\" + System.currentTimeMillis() + orgName.substring(orgName.lastIndexOf(\".\"));\n            if (!fileDir.endsWith(SymbolConstant.SINGLE_SLASH)) {\n                fileDir = fileDir.concat(SymbolConstant.SINGLE_SLASH);\n            }\n            //update-begin-author:wangshuai date:20201012 for: \u8fc7\u6ee4\u4e0a\u4f20\u6587\u4ef6\u5939\u540d\u7279\u6b8a\u5b57\u7b26\uff0c\u9632\u6b62\u653b\u51fb\n            fileDir=StrAttackFilter.filter(fileDir);\n            //update-end-author:wangshuai date:20201012 for: \u8fc7\u6ee4\u4e0a\u4f20\u6587\u4ef6\u5939\u540d\u7279\u6b8a\u5b57\u7b26\uff0c\u9632\u6b62\u653b\u51fb\n            fileUrl = fileUrl.append(fileDir + fileName);\n\n            if (oConvertUtils.isNotEmpty(staticDomain) && staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n                filePath = staticDomain + SymbolConstant.SINGLE_SLASH + fileUrl;\n            } else {\n                filePath = \"https://\" + newBucket + \".\" + endPoint + SymbolConstant.SINGLE_SLASH + fileUrl;\n            }\n            PutObjectResult result = ossClient.putObject(newBucket, fileUrl.toString(), file.getInputStream());\n            // \u8bbe\u7f6e\u6743\u9650(\u516c\u5f00\u8bfb)\n//            ossClient.setBucketAcl(newBucket, CannedAccessControlList.PublicRead);\n            if (result != null) {\n                log.info(\"------OSS\u6587\u4ef6\u4e0a\u4f20\u6210\u529f------\" + fileUrl);\n            }\n        } catch (IOException e) {\n            log.error(e.getMessage(),e);\n            return null;\n        }catch (Exception e) {\n            log.error(e.getMessage(),e);\n            return null;\n        }\n        return filePath;\n    }\n\n    /**\n     * \u83b7\u53d6\u539f\u59cbURL\n    * @param url: \u539f\u59cbURL\n    * @Return: java.lang.String\n    */\n    public static String getOriginalUrl(String url) {\n        String originalDomain = \"https://\" + bucketName + \".\" + endPoint;\n        if(oConvertUtils.isNotEmpty(staticDomain) && url.indexOf(staticDomain)!=-1){\n            url = url.replace(staticDomain,originalDomain);\n        }\n        return url;\n    }\n\n    /**\n     * \u6587\u4ef6\u4e0a\u4f20\n     * @param file\n     * @param fileDir\n     * @return\n     */\n    public static String upload(MultipartFile file, String fileDir) throws Exception {\n        return upload(file, fileDir,null);\n    }\n\n    /**\n     * \u4e0a\u4f20\u6587\u4ef6\u81f3\u963f\u91cc\u4e91 OSS\n     * \u6587\u4ef6\u4e0a\u4f20\u6210\u529f,\u8fd4\u56de\u6587\u4ef6\u5b8c\u6574\u8bbf\u95ee\u8def\u5f84\n     * \u6587\u4ef6\u4e0a\u4f20\u5931\u8d25,\u8fd4\u56de null\n     *\n     * @param file    \u5f85\u4e0a\u4f20\u6587\u4ef6\n     * @param fileDir \u6587\u4ef6\u4fdd\u5b58\u76ee\u5f55\n     * @return oss \u4e2d\u7684\u76f8\u5bf9\u6587\u4ef6\u8def\u5f84\n     */\n    public static String upload(FileItemStream file, String fileDir) {\n        String filePath = null;\n        initOss(endPoint, accessKeyId, accessKeySecret);\n        StringBuilder fileUrl = new StringBuilder();\n        try {\n            String suffix = file.getName().substring(file.getName().lastIndexOf('.'));\n            String fileName = UUID.randomUUID().toString().replace(\"-\", \"\") + suffix;\n            if (!fileDir.endsWith(SymbolConstant.SINGLE_SLASH)) {\n                fileDir = fileDir.concat(SymbolConstant.SINGLE_SLASH);\n            }\n            fileDir = StrAttackFilter.filter(fileDir);\n            fileUrl = fileUrl.append(fileDir + fileName);\n            if (oConvertUtils.isNotEmpty(staticDomain) && staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n                filePath = staticDomain + SymbolConstant.SINGLE_SLASH + fileUrl;\n            } else {\n                filePath = \"https://\" + bucketName + \".\" + endPoint + SymbolConstant.SINGLE_SLASH + fileUrl;\n            }\n            PutObjectResult result = ossClient.putObject(bucketName, fileUrl.toString(), file.openStream());\n            // \u8bbe\u7f6e\u6743\u9650(\u516c\u5f00\u8bfb)\n            ossClient.setBucketAcl(bucketName, CannedAccessControlList.PublicRead);\n            if (result != null) {\n                log.info(\"------OSS\u6587\u4ef6\u4e0a\u4f20\u6210\u529f------\" + fileUrl);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n        return filePath;\n    }\n\n    /**\n     * \u5220\u9664\u6587\u4ef6\n     * @param url\n     */\n    public static void deleteUrl(String url) {\n        deleteUrl(url,null);\n    }\n\n    /**\n     * \u5220\u9664\u6587\u4ef6\n     * @param url\n     */\n    public static void deleteUrl(String url,String bucket) {\n        String newBucket = bucketName;\n        if(oConvertUtils.isNotEmpty(bucket)){\n            newBucket = bucket;\n        }\n        String bucketUrl = \"\";\n        if (oConvertUtils.isNotEmpty(staticDomain) && staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n            bucketUrl = staticDomain + SymbolConstant.SINGLE_SLASH ;\n        } else {\n            bucketUrl = \"https://\" + newBucket + \".\" + endPoint + SymbolConstant.SINGLE_SLASH;\n        }\n        //TODO \u6682\u65f6\u4e0d\u5141\u8bb8\u5220\u9664\u4e91\u5b58\u50a8\u7684\u6587\u4ef6\n        //initOss(endPoint, accessKeyId, accessKeySecret);\n        url = url.replace(bucketUrl,\"\");\n        ossClient.deleteObject(newBucket, url);\n    }\n\n    /**\n     * \u5220\u9664\u6587\u4ef6\n     * @param fileName\n     */\n    public static void delete(String fileName) {\n        ossClient.deleteObject(bucketName, fileName);\n    }\n\n    /**\n     * \u83b7\u53d6\u6587\u4ef6\u6d41\n     * @param objectName\n     * @param bucket\n     * @return\n     */\n    public static InputStream getOssFile(String objectName,String bucket){\n        InputStream inputStream = null;\n        try{\n            String newBucket = bucketName;\n            if(oConvertUtils.isNotEmpty(bucket)){\n                newBucket = bucket;\n            }\n            initOss(endPoint, accessKeyId, accessKeySecret);\n            //update-begin---author:liusq  Date:20220120  for\uff1a\u66ff\u6362objectName\u524d\u7f00\uff0c\u9632\u6b62key\u4e0d\u4e00\u81f4\u5bfc\u81f4\u83b7\u53d6\u4e0d\u5230\u6587\u4ef6----\n            objectName = OssBootUtil.replacePrefix(objectName,bucket);\n            //update-end---author:liusq  Date:20220120  for\uff1a\u66ff\u6362objectName\u524d\u7f00\uff0c\u9632\u6b62key\u4e0d\u4e00\u81f4\u5bfc\u81f4\u83b7\u53d6\u4e0d\u5230\u6587\u4ef6----\n            OSSObject ossObject = ossClient.getObject(newBucket,objectName);\n            inputStream = new BufferedInputStream(ossObject.getObjectContent());\n        }catch (Exception e){\n            log.info(\"\u6587\u4ef6\u83b7\u53d6\u5931\u8d25\" + e.getMessage());\n        }\n        return inputStream;\n    }\n\n    ///**\n    // * \u83b7\u53d6\u6587\u4ef6\u6d41\n    // * @param objectName\n    // * @return\n    // */\n    //public static InputStream getOssFile(String objectName){\n    //    return getOssFile(objectName,null);\n    //}\n\n    /**\n     * \u83b7\u53d6\u6587\u4ef6\u5916\u94fe\n     * @param bucketName\n     * @param objectName\n     * @param expires\n     * @return\n     */\n    public static String getObjectUrl(String bucketName, String objectName, Date expires) {\n        initOss(endPoint, accessKeyId, accessKeySecret);\n        try{\n            //update-begin---author:liusq  Date:20220120  for\uff1a\u66ff\u6362objectName\u524d\u7f00\uff0c\u9632\u6b62key\u4e0d\u4e00\u81f4\u5bfc\u81f4\u83b7\u53d6\u4e0d\u5230\u6587\u4ef6----\n            objectName = OssBootUtil.replacePrefix(objectName,bucketName);\n            //update-end---author:liusq  Date:20220120  for\uff1a\u66ff\u6362objectName\u524d\u7f00\uff0c\u9632\u6b62key\u4e0d\u4e00\u81f4\u5bfc\u81f4\u83b7\u53d6\u4e0d\u5230\u6587\u4ef6----\n            if(ossClient.doesObjectExist(bucketName,objectName)){\n                URL url = ossClient.generatePresignedUrl(bucketName,objectName,expires);\n                //log.info(\"\u539f\u59cburl : {}\", url.toString());\n                //log.info(\"decode url : {}\", URLDecoder.decode(url.toString(), \"UTF-8\"));\n                //\u3010issues/4023\u3011\u95ee\u9898 oss\u5916\u94fe\u7ecf\u8fc7\u8f6c\u7f16\u7801\u540e\uff0c\u90e8\u5206\u65e0\u6548\uff0c\u5927\u6982\u5728\u4e09\u5206\u4e00\uff1b\u65e0\u9700\u8f6c\u7f16\u7801\u76f4\u63a5\u8fd4\u56de\u5373\u53ef #4023\n                return url.toString();\n            }\n        }catch (Exception e){\n            log.info(\"\u6587\u4ef6\u8def\u5f84\u83b7\u53d6\u5931\u8d25\" + e.getMessage()); \n        }\n        return null;\n    }\n\n    /**\n     * \u521d\u59cb\u5316 oss \u5ba2\u6237\u7aef\n     *\n     * @return\n     */\n    private static OSSClient initOss(String endpoint, String accessKeyId, String accessKeySecret) {\n        if (ossClient == null) {\n            ossClient = new OSSClient(endpoint,\n                    new DefaultCredentialProvider(accessKeyId, accessKeySecret),\n                    new ClientConfiguration());\n        }\n        return ossClient;\n    }\n\n\n    /**\n     * \u4e0a\u4f20\u6587\u4ef6\u5230oss\n     * @param stream\n     * @param relativePath\n     * @return\n     */\n    public static String upload(InputStream stream, String relativePath) {\n        String filePath = null;\n        String fileUrl = relativePath;\n        initOss(endPoint, accessKeyId, accessKeySecret);\n        if (oConvertUtils.isNotEmpty(staticDomain) && staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n            filePath = staticDomain + SymbolConstant.SINGLE_SLASH + relativePath;\n        } else {\n            filePath = \"https://\" + bucketName + \".\" + endPoint + SymbolConstant.SINGLE_SLASH + fileUrl;\n        }\n        PutObjectResult result = ossClient.putObject(bucketName, fileUrl.toString(),stream);\n        // \u8bbe\u7f6e\u6743\u9650(\u516c\u5f00\u8bfb)\n        ossClient.setBucketAcl(bucketName, CannedAccessControlList.PublicRead);\n        if (result != null) {\n            log.info(\"------OSS\u6587\u4ef6\u4e0a\u4f20\u6210\u529f------\" + fileUrl);\n        }\n        return filePath;\n    }\n\n    /**\n     * \u66ff\u6362\u524d\u7f00\uff0c\u9632\u6b62key\u4e0d\u4e00\u81f4\u5bfc\u81f4\u83b7\u53d6\u4e0d\u5230\u6587\u4ef6\n     * @param objectName \u6587\u4ef6\u4e0a\u4f20\u8def\u5f84 key\n     * @param customBucket \u81ea\u5b9a\u4e49\u6876\n     * @date 2022-01-20\n     * @author lsq\n     * @return\n     */\n    private static String replacePrefix(String objectName,String customBucket){\n        log.info(\"------replacePrefix---\u66ff\u6362\u524d---objectName:{}\",objectName);\n        if(oConvertUtils.isNotEmpty(staticDomain)){\n            objectName= objectName.replace(staticDomain+SymbolConstant.SINGLE_SLASH,\"\");\n        }else{\n            String newBucket = bucketName;\n            if(oConvertUtils.isNotEmpty(customBucket)){\n                newBucket = customBucket;\n            }\n            String path =\"https://\" + newBucket + \".\" + endPoint + SymbolConstant.SINGLE_SLASH;\n            objectName = objectName.replace(path,\"\");\n        }\n        log.info(\"------replacePrefix---\u66ff\u6362\u540e---objectName:{}\",objectName);\n        return objectName;\n    }\n}",
        "simple_context": "package org.jeecg.common.util.oss;\n\nimport com.aliyun.oss.ClientConfiguration;\n\nimport com.aliyun.oss.OSSClient;\n\nimport com.aliyun.oss.common.auth.DefaultCredentialProvider;\n\nimport com.aliyun.oss.model.CannedAccessControlList;\n\nimport com.aliyun.oss.model.OSSObject;\n\nimport com.aliyun.oss.model.PutObjectResult;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.apache.commons.fileupload.FileItemStream;\n\nimport org.jeecg.common.constant.CommonConstant;\n\nimport org.jeecg.common.constant.SymbolConstant;\n\nimport org.jeecg.common.util.CommonUtils;\n\nimport org.jeecg.common.util.filter.SsrfFileTypeFilter;\n\nimport org.jeecg.common.util.filter.StrAttackFilter;\n\nimport org.jeecg.common.util.oConvertUtils;\n\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.BufferedInputStream;\n\nimport java.io.IOException;\n\nimport java.io.InputStream;\n\nimport java.net.URL;\n\nimport java.net.URLDecoder;\n\nimport java.util.Date;\n\nimport java.util.UUID;\n\npublic class OssBootUtil {\n    static private String endPoint;\n    static private String accessKeyId;\n    static private String accessKeySecret;\n    static private String bucketName;\n    static private String staticDomain;\n    static public  setEndPoint(String endPoint);\n    static public  setAccessKeyId(String accessKeyId);\n    static public  setAccessKeySecret(String accessKeySecret);\n    static public  setBucketName(String bucketName);\n    static public  setStaticDomain(String staticDomain);\n    static public String getStaticDomain();\n    static public String getEndPoint();\n    static public String getAccessKeyId();\n    static public String getAccessKeySecret();\n    static public String getBucketName();\n    static public OSSClient getOssClient();\n    static private OSSClient ossClient;\n    static public String upload(MultipartFile file, String fileDir, String customBucket)throws Exception;\n    static public String getOriginalUrl(String url);\n    static public String upload(MultipartFile file, String fileDir)throws Exception;\n    static public String upload(FileItemStream file, String fileDir);\n    static public  deleteUrl(String url);\n    static public  deleteUrl(String url, String bucket);\n    static public  delete(String fileName);\n    static public InputStream getOssFile(String objectName, String bucket);\n    static public String getObjectUrl(String bucketName, String objectName, Date expires);\n    static private OSSClient initOss(String endpoint, String accessKeyId, String accessKeySecret);\n    static public String upload(InputStream stream, String relativePath);\n    static private String replacePrefix(String objectName, String customBucket);\n}\n\n"
    },
    {
        "project_name": "jeecg-boot",
        "file_name": "JdbcSecurityUtil.java",
        "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/security/JdbcSecurityUtil.java",
        "execute_path": "jeecg-boot",
        "package": "org.jeecg.common.util.security",
        "docstring": "/**\n     * \u6821\u9a8csql\u662f\u5426\u6709\u7279\u5b9a\u7684key\n     * @param jdbcUrl\n     * @return\n     */",
        "source_code": "\npublic static void validate(String jdbcUrl){\n    if(oConvertUtils.isEmpty(jdbcUrl)){\n        return;\n    }\n    String urlConcatChar = \"?\";\n    if(jdbcUrl.indexOf(urlConcatChar)<0){\n        return;\n    }\n    String argString = jdbcUrl.substring(jdbcUrl.indexOf(urlConcatChar)+1);\n    String[] keyAndValues = argString.split(\"&\");\n    for(String temp: keyAndValues){\n        String key = temp.split(\"=\")[0];\n        for(String prop: notAllowedProps){\n            if(prop.equalsIgnoreCase(key)){\n                throw new JeecgBootException(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010\"+key+\"\u3011\");\n            }\n        }\n    }\n}\n",
        "class_name": "JdbcSecurityUtil",
        "method_name": "validate",
        "argument_name": [
            "String jdbcUrl"
        ],
        "full_context": "package org.jeecg.common.util.security;\n\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.jeecg.common.util.oConvertUtils;\n\n/**\n * jdbc\u8fde\u63a5\u6821\u9a8c\n * @Author taoYan\n * @Date 2022/8/10 18:15\n **/\npublic class JdbcSecurityUtil {\n\n    /**\n     * \u8fde\u63a5\u9a71\u52a8\u6f0f\u6d1e \u6700\u65b0\u7248\u672c\u4fee\u590d\u540e\uff0c\u53ef\u5220\u9664\u76f8\u5e94\u7684key\n     * postgre\uff1aauthenticationPluginClassName, sslhostnameverifier, socketFactory, sslfactory, sslpasswordcallback\n     * https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-v7wg-cpwc-24m4\n     * \n     */\n    public static final String[] notAllowedProps = new String[]{\"authenticationPluginClassName\", \"sslhostnameverifier\", \"socketFactory\", \"sslfactory\", \"sslpasswordcallback\"};\n\n    /**\n     * \u6821\u9a8csql\u662f\u5426\u6709\u7279\u5b9a\u7684key\n     * @param jdbcUrl\n     * @return\n     */\n    public static void validate(String jdbcUrl){\n        if(oConvertUtils.isEmpty(jdbcUrl)){\n            return;\n        }\n        String urlConcatChar = \"?\";\n        if(jdbcUrl.indexOf(urlConcatChar)<0){\n            return;\n        }\n        String argString = jdbcUrl.substring(jdbcUrl.indexOf(urlConcatChar)+1);\n        String[] keyAndValues = argString.split(\"&\");\n        for(String temp: keyAndValues){\n            String key = temp.split(\"=\")[0];\n            for(String prop: notAllowedProps){\n                if(prop.equalsIgnoreCase(key)){\n                    throw new JeecgBootException(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010\"+key+\"\u3011\");\n                }\n            }\n        }\n    }\n    \n}\n",
        "simple_context": "package org.jeecg.common.util.security;\n\nimport org.jeecg.common.exception.JeecgBootException;\n\nimport org.jeecg.common.util.oConvertUtils;\n\npublic class JdbcSecurityUtil {\n    static public final String notAllowedProps;\n    static public  validate(String jdbcUrl);\n}\n\n"
    },
    {
        "project_name": "jeecg-boot",
        "file_name": "JSqlParserAllTableManager.java",
        "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/sqlparse/JSqlParserAllTableManager.java",
        "execute_path": "jeecg-boot",
        "package": "org.jeecg.common.util.sqlparse",
        "docstring": "/**\n     * \u5f00\u59cb\u89e3\u6790\n     *\n     * @return\n     * @throws JSQLParserException\n     */",
        "source_code": "\npublic Map<String, SelectSqlInfo> parse() throws JSQLParserException {\n    // 1. \u521b\u5efa\u89e3\u6790\u5668\n    CCJSqlParserManager mgr = new CCJSqlParserManager();\n    // 2. \u4f7f\u7528\u89e3\u6790\u5668\u89e3\u6790sql\u751f\u6210\u5177\u6709\u5c42\u6b21\u7ed3\u6784\u7684java\u7c7b\n    Statement stmt = mgr.parse(new StringReader(this.sql));\n    if (stmt instanceof Select) {\n        Select selectStatement = (Select) stmt;\n        SelectBody selectBody = selectStatement.getSelectBody();\n        this.parsedSql = selectBody.toString();\n        // 3. \u89e3\u6790select\u67e5\u8be2sql\u7684\u4fe1\u606f\n        if (selectBody instanceof PlainSelect) {\n            PlainSelect plainSelect = (PlainSelect) selectBody;\n            // 4. \u5408\u5e76 fromItems\n            List<FromItem> fromItems = new ArrayList<>();\n            fromItems.add(plainSelect.getFromItem());\n            // 4.1 \u5904\u7406join\u7684\u8868\n            List<Join> joins = plainSelect.getJoins();\n            if (joins != null) {\n                joins.forEach(join -> fromItems.add(join.getRightItem()));\n            }\n            // 5. \u5904\u7406 fromItems\n            for (FromItem fromItem : fromItems) {\n                // 5.1 \u901a\u8fc7\u8868\u540d\u7684\u65b9\u5f0ffrom\n                if (fromItem instanceof Table) {\n                    this.addSqlInfoByTable((Table) fromItem);\n                }\n                // 5.2 \u901a\u8fc7\u5b50\u67e5\u8be2\u7684\u65b9\u5f0ffrom\n                else if (fromItem instanceof SubSelect) {\n                    this.handleSubSelect((SubSelect) fromItem);\n                }\n            }\n            // 6. \u89e3\u6790 selectFields\n            List<SelectItem> selectItems = plainSelect.getSelectItems();\n            for (SelectItem selectItem : selectItems) {\n                // 6.1 \u67e5\u8be2\u7684\u662f\u5168\u90e8\u5b57\u6bb5\n                if (selectItem instanceof AllColumns) {\n                    // \u5f53 selectItem \u4e3a AllColumns \u65f6\uff0cfromItem \u5fc5\u5b9a\u4e3a Table\n                    String tableName = plainSelect.getFromItem(Table.class).getName();\n                    // \u6b64\u5904\u5fc5\u5b9a\u4e0d\u4e3a\u7a7a\uff0c\u56e0\u4e3a\u5728\u89e3\u6790 fromItem \u65f6\uff0c\u5df2\u7ecf\u5c06\u8868\u540d\u6dfb\u52a0\u5230 allTableMap \u4e2d\n                    SelectSqlInfo sqlInfo = this.allTableMap.get(tableName);\n                    assert sqlInfo != null;\n                    // \u8bbe\u7f6e\u4e3a\u67e5\u8be2\u5168\u90e8\u5b57\u6bb5\n                    sqlInfo.setSelectAll(true);\n                    sqlInfo.setSelectFields(null);\n                    sqlInfo.setRealSelectFields(null);\n                }\n                // 6.2 \u67e5\u8be2\u7684\u662f\u5e26\u8868\u522b\u540d\uff08 u.* )\u7684\u5168\u90e8\u5b57\u6bb5\n                else if (selectItem instanceof AllTableColumns) {\n                    AllTableColumns allTableColumns = (AllTableColumns) selectItem;\n                    String aliasName = allTableColumns.getTable().getName();\n                    // \u901a\u8fc7\u522b\u540d\u83b7\u53d6\u8868\u540d\n                    String tableName = this.tableAliasMap.get(aliasName);\n                    if (tableName == null) {\n                        tableName = aliasName;\n                    }\n                    SelectSqlInfo sqlInfo = this.allTableMap.get(tableName);\n                    // \u5982\u679c\u6b64\u5904\u4e3a\u7a7a\uff0c\u5219\u8bf4\u660e\u8be5\u5b57\u6bb5\u662f\u901a\u8fc7\u5b50\u67e5\u8be2\u83b7\u53d6\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u5904\u7406\uff0c\u53ea\u6709\u5b9e\u9645\u8868\u624d\u9700\u8981\u5904\u7406\n                    if (sqlInfo != null) {\n                        // \u8bbe\u7f6e\u4e3a\u67e5\u8be2\u5168\u90e8\u5b57\u6bb5\n                        sqlInfo.setSelectAll(true);\n                        sqlInfo.setSelectFields(null);\n                        sqlInfo.setRealSelectFields(null);\n                    }\n                }\n                // 6.3 \u5404\u79cd\u5b57\u6bb5\u8868\u8fbe\u5f0f\u5904\u7406\n                else if (selectItem instanceof SelectExpressionItem) {\n                    SelectExpressionItem selectExpressionItem = (SelectExpressionItem) selectItem;\n                    Expression expression = selectExpressionItem.getExpression();\n                    Alias alias = selectExpressionItem.getAlias();\n                    this.handleExpression(expression, alias, plainSelect.getFromItem());\n                }\n            }\n        } else {\n            log.warn(\"\u6682\u65f6\u5c1a\u672a\u5904\u7406\u8be5\u7c7b\u578b\u7684 SelectBody: {}\", selectBody.getClass().getName());\n            throw new JeecgBootException(\"\u6682\u65f6\u5c1a\u672a\u5904\u7406\u8be5\u7c7b\u578b\u7684 SelectBody\");\n        }\n    } else {\n        // \u975e select \u67e5\u8be2sql\uff0c\u4e0d\u505a\u5904\u7406\n        throw new JeecgBootException(\"\u975e select \u67e5\u8be2sql\uff0c\u4e0d\u505a\u5904\u7406\");\n    }\n    return this.allTableMap;\n}\n",
        "class_name": "JSqlParserAllTableManager",
        "method_name": "parse",
        "argument_name": [],
        "full_context": "package org.jeecg.common.util.sqlparse;\n\nimport lombok.extern.slf4j.Slf4j;\nimport net.sf.jsqlparser.JSQLParserException;\nimport net.sf.jsqlparser.expression.*;\nimport net.sf.jsqlparser.parser.CCJSqlParserManager;\nimport net.sf.jsqlparser.schema.Column;\nimport net.sf.jsqlparser.schema.Table;\nimport net.sf.jsqlparser.statement.Statement;\nimport net.sf.jsqlparser.statement.select.*;\nimport org.jeecg.common.exception.JeecgBootException;\nimport org.jeecg.common.util.sqlparse.vo.SelectSqlInfo;\n\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * \u89e3\u6790\u6240\u6709\u8868\u540d\u548c\u5b57\u6bb5\u7684\u7c7b\n */\n@Slf4j\npublic class JSqlParserAllTableManager {\n\n    private final String sql;\n    private final Map<String, SelectSqlInfo> allTableMap = new HashMap<>();\n    /**\n     * \u522b\u540d\u5bf9\u5e94\u5b9e\u9645\u8868\u540d\n     */\n    private final Map<String, String> tableAliasMap = new HashMap<>();\n\n    /**\n     * \u89e3\u6790\u540e\u7684sql\n     */\n    private String parsedSql = null;\n\n    JSqlParserAllTableManager(String selectSql) {\n        this.sql = selectSql;\n    }\n\n    /**\n     * \u5f00\u59cb\u89e3\u6790\n     *\n     * @return\n     * @throws JSQLParserException\n     */\n    public Map<String, SelectSqlInfo> parse() throws JSQLParserException {\n        // 1. \u521b\u5efa\u89e3\u6790\u5668\n        CCJSqlParserManager mgr = new CCJSqlParserManager();\n        // 2. \u4f7f\u7528\u89e3\u6790\u5668\u89e3\u6790sql\u751f\u6210\u5177\u6709\u5c42\u6b21\u7ed3\u6784\u7684java\u7c7b\n        Statement stmt = mgr.parse(new StringReader(this.sql));\n        if (stmt instanceof Select) {\n            Select selectStatement = (Select) stmt;\n            SelectBody selectBody = selectStatement.getSelectBody();\n            this.parsedSql = selectBody.toString();\n            // 3. \u89e3\u6790select\u67e5\u8be2sql\u7684\u4fe1\u606f\n            if (selectBody instanceof PlainSelect) {\n                PlainSelect plainSelect = (PlainSelect) selectBody;\n                // 4. \u5408\u5e76 fromItems\n                List<FromItem> fromItems = new ArrayList<>();\n                fromItems.add(plainSelect.getFromItem());\n                // 4.1 \u5904\u7406join\u7684\u8868\n                List<Join> joins = plainSelect.getJoins();\n                if (joins != null) {\n                    joins.forEach(join -> fromItems.add(join.getRightItem()));\n                }\n                // 5. \u5904\u7406 fromItems\n                for (FromItem fromItem : fromItems) {\n                    // 5.1 \u901a\u8fc7\u8868\u540d\u7684\u65b9\u5f0ffrom\n                    if (fromItem instanceof Table) {\n                        this.addSqlInfoByTable((Table) fromItem);\n                    }\n                    // 5.2 \u901a\u8fc7\u5b50\u67e5\u8be2\u7684\u65b9\u5f0ffrom\n                    else if (fromItem instanceof SubSelect) {\n                        this.handleSubSelect((SubSelect) fromItem);\n                    }\n                }\n                // 6. \u89e3\u6790 selectFields\n                List<SelectItem> selectItems = plainSelect.getSelectItems();\n                for (SelectItem selectItem : selectItems) {\n                    // 6.1 \u67e5\u8be2\u7684\u662f\u5168\u90e8\u5b57\u6bb5\n                    if (selectItem instanceof AllColumns) {\n                        // \u5f53 selectItem \u4e3a AllColumns \u65f6\uff0cfromItem \u5fc5\u5b9a\u4e3a Table\n                        String tableName = plainSelect.getFromItem(Table.class).getName();\n                        // \u6b64\u5904\u5fc5\u5b9a\u4e0d\u4e3a\u7a7a\uff0c\u56e0\u4e3a\u5728\u89e3\u6790 fromItem \u65f6\uff0c\u5df2\u7ecf\u5c06\u8868\u540d\u6dfb\u52a0\u5230 allTableMap \u4e2d\n                        SelectSqlInfo sqlInfo = this.allTableMap.get(tableName);\n                        assert sqlInfo != null;\n                        // \u8bbe\u7f6e\u4e3a\u67e5\u8be2\u5168\u90e8\u5b57\u6bb5\n                        sqlInfo.setSelectAll(true);\n                        sqlInfo.setSelectFields(null);\n                        sqlInfo.setRealSelectFields(null);\n                    }\n                    // 6.2 \u67e5\u8be2\u7684\u662f\u5e26\u8868\u522b\u540d\uff08 u.* )\u7684\u5168\u90e8\u5b57\u6bb5\n                    else if (selectItem instanceof AllTableColumns) {\n                        AllTableColumns allTableColumns = (AllTableColumns) selectItem;\n                        String aliasName = allTableColumns.getTable().getName();\n                        // \u901a\u8fc7\u522b\u540d\u83b7\u53d6\u8868\u540d\n                        String tableName = this.tableAliasMap.get(aliasName);\n                        if (tableName == null) {\n                            tableName = aliasName;\n                        }\n                        SelectSqlInfo sqlInfo = this.allTableMap.get(tableName);\n                        // \u5982\u679c\u6b64\u5904\u4e3a\u7a7a\uff0c\u5219\u8bf4\u660e\u8be5\u5b57\u6bb5\u662f\u901a\u8fc7\u5b50\u67e5\u8be2\u83b7\u53d6\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u5904\u7406\uff0c\u53ea\u6709\u5b9e\u9645\u8868\u624d\u9700\u8981\u5904\u7406\n                        if (sqlInfo != null) {\n                            // \u8bbe\u7f6e\u4e3a\u67e5\u8be2\u5168\u90e8\u5b57\u6bb5\n                            sqlInfo.setSelectAll(true);\n                            sqlInfo.setSelectFields(null);\n                            sqlInfo.setRealSelectFields(null);\n                        }\n                    }\n                    // 6.3 \u5404\u79cd\u5b57\u6bb5\u8868\u8fbe\u5f0f\u5904\u7406\n                    else if (selectItem instanceof SelectExpressionItem) {\n                        SelectExpressionItem selectExpressionItem = (SelectExpressionItem) selectItem;\n                        Expression expression = selectExpressionItem.getExpression();\n                        Alias alias = selectExpressionItem.getAlias();\n                        this.handleExpression(expression, alias, plainSelect.getFromItem());\n                    }\n                }\n            } else {\n                log.warn(\"\u6682\u65f6\u5c1a\u672a\u5904\u7406\u8be5\u7c7b\u578b\u7684 SelectBody: {}\", selectBody.getClass().getName());\n                throw new JeecgBootException(\"\u6682\u65f6\u5c1a\u672a\u5904\u7406\u8be5\u7c7b\u578b\u7684 SelectBody\");\n            }\n        } else {\n            // \u975e select \u67e5\u8be2sql\uff0c\u4e0d\u505a\u5904\u7406\n            throw new JeecgBootException(\"\u975e select \u67e5\u8be2sql\uff0c\u4e0d\u505a\u5904\u7406\");\n        }\n        return this.allTableMap;\n    }\n\n    /**\n     * \u5904\u7406\u5b50\u67e5\u8be2\n     *\n     * @param subSelect\n     */\n    private void handleSubSelect(SubSelect subSelect) {\n        try {\n            String subSelectSql = subSelect.getSelectBody().toString();\n            // \u9012\u5f52\u8c03\u7528\u89e3\u6790\n            Map<String, SelectSqlInfo> map = JSqlParserUtils.parseAllSelectTable(subSelectSql);\n            if (map != null) {\n                this.assignMap(map);\n            }\n        } catch (Exception e) {\n            log.error(\"\u89e3\u6790\u5b50\u67e5\u8be2\u51fa\u9519\", e);\n        }\n    }\n\n    /**\n     * \u5904\u7406\u67e5\u8be2\u5b57\u6bb5\u8868\u8fbe\u5f0f\n     *\n     * @param expression\n     */\n    private void handleExpression(Expression expression, Alias alias, FromItem fromItem) {\n        // \u5904\u7406\u51fd\u6570\u5f0f\u5b57\u6bb5  CONCAT(name,'(',age,')')\n        if (expression instanceof Function) {\n            Function functionExp = (Function) expression;\n            List<Expression> expressions = functionExp.getParameters().getExpressions();\n            for (Expression expItem : expressions) {\n                this.handleExpression(expItem, null, fromItem);\n            }\n            return;\n        }\n        // \u5904\u7406\u5b57\u6bb5\u4e0a\u7684\u5b50\u67e5\u8be2\n        if (expression instanceof SubSelect) {\n            this.handleSubSelect((SubSelect) expression);\n            return;\n        }\n        // \u4e0d\u5904\u7406\u5b57\u9762\u91cf\n        if (expression instanceof StringValue ||\n                expression instanceof NullValue ||\n                expression instanceof LongValue ||\n                expression instanceof DoubleValue ||\n                expression instanceof HexValue ||\n                expression instanceof DateValue ||\n                expression instanceof TimestampValue ||\n                expression instanceof TimeValue\n        ) {\n            return;\n        }\n\n        // \u5904\u7406\u5b57\u6bb5\n        if (expression instanceof Column) {\n            Column column = (Column) expression;\n            // \u67e5\u8be2\u5b57\u6bb5\u540d\n            String fieldName = column.getColumnName();\n            String aliasName = fieldName;\n            if (alias != null) {\n                aliasName = alias.getName();\n            }\n            String tableName;\n            if (column.getTable() != null) {\n                // \u901a\u8fc7\u5217\u7684\u8868\u540d\u83b7\u53d6 sqlInfo\n                // \u4f8b\u5982 user.name\uff0c\u8fd9\u91cc\u7684 tableName \u5c31\u662f user\n                tableName = column.getTable().getName();\n                // \u6709\u53ef\u80fd\u662f\u522b\u540d\uff0c\u9700\u8981\u8f6c\u6362\u4e3a\u771f\u5b9e\u8868\u540d\n                if (this.tableAliasMap.get(tableName) != null) {\n                    tableName = this.tableAliasMap.get(tableName);\n                }\n            } else {\n                // \u5f53column\u7684table\u4e3a\u7a7a\u65f6\uff0c\u8bf4\u660e\u662f fromItem \u4e2d\u7684\u5b57\u6bb5\n                tableName = ((Table) fromItem).getName();\n            }\n            SelectSqlInfo $sqlInfo = this.allTableMap.get(tableName);\n            if ($sqlInfo != null) {\n                $sqlInfo.addSelectField(aliasName, fieldName);\n            } else {\n                log.warn(\"\u53d1\u751f\u610f\u5916\u60c5\u51b5\uff0c\u672a\u627e\u5230\u8868\u540d\u4e3a {} \u7684 SelectSqlInfo\", tableName);\n            }\n        }\n    }\n\n    /**\n     * \u6839\u636e\u8868\u540d\u6dfb\u52a0sqlInfo\n     *\n     * @param table\n     */\n    private void addSqlInfoByTable(Table table) {\n        String tableName = table.getName();\n        // \u89e3\u6790 aliasName\n        if (table.getAlias() != null) {\n            this.tableAliasMap.put(table.getAlias().getName(), tableName);\n        }\n        SelectSqlInfo sqlInfo = new SelectSqlInfo(this.parsedSql);\n        sqlInfo.setFromTableName(table.getName());\n        this.allTableMap.put(sqlInfo.getFromTableName(), sqlInfo);\n    }\n\n    /**\n     * \u5408\u5e76map\n     *\n     * @param source\n     */\n    private void assignMap(Map<String, SelectSqlInfo> source) {\n        for (Map.Entry<String, SelectSqlInfo> entry : source.entrySet()) {\n            SelectSqlInfo sqlInfo = this.allTableMap.get(entry.getKey());\n            if (sqlInfo == null) {\n                this.allTableMap.put(entry.getKey(), entry.getValue());\n            } else {\n                // \u5408\u5e76\n                if (sqlInfo.getSelectFields() == null) {\n                    sqlInfo.setSelectFields(entry.getValue().getSelectFields());\n                } else {\n                    sqlInfo.getSelectFields().addAll(entry.getValue().getSelectFields());\n                }\n                if (sqlInfo.getRealSelectFields() == null) {\n                    sqlInfo.setRealSelectFields(entry.getValue().getRealSelectFields());\n                } else {\n                    sqlInfo.getRealSelectFields().addAll(entry.getValue().getRealSelectFields());\n                }\n            }\n        }\n    }\n\n}\n",
        "simple_context": "package org.jeecg.common.util.sqlparse;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport net.sf.jsqlparser.JSQLParserException;\n\nimport net.sf.jsqlparser.expression;\n\nimport net.sf.jsqlparser.parser.CCJSqlParserManager;\n\nimport net.sf.jsqlparser.schema.Column;\n\nimport net.sf.jsqlparser.schema.Table;\n\nimport net.sf.jsqlparser.statement.Statement;\n\nimport net.sf.jsqlparser.statement.select;\n\nimport org.jeecg.common.exception.JeecgBootException;\n\nimport org.jeecg.common.util.sqlparse.vo.SelectSqlInfo;\n\nimport java.io.StringReader;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.List;\n\nimport java.util.Map;\n\npublic class JSqlParserAllTableManager {\n    final private String sql;\n    final private Map<String, SelectSqlInfo> allTableMap;\n    final private Map<String, String> tableAliasMap;\n    private String parsedSql;\n    JSqlParserAllTableManager(String selectSql);\n    public Map<String, SelectSqlInfo> parse()throws JSQLParserException;\n    private  handleSubSelect(SubSelect subSelect);\n    private  handleExpression(Expression expression, Alias alias, FromItem fromItem);\n    private  addSqlInfoByTable(Table table);\n    private  assignMap(Map<String, SelectSqlInfo> source);\n}\n\n"
    },
    {
        "project_name": "jeecg-boot",
        "file_name": "MyClassLoader.java",
        "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/MyClassLoader.java",
        "execute_path": "jeecg-boot",
        "package": "org.jeecg.common.util",
        "docstring": "/**\n     * \u83b7\u5f97\u7c7b\u7684\u5168\u540d\uff0c\u5305\u62ec\u5305\u540d\n     * @param object\n     * @return\n     */",
        "source_code": "\nlic static String getPackPath(Object object) {\n \u68c0\u67e5\u7528\u6237\u4f20\u5165\u7684\u53c2\u6570\u662f\u5426\u4e3a\u7a7a\n (object == null) {\nhrow new java.lang.IllegalArgumentException(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\");\n\n \u83b7\u5f97\u7c7b\u7684\u5168\u540d\uff0c\u5305\u62ec\u5305\u540d\nring clsName = object.getClass().getName();\nturn clsName;\n\n",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "argument_name": [
            "Object object"
        ],
        "full_context": "package org.jeecg.common.util;\n\nimport org.jeecg.common.constant.SymbolConstant;\n\n/**\n * @Author  \u5f20\u4ee3\u6d69\n */\npublic class MyClassLoader extends ClassLoader {\n\tpublic static Class getClassByScn(String className) {\n\t\tClass myclass = null;\n\t\ttry {\n\t\t\tmyclass = Class.forName(className);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException(className+\" not found!\");\n\t\t}\n\t\treturn myclass;\n\t}\n\n    /**\n     * \u83b7\u5f97\u7c7b\u7684\u5168\u540d\uff0c\u5305\u62ec\u5305\u540d\n     * @param object\n     * @return\n     */\n\tpublic static String getPackPath(Object object) {\n\t\t// \u68c0\u67e5\u7528\u6237\u4f20\u5165\u7684\u53c2\u6570\u662f\u5426\u4e3a\u7a7a\n\t\tif (object == null) {\n\t\t\tthrow new java.lang.IllegalArgumentException(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\");\n\t\t}\n\t\t// \u83b7\u5f97\u7c7b\u7684\u5168\u540d\uff0c\u5305\u62ec\u5305\u540d\n\t\tString clsName = object.getClass().getName();\n\t\treturn clsName;\n\t}\n\n\tpublic static String getAppPath(Class cls) {\n\t\t// \u68c0\u67e5\u7528\u6237\u4f20\u5165\u7684\u53c2\u6570\u662f\u5426\u4e3a\u7a7a\n\t\tif (cls == null) {\n\t\t\tthrow new java.lang.IllegalArgumentException(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\");\n\t\t}\n\t\tClassLoader loader = cls.getClassLoader();\n\t\t// \u83b7\u5f97\u7c7b\u7684\u5168\u540d\uff0c\u5305\u62ec\u5305\u540d\n\t\tString clsName = cls.getName() + \".class\";\n\t\t// \u83b7\u5f97\u4f20\u5165\u53c2\u6570\u6240\u5728\u7684\u5305\n\t\tPackage pack = cls.getPackage();\n\t\tString path = \"\";\n\t\t// \u5982\u679c\u4e0d\u662f\u533f\u540d\u5305\uff0c\u5c06\u5305\u540d\u8f6c\u5316\u4e3a\u8def\u5f84\n\t\tif (pack != null) {\n\t\t\tString packName = pack.getName();\n\t\t\tString javaSpot=\"java.\";\n\t\t\tString javaxSpot=\"javax.\";\n\t\t\t// \u6b64\u5904\u7b80\u5355\u5224\u5b9a\u662f\u5426\u662fJava\u57fa\u7840\u7c7b\u5e93\uff0c\u9632\u6b62\u7528\u6237\u4f20\u5165JDK\u5185\u7f6e\u7684\u7c7b\u5e93\n\t\t\tif (packName.startsWith(javaSpot) || packName.startsWith(javaxSpot)) {\n\t\t\t\tthrow new java.lang.IllegalArgumentException(\"\u4e0d\u8981\u4f20\u9001\u7cfb\u7edf\u7c7b\uff01\");\n\t\t\t}\n\t\t\t// \u5728\u7c7b\u7684\u540d\u79f0\u4e2d\uff0c\u53bb\u6389\u5305\u540d\u7684\u90e8\u5206\uff0c\u83b7\u5f97\u7c7b\u7684\u6587\u4ef6\u540d\n\t\t\tclsName = clsName.substring(packName.length() + 1);\n\t\t\t// \u5224\u5b9a\u5305\u540d\u662f\u5426\u662f\u7b80\u5355\u5305\u540d\uff0c\u5982\u679c\u662f\uff0c\u5219\u76f4\u63a5\u5c06\u5305\u540d\u8f6c\u6362\u4e3a\u8def\u5f84\uff0c\n\t\t\tif (packName.indexOf(SymbolConstant.SPOT) < 0) {\n\t\t\t\tpath = packName + \"/\";\n\t\t\t} else {\n                // \u5426\u5219\u6309\u7167\u5305\u540d\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u5c06\u5305\u540d\u8f6c\u6362\u4e3a\u8def\u5f84\n\t\t\t\tint start = 0, end = 0;\n\t\t\t\tend = packName.indexOf(\".\");\n\t\t\t\tStringBuilder pathBuilder = new StringBuilder();\n\t\t\t\twhile (end != -1) {\n                    pathBuilder.append(packName, start, end).append(\"/\");\n\t\t\t\t\tstart = end + 1;\n\t\t\t\t\tend = packName.indexOf(\".\", start);\n\t\t\t\t}\n\t\t\t\tif(oConvertUtils.isNotEmpty(pathBuilder.toString())){\n                    path = pathBuilder.toString();\n                }\n\t\t\t\tpath = path + packName.substring(start) + \"/\";\n\t\t\t}\n\t\t}\n\t\t// \u8c03\u7528ClassLoader\u7684getResource\u65b9\u6cd5\uff0c\u4f20\u5165\u5305\u542b\u8def\u5f84\u4fe1\u606f\u7684\u7c7b\u6587\u4ef6\u540d\n\t\tjava.net.URL url = loader.getResource(path + clsName);\n\t\t// \u4eceURL\u5bf9\u8c61\u4e2d\u83b7\u53d6\u8def\u5f84\u4fe1\u606f\n\t\tString realPath = url.getPath();\n\t\t// \u53bb\u6389\u8def\u5f84\u4fe1\u606f\u4e2d\u7684\u534f\u8bae\u540d\"file:\"\n\t\tint pos = realPath.indexOf(\"file:\");\n\t\tif (pos > -1) {\n\t\t\trealPath = realPath.substring(pos + 5);\n\t\t}\n\t\t// \u53bb\u6389\u8def\u5f84\u4fe1\u606f\u6700\u540e\u5305\u542b\u7c7b\u6587\u4ef6\u4fe1\u606f\u7684\u90e8\u5206\uff0c\u5f97\u5230\u7c7b\u6240\u5728\u7684\u8def\u5f84\n\t\tpos = realPath.indexOf(path + clsName);\n\t\trealPath = realPath.substring(0, pos - 1);\n\t\t// \u5982\u679c\u7c7b\u6587\u4ef6\u88ab\u6253\u5305\u5230JAR\u7b49\u6587\u4ef6\u4e2d\u65f6\uff0c\u53bb\u6389\u5bf9\u5e94\u7684JAR\u7b49\u6253\u5305\u6587\u4ef6\u540d\n\t\tif (realPath.endsWith(SymbolConstant.EXCLAMATORY_MARK)) {\n\t\t\trealPath = realPath.substring(0, realPath.lastIndexOf(\"/\"));\n\t\t}\n\t\t/*------------------------------------------------------------  \n\t\t ClassLoader\u7684getResource\u65b9\u6cd5\u4f7f\u7528\u4e86utf-8\u5bf9\u8def\u5f84\u4fe1\u606f\u8fdb\u884c\u4e86\u7f16\u7801\uff0c\u5f53\u8def\u5f84  \n\t\t  \u4e2d\u5b58\u5728\u4e2d\u6587\u548c\u7a7a\u683c\u65f6\uff0c\u4ed6\u4f1a\u5bf9\u8fd9\u4e9b\u5b57\u7b26\u8fdb\u884c\u8f6c\u6362\uff0c\u8fd9\u6837\uff0c\u5f97\u5230\u7684\u5f80\u5f80\u4e0d\u662f\u6211\u4eec\u60f3\u8981  \n\t\t  \u7684\u771f\u5b9e\u8def\u5f84\uff0c\u5728\u6b64\uff0c\u8c03\u7528\u4e86URLDecoder\u7684decode\u65b9\u6cd5\u8fdb\u884c\u89e3\u7801\uff0c\u4ee5\u4fbf\u5f97\u5230\u539f\u59cb\u7684  \n\t\t  \u4e2d\u6587\u53ca\u7a7a\u683c\u8def\u5f84  \n\t\t-------------------------------------------------------------*/\n\t\ttry {\n\t\t\trealPath = java.net.URLDecoder.decode(realPath, \"utf-8\");\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\treturn realPath;\n\t}// getAppPath\u5b9a\u4e49\u7ed3\u675f\n}\n",
        "simple_context": "package org.jeecg.common.util;\n\nimport org.jeecg.common.constant.SymbolConstant;\n\npublic class MyClassLoader extends ClassLoader {\n    static public Class getClassByScn(String className);\n    static public String getPackPath(Object object);\n    static public String getAppPath(Class cls);\n}\n\n"
    },
    {
        "project_name": "jeecg-boot",
        "file_name": "MySwaggerResourceProvider.java",
        "relative_path": "jeecg-boot/jeecg-server-cloud/jeecg-cloud-gateway/src/main/java/org/jeecg/handler/swagger/MySwaggerResourceProvider.java",
        "execute_path": "jeecg-boot/jeecg-server-cloud",
        "package": "org.jeecg.handler.swagger",
        "docstring": "/**\n     * \u68c0\u6d4bnacos\u4e2d\u662f\u5426\u6709\u5065\u5eb7\u5b9e\u4f8b\n     * @param routeId\n     * @return\n     */",
        "source_code": "\nprivate Boolean checkRoute(String routeId) {\n    Boolean hasRoute = false;\n    try {\n        //\u4fee\u590d\u4f7f\u7528\u5e26\u547d\u540d\u7a7a\u95f4\u542f\u52a8\u7f51\u5173swagger\u770b\u4e0d\u5230\u63a5\u53e3\u6587\u6863\u7684\u95ee\u9898\n        Properties properties=new Properties();\n        properties.setProperty(\"serverAddr\",serverAddr);\n        if(namespace!=null && !\"\".equals(namespace)){\n            log.info(\"nacos.discovery.namespace = {}\", namespace);\n            properties.setProperty(\"namespace\",namespace);\n        }\n        if(username!=null && !\"\".equals(username)){\n            properties.setProperty(\"username\",username);\n        }\n        if(password!=null && !\"\".equals(password)){\n            properties.setProperty(\"password\",password);\n        }\n        //\u3010issues/5115\u3011\u56e0swagger\u6587\u6863\u5bfc\u81f4gateway\u5185\u5b58\u6ea2\u51fa\n        if (this.naming == null) {\n            this.naming = NamingFactory.createNamingService(properties);\n        }\n        log.info(\" config.group : {}\", group);\n        List<Instance> list = this.naming.selectInstances(routeId, group , true);\n        if (ObjectUtil.isNotEmpty(list)) {\n            hasRoute = true;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return hasRoute;\n}\n",
        "class_name": "MySwaggerResourceProvider",
        "method_name": "checkRoute",
        "argument_name": [
            "String routeId"
        ],
        "full_context": "package org.jeecg.handler.swagger;\n\nimport cn.hutool.core.util.ArrayUtil;\nimport cn.hutool.core.util.ObjectUtil;\nimport com.alibaba.nacos.api.naming.NamingFactory;\nimport com.alibaba.nacos.api.naming.NamingService;\nimport com.alibaba.nacos.api.naming.pojo.Instance;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Component;\n\nimport springfox.documentation.swagger.web.SwaggerResource;\nimport springfox.documentation.swagger.web.SwaggerResourcesProvider;\n\nimport java.util.*;\n\n/**\n * \u805a\u5408\u5404\u4e2a\u670d\u52a1\u7684swagger\u63a5\u53e3\n * @author zyf\n * @date: 2022/4/21 10:55\n */\n@Component\n@Slf4j\n@Primary\npublic class MySwaggerResourceProvider implements SwaggerResourcesProvider {\n    /**\n     * swagger2\u9ed8\u8ba4\u7684url\u540e\u7f00\n     */\n    private static final String SWAGGER2URL = \"/v2/api-docs\";\n\n    /**\n     * \u7f51\u5173\u8def\u7531\n     */\n    private final RouteLocator routeLocator;\n    /**\n     * Nacos\u540d\u5b57\u670d\u52a1\n     */\n    private NamingService naming;\n\n    /**\n     * nacos\u670d\u52a1\u5730\u5740\n     */\n    @Value(\"${spring.cloud.nacos.discovery.server-addr}\")\n    private String serverAddr;\n    /**\n     * nacos namespace\n     */\n    @Value(\"${spring.cloud.nacos.discovery.namespace:#{null}}\")\n    private String namespace;\n    \n    /**\n     * nacos groupName\n     */\n    @Value(\"${spring.cloud.nacos.config.group:DEFAULT_GROUP:#{null}}\")\n    private String group;\n    \n    /**\n     * nacos username\n     */\n    @Value(\"${spring.cloud.nacos.discovery.username:#{null}}\")\n    private String username;\n    /**\n     * nacos password\n     */\n    @Value(\"${spring.cloud.nacos.discovery.password:#{null}}\")\n    private String password;\n    \n    /**\n     * Swagger\u4e2d\u9700\u8981\u6392\u9664\u7684\u670d\u52a1\n     */\n    private String[] excludeServiceIds=new String[]{\"jeecg-cloud-monitor\"};\n\n\n    /**\n     * \u7f51\u5173\u5e94\u7528\u540d\u79f0\n     */\n    @Value(\"${spring.application.name}\")\n    private String self;\n\n    @Autowired\n    public MySwaggerResourceProvider(RouteLocator routeLocator) {\n        this.routeLocator = routeLocator;\n    }\n\n    @Override\n    public List<SwaggerResource> get() {\n        List<SwaggerResource> resources = new ArrayList<>();\n        List<String> routeHosts = new ArrayList<>();\n        // \u83b7\u53d6\u6240\u6709\u53ef\u7528\u7684host\uff1aserviceId\n        routeLocator.getRoutes().filter(route -> route.getUri().getHost() != null)\n                .filter(route -> !self.equals(route.getUri().getHost()))\n                .subscribe(route ->{\n                    //update-begin---author:zyf ---date:20220413 for\uff1a\u8fc7\u6ee4\u6389\u65e0\u6548\u8def\u7531,\u907f\u514d\u63a5\u53e3\u6587\u6863\u62a5\u9519\u65e0\u6cd5\u6253\u5f00\n                    boolean hasRoute=checkRoute(route.getId());\n                    if(hasRoute){\n                        routeHosts.add(route.getUri().getHost());\n                    }\n                    //update-end---author:zyf ---date:20220413 for\uff1a\u8fc7\u6ee4\u6389\u65e0\u6548\u8def\u7531,\u907f\u514d\u63a5\u53e3\u6587\u6863\u62a5\u9519\u65e0\u6cd5\u6253\u5f00\n                });\n\n        // \u8bb0\u5f55\u5df2\u7ecf\u6dfb\u52a0\u8fc7\u7684server\uff0c\u5b58\u5728\u540c\u4e00\u4e2a\u5e94\u7528\u6ce8\u518c\u4e86\u591a\u4e2a\u670d\u52a1\u5728nacos\u4e0a\n        Set<String> dealed = new HashSet<>();\n        routeHosts.forEach(instance -> {\n            // \u62fc\u63a5url\n            String url = \"/\" + instance.toLowerCase() + SWAGGER2URL;\n            if (!dealed.contains(url)) {\n                dealed.add(url);\n                log.info(\" Gateway add SwaggerResource: {}\",url);\n                SwaggerResource swaggerResource = new SwaggerResource();\n                swaggerResource.setUrl(url);\n                swaggerResource.setSwaggerVersion(\"2.0\");\n                swaggerResource.setName(instance);\n                //Swagger\u6392\u9664\u4e0d\u5c55\u793a\u7684\u670d\u52a1\n                if(!ArrayUtil.contains(excludeServiceIds,instance)){\n                    resources.add(swaggerResource);\n                }\n            }\n        });\n        return resources;\n    }\n\n    /**\n     * \u68c0\u6d4bnacos\u4e2d\u662f\u5426\u6709\u5065\u5eb7\u5b9e\u4f8b\n     * @param routeId\n     * @return\n     */\n    private Boolean checkRoute(String routeId) {\n        Boolean hasRoute = false;\n        try {\n            //\u4fee\u590d\u4f7f\u7528\u5e26\u547d\u540d\u7a7a\u95f4\u542f\u52a8\u7f51\u5173swagger\u770b\u4e0d\u5230\u63a5\u53e3\u6587\u6863\u7684\u95ee\u9898\n            Properties properties=new Properties();\n            properties.setProperty(\"serverAddr\",serverAddr);\n            if(namespace!=null && !\"\".equals(namespace)){\n                log.info(\"nacos.discovery.namespace = {}\", namespace);\n                properties.setProperty(\"namespace\",namespace);\n            }\n            if(username!=null && !\"\".equals(username)){\n                properties.setProperty(\"username\",username);\n            }\n            if(password!=null && !\"\".equals(password)){\n                properties.setProperty(\"password\",password);\n            }\n            //\u3010issues/5115\u3011\u56e0swagger\u6587\u6863\u5bfc\u81f4gateway\u5185\u5b58\u6ea2\u51fa\n            if (this.naming == null) {\n                this.naming = NamingFactory.createNamingService(properties);\n            }\n            log.info(\" config.group : {}\", group);\n            List<Instance> list = this.naming.selectInstances(routeId, group , true);\n            if (ObjectUtil.isNotEmpty(list)) {\n                hasRoute = true;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return hasRoute;\n    }\n}",
        "simple_context": "package org.jeecg.handler.swagger;\n\nimport cn.hutool.core.util.ArrayUtil;\n\nimport cn.hutool.core.util.ObjectUtil;\n\nimport com.alibaba.nacos.api.naming.NamingFactory;\n\nimport com.alibaba.nacos.api.naming.NamingService;\n\nimport com.alibaba.nacos.api.naming.pojo.Instance;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport org.springframework.beans.factory.annotation.Value;\n\nimport org.springframework.cloud.gateway.route.RouteLocator;\n\nimport org.springframework.context.annotation.Primary;\n\nimport org.springframework.stereotype.Component;\n\nimport springfox.documentation.swagger.web.SwaggerResource;\n\nimport springfox.documentation.swagger.web.SwaggerResourcesProvider;\n\nimport java.util;\n\npublic class MySwaggerResourceProvider implements SwaggerResourcesProvider {\n    static final private String SWAGGER2URL;\n    final private RouteLocator routeLocator;\n    private NamingService naming;\n    private String serverAddr;\n    private String namespace;\n    private String group;\n    private String username;\n    private String password;\n    private String excludeServiceIds;\n    private String self;\n    public MySwaggerResourceProvider(RouteLocator routeLocator);\n    public List<SwaggerResource> get();\n    private Boolean checkRoute(String routeId);\n}\n\n"
    },
    {
        "project_name": "jeecg-boot",
        "file_name": "DynamicRouteService.java",
        "relative_path": "jeecg-boot/jeecg-server-cloud/jeecg-cloud-gateway/src/main/java/org/jeecg/loader/repository/DynamicRouteService.java",
        "execute_path": "jeecg-boot/jeecg-server-cloud",
        "package": "org.jeecg.loader.repository",
        "docstring": "/**\n     * \u66f4\u65b0\u8def\u7531\n     *\n     * @param definition\n     * @return\n     */",
        "source_code": "\npublic synchronized String update(RouteDefinition definition) {\n    try {\n        log.info(\"gateway update route {}\", definition);\n    } catch (Exception e) {\n        return \"update fail,not find route  routeId: \" + definition.getId();\n    }\n    try {\n        repository.save(Mono.just(definition)).subscribe();\n        this.publisher.publishEvent(new RefreshRoutesEvent(this));\n        return \"success\";\n    } catch (Exception e) {\n        return \"update route fail\";\n    }\n}\n",
        "class_name": "DynamicRouteService",
        "method_name": "update",
        "argument_name": [
            "RouteDefinition definition"
        ],
        "full_context": "package org.jeecg.loader.repository;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.jeecg.loader.repository.MyInMemoryRouteDefinitionRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cloud.gateway.event.RefreshRoutesEvent;\nimport org.springframework.cloud.gateway.route.RouteDefinition;\nimport org.springframework.context.ApplicationEventPublisher;\nimport org.springframework.context.ApplicationEventPublisherAware;\nimport org.springframework.stereotype.Service;\nimport reactor.core.publisher.Mono;\n\n/**\n * \u52a8\u6001\u66f4\u65b0\u8def\u7531\u7f51\u5173service\n * 1\uff09\u5b9e\u73b0\u4e00\u4e2aSpring\u63d0\u4f9b\u7684\u4e8b\u4ef6\u63a8\u9001\u63a5\u53e3ApplicationEventPublisherAware\n * 2\uff09\u63d0\u4f9b\u52a8\u6001\u8def\u7531\u7684\u57fa\u7840\u65b9\u6cd5\uff0c\u53ef\u901a\u8fc7\u83b7\u53d6bean\u64cd\u4f5c\u8be5\u7c7b\u7684\u65b9\u6cd5\u3002\u8be5\u7c7b\u63d0\u4f9b\u65b0\u589e\u8def\u7531\u3001\u66f4\u65b0\u8def\u7531\u3001\u5220\u9664\u8def\u7531\uff0c\u7136\u540e\u5b9e\u73b0\u53d1\u5e03\u7684\u529f\u80fd\u3002\n *\n * @author zyf\n */\n@Slf4j\n@Service\npublic class DynamicRouteService implements ApplicationEventPublisherAware {\n\n    @Autowired\n    private MyInMemoryRouteDefinitionRepository repository;\n\n    /**\n     * \u53d1\u5e03\u4e8b\u4ef6\n     */\n\n    private ApplicationEventPublisher publisher;\n\n    @Override\n    public void setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher) {\n        this.publisher = applicationEventPublisher;\n    }\n\n    \n    public void setRepository(MyInMemoryRouteDefinitionRepository repository){\n        this.repository = repository;\n    }\n\n    /**\n     * \u5220\u9664\u8def\u7531\n     *\n     * @param id\n     * @return\n     */\n    public synchronized void delete(String id) {\n        try {\n            repository.delete(Mono.just(id)).subscribe();\n            this.publisher.publishEvent(new RefreshRoutesEvent(this));\n        }catch (Exception e){\n            log.warn(e.getMessage(),e);\n        }\n    }\n\n    /**\n     * \u66f4\u65b0\u8def\u7531\n     *\n     * @param definition\n     * @return\n     */\n    public synchronized String update(RouteDefinition definition) {\n        try {\n            log.info(\"gateway update route {}\", definition);\n        } catch (Exception e) {\n            return \"update fail,not find route  routeId: \" + definition.getId();\n        }\n        try {\n            repository.save(Mono.just(definition)).subscribe();\n            this.publisher.publishEvent(new RefreshRoutesEvent(this));\n            return \"success\";\n        } catch (Exception e) {\n            return \"update route fail\";\n        }\n    }\n\n    /**\n     * \u589e\u52a0\u8def\u7531\n     *\n     * @param definition\n     * @return\n     */\n    public synchronized String add(RouteDefinition definition) {\n        log.info(\"gateway add route {}\", definition);\n        try {\n            repository.save(Mono.just(definition)).subscribe();\n        } catch (Exception e) {\n            log.warn(e.getMessage(),e);\n        }\n        return \"success\";\n    }\n}",
        "simple_context": "package org.jeecg.loader.repository;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.jeecg.loader.repository.MyInMemoryRouteDefinitionRepository;\n\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport org.springframework.cloud.gateway.event.RefreshRoutesEvent;\n\nimport org.springframework.cloud.gateway.route.RouteDefinition;\n\nimport org.springframework.context.ApplicationEventPublisher;\n\nimport org.springframework.context.ApplicationEventPublisherAware;\n\nimport org.springframework.stereotype.Service;\n\nimport reactor.core.publisher.Mono;\n\npublic class DynamicRouteService implements ApplicationEventPublisherAware {\n    private MyInMemoryRouteDefinitionRepository repository;\n    private ApplicationEventPublisher publisher;\n    public  setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher);\n    public  setRepository(MyInMemoryRouteDefinitionRepository repository);\n    public synchronized  delete(String id);\n    public synchronized String update(RouteDefinition definition);\n    public synchronized String add(RouteDefinition definition);\n}\n\n"
    }
]